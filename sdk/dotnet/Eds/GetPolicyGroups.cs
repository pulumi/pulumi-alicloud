// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eds
{
    public static class GetPolicyGroups
    {
        /// <summary>
        /// This data source provides the Ecd Policy Groups of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.130.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = new AliCloud.Eds.EcdPolicyGroup("default", new AliCloud.Eds.EcdPolicyGroupArgs
        ///         {
        ///             PolicyGroupName = "my-policy-group",
        ///             Clipboard = "read",
        ///             LocalDrive = "read",
        ///             UsbRedirect = "off",
        ///             Watermark = "off",
        ///             AuthorizeAccessPolicyRules = 
        ///             {
        ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs
        ///                 {
        ///                     Description = "my-description1",
        ///                     CidrIp = "1.2.3.45/24",
        ///                 },
        ///             },
        ///             AuthorizeSecurityPolicyRules = 
        ///             {
        ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs
        ///                 {
        ///                     Type = "inflow",
        ///                     Policy = "accept",
        ///                     Description = "my-description",
        ///                     PortRange = "80/80",
        ///                     IpProtocol = "TCP",
        ///                     Priority = "1",
        ///                     CidrIp = "1.2.3.4/24",
        ///                 },
        ///             },
        ///         });
        ///         var nameRegex = Output.Create(AliCloud.Eds.GetPolicyGroups.InvokeAsync(new AliCloud.Eds.GetPolicyGroupsArgs
        ///         {
        ///             NameRegex = "^my-policy",
        ///         }));
        ///         this.EcdPolicyGroupId = nameRegex.Apply(nameRegex =&gt; nameRegex.Groups?[0]?.Id);
        ///     }
        /// 
        ///     [Output("ecdPolicyGroupId")]
        ///     public Output&lt;string&gt; EcdPolicyGroupId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyGroupsResult> InvokeAsync(GetPolicyGroupsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyGroupsResult>("alicloud:eds/getPolicyGroups:getPolicyGroups", args ?? new GetPolicyGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Ecd Policy Groups of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.130.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = new AliCloud.Eds.EcdPolicyGroup("default", new AliCloud.Eds.EcdPolicyGroupArgs
        ///         {
        ///             PolicyGroupName = "my-policy-group",
        ///             Clipboard = "read",
        ///             LocalDrive = "read",
        ///             UsbRedirect = "off",
        ///             Watermark = "off",
        ///             AuthorizeAccessPolicyRules = 
        ///             {
        ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs
        ///                 {
        ///                     Description = "my-description1",
        ///                     CidrIp = "1.2.3.45/24",
        ///                 },
        ///             },
        ///             AuthorizeSecurityPolicyRules = 
        ///             {
        ///                 new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs
        ///                 {
        ///                     Type = "inflow",
        ///                     Policy = "accept",
        ///                     Description = "my-description",
        ///                     PortRange = "80/80",
        ///                     IpProtocol = "TCP",
        ///                     Priority = "1",
        ///                     CidrIp = "1.2.3.4/24",
        ///                 },
        ///             },
        ///         });
        ///         var nameRegex = Output.Create(AliCloud.Eds.GetPolicyGroups.InvokeAsync(new AliCloud.Eds.GetPolicyGroupsArgs
        ///         {
        ///             NameRegex = "^my-policy",
        ///         }));
        ///         this.EcdPolicyGroupId = nameRegex.Apply(nameRegex =&gt; nameRegex.Groups?[0]?.Id);
        ///     }
        /// 
        ///     [Output("ecdPolicyGroupId")]
        ///     public Output&lt;string&gt; EcdPolicyGroupId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyGroupsResult> Invoke(GetPolicyGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPolicyGroupsResult>("alicloud:eds/getPolicyGroups:getPolicyGroups", args ?? new GetPolicyGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyGroupsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Policy Group IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Policy Group name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetPolicyGroupsArgs()
        {
        }
    }

    public sealed class GetPolicyGroupsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Policy Group IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Policy Group name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetPolicyGroupsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyGroupsResult
    {
        public readonly ImmutableArray<Outputs.GetPolicyGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly string? Status;

        [OutputConstructor]
        private GetPolicyGroupsResult(
            ImmutableArray<Outputs.GetPolicyGroupsGroupResult> groups,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            string? status)
        {
            Groups = groups;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Status = status;
        }
    }
}
