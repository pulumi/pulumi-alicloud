// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eds
{
    /// <summary>
    /// Provides a Elastic Desktop Service (ECD) Policy Group resource.
    /// 
    /// For information about Elastic Desktop Service (ECD) Policy Group and how to use it, see [What is Policy Group](https://help.aliyun.com/document_detail/188382.html).
    /// 
    /// &gt; **NOTE:** Available in v1.130.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new AliCloud.Eds.EcdPolicyGroup("default", new()
    ///     {
    ///         AuthorizeAccessPolicyRules = new[]
    ///         {
    ///             new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs
    ///             {
    ///                 CidrIp = "1.2.3.45/24",
    ///                 Description = "my-description1",
    ///             },
    ///         },
    ///         AuthorizeSecurityPolicyRules = new[]
    ///         {
    ///             new AliCloud.Eds.Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs
    ///             {
    ///                 CidrIp = "1.2.3.4/24",
    ///                 Description = "my-description",
    ///                 IpProtocol = "TCP",
    ///                 Policy = "accept",
    ///                 PortRange = "80/80",
    ///                 Priority = "1",
    ///                 Type = "inflow",
    ///             },
    ///         },
    ///         Clipboard = "read",
    ///         LocalDrive = "read",
    ///         PolicyGroupName = "my-policy-group",
    ///         UsbRedirect = "off",
    ///         Watermark = "off",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Elastic Desktop Service (ECD) Policy Group can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:eds/ecdPolicyGroup:EcdPolicyGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eds/ecdPolicyGroup:EcdPolicyGroup")]
    public partial class EcdPolicyGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The rule of authorize access rule.
        /// </summary>
        [Output("authorizeAccessPolicyRules")]
        public Output<ImmutableArray<Outputs.EcdPolicyGroupAuthorizeAccessPolicyRule>> AuthorizeAccessPolicyRules { get; private set; } = null!;

        /// <summary>
        /// The policy rule.
        /// </summary>
        [Output("authorizeSecurityPolicyRules")]
        public Output<ImmutableArray<Outputs.EcdPolicyGroupAuthorizeSecurityPolicyRule>> AuthorizeSecurityPolicyRules { get; private set; } = null!;

        /// <summary>
        /// Whether to enable local camera redirection. Valid values: `on`, `off`.
        /// </summary>
        [Output("cameraRedirect")]
        public Output<string> CameraRedirect { get; private set; } = null!;

        /// <summary>
        /// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
        /// </summary>
        [Output("clipboard")]
        public Output<string> Clipboard { get; private set; } = null!;

        /// <summary>
        /// The list of domain.
        /// </summary>
        [Output("domainList")]
        public Output<string?> DomainList { get; private set; } = null!;

        /// <summary>
        /// The access of html5. Valid values: `off`, `on`.
        /// </summary>
        [Output("htmlAccess")]
        public Output<string> HtmlAccess { get; private set; } = null!;

        /// <summary>
        /// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
        /// </summary>
        [Output("htmlFileTransfer")]
        public Output<string> HtmlFileTransfer { get; private set; } = null!;

        /// <summary>
        /// Local drive redirect policy. Valid values: ` readwrite`, `off`, `read`.
        /// </summary>
        [Output("localDrive")]
        public Output<string> LocalDrive { get; private set; } = null!;

        /// <summary>
        /// The name of policy group.
        /// </summary>
        [Output("policyGroupName")]
        public Output<string?> PolicyGroupName { get; private set; } = null!;

        /// <summary>
        /// Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
        /// </summary>
        [Output("recording")]
        public Output<string> Recording { get; private set; } = null!;

        /// <summary>
        /// The end time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Output("recordingEndTime")]
        public Output<string?> RecordingEndTime { get; private set; } = null!;

        /// <summary>
        /// The screen recording video retention. Valid values between 30 and 180. This return value is meaningful only when the value of `recording` is `period` or `alltime`.
        /// </summary>
        [Output("recordingExpires")]
        public Output<int> RecordingExpires { get; private set; } = null!;

        /// <summary>
        /// The fps of recording. Valid values: `2`, `5`, `10`, `15`.
        /// </summary>
        [Output("recordingFps")]
        public Output<int> RecordingFps { get; private set; } = null!;

        /// <summary>
        /// The start time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Output("recordingStartTime")]
        public Output<string?> RecordingStartTime { get; private set; } = null!;

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The usb redirect policy. Valid values: `off`, `on`.
        /// </summary>
        [Output("usbRedirect")]
        public Output<string> UsbRedirect { get; private set; } = null!;

        /// <summary>
        /// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
        /// </summary>
        [Output("visualQuality")]
        public Output<string> VisualQuality { get; private set; } = null!;

        /// <summary>
        /// The watermark policy. Valid values: `off`, `on`.
        /// </summary>
        [Output("watermark")]
        public Output<string> Watermark { get; private set; } = null!;

        /// <summary>
        /// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
        /// </summary>
        [Output("watermarkTransparency")]
        public Output<string> WatermarkTransparency { get; private set; } = null!;

        /// <summary>
        /// The type of watemark. Valid values: `EndUserId`, `HostName`.
        /// </summary>
        [Output("watermarkType")]
        public Output<string> WatermarkType { get; private set; } = null!;


        /// <summary>
        /// Create a EcdPolicyGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EcdPolicyGroup(string name, EcdPolicyGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:eds/ecdPolicyGroup:EcdPolicyGroup", name, args ?? new EcdPolicyGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EcdPolicyGroup(string name, Input<string> id, EcdPolicyGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eds/ecdPolicyGroup:EcdPolicyGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EcdPolicyGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EcdPolicyGroup Get(string name, Input<string> id, EcdPolicyGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new EcdPolicyGroup(name, id, state, options);
        }
    }

    public sealed class EcdPolicyGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizeAccessPolicyRules")]
        private InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs>? _authorizeAccessPolicyRules;

        /// <summary>
        /// The rule of authorize access rule.
        /// </summary>
        public InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs> AuthorizeAccessPolicyRules
        {
            get => _authorizeAccessPolicyRules ?? (_authorizeAccessPolicyRules = new InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs>());
            set => _authorizeAccessPolicyRules = value;
        }

        [Input("authorizeSecurityPolicyRules")]
        private InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs>? _authorizeSecurityPolicyRules;

        /// <summary>
        /// The policy rule.
        /// </summary>
        public InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs> AuthorizeSecurityPolicyRules
        {
            get => _authorizeSecurityPolicyRules ?? (_authorizeSecurityPolicyRules = new InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs>());
            set => _authorizeSecurityPolicyRules = value;
        }

        /// <summary>
        /// Whether to enable local camera redirection. Valid values: `on`, `off`.
        /// </summary>
        [Input("cameraRedirect")]
        public Input<string>? CameraRedirect { get; set; }

        /// <summary>
        /// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
        /// </summary>
        [Input("clipboard")]
        public Input<string>? Clipboard { get; set; }

        /// <summary>
        /// The list of domain.
        /// </summary>
        [Input("domainList")]
        public Input<string>? DomainList { get; set; }

        /// <summary>
        /// The access of html5. Valid values: `off`, `on`.
        /// </summary>
        [Input("htmlAccess")]
        public Input<string>? HtmlAccess { get; set; }

        /// <summary>
        /// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
        /// </summary>
        [Input("htmlFileTransfer")]
        public Input<string>? HtmlFileTransfer { get; set; }

        /// <summary>
        /// Local drive redirect policy. Valid values: ` readwrite`, `off`, `read`.
        /// </summary>
        [Input("localDrive")]
        public Input<string>? LocalDrive { get; set; }

        /// <summary>
        /// The name of policy group.
        /// </summary>
        [Input("policyGroupName")]
        public Input<string>? PolicyGroupName { get; set; }

        /// <summary>
        /// Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
        /// </summary>
        [Input("recording")]
        public Input<string>? Recording { get; set; }

        /// <summary>
        /// The end time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Input("recordingEndTime")]
        public Input<string>? RecordingEndTime { get; set; }

        /// <summary>
        /// The screen recording video retention. Valid values between 30 and 180. This return value is meaningful only when the value of `recording` is `period` or `alltime`.
        /// </summary>
        [Input("recordingExpires")]
        public Input<int>? RecordingExpires { get; set; }

        /// <summary>
        /// The fps of recording. Valid values: `2`, `5`, `10`, `15`.
        /// </summary>
        [Input("recordingFps")]
        public Input<int>? RecordingFps { get; set; }

        /// <summary>
        /// The start time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Input("recordingStartTime")]
        public Input<string>? RecordingStartTime { get; set; }

        /// <summary>
        /// The usb redirect policy. Valid values: `off`, `on`.
        /// </summary>
        [Input("usbRedirect")]
        public Input<string>? UsbRedirect { get; set; }

        /// <summary>
        /// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
        /// </summary>
        [Input("visualQuality")]
        public Input<string>? VisualQuality { get; set; }

        /// <summary>
        /// The watermark policy. Valid values: `off`, `on`.
        /// </summary>
        [Input("watermark")]
        public Input<string>? Watermark { get; set; }

        /// <summary>
        /// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
        /// </summary>
        [Input("watermarkTransparency")]
        public Input<string>? WatermarkTransparency { get; set; }

        /// <summary>
        /// The type of watemark. Valid values: `EndUserId`, `HostName`.
        /// </summary>
        [Input("watermarkType")]
        public Input<string>? WatermarkType { get; set; }

        public EcdPolicyGroupArgs()
        {
        }
        public static new EcdPolicyGroupArgs Empty => new EcdPolicyGroupArgs();
    }

    public sealed class EcdPolicyGroupState : global::Pulumi.ResourceArgs
    {
        [Input("authorizeAccessPolicyRules")]
        private InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleGetArgs>? _authorizeAccessPolicyRules;

        /// <summary>
        /// The rule of authorize access rule.
        /// </summary>
        public InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleGetArgs> AuthorizeAccessPolicyRules
        {
            get => _authorizeAccessPolicyRules ?? (_authorizeAccessPolicyRules = new InputList<Inputs.EcdPolicyGroupAuthorizeAccessPolicyRuleGetArgs>());
            set => _authorizeAccessPolicyRules = value;
        }

        [Input("authorizeSecurityPolicyRules")]
        private InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleGetArgs>? _authorizeSecurityPolicyRules;

        /// <summary>
        /// The policy rule.
        /// </summary>
        public InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleGetArgs> AuthorizeSecurityPolicyRules
        {
            get => _authorizeSecurityPolicyRules ?? (_authorizeSecurityPolicyRules = new InputList<Inputs.EcdPolicyGroupAuthorizeSecurityPolicyRuleGetArgs>());
            set => _authorizeSecurityPolicyRules = value;
        }

        /// <summary>
        /// Whether to enable local camera redirection. Valid values: `on`, `off`.
        /// </summary>
        [Input("cameraRedirect")]
        public Input<string>? CameraRedirect { get; set; }

        /// <summary>
        /// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
        /// </summary>
        [Input("clipboard")]
        public Input<string>? Clipboard { get; set; }

        /// <summary>
        /// The list of domain.
        /// </summary>
        [Input("domainList")]
        public Input<string>? DomainList { get; set; }

        /// <summary>
        /// The access of html5. Valid values: `off`, `on`.
        /// </summary>
        [Input("htmlAccess")]
        public Input<string>? HtmlAccess { get; set; }

        /// <summary>
        /// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
        /// </summary>
        [Input("htmlFileTransfer")]
        public Input<string>? HtmlFileTransfer { get; set; }

        /// <summary>
        /// Local drive redirect policy. Valid values: ` readwrite`, `off`, `read`.
        /// </summary>
        [Input("localDrive")]
        public Input<string>? LocalDrive { get; set; }

        /// <summary>
        /// The name of policy group.
        /// </summary>
        [Input("policyGroupName")]
        public Input<string>? PolicyGroupName { get; set; }

        /// <summary>
        /// Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
        /// </summary>
        [Input("recording")]
        public Input<string>? Recording { get; set; }

        /// <summary>
        /// The end time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Input("recordingEndTime")]
        public Input<string>? RecordingEndTime { get; set; }

        /// <summary>
        /// The screen recording video retention. Valid values between 30 and 180. This return value is meaningful only when the value of `recording` is `period` or `alltime`.
        /// </summary>
        [Input("recordingExpires")]
        public Input<int>? RecordingExpires { get; set; }

        /// <summary>
        /// The fps of recording. Valid values: `2`, `5`, `10`, `15`.
        /// </summary>
        [Input("recordingFps")]
        public Input<int>? RecordingFps { get; set; }

        /// <summary>
        /// The start time of recording, value: `HH:MM:SS`. This return value is meaningful only when the value of `recording` is `period`.
        /// </summary>
        [Input("recordingStartTime")]
        public Input<string>? RecordingStartTime { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The usb redirect policy. Valid values: `off`, `on`.
        /// </summary>
        [Input("usbRedirect")]
        public Input<string>? UsbRedirect { get; set; }

        /// <summary>
        /// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
        /// </summary>
        [Input("visualQuality")]
        public Input<string>? VisualQuality { get; set; }

        /// <summary>
        /// The watermark policy. Valid values: `off`, `on`.
        /// </summary>
        [Input("watermark")]
        public Input<string>? Watermark { get; set; }

        /// <summary>
        /// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
        /// </summary>
        [Input("watermarkTransparency")]
        public Input<string>? WatermarkTransparency { get; set; }

        /// <summary>
        /// The type of watemark. Valid values: `EndUserId`, `HostName`.
        /// </summary>
        [Input("watermarkType")]
        public Input<string>? WatermarkType { get; set; }

        public EcdPolicyGroupState()
        {
        }
        public static new EcdPolicyGroupState Empty => new EcdPolicyGroupState();
    }
}
