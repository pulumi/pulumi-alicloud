// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eds.Outputs
{

    [OutputType]
    public sealed class GetCommandsCommandResult
    {
        /// <summary>
        /// The Contents of the Script to Base64 Encoded Transmission.
        /// </summary>
        public readonly string CommandContent;
        /// <summary>
        /// The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
        /// </summary>
        public readonly string CommandType;
        /// <summary>
        /// The Task of Creation Time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of the Command.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Implementation of the Target Cloud Desktop Collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommandsCommandInvokeDesktopResult> InvokeDesktops;
        /// <summary>
        /// The invoke id of the Command.
        /// </summary>
        public readonly string InvokeId;
        /// <summary>
        /// Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetCommandsCommandResult(
            string commandContent,

            string commandType,

            string createTime,

            string id,

            ImmutableArray<Outputs.GetCommandsCommandInvokeDesktopResult> invokeDesktops,

            string invokeId,

            string status)
        {
            CommandContent = commandContent;
            CommandType = commandType;
            CreateTime = createTime;
            Id = id;
            InvokeDesktops = invokeDesktops;
            InvokeId = invokeId;
            Status = status;
        }
    }
}
