// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Aligreen
{
    /// <summary>
    /// ## Import
    /// 
    /// Aligreen Oss Stock Task can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:aligreen/ossStockTask:OssStockTask example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:aligreen/ossStockTask:OssStockTask")]
    public partial class OssStockTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        /// </summary>
        [Output("audioAntispamFreezeConfig")]
        public Output<string?> AudioAntispamFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Output("audioAutoFreezeOpened")]
        public Output<bool?> AudioAutoFreezeOpened { get; private set; } = null!;

        /// <summary>
        /// Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        /// </summary>
        [Output("audioMaxSize")]
        public Output<int?> AudioMaxSize { get; private set; } = null!;

        /// <summary>
        /// oss stock scan task detect audio. true: scan audio, false: do not scan audio
        /// </summary>
        [Output("audioOpened")]
        public Output<bool?> AudioOpened { get; private set; } = null!;

        /// <summary>
        /// The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Output("audioScanLimit")]
        public Output<int?> AudioScanLimit { get; private set; } = null!;

        /// <summary>
        /// The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        /// </summary>
        [Output("audioScenes")]
        public Output<string?> AudioScenes { get; private set; } = null!;

        /// <summary>
        /// Automatic freeze type. Value: acl: modify permissions, copy: Move files
        /// </summary>
        [Output("autoFreezeType")]
        public Output<string?> AutoFreezeType { get; private set; } = null!;

        /// <summary>
        /// Business scenarios used by the oss stock scan task
        /// </summary>
        [Output("bizType")]
        public Output<string?> BizType { get; private set; } = null!;

        /// <summary>
        /// The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        /// </summary>
        [Output("buckets")]
        public Output<string?> Buckets { get; private set; } = null!;

        /// <summary>
        /// The ID of the primary key of the notification message bound to the oss stock scan task.
        /// </summary>
        [Output("callbackId")]
        public Output<int?> CallbackId { get; private set; } = null!;

        /// <summary>
        /// The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Output("imageAdFreezeConfig")]
        public Output<string?> ImageAdFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        /// </summary>
        [Output("imageAutoFreezeOpened")]
        public Output<bool?> ImageAutoFreezeOpened { get; private set; } = null!;

        /// <summary>
        /// Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Output("imageLiveFreezeConfig")]
        public Output<string?> ImageLiveFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// oss stock scan task detect images. true: scan images, false: do not scan images
        /// </summary>
        [Output("imageOpened")]
        public Output<bool?> ImageOpened { get; private set; } = null!;

        /// <summary>
        /// Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Output("imagePornFreezeConfig")]
        public Output<string?> ImagePornFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        /// </summary>
        [Output("imageScanLimit")]
        public Output<int?> ImageScanLimit { get; private set; } = null!;

        /// <summary>
        /// The image moderation scenario included in the oss stock scan task.Valid values:
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// </summary>
        [Output("imageScenes")]
        public Output<ImmutableArray<string>> ImageScenes { get; private set; } = null!;

        /// <summary>
        /// The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Output("imageTerrorismFreezeConfig")]
        public Output<string?> ImageTerrorismFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        /// </summary>
        [Output("scanImageNoFileType")]
        public Output<bool?> ScanImageNoFileType { get; private set; } = null!;

        /// <summary>
        /// The start time of the file upload time range represents the files uploaded after scanning this time point.
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        /// <summary>
        /// The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Output("videoAdFreezeConfig")]
        public Output<string?> VideoAdFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Output("videoAutoFreezeOpened")]
        public Output<bool?> VideoAutoFreezeOpened { get; private set; } = null!;

        /// <summary>
        /// Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        /// </summary>
        [Output("videoFrameInterval")]
        public Output<int?> VideoFrameInterval { get; private set; } = null!;

        /// <summary>
        /// Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Output("videoLiveFreezeConfig")]
        public Output<string?> VideoLiveFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        /// </summary>
        [Output("videoMaxFrames")]
        public Output<int?> VideoMaxFrames { get; private set; } = null!;

        /// <summary>
        /// Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        /// </summary>
        [Output("videoMaxSize")]
        public Output<int?> VideoMaxSize { get; private set; } = null!;

        /// <summary>
        /// oss stock scan task detect video. true: scan video, false: do not scan video
        /// </summary>
        [Output("videoOpened")]
        public Output<bool?> VideoOpened { get; private set; } = null!;

        /// <summary>
        /// Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        /// </summary>
        [Output("videoPornFreezeConfig")]
        public Output<string?> VideoPornFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Output("videoScanLimit")]
        public Output<int?> VideoScanLimit { get; private set; } = null!;

        /// <summary>
        /// The video detection scenarios included in the oss stock scan task.
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// antispam: Video voice antispam
        /// </summary>
        [Output("videoScenes")]
        public Output<string?> VideoScenes { get; private set; } = null!;

        /// <summary>
        /// The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Output("videoTerrorismFreezeConfig")]
        public Output<string?> VideoTerrorismFreezeConfig { get; private set; } = null!;

        /// <summary>
        /// Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Output("videoVoiceAntispamFreezeConfig")]
        public Output<string?> VideoVoiceAntispamFreezeConfig { get; private set; } = null!;


        /// <summary>
        /// Create a OssStockTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OssStockTask(string name, OssStockTaskArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:aligreen/ossStockTask:OssStockTask", name, args ?? new OssStockTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OssStockTask(string name, Input<string> id, OssStockTaskState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:aligreen/ossStockTask:OssStockTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OssStockTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OssStockTask Get(string name, Input<string> id, OssStockTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new OssStockTask(name, id, state, options);
        }
    }

    public sealed class OssStockTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        /// </summary>
        [Input("audioAntispamFreezeConfig")]
        public Input<string>? AudioAntispamFreezeConfig { get; set; }

        /// <summary>
        /// Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Input("audioAutoFreezeOpened")]
        public Input<bool>? AudioAutoFreezeOpened { get; set; }

        /// <summary>
        /// Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        /// </summary>
        [Input("audioMaxSize")]
        public Input<int>? AudioMaxSize { get; set; }

        /// <summary>
        /// oss stock scan task detect audio. true: scan audio, false: do not scan audio
        /// </summary>
        [Input("audioOpened")]
        public Input<bool>? AudioOpened { get; set; }

        /// <summary>
        /// The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Input("audioScanLimit")]
        public Input<int>? AudioScanLimit { get; set; }

        /// <summary>
        /// The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        /// </summary>
        [Input("audioScenes")]
        public Input<string>? AudioScenes { get; set; }

        /// <summary>
        /// Automatic freeze type. Value: acl: modify permissions, copy: Move files
        /// </summary>
        [Input("autoFreezeType")]
        public Input<string>? AutoFreezeType { get; set; }

        /// <summary>
        /// Business scenarios used by the oss stock scan task
        /// </summary>
        [Input("bizType")]
        public Input<string>? BizType { get; set; }

        /// <summary>
        /// The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        /// </summary>
        [Input("buckets")]
        public Input<string>? Buckets { get; set; }

        /// <summary>
        /// The ID of the primary key of the notification message bound to the oss stock scan task.
        /// </summary>
        [Input("callbackId")]
        public Input<int>? CallbackId { get; set; }

        /// <summary>
        /// The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageAdFreezeConfig")]
        public Input<string>? ImageAdFreezeConfig { get; set; }

        /// <summary>
        /// Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        /// </summary>
        [Input("imageAutoFreezeOpened")]
        public Input<bool>? ImageAutoFreezeOpened { get; set; }

        /// <summary>
        /// Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageLiveFreezeConfig")]
        public Input<string>? ImageLiveFreezeConfig { get; set; }

        /// <summary>
        /// oss stock scan task detect images. true: scan images, false: do not scan images
        /// </summary>
        [Input("imageOpened")]
        public Input<bool>? ImageOpened { get; set; }

        /// <summary>
        /// Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imagePornFreezeConfig")]
        public Input<string>? ImagePornFreezeConfig { get; set; }

        /// <summary>
        /// The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        /// </summary>
        [Input("imageScanLimit")]
        public Input<int>? ImageScanLimit { get; set; }

        [Input("imageScenes")]
        private InputList<string>? _imageScenes;

        /// <summary>
        /// The image moderation scenario included in the oss stock scan task.Valid values:
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// </summary>
        public InputList<string> ImageScenes
        {
            get => _imageScenes ?? (_imageScenes = new InputList<string>());
            set => _imageScenes = value;
        }

        /// <summary>
        /// The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageTerrorismFreezeConfig")]
        public Input<string>? ImageTerrorismFreezeConfig { get; set; }

        /// <summary>
        /// Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        /// </summary>
        [Input("scanImageNoFileType")]
        public Input<bool>? ScanImageNoFileType { get; set; }

        /// <summary>
        /// The start time of the file upload time range represents the files uploaded after scanning this time point.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoAdFreezeConfig")]
        public Input<string>? VideoAdFreezeConfig { get; set; }

        /// <summary>
        /// Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Input("videoAutoFreezeOpened")]
        public Input<bool>? VideoAutoFreezeOpened { get; set; }

        /// <summary>
        /// Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        /// </summary>
        [Input("videoFrameInterval")]
        public Input<int>? VideoFrameInterval { get; set; }

        /// <summary>
        /// Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoLiveFreezeConfig")]
        public Input<string>? VideoLiveFreezeConfig { get; set; }

        /// <summary>
        /// A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        /// </summary>
        [Input("videoMaxFrames")]
        public Input<int>? VideoMaxFrames { get; set; }

        /// <summary>
        /// Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        /// </summary>
        [Input("videoMaxSize")]
        public Input<int>? VideoMaxSize { get; set; }

        /// <summary>
        /// oss stock scan task detect video. true: scan video, false: do not scan video
        /// </summary>
        [Input("videoOpened")]
        public Input<bool>? VideoOpened { get; set; }

        /// <summary>
        /// Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        /// </summary>
        [Input("videoPornFreezeConfig")]
        public Input<string>? VideoPornFreezeConfig { get; set; }

        /// <summary>
        /// The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Input("videoScanLimit")]
        public Input<int>? VideoScanLimit { get; set; }

        /// <summary>
        /// The video detection scenarios included in the oss stock scan task.
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// antispam: Video voice antispam
        /// </summary>
        [Input("videoScenes")]
        public Input<string>? VideoScenes { get; set; }

        /// <summary>
        /// The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoTerrorismFreezeConfig")]
        public Input<string>? VideoTerrorismFreezeConfig { get; set; }

        /// <summary>
        /// Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoVoiceAntispamFreezeConfig")]
        public Input<string>? VideoVoiceAntispamFreezeConfig { get; set; }

        public OssStockTaskArgs()
        {
        }
        public static new OssStockTaskArgs Empty => new OssStockTaskArgs();
    }

    public sealed class OssStockTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        /// </summary>
        [Input("audioAntispamFreezeConfig")]
        public Input<string>? AudioAntispamFreezeConfig { get; set; }

        /// <summary>
        /// Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Input("audioAutoFreezeOpened")]
        public Input<bool>? AudioAutoFreezeOpened { get; set; }

        /// <summary>
        /// Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        /// </summary>
        [Input("audioMaxSize")]
        public Input<int>? AudioMaxSize { get; set; }

        /// <summary>
        /// oss stock scan task detect audio. true: scan audio, false: do not scan audio
        /// </summary>
        [Input("audioOpened")]
        public Input<bool>? AudioOpened { get; set; }

        /// <summary>
        /// The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Input("audioScanLimit")]
        public Input<int>? AudioScanLimit { get; set; }

        /// <summary>
        /// The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        /// </summary>
        [Input("audioScenes")]
        public Input<string>? AudioScenes { get; set; }

        /// <summary>
        /// Automatic freeze type. Value: acl: modify permissions, copy: Move files
        /// </summary>
        [Input("autoFreezeType")]
        public Input<string>? AutoFreezeType { get; set; }

        /// <summary>
        /// Business scenarios used by the oss stock scan task
        /// </summary>
        [Input("bizType")]
        public Input<string>? BizType { get; set; }

        /// <summary>
        /// The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        /// </summary>
        [Input("buckets")]
        public Input<string>? Buckets { get; set; }

        /// <summary>
        /// The ID of the primary key of the notification message bound to the oss stock scan task.
        /// </summary>
        [Input("callbackId")]
        public Input<int>? CallbackId { get; set; }

        /// <summary>
        /// The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageAdFreezeConfig")]
        public Input<string>? ImageAdFreezeConfig { get; set; }

        /// <summary>
        /// Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        /// </summary>
        [Input("imageAutoFreezeOpened")]
        public Input<bool>? ImageAutoFreezeOpened { get; set; }

        /// <summary>
        /// Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageLiveFreezeConfig")]
        public Input<string>? ImageLiveFreezeConfig { get; set; }

        /// <summary>
        /// oss stock scan task detect images. true: scan images, false: do not scan images
        /// </summary>
        [Input("imageOpened")]
        public Input<bool>? ImageOpened { get; set; }

        /// <summary>
        /// Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imagePornFreezeConfig")]
        public Input<string>? ImagePornFreezeConfig { get; set; }

        /// <summary>
        /// The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        /// </summary>
        [Input("imageScanLimit")]
        public Input<int>? ImageScanLimit { get; set; }

        [Input("imageScenes")]
        private InputList<string>? _imageScenes;

        /// <summary>
        /// The image moderation scenario included in the oss stock scan task.Valid values:
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// </summary>
        public InputList<string> ImageScenes
        {
            get => _imageScenes ?? (_imageScenes = new InputList<string>());
            set => _imageScenes = value;
        }

        /// <summary>
        /// The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        /// </summary>
        [Input("imageTerrorismFreezeConfig")]
        public Input<string>? ImageTerrorismFreezeConfig { get; set; }

        /// <summary>
        /// Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        /// </summary>
        [Input("scanImageNoFileType")]
        public Input<bool>? ScanImageNoFileType { get; set; }

        /// <summary>
        /// The start time of the file upload time range represents the files uploaded after scanning this time point.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoAdFreezeConfig")]
        public Input<string>? VideoAdFreezeConfig { get; set; }

        /// <summary>
        /// Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        /// </summary>
        [Input("videoAutoFreezeOpened")]
        public Input<bool>? VideoAutoFreezeOpened { get; set; }

        /// <summary>
        /// Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        /// </summary>
        [Input("videoFrameInterval")]
        public Input<int>? VideoFrameInterval { get; set; }

        /// <summary>
        /// Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoLiveFreezeConfig")]
        public Input<string>? VideoLiveFreezeConfig { get; set; }

        /// <summary>
        /// A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        /// </summary>
        [Input("videoMaxFrames")]
        public Input<int>? VideoMaxFrames { get; set; }

        /// <summary>
        /// Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        /// </summary>
        [Input("videoMaxSize")]
        public Input<int>? VideoMaxSize { get; set; }

        /// <summary>
        /// oss stock scan task detect video. true: scan video, false: do not scan video
        /// </summary>
        [Input("videoOpened")]
        public Input<bool>? VideoOpened { get; set; }

        /// <summary>
        /// Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        /// </summary>
        [Input("videoPornFreezeConfig")]
        public Input<string>? VideoPornFreezeConfig { get; set; }

        /// <summary>
        /// The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        /// </summary>
        [Input("videoScanLimit")]
        public Input<int>? VideoScanLimit { get; set; }

        /// <summary>
        /// The video detection scenarios included in the oss stock scan task.
        /// porn: pornography detection
        /// terrorism: terrorist content detection
        /// ad: ad violation detection
        /// live: undesirable scene detection
        /// antispam: Video voice antispam
        /// </summary>
        [Input("videoScenes")]
        public Input<string>? VideoScenes { get; set; }

        /// <summary>
        /// The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoTerrorismFreezeConfig")]
        public Input<string>? VideoTerrorismFreezeConfig { get; set; }

        /// <summary>
        /// Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        /// </summary>
        [Input("videoVoiceAntispamFreezeConfig")]
        public Input<string>? VideoVoiceAntispamFreezeConfig { get; set; }

        public OssStockTaskState()
        {
        }
        public static new OssStockTaskState Empty => new OssStockTaskState();
    }
}
