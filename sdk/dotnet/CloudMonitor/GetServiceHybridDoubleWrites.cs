// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudMonitor
{
    public static class GetServiceHybridDoubleWrites
    {
        /// <summary>
        /// This data source provides the Cloud Monitor Service Hybrid Double Writes of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.220.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.GetAccount.Invoke();
        /// 
        ///     var source = new AliCloud.Cms.Namespace("source", new()
        ///     {
        ///         NamespaceName = "your-source-namespace",
        ///     });
        /// 
        ///     var defaultNamespace = new AliCloud.Cms.Namespace("default", new()
        ///     {
        ///         NamespaceName = "your-namespace",
        ///     });
        /// 
        ///     var defaultServiceHybridDoubleWrite = new AliCloud.CloudMonitor.ServiceHybridDoubleWrite("default", new()
        ///     {
        ///         SourceNamespace = source.Id,
        ///         SourceUserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///         Namespace = defaultNamespace.Id,
        ///         UserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///     });
        /// 
        ///     var ids = AliCloud.CloudMonitor.GetServiceHybridDoubleWrites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServiceHybridDoubleWrite.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudMonitorServiceHybridDoubleWritesId1"] = ids.Apply(getServiceHybridDoubleWritesResult =&gt; getServiceHybridDoubleWritesResult.HybridDoubleWrites[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceHybridDoubleWritesResult> InvokeAsync(GetServiceHybridDoubleWritesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceHybridDoubleWritesResult>("alicloud:cloudmonitor/getServiceHybridDoubleWrites:getServiceHybridDoubleWrites", args ?? new GetServiceHybridDoubleWritesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Cloud Monitor Service Hybrid Double Writes of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.220.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.GetAccount.Invoke();
        /// 
        ///     var source = new AliCloud.Cms.Namespace("source", new()
        ///     {
        ///         NamespaceName = "your-source-namespace",
        ///     });
        /// 
        ///     var defaultNamespace = new AliCloud.Cms.Namespace("default", new()
        ///     {
        ///         NamespaceName = "your-namespace",
        ///     });
        /// 
        ///     var defaultServiceHybridDoubleWrite = new AliCloud.CloudMonitor.ServiceHybridDoubleWrite("default", new()
        ///     {
        ///         SourceNamespace = source.Id,
        ///         SourceUserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///         Namespace = defaultNamespace.Id,
        ///         UserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///     });
        /// 
        ///     var ids = AliCloud.CloudMonitor.GetServiceHybridDoubleWrites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServiceHybridDoubleWrite.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudMonitorServiceHybridDoubleWritesId1"] = ids.Apply(getServiceHybridDoubleWritesResult =&gt; getServiceHybridDoubleWritesResult.HybridDoubleWrites[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceHybridDoubleWritesResult> Invoke(GetServiceHybridDoubleWritesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceHybridDoubleWritesResult>("alicloud:cloudmonitor/getServiceHybridDoubleWrites:getServiceHybridDoubleWrites", args ?? new GetServiceHybridDoubleWritesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Cloud Monitor Service Hybrid Double Writes of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.220.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.GetAccount.Invoke();
        /// 
        ///     var source = new AliCloud.Cms.Namespace("source", new()
        ///     {
        ///         NamespaceName = "your-source-namespace",
        ///     });
        /// 
        ///     var defaultNamespace = new AliCloud.Cms.Namespace("default", new()
        ///     {
        ///         NamespaceName = "your-namespace",
        ///     });
        /// 
        ///     var defaultServiceHybridDoubleWrite = new AliCloud.CloudMonitor.ServiceHybridDoubleWrite("default", new()
        ///     {
        ///         SourceNamespace = source.Id,
        ///         SourceUserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///         Namespace = defaultNamespace.Id,
        ///         UserId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
        ///     });
        /// 
        ///     var ids = AliCloud.CloudMonitor.GetServiceHybridDoubleWrites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServiceHybridDoubleWrite.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["cloudMonitorServiceHybridDoubleWritesId1"] = ids.Apply(getServiceHybridDoubleWritesResult =&gt; getServiceHybridDoubleWritesResult.HybridDoubleWrites[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceHybridDoubleWritesResult> Invoke(GetServiceHybridDoubleWritesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceHybridDoubleWritesResult>("alicloud:cloudmonitor/getServiceHybridDoubleWrites:getServiceHybridDoubleWrites", args ?? new GetServiceHybridDoubleWritesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceHybridDoubleWritesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Hybrid Double Write IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Target Namespace.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Source Namespace.
        /// </summary>
        [Input("sourceNamespace")]
        public string? SourceNamespace { get; set; }

        /// <summary>
        /// Source UserId.
        /// </summary>
        [Input("sourceUserId")]
        public string? SourceUserId { get; set; }

        /// <summary>
        /// Target UserId.
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        public GetServiceHybridDoubleWritesArgs()
        {
        }
        public static new GetServiceHybridDoubleWritesArgs Empty => new GetServiceHybridDoubleWritesArgs();
    }

    public sealed class GetServiceHybridDoubleWritesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Hybrid Double Write IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Target Namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Source Namespace.
        /// </summary>
        [Input("sourceNamespace")]
        public Input<string>? SourceNamespace { get; set; }

        /// <summary>
        /// Source UserId.
        /// </summary>
        [Input("sourceUserId")]
        public Input<string>? SourceUserId { get; set; }

        /// <summary>
        /// Target UserId.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetServiceHybridDoubleWritesInvokeArgs()
        {
        }
        public static new GetServiceHybridDoubleWritesInvokeArgs Empty => new GetServiceHybridDoubleWritesInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceHybridDoubleWritesResult
    {
        /// <summary>
        /// A list of Hybrid Double Writes. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceHybridDoubleWritesHybridDoubleWriteResult> HybridDoubleWrites;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// Target Namespace.
        /// </summary>
        public readonly string? Namespace;
        public readonly string? OutputFile;
        /// <summary>
        /// Source Namespace.
        /// </summary>
        public readonly string? SourceNamespace;
        /// <summary>
        /// Source UserId.
        /// </summary>
        public readonly string? SourceUserId;
        /// <summary>
        /// Target UserId.
        /// </summary>
        public readonly string? UserId;

        [OutputConstructor]
        private GetServiceHybridDoubleWritesResult(
            ImmutableArray<Outputs.GetServiceHybridDoubleWritesHybridDoubleWriteResult> hybridDoubleWrites,

            string id,

            ImmutableArray<string> ids,

            string? @namespace,

            string? outputFile,

            string? sourceNamespace,

            string? sourceUserId,

            string? userId)
        {
            HybridDoubleWrites = hybridDoubleWrites;
            Id = id;
            Ids = ids;
            Namespace = @namespace;
            OutputFile = outputFile;
            SourceNamespace = sourceNamespace;
            SourceUserId = sourceUserId;
            UserId = userId;
        }
    }
}
