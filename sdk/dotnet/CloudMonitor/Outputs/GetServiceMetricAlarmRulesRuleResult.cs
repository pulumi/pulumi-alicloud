// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudMonitor.Outputs
{

    [OutputType]
    public sealed class GetServiceMetricAlarmRulesRuleResult
    {
        /// <summary>
        /// The trigger conditions for multiple metrics.
        /// </summary>
        public readonly Outputs.GetServiceMetricAlarmRulesRuleCompositeExpressionResult CompositeExpression;
        /// <summary>
        /// The alert contact group.
        /// </summary>
        public readonly string ContactGroups;
        /// <summary>
        /// The monitoring dimensions of the specified resource.
        /// </summary>
        public readonly string Dimensions;
        /// <summary>
        /// The time period during which the alert rule is effective.
        /// </summary>
        public readonly string EffectiveInterval;
        /// <summary>
        /// The subject of the alert notification email.
        /// </summary>
        public readonly string EmailSubject;
        /// <summary>
        /// The conditions for triggering different levels of alerts.
        /// </summary>
        public readonly Outputs.GetServiceMetricAlarmRulesRuleEscalationsResult Escalations;
        /// <summary>
        /// The ID of the alert rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The tags of the alert rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMetricAlarmRulesRuleLabelResult> Labels;
        /// <summary>
        /// The name of the metric.
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// The namespace of the cloud service.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// The method that is used to handle alerts when no monitoring data is found.
        /// </summary>
        public readonly string NoDataPolicy;
        /// <summary>
        /// The time period during which the alert rule is ineffective.
        /// </summary>
        public readonly string NoEffectiveInterval;
        /// <summary>
        /// The aggregation period of the metric.
        /// </summary>
        public readonly string Period;
        /// <summary>
        /// The Prometheus alerts.
        /// </summary>
        public readonly Outputs.GetServiceMetricAlarmRulesRulePrometheusResult Prometheus;
        /// <summary>
        /// The resources that are associated with the alert rule.
        /// </summary>
        public readonly string Resources;
        /// <summary>
        /// The name of the alert rule.
        /// </summary>
        public readonly string RuleName;
        /// <summary>
        /// The mute period during which new alert notifications are not sent even if the trigger conditions are met.
        /// </summary>
        public readonly string SilenceTime;
        /// <summary>
        /// The type of the alert rule.
        /// </summary>
        public readonly string SourceType;
        /// <summary>
        /// Specifies whether to query enabled or disabled alert rules. Valid values: `True`, `False`.
        /// </summary>
        public readonly bool Status;
        /// <summary>
        /// The callback URL.
        /// </summary>
        public readonly string Webhook;

        [OutputConstructor]
        private GetServiceMetricAlarmRulesRuleResult(
            Outputs.GetServiceMetricAlarmRulesRuleCompositeExpressionResult compositeExpression,

            string contactGroups,

            string dimensions,

            string effectiveInterval,

            string emailSubject,

            Outputs.GetServiceMetricAlarmRulesRuleEscalationsResult escalations,

            string id,

            ImmutableArray<Outputs.GetServiceMetricAlarmRulesRuleLabelResult> labels,

            string metricName,

            string @namespace,

            string noDataPolicy,

            string noEffectiveInterval,

            string period,

            Outputs.GetServiceMetricAlarmRulesRulePrometheusResult prometheus,

            string resources,

            string ruleName,

            string silenceTime,

            string sourceType,

            bool status,

            string webhook)
        {
            CompositeExpression = compositeExpression;
            ContactGroups = contactGroups;
            Dimensions = dimensions;
            EffectiveInterval = effectiveInterval;
            EmailSubject = emailSubject;
            Escalations = escalations;
            Id = id;
            Labels = labels;
            MetricName = metricName;
            Namespace = @namespace;
            NoDataPolicy = noDataPolicy;
            NoEffectiveInterval = noEffectiveInterval;
            Period = period;
            Prometheus = prometheus;
            Resources = resources;
            RuleName = ruleName;
            SilenceTime = silenceTime;
            SourceType = sourceType;
            Status = status;
            Webhook = webhook;
        }
    }
}
