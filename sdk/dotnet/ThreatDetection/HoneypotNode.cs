// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ThreatDetection
{
    /// <summary>
    /// Provides a Threat Detection Honeypot Node resource.
    /// 
    /// For information about Threat Detection Honeypot Node and how to use it, see [What is Honeypot Node](https://www.alibabacloud.com/help/en/security-center/latest/api-doc-sas-2018-12-03-api-doc-createhoneypotnode).
    /// 
    /// &gt; **NOTE:** Available in v1.195.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new AliCloud.ThreatDetection.HoneypotNode("default", new()
    ///     {
    ///         AvailableProbeNum = 20,
    ///         NodeName = "apispec_test",
    ///         SecurityGroupProbeIpLists = new[]
    ///         {
    ///             "0.0.0.0/0",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Threat Detection Honeypot Node can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:threatdetection/honeypotNode:HoneypotNode example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:threatdetection/honeypotNode:HoneypotNode")]
    public partial class HoneypotNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
        /// </summary>
        [Output("allowHoneypotAccessInternet")]
        public Output<bool?> AllowHoneypotAccessInternet { get; private set; } = null!;

        /// <summary>
        /// Number of probes available.
        /// </summary>
        [Output("availableProbeNum")]
        public Output<int> AvailableProbeNum { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Management node name.
        /// </summary>
        [Output("nodeName")]
        public Output<string> NodeName { get; private set; } = null!;

        /// <summary>
        /// Release the collection of network segments.
        /// </summary>
        [Output("securityGroupProbeIpLists")]
        public Output<ImmutableArray<string>> SecurityGroupProbeIpLists { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;


        /// <summary>
        /// Create a HoneypotNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HoneypotNode(string name, HoneypotNodeArgs args, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/honeypotNode:HoneypotNode", name, args ?? new HoneypotNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HoneypotNode(string name, Input<string> id, HoneypotNodeState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/honeypotNode:HoneypotNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HoneypotNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HoneypotNode Get(string name, Input<string> id, HoneypotNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new HoneypotNode(name, id, state, options);
        }
    }

    public sealed class HoneypotNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
        /// </summary>
        [Input("allowHoneypotAccessInternet")]
        public Input<bool>? AllowHoneypotAccessInternet { get; set; }

        /// <summary>
        /// Number of probes available.
        /// </summary>
        [Input("availableProbeNum", required: true)]
        public Input<int> AvailableProbeNum { get; set; } = null!;

        /// <summary>
        /// Management node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        [Input("securityGroupProbeIpLists")]
        private InputList<string>? _securityGroupProbeIpLists;

        /// <summary>
        /// Release the collection of network segments.
        /// </summary>
        public InputList<string> SecurityGroupProbeIpLists
        {
            get => _securityGroupProbeIpLists ?? (_securityGroupProbeIpLists = new InputList<string>());
            set => _securityGroupProbeIpLists = value;
        }

        public HoneypotNodeArgs()
        {
        }
        public static new HoneypotNodeArgs Empty => new HoneypotNodeArgs();
    }

    public sealed class HoneypotNodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
        /// </summary>
        [Input("allowHoneypotAccessInternet")]
        public Input<bool>? AllowHoneypotAccessInternet { get; set; }

        /// <summary>
        /// Number of probes available.
        /// </summary>
        [Input("availableProbeNum")]
        public Input<int>? AvailableProbeNum { get; set; }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Management node name.
        /// </summary>
        [Input("nodeName")]
        public Input<string>? NodeName { get; set; }

        [Input("securityGroupProbeIpLists")]
        private InputList<string>? _securityGroupProbeIpLists;

        /// <summary>
        /// Release the collection of network segments.
        /// </summary>
        public InputList<string> SecurityGroupProbeIpLists
        {
            get => _securityGroupProbeIpLists ?? (_securityGroupProbeIpLists = new InputList<string>());
            set => _securityGroupProbeIpLists = value;
        }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        public HoneypotNodeState()
        {
        }
        public static new HoneypotNodeState Empty => new HoneypotNodeState();
    }
}
