// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ThreatDetection
{
    /// <summary>
    /// ## Import
    /// 
    /// Threat Detection Log Meta can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:threatdetection/logMeta:LogMeta example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:threatdetection/logMeta:LogMeta")]
    public partial class LogMeta : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the exclusive Logstore where logs are stored. Value:
        /// - aegis-log-client: client event log
        /// - aegis-log-crack: Brute Force log
        /// - aegis-log-dns-query:DNS request log
        /// - aegis-log-login: login log
        /// - aegis-log-network: network connection log
        /// - aegis-log-process: process startup log
        /// - aegis-snapshot-host: account snapshot log
        /// - aegis-snapshot-port: port snapshot log
        /// - aegis-snapshot-process: process snapshot log
        /// - local-dns: local DNS log
        /// - sas-log-dns:DNS resolution log
        /// - sas-log-http:WEB access log
        /// - sas-log-session: Web session log
        /// - sas-security-log: alarm log
        /// - sas-vul-log: Vulnerability log
        /// - sas-cspm-log: Cloud platform configuration check log
        /// - sas-hc-log: baseline log
        /// - sas-rasp-log: Application Protection Log
        /// - sas-filedetect-log: file detection log
        /// - sas-net-block: Network Defense Log
        /// </summary>
        [Output("logMetaName")]
        public Output<string> LogMetaName { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a LogMeta resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogMeta(string name, LogMetaArgs args, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/logMeta:LogMeta", name, args ?? new LogMetaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogMeta(string name, Input<string> id, LogMetaState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/logMeta:LogMeta", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogMeta resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogMeta Get(string name, Input<string> id, LogMetaState? state = null, CustomResourceOptions? options = null)
        {
            return new LogMeta(name, id, state, options);
        }
    }

    public sealed class LogMetaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exclusive Logstore where logs are stored. Value:
        /// - aegis-log-client: client event log
        /// - aegis-log-crack: Brute Force log
        /// - aegis-log-dns-query:DNS request log
        /// - aegis-log-login: login log
        /// - aegis-log-network: network connection log
        /// - aegis-log-process: process startup log
        /// - aegis-snapshot-host: account snapshot log
        /// - aegis-snapshot-port: port snapshot log
        /// - aegis-snapshot-process: process snapshot log
        /// - local-dns: local DNS log
        /// - sas-log-dns:DNS resolution log
        /// - sas-log-http:WEB access log
        /// - sas-log-session: Web session log
        /// - sas-security-log: alarm log
        /// - sas-vul-log: Vulnerability log
        /// - sas-cspm-log: Cloud platform configuration check log
        /// - sas-hc-log: baseline log
        /// - sas-rasp-log: Application Protection Log
        /// - sas-filedetect-log: file detection log
        /// - sas-net-block: Network Defense Log
        /// </summary>
        [Input("logMetaName", required: true)]
        public Input<string> LogMetaName { get; set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        public LogMetaArgs()
        {
        }
        public static new LogMetaArgs Empty => new LogMetaArgs();
    }

    public sealed class LogMetaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exclusive Logstore where logs are stored. Value:
        /// - aegis-log-client: client event log
        /// - aegis-log-crack: Brute Force log
        /// - aegis-log-dns-query:DNS request log
        /// - aegis-log-login: login log
        /// - aegis-log-network: network connection log
        /// - aegis-log-process: process startup log
        /// - aegis-snapshot-host: account snapshot log
        /// - aegis-snapshot-port: port snapshot log
        /// - aegis-snapshot-process: process snapshot log
        /// - local-dns: local DNS log
        /// - sas-log-dns:DNS resolution log
        /// - sas-log-http:WEB access log
        /// - sas-log-session: Web session log
        /// - sas-security-log: alarm log
        /// - sas-vul-log: Vulnerability log
        /// - sas-cspm-log: Cloud platform configuration check log
        /// - sas-hc-log: baseline log
        /// - sas-rasp-log: Application Protection Log
        /// - sas-filedetect-log: file detection log
        /// - sas-net-block: Network Defense Log
        /// </summary>
        [Input("logMetaName")]
        public Input<string>? LogMetaName { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public LogMetaState()
        {
        }
        public static new LogMetaState Empty => new LogMetaState();
    }
}
