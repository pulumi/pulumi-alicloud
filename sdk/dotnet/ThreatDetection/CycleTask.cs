// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ThreatDetection
{
    /// <summary>
    /// Provides a Threat Detection Cycle Task resource.
    /// 
    /// Configure periodic tasks in Security Center.
    /// 
    /// For information about Threat Detection Cycle Task and how to use it, see [What is Cycle Task](https://next.api.alibabacloud.com/document/Sas/2018-12-03/CreateCycleTask).
    /// 
    /// &gt; **NOTE:** Available since v1.253.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new AliCloud.ThreatDetection.CycleTask("default", new()
    ///     {
    ///         TargetEndTime = 6,
    ///         TaskType = "VIRUS_VUL_SCHEDULE_SCAN",
    ///         TargetStartTime = 0,
    ///         Source = "console_batch",
    ///         TaskName = "VIRUS_VUL_SCHEDULE_SCAN",
    ///         FirstDateStr = 1650556800000,
    ///         PeriodUnit = "day",
    ///         IntervalPeriod = 7,
    ///         Param = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["targetInfo"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "groupId",
    ///                     ["name"] = "TI HOST",
    ///                     ["target"] = 10597,
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "groupId",
    ///                     ["name"] = "expense HOST",
    ///                     ["target"] = 10597,
    ///                 },
    ///             },
    ///         }),
    ///         Enable = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Threat Detection Cycle Task can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:threatdetection/cycleTask:CycleTask example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:threatdetection/cycleTask:CycleTask")]
    public partial class CycleTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable. Value:
        /// </summary>
        [Output("enable")]
        public Output<int> Enable { get; private set; } = null!;

        /// <summary>
        /// First execution time.
        /// </summary>
        [Output("firstDateStr")]
        public Output<int> FirstDateStr { get; private set; } = null!;

        /// <summary>
        /// Interval period.
        /// </summary>
        [Output("intervalPeriod")]
        public Output<int> IntervalPeriod { get; private set; } = null!;

        /// <summary>
        /// Extended information field.
        /// </summary>
        [Output("param")]
        public Output<string?> Param { get; private set; } = null!;

        /// <summary>
        /// Unit of scan cycle, value:
        /// </summary>
        [Output("periodUnit")]
        public Output<string> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// Added the source of the task.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        /// <summary>
        /// Task end time (hours).
        /// </summary>
        [Output("targetEndTime")]
        public Output<int> TargetEndTime { get; private set; } = null!;

        /// <summary>
        /// Task start time (hours).
        /// </summary>
        [Output("targetStartTime")]
        public Output<int> TargetStartTime { get; private set; } = null!;

        /// <summary>
        /// The task name.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;

        /// <summary>
        /// The task type.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Output("taskType")]
        public Output<string> TaskType { get; private set; } = null!;


        /// <summary>
        /// Create a CycleTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CycleTask(string name, CycleTaskArgs args, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/cycleTask:CycleTask", name, args ?? new CycleTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CycleTask(string name, Input<string> id, CycleTaskState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:threatdetection/cycleTask:CycleTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CycleTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CycleTask Get(string name, Input<string> id, CycleTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new CycleTask(name, id, state, options);
        }
    }

    public sealed class CycleTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable. Value:
        /// </summary>
        [Input("enable", required: true)]
        public Input<int> Enable { get; set; } = null!;

        /// <summary>
        /// First execution time.
        /// </summary>
        [Input("firstDateStr", required: true)]
        public Input<int> FirstDateStr { get; set; } = null!;

        /// <summary>
        /// Interval period.
        /// </summary>
        [Input("intervalPeriod", required: true)]
        public Input<int> IntervalPeriod { get; set; } = null!;

        /// <summary>
        /// Extended information field.
        /// </summary>
        [Input("param")]
        public Input<string>? Param { get; set; }

        /// <summary>
        /// Unit of scan cycle, value:
        /// </summary>
        [Input("periodUnit", required: true)]
        public Input<string> PeriodUnit { get; set; } = null!;

        /// <summary>
        /// Added the source of the task.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Task end time (hours).
        /// </summary>
        [Input("targetEndTime", required: true)]
        public Input<int> TargetEndTime { get; set; } = null!;

        /// <summary>
        /// Task start time (hours).
        /// </summary>
        [Input("targetStartTime", required: true)]
        public Input<int> TargetStartTime { get; set; } = null!;

        /// <summary>
        /// The task name.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        /// <summary>
        /// The task type.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public CycleTaskArgs()
        {
        }
        public static new CycleTaskArgs Empty => new CycleTaskArgs();
    }

    public sealed class CycleTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable. Value:
        /// </summary>
        [Input("enable")]
        public Input<int>? Enable { get; set; }

        /// <summary>
        /// First execution time.
        /// </summary>
        [Input("firstDateStr")]
        public Input<int>? FirstDateStr { get; set; }

        /// <summary>
        /// Interval period.
        /// </summary>
        [Input("intervalPeriod")]
        public Input<int>? IntervalPeriod { get; set; }

        /// <summary>
        /// Extended information field.
        /// </summary>
        [Input("param")]
        public Input<string>? Param { get; set; }

        /// <summary>
        /// Unit of scan cycle, value:
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// Added the source of the task.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Task end time (hours).
        /// </summary>
        [Input("targetEndTime")]
        public Input<int>? TargetEndTime { get; set; }

        /// <summary>
        /// Task start time (hours).
        /// </summary>
        [Input("targetStartTime")]
        public Input<int>? TargetStartTime { get; set; }

        /// <summary>
        /// The task name.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        /// <summary>
        /// The task type.
        /// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
        /// - **IMAGE_SCAN**: Image scan.
        /// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
        /// </summary>
        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        public CycleTaskState()
        {
        }
        public static new CycleTaskState Empty => new CycleTaskState();
    }
}
