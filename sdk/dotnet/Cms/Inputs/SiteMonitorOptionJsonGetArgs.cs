// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Cms.Inputs
{

    public sealed class SiteMonitorOptionJsonGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("assertions")]
        private InputList<Inputs.SiteMonitorOptionJsonAssertionGetArgs>? _assertions;

        /// <summary>
        /// Assertion configuration group. See `Assertions` below.
        /// </summary>
        public InputList<Inputs.SiteMonitorOptionJsonAssertionGetArgs> Assertions
        {
            get => _assertions ?? (_assertions = new InputList<Inputs.SiteMonitorOptionJsonAssertionGetArgs>());
            set => _assertions = value;
        }

        /// <summary>
        /// Number of retries after DNS failed.
        /// </summary>
        [Input("attempts")]
        public Input<int>? Attempts { get; set; }

        /// <summary>
        /// The Cookie that sends the HTTP request.
        /// </summary>
        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        /// <summary>
        /// Whether to enable automatic MTR network diagnosis after a task failure. Value:
        /// - false: does not enable automatic MTR network diagnosis.
        /// - true to turn on automatic MTR network diagnostics.
        /// </summary>
        [Input("diagnosisMtr")]
        public Input<bool>? DiagnosisMtr { get; set; }

        /// <summary>
        /// Whether to enable the automatic PING network delay detection after the task fails. Value:
        /// - false: does not enable automatic PING network delay detection.
        /// - true: Enable automatic PING network delay detection.
        /// </summary>
        [Input("diagnosisPing")]
        public Input<bool>? DiagnosisPing { get; set; }

        /// <summary>
        /// List of DNS hijacking configurations.
        /// </summary>
        [Input("dnsHijackWhitelist")]
        public Input<string>? DnsHijackWhitelist { get; set; }

        /// <summary>
        /// Matching Rules for DNS. Value:
        /// - IN_DNS: The alias or IP address that is expected to be resolved is in the DNS response.
        /// - DNS_IN: All DNS responses appear in the alias or IP address that is expected to be resolved.
        /// - EQUAL: the DNS response is exactly the same as the alias or IP address that is expected to be resolved.
        /// - ANY:DNS response and the alias or IP address expected to be resolved have an intersection.
        /// </summary>
        [Input("dnsMatchRule")]
        public Input<string>? DnsMatchRule { get; set; }

        /// <summary>
        /// The IP address of the DNS server.
        /// 
        /// &gt; **NOTE:**  only applicable to DNS probe types.
        /// </summary>
        [Input("dnsServer")]
        public Input<string>? DnsServer { get; set; }

        /// <summary>
        /// DNS resolution type. Only applicable to DNS probe types. Value:
        /// - A (default): specifies the IP address corresponding to the host name or domain name.
        /// - CNAME: maps multiple domain names to another domain name.
        /// - NS: specifies that the domain name is resolved by a DNS server.
        /// - MX: point domain name to a mail server address.
        /// - TXT: Description of host name or domain name. The text length is limited to 512 bytes, which is usually used as SPF(Sender Policy Framework) record, that is, anti-spam.
        /// </summary>
        [Input("dnsType")]
        public Input<string>? DnsType { get; set; }

        /// <summary>
        /// The alias or address to be resolved.
        /// 
        /// &gt; **NOTE:**  This parameter applies only to DNS probe types.
        /// </summary>
        [Input("expectValue")]
        public Input<string>? ExpectValue { get; set; }

        /// <summary>
        /// Packet loss rate.
        /// 
        /// &gt; **NOTE:**  This parameter only applies to PING probe types.
        /// </summary>
        [Input("failureRate")]
        public Input<string>? FailureRate { get; set; }

        /// <summary>
        /// HTTP request header.
        /// </summary>
        [Input("header")]
        public Input<string>? Header { get; set; }

        /// <summary>
        /// HTTP request method. Value:
        /// - get
        /// - post
        /// - head
        /// </summary>
        [Input("httpMethod")]
        public Input<string>? HttpMethod { get; set; }

        /// <summary>
        /// Whether the parameter' Password' is Base64 encoded.
        /// - true: Yes.
        /// - false: No.
        /// </summary>
        [Input("isBaseEncode")]
        public Input<bool>? IsBaseEncode { get; set; }

        /// <summary>
        /// Whether alarm rules are included. Value:
        /// - 0: Yes.
        /// - 1: No.
        /// </summary>
        [Input("matchRule")]
        public Input<int>? MatchRule { get; set; }

        /// <summary>
        /// Minimum TLS version. By default, TLS1.2 and later versions are supported. TLS1.0 and 1.1 have been disabled. If they still need to be supported, the configuration can be changed.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the SMTP, POP3, or FTP probe type.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The heartbeat of the PING probe type.
        /// </summary>
        [Input("pingNum")]
        public Input<int>? PingNum { get; set; }

        /// <summary>
        /// PING the port. Applies to TCP PING.
        /// </summary>
        [Input("pingPort")]
        public Input<int>? PingPort { get; set; }

        /// <summary>
        /// The PING protocol type. Value:
        /// - icmp
        /// - tcp
        /// - udp
        /// </summary>
        [Input("pingType")]
        public Input<string>? PingType { get; set; }

        /// <summary>
        /// Ports of TCP, UDP, SMTP, and POP3 probe types.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The request content of the HTTP probe type.
        /// </summary>
        [Input("requestContent")]
        public Input<string>? RequestContent { get; set; }

        /// <summary>
        /// HTTP request content format. Value:
        /// - hex: hexadecimal format.
        /// - text: text format.
        /// </summary>
        [Input("requestFormat")]
        public Input<string>? RequestFormat { get; set; }

        /// <summary>
        /// Match the response content.
        /// </summary>
        [Input("responseContent")]
        public Input<string>? ResponseContent { get; set; }

        /// <summary>
        /// HTTP response content format. Value:
        /// - hex: hexadecimal format.
        /// - text: text format.
        /// </summary>
        [Input("responseFormat")]
        public Input<string>? ResponseFormat { get; set; }

        /// <summary>
        /// Timeout time. Unit: milliseconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The username of FTP, SMTP, or pop3.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public SiteMonitorOptionJsonGetArgs()
        {
        }
        public static new SiteMonitorOptionJsonGetArgs Empty => new SiteMonitorOptionJsonGetArgs();
    }
}
