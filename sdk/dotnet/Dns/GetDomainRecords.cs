// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Dns
{
    public static class GetDomainRecords
    {
        public static Task<GetDomainRecordsResult> InvokeAsync(GetDomainRecordsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainRecordsResult>("alicloud:dns/getDomainRecords:getDomainRecords", args ?? new GetDomainRecordsArgs(), options.WithDefaults());

        public static Output<GetDomainRecordsResult> Invoke(GetDomainRecordsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainRecordsResult>("alicloud:dns/getDomainRecords:getDomainRecords", args ?? new GetDomainRecordsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainRecordsArgs : Pulumi.InvokeArgs
    {
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        [Input("hostRecordRegex")]
        public string? HostRecordRegex { get; set; }

        [Input("ids")]
        private List<string>? _ids;
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("isLocked")]
        public bool? IsLocked { get; set; }

        [Input("line")]
        public string? Line { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("valueRegex")]
        public string? ValueRegex { get; set; }

        public GetDomainRecordsArgs()
        {
        }
    }

    public sealed class GetDomainRecordsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("hostRecordRegex")]
        public Input<string>? HostRecordRegex { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("line")]
        public Input<string>? Line { get; set; }

        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("valueRegex")]
        public Input<string>? ValueRegex { get; set; }

        public GetDomainRecordsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainRecordsResult
    {
        public readonly string DomainName;
        public readonly string? HostRecordRegex;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly bool? IsLocked;
        public readonly string? Line;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.GetDomainRecordsRecordResult> Records;
        public readonly string? Status;
        public readonly string? Type;
        public readonly ImmutableArray<string> Urls;
        public readonly string? ValueRegex;

        [OutputConstructor]
        private GetDomainRecordsResult(
            string domainName,

            string? hostRecordRegex,

            string id,

            ImmutableArray<string> ids,

            bool? isLocked,

            string? line,

            string? outputFile,

            ImmutableArray<Outputs.GetDomainRecordsRecordResult> records,

            string? status,

            string? type,

            ImmutableArray<string> urls,

            string? valueRegex)
        {
            DomainName = domainName;
            HostRecordRegex = hostRecordRegex;
            Id = id;
            Ids = ids;
            IsLocked = isLocked;
            Line = line;
            OutputFile = outputFile;
            Records = records;
            Status = status;
            Type = type;
            Urls = urls;
            ValueRegex = valueRegex;
        }
    }
}
