// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sae
{
    /// <summary>
    /// Provides a Serverless App Engine (SAE) Application resource.
    /// 
    /// For information about Serverless App Engine (SAE) Application and how to use it, see [What is Application](https://help.aliyun.com/document_detail/97792.html).
    /// 
    /// &gt; **NOTE:** Available in v1.161.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-testacc";
    ///     var defaultZones = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var vpc = new AliCloud.Vpc.Network("vpc", new()
    ///     {
    ///         VpcName = "tf_testacc",
    ///         CidrBlock = "172.16.0.0/12",
    ///     });
    /// 
    ///     var vsw = new AliCloud.Vpc.Switch("vsw", new()
    ///     {
    ///         VpcId = vpc.Id,
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VswitchName = name,
    ///     });
    /// 
    ///     var defaultNamespace = new AliCloud.Sae.Namespace("defaultNamespace", new()
    ///     {
    ///         NamespaceDescription = name,
    ///         NamespaceId = "cn-hangzhou:tfacctest",
    ///         NamespaceName = name,
    ///     });
    /// 
    ///     var defaultApplication = new AliCloud.Sae.Application("defaultApplication", new()
    ///     {
    ///         AppDescription = "tf-testaccDescription",
    ///         AppName = "tf-testaccAppName",
    ///         NamespaceId = defaultNamespace.Id,
    ///         ImageUrl = "registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5",
    ///         PackageType = "Image",
    ///         VpcId = vsw.VpcId,
    ///         VswitchId = vsw.Id,
    ///         Timezone = "Asia/Beijing",
    ///         Replicas = 5,
    ///         Cpu = 500,
    ///         Memory = 2048,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Serverless App Engine (SAE) Application can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:sae/application:Application example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:sae/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the RAM role required when pulling images across accounts. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Output("acrAssumeRoleArn")]
        public Output<string?> AcrAssumeRoleArn { get; private set; } = null!;

        /// <summary>
        /// The ID of the ACR EE instance. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Output("acrInstanceId")]
        public Output<string?> AcrInstanceId { get; private set; } = null!;

        /// <summary>
        /// Application description information. No more than 1024 characters.
        /// </summary>
        [Output("appDescription")]
        public Output<string?> AppDescription { get; private set; } = null!;

        /// <summary>
        /// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// The auto config. Valid values: `false`, `true`.
        /// </summary>
        [Output("autoConfig")]
        public Output<bool?> AutoConfig { get; private set; } = null!;

        /// <summary>
        /// The auto enable application scaling rule. Valid values: `false`, `true`.
        /// </summary>
        [Output("autoEnableApplicationScalingRule")]
        public Output<bool> AutoEnableApplicationScalingRule { get; private set; } = null!;

        /// <summary>
        /// The batch wait time.
        /// </summary>
        [Output("batchWaitTime")]
        public Output<int> BatchWaitTime { get; private set; } = null!;

        /// <summary>
        /// The change order desc.
        /// </summary>
        [Output("changeOrderDesc")]
        public Output<string> ChangeOrderDesc { get; private set; } = null!;

        /// <summary>
        /// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
        /// </summary>
        [Output("command")]
        public Output<string?> Command { get; private set; } = null!;

        /// <summary>
        /// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
        /// </summary>
        [Output("commandArgs")]
        public Output<string?> CommandArgs { get; private set; } = null!;

        /// <summary>
        /// ConfigMap mount description.
        /// </summary>
        [Output("configMapMountDesc")]
        public Output<string> ConfigMapMountDesc { get; private set; } = null!;

        /// <summary>
        /// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
        /// </summary>
        [Output("cpu")]
        public Output<int?> Cpu { get; private set; } = null!;

        /// <summary>
        /// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
        /// </summary>
        [Output("customHostAlias")]
        public Output<string> CustomHostAlias { get; private set; } = null!;

        /// <summary>
        /// The deploy. Valid values: `false`, `true`.
        /// </summary>
        [Output("deploy")]
        public Output<bool?> Deploy { get; private set; } = null!;

        /// <summary>
        /// The operating environment used by the Pandora application.
        /// </summary>
        [Output("edasContainerVersion")]
        public Output<string?> EdasContainerVersion { get; private set; } = null!;

        /// <summary>
        /// The enable ahas.
        /// </summary>
        [Output("enableAhas")]
        public Output<string> EnableAhas { get; private set; } = null!;

        /// <summary>
        /// The enable grey tag route.
        /// </summary>
        [Output("enableGreyTagRoute")]
        public Output<bool> EnableGreyTagRoute { get; private set; } = null!;

        /// <summary>
        /// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
        /// </summary>
        [Output("envs")]
        public Output<string> Envs { get; private set; } = null!;

        /// <summary>
        /// Mirror address. Only Image type applications can configure the mirror address.
        /// </summary>
        [Output("imageUrl")]
        public Output<string?> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Output("jarStartArgs")]
        public Output<string?> JarStartArgs { get; private set; } = null!;

        /// <summary>
        /// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Output("jarStartOptions")]
        public Output<string?> JarStartOptions { get; private set; } = null!;

        /// <summary>
        /// The JDK version that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Output("jdk")]
        public Output<string?> Jdk { get; private set; } = null!;

        /// <summary>
        /// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
        /// </summary>
        [Output("liveness")]
        public Output<string?> Liveness { get; private set; } = null!;

        /// <summary>
        /// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
        /// </summary>
        [Output("memory")]
        public Output<int?> Memory { get; private set; } = null!;

        /// <summary>
        /// Select the Nacos registry. Valid values: `0`, `1`, `2`.
        /// </summary>
        [Output("microRegistration")]
        public Output<string?> MicroRegistration { get; private set; } = null!;

        /// <summary>
        /// Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows: 
        /// * `-1`: Initialization value, indicating that percentages are not used.
        /// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
        /// </summary>
        [Output("minReadyInstanceRatio")]
        public Output<int> MinReadyInstanceRatio { get; private set; } = null!;

        /// <summary>
        /// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
        /// </summary>
        [Output("minReadyInstances")]
        public Output<int> MinReadyInstances { get; private set; } = null!;

        /// <summary>
        /// Mount description.
        /// </summary>
        [Output("mountDesc")]
        public Output<string?> MountDesc { get; private set; } = null!;

        /// <summary>
        /// Mount point of NAS in application VPC.
        /// </summary>
        [Output("mountHost")]
        public Output<string?> MountHost { get; private set; } = null!;

        /// <summary>
        /// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
        /// </summary>
        [Output("namespaceId")]
        public Output<string?> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
        /// </summary>
        [Output("nasId")]
        public Output<string?> NasId { get; private set; } = null!;

        /// <summary>
        /// OSS AccessKey ID.
        /// </summary>
        [Output("ossAkId")]
        public Output<string?> OssAkId { get; private set; } = null!;

        /// <summary>
        /// OSS  AccessKey Secret.
        /// </summary>
        [Output("ossAkSecret")]
        public Output<string?> OssAkSecret { get; private set; } = null!;

        /// <summary>
        /// OSS mount description information.
        /// </summary>
        [Output("ossMountDescs")]
        public Output<string?> OssMountDescs { get; private set; } = null!;

        /// <summary>
        /// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
        /// </summary>
        [Output("packageType")]
        public Output<string> PackageType { get; private set; } = null!;

        /// <summary>
        /// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
        /// </summary>
        [Output("packageUrl")]
        public Output<string?> PackageUrl { get; private set; } = null!;

        /// <summary>
        /// The version number of the deployment package. Required when the Package Type is War and FatJar.
        /// </summary>
        [Output("packageVersion")]
        public Output<string> PackageVersion { get; private set; } = null!;

        /// <summary>
        /// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
        /// </summary>
        [Output("phpArmsConfigLocation")]
        public Output<string?> PhpArmsConfigLocation { get; private set; } = null!;

        /// <summary>
        /// PHP configuration file content.
        /// </summary>
        [Output("phpConfig")]
        public Output<string?> PhpConfig { get; private set; } = null!;

        /// <summary>
        /// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
        /// </summary>
        [Output("phpConfigLocation")]
        public Output<string?> PhpConfigLocation { get; private set; } = null!;

        /// <summary>
        /// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Output("postStart")]
        public Output<string?> PostStart { get; private set; } = null!;

        /// <summary>
        /// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Output("preStop")]
        public Output<string?> PreStop { get; private set; } = null!;

        /// <summary>
        /// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
        /// </summary>
        [Output("readiness")]
        public Output<string?> Readiness { get; private set; } = null!;

        /// <summary>
        /// Initial number of instances.
        /// </summary>
        [Output("replicas")]
        public Output<int> Replicas { get; private set; } = null!;

        /// <summary>
        /// Security group ID.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// SLS  configuration.
        /// </summary>
        [Output("slsConfigs")]
        public Output<string?> SlsConfigs { get; private set; } = null!;

        /// <summary>
        /// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
        /// </summary>
        [Output("terminationGracePeriodSeconds")]
        public Output<int> TerminationGracePeriodSeconds { get; private set; } = null!;

        /// <summary>
        /// Time zone, the default value is Asia/Shanghai.
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
        /// </summary>
        [Output("tomcatConfig")]
        public Output<string?> TomcatConfig { get; private set; } = null!;

        /// <summary>
        /// The update strategy.
        /// </summary>
        [Output("updateStrategy")]
        public Output<string> UpdateStrategy { get; private set; } = null!;

        /// <summary>
        /// Application version id.
        /// </summary>
        [Output("versionId")]
        public Output<string?> VersionId { get; private set; } = null!;

        /// <summary>
        /// The vpc id.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;

        /// <summary>
        /// The vswitch id.
        /// </summary>
        [Output("vswitchId")]
        public Output<string?> VswitchId { get; private set; } = null!;

        /// <summary>
        /// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
        /// </summary>
        [Output("warStartOptions")]
        public Output<string?> WarStartOptions { get; private set; } = null!;

        /// <summary>
        /// The version of tomcat that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Output("webContainer")]
        public Output<string?> WebContainer { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("alicloud:sae/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:sae/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "ossAkId",
                    "ossAkSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the RAM role required when pulling images across accounts. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Input("acrAssumeRoleArn")]
        public Input<string>? AcrAssumeRoleArn { get; set; }

        /// <summary>
        /// The ID of the ACR EE instance. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Input("acrInstanceId")]
        public Input<string>? AcrInstanceId { get; set; }

        /// <summary>
        /// Application description information. No more than 1024 characters.
        /// </summary>
        [Input("appDescription")]
        public Input<string>? AppDescription { get; set; }

        /// <summary>
        /// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// The auto config. Valid values: `false`, `true`.
        /// </summary>
        [Input("autoConfig")]
        public Input<bool>? AutoConfig { get; set; }

        /// <summary>
        /// The auto enable application scaling rule. Valid values: `false`, `true`.
        /// </summary>
        [Input("autoEnableApplicationScalingRule")]
        public Input<bool>? AutoEnableApplicationScalingRule { get; set; }

        /// <summary>
        /// The batch wait time.
        /// </summary>
        [Input("batchWaitTime")]
        public Input<int>? BatchWaitTime { get; set; }

        /// <summary>
        /// The change order desc.
        /// </summary>
        [Input("changeOrderDesc")]
        public Input<string>? ChangeOrderDesc { get; set; }

        /// <summary>
        /// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
        /// </summary>
        [Input("commandArgs")]
        public Input<string>? CommandArgs { get; set; }

        /// <summary>
        /// ConfigMap mount description.
        /// </summary>
        [Input("configMapMountDesc")]
        public Input<string>? ConfigMapMountDesc { get; set; }

        /// <summary>
        /// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
        /// </summary>
        [Input("customHostAlias")]
        public Input<string>? CustomHostAlias { get; set; }

        /// <summary>
        /// The deploy. Valid values: `false`, `true`.
        /// </summary>
        [Input("deploy")]
        public Input<bool>? Deploy { get; set; }

        /// <summary>
        /// The operating environment used by the Pandora application.
        /// </summary>
        [Input("edasContainerVersion")]
        public Input<string>? EdasContainerVersion { get; set; }

        /// <summary>
        /// The enable ahas.
        /// </summary>
        [Input("enableAhas")]
        public Input<string>? EnableAhas { get; set; }

        /// <summary>
        /// The enable grey tag route.
        /// </summary>
        [Input("enableGreyTagRoute")]
        public Input<bool>? EnableGreyTagRoute { get; set; }

        /// <summary>
        /// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
        /// </summary>
        [Input("envs")]
        public Input<string>? Envs { get; set; }

        /// <summary>
        /// Mirror address. Only Image type applications can configure the mirror address.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Input("jarStartArgs")]
        public Input<string>? JarStartArgs { get; set; }

        /// <summary>
        /// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Input("jarStartOptions")]
        public Input<string>? JarStartOptions { get; set; }

        /// <summary>
        /// The JDK version that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Input("jdk")]
        public Input<string>? Jdk { get; set; }

        /// <summary>
        /// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
        /// </summary>
        [Input("liveness")]
        public Input<string>? Liveness { get; set; }

        /// <summary>
        /// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// Select the Nacos registry. Valid values: `0`, `1`, `2`.
        /// </summary>
        [Input("microRegistration")]
        public Input<string>? MicroRegistration { get; set; }

        /// <summary>
        /// Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows: 
        /// * `-1`: Initialization value, indicating that percentages are not used.
        /// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
        /// </summary>
        [Input("minReadyInstanceRatio")]
        public Input<int>? MinReadyInstanceRatio { get; set; }

        /// <summary>
        /// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
        /// </summary>
        [Input("minReadyInstances")]
        public Input<int>? MinReadyInstances { get; set; }

        /// <summary>
        /// Mount description.
        /// </summary>
        [Input("mountDesc")]
        public Input<string>? MountDesc { get; set; }

        /// <summary>
        /// Mount point of NAS in application VPC.
        /// </summary>
        [Input("mountHost")]
        public Input<string>? MountHost { get; set; }

        /// <summary>
        /// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
        /// </summary>
        [Input("nasId")]
        public Input<string>? NasId { get; set; }

        [Input("ossAkId")]
        private Input<string>? _ossAkId;

        /// <summary>
        /// OSS AccessKey ID.
        /// </summary>
        public Input<string>? OssAkId
        {
            get => _ossAkId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ossAkId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ossAkSecret")]
        private Input<string>? _ossAkSecret;

        /// <summary>
        /// OSS  AccessKey Secret.
        /// </summary>
        public Input<string>? OssAkSecret
        {
            get => _ossAkSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ossAkSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// OSS mount description information.
        /// </summary>
        [Input("ossMountDescs")]
        public Input<string>? OssMountDescs { get; set; }

        /// <summary>
        /// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
        /// </summary>
        [Input("packageType", required: true)]
        public Input<string> PackageType { get; set; } = null!;

        /// <summary>
        /// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
        /// </summary>
        [Input("packageUrl")]
        public Input<string>? PackageUrl { get; set; }

        /// <summary>
        /// The version number of the deployment package. Required when the Package Type is War and FatJar.
        /// </summary>
        [Input("packageVersion")]
        public Input<string>? PackageVersion { get; set; }

        /// <summary>
        /// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
        /// </summary>
        [Input("phpArmsConfigLocation")]
        public Input<string>? PhpArmsConfigLocation { get; set; }

        /// <summary>
        /// PHP configuration file content.
        /// </summary>
        [Input("phpConfig")]
        public Input<string>? PhpConfig { get; set; }

        /// <summary>
        /// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
        /// </summary>
        [Input("phpConfigLocation")]
        public Input<string>? PhpConfigLocation { get; set; }

        /// <summary>
        /// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Input("postStart")]
        public Input<string>? PostStart { get; set; }

        /// <summary>
        /// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Input("preStop")]
        public Input<string>? PreStop { get; set; }

        /// <summary>
        /// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
        /// </summary>
        [Input("readiness")]
        public Input<string>? Readiness { get; set; }

        /// <summary>
        /// Initial number of instances.
        /// </summary>
        [Input("replicas", required: true)]
        public Input<int> Replicas { get; set; } = null!;

        /// <summary>
        /// Security group ID.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// SLS  configuration.
        /// </summary>
        [Input("slsConfigs")]
        public Input<string>? SlsConfigs { get; set; }

        /// <summary>
        /// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
        /// </summary>
        [Input("terminationGracePeriodSeconds")]
        public Input<int>? TerminationGracePeriodSeconds { get; set; }

        /// <summary>
        /// Time zone, the default value is Asia/Shanghai.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
        /// </summary>
        [Input("tomcatConfig")]
        public Input<string>? TomcatConfig { get; set; }

        /// <summary>
        /// The update strategy.
        /// </summary>
        [Input("updateStrategy")]
        public Input<string>? UpdateStrategy { get; set; }

        /// <summary>
        /// Application version id.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// The vpc id.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The vswitch id.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
        /// </summary>
        [Input("warStartOptions")]
        public Input<string>? WarStartOptions { get; set; }

        /// <summary>
        /// The version of tomcat that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Input("webContainer")]
        public Input<string>? WebContainer { get; set; }

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the RAM role required when pulling images across accounts. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Input("acrAssumeRoleArn")]
        public Input<string>? AcrAssumeRoleArn { get; set; }

        /// <summary>
        /// The ID of the ACR EE instance. Only necessary if the image_url is pointing to an ACR EE instance.
        /// </summary>
        [Input("acrInstanceId")]
        public Input<string>? AcrInstanceId { get; set; }

        /// <summary>
        /// Application description information. No more than 1024 characters.
        /// </summary>
        [Input("appDescription")]
        public Input<string>? AppDescription { get; set; }

        /// <summary>
        /// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// The auto config. Valid values: `false`, `true`.
        /// </summary>
        [Input("autoConfig")]
        public Input<bool>? AutoConfig { get; set; }

        /// <summary>
        /// The auto enable application scaling rule. Valid values: `false`, `true`.
        /// </summary>
        [Input("autoEnableApplicationScalingRule")]
        public Input<bool>? AutoEnableApplicationScalingRule { get; set; }

        /// <summary>
        /// The batch wait time.
        /// </summary>
        [Input("batchWaitTime")]
        public Input<int>? BatchWaitTime { get; set; }

        /// <summary>
        /// The change order desc.
        /// </summary>
        [Input("changeOrderDesc")]
        public Input<string>? ChangeOrderDesc { get; set; }

        /// <summary>
        /// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
        /// </summary>
        [Input("commandArgs")]
        public Input<string>? CommandArgs { get; set; }

        /// <summary>
        /// ConfigMap mount description.
        /// </summary>
        [Input("configMapMountDesc")]
        public Input<string>? ConfigMapMountDesc { get; set; }

        /// <summary>
        /// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
        /// </summary>
        [Input("customHostAlias")]
        public Input<string>? CustomHostAlias { get; set; }

        /// <summary>
        /// The deploy. Valid values: `false`, `true`.
        /// </summary>
        [Input("deploy")]
        public Input<bool>? Deploy { get; set; }

        /// <summary>
        /// The operating environment used by the Pandora application.
        /// </summary>
        [Input("edasContainerVersion")]
        public Input<string>? EdasContainerVersion { get; set; }

        /// <summary>
        /// The enable ahas.
        /// </summary>
        [Input("enableAhas")]
        public Input<string>? EnableAhas { get; set; }

        /// <summary>
        /// The enable grey tag route.
        /// </summary>
        [Input("enableGreyTagRoute")]
        public Input<bool>? EnableGreyTagRoute { get; set; }

        /// <summary>
        /// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
        /// </summary>
        [Input("envs")]
        public Input<string>? Envs { get; set; }

        /// <summary>
        /// Mirror address. Only Image type applications can configure the mirror address.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Input("jarStartArgs")]
        public Input<string>? JarStartArgs { get; set; }

        /// <summary>
        /// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
        /// </summary>
        [Input("jarStartOptions")]
        public Input<string>? JarStartOptions { get; set; }

        /// <summary>
        /// The JDK version that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Input("jdk")]
        public Input<string>? Jdk { get; set; }

        /// <summary>
        /// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
        /// </summary>
        [Input("liveness")]
        public Input<string>? Liveness { get; set; }

        /// <summary>
        /// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// Select the Nacos registry. Valid values: `0`, `1`, `2`.
        /// </summary>
        [Input("microRegistration")]
        public Input<string>? MicroRegistration { get; set; }

        /// <summary>
        /// Minimum Survival Instance Percentage. **NOTE:** When `min_ready_instances` and `min_ready_instance_ratio` are passed at the same time, and the value of `min_ready_instance_ratio` is not -1, the `min_ready_instance_ratio` parameter shall prevail. Assuming that `min_ready_instances` is 5 and `min_ready_instance_ratio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows: 
        /// * `-1`: Initialization value, indicating that percentages are not used.
        /// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
        /// </summary>
        [Input("minReadyInstanceRatio")]
        public Input<int>? MinReadyInstanceRatio { get; set; }

        /// <summary>
        /// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
        /// </summary>
        [Input("minReadyInstances")]
        public Input<int>? MinReadyInstances { get; set; }

        /// <summary>
        /// Mount description.
        /// </summary>
        [Input("mountDesc")]
        public Input<string>? MountDesc { get; set; }

        /// <summary>
        /// Mount point of NAS in application VPC.
        /// </summary>
        [Input("mountHost")]
        public Input<string>? MountHost { get; set; }

        /// <summary>
        /// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
        /// </summary>
        [Input("nasId")]
        public Input<string>? NasId { get; set; }

        [Input("ossAkId")]
        private Input<string>? _ossAkId;

        /// <summary>
        /// OSS AccessKey ID.
        /// </summary>
        public Input<string>? OssAkId
        {
            get => _ossAkId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ossAkId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ossAkSecret")]
        private Input<string>? _ossAkSecret;

        /// <summary>
        /// OSS  AccessKey Secret.
        /// </summary>
        public Input<string>? OssAkSecret
        {
            get => _ossAkSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ossAkSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// OSS mount description information.
        /// </summary>
        [Input("ossMountDescs")]
        public Input<string>? OssMountDescs { get; set; }

        /// <summary>
        /// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
        /// </summary>
        [Input("packageUrl")]
        public Input<string>? PackageUrl { get; set; }

        /// <summary>
        /// The version number of the deployment package. Required when the Package Type is War and FatJar.
        /// </summary>
        [Input("packageVersion")]
        public Input<string>? PackageVersion { get; set; }

        /// <summary>
        /// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
        /// </summary>
        [Input("phpArmsConfigLocation")]
        public Input<string>? PhpArmsConfigLocation { get; set; }

        /// <summary>
        /// PHP configuration file content.
        /// </summary>
        [Input("phpConfig")]
        public Input<string>? PhpConfig { get; set; }

        /// <summary>
        /// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
        /// </summary>
        [Input("phpConfigLocation")]
        public Input<string>? PhpConfigLocation { get; set; }

        /// <summary>
        /// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Input("postStart")]
        public Input<string>? PostStart { get; set; }

        /// <summary>
        /// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
        /// </summary>
        [Input("preStop")]
        public Input<string>? PreStop { get; set; }

        /// <summary>
        /// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
        /// </summary>
        [Input("readiness")]
        public Input<string>? Readiness { get; set; }

        /// <summary>
        /// Initial number of instances.
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// Security group ID.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// SLS  configuration.
        /// </summary>
        [Input("slsConfigs")]
        public Input<string>? SlsConfigs { get; set; }

        /// <summary>
        /// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
        /// </summary>
        [Input("terminationGracePeriodSeconds")]
        public Input<int>? TerminationGracePeriodSeconds { get; set; }

        /// <summary>
        /// Time zone, the default value is Asia/Shanghai.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
        /// </summary>
        [Input("tomcatConfig")]
        public Input<string>? TomcatConfig { get; set; }

        /// <summary>
        /// The update strategy.
        /// </summary>
        [Input("updateStrategy")]
        public Input<string>? UpdateStrategy { get; set; }

        /// <summary>
        /// Application version id.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// The vpc id.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The vswitch id.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
        /// </summary>
        [Input("warStartOptions")]
        public Input<string>? WarStartOptions { get; set; }

        /// <summary>
        /// The version of tomcat that the deployment package depends on. Image type applications are not supported.
        /// </summary>
        [Input("webContainer")]
        public Input<string>? WebContainer { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
