// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ddos.Outputs
{

    [OutputType]
    public sealed class BgpPolicyContent
    {
        /// <summary>
        /// Blacklist and whitelist timeout.
        /// </summary>
        public readonly int? BlackIpListExpireAt;
        /// <summary>
        /// Whether to enable L4 protection.
        /// </summary>
        public readonly bool? EnableDefense;
        /// <summary>
        /// Switch to discard ICMP.
        /// </summary>
        public readonly bool? EnableDropIcmp;
        /// <summary>
        /// Whether the intelligent switch is on.
        /// </summary>
        public readonly bool? EnableIntelligence;
        /// <summary>
        /// Fingerprint Rules. See `finger_print_rule_list` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.BgpPolicyContentFingerPrintRuleList> FingerPrintRuleLists;
        /// <summary>
        /// Smart mode. Valid values: weak, hard, and default.
        /// </summary>
        public readonly string? IntelligenceLevel;
        /// <summary>
        /// L4 protection rules. See `layer4_rule_list` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.BgpPolicyContentLayer4RuleList> Layer4RuleLists;
        /// <summary>
        /// Port Rule List. See `port_rule_list` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.BgpPolicyContentPortRuleList> PortRuleLists;
        /// <summary>
        /// Reflective port filtering.
        /// </summary>
        public readonly ImmutableArray<int> ReflectBlockUdpPortLists;
        /// <summary>
        /// List of Regional Banned Countries.
        /// </summary>
        public readonly ImmutableArray<int> RegionBlockCountryLists;
        /// <summary>
        /// List of Prohibited Provinces by Region.
        /// </summary>
        public readonly ImmutableArray<int> RegionBlockProvinceLists;
        /// <summary>
        /// Source pull Black. See `source_block_list` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.BgpPolicyContentSourceBlockList> SourceBlockLists;
        /// <summary>
        /// Do not fill in when the source speed limit is deleted. See `source_limit` below.
        /// </summary>
        public readonly Outputs.BgpPolicyContentSourceLimit? SourceLimit;
        /// <summary>
        /// Add white high protection back to source network segment switch.
        /// </summary>
        public readonly bool? WhitenGfbrNets;

        [OutputConstructor]
        private BgpPolicyContent(
            int? blackIpListExpireAt,

            bool? enableDefense,

            bool? enableDropIcmp,

            bool? enableIntelligence,

            ImmutableArray<Outputs.BgpPolicyContentFingerPrintRuleList> fingerPrintRuleLists,

            string? intelligenceLevel,

            ImmutableArray<Outputs.BgpPolicyContentLayer4RuleList> layer4RuleLists,

            ImmutableArray<Outputs.BgpPolicyContentPortRuleList> portRuleLists,

            ImmutableArray<int> reflectBlockUdpPortLists,

            ImmutableArray<int> regionBlockCountryLists,

            ImmutableArray<int> regionBlockProvinceLists,

            ImmutableArray<Outputs.BgpPolicyContentSourceBlockList> sourceBlockLists,

            Outputs.BgpPolicyContentSourceLimit? sourceLimit,

            bool? whitenGfbrNets)
        {
            BlackIpListExpireAt = blackIpListExpireAt;
            EnableDefense = enableDefense;
            EnableDropIcmp = enableDropIcmp;
            EnableIntelligence = enableIntelligence;
            FingerPrintRuleLists = fingerPrintRuleLists;
            IntelligenceLevel = intelligenceLevel;
            Layer4RuleLists = layer4RuleLists;
            PortRuleLists = portRuleLists;
            ReflectBlockUdpPortLists = reflectBlockUdpPortLists;
            RegionBlockCountryLists = regionBlockCountryLists;
            RegionBlockProvinceLists = regionBlockProvinceLists;
            SourceBlockLists = sourceBlockLists;
            SourceLimit = sourceLimit;
            WhitenGfbrNets = whitenGfbrNets;
        }
    }
}
