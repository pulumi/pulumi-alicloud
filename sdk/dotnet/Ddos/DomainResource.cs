// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ddos
{
    /// <summary>
    /// Provides a Ddos Coo Domain Resource resource.
    /// 
    /// For information about Ddos Coo Domain Resource and how to use it, see [What is Domain Resource](https://www.alibabacloud.com/help/en/anti-ddos/anti-ddos-pro-and-premium/developer-reference/api-ddoscoo-2020-01-01-createdomainresource).
    /// 
    /// &gt; **NOTE:** Available since v1.123.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var domain = config.Get("domain") ?? "tf-example.alibaba.com";
    ///     var @default = new AliCloud.Ddos.DdosCooInstance("default", new()
    ///     {
    ///         Name = name,
    ///         Bandwidth = "30",
    ///         BaseBandwidth = "30",
    ///         ServiceBandwidth = "100",
    ///         PortCount = "50",
    ///         DomainCount = "50",
    ///         Period = 1,
    ///         ProductType = "ddoscoo",
    ///     });
    /// 
    ///     var defaultDomainResource = new AliCloud.Ddos.DomainResource("default", new()
    ///     {
    ///         Domain = domain,
    ///         RsType = 0,
    ///         InstanceIds = new[]
    ///         {
    ///             @default.Id,
    ///         },
    ///         RealServers = new[]
    ///         {
    ///             "177.167.32.11",
    ///         },
    ///         HttpsExt = @"    {
    ///     \""Http2\"": 1,
    ///     \""Http2https\"": 0,
    ///     \""Https2http\"": 0
    ///   }
    /// ",
    ///         ProxyTypes = new[]
    ///         {
    ///             new AliCloud.Ddos.Inputs.DomainResourceProxyTypeArgs
    ///             {
    ///                 ProxyPorts = new[]
    ///                 {
    ///                     443,
    ///                 },
    ///                 ProxyType = "https",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Ddos Coo Domain Resource can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ddos/domainResource:DomainResource example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ddos/domainResource:DomainResource")]
    public partial class DomainResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        [Output("cert")]
        public Output<string?> Cert { get; private set; } = null!;

        /// <summary>
        /// The name of the certificate.
        /// 
        /// &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `CertIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `CertIdentifier` is `123-cn-hangzhou`.
        /// </summary>
        [Output("certIdentifier")]
        public Output<string?> CertIdentifier { get; private set; } = null!;

        /// <summary>
        /// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        [Output("certName")]
        public Output<string> CertName { get; private set; } = null!;

        /// <summary>
        /// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
        /// </summary>
        [Output("certRegion")]
        public Output<string?> CertRegion { get; private set; } = null!;

        /// <summary>
        /// The CNAME address to query.
        /// </summary>
        [Output("cname")]
        public Output<string> Cname { get; private set; } = null!;

        /// <summary>
        /// The domain name for which you want to configure the Static Page Caching policy.
        /// 
        /// &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `Https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
        /// 
        /// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
        /// 
        /// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
        /// 
        /// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
        /// 
        /// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
        /// 
        /// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
        /// 
        /// After you turn on the switch, HTTP/2 is used.
        /// </summary>
        [Output("httpsExt")]
        public Output<string> HttpsExt { get; private set; } = null!;

        /// <summary>
        /// InstanceIds
        /// </summary>
        [Output("instanceIds")]
        public Output<ImmutableArray<string>> InstanceIds { get; private set; } = null!;

        /// <summary>
        /// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
        /// 
        /// &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
        /// </summary>
        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable the OCSP feature. Valid values:
        /// </summary>
        [Output("ocspEnabled")]
        public Output<bool?> OcspEnabled { get; private set; } = null!;

        /// <summary>
        /// Protocol type and port number information. See `ProxyTypes` below.
        /// </summary>
        [Output("proxyTypes")]
        public Output<ImmutableArray<Outputs.DomainResourceProxyType>> ProxyTypes { get; private set; } = null!;

        /// <summary>
        /// Server address information of the source station.
        /// </summary>
        [Output("realServers")]
        public Output<ImmutableArray<string>> RealServers { get; private set; } = null!;

        /// <summary>
        /// The address type of the origin server. Valid values:
        /// </summary>
        [Output("rsType")]
        public Output<int> RsType { get; private set; } = null!;


        /// <summary>
        /// Create a DomainResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainResource(string name, DomainResourceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ddos/domainResource:DomainResource", name, args ?? new DomainResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainResource(string name, Input<string> id, DomainResourceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ddos/domainResource:DomainResource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "cert",
                    "certRegion",
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainResource Get(string name, Input<string> id, DomainResourceState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainResource(name, id, state, options);
        }
    }

    public sealed class DomainResourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("cert")]
        private Input<string>? _cert;

        /// <summary>
        /// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        public Input<string>? Cert
        {
            get => _cert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the certificate.
        /// 
        /// &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `CertIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `CertIdentifier` is `123-cn-hangzhou`.
        /// </summary>
        [Input("certIdentifier")]
        public Input<string>? CertIdentifier { get; set; }

        /// <summary>
        /// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        [Input("certRegion")]
        private Input<string>? _certRegion;

        /// <summary>
        /// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
        /// </summary>
        public Input<string>? CertRegion
        {
            get => _certRegion;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certRegion = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The domain name for which you want to configure the Static Page Caching policy.
        /// 
        /// &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `Https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
        /// 
        /// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
        /// 
        /// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
        /// 
        /// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
        /// 
        /// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
        /// 
        /// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
        /// 
        /// After you turn on the switch, HTTP/2 is used.
        /// </summary>
        [Input("httpsExt")]
        public Input<string>? HttpsExt { get; set; }

        [Input("instanceIds", required: true)]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// InstanceIds
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
        /// 
        /// &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to enable the OCSP feature. Valid values:
        /// </summary>
        [Input("ocspEnabled")]
        public Input<bool>? OcspEnabled { get; set; }

        [Input("proxyTypes", required: true)]
        private InputList<Inputs.DomainResourceProxyTypeArgs>? _proxyTypes;

        /// <summary>
        /// Protocol type and port number information. See `ProxyTypes` below.
        /// </summary>
        public InputList<Inputs.DomainResourceProxyTypeArgs> ProxyTypes
        {
            get => _proxyTypes ?? (_proxyTypes = new InputList<Inputs.DomainResourceProxyTypeArgs>());
            set => _proxyTypes = value;
        }

        [Input("realServers", required: true)]
        private InputList<string>? _realServers;

        /// <summary>
        /// Server address information of the source station.
        /// </summary>
        public InputList<string> RealServers
        {
            get => _realServers ?? (_realServers = new InputList<string>());
            set => _realServers = value;
        }

        /// <summary>
        /// The address type of the origin server. Valid values:
        /// </summary>
        [Input("rsType", required: true)]
        public Input<int> RsType { get; set; } = null!;

        public DomainResourceArgs()
        {
        }
        public static new DomainResourceArgs Empty => new DomainResourceArgs();
    }

    public sealed class DomainResourceState : global::Pulumi.ResourceArgs
    {
        [Input("cert")]
        private Input<string>? _cert;

        /// <summary>
        /// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        public Input<string>? Cert
        {
            get => _cert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the certificate.
        /// 
        /// &gt; **NOTE:**   You can specify the name of the certificate that you want to associate. From version 1.249.0, `CertIdentifier` is in the "CertificateID-RegionId" format. For example, if the ID of the certificateId is `123`, and the region ID is `cn-hangzhou`, the value of the `CertIdentifier` is `123-cn-hangzhou`.
        /// </summary>
        [Input("certIdentifier")]
        public Input<string>? CertIdentifier { get; set; }

        /// <summary>
        /// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
        /// 
        /// &gt; **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        [Input("certRegion")]
        private Input<string>? _certRegion;

        /// <summary>
        /// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
        /// </summary>
        public Input<string>? CertRegion
        {
            get => _certRegion;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certRegion = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The CNAME address to query.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        /// <summary>
        /// The domain name for which you want to configure the Static Page Caching policy.
        /// 
        /// &gt; **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `Https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
        /// 
        /// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
        /// 
        /// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
        /// 
        /// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
        /// 
        /// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
        /// 
        /// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
        /// 
        /// After you turn on the switch, HTTP/2 is used.
        /// </summary>
        [Input("httpsExt")]
        public Input<string>? HttpsExt { get; set; }

        [Input("instanceIds")]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// InstanceIds
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
        /// 
        /// &gt; **NOTE:**   You can specify only one of this parameter and the CertId parameter.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to enable the OCSP feature. Valid values:
        /// </summary>
        [Input("ocspEnabled")]
        public Input<bool>? OcspEnabled { get; set; }

        [Input("proxyTypes")]
        private InputList<Inputs.DomainResourceProxyTypeGetArgs>? _proxyTypes;

        /// <summary>
        /// Protocol type and port number information. See `ProxyTypes` below.
        /// </summary>
        public InputList<Inputs.DomainResourceProxyTypeGetArgs> ProxyTypes
        {
            get => _proxyTypes ?? (_proxyTypes = new InputList<Inputs.DomainResourceProxyTypeGetArgs>());
            set => _proxyTypes = value;
        }

        [Input("realServers")]
        private InputList<string>? _realServers;

        /// <summary>
        /// Server address information of the source station.
        /// </summary>
        public InputList<string> RealServers
        {
            get => _realServers ?? (_realServers = new InputList<string>());
            set => _realServers = value;
        }

        /// <summary>
        /// The address type of the origin server. Valid values:
        /// </summary>
        [Input("rsType")]
        public Input<int>? RsType { get; set; }

        public DomainResourceState()
        {
        }
        public static new DomainResourceState Empty => new DomainResourceState();
    }
}
