// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.starRocks
{
    /// <summary>
    /// Provides a Star Rocks Node Group resource.
    /// 
    /// For information about Star Rocks Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/starrocks/2022-10-19/CreateNodeGroup).
    /// 
    /// &gt; **NOTE:** Available since v1.262.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var defaultq6pcFe = new AliCloud.Vpc.Network("defaultq6pcFe", new()
    ///     {
    ///         CidrBlock = "172.16.0.0/12",
    ///         VpcName = "example-vpc-487",
    ///     });
    /// 
    ///     var defaultujlpyG = new AliCloud.Vpc.Switch("defaultujlpyG", new()
    ///     {
    ///         VpcId = defaultq6pcFe.Id,
    ///         ZoneId = "cn-hangzhou-i",
    ///         CidrBlock = "172.16.0.0/24",
    ///         VswitchName = "sr-example-ng",
    ///     });
    /// 
    ///     var defaultvjnpM0 = new AliCloud.StarRocks.Instance("defaultvjnpM0", new()
    ///     {
    ///         ClusterZoneId = "cn-hangzhou-i",
    ///         Encrypted = false,
    ///         AutoRenew = false,
    ///         PayType = "postPaid",
    ///         FrontendNodeGroups = new[]
    ///         {
    ///             new AliCloud.starRocks.Inputs.InstanceFrontendNodeGroupArgs
    ///             {
    ///                 Cu = 8,
    ///                 StorageSize = 100,
    ///                 StoragePerformanceLevel = "pl1",
    ///                 DiskNumber = 1,
    ///                 ZoneId = "cn-hangzhou-i",
    ///                 SpecType = "standard",
    ///                 ResidentNodeNumber = 1,
    ///             },
    ///         },
    ///         InstanceName = "t1",
    ///         Vswitches = new[]
    ///         {
    ///             new AliCloud.starRocks.Inputs.InstanceVswitchArgs
    ///             {
    ///                 ZoneId = "cn-hangzhou-i",
    ///                 VswitchId = defaultujlpyG.Id,
    ///             },
    ///         },
    ///         VpcId = defaultq6pcFe.Id,
    ///         Version = "3.3",
    ///         RunMode = "shared_data",
    ///         PackageType = "official",
    ///         OssAccessingRoleName = "AliyunEMRStarRocksAccessingOSSRolecn",
    ///         AdminPassword = "1qaz@QAZ",
    ///         BackendNodeGroups = new[]
    ///         {
    ///             new AliCloud.starRocks.Inputs.InstanceBackendNodeGroupArgs
    ///             {
    ///                 Cu = 8,
    ///                 StorageSize = 200,
    ///                 ZoneId = "cn-hangzhou-i",
    ///                 SpecType = "standard",
    ///                 ResidentNodeNumber = 3,
    ///                 DiskNumber = 1,
    ///                 StoragePerformanceLevel = "pl1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new AliCloud.StarRocks.NodeGroup("default", new()
    ///     {
    ///         Description = "example_desc",
    ///         NodeGroupName = "ng_676",
    ///         InstanceId = defaultvjnpM0.Id,
    ///         SpecType = "standard",
    ///         StoragePerformanceLevel = "pl1",
    ///         PricingCycle = "1",
    ///         AutoRenew = false,
    ///         StorageSize = 200,
    ///         Duration = 1,
    ///         PayType = "postPaid",
    ///         Cu = 8,
    ///         DiskNumber = 1,
    ///         ResidentNodeNumber = 1,
    ///         LocalStorageInstanceType = "non_local_storage",
    ///         PromotionOptionNo = "blank",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Star Rocks Node Group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:starrocks/nodeGroup:NodeGroup example &lt;instance_id&gt;:&lt;node_group_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:starrocks/nodeGroup:NodeGroup")]
    public partial class NodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether auto-renewal is enabled.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The creation time of the node group.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
        /// </summary>
        [Output("cu")]
        public Output<int?> Cu { get; private set; } = null!;

        /// <summary>
        /// Description of node group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Number of disks.
        /// </summary>
        [Output("diskNumber")]
        public Output<int?> DiskNumber { get; private set; } = null!;

        /// <summary>
        /// Duration of node group.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Output("duration")]
        public Output<int?> Duration { get; private set; } = null!;

        /// <summary>
        /// Whether to restart in fast restart mode. The default is false.
        /// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
        /// - false: Restarts the compute node in rolling restart mode.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Output("fastMode")]
        public Output<bool?> FastMode { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
        /// </summary>
        [Output("localStorageInstanceType")]
        public Output<string?> LocalStorageInstanceType { get; private set; } = null!;

        /// <summary>
        /// The ID of the node group.
        /// </summary>
        [Output("nodeGroupId")]
        public Output<string> NodeGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Output("nodeGroupName")]
        public Output<string?> NodeGroupName { get; private set; } = null!;

        /// <summary>
        /// Payment type:
        /// - PrePaid: Subscription (prepaid).
        /// - PostPaid: Pay-as-you-go (postpaid).
        /// </summary>
        [Output("payType")]
        public Output<string?> PayType { get; private set; } = null!;

        /// <summary>
        /// Unit of purchase duration:
        /// - Month
        /// - Year
        /// 
        /// This is only applicable when payType is set to PrePaid.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Output("pricingCycle")]
        public Output<string?> PricingCycle { get; private set; } = null!;

        [Output("promotionOptionNo")]
        public Output<string?> PromotionOptionNo { get; private set; } = null!;

        /// <summary>
        /// The region ID of the node group.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Number of nodes.
        /// </summary>
        [Output("residentNodeNumber")]
        public Output<int?> ResidentNodeNumber { get; private set; } = null!;

        /// <summary>
        /// Node group spec types include the following:
        /// - standard: Standard edition.
        /// - localSSD: Local SSD.
        /// - bigData: Large-scale storage.
        /// - ramEnhanced: Memory-enhanced type.
        /// - networkEnhanced: Network-enhanced type.
        /// </summary>
        [Output("specType")]
        public Output<string?> SpecType { get; private set; } = null!;

        /// <summary>
        /// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Performance levels of the cloud disk. Includes the following values:
        /// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
        /// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
        /// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
        /// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
        /// </summary>
        [Output("storagePerformanceLevel")]
        public Output<string?> StoragePerformanceLevel { get; private set; } = null!;

        /// <summary>
        /// Storage size, measured in GiB.
        /// </summary>
        [Output("storageSize")]
        public Output<int?> StorageSize { get; private set; } = null!;


        /// <summary>
        /// Create a NodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeGroup(string name, NodeGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:starrocks/nodeGroup:NodeGroup", name, args ?? new NodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeGroup(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:starrocks/nodeGroup:NodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeGroup Get(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeGroup(name, id, state, options);
        }
    }

    public sealed class NodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto-renewal is enabled.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
        /// </summary>
        [Input("cu")]
        public Input<int>? Cu { get; set; }

        /// <summary>
        /// Description of node group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Number of disks.
        /// </summary>
        [Input("diskNumber")]
        public Input<int>? DiskNumber { get; set; }

        /// <summary>
        /// Duration of node group.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Whether to restart in fast restart mode. The default is false.
        /// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
        /// - false: Restarts the compute node in rolling restart mode.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("fastMode")]
        public Input<bool>? FastMode { get; set; }

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
        /// </summary>
        [Input("localStorageInstanceType")]
        public Input<string>? LocalStorageInstanceType { get; set; }

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("nodeGroupName")]
        public Input<string>? NodeGroupName { get; set; }

        /// <summary>
        /// Payment type:
        /// - PrePaid: Subscription (prepaid).
        /// - PostPaid: Pay-as-you-go (postpaid).
        /// </summary>
        [Input("payType")]
        public Input<string>? PayType { get; set; }

        /// <summary>
        /// Unit of purchase duration:
        /// - Month
        /// - Year
        /// 
        /// This is only applicable when payType is set to PrePaid.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("pricingCycle")]
        public Input<string>? PricingCycle { get; set; }

        [Input("promotionOptionNo")]
        public Input<string>? PromotionOptionNo { get; set; }

        /// <summary>
        /// Number of nodes.
        /// </summary>
        [Input("residentNodeNumber")]
        public Input<int>? ResidentNodeNumber { get; set; }

        /// <summary>
        /// Node group spec types include the following:
        /// - standard: Standard edition.
        /// - localSSD: Local SSD.
        /// - bigData: Large-scale storage.
        /// - ramEnhanced: Memory-enhanced type.
        /// - networkEnhanced: Network-enhanced type.
        /// </summary>
        [Input("specType")]
        public Input<string>? SpecType { get; set; }

        /// <summary>
        /// Performance levels of the cloud disk. Includes the following values:
        /// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
        /// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
        /// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
        /// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
        /// </summary>
        [Input("storagePerformanceLevel")]
        public Input<string>? StoragePerformanceLevel { get; set; }

        /// <summary>
        /// Storage size, measured in GiB.
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        public NodeGroupArgs()
        {
        }
        public static new NodeGroupArgs Empty => new NodeGroupArgs();
    }

    public sealed class NodeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto-renewal is enabled.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The creation time of the node group.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
        /// </summary>
        [Input("cu")]
        public Input<int>? Cu { get; set; }

        /// <summary>
        /// Description of node group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Number of disks.
        /// </summary>
        [Input("diskNumber")]
        public Input<int>? DiskNumber { get; set; }

        /// <summary>
        /// Duration of node group.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Whether to restart in fast restart mode. The default is false.
        /// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
        /// - false: Restarts the compute node in rolling restart mode.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("fastMode")]
        public Input<bool>? FastMode { get; set; }

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
        /// </summary>
        [Input("localStorageInstanceType")]
        public Input<string>? LocalStorageInstanceType { get; set; }

        /// <summary>
        /// The ID of the node group.
        /// </summary>
        [Input("nodeGroupId")]
        public Input<string>? NodeGroupId { get; set; }

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("nodeGroupName")]
        public Input<string>? NodeGroupName { get; set; }

        /// <summary>
        /// Payment type:
        /// - PrePaid: Subscription (prepaid).
        /// - PostPaid: Pay-as-you-go (postpaid).
        /// </summary>
        [Input("payType")]
        public Input<string>? PayType { get; set; }

        /// <summary>
        /// Unit of purchase duration:
        /// - Month
        /// - Year
        /// 
        /// This is only applicable when payType is set to PrePaid.
        /// 
        /// &gt; **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
        /// </summary>
        [Input("pricingCycle")]
        public Input<string>? PricingCycle { get; set; }

        [Input("promotionOptionNo")]
        public Input<string>? PromotionOptionNo { get; set; }

        /// <summary>
        /// The region ID of the node group.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Number of nodes.
        /// </summary>
        [Input("residentNodeNumber")]
        public Input<int>? ResidentNodeNumber { get; set; }

        /// <summary>
        /// Node group spec types include the following:
        /// - standard: Standard edition.
        /// - localSSD: Local SSD.
        /// - bigData: Large-scale storage.
        /// - ramEnhanced: Memory-enhanced type.
        /// - networkEnhanced: Network-enhanced type.
        /// </summary>
        [Input("specType")]
        public Input<string>? SpecType { get; set; }

        /// <summary>
        /// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Performance levels of the cloud disk. Includes the following values:
        /// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
        /// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
        /// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
        /// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
        /// </summary>
        [Input("storagePerformanceLevel")]
        public Input<string>? StoragePerformanceLevel { get; set; }

        /// <summary>
        /// Storage size, measured in GiB.
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        public NodeGroupState()
        {
        }
        public static new NodeGroupState Empty => new NodeGroupState();
    }
}
