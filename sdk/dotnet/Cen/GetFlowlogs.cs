// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Cen
{
    public static class GetFlowlogs
    {
        /// <summary>
        /// This data source provides CEN flow logs available to the user.
        /// 
        /// &gt; **NOTE:** Available since v1.78.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var defaultc5kxyC = new AliCloud.Cen.Instance("defaultc5kxyC", new()
        ///     {
        ///         CenInstanceName = name,
        ///     });
        /// 
        ///     var defaultVw2U9u = new AliCloud.Cen.TransitRouter("defaultVw2U9u", new()
        ///     {
        ///         CenId = defaultc5kxyC.Id,
        ///     });
        /// 
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         ProjectName = $"{name}-{defaultInteger.Result}",
        ///         Description = "terraform-example",
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = $"{name}-{defaultInteger.Result}",
        ///         ShardCount = 3,
        ///         AutoSplit = true,
        ///         MaxSplitShardCount = 60,
        ///         AppendMeta = true,
        ///     });
        /// 
        ///     var defaultFlowLog = new AliCloud.Cen.FlowLog("default", new()
        ///     {
        ///         ProjectName = defaultStore.ProjectName,
        ///         FlowLogName = $"{name}-{defaultInteger.Result}",
        ///         LogFormatString = "${srcaddr}${dstaddr}${bytes}",
        ///         CenId = defaultc5kxyC.Id,
        ///         LogStoreName = defaultStore.LogstoreName,
        ///         Interval = 600,
        ///         Status = "Active",
        ///         TransitRouterId = defaultVw2U9u.TransitRouterId,
        ///         Description = "flowlog-resource-example-1",
        ///     });
        /// 
        ///     var @default = AliCloud.Cen.GetFlowlogs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultFlowLog.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstCenFlowlogId"] = @default.Apply(@default =&gt; @default.Apply(getFlowlogsResult =&gt; getFlowlogsResult.Flowlogs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFlowlogsResult> InvokeAsync(GetFlowlogsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFlowlogsResult>("alicloud:cen/getFlowlogs:getFlowlogs", args ?? new GetFlowlogsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides CEN flow logs available to the user.
        /// 
        /// &gt; **NOTE:** Available since v1.78.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var defaultc5kxyC = new AliCloud.Cen.Instance("defaultc5kxyC", new()
        ///     {
        ///         CenInstanceName = name,
        ///     });
        /// 
        ///     var defaultVw2U9u = new AliCloud.Cen.TransitRouter("defaultVw2U9u", new()
        ///     {
        ///         CenId = defaultc5kxyC.Id,
        ///     });
        /// 
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         ProjectName = $"{name}-{defaultInteger.Result}",
        ///         Description = "terraform-example",
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = $"{name}-{defaultInteger.Result}",
        ///         ShardCount = 3,
        ///         AutoSplit = true,
        ///         MaxSplitShardCount = 60,
        ///         AppendMeta = true,
        ///     });
        /// 
        ///     var defaultFlowLog = new AliCloud.Cen.FlowLog("default", new()
        ///     {
        ///         ProjectName = defaultStore.ProjectName,
        ///         FlowLogName = $"{name}-{defaultInteger.Result}",
        ///         LogFormatString = "${srcaddr}${dstaddr}${bytes}",
        ///         CenId = defaultc5kxyC.Id,
        ///         LogStoreName = defaultStore.LogstoreName,
        ///         Interval = 600,
        ///         Status = "Active",
        ///         TransitRouterId = defaultVw2U9u.TransitRouterId,
        ///         Description = "flowlog-resource-example-1",
        ///     });
        /// 
        ///     var @default = AliCloud.Cen.GetFlowlogs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultFlowLog.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstCenFlowlogId"] = @default.Apply(@default =&gt; @default.Apply(getFlowlogsResult =&gt; getFlowlogsResult.Flowlogs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFlowlogsResult> Invoke(GetFlowlogsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlowlogsResult>("alicloud:cen/getFlowlogs:getFlowlogs", args ?? new GetFlowlogsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides CEN flow logs available to the user.
        /// 
        /// &gt; **NOTE:** Available since v1.78.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var defaultc5kxyC = new AliCloud.Cen.Instance("defaultc5kxyC", new()
        ///     {
        ///         CenInstanceName = name,
        ///     });
        /// 
        ///     var defaultVw2U9u = new AliCloud.Cen.TransitRouter("defaultVw2U9u", new()
        ///     {
        ///         CenId = defaultc5kxyC.Id,
        ///     });
        /// 
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         ProjectName = $"{name}-{defaultInteger.Result}",
        ///         Description = "terraform-example",
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = $"{name}-{defaultInteger.Result}",
        ///         ShardCount = 3,
        ///         AutoSplit = true,
        ///         MaxSplitShardCount = 60,
        ///         AppendMeta = true,
        ///     });
        /// 
        ///     var defaultFlowLog = new AliCloud.Cen.FlowLog("default", new()
        ///     {
        ///         ProjectName = defaultStore.ProjectName,
        ///         FlowLogName = $"{name}-{defaultInteger.Result}",
        ///         LogFormatString = "${srcaddr}${dstaddr}${bytes}",
        ///         CenId = defaultc5kxyC.Id,
        ///         LogStoreName = defaultStore.LogstoreName,
        ///         Interval = 600,
        ///         Status = "Active",
        ///         TransitRouterId = defaultVw2U9u.TransitRouterId,
        ///         Description = "flowlog-resource-example-1",
        ///     });
        /// 
        ///     var @default = AliCloud.Cen.GetFlowlogs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultFlowLog.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstCenFlowlogId"] = @default.Apply(@default =&gt; @default.Apply(getFlowlogsResult =&gt; getFlowlogsResult.Flowlogs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFlowlogsResult> Invoke(GetFlowlogsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlowlogsResult>("alicloud:cen/getFlowlogs:getFlowlogs", args ?? new GetFlowlogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFlowlogsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of Cen instance.
        /// </summary>
        [Input("cenId")]
        public string? CenId { get; set; }

        /// <summary>
        /// The description of the flowlog.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The ID of FlowLog.
        /// </summary>
        [Input("flowLogId")]
        public string? FlowLogId { get; set; }

        /// <summary>
        /// The name of the flowlog.
        /// </summary>
        [Input("flowLogName")]
        public string? FlowLogName { get; set; }

        /// <summary>
        /// Flowlog Version.
        /// </summary>
        [Input("flowLogVersion")]
        public string? FlowLogVersion { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Flow Log IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
        /// </summary>
        [Input("interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// The LogStore that stores the flowlog.
        /// </summary>
        [Input("logStoreName")]
        public string? LogStoreName { get; set; }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Current page number.
        /// </summary>
        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Number of records per page.
        /// </summary>
        [Input("pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// The Project that stores the flowlog.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// Region id
        /// </summary>
        [Input("regionId")]
        public string? RegionId { get; set; }

        /// <summary>
        /// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Transit Router ID
        /// </summary>
        [Input("transitRouterId")]
        public string? TransitRouterId { get; set; }

        public GetFlowlogsArgs()
        {
        }
        public static new GetFlowlogsArgs Empty => new GetFlowlogsArgs();
    }

    public sealed class GetFlowlogsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of Cen instance.
        /// </summary>
        [Input("cenId")]
        public Input<string>? CenId { get; set; }

        /// <summary>
        /// The description of the flowlog.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of FlowLog.
        /// </summary>
        [Input("flowLogId")]
        public Input<string>? FlowLogId { get; set; }

        /// <summary>
        /// The name of the flowlog.
        /// </summary>
        [Input("flowLogName")]
        public Input<string>? FlowLogName { get; set; }

        /// <summary>
        /// Flowlog Version.
        /// </summary>
        [Input("flowLogVersion")]
        public Input<string>? FlowLogVersion { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Flow Log IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// The LogStore that stores the flowlog.
        /// </summary>
        [Input("logStoreName")]
        public Input<string>? LogStoreName { get; set; }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Current page number.
        /// </summary>
        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        /// <summary>
        /// Number of records per page.
        /// </summary>
        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// The Project that stores the flowlog.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Region id
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Transit Router ID
        /// </summary>
        [Input("transitRouterId")]
        public Input<string>? TransitRouterId { get; set; }

        public GetFlowlogsInvokeArgs()
        {
        }
        public static new GetFlowlogsInvokeArgs Empty => new GetFlowlogsInvokeArgs();
    }


    [OutputType]
    public sealed class GetFlowlogsResult
    {
        /// <summary>
        /// The ID of Cen instance.
        /// </summary>
        public readonly string? CenId;
        /// <summary>
        /// The description of the flowlog.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The ID of FlowLog.
        /// </summary>
        public readonly string? FlowLogId;
        /// <summary>
        /// The name of the flowlog.
        /// </summary>
        public readonly string? FlowLogName;
        /// <summary>
        /// (Available since v1.236.0) Flowlog Version.
        /// </summary>
        public readonly string? FlowLogVersion;
        /// <summary>
        /// A list of Flow Log Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFlowlogsFlowlogResult> Flowlogs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Flow Log IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// (Available since v1.236.0) The duration of the capture window for the flow log to capture traffic. Unit: seconds. Valid values: **60** or **600 * *. Default value: **600 * *.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// The LogStore that stores the flowlog.
        /// </summary>
        public readonly string? LogStoreName;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of name of Flow Logs.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;
        /// <summary>
        /// The Project that stores the flowlog.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// (Available since v1.236.0) Region Id.
        /// </summary>
        public readonly string? RegionId;
        /// <summary>
        /// The status of the flow log. Valid values:-**Active**: started.-**InActive**: not started.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// (Available since v1.236.0) Transit Router ID.
        /// </summary>
        public readonly string? TransitRouterId;

        [OutputConstructor]
        private GetFlowlogsResult(
            string? cenId,

            string? description,

            string? flowLogId,

            string? flowLogName,

            string? flowLogVersion,

            ImmutableArray<Outputs.GetFlowlogsFlowlogResult> flowlogs,

            string id,

            ImmutableArray<string> ids,

            int? interval,

            string? logStoreName,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            int? pageNumber,

            int? pageSize,

            string? projectName,

            string? regionId,

            string? status,

            string? transitRouterId)
        {
            CenId = cenId;
            Description = description;
            FlowLogId = flowLogId;
            FlowLogName = flowLogName;
            FlowLogVersion = flowLogVersion;
            Flowlogs = flowlogs;
            Id = id;
            Ids = ids;
            Interval = interval;
            LogStoreName = logStoreName;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            ProjectName = projectName;
            RegionId = regionId;
            Status = status;
            TransitRouterId = transitRouterId;
        }
    }
}
