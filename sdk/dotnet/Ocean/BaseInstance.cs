// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ocean
{
    /// <summary>
    /// Provides a Ocean Base Instance resource.
    /// 
    /// For information about Ocean Base Instance and how to use it, see [What is Instance](https://www.alibabacloud.com/help/en/apsaradb-for-oceanbase/latest/what-is-oceanbase-database).
    /// 
    /// &gt; **NOTE:** Available in v1.203.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new AliCloud.Ocean.BaseInstance("default", new()
    ///     {
    ///         InstanceName = @var.Name,
    ///         Series = "normal",
    ///         DiskSize = 200,
    ///         InstanceClass = "14C70GB",
    ///         Zones = new[]
    ///         {
    ///             "ap-southeast-1a",
    ///             "ap-southeast-1b",
    ///             "ap-southeast-1c",
    ///         },
    ///         PaymentType = "PayAsYouGo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Ocean Base Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:ocean/baseInstance:BaseInstance example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ocean/baseInstance:BaseInstance")]
    public partial class BaseInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
        /// - true: automatic renewal.
        /// - false (default): no automatic renewal.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {"1", "2", "3"}.-PeriodUnit is Month, AutoRenewPeriod is {"1", "2", "3", "6", "12"}.
        /// </summary>
        [Output("autoRenewPeriod")]
        public Output<int?> AutoRenewPeriod { get; private set; } = null!;

        /// <summary>
        /// The backup retain mode.
        /// </summary>
        [Output("backupRetainMode")]
        public Output<string?> BackupRetainMode { get; private set; } = null!;

        /// <summary>
        /// The product code of the OceanBase cluster.
        /// - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
        /// - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
        /// - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
        /// </summary>
        [Output("commodityCode")]
        public Output<string> CommodityCode { get; private set; } = null!;

        /// <summary>
        /// The number of CPU cores of the cluster.
        /// </summary>
        [Output("cpu")]
        public Output<int> Cpu { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
        /// - 8C32GB:100GB ~ 10000GB
        /// - 14C70GB:200GB ~ 10000GB
        /// - 30C180GB:400GB ~ 10000GB
        /// - 62C400G:800GB-10000GB.
        /// - The default value of each package is its minimum value.
        /// </summary>
        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        /// <summary>
        /// Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
        /// </summary>
        [Output("instanceClass")]
        public Output<string> InstanceClass { get; private set; } = null!;

        /// <summary>
        /// OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The number of nodes in the cluster.
        /// </summary>
        [Output("nodeNum")]
        public Output<string> NodeNum { get; private set; } = null!;

        /// <summary>
        /// The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
        /// </summary>
        [Output("paymentType")]
        public Output<string> PaymentType { get; private set; } = null!;

        /// <summary>
        /// The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {"1", "2", "3"}. When `period_unit` = Month, Period values: {"1", "2", "3", "4", "5", "6", "7", "8", "9"}.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// The period unit. Valid values: `Month`,`Year`.
        /// </summary>
        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// The ID of the enterprise resource group to which the instance resides.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
        /// </summary>
        [Output("series")]
        public Output<string> Series { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Information about the zone where the cluster is deployed.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a BaseInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BaseInstance(string name, BaseInstanceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ocean/baseInstance:BaseInstance", name, args ?? new BaseInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BaseInstance(string name, Input<string> id, BaseInstanceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ocean/baseInstance:BaseInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BaseInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BaseInstance Get(string name, Input<string> id, BaseInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new BaseInstance(name, id, state, options);
        }
    }

    public sealed class BaseInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
        /// - true: automatic renewal.
        /// - false (default): no automatic renewal.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {"1", "2", "3"}.-PeriodUnit is Month, AutoRenewPeriod is {"1", "2", "3", "6", "12"}.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// The backup retain mode.
        /// </summary>
        [Input("backupRetainMode")]
        public Input<string>? BackupRetainMode { get; set; }

        /// <summary>
        /// The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
        /// - 8C32GB:100GB ~ 10000GB
        /// - 14C70GB:200GB ~ 10000GB
        /// - 30C180GB:400GB ~ 10000GB
        /// - 62C400G:800GB-10000GB.
        /// - The default value of each package is its minimum value.
        /// </summary>
        [Input("diskSize", required: true)]
        public Input<int> DiskSize { get; set; } = null!;

        /// <summary>
        /// Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
        /// </summary>
        [Input("instanceClass", required: true)]
        public Input<string> InstanceClass { get; set; } = null!;

        /// <summary>
        /// OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The number of nodes in the cluster.
        /// </summary>
        [Input("nodeNum")]
        public Input<string>? NodeNum { get; set; }

        /// <summary>
        /// The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
        /// </summary>
        [Input("paymentType", required: true)]
        public Input<string> PaymentType { get; set; } = null!;

        /// <summary>
        /// The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {"1", "2", "3"}. When `period_unit` = Month, Period values: {"1", "2", "3", "4", "5", "6", "7", "8", "9"}.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The period unit. Valid values: `Month`,`Year`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The ID of the enterprise resource group to which the instance resides.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
        /// </summary>
        [Input("series", required: true)]
        public Input<string> Series { get; set; } = null!;

        [Input("zones", required: true)]
        private InputList<string>? _zones;

        /// <summary>
        /// Information about the zone where the cluster is deployed.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public BaseInstanceArgs()
        {
        }
        public static new BaseInstanceArgs Empty => new BaseInstanceArgs();
    }

    public sealed class BaseInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically renew.It takes effect when the parameter ChargeType is PrePaid. Value range:
        /// - true: automatic renewal.
        /// - false (default): no automatic renewal.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The duration of each auto-renewal. When the value of the AutoRenew parameter is True, this parameter is required.-PeriodUnit is Week, AutoRenewPeriod is {"1", "2", "3"}.-PeriodUnit is Month, AutoRenewPeriod is {"1", "2", "3", "6", "12"}.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// The backup retain mode.
        /// </summary>
        [Input("backupRetainMode")]
        public Input<string>? BackupRetainMode { get; set; }

        /// <summary>
        /// The product code of the OceanBase cluster.
        /// - oceanbase_oceanbasepre_public_cn: Domestic station cloud database package Year-to-month package.
        /// - oceanbase_oceanbasepost_public_cn: The domestic station cloud database is paid by the hour.
        /// - oceanbase_obpre_public_intl: International Station Cloud Database Package Monthly Package.
        /// </summary>
        [Input("commodityCode")]
        public Input<string>? CommodityCode { get; set; }

        /// <summary>
        /// The number of CPU cores of the cluster.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The size of the storage space, in GB.The limits of storage space vary according to the cluster specifications, as follows:
        /// - 8C32GB:100GB ~ 10000GB
        /// - 14C70GB:200GB ~ 10000GB
        /// - 30C180GB:400GB ~ 10000GB
        /// - 62C400G:800GB-10000GB.
        /// - The default value of each package is its minimum value.
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// Cluster specification information. Valid values: `14C70GB` (default), `30C180GB`, `62C400GB`, `8C32GB`.
        /// </summary>
        [Input("instanceClass")]
        public Input<string>? InstanceClass { get; set; }

        /// <summary>
        /// OceanBase cluster name. The length is 1 to 20 English or Chinese characters. If this parameter is not specified, the default value is the InstanceId of the cluster.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The number of nodes in the cluster.
        /// </summary>
        [Input("nodeNum")]
        public Input<string>? NodeNum { get; set; }

        /// <summary>
        /// The payment method of the instance. Valid values: `PayAsYouGo`, `Subscription`.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// The duration of the resource purchase. The unit is specified by the PeriodUnit. The parameter `payment_type` takes effect only when the value is `Subscription` and is required. Once the DedicatedHostId is specified, the value cannot exceed the subscription duration of the dedicated host. When `period_unit` = Year, Period values: {"1", "2", "3"}. When `period_unit` = Month, Period values: {"1", "2", "3", "4", "5", "6", "7", "8", "9"}.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The period unit. Valid values: `Month`,`Year`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The ID of the enterprise resource group to which the instance resides.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Series of OceanBase clusters. Valid values: `normal`(default), `history`, `normal_ssd`.
        /// </summary>
        [Input("series")]
        public Input<string>? Series { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Information about the zone where the cluster is deployed.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public BaseInstanceState()
        {
        }
        public static new BaseInstanceState Empty => new BaseInstanceState();
    }
}
