// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Oss
{
    /// <summary>
    /// Provides a OSS Bucket Cname resource.
    /// 
    /// Customizing Bucket domains.
    /// 
    /// For information about OSS Bucket Cname and how to use it, see [What is Bucket Cname](https://www.alibabacloud.com/help/en/oss/developer-reference/putcname).
    /// 
    /// &gt; **NOTE:** Available since v1.233.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var createBucket = new AliCloud.Oss.Bucket("CreateBucket", new()
    ///     {
    ///         BucketName = name,
    ///         StorageClass = "Standard",
    ///     });
    /// 
    ///     var defaultZaWJfG = new AliCloud.Oss.BucketCnameToken("defaultZaWJfG", new()
    ///     {
    ///         Bucket = createBucket.BucketName,
    ///         Domain = "tftestacc.com",
    ///     });
    /// 
    ///     var defaultnHqm5p = new AliCloud.Dns.AlidnsRecord("defaultnHqm5p", new()
    ///     {
    ///         Status = "ENABLE",
    ///         Line = "default",
    ///         Rr = "_dnsauth",
    ///         Type = "TXT",
    ///         DomainName = "tftestacc.com",
    ///         Priority = 1,
    ///         Value = defaultZaWJfG.Token,
    ///         Ttl = 600,
    ///     });
    /// 
    ///     var @default = new AliCloud.Oss.BucketCname("default", new()
    ///     {
    ///         Bucket = createBucket.BucketName,
    ///         Domain = defaultnHqm5p.DomainName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OSS Bucket Cname can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:oss/bucketCname:BucketCname example &lt;bucket&gt;:&lt;domain&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:oss/bucketCname:BucketCname")]
    public partial class BucketCname : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The bucket to which the custom domain name belongs
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The container for the certificate configuration. See `Certificate` below.
        /// </summary>
        [Output("certificate")]
        public Output<Outputs.BucketCnameCertificate?> Certificate { get; private set; } = null!;

        /// <summary>
        /// Whether to delete the certificate.
        /// </summary>
        [Output("deleteCertificate")]
        public Output<bool?> DeleteCertificate { get; private set; } = null!;

        /// <summary>
        /// User-defined domain name
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Whether to force overwrite certificate.
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        /// <summary>
        /// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
        /// </summary>
        [Output("previousCertId")]
        public Output<string?> PreviousCertId { get; private set; } = null!;

        /// <summary>
        /// Cname status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a BucketCname resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketCname(string name, BucketCnameArgs args, CustomResourceOptions? options = null)
            : base("alicloud:oss/bucketCname:BucketCname", name, args ?? new BucketCnameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketCname(string name, Input<string> id, BucketCnameState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:oss/bucketCname:BucketCname", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketCname resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketCname Get(string name, Input<string> id, BucketCnameState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketCname(name, id, state, options);
        }
    }

    public sealed class BucketCnameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bucket to which the custom domain name belongs
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The container for the certificate configuration. See `Certificate` below.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.BucketCnameCertificateArgs>? Certificate { get; set; }

        /// <summary>
        /// Whether to delete the certificate.
        /// </summary>
        [Input("deleteCertificate")]
        public Input<bool>? DeleteCertificate { get; set; }

        /// <summary>
        /// User-defined domain name
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Whether to force overwrite certificate.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
        /// </summary>
        [Input("previousCertId")]
        public Input<string>? PreviousCertId { get; set; }

        public BucketCnameArgs()
        {
        }
        public static new BucketCnameArgs Empty => new BucketCnameArgs();
    }

    public sealed class BucketCnameState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bucket to which the custom domain name belongs
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The container for the certificate configuration. See `Certificate` below.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.BucketCnameCertificateGetArgs>? Certificate { get; set; }

        /// <summary>
        /// Whether to delete the certificate.
        /// </summary>
        [Input("deleteCertificate")]
        public Input<bool>? DeleteCertificate { get; set; }

        /// <summary>
        /// User-defined domain name
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Whether to force overwrite certificate.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
        /// </summary>
        [Input("previousCertId")]
        public Input<string>? PreviousCertId { get; set; }

        /// <summary>
        /// Cname status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public BucketCnameState()
        {
        }
        public static new BucketCnameState Empty => new BucketCnameState();
    }
}
