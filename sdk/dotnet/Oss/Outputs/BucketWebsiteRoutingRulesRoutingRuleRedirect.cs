// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Oss.Outputs
{

    [OutputType]
    public sealed class BucketWebsiteRoutingRulesRoutingRuleRedirect
    {
        /// <summary>
        /// If this field is set to true, the prefix of Object is replaced with the value specified by ReplaceKeyPrefixWith. If this field is not specified or is blank, the Object prefix is truncated.
        /// </summary>
        public readonly bool? EnableReplacePrefix;
        /// <summary>
        /// The domain name during the jump. The domain name must comply with the domain name specification.
        /// </summary>
        public readonly string? HostName;
        /// <summary>
        /// The status code returned during the jump. It takes effect only when the RedirectType is set to External or AliCDN.
        /// </summary>
        public readonly string? HttpRedirectCode;
        /// <summary>
        /// Image back-to-source allows getting Image information
        /// </summary>
        public readonly bool? MirrorAllowGetImageInfo;
        /// <summary>
        /// Whether to allow HeadObject in image back-to-source
        /// </summary>
        public readonly bool? MirrorAllowHeadObject;
        /// <summary>
        /// Mirror back-to-source allows support for video frame truncation
        /// </summary>
        public readonly bool? MirrorAllowVideoSnapshot;
        /// <summary>
        /// The status code of the mirror back-to-source trigger asynchronous pull mode.
        /// </summary>
        public readonly int? MirrorAsyncStatus;
        /// <summary>
        /// Image back Source station authentication information See `mirror_auth` below.
        /// </summary>
        public readonly Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth? MirrorAuth;
        /// <summary>
        /// Whether to check the MD5 of the source body. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        public readonly bool? MirrorCheckMd5;
        /// <summary>
        /// Mirrored back-to-source high-speed Channel vpregion
        /// </summary>
        public readonly string? MirrorDstRegion;
        /// <summary>
        /// Mirroring back-to-source high-speed Channel standby station VpcId
        /// </summary>
        public readonly string? MirrorDstSlaveVpcId;
        /// <summary>
        /// Mirror back-to-source high-speed Channel VpcId
        /// </summary>
        public readonly string? MirrorDstVpcId;
        /// <summary>
        /// If the result of the image back-to-source acquisition is 3xx, whether to continue to jump to the specified Location to obtain data. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        public readonly bool? MirrorFollowRedirect;
        /// <summary>
        /// Specifies the Header carried when the image returns to the source. It takes effect only when the RedirectType is set to Mirror. See `mirror_headers` below.
        /// </summary>
        public readonly Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders? MirrorHeaders;
        /// <summary>
        /// Whether it is a mirror back-to-source high-speed Channel
        /// </summary>
        public readonly bool? MirrorIsExpressTunnel;
        /// <summary>
        /// Mirror back-to-source multi-source station configuration container. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_multi_alternates` below.
        /// </summary>
        public readonly Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates? MirrorMultiAlternates;
        /// <summary>
        /// Transparent transmission/to source Station
        /// </summary>
        public readonly bool? MirrorPassOriginalSlashes;
        /// <summary>
        /// Same as PassQueryString and takes precedence over PassQueryString. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        public readonly bool? MirrorPassQueryString;
        /// <summary>
        /// Whether mirroring back to source does not save data
        /// </summary>
        public readonly bool? MirrorProxyPass;
        /// <summary>
        /// The container that saves the image back to the source and returns the response header rule. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_return_headers` below.
        /// </summary>
        public readonly Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders? MirrorReturnHeaders;
        /// <summary>
        /// Roles used when mirroring back-to-source
        /// </summary>
        public readonly string? MirrorRole;
        /// <summary>
        /// Mirror back-to-source back-to-source OSS automatically saves user metadata
        /// </summary>
        public readonly bool? MirrorSaveOssMeta;
        /// <summary>
        /// Transparent transmission of SNI
        /// </summary>
        public readonly bool? MirrorSni;
        /// <summary>
        /// It is used to judge the status of active-standby switching. The judgment logic of active-standby switching is that the source station returns an error. If MirrorSwitchAllErrors is true, it is considered a failure except the following status code: 200,206,301,302,303,307,404; If false, only the source Station Returns 5xx or times out is considered a failure.
        /// </summary>
        public readonly bool? MirrorSwitchAllErrors;
        /// <summary>
        /// Save the label according to the parameters when saving the file from the mirror back to the source. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_taggings` below.
        /// </summary>
        public readonly Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings? MirrorTaggings;
        /// <summary>
        /// Mirror back-to-source leased line back-to-source tunnel ID
        /// </summary>
        public readonly string? MirrorTunnelId;
        /// <summary>
        /// The address of the origin of the image. It takes effect only when the RedirectType is set to Mirror. The origin address must start with http:// or https:// and end with a forward slash (/). OSS takes the Object name after the Origin address to form the origin URL.
        /// </summary>
        public readonly string? MirrorUrl;
        /// <summary>
        /// Mirror back-to-source Master-backup back-to-source switching decision URL
        /// </summary>
        public readonly string? MirrorUrlProbe;
        /// <summary>
        /// Mirror back-to-source primary backup back-to-source backup station URL
        /// </summary>
        public readonly string? MirrorUrlSlave;
        /// <summary>
        /// Whether the source station LastModifiedTime is used for the image back-to-source save file.
        /// </summary>
        public readonly bool? MirrorUserLastModified;
        /// <summary>
        /// Whether to use role for mirroring back to source
        /// </summary>
        public readonly bool? MirrorUsingRole;
        /// <summary>
        /// Whether to carry the request parameters when executing the jump or mirror back-to-source rule. Did the user carry the request parameters when requesting OSS? a = B &amp; c = d, and set PassQueryString to true. If the rule is a 302 jump, this request parameter is added to the Location header of the jump. For example Location:example.com? a = B &amp; c = d, and the jump type is mirrored back-to-origin, this request parameter is also carried in the back-to-origin request initiated. Values: true, false (default)
        /// </summary>
        public readonly bool? PassQueryString;
        /// <summary>
        /// The protocol at the time of the jump. It takes effect only when the RedirectType is set to External or AliCDN.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Specifies the type of jump. The value range is as follows: Mirror: Mirror back to the source. External: External redirects, that is, OSS returns a 3xx request to redirect to another address. AliCDN: Alibaba Cloud CDN jump, mainly used for Alibaba Cloud CDN. Unlike External, OSS adds an additional Header. After recognizing this Header, Alibaba Cloud CDN redirects the data to the specified address and returns the obtained data to the user instead of returning the 3xx Redirection request to the user.
        /// </summary>
        public readonly string? RedirectType;
        /// <summary>
        /// The prefix of the Object name will be replaced with this value during Redirect. If the prefix is empty, this string is inserted in front of the Object name.
        /// </summary>
        public readonly string? ReplaceKeyPrefixWith;
        /// <summary>
        /// During redirection, the Object name is replaced with the value specified by ReplaceKeyWith. You can set variables in ReplaceKeyWith. Currently, the supported variable is ${key}, which indicates the name of the Object in the request.
        /// </summary>
        public readonly string? ReplaceKeyWith;
        /// <summary>
        /// Mirror back-to-source transparent source station response code list
        /// </summary>
        public readonly string? TransparentMirrorResponseCodes;

        [OutputConstructor]
        private BucketWebsiteRoutingRulesRoutingRuleRedirect(
            bool? enableReplacePrefix,

            string? hostName,

            string? httpRedirectCode,

            bool? mirrorAllowGetImageInfo,

            bool? mirrorAllowHeadObject,

            bool? mirrorAllowVideoSnapshot,

            int? mirrorAsyncStatus,

            Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuth? mirrorAuth,

            bool? mirrorCheckMd5,

            string? mirrorDstRegion,

            string? mirrorDstSlaveVpcId,

            string? mirrorDstVpcId,

            bool? mirrorFollowRedirect,

            Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeaders? mirrorHeaders,

            bool? mirrorIsExpressTunnel,

            Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternates? mirrorMultiAlternates,

            bool? mirrorPassOriginalSlashes,

            bool? mirrorPassQueryString,

            bool? mirrorProxyPass,

            Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeaders? mirrorReturnHeaders,

            string? mirrorRole,

            bool? mirrorSaveOssMeta,

            bool? mirrorSni,

            bool? mirrorSwitchAllErrors,

            Outputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggings? mirrorTaggings,

            string? mirrorTunnelId,

            string? mirrorUrl,

            string? mirrorUrlProbe,

            string? mirrorUrlSlave,

            bool? mirrorUserLastModified,

            bool? mirrorUsingRole,

            bool? passQueryString,

            string? protocol,

            string? redirectType,

            string? replaceKeyPrefixWith,

            string? replaceKeyWith,

            string? transparentMirrorResponseCodes)
        {
            EnableReplacePrefix = enableReplacePrefix;
            HostName = hostName;
            HttpRedirectCode = httpRedirectCode;
            MirrorAllowGetImageInfo = mirrorAllowGetImageInfo;
            MirrorAllowHeadObject = mirrorAllowHeadObject;
            MirrorAllowVideoSnapshot = mirrorAllowVideoSnapshot;
            MirrorAsyncStatus = mirrorAsyncStatus;
            MirrorAuth = mirrorAuth;
            MirrorCheckMd5 = mirrorCheckMd5;
            MirrorDstRegion = mirrorDstRegion;
            MirrorDstSlaveVpcId = mirrorDstSlaveVpcId;
            MirrorDstVpcId = mirrorDstVpcId;
            MirrorFollowRedirect = mirrorFollowRedirect;
            MirrorHeaders = mirrorHeaders;
            MirrorIsExpressTunnel = mirrorIsExpressTunnel;
            MirrorMultiAlternates = mirrorMultiAlternates;
            MirrorPassOriginalSlashes = mirrorPassOriginalSlashes;
            MirrorPassQueryString = mirrorPassQueryString;
            MirrorProxyPass = mirrorProxyPass;
            MirrorReturnHeaders = mirrorReturnHeaders;
            MirrorRole = mirrorRole;
            MirrorSaveOssMeta = mirrorSaveOssMeta;
            MirrorSni = mirrorSni;
            MirrorSwitchAllErrors = mirrorSwitchAllErrors;
            MirrorTaggings = mirrorTaggings;
            MirrorTunnelId = mirrorTunnelId;
            MirrorUrl = mirrorUrl;
            MirrorUrlProbe = mirrorUrlProbe;
            MirrorUrlSlave = mirrorUrlSlave;
            MirrorUserLastModified = mirrorUserLastModified;
            MirrorUsingRole = mirrorUsingRole;
            PassQueryString = passQueryString;
            Protocol = protocol;
            RedirectType = redirectType;
            ReplaceKeyPrefixWith = replaceKeyPrefixWith;
            ReplaceKeyWith = replaceKeyWith;
            TransparentMirrorResponseCodes = transparentMirrorResponseCodes;
        }
    }
}
