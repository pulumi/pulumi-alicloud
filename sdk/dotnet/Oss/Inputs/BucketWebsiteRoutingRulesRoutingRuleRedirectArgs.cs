// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Oss.Inputs
{

    public sealed class BucketWebsiteRoutingRulesRoutingRuleRedirectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this field is set to true, the prefix of Object is replaced with the value specified by ReplaceKeyPrefixWith. If this field is not specified or is blank, the Object prefix is truncated.
        /// </summary>
        [Input("enableReplacePrefix")]
        public Input<bool>? EnableReplacePrefix { get; set; }

        /// <summary>
        /// The domain name during the jump. The domain name must comply with the domain name specification.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The status code returned during the jump. It takes effect only when the RedirectType is set to External or AliCDN.
        /// </summary>
        [Input("httpRedirectCode")]
        public Input<string>? HttpRedirectCode { get; set; }

        /// <summary>
        /// Image back-to-source allows getting Image information
        /// </summary>
        [Input("mirrorAllowGetImageInfo")]
        public Input<bool>? MirrorAllowGetImageInfo { get; set; }

        /// <summary>
        /// Whether to allow HeadObject in image back-to-source
        /// </summary>
        [Input("mirrorAllowHeadObject")]
        public Input<bool>? MirrorAllowHeadObject { get; set; }

        /// <summary>
        /// Mirror back-to-source allows support for video frame truncation
        /// </summary>
        [Input("mirrorAllowVideoSnapshot")]
        public Input<bool>? MirrorAllowVideoSnapshot { get; set; }

        /// <summary>
        /// The status code of the mirror back-to-source trigger asynchronous pull mode.
        /// </summary>
        [Input("mirrorAsyncStatus")]
        public Input<int>? MirrorAsyncStatus { get; set; }

        /// <summary>
        /// Image back Source station authentication information See `mirror_auth` below.
        /// </summary>
        [Input("mirrorAuth")]
        public Input<Inputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorAuthArgs>? MirrorAuth { get; set; }

        /// <summary>
        /// Whether to check the MD5 of the source body. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        [Input("mirrorCheckMd5")]
        public Input<bool>? MirrorCheckMd5 { get; set; }

        /// <summary>
        /// Mirrored back-to-source high-speed Channel vpregion
        /// </summary>
        [Input("mirrorDstRegion")]
        public Input<string>? MirrorDstRegion { get; set; }

        /// <summary>
        /// Mirroring back-to-source high-speed Channel standby station VpcId
        /// </summary>
        [Input("mirrorDstSlaveVpcId")]
        public Input<string>? MirrorDstSlaveVpcId { get; set; }

        /// <summary>
        /// Mirror back-to-source high-speed Channel VpcId
        /// </summary>
        [Input("mirrorDstVpcId")]
        public Input<string>? MirrorDstVpcId { get; set; }

        /// <summary>
        /// If the result of the image back-to-source acquisition is 3xx, whether to continue to jump to the specified Location to obtain data. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        [Input("mirrorFollowRedirect")]
        public Input<bool>? MirrorFollowRedirect { get; set; }

        /// <summary>
        /// Specifies the Header carried when the image returns to the source. It takes effect only when the RedirectType is set to Mirror. See `mirror_headers` below.
        /// </summary>
        [Input("mirrorHeaders")]
        public Input<Inputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorHeadersArgs>? MirrorHeaders { get; set; }

        /// <summary>
        /// Whether it is a mirror back-to-source high-speed Channel
        /// </summary>
        [Input("mirrorIsExpressTunnel")]
        public Input<bool>? MirrorIsExpressTunnel { get; set; }

        /// <summary>
        /// Mirror back-to-source multi-source station configuration container. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_multi_alternates` below.
        /// </summary>
        [Input("mirrorMultiAlternates")]
        public Input<Inputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorMultiAlternatesArgs>? MirrorMultiAlternates { get; set; }

        /// <summary>
        /// Transparent transmission/to source Station
        /// </summary>
        [Input("mirrorPassOriginalSlashes")]
        public Input<bool>? MirrorPassOriginalSlashes { get; set; }

        /// <summary>
        /// Same as PassQueryString and takes precedence over PassQueryString. It takes effect only when the RedirectType is set to Mirror.
        /// </summary>
        [Input("mirrorPassQueryString")]
        public Input<bool>? MirrorPassQueryString { get; set; }

        /// <summary>
        /// Whether mirroring back to source does not save data
        /// </summary>
        [Input("mirrorProxyPass")]
        public Input<bool>? MirrorProxyPass { get; set; }

        /// <summary>
        /// The container that saves the image back to the source and returns the response header rule. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_return_headers` below.
        /// </summary>
        [Input("mirrorReturnHeaders")]
        public Input<Inputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorReturnHeadersArgs>? MirrorReturnHeaders { get; set; }

        /// <summary>
        /// Roles used when mirroring back-to-source
        /// </summary>
        [Input("mirrorRole")]
        public Input<string>? MirrorRole { get; set; }

        /// <summary>
        /// Mirror back-to-source back-to-source OSS automatically saves user metadata
        /// </summary>
        [Input("mirrorSaveOssMeta")]
        public Input<bool>? MirrorSaveOssMeta { get; set; }

        /// <summary>
        /// Transparent transmission of SNI
        /// </summary>
        [Input("mirrorSni")]
        public Input<bool>? MirrorSni { get; set; }

        /// <summary>
        /// It is used to judge the status of active-standby switching. The judgment logic of active-standby switching is that the source station returns an error. If MirrorSwitchAllErrors is true, it is considered a failure except the following status code: 200,206,301,302,303,307,404; If false, only the source Station Returns 5xx or times out is considered a failure.
        /// </summary>
        [Input("mirrorSwitchAllErrors")]
        public Input<bool>? MirrorSwitchAllErrors { get; set; }

        /// <summary>
        /// Save the label according to the parameters when saving the file from the mirror back to the source. **NOTE:**: If you want to clean one configuration, you must set the configuration to empty value, removing from code cannot make effect. See `mirror_taggings` below.
        /// </summary>
        [Input("mirrorTaggings")]
        public Input<Inputs.BucketWebsiteRoutingRulesRoutingRuleRedirectMirrorTaggingsArgs>? MirrorTaggings { get; set; }

        /// <summary>
        /// Mirror back-to-source leased line back-to-source tunnel ID
        /// </summary>
        [Input("mirrorTunnelId")]
        public Input<string>? MirrorTunnelId { get; set; }

        /// <summary>
        /// The address of the origin of the image. It takes effect only when the RedirectType is set to Mirror. The origin address must start with http:// or https:// and end with a forward slash (/). OSS takes the Object name after the Origin address to form the origin URL.
        /// </summary>
        [Input("mirrorUrl")]
        public Input<string>? MirrorUrl { get; set; }

        /// <summary>
        /// Mirror back-to-source Master-backup back-to-source switching decision URL
        /// </summary>
        [Input("mirrorUrlProbe")]
        public Input<string>? MirrorUrlProbe { get; set; }

        /// <summary>
        /// Mirror back-to-source primary backup back-to-source backup station URL
        /// </summary>
        [Input("mirrorUrlSlave")]
        public Input<string>? MirrorUrlSlave { get; set; }

        /// <summary>
        /// Whether the source station LastModifiedTime is used for the image back-to-source save file.
        /// </summary>
        [Input("mirrorUserLastModified")]
        public Input<bool>? MirrorUserLastModified { get; set; }

        /// <summary>
        /// Whether to use role for mirroring back to source
        /// </summary>
        [Input("mirrorUsingRole")]
        public Input<bool>? MirrorUsingRole { get; set; }

        /// <summary>
        /// Whether to carry the request parameters when executing the jump or mirror back-to-source rule. Did the user carry the request parameters when requesting OSS? a = B &amp; c = d, and set PassQueryString to true. If the rule is a 302 jump, this request parameter is added to the Location header of the jump. For example Location:example.com? a = B &amp; c = d, and the jump type is mirrored back-to-origin, this request parameter is also carried in the back-to-origin request initiated. Values: true, false (default)
        /// </summary>
        [Input("passQueryString")]
        public Input<bool>? PassQueryString { get; set; }

        /// <summary>
        /// The protocol at the time of the jump. It takes effect only when the RedirectType is set to External or AliCDN.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Specifies the type of jump. The value range is as follows: Mirror: Mirror back to the source. External: External redirects, that is, OSS returns a 3xx request to redirect to another address. AliCDN: Alibaba Cloud CDN jump, mainly used for Alibaba Cloud CDN. Unlike External, OSS adds an additional Header. After recognizing this Header, Alibaba Cloud CDN redirects the data to the specified address and returns the obtained data to the user instead of returning the 3xx Redirection request to the user.
        /// </summary>
        [Input("redirectType")]
        public Input<string>? RedirectType { get; set; }

        /// <summary>
        /// The prefix of the Object name will be replaced with this value during Redirect. If the prefix is empty, this string is inserted in front of the Object name.
        /// </summary>
        [Input("replaceKeyPrefixWith")]
        public Input<string>? ReplaceKeyPrefixWith { get; set; }

        /// <summary>
        /// During redirection, the Object name is replaced with the value specified by ReplaceKeyWith. You can set variables in ReplaceKeyWith. Currently, the supported variable is ${key}, which indicates the name of the Object in the request.
        /// </summary>
        [Input("replaceKeyWith")]
        public Input<string>? ReplaceKeyWith { get; set; }

        /// <summary>
        /// Mirror back-to-source transparent source station response code list
        /// </summary>
        [Input("transparentMirrorResponseCodes")]
        public Input<string>? TransparentMirrorResponseCodes { get; set; }

        public BucketWebsiteRoutingRulesRoutingRuleRedirectArgs()
        {
        }
        public static new BucketWebsiteRoutingRulesRoutingRuleRedirectArgs Empty => new BucketWebsiteRoutingRulesRoutingRuleRedirectArgs();
    }
}
