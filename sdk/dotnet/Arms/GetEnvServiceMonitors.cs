// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Arms
{
    public static class GetEnvServiceMonitors
    {
        /// <summary>
        /// This data source provides the ARMS Env Service Monitors of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.258.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var vpc = new AliCloud.Vpc.Network("vpc", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         CidrBlock = "192.168.0.0/16",
        ///         VpcName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var vswitch = new AliCloud.Vpc.Switch("vswitch", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         VpcId = vpc.Id,
        ///         VswitchName = $"{name}-{defaultInteger.Result}",
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CidrBlock = vpc.CidrBlock.Apply(cidrBlock =&gt; Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = cidrBlock,
        ///             Newbits = 8,
        ///             Netnum = 8,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     });
        /// 
        ///     var defaultSnapshotPolicy = new AliCloud.Ecs.SnapshotPolicy("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         RepeatWeekdays = new[]
        ///         {
        ///             "1",
        ///             "2",
        ///             "3",
        ///         },
        ///         RetentionDays = -1,
        ///         TimePoints = new[]
        ///         {
        ///             "1",
        ///             "22",
        ///             "23",
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = vswitch.ZoneId,
        ///         CpuCoreCount = 2,
        ///         MemorySize = 4,
        ///         KubernetesNodeRole = "Worker",
        ///         InstanceTypeFamily = "ecs.sn1ne",
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         ClusterSpec = "ack.pro.small",
        ///         Version = "1.24.6-aliyun.1",
        ///         NewNatGateway = true,
        ///         NodeCidrMask = 26,
        ///         ProxyMode = "ipvs",
        ///         ServiceCidr = "172.23.0.0/16",
        ///         PodCidr = "10.95.0.0/16",
        ///         WorkerVswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         Name = "desired_size",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             @default.Apply(@default =&gt; @default.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id)),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         DesiredSize = "2",
        ///     });
        /// 
        ///     var defaultEnvironment = new AliCloud.Arms.Environment("default", new()
        ///     {
        ///         EnvironmentType = "CS",
        ///         EnvironmentName = $"{name}-{defaultInteger.Result}",
        ///         BindResourceId = defaultNodePool.ClusterId,
        ///         EnvironmentSubType = "ManagedKubernetes",
        ///     });
        /// 
        ///     var defaultEnvServiceMonitor = new AliCloud.Arms.EnvServiceMonitor("default", new()
        ///     {
        ///         AliyunLang = "en",
        ///         EnvironmentId = defaultEnvironment.Id,
        ///         ConfigYaml = @"apiVersion: monitoring.coreos.com/v1
        /// kind: ServiceMonitor
        /// metadata:
        ///   name: arms-admin1
        ///   namespace: arms-prom
        ///   annotations:
        ///     arms.prometheus.io/discovery: 'true'
        ///     o11y.aliyun.com/addon-name: mysql
        ///     o11y.aliyun.com/addon-version: 1.0.1
        ///     o11y.aliyun.com/release-name: mysql1
        /// spec:
        ///   endpoints:
        ///   - interval: 30s
        ///     port: operator
        ///     path: /metrics
        ///   - interval: 10s
        ///     port: operator1
        ///     path: /metrics
        ///   namespaceSelector:
        ///     any: true
        ///   selector:
        ///     matchLabels:
        ///      app: arms-prometheus-ack-arms-prometheus
        /// ",
        ///     });
        /// 
        ///     var ids = AliCloud.Arms.GetEnvServiceMonitors.Invoke(new()
        ///     {
        ///         EnvironmentId = defaultEnvServiceMonitor.EnvironmentId,
        ///         Ids = new[]
        ///         {
        ///             defaultEnvServiceMonitor.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["armsEnvServiceMonitorsId0"] = ids.Apply(getEnvServiceMonitorsResult =&gt; getEnvServiceMonitorsResult.Monitors[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEnvServiceMonitorsResult> InvokeAsync(GetEnvServiceMonitorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvServiceMonitorsResult>("alicloud:arms/getEnvServiceMonitors:getEnvServiceMonitors", args ?? new GetEnvServiceMonitorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the ARMS Env Service Monitors of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.258.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var vpc = new AliCloud.Vpc.Network("vpc", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         CidrBlock = "192.168.0.0/16",
        ///         VpcName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var vswitch = new AliCloud.Vpc.Switch("vswitch", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         VpcId = vpc.Id,
        ///         VswitchName = $"{name}-{defaultInteger.Result}",
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CidrBlock = vpc.CidrBlock.Apply(cidrBlock =&gt; Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = cidrBlock,
        ///             Newbits = 8,
        ///             Netnum = 8,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     });
        /// 
        ///     var defaultSnapshotPolicy = new AliCloud.Ecs.SnapshotPolicy("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         RepeatWeekdays = new[]
        ///         {
        ///             "1",
        ///             "2",
        ///             "3",
        ///         },
        ///         RetentionDays = -1,
        ///         TimePoints = new[]
        ///         {
        ///             "1",
        ///             "22",
        ///             "23",
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = vswitch.ZoneId,
        ///         CpuCoreCount = 2,
        ///         MemorySize = 4,
        ///         KubernetesNodeRole = "Worker",
        ///         InstanceTypeFamily = "ecs.sn1ne",
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         ClusterSpec = "ack.pro.small",
        ///         Version = "1.24.6-aliyun.1",
        ///         NewNatGateway = true,
        ///         NodeCidrMask = 26,
        ///         ProxyMode = "ipvs",
        ///         ServiceCidr = "172.23.0.0/16",
        ///         PodCidr = "10.95.0.0/16",
        ///         WorkerVswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         Name = "desired_size",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             @default.Apply(@default =&gt; @default.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id)),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         DesiredSize = "2",
        ///     });
        /// 
        ///     var defaultEnvironment = new AliCloud.Arms.Environment("default", new()
        ///     {
        ///         EnvironmentType = "CS",
        ///         EnvironmentName = $"{name}-{defaultInteger.Result}",
        ///         BindResourceId = defaultNodePool.ClusterId,
        ///         EnvironmentSubType = "ManagedKubernetes",
        ///     });
        /// 
        ///     var defaultEnvServiceMonitor = new AliCloud.Arms.EnvServiceMonitor("default", new()
        ///     {
        ///         AliyunLang = "en",
        ///         EnvironmentId = defaultEnvironment.Id,
        ///         ConfigYaml = @"apiVersion: monitoring.coreos.com/v1
        /// kind: ServiceMonitor
        /// metadata:
        ///   name: arms-admin1
        ///   namespace: arms-prom
        ///   annotations:
        ///     arms.prometheus.io/discovery: 'true'
        ///     o11y.aliyun.com/addon-name: mysql
        ///     o11y.aliyun.com/addon-version: 1.0.1
        ///     o11y.aliyun.com/release-name: mysql1
        /// spec:
        ///   endpoints:
        ///   - interval: 30s
        ///     port: operator
        ///     path: /metrics
        ///   - interval: 10s
        ///     port: operator1
        ///     path: /metrics
        ///   namespaceSelector:
        ///     any: true
        ///   selector:
        ///     matchLabels:
        ///      app: arms-prometheus-ack-arms-prometheus
        /// ",
        ///     });
        /// 
        ///     var ids = AliCloud.Arms.GetEnvServiceMonitors.Invoke(new()
        ///     {
        ///         EnvironmentId = defaultEnvServiceMonitor.EnvironmentId,
        ///         Ids = new[]
        ///         {
        ///             defaultEnvServiceMonitor.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["armsEnvServiceMonitorsId0"] = ids.Apply(getEnvServiceMonitorsResult =&gt; getEnvServiceMonitorsResult.Monitors[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvServiceMonitorsResult> Invoke(GetEnvServiceMonitorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvServiceMonitorsResult>("alicloud:arms/getEnvServiceMonitors:getEnvServiceMonitors", args ?? new GetEnvServiceMonitorsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the ARMS Env Service Monitors of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.258.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Min = 10000,
        ///         Max = 99999,
        ///     });
        /// 
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var vpc = new AliCloud.Vpc.Network("vpc", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         CidrBlock = "192.168.0.0/16",
        ///         VpcName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var vswitch = new AliCloud.Vpc.Switch("vswitch", new()
        ///     {
        ///         Description = "api-resource-test1-hz",
        ///         VpcId = vpc.Id,
        ///         VswitchName = $"{name}-{defaultInteger.Result}",
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CidrBlock = vpc.CidrBlock.Apply(cidrBlock =&gt; Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = cidrBlock,
        ///             Newbits = 8,
        ///             Netnum = 8,
        ///         })).Apply(invoke =&gt; invoke.Result),
        ///     });
        /// 
        ///     var defaultSnapshotPolicy = new AliCloud.Ecs.SnapshotPolicy("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         RepeatWeekdays = new[]
        ///         {
        ///             "1",
        ///             "2",
        ///             "3",
        ///         },
        ///         RetentionDays = -1,
        ///         TimePoints = new[]
        ///         {
        ///             "1",
        ///             "22",
        ///             "23",
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = vswitch.ZoneId,
        ///         CpuCoreCount = 2,
        ///         MemorySize = 4,
        ///         KubernetesNodeRole = "Worker",
        ///         InstanceTypeFamily = "ecs.sn1ne",
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         Name = $"{name}-{defaultInteger.Result}",
        ///         ClusterSpec = "ack.pro.small",
        ///         Version = "1.24.6-aliyun.1",
        ///         NewNatGateway = true,
        ///         NodeCidrMask = 26,
        ///         ProxyMode = "ipvs",
        ///         ServiceCidr = "172.23.0.0/16",
        ///         PodCidr = "10.95.0.0/16",
        ///         WorkerVswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = $"{name}-{defaultInteger.Result}",
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         Name = "desired_size",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             vswitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             @default.Apply(@default =&gt; @default.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id)),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         DesiredSize = "2",
        ///     });
        /// 
        ///     var defaultEnvironment = new AliCloud.Arms.Environment("default", new()
        ///     {
        ///         EnvironmentType = "CS",
        ///         EnvironmentName = $"{name}-{defaultInteger.Result}",
        ///         BindResourceId = defaultNodePool.ClusterId,
        ///         EnvironmentSubType = "ManagedKubernetes",
        ///     });
        /// 
        ///     var defaultEnvServiceMonitor = new AliCloud.Arms.EnvServiceMonitor("default", new()
        ///     {
        ///         AliyunLang = "en",
        ///         EnvironmentId = defaultEnvironment.Id,
        ///         ConfigYaml = @"apiVersion: monitoring.coreos.com/v1
        /// kind: ServiceMonitor
        /// metadata:
        ///   name: arms-admin1
        ///   namespace: arms-prom
        ///   annotations:
        ///     arms.prometheus.io/discovery: 'true'
        ///     o11y.aliyun.com/addon-name: mysql
        ///     o11y.aliyun.com/addon-version: 1.0.1
        ///     o11y.aliyun.com/release-name: mysql1
        /// spec:
        ///   endpoints:
        ///   - interval: 30s
        ///     port: operator
        ///     path: /metrics
        ///   - interval: 10s
        ///     port: operator1
        ///     path: /metrics
        ///   namespaceSelector:
        ///     any: true
        ///   selector:
        ///     matchLabels:
        ///      app: arms-prometheus-ack-arms-prometheus
        /// ",
        ///     });
        /// 
        ///     var ids = AliCloud.Arms.GetEnvServiceMonitors.Invoke(new()
        ///     {
        ///         EnvironmentId = defaultEnvServiceMonitor.EnvironmentId,
        ///         Ids = new[]
        ///         {
        ///             defaultEnvServiceMonitor.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["armsEnvServiceMonitorsId0"] = ids.Apply(getEnvServiceMonitorsResult =&gt; getEnvServiceMonitorsResult.Monitors[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvServiceMonitorsResult> Invoke(GetEnvServiceMonitorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvServiceMonitorsResult>("alicloud:arms/getEnvServiceMonitors:getEnvServiceMonitors", args ?? new GetEnvServiceMonitorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvServiceMonitorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment ID.
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of ARMS Env Service Monitor IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by ARMS Env Service Monitor name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetEnvServiceMonitorsArgs()
        {
        }
        public static new GetEnvServiceMonitorsArgs Empty => new GetEnvServiceMonitorsArgs();
    }

    public sealed class GetEnvServiceMonitorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment ID.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of ARMS Env Service Monitor IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by ARMS Env Service Monitor name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetEnvServiceMonitorsInvokeArgs()
        {
        }
        public static new GetEnvServiceMonitorsInvokeArgs Empty => new GetEnvServiceMonitorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvServiceMonitorsResult
    {
        /// <summary>
        /// The environment ID.
        /// </summary>
        public readonly string EnvironmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// A list of ARMS Env Service Monitors. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEnvServiceMonitorsMonitorResult> Monitors;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of ARMS Env Service Monitor names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;

        [OutputConstructor]
        private GetEnvServiceMonitorsResult(
            string environmentId,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetEnvServiceMonitorsMonitorResult> monitors,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile)
        {
            EnvironmentId = environmentId;
            Id = id;
            Ids = ids;
            Monitors = monitors;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
        }
    }
}
