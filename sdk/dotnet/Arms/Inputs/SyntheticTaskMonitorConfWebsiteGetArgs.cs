// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Arms.Inputs
{

    public sealed class SyntheticTaskMonitorConfWebsiteGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to support automatic scrolling screen, loading page.
        /// - 0 (default): No
        /// 1: Yes.
        /// </summary>
        [Input("automaticScrolling")]
        public Input<int>? AutomaticScrolling { get; set; }

        /// <summary>
        /// Custom header.
        /// - 0 (default): Off
        /// - 1: Modify the first package
        /// - 2: Modify all packages.
        /// </summary>
        [Input("customHeader")]
        public Input<int>? CustomHeader { get; set; }

        [Input("customHeaderContent")]
        private InputMap<object>? _customHeaderContent;

        /// <summary>
        /// Custom header, in JSON Map format.
        /// </summary>
        public InputMap<object> CustomHeaderContent
        {
            get => _customHeaderContent ?? (_customHeaderContent = new InputMap<object>());
            set => _customHeaderContent = value;
        }

        /// <summary>
        /// Whether to disable caching.
        /// - 0: not disabled
        /// - 1 (default): Disabled.
        /// </summary>
        [Input("disableCache")]
        public Input<int>? DisableCache { get; set; }

        /// <summary>
        /// The Accept-Encoding field is used to determine whether to Accept compressed files. 0-do not disable, 1-disable, the default is 0.
        /// </summary>
        [Input("disableCompression")]
        public Input<int>? DisableCompression { get; set; }

        /// <summary>
        /// When a domain name (such as www.aliyun.com) is resolved, if the resolved IP address or CNAME is not in the DNS hijacking white list, the user will fail to access or return a target IP address that is not Aliyun. If the IP or CNAME in the resolution result is in the DNS white list, it will be determined that DNS hijacking has not occurred.  Fill in the format: Domain name: matching rules. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
        /// </summary>
        [Input("dnsHijackWhitelist")]
        public Input<string>? DnsHijackWhitelist { get; set; }

        /// <summary>
        /// If an element configured in the element blacklist appears during page loading, the element is not requested to be loaded.
        /// </summary>
        [Input("elementBlacklist")]
        public Input<string>? ElementBlacklist { get; set; }

        /// <summary>
        /// Whether to filter invalid IP parameters. 0: filter, 1: do not filter. The default value is 0.
        /// </summary>
        [Input("filterInvalidIp")]
        public Input<int>? FilterInvalidIp { get; set; }

        /// <summary>
        /// Identify elements: Set the total number of elements on the Browse page.
        /// </summary>
        [Input("flowHijackJumpTimes")]
        public Input<int>? FlowHijackJumpTimes { get; set; }

        /// <summary>
        /// Hijacking ID: Set the matching key information. Enter the hijacking keyword or key element, with an asterisk (*) allowed.
        /// </summary>
        [Input("flowHijackLogo")]
        public Input<string>? FlowHijackLogo { get; set; }

        /// <summary>
        /// Whether to ignore certificate errors during certificate verification in SSL Handshake and continue browsing. 0-do not ignore, 1-ignore. The default value is 1.
        /// </summary>
        [Input("ignoreCertificateError")]
        public Input<int>? IgnoreCertificateError { get; set; }

        /// <summary>
        /// Monitoring timeout, in ms. Not required, 20000 by default.
        /// </summary>
        [Input("monitorTimeout")]
        public Input<int>? MonitorTimeout { get; set; }

        /// <summary>
        /// Monitoring the page appears to be tampered with elements other than the domain settings that belong to the page. Common manifestations are pop-up advertisements, floating advertisements, jumps, etc.  Fill in the format: Domain name: Element. You can fill multiple elements separated by a vertical bar (|). For example, www.aliyun.com:|/cc/bb/a.gif |/vv/bb/cc.jpg indicates that all the other elements of the www.aliyun.com domain name except the basic document,/cc/bb/a.gif, and/vv/bb/cc.jpg are tampered.
        /// </summary>
        [Input("pageTamper")]
        public Input<string>? PageTamper { get; set; }

        /// <summary>
        /// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
        /// </summary>
        [Input("redirection")]
        public Input<int>? Redirection { get; set; }

        /// <summary>
        /// The slow element threshold, in ms, is 5000 by default and can be selected from 1 to 300000ms.
        /// </summary>
        [Input("slowElementThreshold")]
        public Input<int>? SlowElementThreshold { get; set; }

        /// <summary>
        /// The target URL.
        /// </summary>
        [Input("targetUrl", required: true)]
        public Input<string> TargetUrl { get; set; } = null!;

        /// <summary>
        /// The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any of the blacklisted strings, 650 error is returned. Multiple strings are separated by a vertical bar (|).
        /// </summary>
        [Input("verifyStringBlacklist")]
        public Input<string>? VerifyStringBlacklist { get; set; }

        /// <summary>
        /// The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist. Otherwise, 650 error is returned. Multiple strings are separated by a vertical bar (|).
        /// </summary>
        [Input("verifyStringWhitelist")]
        public Input<string>? VerifyStringWhitelist { get; set; }

        /// <summary>
        /// The maximum waiting time, in ms, is 5000 by default and can be selected from 5000 ms to 300000ms.
        /// </summary>
        [Input("waitCompletionTime")]
        public Input<int>? WaitCompletionTime { get; set; }

        public SyntheticTaskMonitorConfWebsiteGetArgs()
        {
        }
        public static new SyntheticTaskMonitorConfWebsiteGetArgs Empty => new SyntheticTaskMonitorConfWebsiteGetArgs();
    }
}
