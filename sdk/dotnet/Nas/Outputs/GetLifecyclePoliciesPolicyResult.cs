// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas.Outputs
{

    [OutputType]
    public sealed class GetLifecyclePoliciesPolicyResult
    {
        /// <summary>
        /// The time when the lifecycle management policy was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of the file system.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// The ID of the Lifecycle Policy. Its value is same as Queue Name.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the lifecycle management policy.
        /// </summary>
        public readonly string LifecyclePolicyName;
        /// <summary>
        /// The rules in the lifecycle management policy.
        /// </summary>
        public readonly string LifecycleRuleName;
        /// <summary>
        /// The list of absolute paths for multiple directories. In this case, you can associate a lifecycle management policy with each directory.
        /// </summary>
        public readonly ImmutableArray<string> Paths;
        /// <summary>
        /// The storage type of the data that is dumped to the IA storage medium.
        /// </summary>
        public readonly string StorageType;

        [OutputConstructor]
        private GetLifecyclePoliciesPolicyResult(
            string createTime,

            string fileSystemId,

            string id,

            string lifecyclePolicyName,

            string lifecycleRuleName,

            ImmutableArray<string> paths,

            string storageType)
        {
            CreateTime = createTime;
            FileSystemId = fileSystemId;
            Id = id;
            LifecyclePolicyName = lifecyclePolicyName;
            LifecycleRuleName = lifecycleRuleName;
            Paths = paths;
            StorageType = storageType;
        }
    }
}
