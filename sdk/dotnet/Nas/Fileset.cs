// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    /// <summary>
    /// Provides a Network Attached Storage (NAS) Fileset resource.
    /// 
    /// For information about Network Attached Storage (NAS) Fileset and how to use it, see [What is Fileset](https://www.alibabacloud.com/help/en/doc-detail/27530.html).
    /// 
    /// &gt; **NOTE:** Available in v1.153.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultZones = AliCloud.Nas.GetZones.Invoke(new()
    ///     {
    ///         FileSystemType = "cpfs",
    ///     });
    /// 
    ///     var defaultNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "default-NODELETING",
    ///     });
    /// 
    ///     var defaultSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.ZoneId),
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Nas.FileSystem("defaultFileSystem", new()
    ///     {
    ///         ProtocolType = "cpfs",
    ///         StorageType = "advance_200",
    ///         FileSystemType = "cpfs",
    ///         Capacity = 3600,
    ///         Description = "tf-testacc",
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.ZoneId),
    ///         VpcId = defaultNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         VswitchId = defaultSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]),
    ///     });
    /// 
    ///     var defaultFileset = new AliCloud.Nas.Fileset("defaultFileset", new()
    ///     {
    ///         FileSystemId = defaultFileSystem.Id,
    ///         FileSystemPath = "/example_path/",
    ///         Description = "tf-testacc",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network Attached Storage (NAS) Fileset can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:nas/fileset:Fileset example &lt;file_system_id&gt;:&lt;fileset_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nas/fileset:Fileset")]
    public partial class Fileset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The dry run.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The path of the fileset.
        /// </summary>
        [Output("fileSystemPath")]
        public Output<string> FileSystemPath { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        [Output("filesetId")]
        public Output<string> FilesetId { get; private set; } = null!;

        /// <summary>
        /// The status of the fileset.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Fileset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Fileset(string name, FilesetArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nas/fileset:Fileset", name, args ?? new FilesetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Fileset(string name, Input<string> id, FilesetState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nas/fileset:Fileset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Fileset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Fileset Get(string name, Input<string> id, FilesetState? state = null, CustomResourceOptions? options = null)
        {
            return new Fileset(name, id, state, options);
        }
    }

    public sealed class FilesetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The dry run.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The path of the fileset.
        /// </summary>
        [Input("fileSystemPath", required: true)]
        public Input<string> FileSystemPath { get; set; } = null!;

        public FilesetArgs()
        {
        }
        public static new FilesetArgs Empty => new FilesetArgs();
    }

    public sealed class FilesetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Fileset. It must be `2` to `128` characters in length and must start with a letter or Chinese, but cannot start with `https://` or `https://`.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The dry run.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The path of the fileset.
        /// </summary>
        [Input("fileSystemPath")]
        public Input<string>? FileSystemPath { get; set; }

        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        [Input("filesetId")]
        public Input<string>? FilesetId { get; set; }

        /// <summary>
        /// The status of the fileset.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public FilesetState()
        {
        }
        public static new FilesetState Empty => new FilesetState();
    }
}
