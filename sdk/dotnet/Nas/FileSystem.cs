// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    /// <summary>
    /// Provides a File Storage (NAS) File System resource.
    /// 
    /// For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).
    /// 
    /// &gt; **NOTE:** Available since v1.33.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.Nas.GetZones.Invoke(new()
    ///     {
    ///         FileSystemType = "standard",
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Nas.FileSystem("default", new()
    ///     {
    ///         ProtocolType = "NFS",
    ///         StorageType = "Capacity",
    ///         Description = name,
    ///         EncryptType = 1,
    ///         FileSystemType = "standard",
    ///         RecycleBin = new AliCloud.Nas.Inputs.FileSystemRecycleBinArgs
    ///         {
    ///             Status = "Enable",
    ///             ReservedDays = 10,
    ///         },
    ///         NfsAcl = new AliCloud.Nas.Inputs.FileSystemNfsAclArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.ZoneId)),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.Nas.GetZones.Invoke(new()
    ///     {
    ///         FileSystemType = "extreme",
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Nas.FileSystem("default", new()
    ///     {
    ///         ProtocolType = "NFS",
    ///         StorageType = "standard",
    ///         Capacity = 100,
    ///         Description = name,
    ///         EncryptType = 1,
    ///         FileSystemType = "extreme",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.ZoneId)),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.Nas.GetZones.Invoke(new()
    ///     {
    ///         FileSystemType = "cpfs",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "172.17.3.0/24",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VswitchName = name,
    ///         CidrBlock = "172.17.3.0/24",
    ///         VpcId = defaultNetwork.Id,
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.ZoneId)),
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Nas.FileSystem("default", new()
    ///     {
    ///         ProtocolType = "cpfs",
    ///         StorageType = "advance_100",
    ///         Capacity = 5000,
    ///         Description = name,
    ///         FileSystemType = "cpfs",
    ///         VswitchId = defaultSwitch.Id,
    ///         VpcId = defaultNetwork.Id,
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.ZoneId)),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// File Storage (NAS) File System can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:nas/fileSystem:FileSystem example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nas/fileSystem:FileSystem")]
    public partial class FileSystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        /// </summary>
        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.236.0) The time when the file system was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the file system.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        /// </summary>
        [Output("encryptType")]
        public Output<int?> EncryptType { get; private set; } = null!;

        /// <summary>
        /// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        /// </summary>
        [Output("fileSystemType")]
        public Output<string> FileSystemType { get; private set; } = null!;

        /// <summary>
        /// The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// The NFS ACL feature of the file system. See `nfs_acl` below.
        /// &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Output("nfsAcl")]
        public Output<Outputs.FileSystemNfsAcl> NfsAcl { get; private set; } = null!;

        /// <summary>
        /// The protocol type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        /// </summary>
        [Output("protocolType")]
        public Output<string> ProtocolType { get; private set; } = null!;

        /// <summary>
        /// The recycle bin feature of the file system. See `recycle_bin` below.
        /// &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Output("recycleBin")]
        public Output<Outputs.FileSystemRecycleBin> RecycleBin { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        /// </summary>
        [Output("snapshotId")]
        public Output<string?> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.236.0) The status of the File System.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The storage type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        /// &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Output("vswitchId")]
        public Output<string?> VswitchId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a FileSystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileSystem(string name, FileSystemArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nas/fileSystem:FileSystem", name, args ?? new FileSystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileSystem(string name, Input<string> id, FileSystemState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nas/fileSystem:FileSystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileSystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileSystem Get(string name, Input<string> id, FileSystemState? state = null, CustomResourceOptions? options = null)
        {
            return new FileSystem(name, id, state, options);
        }
    }

    public sealed class FileSystemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// The description of the file system.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        /// </summary>
        [Input("encryptType")]
        public Input<int>? EncryptType { get; set; }

        /// <summary>
        /// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        /// </summary>
        [Input("fileSystemType")]
        public Input<string>? FileSystemType { get; set; }

        /// <summary>
        /// The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The NFS ACL feature of the file system. See `nfs_acl` below.
        /// &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Input("nfsAcl")]
        public Input<Inputs.FileSystemNfsAclArgs>? NfsAcl { get; set; }

        /// <summary>
        /// The protocol type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        /// </summary>
        [Input("protocolType", required: true)]
        public Input<string> ProtocolType { get; set; } = null!;

        /// <summary>
        /// The recycle bin feature of the file system. See `recycle_bin` below.
        /// &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Input("recycleBin")]
        public Input<Inputs.FileSystemRecycleBinArgs>? RecycleBin { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The storage type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        /// &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FileSystemArgs()
        {
        }
        public static new FileSystemArgs Empty => new FileSystemArgs();
    }

    public sealed class FileSystemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// (Available since v1.236.0) The time when the file system was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the file system.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        /// </summary>
        [Input("encryptType")]
        public Input<int>? EncryptType { get; set; }

        /// <summary>
        /// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        /// </summary>
        [Input("fileSystemType")]
        public Input<string>? FileSystemType { get; set; }

        /// <summary>
        /// The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The NFS ACL feature of the file system. See `nfs_acl` below.
        /// &gt; **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Input("nfsAcl")]
        public Input<Inputs.FileSystemNfsAclGetArgs>? NfsAcl { get; set; }

        /// <summary>
        /// The protocol type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        /// <summary>
        /// The recycle bin feature of the file system. See `recycle_bin` below.
        /// &gt; **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        /// </summary>
        [Input("recycleBin")]
        public Input<Inputs.FileSystemRecycleBinGetArgs>? RecycleBin { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// (Available since v1.236.0) The status of the File System.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The storage type of the file system. Valid values:
        /// - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        /// - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        /// - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        /// &gt; **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FileSystemState()
        {
        }
        public static new FileSystemState Empty => new FileSystemState();
    }
}
