// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    /// <summary>
    /// Provides a File Storage (NAS) Mount Target resource.
    /// 
    /// File system mount point.
    /// 
    /// For information about File Storage (NAS) Mount Target and how to use it, see [What is Mount Target](https://www.alibabacloud.com/help/en/doc-detail/27531.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.34.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.Nas.GetZones.Invoke(new()
    ///     {
    ///         FileSystemType = "extreme",
    ///     });
    /// 
    ///     var countSize = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones)).Length;
    /// 
    ///     var zoneId = Output.Tuple(@default, countSize).Apply(values =&gt;
    ///     {
    ///         var @default = values.Item1;
    ///         var countSize = values.Item2;
    ///         return @default.Apply(getZonesResult =&gt; getZonesResult.Zones)[countSize - 1].ZoneId;
    ///     });
    /// 
    ///     var example = new AliCloud.Vpc.Network("example", new()
    ///     {
    ///         VpcName = "terraform-example",
    ///         CidrBlock = "172.17.3.0/24",
    ///     });
    /// 
    ///     var exampleSwitch = new AliCloud.Vpc.Switch("example", new()
    ///     {
    ///         VswitchName = example.VpcName,
    ///         CidrBlock = example.CidrBlock,
    ///         VpcId = example.Id,
    ///         ZoneId = zoneId,
    ///     });
    /// 
    ///     var exampleFileSystem = new AliCloud.Nas.FileSystem("example", new()
    ///     {
    ///         ProtocolType = "NFS",
    ///         StorageType = "advance",
    ///         FileSystemType = "extreme",
    ///         Capacity = 100,
    ///         ZoneId = zoneId,
    ///     });
    /// 
    ///     var exampleAccessGroup = new AliCloud.Nas.AccessGroup("example", new()
    ///     {
    ///         AccessGroupName = "access_group_xxx",
    ///         AccessGroupType = "Vpc",
    ///         Description = "test_access_group",
    ///         FileSystemType = "extreme",
    ///     });
    /// 
    ///     var exampleMountTarget = new AliCloud.Nas.MountTarget("example", new()
    ///     {
    ///         FileSystemId = exampleFileSystem.Id,
    ///         AccessGroupName = exampleAccessGroup.AccessGroupName,
    ///         VswitchId = exampleSwitch.Id,
    ///         VpcId = example.Id,
    ///         NetworkType = exampleAccessGroup.AccessGroupType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// File Storage (NAS) Mount Target can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:nas/mountTarget:MountTarget example &lt;file_system_id&gt;:&lt;mount_target_domain&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nas/mountTarget:MountTarget")]
    public partial class MountTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the permission group.
        /// </summary>
        [Output("accessGroupName")]
        public Output<string?> AccessGroupName { get; private set; } = null!;

        /// <summary>
        /// Whether to create an IPv6 mount point.
        /// 
        /// Value:
        /// - true: create
        /// - false (default): not created
        /// 
        /// &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
        /// </summary>
        [Output("dualStack")]
        public Output<bool?> DualStack { get; private set; } = null!;

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The domain name of the Mount point.
        /// </summary>
        [Output("mountTargetDomain")]
        public Output<string> MountTargetDomain { get; private set; } = null!;

        /// <summary>
        /// Network type.
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        /// <summary>
        /// The ID of the security group.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string?> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// VPC ID.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of the switch.
        /// </summary>
        [Output("vswitchId")]
        public Output<string?> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a MountTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MountTarget(string name, MountTargetArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nas/mountTarget:MountTarget", name, args ?? new MountTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MountTarget(string name, Input<string> id, MountTargetState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nas/mountTarget:MountTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MountTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MountTarget Get(string name, Input<string> id, MountTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new MountTarget(name, id, state, options);
        }
    }

    public sealed class MountTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the permission group.
        /// </summary>
        [Input("accessGroupName")]
        public Input<string>? AccessGroupName { get; set; }

        /// <summary>
        /// Whether to create an IPv6 mount point.
        /// 
        /// Value:
        /// - true: create
        /// - false (default): not created
        /// 
        /// &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
        /// </summary>
        [Input("dualStack")]
        public Input<bool>? DualStack { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// Network type.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The ID of the security group.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// VPC ID.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of the switch.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public MountTargetArgs()
        {
        }
        public static new MountTargetArgs Empty => new MountTargetArgs();
    }

    public sealed class MountTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the permission group.
        /// </summary>
        [Input("accessGroupName")]
        public Input<string>? AccessGroupName { get; set; }

        /// <summary>
        /// Whether to create an IPv6 mount point.
        /// 
        /// Value:
        /// - true: create
        /// - false (default): not created
        /// 
        /// &gt; **NOTE:**  currently, only extreme NAS supports IPv6 function in various regions in mainland China, and IPv6 function needs to be turned on for this file system.
        /// </summary>
        [Input("dualStack")]
        public Input<bool>? DualStack { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The domain name of the Mount point.
        /// </summary>
        [Input("mountTargetDomain")]
        public Input<string>? MountTargetDomain { get; set; }

        /// <summary>
        /// Network type.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The ID of the security group.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The current status of the Mount point, including Active and Inactive, can be used to mount the file system only when the status is Active.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// VPC ID.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of the switch.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public MountTargetState()
        {
        }
        public static new MountTargetState Empty => new MountTargetState();
    }
}
