// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    /// <summary>
    /// Provides a Network Attached Storage (NAS) Data Flow resource.
    /// 
    /// For information about Network Attached Storage (NAS) Data Flow and how to use it, see [What is Data Flow](https://www.alibabacloud.com/help/en/doc-detail/27530.html).
    /// 
    /// &gt; **NOTE:** Available since v1.153.0.
    /// 
    /// ## Import
    /// 
    /// Network Attached Storage (NAS) Data Flow can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:nas/dataFlow:DataFlow example &lt;file_system_id&gt;:&lt;data_flow_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nas/dataFlow:DataFlow")]
    public partial class DataFlow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Data flow.
        /// </summary>
        [Output("dataFlowId")]
        public Output<string> DataFlowId { get; private set; } = null!;

        /// <summary>
        /// The Description of the data flow. Restrictions:
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The dry run.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Fileset.
        /// </summary>
        [Output("fsetId")]
        public Output<string> FsetId { get; private set; } = null!;

        /// <summary>
        /// The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
        /// </summary>
        [Output("sourceSecurityType")]
        public Output<string> SourceSecurityType { get; private set; } = null!;

        /// <summary>
        /// The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
        /// - storage type: currently only OSS is supported.
        /// - path: the bucket name of OSS.
        /// - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
        /// </summary>
        [Output("sourceStorage")]
        public Output<string> SourceStorage { get; private set; } = null!;

        /// <summary>
        /// The status of the Data flow. Valid values: `Running`, `Stopped`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;


        /// <summary>
        /// Create a DataFlow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataFlow(string name, DataFlowArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nas/dataFlow:DataFlow", name, args ?? new DataFlowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataFlow(string name, Input<string> id, DataFlowState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nas/dataFlow:DataFlow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataFlow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataFlow Get(string name, Input<string> id, DataFlowState? state = null, CustomResourceOptions? options = null)
        {
            return new DataFlow(name, id, state, options);
        }
    }

    public sealed class DataFlowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Description of the data flow. Restrictions:
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The dry run.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The ID of the Fileset.
        /// </summary>
        [Input("fsetId", required: true)]
        public Input<string> FsetId { get; set; } = null!;

        /// <summary>
        /// The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
        /// </summary>
        [Input("sourceSecurityType")]
        public Input<string>? SourceSecurityType { get; set; }

        /// <summary>
        /// The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
        /// - storage type: currently only OSS is supported.
        /// - path: the bucket name of OSS.
        /// - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
        /// </summary>
        [Input("sourceStorage", required: true)]
        public Input<string> SourceStorage { get; set; } = null!;

        /// <summary>
        /// The status of the Data flow. Valid values: `Running`, `Stopped`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
        /// </summary>
        [Input("throughput", required: true)]
        public Input<int> Throughput { get; set; } = null!;

        public DataFlowArgs()
        {
        }
        public static new DataFlowArgs Empty => new DataFlowArgs();
    }

    public sealed class DataFlowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Data flow.
        /// </summary>
        [Input("dataFlowId")]
        public Input<string>? DataFlowId { get; set; }

        /// <summary>
        /// The Description of the data flow. Restrictions:
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The dry run.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The ID of the Fileset.
        /// </summary>
        [Input("fsetId")]
        public Input<string>? FsetId { get; set; }

        /// <summary>
        /// The security protection type of the source storage. If the source storage must be accessed through security protection, specify the security protection type of the source storage. Value:
        /// </summary>
        [Input("sourceSecurityType")]
        public Input<string>? SourceSecurityType { get; set; }

        /// <summary>
        /// The access path of the source store. Format: `&lt;storage type&gt;://&lt;path&gt;`. Among them:
        /// - storage type: currently only OSS is supported.
        /// - path: the bucket name of OSS.
        /// - Only lowercase letters, numbers, and dashes (-) are supported and must start and end with lowercase letters or numbers.
        /// </summary>
        [Input("sourceStorage")]
        public Input<string>? SourceStorage { get; set; }

        /// <summary>
        /// The status of the Data flow. Valid values: `Running`, `Stopped`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The maximum transmission bandwidth of data flow, unit: `MB/s`. Valid values: `1200`, `1500`, `600`. **NOTE:** The transmission bandwidth of data flow must be less than the IO bandwidth of the file system.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public DataFlowState()
        {
        }
        public static new DataFlowState Empty => new DataFlowState();
    }
}
