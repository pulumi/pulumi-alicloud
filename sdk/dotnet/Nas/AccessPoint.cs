// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nas
{
    /// <summary>
    /// Provides a NAS Access Point resource.
    /// 
    /// For information about NAS Access Point and how to use it, see [What is Access Point](https://www.alibabacloud.com/help/zh/nas/developer-reference/api-nas-2017-06-26-createaccesspoint).
    /// 
    /// &gt; **NOTE:** Available since v1.224.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var regionId = config.Get("regionId") ?? "cn-hangzhou";
    ///     var azone = config.Get("azone") ?? "cn-hangzhou-g";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultkyVC70 = new AliCloud.Vpc.Network("defaultkyVC70", new()
    ///     {
    ///         CidrBlock = "172.16.0.0/12",
    ///         Description = "接入点测试noRootDirectory",
    ///     });
    /// 
    ///     var defaultoZAPmO = new AliCloud.Vpc.Switch("defaultoZAPmO", new()
    ///     {
    ///         VpcId = defaultkyVC70.Id,
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         CidrBlock = "172.16.0.0/24",
    ///     });
    /// 
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var defaultBbc7ev = new AliCloud.Nas.AccessGroup("defaultBbc7ev", new()
    ///     {
    ///         AccessGroupType = "Vpc",
    ///         AccessGroupName = $"{name}-{defaultInteger.Result}",
    ///         FileSystemType = "standard",
    ///     });
    /// 
    ///     var defaultVtUpDh = new AliCloud.Nas.FileSystem("defaultVtUpDh", new()
    ///     {
    ///         StorageType = "Performance",
    ///         ZoneId = azone,
    ///         EncryptType = 0,
    ///         ProtocolType = "NFS",
    ///         FileSystemType = "standard",
    ///         Description = "AccessPointnoRootDirectory",
    ///     });
    /// 
    ///     var defaultAccessPoint = new AliCloud.Nas.AccessPoint("default", new()
    ///     {
    ///         VpcId = defaultkyVC70.Id,
    ///         AccessGroup = defaultBbc7ev.AccessGroupName,
    ///         VswitchId = defaultoZAPmO.Id,
    ///         FileSystemId = defaultVtUpDh.Id,
    ///         AccessPointName = name,
    ///         PosixUser = new AliCloud.Nas.Inputs.AccessPointPosixUserArgs
    ///         {
    ///             PosixGroupId = 123,
    ///             PosixUserId = 123,
    ///         },
    ///         RootPathPermission = new AliCloud.Nas.Inputs.AccessPointRootPathPermissionArgs
    ///         {
    ///             OwnerGroupId = 1,
    ///             OwnerUserId = 1,
    ///             Permission = "0777",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NAS Access Point can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:nas/accessPoint:AccessPoint example &lt;file_system_id&gt;:&lt;access_point_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nas/accessPoint:AccessPoint")]
    public partial class AccessPoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The permission group name.
        /// </summary>
        [Output("accessGroup")]
        public Output<string> AccessGroup { get; private set; } = null!;

        /// <summary>
        /// Access point ID.
        /// </summary>
        [Output("accessPointId")]
        public Output<string> AccessPointId { get; private set; } = null!;

        /// <summary>
        /// The Access Point Name.
        /// </summary>
        [Output("accessPointName")]
        public Output<string?> AccessPointName { get; private set; } = null!;

        /// <summary>
        /// Creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the RAM policy.
        /// </summary>
        [Output("enabledRam")]
        public Output<bool?> EnabledRam { get; private set; } = null!;

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The Posix user. See `posix_user` below.
        /// </summary>
        [Output("posixUser")]
        public Output<Outputs.AccessPointPosixUser> PosixUser { get; private set; } = null!;

        /// <summary>
        /// The root directory.
        /// </summary>
        [Output("rootPath")]
        public Output<string> RootPath { get; private set; } = null!;

        /// <summary>
        /// Root permissions. See `root_path_permission` below.
        /// </summary>
        [Output("rootPathPermission")]
        public Output<Outputs.AccessPointRootPathPermission> RootPathPermission { get; private set; } = null!;

        /// <summary>
        /// Current access point state.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The vSwitch ID.
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessPoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessPoint(string name, AccessPointArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nas/accessPoint:AccessPoint", name, args ?? new AccessPointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessPoint(string name, Input<string> id, AccessPointState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nas/accessPoint:AccessPoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessPoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessPoint Get(string name, Input<string> id, AccessPointState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessPoint(name, id, state, options);
        }
    }

    public sealed class AccessPointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permission group name.
        /// </summary>
        [Input("accessGroup", required: true)]
        public Input<string> AccessGroup { get; set; } = null!;

        /// <summary>
        /// The Access Point Name.
        /// </summary>
        [Input("accessPointName")]
        public Input<string>? AccessPointName { get; set; }

        /// <summary>
        /// Whether to enable the RAM policy.
        /// </summary>
        [Input("enabledRam")]
        public Input<bool>? EnabledRam { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The Posix user. See `posix_user` below.
        /// </summary>
        [Input("posixUser")]
        public Input<Inputs.AccessPointPosixUserArgs>? PosixUser { get; set; }

        /// <summary>
        /// The root directory.
        /// </summary>
        [Input("rootPath")]
        public Input<string>? RootPath { get; set; }

        /// <summary>
        /// Root permissions. See `root_path_permission` below.
        /// </summary>
        [Input("rootPathPermission")]
        public Input<Inputs.AccessPointRootPathPermissionArgs>? RootPathPermission { get; set; }

        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// The vSwitch ID.
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        public AccessPointArgs()
        {
        }
        public static new AccessPointArgs Empty => new AccessPointArgs();
    }

    public sealed class AccessPointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permission group name.
        /// </summary>
        [Input("accessGroup")]
        public Input<string>? AccessGroup { get; set; }

        /// <summary>
        /// Access point ID.
        /// </summary>
        [Input("accessPointId")]
        public Input<string>? AccessPointId { get; set; }

        /// <summary>
        /// The Access Point Name.
        /// </summary>
        [Input("accessPointName")]
        public Input<string>? AccessPointName { get; set; }

        /// <summary>
        /// Creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether to enable the RAM policy.
        /// </summary>
        [Input("enabledRam")]
        public Input<bool>? EnabledRam { get; set; }

        /// <summary>
        /// The ID of the file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The Posix user. See `posix_user` below.
        /// </summary>
        [Input("posixUser")]
        public Input<Inputs.AccessPointPosixUserGetArgs>? PosixUser { get; set; }

        /// <summary>
        /// The root directory.
        /// </summary>
        [Input("rootPath")]
        public Input<string>? RootPath { get; set; }

        /// <summary>
        /// Root permissions. See `root_path_permission` below.
        /// </summary>
        [Input("rootPathPermission")]
        public Input<Inputs.AccessPointRootPathPermissionGetArgs>? RootPathPermission { get; set; }

        /// <summary>
        /// Current access point state.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The vSwitch ID.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public AccessPointState()
        {
        }
        public static new AccessPointState Empty => new AccessPointState();
    }
}
