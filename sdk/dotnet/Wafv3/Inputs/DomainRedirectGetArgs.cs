// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Wafv3.Inputs
{

    public sealed class DomainRedirectGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<string>? _backends;

        /// <summary>
        /// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
        /// 
        /// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
        /// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
        /// </summary>
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        [Input("backupBackends")]
        private InputList<string>? _backupBackends;

        /// <summary>
        /// The secondary IP address or domain name of the origin server.
        /// </summary>
        public InputList<string> BackupBackends
        {
            get => _backupBackends ?? (_backupBackends = new InputList<string>());
            set => _backupBackends = value;
        }

        /// <summary>
        /// Connection timeout duration. Unit: seconds.
        /// Value range: 1~3600. Default value: 5.
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        [Input("focusHttpBackend")]
        public Input<bool>? FocusHttpBackend { get; set; }

        /// <summary>
        /// Specifies whether to enable the persistent connection feature. Valid values:
        /// </summary>
        [Input("keepalive")]
        public Input<bool>? Keepalive { get; set; }

        /// <summary>
        /// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
        /// 
        /// 
        /// &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
        /// </summary>
        [Input("keepaliveRequests")]
        public Input<int>? KeepaliveRequests { get; set; }

        /// <summary>
        /// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
        /// 
        /// &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
        /// </summary>
        [Input("keepaliveTimeout")]
        public Input<int>? KeepaliveTimeout { get; set; }

        /// <summary>
        /// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
        /// </summary>
        [Input("loadbalance", required: true)]
        public Input<string> Loadbalance { get; set; } = null!;

        /// <summary>
        /// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        [Input("requestHeaders")]
        private InputList<Inputs.DomainRedirectRequestHeaderGetArgs>? _requestHeaders;

        /// <summary>
        /// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
        /// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `request_headers` below.
        /// </summary>
        public InputList<Inputs.DomainRedirectRequestHeaderGetArgs> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputList<Inputs.DomainRedirectRequestHeaderGetArgs>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
        /// </summary>
        [Input("retry")]
        public Input<bool>? Retry { get; set; }

        /// <summary>
        /// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        [Input("sniEnabled")]
        public Input<bool>? SniEnabled { get; set; }

        /// <summary>
        /// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
        /// 
        /// &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
        /// </summary>
        [Input("sniHost")]
        public Input<string>? SniHost { get; set; }

        /// <summary>
        /// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
        /// </summary>
        [Input("writeTimeout")]
        public Input<int>? WriteTimeout { get; set; }

        /// <summary>
        /// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
        /// </summary>
        [Input("xffProto")]
        public Input<bool>? XffProto { get; set; }

        public DomainRedirectGetArgs()
        {
        }
        public static new DomainRedirectGetArgs Empty => new DomainRedirectGetArgs();
    }
}
