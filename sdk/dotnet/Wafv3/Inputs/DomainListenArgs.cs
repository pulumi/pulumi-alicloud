// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Wafv3.Inputs
{

    public sealed class DomainListenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        [Input("cipherSuite")]
        public Input<int>? CipherSuite { get; set; }

        [Input("customCiphers")]
        private InputList<string>? _customCiphers;

        /// <summary>
        /// The specific custom encryption suite to add.
        /// </summary>
        public InputList<string> CustomCiphers
        {
            get => _customCiphers ?? (_customCiphers = new InputList<string>());
            set => _customCiphers = value;
        }

        /// <summary>
        /// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// </summary>
        [Input("enableTlsv3")]
        public Input<bool>? EnableTlsv3 { get; set; }

        /// <summary>
        /// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `Share`. Valid values:
        /// </summary>
        [Input("exclusiveIp")]
        public Input<bool>? ExclusiveIp { get; set; }

        /// <summary>
        /// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
        /// </summary>
        [Input("focusHttps")]
        public Input<bool>? FocusHttps { get; set; }

        /// <summary>
        /// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        [Input("httpPorts")]
        private InputList<int>? _httpPorts;

        /// <summary>
        /// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
        /// </summary>
        public InputList<int> HttpPorts
        {
            get => _httpPorts ?? (_httpPorts = new InputList<int>());
            set => _httpPorts = value;
        }

        [Input("httpsPorts")]
        private InputList<int>? _httpsPorts;

        /// <summary>
        /// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
        /// </summary>
        public InputList<int> HttpsPorts
        {
            get => _httpsPorts ?? (_httpsPorts = new InputList<int>());
            set => _httpsPorts = value;
        }

        /// <summary>
        /// Specifies whether to enable IPv6 protection. Valid values:
        /// </summary>
        [Input("ipv6Enabled")]
        public Input<bool>? Ipv6Enabled { get; set; }

        /// <summary>
        /// The type of the protection resource. Valid values:
        /// </summary>
        [Input("protectionResource")]
        public Input<string>? ProtectionResource { get; set; }

        /// <summary>
        /// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
        /// 
        /// - true
        /// - false
        /// </summary>
        [Input("sm2AccessOnly")]
        public Input<bool>? Sm2AccessOnly { get; set; }

        /// <summary>
        /// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
        /// </summary>
        [Input("sm2CertId")]
        public Input<string>? Sm2CertId { get; set; }

        /// <summary>
        /// Specifies whether to add an SM certificate.
        /// </summary>
        [Input("sm2Enabled")]
        public Input<bool>? Sm2Enabled { get; set; }

        /// <summary>
        /// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// </summary>
        [Input("tlsVersion")]
        public Input<string>? TlsVersion { get; set; }

        /// <summary>
        /// The method that is used to obtain the originating IP address of a client. Valid values:
        /// </summary>
        [Input("xffHeaderMode")]
        public Input<int>? XffHeaderMode { get; set; }

        [Input("xffHeaders")]
        private InputList<string>? _xffHeaders;

        /// <summary>
        /// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
        /// 
        /// &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
        /// </summary>
        public InputList<string> XffHeaders
        {
            get => _xffHeaders ?? (_xffHeaders = new InputList<string>());
            set => _xffHeaders = value;
        }

        public DomainListenArgs()
        {
        }
        public static new DomainListenArgs Empty => new DomainListenArgs();
    }
}
