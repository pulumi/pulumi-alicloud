// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Wafv3.Inputs
{

    public sealed class DomainListenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// - **1**: indicates that all encryption suites are added.
        /// - **2**: indicates that a strong encryption package is added. You can select this value only if the value of **tls_version** is `tlsv1.2`.
        /// - **99**: indicates that a custom encryption suite is added.
        /// </summary>
        [Input("cipherSuite")]
        public Input<int>? CipherSuite { get; set; }

        [Input("customCiphers")]
        private InputList<string>? _customCiphers;

        /// <summary>
        /// The specific custom encryption suite to add.
        /// </summary>
        public InputList<string> CustomCiphers
        {
            get => _customCiphers ?? (_customCiphers = new InputList<string>());
            set => _customCiphers = value;
        }

        /// <summary>
        /// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// - **true**: indicates that TSL1.3 is supported.
        /// - **false**: indicates that TSL1.3 is not supported.
        /// </summary>
        [Input("enableTlsv3")]
        public Input<bool>? EnableTlsv3 { get; set; }

        /// <summary>
        /// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used). Value:
        /// - **true**: indicates that the exclusive IP address is enabled.
        /// - **false** (default): indicates that exclusive IP address is not enabled.
        /// </summary>
        [Input("exclusiveIp")]
        public Input<bool>? ExclusiveIp { get; set; }

        /// <summary>
        /// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `https_ports` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol). Value:
        /// - **true**: indicates that HTTPS forced redirection is enabled.
        /// - **false**: indicates that HTTPS forced redirection is not enabled.
        /// </summary>
        [Input("focusHttps")]
        public Input<bool>? FocusHttps { get; set; }

        /// <summary>
        /// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// - **true:** indicates that HTTP2 is enabled.
        /// - **false** (default): indicates that HTTP2 is not enabled.
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        [Input("httpPorts")]
        private InputList<int>? _httpPorts;

        /// <summary>
        /// The listening port of the HTTP protocol.
        /// </summary>
        public InputList<int> HttpPorts
        {
            get => _httpPorts ?? (_httpPorts = new InputList<int>());
            set => _httpPorts = value;
        }

        [Input("httpsPorts")]
        private InputList<int>? _httpsPorts;

        /// <summary>
        /// The listening port of the HTTPS protocol.
        /// </summary>
        public InputList<int> HttpsPorts
        {
            get => _httpsPorts ?? (_httpsPorts = new InputList<int>());
            set => _httpsPorts = value;
        }

        /// <summary>
        /// Whether IPv6 is turned on. Value:
        /// - **true**: indicates that IPv6 is enabled.
        /// - **false** (default): indicates that IPv6 is not enabled.
        /// </summary>
        [Input("ipv6Enabled")]
        public Input<bool>? Ipv6Enabled { get; set; }

        /// <summary>
        /// The type of protection resource to use. Value:
        /// - **share** (default): indicates that a shared cluster is used.
        /// - **gslb**: indicates that the shared cluster intelligent load balancing is used.
        /// </summary>
        [Input("protectionResource")]
        public Input<string>? ProtectionResource { get; set; }

        /// <summary>
        /// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value: **tlsv1**, **tlsv1.1**, **tlsv1.2**.
        /// </summary>
        [Input("tlsVersion")]
        public Input<string>? TlsVersion { get; set; }

        /// <summary>
        /// WAF obtains the real IP address of the client. Value:
        /// - **0** (default): indicates that the client has not forwarded the traffic to WAF through other layer -7 agents.
        /// - **1**: indicates that the first value of the X-Forwarded-For(XFF) field in the WAF read request header is used as the client IP address.
        /// - **2**: indicates that the custom field value set by you in the WAF read request header is used as the client IP address.
        /// </summary>
        [Input("xffHeaderMode")]
        public Input<int>? XffHeaderMode { get; set; }

        [Input("xffHeaders")]
        private InputList<string>? _xffHeaders;

        /// <summary>
        /// Set the list of custom fields used to obtain the client IP address.
        /// </summary>
        public InputList<string> XffHeaders
        {
            get => _xffHeaders ?? (_xffHeaders = new InputList<string>());
            set => _xffHeaders = value;
        }

        public DomainListenArgs()
        {
        }
        public static new DomainListenArgs Empty => new DomainListenArgs();
    }
}
