// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Wafv3.Outputs
{

    [OutputType]
    public sealed class DomainListen
    {
        /// <summary>
        /// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
        /// </summary>
        public readonly string? CertId;
        /// <summary>
        /// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        public readonly int? CipherSuite;
        /// <summary>
        /// The specific custom encryption suite to add.
        /// </summary>
        public readonly ImmutableArray<string> CustomCiphers;
        /// <summary>
        /// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// </summary>
        public readonly bool? EnableTlsv3;
        /// <summary>
        /// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
        /// </summary>
        public readonly bool? ExclusiveIp;
        /// <summary>
        /// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
        /// </summary>
        public readonly bool? FocusHttps;
        /// <summary>
        /// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        public readonly bool? Http2Enabled;
        /// <summary>
        /// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
        /// </summary>
        public readonly ImmutableArray<int> HttpPorts;
        /// <summary>
        /// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
        /// </summary>
        public readonly ImmutableArray<int> HttpsPorts;
        /// <summary>
        /// Specifies whether to enable IPv6 protection. Valid values:
        /// </summary>
        public readonly bool? Ipv6Enabled;
        /// <summary>
        /// The type of the protection resource. Valid values:
        /// </summary>
        public readonly string? ProtectionResource;
        /// <summary>
        /// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
        /// 
        /// - true
        /// - false
        /// </summary>
        public readonly bool? Sm2AccessOnly;
        /// <summary>
        /// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
        /// </summary>
        public readonly string? Sm2CertId;
        /// <summary>
        /// Specifies whether to add an SM certificate.
        /// </summary>
        public readonly bool? Sm2Enabled;
        /// <summary>
        /// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
        /// </summary>
        public readonly string? TlsVersion;
        /// <summary>
        /// The method that is used to obtain the originating IP address of a client. Valid values:
        /// </summary>
        public readonly int? XffHeaderMode;
        /// <summary>
        /// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
        /// 
        /// &gt; **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
        /// </summary>
        public readonly ImmutableArray<string> XffHeaders;

        [OutputConstructor]
        private DomainListen(
            string? certId,

            int? cipherSuite,

            ImmutableArray<string> customCiphers,

            bool? enableTlsv3,

            bool? exclusiveIp,

            bool? focusHttps,

            bool? http2Enabled,

            ImmutableArray<int> httpPorts,

            ImmutableArray<int> httpsPorts,

            bool? ipv6Enabled,

            string? protectionResource,

            bool? sm2AccessOnly,

            string? sm2CertId,

            bool? sm2Enabled,

            string? tlsVersion,

            int? xffHeaderMode,

            ImmutableArray<string> xffHeaders)
        {
            CertId = certId;
            CipherSuite = cipherSuite;
            CustomCiphers = customCiphers;
            EnableTlsv3 = enableTlsv3;
            ExclusiveIp = exclusiveIp;
            FocusHttps = focusHttps;
            Http2Enabled = http2Enabled;
            HttpPorts = httpPorts;
            HttpsPorts = httpsPorts;
            Ipv6Enabled = ipv6Enabled;
            ProtectionResource = protectionResource;
            Sm2AccessOnly = sm2AccessOnly;
            Sm2CertId = sm2CertId;
            Sm2Enabled = sm2Enabled;
            TlsVersion = tlsVersion;
            XffHeaderMode = xffHeaderMode;
            XffHeaders = xffHeaders;
        }
    }
}
