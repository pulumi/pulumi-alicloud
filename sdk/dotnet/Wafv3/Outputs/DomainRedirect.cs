// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Wafv3.Outputs
{

    [OutputType]
    public sealed class DomainRedirect
    {
        /// <summary>
        /// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
        /// 
        /// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
        /// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
        /// </summary>
        public readonly ImmutableArray<string> Backends;
        /// <summary>
        /// The secondary IP address or domain name of the origin server.
        /// </summary>
        public readonly ImmutableArray<string> BackupBackends;
        /// <summary>
        /// Connection timeout duration. Unit: seconds.
        /// Value range: 1~3600. Default value: 5.
        /// </summary>
        public readonly int? ConnectTimeout;
        /// <summary>
        /// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        public readonly bool? FocusHttpBackend;
        /// <summary>
        /// Specifies whether to enable the persistent connection feature. Valid values:
        /// </summary>
        public readonly bool? Keepalive;
        /// <summary>
        /// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
        /// 
        /// 
        /// &gt; **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
        /// </summary>
        public readonly int? KeepaliveRequests;
        /// <summary>
        /// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
        /// 
        /// &gt; **NOTE:**  How long the multiplexed long connection is idle and then released.
        /// </summary>
        public readonly int? KeepaliveTimeout;
        /// <summary>
        /// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
        /// </summary>
        public readonly string Loadbalance;
        /// <summary>
        /// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
        /// </summary>
        public readonly int? ReadTimeout;
        /// <summary>
        /// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
        /// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `RequestHeaders` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainRedirectRequestHeader> RequestHeaders;
        /// <summary>
        /// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
        /// </summary>
        public readonly bool? Retry;
        /// <summary>
        /// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
        /// </summary>
        public readonly bool? SniEnabled;
        /// <summary>
        /// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
        /// 
        /// &gt; **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
        /// </summary>
        public readonly string? SniHost;
        /// <summary>
        /// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
        /// </summary>
        public readonly int? WriteTimeout;
        /// <summary>
        /// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
        /// </summary>
        public readonly bool? XffProto;

        [OutputConstructor]
        private DomainRedirect(
            ImmutableArray<string> backends,

            ImmutableArray<string> backupBackends,

            int? connectTimeout,

            bool? focusHttpBackend,

            bool? keepalive,

            int? keepaliveRequests,

            int? keepaliveTimeout,

            string loadbalance,

            int? readTimeout,

            ImmutableArray<Outputs.DomainRedirectRequestHeader> requestHeaders,

            bool? retry,

            bool? sniEnabled,

            string? sniHost,

            int? writeTimeout,

            bool? xffProto)
        {
            Backends = backends;
            BackupBackends = backupBackends;
            ConnectTimeout = connectTimeout;
            FocusHttpBackend = focusHttpBackend;
            Keepalive = keepalive;
            KeepaliveRequests = keepaliveRequests;
            KeepaliveTimeout = keepaliveTimeout;
            Loadbalance = loadbalance;
            ReadTimeout = readTimeout;
            RequestHeaders = requestHeaders;
            Retry = retry;
            SniEnabled = sniEnabled;
            SniHost = sniHost;
            WriteTimeout = writeTimeout;
            XffProto = xffProto;
        }
    }
}
