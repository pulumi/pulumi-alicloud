// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eci
{
    [AliCloudResourceType("alicloud:eci/openApiImageCache:OpenApiImageCache")]
    public partial class OpenApiImageCache : global::Pulumi.CustomResource
    {
        [Output("containerGroupId")]
        public Output<string> ContainerGroupId { get; private set; } = null!;

        [Output("eipInstanceId")]
        public Output<string?> EipInstanceId { get; private set; } = null!;

        [Output("imageCacheName")]
        public Output<string> ImageCacheName { get; private set; } = null!;

        [Output("imageCacheSize")]
        public Output<int?> ImageCacheSize { get; private set; } = null!;

        [Output("imageRegistryCredentials")]
        public Output<ImmutableArray<Outputs.OpenApiImageCacheImageRegistryCredential>> ImageRegistryCredentials { get; private set; } = null!;

        [Output("images")]
        public Output<ImmutableArray<string>> Images { get; private set; } = null!;

        [Output("resourceGroupId")]
        public Output<string?> ResourceGroupId { get; private set; } = null!;

        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;

        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a OpenApiImageCache resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OpenApiImageCache(string name, OpenApiImageCacheArgs args, CustomResourceOptions? options = null)
            : base("alicloud:eci/openApiImageCache:OpenApiImageCache", name, args ?? new OpenApiImageCacheArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OpenApiImageCache(string name, Input<string> id, OpenApiImageCacheState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eci/openApiImageCache:OpenApiImageCache", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OpenApiImageCache resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OpenApiImageCache Get(string name, Input<string> id, OpenApiImageCacheState? state = null, CustomResourceOptions? options = null)
        {
            return new OpenApiImageCache(name, id, state, options);
        }
    }

    public sealed class OpenApiImageCacheArgs : global::Pulumi.ResourceArgs
    {
        [Input("eipInstanceId")]
        public Input<string>? EipInstanceId { get; set; }

        [Input("imageCacheName", required: true)]
        public Input<string> ImageCacheName { get; set; } = null!;

        [Input("imageCacheSize")]
        public Input<int>? ImageCacheSize { get; set; }

        [Input("imageRegistryCredentials")]
        private InputList<Inputs.OpenApiImageCacheImageRegistryCredentialArgs>? _imageRegistryCredentials;
        public InputList<Inputs.OpenApiImageCacheImageRegistryCredentialArgs> ImageRegistryCredentials
        {
            get => _imageRegistryCredentials ?? (_imageRegistryCredentials = new InputList<Inputs.OpenApiImageCacheImageRegistryCredentialArgs>());
            set => _imageRegistryCredentials = value;
        }

        [Input("images", required: true)]
        private InputList<string>? _images;
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        [Input("securityGroupId", required: true)]
        public Input<string> SecurityGroupId { get; set; } = null!;

        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public OpenApiImageCacheArgs()
        {
        }
        public static new OpenApiImageCacheArgs Empty => new OpenApiImageCacheArgs();
    }

    public sealed class OpenApiImageCacheState : global::Pulumi.ResourceArgs
    {
        [Input("containerGroupId")]
        public Input<string>? ContainerGroupId { get; set; }

        [Input("eipInstanceId")]
        public Input<string>? EipInstanceId { get; set; }

        [Input("imageCacheName")]
        public Input<string>? ImageCacheName { get; set; }

        [Input("imageCacheSize")]
        public Input<int>? ImageCacheSize { get; set; }

        [Input("imageRegistryCredentials")]
        private InputList<Inputs.OpenApiImageCacheImageRegistryCredentialGetArgs>? _imageRegistryCredentials;
        public InputList<Inputs.OpenApiImageCacheImageRegistryCredentialGetArgs> ImageRegistryCredentials
        {
            get => _imageRegistryCredentials ?? (_imageRegistryCredentials = new InputList<Inputs.OpenApiImageCacheImageRegistryCredentialGetArgs>());
            set => _imageRegistryCredentials = value;
        }

        [Input("images")]
        private InputList<string>? _images;
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public OpenApiImageCacheState()
        {
        }
        public static new OpenApiImageCacheState Empty => new OpenApiImageCacheState();
    }
}
