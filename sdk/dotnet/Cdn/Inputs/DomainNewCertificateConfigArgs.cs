// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Cdn.Inputs
{

    public sealed class DomainNewCertificateConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate. It takes effect only when CertType = cas.
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// Certificate name, only flyer names are supported.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        /// <summary>
        /// The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
        /// </summary>
        [Input("certRegion")]
        public Input<string>? CertRegion { get; set; }

        /// <summary>
        /// Certificate type. Value:
        /// - **upload**: upload certificate.
        /// - **cas**: Cloud Shield certificate.
        /// - **free**: free certificate.
        /// &gt; If the certificate type is **cas**, **PrivateKey** does not need to pass parameters.
        /// </summary>
        [Input("certType")]
        public Input<string>? CertType { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("serverCertificate")]
        private Input<string>? _serverCertificate;

        /// <summary>
        /// The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
        /// </summary>
        public Input<string>? ServerCertificate
        {
            get => _serverCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serverCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether the HTTPS certificate is enabled. Value:
        /// - **on**(default): enabled.
        /// - **off** : not enabled.
        /// </summary>
        [Input("serverCertificateStatus")]
        public Input<string>? ServerCertificateStatus { get; set; }

        public DomainNewCertificateConfigArgs()
        {
        }
        public static new DomainNewCertificateConfigArgs Empty => new DomainNewCertificateConfigArgs();
    }
}
