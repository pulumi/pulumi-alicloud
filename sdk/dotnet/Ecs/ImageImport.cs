// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    /// <summary>
    /// Provides a ECS Image Import resource.
    /// 
    /// For information about ECS Image Import and how to use it, see [What is Image Import](https://www.alibabacloud.com/help/en/ecs/developer-reference/api-ecs-2014-05-26-importimage).
    /// 
    /// &gt; **NOTE:** Available since v1.69.0.
    /// 
    /// &gt; **NOTE:** You must upload the image file to the object storage OSS in advance.
    /// 
    /// &gt; **NOTE:** The region where the image is imported must be the same region as the OSS bucket where the image file is uploaded.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-image-import-example";
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var defaultBucket = new AliCloud.Oss.Bucket("default", new()
    ///     {
    ///         BucketName = $"{name}-{@default.Result}",
    ///     });
    /// 
    ///     var defaultBucketObject = new AliCloud.Oss.BucketObject("default", new()
    ///     {
    ///         Bucket = defaultBucket.Id,
    ///         Key = "fc/hello.zip",
    ///         Content = @"    # -*- coding: utf-8 -*-
    ///     def handler(event, context):
    ///     print \""hello world\""
    ///     return 'hello world'
    /// ",
    ///     });
    /// 
    ///     var defaultImageImport = new AliCloud.Ecs.ImageImport("default", new()
    ///     {
    ///         Architecture = "x86_64",
    ///         OsType = "linux",
    ///         Platform = "Ubuntu",
    ///         LicenseType = "Auto",
    ///         ImageName = name,
    ///         Description = name,
    ///         DiskDeviceMappings = new[]
    ///         {
    ///             new AliCloud.Ecs.Inputs.ImageImportDiskDeviceMappingArgs
    ///             {
    ///                 OssBucket = defaultBucket.Id,
    ///                 OssObject = defaultBucketObject.Id,
    ///                 DiskImageSize = 5,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS Image Import can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ecs/imageImport:ImageImport example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ecs/imageImport:ImageImport")]
    public partial class ImageImport : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The architecture of the image. Default value: `x86_64`. Valid values: `x86_64`, `i386`.
        /// </summary>
        [Output("architecture")]
        public Output<string?> Architecture { get; private set; } = null!;

        /// <summary>
        /// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
        /// </summary>
        [Output("bootMode")]
        public Output<string> BootMode { get; private set; } = null!;

        /// <summary>
        /// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The information about the custom image. See `disk_device_mapping` below.
        /// </summary>
        [Output("diskDeviceMappings")]
        public Output<ImmutableArray<Outputs.ImageImportDiskDeviceMapping>> DiskDeviceMappings { get; private set; } = null!;

        /// <summary>
        /// The name of the image. The `image_name` must be `2` to `128` characters in length. The `image_name` must start with a letter and cannot start with acs: or aliyun. The `image_name` cannot contain http:// or https://. The `image_name` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
        /// </summary>
        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        /// <summary>
        /// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
        /// &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;


        /// <summary>
        /// Create a ImageImport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageImport(string name, ImageImportArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ecs/imageImport:ImageImport", name, args ?? new ImageImportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageImport(string name, Input<string> id, ImageImportState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ecs/imageImport:ImageImport", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageImport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageImport Get(string name, Input<string> id, ImageImportState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageImport(name, id, state, options);
        }
    }

    public sealed class ImageImportArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture of the image. Default value: `x86_64`. Valid values: `x86_64`, `i386`.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
        /// </summary>
        [Input("bootMode")]
        public Input<string>? BootMode { get; set; }

        /// <summary>
        /// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskDeviceMappings", required: true)]
        private InputList<Inputs.ImageImportDiskDeviceMappingArgs>? _diskDeviceMappings;

        /// <summary>
        /// The information about the custom image. See `disk_device_mapping` below.
        /// </summary>
        public InputList<Inputs.ImageImportDiskDeviceMappingArgs> DiskDeviceMappings
        {
            get => _diskDeviceMappings ?? (_diskDeviceMappings = new InputList<Inputs.ImageImportDiskDeviceMappingArgs>());
            set => _diskDeviceMappings = value;
        }

        /// <summary>
        /// The name of the image. The `image_name` must be `2` to `128` characters in length. The `image_name` must start with a letter and cannot start with acs: or aliyun. The `image_name` cannot contain http:// or https://. The `image_name` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
        /// &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        public ImageImportArgs()
        {
        }
        public static new ImageImportArgs Empty => new ImageImportArgs();
    }

    public sealed class ImageImportState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture of the image. Default value: `x86_64`. Valid values: `x86_64`, `i386`.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
        /// </summary>
        [Input("bootMode")]
        public Input<string>? BootMode { get; set; }

        /// <summary>
        /// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskDeviceMappings")]
        private InputList<Inputs.ImageImportDiskDeviceMappingGetArgs>? _diskDeviceMappings;

        /// <summary>
        /// The information about the custom image. See `disk_device_mapping` below.
        /// </summary>
        public InputList<Inputs.ImageImportDiskDeviceMappingGetArgs> DiskDeviceMappings
        {
            get => _diskDeviceMappings ?? (_diskDeviceMappings = new InputList<Inputs.ImageImportDiskDeviceMappingGetArgs>());
            set => _diskDeviceMappings = value;
        }

        /// <summary>
        /// The name of the image. The `image_name` must be `2` to `128` characters in length. The `image_name` must start with a letter and cannot start with acs: or aliyun. The `image_name` cannot contain http:// or https://. The `image_name` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
        /// &gt; **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        public ImageImportState()
        {
        }
        public static new ImageImportState Empty => new ImageImportState();
    }
}
