// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs.Outputs
{

    [OutputType]
    public sealed class GetEcsDisksDiskResult
    {
        /// <summary>
        /// A mount of time.
        /// </summary>
        public readonly string AttachedTime;
        /// <summary>
        /// Query cloud disks based on the automatic snapshot policy ID.
        /// </summary>
        public readonly string AutoSnapshotPolicyId;
        /// <summary>
        /// Field `availability_zone` has been deprecated from provider version 1.122.0. New field `zone_id` instead.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// Disk category. Valid values: `cloud`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `ephemeral_ssd`, `cloud_auto`, `cloud_essd_entry`.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// Disk creation time.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Indicates whether the automatic snapshot is deleted when the disk is released.
        /// </summary>
        public readonly bool DeleteAutoSnapshot;
        /// <summary>
        /// Indicates whether the disk is released together with the instance.
        /// </summary>
        public readonly bool DeleteWithInstance;
        /// <summary>
        /// Disk description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Disk detachment time.
        /// </summary>
        public readonly string DetachedTime;
        /// <summary>
        /// The mount point of the disk.
        /// </summary>
        public readonly string Device;
        /// <summary>
        /// ID of the disk.
        /// </summary>
        public readonly string DiskId;
        /// <summary>
        /// The disk name.
        /// </summary>
        public readonly string DiskName;
        /// <summary>
        /// The disk type. Valid values: `system`, `data`, `all`.
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// Indicates whether the automatic snapshot is deleted when the disk is released.
        /// </summary>
        public readonly bool EnableAutoSnapshot;
        /// <summary>
        /// Whether the cloud disk has an automatic snapshot policy
        /// </summary>
        public readonly bool EnableAutomatedSnapshotPolicy;
        /// <summary>
        /// Indicate whether the disk is encrypted or not. Valid values: `on` and `off`.
        /// </summary>
        public readonly string Encrypted;
        /// <summary>
        /// The time when the subscription disk expires.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// The time when the subscription disk expires.
        /// </summary>
        public readonly string ExpiredTime;
        /// <summary>
        /// ID of the disk.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the image from which the disk is created. It is null unless the disk is created using an image.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// Filter the results by the specified ECS instance ID.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// The maximum number of read and write operations per second.
        /// </summary>
        public readonly int Iops;
        /// <summary>
        /// The maximum number of read operations per second.
        /// </summary>
        public readonly int IopsRead;
        /// <summary>
        /// The maximum number of write operations per second.
        /// </summary>
        public readonly int IopsWrite;
        /// <summary>
        /// The kms key id.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// Number of instances mounted on shared storage.
        /// </summary>
        public readonly int MountInstanceNum;
        /// <summary>
        /// Disk mount instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEcsDisksDiskMountInstanceResult> MountInstances;
        /// <summary>
        /// Disk name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The reasons why the disk was locked. See `operation_locks` below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEcsDisksDiskOperationLockResult> OperationLocks;
        /// <summary>
        /// Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
        /// </summary>
        public readonly string PaymentType;
        /// <summary>
        /// Performance levels of ESSD cloud disk.
        /// </summary>
        public readonly string PerformanceLevel;
        /// <summary>
        /// Whether the cloud disk or local disk supports uninstallation.
        /// </summary>
        public readonly bool Portable;
        /// <summary>
        /// The product logo of the cloud market.
        /// </summary>
        public readonly string ProductCode;
        /// <summary>
        /// Region ID the disk belongs to.
        /// </summary>
        public readonly string RegionId;
        /// <summary>
        /// The Id of resource group which the disk belongs.
        /// </summary>
        public readonly string ResourceGroupId;
        /// <summary>
        /// Disk size in GiB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The source snapshot id.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// The status of disk. Valid Values: `Attaching`, `Available`, `Creating`, `Detaching`, `In_use`, `Migrating`, `ReIniting`, `Transferring`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A map of tags assigned to the disks.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Field `type` has been deprecated from provider version 1.122.0. New field `disk_type` instead.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// ID of the free zone to which the disk belongs.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetEcsDisksDiskResult(
            string attachedTime,

            string autoSnapshotPolicyId,

            string availabilityZone,

            string category,

            string creationTime,

            bool deleteAutoSnapshot,

            bool deleteWithInstance,

            string description,

            string detachedTime,

            string device,

            string diskId,

            string diskName,

            string diskType,

            bool enableAutoSnapshot,

            bool enableAutomatedSnapshotPolicy,

            string encrypted,

            string expirationTime,

            string expiredTime,

            string id,

            string imageId,

            string instanceId,

            int iops,

            int iopsRead,

            int iopsWrite,

            string kmsKeyId,

            int mountInstanceNum,

            ImmutableArray<Outputs.GetEcsDisksDiskMountInstanceResult> mountInstances,

            string name,

            ImmutableArray<Outputs.GetEcsDisksDiskOperationLockResult> operationLocks,

            string paymentType,

            string performanceLevel,

            bool portable,

            string productCode,

            string regionId,

            string resourceGroupId,

            int size,

            string snapshotId,

            string status,

            ImmutableDictionary<string, string> tags,

            string type,

            string zoneId)
        {
            AttachedTime = attachedTime;
            AutoSnapshotPolicyId = autoSnapshotPolicyId;
            AvailabilityZone = availabilityZone;
            Category = category;
            CreationTime = creationTime;
            DeleteAutoSnapshot = deleteAutoSnapshot;
            DeleteWithInstance = deleteWithInstance;
            Description = description;
            DetachedTime = detachedTime;
            Device = device;
            DiskId = diskId;
            DiskName = diskName;
            DiskType = diskType;
            EnableAutoSnapshot = enableAutoSnapshot;
            EnableAutomatedSnapshotPolicy = enableAutomatedSnapshotPolicy;
            Encrypted = encrypted;
            ExpirationTime = expirationTime;
            ExpiredTime = expiredTime;
            Id = id;
            ImageId = imageId;
            InstanceId = instanceId;
            Iops = iops;
            IopsRead = iopsRead;
            IopsWrite = iopsWrite;
            KmsKeyId = kmsKeyId;
            MountInstanceNum = mountInstanceNum;
            MountInstances = mountInstances;
            Name = name;
            OperationLocks = operationLocks;
            PaymentType = paymentType;
            PerformanceLevel = performanceLevel;
            Portable = portable;
            ProductCode = productCode;
            RegionId = regionId;
            ResourceGroupId = resourceGroupId;
            Size = size;
            SnapshotId = snapshotId;
            Status = status;
            Tags = tags;
            Type = type;
            ZoneId = zoneId;
        }
    }
}
