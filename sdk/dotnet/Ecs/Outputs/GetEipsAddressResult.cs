// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs.Outputs
{

    [OutputType]
    public sealed class GetEipsAddressResult
    {
        public readonly string AddressName;
        public readonly string AllocationId;
        public readonly ImmutableArray<string> AvailableRegions;
        /// <summary>
        /// EIP internet max bandwidth in Mbps.
        /// </summary>
        public readonly string Bandwidth;
        public readonly string BandwidthPackageBandwidth;
        public readonly string BandwidthPackageId;
        public readonly string BandwidthPackageType;
        public readonly string CreateTime;
        /// <summary>
        /// (Optional, Available in v1.124.4+) Whether enable the deletion protection or not.
        /// </summary>
        public readonly bool DeletionProtection;
        public readonly string Description;
        public readonly string ExpiredTime;
        public readonly string HasReservationData;
        public readonly string HdMonitorStatus;
        /// <summary>
        /// ID of the EIP.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the instance that is being bound.
        /// </summary>
        public readonly string InstanceId;
        public readonly string InstanceRegionId;
        /// <summary>
        /// The instance type of that the EIP is bound.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// EIP internet charge type.
        /// </summary>
        public readonly string InternetChargeType;
        /// <summary>
        /// Public IP Address of the the EIP.
        /// </summary>
        public readonly string IpAddress;
        public readonly string Isp;
        public readonly ImmutableArray<string> OperationLocks;
        public readonly string PaymentType;
        public readonly string ReservationActiveTime;
        public readonly string ReservationBandwidth;
        public readonly string ReservationInternetChargeType;
        public readonly string ReservationOrderType;
        /// <summary>
        /// The Id of resource group which the eips belongs.
        /// </summary>
        public readonly string ResourceGroupId;
        public readonly bool SecondLimited;
        public readonly string SegmentInstanceId;
        /// <summary>
        /// EIP status. Possible values are: `Associating`, `Unassociating`, `InUse` and `Available`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetEipsAddressResult(
            string addressName,

            string allocationId,

            ImmutableArray<string> availableRegions,

            string bandwidth,

            string bandwidthPackageBandwidth,

            string bandwidthPackageId,

            string bandwidthPackageType,

            string createTime,

            bool deletionProtection,

            string description,

            string expiredTime,

            string hasReservationData,

            string hdMonitorStatus,

            string id,

            string instanceId,

            string instanceRegionId,

            string instanceType,

            string internetChargeType,

            string ipAddress,

            string isp,

            ImmutableArray<string> operationLocks,

            string paymentType,

            string reservationActiveTime,

            string reservationBandwidth,

            string reservationInternetChargeType,

            string reservationOrderType,

            string resourceGroupId,

            bool secondLimited,

            string segmentInstanceId,

            string status,

            ImmutableDictionary<string, string> tags)
        {
            AddressName = addressName;
            AllocationId = allocationId;
            AvailableRegions = availableRegions;
            Bandwidth = bandwidth;
            BandwidthPackageBandwidth = bandwidthPackageBandwidth;
            BandwidthPackageId = bandwidthPackageId;
            BandwidthPackageType = bandwidthPackageType;
            CreateTime = createTime;
            DeletionProtection = deletionProtection;
            Description = description;
            ExpiredTime = expiredTime;
            HasReservationData = hasReservationData;
            HdMonitorStatus = hdMonitorStatus;
            Id = id;
            InstanceId = instanceId;
            InstanceRegionId = instanceRegionId;
            InstanceType = instanceType;
            InternetChargeType = internetChargeType;
            IpAddress = ipAddress;
            Isp = isp;
            OperationLocks = operationLocks;
            PaymentType = paymentType;
            ReservationActiveTime = reservationActiveTime;
            ReservationBandwidth = reservationBandwidth;
            ReservationInternetChargeType = reservationInternetChargeType;
            ReservationOrderType = reservationOrderType;
            ResourceGroupId = resourceGroupId;
            SecondLimited = secondLimited;
            SegmentInstanceId = segmentInstanceId;
            Status = status;
            Tags = tags;
        }
    }
}
