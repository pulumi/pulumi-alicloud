// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs.Outputs
{

    [OutputType]
    public sealed class GetEcsSnapshotsSnapshotResult
    {
        /// <summary>
        /// The category of the snapshot. Valid Values: `Flash` and `Standard`.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The time when the snapshot was created.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The description of the snapshot.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the source disk.
        /// </summary>
        public readonly string DiskId;
        /// <summary>
        /// Specifies whether the snapshot is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// The ID of the Snapshot.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the instant access feature is enabled.
        /// </summary>
        public readonly bool InstantAccess;
        /// <summary>
        /// Indicates the validity period of the instant access feature.
        /// </summary>
        public readonly int InstantAccessRetentionDays;
        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The product code of the Alibaba Cloud Marketplace image.
        /// </summary>
        public readonly string ProductCode;
        /// <summary>
        /// The progress of the snapshot creation task.
        /// </summary>
        public readonly string Progress;
        /// <summary>
        /// The amount of remaining time required to create the snapshot.
        /// </summary>
        public readonly int RemainTime;
        /// <summary>
        /// The resource group id.
        /// </summary>
        public readonly string ResourceGroupId;
        /// <summary>
        /// The retention period of the automatic snapshot.
        /// </summary>
        public readonly int RetentionDays;
        /// <summary>
        /// The ID of the snapshot.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        public readonly string SnapshotName;
        /// <summary>
        /// The serial number of the snapshot.
        /// </summary>
        public readonly string SnapshotSn;
        /// <summary>
        /// The type of the snapshot. Valid Values: `Auto`, `User` and `All`. Default to: `All`.
        /// </summary>
        public readonly string SnapshotType;
        /// <summary>
        /// The ID of the source disk.
        /// </summary>
        public readonly string SourceDiskId;
        /// <summary>
        /// The capacity of the source disk.
        /// </summary>
        public readonly string SourceDiskSize;
        /// <summary>
        /// The type of the disk for which the snapshot was created. Valid Values: `System`, `Data`.
        /// </summary>
        public readonly string SourceDiskType;
        /// <summary>
        /// The category of the source disk.
        /// </summary>
        public readonly string SourceStorageType;
        /// <summary>
        /// The status of the snapshot. Valid Values: `Accomplished`, `Failed`, `Progressing` and `All`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A mapping of tags to assign to the snapshot.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of the snapshot. Valid Values: `Auto`, `User` and `All`. Default to: `All`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A resource type that has a reference relationship. Valid Values: `Image`, `Disk`, `ImageDisk` and `None`.
        /// </summary>
        public readonly string Usage;

        [OutputConstructor]
        private GetEcsSnapshotsSnapshotResult(
            string category,

            string creationTime,

            string description,

            string diskId,

            bool encrypted,

            string id,

            bool instantAccess,

            int instantAccessRetentionDays,

            string name,

            string productCode,

            string progress,

            int remainTime,

            string resourceGroupId,

            int retentionDays,

            string snapshotId,

            string snapshotName,

            string snapshotSn,

            string snapshotType,

            string sourceDiskId,

            string sourceDiskSize,

            string sourceDiskType,

            string sourceStorageType,

            string status,

            ImmutableDictionary<string, string> tags,

            string type,

            string usage)
        {
            Category = category;
            CreationTime = creationTime;
            Description = description;
            DiskId = diskId;
            Encrypted = encrypted;
            Id = id;
            InstantAccess = instantAccess;
            InstantAccessRetentionDays = instantAccessRetentionDays;
            Name = name;
            ProductCode = productCode;
            Progress = progress;
            RemainTime = remainTime;
            ResourceGroupId = resourceGroupId;
            RetentionDays = retentionDays;
            SnapshotId = snapshotId;
            SnapshotName = snapshotName;
            SnapshotSn = snapshotSn;
            SnapshotType = snapshotType;
            SourceDiskId = sourceDiskId;
            SourceDiskSize = sourceDiskSize;
            SourceDiskType = sourceDiskType;
            SourceStorageType = sourceStorageType;
            Status = status;
            Tags = tags;
            Type = type;
            Usage = usage;
        }
    }
}
