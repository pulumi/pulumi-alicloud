// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs.Outputs
{

    [OutputType]
    public sealed class GetEcsInvocationsInvocationInvokeInstanceResult
    {
        /// <summary>
        /// The start time of the execution.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The size of truncated and discarded text when the value of the Output response parameter exceeds 24 KB in size.
        /// </summary>
        public readonly int Dropped;
        public readonly string ErrorCode;
        /// <summary>
        /// Details about the reason why the command failed to be sent or run.
        /// </summary>
        public readonly string ErrorInfo;
        /// <summary>
        /// The exit code of the execution.
        /// </summary>
        public readonly int ExitCode;
        /// <summary>
        /// The end time of the execution.
        /// </summary>
        public readonly string FinishTime;
        /// <summary>
        /// The ID of the instance.
        /// </summary>
        public readonly string InstanceId;
        public readonly string InstanceInvokeStatus;
        /// <summary>
        /// The execution state on a single instance. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopping`, `Stopped`, `PartialFailed`.
        /// </summary>
        public readonly string InvocationStatus;
        /// <summary>
        /// The output of the command.
        /// </summary>
        public readonly string Output;
        /// <summary>
        /// The number of times that the command is run on the instance.
        /// </summary>
        public readonly int Repeats;
        /// <summary>
        /// The time when the command started to be run on the instance.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The time when the command stopped being run on the instance. If you call the StopInvocation operation to manually stop the execution, the value is the time when you call the operation.
        /// </summary>
        public readonly string StopTime;
        /// <summary>
        /// Indicates whether the commands are to be automatically run.
        /// * `error_code	` - The code that indicates why the command failed to be sent or run.
        /// * `instance_invoke_status	` - **Note:** We recommend that you ignore this parameter and check the value of the `invocation_status` response parameter for the overall execution state.
        /// </summary>
        public readonly bool Timed;
        /// <summary>
        /// The time when the execution state was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetEcsInvocationsInvocationInvokeInstanceResult(
            string creationTime,

            int dropped,

            string errorCode,

            string errorInfo,

            int exitCode,

            string finishTime,

            string instanceId,

            string instanceInvokeStatus,

            string invocationStatus,

            string output,

            int repeats,

            string startTime,

            string stopTime,

            bool timed,

            string updateTime)
        {
            CreationTime = creationTime;
            Dropped = dropped;
            ErrorCode = errorCode;
            ErrorInfo = errorInfo;
            ExitCode = exitCode;
            FinishTime = finishTime;
            InstanceId = instanceId;
            InstanceInvokeStatus = instanceInvokeStatus;
            InvocationStatus = invocationStatus;
            Output = output;
            Repeats = repeats;
            StartTime = startTime;
            StopTime = stopTime;
            Timed = timed;
            UpdateTime = updateTime;
        }
    }
}
