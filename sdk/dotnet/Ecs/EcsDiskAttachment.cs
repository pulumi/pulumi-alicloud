// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    /// <summary>
    /// Provides an Alicloud ECS Disk Attachment as a resource, to attach and detach disks from ECS Instances.
    /// 
    /// For information about ECS Disk Attachment and how to use it, see [What is Disk Attachment](https://www.alibabacloud.com/help/en/doc-detail/25515.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.122.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var defaultZones = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "Instance",
    ///     });
    /// 
    ///     var defaultInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         InstanceTypeFamily = "ecs.sn1ne",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("defaultNetwork", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "10.4.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("defaultSwitch", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "10.4.0.0/24",
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("defaultSecurityGroup", new()
    ///     {
    ///         Description = "New security group",
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultImages = AliCloud.Ecs.GetImages.Invoke(new()
    ///     {
    ///         NameRegex = "^ubuntu_[0-9]+_[0-9]+_x64*",
    ///         MostRecent = true,
    ///         Owners = "system",
    ///     });
    /// 
    ///     var defaultInstance = new AliCloud.Ecs.Instance("defaultInstance", new()
    ///     {
    ///         AvailabilityZone = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         InstanceName = name,
    ///         HostName = name,
    ///         ImageId = defaultImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
    ///         InstanceType = defaultInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
    ///         SecurityGroups = new[]
    ///         {
    ///             defaultSecurityGroup.Id,
    ///         },
    ///         VswitchId = defaultSwitch.Id,
    ///     });
    /// 
    ///     var disk = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultEcsDisk = new AliCloud.Ecs.EcsDisk("defaultEcsDisk", new()
    ///     {
    ///         ZoneId = disk.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         Category = "cloud_efficiency",
    ///         DeleteAutoSnapshot = true,
    ///         Description = "Test For Terraform",
    ///         DiskName = name,
    ///         EnableAutoSnapshot = true,
    ///         Encrypted = true,
    ///         Size = 500,
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///             { "Environment", "Acceptance-test" },
    ///         },
    ///     });
    /// 
    ///     var defaultEcsDiskAttachment = new AliCloud.Ecs.EcsDiskAttachment("defaultEcsDiskAttachment", new()
    ///     {
    ///         DiskId = defaultEcsDisk.Id,
    ///         InstanceId = defaultInstance.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The disk attachment can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment example d-abc12345678:i-abc12355
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment")]
    public partial class EcsDiskAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to mount as a system disk. Default to: `false`.
        /// </summary>
        [Output("bootable")]
        public Output<bool?> Bootable { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the disk is released together with the instance. Default to: `false`.
        /// </summary>
        [Output("deleteWithInstance")]
        public Output<bool?> DeleteWithInstance { get; private set; } = null!;

        /// <summary>
        /// The name of the cloud disk device.
        /// </summary>
        [Output("device")]
        public Output<string> Device { get; private set; } = null!;

        /// <summary>
        /// ID of the Disk to be attached.
        /// </summary>
        [Output("diskId")]
        public Output<string> DiskId { get; private set; } = null!;

        /// <summary>
        /// ID of the Instance to attach to.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of key pair
        /// </summary>
        [Output("keyPairName")]
        public Output<string?> KeyPairName { get; private set; } = null!;

        /// <summary>
        /// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;


        /// <summary>
        /// Create a EcsDiskAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EcsDiskAttachment(string name, EcsDiskAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment", name, args ?? new EcsDiskAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EcsDiskAttachment(string name, Input<string> id, EcsDiskAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EcsDiskAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EcsDiskAttachment Get(string name, Input<string> id, EcsDiskAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new EcsDiskAttachment(name, id, state, options);
        }
    }

    public sealed class EcsDiskAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to mount as a system disk. Default to: `false`.
        /// </summary>
        [Input("bootable")]
        public Input<bool>? Bootable { get; set; }

        /// <summary>
        /// Indicates whether the disk is released together with the instance. Default to: `false`.
        /// </summary>
        [Input("deleteWithInstance")]
        public Input<bool>? DeleteWithInstance { get; set; }

        /// <summary>
        /// ID of the Disk to be attached.
        /// </summary>
        [Input("diskId", required: true)]
        public Input<string> DiskId { get; set; } = null!;

        /// <summary>
        /// ID of the Instance to attach to.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of key pair
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        public EcsDiskAttachmentArgs()
        {
        }
        public static new EcsDiskAttachmentArgs Empty => new EcsDiskAttachmentArgs();
    }

    public sealed class EcsDiskAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to mount as a system disk. Default to: `false`.
        /// </summary>
        [Input("bootable")]
        public Input<bool>? Bootable { get; set; }

        /// <summary>
        /// Indicates whether the disk is released together with the instance. Default to: `false`.
        /// </summary>
        [Input("deleteWithInstance")]
        public Input<bool>? DeleteWithInstance { get; set; }

        /// <summary>
        /// The name of the cloud disk device.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// ID of the Disk to be attached.
        /// </summary>
        [Input("diskId")]
        public Input<string>? DiskId { get; set; }

        /// <summary>
        /// ID of the Instance to attach to.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of key pair
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        public EcsDiskAttachmentState()
        {
        }
        public static new EcsDiskAttachmentState Empty => new EcsDiskAttachmentState();
    }
}
