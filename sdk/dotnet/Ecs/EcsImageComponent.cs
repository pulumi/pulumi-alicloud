// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ecs
{
    /// <summary>
    /// Provides a ECS Image Component resource.
    /// 
    /// For information about ECS Image Component and how to use it, see [What is Image Component](https://www.alibabacloud.com/help/en/doc-detail/200424.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.159.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke(new()
    ///     {
    ///         NameRegex = "default",
    ///     });
    /// 
    ///     var example = new AliCloud.Ecs.EcsImageComponent("example", new()
    ///     {
    ///         ComponentType = "Build",
    ///         Content = "RUN yum update -y",
    ///         Description = "example_value",
    ///         ImageComponentName = "example_value",
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id)),
    ///         SystemType = "Linux",
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS Image Component can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ecs/ecsImageComponent:EcsImageComponent example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ecs/ecsImageComponent:EcsImageComponent")]
    public partial class EcsImageComponent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The component type. Supports mirrored build components and test components.
        /// 
        /// Value range:
        /// - Build
        /// - Test
        /// 
        /// Default value: Build.
        /// 
        /// &gt; **NOTE:**  Build components can only be used in build templates and test components can only be used in test templates.
        /// </summary>
        [Output("componentType")]
        public Output<string> ComponentType { get; private set; } = null!;

        /// <summary>
        /// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
        /// 
        /// Default value:(x +1).0.0, where x is the maximum major version of the current component.
        /// </summary>
        [Output("componentVersion")]
        public Output<string> ComponentVersion { get; private set; } = null!;

        /// <summary>
        /// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// Component creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
        /// 
        /// &gt; **NOTE:**  When 'Name' is not set, the 'ImageComponentId' return value is used by default.
        /// </summary>
        [Output("imageComponentName")]
        public Output<string> ImageComponentName { get; private set; } = null!;

        /// <summary>
        /// The ID of the enterprise resource group to which the created image component belongs.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The operating system supported by the component.
        /// 
        /// Value range:
        /// - Linux
        /// - Windows
        /// 
        /// Default value: Linux.
        /// </summary>
        [Output("systemType")]
        public Output<string> SystemType { get; private set; } = null!;

        /// <summary>
        /// List of label key-value pairs.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a EcsImageComponent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EcsImageComponent(string name, EcsImageComponentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ecs/ecsImageComponent:EcsImageComponent", name, args ?? new EcsImageComponentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EcsImageComponent(string name, Input<string> id, EcsImageComponentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ecs/ecsImageComponent:EcsImageComponent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EcsImageComponent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EcsImageComponent Get(string name, Input<string> id, EcsImageComponentState? state = null, CustomResourceOptions? options = null)
        {
            return new EcsImageComponent(name, id, state, options);
        }
    }

    public sealed class EcsImageComponentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The component type. Supports mirrored build components and test components.
        /// 
        /// Value range:
        /// - Build
        /// - Test
        /// 
        /// Default value: Build.
        /// 
        /// &gt; **NOTE:**  Build components can only be used in build templates and test components can only be used in test templates.
        /// </summary>
        [Input("componentType")]
        public Input<string>? ComponentType { get; set; }

        /// <summary>
        /// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
        /// 
        /// Default value:(x +1).0.0, where x is the maximum major version of the current component.
        /// </summary>
        [Input("componentVersion")]
        public Input<string>? ComponentVersion { get; set; }

        /// <summary>
        /// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
        /// 
        /// &gt; **NOTE:**  When 'Name' is not set, the 'ImageComponentId' return value is used by default.
        /// </summary>
        [Input("imageComponentName")]
        public Input<string>? ImageComponentName { get; set; }

        /// <summary>
        /// The ID of the enterprise resource group to which the created image component belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The operating system supported by the component.
        /// 
        /// Value range:
        /// - Linux
        /// - Windows
        /// 
        /// Default value: Linux.
        /// </summary>
        [Input("systemType")]
        public Input<string>? SystemType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// List of label key-value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EcsImageComponentArgs()
        {
        }
        public static new EcsImageComponentArgs Empty => new EcsImageComponentArgs();
    }

    public sealed class EcsImageComponentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The component type. Supports mirrored build components and test components.
        /// 
        /// Value range:
        /// - Build
        /// - Test
        /// 
        /// Default value: Build.
        /// 
        /// &gt; **NOTE:**  Build components can only be used in build templates and test components can only be used in test templates.
        /// </summary>
        [Input("componentType")]
        public Input<string>? ComponentType { get; set; }

        /// <summary>
        /// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
        /// 
        /// Default value:(x +1).0.0, where x is the maximum major version of the current component.
        /// </summary>
        [Input("componentVersion")]
        public Input<string>? ComponentVersion { get; set; }

        /// <summary>
        /// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Component creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
        /// 
        /// &gt; **NOTE:**  When 'Name' is not set, the 'ImageComponentId' return value is used by default.
        /// </summary>
        [Input("imageComponentName")]
        public Input<string>? ImageComponentName { get; set; }

        /// <summary>
        /// The ID of the enterprise resource group to which the created image component belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The operating system supported by the component.
        /// 
        /// Value range:
        /// - Linux
        /// - Windows
        /// 
        /// Default value: Linux.
        /// </summary>
        [Input("systemType")]
        public Input<string>? SystemType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// List of label key-value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EcsImageComponentState()
        {
        }
        public static new EcsImageComponentState Empty => new EcsImageComponentState();
    }
}
