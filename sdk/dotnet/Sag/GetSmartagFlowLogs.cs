// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sag
{
    public static class GetSmartagFlowLogs
    {
        /// <summary>
        /// This data source provides the Smartag Flow Logs of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.168.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ids = AliCloud.Sag.GetSmartagFlowLogs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "example_id",
        ///         },
        ///     });
        /// 
        ///     var nameRegex = AliCloud.Sag.GetSmartagFlowLogs.Invoke(new()
        ///     {
        ///         NameRegex = "^my-FlowLog",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["smartagFlowLogId1"] = ids.Apply(getSmartagFlowLogsResult =&gt; getSmartagFlowLogsResult.Logs[0]?.Id),
        ///         ["smartagFlowLogId2"] = nameRegex.Apply(getSmartagFlowLogsResult =&gt; getSmartagFlowLogsResult.Logs[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSmartagFlowLogsResult> InvokeAsync(GetSmartagFlowLogsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSmartagFlowLogsResult>("alicloud:sag/getSmartagFlowLogs:getSmartagFlowLogs", args ?? new GetSmartagFlowLogsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Smartag Flow Logs of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.168.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ids = AliCloud.Sag.GetSmartagFlowLogs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "example_id",
        ///         },
        ///     });
        /// 
        ///     var nameRegex = AliCloud.Sag.GetSmartagFlowLogs.Invoke(new()
        ///     {
        ///         NameRegex = "^my-FlowLog",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["smartagFlowLogId1"] = ids.Apply(getSmartagFlowLogsResult =&gt; getSmartagFlowLogsResult.Logs[0]?.Id),
        ///         ["smartagFlowLogId2"] = nameRegex.Apply(getSmartagFlowLogsResult =&gt; getSmartagFlowLogsResult.Logs[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSmartagFlowLogsResult> Invoke(GetSmartagFlowLogsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSmartagFlowLogsResult>("alicloud:sag/getSmartagFlowLogs:getSmartagFlowLogs", args ?? new GetSmartagFlowLogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSmartagFlowLogsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the flow log.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Flow Log IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Flow Log name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        [Input("pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetSmartagFlowLogsArgs()
        {
        }
        public static new GetSmartagFlowLogsArgs Empty => new GetSmartagFlowLogsArgs();
    }

    public sealed class GetSmartagFlowLogsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the flow log.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Flow Log IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Flow Log name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetSmartagFlowLogsInvokeArgs()
        {
        }
        public static new GetSmartagFlowLogsInvokeArgs Empty => new GetSmartagFlowLogsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSmartagFlowLogsResult
    {
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<Outputs.GetSmartagFlowLogsLogResult> Logs;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;
        public readonly string? Status;

        [OutputConstructor]
        private GetSmartagFlowLogsResult(
            string? description,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetSmartagFlowLogsLogResult> logs,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            int? pageNumber,

            int? pageSize,

            string? status)
        {
            Description = description;
            Id = id;
            Ids = ids;
            Logs = logs;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            Status = status;
        }
    }
}
