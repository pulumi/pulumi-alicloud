// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.RocketMQ
{
    /// <summary>
    /// Provides a RocketMQ Topic resource.
    /// 
    /// For information about RocketMQ Topic and how to use it, see [What is Topic](https://www.alibabacloud.com/help/en/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/developer-reference/api-rocketmq-2022-08-01-createtopic).
    /// 
    /// &gt; **NOTE:** Available since v1.211.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var createVpc = new AliCloud.Vpc.Network("createVpc", new()
    ///     {
    ///         Description = "example",
    ///         CidrBlock = "172.16.0.0/12",
    ///         VpcName = name,
    ///     });
    /// 
    ///     var createVswitch = new AliCloud.Vpc.Switch("createVswitch", new()
    ///     {
    ///         Description = "example",
    ///         VpcId = createVpc.Id,
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         CidrBlock = "172.16.0.0/24",
    ///         VswitchName = name,
    ///     });
    /// 
    ///     var createInstance = new AliCloud.RocketMQ.RocketMQInstance("createInstance", new()
    ///     {
    ///         ProductInfo = new AliCloud.RocketMQ.Inputs.RocketMQInstanceProductInfoArgs
    ///         {
    ///             MsgProcessSpec = "rmq.u2.10xlarge",
    ///             SendReceiveRatio = 0.3,
    ///             MessageRetentionTime = 70,
    ///         },
    ///         ServiceCode = "rmq",
    ///         PaymentType = "PayAsYouGo",
    ///         InstanceName = name,
    ///         SubSeriesCode = "cluster_ha",
    ///         Remark = "example",
    ///         IpWhitelists = new[]
    ///         {
    ///             "192.168.0.0/16",
    ///             "10.10.0.0/16",
    ///             "172.168.0.0/16",
    ///         },
    ///         Software = new AliCloud.RocketMQ.Inputs.RocketMQInstanceSoftwareArgs
    ///         {
    ///             MaintainTime = "02:00-06:00",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///             { "For", "example" },
    ///         },
    ///         SeriesCode = "ultimate",
    ///         NetworkInfo = new AliCloud.RocketMQ.Inputs.RocketMQInstanceNetworkInfoArgs
    ///         {
    ///             VpcInfo = new AliCloud.RocketMQ.Inputs.RocketMQInstanceNetworkInfoVpcInfoArgs
    ///             {
    ///                 VpcId = createVpc.Id,
    ///                 Vswitches = new[]
    ///                 {
    ///                     new AliCloud.RocketMQ.Inputs.RocketMQInstanceNetworkInfoVpcInfoVswitchArgs
    ///                     {
    ///                         VswitchId = createVswitch.Id,
    ///                     },
    ///                 },
    ///             },
    ///             InternetInfo = new AliCloud.RocketMQ.Inputs.RocketMQInstanceNetworkInfoInternetInfoArgs
    ///             {
    ///                 InternetSpec = "enable",
    ///                 FlowOutType = "payByBandwidth",
    ///                 FlowOutBandwidth = 30,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultRocketMQTopic = new AliCloud.RocketMQ.RocketMQTopic("default", new()
    ///     {
    ///         Remark = "example",
    ///         InstanceId = createInstance.Id,
    ///         MessageType = "NORMAL",
    ///         TopicName = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RocketMQ Topic can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:rocketmq/rocketMQTopic:RocketMQTopic example &lt;instance_id&gt;:&lt;topic_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:rocketmq/rocketMQTopic:RocketMQTopic")]
    public partial class RocketMQTopic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The maximum TPS for message sending.
        /// </summary>
        [Output("maxSendTps")]
        public Output<int?> MaxSendTps { get; private set; } = null!;

        /// <summary>
        /// Message type.
        /// </summary>
        [Output("messageType")]
        public Output<string?> MessageType { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.247.0) The region ID to which the instance belongs.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Custom remarks.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Topic name and identification.
        /// </summary>
        [Output("topicName")]
        public Output<string> TopicName { get; private set; } = null!;


        /// <summary>
        /// Create a RocketMQTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocketMQTopic(string name, RocketMQTopicArgs args, CustomResourceOptions? options = null)
            : base("alicloud:rocketmq/rocketMQTopic:RocketMQTopic", name, args ?? new RocketMQTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocketMQTopic(string name, Input<string> id, RocketMQTopicState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:rocketmq/rocketMQTopic:RocketMQTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocketMQTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocketMQTopic Get(string name, Input<string> id, RocketMQTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new RocketMQTopic(name, id, state, options);
        }
    }

    public sealed class RocketMQTopicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The maximum TPS for message sending.
        /// </summary>
        [Input("maxSendTps")]
        public Input<int>? MaxSendTps { get; set; }

        /// <summary>
        /// Message type.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// Custom remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Topic name and identification.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public RocketMQTopicArgs()
        {
        }
        public static new RocketMQTopicArgs Empty => new RocketMQTopicArgs();
    }

    public sealed class RocketMQTopicState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The maximum TPS for message sending.
        /// </summary>
        [Input("maxSendTps")]
        public Input<int>? MaxSendTps { get; set; }

        /// <summary>
        /// Message type.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// (Available since v1.247.0) The region ID to which the instance belongs.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Custom remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Topic name and identification.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public RocketMQTopicState()
        {
        }
        public static new RocketMQTopicState Empty => new RocketMQTopicState();
    }
}
