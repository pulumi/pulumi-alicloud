// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Hbr
{
    /// <summary>
    /// Provides a Hybrid Backup Recovery (HBR) Cross Account resource.
    /// 
    /// The cross account is used for the cross-account backup in the Cloud Backup. The management account can back up the resources under the cross account.
    /// 
    /// For information about Hybrid Backup Recovery (HBR) Cross Account and how to use it, see [What is Cross Account](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.241.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new AliCloud.Hbr.CrossAccount("default", new()
    ///     {
    ///         CrossAccountUserId = 1,
    ///         CrossAccountRoleName = name,
    ///         Alias = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Hybrid Backup Recovery (HBR) Cross Account can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:hbr/crossAccount:CrossAccount example &lt;cross_account_user_id&gt;:&lt;cross_account_role_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:hbr/crossAccount:CrossAccount")]
    public partial class CrossAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Backup account alias
        /// </summary>
        [Output("alias")]
        public Output<string?> Alias { get; private set; } = null!;

        /// <summary>
        /// Timestamp of the creation time
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of RAM role that the backup account authorizes the management account to manage its resources
        /// </summary>
        [Output("crossAccountRoleName")]
        public Output<string> CrossAccountRoleName { get; private set; } = null!;

        /// <summary>
        /// The uid of the backup account.
        /// </summary>
        [Output("crossAccountUserId")]
        public Output<int> CrossAccountUserId { get; private set; } = null!;


        /// <summary>
        /// Create a CrossAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CrossAccount(string name, CrossAccountArgs args, CustomResourceOptions? options = null)
            : base("alicloud:hbr/crossAccount:CrossAccount", name, args ?? new CrossAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CrossAccount(string name, Input<string> id, CrossAccountState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:hbr/crossAccount:CrossAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CrossAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CrossAccount Get(string name, Input<string> id, CrossAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new CrossAccount(name, id, state, options);
        }
    }

    public sealed class CrossAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup account alias
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// The name of RAM role that the backup account authorizes the management account to manage its resources
        /// </summary>
        [Input("crossAccountRoleName", required: true)]
        public Input<string> CrossAccountRoleName { get; set; } = null!;

        /// <summary>
        /// The uid of the backup account.
        /// </summary>
        [Input("crossAccountUserId", required: true)]
        public Input<int> CrossAccountUserId { get; set; } = null!;

        public CrossAccountArgs()
        {
        }
        public static new CrossAccountArgs Empty => new CrossAccountArgs();
    }

    public sealed class CrossAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup account alias
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Timestamp of the creation time
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// The name of RAM role that the backup account authorizes the management account to manage its resources
        /// </summary>
        [Input("crossAccountRoleName")]
        public Input<string>? CrossAccountRoleName { get; set; }

        /// <summary>
        /// The uid of the backup account.
        /// </summary>
        [Input("crossAccountUserId")]
        public Input<int>? CrossAccountUserId { get; set; }

        public CrossAccountState()
        {
        }
        public static new CrossAccountState Empty => new CrossAccountState();
    }
}
