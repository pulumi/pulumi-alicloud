// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ExpressConnect.Outputs
{

    [OutputType]
    public sealed class GetRouterInterfacesInterfaceResult
    {
        /// <summary>
        /// The access point ID to which the VBR belongs.
        /// </summary>
        public readonly string AccessPointId;
        /// <summary>
        /// The bandwidth of the resource.
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// The businessStatus of the resource. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
        /// </summary>
        public readonly string BusinessStatus;
        /// <summary>
        /// The connected time of the resource.
        /// </summary>
        public readonly string ConnectedTime;
        /// <summary>
        /// The creation time of the resource
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The cross border of the resource.
        /// </summary>
        public readonly bool CrossBorder;
        /// <summary>
        /// The description of the router interface.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The end time of the resource.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// The has reservation data of the resource.
        /// </summary>
        public readonly string HasReservationData;
        /// <summary>
        /// The hc rate of the resource.
        /// </summary>
        public readonly int HcRate;
        /// <summary>
        /// The hc threshold of the resource.
        /// </summary>
        public readonly string HcThreshold;
        /// <summary>
        /// The health check source IP address, must be an unused IP within the local VPC.
        /// </summary>
        public readonly string HealthCheckSourceIp;
        /// <summary>
        /// The IP address for health screening purposes.
        /// </summary>
        public readonly string HealthCheckTargetIp;
        public readonly string Id;
        /// <summary>
        /// The Access point ID to which the other end belongs.
        /// </summary>
        public readonly string OppositeAccessPointId;
        /// <summary>
        /// The opposite bandwidth of the router on the other side.
        /// </summary>
        public readonly int OppositeBandwidth;
        /// <summary>
        /// The opposite interface business status of the router on the other side. Valid Values: `Normal`, `FinancialLocked`, `SecurityLocked`.
        /// </summary>
        public readonly string OppositeInterfaceBusinessStatus;
        /// <summary>
        /// The Interface ID of the router at the other end.
        /// </summary>
        public readonly string OppositeInterfaceId;
        /// <summary>
        /// The AliCloud account ID of the owner of the router interface on the other end.
        /// </summary>
        public readonly string OppositeInterfaceOwnerId;
        /// <summary>
        /// The opposite interface spec of the router on the other side. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
        /// </summary>
        public readonly string OppositeInterfaceSpec;
        /// <summary>
        /// The opposite interface status of the router on the other side. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
        /// </summary>
        public readonly string OppositeInterfaceStatus;
        /// <summary>
        /// The geographical ID of the location of the receiving end of the connection.
        /// </summary>
        public readonly string OppositeRegionId;
        /// <summary>
        /// The id of the router at the other end.
        /// </summary>
        public readonly string OppositeRouterId;
        /// <summary>
        /// The opposite router type of the router on the other side. Valid Values: `VRouter`, `VBR`.
        /// </summary>
        public readonly string OppositeRouterType;
        /// <summary>
        /// The opposite vpc instance id of the router on the other side.
        /// </summary>
        public readonly string OppositeVpcInstanceId;
        /// <summary>
        /// The payment methods for router interfaces. Valid Values: `PrePaid`, `PostPaid`.
        /// </summary>
        public readonly string PaymentType;
        /// <summary>
        /// The reservation active time of the resource.
        /// </summary>
        public readonly string ReservationActiveTime;
        /// <summary>
        /// The reservation bandwidth of the resource.
        /// </summary>
        public readonly string ReservationBandwidth;
        /// <summary>
        /// The reservation internet charge type of the resource.
        /// </summary>
        public readonly string ReservationInternetChargeType;
        /// <summary>
        /// The reservation order type of the resource.
        /// </summary>
        public readonly string ReservationOrderType;
        /// <summary>
        /// The role of the router interface. Valid Values: `InitiatingSide`, `AcceptingSide`.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The router id associated with the router interface.
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        public readonly string RouterInterfaceId;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string RouterInterfaceName;
        /// <summary>
        /// The type of router associated with the router interface. Valid Values: `VRouter`, `VBR`.
        /// </summary>
        public readonly string RouterType;
        /// <summary>
        /// The specification of the router interface. Valid Values: `Mini.2`, `Mini.5`, `Mini.5`, `Small.2`, `Small.5`, `Middle.1`, `Middle.2`, `Middle.5`, `Large.1`, `Large.2`, `Large.5`, `XLarge.1`, `Negative`.
        /// </summary>
        public readonly string Spec;
        /// <summary>
        /// The status of the resource. Valid Values: `Idle`, `AcceptingConnecting`, `Connecting`, `Activating`, `Active`, `Modifying`, `Deactivating`, `Inactive`, `Deleting`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The vpc instance id of the resource.
        /// </summary>
        public readonly string VpcInstanceId;

        [OutputConstructor]
        private GetRouterInterfacesInterfaceResult(
            string accessPointId,

            int bandwidth,

            string businessStatus,

            string connectedTime,

            string createTime,

            bool crossBorder,

            string description,

            string endTime,

            string hasReservationData,

            int hcRate,

            string hcThreshold,

            string healthCheckSourceIp,

            string healthCheckTargetIp,

            string id,

            string oppositeAccessPointId,

            int oppositeBandwidth,

            string oppositeInterfaceBusinessStatus,

            string oppositeInterfaceId,

            string oppositeInterfaceOwnerId,

            string oppositeInterfaceSpec,

            string oppositeInterfaceStatus,

            string oppositeRegionId,

            string oppositeRouterId,

            string oppositeRouterType,

            string oppositeVpcInstanceId,

            string paymentType,

            string reservationActiveTime,

            string reservationBandwidth,

            string reservationInternetChargeType,

            string reservationOrderType,

            string role,

            string routerId,

            string routerInterfaceId,

            string routerInterfaceName,

            string routerType,

            string spec,

            string status,

            string vpcInstanceId)
        {
            AccessPointId = accessPointId;
            Bandwidth = bandwidth;
            BusinessStatus = businessStatus;
            ConnectedTime = connectedTime;
            CreateTime = createTime;
            CrossBorder = crossBorder;
            Description = description;
            EndTime = endTime;
            HasReservationData = hasReservationData;
            HcRate = hcRate;
            HcThreshold = hcThreshold;
            HealthCheckSourceIp = healthCheckSourceIp;
            HealthCheckTargetIp = healthCheckTargetIp;
            Id = id;
            OppositeAccessPointId = oppositeAccessPointId;
            OppositeBandwidth = oppositeBandwidth;
            OppositeInterfaceBusinessStatus = oppositeInterfaceBusinessStatus;
            OppositeInterfaceId = oppositeInterfaceId;
            OppositeInterfaceOwnerId = oppositeInterfaceOwnerId;
            OppositeInterfaceSpec = oppositeInterfaceSpec;
            OppositeInterfaceStatus = oppositeInterfaceStatus;
            OppositeRegionId = oppositeRegionId;
            OppositeRouterId = oppositeRouterId;
            OppositeRouterType = oppositeRouterType;
            OppositeVpcInstanceId = oppositeVpcInstanceId;
            PaymentType = paymentType;
            ReservationActiveTime = reservationActiveTime;
            ReservationBandwidth = reservationBandwidth;
            ReservationInternetChargeType = reservationInternetChargeType;
            ReservationOrderType = reservationOrderType;
            Role = role;
            RouterId = routerId;
            RouterInterfaceId = routerInterfaceId;
            RouterInterfaceName = routerInterfaceName;
            RouterType = routerType;
            Spec = spec;
            Status = status;
            VpcInstanceId = vpcInstanceId;
        }
    }
}
