// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Rds
{
    /// <summary>
    /// Provide RDS cluster instance to increase node resources.
    /// &gt; **NOTE:** Available in 1.202.0+.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-testaccrdsdbnodes";
    ///     var defaultZones = AliCloud.Rds.GetZones.Invoke(new()
    ///     {
    ///         Engine = "MySQL",
    ///         EngineVersion = "8.0",
    ///         InstanceChargeType = "PostPaid",
    ///         Category = "cluster",
    ///         DbInstanceStorageType = "cloud_essd",
    ///     });
    /// 
    ///     var defaultInstanceClasses = AliCloud.Rds.GetInstanceClasses.Invoke(new()
    ///     {
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         Engine = "MySQL",
    ///         EngineVersion = "8.0",
    ///         Category = "cluster",
    ///         DbInstanceStorageType = "cloud_essd",
    ///         InstanceChargeType = "PostPaid",
    ///     });
    /// 
    ///     var defaultNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "^default-NODELETING$",
    ///     });
    /// 
    ///     var defaultSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Ids[0]),
    ///     });
    /// 
    ///     var defaultInstance = new AliCloud.Rds.Instance("defaultInstance", new()
    ///     {
    ///         Engine = "MySQL",
    ///         EngineVersion = "8.0",
    ///         DbInstanceStorageType = "cloud_essd",
    ///         InstanceType = defaultInstanceClasses.Apply(getInstanceClassesResult =&gt; getInstanceClassesResult.InstanceClasses[0]?.InstanceClass),
    ///         InstanceStorage = defaultInstanceClasses.Apply(getInstanceClassesResult =&gt; getInstanceClassesResult.InstanceClasses[0]?.StorageRange?.Min),
    ///         VswitchId = defaultSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]),
    ///         InstanceName = name,
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Ids[0]),
    ///         ZoneIdSlaveA = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Ids[0]),
    ///     });
    /// 
    ///     var node = new AliCloud.Rds.DbNode("node", new()
    ///     {
    ///         DbInstanceId = defaultInstance.Id,
    ///         ClassCode = defaultInstance.InstanceType,
    ///         ZoneId = defaultInstance.ZoneId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RDS MySQL database cluster node agent function can be imported using id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:rds/dbNode:DbNode example &lt;db_instance_id&gt;:&lt;node_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:rds/dbNode:DbNode")]
    public partial class DbNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The specification information of the node.
        /// </summary>
        [Output("classCode")]
        public Output<string> ClassCode { get; private set; } = null!;

        /// <summary>
        /// The Id of instance that can run database.
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the node.
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// The region ID of the node.
        /// </summary>
        [Output("nodeRegionId")]
        public Output<string> NodeRegionId { get; private set; } = null!;

        /// <summary>
        /// The role of node.
        /// </summary>
        [Output("nodeRole")]
        public Output<string> NodeRole { get; private set; } = null!;

        /// <summary>
        /// The zone ID of the node.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a DbNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbNode(string name, DbNodeArgs args, CustomResourceOptions? options = null)
            : base("alicloud:rds/dbNode:DbNode", name, args ?? new DbNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbNode(string name, Input<string> id, DbNodeState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:rds/dbNode:DbNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbNode Get(string name, Input<string> id, DbNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new DbNode(name, id, state, options);
        }
    }

    public sealed class DbNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The specification information of the node.
        /// </summary>
        [Input("classCode", required: true)]
        public Input<string> ClassCode { get; set; } = null!;

        /// <summary>
        /// The Id of instance that can run database.
        /// </summary>
        [Input("dbInstanceId", required: true)]
        public Input<string> DbInstanceId { get; set; } = null!;

        /// <summary>
        /// The zone ID of the node.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public DbNodeArgs()
        {
        }
        public static new DbNodeArgs Empty => new DbNodeArgs();
    }

    public sealed class DbNodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The specification information of the node.
        /// </summary>
        [Input("classCode")]
        public Input<string>? ClassCode { get; set; }

        /// <summary>
        /// The Id of instance that can run database.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// The ID of the node.
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// The region ID of the node.
        /// </summary>
        [Input("nodeRegionId")]
        public Input<string>? NodeRegionId { get; set; }

        /// <summary>
        /// The role of node.
        /// </summary>
        [Input("nodeRole")]
        public Input<string>? NodeRole { get; set; }

        /// <summary>
        /// The zone ID of the node.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public DbNodeState()
        {
        }
        public static new DbNodeState Empty => new DbNodeState();
    }
}
