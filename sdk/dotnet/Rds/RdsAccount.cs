// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Rds
{
    /// <summary>
    /// Provides a RDS Account resource.
    /// 
    /// For information about RDS Account and how to use it, see [What is Account](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/api-rds-2014-08-15-createaccount).
    /// 
    /// &gt; **NOTE:** Available since v1.120.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf_example";
    ///     var @default = AliCloud.Rds.GetZones.Invoke(new()
    ///     {
    ///         Engine = "MySQL",
    ///         EngineVersion = "5.6",
    ///     });
    /// 
    ///     var defaultGetInstanceClasses = AliCloud.Rds.GetInstanceClasses.Invoke(new()
    ///     {
    ///         ZoneId = @default.Apply(getZonesResult =&gt; getZonesResult.Ids[0]),
    ///         Engine = "MySQL",
    ///         EngineVersion = "5.6",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Ids[0])),
    ///         VswitchName = name,
    ///     });
    /// 
    ///     var defaultInstance = new AliCloud.Rds.Instance("default", new()
    ///     {
    ///         Engine = "MySQL",
    ///         EngineVersion = "5.6",
    ///         InstanceType = defaultGetInstanceClasses.Apply(getInstanceClassesResult =&gt; getInstanceClassesResult.InstanceClasses[1]?.InstanceClass),
    ///         InstanceStorage = 10,
    ///         VswitchId = defaultSwitch.Id,
    ///         InstanceName = name,
    ///     });
    /// 
    ///     var defaultRdsAccount = new AliCloud.Rds.RdsAccount("default", new()
    ///     {
    ///         DbInstanceId = defaultInstance.Id,
    ///         AccountName = name,
    ///         AccountPassword = "Example1234",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RDS Account can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:rds/rdsAccount:RdsAccount example &lt;db_instance_id&gt;:&lt;account_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:rds/rdsAccount:RdsAccount")]
    public partial class RdsAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the account. The value must be 2 to 256 characters in length. The value can contain letters, digits, underscores (_), and hyphens (-), and must start with a letter.
        /// 
        /// &gt; **NOTE:** The name cannot start with http:// or https://.
        /// </summary>
        [Output("accountDescription")]
        public Output<string> AccountDescription { get; private set; } = null!;

        /// <summary>
        /// The name of the database account.
        /// * The name must be unique.
        /// * The name can contain lowercase letters, digits, and underscores (_). For MySQL databases, the name can contain uppercase letters.
        /// * The name must start with a letter and end with a letter or digit.
        /// * For MySQL databases, the name of the privileged account cannot be the same as that of the standard account. For example, if the name of the privileged account is Test1, the name of the standard account cannot be test1.
        /// * The length of the value must meet the following requirements:
        /// * If the instance runs MySQL 5.7 or MySQL 8.0, the value must be 2 to 32 characters in length.
        /// * If the instance runs MySQL 5.6, the value must be 2 to 16 characters in length.
        /// * If the instance runs SQL Server, the value must be 2 to 64 characters in length.
        /// * If the instance runs PostgreSQL with cloud disks, the value must be 2 to 63 characters in length.
        /// * If the instance runs PostgreSQL with local disks, the value must be 2 to 16 characters in length.
        /// * If the instance runs MariaDB, the value must be 2 to 16 characters in length.
        /// * For more information about invalid characters, See [Forbidden keywords](https://help.aliyun.com/zh/rds/developer-reference/forbidden-keywords?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The password of the account.
        /// * The value must be 8 to 32 characters in length.
        /// * The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
        /// * Special characters include ! @ # $ % ^ &amp; * ( ) _ + - =
        /// </summary>
        [Output("accountPassword")]
        public Output<string> AccountPassword { get; private set; } = null!;

        /// <summary>
        /// The account type. Valid values:
        /// * Normal: standard account (default).
        /// * Super: privileged account.
        /// * Sysadmin: system admin account. The account type is available only for ApsaraDB RDS for SQL Server instances.
        /// 
        /// &gt; **NOTE:** Before you create a system admin account, check whether the RDS instance meets all prerequisites. For more information, See [Create a system admin account](https://help.aliyun.com/zh/rds/apsaradb-rds-for-sql-server/create-a-system-admin-account-for-an-apsaradb-rds-for-sql-server-instance?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Output("accountType")]
        public Output<string> AccountType { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_description` instead.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `db_instance_id` instead.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// An KMS encrypts password used to a db account. If the `account_password` is filled in, this field will be ignored.
        /// </summary>
        [Output("kmsEncryptedPassword")]
        public Output<string?> KmsEncryptedPassword { get; private set; } = null!;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a db account with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        [Output("kmsEncryptionContext")]
        public Output<ImmutableDictionary<string, string>?> KmsEncryptionContext { get; private set; } = null!;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_name` instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_password` instead.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Resets permissions flag of the privileged account. Default to `false`. Set it to `true` can resets permissions of the privileged account.
        /// </summary>
        [Output("resetPermissionFlag")]
        public Output<bool?> ResetPermissionFlag { get; private set; } = null!;

        /// <summary>
        /// The status of the resource. Valid values: `Available`, `Unavailable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_type` instead.
        /// 
        /// &gt; **NOTE**: Only MySQL engine is supported resets permissions of the privileged account.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RdsAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdsAccount(string name, RdsAccountArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:rds/rdsAccount:RdsAccount", name, args ?? new RdsAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdsAccount(string name, Input<string> id, RdsAccountState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:rds/rdsAccount:RdsAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accountPassword",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdsAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdsAccount Get(string name, Input<string> id, RdsAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new RdsAccount(name, id, state, options);
        }
    }

    public sealed class RdsAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the account. The value must be 2 to 256 characters in length. The value can contain letters, digits, underscores (_), and hyphens (-), and must start with a letter.
        /// 
        /// &gt; **NOTE:** The name cannot start with http:// or https://.
        /// </summary>
        [Input("accountDescription")]
        public Input<string>? AccountDescription { get; set; }

        /// <summary>
        /// The name of the database account.
        /// * The name must be unique.
        /// * The name can contain lowercase letters, digits, and underscores (_). For MySQL databases, the name can contain uppercase letters.
        /// * The name must start with a letter and end with a letter or digit.
        /// * For MySQL databases, the name of the privileged account cannot be the same as that of the standard account. For example, if the name of the privileged account is Test1, the name of the standard account cannot be test1.
        /// * The length of the value must meet the following requirements:
        /// * If the instance runs MySQL 5.7 or MySQL 8.0, the value must be 2 to 32 characters in length.
        /// * If the instance runs MySQL 5.6, the value must be 2 to 16 characters in length.
        /// * If the instance runs SQL Server, the value must be 2 to 64 characters in length.
        /// * If the instance runs PostgreSQL with cloud disks, the value must be 2 to 63 characters in length.
        /// * If the instance runs PostgreSQL with local disks, the value must be 2 to 16 characters in length.
        /// * If the instance runs MariaDB, the value must be 2 to 16 characters in length.
        /// * For more information about invalid characters, See [Forbidden keywords](https://help.aliyun.com/zh/rds/developer-reference/forbidden-keywords?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("accountPassword")]
        private Input<string>? _accountPassword;

        /// <summary>
        /// The password of the account.
        /// * The value must be 8 to 32 characters in length.
        /// * The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
        /// * Special characters include ! @ # $ % ^ &amp; * ( ) _ + - =
        /// </summary>
        public Input<string>? AccountPassword
        {
            get => _accountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The account type. Valid values:
        /// * Normal: standard account (default).
        /// * Super: privileged account.
        /// * Sysadmin: system admin account. The account type is available only for ApsaraDB RDS for SQL Server instances.
        /// 
        /// &gt; **NOTE:** Before you create a system admin account, check whether the RDS instance meets all prerequisites. For more information, See [Create a system admin account](https://help.aliyun.com/zh/rds/apsaradb-rds-for-sql-server/create-a-system-admin-account-for-an-apsaradb-rds-for-sql-server-instance?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_description` instead.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `db_instance_id` instead.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// An KMS encrypts password used to a db account. If the `account_password` is filled in, this field will be ignored.
        /// </summary>
        [Input("kmsEncryptedPassword")]
        public Input<string>? KmsEncryptedPassword { get; set; }

        [Input("kmsEncryptionContext")]
        private InputMap<string>? _kmsEncryptionContext;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a db account with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        public InputMap<string> KmsEncryptionContext
        {
            get => _kmsEncryptionContext ?? (_kmsEncryptionContext = new InputMap<string>());
            set => _kmsEncryptionContext = value;
        }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_password` instead.
        /// </summary>
        [Obsolete(@"Field 'password' has been deprecated from provider version 1.120.0. New field 'account_password' instead.")]
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Resets permissions flag of the privileged account. Default to `false`. Set it to `true` can resets permissions of the privileged account.
        /// </summary>
        [Input("resetPermissionFlag")]
        public Input<bool>? ResetPermissionFlag { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_type` instead.
        /// 
        /// &gt; **NOTE**: Only MySQL engine is supported resets permissions of the privileged account.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RdsAccountArgs()
        {
        }
        public static new RdsAccountArgs Empty => new RdsAccountArgs();
    }

    public sealed class RdsAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the account. The value must be 2 to 256 characters in length. The value can contain letters, digits, underscores (_), and hyphens (-), and must start with a letter.
        /// 
        /// &gt; **NOTE:** The name cannot start with http:// or https://.
        /// </summary>
        [Input("accountDescription")]
        public Input<string>? AccountDescription { get; set; }

        /// <summary>
        /// The name of the database account.
        /// * The name must be unique.
        /// * The name can contain lowercase letters, digits, and underscores (_). For MySQL databases, the name can contain uppercase letters.
        /// * The name must start with a letter and end with a letter or digit.
        /// * For MySQL databases, the name of the privileged account cannot be the same as that of the standard account. For example, if the name of the privileged account is Test1, the name of the standard account cannot be test1.
        /// * The length of the value must meet the following requirements:
        /// * If the instance runs MySQL 5.7 or MySQL 8.0, the value must be 2 to 32 characters in length.
        /// * If the instance runs MySQL 5.6, the value must be 2 to 16 characters in length.
        /// * If the instance runs SQL Server, the value must be 2 to 64 characters in length.
        /// * If the instance runs PostgreSQL with cloud disks, the value must be 2 to 63 characters in length.
        /// * If the instance runs PostgreSQL with local disks, the value must be 2 to 16 characters in length.
        /// * If the instance runs MariaDB, the value must be 2 to 16 characters in length.
        /// * For more information about invalid characters, See [Forbidden keywords](https://help.aliyun.com/zh/rds/developer-reference/forbidden-keywords?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("accountPassword")]
        private Input<string>? _accountPassword;

        /// <summary>
        /// The password of the account.
        /// * The value must be 8 to 32 characters in length.
        /// * The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
        /// * Special characters include ! @ # $ % ^ &amp; * ( ) _ + - =
        /// </summary>
        public Input<string>? AccountPassword
        {
            get => _accountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The account type. Valid values:
        /// * Normal: standard account (default).
        /// * Super: privileged account.
        /// * Sysadmin: system admin account. The account type is available only for ApsaraDB RDS for SQL Server instances.
        /// 
        /// &gt; **NOTE:** Before you create a system admin account, check whether the RDS instance meets all prerequisites. For more information, See [Create a system admin account](https://help.aliyun.com/zh/rds/apsaradb-rds-for-sql-server/create-a-system-admin-account-for-an-apsaradb-rds-for-sql-server-instance?spm=api-workbench.API%20Document.0.0.529e2defHKoZ3o).
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_description` instead.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `db_instance_id` instead.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// An KMS encrypts password used to a db account. If the `account_password` is filled in, this field will be ignored.
        /// </summary>
        [Input("kmsEncryptedPassword")]
        public Input<string>? KmsEncryptedPassword { get; set; }

        [Input("kmsEncryptionContext")]
        private InputMap<string>? _kmsEncryptionContext;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a db account with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        public InputMap<string> KmsEncryptionContext
        {
            get => _kmsEncryptionContext ?? (_kmsEncryptionContext = new InputMap<string>());
            set => _kmsEncryptionContext = value;
        }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_password` instead.
        /// </summary>
        [Obsolete(@"Field 'password' has been deprecated from provider version 1.120.0. New field 'account_password' instead.")]
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Resets permissions flag of the privileged account. Default to `false`. Set it to `true` can resets permissions of the privileged account.
        /// </summary>
        [Input("resetPermissionFlag")]
        public Input<bool>? ResetPermissionFlag { get; set; }

        /// <summary>
        /// The status of the resource. Valid values: `Available`, `Unavailable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The attribute has been deprecated from 1.120.0 and using `account_type` instead.
        /// 
        /// &gt; **NOTE**: Only MySQL engine is supported resets permissions of the privileged account.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RdsAccountState()
        {
        }
        public static new RdsAccountState Empty => new RdsAccountState();
    }
}
