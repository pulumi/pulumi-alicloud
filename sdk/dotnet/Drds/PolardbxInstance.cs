// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Drds
{
    /// <summary>
    /// Provides a DRDS Polardb X Instance resource.
    /// 
    /// For information about DRDS Polardb X Instance and how to use it, see [What is Polardb X Instance](https://www.alibabacloud.com/help/en/polardb/polardb-for-xscale/api-createdbinstance-1).
    /// 
    /// &gt; **NOTE:** Available since v1.211.0.
    /// 
    /// ## Import
    /// 
    /// DRDS Polardb X Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:drds/polardbxInstance:PolardbxInstance example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:drds/polardbxInstance:PolardbxInstance")]
    public partial class PolardbxInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Compute node specifications.
        /// </summary>
        [Output("cnClass")]
        public Output<string> CnClass { get; private set; } = null!;

        /// <summary>
        /// Number of computing nodes.
        /// </summary>
        [Output("cnNodeCount")]
        public Output<int> CnNodeCount { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Storage node specifications.
        /// </summary>
        [Output("dnClass")]
        public Output<string> DnClass { get; private set; } = null!;

        /// <summary>
        /// The number of storage nodes.
        /// </summary>
        [Output("dnNodeCount")]
        public Output<int> DnNodeCount { get; private set; } = null!;

        /// <summary>
        /// Primary Availability Zone.
        /// </summary>
        [Output("primaryZone")]
        public Output<string> PrimaryZone { get; private set; } = null!;

        /// <summary>
        /// The resource group ID can be empty. This parameter is not supported for the time being.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Secondary availability zone.
        /// </summary>
        [Output("secondaryZone")]
        public Output<string?> SecondaryZone { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Third Availability Zone.
        /// </summary>
        [Output("tertiaryZone")]
        public Output<string?> TertiaryZone { get; private set; } = null!;

        /// <summary>
        /// Topology type:
        /// - **3azones**: three available areas;
        /// - **1azone**: Single zone.
        /// </summary>
        [Output("topologyType")]
        public Output<string> TopologyType { get; private set; } = null!;

        /// <summary>
        /// The VPC ID.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual switch.
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a PolardbxInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolardbxInstance(string name, PolardbxInstanceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:drds/polardbxInstance:PolardbxInstance", name, args ?? new PolardbxInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolardbxInstance(string name, Input<string> id, PolardbxInstanceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:drds/polardbxInstance:PolardbxInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolardbxInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolardbxInstance Get(string name, Input<string> id, PolardbxInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new PolardbxInstance(name, id, state, options);
        }
    }

    public sealed class PolardbxInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute node specifications.
        /// </summary>
        [Input("cnClass", required: true)]
        public Input<string> CnClass { get; set; } = null!;

        /// <summary>
        /// Number of computing nodes.
        /// </summary>
        [Input("cnNodeCount", required: true)]
        public Input<int> CnNodeCount { get; set; } = null!;

        /// <summary>
        /// Storage node specifications.
        /// </summary>
        [Input("dnClass", required: true)]
        public Input<string> DnClass { get; set; } = null!;

        /// <summary>
        /// The number of storage nodes.
        /// </summary>
        [Input("dnNodeCount", required: true)]
        public Input<int> DnNodeCount { get; set; } = null!;

        /// <summary>
        /// Primary Availability Zone.
        /// </summary>
        [Input("primaryZone", required: true)]
        public Input<string> PrimaryZone { get; set; } = null!;

        /// <summary>
        /// The resource group ID can be empty. This parameter is not supported for the time being.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Secondary availability zone.
        /// </summary>
        [Input("secondaryZone")]
        public Input<string>? SecondaryZone { get; set; }

        /// <summary>
        /// Third Availability Zone.
        /// </summary>
        [Input("tertiaryZone")]
        public Input<string>? TertiaryZone { get; set; }

        /// <summary>
        /// Topology type:
        /// - **3azones**: three available areas;
        /// - **1azone**: Single zone.
        /// </summary>
        [Input("topologyType", required: true)]
        public Input<string> TopologyType { get; set; } = null!;

        /// <summary>
        /// The VPC ID.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// The ID of the virtual switch.
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        public PolardbxInstanceArgs()
        {
        }
        public static new PolardbxInstanceArgs Empty => new PolardbxInstanceArgs();
    }

    public sealed class PolardbxInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute node specifications.
        /// </summary>
        [Input("cnClass")]
        public Input<string>? CnClass { get; set; }

        /// <summary>
        /// Number of computing nodes.
        /// </summary>
        [Input("cnNodeCount")]
        public Input<int>? CnNodeCount { get; set; }

        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Storage node specifications.
        /// </summary>
        [Input("dnClass")]
        public Input<string>? DnClass { get; set; }

        /// <summary>
        /// The number of storage nodes.
        /// </summary>
        [Input("dnNodeCount")]
        public Input<int>? DnNodeCount { get; set; }

        /// <summary>
        /// Primary Availability Zone.
        /// </summary>
        [Input("primaryZone")]
        public Input<string>? PrimaryZone { get; set; }

        /// <summary>
        /// The resource group ID can be empty. This parameter is not supported for the time being.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Secondary availability zone.
        /// </summary>
        [Input("secondaryZone")]
        public Input<string>? SecondaryZone { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Third Availability Zone.
        /// </summary>
        [Input("tertiaryZone")]
        public Input<string>? TertiaryZone { get; set; }

        /// <summary>
        /// Topology type:
        /// - **3azones**: three available areas;
        /// - **1azone**: Single zone.
        /// </summary>
        [Input("topologyType")]
        public Input<string>? TopologyType { get; set; }

        /// <summary>
        /// The VPC ID.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of the virtual switch.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public PolardbxInstanceState()
        {
        }
        public static new PolardbxInstanceState Empty => new PolardbxInstanceState();
    }
}
