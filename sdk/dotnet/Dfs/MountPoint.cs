// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Dfs
{
    /// <summary>
    /// Provides a Apsara File Storage for HDFS (DFS) Mount Point resource.
    /// 
    /// For information about Apsara File Storage for HDFS (DFS) Mount Point and how to use it, see [What is Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
    /// 
    /// &gt; **NOTE:** Available since v1.140.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "10.4.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VswitchName = name,
    ///         CidrBlock = "10.4.0.0/24",
    ///         VpcId = @default.Id,
    ///         ZoneId = "cn-hangzhou-e",
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Dfs.FileSystem("default", new()
    ///     {
    ///         StorageType = "STANDARD",
    ///         ZoneId = "cn-hangzhou-e",
    ///         ProtocolType = "PANGU",
    ///         Description = name,
    ///         FileSystemName = name,
    ///         ThroughputMode = "Provisioned",
    ///         SpaceCapacity = 1024,
    ///         ProvisionedThroughputInMiBps = 512,
    ///     });
    /// 
    ///     var defaultAccessGroup = new AliCloud.Dfs.AccessGroup("default", new()
    ///     {
    ///         AccessGroupName = name,
    ///         Description = name,
    ///         NetworkType = "VPC",
    ///     });
    /// 
    ///     var defaultMountPoint = new AliCloud.Dfs.MountPoint("default", new()
    ///     {
    ///         Description = name,
    ///         VpcId = @default.Id,
    ///         FileSystemId = defaultFileSystem.Id,
    ///         AccessGroupId = defaultAccessGroup.Id,
    ///         NetworkType = "VPC",
    ///         VswitchId = defaultSwitch.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Apsara File Storage for HDFS (DFS) Mount Point can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:dfs/mountPoint:MountPoint example &lt;file_system_id&gt;:&lt;mount_point_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:dfs/mountPoint:MountPoint")]
    public partial class MountPoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
        /// </summary>
        [Output("accessGroupId")]
        public Output<string> AccessGroupId { get; private set; } = null!;

        /// <summary>
        /// The mount point alias prefix, which specifies the mount point alias prefix.
        /// </summary>
        [Output("aliasPrefix")]
        public Output<string?> AliasPrefix { get; private set; } = null!;

        /// <summary>
        /// The creation time of the Mount point resource.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the Mount point.  No more than 32 characters in length.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Unique file system identifier, used to retrieve specified file system resources.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
        /// </summary>
        [Output("mountPointId")]
        public Output<string> MountPointId { get; private set; } = null!;

        /// <summary>
        /// The network type of the Mount point.  Only VPC (VPC) is supported.
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.242.0) The region ID of the Mount Point.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// VSwitch ID, which specifies the VSwitch resource used to create the mount point.
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a MountPoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MountPoint(string name, MountPointArgs args, CustomResourceOptions? options = null)
            : base("alicloud:dfs/mountPoint:MountPoint", name, args ?? new MountPointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MountPoint(string name, Input<string> id, MountPointState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:dfs/mountPoint:MountPoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MountPoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MountPoint Get(string name, Input<string> id, MountPointState? state = null, CustomResourceOptions? options = null)
        {
            return new MountPoint(name, id, state, options);
        }
    }

    public sealed class MountPointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
        /// </summary>
        [Input("accessGroupId", required: true)]
        public Input<string> AccessGroupId { get; set; } = null!;

        /// <summary>
        /// The mount point alias prefix, which specifies the mount point alias prefix.
        /// </summary>
        [Input("aliasPrefix")]
        public Input<string>? AliasPrefix { get; set; }

        /// <summary>
        /// The description of the Mount point.  No more than 32 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique file system identifier, used to retrieve specified file system resources.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The network type of the Mount point.  Only VPC (VPC) is supported.
        /// </summary>
        [Input("networkType", required: true)]
        public Input<string> NetworkType { get; set; } = null!;

        /// <summary>
        /// Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// VSwitch ID, which specifies the VSwitch resource used to create the mount point.
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        public MountPointArgs()
        {
        }
        public static new MountPointArgs Empty => new MountPointArgs();
    }

    public sealed class MountPointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the permission group associated with the Mount point, which is used to set the access permissions of the Mount point.
        /// </summary>
        [Input("accessGroupId")]
        public Input<string>? AccessGroupId { get; set; }

        /// <summary>
        /// The mount point alias prefix, which specifies the mount point alias prefix.
        /// </summary>
        [Input("aliasPrefix")]
        public Input<string>? AliasPrefix { get; set; }

        /// <summary>
        /// The creation time of the Mount point resource.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the Mount point.  No more than 32 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique file system identifier, used to retrieve specified file system resources.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The unique identifier of the Mount point, which is used to retrieve the specified mount point resources.
        /// </summary>
        [Input("mountPointId")]
        public Input<string>? MountPointId { get; set; }

        /// <summary>
        /// The network type of the Mount point.  Only VPC (VPC) is supported.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// (Available since v1.242.0) The region ID of the Mount Point.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Mount point status. Value: Inactive: Disable mount points Active: Activate the mount point.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the VPC. Specifies the VPC environment to which the mount point belongs.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// VSwitch ID, which specifies the VSwitch resource used to create the mount point.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public MountPointState()
        {
        }
        public static new MountPointState Empty => new MountPointState();
    }
}
