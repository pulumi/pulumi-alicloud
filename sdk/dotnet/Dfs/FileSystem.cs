// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Dfs
{
    /// <summary>
    /// Provides a Apsara File Storage for HDFS (DFS) File System resource.
    /// 
    /// For information about Apsara File Storage for HDFS (DFS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
    /// 
    /// &gt; **NOTE:** Available since v1.140.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = new AliCloud.Dfs.FileSystem("default", new()
    ///     {
    ///         StorageType = "PERFORMANCE",
    ///         ZoneId = "cn-hangzhou-b",
    ///         ProtocolType = "PANGU",
    ///         Description = name,
    ///         FileSystemName = name,
    ///         ThroughputMode = "Provisioned",
    ///         SpaceCapacity = 1024,
    ///         ProvisionedThroughputInMiBps = 512,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Apsara File Storage for HDFS (DFS) File System can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:dfs/fileSystem:FileSystem example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:dfs/fileSystem:FileSystem")]
    public partial class FileSystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the file system instance.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Redundancy mode of the file system. Value:
        /// - LRS (default): Local redundancy.
        /// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
        /// </summary>
        [Output("dataRedundancyType")]
        public Output<string?> DataRedundancyType { get; private set; } = null!;

        /// <summary>
        /// Dedicated cluster id, which is used to support scenarios such as group cloud migration.
        /// </summary>
        [Output("dedicatedClusterId")]
        public Output<string?> DedicatedClusterId { get; private set; } = null!;

        /// <summary>
        /// The description of the file system resource. No more than 32 characters in length.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
        /// </summary>
        [Output("fileSystemName")]
        public Output<string> FileSystemName { get; private set; } = null!;

        /// <summary>
        /// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
        /// </summary>
        [Output("partitionNumber")]
        public Output<int?> PartitionNumber { get; private set; } = null!;

        /// <summary>
        /// The protocol type. Value: `HDFS`, `PANGU`.
        /// </summary>
        [Output("protocolType")]
        public Output<string> ProtocolType { get; private set; } = null!;

        /// <summary>
        /// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
        /// </summary>
        [Output("provisionedThroughputInMiBps")]
        public Output<int?> ProvisionedThroughputInMiBps { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.242.0) The region ID of the File System.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
        /// </summary>
        [Output("spaceCapacity")]
        public Output<int> SpaceCapacity { get; private set; } = null!;

        /// <summary>
        /// Save set identity, used to select a user-specified save set.
        /// </summary>
        [Output("storageSetName")]
        public Output<string?> StorageSetName { get; private set; } = null!;

        /// <summary>
        /// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
        /// </summary>
        [Output("throughputMode")]
        public Output<string> ThroughputMode { get; private set; } = null!;

        /// <summary>
        /// Zone Id, which is used to create file system resources to the specified zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a FileSystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileSystem(string name, FileSystemArgs args, CustomResourceOptions? options = null)
            : base("alicloud:dfs/fileSystem:FileSystem", name, args ?? new FileSystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileSystem(string name, Input<string> id, FileSystemState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:dfs/fileSystem:FileSystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileSystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileSystem Get(string name, Input<string> id, FileSystemState? state = null, CustomResourceOptions? options = null)
        {
            return new FileSystem(name, id, state, options);
        }
    }

    public sealed class FileSystemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Redundancy mode of the file system. Value:
        /// - LRS (default): Local redundancy.
        /// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
        /// </summary>
        [Input("dataRedundancyType")]
        public Input<string>? DataRedundancyType { get; set; }

        /// <summary>
        /// Dedicated cluster id, which is used to support scenarios such as group cloud migration.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        /// <summary>
        /// The description of the file system resource. No more than 32 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
        /// </summary>
        [Input("fileSystemName", required: true)]
        public Input<string> FileSystemName { get; set; } = null!;

        /// <summary>
        /// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
        /// </summary>
        [Input("partitionNumber")]
        public Input<int>? PartitionNumber { get; set; }

        /// <summary>
        /// The protocol type. Value: `HDFS`, `PANGU`.
        /// </summary>
        [Input("protocolType", required: true)]
        public Input<string> ProtocolType { get; set; } = null!;

        /// <summary>
        /// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
        /// </summary>
        [Input("provisionedThroughputInMiBps")]
        public Input<int>? ProvisionedThroughputInMiBps { get; set; }

        /// <summary>
        /// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
        /// </summary>
        [Input("spaceCapacity", required: true)]
        public Input<int> SpaceCapacity { get; set; } = null!;

        /// <summary>
        /// Save set identity, used to select a user-specified save set.
        /// </summary>
        [Input("storageSetName")]
        public Input<string>? StorageSetName { get; set; }

        /// <summary>
        /// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        /// <summary>
        /// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
        /// </summary>
        [Input("throughputMode")]
        public Input<string>? ThroughputMode { get; set; }

        /// <summary>
        /// Zone Id, which is used to create file system resources to the specified zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FileSystemArgs()
        {
        }
        public static new FileSystemArgs Empty => new FileSystemArgs();
    }

    public sealed class FileSystemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the file system instance.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Redundancy mode of the file system. Value:
        /// - LRS (default): Local redundancy.
        /// - ZRS: Same-City redundancy. When ZRS is selected, zoneId is a string consisting of multiple zones that are expected to be redundant in the same city, for example,  'zoneId1,zoneId2 '.
        /// </summary>
        [Input("dataRedundancyType")]
        public Input<string>? DataRedundancyType { get; set; }

        /// <summary>
        /// Dedicated cluster id, which is used to support scenarios such as group cloud migration.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        /// <summary>
        /// The description of the file system resource. No more than 32 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The file system name. The naming rules are as follows: The length is 6~64 characters. Globally unique and cannot be an empty string. English letters are supported and can contain numbers, underscores (_), and dashes (-).
        /// </summary>
        [Input("fileSystemName")]
        public Input<string>? FileSystemName { get; set; }

        /// <summary>
        /// Save set sequence number, the user selects the content of the specified sequence number in the Save set.
        /// </summary>
        [Input("partitionNumber")]
        public Input<int>? PartitionNumber { get; set; }

        /// <summary>
        /// The protocol type. Value: `HDFS`, `PANGU`.
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        /// <summary>
        /// Provisioned throughput. This parameter is required when ThroughputMode is set to Provisioned. Unit: MB/s Value range: 1~5120.
        /// </summary>
        [Input("provisionedThroughputInMiBps")]
        public Input<int>? ProvisionedThroughputInMiBps { get; set; }

        /// <summary>
        /// (Available since v1.242.0) The region ID of the File System.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// File system capacity.  When the actual amount of data stored reaches the capacity of the file system, data cannot be written.  Unit: GiB.
        /// </summary>
        [Input("spaceCapacity")]
        public Input<int>? SpaceCapacity { get; set; }

        /// <summary>
        /// Save set identity, used to select a user-specified save set.
        /// </summary>
        [Input("storageSetName")]
        public Input<string>? StorageSetName { get; set; }

        /// <summary>
        /// The storage media type. Value: STANDARD (default): STANDARD PERFORMANCE: PERFORMANCE type.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// The throughput mode. Value: Standard (default): Standard throughput Provisioned: preset throughput.
        /// </summary>
        [Input("throughputMode")]
        public Input<string>? ThroughputMode { get; set; }

        /// <summary>
        /// Zone Id, which is used to create file system resources to the specified zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FileSystemState()
        {
        }
        public static new FileSystemState Empty => new FileSystemState();
    }
}
