// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Dfs
{
    /// <summary>
    /// Provides a Apsara File Storage for HDFS (DFS) Vsc Mount Point resource.
    /// 
    /// For information about Apsara File Storage for HDFS (DFS) Vsc Mount Point and how to use it, see [What is Vsc Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).
    /// 
    /// &gt; **NOTE:** Available since v1.218.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var defaultFileSystem = new AliCloud.Dfs.FileSystem("default", new()
    ///     {
    ///         SpaceCapacity = 1024,
    ///         Description = "for vsc mountpoint RMC test",
    ///         StorageType = "PERFORMANCE",
    ///         ZoneId = "cn-hangzhou-b",
    ///         ProtocolType = "PANGU",
    ///         DataRedundancyType = "LRS",
    ///         FileSystemName = name,
    ///     });
    /// 
    ///     var defaultFsForRMCVscMp = new AliCloud.Dfs.VscMountPoint("DefaultFsForRMCVscMp", new()
    ///     {
    ///         FileSystemId = defaultFileSystem.Id,
    ///         AliasPrefix = name,
    ///         Description = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Apsara File Storage for HDFS (DFS) Vsc Mount Point can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:dfs/vscMountPoint:VscMountPoint example &lt;file_system_id&gt;:&lt;mount_point_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:dfs/vscMountPoint:VscMountPoint")]
    public partial class VscMountPoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        /// </summary>
        [Output("aliasPrefix")]
        public Output<string?> AliasPrefix { get; private set; } = null!;

        /// <summary>
        /// The description of the Mount point.  The length is 0 to 100 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the HDFS file system resource associated with the VSC mount point.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The collection of ECS instances on which the HDFS file system is mounted.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<Outputs.VscMountPointInstance>> Instances { get; private set; } = null!;

        /// <summary>
        /// VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        /// </summary>
        [Output("mountPointId")]
        public Output<string> MountPointId { get; private set; } = null!;


        /// <summary>
        /// Create a VscMountPoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VscMountPoint(string name, VscMountPointArgs args, CustomResourceOptions? options = null)
            : base("alicloud:dfs/vscMountPoint:VscMountPoint", name, args ?? new VscMountPointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VscMountPoint(string name, Input<string> id, VscMountPointState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:dfs/vscMountPoint:VscMountPoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VscMountPoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VscMountPoint Get(string name, Input<string> id, VscMountPointState? state = null, CustomResourceOptions? options = null)
        {
            return new VscMountPoint(name, id, state, options);
        }
    }

    public sealed class VscMountPointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        /// </summary>
        [Input("aliasPrefix")]
        public Input<string>? AliasPrefix { get; set; }

        /// <summary>
        /// The description of the Mount point.  The length is 0 to 100 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the HDFS file system resource associated with the VSC mount point.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        public VscMountPointArgs()
        {
        }
        public static new VscMountPointArgs Empty => new VscMountPointArgs();
    }

    public sealed class VscMountPointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        /// </summary>
        [Input("aliasPrefix")]
        public Input<string>? AliasPrefix { get; set; }

        /// <summary>
        /// The description of the Mount point.  The length is 0 to 100 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the HDFS file system resource associated with the VSC mount point.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        [Input("instances")]
        private InputList<Inputs.VscMountPointInstanceGetArgs>? _instances;

        /// <summary>
        /// The collection of ECS instances on which the HDFS file system is mounted.
        /// </summary>
        public InputList<Inputs.VscMountPointInstanceGetArgs> Instances
        {
            get => _instances ?? (_instances = new InputList<Inputs.VscMountPointInstanceGetArgs>());
            set => _instances = value;
        }

        /// <summary>
        /// VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        /// </summary>
        [Input("mountPointId")]
        public Input<string>? MountPointId { get; set; }

        public VscMountPointState()
        {
        }
        public static new VscMountPointState Empty => new VscMountPointState();
    }
}
