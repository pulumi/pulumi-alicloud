// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Chatbot
{
    public static class GetAgents
    {
        /// <summary>
        /// This data source provides the Chatbot Agents of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.203.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nameRegex = AliCloud.Chatbot.GetAgents.Invoke(new()
        ///     {
        ///         NameRegex = "^my-Agent",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudChatbotAgentsId1"] = nameRegex.Apply(getAgentsResult =&gt; getAgentsResult.Agents[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAgentsResult> InvokeAsync(GetAgentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAgentsResult>("alicloud:chatbot/getAgents:getAgents", args ?? new GetAgentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Chatbot Agents of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.203.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nameRegex = AliCloud.Chatbot.GetAgents.Invoke(new()
        ///     {
        ///         NameRegex = "^my-Agent",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudChatbotAgentsId1"] = nameRegex.Apply(getAgentsResult =&gt; getAgentsResult.Agents[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAgentsResult> Invoke(GetAgentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAgentsResult>("alicloud:chatbot/getAgents:getAgents", args ?? new GetAgentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAgentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the agent.
        /// </summary>
        [Input("agentName")]
        public string? AgentName { get; set; }

        /// <summary>
        /// A regex string to filter resulting chatbot agents by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        [Input("pageSize")]
        public int? PageSize { get; set; }

        public GetAgentsArgs()
        {
        }
        public static new GetAgentsArgs Empty => new GetAgentsArgs();
    }

    public sealed class GetAgentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the agent.
        /// </summary>
        [Input("agentName")]
        public Input<string>? AgentName { get; set; }

        /// <summary>
        /// A regex string to filter resulting chatbot agents by name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        public GetAgentsInvokeArgs()
        {
        }
        public static new GetAgentsInvokeArgs Empty => new GetAgentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAgentsResult
    {
        /// <summary>
        /// The agent Name.
        /// </summary>
        public readonly string AgentName;
        /// <summary>
        /// A list of availability zones. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAgentsAgentResult> Agents;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of chatbot agents names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;

        [OutputConstructor]
        private GetAgentsResult(
            string agentName,

            ImmutableArray<Outputs.GetAgentsAgentResult> agents,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            int? pageNumber,

            int? pageSize)
        {
            AgentName = agentName;
            Agents = agents;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
        }
    }
}
