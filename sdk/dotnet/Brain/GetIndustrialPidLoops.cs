// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Brain
{
    public static class GetIndustrialPidLoops
    {
        /// <summary>
        /// This data source provides the Brain Industrial Pid Loops of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.117.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AliCloud.Brain.GetIndustrialPidLoops.Invoke(new()
        ///     {
        ///         PidProjectId = "856c6b8f-ca63-40a4-xxxx-xxxx",
        ///         Ids = new[]
        ///         {
        ///             "742a3d4e-d8b0-47c8-xxxx-xxxx",
        ///         },
        ///         NameRegex = "tf-testACC",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstBrainIndustrialPidLoopId"] = example.Apply(getIndustrialPidLoopsResult =&gt; getIndustrialPidLoopsResult.Loops[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIndustrialPidLoopsResult> InvokeAsync(GetIndustrialPidLoopsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIndustrialPidLoopsResult>("alicloud:brain/getIndustrialPidLoops:getIndustrialPidLoops", args ?? new GetIndustrialPidLoopsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Brain Industrial Pid Loops of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.117.0+.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AliCloud.Brain.GetIndustrialPidLoops.Invoke(new()
        ///     {
        ///         PidProjectId = "856c6b8f-ca63-40a4-xxxx-xxxx",
        ///         Ids = new[]
        ///         {
        ///             "742a3d4e-d8b0-47c8-xxxx-xxxx",
        ///         },
        ///         NameRegex = "tf-testACC",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstBrainIndustrialPidLoopId"] = example.Apply(getIndustrialPidLoopsResult =&gt; getIndustrialPidLoopsResult.Loops[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIndustrialPidLoopsResult> Invoke(GetIndustrialPidLoopsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndustrialPidLoopsResult>("alicloud:brain/getIndustrialPidLoops:getIndustrialPidLoops", args ?? new GetIndustrialPidLoopsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndustrialPidLoopsArgs : global::Pulumi.InvokeArgs
    {
        [Input("enableDetails")]
        public bool? EnableDetails { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Pid Loop IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Pid Loop name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of Pid Loop.
        /// </summary>
        [Input("pidLoopName")]
        public string? PidLoopName { get; set; }

        /// <summary>
        /// The pid project id.
        /// </summary>
        [Input("pidProjectId", required: true)]
        public string PidProjectId { get; set; } = null!;

        /// <summary>
        /// The status of Pid Loop.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetIndustrialPidLoopsArgs()
        {
        }
        public static new GetIndustrialPidLoopsArgs Empty => new GetIndustrialPidLoopsArgs();
    }

    public sealed class GetIndustrialPidLoopsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("enableDetails")]
        public Input<bool>? EnableDetails { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Pid Loop IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Pid Loop name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of Pid Loop.
        /// </summary>
        [Input("pidLoopName")]
        public Input<string>? PidLoopName { get; set; }

        /// <summary>
        /// The pid project id.
        /// </summary>
        [Input("pidProjectId", required: true)]
        public Input<string> PidProjectId { get; set; } = null!;

        /// <summary>
        /// The status of Pid Loop.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetIndustrialPidLoopsInvokeArgs()
        {
        }
        public static new GetIndustrialPidLoopsInvokeArgs Empty => new GetIndustrialPidLoopsInvokeArgs();
    }


    [OutputType]
    public sealed class GetIndustrialPidLoopsResult
    {
        public readonly bool? EnableDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<Outputs.GetIndustrialPidLoopsLoopResult> Loops;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly string? PidLoopName;
        public readonly string PidProjectId;
        public readonly string? Status;

        [OutputConstructor]
        private GetIndustrialPidLoopsResult(
            bool? enableDetails,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetIndustrialPidLoopsLoopResult> loops,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            string? pidLoopName,

            string pidProjectId,

            string? status)
        {
            EnableDetails = enableDetails;
            Id = id;
            Ids = ids;
            Loops = loops;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            PidLoopName = pidLoopName;
            PidProjectId = pidProjectId;
            Status = status;
        }
    }
}
