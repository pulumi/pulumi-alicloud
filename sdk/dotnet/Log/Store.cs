// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Log
{
    /// <summary>
    /// Provides a SLS Log Store resource.
    /// 
    /// For information about SLS Log Store and how to use it, see [What is Log Store](https://www.alibabacloud.com/help/doc-detail/48874.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.0.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Random.RandomInteger("default", new()
    ///     {
    ///         Max = 99999,
    ///         Min = 10000,
    ///     });
    /// 
    ///     var exampleProject = new AliCloud.Log.Project("exampleProject", new()
    ///     {
    ///         Description = "terraform-example",
    ///     });
    /// 
    ///     var exampleStore = new AliCloud.Log.Store("exampleStore", new()
    ///     {
    ///         Project = exampleProject.Name,
    ///         ShardCount = 3,
    ///         AutoSplit = true,
    ///         MaxSplitShardCount = 60,
    ///         AppendMeta = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Encrypt Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var region = config.Get("region") ?? "cn-hangzhou";
    ///     var exampleAccount = AliCloud.GetAccount.Invoke();
    /// 
    ///     var @default = new Random.RandomInteger("default", new()
    ///     {
    ///         Max = 99999,
    ///         Min = 10000,
    ///     });
    /// 
    ///     var exampleKey = new AliCloud.Kms.Key("exampleKey", new()
    ///     {
    ///         Description = "terraform-example",
    ///         PendingWindowInDays = 7,
    ///         Status = "Enabled",
    ///     });
    /// 
    ///     var exampleProject = new AliCloud.Log.Project("exampleProject", new()
    ///     {
    ///         Description = "terraform-example",
    ///     });
    /// 
    ///     var exampleStore = new AliCloud.Log.Store("exampleStore", new()
    ///     {
    ///         Project = exampleProject.Name,
    ///         ShardCount = 1,
    ///         AutoSplit = true,
    ///         MaxSplitShardCount = 60,
    ///         EncryptConf = new AliCloud.Log.Inputs.StoreEncryptConfArgs
    ///         {
    ///             Enable = true,
    ///             EncryptType = "default",
    ///             UserCmkInfo = new AliCloud.Log.Inputs.StoreEncryptConfUserCmkInfoArgs
    ///             {
    ///                 CmkKeyId = exampleKey.Id,
    ///                 Arn = $"acs:ram::{exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Id)}:role/aliyunlogdefaultrole",
    ///                 RegionId = region,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## Module Support
    /// 
    /// You can use the existing sls module
    /// to create SLS project, store and store index one-click, like ECS instances.
    /// 
    /// ## Import
    /// 
    /// SLS Log Store can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:log/store:Store example &lt;project_name&gt;:&lt;logstore_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:log/store:Store")]
    public partial class Store : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
        /// </summary>
        [Output("appendMeta")]
        public Output<bool?> AppendMeta { get; private set; } = null!;

        /// <summary>
        /// Determines whether to automatically split a shard. Default to `false`.
        /// </summary>
        [Output("autoSplit")]
        public Output<bool?> AutoSplit { get; private set; } = null!;

        /// <summary>
        /// Log library creation time. Unix timestamp format that represents the number of seconds from 1970-1-1 00:00:00 UTC calculation.
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
        /// </summary>
        [Output("enableWebTracking")]
        public Output<bool?> EnableWebTracking { get; private set; } = null!;

        /// <summary>
        /// Encrypted storage of data, providing data static protection capability, encrypt_conf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encrypt_conf` below.
        /// </summary>
        [Output("encryptConf")]
        public Output<Outputs.StoreEncryptConf> EncryptConf { get; private set; } = null!;

        /// <summary>
        /// The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
        /// </summary>
        [Output("hotTtl")]
        public Output<int?> HotTtl { get; private set; } = null!;

        /// <summary>
        /// The log store, which is unique in the same project. You need to specify one of the attributes: `logstore_name`, `name`.
        /// </summary>
        [Output("logstoreName")]
        public Output<string> LogstoreName { get; private set; } = null!;

        /// <summary>
        /// The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
        /// </summary>
        [Output("maxSplitShardCount")]
        public Output<int?> MaxSplitShardCount { get; private set; } = null!;

        /// <summary>
        /// Metering mode. The default metering mode of ChargeByFunction, ChargeByDataIngest traffic mode.
        /// </summary>
        [Output("meteringMode")]
        public Output<string> MeteringMode { get; private set; } = null!;

        /// <summary>
        /// The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The project name to the log store belongs. You need to specify one of the attributes: `project_name`, `project`.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
        /// </summary>
        [Output("retentionPeriod")]
        public Output<int?> RetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
        /// </summary>
        [Output("shardCount")]
        public Output<int?> ShardCount { get; private set; } = null!;

        /// <summary>
        /// The shard attribute.
        /// </summary>
        [Output("shards")]
        public Output<ImmutableArray<Outputs.StoreShard>> Shards { get; private set; } = null!;

        /// <summary>
        /// Determines whether store type is metric. `Metrics` means metric store, empty means log store.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Output("telemetryType")]
        public Output<string?> TelemetryType { get; private set; } = null!;


        /// <summary>
        /// Create a Store resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Store(string name, StoreArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:log/store:Store", name, args ?? new StoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Store(string name, Input<string> id, StoreState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:log/store:Store", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Store resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Store Get(string name, Input<string> id, StoreState? state = null, CustomResourceOptions? options = null)
        {
            return new Store(name, id, state, options);
        }
    }

    public sealed class StoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
        /// </summary>
        [Input("appendMeta")]
        public Input<bool>? AppendMeta { get; set; }

        /// <summary>
        /// Determines whether to automatically split a shard. Default to `false`.
        /// </summary>
        [Input("autoSplit")]
        public Input<bool>? AutoSplit { get; set; }

        /// <summary>
        /// Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
        /// </summary>
        [Input("enableWebTracking")]
        public Input<bool>? EnableWebTracking { get; set; }

        /// <summary>
        /// Encrypted storage of data, providing data static protection capability, encrypt_conf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encrypt_conf` below.
        /// </summary>
        [Input("encryptConf")]
        public Input<Inputs.StoreEncryptConfArgs>? EncryptConf { get; set; }

        /// <summary>
        /// The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
        /// </summary>
        [Input("hotTtl")]
        public Input<int>? HotTtl { get; set; }

        /// <summary>
        /// The log store, which is unique in the same project. You need to specify one of the attributes: `logstore_name`, `name`.
        /// </summary>
        [Input("logstoreName")]
        public Input<string>? LogstoreName { get; set; }

        /// <summary>
        /// The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
        /// </summary>
        [Input("maxSplitShardCount")]
        public Input<int>? MaxSplitShardCount { get; set; }

        /// <summary>
        /// Metering mode. The default metering mode of ChargeByFunction, ChargeByDataIngest traffic mode.
        /// </summary>
        [Input("meteringMode")]
        public Input<string>? MeteringMode { get; set; }

        /// <summary>
        /// The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The project name to the log store belongs. You need to specify one of the attributes: `project_name`, `project`.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        /// <summary>
        /// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        /// <summary>
        /// Determines whether store type is metric. `Metrics` means metric store, empty means log store.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Input("telemetryType")]
        public Input<string>? TelemetryType { get; set; }

        public StoreArgs()
        {
        }
        public static new StoreArgs Empty => new StoreArgs();
    }

    public sealed class StoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
        /// </summary>
        [Input("appendMeta")]
        public Input<bool>? AppendMeta { get; set; }

        /// <summary>
        /// Determines whether to automatically split a shard. Default to `false`.
        /// </summary>
        [Input("autoSplit")]
        public Input<bool>? AutoSplit { get; set; }

        /// <summary>
        /// Log library creation time. Unix timestamp format that represents the number of seconds from 1970-1-1 00:00:00 UTC calculation.
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// Whether open webtracking. webtracking network tracing, support the collection of HTML log, H5, Ios and android platforms.
        /// </summary>
        [Input("enableWebTracking")]
        public Input<bool>? EnableWebTracking { get; set; }

        /// <summary>
        /// Encrypted storage of data, providing data static protection capability, encrypt_conf can be updated since 1.188.0 (only enable change is supported when updating logstore). See `encrypt_conf` below.
        /// </summary>
        [Input("encryptConf")]
        public Input<Inputs.StoreEncryptConfGetArgs>? EncryptConf { get; set; }

        /// <summary>
        /// The ttl of hot storage. Default to 30, at least 30, hot storage ttl must be less than ttl.
        /// </summary>
        [Input("hotTtl")]
        public Input<int>? HotTtl { get; set; }

        /// <summary>
        /// The log store, which is unique in the same project. You need to specify one of the attributes: `logstore_name`, `name`.
        /// </summary>
        [Input("logstoreName")]
        public Input<string>? LogstoreName { get; set; }

        /// <summary>
        /// The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
        /// </summary>
        [Input("maxSplitShardCount")]
        public Input<int>? MaxSplitShardCount { get; set; }

        /// <summary>
        /// Metering mode. The default metering mode of ChargeByFunction, ChargeByDataIngest traffic mode.
        /// </summary>
        [Input("meteringMode")]
        public Input<string>? MeteringMode { get; set; }

        /// <summary>
        /// The mode of storage. Default to `standard`, must be `standard` or `query`, `lite`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.215.0. New field 'logstore_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// . Field 'project' has been deprecated from provider version 1.215.0. New field 'project_name' instead.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The project name to the log store belongs. You need to specify one of the attributes: `project_name`, `project`.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The data retention time (in days). Valid values: [1-3650]. Default to 30. Log store data will be stored permanently when the value is 3650.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        /// <summary>
        /// The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/zh/sls/product-overview/shard).
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        [Input("shards")]
        private InputList<Inputs.StoreShardGetArgs>? _shards;

        /// <summary>
        /// The shard attribute.
        /// </summary>
        public InputList<Inputs.StoreShardGetArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.StoreShardGetArgs>());
            set => _shards = value;
        }

        /// <summary>
        /// Determines whether store type is metric. `Metrics` means metric store, empty means log store.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Input("telemetryType")]
        public Input<string>? TelemetryType { get; set; }

        public StoreState()
        {
        }
        public static new StoreState Empty => new StoreState();
    }
}
