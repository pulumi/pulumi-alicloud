// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Log
{
    /// <summary>
    /// Log Service provides the LogSearch/Analytics function to query and analyze large amounts of logs in real time.
    /// You can use this function by enabling the index and field statistics. [Refer to details](https://www.alibabacloud.com/help/doc-detail/43772.htm)
    /// 
    /// ## Module Support
    /// 
    /// You can use the existing sls module
    /// to create SLS project, store and store index one-click, like ECS instances.
    /// 
    /// ## Import
    /// 
    /// Log store index can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:log/storeIndex:StoreIndex example tf-log:tf-log-store
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:log/storeIndex:StoreIndex")]
    public partial class StoreIndex : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List configurations of field search index. Valid item as follows:
        /// </summary>
        [Output("fieldSearches")]
        public Output<ImmutableArray<Outputs.StoreIndexFieldSearch>> FieldSearches { get; private set; } = null!;

        /// <summary>
        /// The configuration of full text index. Valid item as follows:
        /// </summary>
        [Output("fullText")]
        public Output<Outputs.StoreIndexFullText?> FullText { get; private set; } = null!;

        /// <summary>
        /// The log store name to the query index belongs.
        /// </summary>
        [Output("logstore")]
        public Output<string> Logstore { get; private set; } = null!;

        /// <summary>
        /// The project name to the log store belongs.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a StoreIndex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StoreIndex(string name, StoreIndexArgs args, CustomResourceOptions? options = null)
            : base("alicloud:log/storeIndex:StoreIndex", name, args ?? new StoreIndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StoreIndex(string name, Input<string> id, StoreIndexState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:log/storeIndex:StoreIndex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StoreIndex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StoreIndex Get(string name, Input<string> id, StoreIndexState? state = null, CustomResourceOptions? options = null)
        {
            return new StoreIndex(name, id, state, options);
        }
    }

    public sealed class StoreIndexArgs : global::Pulumi.ResourceArgs
    {
        [Input("fieldSearches")]
        private InputList<Inputs.StoreIndexFieldSearchArgs>? _fieldSearches;

        /// <summary>
        /// List configurations of field search index. Valid item as follows:
        /// </summary>
        public InputList<Inputs.StoreIndexFieldSearchArgs> FieldSearches
        {
            get => _fieldSearches ?? (_fieldSearches = new InputList<Inputs.StoreIndexFieldSearchArgs>());
            set => _fieldSearches = value;
        }

        /// <summary>
        /// The configuration of full text index. Valid item as follows:
        /// </summary>
        [Input("fullText")]
        public Input<Inputs.StoreIndexFullTextArgs>? FullText { get; set; }

        /// <summary>
        /// The log store name to the query index belongs.
        /// </summary>
        [Input("logstore", required: true)]
        public Input<string> Logstore { get; set; } = null!;

        /// <summary>
        /// The project name to the log store belongs.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public StoreIndexArgs()
        {
        }
        public static new StoreIndexArgs Empty => new StoreIndexArgs();
    }

    public sealed class StoreIndexState : global::Pulumi.ResourceArgs
    {
        [Input("fieldSearches")]
        private InputList<Inputs.StoreIndexFieldSearchGetArgs>? _fieldSearches;

        /// <summary>
        /// List configurations of field search index. Valid item as follows:
        /// </summary>
        public InputList<Inputs.StoreIndexFieldSearchGetArgs> FieldSearches
        {
            get => _fieldSearches ?? (_fieldSearches = new InputList<Inputs.StoreIndexFieldSearchGetArgs>());
            set => _fieldSearches = value;
        }

        /// <summary>
        /// The configuration of full text index. Valid item as follows:
        /// </summary>
        [Input("fullText")]
        public Input<Inputs.StoreIndexFullTextGetArgs>? FullText { get; set; }

        /// <summary>
        /// The log store name to the query index belongs.
        /// </summary>
        [Input("logstore")]
        public Input<string>? Logstore { get; set; }

        /// <summary>
        /// The project name to the log store belongs.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public StoreIndexState()
        {
        }
        public static new StoreIndexState Empty => new StoreIndexState();
    }
}
