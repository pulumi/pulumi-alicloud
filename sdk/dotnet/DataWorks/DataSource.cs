// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.DataWorks
{
    /// <summary>
    /// Provides a Data Works Data Source resource.
    /// 
    /// For information about Data Works Data Source and how to use it, see [What is Data Source](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.237.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf_example";
    ///     var randint = new Random.Index.Integer("randint", new()
    ///     {
    ///         Max = 999,
    ///         Min = 1,
    ///     });
    /// 
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var defaultkguw4R = new AliCloud.DataWorks.Project("defaultkguw4R", new()
    ///     {
    ///         Status = "Available",
    ///         Description = "tf_desc",
    ///         ProjectName = $"{name}{randint.Id}",
    ///         PaiTaskEnabled = false,
    ///         DisplayName = "tf_new_api_display",
    ///         DevRoleDisabled = true,
    ///         DevEnvironmentEnabled = false,
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0])),
    ///     });
    /// 
    ///     var defaultDataSource = new AliCloud.DataWorks.DataSource("default", new()
    ///     {
    ///         Type = "hive",
    ///         DataSourceName = name,
    ///         ConnectionProperties = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["address"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["host"] = "127.0.0.1",
    ///                     ["port"] = "1234",
    ///                 },
    ///             },
    ///             ["database"] = "hive_database",
    ///             ["metaType"] = "HiveMetastore",
    ///             ["metastoreUris"] = "thrift://123:123",
    ///             ["version"] = "2.3.9",
    ///             ["loginMode"] = "Anonymous",
    ///             ["securityProtocol"] = "authTypeNone",
    ///             ["envType"] = "Prod",
    ///             ["properties"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["key1"] = "value1",
    ///             },
    ///         }),
    ///         ConnectionPropertiesMode = "UrlMode",
    ///         ProjectId = defaultkguw4R.Id,
    ///         Description = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Works Data Source can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:dataworks/dataSource:DataSource example &lt;project_id&gt;:&lt;data_source_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:dataworks/dataSource:DataSource")]
    public partial class DataSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
        /// </summary>
        [Output("connectionProperties")]
        public Output<string> ConnectionProperties { get; private set; } = null!;

        /// <summary>
        /// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
        /// </summary>
        [Output("connectionPropertiesMode")]
        public Output<string> ConnectionPropertiesMode { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Creator of the data source
        /// </summary>
        [Output("createUser")]
        public Output<string> CreateUser { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Output("dataSourceId")]
        public Output<int> DataSourceId { get; private set; } = null!;

        /// <summary>
        /// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
        /// </summary>
        [Output("dataSourceName")]
        public Output<string> DataSourceName { get; private set; } = null!;

        /// <summary>
        /// Description of the data source
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Modification time
        /// </summary>
        [Output("modifyTime")]
        public Output<int> ModifyTime { get; private set; } = null!;

        /// <summary>
        /// Modifier of the data source
        /// </summary>
        [Output("modifyUser")]
        public Output<string> ModifyUser { get; private set; } = null!;

        /// <summary>
        /// The ID of the project to which the data source belongs.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Business Unique Key of Data Source
        /// </summary>
        [Output("qualifiedName")]
        public Output<string> QualifiedName { get; private set; } = null!;

        /// <summary>
        /// The type of data source. For a list of data source types, see the values listed in the API documentation.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DataSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataSource(string name, DataSourceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:dataworks/dataSource:DataSource", name, args ?? new DataSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataSource(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:dataworks/dataSource:DataSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionProperties",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataSource Get(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new DataSource(name, id, state, options);
        }
    }

    public sealed class DataSourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectionProperties", required: true)]
        private Input<string>? _connectionProperties;

        /// <summary>
        /// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
        /// </summary>
        public Input<string>? ConnectionProperties
        {
            get => _connectionProperties;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionProperties = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
        /// </summary>
        [Input("connectionPropertiesMode", required: true)]
        public Input<string> ConnectionPropertiesMode { get; set; } = null!;

        /// <summary>
        /// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
        /// </summary>
        [Input("dataSourceName", required: true)]
        public Input<string> DataSourceName { get; set; } = null!;

        /// <summary>
        /// Description of the data source
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the project to which the data source belongs.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The type of data source. For a list of data source types, see the values listed in the API documentation.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DataSourceArgs()
        {
        }
        public static new DataSourceArgs Empty => new DataSourceArgs();
    }

    public sealed class DataSourceState : global::Pulumi.ResourceArgs
    {
        [Input("connectionProperties")]
        private Input<string>? _connectionProperties;

        /// <summary>
        /// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
        /// </summary>
        public Input<string>? ConnectionProperties
        {
            get => _connectionProperties;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionProperties = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
        /// </summary>
        [Input("connectionPropertiesMode")]
        public Input<string>? ConnectionPropertiesMode { get; set; }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// Creator of the data source
        /// </summary>
        [Input("createUser")]
        public Input<string>? CreateUser { get; set; }

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Input("dataSourceId")]
        public Input<int>? DataSourceId { get; set; }

        /// <summary>
        /// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
        /// </summary>
        [Input("dataSourceName")]
        public Input<string>? DataSourceName { get; set; }

        /// <summary>
        /// Description of the data source
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Modification time
        /// </summary>
        [Input("modifyTime")]
        public Input<int>? ModifyTime { get; set; }

        /// <summary>
        /// Modifier of the data source
        /// </summary>
        [Input("modifyUser")]
        public Input<string>? ModifyUser { get; set; }

        /// <summary>
        /// The ID of the project to which the data source belongs.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Business Unique Key of Data Source
        /// </summary>
        [Input("qualifiedName")]
        public Input<string>? QualifiedName { get; set; }

        /// <summary>
        /// The type of data source. For a list of data source types, see the values listed in the API documentation.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DataSourceState()
        {
        }
        public static new DataSourceState Empty => new DataSourceState();
    }
}
