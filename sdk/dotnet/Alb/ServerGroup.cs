// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Alb
{
    /// <summary>
    /// Provides a Application Load Balancer (ALB) Server Group resource.
    /// 
    /// For information about Application Load Balancer (ALB) Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/slb/application-load-balancer/developer-reference/api-alb-2020-06-16-createservergroup).
    /// 
    /// &gt; **NOTE:** Available since v1.131.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var example = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var exampleGetZones = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "Instance",
    ///     });
    /// 
    ///     var exampleGetInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = exampleGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         CpuCoreCount = 1,
    ///         MemorySize = 2,
    ///     });
    /// 
    ///     var exampleGetImages = AliCloud.Ecs.GetImages.Invoke(new()
    ///     {
    ///         NameRegex = "^ubuntu_18.*64",
    ///         Owners = "system",
    ///     });
    /// 
    ///     var exampleNetwork = new AliCloud.Vpc.Network("example", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "10.4.0.0/16",
    ///     });
    /// 
    ///     var exampleSwitch = new AliCloud.Vpc.Switch("example", new()
    ///     {
    ///         VswitchName = name,
    ///         CidrBlock = "10.4.0.0/16",
    ///         VpcId = exampleNetwork.Id,
    ///         ZoneId = exampleGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     var exampleSecurityGroup = new AliCloud.Ecs.SecurityGroup("example", new()
    ///     {
    ///         Name = name,
    ///         Description = name,
    ///         VpcId = exampleNetwork.Id,
    ///     });
    /// 
    ///     var exampleInstance = new AliCloud.Ecs.Instance("example", new()
    ///     {
    ///         AvailabilityZone = exampleGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         InstanceName = name,
    ///         ImageId = exampleGetImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
    ///         InstanceType = exampleGetInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
    ///         SecurityGroups = new[]
    ///         {
    ///             exampleSecurityGroup.Id,
    ///         },
    ///         VswitchId = exampleSwitch.Id,
    ///     });
    /// 
    ///     var exampleServerGroup = new AliCloud.Alb.ServerGroup("example", new()
    ///     {
    ///         Protocol = "HTTP",
    ///         VpcId = exampleNetwork.Id,
    ///         ServerGroupName = name,
    ///         ResourceGroupId = example.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
    ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
    ///         {
    ///             StickySessionEnabled = true,
    ///             Cookie = "tf-example",
    ///             StickySessionType = "Server",
    ///         },
    ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
    ///         {
    ///             HealthCheckConnectPort = 46325,
    ///             HealthCheckEnabled = true,
    ///             HealthCheckHost = "tf-example.com",
    ///             HealthCheckCodes = new[]
    ///             {
    ///                 "http_2xx",
    ///                 "http_3xx",
    ///                 "http_4xx",
    ///             },
    ///             HealthCheckHttpVersion = "HTTP1.1",
    ///             HealthCheckInterval = 2,
    ///             HealthCheckMethod = "HEAD",
    ///             HealthCheckPath = "/tf-example",
    ///             HealthCheckProtocol = "HTTP",
    ///             HealthCheckTimeout = 5,
    ///             HealthyThreshold = 3,
    ///             UnhealthyThreshold = 3,
    ///         },
    ///         Servers = new[]
    ///         {
    ///             new AliCloud.Alb.Inputs.ServerGroupServerArgs
    ///             {
    ///                 Description = name,
    ///                 Port = 80,
    ///                 ServerId = exampleInstance.Id,
    ///                 ServerIp = exampleInstance.PrivateIp,
    ///                 ServerType = "Ecs",
    ///                 Weight = 10,
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Application Load Balancer (ALB) Server Group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:alb/serverGroup:ServerGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:alb/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Elegant interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Output("connectionDrainConfig")]
        public Output<Outputs.ServerGroupConnectionDrainConfig?> ConnectionDrainConfig { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
        /// </summary>
        [Output("crossZoneEnabled")]
        public Output<bool> CrossZoneEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// true: Send a check request,
        /// false (default): Send a normal request.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// The configuration of health checks See `health_check_config` below.
        /// </summary>
        [Output("healthCheckConfig")]
        public Output<Outputs.ServerGroupHealthCheckConfig> HealthCheckConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group to which you want to transfer the cloud resource.
        /// 
        /// &gt; **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
        /// </summary>
        [Output("healthCheckTemplateId")]
        public Output<string?> HealthCheckTemplateId { get; private set; } = null!;

        /// <summary>
        /// Enable Ipv6
        /// </summary>
        [Output("ipv6Enabled")]
        public Output<bool?> Ipv6Enabled { get; private set; } = null!;

        /// <summary>
        /// The backend protocol. Valid values:
        /// 
        /// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
        /// 
        /// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
        /// 
        /// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
        /// 
        /// &gt; **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Elegant interrupt configuration.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The scheduling algorithm. Valid values:
        /// 
        /// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
        /// 
        /// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
        /// 
        /// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Output("serverGroupName")]
        public Output<string> ServerGroupName { get; private set; } = null!;

        /// <summary>
        /// The type of server group. Valid values:
        /// 
        /// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
        /// - `Ip`: allows you to add servers by specifying IP addresses.
        /// - `Fc`: allows you to add servers by specifying functions of Function Compute.
        /// </summary>
        [Output("serverGroupType")]
        public Output<string> ServerGroupType { get; private set; } = null!;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ServerGroupServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
        /// </summary>
        [Output("serviceName")]
        public Output<string?> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Slow start configuration. See `slow_start_config` below.
        /// </summary>
        [Output("slowStartConfig")]
        public Output<Outputs.ServerGroupSlowStartConfig?> SlowStartConfig { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The configuration of health checks See `sticky_session_config` below.
        /// </summary>
        [Output("stickySessionConfig")]
        public Output<Outputs.ServerGroupStickySessionConfig?> StickySessionConfig { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Url consistency hash parameter configuration See `uch_config` below.
        /// </summary>
        [Output("uchConfig")]
        public Output<Outputs.ServerGroupUchConfig?> UchConfig { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable persistent TCP connections.
        /// </summary>
        [Output("upstreamKeepaliveEnabled")]
        public Output<bool?> UpstreamKeepaliveEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
        /// 
        /// &gt; **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:alb/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:alb/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Elegant interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Input("connectionDrainConfig")]
        public Input<Inputs.ServerGroupConnectionDrainConfigArgs>? ConnectionDrainConfig { get; set; }

        /// <summary>
        /// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
        /// </summary>
        [Input("crossZoneEnabled")]
        public Input<bool>? CrossZoneEnabled { get; set; }

        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// true: Send a check request,
        /// false (default): Send a normal request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The configuration of health checks See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig", required: true)]
        public Input<Inputs.ServerGroupHealthCheckConfigArgs> HealthCheckConfig { get; set; } = null!;

        /// <summary>
        /// The ID of the resource group to which you want to transfer the cloud resource.
        /// 
        /// &gt; **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
        /// </summary>
        [Input("healthCheckTemplateId")]
        public Input<string>? HealthCheckTemplateId { get; set; }

        /// <summary>
        /// Enable Ipv6
        /// </summary>
        [Input("ipv6Enabled")]
        public Input<bool>? Ipv6Enabled { get; set; }

        /// <summary>
        /// The backend protocol. Valid values:
        /// 
        /// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
        /// 
        /// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
        /// 
        /// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
        /// 
        /// &gt; **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Elegant interrupt configuration.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The scheduling algorithm. Valid values:
        /// 
        /// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
        /// 
        /// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
        /// 
        /// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Input("serverGroupName", required: true)]
        public Input<string> ServerGroupName { get; set; } = null!;

        /// <summary>
        /// The type of server group. Valid values:
        /// 
        /// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
        /// - `Ip`: allows you to add servers by specifying IP addresses.
        /// - `Fc`: allows you to add servers by specifying functions of Function Compute.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerArgs>? _servers;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        public InputList<Inputs.ServerGroupServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Slow start configuration. See `slow_start_config` below.
        /// </summary>
        [Input("slowStartConfig")]
        public Input<Inputs.ServerGroupSlowStartConfigArgs>? SlowStartConfig { get; set; }

        /// <summary>
        /// The configuration of health checks See `sticky_session_config` below.
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigArgs>? StickySessionConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Url consistency hash parameter configuration See `uch_config` below.
        /// </summary>
        [Input("uchConfig")]
        public Input<Inputs.ServerGroupUchConfigArgs>? UchConfig { get; set; }

        /// <summary>
        /// Specifies whether to enable persistent TCP connections.
        /// </summary>
        [Input("upstreamKeepaliveEnabled")]
        public Input<bool>? UpstreamKeepaliveEnabled { get; set; }

        /// <summary>
        /// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
        /// 
        /// &gt; **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Elegant interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Input("connectionDrainConfig")]
        public Input<Inputs.ServerGroupConnectionDrainConfigGetArgs>? ConnectionDrainConfig { get; set; }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Indicates whether cross-zone load balancing is enabled for the server group. Valid values:
        /// </summary>
        [Input("crossZoneEnabled")]
        public Input<bool>? CrossZoneEnabled { get; set; }

        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// true: Send a check request,
        /// false (default): Send a normal request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The configuration of health checks See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.ServerGroupHealthCheckConfigGetArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// The ID of the resource group to which you want to transfer the cloud resource.
        /// 
        /// &gt; **NOTE:**   You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is resource management?](https://www.alibabacloud.com/help/en/doc-detail/94475.html)
        /// </summary>
        [Input("healthCheckTemplateId")]
        public Input<string>? HealthCheckTemplateId { get; set; }

        /// <summary>
        /// Enable Ipv6
        /// </summary>
        [Input("ipv6Enabled")]
        public Input<bool>? Ipv6Enabled { get; set; }

        /// <summary>
        /// The backend protocol. Valid values:
        /// 
        /// *   `HTTP`: allows you to associate an HTTPS, HTTP, or QUIC listener with the server group. This is the default value.
        /// 
        /// *   `HTTPS`: allows you to associate HTTPS listeners with backend servers.
        /// 
        /// *   `gRPC`: allows you to associate an HTTPS or QUIC listener with the server group.
        /// 
        /// &gt; **NOTE:**   You do not need to specify a backend protocol if you set `ServerGroupType` to `Fc`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Elegant interrupt configuration.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The scheduling algorithm. Valid values:
        /// 
        /// *   `Wrr` (default): The weighted round-robin algorithm is used. Backend servers that have higher weights receive more requests than those that have lower weights.
        /// 
        /// *   `Wlc`: The weighted least connections algorithm is used. Requests are distributed based on the weights and the number of connections to backend servers. If two backend servers have the same weight, the backend server that has fewer connections is expected to receive more requests.
        /// 
        /// *   `Sch`: The consistent hashing algorithm is used. Requests from the same source IP address are distributed to the same backend server.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The type of server group. Valid values:
        /// 
        /// - `Instance` (default): allows you to add servers by specifying `Ecs`, `Eni`, or `Eci`.
        /// - `Ip`: allows you to add servers by specifying IP addresses.
        /// - `Fc`: allows you to add servers by specifying functions of Function Compute.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerGetArgs>? _servers;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        public InputList<Inputs.ServerGroupServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Only applicable to the ALB Ingress scenario, indicating the K8s Service name corresponding to the server group.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Slow start configuration. See `slow_start_config` below.
        /// </summary>
        [Input("slowStartConfig")]
        public Input<Inputs.ServerGroupSlowStartConfigGetArgs>? SlowStartConfig { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The configuration of health checks See `sticky_session_config` below.
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigGetArgs>? StickySessionConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Url consistency hash parameter configuration See `uch_config` below.
        /// </summary>
        [Input("uchConfig")]
        public Input<Inputs.ServerGroupUchConfigGetArgs>? UchConfig { get; set; }

        /// <summary>
        /// Specifies whether to enable persistent TCP connections.
        /// </summary>
        [Input("upstreamKeepaliveEnabled")]
        public Input<bool>? UpstreamKeepaliveEnabled { get; set; }

        /// <summary>
        /// The ID of the virtual private cloud (VPC). You can add only servers that are deployed in the specified VPC to the server group.
        /// 
        /// &gt; **NOTE:**   This parameter takes effect when the `ServerGroupType` parameter is set to `Instance` or `Ip`.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
