// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Alb
{
    public static class GetRules
    {
        /// <summary>
        /// This data source provides the Alb Rules of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.133.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var @default = AliCloud.Alb.GetZones.Invoke();
        /// 
        ///     var defaultGetResourceGroups = AliCloud.ResourceManager.GetResourceGroups.Invoke();
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         defaultSwitch.Add(new AliCloud.Vpc.Switch($"default-{range.Value}", new()
        ///         {
        ///             VpcId = defaultNetwork.Id,
        ///             CidrBlock = Std.Format.Invoke(new()
        ///             {
        ///                 Input = "10.4.%d.0/24",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones)[range.Value].Id),
        ///             VswitchName = Std.Format.Invoke(new()
        ///             {
        ///                 Input = $"{name}_%d",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         }));
        ///     }
        ///     var defaultLoadBalancer = new AliCloud.Alb.LoadBalancer("default", new()
        ///     {
        ///         VpcId = defaultNetwork.Id,
        ///         AddressType = "Internet",
        ///         AddressAllocatedMode = "Fixed",
        ///         LoadBalancerName = name,
        ///         LoadBalancerEdition = "Standard",
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         LoadBalancerBillingConfig = new AliCloud.Alb.Inputs.LoadBalancerLoadBalancerBillingConfigArgs
        ///         {
        ///             PayType = "PayAsYouGo",
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///         ZoneMappings = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[0].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
        ///             },
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[1].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id)),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = defaultNetwork.Id,
        ///         ServerGroupName = name,
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///     });
        /// 
        ///     var defaultListener = new AliCloud.Alb.Listener("default", new()
        ///     {
        ///         LoadBalancerId = defaultLoadBalancer.Id,
        ///         ListenerProtocol = "HTTP",
        ///         ListenerPort = 80,
        ///         ListenerDescription = name,
        ///         DefaultActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.ListenerDefaultActionArgs
        ///             {
        ///                 Type = "ForwardGroup",
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultRule = new AliCloud.Alb.Rule("default", new()
        ///     {
        ///         RuleName = name,
        ///         ListenerId = defaultListener.Id,
        ///         Priority = 555,
        ///         RuleConditions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleConditionArgs
        ///             {
        ///                 CookieConfig = new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigArgs
        ///                 {
        ///                     Values = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigValueArgs
        ///                         {
        ///                             Key = "created",
        ///                             Value = "tf",
        ///                         },
        ///                     },
        ///                 },
        ///                 Type = "Cookie",
        ///             },
        ///         },
        ///         RuleActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleActionArgs
        ///             {
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///                 Order = 9,
        ///                 Type = "ForwardGroup",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetRules.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultRule.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albRuleId"] = ids.Apply(getRulesResult =&gt; getRulesResult.Rules[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRulesResult> InvokeAsync(GetRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRulesResult>("alicloud:alb/getRules:getRules", args ?? new GetRulesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Alb Rules of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.133.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var @default = AliCloud.Alb.GetZones.Invoke();
        /// 
        ///     var defaultGetResourceGroups = AliCloud.ResourceManager.GetResourceGroups.Invoke();
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         defaultSwitch.Add(new AliCloud.Vpc.Switch($"default-{range.Value}", new()
        ///         {
        ///             VpcId = defaultNetwork.Id,
        ///             CidrBlock = Std.Format.Invoke(new()
        ///             {
        ///                 Input = "10.4.%d.0/24",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones)[range.Value].Id),
        ///             VswitchName = Std.Format.Invoke(new()
        ///             {
        ///                 Input = $"{name}_%d",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         }));
        ///     }
        ///     var defaultLoadBalancer = new AliCloud.Alb.LoadBalancer("default", new()
        ///     {
        ///         VpcId = defaultNetwork.Id,
        ///         AddressType = "Internet",
        ///         AddressAllocatedMode = "Fixed",
        ///         LoadBalancerName = name,
        ///         LoadBalancerEdition = "Standard",
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         LoadBalancerBillingConfig = new AliCloud.Alb.Inputs.LoadBalancerLoadBalancerBillingConfigArgs
        ///         {
        ///             PayType = "PayAsYouGo",
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///         ZoneMappings = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[0].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
        ///             },
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[1].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id)),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = defaultNetwork.Id,
        ///         ServerGroupName = name,
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///     });
        /// 
        ///     var defaultListener = new AliCloud.Alb.Listener("default", new()
        ///     {
        ///         LoadBalancerId = defaultLoadBalancer.Id,
        ///         ListenerProtocol = "HTTP",
        ///         ListenerPort = 80,
        ///         ListenerDescription = name,
        ///         DefaultActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.ListenerDefaultActionArgs
        ///             {
        ///                 Type = "ForwardGroup",
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultRule = new AliCloud.Alb.Rule("default", new()
        ///     {
        ///         RuleName = name,
        ///         ListenerId = defaultListener.Id,
        ///         Priority = 555,
        ///         RuleConditions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleConditionArgs
        ///             {
        ///                 CookieConfig = new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigArgs
        ///                 {
        ///                     Values = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigValueArgs
        ///                         {
        ///                             Key = "created",
        ///                             Value = "tf",
        ///                         },
        ///                     },
        ///                 },
        ///                 Type = "Cookie",
        ///             },
        ///         },
        ///         RuleActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleActionArgs
        ///             {
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///                 Order = 9,
        ///                 Type = "ForwardGroup",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetRules.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultRule.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albRuleId"] = ids.Apply(getRulesResult =&gt; getRulesResult.Rules[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulesResult> Invoke(GetRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulesResult>("alicloud:alb/getRules:getRules", args ?? new GetRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Alb Rules of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.133.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-example";
        ///     var @default = AliCloud.Alb.GetZones.Invoke();
        /// 
        ///     var defaultGetResourceGroups = AliCloud.ResourceManager.GetResourceGroups.Invoke();
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         defaultSwitch.Add(new AliCloud.Vpc.Switch($"default-{range.Value}", new()
        ///         {
        ///             VpcId = defaultNetwork.Id,
        ///             CidrBlock = Std.Format.Invoke(new()
        ///             {
        ///                 Input = "10.4.%d.0/24",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones)[range.Value].Id),
        ///             VswitchName = Std.Format.Invoke(new()
        ///             {
        ///                 Input = $"{name}_%d",
        ///                 Args = new[]
        ///                 {
        ///                     range.Value + 1,
        ///                 },
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         }));
        ///     }
        ///     var defaultLoadBalancer = new AliCloud.Alb.LoadBalancer("default", new()
        ///     {
        ///         VpcId = defaultNetwork.Id,
        ///         AddressType = "Internet",
        ///         AddressAllocatedMode = "Fixed",
        ///         LoadBalancerName = name,
        ///         LoadBalancerEdition = "Standard",
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         LoadBalancerBillingConfig = new AliCloud.Alb.Inputs.LoadBalancerLoadBalancerBillingConfigArgs
        ///         {
        ///             PayType = "PayAsYouGo",
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///         ZoneMappings = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[0].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
        ///             },
        ///             new AliCloud.Alb.Inputs.LoadBalancerZoneMappingArgs
        ///             {
        ///                 VswitchId = defaultSwitch[1].Id,
        ///                 ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id)),
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = defaultNetwork.Id,
        ///         ServerGroupName = name,
        ///         ResourceGroupId = defaultGetResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Groups[0]?.Id),
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Created", "TF" },
        ///         },
        ///     });
        /// 
        ///     var defaultListener = new AliCloud.Alb.Listener("default", new()
        ///     {
        ///         LoadBalancerId = defaultLoadBalancer.Id,
        ///         ListenerProtocol = "HTTP",
        ///         ListenerPort = 80,
        ///         ListenerDescription = name,
        ///         DefaultActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.ListenerDefaultActionArgs
        ///             {
        ///                 Type = "ForwardGroup",
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.ListenerDefaultActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var defaultRule = new AliCloud.Alb.Rule("default", new()
        ///     {
        ///         RuleName = name,
        ///         ListenerId = defaultListener.Id,
        ///         Priority = 555,
        ///         RuleConditions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleConditionArgs
        ///             {
        ///                 CookieConfig = new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigArgs
        ///                 {
        ///                     Values = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleConditionCookieConfigValueArgs
        ///                         {
        ///                             Key = "created",
        ///                             Value = "tf",
        ///                         },
        ///                     },
        ///                 },
        ///                 Type = "Cookie",
        ///             },
        ///         },
        ///         RuleActions = new[]
        ///         {
        ///             new AliCloud.Alb.Inputs.RuleRuleActionArgs
        ///             {
        ///                 ForwardGroupConfig = new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigArgs
        ///                 {
        ///                     ServerGroupTuples = new[]
        ///                     {
        ///                         new AliCloud.Alb.Inputs.RuleRuleActionForwardGroupConfigServerGroupTupleArgs
        ///                         {
        ///                             ServerGroupId = defaultServerGroup.Id,
        ///                         },
        ///                     },
        ///                 },
        ///                 Order = 9,
        ///                 Type = "ForwardGroup",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetRules.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultRule.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albRuleId"] = ids.Apply(getRulesResult =&gt; getRulesResult.Rules[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulesResult> Invoke(GetRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulesResult>("alicloud:alb/getRules:getRules", args ?? new GetRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRulesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Rule IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("listenerIds")]
        private List<string>? _listenerIds;

        /// <summary>
        /// The listener ids.
        /// </summary>
        public List<string> ListenerIds
        {
            get => _listenerIds ?? (_listenerIds = new List<string>());
            set => _listenerIds = value;
        }

        [Input("loadBalancerIds")]
        private List<string>? _loadBalancerIds;

        /// <summary>
        /// The load balancer ids.
        /// </summary>
        public List<string> LoadBalancerIds
        {
            get => _loadBalancerIds ?? (_loadBalancerIds = new List<string>());
            set => _loadBalancerIds = value;
        }

        /// <summary>
        /// A regex string to filter results by Rule name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("ruleIds")]
        private List<string>? _ruleIds;

        /// <summary>
        /// The rule ids.
        /// </summary>
        public List<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new List<string>());
            set => _ruleIds = value;
        }

        /// <summary>
        /// The status of the forwarding rule. Valid values: `Provisioning`, `Configuring`, `Available`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetRulesArgs()
        {
        }
        public static new GetRulesArgs Empty => new GetRulesArgs();
    }

    public sealed class GetRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Rule IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("listenerIds")]
        private InputList<string>? _listenerIds;

        /// <summary>
        /// The listener ids.
        /// </summary>
        public InputList<string> ListenerIds
        {
            get => _listenerIds ?? (_listenerIds = new InputList<string>());
            set => _listenerIds = value;
        }

        [Input("loadBalancerIds")]
        private InputList<string>? _loadBalancerIds;

        /// <summary>
        /// The load balancer ids.
        /// </summary>
        public InputList<string> LoadBalancerIds
        {
            get => _loadBalancerIds ?? (_loadBalancerIds = new InputList<string>());
            set => _loadBalancerIds = value;
        }

        /// <summary>
        /// A regex string to filter results by Rule name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("ruleIds")]
        private InputList<string>? _ruleIds;

        /// <summary>
        /// The rule ids.
        /// </summary>
        public InputList<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new InputList<string>());
            set => _ruleIds = value;
        }

        /// <summary>
        /// The status of the forwarding rule. Valid values: `Provisioning`, `Configuring`, `Available`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetRulesInvokeArgs()
        {
        }
        public static new GetRulesInvokeArgs Empty => new GetRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRulesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> ListenerIds;
        public readonly ImmutableArray<string> LoadBalancerIds;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of Rule names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly ImmutableArray<string> RuleIds;
        /// <summary>
        /// A list of Alb Rules. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesRuleResult> Rules;
        /// <summary>
        /// The status of the forwarding rule.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetRulesResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> listenerIds,

            ImmutableArray<string> loadBalancerIds,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<string> ruleIds,

            ImmutableArray<Outputs.GetRulesRuleResult> rules,

            string? status)
        {
            Id = id;
            Ids = ids;
            ListenerIds = listenerIds;
            LoadBalancerIds = loadBalancerIds;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            RuleIds = ruleIds;
            Rules = rules;
            Status = status;
        }
    }
}
