// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Alb.Outputs
{

    [OutputType]
    public sealed class RuleRuleCondition
    {
        /// <summary>
        /// The configuration of the cookie. See See `CookieConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionCookieConfig? CookieConfig;
        /// <summary>
        /// The configuration of the header field. See `HeaderConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionHeaderConfig? HeaderConfig;
        /// <summary>
        /// The configuration of the host field. See `HostConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionHostConfig? HostConfig;
        /// <summary>
        /// The configuration of the request method. See `MethodConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionMethodConfig? MethodConfig;
        /// <summary>
        /// The configuration of the path for the request to be forwarded. See `PathConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionPathConfig? PathConfig;
        /// <summary>
        /// The configuration of the query string. See `QueryStringConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionQueryStringConfig? QueryStringConfig;
        /// <summary>
        /// The configuration of the header field. See `ResponseHeaderConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionResponseHeaderConfig? ResponseHeaderConfig;
        /// <summary>
        /// The configuration of the header field. See `ResponseStatusCodeConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionResponseStatusCodeConfig? ResponseStatusCodeConfig;
        /// <summary>
        /// The Based on source IP traffic matching. Required and valid when Type is SourceIP. See `SourceIpConfig` below.
        /// </summary>
        public readonly Outputs.RuleRuleConditionSourceIpConfig? SourceIpConfig;
        /// <summary>
        /// The type of the forwarding rule. Valid values:
        /// - `Host`: Requests are forwarded based on hosts.
        /// - `Path`: Requests are forwarded based on the path.
        /// - `Header`: Requests are forwarded based on the HTTP header field.
        /// - `QueryString`: Requests are forwarded based on the query string.
        /// - `Method`: Request are forwarded based on the request method.
        /// - `Cookie`: Requests are forwarded based on the cookie.
        /// - `SourceIp`: Requests are forwarded based on the source ip. **NOTE:** The `SourceIp` option is available since 1.162.0.
        /// - `ResponseHeader`: Response header. **NOTE:** The `SourceIp` option is available since 1.213.1.
        /// - `ResponseStatusCode`: Response status code. **NOTE:** The `SourceIp` option is available since 1.213.1.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private RuleRuleCondition(
            Outputs.RuleRuleConditionCookieConfig? cookieConfig,

            Outputs.RuleRuleConditionHeaderConfig? headerConfig,

            Outputs.RuleRuleConditionHostConfig? hostConfig,

            Outputs.RuleRuleConditionMethodConfig? methodConfig,

            Outputs.RuleRuleConditionPathConfig? pathConfig,

            Outputs.RuleRuleConditionQueryStringConfig? queryStringConfig,

            Outputs.RuleRuleConditionResponseHeaderConfig? responseHeaderConfig,

            Outputs.RuleRuleConditionResponseStatusCodeConfig? responseStatusCodeConfig,

            Outputs.RuleRuleConditionSourceIpConfig? sourceIpConfig,

            string type)
        {
            CookieConfig = cookieConfig;
            HeaderConfig = headerConfig;
            HostConfig = hostConfig;
            MethodConfig = methodConfig;
            PathConfig = pathConfig;
            QueryStringConfig = queryStringConfig;
            ResponseHeaderConfig = responseHeaderConfig;
            ResponseStatusCodeConfig = responseStatusCodeConfig;
            SourceIpConfig = sourceIpConfig;
            Type = type;
        }
    }
}
