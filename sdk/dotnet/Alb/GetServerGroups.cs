// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Alb
{
    public static class GetServerGroups
    {
        /// <summary>
        /// This data source provides the Alb Server Groups of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.131.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var @default = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "192.168.0.0/16",
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = @default.Id,
        ///         ServerGroupName = name,
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetServerGroups.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServerGroup.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albServerGroupId0"] = ids.Apply(getServerGroupsResult =&gt; getServerGroupsResult.Groups[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerGroupsResult> InvokeAsync(GetServerGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerGroupsResult>("alicloud:alb/getServerGroups:getServerGroups", args ?? new GetServerGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Alb Server Groups of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.131.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var @default = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "192.168.0.0/16",
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = @default.Id,
        ///         ServerGroupName = name,
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetServerGroups.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServerGroup.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albServerGroupId0"] = ids.Apply(getServerGroupsResult =&gt; getServerGroupsResult.Groups[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerGroupsResult> Invoke(GetServerGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupsResult>("alicloud:alb/getServerGroups:getServerGroups", args ?? new GetServerGroupsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Alb Server Groups of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available since v1.131.0.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var @default = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "192.168.0.0/16",
        ///     });
        /// 
        ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
        ///     {
        ///         Protocol = "HTTP",
        ///         VpcId = @default.Id,
        ///         ServerGroupName = name,
        ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
        ///         {
        ///             HealthCheckEnabled = false,
        ///         },
        ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///         {
        ///             StickySessionEnabled = false,
        ///         },
        ///     });
        /// 
        ///     var ids = AliCloud.Alb.GetServerGroups.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultServerGroup.Id,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["albServerGroupId0"] = ids.Apply(getServerGroupsResult =&gt; getServerGroupsResult.Groups[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerGroupsResult> Invoke(GetServerGroupsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupsResult>("alicloud:alb/getServerGroups:getServerGroups", args ?? new GetServerGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to query the detailed list of resource attributes. Default value: `False`.
        /// </summary>
        [Input("enableDetails")]
        public bool? EnableDetails { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Server Group IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Server Group name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public string? ResourceGroupId { get; set; }

        [Input("serverGroupIds")]
        private List<string>? _serverGroupIds;

        /// <summary>
        /// The server group IDs.
        /// </summary>
        public List<string> ServerGroupIds
        {
            get => _serverGroupIds ?? (_serverGroupIds = new List<string>());
            set => _serverGroupIds = value;
        }

        /// <summary>
        /// The names of the Server Group.
        /// </summary>
        [Input("serverGroupName")]
        public string? ServerGroupName { get; set; }

        /// <summary>
        /// The status of the Server Group. Valid values: `Available`, `Configuring`, `Provisioning`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the virtual private cloud (VPC).
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetServerGroupsArgs()
        {
        }
        public static new GetServerGroupsArgs Empty => new GetServerGroupsArgs();
    }

    public sealed class GetServerGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to query the detailed list of resource attributes. Default value: `False`.
        /// </summary>
        [Input("enableDetails")]
        public Input<bool>? EnableDetails { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Server Group IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Server Group name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("serverGroupIds")]
        private InputList<string>? _serverGroupIds;

        /// <summary>
        /// The server group IDs.
        /// </summary>
        public InputList<string> ServerGroupIds
        {
            get => _serverGroupIds ?? (_serverGroupIds = new InputList<string>());
            set => _serverGroupIds = value;
        }

        /// <summary>
        /// The names of the Server Group.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The status of the Server Group. Valid values: `Available`, `Configuring`, `Provisioning`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the virtual private cloud (VPC).
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetServerGroupsInvokeArgs()
        {
        }
        public static new GetServerGroupsInvokeArgs Empty => new GetServerGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerGroupsResult
    {
        public readonly bool? EnableDetails;
        /// <summary>
        /// A list of Server Groups. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of Server Group names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly string? ResourceGroupId;
        public readonly ImmutableArray<string> ServerGroupIds;
        /// <summary>
        /// The name of the Server Group.
        /// </summary>
        public readonly string? ServerGroupName;
        /// <summary>
        /// The status of the server.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The tags of the resource. **Note:** `Tags` takes effect only if `EnableDetails` is set to `True`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetServerGroupsResult(
            bool? enableDetails,

            ImmutableArray<Outputs.GetServerGroupsGroupResult> groups,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            string? resourceGroupId,

            ImmutableArray<string> serverGroupIds,

            string? serverGroupName,

            string? status,

            ImmutableDictionary<string, string>? tags,

            string? vpcId)
        {
            EnableDetails = enableDetails;
            Groups = groups;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            ResourceGroupId = resourceGroupId;
            ServerGroupIds = serverGroupIds;
            ServerGroupName = serverGroupName;
            Status = status;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
