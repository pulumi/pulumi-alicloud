// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gwlb
{
    /// <summary>
    /// Provides a GWLB Server Group resource.
    /// 
    /// For information about GWLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.234.0.
    /// 
    /// ## Import
    /// 
    /// GWLB Server Group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:gwlb/serverGroup:ServerGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:gwlb/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connected graceful interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Output("connectionDrainConfig")]
        public Output<Outputs.ServerGroupConnectionDrainConfig> ConnectionDrainConfig { get; private set; } = null!;

        /// <summary>
        /// The creation time of the server group.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to perform only a dry run, without performing the actual request.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Health check configurations. See `health_check_config` below.
        /// </summary>
        [Output("healthCheckConfig")]
        public Output<Outputs.ServerGroupHealthCheckConfig> HealthCheckConfig { get; private set; } = null!;

        /// <summary>
        /// Backend Protocol. Value:
        /// 
        /// - *GENEVE (default)**.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Scheduling algorithm. Value:
        /// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
        /// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
        /// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// The server group name.
        /// 
        /// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
        /// </summary>
        [Output("serverGroupName")]
        public Output<string?> ServerGroupName { get; private set; } = null!;

        /// <summary>
        /// The server group type. Value:
        /// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
        /// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
        /// </summary>
        [Output("serverGroupType")]
        public Output<string> ServerGroupType { get; private set; } = null!;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ServerGroupServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// Server group status. Value:
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// List of resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The VPC instance ID.
        /// 
        /// &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:gwlb/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:gwlb/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connected graceful interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Input("connectionDrainConfig")]
        public Input<Inputs.ServerGroupConnectionDrainConfigArgs>? ConnectionDrainConfig { get; set; }

        /// <summary>
        /// Specifies whether to perform only a dry run, without performing the actual request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Health check configurations. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.ServerGroupHealthCheckConfigArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// Backend Protocol. Value:
        /// 
        /// - *GENEVE (default)**.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Scheduling algorithm. Value:
        /// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
        /// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
        /// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The server group name.
        /// 
        /// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The server group type. Value:
        /// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
        /// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerArgs>? _servers;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        public InputList<Inputs.ServerGroupServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerArgs>());
            set => _servers = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// List of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC instance ID.
        /// 
        /// &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connected graceful interrupt configuration. See `connection_drain_config` below.
        /// </summary>
        [Input("connectionDrainConfig")]
        public Input<Inputs.ServerGroupConnectionDrainConfigGetArgs>? ConnectionDrainConfig { get; set; }

        /// <summary>
        /// The creation time of the server group.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Specifies whether to perform only a dry run, without performing the actual request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Health check configurations. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.ServerGroupHealthCheckConfigGetArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// Backend Protocol. Value:
        /// 
        /// - *GENEVE (default)**.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Scheduling algorithm. Value:
        /// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
        /// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
        /// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The server group name.
        /// 
        /// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The server group type. Value:
        /// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
        /// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerGetArgs>? _servers;

        /// <summary>
        /// List of servers. See `servers` below.
        /// </summary>
        public InputList<Inputs.ServerGroupServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Server group status. Value:
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// List of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC instance ID.
        /// 
        /// &gt; **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
