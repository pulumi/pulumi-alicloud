// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gwlb.Inputs
{

    public sealed class ServerGroupHealthCheckConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend server port that is used for health checks.
        /// 
        /// Valid values: `1` to `65535`.
        /// 
        /// Default value: `80`.
        /// </summary>
        [Input("healthCheckConnectPort")]
        public Input<int>? HealthCheckConnectPort { get; set; }

        /// <summary>
        /// The maximum timeout period of a health check response.
        /// 
        /// Unit: seconds
        /// 
        /// Valid values: `1` to `300`.
        /// 
        /// Default value: `5`.
        /// </summary>
        [Input("healthCheckConnectTimeout")]
        public Input<int>? HealthCheckConnectTimeout { get; set; }

        /// <summary>
        /// The domain name that you want to use for health checks. Valid values:
        /// 
        /// *   **$SERVER_IP** (default): the private IP address of a backend server.
        /// </summary>
        [Input("healthCheckDomain")]
        public Input<string>? HealthCheckDomain { get; set; }

        /// <summary>
        /// Specifies whether to enable the health check feature. Valid values:
        /// </summary>
        [Input("healthCheckEnabled")]
        public Input<bool>? HealthCheckEnabled { get; set; }

        [Input("healthCheckHttpCodes")]
        private InputList<string>? _healthCheckHttpCodes;

        /// <summary>
        /// The HTTP status codes that the system returns for health checks.
        /// </summary>
        public InputList<string> HealthCheckHttpCodes
        {
            get => _healthCheckHttpCodes ?? (_healthCheckHttpCodes = new InputList<string>());
            set => _healthCheckHttpCodes = value;
        }

        /// <summary>
        /// The interval at which health checks are performed.
        /// 
        /// Unit: seconds
        /// 
        /// Valid values: `1` to `50`.
        /// 
        /// Default value: `10`.
        /// </summary>
        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        /// <summary>
        /// The URL that is used for health checks.
        /// 
        /// The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] @ $ ^ : ' , + =
        /// 
        /// The URL must start with a forward slash (/).
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// The protocol that is used for health checks. Valid values:
        /// 
        /// - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
        /// - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
        /// </summary>
        [Input("healthCheckProtocol")]
        public Input<string>? HealthCheckProtocol { get; set; }

        /// <summary>
        /// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
        /// 
        /// Valid values: `2` to `10`.
        /// 
        /// Default value: `2`.
        /// </summary>
        [Input("healthyThreshold")]
        public Input<int>? HealthyThreshold { get; set; }

        /// <summary>
        /// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
        /// 
        /// Valid values: `2` to `10`.
        /// 
        /// Default value: `2`.
        /// </summary>
        [Input("unhealthyThreshold")]
        public Input<int>? UnhealthyThreshold { get; set; }

        public ServerGroupHealthCheckConfigArgs()
        {
        }
        public static new ServerGroupHealthCheckConfigArgs Empty => new ServerGroupHealthCheckConfigArgs();
    }
}
