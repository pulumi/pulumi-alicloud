// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gwlb.Outputs
{

    [OutputType]
    public sealed class ServerGroupHealthCheckConfig
    {
        /// <summary>
        /// The backend server port that is used for health checks.
        /// 
        /// Valid values: `1` to `65535`.
        /// 
        /// Default value: `80`.
        /// </summary>
        public readonly int? HealthCheckConnectPort;
        /// <summary>
        /// The maximum timeout period of a health check response.
        /// 
        /// Unit: seconds
        /// 
        /// Valid values: `1` to `300`.
        /// 
        /// Default value: `5`.
        /// </summary>
        public readonly int? HealthCheckConnectTimeout;
        /// <summary>
        /// The domain name that you want to use for health checks. Valid values:
        /// 
        /// *   **$SERVER_IP** (default): the private IP address of a backend server.
        /// </summary>
        public readonly string? HealthCheckDomain;
        /// <summary>
        /// Specifies whether to enable the health check feature. Valid values:
        /// </summary>
        public readonly bool? HealthCheckEnabled;
        /// <summary>
        /// The HTTP status codes that the system returns for health checks.
        /// </summary>
        public readonly ImmutableArray<string> HealthCheckHttpCodes;
        /// <summary>
        /// The interval at which health checks are performed.
        /// 
        /// Unit: seconds
        /// 
        /// Valid values: `1` to `50`.
        /// 
        /// Default value: `10`.
        /// </summary>
        public readonly int? HealthCheckInterval;
        /// <summary>
        /// The URL that is used for health checks.
        /// 
        /// The URL must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&amp;). The URL can also contain the following extended characters: \_ ; ~ ! ( ) \* \[ ] @ $ ^ : ' , + =
        /// 
        /// The URL must start with a forward slash (/).
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only if you set `HealthCheckProtocol` to `HTTP`.
        /// </summary>
        public readonly string? HealthCheckPath;
        /// <summary>
        /// The protocol that is used for health checks. Valid values:
        /// 
        /// - `TCP`: TCP health checks send TCP SYN packets to a backend server to check whether the port of the backend server is reachable.
        /// - `HTTP`: HTTP health checks simulate a process that uses a web browser to access resources by sending HEAD or GET requests to an instance. These requests are used to check whether the instance is healthy.
        /// </summary>
        public readonly string? HealthCheckProtocol;
        /// <summary>
        /// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
        /// 
        /// Valid values: `2` to `10`.
        /// 
        /// Default value: `2`.
        /// </summary>
        public readonly int? HealthyThreshold;
        /// <summary>
        /// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
        /// 
        /// Valid values: `2` to `10`.
        /// 
        /// Default value: `2`.
        /// </summary>
        public readonly int? UnhealthyThreshold;

        [OutputConstructor]
        private ServerGroupHealthCheckConfig(
            int? healthCheckConnectPort,

            int? healthCheckConnectTimeout,

            string? healthCheckDomain,

            bool? healthCheckEnabled,

            ImmutableArray<string> healthCheckHttpCodes,

            int? healthCheckInterval,

            string? healthCheckPath,

            string? healthCheckProtocol,

            int? healthyThreshold,

            int? unhealthyThreshold)
        {
            HealthCheckConnectPort = healthCheckConnectPort;
            HealthCheckConnectTimeout = healthCheckConnectTimeout;
            HealthCheckDomain = healthCheckDomain;
            HealthCheckEnabled = healthCheckEnabled;
            HealthCheckHttpCodes = healthCheckHttpCodes;
            HealthCheckInterval = healthCheckInterval;
            HealthCheckPath = healthCheckPath;
            HealthCheckProtocol = healthCheckProtocol;
            HealthyThreshold = healthyThreshold;
            UnhealthyThreshold = unhealthyThreshold;
        }
    }
}
