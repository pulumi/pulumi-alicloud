// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gwlb.Outputs
{

    [OutputType]
    public sealed class ServerGroupHealthCheckConfig
    {
        /// <summary>
        /// The port of the backend server used for health check.
        /// 
        /// Value range: **1 to 65535**.
        /// 
        /// Default value: `80`.
        /// </summary>
        public readonly int? HealthCheckConnectPort;
        /// <summary>
        /// The maximum timeout period for health check responses.
        /// 
        /// Unit: seconds.
        /// 
        /// Value range: **1 to 300**.
        /// 
        /// Default value: `5`.
        /// </summary>
        public readonly int? HealthCheckConnectTimeout;
        /// <summary>
        /// The domain name used for health checks. Value:
        /// - **$SERVER_IP (default)**: Use the internal IP address of the backend server.
        /// </summary>
        public readonly string? HealthCheckDomain;
        /// <summary>
        /// Whether to enable health check. Value:
        /// - **true (default)**: enabled.
        /// </summary>
        public readonly bool? HealthCheckEnabled;
        /// <summary>
        /// Health status return code list.
        /// </summary>
        public readonly ImmutableArray<string> HealthCheckHttpCodes;
        /// <summary>
        /// The time interval of the health check.
        /// 
        /// Unit: seconds.
        /// 
        /// Value range: **1~50**.
        /// 
        /// Default value: `10`.
        /// </summary>
        public readonly int? HealthCheckInterval;
        /// <summary>
        /// Health check path.
        /// 
        /// It can be 1 to 80 characters in length and can only use upper and lower case letters, digits, dashes (-), forward slashes (/), half-width periods (.), percent signs (%), and half-width question marks (?), Pound sign (#) and and(&amp;) and extended character set_;~! ()*[]@$^: ',+ =
        /// 
        /// Must start with a forward slash (/).
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only when the HealthCheckProtocol is HTTP.
        /// </summary>
        public readonly string? HealthCheckPath;
        /// <summary>
        /// Health check protocol, value:
        /// - `TCP` (default): Sends a SYN handshake packet to check whether the server port is alive.
        /// - `HTTP`: Sends a GET request to simulate the access behavior of the browser to check whether the server application is healthy.
        /// </summary>
        public readonly string? HealthCheckProtocol;
        /// <summary>
        /// After the number of consecutive successful health checks, the health check status of the backend server is determined as successful from failed.
        /// 
        /// Value range: **2 to 10**.
        /// 
        /// Default value: `2`.
        /// </summary>
        public readonly int? HealthyThreshold;
        /// <summary>
        /// The number of consecutive failed health checks that determine the health check status of the backend server from success to failure.
        /// 
        /// Value range: **2 to 10**.
        /// 
        /// Default value: `2`.
        /// </summary>
        public readonly int? UnhealthyThreshold;

        [OutputConstructor]
        private ServerGroupHealthCheckConfig(
            int? healthCheckConnectPort,

            int? healthCheckConnectTimeout,

            string? healthCheckDomain,

            bool? healthCheckEnabled,

            ImmutableArray<string> healthCheckHttpCodes,

            int? healthCheckInterval,

            string? healthCheckPath,

            string? healthCheckProtocol,

            int? healthyThreshold,

            int? unhealthyThreshold)
        {
            HealthCheckConnectPort = healthCheckConnectPort;
            HealthCheckConnectTimeout = healthCheckConnectTimeout;
            HealthCheckDomain = healthCheckDomain;
            HealthCheckEnabled = healthCheckEnabled;
            HealthCheckHttpCodes = healthCheckHttpCodes;
            HealthCheckInterval = healthCheckInterval;
            HealthCheckPath = healthCheckPath;
            HealthCheckProtocol = healthCheckProtocol;
            HealthyThreshold = healthyThreshold;
            UnhealthyThreshold = unhealthyThreshold;
        }
    }
}
