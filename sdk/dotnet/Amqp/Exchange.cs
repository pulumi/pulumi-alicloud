// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Amqp
{
    /// <summary>
    /// Provides a RabbitMQ (AMQP) Exchange resource.
    /// 
    /// For information about RabbitMQ (AMQP) Exchange and how to use it, see [What is Exchange](https://www.alibabacloud.com/help/en/message-queue-for-rabbitmq/latest/createexchange).
    /// 
    /// &gt; **NOTE:** Available since v1.128.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var virtualHostName = config.Get("virtualHostName") ?? "/";
    ///     var createInstance = new AliCloud.Amqp.Instance("CreateInstance", new()
    ///     {
    ///         RenewalDuration = 1,
    ///         MaxTps = "3000",
    ///         PeriodCycle = "Month",
    ///         MaxConnections = 2000,
    ///         SupportEip = true,
    ///         AutoRenew = false,
    ///         RenewalStatus = "AutoRenewal",
    ///         Period = 12,
    ///         InstanceName = name,
    ///         SupportTracing = false,
    ///         PaymentType = "Subscription",
    ///         RenewalDurationUnit = "Month",
    ///         InstanceType = "enterprise",
    ///         QueueCapacity = "200",
    ///         MaxEipTps = "128",
    ///         StorageSize = "0",
    ///     });
    /// 
    ///     var @default = new AliCloud.Amqp.Exchange("default", new()
    ///     {
    ///         VirtualHostName = virtualHostName,
    ///         InstanceId = createInstance.Id,
    ///         Internal = true,
    ///         AutoDeleteState = false,
    ///         ExchangeName = name,
    ///         ExchangeType = "X_CONSISTENT_HASH",
    ///         AlternateExchange = "bakExchange",
    ///         XDelayedType = "DIRECT",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RabbitMQ (AMQP) Exchange can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:amqp/exchange:Exchange example &lt;instance_id&gt;:&lt;virtual_host_name&gt;:&lt;exchange_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:amqp/exchange:Exchange")]
    public partial class Exchange : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
        /// </summary>
        [Output("alternateExchange")]
        public Output<string?> AlternateExchange { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to automatically delete the exchange. Valid values:
        /// </summary>
        [Output("autoDeleteState")]
        public Output<bool> AutoDeleteState { get; private set; } = null!;

        /// <summary>
        /// CreateTime
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of the exchange that you want to create. The exchange name must meet the following conventions:
        /// 
        /// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
        /// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
        /// </summary>
        [Output("exchangeName")]
        public Output<string> ExchangeName { get; private set; } = null!;

        /// <summary>
        /// The Exchange type. Value:
        /// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
        /// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
        /// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
        /// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
        /// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
        /// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
        /// </summary>
        [Output("exchangeType")]
        public Output<string> ExchangeType { get; private set; } = null!;

        /// <summary>
        /// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the exchange is an internal exchange. Valid values:
        /// </summary>
        [Output("internal")]
        public Output<bool> Internal { get; private set; } = null!;

        /// <summary>
        /// The name of the vhost to which the exchange that you want to create belongs.
        /// </summary>
        [Output("virtualHostName")]
        public Output<string> VirtualHostName { get; private set; } = null!;

        /// <summary>
        /// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
        /// </summary>
        [Output("xDelayedType")]
        public Output<string?> XDelayedType { get; private set; } = null!;


        /// <summary>
        /// Create a Exchange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Exchange(string name, ExchangeArgs args, CustomResourceOptions? options = null)
            : base("alicloud:amqp/exchange:Exchange", name, args ?? new ExchangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Exchange(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:amqp/exchange:Exchange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Exchange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Exchange Get(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
        {
            return new Exchange(name, id, state, options);
        }
    }

    public sealed class ExchangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
        /// </summary>
        [Input("alternateExchange")]
        public Input<string>? AlternateExchange { get; set; }

        /// <summary>
        /// Specifies whether to automatically delete the exchange. Valid values:
        /// </summary>
        [Input("autoDeleteState", required: true)]
        public Input<bool> AutoDeleteState { get; set; } = null!;

        /// <summary>
        /// The name of the exchange that you want to create. The exchange name must meet the following conventions:
        /// 
        /// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
        /// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
        /// </summary>
        [Input("exchangeName", required: true)]
        public Input<string> ExchangeName { get; set; } = null!;

        /// <summary>
        /// The Exchange type. Value:
        /// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
        /// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
        /// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
        /// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
        /// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
        /// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
        /// </summary>
        [Input("exchangeType", required: true)]
        public Input<string> ExchangeType { get; set; } = null!;

        /// <summary>
        /// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies whether the exchange is an internal exchange. Valid values:
        /// </summary>
        [Input("internal", required: true)]
        public Input<bool> Internal { get; set; } = null!;

        /// <summary>
        /// The name of the vhost to which the exchange that you want to create belongs.
        /// </summary>
        [Input("virtualHostName", required: true)]
        public Input<string> VirtualHostName { get; set; } = null!;

        /// <summary>
        /// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
        /// </summary>
        [Input("xDelayedType")]
        public Input<string>? XDelayedType { get; set; }

        public ExchangeArgs()
        {
        }
        public static new ExchangeArgs Empty => new ExchangeArgs();
    }

    public sealed class ExchangeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
        /// </summary>
        [Input("alternateExchange")]
        public Input<string>? AlternateExchange { get; set; }

        /// <summary>
        /// Specifies whether to automatically delete the exchange. Valid values:
        /// </summary>
        [Input("autoDeleteState")]
        public Input<bool>? AutoDeleteState { get; set; }

        /// <summary>
        /// CreateTime
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// The name of the exchange that you want to create. The exchange name must meet the following conventions:
        /// 
        /// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
        /// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
        /// </summary>
        [Input("exchangeName")]
        public Input<string>? ExchangeName { get; set; }

        /// <summary>
        /// The Exchange type. Value:
        /// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
        /// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
        /// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
        /// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
        /// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
        /// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
        /// </summary>
        [Input("exchangeType")]
        public Input<string>? ExchangeType { get; set; }

        /// <summary>
        /// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies whether the exchange is an internal exchange. Valid values:
        /// </summary>
        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        /// <summary>
        /// The name of the vhost to which the exchange that you want to create belongs.
        /// </summary>
        [Input("virtualHostName")]
        public Input<string>? VirtualHostName { get; set; }

        /// <summary>
        /// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
        /// </summary>
        [Input("xDelayedType")]
        public Input<string>? XDelayedType { get; set; }

        public ExchangeState()
        {
        }
        public static new ExchangeState Empty => new ExchangeState();
    }
}
