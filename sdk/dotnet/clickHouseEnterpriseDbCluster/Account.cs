// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.clickHouseEnterpriseDbCluster
{
    /// <summary>
    /// Provides a Click House Enterprise Db Cluster Account resource.
    /// 
    /// Clickhouse enterprise instance account.
    /// 
    /// For information about Click House Enterprise Db Cluster Account and how to use it, see [What is Enterprise Db Cluster Account](https://next.api.alibabacloud.com/document/clickhouse/2023-05-22/CreateAccount).
    /// 
    /// &gt; **NOTE:** Available since v1.247.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var regionId = config.Get("regionId") ?? "cn-beijing";
    ///     var vswIpRangeI = config.Get("vswIpRangeI") ?? "172.16.1.0/24";
    ///     var vpcIpRange = config.Get("vpcIpRange") ?? "172.16.0.0/12";
    ///     var zoneIdI = config.Get("zoneIdI") ?? "cn-beijing-i";
    ///     var defaultktKLuM = new AliCloud.Vpc.Network("defaultktKLuM", new()
    ///     {
    ///         CidrBlock = vpcIpRange,
    ///     });
    /// 
    ///     var defaultTQWN3k = new AliCloud.Vpc.Switch("defaultTQWN3k", new()
    ///     {
    ///         VpcId = defaultktKLuM.Id,
    ///         ZoneId = zoneIdI,
    ///         CidrBlock = vswIpRangeI,
    ///     });
    /// 
    ///     var defaultWrovOd = new AliCloud.ClickHouseEnterpriseDbCluster.ClickHouseEnterpriseDbCluster("defaultWrovOd", new()
    ///     {
    ///         ZoneId = zoneIdI,
    ///         VpcId = defaultktKLuM.Id,
    ///         ScaleMin = "8",
    ///         ScaleMax = "16",
    ///         VswitchId = defaultTQWN3k.Id,
    ///     });
    /// 
    ///     var @default = new AliCloud.ClickHouseEnterpriseDbCluster.Account("default", new()
    ///     {
    ///         AccountValue = "abc",
    ///         Description = "example_desc",
    ///         DbInstanceId = defaultWrovOd.Id,
    ///         AccountType = "NormalAccount",
    ///         Password = "abc123456!",
    ///         DmlAuthSetting = new AliCloud.clickHouseEnterpriseDbCluster.Inputs.AccountDmlAuthSettingArgs
    ///         {
    ///             DmlAuthority = 0,
    ///             DdlAuthority = true,
    ///             AllowDictionaries = new[]
    ///             {
    ///                 "*",
    ///             },
    ///             AllowDatabases = new[]
    ///             {
    ///                 "*",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Click House Enterprise Db Cluster Account can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:clickhouseenterprisedbcluster/account:Account example &lt;db_instance_id&gt;:&lt;account&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:clickhouseenterprisedbcluster/account:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the database account.
        /// </summary>
        [Output("account")]
        public Output<string> AccountValue { get; private set; } = null!;

        /// <summary>
        /// The type of the database account. Valid values:
        /// - `NormalAccount`: Normal account number.
        /// - `SuperAccount`: The privileged account.
        /// </summary>
        [Output("accountType")]
        public Output<string> AccountType { get; private set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// Note information.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Authorization information. See `dml_auth_setting` below.
        /// </summary>
        [Output("dmlAuthSetting")]
        public Output<Outputs.AccountDmlAuthSetting?> DmlAuthSetting { get; private set; } = null!;

        /// <summary>
        /// Database account password. Set the following rules.
        /// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
        /// - Oh-! @#$%^&amp; *()_+-= is a special character.
        /// - Length is 8~32 characters.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs args, CustomResourceOptions? options = null)
            : base("alicloud:clickhouseenterprisedbcluster/account:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:clickhouseenterprisedbcluster/account:Account", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
        {
            return new Account(name, id, state, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the database account.
        /// </summary>
        [Input("account", required: true)]
        public Input<string> AccountValue { get; set; } = null!;

        /// <summary>
        /// The type of the database account. Valid values:
        /// - `NormalAccount`: Normal account number.
        /// - `SuperAccount`: The privileged account.
        /// </summary>
        [Input("accountType", required: true)]
        public Input<string> AccountType { get; set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("dbInstanceId", required: true)]
        public Input<string> DbInstanceId { get; set; } = null!;

        /// <summary>
        /// Note information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Authorization information. See `dml_auth_setting` below.
        /// </summary>
        [Input("dmlAuthSetting")]
        public Input<Inputs.AccountDmlAuthSettingArgs>? DmlAuthSetting { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Database account password. Set the following rules.
        /// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
        /// - Oh-! @#$%^&amp; *()_+-= is a special character.
        /// - Length is 8~32 characters.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AccountArgs()
        {
        }
        public static new AccountArgs Empty => new AccountArgs();
    }

    public sealed class AccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the database account.
        /// </summary>
        [Input("account")]
        public Input<string>? AccountValue { get; set; }

        /// <summary>
        /// The type of the database account. Valid values:
        /// - `NormalAccount`: Normal account number.
        /// - `SuperAccount`: The privileged account.
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// Note information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Authorization information. See `dml_auth_setting` below.
        /// </summary>
        [Input("dmlAuthSetting")]
        public Input<Inputs.AccountDmlAuthSettingGetArgs>? DmlAuthSetting { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Database account password. Set the following rules.
        /// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
        /// - Oh-! @#$%^&amp; *()_+-= is a special character.
        /// - Length is 8~32 characters.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AccountState()
        {
        }
        public static new AccountState Empty => new AccountState();
    }
}
