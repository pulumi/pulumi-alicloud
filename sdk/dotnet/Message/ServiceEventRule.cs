// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Message
{
    /// <summary>
    /// Provides a Message Service Event Rule resource.
    /// 
    /// For information about Message Service Event Rule and how to use it, see [What is Event Rule](https://next.api.alibabacloud.com/document/Mns-open/2022-01-19/CreateEventRule).
    /// 
    /// &gt; **NOTE:** Available since v1.255.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var queueName = config.Get("queueName") ?? "tf-exampe-topic2queue";
    ///     var ruleName = config.Get("ruleName") ?? "tf-exampe-topic-1";
    ///     var topicName = config.Get("topicName") ?? "tf-exampe-topic2queue";
    ///     var createTopic = new AliCloud.Message.ServiceTopic("CreateTopic", new()
    ///     {
    ///         MaxMessageSize = 65536,
    ///         TopicName = topicName,
    ///         LoggingEnabled = false,
    ///     });
    /// 
    ///     var createQueue = new AliCloud.Message.ServiceQueue("CreateQueue", new()
    ///     {
    ///         DelaySeconds = 2,
    ///         PollingWaitSeconds = 2,
    ///         MessageRetentionPeriod = 566,
    ///         MaximumMessageSize = 1123,
    ///         VisibilityTimeout = 30,
    ///         QueueName = queueName,
    ///         LoggingEnabled = false,
    ///     });
    /// 
    ///     var createSub = new AliCloud.Message.ServiceSubscription("CreateSub", new()
    ///     {
    ///         PushType = "queue",
    ///         NotifyStrategy = "BACKOFF_RETRY",
    ///         NotifyContentFormat = "SIMPLIFIED",
    ///         SubscriptionName = "RDK-example-sub",
    ///         FilterTag = "important",
    ///         TopicName = createTopic.TopicName,
    ///         Endpoint = Std.Format.Invoke(new()
    ///         {
    ///             Input = "acs:mns:cn-hangzhou:1511928242963727:/queues/%s",
    ///             Args = new[]
    ///             {
    ///                 createQueue.Id,
    ///             },
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    ///     var @default = new AliCloud.Message.ServiceEventRule("default", new()
    ///     {
    ///         EventTypes = new[]
    ///         {
    ///             "ObjectCreated:PutObject",
    ///         },
    ///         MatchRules = new[]
    ///         {
    ///             new[]
    ///             {
    ///                 new AliCloud.Message.Inputs.ServiceEventRuleMatchRuleArgs
    ///                 {
    ///                     Suffix = "",
    ///                     MatchState = "true",
    ///                     Name = "acs:oss:cn-hangzhou:1511928242963727:accccx",
    ///                     Prefix = "",
    ///                 },
    ///             },
    ///         },
    ///         Endpoint = new AliCloud.Message.Inputs.ServiceEventRuleEndpointArgs
    ///         {
    ///             EndpointValue = createSub.TopicName,
    ///             EndpointType = "topic",
    ///         },
    ///         RuleName = ruleName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Message Service Event Rule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:message/serviceEventRule:ServiceEventRule example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:message/serviceEventRule:ServiceEventRule")]
    public partial class ServiceEventRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
        /// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
        /// </summary>
        [Output("deliveryMode")]
        public Output<string> DeliveryMode { get; private set; } = null!;

        /// <summary>
        /// Message Receiving Terminal Endpoint Object. See `endpoint` below.
        /// </summary>
        [Output("endpoint")]
        public Output<Outputs.ServiceEventRuleEndpoint?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Event Type List
        /// </summary>
        [Output("eventTypes")]
        public Output<ImmutableArray<string>> EventTypes { get; private set; } = null!;

        /// <summary>
        /// Matching rules, or relationships between multiple rules. See `match_rules` below.
        /// </summary>
        [Output("matchRules")]
        public Output<ImmutableArray<ImmutableArray<Outputs.ServiceEventRuleMatchRule>>> MatchRules { get; private set; } = null!;

        /// <summary>
        /// The event notification rule name.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceEventRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceEventRule(string name, ServiceEventRuleArgs args, CustomResourceOptions? options = null)
            : base("alicloud:message/serviceEventRule:ServiceEventRule", name, args ?? new ServiceEventRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceEventRule(string name, Input<string> id, ServiceEventRuleState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:message/serviceEventRule:ServiceEventRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceEventRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceEventRule Get(string name, Input<string> id, ServiceEventRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceEventRule(name, id, state, options);
        }
    }

    public sealed class ServiceEventRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
        /// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
        /// </summary>
        [Input("deliveryMode")]
        public Input<string>? DeliveryMode { get; set; }

        /// <summary>
        /// Message Receiving Terminal Endpoint Object. See `endpoint` below.
        /// </summary>
        [Input("endpoint")]
        public Input<Inputs.ServiceEventRuleEndpointArgs>? Endpoint { get; set; }

        [Input("eventTypes", required: true)]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// Event Type List
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        [Input("matchRules")]
        private InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleArgs>>? _matchRules;

        /// <summary>
        /// Matching rules, or relationships between multiple rules. See `match_rules` below.
        /// </summary>
        public InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleArgs>> MatchRules
        {
            get => _matchRules ?? (_matchRules = new InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleArgs>>());
            set => _matchRules = value;
        }

        /// <summary>
        /// The event notification rule name.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        public ServiceEventRuleArgs()
        {
        }
        public static new ServiceEventRuleArgs Empty => new ServiceEventRuleArgs();
    }

    public sealed class ServiceEventRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
        /// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
        /// </summary>
        [Input("deliveryMode")]
        public Input<string>? DeliveryMode { get; set; }

        /// <summary>
        /// Message Receiving Terminal Endpoint Object. See `endpoint` below.
        /// </summary>
        [Input("endpoint")]
        public Input<Inputs.ServiceEventRuleEndpointGetArgs>? Endpoint { get; set; }

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// Event Type List
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        [Input("matchRules")]
        private InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleGetArgs>>? _matchRules;

        /// <summary>
        /// Matching rules, or relationships between multiple rules. See `match_rules` below.
        /// </summary>
        public InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleGetArgs>> MatchRules
        {
            get => _matchRules ?? (_matchRules = new InputList<ImmutableArray<Inputs.ServiceEventRuleMatchRuleGetArgs>>());
            set => _matchRules = value;
        }

        /// <summary>
        /// The event notification rule name.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        public ServiceEventRuleState()
        {
        }
        public static new ServiceEventRuleState Empty => new ServiceEventRuleState();
    }
}
