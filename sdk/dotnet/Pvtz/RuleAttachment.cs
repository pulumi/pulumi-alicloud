// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Pvtz
{
    /// <summary>
    /// Provides a Private Zone Rule Attachment resource.
    /// 
    /// For information about Private Zone Rule Attachment and how to use it, see [What is Rule Attachment](https://www.alibabacloud.com/help/en/doc-detail/177601.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.143.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "example_value";
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var @default = AliCloud.Pvtz.GetResolverZones.Invoke(new()
    ///     {
    ///         Status = "NORMAL",
    ///     });
    /// 
    ///     var defaultGetRegions = AliCloud.GetRegions.Invoke(new()
    ///     {
    ///         Current = true,
    ///     });
    /// 
    ///     var defaultNetwork = new List&lt;AliCloud.Vpc.Network&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         defaultNetwork.Add(new AliCloud.Vpc.Network($"default-{range.Value}", new()
    ///         {
    ///             VpcName = name,
    ///             CidrBlock = "172.16.0.0/12",
    ///         }));
    ///     }
    ///     var defaultSwitch = new List&lt;AliCloud.Vpc.Switch&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         defaultSwitch.Add(new AliCloud.Vpc.Switch($"default-{range.Value}", new()
    ///         {
    ///             VpcId = defaultNetwork[2].Id,
    ///             CidrBlock = defaultNetwork[2].CidrBlock.Apply(cidrBlock =&gt; Std.Cidrsubnet.Invoke(new()
    ///             {
    ///                 Input = cidrBlock,
    ///                 Newbits = 8,
    ///                 Netnum = range.Value,
    ///             })).Apply(invoke =&gt; invoke.Result),
    ///             ZoneId = @default.Apply(@default =&gt; @default.Apply(getResolverZonesResult =&gt; getResolverZonesResult.Zones)[range.Value].ZoneId),
    ///         }));
    ///     }
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("default", new()
    ///     {
    ///         VpcId = defaultNetwork[2].Id,
    ///         Name = name,
    ///     });
    /// 
    ///     var defaultEndpoint = new AliCloud.Pvtz.Endpoint("default", new()
    ///     {
    ///         EndpointName = $"{name}-{defaultInteger.Result}",
    ///         SecurityGroupId = defaultSecurityGroup.Id,
    ///         VpcId = defaultNetwork[2].Id,
    ///         VpcRegionId = defaultGetRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id),
    ///         IpConfigs = new[]
    ///         {
    ///             new AliCloud.Pvtz.Inputs.EndpointIpConfigArgs
    ///             {
    ///                 ZoneId = defaultSwitch[0].ZoneId,
    ///                 CidrBlock = defaultSwitch[0].CidrBlock,
    ///                 VswitchId = defaultSwitch[0].Id,
    ///             },
    ///             new AliCloud.Pvtz.Inputs.EndpointIpConfigArgs
    ///             {
    ///                 ZoneId = defaultSwitch[1].ZoneId,
    ///                 CidrBlock = defaultSwitch[1].CidrBlock,
    ///                 VswitchId = defaultSwitch[1].Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultRule = new AliCloud.Pvtz.Rule("default", new()
    ///     {
    ///         EndpointId = defaultEndpoint.Id,
    ///         RuleName = $"{name}-{defaultInteger.Result}",
    ///         Type = "OUTBOUND",
    ///         ZoneName = name,
    ///         ForwardIps = new[]
    ///         {
    ///             new AliCloud.Pvtz.Inputs.RuleForwardIpArgs
    ///             {
    ///                 Ip = "114.114.114.114",
    ///                 Port = 8080,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultRuleAttachment = new AliCloud.Pvtz.RuleAttachment("default", new()
    ///     {
    ///         RuleId = defaultRule.Id,
    ///         Vpcs = new[]
    ///         {
    ///             new AliCloud.Pvtz.Inputs.RuleAttachmentVpcArgs
    ///             {
    ///                 RegionId = defaultGetRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id),
    ///                 VpcId = defaultNetwork[0].Id,
    ///             },
    ///             new AliCloud.Pvtz.Inputs.RuleAttachmentVpcArgs
    ///             {
    ///                 RegionId = defaultGetRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id),
    ///                 VpcId = defaultNetwork[1].Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Private Zone Rule Attachment can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:pvtz/ruleAttachment:RuleAttachment example &lt;rule_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:pvtz/ruleAttachment:RuleAttachment")]
    public partial class RuleAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// The List of the VPC. See `Vpcs` below.
        /// </summary>
        [Output("vpcs")]
        public Output<ImmutableArray<Outputs.RuleAttachmentVpc>> Vpcs { get; private set; } = null!;


        /// <summary>
        /// Create a RuleAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleAttachment(string name, RuleAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:pvtz/ruleAttachment:RuleAttachment", name, args ?? new RuleAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleAttachment(string name, Input<string> id, RuleAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:pvtz/ruleAttachment:RuleAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleAttachment Get(string name, Input<string> id, RuleAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleAttachment(name, id, state, options);
        }
    }

    public sealed class RuleAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Input("ruleId", required: true)]
        public Input<string> RuleId { get; set; } = null!;

        [Input("vpcs", required: true)]
        private InputList<Inputs.RuleAttachmentVpcArgs>? _vpcs;

        /// <summary>
        /// The List of the VPC. See `Vpcs` below.
        /// </summary>
        public InputList<Inputs.RuleAttachmentVpcArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.RuleAttachmentVpcArgs>());
            set => _vpcs = value;
        }

        public RuleAttachmentArgs()
        {
        }
        public static new RuleAttachmentArgs Empty => new RuleAttachmentArgs();
    }

    public sealed class RuleAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.RuleAttachmentVpcGetArgs>? _vpcs;

        /// <summary>
        /// The List of the VPC. See `Vpcs` below.
        /// </summary>
        public InputList<Inputs.RuleAttachmentVpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.RuleAttachmentVpcGetArgs>());
            set => _vpcs = value;
        }

        public RuleAttachmentState()
        {
        }
        public static new RuleAttachmentState Empty => new RuleAttachmentState();
    }
}
