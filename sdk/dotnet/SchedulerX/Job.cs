// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.SchedulerX
{
    /// <summary>
    /// Provides a Schedulerx Job resource.
    /// 
    /// For information about Schedulerx Job and how to use it, see [What is Job](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.240.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var createNameSpace = new AliCloud.SchedulerX.Namespace("CreateNameSpace", new()
    ///     {
    ///         NamespaceName = name,
    ///         Description = name,
    ///     });
    /// 
    ///     var @default = new AliCloud.SchedulerX.AppGroup("default", new()
    ///     {
    ///         MaxJobs = 100,
    ///         MonitorContactsJson = JsonSerializer.Serialize(new[]
    ///         {
    ///             new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["userName"] = "name1",
    ///                 ["userPhone"] = "89756******",
    ///             },
    ///             new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["userName"] = "name2",
    ///                 ["ding"] = "http://www.example.com",
    ///             },
    ///         }),
    ///         DeleteJobs = false,
    ///         AppType = 1,
    ///         NamespaceSource = "schedulerx",
    ///         GroupId = "example-appgroup-pop-autoexample",
    ///         NamespaceName = "default",
    ///         Description = name,
    ///         MonitorConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["sendChannel"] = "sms,ding",
    ///         }),
    ///         AppVersion = "1",
    ///         AppName = "example-appgroup-pop-autoexample",
    ///         Namespace = createNameSpace.NamespaceUid,
    ///         EnableLog = false,
    ///         ScheduleBusyWorkers = false,
    ///     });
    /// 
    ///     var defaultJob = new AliCloud.SchedulerX.Job("default", new()
    ///     {
    ///         Timezone = "GTM+7",
    ///         Status = "Enable",
    ///         MaxAttempt = 0,
    ///         Description = name,
    ///         Parameters = "hello word",
    ///         JobName = name,
    ///         MaxConcurrency = "1",
    ///         TimeConfig = new AliCloud.SchedulerX.Inputs.JobTimeConfigArgs
    ///         {
    ///             DataOffset = 1,
    ///             TimeExpression = "100000",
    ///             TimeType = 3,
    ///             Calendar = "workday",
    ///         },
    ///         MapTaskXattrs = new AliCloud.SchedulerX.Inputs.JobMapTaskXattrsArgs
    ///         {
    ///             TaskMaxAttempt = 1,
    ///             TaskAttemptInterval = 1,
    ///             ConsumerSize = 5,
    ///             QueueSize = 10000,
    ///             DispatcherSize = 5,
    ///             PageSize = 100,
    ///         },
    ///         Namespace = createNameSpace.NamespaceUid,
    ///         GroupId = @default.GroupId,
    ///         JobType = "java",
    ///         JobMonitorInfo = new AliCloud.SchedulerX.Inputs.JobJobMonitorInfoArgs
    ///         {
    ///             ContactInfos = new[]
    ///             {
    ///                 new AliCloud.SchedulerX.Inputs.JobJobMonitorInfoContactInfoArgs
    ///                 {
    ///                     UserPhone = "12345678910",
    ///                     UserName = "tangtao-1",
    ///                     Ding = "https://alidocs.dingtalk.com",
    ///                     UserMail = "12345678@xx.com",
    ///                 },
    ///                 new AliCloud.SchedulerX.Inputs.JobJobMonitorInfoContactInfoArgs
    ///                 {
    ///                     UserPhone = "12345678910",
    ///                     UserName = "tangtao-2",
    ///                     Ding = "https://alidocs.dingtalk.com1",
    ///                     UserMail = "123456789@xx.com",
    ///                 },
    ///             },
    ///             MonitorConfig = new AliCloud.SchedulerX.Inputs.JobJobMonitorInfoMonitorConfigArgs
    ///             {
    ///                 Timeout = 7200,
    ///                 SendChannel = "sms",
    ///                 TimeoutKillEnable = true,
    ///                 TimeoutEnable = true,
    ///                 FailEnable = true,
    ///                 MissWorkerEnable = true,
    ///             },
    ///         },
    ///         ClassName = "com.aliyun.schedulerx.example.processor.SimpleJob",
    ///         NamespaceSource = "schedulerx",
    ///         AttemptInterval = 30,
    ///         FailTimes = 1,
    ///         ExecuteMode = "batch",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Schedulerx Job can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:schedulerx/job:Job example &lt;namespace&gt;:&lt;group_id&gt;:&lt;job_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:schedulerx/job:Job")]
    public partial class Job : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Error retry interval, unit s, default value 30.
        /// </summary>
        [Output("attemptInterval")]
        public Output<int?> AttemptInterval { get; private set; } = null!;

        /// <summary>
        /// Full path of the task interface class.
        /// 
        /// This field is available only when your task is of the Java task type.
        /// </summary>
        [Output("className")]
        public Output<string?> ClassName { get; private set; } = null!;

        /// <summary>
        /// The script code of the python, shell, and go task types.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// Task description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Task execution mode, the possible results are as follows:
        /// </summary>
        [Output("executeMode")]
        public Output<string> ExecuteMode { get; private set; } = null!;

        /// <summary>
        /// Number of consecutive failed alarms
        /// </summary>
        [Output("failTimes")]
        public Output<int?> FailTimes { get; private set; } = null!;

        /// <summary>
        /// The application ID, which is obtained from the **application management** page of the console.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// JobId
        /// </summary>
        [Output("jobId")]
        public Output<int> JobId { get; private set; } = null!;

        /// <summary>
        /// Task monitoring information See `job_monitor_info` below.
        /// </summary>
        [Output("jobMonitorInfo")]
        public Output<Outputs.JobJobMonitorInfo?> JobMonitorInfo { get; private set; } = null!;

        /// <summary>
        /// JobName
        /// </summary>
        [Output("jobName")]
        public Output<string> JobName { get; private set; } = null!;

        /// <summary>
        /// Job Type
        /// </summary>
        [Output("jobType")]
        public Output<string> JobType { get; private set; } = null!;

        /// <summary>
        /// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `map_task_xattrs` below.
        /// </summary>
        [Output("mapTaskXattrs")]
        public Output<Outputs.JobMapTaskXattrs?> MapTaskXattrs { get; private set; } = null!;

        /// <summary>
        /// The maximum number of error retries, which is set based on business requirements. The default value is 0.
        /// </summary>
        [Output("maxAttempt")]
        public Output<int?> MaxAttempt { get; private set; } = null!;

        /// <summary>
        /// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
        /// </summary>
        [Output("maxConcurrency")]
        public Output<string?> MaxConcurrency { get; private set; } = null!;

        /// <summary>
        /// Namespace, which is obtained on the `Namespace` page of the console.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// Special third parties are required.
        /// </summary>
        [Output("namespaceSource")]
        public Output<string?> NamespaceSource { get; private set; } = null!;

        /// <summary>
        /// User-defined parameters, which can be obtained at runtime.
        /// </summary>
        [Output("parameters")]
        public Output<string?> Parameters { get; private set; } = null!;

        /// <summary>
        /// Task status. The values are as follows:
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Success Notification Switch
        /// </summary>
        [Output("successNoticeEnable")]
        public Output<bool?> SuccessNoticeEnable { get; private set; } = null!;

        /// <summary>
        /// Advanced configuration of parallel grid tasks, push model or pull model
        /// </summary>
        [Output("taskDispatchMode")]
        public Output<string?> TaskDispatchMode { get; private set; } = null!;

        /// <summary>
        /// K8s task type custom task template
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;

        /// <summary>
        /// Time configuration information See `time_config` below.
        /// </summary>
        [Output("timeConfig")]
        public Output<Outputs.JobTimeConfig> TimeConfig { get; private set; } = null!;

        /// <summary>
        /// Time Zone
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// Task Extension Field
        /// </summary>
        [Output("xAttrs")]
        public Output<string> XAttrs { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("alicloud:schedulerx/job:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:schedulerx/job:Job", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
        {
            return new Job(name, id, state, options);
        }
    }

    public sealed class JobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Error retry interval, unit s, default value 30.
        /// </summary>
        [Input("attemptInterval")]
        public Input<int>? AttemptInterval { get; set; }

        /// <summary>
        /// Full path of the task interface class.
        /// 
        /// This field is available only when your task is of the Java task type.
        /// </summary>
        [Input("className")]
        public Input<string>? ClassName { get; set; }

        /// <summary>
        /// The script code of the python, shell, and go task types.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Task description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Task execution mode, the possible results are as follows:
        /// </summary>
        [Input("executeMode", required: true)]
        public Input<string> ExecuteMode { get; set; } = null!;

        /// <summary>
        /// Number of consecutive failed alarms
        /// </summary>
        [Input("failTimes")]
        public Input<int>? FailTimes { get; set; }

        /// <summary>
        /// The application ID, which is obtained from the **application management** page of the console.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Task monitoring information See `job_monitor_info` below.
        /// </summary>
        [Input("jobMonitorInfo")]
        public Input<Inputs.JobJobMonitorInfoArgs>? JobMonitorInfo { get; set; }

        /// <summary>
        /// JobName
        /// </summary>
        [Input("jobName", required: true)]
        public Input<string> JobName { get; set; } = null!;

        /// <summary>
        /// Job Type
        /// </summary>
        [Input("jobType", required: true)]
        public Input<string> JobType { get; set; } = null!;

        /// <summary>
        /// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `map_task_xattrs` below.
        /// </summary>
        [Input("mapTaskXattrs")]
        public Input<Inputs.JobMapTaskXattrsArgs>? MapTaskXattrs { get; set; }

        /// <summary>
        /// The maximum number of error retries, which is set based on business requirements. The default value is 0.
        /// </summary>
        [Input("maxAttempt")]
        public Input<int>? MaxAttempt { get; set; }

        /// <summary>
        /// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
        /// </summary>
        [Input("maxConcurrency")]
        public Input<string>? MaxConcurrency { get; set; }

        /// <summary>
        /// Namespace, which is obtained on the `Namespace` page of the console.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// Special third parties are required.
        /// </summary>
        [Input("namespaceSource")]
        public Input<string>? NamespaceSource { get; set; }

        /// <summary>
        /// User-defined parameters, which can be obtained at runtime.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// Task status. The values are as follows:
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Success Notification Switch
        /// </summary>
        [Input("successNoticeEnable")]
        public Input<bool>? SuccessNoticeEnable { get; set; }

        /// <summary>
        /// Advanced configuration of parallel grid tasks, push model or pull model
        /// </summary>
        [Input("taskDispatchMode")]
        public Input<string>? TaskDispatchMode { get; set; }

        /// <summary>
        /// K8s task type custom task template
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// Time configuration information See `time_config` below.
        /// </summary>
        [Input("timeConfig", required: true)]
        public Input<Inputs.JobTimeConfigArgs> TimeConfig { get; set; } = null!;

        /// <summary>
        /// Time Zone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Task Extension Field
        /// </summary>
        [Input("xAttrs")]
        public Input<string>? XAttrs { get; set; }

        public JobArgs()
        {
        }
        public static new JobArgs Empty => new JobArgs();
    }

    public sealed class JobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Error retry interval, unit s, default value 30.
        /// </summary>
        [Input("attemptInterval")]
        public Input<int>? AttemptInterval { get; set; }

        /// <summary>
        /// Full path of the task interface class.
        /// 
        /// This field is available only when your task is of the Java task type.
        /// </summary>
        [Input("className")]
        public Input<string>? ClassName { get; set; }

        /// <summary>
        /// The script code of the python, shell, and go task types.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Task description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Task execution mode, the possible results are as follows:
        /// </summary>
        [Input("executeMode")]
        public Input<string>? ExecuteMode { get; set; }

        /// <summary>
        /// Number of consecutive failed alarms
        /// </summary>
        [Input("failTimes")]
        public Input<int>? FailTimes { get; set; }

        /// <summary>
        /// The application ID, which is obtained from the **application management** page of the console.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// JobId
        /// </summary>
        [Input("jobId")]
        public Input<int>? JobId { get; set; }

        /// <summary>
        /// Task monitoring information See `job_monitor_info` below.
        /// </summary>
        [Input("jobMonitorInfo")]
        public Input<Inputs.JobJobMonitorInfoGetArgs>? JobMonitorInfo { get; set; }

        /// <summary>
        /// JobName
        /// </summary>
        [Input("jobName")]
        public Input<string>? JobName { get; set; }

        /// <summary>
        /// Job Type
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// Advanced configuration, limited to parallel computing, memory grid, and grid computing. See `map_task_xattrs` below.
        /// </summary>
        [Input("mapTaskXattrs")]
        public Input<Inputs.JobMapTaskXattrsGetArgs>? MapTaskXattrs { get; set; }

        /// <summary>
        /// The maximum number of error retries, which is set based on business requirements. The default value is 0.
        /// </summary>
        [Input("maxAttempt")]
        public Input<int>? MaxAttempt { get; set; }

        /// <summary>
        /// The maximum number of instances running at the same time. The default value is 1, that is, the last trigger is not completed, and the next trigger will not be performed even at the running time.
        /// </summary>
        [Input("maxConcurrency")]
        public Input<string>? MaxConcurrency { get; set; }

        /// <summary>
        /// Namespace, which is obtained on the `Namespace` page of the console.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Special third parties are required.
        /// </summary>
        [Input("namespaceSource")]
        public Input<string>? NamespaceSource { get; set; }

        /// <summary>
        /// User-defined parameters, which can be obtained at runtime.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// Task status. The values are as follows:
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Success Notification Switch
        /// </summary>
        [Input("successNoticeEnable")]
        public Input<bool>? SuccessNoticeEnable { get; set; }

        /// <summary>
        /// Advanced configuration of parallel grid tasks, push model or pull model
        /// </summary>
        [Input("taskDispatchMode")]
        public Input<string>? TaskDispatchMode { get; set; }

        /// <summary>
        /// K8s task type custom task template
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// Time configuration information See `time_config` below.
        /// </summary>
        [Input("timeConfig")]
        public Input<Inputs.JobTimeConfigGetArgs>? TimeConfig { get; set; }

        /// <summary>
        /// Time Zone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Task Extension Field
        /// </summary>
        [Input("xAttrs")]
        public Input<string>? XAttrs { get; set; }

        public JobState()
        {
        }
        public static new JobState Empty => new JobState();
    }
}
