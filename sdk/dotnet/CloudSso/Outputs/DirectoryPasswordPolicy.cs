// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudSso.Outputs
{

    [OutputType]
    public sealed class DirectoryPasswordPolicy
    {
        /// <summary>
        /// Whether to restrict login after Password Expiration
        /// </summary>
        public readonly bool? HardExpire;
        /// <summary>
        /// Number of password retries.
        /// </summary>
        public readonly int? MaxLoginAttempts;
        /// <summary>
        /// Password validity period.
        /// </summary>
        public readonly int? MaxPasswordAge;
        /// <summary>
        /// Maximum password length.
        /// </summary>
        public readonly int? MaxPasswordLength;
        /// <summary>
        /// The minimum number of different characters in a password.
        /// </summary>
        public readonly int? MinPasswordDifferentChars;
        /// <summary>
        /// Minimum password length.
        /// </summary>
        public readonly int? MinPasswordLength;
        /// <summary>
        /// Whether the user name is not allowed in the password.
        /// </summary>
        public readonly bool? PasswordNotContainUsername;
        /// <summary>
        /// Historical password check policy.
        /// </summary>
        public readonly int? PasswordReusePrevention;
        /// <summary>
        /// Whether lowercase letters are required in the password.
        /// </summary>
        public readonly bool? RequireLowerCaseChars;
        /// <summary>
        /// Whether numbers are required in the password.
        /// </summary>
        public readonly bool? RequireNumbers;
        /// <summary>
        /// Whether symbols are required in the password.
        /// </summary>
        public readonly bool? RequireSymbols;
        /// <summary>
        /// Whether uppercase letters are required in the password.
        /// </summary>
        public readonly bool? RequireUpperCaseChars;

        [OutputConstructor]
        private DirectoryPasswordPolicy(
            bool? hardExpire,

            int? maxLoginAttempts,

            int? maxPasswordAge,

            int? maxPasswordLength,

            int? minPasswordDifferentChars,

            int? minPasswordLength,

            bool? passwordNotContainUsername,

            int? passwordReusePrevention,

            bool? requireLowerCaseChars,

            bool? requireNumbers,

            bool? requireSymbols,

            bool? requireUpperCaseChars)
        {
            HardExpire = hardExpire;
            MaxLoginAttempts = maxLoginAttempts;
            MaxPasswordAge = maxPasswordAge;
            MaxPasswordLength = maxPasswordLength;
            MinPasswordDifferentChars = minPasswordDifferentChars;
            MinPasswordLength = minPasswordLength;
            PasswordNotContainUsername = passwordNotContainUsername;
            PasswordReusePrevention = passwordReusePrevention;
            RequireLowerCaseChars = requireLowerCaseChars;
            RequireNumbers = requireNumbers;
            RequireSymbols = requireSymbols;
            RequireUpperCaseChars = requireUpperCaseChars;
        }
    }
}
