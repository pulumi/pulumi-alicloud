// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudSso
{
    /// <summary>
    /// Provides a Cloud SSO User Provisioning resource.
    /// 
    /// RAM user synchronization.
    /// 
    /// For information about Cloud SSO User Provisioning and how to use it, see [What is User Provisioning](https://next.api.alibabacloud.com/document/cloudsso/2021-05-15/CreateUserProvisioning).
    /// 
    /// &gt; **NOTE:** Available since v1.260.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetAccount.Invoke();
    /// 
    ///     var defaultGetDirectories = AliCloud.CloudSso.GetDirectories.Invoke();
    /// 
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var defaultDirectory = new List&lt;AliCloud.CloudSso.Directory&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; defaultGetDirectories.Apply(getDirectoriesResult =&gt; getDirectoriesResult.Ids).Length.Apply(length =&gt; length &gt; 0 ? 0 : 1); rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         defaultDirectory.Add(new AliCloud.CloudSso.Directory($"default-{range.Value}", new()
    ///         {
    ///             DirectoryName = name,
    ///         }));
    ///     }
    ///     var directoryId = Output.Tuple(defaultGetDirectories.Apply(getDirectoriesResult =&gt; getDirectoriesResult.Ids).Length, defaultGetDirectories, Std.Concat.Invoke(new()
    ///     {
    ///         Input = new[]
    ///         {
    ///             defaultDirectory.Select(__item =&gt; __item.Id).ToList(),
    ///             new[]
    ///             {
    ///                 "",
    ///             },
    ///         },
    ///     })).Apply(values =&gt;
    ///     {
    ///         var length = values.Item1;
    ///         var defaultGetDirectories = values.Item2;
    ///         var invoke = values.Item3;
    ///         return length &gt; 0 ? defaultGetDirectories.Apply(getDirectoriesResult =&gt; getDirectoriesResult.Ids[0]) : invoke.Result[0];
    ///     });
    /// 
    ///     var defaultUser = new AliCloud.CloudSso.User("default", new()
    ///     {
    ///         DirectoryId = directoryId,
    ///         UserName = $"{name}-{defaultInteger.Result}",
    ///     });
    /// 
    ///     var defaultGroup = new AliCloud.CloudSso.Group("default", new()
    ///     {
    ///         DirectoryId = directoryId,
    ///         GroupName = name,
    ///         Description = name,
    ///     });
    /// 
    ///     var defaultUserProvisioning = new AliCloud.CloudSso.UserProvisioning("default", new()
    ///     {
    ///         Description = "description",
    ///         PrincipalId = defaultUser.UserId,
    ///         TargetType = "RD-Account",
    ///         DeletionStrategy = "Keep",
    ///         DuplicationStrategy = "KeepBoth",
    ///         PrincipalType = "User",
    ///         TargetId = @default.Apply(@default =&gt; @default.Apply(getAccountResult =&gt; getAccountResult.Id)),
    ///         DirectoryId = defaultUser.DirectoryId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cloud SSO User Provisioning can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:cloudsso/userProvisioning:UserProvisioning example &lt;directory_id&gt;:&lt;user_provisioning_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cloudsso/userProvisioning:UserProvisioning")]
    public partial class UserProvisioning : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the synchronization
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The processing policy for users who have been synchronized when deleting synchronization
        /// </summary>
        [Output("deletionStrategy")]
        public Output<string> DeletionStrategy { get; private set; } = null!;

        /// <summary>
        /// Description of User Synchronization
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the directory to which the synchronization belongs
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// Processing Policy for Synchronization Conflicts
        /// </summary>
        [Output("duplicationStrategy")]
        public Output<string> DuplicationStrategy { get; private set; } = null!;

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the destination associated with the synchronization.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;

        /// <summary>
        /// The target type associated with the synchronization
        /// </summary>
        [Output("targetType")]
        public Output<string> TargetType { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Output("userProvisioningId")]
        public Output<string> UserProvisioningId { get; private set; } = null!;

        /// <summary>
        /// User Provisioning statistics
        /// </summary>
        [Output("userProvisioningStatistics")]
        public Output<ImmutableArray<Outputs.UserProvisioningUserProvisioningStatistic>> UserProvisioningStatistics { get; private set; } = null!;


        /// <summary>
        /// Create a UserProvisioning resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserProvisioning(string name, UserProvisioningArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cloudsso/userProvisioning:UserProvisioning", name, args ?? new UserProvisioningArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserProvisioning(string name, Input<string> id, UserProvisioningState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cloudsso/userProvisioning:UserProvisioning", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserProvisioning resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserProvisioning Get(string name, Input<string> id, UserProvisioningState? state = null, CustomResourceOptions? options = null)
        {
            return new UserProvisioning(name, id, state, options);
        }
    }

    public sealed class UserProvisioningArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The processing policy for users who have been synchronized when deleting synchronization
        /// </summary>
        [Input("deletionStrategy", required: true)]
        public Input<string> DeletionStrategy { get; set; } = null!;

        /// <summary>
        /// Description of User Synchronization
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the directory to which the synchronization belongs
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// Processing Policy for Synchronization Conflicts
        /// </summary>
        [Input("duplicationStrategy", required: true)]
        public Input<string> DuplicationStrategy { get; set; } = null!;

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Input("principalType", required: true)]
        public Input<string> PrincipalType { get; set; } = null!;

        /// <summary>
        /// The ID of the destination associated with the synchronization.
        /// </summary>
        [Input("targetId", required: true)]
        public Input<string> TargetId { get; set; } = null!;

        /// <summary>
        /// The target type associated with the synchronization
        /// </summary>
        [Input("targetType", required: true)]
        public Input<string> TargetType { get; set; } = null!;

        public UserProvisioningArgs()
        {
        }
        public static new UserProvisioningArgs Empty => new UserProvisioningArgs();
    }

    public sealed class UserProvisioningState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the synchronization
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The processing policy for users who have been synchronized when deleting synchronization
        /// </summary>
        [Input("deletionStrategy")]
        public Input<string>? DeletionStrategy { get; set; }

        /// <summary>
        /// Description of User Synchronization
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the directory to which the synchronization belongs
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// Processing Policy for Synchronization Conflicts
        /// </summary>
        [Input("duplicationStrategy")]
        public Input<string>? DuplicationStrategy { get; set; }

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The ID of the CloudSSO user/group associated with the synchronization.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the destination associated with the synchronization.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The target type associated with the synchronization
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Input("userProvisioningId")]
        public Input<string>? UserProvisioningId { get; set; }

        [Input("userProvisioningStatistics")]
        private InputList<Inputs.UserProvisioningUserProvisioningStatisticGetArgs>? _userProvisioningStatistics;

        /// <summary>
        /// User Provisioning statistics
        /// </summary>
        public InputList<Inputs.UserProvisioningUserProvisioningStatisticGetArgs> UserProvisioningStatistics
        {
            get => _userProvisioningStatistics ?? (_userProvisioningStatistics = new InputList<Inputs.UserProvisioningUserProvisioningStatisticGetArgs>());
            set => _userProvisioningStatistics = value;
        }

        public UserProvisioningState()
        {
        }
        public static new UserProvisioningState Empty => new UserProvisioningState();
    }
}
