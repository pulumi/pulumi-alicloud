// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudSso.Inputs
{

    public sealed class DirectoryPasswordPolicyGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to restrict login after Password Expiration
        /// </summary>
        [Input("hardExpire")]
        public Input<bool>? HardExpire { get; set; }

        /// <summary>
        /// Number of password retries.
        /// </summary>
        [Input("maxLoginAttempts")]
        public Input<int>? MaxLoginAttempts { get; set; }

        /// <summary>
        /// Password validity period.
        /// </summary>
        [Input("maxPasswordAge")]
        public Input<int>? MaxPasswordAge { get; set; }

        /// <summary>
        /// Maximum password length.
        /// </summary>
        [Input("maxPasswordLength")]
        public Input<int>? MaxPasswordLength { get; set; }

        /// <summary>
        /// The minimum number of different characters in a password.
        /// </summary>
        [Input("minPasswordDifferentChars")]
        public Input<int>? MinPasswordDifferentChars { get; set; }

        /// <summary>
        /// Minimum password length.
        /// </summary>
        [Input("minPasswordLength")]
        public Input<int>? MinPasswordLength { get; set; }

        /// <summary>
        /// Whether the user name is not allowed in the password.
        /// </summary>
        [Input("passwordNotContainUsername")]
        public Input<bool>? PasswordNotContainUsername { get; set; }

        /// <summary>
        /// Historical password check policy.
        /// </summary>
        [Input("passwordReusePrevention")]
        public Input<int>? PasswordReusePrevention { get; set; }

        /// <summary>
        /// Whether lowercase letters are required in the password.
        /// </summary>
        [Input("requireLowerCaseChars")]
        public Input<bool>? RequireLowerCaseChars { get; set; }

        /// <summary>
        /// Whether numbers are required in the password.
        /// </summary>
        [Input("requireNumbers")]
        public Input<bool>? RequireNumbers { get; set; }

        /// <summary>
        /// Whether symbols are required in the password.
        /// </summary>
        [Input("requireSymbols")]
        public Input<bool>? RequireSymbols { get; set; }

        /// <summary>
        /// Whether uppercase letters are required in the password.
        /// </summary>
        [Input("requireUpperCaseChars")]
        public Input<bool>? RequireUpperCaseChars { get; set; }

        public DirectoryPasswordPolicyGetArgs()
        {
        }
        public static new DirectoryPasswordPolicyGetArgs Empty => new DirectoryPasswordPolicyGetArgs();
    }
}
