// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ebs
{
    /// <summary>
    /// Provides a Elastic Block Storage(EBS) Disk Replica Group resource.
    /// 
    /// consistent replica group.
    /// 
    /// For information about Elastic Block Storage(EBS) Disk Replica Group and how to use it, see [What is Disk Replica Group](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/creatediskreplicagroup).
    /// 
    /// &gt; **NOTE:** Available since v1.187.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = AliCloud.GetRegions.Invoke(new()
    ///     {
    ///         Current = true,
    ///     });
    /// 
    ///     var defaultGetRegions = AliCloud.Ebs.GetRegions.Invoke(new()
    ///     {
    ///         RegionId = @default.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id),
    ///     });
    /// 
    ///     var defaultDiskReplicaGroup = new AliCloud.Ebs.DiskReplicaGroup("default", new()
    ///     {
    ///         SourceRegionId = @default.Apply(@default =&gt; @default.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id)),
    ///         SourceZoneId = defaultGetRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Zones[0]?.ZoneId),
    ///         DestinationRegionId = @default.Apply(@default =&gt; @default.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id)),
    ///         DestinationZoneId = defaultGetRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Zones[1]?.ZoneId),
    ///         GroupName = name,
    ///         Description = name,
    ///         Rpo = 900,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Elastic Block Storage(EBS) Disk Replica Group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ebs/diskReplicaGroup:DiskReplicaGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup")]
    public partial class DiskReplicaGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Output("destinationRegionId")]
        public Output<string> DestinationRegionId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Output("destinationZoneId")]
        public Output<string> DestinationZoneId { get; private set; } = null!;

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Output("diskReplicaGroupName")]
        public Output<string> DiskReplicaGroupName { get; private set; } = null!;

        /// <summary>
        /// . Field 'group_name' has been deprecated from provider version 1.245.0. New field 'disk_replica_group_name' instead.
        /// </summary>
        [Output("groupName")]
        public Output<string> GroupName { get; private set; } = null!;

        /// <summary>
        /// Whether to synchronize immediately. Value range:
        /// - true: Start data synchronization immediately.
        /// - false: Data Synchronization starts after the RPO time period.
        /// 
        /// Default value: false.
        /// </summary>
        [Output("oneShot")]
        public Output<bool?> OneShot { get; private set; } = null!;

        /// <summary>
        /// List of replication pair IDs contained in a consistent replication group.
        /// </summary>
        [Output("pairIds")]
        public Output<ImmutableArray<string>> PairIds { get; private set; } = null!;

        /// <summary>
        /// resource group ID of enterprise
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
        /// </summary>
        [Output("reverseReplicate")]
        public Output<bool?> ReverseReplicate { get; private set; } = null!;

        /// <summary>
        /// The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
        /// </summary>
        [Output("rpo")]
        public Output<int?> Rpo { get; private set; } = null!;

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Output("sourceRegionId")]
        public Output<string> SourceRegionId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Output("sourceZoneId")]
        public Output<string> SourceZoneId { get; private set; } = null!;

        /// <summary>
        /// The status of the consistent replication group. Possible values:
        /// - invalid: invalid. This state indicates that there is an exception to the replication pair in the consistent replication group.
        /// - creating: creating.
        /// - created: created.
        /// - create_failed: creation failed.
        /// - manual_syncing: in a single synchronization. If it is the first single synchronization, this status is also displayed in the synchronization.
        /// - syncing: synchronization. This state is the first time data is copied asynchronously between the master and slave disks.
        /// - normal: normal. When data replication is completed within the current cycle of asynchronous replication, it will be in this state.
        /// - stopping: stopping.
        /// - stopped: stopped.
        /// - stop_failed: Stop failed.
        /// - Failover: failover.
        /// - Failed: failover completed.
        /// - failover_failed: failover failed.
        /// - Reprotection: In reverse copy operation.
        /// - reprotect_failed: reverse replication failed.
        /// - deleting: deleting.
        /// - delete_failed: delete failed.
        /// - deleted: deleted.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tag of the resource
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DiskReplicaGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskReplicaGroup(string name, DiskReplicaGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup", name, args ?? new DiskReplicaGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskReplicaGroup(string name, Input<string> id, DiskReplicaGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskReplicaGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskReplicaGroup Get(string name, Input<string> id, DiskReplicaGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskReplicaGroup(name, id, state, options);
        }
    }

    public sealed class DiskReplicaGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationRegionId", required: true)]
        public Input<string> DestinationRegionId { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationZoneId", required: true)]
        public Input<string> DestinationZoneId { get; set; } = null!;

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Input("diskReplicaGroupName")]
        public Input<string>? DiskReplicaGroupName { get; set; }

        /// <summary>
        /// . Field 'group_name' has been deprecated from provider version 1.245.0. New field 'disk_replica_group_name' instead.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// Whether to synchronize immediately. Value range:
        /// - true: Start data synchronization immediately.
        /// - false: Data Synchronization starts after the RPO time period.
        /// 
        /// Default value: false.
        /// </summary>
        [Input("oneShot")]
        public Input<bool>? OneShot { get; set; }

        [Input("pairIds")]
        private InputList<string>? _pairIds;

        /// <summary>
        /// List of replication pair IDs contained in a consistent replication group.
        /// </summary>
        public InputList<string> PairIds
        {
            get => _pairIds ?? (_pairIds = new InputList<string>());
            set => _pairIds = value;
        }

        /// <summary>
        /// resource group ID of enterprise
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
        /// </summary>
        [Input("reverseReplicate")]
        public Input<bool>? ReverseReplicate { get; set; }

        /// <summary>
        /// The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
        /// </summary>
        [Input("rpo")]
        public Input<int>? Rpo { get; set; }

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Input("sourceRegionId", required: true)]
        public Input<string> SourceRegionId { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Input("sourceZoneId", required: true)]
        public Input<string> SourceZoneId { get; set; } = null!;

        /// <summary>
        /// The status of the consistent replication group. Possible values:
        /// - invalid: invalid. This state indicates that there is an exception to the replication pair in the consistent replication group.
        /// - creating: creating.
        /// - created: created.
        /// - create_failed: creation failed.
        /// - manual_syncing: in a single synchronization. If it is the first single synchronization, this status is also displayed in the synchronization.
        /// - syncing: synchronization. This state is the first time data is copied asynchronously between the master and slave disks.
        /// - normal: normal. When data replication is completed within the current cycle of asynchronous replication, it will be in this state.
        /// - stopping: stopping.
        /// - stopped: stopped.
        /// - stop_failed: Stop failed.
        /// - Failover: failover.
        /// - Failed: failover completed.
        /// - failover_failed: failover failed.
        /// - Reprotection: In reverse copy operation.
        /// - reprotect_failed: reverse replication failed.
        /// - deleting: deleting.
        /// - delete_failed: delete failed.
        /// - deleted: deleted.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DiskReplicaGroupArgs()
        {
        }
        public static new DiskReplicaGroupArgs Empty => new DiskReplicaGroupArgs();
    }

    public sealed class DiskReplicaGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationRegionId")]
        public Input<string>? DestinationRegionId { get; set; }

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationZoneId")]
        public Input<string>? DestinationZoneId { get; set; }

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Input("diskReplicaGroupName")]
        public Input<string>? DiskReplicaGroupName { get; set; }

        /// <summary>
        /// . Field 'group_name' has been deprecated from provider version 1.245.0. New field 'disk_replica_group_name' instead.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// Whether to synchronize immediately. Value range:
        /// - true: Start data synchronization immediately.
        /// - false: Data Synchronization starts after the RPO time period.
        /// 
        /// Default value: false.
        /// </summary>
        [Input("oneShot")]
        public Input<bool>? OneShot { get; set; }

        [Input("pairIds")]
        private InputList<string>? _pairIds;

        /// <summary>
        /// List of replication pair IDs contained in a consistent replication group.
        /// </summary>
        public InputList<string> PairIds
        {
            get => _pairIds ?? (_pairIds = new InputList<string>());
            set => _pairIds = value;
        }

        /// <summary>
        /// resource group ID of enterprise
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Specifies whether to enable the reverse replication sub-feature. Valid values: true and false. Default value: true.
        /// </summary>
        [Input("reverseReplicate")]
        public Input<bool>? ReverseReplicate { get; set; }

        /// <summary>
        /// The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
        /// </summary>
        [Input("rpo")]
        public Input<int>? Rpo { get; set; }

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Input("sourceRegionId")]
        public Input<string>? SourceRegionId { get; set; }

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Input("sourceZoneId")]
        public Input<string>? SourceZoneId { get; set; }

        /// <summary>
        /// The status of the consistent replication group. Possible values:
        /// - invalid: invalid. This state indicates that there is an exception to the replication pair in the consistent replication group.
        /// - creating: creating.
        /// - created: created.
        /// - create_failed: creation failed.
        /// - manual_syncing: in a single synchronization. If it is the first single synchronization, this status is also displayed in the synchronization.
        /// - syncing: synchronization. This state is the first time data is copied asynchronously between the master and slave disks.
        /// - normal: normal. When data replication is completed within the current cycle of asynchronous replication, it will be in this state.
        /// - stopping: stopping.
        /// - stopped: stopped.
        /// - stop_failed: Stop failed.
        /// - Failover: failover.
        /// - Failed: failover completed.
        /// - failover_failed: failover failed.
        /// - Reprotection: In reverse copy operation.
        /// - reprotect_failed: reverse replication failed.
        /// - deleting: deleting.
        /// - delete_failed: delete failed.
        /// - deleted: deleted.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DiskReplicaGroupState()
        {
        }
        public static new DiskReplicaGroupState Empty => new DiskReplicaGroupState();
    }
}
