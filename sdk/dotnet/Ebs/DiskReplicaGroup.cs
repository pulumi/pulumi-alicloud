// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ebs
{
    /// <summary>
    /// Provides a EBS Disk Replica Group resource.
    /// 
    /// For information about EBS Disk Replica Group and how to use it, see [What is Disk Replica Group](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/creatediskreplicagroup).
    /// 
    /// &gt; **NOTE:** Available in v1.187.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultRegions = AliCloud.Ebs.GetRegions.Invoke(new()
    ///     {
    ///         RegionId = "cn-hangzhou",
    ///     });
    /// 
    ///     var defaultDiskReplicaGroup = new AliCloud.Ebs.DiskReplicaGroup("defaultDiskReplicaGroup", new()
    ///     {
    ///         SourceRegionId = @var.Region,
    ///         SourceZoneId = defaultRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Zones[0]?.ZoneId),
    ///         DestinationRegionId = @var.Region,
    ///         DestinationZoneId = defaultRegions.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Zones[1]?.ZoneId),
    ///         GroupName = "group_name",
    ///         Description = "group_description",
    ///         Rpo = 900,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EBS Disk Replica Group can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:ebs/diskReplicaGroup:DiskReplicaGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup")]
    public partial class DiskReplicaGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Output("destinationRegionId")]
        public Output<string> DestinationRegionId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Output("destinationZoneId")]
        public Output<string> DestinationZoneId { get; private set; } = null!;

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Output("groupName")]
        public Output<string?> GroupName { get; private set; } = null!;

        /// <summary>
        /// The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
        /// </summary>
        [Output("rpo")]
        public Output<int> Rpo { get; private set; } = null!;

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Output("sourceRegionId")]
        public Output<string> SourceRegionId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Output("sourceZoneId")]
        public Output<string> SourceZoneId { get; private set; } = null!;

        /// <summary>
        /// The status of the consistent replication group.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DiskReplicaGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskReplicaGroup(string name, DiskReplicaGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup", name, args ?? new DiskReplicaGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskReplicaGroup(string name, Input<string> id, DiskReplicaGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ebs/diskReplicaGroup:DiskReplicaGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskReplicaGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskReplicaGroup Get(string name, Input<string> id, DiskReplicaGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskReplicaGroup(name, id, state, options);
        }
    }

    public sealed class DiskReplicaGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationRegionId", required: true)]
        public Input<string> DestinationRegionId { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationZoneId", required: true)]
        public Input<string> DestinationZoneId { get; set; } = null!;

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
        /// </summary>
        [Input("rpo")]
        public Input<int>? Rpo { get; set; }

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Input("sourceRegionId", required: true)]
        public Input<string> SourceRegionId { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Input("sourceZoneId", required: true)]
        public Input<string> SourceZoneId { get; set; } = null!;

        public DiskReplicaGroupArgs()
        {
        }
        public static new DiskReplicaGroupArgs Empty => new DiskReplicaGroupArgs();
    }

    public sealed class DiskReplicaGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the consistent replication group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the region to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationRegionId")]
        public Input<string>? DestinationRegionId { get; set; }

        /// <summary>
        /// The ID of the zone to which the disaster recovery site belongs.
        /// </summary>
        [Input("destinationZoneId")]
        public Input<string>? DestinationZoneId { get; set; }

        /// <summary>
        /// Consistent replication group name.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.
        /// </summary>
        [Input("rpo")]
        public Input<int>? Rpo { get; set; }

        /// <summary>
        /// The ID of the region to which the production site belongs.
        /// </summary>
        [Input("sourceRegionId")]
        public Input<string>? SourceRegionId { get; set; }

        /// <summary>
        /// The ID of the zone to which the production site belongs.
        /// </summary>
        [Input("sourceZoneId")]
        public Input<string>? SourceZoneId { get; set; }

        /// <summary>
        /// The status of the consistent replication group.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DiskReplicaGroupState()
        {
        }
        public static new DiskReplicaGroupState Empty => new DiskReplicaGroupState();
    }
}
