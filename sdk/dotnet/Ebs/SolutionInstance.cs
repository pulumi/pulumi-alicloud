// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ebs
{
    /// <summary>
    /// Provides a EBS Solution Instance resource.
    /// 
    /// For information about EBS Solution Instance and how to use it, see [What is Solution Instance](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.216.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var zoneId = config.Get("zoneId") ?? "cn-shanghai-l";
    ///     var regionId = config.Get("regionId") ?? "cn-shanghai";
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var defaultSolutionInstance = new AliCloud.Ebs.SolutionInstance("default", new()
    ///     {
    ///         SolutionInstanceName = name,
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0])),
    ///         Description = "description",
    ///         SolutionId = "mysql",
    ///         Parameters = new[]
    ///         {
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "zoneId",
    ///                 ParameterValue = zoneId,
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "ecsType",
    ///                 ParameterValue = "ecs.c6.large",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "ecsImageId",
    ///                 ParameterValue = "CentOS_7",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "internetMaxBandwidthOut",
    ///                 ParameterValue = "100",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "internetChargeType",
    ///                 ParameterValue = "PayByTraffic",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "ecsPassword",
    ///                 ParameterValue = "Ebs12345",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "sysDiskType",
    ///                 ParameterValue = "cloud_essd",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "sysDiskPerformance",
    ///                 ParameterValue = "PL0",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "sysDiskSize",
    ///                 ParameterValue = "40",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "dataDiskType",
    ///                 ParameterValue = "cloud_essd",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "dataDiskPerformance",
    ///                 ParameterValue = "PL0",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "dataDiskSize",
    ///                 ParameterValue = "40",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "mysqlVersion",
    ///                 ParameterValue = "MySQL80",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "mysqlUser",
    ///                 ParameterValue = "root",
    ///             },
    ///             new AliCloud.Ebs.Inputs.SolutionInstanceParameterArgs
    ///             {
    ///                 ParameterKey = "mysqlPassword",
    ///                 ParameterValue = "Ebs12345",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EBS Solution Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ebs/solutionInstance:SolutionInstance example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ebs/solutionInstance:SolutionInstance")]
    public partial class SolutionInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Solution Instance Creation Time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Solution Instance Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Solution Instance Creation Parameters. See `Parameters` below.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.SolutionInstanceParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Solution ID.
        /// </summary>
        [Output("solutionId")]
        public Output<string> SolutionId { get; private set; } = null!;

        /// <summary>
        /// Solution Instance Name.
        /// </summary>
        [Output("solutionInstanceName")]
        public Output<string> SolutionInstanceName { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a SolutionInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SolutionInstance(string name, SolutionInstanceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ebs/solutionInstance:SolutionInstance", name, args ?? new SolutionInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SolutionInstance(string name, Input<string> id, SolutionInstanceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ebs/solutionInstance:SolutionInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SolutionInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SolutionInstance Get(string name, Input<string> id, SolutionInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new SolutionInstance(name, id, state, options);
        }
    }

    public sealed class SolutionInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Solution Instance Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("parameters")]
        private InputList<Inputs.SolutionInstanceParameterArgs>? _parameters;

        /// <summary>
        /// Solution Instance Creation Parameters. See `Parameters` below.
        /// </summary>
        public InputList<Inputs.SolutionInstanceParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.SolutionInstanceParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Solution ID.
        /// </summary>
        [Input("solutionId", required: true)]
        public Input<string> SolutionId { get; set; } = null!;

        /// <summary>
        /// Solution Instance Name.
        /// </summary>
        [Input("solutionInstanceName")]
        public Input<string>? SolutionInstanceName { get; set; }

        public SolutionInstanceArgs()
        {
        }
        public static new SolutionInstanceArgs Empty => new SolutionInstanceArgs();
    }

    public sealed class SolutionInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Solution Instance Creation Time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Solution Instance Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("parameters")]
        private InputList<Inputs.SolutionInstanceParameterGetArgs>? _parameters;

        /// <summary>
        /// Solution Instance Creation Parameters. See `Parameters` below.
        /// </summary>
        public InputList<Inputs.SolutionInstanceParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.SolutionInstanceParameterGetArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Solution ID.
        /// </summary>
        [Input("solutionId")]
        public Input<string>? SolutionId { get; set; }

        /// <summary>
        /// Solution Instance Name.
        /// </summary>
        [Input("solutionInstanceName")]
        public Input<string>? SolutionInstanceName { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SolutionInstanceState()
        {
        }
        public static new SolutionInstanceState Empty => new SolutionInstanceState();
    }
}
