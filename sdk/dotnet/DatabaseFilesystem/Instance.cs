// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.DatabaseFilesystem
{
    /// <summary>
    /// Provides a DBFS Dbfs Instance resource. An instance of a database file system is equivalent to a file system and can store data of file types.
    /// 
    /// For information about DBFS Dbfs Instance and how to use it, see [What is Dbfs Instance](https://next.api.alibabacloud.com/document/DBFS/2020-04-18/CreateDbfs).
    /// 
    /// &gt; **NOTE:** Available since v1.136.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var example = new AliCloud.DatabaseFilesystem.Instance("example", new()
    ///     {
    ///         Category = "standard",
    ///         ZoneId = "cn-hangzhou-i",
    ///         PerformanceLevel = "PL1",
    ///         InstanceName = name,
    ///         Size = 100,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DBFS Dbfs Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:databasefilesystem/instance:Instance example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:databasefilesystem/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of CPU cores and the upper limit of memory used by the database file storage instance.
        /// </summary>
        [Output("advancedFeatures")]
        public Output<string> AdvancedFeatures { get; private set; } = null!;

        /// <summary>
        /// Category of database file system.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether to delete the original snapshot after creating DBFS using the snapshot.
        /// </summary>
        [Output("deleteSnapshot")]
        public Output<bool?> DeleteSnapshot { get; private set; } = null!;

        /// <summary>
        /// The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. See `ecs_list` below.
        /// </summary>
        [Output("ecsLists")]
        public Output<ImmutableArray<Outputs.InstanceEcsList>> EcsLists { get; private set; } = null!;

        /// <summary>
        /// Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
        /// </summary>
        [Output("enableRaid")]
        public Output<bool?> EnableRaid { get; private set; } = null!;

        /// <summary>
        /// Whether to encrypt DBFS.Valid values: true or false. Default value: false.
        /// </summary>
        [Output("encryption")]
        public Output<bool?> Encryption { get; private set; } = null!;

        /// <summary>
        /// Database file system name.
        /// </summary>
        [Output("fsName")]
        public Output<string> FsName { get; private set; } = null!;

        /// <summary>
        /// . Field 'instance_name' has been deprecated from provider version 1.212.0. New field 'fs_name' instead.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// Instance type. Value range:
        /// - dbfs.small
        /// - dbfs.medium
        /// - dbfs.large (default)
        /// </summary>
        [Output("instanceType")]
        public Output<string?> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The ID of the KMS key used by DBFS.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
        /// - PL0: single disk maximum random read-write IOPS 10000
        /// - PL1: highest random read-write IOPS 50000 per disk (default)
        /// - PL2: single disk maximum random read-write IOPS 100000
        /// - PL3: single disk maximum random read-write IOPS 1 million.
        /// </summary>
        [Output("performanceLevel")]
        public Output<string> PerformanceLevel { get; private set; } = null!;

        /// <summary>
        /// Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
        /// </summary>
        [Output("raidStripeUnitNumber")]
        public Output<int?> RaidStripeUnitNumber { get; private set; } = null!;

        /// <summary>
        /// Size of database file system, unit GiB.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The ID of the snapshot used to create the DBFS instance.
        /// </summary>
        [Output("snapshotId")]
        public Output<string> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The usage scenario of DBFS. Value range:
        /// - MySQL 5.7
        /// - PostgreSQL
        /// - MongoDB.
        /// </summary>
        [Output("usedScene")]
        public Output<string?> UsedScene { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the database file system belongs.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:databasefilesystem/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:databasefilesystem/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of CPU cores and the upper limit of memory used by the database file storage instance.
        /// </summary>
        [Input("advancedFeatures")]
        public Input<string>? AdvancedFeatures { get; set; }

        /// <summary>
        /// Category of database file system.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        /// <summary>
        /// Whether to delete the original snapshot after creating DBFS using the snapshot.
        /// </summary>
        [Input("deleteSnapshot")]
        public Input<bool>? DeleteSnapshot { get; set; }

        [Input("ecsLists")]
        private InputList<Inputs.InstanceEcsListArgs>? _ecsLists;

        /// <summary>
        /// The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. See `ecs_list` below.
        /// </summary>
        [Obsolete(@"Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.")]
        public InputList<Inputs.InstanceEcsListArgs> EcsLists
        {
            get => _ecsLists ?? (_ecsLists = new InputList<Inputs.InstanceEcsListArgs>());
            set => _ecsLists = value;
        }

        /// <summary>
        /// Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
        /// </summary>
        [Input("enableRaid")]
        public Input<bool>? EnableRaid { get; set; }

        /// <summary>
        /// Whether to encrypt DBFS.Valid values: true or false. Default value: false.
        /// </summary>
        [Input("encryption")]
        public Input<bool>? Encryption { get; set; }

        /// <summary>
        /// Database file system name.
        /// </summary>
        [Input("fsName")]
        public Input<string>? FsName { get; set; }

        /// <summary>
        /// . Field 'instance_name' has been deprecated from provider version 1.212.0. New field 'fs_name' instead.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Instance type. Value range:
        /// - dbfs.small
        /// - dbfs.medium
        /// - dbfs.large (default)
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The ID of the KMS key used by DBFS.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
        /// - PL0: single disk maximum random read-write IOPS 10000
        /// - PL1: highest random read-write IOPS 50000 per disk (default)
        /// - PL2: single disk maximum random read-write IOPS 100000
        /// - PL3: single disk maximum random read-write IOPS 1 million.
        /// </summary>
        [Input("performanceLevel")]
        public Input<string>? PerformanceLevel { get; set; }

        /// <summary>
        /// Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
        /// </summary>
        [Input("raidStripeUnitNumber")]
        public Input<int>? RaidStripeUnitNumber { get; set; }

        /// <summary>
        /// Size of database file system, unit GiB.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        /// <summary>
        /// The ID of the snapshot used to create the DBFS instance.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The usage scenario of DBFS. Value range:
        /// - MySQL 5.7
        /// - PostgreSQL
        /// - MongoDB.
        /// </summary>
        [Input("usedScene")]
        public Input<string>? UsedScene { get; set; }

        /// <summary>
        /// The ID of the zone to which the database file system belongs.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of CPU cores and the upper limit of memory used by the database file storage instance.
        /// </summary>
        [Input("advancedFeatures")]
        public Input<string>? AdvancedFeatures { get; set; }

        /// <summary>
        /// Category of database file system.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether to delete the original snapshot after creating DBFS using the snapshot.
        /// </summary>
        [Input("deleteSnapshot")]
        public Input<bool>? DeleteSnapshot { get; set; }

        [Input("ecsLists")]
        private InputList<Inputs.InstanceEcsListGetArgs>? _ecsLists;

        /// <summary>
        /// The collection of ECS instances mounted to the Database file system. See `ecs_list` below.  **NOTE:** Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS. See `ecs_list` below.
        /// </summary>
        [Obsolete(@"Field 'ecs_list' has been deprecated from provider version 1.156.0 and it will be removed in the future version. Please use the new resource 'alicloud_dbfs_instance_attachment' to attach ECS and DBFS.")]
        public InputList<Inputs.InstanceEcsListGetArgs> EcsLists
        {
            get => _ecsLists ?? (_ecsLists = new InputList<Inputs.InstanceEcsListGetArgs>());
            set => _ecsLists = value;
        }

        /// <summary>
        /// Whether to create DBFS in RAID mode. If created in RAID mode, the capacity is at least 66GB.Valid values: true or false. Default value: false.
        /// </summary>
        [Input("enableRaid")]
        public Input<bool>? EnableRaid { get; set; }

        /// <summary>
        /// Whether to encrypt DBFS.Valid values: true or false. Default value: false.
        /// </summary>
        [Input("encryption")]
        public Input<bool>? Encryption { get; set; }

        /// <summary>
        /// Database file system name.
        /// </summary>
        [Input("fsName")]
        public Input<string>? FsName { get; set; }

        /// <summary>
        /// . Field 'instance_name' has been deprecated from provider version 1.212.0. New field 'fs_name' instead.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Instance type. Value range:
        /// - dbfs.small
        /// - dbfs.medium
        /// - dbfs.large (default)
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The ID of the KMS key used by DBFS.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// When you create a DBFS instance, set the performance level of the DBFS instance. Value range:
        /// - PL0: single disk maximum random read-write IOPS 10000
        /// - PL1: highest random read-write IOPS 50000 per disk (default)
        /// - PL2: single disk maximum random read-write IOPS 100000
        /// - PL3: single disk maximum random read-write IOPS 1 million.
        /// </summary>
        [Input("performanceLevel")]
        public Input<string>? PerformanceLevel { get; set; }

        /// <summary>
        /// Number of strips. Required when the EnableRaid parameter is true.Value range: Currently, only 8 stripes are supported.
        /// </summary>
        [Input("raidStripeUnitNumber")]
        public Input<int>? RaidStripeUnitNumber { get; set; }

        /// <summary>
        /// Size of database file system, unit GiB.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The ID of the snapshot used to create the DBFS instance.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The usage scenario of DBFS. Value range:
        /// - MySQL 5.7
        /// - PostgreSQL
        /// - MongoDB.
        /// </summary>
        [Input("usedScene")]
        public Input<string>? UsedScene { get; set; }

        /// <summary>
        /// The ID of the zone to which the database file system belongs.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
