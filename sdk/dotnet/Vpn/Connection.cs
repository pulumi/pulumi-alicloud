// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn
{
    /// <summary>
    /// ## Import
    /// 
    /// VPN connection can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:vpn/connection:Connection example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpn/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to configure routing automatically. Value:
        /// - **true**: Automatically configure routes.
        /// - **false**: does not automatically configure routes.
        /// </summary>
        [Output("autoConfigRoute")]
        public Output<bool?> AutoConfigRoute { get; private set; } = null!;

        /// <summary>
        /// vpnBgp configuration. See `bgp_config` below.
        /// </summary>
        [Output("bgpConfig")]
        public Output<Outputs.ConnectionBgpConfig> BgpConfig { get; private set; } = null!;

        /// <summary>
        /// The time when the IPsec-VPN connection was created.
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the customer gateway.
        /// </summary>
        [Output("customerGatewayId")]
        public Output<string?> CustomerGatewayId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
        /// </summary>
        [Output("effectImmediately")]
        public Output<bool?> EffectImmediately { get; private set; } = null!;

        /// <summary>
        /// Wether enable Dpd detection.
        /// </summary>
        [Output("enableDpd")]
        public Output<bool> EnableDpd { get; private set; } = null!;

        /// <summary>
        /// enable nat traversal.
        /// </summary>
        [Output("enableNatTraversal")]
        public Output<bool> EnableNatTraversal { get; private set; } = null!;

        /// <summary>
        /// Enable tunnel bgp.
        /// </summary>
        [Output("enableTunnelsBgp")]
        public Output<bool> EnableTunnelsBgp { get; private set; } = null!;

        /// <summary>
        /// Health Check information. See `health_check_config` below.
        /// </summary>
        [Output("healthCheckConfig")]
        public Output<Outputs.ConnectionHealthCheckConfig> HealthCheckConfig { get; private set; } = null!;

        /// <summary>
        /// The configuration of Phase 1 negotiations. See `ike_config` below.
        /// </summary>
        [Output("ikeConfig")]
        public Output<Outputs.ConnectionIkeConfig> IkeConfig { get; private set; } = null!;

        /// <summary>
        /// IPsec configuration. See `ipsec_config` below.
        /// </summary>
        [Output("ipsecConfig")]
        public Output<Outputs.ConnectionIpsecConfig> IpsecConfig { get; private set; } = null!;

        /// <summary>
        /// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        [Output("localSubnets")]
        public Output<ImmutableArray<string>> LocalSubnets { get; private set; } = null!;

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network type of the IPsec connection. Value:
        /// - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
        /// - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
        /// </summary>
        [Output("networkType")]
        public Output<string?> NetworkType { get; private set; } = null!;

        /// <summary>
        /// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        [Output("remoteSubnets")]
        public Output<ImmutableArray<string>> RemoteSubnets { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The negotiation status of Tunnel.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The tunnel options of IPsec. See `tunnel_options_specification` below.
        /// </summary>
        [Output("tunnelOptionsSpecifications")]
        public Output<ImmutableArray<Outputs.ConnectionTunnelOptionsSpecification>> TunnelOptionsSpecifications { get; private set; } = null!;

        /// <summary>
        /// The name of the IPsec-VPN connection.
        /// </summary>
        [Output("vpnConnectionName")]
        public Output<string> VpnConnectionName { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPN gateway.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Output("vpnGatewayId")]
        public Output<string> VpnGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpn/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpn/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to configure routing automatically. Value:
        /// - **true**: Automatically configure routes.
        /// - **false**: does not automatically configure routes.
        /// </summary>
        [Input("autoConfigRoute")]
        public Input<bool>? AutoConfigRoute { get; set; }

        /// <summary>
        /// vpnBgp configuration. See `bgp_config` below.
        /// </summary>
        [Input("bgpConfig")]
        public Input<Inputs.ConnectionBgpConfigArgs>? BgpConfig { get; set; }

        /// <summary>
        /// The ID of the customer gateway.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
        /// </summary>
        [Input("effectImmediately")]
        public Input<bool>? EffectImmediately { get; set; }

        /// <summary>
        /// Wether enable Dpd detection.
        /// </summary>
        [Input("enableDpd")]
        public Input<bool>? EnableDpd { get; set; }

        /// <summary>
        /// enable nat traversal.
        /// </summary>
        [Input("enableNatTraversal")]
        public Input<bool>? EnableNatTraversal { get; set; }

        /// <summary>
        /// Enable tunnel bgp.
        /// </summary>
        [Input("enableTunnelsBgp")]
        public Input<bool>? EnableTunnelsBgp { get; set; }

        /// <summary>
        /// Health Check information. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.ConnectionHealthCheckConfigArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// The configuration of Phase 1 negotiations. See `ike_config` below.
        /// </summary>
        [Input("ikeConfig")]
        public Input<Inputs.ConnectionIkeConfigArgs>? IkeConfig { get; set; }

        /// <summary>
        /// IPsec configuration. See `ipsec_config` below.
        /// </summary>
        [Input("ipsecConfig")]
        public Input<Inputs.ConnectionIpsecConfigArgs>? IpsecConfig { get; set; }

        [Input("localSubnets", required: true)]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network type of the IPsec connection. Value:
        /// - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
        /// - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("remoteSubnets", required: true)]
        private InputList<string>? _remoteSubnets;

        /// <summary>
        /// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        public InputList<string> RemoteSubnets
        {
            get => _remoteSubnets ?? (_remoteSubnets = new InputList<string>());
            set => _remoteSubnets = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("tunnelOptionsSpecifications")]
        private InputList<Inputs.ConnectionTunnelOptionsSpecificationArgs>? _tunnelOptionsSpecifications;

        /// <summary>
        /// The tunnel options of IPsec. See `tunnel_options_specification` below.
        /// </summary>
        public InputList<Inputs.ConnectionTunnelOptionsSpecificationArgs> TunnelOptionsSpecifications
        {
            get => _tunnelOptionsSpecifications ?? (_tunnelOptionsSpecifications = new InputList<Inputs.ConnectionTunnelOptionsSpecificationArgs>());
            set => _tunnelOptionsSpecifications = value;
        }

        /// <summary>
        /// The name of the IPsec-VPN connection.
        /// </summary>
        [Input("vpnConnectionName")]
        public Input<string>? VpnConnectionName { get; set; }

        /// <summary>
        /// The ID of the VPN gateway.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Input("vpnGatewayId", required: true)]
        public Input<string> VpnGatewayId { get; set; } = null!;

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to configure routing automatically. Value:
        /// - **true**: Automatically configure routes.
        /// - **false**: does not automatically configure routes.
        /// </summary>
        [Input("autoConfigRoute")]
        public Input<bool>? AutoConfigRoute { get; set; }

        /// <summary>
        /// vpnBgp configuration. See `bgp_config` below.
        /// </summary>
        [Input("bgpConfig")]
        public Input<Inputs.ConnectionBgpConfigGetArgs>? BgpConfig { get; set; }

        /// <summary>
        /// The time when the IPsec-VPN connection was created.
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// The ID of the customer gateway.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// Indicates whether IPsec-VPN negotiations are initiated immediately. Valid values.
        /// </summary>
        [Input("effectImmediately")]
        public Input<bool>? EffectImmediately { get; set; }

        /// <summary>
        /// Wether enable Dpd detection.
        /// </summary>
        [Input("enableDpd")]
        public Input<bool>? EnableDpd { get; set; }

        /// <summary>
        /// enable nat traversal.
        /// </summary>
        [Input("enableNatTraversal")]
        public Input<bool>? EnableNatTraversal { get; set; }

        /// <summary>
        /// Enable tunnel bgp.
        /// </summary>
        [Input("enableTunnelsBgp")]
        public Input<bool>? EnableTunnelsBgp { get; set; }

        /// <summary>
        /// Health Check information. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.ConnectionHealthCheckConfigGetArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// The configuration of Phase 1 negotiations. See `ike_config` below.
        /// </summary>
        [Input("ikeConfig")]
        public Input<Inputs.ConnectionIkeConfigGetArgs>? IkeConfig { get; set; }

        /// <summary>
        /// IPsec configuration. See `ipsec_config` below.
        /// </summary>
        [Input("ipsecConfig")]
        public Input<Inputs.ConnectionIpsecConfigGetArgs>? IpsecConfig { get; set; }

        [Input("localSubnets")]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.216.0. New field 'vpn_connection_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network type of the IPsec connection. Value:
        /// - **public**: public network, indicating that the IPsec connection establishes an encrypted communication channel through the public network.
        /// - **private**: private network, indicating that the IPsec connection establishes an encrypted communication channel through the private network.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("remoteSubnets")]
        private InputList<string>? _remoteSubnets;

        /// <summary>
        /// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
        /// </summary>
        public InputList<string> RemoteSubnets
        {
            get => _remoteSubnets ?? (_remoteSubnets = new InputList<string>());
            set => _remoteSubnets = value;
        }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The negotiation status of Tunnel.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("tunnelOptionsSpecifications")]
        private InputList<Inputs.ConnectionTunnelOptionsSpecificationGetArgs>? _tunnelOptionsSpecifications;

        /// <summary>
        /// The tunnel options of IPsec. See `tunnel_options_specification` below.
        /// </summary>
        public InputList<Inputs.ConnectionTunnelOptionsSpecificationGetArgs> TunnelOptionsSpecifications
        {
            get => _tunnelOptionsSpecifications ?? (_tunnelOptionsSpecifications = new InputList<Inputs.ConnectionTunnelOptionsSpecificationGetArgs>());
            set => _tunnelOptionsSpecifications = value;
        }

        /// <summary>
        /// The name of the IPsec-VPN connection.
        /// </summary>
        [Input("vpnConnectionName")]
        public Input<string>? VpnConnectionName { get; set; }

        /// <summary>
        /// The ID of the VPN gateway.
        /// 
        /// The following arguments will be discarded. Please use new fields as soon as possible:
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
