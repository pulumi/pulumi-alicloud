// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn.Outputs
{

    [OutputType]
    public sealed class GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationResult
    {
        /// <summary>
        /// The ID of the user gateway associated with the tunnel.&gt; This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
        /// </summary>
        public readonly string CustomerGatewayId;
        /// <summary>
        /// Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:-**true** (default): enable the DPD function. IPsec initiator will send DPD message to check whether the peer device is alive. If the peer device does not receive a correct response within the set time, it is considered that the peer has been disconnected. IPsec will delete ISAKMP SA and the corresponding IPsec SA, and the security tunnel will also be deleted.-**false**: If the DPD function is disabled, the IPsec initiator does not send DPD detection packets.
        /// </summary>
        public readonly bool EnableDpd;
        /// <summary>
        /// Whether the NAT crossing function is enabled for the tunnel. Value:-**true** (default): Enables the NAT Traversal function. When enabled, the IKE negotiation process deletes the verification process of the UDP port number and realizes the discovery function of the NAT gateway device in the tunnel.-**false**: does not enable the NAT Traversal function.
        /// </summary>
        public readonly bool EnableNatTraversal;
        /// <summary>
        /// The local internet IP in Tunnel.
        /// </summary>
        public readonly string InternetIp;
        /// <summary>
        /// The role of Tunnel.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The state of Tunnel.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The status of the resource. Valid values: `Init`, `Active`, `Attaching`, `Attached`, `Detaching`, `financialLocked`, `Provisioning`, `Updating`, `Upgrading`, `Deleted`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Add the BGP configuration for the tunnel.&gt; After you enable the BGP function for IPsec connections (that is, specify **EnableTunnelsBgp** as **true**), you must configure this parameter.
        /// </summary>
        public readonly Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfigResult TunnelBgpConfig;
        /// <summary>
        /// The tunnel ID of IPsec-VPN connection.
        /// </summary>
        public readonly string TunnelId;
        /// <summary>
        /// Configuration information for the first phase negotiation.
        /// </summary>
        public readonly Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfigResult TunnelIkeConfig;
        /// <summary>
        /// The order in which the tunnel was created.-**1**: First tunnel.-**2**: The second tunnel.
        /// </summary>
        public readonly int TunnelIndex;
        /// <summary>
        /// Configuration information for the second-stage negotiation.
        /// </summary>
        public readonly Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfigResult TunnelIpsecConfig;
        /// <summary>
        /// The zoneNo of tunnel.
        /// </summary>
        public readonly string ZoneNo;

        [OutputConstructor]
        private GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationResult(
            string customerGatewayId,

            bool enableDpd,

            bool enableNatTraversal,

            string internetIp,

            string role,

            string state,

            string status,

            Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelBgpConfigResult tunnelBgpConfig,

            string tunnelId,

            Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIkeConfigResult tunnelIkeConfig,

            int tunnelIndex,

            Outputs.GetGatewayVpnAttachmentsAttachmentTunnelOptionsSpecificationTunnelIpsecConfigResult tunnelIpsecConfig,

            string zoneNo)
        {
            CustomerGatewayId = customerGatewayId;
            EnableDpd = enableDpd;
            EnableNatTraversal = enableNatTraversal;
            InternetIp = internetIp;
            Role = role;
            State = state;
            Status = status;
            TunnelBgpConfig = tunnelBgpConfig;
            TunnelId = tunnelId;
            TunnelIkeConfig = tunnelIkeConfig;
            TunnelIndex = tunnelIndex;
            TunnelIpsecConfig = tunnelIpsecConfig;
            ZoneNo = zoneNo;
        }
    }
}
