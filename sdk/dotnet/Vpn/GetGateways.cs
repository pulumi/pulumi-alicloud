// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn
{
    public static class GetGateways
    {
        /// <summary>
        /// The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.18.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var spec = config.Get("spec") ?? "20";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
        ///     {
        ///         NameRegex = "^default-NODELETING$",
        ///     });
        /// 
        ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
        ///     {
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         ZoneId = "me-east-1a",
        ///     });
        /// 
        ///     var vswitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length.Apply(length =&gt; length &gt; 0 ? 0 : 1); rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         vswitch.Add(new AliCloud.Vpc.Switch($"vswitch-{range.Value}", new()
        ///         {
        ///             VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///             CidrBlock = Std.Cidrsubnet.Invoke(new()
        ///             {
        ///                 Input = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Vpcs[0]?.CidrBlock),
        ///                 Newbits = 8,
        ///                 Netnum = 8,
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = "me-east-1a",
        ///             VswitchName = name,
        ///         }));
        ///     }
        ///     var vswitchId = Output.Tuple(defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length, defaultGetSwitches, Std.Concat.Invoke(new()
        ///     {
        ///         Input = new[]
        ///         {
        ///             vswitch.Select(__item =&gt; __item.Id).ToList(),
        ///             new[]
        ///             {
        ///                 "",
        ///             },
        ///         },
        ///     })).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var defaultGetSwitches = values.Item2;
        ///         var invoke = values.Item3;
        ///         return length &gt; 0 ? defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]) : invoke.Result[0];
        ///     });
        /// 
        ///     var defaultGateway = new AliCloud.Vpn.Gateway("default", new()
        ///     {
        ///         VpnType = "Normal",
        ///         VpnGatewayName = name,
        ///         VswitchId = vswitchId,
        ///         AutoPay = true,
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         NetworkType = "public",
        ///         PaymentType = "Subscription",
        ///         EnableIpsec = true,
        ///         Bandwidth = spec,
        ///     });
        /// 
        ///     var vpnGateways = AliCloud.Vpn.GetGateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultGateway.Id,
        ///         },
        ///         IncludeReservationData = true,
        ///         OutputFile = "/tmp/vpns",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGatewaysResult> InvokeAsync(GetGatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewaysResult>("alicloud:vpn/getGateways:getGateways", args ?? new GetGatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.18.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var spec = config.Get("spec") ?? "20";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
        ///     {
        ///         NameRegex = "^default-NODELETING$",
        ///     });
        /// 
        ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
        ///     {
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         ZoneId = "me-east-1a",
        ///     });
        /// 
        ///     var vswitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length.Apply(length =&gt; length &gt; 0 ? 0 : 1); rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         vswitch.Add(new AliCloud.Vpc.Switch($"vswitch-{range.Value}", new()
        ///         {
        ///             VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///             CidrBlock = Std.Cidrsubnet.Invoke(new()
        ///             {
        ///                 Input = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Vpcs[0]?.CidrBlock),
        ///                 Newbits = 8,
        ///                 Netnum = 8,
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = "me-east-1a",
        ///             VswitchName = name,
        ///         }));
        ///     }
        ///     var vswitchId = Output.Tuple(defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length, defaultGetSwitches, Std.Concat.Invoke(new()
        ///     {
        ///         Input = new[]
        ///         {
        ///             vswitch.Select(__item =&gt; __item.Id).ToList(),
        ///             new[]
        ///             {
        ///                 "",
        ///             },
        ///         },
        ///     })).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var defaultGetSwitches = values.Item2;
        ///         var invoke = values.Item3;
        ///         return length &gt; 0 ? defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]) : invoke.Result[0];
        ///     });
        /// 
        ///     var defaultGateway = new AliCloud.Vpn.Gateway("default", new()
        ///     {
        ///         VpnType = "Normal",
        ///         VpnGatewayName = name,
        ///         VswitchId = vswitchId,
        ///         AutoPay = true,
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         NetworkType = "public",
        ///         PaymentType = "Subscription",
        ///         EnableIpsec = true,
        ///         Bandwidth = spec,
        ///     });
        /// 
        ///     var vpnGateways = AliCloud.Vpn.GetGateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultGateway.Id,
        ///         },
        ///         IncludeReservationData = true,
        ///         OutputFile = "/tmp/vpns",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewaysResult> Invoke(GetGatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewaysResult>("alicloud:vpn/getGateways:getGateways", args ?? new GetGatewaysInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.18.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var spec = config.Get("spec") ?? "20";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
        ///     {
        ///         NameRegex = "^default-NODELETING$",
        ///     });
        /// 
        ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
        ///     {
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         ZoneId = "me-east-1a",
        ///     });
        /// 
        ///     var vswitch = new List&lt;AliCloud.Vpc.Switch&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length.Apply(length =&gt; length &gt; 0 ? 0 : 1); rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         vswitch.Add(new AliCloud.Vpc.Switch($"vswitch-{range.Value}", new()
        ///         {
        ///             VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///             CidrBlock = Std.Cidrsubnet.Invoke(new()
        ///             {
        ///                 Input = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Vpcs[0]?.CidrBlock),
        ///                 Newbits = 8,
        ///                 Netnum = 8,
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///             ZoneId = "me-east-1a",
        ///             VswitchName = name,
        ///         }));
        ///     }
        ///     var vswitchId = Output.Tuple(defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids).Length, defaultGetSwitches, Std.Concat.Invoke(new()
        ///     {
        ///         Input = new[]
        ///         {
        ///             vswitch.Select(__item =&gt; __item.Id).ToList(),
        ///             new[]
        ///             {
        ///                 "",
        ///             },
        ///         },
        ///     })).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var defaultGetSwitches = values.Item2;
        ///         var invoke = values.Item3;
        ///         return length &gt; 0 ? defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]) : invoke.Result[0];
        ///     });
        /// 
        ///     var defaultGateway = new AliCloud.Vpn.Gateway("default", new()
        ///     {
        ///         VpnType = "Normal",
        ///         VpnGatewayName = name,
        ///         VswitchId = vswitchId,
        ///         AutoPay = true,
        ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
        ///         NetworkType = "public",
        ///         PaymentType = "Subscription",
        ///         EnableIpsec = true,
        ///         Bandwidth = spec,
        ///     });
        /// 
        ///     var vpnGateways = AliCloud.Vpn.GetGateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultGateway.Id,
        ///         },
        ///         IncludeReservationData = true,
        ///         OutputFile = "/tmp/vpns",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewaysResult> Invoke(GetGatewaysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewaysResult>("alicloud:vpn/getGateways:getGateways", args ?? new GetGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewaysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit search to specific business status - valid value is "Normal", "FinancialLocked".
        /// </summary>
        [Input("businessStatus")]
        public string? BusinessStatus { get; set; }

        /// <summary>
        /// Indicates whether the IPsec-VPN feature is enabled.
        /// </summary>
        [Input("enableIpsec")]
        public bool? EnableIpsec { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// IDs of the VPN.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Include ineffective ordering data.
        /// </summary>
        [Input("includeReservationData")]
        public bool? IncludeReservationData { get; set; }

        /// <summary>
        /// A regex string of VPN name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Save the result to the file.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Indicates whether the SSL-VPN feature is enabled. Valid value is `Enable`, `Disable`.
        /// </summary>
        [Input("sslVpn")]
        public string? SslVpn { get; set; }

        /// <summary>
        /// Limit search to specific status - valid value is "Init", "Provisioning", "Active", "Updating", "Deleting".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Use the VPC ID as the search key.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetGatewaysArgs()
        {
        }
        public static new GetGatewaysArgs Empty => new GetGatewaysArgs();
    }

    public sealed class GetGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Limit search to specific business status - valid value is "Normal", "FinancialLocked".
        /// </summary>
        [Input("businessStatus")]
        public Input<string>? BusinessStatus { get; set; }

        /// <summary>
        /// Indicates whether the IPsec-VPN feature is enabled.
        /// </summary>
        [Input("enableIpsec")]
        public Input<bool>? EnableIpsec { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// IDs of the VPN.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Include ineffective ordering data.
        /// </summary>
        [Input("includeReservationData")]
        public Input<bool>? IncludeReservationData { get; set; }

        /// <summary>
        /// A regex string of VPN name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Save the result to the file.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Indicates whether the SSL-VPN feature is enabled. Valid value is `Enable`, `Disable`.
        /// </summary>
        [Input("sslVpn")]
        public Input<string>? SslVpn { get; set; }

        /// <summary>
        /// Limit search to specific status - valid value is "Init", "Provisioning", "Active", "Updating", "Deleting".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Use the VPC ID as the search key.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetGatewaysInvokeArgs()
        {
        }
        public static new GetGatewaysInvokeArgs Empty => new GetGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewaysResult
    {
        /// <summary>
        /// The business status of the VPN gateway.
        /// </summary>
        public readonly string? BusinessStatus;
        /// <summary>
        /// Whether the ipsec function is enabled.
        /// </summary>
        public readonly bool? EnableIpsec;
        /// <summary>
        /// A list of VPN gateways. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewaysGatewayResult> Gateways;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IDs of the VPN.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly bool? IncludeReservationData;
        public readonly string? NameRegex;
        /// <summary>
        /// names of the VPN.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// Whether the ssl function is enabled.
        /// </summary>
        public readonly string? SslVpn;
        /// <summary>
        /// The status of the VPN
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// ID of the VPC that the VPN belongs.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetGatewaysResult(
            string? businessStatus,

            bool? enableIpsec,

            ImmutableArray<Outputs.GetGatewaysGatewayResult> gateways,

            string id,

            ImmutableArray<string> ids,

            bool? includeReservationData,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            string? sslVpn,

            string? status,

            string? vpcId)
        {
            BusinessStatus = businessStatus;
            EnableIpsec = enableIpsec;
            Gateways = gateways;
            Id = id;
            Ids = ids;
            IncludeReservationData = includeReservationData;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            SslVpn = sslVpn;
            Status = status;
            VpcId = vpcId;
        }
    }
}
