// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn
{
    /// <summary>
    /// Provides a VPN Gateway Vpn Attachment resource.
    /// 
    /// VpnAttachment has been upgraded to dual-tunnel mode. When you create a VpnAttachment in dual tunnel mode, you can configure the following request parameters in addition to the required parameters: vpn_attachment_name, network_type, effectImmediately, tags array, resource_group_id, tunnel_options_specification array, and enable_tunnels_bgp.
    /// 
    /// For information about VPN Gateway Vpn Attachment and how to use it, see [What is Vpn Attachment](https://www.alibabacloud.com/help/zh/virtual-private-cloud/latest/createvpnattachment).
    /// 
    /// &gt; **NOTE:** Available since v1.181.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = new AliCloud.Vpn.CustomerGateway("default", new()
    ///     {
    ///         CustomerGatewayName = name,
    ///         IpAddress = "42.104.22.210",
    ///         Asn = "45014",
    ///         Description = name,
    ///     });
    /// 
    ///     var defaultGatewayVpnAttachment = new AliCloud.Vpn.GatewayVpnAttachment("default", new()
    ///     {
    ///         CustomerGatewayId = @default.Id,
    ///         NetworkType = "public",
    ///         LocalSubnet = "0.0.0.0/0",
    ///         RemoteSubnet = "0.0.0.0/0",
    ///         EffectImmediately = false,
    ///         IkeConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentIkeConfigArgs
    ///         {
    ///             IkeAuthAlg = "md5",
    ///             IkeEncAlg = "des",
    ///             IkeVersion = "ikev2",
    ///             IkeMode = "main",
    ///             IkeLifetime = 86400,
    ///             Psk = "tf-testvpn2",
    ///             IkePfs = "group1",
    ///             RemoteId = "testbob2",
    ///             LocalId = "testalice2",
    ///         },
    ///         IpsecConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentIpsecConfigArgs
    ///         {
    ///             IpsecPfs = "group5",
    ///             IpsecEncAlg = "des",
    ///             IpsecAuthAlg = "md5",
    ///             IpsecLifetime = 86400,
    ///         },
    ///         BgpConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentBgpConfigArgs
    ///         {
    ///             Enable = true,
    ///             LocalAsn = 45014,
    ///             TunnelCidr = "169.254.11.0/30",
    ///             LocalBgpIp = "169.254.11.1",
    ///         },
    ///         HealthCheckConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentHealthCheckConfigArgs
    ///         {
    ///             Enable = true,
    ///             Sip = "192.168.1.1",
    ///             Dip = "10.0.0.1",
    ///             Interval = 10,
    ///             Retry = 10,
    ///             Policy = "revoke_route",
    ///         },
    ///         EnableDpd = true,
    ///         EnableNatTraversal = true,
    ///         VpnAttachmentName = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Dual Tunnel Mode Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf_example";
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var cgw1 = new AliCloud.Vpn.CustomerGateway("cgw1", new()
    ///     {
    ///         IpAddress = "2.2.2.2",
    ///         Asn = "1219001",
    ///     });
    /// 
    ///     var cgw2 = new AliCloud.Vpn.CustomerGateway("cgw2", new()
    ///     {
    ///         IpAddress = "43.43.3.22",
    ///         Asn = "44331",
    ///         CustomerGatewayName = "example_amp",
    ///     });
    /// 
    ///     var defaultGatewayVpnAttachment = new AliCloud.Vpn.GatewayVpnAttachment("default", new()
    ///     {
    ///         LocalSubnet = "0.0.0.0/0",
    ///         EnableTunnelsBgp = true,
    ///         VpnAttachmentName = "tfaccvpngateway25800",
    ///         TunnelOptionsSpecifications = new[]
    ///         {
    ///             new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs
    ///             {
    ///                 TunnelIpsecConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs
    ///                 {
    ///                     IpsecLifetime = 86200,
    ///                     IpsecPfs = "group5",
    ///                     IpsecAuthAlg = "md5",
    ///                     IpsecEncAlg = "aes",
    ///                 },
    ///                 CustomerGatewayId = cgw1.Id,
    ///                 EnableDpd = true,
    ///                 EnableNatTraversal = true,
    ///                 TunnelIndex = 1,
    ///                 TunnelBgpConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs
    ///                 {
    ///                     LocalAsn = 1219001,
    ///                     LocalBgpIp = "169.254.10.1",
    ///                     TunnelCidr = "169.254.10.0/30",
    ///                 },
    ///                 TunnelIkeConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs
    ///                 {
    ///                     IkeMode = "main",
    ///                     IkeVersion = "ikev1",
    ///                     Psk = "12345678",
    ///                     RemoteId = "2.2.2.2",
    ///                     IkeAuthAlg = "md5",
    ///                     IkeEncAlg = "aes",
    ///                     IkeLifetime = 86100,
    ///                     IkePfs = "group2",
    ///                     LocalId = "1.1.1.1",
    ///                 },
    ///             },
    ///             new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs
    ///             {
    ///                 TunnelIpsecConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs
    ///                 {
    ///                     IpsecEncAlg = "aes",
    ///                     IpsecLifetime = 86400,
    ///                     IpsecPfs = "group5",
    ///                     IpsecAuthAlg = "sha256",
    ///                 },
    ///                 CustomerGatewayId = cgw1.Id,
    ///                 EnableDpd = true,
    ///                 EnableNatTraversal = true,
    ///                 TunnelIndex = 2,
    ///                 TunnelBgpConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs
    ///                 {
    ///                     LocalAsn = 1219001,
    ///                     LocalBgpIp = "169.254.20.1",
    ///                     TunnelCidr = "169.254.20.0/30",
    ///                 },
    ///                 TunnelIkeConfig = new AliCloud.Vpn.Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs
    ///                 {
    ///                     LocalId = "4.4.4.4",
    ///                     RemoteId = "5.5.5.5",
    ///                     IkeLifetime = 86400,
    ///                     IkeMode = "main",
    ///                     IkePfs = "group5",
    ///                     IkeVersion = "ikev2",
    ///                     IkeAuthAlg = "md5",
    ///                     IkeEncAlg = "aes",
    ///                     Psk = "32333442",
    ///                 },
    ///             },
    ///         },
    ///         RemoteSubnet = "0.0.0.0/0",
    ///         NetworkType = "public",
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0])),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPN Gateway Vpn Attachment can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment")]
    public partial class GatewayVpnAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bgp configuration information.
        /// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
        /// </summary>
        [Output("bgpConfig")]
        public Output<Outputs.GatewayVpnAttachmentBgpConfig> BgpConfig { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Customer gateway ID.
        /// - This parameter is required when creating a single-tunnel mode vpn attachment.
        /// </summary>
        [Output("customerGatewayId")]
        public Output<string?> CustomerGatewayId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
        /// </summary>
        [Output("effectImmediately")]
        public Output<bool> EffectImmediately { get; private set; } = null!;

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Whether to enable the DPD (peer survival detection) function.
        /// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
        /// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
        /// </summary>
        [Output("enableDpd")]
        public Output<bool> EnableDpd { get; private set; } = null!;

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Specifies whether to enable NAT traversal. Valid values:
        /// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
        /// - false: disables NAT traversal.
        /// </summary>
        [Output("enableNatTraversal")]
        public Output<bool> EnableNatTraversal { get; private set; } = null!;

        /// <summary>
        /// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
        /// 
        /// &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
        /// </summary>
        [Output("enableTunnelsBgp")]
        public Output<bool> EnableTunnelsBgp { get; private set; } = null!;

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Health check configuration information. See `health_check_config` below.
        /// </summary>
        [Output("healthCheckConfig")]
        public Output<Outputs.GatewayVpnAttachmentHealthCheckConfig> HealthCheckConfig { get; private set; } = null!;

        /// <summary>
        /// The configurations of Phase 1 negotiations. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
        /// </summary>
        [Output("ikeConfig")]
        public Output<Outputs.GatewayVpnAttachmentIkeConfig> IkeConfig { get; private set; } = null!;

        /// <summary>
        /// Configuration negotiated in the second stage. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
        /// </summary>
        [Output("ipsecConfig")]
        public Output<Outputs.GatewayVpnAttachmentIpsecConfig> IpsecConfig { get; private set; } = null!;

        /// <summary>
        /// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Output("localSubnet")]
        public Output<string> LocalSubnet { get; private set; } = null!;

        /// <summary>
        /// network type
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        /// <summary>
        /// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Output("remoteSubnet")]
        public Output<string> RemoteSubnet { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The negotiation status of Tunnel.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Configure the tunnel.
        /// - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
        /// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
        /// </summary>
        [Output("tunnelOptionsSpecifications")]
        public Output<ImmutableArray<Outputs.GatewayVpnAttachmentTunnelOptionsSpecification>> TunnelOptionsSpecifications { get; private set; } = null!;

        /// <summary>
        /// vpn attachment name
        /// </summary>
        [Output("vpnAttachmentName")]
        public Output<string?> VpnAttachmentName { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayVpnAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayVpnAttachment(string name, GatewayVpnAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment", name, args ?? new GatewayVpnAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayVpnAttachment(string name, Input<string> id, GatewayVpnAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayVpnAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayVpnAttachment Get(string name, Input<string> id, GatewayVpnAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayVpnAttachment(name, id, state, options);
        }
    }

    public sealed class GatewayVpnAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bgp configuration information.
        /// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
        /// </summary>
        [Input("bgpConfig")]
        public Input<Inputs.GatewayVpnAttachmentBgpConfigArgs>? BgpConfig { get; set; }

        /// <summary>
        /// Customer gateway ID.
        /// - This parameter is required when creating a single-tunnel mode vpn attachment.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
        /// </summary>
        [Input("effectImmediately")]
        public Input<bool>? EffectImmediately { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Whether to enable the DPD (peer survival detection) function.
        /// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
        /// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
        /// </summary>
        [Input("enableDpd")]
        public Input<bool>? EnableDpd { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Specifies whether to enable NAT traversal. Valid values:
        /// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
        /// - false: disables NAT traversal.
        /// </summary>
        [Input("enableNatTraversal")]
        public Input<bool>? EnableNatTraversal { get; set; }

        /// <summary>
        /// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
        /// 
        /// &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
        /// </summary>
        [Input("enableTunnelsBgp")]
        public Input<bool>? EnableTunnelsBgp { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Health check configuration information. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.GatewayVpnAttachmentHealthCheckConfigArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// The configurations of Phase 1 negotiations. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
        /// </summary>
        [Input("ikeConfig")]
        public Input<Inputs.GatewayVpnAttachmentIkeConfigArgs>? IkeConfig { get; set; }

        /// <summary>
        /// Configuration negotiated in the second stage. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
        /// </summary>
        [Input("ipsecConfig")]
        public Input<Inputs.GatewayVpnAttachmentIpsecConfigArgs>? IpsecConfig { get; set; }

        /// <summary>
        /// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Input("localSubnet", required: true)]
        public Input<string> LocalSubnet { get; set; } = null!;

        /// <summary>
        /// network type
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Input("remoteSubnet", required: true)]
        public Input<string> RemoteSubnet { get; set; } = null!;

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tunnelOptionsSpecifications")]
        private InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs>? _tunnelOptionsSpecifications;

        /// <summary>
        /// Configure the tunnel.
        /// - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
        /// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
        /// </summary>
        public InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs> TunnelOptionsSpecifications
        {
            get => _tunnelOptionsSpecifications ?? (_tunnelOptionsSpecifications = new InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationArgs>());
            set => _tunnelOptionsSpecifications = value;
        }

        /// <summary>
        /// vpn attachment name
        /// </summary>
        [Input("vpnAttachmentName")]
        public Input<string>? VpnAttachmentName { get; set; }

        public GatewayVpnAttachmentArgs()
        {
        }
        public static new GatewayVpnAttachmentArgs Empty => new GatewayVpnAttachmentArgs();
    }

    public sealed class GatewayVpnAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bgp configuration information.
        /// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgp_config` below.
        /// </summary>
        [Input("bgpConfig")]
        public Input<Inputs.GatewayVpnAttachmentBgpConfigGetArgs>? BgpConfig { get; set; }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Customer gateway ID.
        /// - This parameter is required when creating a single-tunnel mode vpn attachment.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
        /// </summary>
        [Input("effectImmediately")]
        public Input<bool>? EffectImmediately { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Whether to enable the DPD (peer survival detection) function.
        /// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
        /// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
        /// </summary>
        [Input("enableDpd")]
        public Input<bool>? EnableDpd { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Specifies whether to enable NAT traversal. Valid values:
        /// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
        /// - false: disables NAT traversal.
        /// </summary>
        [Input("enableNatTraversal")]
        public Input<bool>? EnableNatTraversal { get; set; }

        /// <summary>
        /// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
        /// 
        /// &gt; **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
        /// </summary>
        [Input("enableTunnelsBgp")]
        public Input<bool>? EnableTunnelsBgp { get; set; }

        /// <summary>
        /// This parameter is supported if you create an vpn attachment in single-tunnel mode.
        /// Health check configuration information. See `health_check_config` below.
        /// </summary>
        [Input("healthCheckConfig")]
        public Input<Inputs.GatewayVpnAttachmentHealthCheckConfigGetArgs>? HealthCheckConfig { get; set; }

        /// <summary>
        /// The configurations of Phase 1 negotiations. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ike_config` below.
        /// </summary>
        [Input("ikeConfig")]
        public Input<Inputs.GatewayVpnAttachmentIkeConfigGetArgs>? IkeConfig { get; set; }

        /// <summary>
        /// Configuration negotiated in the second stage. 
        /// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsec_config` below.
        /// </summary>
        [Input("ipsecConfig")]
        public Input<Inputs.GatewayVpnAttachmentIpsecConfigGetArgs>? IpsecConfig { get; set; }

        /// <summary>
        /// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Input("localSubnet")]
        public Input<string>? LocalSubnet { get; set; }

        /// <summary>
        /// network type
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
        /// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
        /// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
        /// </summary>
        [Input("remoteSubnet")]
        public Input<string>? RemoteSubnet { get; set; }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The negotiation status of Tunnel.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tunnelOptionsSpecifications")]
        private InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs>? _tunnelOptionsSpecifications;

        /// <summary>
        /// Configure the tunnel.
        /// - You can configure parameters in the `tunnel_options_specification` array when you create a vpn attachment in dual-tunnel mode.
        /// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnel_options_specification` below.
        /// </summary>
        public InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs> TunnelOptionsSpecifications
        {
            get => _tunnelOptionsSpecifications ?? (_tunnelOptionsSpecifications = new InputList<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs>());
            set => _tunnelOptionsSpecifications = value;
        }

        /// <summary>
        /// vpn attachment name
        /// </summary>
        [Input("vpnAttachmentName")]
        public Input<string>? VpnAttachmentName { get; set; }

        public GatewayVpnAttachmentState()
        {
        }
        public static new GatewayVpnAttachmentState Empty => new GatewayVpnAttachmentState();
    }
}
