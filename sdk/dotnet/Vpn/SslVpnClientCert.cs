// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "^default-NODELETING$",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var default0 = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = @default.Apply(getZonesResult =&gt; getZonesResult.Ids[0]),
    ///     });
    /// 
    ///     var default1 = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = @default.Apply(getZonesResult =&gt; getZonesResult.Ids[1]),
    ///     });
    /// 
    ///     var defaultGateway = new AliCloud.Vpn.Gateway("default", new()
    ///     {
    ///         VpnGatewayName = name,
    ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         Bandwidth = 10,
    ///         EnableSsl = true,
    ///         Description = name,
    ///         PaymentType = "Subscription",
    ///         VswitchId = default0.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]),
    ///         DisasterRecoveryVswitchId = default1.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]),
    ///     });
    /// 
    ///     var defaultSslVpnServer = new AliCloud.Vpn.SslVpnServer("default", new()
    ///     {
    ///         Name = name,
    ///         VpnGatewayId = defaultGateway.Id,
    ///         ClientIpPool = "192.168.0.0/16",
    ///         LocalSubnet = Std.Cidrsubnet.Invoke(new()
    ///         {
    ///             Input = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Vpcs[0]?.CidrBlock),
    ///             Newbits = 8,
    ///             Netnum = 8,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Protocol = "UDP",
    ///         Cipher = "AES-128-CBC",
    ///         Port = 1194,
    ///         Compress = false,
    ///     });
    /// 
    ///     var defaultSslVpnClientCert = new AliCloud.Vpn.SslVpnClientCert("default", new()
    ///     {
    ///         SslVpnServerId = defaultSslVpnServer.Id,
    ///         Name = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSL-VPN client certificates can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:vpn/sslVpnClientCert:SslVpnClientCert example vsc-abc123456
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpn/sslVpnClientCert:SslVpnClientCert")]
    public partial class SslVpnClientCert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The client ca cert.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// The client cert.
        /// </summary>
        [Output("clientCert")]
        public Output<string> ClientCert { get; private set; } = null!;

        /// <summary>
        /// The vpn client config.
        /// </summary>
        [Output("clientConfig")]
        public Output<string> ClientConfig { get; private set; } = null!;

        /// <summary>
        /// The client key.
        /// </summary>
        [Output("clientKey")]
        public Output<string> ClientKey { get; private set; } = null!;

        /// <summary>
        /// The name of the client certificate.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the SSL-VPN server.
        /// </summary>
        [Output("sslVpnServerId")]
        public Output<string> SslVpnServerId { get; private set; } = null!;

        /// <summary>
        /// The status of the client certificate.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a SslVpnClientCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SslVpnClientCert(string name, SslVpnClientCertArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpn/sslVpnClientCert:SslVpnClientCert", name, args ?? new SslVpnClientCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SslVpnClientCert(string name, Input<string> id, SslVpnClientCertState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpn/sslVpnClientCert:SslVpnClientCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                    "clientCert",
                    "clientConfig",
                    "clientKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SslVpnClientCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SslVpnClientCert Get(string name, Input<string> id, SslVpnClientCertState? state = null, CustomResourceOptions? options = null)
        {
            return new SslVpnClientCert(name, id, state, options);
        }
    }

    public sealed class SslVpnClientCertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the client certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the SSL-VPN server.
        /// </summary>
        [Input("sslVpnServerId", required: true)]
        public Input<string> SslVpnServerId { get; set; } = null!;

        public SslVpnClientCertArgs()
        {
        }
        public static new SslVpnClientCertArgs Empty => new SslVpnClientCertArgs();
    }

    public sealed class SslVpnClientCertState : global::Pulumi.ResourceArgs
    {
        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// The client ca cert.
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientCert")]
        private Input<string>? _clientCert;

        /// <summary>
        /// The client cert.
        /// </summary>
        public Input<string>? ClientCert
        {
            get => _clientCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientConfig")]
        private Input<string>? _clientConfig;

        /// <summary>
        /// The vpn client config.
        /// </summary>
        public Input<string>? ClientConfig
        {
            get => _clientConfig;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientConfig = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientKey")]
        private Input<string>? _clientKey;

        /// <summary>
        /// The client key.
        /// </summary>
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the client certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the SSL-VPN server.
        /// </summary>
        [Input("sslVpnServerId")]
        public Input<string>? SslVpnServerId { get; set; }

        /// <summary>
        /// The status of the client certificate.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SslVpnClientCertState()
        {
        }
        public static new SslVpnClientCertState Empty => new SslVpnClientCertState();
    }
}
