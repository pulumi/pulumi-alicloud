// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn.Inputs
{

    public sealed class GatewayVpnAttachmentIkeConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm negotiated in the first stage. Valid values: md5, sha1, sha256, sha384, sha512. Default value: md5.
        /// </summary>
        [Input("ikeAuthAlg")]
        public Input<string>? IkeAuthAlg { get; set; }

        /// <summary>
        /// The encryption algorithm that is used in Phase 1 negotiations. Valid values: aes, aes192, aes256, des, and 3des. Default value: aes.
        /// </summary>
        [Input("ikeEncAlg")]
        public Input<string>? IkeEncAlg { get; set; }

        /// <summary>
        /// The SA lifetime as a result of Phase 1 negotiations. Unit: seconds. Valid values: 0 to 86400. Default value: 86400.
        /// </summary>
        [Input("ikeLifetime")]
        public Input<int>? IkeLifetime { get; set; }

        /// <summary>
        /// IKE mode, the negotiation mode. Valid values: main and aggressive. Default value: main.
        /// </summary>
        [Input("ikeMode")]
        public Input<string>? IkeMode { get; set; }

        /// <summary>
        /// The Diffie-Hellman key exchange algorithm used in the first stage negotiation. Valid values: group1, group2, group5, or group14. Default value: group2.
        /// </summary>
        [Input("ikePfs")]
        public Input<string>? IkePfs { get; set; }

        /// <summary>
        /// The version of the IKE protocol. Value: ikev1 or ikev2. Default value: ikev1.
        /// </summary>
        [Input("ikeVersion")]
        public Input<string>? IkeVersion { get; set; }

        /// <summary>
        /// The identifier on the Alibaba Cloud side of the IPsec connection. The length is limited to 100 characters. The default value is leftId-not-exist
        /// </summary>
        [Input("localId")]
        public Input<string>? LocalId { get; set; }

        /// <summary>
        /// A pre-shared key for authentication between the VPN gateway and the local data center. The key length is 1~100 characters.
        /// - If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key.
        /// - The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the on-premises data center. Otherwise, connections between the on-premises data center and the VPN gateway cannot be established.
        /// </summary>
        [Input("psk")]
        public Input<string>? Psk { get; set; }

        /// <summary>
        /// The identifier of the IPsec connection to the local data center. The length is limited to 100 characters. The default value is the IP address of the user gateway.
        /// </summary>
        [Input("remoteId")]
        public Input<string>? RemoteId { get; set; }

        public GatewayVpnAttachmentIkeConfigArgs()
        {
        }
        public static new GatewayVpnAttachmentIkeConfigArgs Empty => new GatewayVpnAttachmentIkeConfigArgs();
    }
}
