// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpn.Inputs
{

    public sealed class GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the user gateway associated with the tunnel.
        /// 
        /// &gt; **NOTE:**  This parameter is required when creating a dual-tunnel mode IPsec-VPN connection.
        /// </summary>
        [Input("customerGatewayId", required: true)]
        public Input<string> CustomerGatewayId { get; set; } = null!;

        /// <summary>
        /// Whether the DPD (peer alive detection) function is enabled for the tunnel. Value:
        /// </summary>
        [Input("enableDpd")]
        public Input<bool>? EnableDpd { get; set; }

        /// <summary>
        /// Whether the NAT crossing function is enabled for the tunnel. Value:
        /// </summary>
        [Input("enableNatTraversal")]
        public Input<bool>? EnableNatTraversal { get; set; }

        /// <summary>
        /// The local internet IP in Tunnel.
        /// </summary>
        [Input("internetIp")]
        public Input<string>? InternetIp { get; set; }

        /// <summary>
        /// The role of Tunnel.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The state of Tunnel.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The negotiation status of Tunnel.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Add the BGP configuration for the tunnel.
        /// 
        /// &gt; **NOTE:**  After you enable the BGP function for IPsec connections (that is, specify `EnableTunnelsBgp` as `true`), you must configure this parameter.
        /// See `tunnel_bgp_config` below.
        /// </summary>
        [Input("tunnelBgpConfig")]
        public Input<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigGetArgs>? TunnelBgpConfig { get; set; }

        /// <summary>
        /// The tunnel ID of IPsec-VPN connection.
        /// </summary>
        [Input("tunnelId")]
        public Input<string>? TunnelId { get; set; }

        /// <summary>
        /// Configuration information for the first phase negotiation. See `tunnel_ike_config` below.
        /// </summary>
        [Input("tunnelIkeConfig")]
        public Input<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigGetArgs>? TunnelIkeConfig { get; set; }

        /// <summary>
        /// The order in which the tunnel was created.
        /// </summary>
        [Input("tunnelIndex", required: true)]
        public Input<int> TunnelIndex { get; set; } = null!;

        /// <summary>
        /// Configuration information for the second-stage negotiation. See `tunnel_ipsec_config` below.
        /// </summary>
        [Input("tunnelIpsecConfig")]
        public Input<Inputs.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigGetArgs>? TunnelIpsecConfig { get; set; }

        /// <summary>
        /// The zoneNo of tunnel.
        /// </summary>
        [Input("zoneNo")]
        public Input<string>? ZoneNo { get; set; }

        public GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs()
        {
        }
        public static new GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs Empty => new GatewayVpnAttachmentTunnelOptionsSpecificationGetArgs();
    }
}
