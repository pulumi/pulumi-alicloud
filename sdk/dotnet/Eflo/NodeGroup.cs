// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo
{
    /// <summary>
    /// Provides a Eflo Node Group resource.
    /// 
    /// Node group. Divide a cluster into multiple node groups, each containing multiple nodes.
    /// 
    /// For information about Eflo Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateNodeGroup).
    /// 
    /// &gt; **NOTE:** Available since v1.246.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var createVpc = new AliCloud.Vpc.Network("create_vpc", new()
    ///     {
    ///         CidrBlock = "192.168.0.0/16",
    ///         VpcName = "cluster-resoure-example",
    ///     });
    /// 
    ///     var createVswitch = new AliCloud.Vpc.Switch("create_vswitch", new()
    ///     {
    ///         VpcId = createVpc.Id,
    ///         ZoneId = "cn-hangzhou-b",
    ///         CidrBlock = "192.168.0.0/24",
    ///         VswitchName = "cluster-resoure-example",
    ///     });
    /// 
    ///     var createSecurityGroup = new AliCloud.Ecs.SecurityGroup("create_security_group", new()
    ///     {
    ///         Description = "sg",
    ///         SecurityGroupName = "cluster-resoure-example",
    ///         SecurityGroupType = "normal",
    ///         VpcId = createVpc.Id,
    ///     });
    /// 
    ///     var defaultCluster = new AliCloud.Eflo.Cluster("default", new()
    ///     {
    ///         ClusterDescription = "cluster-resource-example",
    ///         OpenEniJumboFrame = false,
    ///         HpnZone = "B1",
    ///         NimizVswitches = new[]
    ///         {
    ///             "1111",
    ///         },
    ///         IgnoreFailedNodeTasks = true,
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[1])),
    ///         NodeGroups = new[]
    ///         {
    ///             new AliCloud.Eflo.Inputs.ClusterNodeGroupArgs
    ///             {
    ///                 ImageId = "i198448731735114628708",
    ///                 ZoneId = "cn-hangzhou-b",
    ///                 NodeGroupName = "cluster-resource-example",
    ///                 NodeGroupDescription = "cluster-resource-example",
    ///                 MachineType = "efg2.C48cA3sen",
    ///             },
    ///         },
    ///         Networks = new AliCloud.Eflo.Inputs.ClusterNetworksArgs
    ///         {
    ///             TailIpVersion = "ipv4",
    ///             NewVpdInfo = new AliCloud.Eflo.Inputs.ClusterNetworksNewVpdInfoArgs
    ///             {
    ///                 MonitorVpcId = createVpc.Id,
    ///                 MonitorVswitchId = createVswitch.Id,
    ///                 CenId = "11111",
    ///                 CloudLinkId = "1111",
    ///                 VpdCidr = "111",
    ///                 VpdSubnets = new[]
    ///                 {
    ///                     new AliCloud.Eflo.Inputs.ClusterNetworksNewVpdInfoVpdSubnetArgs
    ///                     {
    ///                         ZoneId = "1111",
    ///                         SubnetCidr = "111",
    ///                         SubnetType = "111",
    ///                     },
    ///                 },
    ///                 CloudLinkCidr = "169.254.128.0/23",
    ///             },
    ///             SecurityGroupId = createSecurityGroup.Id,
    ///             VswitchZoneId = "cn-hangzhou-b",
    ///             VpcId = createVpc.Id,
    ///             VswitchId = createVswitch.Id,
    ///             VpdInfo = new AliCloud.Eflo.Inputs.ClusterNetworksVpdInfoArgs
    ///             {
    ///                 VpdId = "111",
    ///                 VpdSubnets = new[]
    ///                 {
    ///                     "111",
    ///                 },
    ///             },
    ///             IpAllocationPolicies = new[]
    ///             {
    ///                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyArgs
    ///                 {
    ///                     BondPolicy = new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyBondPolicyArgs
    ///                     {
    ///                         BondDefaultSubnet = "111",
    ///                         Bonds = new[]
    ///                         {
    ///                             new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyBondPolicyBondArgs
    ///                             {
    ///                                 Name = "111",
    ///                                 Subnet = "111",
    ///                             },
    ///                         },
    ///                     },
    ///                     MachineTypePolicies = new[]
    ///                     {
    ///                         new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs
    ///                         {
    ///                             Bonds = new[]
    ///                             {
    ///                                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs
    ///                                 {
    ///                                     Name = "111",
    ///                                     Subnet = "111",
    ///                                 },
    ///                             },
    ///                             MachineType = "111",
    ///                         },
    ///                     },
    ///                     NodePolicies = new[]
    ///                     {
    ///                         new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyNodePolicyArgs
    ///                         {
    ///                             Bonds = new[]
    ///                             {
    ///                                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyNodePolicyBondArgs
    ///                                 {
    ///                                     Name = "111",
    ///                                     Subnet = "111",
    ///                                 },
    ///                             },
    ///                             NodeId = "111",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ClusterName = "tfacceflo7165",
    ///         ClusterType = "Lite",
    ///     });
    /// 
    ///     var defaultNode = new AliCloud.Eflo.Node("default", new()
    ///     {
    ///         Period = 36,
    ///         DiscountLevel = "36",
    ///         BillingCycle = "1month",
    ///         Classify = "gpuserver",
    ///         Zone = "cn-hangzhou-b",
    ///         ProductForm = "instance",
    ///         PaymentRatio = "0",
    ///         HpnZone = "B1",
    ///         ServerArch = "bmserver",
    ///         ComputingServer = "efg1.nvga1n",
    ///         StageNum = "36",
    ///         RenewalStatus = "AutoRenewal",
    ///         RenewPeriod = 36,
    ///         Status = "Unused",
    ///     });
    /// 
    ///     var defaultNodeGroup = new AliCloud.Eflo.NodeGroup("default", new()
    ///     {
    ///         Nodes = new[]
    ///         {
    ///             new AliCloud.Eflo.Inputs.NodeGroupNodeArgs
    ///             {
    ///                 NodeId = defaultNode.Id,
    ///                 VpcId = createVpc.Id,
    ///                 VswitchId = createVswitch.Id,
    ///                 Hostname = "jxyhostname",
    ///                 LoginPassword = "Alibaba@2025",
    ///             },
    ///         },
    ///         IgnoreFailedNodeTasks = true,
    ///         ClusterId = defaultCluster.Id,
    ///         ImageId = "i195048661660874208657",
    ///         ZoneId = "cn-hangzhou-b",
    ///         VpdSubnets = new[]
    ///         {
    ///             "example",
    ///         },
    ///         UserData = "YWxpLGFsaSxhbGliYWJh",
    ///         VswitchZoneId = "cn-hangzhou-b",
    ///         IpAllocationPolicies = new[]
    ///         {
    ///             new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyArgs
    ///             {
    ///                 BondPolicy = new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyBondPolicyArgs
    ///                 {
    ///                     BondDefaultSubnet = "example",
    ///                     Bonds = new[]
    ///                     {
    ///                         new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyBondPolicyBondArgs
    ///                         {
    ///                             Name = "example",
    ///                             Subnet = "example",
    ///                         },
    ///                     },
    ///                 },
    ///                 MachineTypePolicies = new[]
    ///                 {
    ///                     new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyMachineTypePolicyArgs
    ///                     {
    ///                         Bonds = new[]
    ///                         {
    ///                             new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs
    ///                             {
    ///                                 Name = "example",
    ///                                 Subnet = "example",
    ///                             },
    ///                         },
    ///                         MachineType = "example",
    ///                     },
    ///                 },
    ///                 NodePolicies = new[]
    ///                 {
    ///                     new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyNodePolicyArgs
    ///                     {
    ///                         NodeId = defaultNode.Id,
    ///                         Bonds = new[]
    ///                         {
    ///                             new AliCloud.Eflo.Inputs.NodeGroupIpAllocationPolicyNodePolicyBondArgs
    ///                             {
    ///                                 Name = "example",
    ///                                 Subnet = "example",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         MachineType = "efg1.nvga1",
    ///         Az = "cn-hangzhou-b",
    ///         NodeGroupDescription = "resource-example1",
    ///         NodeGroupName = "tfacceflo63657_update",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Eflo Node Group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:eflo/nodeGroup:NodeGroup example &lt;cluster_id&gt;:&lt;node_group_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eflo/nodeGroup:NodeGroup")]
    public partial class NodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Az
        /// </summary>
        [Output("az")]
        public Output<string> Az { get; private set; } = null!;

        /// <summary>
        /// Cluster ID
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Create time
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Output("ignoreFailedNodeTasks")]
        public Output<bool?> IgnoreFailedNodeTasks { get; private set; } = null!;

        /// <summary>
        /// Image ID. You can modify the image ID since v1.252.0.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `IpAllocationPolicy` below.
        /// </summary>
        [Output("ipAllocationPolicies")]
        public Output<ImmutableArray<Outputs.NodeGroupIpAllocationPolicy>> IpAllocationPolicies { get; private set; } = null!;

        /// <summary>
        /// key pair name
        /// </summary>
        [Output("keyPairName")]
        public Output<string?> KeyPairName { get; private set; } = null!;

        /// <summary>
        /// Login Password
        /// </summary>
        [Output("loginPassword")]
        public Output<string?> LoginPassword { get; private set; } = null!;

        /// <summary>
        /// Machine type
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// NodeGroupDescription
        /// </summary>
        [Output("nodeGroupDescription")]
        public Output<string?> NodeGroupDescription { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Output("nodeGroupId")]
        public Output<string> NodeGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("nodeGroupName")]
        public Output<string> NodeGroupName { get; private set; } = null!;

        /// <summary>
        /// Node List See `Nodes` below.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.NodeGroupNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Custom Data
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Cluster subnet list
        /// </summary>
        [Output("vpdSubnets")]
        public Output<ImmutableArray<string>> VpdSubnets { get; private set; } = null!;

        /// <summary>
        /// Zone ID of the switch
        /// </summary>
        [Output("vswitchZoneId")]
        public Output<string?> VswitchZoneId { get; private set; } = null!;

        /// <summary>
        /// Zone ID
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a NodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeGroup(string name, NodeGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:eflo/nodeGroup:NodeGroup", name, args ?? new NodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeGroup(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eflo/nodeGroup:NodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "loginPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeGroup Get(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeGroup(name, id, state, options);
        }
    }

    public sealed class NodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Az
        /// </summary>
        [Input("az", required: true)]
        public Input<string> Az { get; set; } = null!;

        /// <summary>
        /// Cluster ID
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Input("ignoreFailedNodeTasks")]
        public Input<bool>? IgnoreFailedNodeTasks { get; set; }

        /// <summary>
        /// Image ID. You can modify the image ID since v1.252.0.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        [Input("ipAllocationPolicies")]
        private InputList<Inputs.NodeGroupIpAllocationPolicyArgs>? _ipAllocationPolicies;

        /// <summary>
        /// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `IpAllocationPolicy` below.
        /// </summary>
        public InputList<Inputs.NodeGroupIpAllocationPolicyArgs> IpAllocationPolicies
        {
            get => _ipAllocationPolicies ?? (_ipAllocationPolicies = new InputList<Inputs.NodeGroupIpAllocationPolicyArgs>());
            set => _ipAllocationPolicies = value;
        }

        /// <summary>
        /// key pair name
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        [Input("loginPassword")]
        private Input<string>? _loginPassword;

        /// <summary>
        /// Login Password
        /// </summary>
        public Input<string>? LoginPassword
        {
            get => _loginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Machine type
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// NodeGroupDescription
        /// </summary>
        [Input("nodeGroupDescription")]
        public Input<string>? NodeGroupDescription { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("nodeGroupName", required: true)]
        public Input<string> NodeGroupName { get; set; } = null!;

        [Input("nodes")]
        private InputList<Inputs.NodeGroupNodeArgs>? _nodes;

        /// <summary>
        /// Node List See `Nodes` below.
        /// </summary>
        public InputList<Inputs.NodeGroupNodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NodeGroupNodeArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// Custom Data
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vpdSubnets")]
        private InputList<string>? _vpdSubnets;

        /// <summary>
        /// Cluster subnet list
        /// </summary>
        public InputList<string> VpdSubnets
        {
            get => _vpdSubnets ?? (_vpdSubnets = new InputList<string>());
            set => _vpdSubnets = value;
        }

        /// <summary>
        /// Zone ID of the switch
        /// </summary>
        [Input("vswitchZoneId")]
        public Input<string>? VswitchZoneId { get; set; }

        /// <summary>
        /// Zone ID
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public NodeGroupArgs()
        {
        }
        public static new NodeGroupArgs Empty => new NodeGroupArgs();
    }

    public sealed class NodeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Az
        /// </summary>
        [Input("az")]
        public Input<string>? Az { get; set; }

        /// <summary>
        /// Cluster ID
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Create time
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Input("ignoreFailedNodeTasks")]
        public Input<bool>? IgnoreFailedNodeTasks { get; set; }

        /// <summary>
        /// Image ID. You can modify the image ID since v1.252.0.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("ipAllocationPolicies")]
        private InputList<Inputs.NodeGroupIpAllocationPolicyGetArgs>? _ipAllocationPolicies;

        /// <summary>
        /// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `IpAllocationPolicy` below.
        /// </summary>
        public InputList<Inputs.NodeGroupIpAllocationPolicyGetArgs> IpAllocationPolicies
        {
            get => _ipAllocationPolicies ?? (_ipAllocationPolicies = new InputList<Inputs.NodeGroupIpAllocationPolicyGetArgs>());
            set => _ipAllocationPolicies = value;
        }

        /// <summary>
        /// key pair name
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        [Input("loginPassword")]
        private Input<string>? _loginPassword;

        /// <summary>
        /// Login Password
        /// </summary>
        public Input<string>? LoginPassword
        {
            get => _loginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Machine type
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// NodeGroupDescription
        /// </summary>
        [Input("nodeGroupDescription")]
        public Input<string>? NodeGroupDescription { get; set; }

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Input("nodeGroupId")]
        public Input<string>? NodeGroupId { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("nodeGroupName")]
        public Input<string>? NodeGroupName { get; set; }

        [Input("nodes")]
        private InputList<Inputs.NodeGroupNodeGetArgs>? _nodes;

        /// <summary>
        /// Node List See `Nodes` below.
        /// </summary>
        public InputList<Inputs.NodeGroupNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NodeGroupNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// Custom Data
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vpdSubnets")]
        private InputList<string>? _vpdSubnets;

        /// <summary>
        /// Cluster subnet list
        /// </summary>
        public InputList<string> VpdSubnets
        {
            get => _vpdSubnets ?? (_vpdSubnets = new InputList<string>());
            set => _vpdSubnets = value;
        }

        /// <summary>
        /// Zone ID of the switch
        /// </summary>
        [Input("vswitchZoneId")]
        public Input<string>? VswitchZoneId { get; set; }

        /// <summary>
        /// Zone ID
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public NodeGroupState()
        {
        }
        public static new NodeGroupState Empty => new NodeGroupState();
    }
}
