// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo
{
    public static class GetSubnets
    {
        /// <summary>
        /// This data source provides Eflo Subnet available to the user.[What is Subnet](https://help.aliyun.com/document_detail/604977.html)
        /// 
        /// &gt; **NOTE:** Available in 1.204.0+
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.Eflo.GetSubnets.Invoke(new()
        ///     {
        ///         NameRegex = alicloud_eflo_subnet.Default.Name,
        ///         SubnetName = "SubnetTestForTerraform",
        ///         VpdId = @var.VpdId,
        ///         ZoneId = @var.ZoneId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudEfloSubnetExampleId"] = @default.Apply(@default =&gt; @default.Apply(getSubnetsResult =&gt; getSubnetsResult.Subnets[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubnetsResult> InvokeAsync(GetSubnetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetsResult>("alicloud:eflo/getSubnets:getSubnets", args ?? new GetSubnetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Eflo Subnet available to the user.[What is Subnet](https://help.aliyun.com/document_detail/604977.html)
        /// 
        /// &gt; **NOTE:** Available in 1.204.0+
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.Eflo.GetSubnets.Invoke(new()
        ///     {
        ///         NameRegex = alicloud_eflo_subnet.Default.Name,
        ///         SubnetName = "SubnetTestForTerraform",
        ///         VpdId = @var.VpdId,
        ///         ZoneId = @var.ZoneId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudEfloSubnetExampleId"] = @default.Apply(@default =&gt; @default.Apply(getSubnetsResult =&gt; getSubnetsResult.Subnets[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubnetsResult> Invoke(GetSubnetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetsResult>("alicloud:eflo/getSubnets:getSubnets", args ?? new GetSubnetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        [Input("pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Resource Group ID.
        /// </summary>
        [Input("resourceGroupId")]
        public string? ResourceGroupId { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Primary key ID.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        /// <summary>
        /// The Subnet name.
        /// </summary>
        [Input("subnetName")]
        public string? SubnetName { get; set; }

        /// <summary>
        /// Eflo subnet usage type, optional value: 
        /// - General type is not filled in
        /// - OOB:OOB type
        /// - LB: LB type
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// The Eflo VPD ID.
        /// </summary>
        [Input("vpdId")]
        public string? VpdId { get; set; }

        /// <summary>
        /// The zone ID of the resource.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetSubnetsArgs()
        {
        }
        public static new GetSubnetsArgs Empty => new GetSubnetsArgs();
    }

    public sealed class GetSubnetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// Resource Group ID.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Primary key ID.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The Subnet name.
        /// </summary>
        [Input("subnetName")]
        public Input<string>? SubnetName { get; set; }

        /// <summary>
        /// Eflo subnet usage type, optional value: 
        /// - General type is not filled in
        /// - OOB:OOB type
        /// - LB: LB type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The Eflo VPD ID.
        /// </summary>
        [Input("vpdId")]
        public Input<string>? VpdId { get; set; }

        /// <summary>
        /// The zone ID of the resource.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetSubnetsInvokeArgs()
        {
        }
        public static new GetSubnetsInvokeArgs Empty => new GetSubnetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of name of Subnets.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;
        /// <summary>
        /// Resource Group ID.
        /// </summary>
        public readonly string? ResourceGroupId;
        /// <summary>
        /// The status of the resource.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The Eflo subnet ID.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// The Subnet name.
        /// </summary>
        public readonly string? SubnetName;
        /// <summary>
        /// A list of Subnet Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubnetsSubnetResult> Subnets;
        /// <summary>
        /// Eflo subnet usage type.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Eflo VPD ID.
        /// </summary>
        public readonly string? VpdId;
        /// <summary>
        /// The zone ID of the resource.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetSubnetsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            int? pageNumber,

            int? pageSize,

            string? resourceGroupId,

            string? status,

            string? subnetId,

            string? subnetName,

            ImmutableArray<Outputs.GetSubnetsSubnetResult> subnets,

            string? type,

            string? vpdId,

            string? zoneId)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            ResourceGroupId = resourceGroupId;
            Status = status;
            SubnetId = subnetId;
            SubnetName = subnetName;
            Subnets = subnets;
            Type = type;
            VpdId = vpdId;
            ZoneId = zoneId;
        }
    }
}
