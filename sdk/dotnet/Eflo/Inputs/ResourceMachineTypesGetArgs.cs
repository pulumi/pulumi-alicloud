// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo.Inputs
{

    public sealed class ResourceMachineTypesGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This property specifies the number of network bindings, which relates to the number of physical or virtual network cards connected to the network through the network interface card (NIC). Multiple network bindings can increase bandwidth and redundancy and improve network reliability.
        /// </summary>
        [Input("bondNum")]
        public Input<int>? BondNum { get; set; }

        /// <summary>
        /// Provides CPU details, including the number of cores, number of threads, clock frequency, and architecture type. This information helps to evaluate the processing power and identify whether it can meet the performance requirements of a particular application.
        /// </summary>
        [Input("cpuInfo", required: true)]
        public Input<string> CpuInfo { get; set; } = null!;

        /// <summary>
        /// Displays information about the storage device, including the disk type (such as SSD or HDD), capacity, and I/O performance. Storage performance is critical in data-intensive applications such as big data processing and databases.
        /// </summary>
        [Input("diskInfo")]
        public Input<string>? DiskInfo { get; set; }

        /// <summary>
        /// Provides detailed information about the GPU, including the number, model, memory size, and computing capability. This information is particularly important for tasks such as deep learning, scientific computing, and graph processing, helping users understand the graph processing capabilities of nodes.
        /// </summary>
        [Input("gpuInfo", required: true)]
        public Input<string> GpuInfo { get; set; } = null!;

        /// <summary>
        /// This property provides memory details, including total memory, available memory, and usage. This helps users understand the memory processing capabilities of compute nodes, especially when running heavy-duty applications.
        /// </summary>
        [Input("memoryInfo")]
        public Input<string>? MemoryInfo { get; set; }

        /// <summary>
        /// Specification Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Contains detailed information about the network interface, such as network bandwidth, latency, protocol types supported by the network, IP addresses, and network topology. Optimizing network information is essential to ensure efficient data transmission and low latency.
        /// </summary>
        [Input("networkInfo")]
        public Input<string>? NetworkInfo { get; set; }

        /// <summary>
        /// Specifies the network mode, such as bridge mode, NAT mode, or direct connection mode. Different network modes affect the network configuration and data transmission performance of nodes, and affect the network access methods of computing instances.
        /// </summary>
        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        /// <summary>
        /// Specifies the total number of compute nodes. This property is particularly important in distributed computing and cluster environments, because the number of nodes often directly affects the computing power and the ability to parallel processing.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Usually refers to a specific resource type (such as virtual machine, physical server, container, etc.), which is used to distinguish different computing units or resource categories.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ResourceMachineTypesGetArgs()
        {
        }
        public static new ResourceMachineTypesGetArgs Empty => new ResourceMachineTypesGetArgs();
    }
}
