// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo
{
    /// <summary>
    /// Provides a Eflo Experiment Plan resource.
    /// 
    /// For information about Eflo Experiment Plan and how to use it, see [What is Experiment Plan](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-cnp-2023-08-28-createexperimentplan).
    /// 
    /// &gt; **NOTE:** Available since v1.248.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var defaultpSZN7t = new AliCloud.Eflo.ExperimentPlanTemplate("defaultpSZN7t", new()
    ///     {
    ///         TemplatePipelines = new[]
    ///         {
    ///             new AliCloud.Eflo.Inputs.ExperimentPlanTemplateTemplatePipelineArgs
    ///             {
    ///                 WorkloadId = 2,
    ///                 WorkloadName = "MatMul",
    ///                 EnvParams = new AliCloud.Eflo.Inputs.ExperimentPlanTemplateTemplatePipelineEnvParamsArgs
    ///                 {
    ///                     CpuPerWorker = 90,
    ///                     GpuPerWorker = 8,
    ///                     MemoryPerWorker = 500,
    ///                     ShareMemory = 500,
    ///                     WorkerNum = 1,
    ///                     PyTorchVersion = "1",
    ///                     GpuDriverVersion = "1",
    ///                     CudaVersion = "1",
    ///                     NcclVersion = "1",
    ///                 },
    ///                 PipelineOrder = 1,
    ///                 Scene = "baseline",
    ///             },
    ///         },
    ///         PrivacyLevel = "private",
    ///         TemplateName = name,
    ///         TemplateDescription = name,
    ///     });
    /// 
    ///     var defaultResource = new AliCloud.Eflo.Resource("default", new()
    ///     {
    ///         UserAccessParam = new AliCloud.Eflo.Inputs.ResourceUserAccessParamArgs
    ///         {
    ///             AccessId = "your_access_id",
    ///             AccessKey = "your_access_key",
    ///             WorkspaceId = "your_workspace_id",
    ///             Endpoint = "your_endpoint",
    ///         },
    ///         ClusterId = $"terraform-{@default.Result}",
    ///         MachineTypes = new AliCloud.Eflo.Inputs.ResourceMachineTypesArgs
    ///         {
    ///             MemoryInfo = "32x 64GB DDR4 4800 Memory",
    ///             Type = "Private",
    ///             BondNum = 5,
    ///             NodeCount = 1,
    ///             CpuInfo = "2x Intel Saphhire Rapid 8469C 48C CPU",
    ///             NetworkInfo = "1x 200Gbps Dual Port BF3 DPU for VPC 4x 200Gbps Dual Port EIC",
    ///             GpuInfo = "8x OAM 810 GPU",
    ///             DiskInfo = "2x 480GB SATA SSD 4x 3.84TB NVMe SSD",
    ///             NetworkMode = "net",
    ///             Name = "lingjun",
    ///         },
    ///         ClusterName = name,
    ///         ClusterDesc = name,
    ///     });
    /// 
    ///     var defaultExperimentPlan = new AliCloud.Eflo.ExperimentPlan("default", new()
    ///     {
    ///         ResourceId = defaultResource.ResourceId,
    ///         PlanName = name,
    ///         TemplateId = defaultpSZN7t.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Eflo Experiment Plan can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:eflo/experimentPlan:ExperimentPlan example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eflo/experimentPlan:ExperimentPlan")]
    public partial class ExperimentPlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Additional operating parameters. You can include information about the specified node.
        /// </summary>
        [Output("externalParams")]
        public Output<ImmutableDictionary<string, string>?> ExternalParams { get; private set; } = null!;

        /// <summary>
        /// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
        /// </summary>
        [Output("planName")]
        public Output<string> PlanName { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        [Output("resourceId")]
        public Output<int> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The tag of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the template.
        /// </summary>
        [Output("templateId")]
        public Output<int> TemplateId { get; private set; } = null!;


        /// <summary>
        /// Create a ExperimentPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExperimentPlan(string name, ExperimentPlanArgs args, CustomResourceOptions? options = null)
            : base("alicloud:eflo/experimentPlan:ExperimentPlan", name, args ?? new ExperimentPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExperimentPlan(string name, Input<string> id, ExperimentPlanState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eflo/experimentPlan:ExperimentPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExperimentPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExperimentPlan Get(string name, Input<string> id, ExperimentPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new ExperimentPlan(name, id, state, options);
        }
    }

    public sealed class ExperimentPlanArgs : global::Pulumi.ResourceArgs
    {
        [Input("externalParams")]
        private InputMap<string>? _externalParams;

        /// <summary>
        /// Additional operating parameters. You can include information about the specified node.
        /// </summary>
        public InputMap<string> ExternalParams
        {
            get => _externalParams ?? (_externalParams = new InputMap<string>());
            set => _externalParams = value;
        }

        /// <summary>
        /// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
        /// </summary>
        [Input("planName")]
        public Input<string>? PlanName { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<int> ResourceId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the template.
        /// </summary>
        [Input("templateId", required: true)]
        public Input<int> TemplateId { get; set; } = null!;

        public ExperimentPlanArgs()
        {
        }
        public static new ExperimentPlanArgs Empty => new ExperimentPlanArgs();
    }

    public sealed class ExperimentPlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("externalParams")]
        private InputMap<string>? _externalParams;

        /// <summary>
        /// Additional operating parameters. You can include information about the specified node.
        /// </summary>
        public InputMap<string> ExternalParams
        {
            get => _externalParams ?? (_externalParams = new InputMap<string>());
            set => _externalParams = value;
        }

        /// <summary>
        /// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
        /// </summary>
        [Input("planName")]
        public Input<string>? PlanName { get; set; }

        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The ID of the resource.
        /// </summary>
        [Input("resourceId")]
        public Input<int>? ResourceId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the template.
        /// </summary>
        [Input("templateId")]
        public Input<int>? TemplateId { get; set; }

        public ExperimentPlanState()
        {
        }
        public static new ExperimentPlanState Empty => new ExperimentPlanState();
    }
}
