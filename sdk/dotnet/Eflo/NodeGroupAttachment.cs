// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo
{
    /// <summary>
    /// Provides a Eflo Node Group Attachment resource.
    /// 
    /// Node Association Node Group Resources.
    /// 
    /// For information about Eflo Node Group Attachment and how to use it, see [What is Node Group Attachment](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/ExtendCluster).
    /// 
    /// &gt; **NOTE:** Available since v1.255.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new AliCloud.Eflo.NodeGroupAttachment("default", new()
    ///     {
    ///         VswitchId = "vsw-uf63gbmvwgreao66opmie",
    ///         Hostname = "attachment-example-e01-cn-smw4d1bzd0a",
    ///         LoginPassword = "G7f$2kL9@vQx3Zp5*",
    ///         ClusterId = "i118976621753269898628",
    ///         NodeGroupId = "i127582271753269898630",
    ///         NodeId = "e01-cn-smw4d1bzd0a",
    ///         VpcId = "vpc-uf6t73bb01dfprb2qvpqa",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Eflo Node Group Attachment can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment example &lt;cluster_id&gt;:&lt;node_group_id&gt;:&lt;node_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment")]
    public partial class NodeGroupAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster ID
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The data disk of the cloud disk to be attached to the node. See `DataDisk` below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.NodeGroupAttachmentDataDisk>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// Node hostname
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Node login password
        /// </summary>
        [Output("loginPassword")]
        public Output<string?> LoginPassword { get; private set; } = null!;

        /// <summary>
        /// Node group ID
        /// </summary>
        [Output("nodeGroupId")]
        public Output<string> NodeGroupId { get; private set; } = null!;

        /// <summary>
        /// Node ID
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// User-defined data
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Vpc id
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// vswitch id
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a NodeGroupAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeGroupAttachment(string name, NodeGroupAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment", name, args ?? new NodeGroupAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeGroupAttachment(string name, Input<string> id, NodeGroupAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeGroupAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeGroupAttachment Get(string name, Input<string> id, NodeGroupAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeGroupAttachment(name, id, state, options);
        }
    }

    public sealed class NodeGroupAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.NodeGroupAttachmentDataDiskArgs>? _dataDisks;

        /// <summary>
        /// The data disk of the cloud disk to be attached to the node. See `DataDisk` below.
        /// </summary>
        public InputList<Inputs.NodeGroupAttachmentDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.NodeGroupAttachmentDataDiskArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Node hostname
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// Node login password
        /// </summary>
        [Input("loginPassword")]
        public Input<string>? LoginPassword { get; set; }

        /// <summary>
        /// Node group ID
        /// </summary>
        [Input("nodeGroupId")]
        public Input<string>? NodeGroupId { get; set; }

        /// <summary>
        /// Node ID
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// User-defined data
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Vpc id
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// vswitch id
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        public NodeGroupAttachmentArgs()
        {
        }
        public static new NodeGroupAttachmentArgs Empty => new NodeGroupAttachmentArgs();
    }

    public sealed class NodeGroupAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.NodeGroupAttachmentDataDiskGetArgs>? _dataDisks;

        /// <summary>
        /// The data disk of the cloud disk to be attached to the node. See `DataDisk` below.
        /// </summary>
        public InputList<Inputs.NodeGroupAttachmentDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.NodeGroupAttachmentDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Node hostname
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Node login password
        /// </summary>
        [Input("loginPassword")]
        public Input<string>? LoginPassword { get; set; }

        /// <summary>
        /// Node group ID
        /// </summary>
        [Input("nodeGroupId")]
        public Input<string>? NodeGroupId { get; set; }

        /// <summary>
        /// Node ID
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// User-defined data
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Vpc id
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// vswitch id
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public NodeGroupAttachmentState()
        {
        }
        public static new NodeGroupAttachmentState Empty => new NodeGroupAttachmentState();
    }
}
