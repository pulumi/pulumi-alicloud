// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Eflo
{
    /// <summary>
    /// Provides a Eflo Cluster resource.
    /// 
    /// Large computing cluster.
    /// 
    /// For information about Eflo Cluster and how to use it, see [What is Cluster](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateCluster).
    /// 
    /// &gt; **NOTE:** Available since v1.246.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var createVpc = new AliCloud.Vpc.Network("create_vpc", new()
    ///     {
    ///         CidrBlock = "192.168.0.0/16",
    ///         VpcName = "cluster-resoure-example",
    ///     });
    /// 
    ///     var createVswitch = new AliCloud.Vpc.Switch("create_vswitch", new()
    ///     {
    ///         VpcId = createVpc.Id,
    ///         ZoneId = "cn-hangzhou-b",
    ///         CidrBlock = "192.168.0.0/24",
    ///         VswitchName = "cluster-resoure-example",
    ///     });
    /// 
    ///     var createSecurityGroup = new AliCloud.Ecs.SecurityGroup("create_security_group", new()
    ///     {
    ///         Description = "sg",
    ///         SecurityGroupName = "cluster-resoure-example",
    ///         SecurityGroupType = "normal",
    ///         VpcId = createVpc.Id,
    ///     });
    /// 
    ///     var defaultCluster = new AliCloud.Eflo.Cluster("default", new()
    ///     {
    ///         ClusterDescription = "cluster-resource-example",
    ///         OpenEniJumboFrame = false,
    ///         HpnZone = "B1",
    ///         NimizVswitches = new[]
    ///         {
    ///             "1111",
    ///         },
    ///         IgnoreFailedNodeTasks = true,
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[1])),
    ///         NodeGroups = new[]
    ///         {
    ///             new AliCloud.Eflo.Inputs.ClusterNodeGroupArgs
    ///             {
    ///                 ImageId = "i198448731735114628708",
    ///                 ZoneId = "cn-hangzhou-b",
    ///                 NodeGroupName = "cluster-resource-example",
    ///                 NodeGroupDescription = "cluster-resource-example",
    ///                 MachineType = "efg2.C48cA3sen",
    ///             },
    ///         },
    ///         Networks = new AliCloud.Eflo.Inputs.ClusterNetworksArgs
    ///         {
    ///             TailIpVersion = "ipv4",
    ///             NewVpdInfo = new AliCloud.Eflo.Inputs.ClusterNetworksNewVpdInfoArgs
    ///             {
    ///                 MonitorVpcId = createVpc.Id,
    ///                 MonitorVswitchId = createVswitch.Id,
    ///                 CenId = "11111",
    ///                 CloudLinkId = "1111",
    ///                 VpdCidr = "111",
    ///                 VpdSubnets = new[]
    ///                 {
    ///                     new AliCloud.Eflo.Inputs.ClusterNetworksNewVpdInfoVpdSubnetArgs
    ///                     {
    ///                         ZoneId = "1111",
    ///                         SubnetCidr = "111",
    ///                         SubnetType = "111",
    ///                     },
    ///                 },
    ///                 CloudLinkCidr = "169.254.128.0/23",
    ///             },
    ///             SecurityGroupId = createSecurityGroup.Id,
    ///             VswitchZoneId = "cn-hangzhou-b",
    ///             VpcId = createVpc.Id,
    ///             VswitchId = createVswitch.Id,
    ///             VpdInfo = new AliCloud.Eflo.Inputs.ClusterNetworksVpdInfoArgs
    ///             {
    ///                 VpdId = "111",
    ///                 VpdSubnets = new[]
    ///                 {
    ///                     "111",
    ///                 },
    ///             },
    ///             IpAllocationPolicies = new[]
    ///             {
    ///                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyArgs
    ///                 {
    ///                     BondPolicy = new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyBondPolicyArgs
    ///                     {
    ///                         BondDefaultSubnet = "111",
    ///                         Bonds = new[]
    ///                         {
    ///                             new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyBondPolicyBondArgs
    ///                             {
    ///                                 Name = "111",
    ///                                 Subnet = "111",
    ///                             },
    ///                         },
    ///                     },
    ///                     MachineTypePolicies = new[]
    ///                     {
    ///                         new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs
    ///                         {
    ///                             Bonds = new[]
    ///                             {
    ///                                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs
    ///                                 {
    ///                                     Name = "111",
    ///                                     Subnet = "111",
    ///                                 },
    ///                             },
    ///                             MachineType = "111",
    ///                         },
    ///                     },
    ///                     NodePolicies = new[]
    ///                     {
    ///                         new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyNodePolicyArgs
    ///                         {
    ///                             Bonds = new[]
    ///                             {
    ///                                 new AliCloud.Eflo.Inputs.ClusterNetworksIpAllocationPolicyNodePolicyBondArgs
    ///                                 {
    ///                                     Name = "111",
    ///                                     Subnet = "111",
    ///                                 },
    ///                             },
    ///                             NodeId = "111",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ClusterName = "tfacceflo7165",
    ///         ClusterType = "Lite",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Eflo Cluster can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:eflo/cluster:Cluster example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:eflo/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// cluster description
        /// </summary>
        [Output("clusterDescription")]
        public Output<string?> ClusterDescription { get; private set; } = null!;

        /// <summary>
        /// ClusterName
        /// </summary>
        [Output("clusterName")]
        public Output<string?> ClusterName { get; private set; } = null!;

        /// <summary>
        /// cluster type
        /// </summary>
        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Component (software instance) See `components` below.
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.ClusterComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Cluster Number
        /// </summary>
        [Output("hpnZone")]
        public Output<string?> HpnZone { get; private set; } = null!;

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Output("ignoreFailedNodeTasks")]
        public Output<bool?> IgnoreFailedNodeTasks { get; private set; } = null!;

        /// <summary>
        /// Network Information See `networks` below.
        /// </summary>
        [Output("networks")]
        public Output<Outputs.ClusterNetworks?> Networks { get; private set; } = null!;

        /// <summary>
        /// Node virtual switch
        /// </summary>
        [Output("nimizVswitches")]
        public Output<ImmutableArray<string>> NimizVswitches { get; private set; } = null!;

        /// <summary>
        /// Node Group List See `node_groups` below.
        /// </summary>
        [Output("nodeGroups")]
        public Output<ImmutableArray<Outputs.ClusterNodeGroup>> NodeGroups { get; private set; } = null!;

        /// <summary>
        /// Whether the network interface supports jumbo frames
        /// </summary>
        [Output("openEniJumboFrame")]
        public Output<bool?> OpenEniJumboFrame { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// tag
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:eflo/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:eflo/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// cluster description
        /// </summary>
        [Input("clusterDescription")]
        public Input<string>? ClusterDescription { get; set; }

        /// <summary>
        /// ClusterName
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// cluster type
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("components")]
        private InputList<Inputs.ClusterComponentArgs>? _components;

        /// <summary>
        /// Component (software instance) See `components` below.
        /// </summary>
        public InputList<Inputs.ClusterComponentArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.ClusterComponentArgs>());
            set => _components = value;
        }

        /// <summary>
        /// Cluster Number
        /// </summary>
        [Input("hpnZone")]
        public Input<string>? HpnZone { get; set; }

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Input("ignoreFailedNodeTasks")]
        public Input<bool>? IgnoreFailedNodeTasks { get; set; }

        /// <summary>
        /// Network Information See `networks` below.
        /// </summary>
        [Input("networks")]
        public Input<Inputs.ClusterNetworksArgs>? Networks { get; set; }

        [Input("nimizVswitches")]
        private InputList<string>? _nimizVswitches;

        /// <summary>
        /// Node virtual switch
        /// </summary>
        public InputList<string> NimizVswitches
        {
            get => _nimizVswitches ?? (_nimizVswitches = new InputList<string>());
            set => _nimizVswitches = value;
        }

        [Input("nodeGroups")]
        private InputList<Inputs.ClusterNodeGroupArgs>? _nodeGroups;

        /// <summary>
        /// Node Group List See `node_groups` below.
        /// </summary>
        public InputList<Inputs.ClusterNodeGroupArgs> NodeGroups
        {
            get => _nodeGroups ?? (_nodeGroups = new InputList<Inputs.ClusterNodeGroupArgs>());
            set => _nodeGroups = value;
        }

        /// <summary>
        /// Whether the network interface supports jumbo frames
        /// </summary>
        [Input("openEniJumboFrame")]
        public Input<bool>? OpenEniJumboFrame { get; set; }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// tag
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// cluster description
        /// </summary>
        [Input("clusterDescription")]
        public Input<string>? ClusterDescription { get; set; }

        /// <summary>
        /// ClusterName
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// cluster type
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("components")]
        private InputList<Inputs.ClusterComponentGetArgs>? _components;

        /// <summary>
        /// Component (software instance) See `components` below.
        /// </summary>
        public InputList<Inputs.ClusterComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.ClusterComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// The creation time of the resource
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Cluster Number
        /// </summary>
        [Input("hpnZone")]
        public Input<string>? HpnZone { get; set; }

        /// <summary>
        /// Whether to allow skipping failed nodes. Default value: False
        /// </summary>
        [Input("ignoreFailedNodeTasks")]
        public Input<bool>? IgnoreFailedNodeTasks { get; set; }

        /// <summary>
        /// Network Information See `networks` below.
        /// </summary>
        [Input("networks")]
        public Input<Inputs.ClusterNetworksGetArgs>? Networks { get; set; }

        [Input("nimizVswitches")]
        private InputList<string>? _nimizVswitches;

        /// <summary>
        /// Node virtual switch
        /// </summary>
        public InputList<string> NimizVswitches
        {
            get => _nimizVswitches ?? (_nimizVswitches = new InputList<string>());
            set => _nimizVswitches = value;
        }

        [Input("nodeGroups")]
        private InputList<Inputs.ClusterNodeGroupGetArgs>? _nodeGroups;

        /// <summary>
        /// Node Group List See `node_groups` below.
        /// </summary>
        public InputList<Inputs.ClusterNodeGroupGetArgs> NodeGroups
        {
            get => _nodeGroups ?? (_nodeGroups = new InputList<Inputs.ClusterNodeGroupGetArgs>());
            set => _nodeGroups = value;
        }

        /// <summary>
        /// Whether the network interface supports jumbo frames
        /// </summary>
        [Input("openEniJumboFrame")]
        public Input<bool>? OpenEniJumboFrame { get; set; }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// tag
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
