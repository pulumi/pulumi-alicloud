// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ess.Outputs
{

    [OutputType]
    public sealed class GetScalingRulesRuleResult
    {
        /// <summary>
        /// Adjustment type of the scaling rule.
        /// </summary>
        public readonly string AdjustmentType;
        /// <summary>
        /// Adjustment value of the scaling rule.
        /// </summary>
        public readonly int AdjustmentValue;
        /// <summary>
        /// Cooldown time of the scaling rule.
        /// </summary>
        public readonly int Cooldown;
        /// <summary>
        /// (Available since v1.250.0) Indicates whether scale-in is disabled. This parameter is available only if you set ScalingRuleType to TargetTrackingScalingRule. Valid values: true, false.
        /// </summary>
        public readonly bool DisableScaleIn;
        /// <summary>
        /// (Available since v1.250.0) The warm-up period during which a series of preparation measures are taken on new instances. Auto Scaling does not monitor the metric data of instances that are being warmed up.
        /// </summary>
        public readonly int EstimatedInstanceWarmup;
        /// <summary>
        /// (Available since v1.250.0) The Hybrid Cloud Monitoring metrics.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScalingRulesRuleHybridMetricResult> HybridMetrics;
        /// <summary>
        /// (Available since v1.250.0) The ID of the Hybrid Cloud Monitoring namespace.
        /// </summary>
        public readonly string HybridMonitorNamespace;
        /// <summary>
        /// (Available since v1.250.0) The reference ID of the metric in the metric expression.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Available since v1.242.0) The maximum number of ECS instances that can be added to the scaling group.
        /// </summary>
        public readonly int InitialMaxSize;
        /// <summary>
        /// (Available since v1.250.0) The name of the Hybrid Cloud Monitoring metric.
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// (Available since v1.250.0) The type of the event-triggered task that is associated with the scaling rule.
        /// </summary>
        public readonly string MetricType;
        /// <summary>
        /// Min adjustment magnitude of scaling rule.
        /// </summary>
        public readonly int MinAdjustmentMagnitude;
        /// <summary>
        /// Name of the scaling rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Available since v1.242.0) The mode of the predictive scaling rule.
        /// </summary>
        public readonly string PredictiveScalingMode;
        /// <summary>
        /// (Available since v1.242.0) The amount of buffer time before the prediction task is executed. By default, all prediction tasks that are automatically created by a predictive scaling rule are executed on the hour. You can set a buffer time to execute prediction tasks and prepare resources in advance.
        /// </summary>
        public readonly int PredictiveTaskBufferTime;
        /// <summary>
        /// (Available since v1.242.0) The action on the predicted maximum value.
        /// </summary>
        public readonly string PredictiveValueBehavior;
        /// <summary>
        /// (Available since v1.242.0) The ratio based on which the predicted value is increased if you set PredictiveValueBehavior to PredictiveValueOverrideMaxWithBuffer. If the predicted value that is increased by this ratio is greater than the initial maximum capacity, the increased value is used as the maximum value for prediction tasks.
        /// </summary>
        public readonly int PredictiveValueBuffer;
        /// <summary>
        /// (Available since v1.250.0) After you create a target tracking scaling rule, an event-triggered task is automatically created and associated with the scaling rule. This parameter defines the number of consecutive times the alert condition must be satisfied before the event-triggered task initiates a scale-in operation.
        /// </summary>
        public readonly int ScaleInEvaluationCount;
        /// <summary>
        /// (Available since v1.250.0) After you create a target tracking scaling rule, an event-triggered task is automatically created and associated with the scaling rule. This parameter defines the number of consecutive times the alert condition must be satisfied before the event-triggered task initiates a scale-out operation.
        /// </summary>
        public readonly int ScaleOutEvaluationCount;
        /// <summary>
        /// Scaling group id the scaling rules belong to.
        /// </summary>
        public readonly string ScalingGroupId;
        /// <summary>
        /// Ari of scaling rule.
        /// </summary>
        public readonly string ScalingRuleAri;
        /// <summary>
        /// (Available since v1.250.0) The step adjustments of the step scaling rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScalingRulesRuleStepAdjustmentResult> StepAdjustments;
        /// <summary>
        /// (Available since v1.242.0) The target value of the metric.
        /// </summary>
        public readonly double TargetValue;
        /// <summary>
        /// Type of scaling rule.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScalingRulesRuleResult(
            string adjustmentType,

            int adjustmentValue,

            int cooldown,

            bool disableScaleIn,

            int estimatedInstanceWarmup,

            ImmutableArray<Outputs.GetScalingRulesRuleHybridMetricResult> hybridMetrics,

            string hybridMonitorNamespace,

            string id,

            int initialMaxSize,

            string metricName,

            string metricType,

            int minAdjustmentMagnitude,

            string name,

            string predictiveScalingMode,

            int predictiveTaskBufferTime,

            string predictiveValueBehavior,

            int predictiveValueBuffer,

            int scaleInEvaluationCount,

            int scaleOutEvaluationCount,

            string scalingGroupId,

            string scalingRuleAri,

            ImmutableArray<Outputs.GetScalingRulesRuleStepAdjustmentResult> stepAdjustments,

            double targetValue,

            string type)
        {
            AdjustmentType = adjustmentType;
            AdjustmentValue = adjustmentValue;
            Cooldown = cooldown;
            DisableScaleIn = disableScaleIn;
            EstimatedInstanceWarmup = estimatedInstanceWarmup;
            HybridMetrics = hybridMetrics;
            HybridMonitorNamespace = hybridMonitorNamespace;
            Id = id;
            InitialMaxSize = initialMaxSize;
            MetricName = metricName;
            MetricType = metricType;
            MinAdjustmentMagnitude = minAdjustmentMagnitude;
            Name = name;
            PredictiveScalingMode = predictiveScalingMode;
            PredictiveTaskBufferTime = predictiveTaskBufferTime;
            PredictiveValueBehavior = predictiveValueBehavior;
            PredictiveValueBuffer = predictiveValueBuffer;
            ScaleInEvaluationCount = scaleInEvaluationCount;
            ScaleOutEvaluationCount = scaleOutEvaluationCount;
            ScalingGroupId = scalingGroupId;
            ScalingRuleAri = scalingRuleAri;
            StepAdjustments = stepAdjustments;
            TargetValue = targetValue;
            Type = type;
        }
    }
}
