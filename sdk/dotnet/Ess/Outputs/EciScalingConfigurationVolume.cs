// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ess.Outputs
{

    [OutputType]
    public sealed class EciScalingConfigurationVolume
    {
        /// <summary>
        /// ConfigFileVolumeConfigFileToPaths.
        /// See `config_file_volume_config_file_to_paths` below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.EciScalingConfigurationVolumeConfigFileVolumeConfigFileToPath> ConfigFileVolumeConfigFileToPaths;
        /// <summary>
        /// The default permissions on the ConfigFileVolume.
        /// </summary>
        public readonly int? ConfigFileVolumeDefaultMode;
        /// <summary>
        /// The ID of DiskVolume.
        /// </summary>
        public readonly string? DiskVolumeDiskId;
        /// <summary>
        /// The disk size of DiskVolume.
        /// </summary>
        public readonly int? DiskVolumeDiskSize;
        /// <summary>
        /// The system type of DiskVolume.
        /// </summary>
        public readonly string? DiskVolumeFsType;
        /// <summary>
        /// The storage medium of the EmptyDirVolume. If you leave this parameter empty, the file system of the node is used as the storage medium. If you set this parameter to memory, the memory is used as the storage medium.
        /// </summary>
        public readonly string? EmptyDirVolumeMedium;
        /// <summary>
        /// The storage size of the EmptyDirVolume. Unit: GiB or MiB.
        /// </summary>
        public readonly string? EmptyDirVolumeSizeLimit;
        /// <summary>
        /// The name of the FlexVolume driver.
        /// </summary>
        public readonly string? FlexVolumeDriver;
        /// <summary>
        /// The type of the mounted file system. The default value is determined by the script
        /// of FlexVolume.
        /// </summary>
        public readonly string? FlexVolumeFsType;
        /// <summary>
        /// The list of FlexVolume objects. Each object is a key-value pair contained in a JSON
        /// string.
        /// </summary>
        public readonly string? FlexVolumeOptions;
        /// <summary>
        /// The absolute path on the host.
        /// </summary>
        public readonly string? HostPathVolumePath;
        /// <summary>
        /// The type of the host path. Examples: File, Directory, and Socket.
        /// </summary>
        public readonly string? HostPathVolumeType;
        /// <summary>
        /// The name of the volume.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The path to the NFS volume.
        /// </summary>
        public readonly string? NfsVolumePath;
        /// <summary>
        /// The nfs volume read only. Default to `false`.
        /// </summary>
        public readonly bool? NfsVolumeReadOnly;
        /// <summary>
        /// The address of the NFS server.
        /// 
        /// &gt; **NOTE:** Every volume mounted must have a name and type attributes.
        /// </summary>
        public readonly string? NfsVolumeServer;
        /// <summary>
        /// The type of the volume.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private EciScalingConfigurationVolume(
            ImmutableArray<Outputs.EciScalingConfigurationVolumeConfigFileVolumeConfigFileToPath> configFileVolumeConfigFileToPaths,

            int? configFileVolumeDefaultMode,

            string? diskVolumeDiskId,

            int? diskVolumeDiskSize,

            string? diskVolumeFsType,

            string? emptyDirVolumeMedium,

            string? emptyDirVolumeSizeLimit,

            string? flexVolumeDriver,

            string? flexVolumeFsType,

            string? flexVolumeOptions,

            string? hostPathVolumePath,

            string? hostPathVolumeType,

            string? name,

            string? nfsVolumePath,

            bool? nfsVolumeReadOnly,

            string? nfsVolumeServer,

            string? type)
        {
            ConfigFileVolumeConfigFileToPaths = configFileVolumeConfigFileToPaths;
            ConfigFileVolumeDefaultMode = configFileVolumeDefaultMode;
            DiskVolumeDiskId = diskVolumeDiskId;
            DiskVolumeDiskSize = diskVolumeDiskSize;
            DiskVolumeFsType = diskVolumeFsType;
            EmptyDirVolumeMedium = emptyDirVolumeMedium;
            EmptyDirVolumeSizeLimit = emptyDirVolumeSizeLimit;
            FlexVolumeDriver = flexVolumeDriver;
            FlexVolumeFsType = flexVolumeFsType;
            FlexVolumeOptions = flexVolumeOptions;
            HostPathVolumePath = hostPathVolumePath;
            HostPathVolumeType = hostPathVolumeType;
            Name = name;
            NfsVolumePath = nfsVolumePath;
            NfsVolumeReadOnly = nfsVolumeReadOnly;
            NfsVolumeServer = nfsVolumeServer;
            Type = type;
        }
    }
}
