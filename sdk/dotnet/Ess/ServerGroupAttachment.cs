// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ess
{
    /// <summary>
    /// Attaches/Detaches server group to a specified scaling group.
    /// 
    /// For information about  server group attachment, see [AttachServerGroups](https://www.alibabacloud.com/help/en/auto-scaling/developer-reference/api-attachservergroups).
    /// 
    /// &gt; **NOTE:** If scaling group's network type is `VPC`, the server groups must be in the same `VPC`.
    /// 
    /// &gt; **NOTE:** server group attachment is defined uniquely by `scaling_group_id`, `server_group_id`,`type`, `port`.
    /// 
    /// &gt; **NOTE:** Resource `alicloud.ess.ServerGroupAttachment` don't support modification.
    /// 
    /// &gt; **NOTE:** Available since v1.231.0.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var myName = $"{name}-{defaultInteger.Result}";
    /// 
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableDiskCategory = "cloud_efficiency",
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultGetInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         CpuCoreCount = 2,
    ///         MemorySize = 4,
    ///     });
    /// 
    ///     var defaultGetImages = AliCloud.Ecs.GetImages.Invoke(new()
    ///     {
    ///         NameRegex = "^ubuntu_18.*64",
    ///         MostRecent = true,
    ///         Owners = "system",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = myName,
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         VswitchName = myName,
    ///     });
    /// 
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("default", new()
    ///     {
    ///         Name = myName,
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultScalingGroup = new AliCloud.Ess.ScalingGroup("default", new()
    ///     {
    ///         MinSize = 0,
    ///         MaxSize = 2,
    ///         ScalingGroupName = myName,
    ///         DefaultCooldown = 200,
    ///         RemovalPolicies = new[]
    ///         {
    ///             "OldestInstance",
    ///         },
    ///         VswitchIds = new[]
    ///         {
    ///             defaultSwitch.Id,
    ///         },
    ///     });
    /// 
    ///     var defaultScalingConfiguration = new AliCloud.Ess.ScalingConfiguration("default", new()
    ///     {
    ///         ScalingGroupId = defaultScalingGroup.Id,
    ///         ImageId = defaultGetImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
    ///         InstanceType = defaultGetInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
    ///         SecurityGroupId = defaultSecurityGroup.Id,
    ///         SystemDiskSize = 50,
    ///         ForceDelete = true,
    ///         Active = true,
    ///         Enable = true,
    ///     });
    /// 
    ///     var defaultServerGroup = new AliCloud.Alb.ServerGroup("default", new()
    ///     {
    ///         ServerGroupName = myName,
    ///         VpcId = defaultNetwork.Id,
    ///         HealthCheckConfig = new AliCloud.Alb.Inputs.ServerGroupHealthCheckConfigArgs
    ///         {
    ///             HealthCheckEnabled = false,
    ///         },
    ///         StickySessionConfig = new AliCloud.Alb.Inputs.ServerGroupStickySessionConfigArgs
    ///         {
    ///             StickySessionEnabled = true,
    ///             Cookie = "tf-example",
    ///             StickySessionType = "Server",
    ///         },
    ///     });
    /// 
    ///     var defaultServerGroupAttachment = new AliCloud.Ess.ServerGroupAttachment("default", new()
    ///     {
    ///         ScalingGroupId = defaultScalingConfiguration.ScalingGroupId,
    ///         ServerGroupId = defaultServerGroup.Id,
    ///         Port = 9000,
    ///         Type = "ALB",
    ///         Weight = 50,
    ///         ForceAttach = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ess/serverGroupAttachment:ServerGroupAttachment")]
    public partial class ServerGroupAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If instances of scaling group are attached/removed from backend server when
        /// server group from scaling group. Default to false.
        /// </summary>
        [Output("forceAttach")]
        public Output<bool?> ForceAttach { get; private set; } = null!;

        /// <summary>
        /// The port will be used for Server Group backend server.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// ID of the scaling group.
        /// </summary>
        [Output("scalingGroupId")]
        public Output<string> ScalingGroupId { get; private set; } = null!;

        /// <summary>
        /// ID of Server Group.
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        /// <summary>
        /// The type of server group N. Valid values: ALB, NLB.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The weight of an ECS instance attached to the Server Group.
        /// </summary>
        [Output("weight")]
        public Output<int> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroupAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroupAttachment(string name, ServerGroupAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ess/serverGroupAttachment:ServerGroupAttachment", name, args ?? new ServerGroupAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroupAttachment(string name, Input<string> id, ServerGroupAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ess/serverGroupAttachment:ServerGroupAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroupAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroupAttachment Get(string name, Input<string> id, ServerGroupAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroupAttachment(name, id, state, options);
        }
    }

    public sealed class ServerGroupAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If instances of scaling group are attached/removed from backend server when
        /// server group from scaling group. Default to false.
        /// </summary>
        [Input("forceAttach")]
        public Input<bool>? ForceAttach { get; set; }

        /// <summary>
        /// The port will be used for Server Group backend server.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// ID of the scaling group.
        /// </summary>
        [Input("scalingGroupId", required: true)]
        public Input<string> ScalingGroupId { get; set; } = null!;

        /// <summary>
        /// ID of Server Group.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        /// <summary>
        /// The type of server group N. Valid values: ALB, NLB.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The weight of an ECS instance attached to the Server Group.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public ServerGroupAttachmentArgs()
        {
        }
        public static new ServerGroupAttachmentArgs Empty => new ServerGroupAttachmentArgs();
    }

    public sealed class ServerGroupAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If instances of scaling group are attached/removed from backend server when
        /// server group from scaling group. Default to false.
        /// </summary>
        [Input("forceAttach")]
        public Input<bool>? ForceAttach { get; set; }

        /// <summary>
        /// The port will be used for Server Group backend server.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// ID of the scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public Input<string>? ScalingGroupId { get; set; }

        /// <summary>
        /// ID of Server Group.
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        /// <summary>
        /// The type of server group N. Valid values: ALB, NLB.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The weight of an ECS instance attached to the Server Group.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public ServerGroupAttachmentState()
        {
        }
        public static new ServerGroupAttachmentState Empty => new ServerGroupAttachmentState();
    }
}
