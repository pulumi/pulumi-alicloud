// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ess
{
    /// <summary>
    /// ## Import
    /// 
    /// ESS instance refresh can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ess/instanceRefresh:InstanceRefresh example ir-abc123456
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ess/instanceRefresh:InstanceRefresh")]
    public partial class InstanceRefresh : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The duration of the pause when the task reaches a checkpoint. Unit: minutes.
        /// </summary>
        [Output("checkpointPauseTime")]
        public Output<int> CheckpointPauseTime { get; private set; } = null!;

        /// <summary>
        /// The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `Checkpoints` below for details.
        /// </summary>
        [Output("checkpoints")]
        public Output<ImmutableArray<Outputs.InstanceRefreshCheckpoint>> Checkpoints { get; private set; } = null!;

        /// <summary>
        /// The list of containers in the instance. See `DesiredConfigurationContainers` below for details.
        /// </summary>
        [Output("desiredConfigurationContainers")]
        public Output<ImmutableArray<Outputs.InstanceRefreshDesiredConfigurationContainer>> DesiredConfigurationContainers { get; private set; } = null!;

        /// <summary>
        /// The ID of the image file. This is the image resource used for automatic instance creation.
        /// </summary>
        [Output("desiredConfigurationImageId")]
        public Output<string?> DesiredConfigurationImageId { get; private set; } = null!;

        /// <summary>
        /// The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
        /// </summary>
        [Output("desiredConfigurationLaunchTemplateId")]
        public Output<string?> DesiredConfigurationLaunchTemplateId { get; private set; } = null!;

        /// <summary>
        /// The instance type information in the launch template overrides. See `DesiredConfigurationLaunchTemplateOverrides` below for details.
        /// </summary>
        [Output("desiredConfigurationLaunchTemplateOverrides")]
        public Output<ImmutableArray<Outputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverride>> DesiredConfigurationLaunchTemplateOverrides { get; private set; } = null!;

        /// <summary>
        /// The version of the launch template.
        /// </summary>
        [Output("desiredConfigurationLaunchTemplateVersion")]
        public Output<string?> DesiredConfigurationLaunchTemplateVersion { get; private set; } = null!;

        /// <summary>
        /// The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
        /// </summary>
        [Output("maxHealthyPercentage")]
        public Output<int> MaxHealthyPercentage { get; private set; } = null!;

        /// <summary>
        /// The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
        /// </summary>
        [Output("minHealthyPercentage")]
        public Output<int> MinHealthyPercentage { get; private set; } = null!;

        /// <summary>
        /// The ID of the scaling group.
        /// </summary>
        [Output("scalingGroupId")]
        public Output<string> ScalingGroupId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to skip instances that match the desired configuration.
        /// </summary>
        [Output("skipMatching")]
        public Output<bool> SkipMatching { get; private set; } = null!;

        /// <summary>
        /// The current status of the instance refresh task. Possible values:
        /// - Pending: The instance refresh task is created and waiting to be scheduled.
        /// - InProgress: The instance refresh task is in progress.
        /// - Paused: The instance refresh task is paused.
        /// - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
        /// - Failed: The instance refresh task failed.
        /// - Successful: The instance refresh task was successful.
        /// - Cancelling: The instance refresh task is being canceled.
        /// - RollbackInProgress: The instance refresh task is being rolled back.
        /// - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
        /// - RollbackFailed: The rollback of the instance refresh task failed.
        /// - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceRefresh resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceRefresh(string name, InstanceRefreshArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ess/instanceRefresh:InstanceRefresh", name, args ?? new InstanceRefreshArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceRefresh(string name, Input<string> id, InstanceRefreshState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ess/instanceRefresh:InstanceRefresh", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceRefresh resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceRefresh Get(string name, Input<string> id, InstanceRefreshState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceRefresh(name, id, state, options);
        }
    }

    public sealed class InstanceRefreshArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The duration of the pause when the task reaches a checkpoint. Unit: minutes.
        /// </summary>
        [Input("checkpointPauseTime")]
        public Input<int>? CheckpointPauseTime { get; set; }

        [Input("checkpoints")]
        private InputList<Inputs.InstanceRefreshCheckpointArgs>? _checkpoints;

        /// <summary>
        /// The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `Checkpoints` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshCheckpointArgs> Checkpoints
        {
            get => _checkpoints ?? (_checkpoints = new InputList<Inputs.InstanceRefreshCheckpointArgs>());
            set => _checkpoints = value;
        }

        [Input("desiredConfigurationContainers")]
        private InputList<Inputs.InstanceRefreshDesiredConfigurationContainerArgs>? _desiredConfigurationContainers;

        /// <summary>
        /// The list of containers in the instance. See `DesiredConfigurationContainers` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshDesiredConfigurationContainerArgs> DesiredConfigurationContainers
        {
            get => _desiredConfigurationContainers ?? (_desiredConfigurationContainers = new InputList<Inputs.InstanceRefreshDesiredConfigurationContainerArgs>());
            set => _desiredConfigurationContainers = value;
        }

        /// <summary>
        /// The ID of the image file. This is the image resource used for automatic instance creation.
        /// </summary>
        [Input("desiredConfigurationImageId")]
        public Input<string>? DesiredConfigurationImageId { get; set; }

        /// <summary>
        /// The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
        /// </summary>
        [Input("desiredConfigurationLaunchTemplateId")]
        public Input<string>? DesiredConfigurationLaunchTemplateId { get; set; }

        [Input("desiredConfigurationLaunchTemplateOverrides")]
        private InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs>? _desiredConfigurationLaunchTemplateOverrides;

        /// <summary>
        /// The instance type information in the launch template overrides. See `DesiredConfigurationLaunchTemplateOverrides` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs> DesiredConfigurationLaunchTemplateOverrides
        {
            get => _desiredConfigurationLaunchTemplateOverrides ?? (_desiredConfigurationLaunchTemplateOverrides = new InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideArgs>());
            set => _desiredConfigurationLaunchTemplateOverrides = value;
        }

        /// <summary>
        /// The version of the launch template.
        /// </summary>
        [Input("desiredConfigurationLaunchTemplateVersion")]
        public Input<string>? DesiredConfigurationLaunchTemplateVersion { get; set; }

        /// <summary>
        /// The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
        /// </summary>
        [Input("maxHealthyPercentage")]
        public Input<int>? MaxHealthyPercentage { get; set; }

        /// <summary>
        /// The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
        /// </summary>
        [Input("minHealthyPercentage")]
        public Input<int>? MinHealthyPercentage { get; set; }

        /// <summary>
        /// The ID of the scaling group.
        /// </summary>
        [Input("scalingGroupId", required: true)]
        public Input<string> ScalingGroupId { get; set; } = null!;

        /// <summary>
        /// Indicates whether to skip instances that match the desired configuration.
        /// </summary>
        [Input("skipMatching")]
        public Input<bool>? SkipMatching { get; set; }

        /// <summary>
        /// The current status of the instance refresh task. Possible values:
        /// - Pending: The instance refresh task is created and waiting to be scheduled.
        /// - InProgress: The instance refresh task is in progress.
        /// - Paused: The instance refresh task is paused.
        /// - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
        /// - Failed: The instance refresh task failed.
        /// - Successful: The instance refresh task was successful.
        /// - Cancelling: The instance refresh task is being canceled.
        /// - RollbackInProgress: The instance refresh task is being rolled back.
        /// - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
        /// - RollbackFailed: The rollback of the instance refresh task failed.
        /// - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public InstanceRefreshArgs()
        {
        }
        public static new InstanceRefreshArgs Empty => new InstanceRefreshArgs();
    }

    public sealed class InstanceRefreshState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The duration of the pause when the task reaches a checkpoint. Unit: minutes.
        /// </summary>
        [Input("checkpointPauseTime")]
        public Input<int>? CheckpointPauseTime { get; set; }

        [Input("checkpoints")]
        private InputList<Inputs.InstanceRefreshCheckpointGetArgs>? _checkpoints;

        /// <summary>
        /// The checkpoints for the refresh task. The task automatically pauses for the duration specified by CheckpointPauseTime when the percentage of new instances reaches a specified value. See `Checkpoints` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshCheckpointGetArgs> Checkpoints
        {
            get => _checkpoints ?? (_checkpoints = new InputList<Inputs.InstanceRefreshCheckpointGetArgs>());
            set => _checkpoints = value;
        }

        [Input("desiredConfigurationContainers")]
        private InputList<Inputs.InstanceRefreshDesiredConfigurationContainerGetArgs>? _desiredConfigurationContainers;

        /// <summary>
        /// The list of containers in the instance. See `DesiredConfigurationContainers` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshDesiredConfigurationContainerGetArgs> DesiredConfigurationContainers
        {
            get => _desiredConfigurationContainers ?? (_desiredConfigurationContainers = new InputList<Inputs.InstanceRefreshDesiredConfigurationContainerGetArgs>());
            set => _desiredConfigurationContainers = value;
        }

        /// <summary>
        /// The ID of the image file. This is the image resource used for automatic instance creation.
        /// </summary>
        [Input("desiredConfigurationImageId")]
        public Input<string>? DesiredConfigurationImageId { get; set; }

        /// <summary>
        /// The ID of the launch template. The scaling group uses this template to obtain launch configuration information.
        /// </summary>
        [Input("desiredConfigurationLaunchTemplateId")]
        public Input<string>? DesiredConfigurationLaunchTemplateId { get; set; }

        [Input("desiredConfigurationLaunchTemplateOverrides")]
        private InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideGetArgs>? _desiredConfigurationLaunchTemplateOverrides;

        /// <summary>
        /// The instance type information in the launch template overrides. See `DesiredConfigurationLaunchTemplateOverrides` below for details.
        /// </summary>
        public InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideGetArgs> DesiredConfigurationLaunchTemplateOverrides
        {
            get => _desiredConfigurationLaunchTemplateOverrides ?? (_desiredConfigurationLaunchTemplateOverrides = new InputList<Inputs.InstanceRefreshDesiredConfigurationLaunchTemplateOverrideGetArgs>());
            set => _desiredConfigurationLaunchTemplateOverrides = value;
        }

        /// <summary>
        /// The version of the launch template.
        /// </summary>
        [Input("desiredConfigurationLaunchTemplateVersion")]
        public Input<string>? DesiredConfigurationLaunchTemplateVersion { get; set; }

        /// <summary>
        /// The percentage by which the number of instances in the scaling group can exceed the group's capacity during the instance refresh.
        /// </summary>
        [Input("maxHealthyPercentage")]
        public Input<int>? MaxHealthyPercentage { get; set; }

        /// <summary>
        /// The percentage of instances that must be healthy in the scaling group during the instance refresh. The value is a percentage of the scaling group's capacity.
        /// </summary>
        [Input("minHealthyPercentage")]
        public Input<int>? MinHealthyPercentage { get; set; }

        /// <summary>
        /// The ID of the scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public Input<string>? ScalingGroupId { get; set; }

        /// <summary>
        /// Indicates whether to skip instances that match the desired configuration.
        /// </summary>
        [Input("skipMatching")]
        public Input<bool>? SkipMatching { get; set; }

        /// <summary>
        /// The current status of the instance refresh task. Possible values:
        /// - Pending: The instance refresh task is created and waiting to be scheduled.
        /// - InProgress: The instance refresh task is in progress.
        /// - Paused: The instance refresh task is paused.
        /// - CheckpointPause: The task is paused because it has reached a checkpoint (Checkpoint.Percentage).
        /// - Failed: The instance refresh task failed.
        /// - Successful: The instance refresh task was successful.
        /// - Cancelling: The instance refresh task is being canceled.
        /// - RollbackInProgress: The instance refresh task is being rolled back.
        /// - RollbackSuccessful: The instance refresh task was rolled back successfully. Set RollbackSuccessful to rollback the instance refresh task.
        /// - RollbackFailed: The rollback of the instance refresh task failed.
        /// - Cancelled:  The instance refresh task is canceled. Set Cancelled to cancel the instance refresh task.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public InstanceRefreshState()
        {
        }
        public static new InstanceRefreshState Empty => new InstanceRefreshState();
    }
}
