// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ess
{
    /// <summary>
    /// Provides a ESS scaling group resource which is a collection of ECS instances with the same application scenarios.
    /// 
    /// It defines the maximum and minimum numbers of ECS instances in the group, and their associated Server Load Balancer instances, RDS instances, and other attributes.
    /// 
    /// &gt; **NOTE:** You can launch an ESS scaling group for a VPC network via specifying parameter `vswitch_ids`.
    /// 
    /// For information about ess scaling rule, see [CreateScalingGroup](https://www.alibabacloud.com/help/en/auto-scaling/latest/createscalinggroup).
    /// 
    /// &gt; **NOTE:** Available since v1.39.0.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var myName = $"{name}-{defaultInteger.Result}";
    /// 
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableDiskCategory = "cloud_efficiency",
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultGetInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         CpuCoreCount = 2,
    ///         MemorySize = 4,
    ///     });
    /// 
    ///     var defaultGetImages = AliCloud.Ecs.GetImages.Invoke(new()
    ///     {
    ///         NameRegex = "^ubuntu_18.*64",
    ///         MostRecent = true,
    ///         Owners = "system",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = myName,
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         VswitchName = myName,
    ///     });
    /// 
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("default", new()
    ///     {
    ///         SecurityGroupName = myName,
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultSecurityGroupRule = new AliCloud.Ecs.SecurityGroupRule("default", new()
    ///     {
    ///         Type = "ingress",
    ///         IpProtocol = "tcp",
    ///         NicType = "intranet",
    ///         Policy = "accept",
    ///         PortRange = "22/22",
    ///         Priority = 1,
    ///         SecurityGroupId = defaultSecurityGroup.Id,
    ///         CidrIp = "172.16.0.0/24",
    ///     });
    /// 
    ///     var default2 = new AliCloud.Vpc.Switch("default2", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.1.0/24",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         VswitchName = $"{name}-bar",
    ///     });
    /// 
    ///     var defaultScalingGroup = new AliCloud.Ess.ScalingGroup("default", new()
    ///     {
    ///         MinSize = 1,
    ///         MaxSize = 1,
    ///         ScalingGroupName = myName,
    ///         DefaultCooldown = 20,
    ///         VswitchIds = new[]
    ///         {
    ///             defaultSwitch.Id,
    ///             default2.Id,
    ///         },
    ///         RemovalPolicies = new[]
    ///         {
    ///             "OldestInstance",
    ///             "NewestInstance",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Module Support
    /// 
    /// You can use to the existing autoscaling module
    /// to create a scaling group, configuration and lifecycle hook one-click.
    /// 
    /// ## Import
    /// 
    /// ESS scaling group can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ess/scalingGroup:ScalingGroup example asg-abc123456
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ess/scalingGroup:ScalingGroup")]
    public partial class ScalingGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If a Serve ALB instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server ALB instance.  See `alb_server_group` below for details.
        /// </summary>
        [Output("albServerGroups")]
        public Output<ImmutableArray<Outputs.ScalingGroupAlbServerGroup>> AlbServerGroups { get; private set; } = null!;

        /// <summary>
        /// The allocation policy of instances. Auto Scaling selects instance types based on the allocation policy to create instances. The policy can be applied to pay-as-you-go instances and preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Output("allocationStrategy")]
        public Output<string> AllocationStrategy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to evenly distribute instances in the scaling group across multiple zones. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Output("azBalance")]
        public Output<bool?> AzBalance { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Output("capacityOptionsCompensateWithOnDemand")]
        public Output<bool> CapacityOptionsCompensateWithOnDemand { get; private set; } = null!;

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be contained in the scaling group. When the actual number of pay-as-you-go instances in the scaling group drops below the value of this parameter, Auto Scaling preferentially creates pay-as-you-go instances. Valid values: 0 to 1000. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 0.
        /// </summary>
        [Output("capacityOptionsOnDemandBaseCapacity")]
        public Output<int> CapacityOptionsOnDemandBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. 'on_demand_base_capacity' specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group. Valid values: 0 to 100. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 100.
        /// </summary>
        [Output("capacityOptionsOnDemandPercentageAboveBaseCapacity")]
        public Output<int> CapacityOptionsOnDemandPercentageAboveBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// The price comparison mode. Valid values: PricePerUnit,PricePerVCpu. Default value: PricePerUnit.
        /// </summary>
        [Output("capacityOptionsPriceComparisonMode")]
        public Output<string> CapacityOptionsPriceComparisonMode { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to replace pay-as-you-go instances with preemptible instances. If you specify 'compensate_with_on_demand', it may result in a higher percentage of pay-as-you-go instances compared to the value of 'on_demand_percentage_above_base_capacity'. If you specify this parameter, Auto Scaling preferentially deploys preemptible instances to replace the surplus pay-as-you-go instances when preemptible instance types are available. If you specify 'compensate_with_on_demand', Auto Scaling creates pay-as-you-go instances when preemptible instance types are insufficient. To avoid retaining these pay-as-you-go instances for extended periods, Auto Scaling attempts to replace them with preemptible instances when sufficient preemptible instance types become available. Valid values: true, false.
        /// </summary>
        [Output("capacityOptionsSpotAutoReplaceOnDemand")]
        public Output<bool> CapacityOptionsSpotAutoReplaceOnDemand { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Output("compensateWithOnDemand")]
        public Output<bool> CompensateWithOnDemand { get; private set; } = null!;

        /// <summary>
        /// The ID of the elastic container instance.
        /// </summary>
        [Output("containerGroupId")]
        public Output<string?> ContainerGroupId { get; private set; } = null!;

        /// <summary>
        /// If an RDS instance is specified in the scaling group, the scaling group automatically attaches the Intranet IP addresses of its ECS instances to the RDS access whitelist.
        /// - The specified RDS instance must be in running status.
        /// - The specified RDS instance’s whitelist must have room for more IP addresses.
        /// </summary>
        [Output("dbInstanceIds")]
        public Output<ImmutableArray<string>> DbInstanceIds { get; private set; } = null!;

        /// <summary>
        /// Default cool-down time (in seconds) of the scaling group. Value range: [0, 86400]. The default value is 300s.
        /// </summary>
        [Output("defaultCooldown")]
        public Output<int?> DefaultCooldown { get; private set; } = null!;

        /// <summary>
        /// Expected number of ECS instances in the scaling group. Value range: [min_size, max_size].
        /// </summary>
        [Output("desiredCapacity")]
        public Output<int?> DesiredCapacity { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the scaling group deletion protection is enabled. `true` or `false`, Default value: `false`.
        /// </summary>
        [Output("groupDeletionProtection")]
        public Output<bool?> GroupDeletionProtection { get; private set; } = null!;

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI. Default to ECS.
        /// </summary>
        [Output("groupType")]
        public Output<string> GroupType { get; private set; } = null!;

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI, NONE, LOAD_BALANCER. Default to ECS.
        /// </summary>
        [Output("healthCheckType")]
        public Output<string> HealthCheckType { get; private set; } = null!;

        /// <summary>
        /// The health check modes of the scaling group. Valid values: ECS, NONE, LOAD_BALANCER.
        /// </summary>
        [Output("healthCheckTypes")]
        public Output<ImmutableArray<string>> HealthCheckTypes { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance from which Auto Scaling obtains the required configuration information and uses the information to automatically create a scaling configuration.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Instance launch template ID, scaling group obtains launch configuration from instance launch template, see [Launch Template](https://www.alibabacloud.com/help/doc-detail/73916.html). Creating scaling group from launch template enable group automatically.
        /// </summary>
        [Output("launchTemplateId")]
        public Output<string?> LaunchTemplateId { get; private set; } = null!;

        /// <summary>
        /// The details of the instance types that are specified by using the Extend Instance Type of Launch Template feature.  See `launch_template_override` below for details.
        /// </summary>
        [Output("launchTemplateOverrides")]
        public Output<ImmutableArray<Outputs.ScalingGroupLaunchTemplateOverride>> LaunchTemplateOverrides { get; private set; } = null!;

        /// <summary>
        /// The version number of the launch template. Valid values are the version number, `Latest`, or `Default`, Default value: `Default`.
        /// </summary>
        [Output("launchTemplateVersion")]
        public Output<string?> LaunchTemplateVersion { get; private set; } = null!;

        /// <summary>
        /// If a Server Load Balancer instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server Load Balancer instance.
        /// - The Server Load Balancer instance must be enabled.
        /// - At least one listener must be configured for each Server Load Balancer and it HealthCheck must be on. Otherwise, creation will fail (it may be useful to add a `depends_on` argument
        /// targeting your `alicloud.slb.Listener` in order to make sure the listener with its HealthCheck configuration is ready before creating your scaling group).
        /// - The Server Load Balancer instance attached with VPC-type ECS instances cannot be attached to the scaling group.
        /// - The default weight of an ECS instance attached to the Server Load Balancer instance is 50.
        /// </summary>
        [Output("loadbalancerIds")]
        public Output<ImmutableArray<string>> LoadbalancerIds { get; private set; } = null!;

        /// <summary>
        /// The maximum life span of an instance in the scaling group. Unit: seconds.
        /// </summary>
        [Output("maxInstanceLifetime")]
        public Output<int?> MaxInstanceLifetime { get; private set; } = null!;

        /// <summary>
        /// Maximum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `max_size` can be set to `2000`.
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// Minimum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `min_size` can be set to `2000`.
        /// </summary>
        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        /// <summary>
        /// Multi-AZ scaling group ECS instance expansion and contraction strategy. PRIORITY, COMPOSABLE, BALANCE or COST_OPTIMIZED(Available since v1.54.0).
        /// </summary>
        [Output("multiAzPolicy")]
        public Output<string?> MultiAzPolicy { get; private set; } = null!;

        /// <summary>
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales.
        /// </summary>
        [Output("onDemandBaseCapacity")]
        public Output<int> OnDemandBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity.
        /// </summary>
        [Output("onDemandPercentageAboveBaseCapacity")]
        public Output<int> OnDemandPercentageAboveBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// Set or unset instances within group into protected status.
        /// </summary>
        [Output("protectedInstances")]
        public Output<ImmutableArray<string>> ProtectedInstances { get; private set; } = null!;

        /// <summary>
        /// RemovalPolicy is used to select the ECS instances you want to remove from the scaling group when multiple candidates for removal exist. Optional values:
        /// - OldestInstance: removes the ECS instance that is added to the scaling group at the earliest point in time.
        /// - NewestInstance: removes the ECS instance that is added to the scaling group at the latest point in time.
        /// - OldestScalingConfiguration: removes the ECS instance that is created based on the earliest scaling configuration.
        /// - Default values: Default value of RemovalPolicy.1: OldestScalingConfiguration. Default value of RemovalPolicy.2: OldestInstance.
        /// </summary>
        [Output("removalPolicies")]
        public Output<ImmutableArray<string>> RemovalPolicies { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group to which you want to add the scaling group.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Name shown for the scaling group, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain numbers, underscores `_`, hyphens `-`, and decimal points `.`. If this parameter is not specified, the default value is ScalingGroupId.
        /// </summary>
        [Output("scalingGroupName")]
        public Output<string?> ScalingGroupName { get; private set; } = null!;

        /// <summary>
        /// The reclaim mode of the scaling group. Optional values: recycle, release, forceRecycle, forceRelease.
        /// </summary>
        [Output("scalingPolicy")]
        public Output<string> ScalingPolicy { get; private set; } = null!;

        /// <summary>
        /// The allocation policy of preemptible instances. You can use this parameter to individually specify the allocation policy for preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Output("spotAllocationStrategy")]
        public Output<string> SpotAllocationStrategy { get; private set; } = null!;

        /// <summary>
        /// The number of Spot pools to use to allocate your Spot capacity. The Spot pools is composed of instance types of lowest price.
        /// </summary>
        [Output("spotInstancePools")]
        public Output<int> SpotInstancePools { get; private set; } = null!;

        /// <summary>
        /// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
        /// </summary>
        [Output("spotInstanceRemedy")]
        public Output<bool> SpotInstanceRemedy { get; private set; } = null!;

        /// <summary>
        /// The period of time required by the ECS instance to enter the Stopped state. Unit: seconds. Valid values: 30 to 240.
        /// </summary>
        [Output("stopInstanceTimeout")]
        public Output<int?> StopInstanceTimeout { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// It has been deprecated from version 1.7.1 and new field 'vswitch_ids' replaces it.
        /// </summary>
        [Output("vswitchId")]
        public Output<string?> VswitchId { get; private set; } = null!;

        /// <summary>
        /// List of virtual switch IDs in which the ecs instances to be launched.
        /// </summary>
        [Output("vswitchIds")]
        public Output<ImmutableArray<string>> VswitchIds { get; private set; } = null!;


        /// <summary>
        /// Create a ScalingGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScalingGroup(string name, ScalingGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ess/scalingGroup:ScalingGroup", name, args ?? new ScalingGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScalingGroup(string name, Input<string> id, ScalingGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ess/scalingGroup:ScalingGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScalingGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScalingGroup Get(string name, Input<string> id, ScalingGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ScalingGroup(name, id, state, options);
        }
    }

    public sealed class ScalingGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("albServerGroups")]
        private InputList<Inputs.ScalingGroupAlbServerGroupArgs>? _albServerGroups;

        /// <summary>
        /// If a Serve ALB instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server ALB instance.  See `alb_server_group` below for details.
        /// </summary>
        public InputList<Inputs.ScalingGroupAlbServerGroupArgs> AlbServerGroups
        {
            get => _albServerGroups ?? (_albServerGroups = new InputList<Inputs.ScalingGroupAlbServerGroupArgs>());
            set => _albServerGroups = value;
        }

        /// <summary>
        /// The allocation policy of instances. Auto Scaling selects instance types based on the allocation policy to create instances. The policy can be applied to pay-as-you-go instances and preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        /// <summary>
        /// Specifies whether to evenly distribute instances in the scaling group across multiple zones. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("azBalance")]
        public Input<bool>? AzBalance { get; set; }

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Input("capacityOptionsCompensateWithOnDemand")]
        public Input<bool>? CapacityOptionsCompensateWithOnDemand { get; set; }

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be contained in the scaling group. When the actual number of pay-as-you-go instances in the scaling group drops below the value of this parameter, Auto Scaling preferentially creates pay-as-you-go instances. Valid values: 0 to 1000. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 0.
        /// </summary>
        [Input("capacityOptionsOnDemandBaseCapacity")]
        public Input<int>? CapacityOptionsOnDemandBaseCapacity { get; set; }

        /// <summary>
        /// The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. 'on_demand_base_capacity' specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group. Valid values: 0 to 100. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 100.
        /// </summary>
        [Input("capacityOptionsOnDemandPercentageAboveBaseCapacity")]
        public Input<int>? CapacityOptionsOnDemandPercentageAboveBaseCapacity { get; set; }

        /// <summary>
        /// The price comparison mode. Valid values: PricePerUnit,PricePerVCpu. Default value: PricePerUnit.
        /// </summary>
        [Input("capacityOptionsPriceComparisonMode")]
        public Input<string>? CapacityOptionsPriceComparisonMode { get; set; }

        /// <summary>
        /// Specifies whether to replace pay-as-you-go instances with preemptible instances. If you specify 'compensate_with_on_demand', it may result in a higher percentage of pay-as-you-go instances compared to the value of 'on_demand_percentage_above_base_capacity'. If you specify this parameter, Auto Scaling preferentially deploys preemptible instances to replace the surplus pay-as-you-go instances when preemptible instance types are available. If you specify 'compensate_with_on_demand', Auto Scaling creates pay-as-you-go instances when preemptible instance types are insufficient. To avoid retaining these pay-as-you-go instances for extended periods, Auto Scaling attempts to replace them with preemptible instances when sufficient preemptible instance types become available. Valid values: true, false.
        /// </summary>
        [Input("capacityOptionsSpotAutoReplaceOnDemand")]
        public Input<bool>? CapacityOptionsSpotAutoReplaceOnDemand { get; set; }

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Input("compensateWithOnDemand")]
        public Input<bool>? CompensateWithOnDemand { get; set; }

        /// <summary>
        /// The ID of the elastic container instance.
        /// </summary>
        [Input("containerGroupId")]
        public Input<string>? ContainerGroupId { get; set; }

        [Input("dbInstanceIds")]
        private InputList<string>? _dbInstanceIds;

        /// <summary>
        /// If an RDS instance is specified in the scaling group, the scaling group automatically attaches the Intranet IP addresses of its ECS instances to the RDS access whitelist.
        /// - The specified RDS instance must be in running status.
        /// - The specified RDS instance’s whitelist must have room for more IP addresses.
        /// </summary>
        public InputList<string> DbInstanceIds
        {
            get => _dbInstanceIds ?? (_dbInstanceIds = new InputList<string>());
            set => _dbInstanceIds = value;
        }

        /// <summary>
        /// Default cool-down time (in seconds) of the scaling group. Value range: [0, 86400]. The default value is 300s.
        /// </summary>
        [Input("defaultCooldown")]
        public Input<int>? DefaultCooldown { get; set; }

        /// <summary>
        /// Expected number of ECS instances in the scaling group. Value range: [min_size, max_size].
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// Specifies whether the scaling group deletion protection is enabled. `true` or `false`, Default value: `false`.
        /// </summary>
        [Input("groupDeletionProtection")]
        public Input<bool>? GroupDeletionProtection { get; set; }

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI. Default to ECS.
        /// </summary>
        [Input("groupType")]
        public Input<string>? GroupType { get; set; }

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI, NONE, LOAD_BALANCER. Default to ECS.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        [Input("healthCheckTypes")]
        private InputList<string>? _healthCheckTypes;

        /// <summary>
        /// The health check modes of the scaling group. Valid values: ECS, NONE, LOAD_BALANCER.
        /// </summary>
        public InputList<string> HealthCheckTypes
        {
            get => _healthCheckTypes ?? (_healthCheckTypes = new InputList<string>());
            set => _healthCheckTypes = value;
        }

        /// <summary>
        /// The ID of the instance from which Auto Scaling obtains the required configuration information and uses the information to automatically create a scaling configuration.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Instance launch template ID, scaling group obtains launch configuration from instance launch template, see [Launch Template](https://www.alibabacloud.com/help/doc-detail/73916.html). Creating scaling group from launch template enable group automatically.
        /// </summary>
        [Input("launchTemplateId")]
        public Input<string>? LaunchTemplateId { get; set; }

        [Input("launchTemplateOverrides")]
        private InputList<Inputs.ScalingGroupLaunchTemplateOverrideArgs>? _launchTemplateOverrides;

        /// <summary>
        /// The details of the instance types that are specified by using the Extend Instance Type of Launch Template feature.  See `launch_template_override` below for details.
        /// </summary>
        public InputList<Inputs.ScalingGroupLaunchTemplateOverrideArgs> LaunchTemplateOverrides
        {
            get => _launchTemplateOverrides ?? (_launchTemplateOverrides = new InputList<Inputs.ScalingGroupLaunchTemplateOverrideArgs>());
            set => _launchTemplateOverrides = value;
        }

        /// <summary>
        /// The version number of the launch template. Valid values are the version number, `Latest`, or `Default`, Default value: `Default`.
        /// </summary>
        [Input("launchTemplateVersion")]
        public Input<string>? LaunchTemplateVersion { get; set; }

        [Input("loadbalancerIds")]
        private InputList<string>? _loadbalancerIds;

        /// <summary>
        /// If a Server Load Balancer instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server Load Balancer instance.
        /// - The Server Load Balancer instance must be enabled.
        /// - At least one listener must be configured for each Server Load Balancer and it HealthCheck must be on. Otherwise, creation will fail (it may be useful to add a `depends_on` argument
        /// targeting your `alicloud.slb.Listener` in order to make sure the listener with its HealthCheck configuration is ready before creating your scaling group).
        /// - The Server Load Balancer instance attached with VPC-type ECS instances cannot be attached to the scaling group.
        /// - The default weight of an ECS instance attached to the Server Load Balancer instance is 50.
        /// </summary>
        public InputList<string> LoadbalancerIds
        {
            get => _loadbalancerIds ?? (_loadbalancerIds = new InputList<string>());
            set => _loadbalancerIds = value;
        }

        /// <summary>
        /// The maximum life span of an instance in the scaling group. Unit: seconds.
        /// </summary>
        [Input("maxInstanceLifetime")]
        public Input<int>? MaxInstanceLifetime { get; set; }

        /// <summary>
        /// Maximum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `max_size` can be set to `2000`.
        /// </summary>
        [Input("maxSize", required: true)]
        public Input<int> MaxSize { get; set; } = null!;

        /// <summary>
        /// Minimum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `min_size` can be set to `2000`.
        /// </summary>
        [Input("minSize", required: true)]
        public Input<int> MinSize { get; set; } = null!;

        /// <summary>
        /// Multi-AZ scaling group ECS instance expansion and contraction strategy. PRIORITY, COMPOSABLE, BALANCE or COST_OPTIMIZED(Available since v1.54.0).
        /// </summary>
        [Input("multiAzPolicy")]
        public Input<string>? MultiAzPolicy { get; set; }

        /// <summary>
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales.
        /// </summary>
        [Input("onDemandBaseCapacity")]
        public Input<int>? OnDemandBaseCapacity { get; set; }

        /// <summary>
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity.
        /// </summary>
        [Input("onDemandPercentageAboveBaseCapacity")]
        public Input<int>? OnDemandPercentageAboveBaseCapacity { get; set; }

        [Input("protectedInstances")]
        private InputList<string>? _protectedInstances;

        /// <summary>
        /// Set or unset instances within group into protected status.
        /// </summary>
        public InputList<string> ProtectedInstances
        {
            get => _protectedInstances ?? (_protectedInstances = new InputList<string>());
            set => _protectedInstances = value;
        }

        [Input("removalPolicies")]
        private InputList<string>? _removalPolicies;

        /// <summary>
        /// RemovalPolicy is used to select the ECS instances you want to remove from the scaling group when multiple candidates for removal exist. Optional values:
        /// - OldestInstance: removes the ECS instance that is added to the scaling group at the earliest point in time.
        /// - NewestInstance: removes the ECS instance that is added to the scaling group at the latest point in time.
        /// - OldestScalingConfiguration: removes the ECS instance that is created based on the earliest scaling configuration.
        /// - Default values: Default value of RemovalPolicy.1: OldestScalingConfiguration. Default value of RemovalPolicy.2: OldestInstance.
        /// </summary>
        public InputList<string> RemovalPolicies
        {
            get => _removalPolicies ?? (_removalPolicies = new InputList<string>());
            set => _removalPolicies = value;
        }

        /// <summary>
        /// The ID of the resource group to which you want to add the scaling group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Name shown for the scaling group, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain numbers, underscores `_`, hyphens `-`, and decimal points `.`. If this parameter is not specified, the default value is ScalingGroupId.
        /// </summary>
        [Input("scalingGroupName")]
        public Input<string>? ScalingGroupName { get; set; }

        /// <summary>
        /// The reclaim mode of the scaling group. Optional values: recycle, release, forceRecycle, forceRelease.
        /// </summary>
        [Input("scalingPolicy")]
        public Input<string>? ScalingPolicy { get; set; }

        /// <summary>
        /// The allocation policy of preemptible instances. You can use this parameter to individually specify the allocation policy for preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("spotAllocationStrategy")]
        public Input<string>? SpotAllocationStrategy { get; set; }

        /// <summary>
        /// The number of Spot pools to use to allocate your Spot capacity. The Spot pools is composed of instance types of lowest price.
        /// </summary>
        [Input("spotInstancePools")]
        public Input<int>? SpotInstancePools { get; set; }

        /// <summary>
        /// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
        /// </summary>
        [Input("spotInstanceRemedy")]
        public Input<bool>? SpotInstanceRemedy { get; set; }

        /// <summary>
        /// The period of time required by the ECS instance to enter the Stopped state. Unit: seconds. Valid values: 30 to 240.
        /// </summary>
        [Input("stopInstanceTimeout")]
        public Input<int>? StopInstanceTimeout { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// It has been deprecated from version 1.7.1 and new field 'vswitch_ids' replaces it.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        [Input("vswitchIds")]
        private InputList<string>? _vswitchIds;

        /// <summary>
        /// List of virtual switch IDs in which the ecs instances to be launched.
        /// </summary>
        public InputList<string> VswitchIds
        {
            get => _vswitchIds ?? (_vswitchIds = new InputList<string>());
            set => _vswitchIds = value;
        }

        public ScalingGroupArgs()
        {
        }
        public static new ScalingGroupArgs Empty => new ScalingGroupArgs();
    }

    public sealed class ScalingGroupState : global::Pulumi.ResourceArgs
    {
        [Input("albServerGroups")]
        private InputList<Inputs.ScalingGroupAlbServerGroupGetArgs>? _albServerGroups;

        /// <summary>
        /// If a Serve ALB instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server ALB instance.  See `alb_server_group` below for details.
        /// </summary>
        public InputList<Inputs.ScalingGroupAlbServerGroupGetArgs> AlbServerGroups
        {
            get => _albServerGroups ?? (_albServerGroups = new InputList<Inputs.ScalingGroupAlbServerGroupGetArgs>());
            set => _albServerGroups = value;
        }

        /// <summary>
        /// The allocation policy of instances. Auto Scaling selects instance types based on the allocation policy to create instances. The policy can be applied to pay-as-you-go instances and preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        /// <summary>
        /// Specifies whether to evenly distribute instances in the scaling group across multiple zones. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("azBalance")]
        public Input<bool>? AzBalance { get; set; }

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Input("capacityOptionsCompensateWithOnDemand")]
        public Input<bool>? CapacityOptionsCompensateWithOnDemand { get; set; }

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be contained in the scaling group. When the actual number of pay-as-you-go instances in the scaling group drops below the value of this parameter, Auto Scaling preferentially creates pay-as-you-go instances. Valid values: 0 to 1000. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 0.
        /// </summary>
        [Input("capacityOptionsOnDemandBaseCapacity")]
        public Input<int>? CapacityOptionsOnDemandBaseCapacity { get; set; }

        /// <summary>
        /// The percentage of pay-as-you-go instances in the excess instances when the minimum number of pay-as-you-go instances is reached. 'on_demand_base_capacity' specifies the minimum number of pay-as-you-go instances that must be contained in the scaling group. Valid values: 0 to 100. If you set 'multi_az_policy' to COMPOSABLE, the default value of this parameter is 100.
        /// </summary>
        [Input("capacityOptionsOnDemandPercentageAboveBaseCapacity")]
        public Input<int>? CapacityOptionsOnDemandPercentageAboveBaseCapacity { get; set; }

        /// <summary>
        /// The price comparison mode. Valid values: PricePerUnit,PricePerVCpu. Default value: PricePerUnit.
        /// </summary>
        [Input("capacityOptionsPriceComparisonMode")]
        public Input<string>? CapacityOptionsPriceComparisonMode { get; set; }

        /// <summary>
        /// Specifies whether to replace pay-as-you-go instances with preemptible instances. If you specify 'compensate_with_on_demand', it may result in a higher percentage of pay-as-you-go instances compared to the value of 'on_demand_percentage_above_base_capacity'. If you specify this parameter, Auto Scaling preferentially deploys preemptible instances to replace the surplus pay-as-you-go instances when preemptible instance types are available. If you specify 'compensate_with_on_demand', Auto Scaling creates pay-as-you-go instances when preemptible instance types are insufficient. To avoid retaining these pay-as-you-go instances for extended periods, Auto Scaling attempts to replace them with preemptible instances when sufficient preemptible instance types become available. Valid values: true, false.
        /// </summary>
        [Input("capacityOptionsSpotAutoReplaceOnDemand")]
        public Input<bool>? CapacityOptionsSpotAutoReplaceOnDemand { get; set; }

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the requirement on the number of ECS instances when the expected capacity of preemptible instances cannot be provided due to reasons such as cost-related issues and insufficient resources. This parameter is supported only if you set 'multi_az_policy' to COST_OPTIMIZED. Valid values: true, false.
        /// </summary>
        [Input("compensateWithOnDemand")]
        public Input<bool>? CompensateWithOnDemand { get; set; }

        /// <summary>
        /// The ID of the elastic container instance.
        /// </summary>
        [Input("containerGroupId")]
        public Input<string>? ContainerGroupId { get; set; }

        [Input("dbInstanceIds")]
        private InputList<string>? _dbInstanceIds;

        /// <summary>
        /// If an RDS instance is specified in the scaling group, the scaling group automatically attaches the Intranet IP addresses of its ECS instances to the RDS access whitelist.
        /// - The specified RDS instance must be in running status.
        /// - The specified RDS instance’s whitelist must have room for more IP addresses.
        /// </summary>
        public InputList<string> DbInstanceIds
        {
            get => _dbInstanceIds ?? (_dbInstanceIds = new InputList<string>());
            set => _dbInstanceIds = value;
        }

        /// <summary>
        /// Default cool-down time (in seconds) of the scaling group. Value range: [0, 86400]. The default value is 300s.
        /// </summary>
        [Input("defaultCooldown")]
        public Input<int>? DefaultCooldown { get; set; }

        /// <summary>
        /// Expected number of ECS instances in the scaling group. Value range: [min_size, max_size].
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// Specifies whether the scaling group deletion protection is enabled. `true` or `false`, Default value: `false`.
        /// </summary>
        [Input("groupDeletionProtection")]
        public Input<bool>? GroupDeletionProtection { get; set; }

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI. Default to ECS.
        /// </summary>
        [Input("groupType")]
        public Input<string>? GroupType { get; set; }

        /// <summary>
        /// Resource type within scaling group. Optional values: ECS, ECI, NONE, LOAD_BALANCER. Default to ECS.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        [Input("healthCheckTypes")]
        private InputList<string>? _healthCheckTypes;

        /// <summary>
        /// The health check modes of the scaling group. Valid values: ECS, NONE, LOAD_BALANCER.
        /// </summary>
        public InputList<string> HealthCheckTypes
        {
            get => _healthCheckTypes ?? (_healthCheckTypes = new InputList<string>());
            set => _healthCheckTypes = value;
        }

        /// <summary>
        /// The ID of the instance from which Auto Scaling obtains the required configuration information and uses the information to automatically create a scaling configuration.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Instance launch template ID, scaling group obtains launch configuration from instance launch template, see [Launch Template](https://www.alibabacloud.com/help/doc-detail/73916.html). Creating scaling group from launch template enable group automatically.
        /// </summary>
        [Input("launchTemplateId")]
        public Input<string>? LaunchTemplateId { get; set; }

        [Input("launchTemplateOverrides")]
        private InputList<Inputs.ScalingGroupLaunchTemplateOverrideGetArgs>? _launchTemplateOverrides;

        /// <summary>
        /// The details of the instance types that are specified by using the Extend Instance Type of Launch Template feature.  See `launch_template_override` below for details.
        /// </summary>
        public InputList<Inputs.ScalingGroupLaunchTemplateOverrideGetArgs> LaunchTemplateOverrides
        {
            get => _launchTemplateOverrides ?? (_launchTemplateOverrides = new InputList<Inputs.ScalingGroupLaunchTemplateOverrideGetArgs>());
            set => _launchTemplateOverrides = value;
        }

        /// <summary>
        /// The version number of the launch template. Valid values are the version number, `Latest`, or `Default`, Default value: `Default`.
        /// </summary>
        [Input("launchTemplateVersion")]
        public Input<string>? LaunchTemplateVersion { get; set; }

        [Input("loadbalancerIds")]
        private InputList<string>? _loadbalancerIds;

        /// <summary>
        /// If a Server Load Balancer instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server Load Balancer instance.
        /// - The Server Load Balancer instance must be enabled.
        /// - At least one listener must be configured for each Server Load Balancer and it HealthCheck must be on. Otherwise, creation will fail (it may be useful to add a `depends_on` argument
        /// targeting your `alicloud.slb.Listener` in order to make sure the listener with its HealthCheck configuration is ready before creating your scaling group).
        /// - The Server Load Balancer instance attached with VPC-type ECS instances cannot be attached to the scaling group.
        /// - The default weight of an ECS instance attached to the Server Load Balancer instance is 50.
        /// </summary>
        public InputList<string> LoadbalancerIds
        {
            get => _loadbalancerIds ?? (_loadbalancerIds = new InputList<string>());
            set => _loadbalancerIds = value;
        }

        /// <summary>
        /// The maximum life span of an instance in the scaling group. Unit: seconds.
        /// </summary>
        [Input("maxInstanceLifetime")]
        public Input<int>? MaxInstanceLifetime { get; set; }

        /// <summary>
        /// Maximum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `max_size` can be set to `2000`.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Minimum number of ECS instances in the scaling group. Value range: [0, 2000].
        /// **NOTE:** From version 1.204.1, `min_size` can be set to `2000`.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// Multi-AZ scaling group ECS instance expansion and contraction strategy. PRIORITY, COMPOSABLE, BALANCE or COST_OPTIMIZED(Available since v1.54.0).
        /// </summary>
        [Input("multiAzPolicy")]
        public Input<string>? MultiAzPolicy { get; set; }

        /// <summary>
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales.
        /// </summary>
        [Input("onDemandBaseCapacity")]
        public Input<int>? OnDemandBaseCapacity { get; set; }

        /// <summary>
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity.
        /// </summary>
        [Input("onDemandPercentageAboveBaseCapacity")]
        public Input<int>? OnDemandPercentageAboveBaseCapacity { get; set; }

        [Input("protectedInstances")]
        private InputList<string>? _protectedInstances;

        /// <summary>
        /// Set or unset instances within group into protected status.
        /// </summary>
        public InputList<string> ProtectedInstances
        {
            get => _protectedInstances ?? (_protectedInstances = new InputList<string>());
            set => _protectedInstances = value;
        }

        [Input("removalPolicies")]
        private InputList<string>? _removalPolicies;

        /// <summary>
        /// RemovalPolicy is used to select the ECS instances you want to remove from the scaling group when multiple candidates for removal exist. Optional values:
        /// - OldestInstance: removes the ECS instance that is added to the scaling group at the earliest point in time.
        /// - NewestInstance: removes the ECS instance that is added to the scaling group at the latest point in time.
        /// - OldestScalingConfiguration: removes the ECS instance that is created based on the earliest scaling configuration.
        /// - Default values: Default value of RemovalPolicy.1: OldestScalingConfiguration. Default value of RemovalPolicy.2: OldestInstance.
        /// </summary>
        public InputList<string> RemovalPolicies
        {
            get => _removalPolicies ?? (_removalPolicies = new InputList<string>());
            set => _removalPolicies = value;
        }

        /// <summary>
        /// The ID of the resource group to which you want to add the scaling group.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Name shown for the scaling group, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain numbers, underscores `_`, hyphens `-`, and decimal points `.`. If this parameter is not specified, the default value is ScalingGroupId.
        /// </summary>
        [Input("scalingGroupName")]
        public Input<string>? ScalingGroupName { get; set; }

        /// <summary>
        /// The reclaim mode of the scaling group. Optional values: recycle, release, forceRecycle, forceRelease.
        /// </summary>
        [Input("scalingPolicy")]
        public Input<string>? ScalingPolicy { get; set; }

        /// <summary>
        /// The allocation policy of preemptible instances. You can use this parameter to individually specify the allocation policy for preemptible instances. This parameter takes effect only if you set MultiAZPolicy to COMPOSABLE.
        /// </summary>
        [Input("spotAllocationStrategy")]
        public Input<string>? SpotAllocationStrategy { get; set; }

        /// <summary>
        /// The number of Spot pools to use to allocate your Spot capacity. The Spot pools is composed of instance types of lowest price.
        /// </summary>
        [Input("spotInstancePools")]
        public Input<int>? SpotInstancePools { get; set; }

        /// <summary>
        /// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
        /// </summary>
        [Input("spotInstanceRemedy")]
        public Input<bool>? SpotInstanceRemedy { get; set; }

        /// <summary>
        /// The period of time required by the ECS instance to enter the Stopped state. Unit: seconds. Valid values: 30 to 240.
        /// </summary>
        [Input("stopInstanceTimeout")]
        public Input<int>? StopInstanceTimeout { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// It has been deprecated from version 1.7.1 and new field 'vswitch_ids' replaces it.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        [Input("vswitchIds")]
        private InputList<string>? _vswitchIds;

        /// <summary>
        /// List of virtual switch IDs in which the ecs instances to be launched.
        /// </summary>
        public InputList<string> VswitchIds
        {
            get => _vswitchIds ?? (_vswitchIds = new InputList<string>());
            set => _vswitchIds = value;
        }

        public ScalingGroupState()
        {
        }
        public static new ScalingGroupState Empty => new ScalingGroupState();
    }
}
