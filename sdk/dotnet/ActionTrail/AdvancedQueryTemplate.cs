// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.ActionTrail
{
    /// <summary>
    /// Provides a Actiontrail Advanced Query Template resource.
    /// 
    /// sql template of advanced query.
    /// 
    /// For information about Actiontrail Advanced Query Template and how to use it, see [What is Advanced Query Template](https://next.api.alibabacloud.com/document/Actiontrail/2020-07-06/CreateAdvancedQueryTemplate).
    /// 
    /// &gt; **NOTE:** Available since v1.255.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new AliCloud.ActionTrail.AdvancedQueryTemplate("default", new()
    ///     {
    ///         SimpleQuery = true,
    ///         TemplateName = "exampleTemplateName",
    ///         TemplateSql = "*",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Actiontrail Advanced Query Template can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate")]
    public partial class AdvancedQueryTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Distinguish whether the current template is a simple query
        /// </summary>
        [Output("simpleQuery")]
        public Output<bool> SimpleQuery { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("templateName")]
        public Output<string?> TemplateName { get; private set; } = null!;

        /// <summary>
        /// SQL content saved on behalf of the current template
        /// </summary>
        [Output("templateSql")]
        public Output<string> TemplateSql { get; private set; } = null!;


        /// <summary>
        /// Create a AdvancedQueryTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdvancedQueryTemplate(string name, AdvancedQueryTemplateArgs args, CustomResourceOptions? options = null)
            : base("alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate", name, args ?? new AdvancedQueryTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdvancedQueryTemplate(string name, Input<string> id, AdvancedQueryTemplateState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdvancedQueryTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdvancedQueryTemplate Get(string name, Input<string> id, AdvancedQueryTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new AdvancedQueryTemplate(name, id, state, options);
        }
    }

    public sealed class AdvancedQueryTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Distinguish whether the current template is a simple query
        /// </summary>
        [Input("simpleQuery", required: true)]
        public Input<bool> SimpleQuery { get; set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// SQL content saved on behalf of the current template
        /// </summary>
        [Input("templateSql", required: true)]
        public Input<string> TemplateSql { get; set; } = null!;

        public AdvancedQueryTemplateArgs()
        {
        }
        public static new AdvancedQueryTemplateArgs Empty => new AdvancedQueryTemplateArgs();
    }

    public sealed class AdvancedQueryTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Distinguish whether the current template is a simple query
        /// </summary>
        [Input("simpleQuery")]
        public Input<bool>? SimpleQuery { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// SQL content saved on behalf of the current template
        /// </summary>
        [Input("templateSql")]
        public Input<string>? TemplateSql { get; set; }

        public AdvancedQueryTemplateState()
        {
        }
        public static new AdvancedQueryTemplateState Empty => new AdvancedQueryTemplateState();
    }
}
