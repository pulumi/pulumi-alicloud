// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CloudFirewall
{
    /// <summary>
    /// Provides a Cloud Firewall Nat Firewall resource.
    /// 
    /// For information about Cloud Firewall Nat Firewall and how to use it, see [What is Nat Firewall](https://www.alibabacloud.com/help/zh/cloud-firewall/developer-reference/api-cloudfw-2017-12-07-createsecurityproxy).
    /// 
    /// &gt; **NOTE:** Available since v1.224.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultikZ0gD = new AliCloud.Vpc.Network("defaultikZ0gD", new()
    ///     {
    ///         CidrBlock = "172.16.0.0/12",
    ///         VpcName = name,
    ///     });
    /// 
    ///     var defaultp4O7qi = new AliCloud.Vpc.Switch("defaultp4O7qi", new()
    ///     {
    ///         VpcId = defaultikZ0gD.Id,
    ///         CidrBlock = "172.16.6.0/24",
    ///         VswitchName = name,
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///     });
    /// 
    ///     var default2iRZpC = new AliCloud.Vpc.NatGateway("default2iRZpC", new()
    ///     {
    ///         EipBindMode = "MULTI_BINDED",
    ///         VpcId = defaultikZ0gD.Id,
    ///         NatGatewayName = name,
    ///         PaymentType = "PayAsYouGo",
    ///         VswitchId = defaultp4O7qi.Id,
    ///         NatType = "Enhanced",
    ///         NetworkType = "internet",
    ///     });
    /// 
    ///     var defaultyiRwgs = new AliCloud.Ecs.EipAddress("defaultyiRwgs", new()
    ///     {
    ///         AddressName = name,
    ///     });
    /// 
    ///     var defaults2MTuO = new AliCloud.Ecs.EipAssociation("defaults2MTuO", new()
    ///     {
    ///         InstanceId = default2iRZpC.Id,
    ///         AllocationId = defaultyiRwgs.Id,
    ///         Mode = "NAT",
    ///         InstanceType = "Nat",
    ///     });
    /// 
    ///     var defaultAKE43g = new AliCloud.Vpc.SnatEntry("defaultAKE43g", new()
    ///     {
    ///         SnatIp = defaultyiRwgs.IpAddress,
    ///         SnatTableId = default2iRZpC.SnatTableIds,
    ///         SourceVswitchId = defaultp4O7qi.Id,
    ///     });
    /// 
    ///     var defaultNatFirewall = new AliCloud.CloudFirewall.NatFirewall("default", new()
    ///     {
    ///         NatGatewayId = default2iRZpC.Id,
    ///         NatRouteEntryLists = new[]
    ///         {
    ///             new AliCloud.CloudFirewall.Inputs.NatFirewallNatRouteEntryListArgs
    ///             {
    ///                 NexthopType = "NatGateway",
    ///                 RouteTableId = defaultikZ0gD.RouteTableId,
    ///                 NexthopId = default2iRZpC.Id,
    ///                 DestinationCidr = "0.0.0.0/0",
    ///             },
    ///         },
    ///         FirewallSwitch = "close",
    ///         VswitchAuto = "true",
    ///         Status = "closed",
    ///         RegionNo = "cn-shenzhen",
    ///         Lang = "zh",
    ///         ProxyName = "CFW-example",
    ///         VswitchId = defaultAKE43g.SourceVswitchId,
    ///         StrictMode = 0,
    ///         VpcId = defaultikZ0gD.Id,
    ///         VswitchCidr = "172.16.5.0/24",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cloud Firewall Nat Firewall can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:cloudfirewall/natFirewall:NatFirewall example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cloudfirewall/natFirewall:NatFirewall")]
    public partial class NatFirewall : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Safety protection switch. Value:-**open**: open-**close**: close.
        /// </summary>
        [Output("firewallSwitch")]
        public Output<string?> FirewallSwitch { get; private set; } = null!;

        /// <summary>
        /// Lang.
        /// </summary>
        [Output("lang")]
        public Output<string?> Lang { get; private set; } = null!;

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// The list of routes to be switched by the NAT gateway. See `nat_route_entry_list` below.
        /// </summary>
        [Output("natRouteEntryLists")]
        public Output<ImmutableArray<Outputs.NatFirewallNatRouteEntryList>> NatRouteEntryLists { get; private set; } = null!;

        /// <summary>
        /// NAT firewall name.
        /// </summary>
        [Output("proxyName")]
        public Output<string> ProxyName { get; private set; } = null!;

        /// <summary>
        /// Region.
        /// </summary>
        [Output("regionNo")]
        public Output<string> RegionNo { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
        /// </summary>
        [Output("strictMode")]
        public Output<int?> StrictMode { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
        /// </summary>
        [Output("vswitchAuto")]
        public Output<string?> VswitchAuto { get; private set; } = null!;

        /// <summary>
        /// The network segment of the virtual switch. Required for Switch automatic mode.
        /// </summary>
        [Output("vswitchCidr")]
        public Output<string?> VswitchCidr { get; private set; } = null!;

        /// <summary>
        /// The switch ID. Required for switch manual mode.
        /// </summary>
        [Output("vswitchId")]
        public Output<string?> VswitchId { get; private set; } = null!;


        /// <summary>
        /// Create a NatFirewall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatFirewall(string name, NatFirewallArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cloudfirewall/natFirewall:NatFirewall", name, args ?? new NatFirewallArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatFirewall(string name, Input<string> id, NatFirewallState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cloudfirewall/natFirewall:NatFirewall", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatFirewall resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatFirewall Get(string name, Input<string> id, NatFirewallState? state = null, CustomResourceOptions? options = null)
        {
            return new NatFirewall(name, id, state, options);
        }
    }

    public sealed class NatFirewallArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Safety protection switch. Value:-**open**: open-**close**: close.
        /// </summary>
        [Input("firewallSwitch")]
        public Input<string>? FirewallSwitch { get; set; }

        /// <summary>
        /// Lang.
        /// </summary>
        [Input("lang")]
        public Input<string>? Lang { get; set; }

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        [Input("natRouteEntryLists", required: true)]
        private InputList<Inputs.NatFirewallNatRouteEntryListArgs>? _natRouteEntryLists;

        /// <summary>
        /// The list of routes to be switched by the NAT gateway. See `nat_route_entry_list` below.
        /// </summary>
        public InputList<Inputs.NatFirewallNatRouteEntryListArgs> NatRouteEntryLists
        {
            get => _natRouteEntryLists ?? (_natRouteEntryLists = new InputList<Inputs.NatFirewallNatRouteEntryListArgs>());
            set => _natRouteEntryLists = value;
        }

        /// <summary>
        /// NAT firewall name.
        /// </summary>
        [Input("proxyName", required: true)]
        public Input<string> ProxyName { get; set; } = null!;

        /// <summary>
        /// Region.
        /// </summary>
        [Input("regionNo", required: true)]
        public Input<string> RegionNo { get; set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
        /// </summary>
        [Input("strictMode")]
        public Input<int>? StrictMode { get; set; }

        /// <summary>
        /// The ID of the VPC instance.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
        /// </summary>
        [Input("vswitchAuto")]
        public Input<string>? VswitchAuto { get; set; }

        /// <summary>
        /// The network segment of the virtual switch. Required for Switch automatic mode.
        /// </summary>
        [Input("vswitchCidr")]
        public Input<string>? VswitchCidr { get; set; }

        /// <summary>
        /// The switch ID. Required for switch manual mode.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public NatFirewallArgs()
        {
        }
        public static new NatFirewallArgs Empty => new NatFirewallArgs();
    }

    public sealed class NatFirewallState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Safety protection switch. Value:-**open**: open-**close**: close.
        /// </summary>
        [Input("firewallSwitch")]
        public Input<string>? FirewallSwitch { get; set; }

        /// <summary>
        /// Lang.
        /// </summary>
        [Input("lang")]
        public Input<string>? Lang { get; set; }

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        [Input("natRouteEntryLists")]
        private InputList<Inputs.NatFirewallNatRouteEntryListGetArgs>? _natRouteEntryLists;

        /// <summary>
        /// The list of routes to be switched by the NAT gateway. See `nat_route_entry_list` below.
        /// </summary>
        public InputList<Inputs.NatFirewallNatRouteEntryListGetArgs> NatRouteEntryLists
        {
            get => _natRouteEntryLists ?? (_natRouteEntryLists = new InputList<Inputs.NatFirewallNatRouteEntryListGetArgs>());
            set => _natRouteEntryLists = value;
        }

        /// <summary>
        /// NAT firewall name.
        /// </summary>
        [Input("proxyName")]
        public Input<string>? ProxyName { get; set; }

        /// <summary>
        /// Region.
        /// </summary>
        [Input("regionNo")]
        public Input<string>? RegionNo { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
        /// </summary>
        [Input("strictMode")]
        public Input<int>? StrictMode { get; set; }

        /// <summary>
        /// The ID of the VPC instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
        /// </summary>
        [Input("vswitchAuto")]
        public Input<string>? VswitchAuto { get; set; }

        /// <summary>
        /// The network segment of the virtual switch. Required for Switch automatic mode.
        /// </summary>
        [Input("vswitchCidr")]
        public Input<string>? VswitchCidr { get; set; }

        /// <summary>
        /// The switch ID. Required for switch manual mode.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        public NatFirewallState()
        {
        }
        public static new NatFirewallState Empty => new NatFirewallState();
    }
}
