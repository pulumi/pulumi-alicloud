// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.MaxCompute
{
    /// <summary>
    /// ## Import
    /// 
    /// Max Compute Tunnel Quota Timer can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:maxcompute/tunnelQuotaTimer:TunnelQuotaTimer example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:maxcompute/tunnelQuotaTimer:TunnelQuotaTimer")]
    public partial class TunnelQuotaTimer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
        /// </summary>
        [Output("nickname")]
        public Output<string> Nickname { get; private set; } = null!;

        /// <summary>
        /// Time-Sharing configuration
        /// 
        /// &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
        /// See `quota_timer` below.
        /// </summary>
        [Output("quotaTimers")]
        public Output<ImmutableArray<Outputs.TunnelQuotaTimerQuotaTimer>> QuotaTimers { get; private set; } = null!;

        /// <summary>
        /// Time zone, reference: Asia/Shanghai
        /// In general, the system will automatically generate the time zone according to the region without configuration.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a TunnelQuotaTimer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TunnelQuotaTimer(string name, TunnelQuotaTimerArgs args, CustomResourceOptions? options = null)
            : base("alicloud:maxcompute/tunnelQuotaTimer:TunnelQuotaTimer", name, args ?? new TunnelQuotaTimerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TunnelQuotaTimer(string name, Input<string> id, TunnelQuotaTimerState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:maxcompute/tunnelQuotaTimer:TunnelQuotaTimer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TunnelQuotaTimer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TunnelQuotaTimer Get(string name, Input<string> id, TunnelQuotaTimerState? state = null, CustomResourceOptions? options = null)
        {
            return new TunnelQuotaTimer(name, id, state, options);
        }
    }

    public sealed class TunnelQuotaTimerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
        /// </summary>
        [Input("nickname", required: true)]
        public Input<string> Nickname { get; set; } = null!;

        [Input("quotaTimers")]
        private InputList<Inputs.TunnelQuotaTimerQuotaTimerArgs>? _quotaTimers;

        /// <summary>
        /// Time-Sharing configuration
        /// 
        /// &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
        /// See `quota_timer` below.
        /// </summary>
        public InputList<Inputs.TunnelQuotaTimerQuotaTimerArgs> QuotaTimers
        {
            get => _quotaTimers ?? (_quotaTimers = new InputList<Inputs.TunnelQuotaTimerQuotaTimerArgs>());
            set => _quotaTimers = value;
        }

        /// <summary>
        /// Time zone, reference: Asia/Shanghai
        /// In general, the system will automatically generate the time zone according to the region without configuration.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public TunnelQuotaTimerArgs()
        {
        }
        public static new TunnelQuotaTimerArgs Empty => new TunnelQuotaTimerArgs();
    }

    public sealed class TunnelQuotaTimerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The nickname of the exclusive Resource Group (Tunnel Quota) for the level - 1 data transmission service.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        [Input("quotaTimers")]
        private InputList<Inputs.TunnelQuotaTimerQuotaTimerGetArgs>? _quotaTimers;

        /// <summary>
        /// Time-Sharing configuration
        /// 
        /// &gt; **NOTE:** -- The same reserved Quota resource group supports up to 48 time intervals. The minimum duration of a time interval is 30 minutes. -- After the current data transmission service is configured for time-sharing, if you need to perform a downgrade operation on the data transmission service (package year and month), please reduce the time-sharing concurrency first. -- The effective time of the time-sharing configuration is 0 to 5 minutes, and the billing will be calculated according to the actual effective time. -- Please make sure to set the time range completely from 00:00 to 24:00
        /// See `quota_timer` below.
        /// </summary>
        public InputList<Inputs.TunnelQuotaTimerQuotaTimerGetArgs> QuotaTimers
        {
            get => _quotaTimers ?? (_quotaTimers = new InputList<Inputs.TunnelQuotaTimerQuotaTimerGetArgs>());
            set => _quotaTimers = value;
        }

        /// <summary>
        /// Time zone, reference: Asia/Shanghai
        /// In general, the system will automatically generate the time zone according to the region without configuration.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public TunnelQuotaTimerState()
        {
        }
        public static new TunnelQuotaTimerState Empty => new TunnelQuotaTimerState();
    }
}
