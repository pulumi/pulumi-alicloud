// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.MaxCompute
{
    /// <summary>
    /// Provides a Max Compute Role User Attachment resource.
    /// 
    /// Resources associated with a user and a project-level role.
    /// 
    /// For information about Max Compute Role User Attachment and how to use it, see [What is Role User Attachment](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.242.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var aliyunUser = config.Get("aliyunUser") ?? "ALIYUN$openapiautomation@test.aliyunid.com";
    ///     var ramUser = config.Get("ramUser") ?? "RAM$openapiautomation@test.aliyunid.com:tf-example";
    ///     var ramRole = config.Get("ramRole") ?? "RAM$openapiautomation@test.aliyunid.com:role/terraform-no-ak-assumerole-no-deleting";
    ///     var roleName = config.Get("roleName") ?? "role_project_admin";
    ///     var projectName = config.Get("projectName") ?? "default_project_669886c";
    ///     var @default = new AliCloud.MaxCompute.RoleUserAttachment("default", new()
    ///     {
    ///         RoleName = roleName,
    ///         User = ramRole,
    ///         ProjectName = projectName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Max Compute Role User Attachment can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:maxcompute/roleUserAttachment:RoleUserAttachment example &lt;project_name&gt;-&lt;role_name&gt;-&lt;user&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:maxcompute/roleUserAttachment:RoleUserAttachment")]
    public partial class RoleUserAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Project Name
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Role Name, Valid Values: super_administrator, admin, Custom Role
        /// 
        /// &gt; **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// Supported input: Alibaba Cloud account, RAM user, and RAM role
        /// 
        /// &gt; **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;


        /// <summary>
        /// Create a RoleUserAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleUserAttachment(string name, RoleUserAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:maxcompute/roleUserAttachment:RoleUserAttachment", name, args ?? new RoleUserAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleUserAttachment(string name, Input<string> id, RoleUserAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:maxcompute/roleUserAttachment:RoleUserAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleUserAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleUserAttachment Get(string name, Input<string> id, RoleUserAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RoleUserAttachment(name, id, state, options);
        }
    }

    public sealed class RoleUserAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project Name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// Role Name, Valid Values: super_administrator, admin, Custom Role
        /// 
        /// &gt; **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        /// <summary>
        /// Supported input: Alibaba Cloud account, RAM user, and RAM role
        /// 
        /// &gt; **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public RoleUserAttachmentArgs()
        {
        }
        public static new RoleUserAttachmentArgs Empty => new RoleUserAttachmentArgs();
    }

    public sealed class RoleUserAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project Name
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Role Name, Valid Values: super_administrator, admin, Custom Role
        /// 
        /// &gt; **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// Supported input: Alibaba Cloud account, RAM user, and RAM role
        /// 
        /// &gt; **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public RoleUserAttachmentState()
        {
        }
        public static new RoleUserAttachmentState Empty => new RoleUserAttachmentState();
    }
}
