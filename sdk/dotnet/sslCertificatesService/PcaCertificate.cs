// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.sslCertificatesService
{
    /// <summary>
    /// Provides a SSL Certificates Pca Certificate resource.
    /// 
    /// For information about SSL Certificates Pca Certificate and how to use it, see [What is Pca Certificate](https://next.api.alibabacloud.com/document/cas/2020-06-30/CreateRootCACertificate).
    /// 
    /// &gt; **NOTE:** Available since v1.257.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new AliCloud.SslCertificatesService.PcaCertificate("default", new()
    ///     {
    ///         Organization = "a",
    ///         Years = 1,
    ///         Locality = "a",
    ///         OrganizationUnit = "a",
    ///         State = "a",
    ///         CountryCode = "cn",
    ///         CommonName = "cbc.certqa.cn",
    ///         Algorithm = "RSA_2048",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSL Certificates Pca Certificate can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate")]
    public partial class PcaCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_&lt; key length&gt;' format. Value:
        /// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
        /// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
        /// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
        /// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
        /// The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
        /// </summary>
        [Output("algorithm")]
        public Output<string> Algorithm { get; private set; } = null!;

        /// <summary>
        /// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
        /// </summary>
        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        /// <summary>
        /// Name of the city where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Output("locality")]
        public Output<string> Locality { get; private set; } = null!;

        /// <summary>
        /// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The name of the department or branch under the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Output("organizationUnit")]
        public Output<string> OrganizationUnit { get; private set; } = null!;

        /// <summary>
        /// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
        /// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The status of the CA certificate.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The validity period of the root CA certificate, in years.
        /// &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
        /// </summary>
        [Output("years")]
        public Output<int> Years { get; private set; } = null!;


        /// <summary>
        /// Create a PcaCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PcaCertificate(string name, PcaCertificateArgs args, CustomResourceOptions? options = null)
            : base("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, args ?? new PcaCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PcaCertificate(string name, Input<string> id, PcaCertificateState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PcaCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PcaCertificate Get(string name, Input<string> id, PcaCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new PcaCertificate(name, id, state, options);
        }
    }

    public sealed class PcaCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_&lt; key length&gt;' format. Value:
        /// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
        /// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
        /// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
        /// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
        /// The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Input("commonName", required: true)]
        public Input<string> CommonName { get; set; } = null!;

        /// <summary>
        /// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Name of the city where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Input("locality", required: true)]
        public Input<string> Locality { get; set; } = null!;

        /// <summary>
        /// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The name of the department or branch under the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Input("organizationUnit", required: true)]
        public Input<string> OrganizationUnit { get; set; } = null!;

        /// <summary>
        /// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
        /// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        /// <summary>
        /// The validity period of the root CA certificate, in years.
        /// &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
        /// </summary>
        [Input("years", required: true)]
        public Input<int> Years { get; set; } = null!;

        public PcaCertificateArgs()
        {
        }
        public static new PcaCertificateArgs Empty => new PcaCertificateArgs();
    }

    public sealed class PcaCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_&lt; key length&gt;' format. Value:
        /// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
        /// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
        /// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
        /// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
        /// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
        /// The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Name of the city where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Input("locality")]
        public Input<string>? Locality { get; set; }

        /// <summary>
        /// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The name of the department or branch under the organization. Support the use of Chinese, English characters.
        /// </summary>
        [Input("organizationUnit")]
        public Input<string>? OrganizationUnit { get; set; }

        /// <summary>
        /// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters. 
        /// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The status of the CA certificate.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The validity period of the root CA certificate, in years.
        /// &gt; **NOTE:**  It is recommended to set to `5` to `10` years.
        /// </summary>
        [Input("years")]
        public Input<int>? Years { get; set; }

        public PcaCertificateState()
        {
        }
        public static new PcaCertificateState Empty => new PcaCertificateState();
    }
}
