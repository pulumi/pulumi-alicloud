// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Dms
{
    /// <summary>
    /// Provides a Dms Airflow resource.
    /// 
    /// Airflow instance, used to schedule jobs.
    /// 
    /// For information about Dms Airflow and how to use it, see [What is Airflow](https://next.api.alibabacloud.com/document/Dms/2025-04-14/CreateAirflow).
    /// 
    /// &gt; **NOTE:** Available since v1.260.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "^default-NODELETING$",
    ///     });
    /// 
    ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = @default.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = "cn-hangzhou-h",
    ///     });
    /// 
    ///     var securityGroup = new AliCloud.Ecs.SecurityGroup("security_group", new()
    ///     {
    ///         Description = "terraform_example_group",
    ///         SecurityGroupName = "terraform_example_group",
    ///         VpcId = @default.Apply(@default =&gt; @default.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0])),
    ///         SecurityGroupType = "normal",
    ///         InnerAccessPolicy = "Accept",
    ///     });
    /// 
    ///     var workspace = new AliCloud.Dms.EnterpriseWorkspace("workspace", new()
    ///     {
    ///         Description = "terraform-example",
    ///         VpcId = @default.Apply(@default =&gt; @default.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0])),
    ///         WorkspaceName = "terraform-example",
    ///     });
    /// 
    ///     var defaultAirflow = new AliCloud.Dms.Airflow("default", new()
    ///     {
    ///         VpcId = @default.Apply(@default =&gt; @default.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0])),
    ///         OssPath = "/",
    ///         DagsDir = "default/dags",
    ///         ZoneId = "cn-hangzhou-h",
    ///         WorkerServerlessReplicas = 0,
    ///         Description = "terraform-example",
    ///         SecurityGroupId = securityGroup.Id,
    ///         RequirementFile = "default/requirements.txt",
    ///         AirflowName = "tfaccdms6513",
    ///         PluginsDir = "default/plugins",
    ///         StartupFile = "default/startup.sh",
    ///         AppSpec = "SMALL",
    ///         OssBucketName = "hansheng",
    ///         VswitchId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Ids[0]),
    ///         WorkspaceId = workspace.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Dms Airflow can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:dms/airflow:Airflow example &lt;workspace_id&gt;:&lt;airflow_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:dms/airflow:Airflow")]
    public partial class Airflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AirflowId
        /// </summary>
        [Output("airflowId")]
        public Output<string> AirflowId { get; private set; } = null!;

        /// <summary>
        /// Name of the Airflow instance
        /// </summary>
        [Output("airflowName")]
        public Output<string> AirflowName { get; private set; } = null!;

        /// <summary>
        /// Airflow instance specifications
        /// </summary>
        [Output("appSpec")]
        public Output<string> AppSpec { get; private set; } = null!;

        /// <summary>
        /// Dag scan path
        /// </summary>
        [Output("dagsDir")]
        public Output<string?> DagsDir { get; private set; } = null!;

        /// <summary>
        /// Description of the airflow instance
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// OSS bucket name
        /// </summary>
        [Output("ossBucketName")]
        public Output<string> OssBucketName { get; private set; } = null!;

        /// <summary>
        /// OSS path
        /// </summary>
        [Output("ossPath")]
        public Output<string> OssPath { get; private set; } = null!;

        /// <summary>
        /// The path of the plugin scanned by the airflow instance.
        /// </summary>
        [Output("pluginsDir")]
        public Output<string?> PluginsDir { get; private set; } = null!;

        /// <summary>
        /// The region ID of the resource
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Path to installable package
        /// </summary>
        [Output("requirementFile")]
        public Output<string?> RequirementFile { get; private set; } = null!;

        /// <summary>
        /// Security group ID
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// Launch script for the airflow container
        /// </summary>
        [Output("startupFile")]
        public Output<string?> StartupFile { get; private set; } = null!;

        /// <summary>
        /// Vpc id
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Switch ID
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;

        /// <summary>
        /// Worker Node extension
        /// </summary>
        [Output("workerServerlessReplicas")]
        public Output<int> WorkerServerlessReplicas { get; private set; } = null!;

        /// <summary>
        /// DMS workspace ID
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;

        /// <summary>
        /// Zone ID in the region
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Airflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Airflow(string name, AirflowArgs args, CustomResourceOptions? options = null)
            : base("alicloud:dms/airflow:Airflow", name, args ?? new AirflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Airflow(string name, Input<string> id, AirflowState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:dms/airflow:Airflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Airflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Airflow Get(string name, Input<string> id, AirflowState? state = null, CustomResourceOptions? options = null)
        {
            return new Airflow(name, id, state, options);
        }
    }

    public sealed class AirflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Airflow instance
        /// </summary>
        [Input("airflowName", required: true)]
        public Input<string> AirflowName { get; set; } = null!;

        /// <summary>
        /// Airflow instance specifications
        /// </summary>
        [Input("appSpec", required: true)]
        public Input<string> AppSpec { get; set; } = null!;

        /// <summary>
        /// Dag scan path
        /// </summary>
        [Input("dagsDir")]
        public Input<string>? DagsDir { get; set; }

        /// <summary>
        /// Description of the airflow instance
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// OSS bucket name
        /// </summary>
        [Input("ossBucketName", required: true)]
        public Input<string> OssBucketName { get; set; } = null!;

        /// <summary>
        /// OSS path
        /// </summary>
        [Input("ossPath", required: true)]
        public Input<string> OssPath { get; set; } = null!;

        /// <summary>
        /// The path of the plugin scanned by the airflow instance.
        /// </summary>
        [Input("pluginsDir")]
        public Input<string>? PluginsDir { get; set; }

        /// <summary>
        /// Path to installable package
        /// </summary>
        [Input("requirementFile")]
        public Input<string>? RequirementFile { get; set; }

        /// <summary>
        /// Security group ID
        /// </summary>
        [Input("securityGroupId", required: true)]
        public Input<string> SecurityGroupId { get; set; } = null!;

        /// <summary>
        /// Launch script for the airflow container
        /// </summary>
        [Input("startupFile")]
        public Input<string>? StartupFile { get; set; }

        /// <summary>
        /// Vpc id
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Switch ID
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        /// <summary>
        /// Worker Node extension
        /// </summary>
        [Input("workerServerlessReplicas", required: true)]
        public Input<int> WorkerServerlessReplicas { get; set; } = null!;

        /// <summary>
        /// DMS workspace ID
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        /// <summary>
        /// Zone ID in the region
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public AirflowArgs()
        {
        }
        public static new AirflowArgs Empty => new AirflowArgs();
    }

    public sealed class AirflowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AirflowId
        /// </summary>
        [Input("airflowId")]
        public Input<string>? AirflowId { get; set; }

        /// <summary>
        /// Name of the Airflow instance
        /// </summary>
        [Input("airflowName")]
        public Input<string>? AirflowName { get; set; }

        /// <summary>
        /// Airflow instance specifications
        /// </summary>
        [Input("appSpec")]
        public Input<string>? AppSpec { get; set; }

        /// <summary>
        /// Dag scan path
        /// </summary>
        [Input("dagsDir")]
        public Input<string>? DagsDir { get; set; }

        /// <summary>
        /// Description of the airflow instance
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// OSS bucket name
        /// </summary>
        [Input("ossBucketName")]
        public Input<string>? OssBucketName { get; set; }

        /// <summary>
        /// OSS path
        /// </summary>
        [Input("ossPath")]
        public Input<string>? OssPath { get; set; }

        /// <summary>
        /// The path of the plugin scanned by the airflow instance.
        /// </summary>
        [Input("pluginsDir")]
        public Input<string>? PluginsDir { get; set; }

        /// <summary>
        /// The region ID of the resource
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Path to installable package
        /// </summary>
        [Input("requirementFile")]
        public Input<string>? RequirementFile { get; set; }

        /// <summary>
        /// Security group ID
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// Launch script for the airflow container
        /// </summary>
        [Input("startupFile")]
        public Input<string>? StartupFile { get; set; }

        /// <summary>
        /// Vpc id
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Switch ID
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// Worker Node extension
        /// </summary>
        [Input("workerServerlessReplicas")]
        public Input<int>? WorkerServerlessReplicas { get; set; }

        /// <summary>
        /// DMS workspace ID
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        /// <summary>
        /// Zone ID in the region
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AirflowState()
        {
        }
        public static new AirflowState Empty => new AirflowState();
    }
}
