// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.SelectDB
{
    /// <summary>
    /// Provides a SelectDB DBInstance resource.
    /// 
    /// For information about SelectDB DBInstance and how to use it, see [What is DBInstance](https://www.alibabacloud.com/help/zh/selectdb/latest/api-selectdb-2023-05-22-createdbinstance).
    /// 
    /// &gt; **NOTE:** Available since v1.229.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform_example";
    ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "^default-NODELETING$",
    ///     });
    /// 
    ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     var defaultDbInstance = new AliCloud.SelectDB.DbInstance("default", new()
    ///     {
    ///         DbInstanceClass = "selectdb.xlarge",
    ///         DbInstanceDescription = name,
    ///         CacheSize = 200,
    ///         PaymentType = "PayAsYouGo",
    ///         VpcId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.VpcId),
    ///         ZoneId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.ZoneId),
    ///         VswitchId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SelectDB DBInstance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:selectdb/dbInstance:DbInstance example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:selectdb/dbInstance:DbInstance")]
    public partial class DbInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The password for DBInstance using admin account.
        /// </summary>
        [Output("adminPass")]
        public Output<string?> AdminPass { get; private set; } = null!;

        /// <summary>
        /// The cache size in DBInstance on creating default cluster. The number should be divided by 100.
        /// </summary>
        [Output("cacheSize")]
        public Output<int> CacheSize { get; private set; } = null!;

        /// <summary>
        /// The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Output("cacheSizePostpaid")]
        public Output<int> CacheSizePostpaid { get; private set; } = null!;

        /// <summary>
        /// The sum of cache size for every `Subscription` clusters in DBInstance.
        /// </summary>
        [Output("cacheSizePrepaid")]
        public Output<int> CacheSizePrepaid { get; private set; } = null!;

        /// <summary>
        /// The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Output("clusterCountPostpaid")]
        public Output<int> ClusterCountPostpaid { get; private set; } = null!;

        /// <summary>
        /// The sum of cluster counts for `Subscription` clusters in DBInstance.
        /// </summary>
        [Output("clusterCountPrepaid")]
        public Output<int> ClusterCountPrepaid { get; private set; } = null!;

        /// <summary>
        /// The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Output("cpuPostpaid")]
        public Output<int> CpuPostpaid { get; private set; } = null!;

        /// <summary>
        /// The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
        /// </summary>
        [Output("cpuPrepaid")]
        public Output<int> CpuPrepaid { get; private set; } = null!;

        /// <summary>
        /// The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Output("dbInstanceClass")]
        public Output<string> DbInstanceClass { get; private set; } = null!;

        /// <summary>
        /// The DBInstance description.
        /// </summary>
        [Output("dbInstanceDescription")]
        public Output<string> DbInstanceDescription { get; private set; } = null!;

        /// <summary>
        /// The modified IP address whitelists. See `desired_security_ip_lists` below.
        /// </summary>
        [Output("desiredSecurityIpLists")]
        public Output<ImmutableArray<Outputs.DbInstanceDesiredSecurityIpList>> DesiredSecurityIpLists { get; private set; } = null!;

        /// <summary>
        /// If DBInstance need to open public network, set it to `true`.
        /// </summary>
        [Output("enablePublicNetwork")]
        public Output<bool?> EnablePublicNetwork { get; private set; } = null!;

        /// <summary>
        /// The engine of DBInstance. Always `selectdb`.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The current DBInstance minor version.
        /// </summary>
        [Output("engineMinorVersion")]
        public Output<string> EngineMinorVersion { get; private set; } = null!;

        /// <summary>
        /// The time when DBInstance is created.
        /// </summary>
        [Output("gmtCreated")]
        public Output<string> GmtCreated { get; private set; } = null!;

        /// <summary>
        /// The time when DBInstance will be expired. Available on `Subscription` DBInstance.
        /// </summary>
        [Output("gmtExpired")]
        public Output<string> GmtExpired { get; private set; } = null!;

        /// <summary>
        /// The time when DBInstance is modified.
        /// </summary>
        [Output("gmtModified")]
        public Output<string> GmtModified { get; private set; } = null!;

        /// <summary>
        /// The net infos for instances.
        /// </summary>
        [Output("instanceNetInfos")]
        public Output<ImmutableArray<Outputs.DbInstanceInstanceNetInfo>> InstanceNetInfos { get; private set; } = null!;

        /// <summary>
        /// The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
        /// </summary>
        [Output("lockMode")]
        public Output<string> LockMode { get; private set; } = null!;

        /// <summary>
        /// The reason why the instance is locked.
        /// </summary>
        [Output("lockReason")]
        public Output<string> LockReason { get; private set; } = null!;

        /// <summary>
        /// The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Output("memoryPostpaid")]
        public Output<int> MemoryPostpaid { get; private set; } = null!;

        /// <summary>
        /// The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
        /// </summary>
        [Output("memoryPrepaid")]
        public Output<int> MemoryPrepaid { get; private set; } = null!;

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Output("paymentType")]
        public Output<string> PaymentType { get; private set; } = null!;

        /// <summary>
        /// It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
        /// </summary>
        [Output("period")]
        public Output<string?> Period { get; private set; } = null!;

        /// <summary>
        /// The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
        /// </summary>
        [Output("periodTime")]
        public Output<int?> PeriodTime { get; private set; } = null!;

        /// <summary>
        /// The region ID of the instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The details about each IP address whitelist returned.
        /// </summary>
        [Output("securityIpLists")]
        public Output<ImmutableArray<Outputs.DbInstanceSecurityIpList>> SecurityIpLists { get; private set; } = null!;

        /// <summary>
        /// The status of the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The sub domain of DBInstance.
        /// </summary>
        [Output("subDomain")]
        public Output<string> SubDomain { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The DBInstance minor version want to upgraded to. (Available since 1.245.0) Can be set to `4.0` in creating SelectDB 4.0 DBInstance.
        /// </summary>
        [Output("upgradedEngineMinorVersion")]
        public Output<string?> UpgradedEngineMinorVersion { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC for DBInstance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of vswitch for DBInstance.
        /// </summary>
        [Output("vswitchId")]
        public Output<string> VswitchId { get; private set; } = null!;

        /// <summary>
        /// The ID of zone for DBInstance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a DbInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbInstance(string name, DbInstanceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:selectdb/dbInstance:DbInstance", name, args ?? new DbInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbInstance(string name, Input<string> id, DbInstanceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:selectdb/dbInstance:DbInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPass",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbInstance Get(string name, Input<string> id, DbInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DbInstance(name, id, state, options);
        }
    }

    public sealed class DbInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPass")]
        private Input<string>? _adminPass;

        /// <summary>
        /// The password for DBInstance using admin account.
        /// </summary>
        public Input<string>? AdminPass
        {
            get => _adminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The cache size in DBInstance on creating default cluster. The number should be divided by 100.
        /// </summary>
        [Input("cacheSize", required: true)]
        public Input<int> CacheSize { get; set; } = null!;

        /// <summary>
        /// The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Input("dbInstanceClass", required: true)]
        public Input<string> DbInstanceClass { get; set; } = null!;

        /// <summary>
        /// The DBInstance description.
        /// </summary>
        [Input("dbInstanceDescription", required: true)]
        public Input<string> DbInstanceDescription { get; set; } = null!;

        [Input("desiredSecurityIpLists")]
        private InputList<Inputs.DbInstanceDesiredSecurityIpListArgs>? _desiredSecurityIpLists;

        /// <summary>
        /// The modified IP address whitelists. See `desired_security_ip_lists` below.
        /// </summary>
        public InputList<Inputs.DbInstanceDesiredSecurityIpListArgs> DesiredSecurityIpLists
        {
            get => _desiredSecurityIpLists ?? (_desiredSecurityIpLists = new InputList<Inputs.DbInstanceDesiredSecurityIpListArgs>());
            set => _desiredSecurityIpLists = value;
        }

        /// <summary>
        /// If DBInstance need to open public network, set it to `true`.
        /// </summary>
        [Input("enablePublicNetwork")]
        public Input<bool>? EnablePublicNetwork { get; set; }

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Input("paymentType", required: true)]
        public Input<string> PaymentType { get; set; } = null!;

        /// <summary>
        /// It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
        /// </summary>
        [Input("periodTime")]
        public Input<int>? PeriodTime { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The DBInstance minor version want to upgraded to. (Available since 1.245.0) Can be set to `4.0` in creating SelectDB 4.0 DBInstance.
        /// </summary>
        [Input("upgradedEngineMinorVersion")]
        public Input<string>? UpgradedEngineMinorVersion { get; set; }

        /// <summary>
        /// The ID of the VPC for DBInstance.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// The ID of vswitch for DBInstance.
        /// </summary>
        [Input("vswitchId", required: true)]
        public Input<string> VswitchId { get; set; } = null!;

        /// <summary>
        /// The ID of zone for DBInstance.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public DbInstanceArgs()
        {
        }
        public static new DbInstanceArgs Empty => new DbInstanceArgs();
    }

    public sealed class DbInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("adminPass")]
        private Input<string>? _adminPass;

        /// <summary>
        /// The password for DBInstance using admin account.
        /// </summary>
        public Input<string>? AdminPass
        {
            get => _adminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The cache size in DBInstance on creating default cluster. The number should be divided by 100.
        /// </summary>
        [Input("cacheSize")]
        public Input<int>? CacheSize { get; set; }

        /// <summary>
        /// The sum of cache size for every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Input("cacheSizePostpaid")]
        public Input<int>? CacheSizePostpaid { get; set; }

        /// <summary>
        /// The sum of cache size for every `Subscription` clusters in DBInstance.
        /// </summary>
        [Input("cacheSizePrepaid")]
        public Input<int>? CacheSizePrepaid { get; set; }

        /// <summary>
        /// The sum of cluster counts for `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Input("clusterCountPostpaid")]
        public Input<int>? ClusterCountPostpaid { get; set; }

        /// <summary>
        /// The sum of cluster counts for `Subscription` clusters in DBInstance.
        /// </summary>
        [Input("clusterCountPrepaid")]
        public Input<int>? ClusterCountPrepaid { get; set; }

        /// <summary>
        /// The sum of cpu resource amount for every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Input("cpuPostpaid")]
        public Input<int>? CpuPostpaid { get; set; }

        /// <summary>
        /// The sum of cpu resource amount for every `Subscription` clusters in DBInstance.
        /// </summary>
        [Input("cpuPrepaid")]
        public Input<int>? CpuPrepaid { get; set; }

        /// <summary>
        /// The class for default cluster in DBInstance. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Input("dbInstanceClass")]
        public Input<string>? DbInstanceClass { get; set; }

        /// <summary>
        /// The DBInstance description.
        /// </summary>
        [Input("dbInstanceDescription")]
        public Input<string>? DbInstanceDescription { get; set; }

        [Input("desiredSecurityIpLists")]
        private InputList<Inputs.DbInstanceDesiredSecurityIpListGetArgs>? _desiredSecurityIpLists;

        /// <summary>
        /// The modified IP address whitelists. See `desired_security_ip_lists` below.
        /// </summary>
        public InputList<Inputs.DbInstanceDesiredSecurityIpListGetArgs> DesiredSecurityIpLists
        {
            get => _desiredSecurityIpLists ?? (_desiredSecurityIpLists = new InputList<Inputs.DbInstanceDesiredSecurityIpListGetArgs>());
            set => _desiredSecurityIpLists = value;
        }

        /// <summary>
        /// If DBInstance need to open public network, set it to `true`.
        /// </summary>
        [Input("enablePublicNetwork")]
        public Input<bool>? EnablePublicNetwork { get; set; }

        /// <summary>
        /// The engine of DBInstance. Always `selectdb`.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The current DBInstance minor version.
        /// </summary>
        [Input("engineMinorVersion")]
        public Input<string>? EngineMinorVersion { get; set; }

        /// <summary>
        /// The time when DBInstance is created.
        /// </summary>
        [Input("gmtCreated")]
        public Input<string>? GmtCreated { get; set; }

        /// <summary>
        /// The time when DBInstance will be expired. Available on `Subscription` DBInstance.
        /// </summary>
        [Input("gmtExpired")]
        public Input<string>? GmtExpired { get; set; }

        /// <summary>
        /// The time when DBInstance is modified.
        /// </summary>
        [Input("gmtModified")]
        public Input<string>? GmtModified { get; set; }

        [Input("instanceNetInfos")]
        private InputList<Inputs.DbInstanceInstanceNetInfoGetArgs>? _instanceNetInfos;

        /// <summary>
        /// The net infos for instances.
        /// </summary>
        public InputList<Inputs.DbInstanceInstanceNetInfoGetArgs> InstanceNetInfos
        {
            get => _instanceNetInfos ?? (_instanceNetInfos = new InputList<Inputs.DbInstanceInstanceNetInfoGetArgs>());
            set => _instanceNetInfos = value;
        }

        /// <summary>
        /// The lock mode of the instance. Set the value to lock, which specifies that the instance is locked when it automatically expires or has an overdue payment.
        /// </summary>
        [Input("lockMode")]
        public Input<string>? LockMode { get; set; }

        /// <summary>
        /// The reason why the instance is locked.
        /// </summary>
        [Input("lockReason")]
        public Input<string>? LockReason { get; set; }

        /// <summary>
        /// The sum of memory resource amount offor every `PayAsYouGo` clusters in DBInstance.
        /// </summary>
        [Input("memoryPostpaid")]
        public Input<int>? MemoryPostpaid { get; set; }

        /// <summary>
        /// The sum of memory resource amount offor every `Subscription` clusters in DBInstance.
        /// </summary>
        [Input("memoryPrepaid")]
        public Input<int>? MemoryPrepaid { get; set; }

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// It is valid when payment_type is `Subscription`. Valid values are `Year`, `Month`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// The duration that you will buy DBInstance. It is valid when payment_type is `Subscription`. Valid values: [1~9], 12, 24, 36.
        /// </summary>
        [Input("periodTime")]
        public Input<int>? PeriodTime { get; set; }

        /// <summary>
        /// The region ID of the instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        [Input("securityIpLists")]
        private InputList<Inputs.DbInstanceSecurityIpListGetArgs>? _securityIpLists;

        /// <summary>
        /// The details about each IP address whitelist returned.
        /// </summary>
        public InputList<Inputs.DbInstanceSecurityIpListGetArgs> SecurityIpLists
        {
            get => _securityIpLists ?? (_securityIpLists = new InputList<Inputs.DbInstanceSecurityIpListGetArgs>());
            set => _securityIpLists = value;
        }

        /// <summary>
        /// The status of the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The sub domain of DBInstance.
        /// </summary>
        [Input("subDomain")]
        public Input<string>? SubDomain { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
        /// - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The DBInstance minor version want to upgraded to. (Available since 1.245.0) Can be set to `4.0` in creating SelectDB 4.0 DBInstance.
        /// </summary>
        [Input("upgradedEngineMinorVersion")]
        public Input<string>? UpgradedEngineMinorVersion { get; set; }

        /// <summary>
        /// The ID of the VPC for DBInstance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of vswitch for DBInstance.
        /// </summary>
        [Input("vswitchId")]
        public Input<string>? VswitchId { get; set; }

        /// <summary>
        /// The ID of zone for DBInstance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public DbInstanceState()
        {
        }
        public static new DbInstanceState Empty => new DbInstanceState();
    }
}
