// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.SelectDB
{
    /// <summary>
    /// Provides a SelectDB DBCluster resource.
    /// 
    /// For information about SelectDB DBCluster and how to use it, see [What is DBCluster](https://www.alibabacloud.com/help/zh/selectdb/latest/api-selectdb-2023-05-22-createdbcluster).
    /// 
    /// &gt; **NOTE:** Available since v1.229.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform_example";
    ///     var defaultGetNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "^default-NODELETING$",
    ///     });
    /// 
    ///     var defaultGetSwitches = AliCloud.Vpc.GetSwitches.Invoke(new()
    ///     {
    ///         VpcId = defaultGetNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         ZoneId = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     var defaultDbInstance = new AliCloud.SelectDB.DbInstance("default", new()
    ///     {
    ///         DbInstanceClass = "selectdb.xlarge",
    ///         DbInstanceDescription = name,
    ///         CacheSize = 200,
    ///         PaymentType = "PayAsYouGo",
    ///         VpcId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.VpcId),
    ///         ZoneId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.ZoneId),
    ///         VswitchId = defaultGetSwitches.Apply(getSwitchesResult =&gt; getSwitchesResult.Vswitches[0]?.Id),
    ///     });
    /// 
    ///     var defaultDbCluster = new AliCloud.SelectDB.DbCluster("default", new()
    ///     {
    ///         DbInstanceId = defaultDbInstance.Id,
    ///         DbClusterDescription = name,
    ///         DbClusterClass = "selectdb.2xlarge",
    ///         CacheSize = 400,
    ///         PaymentType = "PayAsYouGo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SelectDB DBCluster can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:selectdb/dbCluster:DbCluster example &lt;db_instance_id&gt;:&lt;db_cluster_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:selectdb/dbCluster:DbCluster")]
    public partial class DbCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The desired cache size on creating cluster. The number should be divided by 100.
        /// </summary>
        [Output("cacheSize")]
        public Output<int> CacheSize { get; private set; } = null!;

        /// <summary>
        /// The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
        /// </summary>
        [Output("cpu")]
        public Output<int> Cpu { get; private set; } = null!;

        /// <summary>
        /// The time when DBCluster is created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Output("dbClusterClass")]
        public Output<string> DbClusterClass { get; private set; } = null!;

        /// <summary>
        /// The DBCluster description.
        /// </summary>
        [Output("dbClusterDescription")]
        public Output<string> DbClusterDescription { get; private set; } = null!;

        /// <summary>
        /// The id of the cluster.
        /// </summary>
        [Output("dbClusterId")]
        public Output<string> DbClusterId { get; private set; } = null!;

        /// <summary>
        /// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// The modified parameter in DBCluster. See `desired_params` below.
        /// </summary>
        [Output("desiredParams")]
        public Output<ImmutableArray<Outputs.DbClusterDesiredParam>> DesiredParams { get; private set; } = null!;

        /// <summary>
        /// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
        /// </summary>
        [Output("desiredStatus")]
        public Output<string?> DesiredStatus { get; private set; } = null!;

        /// <summary>
        /// The engine of DBCluster. Always `selectdb`.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The version of DBCluster.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The memory resource amount of DBCluster. Depends on `db_cluster_class`.
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// The details about parameter changelogs in DBCluster returned.
        /// </summary>
        [Output("paramChangeLogs")]
        public Output<ImmutableArray<Outputs.DbClusterParamChangeLog>> ParamChangeLogs { get; private set; } = null!;

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Output("paymentType")]
        public Output<string> PaymentType { get; private set; } = null!;

        /// <summary>
        /// The ID of region for the cluster.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The current status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC for the cluster.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of zone for the cluster.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a DbCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbCluster(string name, DbClusterArgs args, CustomResourceOptions? options = null)
            : base("alicloud:selectdb/dbCluster:DbCluster", name, args ?? new DbClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbCluster(string name, Input<string> id, DbClusterState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:selectdb/dbCluster:DbCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbCluster Get(string name, Input<string> id, DbClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new DbCluster(name, id, state, options);
        }
    }

    public sealed class DbClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The desired cache size on creating cluster. The number should be divided by 100.
        /// </summary>
        [Input("cacheSize", required: true)]
        public Input<int> CacheSize { get; set; } = null!;

        /// <summary>
        /// The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Input("dbClusterClass", required: true)]
        public Input<string> DbClusterClass { get; set; } = null!;

        /// <summary>
        /// The DBCluster description.
        /// </summary>
        [Input("dbClusterDescription", required: true)]
        public Input<string> DbClusterDescription { get; set; } = null!;

        /// <summary>
        /// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
        /// </summary>
        [Input("dbInstanceId", required: true)]
        public Input<string> DbInstanceId { get; set; } = null!;

        [Input("desiredParams")]
        private InputList<Inputs.DbClusterDesiredParamArgs>? _desiredParams;

        /// <summary>
        /// The modified parameter in DBCluster. See `desired_params` below.
        /// </summary>
        public InputList<Inputs.DbClusterDesiredParamArgs> DesiredParams
        {
            get => _desiredParams ?? (_desiredParams = new InputList<Inputs.DbClusterDesiredParamArgs>());
            set => _desiredParams = value;
        }

        /// <summary>
        /// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
        /// </summary>
        [Input("desiredStatus")]
        public Input<string>? DesiredStatus { get; set; }

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Input("paymentType", required: true)]
        public Input<string> PaymentType { get; set; } = null!;

        public DbClusterArgs()
        {
        }
        public static new DbClusterArgs Empty => new DbClusterArgs();
    }

    public sealed class DbClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The desired cache size on creating cluster. The number should be divided by 100.
        /// </summary>
        [Input("cacheSize")]
        public Input<int>? CacheSize { get; set; }

        /// <summary>
        /// The cpu resource amount of DBCluster. Depends on `db_cluster_class`.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// The time when DBCluster is created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The DBCluster class. db_cluster_class has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
        /// </summary>
        [Input("dbClusterClass")]
        public Input<string>? DbClusterClass { get; set; }

        /// <summary>
        /// The DBCluster description.
        /// </summary>
        [Input("dbClusterDescription")]
        public Input<string>? DbClusterDescription { get; set; }

        /// <summary>
        /// The id of the cluster.
        /// </summary>
        [Input("dbClusterId")]
        public Input<string>? DbClusterId { get; set; }

        /// <summary>
        /// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        [Input("desiredParams")]
        private InputList<Inputs.DbClusterDesiredParamGetArgs>? _desiredParams;

        /// <summary>
        /// The modified parameter in DBCluster. See `desired_params` below.
        /// </summary>
        public InputList<Inputs.DbClusterDesiredParamGetArgs> DesiredParams
        {
            get => _desiredParams ?? (_desiredParams = new InputList<Inputs.DbClusterDesiredParamGetArgs>());
            set => _desiredParams = value;
        }

        /// <summary>
        /// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
        /// </summary>
        [Input("desiredStatus")]
        public Input<string>? DesiredStatus { get; set; }

        /// <summary>
        /// The engine of DBCluster. Always `selectdb`.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The version of DBCluster.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The memory resource amount of DBCluster. Depends on `db_cluster_class`.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("paramChangeLogs")]
        private InputList<Inputs.DbClusterParamChangeLogGetArgs>? _paramChangeLogs;

        /// <summary>
        /// The details about parameter changelogs in DBCluster returned.
        /// </summary>
        public InputList<Inputs.DbClusterParamChangeLogGetArgs> ParamChangeLogs
        {
            get => _paramChangeLogs ?? (_paramChangeLogs = new InputList<Inputs.DbClusterParamChangeLogGetArgs>());
            set => _paramChangeLogs = value;
        }

        /// <summary>
        /// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// The ID of region for the cluster.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The current status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the VPC for the cluster.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of zone for the cluster.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public DbClusterState()
        {
        }
        public static new DbClusterState Empty => new DbClusterState();
    }
}
