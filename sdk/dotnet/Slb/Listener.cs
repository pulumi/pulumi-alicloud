// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Slb
{
    /// <summary>
    /// Provides a Classic Load Balancer (SLB) Load Balancer Listener resource.
    /// 
    /// For information about Classic Load Balancer (SLB) and how to use it, see [What is Classic Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
    /// 
    /// For information about listener and how to use it, please see the following:
    /// 
    /// * [Configure a HTTP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27592.htm).
    /// * [Configure a HTTPS Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
    /// * [Configure a TCP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
    /// * [Configure a UDP Classic Load Balancer (SLB) Listener](https://www.alibabacloud.com/help/doc-detail/27595.htm).
    /// 
    /// &gt; **NOTE:** Available since v1.0.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var listener = new AliCloud.Slb.ApplicationLoadBalancer("listener", new()
    ///     {
    ///         LoadBalancerName = $"{name}-{@default.Result}",
    ///         InternetChargeType = "PayByTraffic",
    ///         AddressType = "internet",
    ///         InstanceChargeType = "PayByCLCU",
    ///     });
    /// 
    ///     var listenerAcl = new AliCloud.Slb.Acl("listener", new()
    ///     {
    ///         Name = $"{name}-{@default.Result}",
    ///         IpVersion = "ipv4",
    ///     });
    /// 
    ///     var listenerListener = new AliCloud.Slb.Listener("listener", new()
    ///     {
    ///         LoadBalancerId = listener.Id,
    ///         BackendPort = 80,
    ///         FrontendPort = 80,
    ///         Protocol = "http",
    ///         Bandwidth = 10,
    ///         StickySession = "on",
    ///         StickySessionType = "insert",
    ///         CookieTimeout = 86400,
    ///         Cookie = "tfslblistenercookie",
    ///         HealthCheck = "on",
    ///         HealthCheckDomain = "ali.com",
    ///         HealthCheckUri = "/cons",
    ///         HealthCheckConnectPort = 20,
    ///         HealthyThreshold = 8,
    ///         UnhealthyThreshold = 8,
    ///         HealthCheckTimeout = 8,
    ///         HealthCheckInterval = 5,
    ///         HealthCheckHttpCode = "http_2xx,http_3xx",
    ///         XForwardedFor = new AliCloud.Slb.Inputs.ListenerXForwardedForArgs
    ///         {
    ///             RetriveSlbIp = true,
    ///             RetriveSlbId = true,
    ///         },
    ///         AclStatus = "on",
    ///         AclType = "white",
    ///         AclIds = new[]
    ///         {
    ///             listenerAcl.Id,
    ///         },
    ///         RequestTimeout = 80,
    ///         IdleTimeout = 30,
    ///     });
    /// 
    ///     var first = new AliCloud.Slb.AclEntryAttachment("first", new()
    ///     {
    ///         AclId = listenerAcl.Id,
    ///         Entry = "10.10.10.0/24",
    ///         Comment = "first",
    ///     });
    /// 
    ///     var second = new AliCloud.Slb.AclEntryAttachment("second", new()
    ///     {
    ///         AclId = listenerAcl.Id,
    ///         Entry = "168.10.10.0/24",
    ///         Comment = "second",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Classic Load Balancer (SLB) Load Balancer Listener can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:slb/listener:Listener example &lt;load_balancer_id&gt;:&lt;protocol&gt;:&lt;frontend_port&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import alicloud:slb/listener:Listener example &lt;load_balancer_id&gt;:&lt;frontend_port&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:slb/listener:Listener")]
    public partial class Listener : global::Pulumi.CustomResource
    {
        [Output("aclId")]
        public Output<string> AclId { get; private set; } = null!;

        [Output("aclIds")]
        public Output<ImmutableArray<string>> AclIds { get; private set; } = null!;

        [Output("aclStatus")]
        public Output<string?> AclStatus { get; private set; } = null!;

        [Output("aclType")]
        public Output<string?> AclType { get; private set; } = null!;

        [Output("backendPort")]
        public Output<int?> BackendPort { get; private set; } = null!;

        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        [Output("caCertificateId")]
        public Output<string?> CaCertificateId { get; private set; } = null!;

        [Output("cookie")]
        public Output<string?> Cookie { get; private set; } = null!;

        [Output("cookieTimeout")]
        public Output<int?> CookieTimeout { get; private set; } = null!;

        [Output("deleteProtectionValidation")]
        public Output<bool?> DeleteProtectionValidation { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("enableHttp2")]
        public Output<string?> EnableHttp2 { get; private set; } = null!;

        [Output("establishedTimeout")]
        public Output<int?> EstablishedTimeout { get; private set; } = null!;

        [Output("forwardPort")]
        public Output<int?> ForwardPort { get; private set; } = null!;

        [Output("frontendPort")]
        public Output<int> FrontendPort { get; private set; } = null!;

        [Output("gzip")]
        public Output<bool?> Gzip { get; private set; } = null!;

        [Output("healthCheck")]
        public Output<string?> HealthCheck { get; private set; } = null!;

        [Output("healthCheckConnectPort")]
        public Output<int> HealthCheckConnectPort { get; private set; } = null!;

        [Output("healthCheckDomain")]
        public Output<string?> HealthCheckDomain { get; private set; } = null!;

        [Output("healthCheckHttpCode")]
        public Output<string> HealthCheckHttpCode { get; private set; } = null!;

        [Output("healthCheckInterval")]
        public Output<int?> HealthCheckInterval { get; private set; } = null!;

        [Output("healthCheckMethod")]
        public Output<string> HealthCheckMethod { get; private set; } = null!;

        [Output("healthCheckTimeout")]
        public Output<int?> HealthCheckTimeout { get; private set; } = null!;

        [Output("healthCheckType")]
        public Output<string?> HealthCheckType { get; private set; } = null!;

        [Output("healthCheckUri")]
        public Output<string?> HealthCheckUri { get; private set; } = null!;

        [Output("healthyThreshold")]
        public Output<int?> HealthyThreshold { get; private set; } = null!;

        [Output("idleTimeout")]
        public Output<int?> IdleTimeout { get; private set; } = null!;

        [Output("listenerForward")]
        public Output<string> ListenerForward { get; private set; } = null!;

        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        [Output("masterSlaveServerGroupId")]
        public Output<string?> MasterSlaveServerGroupId { get; private set; } = null!;

        [Output("persistenceTimeout")]
        public Output<int?> PersistenceTimeout { get; private set; } = null!;

        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        [Output("proxyProtocolV2Enabled")]
        public Output<bool> ProxyProtocolV2Enabled { get; private set; } = null!;

        [Output("requestTimeout")]
        public Output<int?> RequestTimeout { get; private set; } = null!;

        [Output("scheduler")]
        public Output<string?> Scheduler { get; private set; } = null!;

        [Output("serverCertificateId")]
        public Output<string> ServerCertificateId { get; private set; } = null!;

        [Output("serverGroupId")]
        public Output<string?> ServerGroupId { get; private set; } = null!;

        [Output("sslCertificateId")]
        public Output<string> SslCertificateId { get; private set; } = null!;

        [Output("stickySession")]
        public Output<string?> StickySession { get; private set; } = null!;

        [Output("stickySessionType")]
        public Output<string?> StickySessionType { get; private set; } = null!;

        [Output("tlsCipherPolicy")]
        public Output<string?> TlsCipherPolicy { get; private set; } = null!;

        [Output("unhealthyThreshold")]
        public Output<int?> UnhealthyThreshold { get; private set; } = null!;

        /// <summary>
        /// Whether to set additional HTTP Header field "X-Forwarded-For".
        /// </summary>
        [Output("xForwardedFor")]
        public Output<Outputs.ListenerXForwardedFor> XForwardedFor { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("alicloud:slb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:slb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        [Input("aclIds")]
        private InputList<string>? _aclIds;
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        [Input("backendPort")]
        public Input<int>? BackendPort { get; set; }

        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        [Input("cookieTimeout")]
        public Input<int>? CookieTimeout { get; set; }

        [Input("deleteProtectionValidation")]
        public Input<bool>? DeleteProtectionValidation { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        [Input("forwardPort")]
        public Input<int>? ForwardPort { get; set; }

        [Input("frontendPort", required: true)]
        public Input<int> FrontendPort { get; set; } = null!;

        [Input("gzip")]
        public Input<bool>? Gzip { get; set; }

        [Input("healthCheck")]
        public Input<string>? HealthCheck { get; set; }

        [Input("healthCheckConnectPort")]
        public Input<int>? HealthCheckConnectPort { get; set; }

        [Input("healthCheckDomain")]
        public Input<string>? HealthCheckDomain { get; set; }

        [Input("healthCheckHttpCode")]
        public Input<string>? HealthCheckHttpCode { get; set; }

        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        [Input("healthCheckMethod")]
        public Input<string>? HealthCheckMethod { get; set; }

        [Input("healthCheckTimeout")]
        public Input<int>? HealthCheckTimeout { get; set; }

        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        [Input("healthCheckUri")]
        public Input<string>? HealthCheckUri { get; set; }

        [Input("healthyThreshold")]
        public Input<int>? HealthyThreshold { get; set; }

        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        [Input("listenerForward")]
        public Input<string>? ListenerForward { get; set; }

        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        [Input("masterSlaveServerGroupId")]
        public Input<string>? MasterSlaveServerGroupId { get; set; }

        [Input("persistenceTimeout")]
        public Input<int>? PersistenceTimeout { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("proxyProtocolV2Enabled")]
        public Input<bool>? ProxyProtocolV2Enabled { get; set; }

        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        [Input("serverCertificateId")]
        public Input<string>? ServerCertificateId { get; set; }

        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        [Input("sslCertificateId")]
        public Input<string>? SslCertificateId { get; set; }

        [Input("stickySession")]
        public Input<string>? StickySession { get; set; }

        [Input("stickySessionType")]
        public Input<string>? StickySessionType { get; set; }

        [Input("tlsCipherPolicy")]
        public Input<string>? TlsCipherPolicy { get; set; }

        [Input("unhealthyThreshold")]
        public Input<int>? UnhealthyThreshold { get; set; }

        /// <summary>
        /// Whether to set additional HTTP Header field "X-Forwarded-For".
        /// </summary>
        [Input("xForwardedFor")]
        public Input<Inputs.ListenerXForwardedForArgs>? XForwardedFor { get; set; }

        public ListenerArgs()
        {
        }
        public static new ListenerArgs Empty => new ListenerArgs();
    }

    public sealed class ListenerState : global::Pulumi.ResourceArgs
    {
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        [Input("aclIds")]
        private InputList<string>? _aclIds;
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        [Input("backendPort")]
        public Input<int>? BackendPort { get; set; }

        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        [Input("cookieTimeout")]
        public Input<int>? CookieTimeout { get; set; }

        [Input("deleteProtectionValidation")]
        public Input<bool>? DeleteProtectionValidation { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        [Input("forwardPort")]
        public Input<int>? ForwardPort { get; set; }

        [Input("frontendPort")]
        public Input<int>? FrontendPort { get; set; }

        [Input("gzip")]
        public Input<bool>? Gzip { get; set; }

        [Input("healthCheck")]
        public Input<string>? HealthCheck { get; set; }

        [Input("healthCheckConnectPort")]
        public Input<int>? HealthCheckConnectPort { get; set; }

        [Input("healthCheckDomain")]
        public Input<string>? HealthCheckDomain { get; set; }

        [Input("healthCheckHttpCode")]
        public Input<string>? HealthCheckHttpCode { get; set; }

        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        [Input("healthCheckMethod")]
        public Input<string>? HealthCheckMethod { get; set; }

        [Input("healthCheckTimeout")]
        public Input<int>? HealthCheckTimeout { get; set; }

        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        [Input("healthCheckUri")]
        public Input<string>? HealthCheckUri { get; set; }

        [Input("healthyThreshold")]
        public Input<int>? HealthyThreshold { get; set; }

        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        [Input("listenerForward")]
        public Input<string>? ListenerForward { get; set; }

        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        [Input("masterSlaveServerGroupId")]
        public Input<string>? MasterSlaveServerGroupId { get; set; }

        [Input("persistenceTimeout")]
        public Input<int>? PersistenceTimeout { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("proxyProtocolV2Enabled")]
        public Input<bool>? ProxyProtocolV2Enabled { get; set; }

        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        [Input("serverCertificateId")]
        public Input<string>? ServerCertificateId { get; set; }

        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        [Input("sslCertificateId")]
        public Input<string>? SslCertificateId { get; set; }

        [Input("stickySession")]
        public Input<string>? StickySession { get; set; }

        [Input("stickySessionType")]
        public Input<string>? StickySessionType { get; set; }

        [Input("tlsCipherPolicy")]
        public Input<string>? TlsCipherPolicy { get; set; }

        [Input("unhealthyThreshold")]
        public Input<int>? UnhealthyThreshold { get; set; }

        /// <summary>
        /// Whether to set additional HTTP Header field "X-Forwarded-For".
        /// </summary>
        [Input("xForwardedFor")]
        public Input<Inputs.ListenerXForwardedForGetArgs>? XForwardedFor { get; set; }

        public ListenerState()
        {
        }
        public static new ListenerState Empty => new ListenerState();
    }
}
