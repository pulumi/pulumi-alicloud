// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS.Outputs
{

    [OutputType]
    public sealed class GetKubernetesNodePoolsNodepoolKubeletConfigurationResult
    {
        /// <summary>
        /// Allowed sysctl mode whitelist.
        /// </summary>
        public readonly ImmutableArray<string> AllowedUnsafeSysctls;
        /// <summary>
        /// The list of IP addresses of the cluster DNS servers.
        /// </summary>
        public readonly ImmutableArray<string> ClusterDns;
        /// <summary>
        /// The maximum number of log files that can exist in each container.
        /// </summary>
        public readonly string ContainerLogMaxFiles;
        /// <summary>
        /// The maximum size that can be reached before a log file is rotated.
        /// </summary>
        public readonly string ContainerLogMaxSize;
        /// <summary>
        /// Specifies the maximum number of concurrent workers required to perform log rotation operations.
        /// </summary>
        public readonly string ContainerLogMaxWorkers;
        /// <summary>
        /// Specifies the duration for which container logs are monitored for log rotation.
        /// </summary>
        public readonly string ContainerLogMonitorInterval;
        /// <summary>
        /// CPU CFS quota constraint switch.
        /// </summary>
        public readonly string CpuCfsQuota;
        /// <summary>
        /// CPU CFS quota period value.
        /// </summary>
        public readonly string CpuCfsQuotaPeriod;
        /// <summary>
        /// Same as cpuManagerPolicy. The name of the policy to use. Requires the CPUManager feature gate to be enabled. Valid value is `None` or `Static`.
        /// </summary>
        public readonly string CpuManagerPolicy;
        /// <summary>
        /// Same as eventBurst. The maximum size of a burst of event creations, temporarily allows event creations to burst to this number, while still not exceeding `EventRecordQps`. It is only used when `EventRecordQps` is greater than 0. Valid value is `[0-100]`.
        /// </summary>
        public readonly string EventBurst;
        /// <summary>
        /// Same as eventRecordQPS. The maximum event creations per second. If 0, there is no limit enforced. Valid value is `[0-50]`.
        /// </summary>
        public readonly string EventRecordQps;
        /// <summary>
        /// Same as evictionHard. The map of signal names to quantities that defines hard eviction thresholds. For example: `{"memory.available" = "300Mi"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EvictionHard;
        /// <summary>
        /// Same as evictionSoft. The map of signal names to quantities that defines soft eviction thresholds. For example: `{"memory.available" = "300Mi"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EvictionSoft;
        /// <summary>
        /// Same as evictionSoftGracePeriod. The map of signal names to quantities that defines grace periods for each soft eviction signal. For example: `{"memory.available" = "30s"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EvictionSoftGracePeriod;
        /// <summary>
        /// Feature switch to enable configuration of experimental features.
        /// </summary>
        public readonly ImmutableDictionary<string, string> FeatureGates;
        /// <summary>
        /// If the image usage exceeds this threshold, image garbage collection will continue.
        /// </summary>
        public readonly string ImageGcHighThresholdPercent;
        /// <summary>
        /// Image garbage collection is not performed when the image usage is below this threshold.
        /// </summary>
        public readonly string ImageGcLowThresholdPercent;
        /// <summary>
        /// Same as kubeAPIBurst. The burst to allow while talking with kubernetes api-server. Valid value is `[0-100]`.
        /// </summary>
        public readonly string KubeApiBurst;
        /// <summary>
        /// Same as kubeAPIQPS. The QPS to use while talking with kubernetes api-server. Valid value is `[0-50]`.
        /// </summary>
        public readonly string KubeApiQps;
        /// <summary>
        /// Same as kubeReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for kubernetes system components. Currently, cpu, memory and local storage for root file system are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
        /// </summary>
        public readonly ImmutableDictionary<string, string> KubeReserved;
        /// <summary>
        /// The maximum number of running pods.
        /// </summary>
        public readonly string MaxPods;
        /// <summary>
        /// The policy to be used by the memory manager.
        /// </summary>
        public readonly string MemoryManagerPolicy;
        /// <summary>
        /// The maximum number of PIDs that can be used in a Pod.
        /// </summary>
        public readonly string PodPidsLimit;
        /// <summary>
        /// Read-only port number.
        /// </summary>
        public readonly string ReadOnlyPort;
        /// <summary>
        /// Same as registryBurst. The maximum size of burst pulls, temporarily allows pulls to burst to this number, while still not exceeding `RegistryPullQps`. Only used if `RegistryPullQps` is greater than 0. Valid value is `[0-100]`.
        /// </summary>
        public readonly string RegistryBurst;
        /// <summary>
        /// Same as registryPullQPS. The limit of registry pulls per second. Setting it to `0` means no limit. Valid value is `[0-50]`.
        /// </summary>
        public readonly string RegistryPullQps;
        /// <summary>
        /// Reserve memory for NUMA nodes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesNodePoolsNodepoolKubeletConfigurationReservedMemoryResult> ReservedMemories;
        /// <summary>
        /// Same as serializeImagePulls. When enabled, it tells the Kubelet to pull images one at a time. We recommend not changing the default value on nodes that run docker daemon with version &lt; 1.9 or an Aufs storage backend. Valid value is `True` or `False`.
        /// </summary>
        public readonly string SerializeImagePulls;
        /// <summary>
        /// Same as systemReserved. The set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs that describe resources reserved for non-kubernetes components. Currently, only cpu and memory are supported. See [compute resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details.
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemReserved;
        /// <summary>
        /// Name of the Topology Manager policy used.
        /// </summary>
        public readonly string TopologyManagerPolicy;
        /// <summary>
        /// OpenTelemetry tracks the configuration information for client settings versioning.
        /// </summary>
        public readonly Outputs.GetKubernetesNodePoolsNodepoolKubeletConfigurationTracingResult Tracing;

        [OutputConstructor]
        private GetKubernetesNodePoolsNodepoolKubeletConfigurationResult(
            ImmutableArray<string> allowedUnsafeSysctls,

            ImmutableArray<string> clusterDns,

            string containerLogMaxFiles,

            string containerLogMaxSize,

            string containerLogMaxWorkers,

            string containerLogMonitorInterval,

            string cpuCfsQuota,

            string cpuCfsQuotaPeriod,

            string cpuManagerPolicy,

            string eventBurst,

            string eventRecordQps,

            ImmutableDictionary<string, string> evictionHard,

            ImmutableDictionary<string, string> evictionSoft,

            ImmutableDictionary<string, string> evictionSoftGracePeriod,

            ImmutableDictionary<string, string> featureGates,

            string imageGcHighThresholdPercent,

            string imageGcLowThresholdPercent,

            string kubeApiBurst,

            string kubeApiQps,

            ImmutableDictionary<string, string> kubeReserved,

            string maxPods,

            string memoryManagerPolicy,

            string podPidsLimit,

            string readOnlyPort,

            string registryBurst,

            string registryPullQps,

            ImmutableArray<Outputs.GetKubernetesNodePoolsNodepoolKubeletConfigurationReservedMemoryResult> reservedMemories,

            string serializeImagePulls,

            ImmutableDictionary<string, string> systemReserved,

            string topologyManagerPolicy,

            Outputs.GetKubernetesNodePoolsNodepoolKubeletConfigurationTracingResult tracing)
        {
            AllowedUnsafeSysctls = allowedUnsafeSysctls;
            ClusterDns = clusterDns;
            ContainerLogMaxFiles = containerLogMaxFiles;
            ContainerLogMaxSize = containerLogMaxSize;
            ContainerLogMaxWorkers = containerLogMaxWorkers;
            ContainerLogMonitorInterval = containerLogMonitorInterval;
            CpuCfsQuota = cpuCfsQuota;
            CpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            CpuManagerPolicy = cpuManagerPolicy;
            EventBurst = eventBurst;
            EventRecordQps = eventRecordQps;
            EvictionHard = evictionHard;
            EvictionSoft = evictionSoft;
            EvictionSoftGracePeriod = evictionSoftGracePeriod;
            FeatureGates = featureGates;
            ImageGcHighThresholdPercent = imageGcHighThresholdPercent;
            ImageGcLowThresholdPercent = imageGcLowThresholdPercent;
            KubeApiBurst = kubeApiBurst;
            KubeApiQps = kubeApiQps;
            KubeReserved = kubeReserved;
            MaxPods = maxPods;
            MemoryManagerPolicy = memoryManagerPolicy;
            PodPidsLimit = podPidsLimit;
            ReadOnlyPort = readOnlyPort;
            RegistryBurst = registryBurst;
            RegistryPullQps = registryPullQps;
            ReservedMemories = reservedMemories;
            SerializeImagePulls = serializeImagePulls;
            SystemReserved = systemReserved;
            TopologyManagerPolicy = topologyManagerPolicy;
            Tracing = tracing;
        }
    }
}
