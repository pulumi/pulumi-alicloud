// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS.Inputs
{

    public sealed class ManagedKubernetesAddonArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this parameter is left empty, no configurations are required. For more config information, see cs_kubernetes_addon_metadata.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// It specifies whether to disable automatic installation. 
        /// 
        /// It is a new field since 1.75.0. You can specific network plugin, log component,ingress component and so on.
        /// 
        /// You can get more information about addons on ACK web console. When you create a ACK cluster. You can get openapi-spec before creating the cluster on submission page.
        /// 
        /// `logtail-ds` - You can specify `IngressDashboardEnabled` and `sls_project_name` in config. If you switch on `IngressDashboardEnabled` and `sls_project_name`,then logtail-ds would use `sls_project_name` as default log store.
        /// 
        /// `nginx-ingress-controller` - You can specific `IngressSlbNetworkType` in config. Options: internet|intranet.
        /// 
        /// The `main.tf`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var k8s = new AliCloud.CS.ManagedKubernetes("k8s", new()
        ///     {
        ///         Addons = .Select(entry =&gt; 
        ///         {
        ///             return new AliCloud.CS.Inputs.ManagedKubernetesAddonArgs
        ///             {
        ///                 Name = Std.Lookup.Invoke(new()
        ///                 {
        ///                     Map = entry.Value,
        ///                     Key = "name",
        ///                     Default = clusterAddons,
        ///                 }).Apply(invoke =&gt; invoke.Result),
        ///                 Config = Std.Lookup.Invoke(new()
        ///                 {
        ///                     Map = entry.Value,
        ///                     Key = "config",
        ///                     Default = clusterAddons,
        ///                 }).Apply(invoke =&gt; invoke.Result),
        ///                 Version = Std.Lookup.Invoke(new()
        ///                 {
        ///                     Map = entry.Value,
        ///                     Key = "version",
        ///                     Default = clusterAddons,
        ///                 }).Apply(invoke =&gt; invoke.Result),
        ///                 Disabled = Std.Lookup.Invoke(new()
        ///                 {
        ///                     Map = entry.Value,
        ///                     Key = "disabled",
        ///                     Default = clusterAddons,
        ///                 }).Apply(invoke =&gt; invoke.Result),
        ///             };
        ///         }).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The `varibales.tf`:
        /// 
        /// ```
        /// # Network-flannel is required, Conflicts With Network-terway
        /// variable "cluster_addons" {
        /// description = "Addon components in kubernetes cluster"
        /// 
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "flannel",
        /// "config"   = "",
        /// }
        /// ]
        /// }
        /// 
        /// # Network-terway is required, Conflicts With Network-flannel
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "terway-eniip",
        /// "config"   = "",
        /// }
        /// ]
        /// }
        /// 
        /// # Storage-csi is required, Conflicts With Storage-flexvolume
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "csi-plugin",
        /// "config"   = "",
        /// },
        /// {
        /// "name"     = "csi-provisioner",
        /// "config"   = "",
        /// }
        /// ]
        /// }
        /// 
        /// # Storage-flexvolume is required, Conflicts With Storage-csi
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// default = [
        /// {
        /// "name"     = "flexvolume",
        /// "config"   = "",
        /// }
        /// ]
        /// }
        /// 
        /// # Log, Optional
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// default = [
        /// {
        /// "name"     = "logtail-ds",
        /// "config"   = "{\"IngressDashboardEnabled\":\"true\",\"sls_project_name\":\"your-sls-project-name\"}",
        /// }
        /// ]
        /// }
        /// 
        /// # Ingress,Optional
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "nginx-ingress-controller",
        /// "config"   = "{\"IngressSlbNetworkType\":\"internet\"}",
        /// }
        /// ]
        /// }
        /// 
        /// # Ingress-Disable, Optional
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// disabled  = bool
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "nginx-ingress-controller",
        /// "config"   = "",
        /// "disabled": true,
        /// }
        /// ]
        /// 
        /// # Prometheus, Optional.
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// 
        /// default = [
        /// {
        /// "name"     = "arms-prometheus",
        /// "config"   = "",
        /// }
        /// ]
        /// }
        /// 
        /// # Event Center, Optional.
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// default = [
        /// {
        /// "name"     = "ack-node-problem-detector",
        /// "config"   = "{\"sls_project_name\":\"\"}",
        /// }
        /// ]
        /// }
        /// # ACK default alert, Optional.
        /// variable "cluster_addons" {
        /// type = list(object({
        /// name      = string
        /// config    = string
        /// }))
        /// default = [
        /// {
        /// "name"     = "alicloud-monitor-controller",
        /// "config"   = "{\"group_contact_ids\":\"[159]\"}",
        /// }
        /// ]
        /// }
        /// ```
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// This parameter specifies the name of the component.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// It specifies the version of the component.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ManagedKubernetesAddonArgs()
        {
        }
        public static new ManagedKubernetesAddonArgs Empty => new ManagedKubernetesAddonArgs();
    }
}
