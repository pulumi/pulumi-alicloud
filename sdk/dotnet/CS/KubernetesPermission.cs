// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS
{
    /// <summary>
    /// This resource will help you implement RBAC authorization for the kubernetes cluster, see [What is kubernetes permissions](https://www.alibabacloud.com/help/en/ack/ack-managed-and-ack-dedicated/developer-reference/api-grantpermissions).
    /// 
    /// &gt; **NOTE:** Please make sure that the target RAM user has been granted a RAM policy with at least read-only permission of the target cluster in the RAM console. Otherwise, the `ErrorRamPolicyConfig` error will be returned.
    /// For more information about how to authorize a RAM user by attaching RAM policies, see [Create a custom RAM policy](https://www.alibabacloud.com/help/doc-detail/86485.htm).
    /// 
    /// &gt; **NOTE:** If you call this operation as a RAM user, make sure that this RAM user has the permissions to grant other RAM users the permissions to manage ACK clusters. Otherwise, the `StatusForbidden` or `ForbiddenGrantPermissions` errors will be returned. For more information, see [Use a RAM user to grant RBAC permissions to other RAM users](https://www.alibabacloud.com/help/faq-detail/119035.htm).
    /// 
    /// &gt; **NOTE:** This operation overwrites the permissions that have been granted to the specified RAM user. When you call this operation, make sure that the required permissions are included.
    /// 
    /// &gt; **NOTE:** Available since v1.122.0.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Max = 99999,
    ///         Min = 10000,
    ///     });
    /// 
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     // The cidr block used to launch a new vpc when 'vpc_id' is not specified.
    ///     var vpcCidr = config.Get("vpcCidr") ?? "10.0.0.0/8";
    ///     // List of cidr blocks used to create several new vswitches when 'vswitch_ids' is not specified.
    ///     var vswitchCidrs = config.GetObject&lt;string[]&gt;("vswitchCidrs") ?? new[]
    ///     {
    ///         "10.1.0.0/16",
    ///         "10.2.0.0/16",
    ///     };
    ///     // The kubernetes service cidr block. It cannot be equals to vpc's or vswitch's or service's and cannot be in them.
    ///     var podCidr = config.Get("podCidr") ?? "172.16.0.0/16";
    ///     // The kubernetes service cidr block. It cannot be equals to vpc's or vswitch's or pod's and cannot be in them.
    ///     var serviceCidr = config.Get("serviceCidr") ?? "192.168.0.0/16";
    ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
    /// 
    ///     var @default = AliCloud.CS.GetKubernetesVersion.Invoke(new()
    ///     {
    ///         ClusterType = "ManagedKubernetes",
    ///     });
    /// 
    ///     var vpc = new AliCloud.Vpc.Network("vpc", new()
    ///     {
    ///         CidrBlock = vpcCidr,
    ///     });
    /// 
    ///     // According to the vswitch cidr blocks to launch several vswitches
    ///     var defaultSwitch = new List&lt;AliCloud.Vpc.Switch&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; vswitchCidrs.Length; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         defaultSwitch.Add(new AliCloud.Vpc.Switch($"default-{range.Value}", new()
    ///         {
    ///             VpcId = vpc.Id,
    ///             CidrBlock = vswitchCidrs[range.Value],
    ///             ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones)[range.Value].ZoneId,
    ///         }));
    ///     }
    ///     // Create a new RAM cluster.
    ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
    ///     {
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///         ClusterSpec = "ack.pro.small",
    ///         Version = @default.Apply(@default =&gt; @default.Apply(getKubernetesVersionResult =&gt; getKubernetesVersionResult.Metadatas[0]?.Version)),
    ///         WorkerVswitchIds = Std.Join.Invoke(new()
    ///         {
    ///             Separator = ",",
    ///             Input = defaultSwitch.Select(__item =&gt; __item.Id).ToList(),
    ///         }).Apply(invoke =&gt; Std.Split.Invoke(new()
    ///         {
    ///             Separator = ",",
    ///             Text = invoke.Result,
    ///         })).Apply(invoke =&gt; invoke.Result),
    ///         NewNatGateway = false,
    ///         PodCidr = podCidr,
    ///         ServiceCidr = serviceCidr,
    ///         SlbInternetEnabled = false,
    ///     });
    /// 
    ///     // Create a new RAM user.
    ///     var user = new AliCloud.Ram.User("user", new()
    ///     {
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///     });
    /// 
    ///     // Create a cluster permission for user.
    ///     var defaultKubernetesPermission = new AliCloud.CS.KubernetesPermission("default", new()
    ///     {
    ///         Uid = user.Id,
    ///         Permissions = new[]
    ///         {
    ///             new AliCloud.CS.Inputs.KubernetesPermissionPermissionArgs
    ///             {
    ///                 Cluster = defaultManagedKubernetes.Id,
    ///                 RoleType = "cluster",
    ///                 RoleName = "admin",
    ///                 Namespace = "",
    ///                 IsCustom = false,
    ///                 IsRamRole = false,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var attach = new AliCloud.CS.KubernetesPermission("attach", new()
    ///     {
    ///         Uid = user.Id,
    ///         Permissions = new[]
    ///         {
    ///             new AliCloud.CS.Inputs.KubernetesPermissionPermissionArgs
    ///             {
    ///                 Cluster = defaultManagedKubernetes.Id,
    ///                 RoleType = "namespace",
    ///                 RoleName = "cs:dev",
    ///                 Namespace = "default",
    ///                 IsCustom = true,
    ///                 IsRamRole = false,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cs/kubernetesPermission:KubernetesPermission")]
    public partial class KubernetesPermission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of user permission. See `Permissions` below.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.KubernetesPermissionPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `IsRamRole` to `True` during authorization.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesPermission(string name, KubernetesPermissionArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cs/kubernetesPermission:KubernetesPermission", name, args ?? new KubernetesPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesPermission(string name, Input<string> id, KubernetesPermissionState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cs/kubernetesPermission:KubernetesPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesPermission Get(string name, Input<string> id, KubernetesPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesPermission(name, id, state, options);
        }
    }

    public sealed class KubernetesPermissionArgs : global::Pulumi.ResourceArgs
    {
        [Input("permissions")]
        private InputList<Inputs.KubernetesPermissionPermissionArgs>? _permissions;

        /// <summary>
        /// A list of user permission. See `Permissions` below.
        /// </summary>
        public InputList<Inputs.KubernetesPermissionPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.KubernetesPermissionPermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `IsRamRole` to `True` during authorization.
        /// </summary>
        [Input("uid", required: true)]
        public Input<string> Uid { get; set; } = null!;

        public KubernetesPermissionArgs()
        {
        }
        public static new KubernetesPermissionArgs Empty => new KubernetesPermissionArgs();
    }

    public sealed class KubernetesPermissionState : global::Pulumi.ResourceArgs
    {
        [Input("permissions")]
        private InputList<Inputs.KubernetesPermissionPermissionGetArgs>? _permissions;

        /// <summary>
        /// A list of user permission. See `Permissions` below.
        /// </summary>
        public InputList<Inputs.KubernetesPermissionPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.KubernetesPermissionPermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set `IsRamRole` to `True` during authorization.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public KubernetesPermissionState()
        {
        }
        public static new KubernetesPermissionState Empty => new KubernetesPermissionState();
    }
}
