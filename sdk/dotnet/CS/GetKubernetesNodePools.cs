// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS
{
    public static class GetKubernetesNodePools
    {
        /// <summary>
        /// This data source provides Ack Nodepool available to the user.[What is Nodepool](https://next.api.alibabacloud.com/document/CS/2015-12-15/CreateClusterNodePool)
        /// 
        /// &gt; **NOTE:** Available since v1.246.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var cloudEfficiency = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CpuCoreCount = 4,
        ///         MemorySize = 8,
        ///         KubernetesNodeRole = "Worker",
        ///         SystemDiskCategory = "cloud_efficiency",
        ///     });
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
        ///     {
        ///         VswitchName = name,
        ///         CidrBlock = "10.4.0.0/24",
        ///         VpcId = defaultNetwork.Id,
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         NamePrefix = name,
        ///         ClusterSpec = "ack.pro.small",
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         NewNatGateway = true,
        ///         PodCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "10.0.0.0/8",
        ///             Newbits = 8,
        ///             Netnum = 36,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         ServiceCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "172.16.0.0/16",
        ///             Newbits = 4,
        ///             Netnum = 7,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         SlbInternetEnabled = true,
        ///         EnableRrsa = true,
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = name,
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         NodePoolName = "spot_auto_scaling",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         ScalingConfig = new AliCloud.CS.Inputs.NodePoolScalingConfigArgs
        ///         {
        ///             MinSize = 1,
        ///             MaxSize = 10,
        ///             Type = "spot",
        ///         },
        ///         SpotStrategy = "SpotWithPriceLimit",
        ///         SpotPriceLimits = new[]
        ///         {
        ///             new AliCloud.CS.Inputs.NodePoolSpotPriceLimitArgs
        ///             {
        ///                 InstanceType = cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///                 PriceLimit = "0.70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.CS.GetKubernetesNodePools.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultNodePool.NodePoolId,
        ///         },
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudCsKubernetesNodePoolExampleId"] = @default.Apply(@default =&gt; @default.Apply(getKubernetesNodePoolsResult =&gt; getKubernetesNodePoolsResult.Nodepools[0]?.NodePoolId)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetKubernetesNodePoolsResult> InvokeAsync(GetKubernetesNodePoolsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesNodePoolsResult>("alicloud:cs/getKubernetesNodePools:getKubernetesNodePools", args ?? new GetKubernetesNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Ack Nodepool available to the user.[What is Nodepool](https://next.api.alibabacloud.com/document/CS/2015-12-15/CreateClusterNodePool)
        /// 
        /// &gt; **NOTE:** Available since v1.246.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var cloudEfficiency = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CpuCoreCount = 4,
        ///         MemorySize = 8,
        ///         KubernetesNodeRole = "Worker",
        ///         SystemDiskCategory = "cloud_efficiency",
        ///     });
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
        ///     {
        ///         VswitchName = name,
        ///         CidrBlock = "10.4.0.0/24",
        ///         VpcId = defaultNetwork.Id,
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         NamePrefix = name,
        ///         ClusterSpec = "ack.pro.small",
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         NewNatGateway = true,
        ///         PodCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "10.0.0.0/8",
        ///             Newbits = 8,
        ///             Netnum = 36,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         ServiceCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "172.16.0.0/16",
        ///             Newbits = 4,
        ///             Netnum = 7,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         SlbInternetEnabled = true,
        ///         EnableRrsa = true,
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = name,
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         NodePoolName = "spot_auto_scaling",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         ScalingConfig = new AliCloud.CS.Inputs.NodePoolScalingConfigArgs
        ///         {
        ///             MinSize = 1,
        ///             MaxSize = 10,
        ///             Type = "spot",
        ///         },
        ///         SpotStrategy = "SpotWithPriceLimit",
        ///         SpotPriceLimits = new[]
        ///         {
        ///             new AliCloud.CS.Inputs.NodePoolSpotPriceLimitArgs
        ///             {
        ///                 InstanceType = cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///                 PriceLimit = "0.70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.CS.GetKubernetesNodePools.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultNodePool.NodePoolId,
        ///         },
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudCsKubernetesNodePoolExampleId"] = @default.Apply(@default =&gt; @default.Apply(getKubernetesNodePoolsResult =&gt; getKubernetesNodePoolsResult.Nodepools[0]?.NodePoolId)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetKubernetesNodePoolsResult> Invoke(GetKubernetesNodePoolsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesNodePoolsResult>("alicloud:cs/getKubernetesNodePools:getKubernetesNodePools", args ?? new GetKubernetesNodePoolsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Ack Nodepool available to the user.[What is Nodepool](https://next.api.alibabacloud.com/document/CS/2015-12-15/CreateClusterNodePool)
        /// 
        /// &gt; **NOTE:** Available since v1.246.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
        /// 
        ///     var cloudEfficiency = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///         CpuCoreCount = 4,
        ///         MemorySize = 8,
        ///         KubernetesNodeRole = "Worker",
        ///         SystemDiskCategory = "cloud_efficiency",
        ///     });
        /// 
        ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "10.4.0.0/16",
        ///     });
        /// 
        ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
        ///     {
        ///         VswitchName = name,
        ///         CidrBlock = "10.4.0.0/24",
        ///         VpcId = defaultNetwork.Id,
        ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
        ///     });
        /// 
        ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
        ///     {
        ///         NamePrefix = name,
        ///         ClusterSpec = "ack.pro.small",
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         NewNatGateway = true,
        ///         PodCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "10.0.0.0/8",
        ///             Newbits = 8,
        ///             Netnum = 36,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         ServiceCidr = Std.Cidrsubnet.Invoke(new()
        ///         {
        ///             Input = "172.16.0.0/16",
        ///             Newbits = 4,
        ///             Netnum = 7,
        ///         }).Apply(invoke =&gt; invoke.Result),
        ///         SlbInternetEnabled = true,
        ///         EnableRrsa = true,
        ///     });
        /// 
        ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
        ///     {
        ///         KeyPairName = name,
        ///     });
        /// 
        ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
        ///     {
        ///         NodePoolName = "spot_auto_scaling",
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///         VswitchIds = new[]
        ///         {
        ///             defaultSwitch.Id,
        ///         },
        ///         InstanceTypes = new[]
        ///         {
        ///             cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///         },
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         SystemDiskSize = 40,
        ///         KeyName = defaultKeyPair.KeyPairName,
        ///         ScalingConfig = new AliCloud.CS.Inputs.NodePoolScalingConfigArgs
        ///         {
        ///             MinSize = 1,
        ///             MaxSize = 10,
        ///             Type = "spot",
        ///         },
        ///         SpotStrategy = "SpotWithPriceLimit",
        ///         SpotPriceLimits = new[]
        ///         {
        ///             new AliCloud.CS.Inputs.NodePoolSpotPriceLimitArgs
        ///             {
        ///                 InstanceType = cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///                 PriceLimit = "0.70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = AliCloud.CS.GetKubernetesNodePools.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultNodePool.NodePoolId,
        ///         },
        ///         ClusterId = defaultManagedKubernetes.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudCsKubernetesNodePoolExampleId"] = @default.Apply(@default =&gt; @default.Apply(getKubernetesNodePoolsResult =&gt; getKubernetesNodePoolsResult.Nodepools[0]?.NodePoolId)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetKubernetesNodePoolsResult> Invoke(GetKubernetesNodePoolsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesNodePoolsResult>("alicloud:cs/getKubernetesNodePools:getKubernetesNodePools", args ?? new GetKubernetesNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kubernetes cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Nodepool IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of node pool.
        /// </summary>
        [Input("nodePoolName")]
        public string? NodePoolName { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetKubernetesNodePoolsArgs()
        {
        }
        public static new GetKubernetesNodePoolsArgs Empty => new GetKubernetesNodePoolsArgs();
    }

    public sealed class GetKubernetesNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kubernetes cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Nodepool IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of node pool.
        /// </summary>
        [Input("nodePoolName")]
        public Input<string>? NodePoolName { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetKubernetesNodePoolsInvokeArgs()
        {
        }
        public static new GetKubernetesNodePoolsInvokeArgs Empty => new GetKubernetesNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesNodePoolsResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Nodepool IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of node pool.
        /// </summary>
        public readonly string? NodePoolName;
        /// <summary>
        /// A list of Nodepool Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesNodePoolsNodepoolResult> Nodepools;
        public readonly string? OutputFile;

        [OutputConstructor]
        private GetKubernetesNodePoolsResult(
            string clusterId,

            string id,

            ImmutableArray<string> ids,

            string? nodePoolName,

            ImmutableArray<Outputs.GetKubernetesNodePoolsNodepoolResult> nodepools,

            string? outputFile)
        {
            ClusterId = clusterId;
            Id = id;
            Ids = ids;
            NodePoolName = nodePoolName;
            Nodepools = nodepools;
            OutputFile = outputFile;
        }
    }
}
