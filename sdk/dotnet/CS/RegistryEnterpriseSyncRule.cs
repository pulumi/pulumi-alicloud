// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS
{
    /// <summary>
    /// Provides a Container Registry Sync Rule resource.
    /// 
    /// For information about Container Registry Sync Rule and how to use it, see [What is Sync Rule](https://www.alibabacloud.com/help/en/acr/developer-reference/api-cr-2018-12-01-createreposyncrule)
    /// 
    /// &gt; **NOTE:** Available since v1.90.0.
    /// 
    /// &gt; **NOTE:** You need to set your registry password in Container Registry console before use this resource.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetRegions.Invoke(new()
    ///     {
    ///         Current = true,
    ///     });
    /// 
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var source = new AliCloud.CR.RegistryEnterpriseInstance("source", new()
    ///     {
    ///         PaymentType = "Subscription",
    ///         Period = 1,
    ///         RenewPeriod = 0,
    ///         RenewalStatus = "ManualRenewal",
    ///         InstanceType = "Advanced",
    ///         InstanceName = $"{name}-source-{defaultInteger.Result}",
    ///     });
    /// 
    ///     var target = new AliCloud.CR.RegistryEnterpriseInstance("target", new()
    ///     {
    ///         PaymentType = "Subscription",
    ///         Period = 1,
    ///         RenewPeriod = 0,
    ///         RenewalStatus = "ManualRenewal",
    ///         InstanceType = "Advanced",
    ///         InstanceName = $"{name}-target-{defaultInteger.Result}",
    ///     });
    /// 
    ///     var sourceRegistryEnterpriseNamespace = new AliCloud.CS.RegistryEnterpriseNamespace("source", new()
    ///     {
    ///         InstanceId = source.Id,
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///         AutoCreate = false,
    ///         DefaultVisibility = "PUBLIC",
    ///     });
    /// 
    ///     var targetRegistryEnterpriseNamespace = new AliCloud.CS.RegistryEnterpriseNamespace("target", new()
    ///     {
    ///         InstanceId = target.Id,
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///         AutoCreate = false,
    ///         DefaultVisibility = "PUBLIC",
    ///     });
    /// 
    ///     var sourceRegistryEnterpriseRepo = new AliCloud.CS.RegistryEnterpriseRepo("source", new()
    ///     {
    ///         InstanceId = source.Id,
    ///         Namespace = sourceRegistryEnterpriseNamespace.Name,
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///         Summary = "this is summary of my new repo",
    ///         RepoType = "PUBLIC",
    ///     });
    /// 
    ///     var targetRegistryEnterpriseRepo = new AliCloud.CS.RegistryEnterpriseRepo("target", new()
    ///     {
    ///         InstanceId = target.Id,
    ///         Namespace = targetRegistryEnterpriseNamespace.Name,
    ///         Name = $"{name}-{defaultInteger.Result}",
    ///         Summary = "this is summary of my new repo",
    ///         RepoType = "PUBLIC",
    ///     });
    /// 
    ///     var defaultRegistryEnterpriseSyncRule = new AliCloud.CS.RegistryEnterpriseSyncRule("default", new()
    ///     {
    ///         InstanceId = source.Id,
    ///         NamespaceName = sourceRegistryEnterpriseNamespace.Name,
    ///         SyncRuleName = $"{name}-{defaultInteger.Result}",
    ///         TargetInstanceId = target.Id,
    ///         TargetNamespaceName = targetRegistryEnterpriseNamespace.Name,
    ///         TargetRegionId = @default.Apply(@default =&gt; @default.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id)),
    ///         TagFilter = ".*",
    ///         RepoName = sourceRegistryEnterpriseRepo.Name,
    ///         TargetRepoName = targetRegistryEnterpriseRepo.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Container Registry Sync Rule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:cs/registryEnterpriseSyncRule:RegistryEnterpriseSyncRule example &lt;instance_id&gt;:&lt;namespace_name&gt;:&lt;repo_sync_rule_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cs/registryEnterpriseSyncRule:RegistryEnterpriseSyncRule")]
    public partial class RegistryEnterpriseSyncRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Available since v1.240.0) The time when the synchronization rule was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry source instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.240.0. New field `sync_rule_name` instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace name of the source instance.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.240.0) The region ID of the source instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The image repository name of the source instance.
        /// </summary>
        [Output("repoName")]
        public Output<string?> RepoName { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.240.0) The ID of the synchronization rule.
        /// </summary>
        [Output("repoSyncRuleId")]
        public Output<string> RepoSyncRuleId { get; private set; } = null!;

        /// <summary>
        /// (Deprecated since v1.240.0) Field `rule_id` has been deprecated from provider version 1.240.0. New field `repo_sync_rule_id` instead.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// The synchronization direction.
        /// </summary>
        [Output("syncDirection")]
        public Output<string> SyncDirection { get; private set; } = null!;

        /// <summary>
        /// The name of the sync rule.
        /// </summary>
        [Output("syncRuleName")]
        public Output<string> SyncRuleName { get; private set; } = null!;

        /// <summary>
        /// The synchronization scope. Valid values:
        /// - `REPO`: Encrypts or decrypts data.
        /// - `NAMESPACE`: Generates or verifies a digital signature.
        /// &gt; **NOTE:** From version 1.240.0, `sync_scope` can be set.
        /// </summary>
        [Output("syncScope")]
        public Output<string> SyncScope { get; private set; } = null!;

        /// <summary>
        /// The policy configured to trigger the synchronization rule. Default value: `PASSIVE`. Valid values:
        /// - `INITIATIVE`: Manually triggers the synchronization rule.
        /// - `PASSIVE`: Automatically triggers the synchronization rule.
        /// </summary>
        [Output("syncTrigger")]
        public Output<string> SyncTrigger { get; private set; } = null!;

        /// <summary>
        /// The regular expression used to filter image tags.
        /// </summary>
        [Output("tagFilter")]
        public Output<string> TagFilter { get; private set; } = null!;

        /// <summary>
        /// The ID of the destination instance.
        /// </summary>
        [Output("targetInstanceId")]
        public Output<string> TargetInstanceId { get; private set; } = null!;

        /// <summary>
        /// The namespace name of the destination instance.
        /// </summary>
        [Output("targetNamespaceName")]
        public Output<string> TargetNamespaceName { get; private set; } = null!;

        /// <summary>
        /// The region ID of the destination instance.
        /// </summary>
        [Output("targetRegionId")]
        public Output<string> TargetRegionId { get; private set; } = null!;

        /// <summary>
        /// The image repository name of the destination instance.
        /// </summary>
        [Output("targetRepoName")]
        public Output<string?> TargetRepoName { get; private set; } = null!;

        /// <summary>
        /// The UID of the account to which the target instance belongs.
        /// </summary>
        [Output("targetUserId")]
        public Output<string?> TargetUserId { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryEnterpriseSyncRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryEnterpriseSyncRule(string name, RegistryEnterpriseSyncRuleArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cs/registryEnterpriseSyncRule:RegistryEnterpriseSyncRule", name, args ?? new RegistryEnterpriseSyncRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryEnterpriseSyncRule(string name, Input<string> id, RegistryEnterpriseSyncRuleState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cs/registryEnterpriseSyncRule:RegistryEnterpriseSyncRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryEnterpriseSyncRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryEnterpriseSyncRule Get(string name, Input<string> id, RegistryEnterpriseSyncRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryEnterpriseSyncRule(name, id, state, options);
        }
    }

    public sealed class RegistryEnterpriseSyncRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container Registry source instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.240.0. New field `sync_rule_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace name of the source instance.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The image repository name of the source instance.
        /// </summary>
        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        /// <summary>
        /// The name of the sync rule.
        /// </summary>
        [Input("syncRuleName")]
        public Input<string>? SyncRuleName { get; set; }

        /// <summary>
        /// The synchronization scope. Valid values:
        /// - `REPO`: Encrypts or decrypts data.
        /// - `NAMESPACE`: Generates or verifies a digital signature.
        /// &gt; **NOTE:** From version 1.240.0, `sync_scope` can be set.
        /// </summary>
        [Input("syncScope")]
        public Input<string>? SyncScope { get; set; }

        /// <summary>
        /// The policy configured to trigger the synchronization rule. Default value: `PASSIVE`. Valid values:
        /// - `INITIATIVE`: Manually triggers the synchronization rule.
        /// - `PASSIVE`: Automatically triggers the synchronization rule.
        /// </summary>
        [Input("syncTrigger")]
        public Input<string>? SyncTrigger { get; set; }

        /// <summary>
        /// The regular expression used to filter image tags.
        /// </summary>
        [Input("tagFilter", required: true)]
        public Input<string> TagFilter { get; set; } = null!;

        /// <summary>
        /// The ID of the destination instance.
        /// </summary>
        [Input("targetInstanceId", required: true)]
        public Input<string> TargetInstanceId { get; set; } = null!;

        /// <summary>
        /// The namespace name of the destination instance.
        /// </summary>
        [Input("targetNamespaceName", required: true)]
        public Input<string> TargetNamespaceName { get; set; } = null!;

        /// <summary>
        /// The region ID of the destination instance.
        /// </summary>
        [Input("targetRegionId", required: true)]
        public Input<string> TargetRegionId { get; set; } = null!;

        /// <summary>
        /// The image repository name of the destination instance.
        /// </summary>
        [Input("targetRepoName")]
        public Input<string>? TargetRepoName { get; set; }

        /// <summary>
        /// The UID of the account to which the target instance belongs.
        /// </summary>
        [Input("targetUserId")]
        public Input<string>? TargetUserId { get; set; }

        public RegistryEnterpriseSyncRuleArgs()
        {
        }
        public static new RegistryEnterpriseSyncRuleArgs Empty => new RegistryEnterpriseSyncRuleArgs();
    }

    public sealed class RegistryEnterpriseSyncRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Available since v1.240.0) The time when the synchronization rule was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The ID of the Container Registry source instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.240.0. New field `sync_rule_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace name of the source instance.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        /// <summary>
        /// (Available since v1.240.0) The region ID of the source instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The image repository name of the source instance.
        /// </summary>
        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        /// <summary>
        /// (Available since v1.240.0) The ID of the synchronization rule.
        /// </summary>
        [Input("repoSyncRuleId")]
        public Input<string>? RepoSyncRuleId { get; set; }

        /// <summary>
        /// (Deprecated since v1.240.0) Field `rule_id` has been deprecated from provider version 1.240.0. New field `repo_sync_rule_id` instead.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// The synchronization direction.
        /// </summary>
        [Input("syncDirection")]
        public Input<string>? SyncDirection { get; set; }

        /// <summary>
        /// The name of the sync rule.
        /// </summary>
        [Input("syncRuleName")]
        public Input<string>? SyncRuleName { get; set; }

        /// <summary>
        /// The synchronization scope. Valid values:
        /// - `REPO`: Encrypts or decrypts data.
        /// - `NAMESPACE`: Generates or verifies a digital signature.
        /// &gt; **NOTE:** From version 1.240.0, `sync_scope` can be set.
        /// </summary>
        [Input("syncScope")]
        public Input<string>? SyncScope { get; set; }

        /// <summary>
        /// The policy configured to trigger the synchronization rule. Default value: `PASSIVE`. Valid values:
        /// - `INITIATIVE`: Manually triggers the synchronization rule.
        /// - `PASSIVE`: Automatically triggers the synchronization rule.
        /// </summary>
        [Input("syncTrigger")]
        public Input<string>? SyncTrigger { get; set; }

        /// <summary>
        /// The regular expression used to filter image tags.
        /// </summary>
        [Input("tagFilter")]
        public Input<string>? TagFilter { get; set; }

        /// <summary>
        /// The ID of the destination instance.
        /// </summary>
        [Input("targetInstanceId")]
        public Input<string>? TargetInstanceId { get; set; }

        /// <summary>
        /// The namespace name of the destination instance.
        /// </summary>
        [Input("targetNamespaceName")]
        public Input<string>? TargetNamespaceName { get; set; }

        /// <summary>
        /// The region ID of the destination instance.
        /// </summary>
        [Input("targetRegionId")]
        public Input<string>? TargetRegionId { get; set; }

        /// <summary>
        /// The image repository name of the destination instance.
        /// </summary>
        [Input("targetRepoName")]
        public Input<string>? TargetRepoName { get; set; }

        /// <summary>
        /// The UID of the account to which the target instance belongs.
        /// </summary>
        [Input("targetUserId")]
        public Input<string>? TargetUserId { get; set; }

        public RegistryEnterpriseSyncRuleState()
        {
        }
        public static new RegistryEnterpriseSyncRuleState Empty => new RegistryEnterpriseSyncRuleState();
    }
}
