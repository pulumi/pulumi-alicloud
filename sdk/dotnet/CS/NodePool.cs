// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ## Import
    /// 
    /// Container Service for Kubernetes (ACK) Nodepool can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:cs/nodePool:NodePool example &lt;cluster_id&gt;:&lt;node_pool_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cs/nodePool:NodePool")]
    public partial class NodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
        /// </summary>
        [Output("autoRenewPeriod")]
        public Output<int?> AutoRenewPeriod { get; private set; } = null!;

        /// <summary>
        /// Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
        /// </summary>
        [Output("cisEnabled")]
        public Output<bool?> CisEnabled { get; private set; } = null!;

        /// <summary>
        /// The id of kubernetes cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
        /// </summary>
        [Output("compensateWithOnDemand")]
        public Output<bool?> CompensateWithOnDemand { get; private set; } = null!;

        /// <summary>
        /// Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
        /// </summary>
        [Output("cpuPolicy")]
        public Output<string> CpuPolicy { get; private set; } = null!;

        /// <summary>
        /// Configure the data disk of the node in the node pool. See `data_disks` below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.NodePoolDataDisk>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
        /// </summary>
        [Output("deploymentSetId")]
        public Output<string?> DeploymentSetId { get; private set; } = null!;

        /// <summary>
        /// Number of expected nodes in the node pool.
        /// </summary>
        [Output("desiredSize")]
        public Output<string?> DesiredSize { get; private set; } = null!;

        /// <summary>
        /// Whether to force deletion.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
        /// </summary>
        [Output("formatDisk")]
        public Output<bool> FormatDisk { get; private set; } = null!;

        /// <summary>
        /// The custom image ID. The system-provided image is used by default.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The operating system image type and the `platform` parameter can be selected from the following values:
        /// - `AliyunLinux` : Alinux2 image.
        /// - `AliyunLinux3` : Alinux3 image.
        /// - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
        /// - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
        /// - `CentOS` : CentOS image.
        /// - `Windows` : Windows image.
        /// - `WindowsCore` : WindowsCore image.
        /// - `ContainerOS` : container-optimized image.
        /// - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
        /// </summary>
        [Output("imageType")]
        public Output<string> ImageType { get; private set; } = null!;

        /// <summary>
        /// Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
        /// </summary>
        [Output("installCloudMonitor")]
        public Output<bool?> InstallCloudMonitor { get; private set; } = null!;

        /// <summary>
        /// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
        /// </summary>
        [Output("instanceChargeType")]
        public Output<string?> InstanceChargeType { get; private set; } = null!;

        /// <summary>
        /// In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
        /// </summary>
        [Output("instanceTypes")]
        public Output<ImmutableArray<string>> InstanceTypes { get; private set; } = null!;

        /// <summary>
        /// The instance list. Add existing nodes under the same cluster VPC to the node pool.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<string>> Instances { get; private set; } = null!;

        /// <summary>
        /// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
        /// </summary>
        [Output("internetChargeType")]
        public Output<string?> InternetChargeType { get; private set; } = null!;

        /// <summary>
        /// The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
        /// </summary>
        [Output("internetMaxBandwidthOut")]
        public Output<int?> InternetMaxBandwidthOut { get; private set; } = null!;

        /// <summary>
        /// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
        /// </summary>
        [Output("keepInstanceName")]
        public Output<bool> KeepInstanceName { get; private set; } = null!;

        /// <summary>
        /// The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
        /// </summary>
        [Output("keyName")]
        public Output<string?> KeyName { get; private set; } = null!;

        /// <summary>
        /// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
        /// </summary>
        [Output("kmsEncryptedPassword")]
        public Output<string?> KmsEncryptedPassword { get; private set; } = null!;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        [Output("kmsEncryptionContext")]
        public Output<ImmutableDictionary<string, string>?> KmsEncryptionContext { get; private set; } = null!;

        /// <summary>
        /// Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
        /// </summary>
        [Output("kubeletConfiguration")]
        public Output<Outputs.NodePoolKubeletConfiguration?> KubeletConfiguration { get; private set; } = null!;

        /// <summary>
        /// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.NodePoolLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
        /// </summary>
        [Output("loginAsNonRoot")]
        public Output<bool?> LoginAsNonRoot { get; private set; } = null!;

        /// <summary>
        /// Managed node pool configuration. See `management` below.
        /// </summary>
        [Output("management")]
        public Output<Outputs.NodePoolManagement> Management { get; private set; } = null!;

        /// <summary>
        /// The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
        /// </summary>
        [Output("multiAzPolicy")]
        public Output<string> MultiAzPolicy { get; private set; } = null!;

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
        /// - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
        /// - The node IP address is the complete private IP address of the node.
        /// - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
        /// </summary>
        [Output("nodeNameMode")]
        public Output<string> NodeNameMode { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        [Output("nodePoolId")]
        public Output<string> NodePoolId { get; private set; } = null!;

        /// <summary>
        /// The name of node pool.
        /// </summary>
        [Output("nodePoolName")]
        public Output<string> NodePoolName { get; private set; } = null!;

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
        /// </summary>
        [Output("onDemandBaseCapacity")]
        public Output<string?> OnDemandBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
        /// </summary>
        [Output("onDemandPercentageAboveBaseCapacity")]
        public Output<string?> OnDemandPercentageAboveBaseCapacity { get; private set; } = null!;

        /// <summary>
        /// The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// Node payment period unit, valid value: `Month`. Default is `Month`.
        /// </summary>
        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// Operating system release, using `image_type` instead.
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// Node pre custom data, base64-encoded, the script executed before the node is initialized.
        /// </summary>
        [Output("preUserData")]
        public Output<string?> PreUserData { get; private set; } = null!;

        /// <summary>
        /// Private node pool configuration. See `private_pool_options` below.
        /// </summary>
        [Output("privatePoolOptions")]
        public Output<Outputs.NodePoolPrivatePoolOptions?> PrivatePoolOptions { get; private set; } = null!;

        /// <summary>
        /// The name of the Worker RAM role.
        /// * If it is empty, the default Worker RAM role created in the cluster will be used.
        /// * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
        /// 
        /// &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
        /// </summary>
        [Output("ramRoleName")]
        public Output<string> RamRoleName { get; private set; } = null!;

        /// <summary>
        /// The list of RDS instances.
        /// </summary>
        [Output("rdsInstances")]
        public Output<ImmutableArray<string>> RdsInstances { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Rotary configuration. See `rolling_policy` below.
        /// </summary>
        [Output("rollingPolicy")]
        public Output<Outputs.NodePoolRollingPolicy?> RollingPolicy { get; private set; } = null!;

        /// <summary>
        /// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
        /// </summary>
        [Output("runtimeName")]
        public Output<string> RuntimeName { get; private set; } = null!;

        /// <summary>
        /// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
        /// </summary>
        [Output("runtimeVersion")]
        public Output<string> RuntimeVersion { get; private set; } = null!;

        /// <summary>
        /// Automatic scaling configuration. See `scaling_config` below.
        /// </summary>
        [Output("scalingConfig")]
        public Output<Outputs.NodePoolScalingConfig> ScalingConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the scaling group.
        /// </summary>
        [Output("scalingGroupId")]
        public Output<string> ScalingGroupId { get; private set; } = null!;

        /// <summary>
        /// Scaling group mode, default value: `release`. Valid values:
        /// </summary>
        [Output("scalingPolicy")]
        public Output<string> ScalingPolicy { get; private set; } = null!;

        /// <summary>
        /// The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
        /// </summary>
        [Output("securityHardeningOs")]
        public Output<bool?> SecurityHardeningOs { get; private set; } = null!;

        /// <summary>
        /// Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
        /// 
        /// &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
        /// </summary>
        [Output("socEnabled")]
        public Output<bool?> SocEnabled { get; private set; } = null!;

        /// <summary>
        /// The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
        /// </summary>
        [Output("spotInstancePools")]
        public Output<int?> SpotInstancePools { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
        /// </summary>
        [Output("spotInstanceRemedy")]
        public Output<bool?> SpotInstanceRemedy { get; private set; } = null!;

        /// <summary>
        /// The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
        /// </summary>
        [Output("spotPriceLimits")]
        public Output<ImmutableArray<Outputs.NodePoolSpotPriceLimit>> SpotPriceLimits { get; private set; } = null!;

        /// <summary>
        /// The preemptible instance type. Value:
        /// - `NoSpot` : Non-preemptible instance.
        /// - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
        /// - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
        /// </summary>
        [Output("spotStrategy")]
        public Output<string> SpotStrategy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Output("systemDiskBurstingEnabled")]
        public Output<bool?> SystemDiskBurstingEnabled { get; private set; } = null!;

        /// <summary>
        /// The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `system_disk_category`.
        /// </summary>
        [Output("systemDiskCategories")]
        public Output<ImmutableArray<string>> SystemDiskCategories { get; private set; } = null!;

        /// <summary>
        /// The category of the system disk for nodes. Default value: `cloud_efficiency`. Valid values:
        /// </summary>
        [Output("systemDiskCategory")]
        public Output<string> SystemDiskCategory { get; private set; } = null!;

        /// <summary>
        /// The encryption algorithm used by the system disk. Value range: aes-256.
        /// </summary>
        [Output("systemDiskEncryptAlgorithm")]
        public Output<string?> SystemDiskEncryptAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
        /// </summary>
        [Output("systemDiskEncrypted")]
        public Output<bool?> SystemDiskEncrypted { get; private set; } = null!;

        /// <summary>
        /// The ID of the KMS key used by the system disk.
        /// </summary>
        [Output("systemDiskKmsKey")]
        public Output<string?> SystemDiskKmsKey { get; private set; } = null!;

        /// <summary>
        /// The system disk performance of the node takes effect only for the ESSD disk.
        /// - `PL0`: maximum random read/write IOPS 10000 for a single disk.
        /// - `PL1`: maximum random read/write IOPS 50000 for a single disk.
        /// - `PL2`: highest random read/write IOPS 100000 for a single disk.
        /// - `PL3`: maximum random read/write IOPS 1 million for a single disk.
        /// </summary>
        [Output("systemDiskPerformanceLevel")]
        public Output<string?> SystemDiskPerformanceLevel { get; private set; } = null!;

        /// <summary>
        /// The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Output("systemDiskProvisionedIops")]
        public Output<int?> SystemDiskProvisionedIops { get; private set; } = null!;

        /// <summary>
        /// The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
        /// - Basic disk: 20 to 500.
        /// - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
        /// - ESSD AutoPL disk (cloud_auto): 1 to 2048.
        /// - Other disk categories: 20 to 2048.
        /// </summary>
        [Output("systemDiskSize")]
        public Output<int?> SystemDiskSize { get; private set; } = null!;

        /// <summary>
        /// The ID of the automatic snapshot policy used by the system disk.
        /// </summary>
        [Output("systemDiskSnapshotPolicyId")]
        public Output<string?> SystemDiskSnapshotPolicyId { get; private set; } = null!;

        /// <summary>
        /// Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
        /// </summary>
        [Output("taints")]
        public Output<ImmutableArray<Outputs.NodePoolTaint>> Taints { get; private set; } = null!;

        /// <summary>
        /// The configuration about confidential computing for the cluster. See `tee_config` below.
        /// </summary>
        [Output("teeConfig")]
        public Output<Outputs.NodePoolTeeConfig> TeeConfig { get; private set; } = null!;

        /// <summary>
        /// Whether the node after expansion can be scheduled.
        /// </summary>
        [Output("unschedulable")]
        public Output<bool?> Unschedulable { get; private set; } = null!;

        /// <summary>
        /// Synchronously update node labels and taints.
        /// </summary>
        [Output("updateNodes")]
        public Output<bool?> UpdateNodes { get; private set; } = null!;

        /// <summary>
        /// Node custom data, base64-encoded.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// The vswitches used by node pool workers.
        /// </summary>
        [Output("vswitchIds")]
        public Output<ImmutableArray<string>> VswitchIds { get; private set; } = null!;


        /// <summary>
        /// Create a NodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodePool(string name, NodePoolArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cs/nodePool:NodePool", name, args ?? new NodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodePool(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cs/nodePool:NodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "kmsEncryptedPassword",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodePool Get(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new NodePool(name, id, state, options);
        }
    }

    public sealed class NodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
        /// </summary>
        [Input("cisEnabled")]
        public Input<bool>? CisEnabled { get; set; }

        /// <summary>
        /// The id of kubernetes cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
        /// </summary>
        [Input("compensateWithOnDemand")]
        public Input<bool>? CompensateWithOnDemand { get; set; }

        /// <summary>
        /// Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
        /// </summary>
        [Input("cpuPolicy")]
        public Input<string>? CpuPolicy { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.NodePoolDataDiskArgs>? _dataDisks;

        /// <summary>
        /// Configure the data disk of the node in the node pool. See `data_disks` below.
        /// </summary>
        public InputList<Inputs.NodePoolDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.NodePoolDataDiskArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
        /// </summary>
        [Input("deploymentSetId")]
        public Input<string>? DeploymentSetId { get; set; }

        /// <summary>
        /// Number of expected nodes in the node pool.
        /// </summary>
        [Input("desiredSize")]
        public Input<string>? DesiredSize { get; set; }

        /// <summary>
        /// Whether to force deletion.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
        /// </summary>
        [Input("formatDisk")]
        public Input<bool>? FormatDisk { get; set; }

        /// <summary>
        /// The custom image ID. The system-provided image is used by default.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The operating system image type and the `platform` parameter can be selected from the following values:
        /// - `AliyunLinux` : Alinux2 image.
        /// - `AliyunLinux3` : Alinux3 image.
        /// - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
        /// - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
        /// - `CentOS` : CentOS image.
        /// - `Windows` : Windows image.
        /// - `WindowsCore` : WindowsCore image.
        /// - `ContainerOS` : container-optimized image.
        /// - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
        /// </summary>
        [Input("installCloudMonitor")]
        public Input<bool>? InstallCloudMonitor { get; set; }

        /// <summary>
        /// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        [Input("instanceTypes", required: true)]
        private InputList<string>? _instanceTypes;

        /// <summary>
        /// In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
        /// </summary>
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        [Input("instances")]
        private InputList<string>? _instances;

        /// <summary>
        /// The instance list. Add existing nodes under the same cluster VPC to the node pool.
        /// </summary>
        public InputList<string> Instances
        {
            get => _instances ?? (_instances = new InputList<string>());
            set => _instances = value;
        }

        /// <summary>
        /// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
        /// </summary>
        [Input("internetChargeType")]
        public Input<string>? InternetChargeType { get; set; }

        /// <summary>
        /// The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
        /// </summary>
        [Input("internetMaxBandwidthOut")]
        public Input<int>? InternetMaxBandwidthOut { get; set; }

        /// <summary>
        /// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("kmsEncryptedPassword")]
        private Input<string>? _kmsEncryptedPassword;

        /// <summary>
        /// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
        /// </summary>
        public Input<string>? KmsEncryptedPassword
        {
            get => _kmsEncryptedPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kmsEncryptedPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("kmsEncryptionContext")]
        private InputMap<string>? _kmsEncryptionContext;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        public InputMap<string> KmsEncryptionContext
        {
            get => _kmsEncryptionContext ?? (_kmsEncryptionContext = new InputMap<string>());
            set => _kmsEncryptionContext = value;
        }

        /// <summary>
        /// Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
        /// </summary>
        [Input("kubeletConfiguration")]
        public Input<Inputs.NodePoolKubeletConfigurationArgs>? KubeletConfiguration { get; set; }

        [Input("labels")]
        private InputList<Inputs.NodePoolLabelArgs>? _labels;

        /// <summary>
        /// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
        /// </summary>
        public InputList<Inputs.NodePoolLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.NodePoolLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
        /// </summary>
        [Input("loginAsNonRoot")]
        public Input<bool>? LoginAsNonRoot { get; set; }

        /// <summary>
        /// Managed node pool configuration. See `management` below.
        /// </summary>
        [Input("management")]
        public Input<Inputs.NodePoolManagementArgs>? Management { get; set; }

        /// <summary>
        /// The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
        /// </summary>
        [Input("multiAzPolicy")]
        public Input<string>? MultiAzPolicy { get; set; }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
        /// - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
        /// - The node IP address is the complete private IP address of the node.
        /// - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
        /// </summary>
        [Input("nodeNameMode")]
        public Input<string>? NodeNameMode { get; set; }

        /// <summary>
        /// The name of node pool.
        /// </summary>
        [Input("nodePoolName")]
        public Input<string>? NodePoolName { get; set; }

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
        /// </summary>
        [Input("onDemandBaseCapacity")]
        public Input<string>? OnDemandBaseCapacity { get; set; }

        /// <summary>
        /// The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
        /// </summary>
        [Input("onDemandPercentageAboveBaseCapacity")]
        public Input<string>? OnDemandPercentageAboveBaseCapacity { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Node payment period unit, valid value: `Month`. Default is `Month`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// Operating system release, using `image_type` instead.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// Node pre custom data, base64-encoded, the script executed before the node is initialized.
        /// </summary>
        [Input("preUserData")]
        public Input<string>? PreUserData { get; set; }

        /// <summary>
        /// Private node pool configuration. See `private_pool_options` below.
        /// </summary>
        [Input("privatePoolOptions")]
        public Input<Inputs.NodePoolPrivatePoolOptionsArgs>? PrivatePoolOptions { get; set; }

        /// <summary>
        /// The name of the Worker RAM role.
        /// * If it is empty, the default Worker RAM role created in the cluster will be used.
        /// * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
        /// 
        /// &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
        /// </summary>
        [Input("ramRoleName")]
        public Input<string>? RamRoleName { get; set; }

        [Input("rdsInstances")]
        private InputList<string>? _rdsInstances;

        /// <summary>
        /// The list of RDS instances.
        /// </summary>
        public InputList<string> RdsInstances
        {
            get => _rdsInstances ?? (_rdsInstances = new InputList<string>());
            set => _rdsInstances = value;
        }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Rotary configuration. See `rolling_policy` below.
        /// </summary>
        [Input("rollingPolicy")]
        public Input<Inputs.NodePoolRollingPolicyArgs>? RollingPolicy { get; set; }

        /// <summary>
        /// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
        /// </summary>
        [Input("runtimeName")]
        public Input<string>? RuntimeName { get; set; }

        /// <summary>
        /// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
        /// </summary>
        [Input("runtimeVersion")]
        public Input<string>? RuntimeVersion { get; set; }

        /// <summary>
        /// Automatic scaling configuration. See `scaling_config` below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.NodePoolScalingConfigArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// Scaling group mode, default value: `release`. Valid values:
        /// </summary>
        [Input("scalingPolicy")]
        public Input<string>? ScalingPolicy { get; set; }

        /// <summary>
        /// The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
        /// </summary>
        [Input("securityHardeningOs")]
        public Input<bool>? SecurityHardeningOs { get; set; }

        /// <summary>
        /// Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
        /// 
        /// &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
        /// </summary>
        [Input("socEnabled")]
        public Input<bool>? SocEnabled { get; set; }

        /// <summary>
        /// The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
        /// </summary>
        [Input("spotInstancePools")]
        public Input<int>? SpotInstancePools { get; set; }

        /// <summary>
        /// Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
        /// </summary>
        [Input("spotInstanceRemedy")]
        public Input<bool>? SpotInstanceRemedy { get; set; }

        [Input("spotPriceLimits")]
        private InputList<Inputs.NodePoolSpotPriceLimitArgs>? _spotPriceLimits;

        /// <summary>
        /// The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
        /// </summary>
        public InputList<Inputs.NodePoolSpotPriceLimitArgs> SpotPriceLimits
        {
            get => _spotPriceLimits ?? (_spotPriceLimits = new InputList<Inputs.NodePoolSpotPriceLimitArgs>());
            set => _spotPriceLimits = value;
        }

        /// <summary>
        /// The preemptible instance type. Value:
        /// - `NoSpot` : Non-preemptible instance.
        /// - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
        /// - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
        /// </summary>
        [Input("spotStrategy")]
        public Input<string>? SpotStrategy { get; set; }

        /// <summary>
        /// Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Input("systemDiskBurstingEnabled")]
        public Input<bool>? SystemDiskBurstingEnabled { get; set; }

        [Input("systemDiskCategories")]
        private InputList<string>? _systemDiskCategories;

        /// <summary>
        /// The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `system_disk_category`.
        /// </summary>
        public InputList<string> SystemDiskCategories
        {
            get => _systemDiskCategories ?? (_systemDiskCategories = new InputList<string>());
            set => _systemDiskCategories = value;
        }

        /// <summary>
        /// The category of the system disk for nodes. Default value: `cloud_efficiency`. Valid values:
        /// </summary>
        [Input("systemDiskCategory")]
        public Input<string>? SystemDiskCategory { get; set; }

        /// <summary>
        /// The encryption algorithm used by the system disk. Value range: aes-256.
        /// </summary>
        [Input("systemDiskEncryptAlgorithm")]
        public Input<string>? SystemDiskEncryptAlgorithm { get; set; }

        /// <summary>
        /// Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
        /// </summary>
        [Input("systemDiskEncrypted")]
        public Input<bool>? SystemDiskEncrypted { get; set; }

        /// <summary>
        /// The ID of the KMS key used by the system disk.
        /// </summary>
        [Input("systemDiskKmsKey")]
        public Input<string>? SystemDiskKmsKey { get; set; }

        /// <summary>
        /// The system disk performance of the node takes effect only for the ESSD disk.
        /// - `PL0`: maximum random read/write IOPS 10000 for a single disk.
        /// - `PL1`: maximum random read/write IOPS 50000 for a single disk.
        /// - `PL2`: highest random read/write IOPS 100000 for a single disk.
        /// - `PL3`: maximum random read/write IOPS 1 million for a single disk.
        /// </summary>
        [Input("systemDiskPerformanceLevel")]
        public Input<string>? SystemDiskPerformanceLevel { get; set; }

        /// <summary>
        /// The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Input("systemDiskProvisionedIops")]
        public Input<int>? SystemDiskProvisionedIops { get; set; }

        /// <summary>
        /// The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
        /// - Basic disk: 20 to 500.
        /// - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
        /// - ESSD AutoPL disk (cloud_auto): 1 to 2048.
        /// - Other disk categories: 20 to 2048.
        /// </summary>
        [Input("systemDiskSize")]
        public Input<int>? SystemDiskSize { get; set; }

        /// <summary>
        /// The ID of the automatic snapshot policy used by the system disk.
        /// </summary>
        [Input("systemDiskSnapshotPolicyId")]
        public Input<string>? SystemDiskSnapshotPolicyId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.NodePoolTaintArgs>? _taints;

        /// <summary>
        /// A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
        /// </summary>
        public InputList<Inputs.NodePoolTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.NodePoolTaintArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// The configuration about confidential computing for the cluster. See `tee_config` below.
        /// </summary>
        [Input("teeConfig")]
        public Input<Inputs.NodePoolTeeConfigArgs>? TeeConfig { get; set; }

        /// <summary>
        /// Whether the node after expansion can be scheduled.
        /// </summary>
        [Input("unschedulable")]
        public Input<bool>? Unschedulable { get; set; }

        /// <summary>
        /// Synchronously update node labels and taints.
        /// </summary>
        [Input("updateNodes")]
        public Input<bool>? UpdateNodes { get; set; }

        /// <summary>
        /// Node custom data, base64-encoded.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vswitchIds", required: true)]
        private InputList<string>? _vswitchIds;

        /// <summary>
        /// The vswitches used by node pool workers.
        /// </summary>
        public InputList<string> VswitchIds
        {
            get => _vswitchIds ?? (_vswitchIds = new InputList<string>());
            set => _vswitchIds = value;
        }

        public NodePoolArgs()
        {
        }
        public static new NodePoolArgs Empty => new NodePoolArgs();
    }

    public sealed class NodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable automatic renewal for nodes in the node pool takes effect only when `instance_charge_type` is set to `PrePaid`. Default value: `false`. Valid values:
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The automatic renewal period of nodes in the node pool takes effect only when you select Prepaid and Automatic Renewal, and is a required value. When `PeriodUnit = Month`, the value range is {1, 2, 3, 6, 12}. Default value: 1.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// Whether enable worker node to support cis security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. Use `security_hardening_os` instead.
        /// </summary>
        [Input("cisEnabled")]
        public Input<bool>? CisEnabled { get; set; }

        /// <summary>
        /// The id of kubernetes cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values: `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created. `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
        /// </summary>
        [Input("compensateWithOnDemand")]
        public Input<bool>? CompensateWithOnDemand { get; set; }

        /// <summary>
        /// Node CPU management policies. Default value: `none`. When the cluster version is 1.12.6 or later, the following two policies are supported:
        /// </summary>
        [Input("cpuPolicy")]
        public Input<string>? CpuPolicy { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.NodePoolDataDiskGetArgs>? _dataDisks;

        /// <summary>
        /// Configure the data disk of the node in the node pool. See `data_disks` below.
        /// </summary>
        public InputList<Inputs.NodePoolDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.NodePoolDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// The deployment set of node pool. Specify the deploymentSet to ensure that the nodes in the node pool can be distributed on different physical machines.
        /// </summary>
        [Input("deploymentSetId")]
        public Input<string>? DeploymentSetId { get; set; }

        /// <summary>
        /// Number of expected nodes in the node pool.
        /// </summary>
        [Input("desiredSize")]
        public Input<string>? DesiredSize { get; set; }

        /// <summary>
        /// Whether to force deletion.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// After you select this check box, if data disks have been attached to the specified ECS instances and the file system of the last data disk is uninitialized, the system automatically formats the last data disk to ext4 and mounts the data disk to /var/lib/docker and /var/lib/kubelet. The original data on the disk will be cleared. Make sure that you back up data in advance. If no data disk is mounted on the ECS instance, no new data disk will be purchased. Default is `false`.
        /// </summary>
        [Input("formatDisk")]
        public Input<bool>? FormatDisk { get; set; }

        /// <summary>
        /// The custom image ID. The system-provided image is used by default.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The operating system image type and the `platform` parameter can be selected from the following values:
        /// - `AliyunLinux` : Alinux2 image.
        /// - `AliyunLinux3` : Alinux3 image.
        /// - `AliyunLinux3Arm64` : Alinux3 mirror ARM version.
        /// - `AliyunLinuxUEFI` : Alinux2 Image UEFI version.
        /// - `CentOS` : CentOS image.
        /// - `Windows` : Windows image.
        /// - `WindowsCore` : WindowsCore image.
        /// - `ContainerOS` : container-optimized image.
        /// - `Ubuntu`: (Available since v1.236.0) Ubuntu image.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// Whether to install cloud monitoring on the ECS node. After installation, you can view the monitoring information of the created ECS instance in the cloud monitoring console and recommend enable it. Default value: `false`. Valid values:
        /// </summary>
        [Input("installCloudMonitor")]
        public Input<bool>? InstallCloudMonitor { get; set; }

        /// <summary>
        /// Node payment type. Valid values: `PostPaid`, `PrePaid`, default is `PostPaid`. If value is `PrePaid`, the arguments `period`, `period_unit`, `auto_renew` and `auto_renew_period` are required.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        [Input("instanceTypes")]
        private InputList<string>? _instanceTypes;

        /// <summary>
        /// In the node instance specification list, you can select multiple instance specifications as alternatives. When each node is created, it will try to purchase from the first specification until it is created successfully. The final purchased instance specifications may vary with inventory changes.
        /// </summary>
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        [Input("instances")]
        private InputList<string>? _instances;

        /// <summary>
        /// The instance list. Add existing nodes under the same cluster VPC to the node pool.
        /// </summary>
        public InputList<string> Instances
        {
            get => _instances ?? (_instances = new InputList<string>());
            set => _instances = value;
        }

        /// <summary>
        /// The billing method for network usage. Valid values `PayByBandwidth` and `PayByTraffic`. Conflict with `eip_internet_charge_type`, EIP and public network IP can only choose one.
        /// </summary>
        [Input("internetChargeType")]
        public Input<string>? InternetChargeType { get; set; }

        /// <summary>
        /// The maximum bandwidth of the public IP address of the node. The unit is Mbps(Mega bit per second). The value range is:\[1,100\]
        /// </summary>
        [Input("internetMaxBandwidthOut")]
        public Input<int>? InternetMaxBandwidthOut { get; set; }

        /// <summary>
        /// Add an existing instance to the node pool, whether to keep the original instance name. It is recommended to set to `true`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The name of the key pair. When the node pool is a managed node pool, only `key_name` is supported.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("kmsEncryptedPassword")]
        private Input<string>? _kmsEncryptedPassword;

        /// <summary>
        /// An KMS encrypts password used to a cs kubernetes. You have to specify one of `password` `key_name` `kms_encrypted_password` fields.
        /// </summary>
        public Input<string>? KmsEncryptedPassword
        {
            get => _kmsEncryptedPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kmsEncryptedPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("kmsEncryptionContext")]
        private InputMap<string>? _kmsEncryptionContext;

        /// <summary>
        /// An KMS encryption context used to decrypt `kms_encrypted_password` before creating or updating a cs kubernetes with `kms_encrypted_password`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kms_encrypted_password` is set.
        /// </summary>
        public InputMap<string> KmsEncryptionContext
        {
            get => _kmsEncryptionContext ?? (_kmsEncryptionContext = new InputMap<string>());
            set => _kmsEncryptionContext = value;
        }

        /// <summary>
        /// Kubelet configuration parameters for worker nodes. See `kubelet_configuration` below. More information in [Kubelet Configuration](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/). See `kubelet_configuration` below.
        /// </summary>
        [Input("kubeletConfiguration")]
        public Input<Inputs.NodePoolKubeletConfigurationGetArgs>? KubeletConfiguration { get; set; }

        [Input("labels")]
        private InputList<Inputs.NodePoolLabelGetArgs>? _labels;

        /// <summary>
        /// A List of Kubernetes labels to assign to the nodes . Only labels that are applied with the ACK API are managed by this argument. Detailed below. More information in [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). See `labels` below.
        /// </summary>
        public InputList<Inputs.NodePoolLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.NodePoolLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Whether the ECS instance is logged on as a ecs-user user. Valid value: `true` and `false`.
        /// </summary>
        [Input("loginAsNonRoot")]
        public Input<bool>? LoginAsNonRoot { get; set; }

        /// <summary>
        /// Managed node pool configuration. See `management` below.
        /// </summary>
        [Input("management")]
        public Input<Inputs.NodePoolManagementGetArgs>? Management { get; set; }

        /// <summary>
        /// The scaling policy for ECS instances in a multi-zone scaling group. Valid value: `PRIORITY`, `COST_OPTIMIZED` and `BALANCE`. `PRIORITY`: scales the capacity according to the virtual switches you define (VSwitchIds.N). When an ECS instance cannot be created in the zone where the higher-priority vSwitch is located, the next-priority vSwitch is automatically used to create an ECS instance. `COST_OPTIMIZED`: try to create by vCPU unit price from low to high. When the scaling configuration is configured with multiple instances of preemptible billing, preemptible instances are created first. You can continue to use the `CompensateWithOnDemand` parameter to specify whether to automatically try to create a preemptible instance by paying for it. It takes effect only when the scaling configuration has multi-instance specifications or preemptible instances. `BALANCE`: distributes ECS instances evenly among the multi-zone specified by the scaling group. If the zones become unbalanced due to insufficient inventory, you can use the API RebalanceInstances to balance resources.
        /// </summary>
        [Input("multiAzPolicy")]
        public Input<string>? MultiAzPolicy { get; set; }

        /// <summary>
        /// . Field 'name' has been deprecated from provider version 1.219.0. New field 'node_pool_name' instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The worker node number of the node pool. From version 1.111.0, `node_count` is not required.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Each node name consists of a prefix, its private network IP, and a suffix, separated by commas. The input format is `customized,,ip,`.
        /// - The prefix and suffix can be composed of one or more parts separated by '.', each part can use lowercase letters, numbers and '-', and the beginning and end of the node name must be lowercase letters and numbers.
        /// - The node IP address is the complete private IP address of the node.
        /// - For example, if the string `customized,aliyun,ip,com` is passed in (where 'customized' and 'ip' are fixed strings, 'aliyun' is the prefix, and 'com' is the suffix), the name of the node is `aliyun192.168.xxx.xxxcom`.
        /// </summary>
        [Input("nodeNameMode")]
        public Input<string>? NodeNameMode { get; set; }

        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        [Input("nodePoolId")]
        public Input<string>? NodePoolId { get; set; }

        /// <summary>
        /// The name of node pool.
        /// </summary>
        [Input("nodePoolName")]
        public Input<string>? NodePoolName { get; set; }

        /// <summary>
        /// The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.
        /// </summary>
        [Input("onDemandBaseCapacity")]
        public Input<string>? OnDemandBaseCapacity { get; set; }

        /// <summary>
        /// The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.
        /// </summary>
        [Input("onDemandPercentageAboveBaseCapacity")]
        public Input<string>? OnDemandPercentageAboveBaseCapacity { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of ssh login. You have to specify one of `password` and `key_name` fields. The password rule is 8 to 30 characters and contains at least three items (upper and lower case letters, numbers, and special symbols).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Node payment period. Its valid value is one of {1, 2, 3, 6, 12}.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Node payment period unit, valid value: `Month`. Default is `Month`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// Operating system release, using `image_type` instead.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// Node pre custom data, base64-encoded, the script executed before the node is initialized.
        /// </summary>
        [Input("preUserData")]
        public Input<string>? PreUserData { get; set; }

        /// <summary>
        /// Private node pool configuration. See `private_pool_options` below.
        /// </summary>
        [Input("privatePoolOptions")]
        public Input<Inputs.NodePoolPrivatePoolOptionsGetArgs>? PrivatePoolOptions { get; set; }

        /// <summary>
        /// The name of the Worker RAM role.
        /// * If it is empty, the default Worker RAM role created in the cluster will be used.
        /// * If the specified RAM role is not empty, the specified RAM role must be a **Common Service role**, and its **trusted service** configuration must be **cloud server**. For more information, see [Create a common service role](https://help.aliyun.com/document_detail/116800.html). If the specified RAM role is not the default Worker RAM role created in the cluster, the role name cannot start with 'KubernetesMasterRole-'or 'KubernetesWorkerRole.
        /// 
        /// &gt; **NOTE:**  This parameter is only supported for ACK-managed clusters of 1.22 or later versions.
        /// </summary>
        [Input("ramRoleName")]
        public Input<string>? RamRoleName { get; set; }

        [Input("rdsInstances")]
        private InputList<string>? _rdsInstances;

        /// <summary>
        /// The list of RDS instances.
        /// </summary>
        public InputList<string> RdsInstances
        {
            get => _rdsInstances ?? (_rdsInstances = new InputList<string>());
            set => _rdsInstances = value;
        }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Rotary configuration. See `rolling_policy` below.
        /// </summary>
        [Input("rollingPolicy")]
        public Input<Inputs.NodePoolRollingPolicyGetArgs>? RollingPolicy { get; set; }

        /// <summary>
        /// The runtime name of containers. If not set, the cluster runtime will be used as the node pool runtime. If you select another container runtime, see [Comparison of Docker, containerd, and Sandboxed-Container](https://www.alibabacloud.com/help/doc-detail/160313.htm).
        /// </summary>
        [Input("runtimeName")]
        public Input<string>? RuntimeName { get; set; }

        /// <summary>
        /// The runtime version of containers. If not set, the cluster runtime will be used as the node pool runtime.
        /// </summary>
        [Input("runtimeVersion")]
        public Input<string>? RuntimeVersion { get; set; }

        /// <summary>
        /// Automatic scaling configuration. See `scaling_config` below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.NodePoolScalingConfigGetArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// The ID of the scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public Input<string>? ScalingGroupId { get; set; }

        /// <summary>
        /// Scaling group mode, default value: `release`. Valid values:
        /// </summary>
        [Input("scalingPolicy")]
        public Input<string>? ScalingPolicy { get; set; }

        /// <summary>
        /// The security group ID of the node pool. This field has been replaced by `security_group_ids`, please use the `security_group_ids` field instead.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// Multiple security groups can be configured for a node pool. If both `security_group_ids` and `security_group_id` are configured, `security_group_ids` takes effect. This field cannot be modified.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Alibaba Cloud OS security reinforcement. Default value: `false`. Value:
        /// </summary>
        [Input("securityHardeningOs")]
        public Input<bool>? SecurityHardeningOs { get; set; }

        /// <summary>
        /// Whether enable worker node to support soc security reinforcement, its valid value `true` or `false`. Default to `false` and apply to AliyunLinux series. See [SOC Reinforcement](https://help.aliyun.com/document_detail/196148.html).
        /// 
        /// &gt; **NOTE:**  It is forbidden to set both `security_hardening_os` and `soc_enabled` to `true` at the same time.
        /// </summary>
        [Input("socEnabled")]
        public Input<bool>? SocEnabled { get; set; }

        /// <summary>
        /// The number of instance types that are available. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.
        /// </summary>
        [Input("spotInstancePools")]
        public Input<int>? SpotInstancePools { get; set; }

        /// <summary>
        /// Specifies whether to supplement preemptible instances when the number of preemptible instances drops below the specified minimum number. If you set the value to true, Auto Scaling attempts to create a new preemptible instance when the system notifies that an existing preemptible instance is about to be reclaimed. Valid values: `true`: enables the supplementation of preemptible instances. `false`: disables the supplementation of preemptible instances.
        /// </summary>
        [Input("spotInstanceRemedy")]
        public Input<bool>? SpotInstanceRemedy { get; set; }

        [Input("spotPriceLimits")]
        private InputList<Inputs.NodePoolSpotPriceLimitGetArgs>? _spotPriceLimits;

        /// <summary>
        /// The current single preemptible instance type market price range configuration. See `spot_price_limit` below.
        /// </summary>
        public InputList<Inputs.NodePoolSpotPriceLimitGetArgs> SpotPriceLimits
        {
            get => _spotPriceLimits ?? (_spotPriceLimits = new InputList<Inputs.NodePoolSpotPriceLimitGetArgs>());
            set => _spotPriceLimits = value;
        }

        /// <summary>
        /// The preemptible instance type. Value:
        /// - `NoSpot` : Non-preemptible instance.
        /// - `SpotWithPriceLimit` : Set the upper limit of the preemptible instance price.
        /// - `SpotAsPriceGo` : The system automatically bids, following the actual price of the current market.
        /// </summary>
        [Input("spotStrategy")]
        public Input<string>? SpotStrategy { get; set; }

        /// <summary>
        /// Specifies whether to enable the burst feature for system disks. Valid values:`true`: enables the burst feature. `false`: disables the burst feature. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Input("systemDiskBurstingEnabled")]
        public Input<bool>? SystemDiskBurstingEnabled { get; set; }

        [Input("systemDiskCategories")]
        private InputList<string>? _systemDiskCategories;

        /// <summary>
        /// The multi-disk categories of the system disk. When a high-priority disk type cannot be used, Auto Scaling automatically tries to create a system disk with the next priority disk category. Valid values see `system_disk_category`.
        /// </summary>
        public InputList<string> SystemDiskCategories
        {
            get => _systemDiskCategories ?? (_systemDiskCategories = new InputList<string>());
            set => _systemDiskCategories = value;
        }

        /// <summary>
        /// The category of the system disk for nodes. Default value: `cloud_efficiency`. Valid values:
        /// </summary>
        [Input("systemDiskCategory")]
        public Input<string>? SystemDiskCategory { get; set; }

        /// <summary>
        /// The encryption algorithm used by the system disk. Value range: aes-256.
        /// </summary>
        [Input("systemDiskEncryptAlgorithm")]
        public Input<string>? SystemDiskEncryptAlgorithm { get; set; }

        /// <summary>
        /// Whether to encrypt the system disk. Value range: `true`: encryption. `false`: Do not encrypt.
        /// </summary>
        [Input("systemDiskEncrypted")]
        public Input<bool>? SystemDiskEncrypted { get; set; }

        /// <summary>
        /// The ID of the KMS key used by the system disk.
        /// </summary>
        [Input("systemDiskKmsKey")]
        public Input<string>? SystemDiskKmsKey { get; set; }

        /// <summary>
        /// The system disk performance of the node takes effect only for the ESSD disk.
        /// - `PL0`: maximum random read/write IOPS 10000 for a single disk.
        /// - `PL1`: maximum random read/write IOPS 50000 for a single disk.
        /// - `PL2`: highest random read/write IOPS 100000 for a single disk.
        /// - `PL3`: maximum random read/write IOPS 1 million for a single disk.
        /// </summary>
        [Input("systemDiskPerformanceLevel")]
        public Input<string>? SystemDiskPerformanceLevel { get; set; }

        /// <summary>
        /// The predefined IOPS of a system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}. Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}. This parameter is supported only when `system_disk_category` is set to `cloud_auto`.
        /// </summary>
        [Input("systemDiskProvisionedIops")]
        public Input<int>? SystemDiskProvisionedIops { get; set; }

        /// <summary>
        /// The size of the system disk. Unit: GiB. The value of this parameter must be at least 1 and greater than or equal to the image size. Default value: 40 or the size of the image, whichever is larger.
        /// - Basic disk: 20 to 500.
        /// - ESSD (cloud_essd): The valid values vary based on the performance level of the ESSD. PL0 ESSD: 1 to 2048. PL1 ESSD: 20 to 2048. PL2 ESSD: 461 to 2048. PL3 ESSD: 1261 to 2048.
        /// - ESSD AutoPL disk (cloud_auto): 1 to 2048.
        /// - Other disk categories: 20 to 2048.
        /// </summary>
        [Input("systemDiskSize")]
        public Input<int>? SystemDiskSize { get; set; }

        /// <summary>
        /// The ID of the automatic snapshot policy used by the system disk.
        /// </summary>
        [Input("systemDiskSnapshotPolicyId")]
        public Input<string>? SystemDiskSnapshotPolicyId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Add tags only for ECS instances. The maximum length of the tag key is 128 characters. The tag key and value cannot start with aliyun or acs:, or contain https:// or http://.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.NodePoolTaintGetArgs>? _taints;

        /// <summary>
        /// A List of Kubernetes taints to assign to the nodes. Detailed below. More information in [Taints and Toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). See `taints` below.
        /// </summary>
        public InputList<Inputs.NodePoolTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.NodePoolTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// The configuration about confidential computing for the cluster. See `tee_config` below.
        /// </summary>
        [Input("teeConfig")]
        public Input<Inputs.NodePoolTeeConfigGetArgs>? TeeConfig { get; set; }

        /// <summary>
        /// Whether the node after expansion can be scheduled.
        /// </summary>
        [Input("unschedulable")]
        public Input<bool>? Unschedulable { get; set; }

        /// <summary>
        /// Synchronously update node labels and taints.
        /// </summary>
        [Input("updateNodes")]
        public Input<bool>? UpdateNodes { get; set; }

        /// <summary>
        /// Node custom data, base64-encoded.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vswitchIds")]
        private InputList<string>? _vswitchIds;

        /// <summary>
        /// The vswitches used by node pool workers.
        /// </summary>
        public InputList<string> VswitchIds
        {
            get => _vswitchIds ?? (_vswitchIds = new InputList<string>());
            set => _vswitchIds = value;
        }

        public NodePoolState()
        {
        }
        public static new NodePoolState Empty => new NodePoolState();
    }
}
