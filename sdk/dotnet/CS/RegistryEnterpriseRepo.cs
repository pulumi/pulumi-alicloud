// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.CS
{
    /// <summary>
    /// Provides a Container Registry Enterprise Edition Repository resource.
    /// 
    /// For information about Container Registry Enterprise Edition Repository and how to use it, see [What is Repository](https://www.alibabacloud.com/help/en/acr/developer-reference/api-cr-2018-12-01-createrepository)
    /// 
    /// &gt; **NOTE:** Available since v1.86.0.
    /// 
    /// &gt; **NOTE:** You need to set your registry password in Container Registry Enterprise Edition console before use this resource.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000000,
    ///         Max = 99999999,
    ///     });
    /// 
    ///     var defaultRegistryEnterpriseInstance = new AliCloud.CR.RegistryEnterpriseInstance("default", new()
    ///     {
    ///         PaymentType = "Subscription",
    ///         Period = 1,
    ///         RenewPeriod = 0,
    ///         RenewalStatus = "ManualRenewal",
    ///         InstanceType = "Advanced",
    ///         InstanceName = $"{name}-{@default.Result}",
    ///     });
    /// 
    ///     var defaultRegistryEnterpriseNamespace = new AliCloud.CS.RegistryEnterpriseNamespace("default", new()
    ///     {
    ///         InstanceId = defaultRegistryEnterpriseInstance.Id,
    ///         Name = $"{name}-{@default.Result}",
    ///         AutoCreate = false,
    ///         DefaultVisibility = "PUBLIC",
    ///     });
    /// 
    ///     var example = new AliCloud.CS.RegistryEnterpriseRepo("example", new()
    ///     {
    ///         InstanceId = defaultRegistryEnterpriseInstance.Id,
    ///         Namespace = defaultRegistryEnterpriseNamespace.Name,
    ///         Name = $"{name}-{@default.Result}",
    ///         RepoType = "PUBLIC",
    ///         Summary = "this is summary of my new repo",
    ///         Detail = "this is a public repo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Container Registry Enterprise Edition Repository can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:cs/registryEnterpriseRepo:RegistryEnterpriseRepo example &lt;instance_id&gt;:&lt;namespace&gt;:&lt;name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:cs/registryEnterpriseRepo:RegistryEnterpriseRepo")]
    public partial class RegistryEnterpriseRepo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the repository.
        /// </summary>
        [Output("detail")]
        public Output<string?> Detail { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry Enterprise Edition instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the image repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the namespace to which the image repository belongs.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// The ID of the repository.
        /// </summary>
        [Output("repoId")]
        public Output<string> RepoId { get; private set; } = null!;

        /// <summary>
        /// The type of the repository. Valid values:
        /// - `PUBLIC`: The repository is a public repository.
        /// - `PRIVATE`: The repository is a private repository.
        /// </summary>
        [Output("repoType")]
        public Output<string> RepoType { get; private set; } = null!;

        /// <summary>
        /// The summary about the repository.
        /// </summary>
        [Output("summary")]
        public Output<string> Summary { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryEnterpriseRepo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryEnterpriseRepo(string name, RegistryEnterpriseRepoArgs args, CustomResourceOptions? options = null)
            : base("alicloud:cs/registryEnterpriseRepo:RegistryEnterpriseRepo", name, args ?? new RegistryEnterpriseRepoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryEnterpriseRepo(string name, Input<string> id, RegistryEnterpriseRepoState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:cs/registryEnterpriseRepo:RegistryEnterpriseRepo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryEnterpriseRepo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryEnterpriseRepo Get(string name, Input<string> id, RegistryEnterpriseRepoState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryEnterpriseRepo(name, id, state, options);
        }
    }

    public sealed class RegistryEnterpriseRepoArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the repository.
        /// </summary>
        [Input("detail")]
        public Input<string>? Detail { get; set; }

        /// <summary>
        /// The ID of the Container Registry Enterprise Edition instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the image repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the namespace to which the image repository belongs.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The type of the repository. Valid values:
        /// - `PUBLIC`: The repository is a public repository.
        /// - `PRIVATE`: The repository is a private repository.
        /// </summary>
        [Input("repoType", required: true)]
        public Input<string> RepoType { get; set; } = null!;

        /// <summary>
        /// The summary about the repository.
        /// </summary>
        [Input("summary", required: true)]
        public Input<string> Summary { get; set; } = null!;

        public RegistryEnterpriseRepoArgs()
        {
        }
        public static new RegistryEnterpriseRepoArgs Empty => new RegistryEnterpriseRepoArgs();
    }

    public sealed class RegistryEnterpriseRepoState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the repository.
        /// </summary>
        [Input("detail")]
        public Input<string>? Detail { get; set; }

        /// <summary>
        /// The ID of the Container Registry Enterprise Edition instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of the image repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the namespace to which the image repository belongs.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The ID of the repository.
        /// </summary>
        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        /// <summary>
        /// The type of the repository. Valid values:
        /// - `PUBLIC`: The repository is a public repository.
        /// - `PRIVATE`: The repository is a private repository.
        /// </summary>
        [Input("repoType")]
        public Input<string>? RepoType { get; set; }

        /// <summary>
        /// The summary about the repository.
        /// </summary>
        [Input("summary")]
        public Input<string>? Summary { get; set; }

        public RegistryEnterpriseRepoState()
        {
        }
        public static new RegistryEnterpriseRepoState Empty => new RegistryEnterpriseRepoState();
    }
}
