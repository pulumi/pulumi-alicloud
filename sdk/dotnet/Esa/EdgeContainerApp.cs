// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    /// <summary>
    /// Provides a ESA Edge Container App resource.
    /// 
    /// For information about ESA Edge Container App and how to use it, see [What is Edge Container App](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateEdgeContainerApp).
    /// 
    /// &gt; **NOTE:** Available since v1.247.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tfexample";
    ///     var @default = new AliCloud.Esa.EdgeContainerApp("default", new()
    ///     {
    ///         TargetPort = 3000,
    ///         HealthCheckHost = "example.com",
    ///         Remarks = name,
    ///         HealthCheckPort = 80,
    ///         HealthCheckUri = "/",
    ///         HealthCheckTimeout = 3,
    ///         HealthCheckMethod = "HEAD",
    ///         HealthCheckHttpCode = "http_2xx",
    ///         HealthCheckFailTimes = 5,
    ///         ServicePort = 80,
    ///         HealthCheckInterval = 5,
    ///         HealthCheckSuccTimes = 2,
    ///         EdgeContainerAppName = name,
    ///         HealthCheckType = "l7",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ESA Edge Container App can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:esa/edgeContainerApp:EdgeContainerApp example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:esa/edgeContainerApp:EdgeContainerApp")]
    public partial class EdgeContainerApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the application was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
        /// </summary>
        [Output("edgeContainerAppName")]
        public Output<string> EdgeContainerAppName { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        /// </summary>
        [Output("healthCheckFailTimes")]
        public Output<int?> HealthCheckFailTimes { get; private set; } = null!;

        /// <summary>
        /// The health check type. By default, this parameter is left empty.
        /// 
        /// Valid values:
        /// </summary>
        [Output("healthCheckHost")]
        public Output<string?> HealthCheckHost { get; private set; } = null!;

        /// <summary>
        /// The domain name that is used for health checks. This parameter is empty by default.
        /// </summary>
        [Output("healthCheckHttpCode")]
        public Output<string> HealthCheckHttpCode { get; private set; } = null!;

        /// <summary>
        /// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
        /// Valid values: `1` to `100`.
        /// Default value: `3`.
        /// </summary>
        [Output("healthCheckInterval")]
        public Output<int> HealthCheckInterval { get; private set; } = null!;

        /// <summary>
        /// The HTTP status code returned for a successful health check. Valid values:
        /// 
        /// - **http\_2xx** (default)
        /// - **http\_3xx**
        /// </summary>
        [Output("healthCheckMethod")]
        public Output<string> HealthCheckMethod { get; private set; } = null!;

        /// <summary>
        /// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
        /// </summary>
        [Output("healthCheckPort")]
        public Output<int> HealthCheckPort { get; private set; } = null!;

        /// <summary>
        /// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
        /// </summary>
        [Output("healthCheckSuccTimes")]
        public Output<int> HealthCheckSuccTimes { get; private set; } = null!;

        /// <summary>
        /// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        /// </summary>
        [Output("healthCheckTimeout")]
        public Output<int> HealthCheckTimeout { get; private set; } = null!;

        /// <summary>
        /// The remarks. This parameter is empty by default.
        /// </summary>
        [Output("healthCheckType")]
        public Output<string> HealthCheckType { get; private set; } = null!;

        /// <summary>
        /// The HTTP request method for health checks. Valid values:
        /// 
        /// - `HEAD` (default): requests the headers of the resource.
        /// - `GET`: requests the specified resource and returns both the headers and entity body.
        /// </summary>
        [Output("healthCheckUri")]
        public Output<string> HealthCheckUri { get; private set; } = null!;

        /// <summary>
        /// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        /// </summary>
        [Output("remarks")]
        public Output<string?> Remarks { get; private set; } = null!;

        /// <summary>
        /// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        /// </summary>
        [Output("servicePort")]
        public Output<int> ServicePort { get; private set; } = null!;

        /// <summary>
        /// The status of the application.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The server port. Valid values: 1 to 65535.
        /// </summary>
        [Output("targetPort")]
        public Output<int> TargetPort { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeContainerApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeContainerApp(string name, EdgeContainerAppArgs args, CustomResourceOptions? options = null)
            : base("alicloud:esa/edgeContainerApp:EdgeContainerApp", name, args ?? new EdgeContainerAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeContainerApp(string name, Input<string> id, EdgeContainerAppState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:esa/edgeContainerApp:EdgeContainerApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeContainerApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeContainerApp Get(string name, Input<string> id, EdgeContainerAppState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeContainerApp(name, id, state, options);
        }
    }

    public sealed class EdgeContainerAppArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
        /// </summary>
        [Input("edgeContainerAppName", required: true)]
        public Input<string> EdgeContainerAppName { get; set; } = null!;

        /// <summary>
        /// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        /// </summary>
        [Input("healthCheckFailTimes")]
        public Input<int>? HealthCheckFailTimes { get; set; }

        /// <summary>
        /// The health check type. By default, this parameter is left empty.
        /// 
        /// Valid values:
        /// </summary>
        [Input("healthCheckHost")]
        public Input<string>? HealthCheckHost { get; set; }

        /// <summary>
        /// The domain name that is used for health checks. This parameter is empty by default.
        /// </summary>
        [Input("healthCheckHttpCode")]
        public Input<string>? HealthCheckHttpCode { get; set; }

        /// <summary>
        /// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
        /// Valid values: `1` to `100`.
        /// Default value: `3`.
        /// </summary>
        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        /// <summary>
        /// The HTTP status code returned for a successful health check. Valid values:
        /// 
        /// - **http\_2xx** (default)
        /// - **http\_3xx**
        /// </summary>
        [Input("healthCheckMethod")]
        public Input<string>? HealthCheckMethod { get; set; }

        /// <summary>
        /// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
        /// </summary>
        [Input("healthCheckPort")]
        public Input<int>? HealthCheckPort { get; set; }

        /// <summary>
        /// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
        /// </summary>
        [Input("healthCheckSuccTimes")]
        public Input<int>? HealthCheckSuccTimes { get; set; }

        /// <summary>
        /// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        /// </summary>
        [Input("healthCheckTimeout")]
        public Input<int>? HealthCheckTimeout { get; set; }

        /// <summary>
        /// The remarks. This parameter is empty by default.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// The HTTP request method for health checks. Valid values:
        /// 
        /// - `HEAD` (default): requests the headers of the resource.
        /// - `GET`: requests the specified resource and returns both the headers and entity body.
        /// </summary>
        [Input("healthCheckUri")]
        public Input<string>? HealthCheckUri { get; set; }

        /// <summary>
        /// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        /// </summary>
        [Input("remarks")]
        public Input<string>? Remarks { get; set; }

        /// <summary>
        /// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        /// </summary>
        [Input("servicePort", required: true)]
        public Input<int> ServicePort { get; set; } = null!;

        /// <summary>
        /// The server port. Valid values: 1 to 65535.
        /// </summary>
        [Input("targetPort", required: true)]
        public Input<int> TargetPort { get; set; } = null!;

        public EdgeContainerAppArgs()
        {
        }
        public static new EdgeContainerAppArgs Empty => new EdgeContainerAppArgs();
    }

    public sealed class EdgeContainerAppState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time when the application was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
        /// </summary>
        [Input("edgeContainerAppName")]
        public Input<string>? EdgeContainerAppName { get; set; }

        /// <summary>
        /// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        /// </summary>
        [Input("healthCheckFailTimes")]
        public Input<int>? HealthCheckFailTimes { get; set; }

        /// <summary>
        /// The health check type. By default, this parameter is left empty.
        /// 
        /// Valid values:
        /// </summary>
        [Input("healthCheckHost")]
        public Input<string>? HealthCheckHost { get; set; }

        /// <summary>
        /// The domain name that is used for health checks. This parameter is empty by default.
        /// </summary>
        [Input("healthCheckHttpCode")]
        public Input<string>? HealthCheckHttpCode { get; set; }

        /// <summary>
        /// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
        /// Valid values: `1` to `100`.
        /// Default value: `3`.
        /// </summary>
        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        /// <summary>
        /// The HTTP status code returned for a successful health check. Valid values:
        /// 
        /// - **http\_2xx** (default)
        /// - **http\_3xx**
        /// </summary>
        [Input("healthCheckMethod")]
        public Input<string>? HealthCheckMethod { get; set; }

        /// <summary>
        /// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
        /// </summary>
        [Input("healthCheckPort")]
        public Input<int>? HealthCheckPort { get; set; }

        /// <summary>
        /// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
        /// </summary>
        [Input("healthCheckSuccTimes")]
        public Input<int>? HealthCheckSuccTimes { get; set; }

        /// <summary>
        /// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        /// </summary>
        [Input("healthCheckTimeout")]
        public Input<int>? HealthCheckTimeout { get; set; }

        /// <summary>
        /// The remarks. This parameter is empty by default.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// The HTTP request method for health checks. Valid values:
        /// 
        /// - `HEAD` (default): requests the headers of the resource.
        /// - `GET`: requests the specified resource and returns both the headers and entity body.
        /// </summary>
        [Input("healthCheckUri")]
        public Input<string>? HealthCheckUri { get; set; }

        /// <summary>
        /// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        /// </summary>
        [Input("remarks")]
        public Input<string>? Remarks { get; set; }

        /// <summary>
        /// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        /// </summary>
        [Input("servicePort")]
        public Input<int>? ServicePort { get; set; }

        /// <summary>
        /// The status of the application.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The server port. Valid values: 1 to 65535.
        /// </summary>
        [Input("targetPort")]
        public Input<int>? TargetPort { get; set; }

        public EdgeContainerAppState()
        {
        }
        public static new EdgeContainerAppState Empty => new EdgeContainerAppState();
    }
}
