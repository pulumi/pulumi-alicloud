// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    /// <summary>
    /// Provides a ESA Certificate resource.
    /// 
    /// For information about ESA Certificate and how to use it, see [What is Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/SetCertificate).
    /// 
    /// &gt; **NOTE:** Available since v1.244.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
    ///     {
    ///         PlanSubscribeType = "enterpriseplan",
    ///         SiteName = "gositecdn.cn",
    ///     });
    /// 
    ///     var defaultCertificate = new AliCloud.Esa.Certificate("default", new()
    ///     {
    ///         CreatedType = "free",
    ///         Domains = "101.gositecdn.cn",
    ///         SiteId = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.Id)),
    ///         Type = "lets_encrypt",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ESA Certificate can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:esa/certificate:Certificate example &lt;site_id&gt;:&lt;cert_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:esa/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cloud certificate ID.
        /// </summary>
        [Output("casId")]
        public Output<string?> CasId { get; private set; } = null!;

        /// <summary>
        /// The certificate Id.
        /// </summary>
        [Output("certId")]
        public Output<string> CertId { get; private set; } = null!;

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Output("certName")]
        public Output<string> CertName { get; private set; } = null!;

        /// <summary>
        /// Certificate content.
        /// </summary>
        [Output("certificate")]
        public Output<string> CertificateValue { get; private set; } = null!;

        /// <summary>
        /// Creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The certificate type.
        /// - cas (Certificate Center Certificate)
        /// - upload (custom upload certificate)
        /// - free( Free certificate).
        /// </summary>
        [Output("createdType")]
        public Output<string> CreatedType { get; private set; } = null!;

        /// <summary>
        /// A list of domain names. Multiple domain names are separated by commas.
        /// </summary>
        [Output("domains")]
        public Output<string?> Domains { get; private set; } = null!;

        /// <summary>
        /// The certificate private key.
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Geographical information.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The site ID, which can be obtained by calling the ListSites interface.
        /// </summary>
        [Output("siteId")]
        public Output<int> SiteId { get; private set; } = null!;

        /// <summary>
        /// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("alicloud:esa/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:esa/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud certificate ID.
        /// </summary>
        [Input("casId")]
        public Input<string>? CasId { get; set; }

        /// <summary>
        /// The certificate Id.
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        /// <summary>
        /// Certificate content.
        /// </summary>
        [Input("certificate")]
        public Input<string>? CertificateValue { get; set; }

        /// <summary>
        /// The certificate type.
        /// - cas (Certificate Center Certificate)
        /// - upload (custom upload certificate)
        /// - free( Free certificate).
        /// </summary>
        [Input("createdType", required: true)]
        public Input<string> CreatedType { get; set; } = null!;

        /// <summary>
        /// A list of domain names. Multiple domain names are separated by commas.
        /// </summary>
        [Input("domains")]
        public Input<string>? Domains { get; set; }

        /// <summary>
        /// The certificate private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Geographical information.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The site ID, which can be obtained by calling the ListSites interface.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<int> SiteId { get; set; } = null!;

        /// <summary>
        /// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud certificate ID.
        /// </summary>
        [Input("casId")]
        public Input<string>? CasId { get; set; }

        /// <summary>
        /// The certificate Id.
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        /// <summary>
        /// Certificate content.
        /// </summary>
        [Input("certificate")]
        public Input<string>? CertificateValue { get; set; }

        /// <summary>
        /// Creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The certificate type.
        /// - cas (Certificate Center Certificate)
        /// - upload (custom upload certificate)
        /// - free( Free certificate).
        /// </summary>
        [Input("createdType")]
        public Input<string>? CreatedType { get; set; }

        /// <summary>
        /// A list of domain names. Multiple domain names are separated by commas.
        /// </summary>
        [Input("domains")]
        public Input<string>? Domains { get; set; }

        /// <summary>
        /// The certificate private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Geographical information.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The site ID, which can be obtained by calling the ListSites interface.
        /// </summary>
        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        /// <summary>
        /// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
