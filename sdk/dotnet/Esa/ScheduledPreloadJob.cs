// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    /// <summary>
    /// Provides a ESA Scheduled Preload Job resource.
    /// 
    /// For information about ESA Scheduled Preload Job and how to use it, see [What is Scheduled Preload Job](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateScheduledPreloadJob).
    /// 
    /// &gt; **NOTE:** Available since v1.248.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
    ///     {
    ///         PlanSubscribeType = "enterpriseplan",
    ///     });
    /// 
    ///     var defaultSite = new AliCloud.Esa.Site("default", new()
    ///     {
    ///         SiteName = "terraform.cn",
    ///         InstanceId = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.InstanceId)),
    ///         Coverage = "overseas",
    ///         AccessType = "NS",
    ///     });
    /// 
    ///     var defaultScheduledPreloadJob = new AliCloud.Esa.ScheduledPreloadJob("default", new()
    ///     {
    ///         InsertWay = "textBox",
    ///         SiteId = defaultSite.Id,
    ///         ScheduledPreloadJobName = "example_scheduledpreloadexecution_job",
    ///         UrlList = "http://example.gositecdn.cn/example/example.txt",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ESA Scheduled Preload Job can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob example &lt;site_id&gt;:&lt;scheduled_preload_job_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob")]
    public partial class ScheduledPreloadJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the task was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The method to submit the URLs to be prefetched.
        /// </summary>
        [Output("insertWay")]
        public Output<string> InsertWay { get; private set; } = null!;

        /// <summary>
        /// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        /// </summary>
        [Output("ossUrl")]
        public Output<string?> OssUrl { get; private set; } = null!;

        /// <summary>
        /// The ID of the prefetch task.
        /// </summary>
        [Output("scheduledPreloadJobId")]
        public Output<string> ScheduledPreloadJobId { get; private set; } = null!;

        /// <summary>
        /// The task name.
        /// </summary>
        [Output("scheduledPreloadJobName")]
        public Output<string> ScheduledPreloadJobName { get; private set; } = null!;

        /// <summary>
        /// The site ID.
        /// </summary>
        [Output("siteId")]
        public Output<int> SiteId { get; private set; } = null!;

        /// <summary>
        /// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        /// </summary>
        [Output("urlList")]
        public Output<string?> UrlList { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledPreloadJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledPreloadJob(string name, ScheduledPreloadJobArgs args, CustomResourceOptions? options = null)
            : base("alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob", name, args ?? new ScheduledPreloadJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduledPreloadJob(string name, Input<string> id, ScheduledPreloadJobState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledPreloadJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledPreloadJob Get(string name, Input<string> id, ScheduledPreloadJobState? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduledPreloadJob(name, id, state, options);
        }
    }

    public sealed class ScheduledPreloadJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The method to submit the URLs to be prefetched.
        /// </summary>
        [Input("insertWay", required: true)]
        public Input<string> InsertWay { get; set; } = null!;

        /// <summary>
        /// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        /// </summary>
        [Input("ossUrl")]
        public Input<string>? OssUrl { get; set; }

        /// <summary>
        /// The task name.
        /// </summary>
        [Input("scheduledPreloadJobName", required: true)]
        public Input<string> ScheduledPreloadJobName { get; set; } = null!;

        /// <summary>
        /// The site ID.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<int> SiteId { get; set; } = null!;

        /// <summary>
        /// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        /// </summary>
        [Input("urlList")]
        public Input<string>? UrlList { get; set; }

        public ScheduledPreloadJobArgs()
        {
        }
        public static new ScheduledPreloadJobArgs Empty => new ScheduledPreloadJobArgs();
    }

    public sealed class ScheduledPreloadJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time when the task was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The method to submit the URLs to be prefetched.
        /// </summary>
        [Input("insertWay")]
        public Input<string>? InsertWay { get; set; }

        /// <summary>
        /// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        /// </summary>
        [Input("ossUrl")]
        public Input<string>? OssUrl { get; set; }

        /// <summary>
        /// The ID of the prefetch task.
        /// </summary>
        [Input("scheduledPreloadJobId")]
        public Input<string>? ScheduledPreloadJobId { get; set; }

        /// <summary>
        /// The task name.
        /// </summary>
        [Input("scheduledPreloadJobName")]
        public Input<string>? ScheduledPreloadJobName { get; set; }

        /// <summary>
        /// The site ID.
        /// </summary>
        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        /// <summary>
        /// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        /// </summary>
        [Input("urlList")]
        public Input<string>? UrlList { get; set; }

        public ScheduledPreloadJobState()
        {
        }
        public static new ScheduledPreloadJobState Empty => new ScheduledPreloadJobState();
    }
}
