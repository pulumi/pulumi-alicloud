// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    /// <summary>
    /// Provides a ESA Cache Rule resource.
    /// 
    /// For information about ESA Cache Rule and how to use it, see [What is Cache Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCacheRule).
    /// 
    /// &gt; **NOTE:** Available since v1.244.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
    ///     {
    ///         PlanSubscribeType = "enterpriseplan",
    ///     });
    /// 
    ///     var defaultCacheRule = new AliCloud.Esa.CacheRule("default", new()
    ///     {
    ///         UserDeviceType = "off",
    ///         BrowserCacheMode = "no_cache",
    ///         UserLanguage = "off",
    ///         CheckPresenceHeader = "headername",
    ///         IncludeCookie = "cookie_exapmle",
    ///         EdgeCacheMode = "follow_origin",
    ///         AdditionalCacheablePorts = "2053",
    ///         RuleName = "rule_example",
    ///         EdgeStatusCodeCacheTtl = "300",
    ///         BrowserCacheTtl = "300",
    ///         QueryString = "example",
    ///         UserGeo = "off",
    ///         SortQueryStringForCache = "off",
    ///         CheckPresenceCookie = "cookiename",
    ///         CacheReserveEligibility = "bypass_cache_reserve",
    ///         QueryStringMode = "ignore_all",
    ///         Rule = "http.host eq \"video.example.com\"",
    ///         CacheDeceptionArmor = "off",
    ///         SiteId = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.Id)),
    ///         BypassCache = "cache_all",
    ///         EdgeCacheTtl = "300",
    ///         RuleEnable = "off",
    ///         SiteVersion = 0,
    ///         IncludeHeader = "example",
    ///         ServeStale = "off",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ESA Cache Rule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:esa/cacheRule:CacheRule example &lt;site_id&gt;:&lt;cache_rule_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:esa/cacheRule:CacheRule")]
    public partial class CacheRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
        /// </summary>
        [Output("additionalCacheablePorts")]
        public Output<string?> AdditionalCacheablePorts { get; private set; } = null!;

        /// <summary>
        /// Browser cache mode. Possible values:
        /// </summary>
        [Output("browserCacheMode")]
        public Output<string?> BrowserCacheMode { get; private set; } = null!;

        /// <summary>
        /// Browser cache expiration time in seconds.
        /// </summary>
        [Output("browserCacheTtl")]
        public Output<string?> BrowserCacheTtl { get; private set; } = null!;

        /// <summary>
        /// Set the bypass cache mode. Possible values:
        /// </summary>
        [Output("bypassCache")]
        public Output<string?> BypassCache { get; private set; } = null!;

        /// <summary>
        /// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
        /// </summary>
        [Output("cacheDeceptionArmor")]
        public Output<string?> CacheDeceptionArmor { get; private set; } = null!;

        /// <summary>
        /// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
        /// </summary>
        [Output("cacheReserveEligibility")]
        public Output<string?> CacheReserveEligibility { get; private set; } = null!;

        /// <summary>
        /// Cache Rule Id.
        /// </summary>
        [Output("cacheRuleId")]
        public Output<int> CacheRuleId { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
        /// </summary>
        [Output("checkPresenceCookie")]
        public Output<string?> CheckPresenceCookie { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
        /// </summary>
        [Output("checkPresenceHeader")]
        public Output<string?> CheckPresenceHeader { get; private set; } = null!;

        /// <summary>
        /// Edge cache mode. Possible values:
        /// </summary>
        [Output("edgeCacheMode")]
        public Output<string?> EdgeCacheMode { get; private set; } = null!;

        /// <summary>
        /// Edge cache expiration time in seconds.
        /// </summary>
        [Output("edgeCacheTtl")]
        public Output<string?> EdgeCacheTtl { get; private set; } = null!;

        /// <summary>
        /// Status code cache expiration time in seconds.
        /// </summary>
        [Output("edgeStatusCodeCacheTtl")]
        public Output<string?> EdgeStatusCodeCacheTtl { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Output("includeCookie")]
        public Output<string?> IncludeCookie { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Output("includeHeader")]
        public Output<string?> IncludeHeader { get; private set; } = null!;

        /// <summary>
        /// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
        /// </summary>
        [Output("queryString")]
        public Output<string?> QueryString { get; private set; } = null!;

        /// <summary>
        /// The processing mode for query strings when generating the cache key. Possible values:
        /// </summary>
        [Output("queryStringMode")]
        public Output<string?> QueryStringMode { get; private set; } = null!;

        /// <summary>
        /// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        /// - Match all incoming requests: value set to true.
        /// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
        /// </summary>
        [Output("rule")]
        public Output<string?> Rule { get; private set; } = null!;

        /// <summary>
        /// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        /// </summary>
        [Output("ruleEnable")]
        public Output<string?> RuleEnable { get; private set; } = null!;

        /// <summary>
        /// Rule name. When adding global configuration, this parameter does not need to be set.
        /// </summary>
        [Output("ruleName")]
        public Output<string?> RuleName { get; private set; } = null!;

        /// <summary>
        /// Order of rule execution. The smaller the value, the higher the priority for execution.
        /// </summary>
        [Output("sequence")]
        public Output<int> Sequence { get; private set; } = null!;

        /// <summary>
        /// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
        /// </summary>
        [Output("serveStale")]
        public Output<string?> ServeStale { get; private set; } = null!;

        /// <summary>
        /// The site ID, which can be obtained by calling the [ListSites] API.
        /// </summary>
        [Output("siteId")]
        public Output<int> SiteId { get; private set; } = null!;

        /// <summary>
        /// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        /// </summary>
        [Output("siteVersion")]
        public Output<int?> SiteVersion { get; private set; } = null!;

        /// <summary>
        /// Query string sorting, disabled by default. Possible values:
        /// </summary>
        [Output("sortQueryStringForCache")]
        public Output<string?> SortQueryStringForCache { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, add the client device type. Possible values:
        /// </summary>
        [Output("userDeviceType")]
        public Output<string?> UserDeviceType { get; private set; } = null!;

        /// <summary>
        /// When generating the cache key, add the client's geographic location. Possible values:
        /// </summary>
        [Output("userGeo")]
        public Output<string?> UserGeo { get; private set; } = null!;

        /// <summary>
        /// When generating cache keys, include the client's language type. Possible values:
        /// </summary>
        [Output("userLanguage")]
        public Output<string?> UserLanguage { get; private set; } = null!;


        /// <summary>
        /// Create a CacheRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CacheRule(string name, CacheRuleArgs args, CustomResourceOptions? options = null)
            : base("alicloud:esa/cacheRule:CacheRule", name, args ?? new CacheRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CacheRule(string name, Input<string> id, CacheRuleState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:esa/cacheRule:CacheRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CacheRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CacheRule Get(string name, Input<string> id, CacheRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CacheRule(name, id, state, options);
        }
    }

    public sealed class CacheRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
        /// </summary>
        [Input("additionalCacheablePorts")]
        public Input<string>? AdditionalCacheablePorts { get; set; }

        /// <summary>
        /// Browser cache mode. Possible values:
        /// </summary>
        [Input("browserCacheMode")]
        public Input<string>? BrowserCacheMode { get; set; }

        /// <summary>
        /// Browser cache expiration time in seconds.
        /// </summary>
        [Input("browserCacheTtl")]
        public Input<string>? BrowserCacheTtl { get; set; }

        /// <summary>
        /// Set the bypass cache mode. Possible values:
        /// </summary>
        [Input("bypassCache")]
        public Input<string>? BypassCache { get; set; }

        /// <summary>
        /// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
        /// </summary>
        [Input("cacheDeceptionArmor")]
        public Input<string>? CacheDeceptionArmor { get; set; }

        /// <summary>
        /// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
        /// </summary>
        [Input("cacheReserveEligibility")]
        public Input<string>? CacheReserveEligibility { get; set; }

        /// <summary>
        /// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
        /// </summary>
        [Input("checkPresenceCookie")]
        public Input<string>? CheckPresenceCookie { get; set; }

        /// <summary>
        /// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
        /// </summary>
        [Input("checkPresenceHeader")]
        public Input<string>? CheckPresenceHeader { get; set; }

        /// <summary>
        /// Edge cache mode. Possible values:
        /// </summary>
        [Input("edgeCacheMode")]
        public Input<string>? EdgeCacheMode { get; set; }

        /// <summary>
        /// Edge cache expiration time in seconds.
        /// </summary>
        [Input("edgeCacheTtl")]
        public Input<string>? EdgeCacheTtl { get; set; }

        /// <summary>
        /// Status code cache expiration time in seconds.
        /// </summary>
        [Input("edgeStatusCodeCacheTtl")]
        public Input<string>? EdgeStatusCodeCacheTtl { get; set; }

        /// <summary>
        /// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("includeCookie")]
        public Input<string>? IncludeCookie { get; set; }

        /// <summary>
        /// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("includeHeader")]
        public Input<string>? IncludeHeader { get; set; }

        /// <summary>
        /// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        /// <summary>
        /// The processing mode for query strings when generating the cache key. Possible values:
        /// </summary>
        [Input("queryStringMode")]
        public Input<string>? QueryStringMode { get; set; }

        /// <summary>
        /// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        /// - Match all incoming requests: value set to true.
        /// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
        /// </summary>
        [Input("rule")]
        public Input<string>? Rule { get; set; }

        /// <summary>
        /// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        /// </summary>
        [Input("ruleEnable")]
        public Input<string>? RuleEnable { get; set; }

        /// <summary>
        /// Rule name. When adding global configuration, this parameter does not need to be set.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Order of rule execution. The smaller the value, the higher the priority for execution.
        /// </summary>
        [Input("sequence")]
        public Input<int>? Sequence { get; set; }

        /// <summary>
        /// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
        /// </summary>
        [Input("serveStale")]
        public Input<string>? ServeStale { get; set; }

        /// <summary>
        /// The site ID, which can be obtained by calling the [ListSites] API.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<int> SiteId { get; set; } = null!;

        /// <summary>
        /// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        /// </summary>
        [Input("siteVersion")]
        public Input<int>? SiteVersion { get; set; }

        /// <summary>
        /// Query string sorting, disabled by default. Possible values:
        /// </summary>
        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        /// <summary>
        /// When generating the cache key, add the client device type. Possible values:
        /// </summary>
        [Input("userDeviceType")]
        public Input<string>? UserDeviceType { get; set; }

        /// <summary>
        /// When generating the cache key, add the client's geographic location. Possible values:
        /// </summary>
        [Input("userGeo")]
        public Input<string>? UserGeo { get; set; }

        /// <summary>
        /// When generating cache keys, include the client's language type. Possible values:
        /// </summary>
        [Input("userLanguage")]
        public Input<string>? UserLanguage { get; set; }

        public CacheRuleArgs()
        {
        }
        public static new CacheRuleArgs Empty => new CacheRuleArgs();
    }

    public sealed class CacheRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
        /// </summary>
        [Input("additionalCacheablePorts")]
        public Input<string>? AdditionalCacheablePorts { get; set; }

        /// <summary>
        /// Browser cache mode. Possible values:
        /// </summary>
        [Input("browserCacheMode")]
        public Input<string>? BrowserCacheMode { get; set; }

        /// <summary>
        /// Browser cache expiration time in seconds.
        /// </summary>
        [Input("browserCacheTtl")]
        public Input<string>? BrowserCacheTtl { get; set; }

        /// <summary>
        /// Set the bypass cache mode. Possible values:
        /// </summary>
        [Input("bypassCache")]
        public Input<string>? BypassCache { get; set; }

        /// <summary>
        /// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
        /// </summary>
        [Input("cacheDeceptionArmor")]
        public Input<string>? CacheDeceptionArmor { get; set; }

        /// <summary>
        /// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
        /// </summary>
        [Input("cacheReserveEligibility")]
        public Input<string>? CacheReserveEligibility { get; set; }

        /// <summary>
        /// Cache Rule Id.
        /// </summary>
        [Input("cacheRuleId")]
        public Input<int>? CacheRuleId { get; set; }

        /// <summary>
        /// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
        /// </summary>
        [Input("checkPresenceCookie")]
        public Input<string>? CheckPresenceCookie { get; set; }

        /// <summary>
        /// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
        /// </summary>
        [Input("checkPresenceHeader")]
        public Input<string>? CheckPresenceHeader { get; set; }

        /// <summary>
        /// Edge cache mode. Possible values:
        /// </summary>
        [Input("edgeCacheMode")]
        public Input<string>? EdgeCacheMode { get; set; }

        /// <summary>
        /// Edge cache expiration time in seconds.
        /// </summary>
        [Input("edgeCacheTtl")]
        public Input<string>? EdgeCacheTtl { get; set; }

        /// <summary>
        /// Status code cache expiration time in seconds.
        /// </summary>
        [Input("edgeStatusCodeCacheTtl")]
        public Input<string>? EdgeStatusCodeCacheTtl { get; set; }

        /// <summary>
        /// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("includeCookie")]
        public Input<string>? IncludeCookie { get; set; }

        /// <summary>
        /// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("includeHeader")]
        public Input<string>? IncludeHeader { get; set; }

        /// <summary>
        /// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
        /// </summary>
        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        /// <summary>
        /// The processing mode for query strings when generating the cache key. Possible values:
        /// </summary>
        [Input("queryStringMode")]
        public Input<string>? QueryStringMode { get; set; }

        /// <summary>
        /// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        /// - Match all incoming requests: value set to true.
        /// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
        /// </summary>
        [Input("rule")]
        public Input<string>? Rule { get; set; }

        /// <summary>
        /// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        /// </summary>
        [Input("ruleEnable")]
        public Input<string>? RuleEnable { get; set; }

        /// <summary>
        /// Rule name. When adding global configuration, this parameter does not need to be set.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Order of rule execution. The smaller the value, the higher the priority for execution.
        /// </summary>
        [Input("sequence")]
        public Input<int>? Sequence { get; set; }

        /// <summary>
        /// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
        /// </summary>
        [Input("serveStale")]
        public Input<string>? ServeStale { get; set; }

        /// <summary>
        /// The site ID, which can be obtained by calling the [ListSites] API.
        /// </summary>
        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        /// <summary>
        /// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        /// </summary>
        [Input("siteVersion")]
        public Input<int>? SiteVersion { get; set; }

        /// <summary>
        /// Query string sorting, disabled by default. Possible values:
        /// </summary>
        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        /// <summary>
        /// When generating the cache key, add the client device type. Possible values:
        /// </summary>
        [Input("userDeviceType")]
        public Input<string>? UserDeviceType { get; set; }

        /// <summary>
        /// When generating the cache key, add the client's geographic location. Possible values:
        /// </summary>
        [Input("userGeo")]
        public Input<string>? UserGeo { get; set; }

        /// <summary>
        /// When generating cache keys, include the client's language type. Possible values:
        /// </summary>
        [Input("userLanguage")]
        public Input<string>? UserLanguage { get; set; }

        public CacheRuleState()
        {
        }
        public static new CacheRuleState Empty => new CacheRuleState();
    }
}
