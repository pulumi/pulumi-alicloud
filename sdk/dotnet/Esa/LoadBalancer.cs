// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    /// <summary>
    /// Provides a ESA Load Balancer resource.
    /// 
    /// For information about ESA Load Balancer and how to use it, see [What is Load Balancer](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateLoadBalancer).
    /// 
    /// &gt; **NOTE:** Available since v1.262.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
    ///     {
    ///         PlanSubscribeType = "enterpriseplan",
    ///     });
    /// 
    ///     var defaultInteger = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var resourceSiteOriginPool = new AliCloud.Esa.Site("resource_Site_OriginPool", new()
    ///     {
    ///         SiteName = $"{name}{defaultInteger.Result}.com",
    ///         InstanceId = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.InstanceId)),
    ///         Coverage = "overseas",
    ///         AccessType = "NS",
    ///     });
    /// 
    ///     var resourceOriginPoolLoadBalancer11 = new AliCloud.Esa.OriginPool("resource_OriginPool_LoadBalancer_1_1", new()
    ///     {
    ///         Origins = new[]
    ///         {
    ///             new AliCloud.Esa.Inputs.OriginPoolOriginArgs
    ///             {
    ///                 Type = "ip_domain",
    ///                 Address = "www.example.com",
    ///                 Header = "{\"Host\":[\"www.example.com\"]}",
    ///                 Enabled = true,
    ///                 Weight = 30,
    ///                 Name = "origin1",
    ///             },
    ///         },
    ///         SiteId = resourceSiteOriginPool.Id,
    ///         OriginPoolName = "originpool1",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var defaultLoadBalancer = new AliCloud.Esa.LoadBalancer("default", new()
    ///     {
    ///         LoadBalancerName = "lb.exampleloadbalancer.top",
    ///         FallbackPool = resourceOriginPoolLoadBalancer11.OriginPoolId,
    ///         SiteId = resourceSiteOriginPool.Id,
    ///         Description = name,
    ///         DefaultPools = new[]
    ///         {
    ///             resourceOriginPoolLoadBalancer11.OriginPoolId,
    ///         },
    ///         SteeringPolicy = "geo",
    ///         Monitor = new AliCloud.Esa.Inputs.LoadBalancerMonitorArgs
    ///         {
    ///             Type = "ICMP Ping",
    ///             Timeout = 5,
    ///             MonitoringRegion = "ChineseMainland",
    ///             ConsecutiveUp = 3,
    ///             ConsecutiveDown = 5,
    ///             Interval = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ESA Load Balancer can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:esa/loadBalancer:LoadBalancer example &lt;site_id&gt;:&lt;load_balancer_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:esa/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cross-pool origin configuration. See `AdaptiveRouting` below.
        /// </summary>
        [Output("adaptiveRouting")]
        public Output<Outputs.LoadBalancerAdaptiveRouting> AdaptiveRouting { get; private set; } = null!;

        /// <summary>
        /// List of default pool IDs.
        /// </summary>
        [Output("defaultPools")]
        public Output<ImmutableArray<int>> DefaultPools { get; private set; } = null!;

        /// <summary>
        /// The detailed description of the load balancer for easy management and identification.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the load balancer is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
        /// </summary>
        [Output("fallbackPool")]
        public Output<int> FallbackPool { get; private set; } = null!;

        /// <summary>
        /// The unique identifier ID of the load balancer.
        /// </summary>
        [Output("loadBalancerId")]
        public Output<int> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
        /// </summary>
        [Output("loadBalancerName")]
        public Output<string> LoadBalancerName { get; private set; } = null!;

        /// <summary>
        /// Monitor configuration for health check. See `Monitor` below.
        /// </summary>
        [Output("monitor")]
        public Output<Outputs.LoadBalancerMonitor> Monitor { get; private set; } = null!;

        /// <summary>
        /// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `RandomSteering` below.
        /// </summary>
        [Output("randomSteering")]
        public Output<Outputs.LoadBalancerRandomSteering?> RandomSteering { get; private set; } = null!;

        /// <summary>
        /// Address pools corresponding to primary regions.
        /// </summary>
        [Output("regionPools")]
        public Output<string?> RegionPools { get; private set; } = null!;

        /// <summary>
        /// Rule configuration list, used to define behavior under specific conditions. See `Rules` below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.LoadBalancerRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Session persistence. Valid values:
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string?> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// The site ID.
        /// </summary>
        [Output("siteId")]
        public Output<int> SiteId { get; private set; } = null!;

        /// <summary>
        /// The status of the load balancer.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Load balancing policy.
        /// </summary>
        [Output("steeringPolicy")]
        public Output<string> SteeringPolicy { get; private set; } = null!;

        /// <summary>
        /// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
        /// </summary>
        [Output("subRegionPools")]
        public Output<string?> SubRegionPools { get; private set; } = null!;

        /// <summary>
        /// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("alicloud:esa/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:esa/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cross-pool origin configuration. See `AdaptiveRouting` below.
        /// </summary>
        [Input("adaptiveRouting")]
        public Input<Inputs.LoadBalancerAdaptiveRoutingArgs>? AdaptiveRouting { get; set; }

        [Input("defaultPools", required: true)]
        private InputList<int>? _defaultPools;

        /// <summary>
        /// List of default pool IDs.
        /// </summary>
        public InputList<int> DefaultPools
        {
            get => _defaultPools ?? (_defaultPools = new InputList<int>());
            set => _defaultPools = value;
        }

        /// <summary>
        /// The detailed description of the load balancer for easy management and identification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the load balancer is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
        /// </summary>
        [Input("fallbackPool", required: true)]
        public Input<int> FallbackPool { get; set; } = null!;

        /// <summary>
        /// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public Input<string> LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// Monitor configuration for health check. See `Monitor` below.
        /// </summary>
        [Input("monitor", required: true)]
        public Input<Inputs.LoadBalancerMonitorArgs> Monitor { get; set; } = null!;

        /// <summary>
        /// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `RandomSteering` below.
        /// </summary>
        [Input("randomSteering")]
        public Input<Inputs.LoadBalancerRandomSteeringArgs>? RandomSteering { get; set; }

        /// <summary>
        /// Address pools corresponding to primary regions.
        /// </summary>
        [Input("regionPools")]
        public Input<string>? RegionPools { get; set; }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleArgs>? _rules;

        /// <summary>
        /// Rule configuration list, used to define behavior under specific conditions. See `Rules` below.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Session persistence. Valid values:
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// The site ID.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<int> SiteId { get; set; } = null!;

        /// <summary>
        /// Load balancing policy.
        /// </summary>
        [Input("steeringPolicy", required: true)]
        public Input<string> SteeringPolicy { get; set; } = null!;

        /// <summary>
        /// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
        /// </summary>
        [Input("subRegionPools")]
        public Input<string>? SubRegionPools { get; set; }

        /// <summary>
        /// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public LoadBalancerArgs()
        {
        }
        public static new LoadBalancerArgs Empty => new LoadBalancerArgs();
    }

    public sealed class LoadBalancerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cross-pool origin configuration. See `AdaptiveRouting` below.
        /// </summary>
        [Input("adaptiveRouting")]
        public Input<Inputs.LoadBalancerAdaptiveRoutingGetArgs>? AdaptiveRouting { get; set; }

        [Input("defaultPools")]
        private InputList<int>? _defaultPools;

        /// <summary>
        /// List of default pool IDs.
        /// </summary>
        public InputList<int> DefaultPools
        {
            get => _defaultPools ?? (_defaultPools = new InputList<int>());
            set => _defaultPools = value;
        }

        /// <summary>
        /// The detailed description of the load balancer for easy management and identification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the load balancer is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
        /// </summary>
        [Input("fallbackPool")]
        public Input<int>? FallbackPool { get; set; }

        /// <summary>
        /// The unique identifier ID of the load balancer.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<int>? LoadBalancerId { get; set; }

        /// <summary>
        /// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        /// <summary>
        /// Monitor configuration for health check. See `Monitor` below.
        /// </summary>
        [Input("monitor")]
        public Input<Inputs.LoadBalancerMonitorGetArgs>? Monitor { get; set; }

        /// <summary>
        /// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `RandomSteering` below.
        /// </summary>
        [Input("randomSteering")]
        public Input<Inputs.LoadBalancerRandomSteeringGetArgs>? RandomSteering { get; set; }

        /// <summary>
        /// Address pools corresponding to primary regions.
        /// </summary>
        [Input("regionPools")]
        public Input<string>? RegionPools { get; set; }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleGetArgs>? _rules;

        /// <summary>
        /// Rule configuration list, used to define behavior under specific conditions. See `Rules` below.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Session persistence. Valid values:
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// The site ID.
        /// </summary>
        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        /// <summary>
        /// The status of the load balancer.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Load balancing policy.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
        /// </summary>
        [Input("subRegionPools")]
        public Input<string>? SubRegionPools { get; set; }

        /// <summary>
        /// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public LoadBalancerState()
        {
        }
        public static new LoadBalancerState Empty => new LoadBalancerState();
    }
}
