// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa
{
    public static class GetSites
    {
        /// <summary>
        /// This data source provides Esa Site available to the user.[What is Site](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateSite)
        /// 
        /// &gt; **NOTE:** Available since v1.244.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultIEoDfU = new AliCloud.Esa.RatePlanInstance("defaultIEoDfU", new()
        ///     {
        ///         Type = "NS",
        ///         AutoRenew = true,
        ///         Period = 1,
        ///         PaymentType = "Subscription",
        ///         Coverage = "overseas",
        ///         AutoPay = true,
        ///         PlanName = "basic",
        ///     });
        /// 
        ///     var defaultSite = new AliCloud.Esa.Site("default", new()
        ///     {
        ///         SiteName = "bcd.com",
        ///         Coverage = "overseas",
        ///         AccessType = "NS",
        ///         InstanceId = defaultIEoDfU.Id,
        ///     });
        /// 
        ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultSite.Id,
        ///         },
        ///         NameRegex = defaultSite.SiteName,
        ///         SiteName = "bcd.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudEsaSiteExampleId"] = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSitesResult> InvokeAsync(GetSitesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSitesResult>("alicloud:esa/getSites:getSites", args ?? new GetSitesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Esa Site available to the user.[What is Site](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateSite)
        /// 
        /// &gt; **NOTE:** Available since v1.244.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultIEoDfU = new AliCloud.Esa.RatePlanInstance("defaultIEoDfU", new()
        ///     {
        ///         Type = "NS",
        ///         AutoRenew = true,
        ///         Period = 1,
        ///         PaymentType = "Subscription",
        ///         Coverage = "overseas",
        ///         AutoPay = true,
        ///         PlanName = "basic",
        ///     });
        /// 
        ///     var defaultSite = new AliCloud.Esa.Site("default", new()
        ///     {
        ///         SiteName = "bcd.com",
        ///         Coverage = "overseas",
        ///         AccessType = "NS",
        ///         InstanceId = defaultIEoDfU.Id,
        ///     });
        /// 
        ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultSite.Id,
        ///         },
        ///         NameRegex = defaultSite.SiteName,
        ///         SiteName = "bcd.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudEsaSiteExampleId"] = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSitesResult> Invoke(GetSitesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSitesResult>("alicloud:esa/getSites:getSites", args ?? new GetSitesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Esa Site available to the user.[What is Site](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateSite)
        /// 
        /// &gt; **NOTE:** Available since v1.244.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var defaultIEoDfU = new AliCloud.Esa.RatePlanInstance("defaultIEoDfU", new()
        ///     {
        ///         Type = "NS",
        ///         AutoRenew = true,
        ///         Period = 1,
        ///         PaymentType = "Subscription",
        ///         Coverage = "overseas",
        ///         AutoPay = true,
        ///         PlanName = "basic",
        ///     });
        /// 
        ///     var defaultSite = new AliCloud.Esa.Site("default", new()
        ///     {
        ///         SiteName = "bcd.com",
        ///         Coverage = "overseas",
        ///         AccessType = "NS",
        ///         InstanceId = defaultIEoDfU.Id,
        ///     });
        /// 
        ///     var @default = AliCloud.Esa.GetSites.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             defaultSite.Id,
        ///         },
        ///         NameRegex = defaultSite.SiteName,
        ///         SiteName = "bcd.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudEsaSiteExampleId"] = @default.Apply(@default =&gt; @default.Apply(getSitesResult =&gt; getSitesResult.Sites[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSitesResult> Invoke(GetSitesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSitesResult>("alicloud:esa/getSites:getSites", args ?? new GetSitesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSitesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
        /// </summary>
        [Input("accessType")]
        public string? AccessType { get; set; }

        /// <summary>
        /// Acceleration area
        /// </summary>
        [Input("coverage")]
        public string? Coverage { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Site IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Only the Enterprise version, pass **true** when the table only queries the enterprise version of the site.
        /// </summary>
        [Input("onlyEnterprise")]
        public bool? OnlyEnterprise { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Current page number.
        /// </summary>
        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Number of records per page.
        /// </summary>
        [Input("pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Package subscription type. Value:-**basicplan**: Basic version.-**standardplan**: Standard version.-**advancedplan**: Advanced version.-**enterpriseplan**: Enterprise Edition.
        /// </summary>
        [Input("planSubscribeType")]
        public string? PlanSubscribeType { get; set; }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public string? ResourceGroupId { get; set; }

        /// <summary>
        /// Site Name
        /// </summary>
        [Input("siteName")]
        public string? SiteName { get; set; }

        /// <summary>
        /// The search match pattern for the site name. The default value is exact match. Valid values:-**prefix**: matches the prefix.-**suffix**: The suffix matches.-**exact**: exact match.-**fuzzy**: fuzzy match.
        /// </summary>
        [Input("siteSearchType")]
        public string? SiteSearchType { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetSitesArgs()
        {
        }
        public static new GetSitesArgs Empty => new GetSitesArgs();
    }

    public sealed class GetSitesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
        /// </summary>
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        /// <summary>
        /// Acceleration area
        /// </summary>
        [Input("coverage")]
        public Input<string>? Coverage { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Site IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Only the Enterprise version, pass **true** when the table only queries the enterprise version of the site.
        /// </summary>
        [Input("onlyEnterprise")]
        public Input<bool>? OnlyEnterprise { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Current page number.
        /// </summary>
        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        /// <summary>
        /// Number of records per page.
        /// </summary>
        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// Package subscription type. Value:-**basicplan**: Basic version.-**standardplan**: Standard version.-**advancedplan**: Advanced version.-**enterpriseplan**: Enterprise Edition.
        /// </summary>
        [Input("planSubscribeType")]
        public Input<string>? PlanSubscribeType { get; set; }

        /// <summary>
        /// The ID of the resource group
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// Site Name
        /// </summary>
        [Input("siteName")]
        public Input<string>? SiteName { get; set; }

        /// <summary>
        /// The search match pattern for the site name. The default value is exact match. Valid values:-**prefix**: matches the prefix.-**suffix**: The suffix matches.-**exact**: exact match.-**fuzzy**: fuzzy match.
        /// </summary>
        [Input("siteSearchType")]
        public Input<string>? SiteSearchType { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetSitesInvokeArgs()
        {
        }
        public static new GetSitesInvokeArgs Empty => new GetSitesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSitesResult
    {
        /// <summary>
        /// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
        /// </summary>
        public readonly string? AccessType;
        /// <summary>
        /// Acceleration area
        /// </summary>
        public readonly string? Coverage;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Site IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of name of Sites.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly bool? OnlyEnterprise;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;
        public readonly string? PlanSubscribeType;
        /// <summary>
        /// The ID of the resource group
        /// </summary>
        public readonly string? ResourceGroupId;
        /// <summary>
        /// Site Name
        /// </summary>
        public readonly string? SiteName;
        public readonly string? SiteSearchType;
        /// <summary>
        /// A list of Site Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSitesSiteResult> Sites;
        /// <summary>
        /// The status of the resource
        /// </summary>
        public readonly string? Status;
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetSitesResult(
            string? accessType,

            string? coverage,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            bool? onlyEnterprise,

            string? outputFile,

            int? pageNumber,

            int? pageSize,

            string? planSubscribeType,

            string? resourceGroupId,

            string? siteName,

            string? siteSearchType,

            ImmutableArray<Outputs.GetSitesSiteResult> sites,

            string? status,

            ImmutableDictionary<string, string>? tags)
        {
            AccessType = accessType;
            Coverage = coverage;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            OnlyEnterprise = onlyEnterprise;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            PlanSubscribeType = planSubscribeType;
            ResourceGroupId = resourceGroupId;
            SiteName = siteName;
            SiteSearchType = siteSearchType;
            Sites = sites;
            Status = status;
            Tags = tags;
        }
    }
}
