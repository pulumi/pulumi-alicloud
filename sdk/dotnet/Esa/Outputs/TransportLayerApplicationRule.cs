// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa.Outputs
{

    [OutputType]
    public sealed class TransportLayerApplicationRule
    {
        /// <summary>
        /// Client IP pass-through protocol, supporting:
        /// </summary>
        public readonly string ClientIpPassThroughMode;
        /// <summary>
        /// Comment information for the rule (optional).
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// Edge port. Supports:
        /// - A single port, such as 80.
        /// - Port range, such as 81-85, representing ports 81, 82, 83, 84, and 85.
        /// - Combination of ports and port ranges, separated by commas, such as 80,81-85,90, representing ports 80, 81, 82, 83, 84, 85, and 90.
        /// 
        /// Edge ports within a single rule and between multiple rules must not overlap.
        /// </summary>
        public readonly string EdgePort;
        /// <summary>
        /// Forwarding rule protocol, with values:
        /// - `TCP`: TCP protocol.
        /// - `UDP`: UDP protocol.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Rule ID
        /// </summary>
        public readonly int? RuleId;
        /// <summary>
        /// Specific value of the origin, which needs to match the origin type.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Source Port
        /// </summary>
        public readonly string SourcePort;
        /// <summary>
        /// Origin type, supporting:
        /// </summary>
        public readonly string SourceType;

        [OutputConstructor]
        private TransportLayerApplicationRule(
            string clientIpPassThroughMode,

            string? comment,

            string edgePort,

            string protocol,

            int? ruleId,

            string source,

            string sourcePort,

            string sourceType)
        {
            ClientIpPassThroughMode = clientIpPassThroughMode;
            Comment = comment;
            EdgePort = edgePort;
            Protocol = protocol;
            RuleId = ruleId;
            Source = source;
            SourcePort = sourcePort;
            SourceType = sourceType;
        }
    }
}
