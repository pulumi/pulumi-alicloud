// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Esa.Outputs
{

    [OutputType]
    public sealed class LoadBalancerRule
    {
        /// <summary>
        /// Executes a specified response after matching the rule. See `FixedResponse` below.
        /// </summary>
        public readonly Outputs.LoadBalancerRuleFixedResponse? FixedResponse;
        /// <summary>
        /// Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.
        /// </summary>
        public readonly string? Overrides;
        /// <summary>
        /// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        /// - Match all incoming requests: value set to true
        /// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
        /// </summary>
        public readonly string? Rule;
        /// <summary>
        /// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        /// - on: open.
        /// - off: close.
        /// </summary>
        public readonly string? RuleEnable;
        /// <summary>
        /// Rule name. When adding global configuration, this parameter does not need to be set.
        /// </summary>
        public readonly string? RuleName;
        /// <summary>
        /// Order of rule execution. The smaller the value, the higher the priority for execution.
        /// </summary>
        public readonly int? Sequence;
        /// <summary>
        /// Whether to terminate the execution of subsequent rules.
        /// </summary>
        public readonly bool? Terminates;

        [OutputConstructor]
        private LoadBalancerRule(
            Outputs.LoadBalancerRuleFixedResponse? fixedResponse,

            string? overrides,

            string? rule,

            string? ruleEnable,

            string? ruleName,

            int? sequence,

            bool? terminates)
        {
            FixedResponse = fixedResponse;
            Overrides = overrides;
            Rule = rule;
            RuleEnable = ruleEnable;
            RuleName = ruleName;
            Sequence = sequence;
            Terminates = terminates;
        }
    }
}
