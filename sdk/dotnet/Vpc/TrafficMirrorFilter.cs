// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides a VPC Traffic Mirror Filter resource. Traffic mirror filter criteria.
    /// 
    /// For information about VPC Traffic Mirror Filter and how to use it, see [What is Traffic Mirror Filter](https://www.alibabacloud.com/help/doc-detail/207513.htm).
    /// 
    /// &gt; **NOTE:** Available in v1.140.0+.
    /// 
    /// ## Import
    /// 
    /// VPC Traffic Mirror Filter can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter")]
    public partial class TrafficMirrorFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
        /// - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Information about the outbound rule. See the following `Block EgressRules`.
        /// </summary>
        [Output("egressRules")]
        public Output<ImmutableArray<Outputs.TrafficMirrorFilterEgressRule>> EgressRules { get; private set; } = null!;

        /// <summary>
        /// Inward direction rule information. See the following `Block IngressRules`.
        /// </summary>
        [Output("ingressRules")]
        public Output<ImmutableArray<Outputs.TrafficMirrorFilterIngressRule>> IngressRules { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group to which the VPC belongs.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tags of this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The description of the TrafficMirrorFilter.
        /// </summary>
        [Output("trafficMirrorFilterDescription")]
        public Output<string?> TrafficMirrorFilterDescription { get; private set; } = null!;

        /// <summary>
        /// The name of the TrafficMirrorFilter.
        /// </summary>
        [Output("trafficMirrorFilterName")]
        public Output<string?> TrafficMirrorFilterName { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficMirrorFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficMirrorFilter(string name, TrafficMirrorFilterArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter", name, args ?? new TrafficMirrorFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrafficMirrorFilter(string name, Input<string> id, TrafficMirrorFilterState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/trafficMirrorFilter:TrafficMirrorFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficMirrorFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficMirrorFilter Get(string name, Input<string> id, TrafficMirrorFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficMirrorFilter(name, id, state, options);
        }
    }

    public sealed class TrafficMirrorFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
        /// - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.TrafficMirrorFilterEgressRuleArgs>? _egressRules;

        /// <summary>
        /// Information about the outbound rule. See the following `Block EgressRules`.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterEgressRuleArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.TrafficMirrorFilterEgressRuleArgs>());
            set => _egressRules = value;
        }

        [Input("ingressRules")]
        private InputList<Inputs.TrafficMirrorFilterIngressRuleArgs>? _ingressRules;

        /// <summary>
        /// Inward direction rule information. See the following `Block IngressRules`.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterIngressRuleArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.TrafficMirrorFilterIngressRuleArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// The ID of the resource group to which the VPC belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// The tags of this resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The description of the TrafficMirrorFilter.
        /// </summary>
        [Input("trafficMirrorFilterDescription")]
        public Input<string>? TrafficMirrorFilterDescription { get; set; }

        /// <summary>
        /// The name of the TrafficMirrorFilter.
        /// </summary>
        [Input("trafficMirrorFilterName")]
        public Input<string>? TrafficMirrorFilterName { get; set; }

        public TrafficMirrorFilterArgs()
        {
        }
        public static new TrafficMirrorFilterArgs Empty => new TrafficMirrorFilterArgs();
    }

    public sealed class TrafficMirrorFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to PreCheck only this request. Value:
        /// - **true**: The check request is sent without creating traffic Image filter conditions. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.
        /// - **false** (default): Sends a normal request, returns a 2xx HTTP status code after passing the check, and directly creates a filter condition.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.TrafficMirrorFilterEgressRuleGetArgs>? _egressRules;

        /// <summary>
        /// Information about the outbound rule. See the following `Block EgressRules`.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterEgressRuleGetArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.TrafficMirrorFilterEgressRuleGetArgs>());
            set => _egressRules = value;
        }

        [Input("ingressRules")]
        private InputList<Inputs.TrafficMirrorFilterIngressRuleGetArgs>? _ingressRules;

        /// <summary>
        /// Inward direction rule information. See the following `Block IngressRules`.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterIngressRuleGetArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.TrafficMirrorFilterIngressRuleGetArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// The ID of the resource group to which the VPC belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// The tags of this resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The description of the TrafficMirrorFilter.
        /// </summary>
        [Input("trafficMirrorFilterDescription")]
        public Input<string>? TrafficMirrorFilterDescription { get; set; }

        /// <summary>
        /// The name of the TrafficMirrorFilter.
        /// </summary>
        [Input("trafficMirrorFilterName")]
        public Input<string>? TrafficMirrorFilterName { get; set; }

        public TrafficMirrorFilterState()
        {
        }
        public static new TrafficMirrorFilterState Empty => new TrafficMirrorFilterState();
    }
}
