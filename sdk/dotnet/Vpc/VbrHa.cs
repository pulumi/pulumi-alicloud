// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides a Express Connect Vbr Ha resource.
    /// 
    /// VBR switching Group.
    /// 
    /// For information about Express Connect Vbr Ha and how to use it, see [What is Vbr Ha](https://www.alibabacloud.com/help/doc-detail/212629.html).
    /// 
    /// &gt; **NOTE:** Available since v1.151.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = AliCloud.GetRegions.Invoke(new()
    ///     {
    ///         Current = true,
    ///     });
    /// 
    ///     var example = AliCloud.ExpressConnect.GetPhysicalConnections.Invoke(new()
    ///     {
    ///         NameRegex = "^preserved-NODELETING",
    ///     });
    /// 
    ///     var vlanId = new Random.Index.Integer("vlan_id", new()
    ///     {
    ///         Max = 2999,
    ///         Min = 1,
    ///     });
    /// 
    ///     var exampleVirtualBorderRouter = new List&lt;AliCloud.ExpressConnect.VirtualBorderRouter&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         exampleVirtualBorderRouter.Add(new AliCloud.ExpressConnect.VirtualBorderRouter($"example-{range.Value}", new()
    ///         {
    ///             LocalGatewayIp = "10.0.0.1",
    ///             PeerGatewayIp = "10.0.0.2",
    ///             PeeringSubnetMask = "255.255.255.252",
    ///             PhysicalConnectionId = example.Apply(getPhysicalConnectionsResult =&gt; getPhysicalConnectionsResult.Connections)[range.Value].Id,
    ///             VirtualBorderRouterName = Std.Format.Invoke(new()
    ///             {
    ///                 Input = $"{name}-%d",
    ///                 Args = new[]
    ///                 {
    ///                     range.Value + 1,
    ///                 },
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///             VlanId = vlanId.Id + range.Value,
    ///             MinRxInterval = 1000,
    ///             MinTxInterval = 1000,
    ///             DetectMultiplier = 10,
    ///         }));
    ///     }
    ///     var exampleInstance = new AliCloud.Cen.Instance("example", new()
    ///     {
    ///         CenInstanceName = name,
    ///         Description = name,
    ///         ProtectionLevel = "REDUCED",
    ///     });
    /// 
    ///     var exampleInstanceAttachment = new List&lt;AliCloud.Cen.InstanceAttachment&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         exampleInstanceAttachment.Add(new AliCloud.Cen.InstanceAttachment($"example-{range.Value}", new()
    ///         {
    ///             InstanceId = exampleInstance.Id,
    ///             ChildInstanceId = exampleVirtualBorderRouter[range.Value].Id,
    ///             ChildInstanceType = "VBR",
    ///             ChildInstanceRegionId = @default.Apply(@default =&gt; @default.Apply(getRegionsResult =&gt; getRegionsResult.Regions[0]?.Id)),
    ///         }));
    ///     }
    ///     var exampleVbrHa = new AliCloud.Vpc.VbrHa("example", new()
    ///     {
    ///         VbrId = exampleInstanceAttachment[0].ChildInstanceId,
    ///         PeerVbrId = exampleInstanceAttachment[1].ChildInstanceId,
    ///         VbrHaName = name,
    ///         Description = name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Express Connect Vbr Ha can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:vpc/vbrHa:VbrHa example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpc/vbrHa:VbrHa")]
    public partial class VbrHa : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the VBR.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the VBR switching group.
        /// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to PreCheck only this request. Value range:
        /// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
        /// - *false** (default): Send a normal request and start the instance directly after passing the check.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// The instance ID of another VBR in The VBR switching group.
        /// </summary>
        [Output("peerVbrId")]
        public Output<string> PeerVbrId { get; private set; } = null!;

        /// <summary>
        /// The ID of the region to which the VBR belongs.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Status of VBR switching Group
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// VBR switch group name.
        /// </summary>
        [Output("vbrHaName")]
        public Output<string?> VbrHaName { get; private set; } = null!;

        /// <summary>
        /// The VBR instance ID.
        /// </summary>
        [Output("vbrId")]
        public Output<string> VbrId { get; private set; } = null!;


        /// <summary>
        /// Create a VbrHa resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VbrHa(string name, VbrHaArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpc/vbrHa:VbrHa", name, args ?? new VbrHaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VbrHa(string name, Input<string> id, VbrHaState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/vbrHa:VbrHa", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VbrHa resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VbrHa Get(string name, Input<string> id, VbrHaState? state = null, CustomResourceOptions? options = null)
        {
            return new VbrHa(name, id, state, options);
        }
    }

    public sealed class VbrHaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the VBR switching group.
        /// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to PreCheck only this request. Value range:
        /// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
        /// - *false** (default): Send a normal request and start the instance directly after passing the check.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The instance ID of another VBR in The VBR switching group.
        /// </summary>
        [Input("peerVbrId", required: true)]
        public Input<string> PeerVbrId { get; set; } = null!;

        /// <summary>
        /// VBR switch group name.
        /// </summary>
        [Input("vbrHaName")]
        public Input<string>? VbrHaName { get; set; }

        /// <summary>
        /// The VBR instance ID.
        /// </summary>
        [Input("vbrId", required: true)]
        public Input<string> VbrId { get; set; } = null!;

        public VbrHaArgs()
        {
        }
        public static new VbrHaArgs Empty => new VbrHaArgs();
    }

    public sealed class VbrHaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the VBR.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the VBR switching group.
        /// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to PreCheck only this request. Value range:
        /// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
        /// - *false** (default): Send a normal request and start the instance directly after passing the check.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The instance ID of another VBR in The VBR switching group.
        /// </summary>
        [Input("peerVbrId")]
        public Input<string>? PeerVbrId { get; set; }

        /// <summary>
        /// The ID of the region to which the VBR belongs.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Status of VBR switching Group
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// VBR switch group name.
        /// </summary>
        [Input("vbrHaName")]
        public Input<string>? VbrHaName { get; set; }

        /// <summary>
        /// The VBR instance ID.
        /// </summary>
        [Input("vbrId")]
        public Input<string>? VbrId { get; set; }

        public VbrHaState()
        {
        }
        public static new VbrHaState Empty => new VbrHaState();
    }
}
