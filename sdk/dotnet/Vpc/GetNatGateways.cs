// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    public static class GetNatGateways
    {
        /// <summary>
        /// This data source provides a list of Nat Gateways owned by an Alibaba Cloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.37.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "natGatewaysDatasource";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var fooNetwork = new AliCloud.Vpc.Network("foo", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "172.16.0.0/12",
        ///     });
        /// 
        ///     var fooNatGateway = new AliCloud.Vpc.NatGateway("foo", new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         Specification = "Small",
        ///         NatGatewayName = name,
        ///     });
        /// 
        ///     var foo = AliCloud.Vpc.GetNatGateways.Invoke(new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         NameRegex = fooNatGateway.Name,
        ///         Ids = new[]
        ///         {
        ///             fooNatGateway.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNatGatewaysResult> InvokeAsync(GetNatGatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatGatewaysResult>("alicloud:vpc/getNatGateways:getNatGateways", args ?? new GetNatGatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a list of Nat Gateways owned by an Alibaba Cloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.37.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "natGatewaysDatasource";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var fooNetwork = new AliCloud.Vpc.Network("foo", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "172.16.0.0/12",
        ///     });
        /// 
        ///     var fooNatGateway = new AliCloud.Vpc.NatGateway("foo", new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         Specification = "Small",
        ///         NatGatewayName = name,
        ///     });
        /// 
        ///     var foo = AliCloud.Vpc.GetNatGateways.Invoke(new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         NameRegex = fooNatGateway.Name,
        ///         Ids = new[]
        ///         {
        ///             fooNatGateway.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNatGatewaysResult> Invoke(GetNatGatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewaysResult>("alicloud:vpc/getNatGateways:getNatGateways", args ?? new GetNatGatewaysInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a list of Nat Gateways owned by an Alibaba Cloud account.
        /// 
        /// &gt; **NOTE:** Available since v1.37.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "natGatewaysDatasource";
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var fooNetwork = new AliCloud.Vpc.Network("foo", new()
        ///     {
        ///         VpcName = name,
        ///         CidrBlock = "172.16.0.0/12",
        ///     });
        /// 
        ///     var fooNatGateway = new AliCloud.Vpc.NatGateway("foo", new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         Specification = "Small",
        ///         NatGatewayName = name,
        ///     });
        /// 
        ///     var foo = AliCloud.Vpc.GetNatGateways.Invoke(new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         NameRegex = fooNatGateway.Name,
        ///         Ids = new[]
        ///         {
        ///             fooNatGateway.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNatGatewaysResult> Invoke(GetNatGatewaysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewaysResult>("alicloud:vpc/getNatGateways:getNatGateways", args ?? new GetNatGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatGatewaysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies whether to only precheck the request.
        /// </summary>
        [Input("dryRun")]
        public bool? DryRun { get; set; }

        /// <summary>
        /// Default to `False`. Set it to `True` can output more details about resource attributes.
        /// </summary>
        [Input("enableDetails")]
        public bool? EnableDetails { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of NAT gateways IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter nat gateways by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The name of NAT gateway.
        /// </summary>
        [Input("natGatewayName")]
        public string? NatGatewayName { get; set; }

        /// <summary>
        /// The nat type of NAT gateway. Valid values `Enhanced` and `Normal`.
        /// </summary>
        [Input("natType")]
        public string? NatType { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        [Input("pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// The payment type of NAT gateway. Valid values `PayAsYouGo` and `Subscription`.
        /// </summary>
        [Input("paymentType")]
        public string? PaymentType { get; set; }

        /// <summary>
        /// The resource group id of NAT gateway.
        /// </summary>
        [Input("resourceGroupId")]
        public string? ResourceGroupId { get; set; }

        /// <summary>
        /// The specification of NAT gateway. Valid values `Middle`, `Large`, `Small` and `XLarge.1`. Default value is `Small`.
        /// </summary>
        [Input("specification")]
        public string? Specification { get; set; }

        /// <summary>
        /// The status of NAT gateway. Valid values `Available`, `Converting`, `Creating`, `Deleting` and `Modifying`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// The tags of NAT gateway.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetNatGatewaysArgs()
        {
        }
        public static new GetNatGatewaysArgs Empty => new GetNatGatewaysArgs();
    }

    public sealed class GetNatGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies whether to only precheck the request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Default to `False`. Set it to `True` can output more details about resource attributes.
        /// </summary>
        [Input("enableDetails")]
        public Input<bool>? EnableDetails { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of NAT gateways IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter nat gateways by name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The name of NAT gateway.
        /// </summary>
        [Input("natGatewayName")]
        public Input<string>? NatGatewayName { get; set; }

        /// <summary>
        /// The nat type of NAT gateway. Valid values `Enhanced` and `Normal`.
        /// </summary>
        [Input("natType")]
        public Input<string>? NatType { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        /// <summary>
        /// The payment type of NAT gateway. Valid values `PayAsYouGo` and `Subscription`.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// The resource group id of NAT gateway.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The specification of NAT gateway. Valid values `Middle`, `Large`, `Small` and `XLarge.1`. Default value is `Small`.
        /// </summary>
        [Input("specification")]
        public Input<string>? Specification { get; set; }

        /// <summary>
        /// The status of NAT gateway. Valid values `Available`, `Converting`, `Creating`, `Deleting` and `Modifying`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags of NAT gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetNatGatewaysInvokeArgs()
        {
        }
        public static new GetNatGatewaysInvokeArgs Empty => new GetNatGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatGatewaysResult
    {
        public readonly bool? DryRun;
        public readonly bool? EnableDetails;
        /// <summary>
        /// A list of Nat gateways. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatGatewaysGatewayResult> Gateways;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Optional) A list of Nat gateways IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of Nat gateways names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        /// <summary>
        /// The name of the NAT gateway.
        /// </summary>
        public readonly string? NatGatewayName;
        /// <summary>
        /// The type of the NAT gateway.
        /// </summary>
        public readonly string? NatType;
        public readonly string? OutputFile;
        public readonly int? PageNumber;
        public readonly int? PageSize;
        /// <summary>
        /// The billing method of the NAT gateway.
        /// </summary>
        public readonly string? PaymentType;
        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        public readonly string? ResourceGroupId;
        /// <summary>
        /// The specification of the NAT gateway.
        /// </summary>
        public readonly string? Specification;
        /// <summary>
        /// The status of the NAT gateway.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The tags of NAT gateway.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly int TotalCount;
        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetNatGatewaysResult(
            bool? dryRun,

            bool? enableDetails,

            ImmutableArray<Outputs.GetNatGatewaysGatewayResult> gateways,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> names,

            string? natGatewayName,

            string? natType,

            string? outputFile,

            int? pageNumber,

            int? pageSize,

            string? paymentType,

            string? resourceGroupId,

            string? specification,

            string? status,

            ImmutableDictionary<string, string>? tags,

            int totalCount,

            string? vpcId)
        {
            DryRun = dryRun;
            EnableDetails = enableDetails;
            Gateways = gateways;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            Names = names;
            NatGatewayName = natGatewayName;
            NatType = natType;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            PaymentType = paymentType;
            ResourceGroupId = resourceGroupId;
            Specification = specification;
            Status = status;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
        }
    }
}
