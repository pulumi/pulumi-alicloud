// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides an Alicloud ECS Elastic Network Interface Attachment as a resource to attach ENI to or detach ENI from ECS Instances.
    /// 
    /// For information about Elastic Network Interface and how to use it, see [Elastic Network Interface](https://www.alibabacloud.com/help/doc-detail/58496.html).
    /// 
    /// ## Example Usage
    /// 
    /// Bacis Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var name = config.Get("name") ?? "networkInterfaceAttachment";
    ///         var number = config.Get("number") ?? "2";
    ///         var vpc = new AliCloud.Vpc.Network("vpc", new AliCloud.Vpc.NetworkArgs
    ///         {
    ///             CidrBlock = "192.168.0.0/24",
    ///         });
    ///         var defaultZones = Output.Create(AliCloud.GetZones.InvokeAsync(new AliCloud.GetZonesArgs
    ///         {
    ///             AvailableResourceCreation = "VSwitch",
    ///         }));
    ///         var vswitch = new AliCloud.Vpc.Switch("vswitch", new AliCloud.Vpc.SwitchArgs
    ///         {
    ///             CidrBlock = "192.168.0.0/24",
    ///             AvailabilityZone = defaultZones.Apply(defaultZones =&gt; defaultZones.Zones[0].Id),
    ///             VpcId = vpc.Id,
    ///         });
    ///         var @group = new AliCloud.Ecs.SecurityGroup("group", new AliCloud.Ecs.SecurityGroupArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///         });
    ///         var instanceType = defaultZones.Apply(defaultZones =&gt; Output.Create(AliCloud.Ecs.GetInstanceTypes.InvokeAsync(new AliCloud.Ecs.GetInstanceTypesArgs
    ///         {
    ///             AvailabilityZone = defaultZones.Zones[0].Id,
    ///             EniAmount = 2,
    ///         })));
    ///         var defaultImages = Output.Create(AliCloud.Ecs.GetImages.InvokeAsync(new AliCloud.Ecs.GetImagesArgs
    ///         {
    ///             NameRegex = "^ubuntu_18.*64",
    ///             MostRecent = true,
    ///             Owners = "system",
    ///         }));
    ///         var instance = new List&lt;AliCloud.Ecs.Instance&gt;();
    ///         for (var rangeIndex = 0; rangeIndex &lt; number; rangeIndex++)
    ///         {
    ///             var range = new { Value = rangeIndex };
    ///             instance.Add(new AliCloud.Ecs.Instance($"instance-{range.Value}", new AliCloud.Ecs.InstanceArgs
    ///             {
    ///                 AvailabilityZone = defaultZones.Apply(defaultZones =&gt; defaultZones.Zones[0].Id),
    ///                 SecurityGroups = 
    ///                 {
    ///                     @group.Id,
    ///                 },
    ///                 InstanceType = instanceType.Apply(instanceType =&gt; instanceType.InstanceTypes[0].Id),
    ///                 SystemDiskCategory = "cloud_efficiency",
    ///                 ImageId = defaultImages.Apply(defaultImages =&gt; defaultImages.Images[0].Id),
    ///                 InstanceName = name,
    ///                 VswitchId = vswitch.Id,
    ///                 InternetMaxBandwidthOut = 10,
    ///             }));
    ///         }
    ///         var @interface = new List&lt;AliCloud.Vpc.NetworkInterface&gt;();
    ///         for (var rangeIndex = 0; rangeIndex &lt; number; rangeIndex++)
    ///         {
    ///             var range = new { Value = rangeIndex };
    ///             @interface.Add(new AliCloud.Vpc.NetworkInterface($"interface-{range.Value}", new AliCloud.Vpc.NetworkInterfaceArgs
    ///             {
    ///                 VswitchId = vswitch.Id,
    ///                 SecurityGroups = 
    ///                 {
    ///                     @group.Id,
    ///                 },
    ///             }));
    ///         }
    ///         var attachment = new List&lt;AliCloud.Vpc.NetworkInterfaceAttachment&gt;();
    ///         for (var rangeIndex = 0; rangeIndex &lt; number; rangeIndex++)
    ///         {
    ///             var range = new { Value = rangeIndex };
    ///             attachment.Add(new AliCloud.Vpc.NetworkInterfaceAttachment($"attachment-{range.Value}", new AliCloud.Vpc.NetworkInterfaceAttachmentArgs
    ///             {
    ///                 InstanceId = instance.Select(__item =&gt; __item.Id).ToList()[range.Index],
    ///                 NetworkInterfaceId = @interface.Select(__item =&gt; __item.Id).ToList()[range.Index],
    ///             }));
    ///         }
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network Interfaces Attachment resource can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:vpc/networkInterfaceAttachment:NetworkInterfaceAttachment eni eni-abc123456789000:i-abc123456789000
    /// ```
    /// </summary>
    public partial class NetworkInterfaceAttachment : Pulumi.CustomResource
    {
        /// <summary>
        /// The instance ID to attach.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The ENI ID to attach.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkInterfaceAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkInterfaceAttachment(string name, NetworkInterfaceAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpc/networkInterfaceAttachment:NetworkInterfaceAttachment", name, args ?? new NetworkInterfaceAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkInterfaceAttachment(string name, Input<string> id, NetworkInterfaceAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/networkInterfaceAttachment:NetworkInterfaceAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkInterfaceAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkInterfaceAttachment Get(string name, Input<string> id, NetworkInterfaceAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkInterfaceAttachment(name, id, state, options);
        }
    }

    public sealed class NetworkInterfaceAttachmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance ID to attach.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The ENI ID to attach.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public Input<string> NetworkInterfaceId { get; set; } = null!;

        public NetworkInterfaceAttachmentArgs()
        {
        }
    }

    public sealed class NetworkInterfaceAttachmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance ID to attach.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The ENI ID to attach.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        public NetworkInterfaceAttachmentState()
        {
        }
    }
}
