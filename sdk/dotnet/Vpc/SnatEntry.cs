// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides a NAT Gateway Snat Entry resource.
    /// 
    /// For information about NAT Gateway Snat Entry and how to use it, see [What is Snat Entry](https://www.alibabacloud.com/help/en/nat-gateway/developer-reference/api-vpc-2016-04-28-createsnatentry-natgws).
    /// 
    /// &gt; **NOTE:** Available since v1.119.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "172.16.0.0/12",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/21",
    ///         ZoneId = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
    ///         VswitchName = name,
    ///     });
    /// 
    ///     var defaultNatGateway = new AliCloud.Vpc.NatGateway("default", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         NatGatewayName = name,
    ///         PaymentType = "PayAsYouGo",
    ///         VswitchId = defaultSwitch.Id,
    ///         NatType = "Enhanced",
    ///     });
    /// 
    ///     var defaultEipAddress = new AliCloud.Ecs.EipAddress("default", new()
    ///     {
    ///         AddressName = name,
    ///     });
    /// 
    ///     var defaultEipAssociation = new AliCloud.Ecs.EipAssociation("default", new()
    ///     {
    ///         AllocationId = defaultEipAddress.Id,
    ///         InstanceId = defaultNatGateway.Id,
    ///     });
    /// 
    ///     var defaultSnatEntry = new AliCloud.Vpc.SnatEntry("default", new()
    ///     {
    ///         SnatTableId = defaultNatGateway.SnatTableIds,
    ///         SourceVswitchId = defaultSwitch.Id,
    ///         SnatIp = defaultEipAddress.IpAddress,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NAT Gateway Snat Entry can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:vpc/snatEntry:SnatEntry example &lt;snat_table_id&gt;:&lt;snat_entry_id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import alicloud:vpc/snatEntry:SnatEntry example &lt;snat_entry_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpc/snatEntry:SnatEntry")]
    public partial class SnatEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
        /// </summary>
        [Output("eipAffinity")]
        public Output<int?> EipAffinity { get; private set; } = null!;

        /// <summary>
        /// The id of the snat entry on the server.
        /// </summary>
        [Output("snatEntryId")]
        public Output<string> SnatEntryId { get; private set; } = null!;

        /// <summary>
        /// The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
        /// </summary>
        [Output("snatEntryName")]
        public Output<string?> SnatEntryName { get; private set; } = null!;

        /// <summary>
        /// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snat_ip` can be modified.
        /// </summary>
        [Output("snatIp")]
        public Output<string> SnatIp { get; private set; } = null!;

        /// <summary>
        /// The ID of the SNAT table.
        /// </summary>
        [Output("snatTableId")]
        public Output<string> SnatTableId { get; private set; } = null!;

        /// <summary>
        /// The source CIDR block specified in the SNAT entry.
        /// </summary>
        [Output("sourceCidr")]
        public Output<string> SourceCidr { get; private set; } = null!;

        /// <summary>
        /// The ID of the vSwitch.
        /// </summary>
        [Output("sourceVswitchId")]
        public Output<string> SourceVswitchId { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.119.1) The ID of the SNAT entry.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a SnatEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnatEntry(string name, SnatEntryArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpc/snatEntry:SnatEntry", name, args ?? new SnatEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnatEntry(string name, Input<string> id, SnatEntryState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/snatEntry:SnatEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnatEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnatEntry Get(string name, Input<string> id, SnatEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new SnatEntry(name, id, state, options);
        }
    }

    public sealed class SnatEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
        /// </summary>
        [Input("eipAffinity")]
        public Input<int>? EipAffinity { get; set; }

        /// <summary>
        /// The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
        /// </summary>
        [Input("snatEntryName")]
        public Input<string>? SnatEntryName { get; set; }

        /// <summary>
        /// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snat_ip` can be modified.
        /// </summary>
        [Input("snatIp", required: true)]
        public Input<string> SnatIp { get; set; } = null!;

        /// <summary>
        /// The ID of the SNAT table.
        /// </summary>
        [Input("snatTableId", required: true)]
        public Input<string> SnatTableId { get; set; } = null!;

        /// <summary>
        /// The source CIDR block specified in the SNAT entry.
        /// </summary>
        [Input("sourceCidr")]
        public Input<string>? SourceCidr { get; set; }

        /// <summary>
        /// The ID of the vSwitch.
        /// </summary>
        [Input("sourceVswitchId")]
        public Input<string>? SourceVswitchId { get; set; }

        public SnatEntryArgs()
        {
        }
        public static new SnatEntryArgs Empty => new SnatEntryArgs();
    }

    public sealed class SnatEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable EIP affinity. Default value: `0`. Valid values:
        /// </summary>
        [Input("eipAffinity")]
        public Input<int>? EipAffinity { get; set; }

        /// <summary>
        /// The id of the snat entry on the server.
        /// </summary>
        [Input("snatEntryId")]
        public Input<string>? SnatEntryId { get; set; }

        /// <summary>
        /// The name of the SNAT entry. The name must be `2` to `128` characters in length. It must start with a letter but cannot start with `http://` or `https://`.
        /// </summary>
        [Input("snatEntryName")]
        public Input<string>? SnatEntryName { get; set; }

        /// <summary>
        /// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). **NOTE:** From version 1.241.0, `snat_ip` can be modified.
        /// </summary>
        [Input("snatIp")]
        public Input<string>? SnatIp { get; set; }

        /// <summary>
        /// The ID of the SNAT table.
        /// </summary>
        [Input("snatTableId")]
        public Input<string>? SnatTableId { get; set; }

        /// <summary>
        /// The source CIDR block specified in the SNAT entry.
        /// </summary>
        [Input("sourceCidr")]
        public Input<string>? SourceCidr { get; set; }

        /// <summary>
        /// The ID of the vSwitch.
        /// </summary>
        [Input("sourceVswitchId")]
        public Input<string>? SourceVswitchId { get; set; }

        /// <summary>
        /// (Available since v1.119.1) The ID of the SNAT entry.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SnatEntryState()
        {
        }
        public static new SnatEntryState Empty => new SnatEntryState();
    }
}
