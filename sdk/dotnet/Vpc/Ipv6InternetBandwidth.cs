// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides a VPC Ipv6 Internet Bandwidth resource. Public network bandwidth of IPv6 address.
    /// 
    /// For information about VPC Ipv6 Internet Bandwidth and how to use it, see [What is Ipv6 Internet Bandwidth](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/allocateipv6internetbandwidth).
    /// 
    /// &gt; **NOTE:** Available since v1.143.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var defaultZones = AliCloud.GetZones.Invoke();
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("defaultNetwork", new()
    ///     {
    ///         VpcName = name,
    ///         EnableIpv6 = true,
    ///         CidrBlock = "172.16.0.0/12",
    ///     });
    /// 
    ///     var vsw = new AliCloud.Vpc.Switch("vsw", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/21",
    ///         AvailabilityZone = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         Ipv6CidrBlockMask = 22,
    ///     });
    /// 
    ///     var @group = new AliCloud.Ecs.SecurityGroup("group", new()
    ///     {
    ///         Description = "foo",
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         SystemDiskCategory = "cloud_efficiency",
    ///         CpuCoreCount = 4,
    ///         MinimumEniIpv6AddressQuantity = 1,
    ///     });
    /// 
    ///     var defaultImages = AliCloud.Ecs.GetImages.Invoke(new()
    ///     {
    ///         NameRegex = "^ubuntu_18.*64",
    ///         MostRecent = true,
    ///         Owners = "system",
    ///     });
    /// 
    ///     var vpcInstance = new AliCloud.Ecs.Instance("vpcInstance", new()
    ///     {
    ///         AvailabilityZone = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         Ipv6AddressCount = 1,
    ///         InstanceType = defaultInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
    ///         SystemDiskCategory = "cloud_efficiency",
    ///         ImageId = defaultImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
    ///         InstanceName = name,
    ///         VswitchId = vsw.Id,
    ///         InternetMaxBandwidthOut = 10,
    ///         SecurityGroups = new[]
    ///         {
    ///             @group,
    ///         }.Select(__item =&gt; __item.Id).ToList(),
    ///     });
    /// 
    ///     var exampleIpv6Gateway = new AliCloud.Vpc.Ipv6Gateway("exampleIpv6Gateway", new()
    ///     {
    ///         Ipv6GatewayName = "example_value",
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultIpv6Addresses = AliCloud.Vpc.GetIpv6Addresses.Invoke(new()
    ///     {
    ///         AssociatedInstanceId = vpcInstance.Id,
    ///         Status = "Available",
    ///     });
    /// 
    ///     var exampleIpv6InternetBandwidth = new AliCloud.Vpc.Ipv6InternetBandwidth("exampleIpv6InternetBandwidth", new()
    ///     {
    ///         Ipv6AddressId = defaultIpv6Addresses.Apply(getIpv6AddressesResult =&gt; getIpv6AddressesResult.Addresses[0]?.Id),
    ///         Ipv6GatewayId = exampleIpv6Gateway.Ipv6GatewayId,
    ///         InternetChargeType = "PayByBandwidth",
    ///         Bandwidth = 20,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPC Ipv6 Internet Bandwidth can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:vpc/ipv6InternetBandwidth:Ipv6InternetBandwidth example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpc/ipv6InternetBandwidth:Ipv6InternetBandwidth")]
    public partial class Ipv6InternetBandwidth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The amount of Internet bandwidth resources of the IPv6 address, Unit: `Mbit/s`. Valid values: `1` to `5000`. **NOTE:** If `internet_charge_type` is set to `PayByTraffic`, the amount of Internet bandwidth resources of the IPv6 address is limited by the specification of the IPv6 gateway. `Small` (default): specifies the Free edition and the Internet bandwidth is from `1` to `500` Mbit/s. `Medium`: specifies the Medium edition and the Internet bandwidth is from `1` to `1000` Mbit/s. `Large`: specifies the Large edition and the Internet bandwidth is from `1` to `2000` Mbit/s.
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The metering method of the Internet bandwidth resources of the IPv6 gateway. Valid values: `PayByBandwidth`, `PayByTraffic`.
        /// </summary>
        [Output("internetChargeType")]
        public Output<string> InternetChargeType { get; private set; } = null!;

        /// <summary>
        /// The ID of the IPv6 address instance.
        /// </summary>
        [Output("ipv6AddressId")]
        public Output<string> Ipv6AddressId { get; private set; } = null!;

        /// <summary>
        /// The ID of the IPv6 gateway to which the IPv6 address belongs.
        /// </summary>
        [Output("ipv6GatewayId")]
        public Output<string> Ipv6GatewayId { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Ipv6InternetBandwidth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ipv6InternetBandwidth(string name, Ipv6InternetBandwidthArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpc/ipv6InternetBandwidth:Ipv6InternetBandwidth", name, args ?? new Ipv6InternetBandwidthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ipv6InternetBandwidth(string name, Input<string> id, Ipv6InternetBandwidthState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/ipv6InternetBandwidth:Ipv6InternetBandwidth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ipv6InternetBandwidth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ipv6InternetBandwidth Get(string name, Input<string> id, Ipv6InternetBandwidthState? state = null, CustomResourceOptions? options = null)
        {
            return new Ipv6InternetBandwidth(name, id, state, options);
        }
    }

    public sealed class Ipv6InternetBandwidthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of Internet bandwidth resources of the IPv6 address, Unit: `Mbit/s`. Valid values: `1` to `5000`. **NOTE:** If `internet_charge_type` is set to `PayByTraffic`, the amount of Internet bandwidth resources of the IPv6 address is limited by the specification of the IPv6 gateway. `Small` (default): specifies the Free edition and the Internet bandwidth is from `1` to `500` Mbit/s. `Medium`: specifies the Medium edition and the Internet bandwidth is from `1` to `1000` Mbit/s. `Large`: specifies the Large edition and the Internet bandwidth is from `1` to `2000` Mbit/s.
        /// </summary>
        [Input("bandwidth", required: true)]
        public Input<int> Bandwidth { get; set; } = null!;

        /// <summary>
        /// The metering method of the Internet bandwidth resources of the IPv6 gateway. Valid values: `PayByBandwidth`, `PayByTraffic`.
        /// </summary>
        [Input("internetChargeType")]
        public Input<string>? InternetChargeType { get; set; }

        /// <summary>
        /// The ID of the IPv6 address instance.
        /// </summary>
        [Input("ipv6AddressId", required: true)]
        public Input<string> Ipv6AddressId { get; set; } = null!;

        /// <summary>
        /// The ID of the IPv6 gateway to which the IPv6 address belongs.
        /// </summary>
        [Input("ipv6GatewayId", required: true)]
        public Input<string> Ipv6GatewayId { get; set; } = null!;

        public Ipv6InternetBandwidthArgs()
        {
        }
        public static new Ipv6InternetBandwidthArgs Empty => new Ipv6InternetBandwidthArgs();
    }

    public sealed class Ipv6InternetBandwidthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of Internet bandwidth resources of the IPv6 address, Unit: `Mbit/s`. Valid values: `1` to `5000`. **NOTE:** If `internet_charge_type` is set to `PayByTraffic`, the amount of Internet bandwidth resources of the IPv6 address is limited by the specification of the IPv6 gateway. `Small` (default): specifies the Free edition and the Internet bandwidth is from `1` to `500` Mbit/s. `Medium`: specifies the Medium edition and the Internet bandwidth is from `1` to `1000` Mbit/s. `Large`: specifies the Large edition and the Internet bandwidth is from `1` to `2000` Mbit/s.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The metering method of the Internet bandwidth resources of the IPv6 gateway. Valid values: `PayByBandwidth`, `PayByTraffic`.
        /// </summary>
        [Input("internetChargeType")]
        public Input<string>? InternetChargeType { get; set; }

        /// <summary>
        /// The ID of the IPv6 address instance.
        /// </summary>
        [Input("ipv6AddressId")]
        public Input<string>? Ipv6AddressId { get; set; }

        /// <summary>
        /// The ID of the IPv6 gateway to which the IPv6 address belongs.
        /// </summary>
        [Input("ipv6GatewayId")]
        public Input<string>? Ipv6GatewayId { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public Ipv6InternetBandwidthState()
        {
        }
        public static new Ipv6InternetBandwidthState Empty => new Ipv6InternetBandwidthState();
    }
}
