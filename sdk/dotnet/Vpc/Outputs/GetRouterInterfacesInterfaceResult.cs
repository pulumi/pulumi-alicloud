// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc.Outputs
{

    [OutputType]
    public sealed class GetRouterInterfacesInterfaceResult
    {
        /// <summary>
        /// ID of the access point used by the VBR.
        /// </summary>
        public readonly string AccessPointId;
        /// <summary>
        /// Router interface creation time.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Router interface description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Source IP address used to perform health check on the physical connection.
        /// </summary>
        public readonly string HealthCheckSourceIp;
        /// <summary>
        /// Destination IP address used to perform health check on the physical connection.
        /// </summary>
        public readonly string HealthCheckTargetIp;
        /// <summary>
        /// Router interface ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Router interface name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the peer router interface.
        /// </summary>
        public readonly string OppositeInterfaceId;
        /// <summary>
        /// Account ID of the owner of the peer router interface.
        /// </summary>
        public readonly string OppositeInterfaceOwnerId;
        /// <summary>
        /// Peer router region ID.
        /// </summary>
        public readonly string OppositeRegionId;
        /// <summary>
        /// Peer router ID.
        /// </summary>
        public readonly string OppositeRouterId;
        /// <summary>
        /// Router type in the peer region. Possible values: `VRouter` and `VBR`.
        /// </summary>
        public readonly string OppositeRouterType;
        /// <summary>
        /// Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and 
        /// `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `router_type` is set to `VBR`.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// ID of the VRouter located in the local region.
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
        /// </summary>
        public readonly string RouterType;
        /// <summary>
        /// Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
        /// </summary>
        public readonly string Specification;
        /// <summary>
        /// Expected status. Valid values are `Active`, `Inactive` and `Idle`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// ID of the VPC that owns the router in the local region.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetRouterInterfacesInterfaceResult(
            string accessPointId,

            string creationTime,

            string description,

            string healthCheckSourceIp,

            string healthCheckTargetIp,

            string id,

            string name,

            string oppositeInterfaceId,

            string oppositeInterfaceOwnerId,

            string oppositeRegionId,

            string oppositeRouterId,

            string oppositeRouterType,

            string role,

            string routerId,

            string routerType,

            string specification,

            string status,

            string vpcId)
        {
            AccessPointId = accessPointId;
            CreationTime = creationTime;
            Description = description;
            HealthCheckSourceIp = healthCheckSourceIp;
            HealthCheckTargetIp = healthCheckTargetIp;
            Id = id;
            Name = name;
            OppositeInterfaceId = oppositeInterfaceId;
            OppositeInterfaceOwnerId = oppositeInterfaceOwnerId;
            OppositeRegionId = oppositeRegionId;
            OppositeRouterId = oppositeRouterId;
            OppositeRouterType = oppositeRouterType;
            Role = role;
            RouterId = routerId;
            RouterType = routerType;
            Specification = specification;
            Status = status;
            VpcId = vpcId;
        }
    }
}
