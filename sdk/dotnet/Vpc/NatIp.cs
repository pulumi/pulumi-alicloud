// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    /// <summary>
    /// Provides a VPC Nat Ip resource.
    /// 
    /// For information about VPC Nat Ip and how to use it, see [What is Nat Ip](https://www.alibabacloud.com/help/doc-detail/281976.htm).
    /// 
    /// &gt; **NOTE:** Available in v1.136.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZones = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var exampleNetwork = new AliCloud.Vpc.Network("exampleNetwork", new()
    ///     {
    ///         VpcName = "example_value",
    ///         CidrBlock = "172.16.0.0/12",
    ///     });
    /// 
    ///     var exampleSwitch = new AliCloud.Vpc.Switch("exampleSwitch", new()
    ///     {
    ///         VpcId = alicloud_vpc.Default.Id,
    ///         CidrBlock = "172.16.0.0/21",
    ///         ZoneId = exampleZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VswitchName = "example_value",
    ///     });
    /// 
    ///     var exampleNatGateway = new AliCloud.Vpc.NatGateway("exampleNatGateway", new()
    ///     {
    ///         VpcId = exampleNetwork.Id,
    ///         InternetChargeType = "PayByLcu",
    ///         NatGatewayName = "example_value",
    ///         Description = "example_value",
    ///         NatType = "Enhanced",
    ///         VswitchId = exampleSwitch.Id,
    ///         NetworkType = "intranet",
    ///     });
    /// 
    ///     var exampleNatIpCidr = new AliCloud.Vpc.NatIpCidr("exampleNatIpCidr", new()
    ///     {
    ///         NatIpCidrBlock = "192.168.0.0/16",
    ///         NatGatewayId = exampleNatGateway.Id,
    ///         NatIpCidrDescription = "example_value",
    ///         NatIpCidrName = "example_value",
    ///     });
    /// 
    ///     var exampleNatIp = new AliCloud.Vpc.NatIp("exampleNatIp", new()
    ///     {
    ///         NatIpAddress = "192.168.0.37",
    ///         NatGatewayId = exampleNatGateway.Id,
    ///         NatIpDescription = "example_value",
    ///         NatIpName = "example_value",
    ///         NatIpCidr = exampleNatIpCidr.NatIpCidrBlock,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPC Nat Ip can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:vpc/natIp:NatIp example &lt;nat_gateway_id&gt;:&lt;nat_ip_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:vpc/natIp:NatIp")]
    public partial class NatIp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to check the validity of the request without actually making the request.
        /// </summary>
        [Output("dryRun")]
        public Output<bool> DryRun { get; private set; } = null!;

        /// <summary>
        /// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
        /// </summary>
        [Output("natIp")]
        public Output<string> NatIpAddress { get; private set; } = null!;

        /// <summary>
        /// NAT IP ADDRESS of the address segment.
        /// </summary>
        [Output("natIpCidr")]
        public Output<string?> NatIpCidr { get; private set; } = null!;

        /// <summary>
        /// The ID of the CIDR block to which the NAT IP address belongs.
        /// </summary>
        [Output("natIpCidrId")]
        public Output<string?> NatIpCidrId { get; private set; } = null!;

        /// <summary>
        /// NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the` http://` Or `https://` at the beginning.
        /// </summary>
        [Output("natIpDescription")]
        public Output<string?> NatIpDescription { get; private set; } = null!;

        /// <summary>
        /// Ihe ID of the Nat Ip.
        /// </summary>
        [Output("natIpId")]
        public Output<string> NatIpId { get; private set; } = null!;

        /// <summary>
        /// NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
        /// </summary>
        [Output("natIpName")]
        public Output<string?> NatIpName { get; private set; } = null!;

        /// <summary>
        /// The status of the NAT IP address. Valid values: `Available`, `Deleting`, `Creating` and `Deleted`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a NatIp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatIp(string name, NatIpArgs args, CustomResourceOptions? options = null)
            : base("alicloud:vpc/natIp:NatIp", name, args ?? new NatIpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatIp(string name, Input<string> id, NatIpState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:vpc/natIp:NatIp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatIp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatIp Get(string name, Input<string> id, NatIpState? state = null, CustomResourceOptions? options = null)
        {
            return new NatIp(name, id, state, options);
        }
    }

    public sealed class NatIpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to check the validity of the request without actually making the request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        /// <summary>
        /// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
        /// </summary>
        [Input("natIp")]
        public Input<string>? NatIpAddress { get; set; }

        /// <summary>
        /// NAT IP ADDRESS of the address segment.
        /// </summary>
        [Input("natIpCidr")]
        public Input<string>? NatIpCidr { get; set; }

        /// <summary>
        /// The ID of the CIDR block to which the NAT IP address belongs.
        /// </summary>
        [Input("natIpCidrId")]
        public Input<string>? NatIpCidrId { get; set; }

        /// <summary>
        /// NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the` http://` Or `https://` at the beginning.
        /// </summary>
        [Input("natIpDescription")]
        public Input<string>? NatIpDescription { get; set; }

        /// <summary>
        /// NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
        /// </summary>
        [Input("natIpName")]
        public Input<string>? NatIpName { get; set; }

        public NatIpArgs()
        {
        }
        public static new NatIpArgs Empty => new NatIpArgs();
    }

    public sealed class NatIpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to check the validity of the request without actually making the request.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        /// <summary>
        /// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
        /// </summary>
        [Input("natIp")]
        public Input<string>? NatIpAddress { get; set; }

        /// <summary>
        /// NAT IP ADDRESS of the address segment.
        /// </summary>
        [Input("natIpCidr")]
        public Input<string>? NatIpCidr { get; set; }

        /// <summary>
        /// The ID of the CIDR block to which the NAT IP address belongs.
        /// </summary>
        [Input("natIpCidrId")]
        public Input<string>? NatIpCidrId { get; set; }

        /// <summary>
        /// NAT IP ADDRESS description of information. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the` http://` Or `https://` at the beginning.
        /// </summary>
        [Input("natIpDescription")]
        public Input<string>? NatIpDescription { get; set; }

        /// <summary>
        /// Ihe ID of the Nat Ip.
        /// </summary>
        [Input("natIpId")]
        public Input<string>? NatIpId { get; set; }

        /// <summary>
        /// NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
        /// </summary>
        [Input("natIpName")]
        public Input<string>? NatIpName { get; set; }

        /// <summary>
        /// The status of the NAT IP address. Valid values: `Available`, `Deleting`, `Creating` and `Deleted`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public NatIpState()
        {
        }
        public static new NatIpState Empty => new NatIpState();
    }
}
