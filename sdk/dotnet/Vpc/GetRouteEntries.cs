// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Vpc
{
    public static class GetRouteEntries
    {
        /// <summary>
        /// This data source provides a list of Route Entries owned by an Alibaba Cloud account.
        /// 
        /// &gt; **NOTE:** Available in 1.37.0+.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var defaultGetInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         CpuCoreCount = 1,
        ///         MemorySize = 2,
        ///     });
        /// 
        ///     var defaultGetImages = AliCloud.Ecs.GetImages.Invoke(new()
        ///     {
        ///         NameRegex = "^ubuntu_18.*64",
        ///         MostRecent = true,
        ///         Owners = "system",
        ///     });
        /// 
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-testAccRouteEntryConfig";
        ///     var fooNetwork = new AliCloud.Vpc.Network("foo", new()
        ///     {
        ///         Name = name,
        ///         CidrBlock = "10.1.0.0/21",
        ///     });
        /// 
        ///     var fooSwitch = new AliCloud.Vpc.Switch("foo", new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         CidrBlock = "10.1.1.0/24",
        ///         AvailabilityZone = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
        ///         VswitchName = name,
        ///     });
        /// 
        ///     var tfTestFoo = new AliCloud.Ecs.SecurityGroup("tf_test_foo", new()
        ///     {
        ///         Name = name,
        ///         Description = "foo",
        ///         VpcId = fooNetwork.Id,
        ///     });
        /// 
        ///     var fooInstance = new AliCloud.Ecs.Instance("foo", new()
        ///     {
        ///         SecurityGroups = new[]
        ///         {
        ///             tfTestFoo.Id,
        ///         },
        ///         VswitchId = fooSwitch.Id,
        ///         AllocatePublicIp = true,
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceType = defaultGetInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///         InternetChargeType = "PayByTraffic",
        ///         InternetMaxBandwidthOut = 5,
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         ImageId = defaultGetImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
        ///         InstanceName = name,
        ///     });
        /// 
        ///     var fooRouteEntry = new AliCloud.Vpc.RouteEntry("foo", new()
        ///     {
        ///         RouteTableId = fooNetwork.RouteTableId,
        ///         DestinationCidrblock = "172.11.1.1/32",
        ///         NexthopType = "Instance",
        ///         NexthopId = fooInstance.Id,
        ///     });
        /// 
        ///     var ingress = new AliCloud.Ecs.SecurityGroupRule("ingress", new()
        ///     {
        ///         Type = "ingress",
        ///         IpProtocol = "tcp",
        ///         NicType = "intranet",
        ///         Policy = "accept",
        ///         PortRange = "22/22",
        ///         Priority = 1,
        ///         SecurityGroupId = tfTestFoo.Id,
        ///         CidrIp = "0.0.0.0/0",
        ///     });
        /// 
        ///     var foo = AliCloud.Vpc.GetRouteEntries.Invoke(new()
        ///     {
        ///         RouteTableId = fooRouteEntry.RouteTableId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteEntriesResult> InvokeAsync(GetRouteEntriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteEntriesResult>("alicloud:vpc/getRouteEntries:getRouteEntries", args ?? new GetRouteEntriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides a list of Route Entries owned by an Alibaba Cloud account.
        /// 
        /// &gt; **NOTE:** Available in 1.37.0+.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = AliCloud.GetZones.Invoke(new()
        ///     {
        ///         AvailableResourceCreation = "VSwitch",
        ///     });
        /// 
        ///     var defaultGetInstanceTypes = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
        ///     {
        ///         AvailabilityZone = @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         CpuCoreCount = 1,
        ///         MemorySize = 2,
        ///     });
        /// 
        ///     var defaultGetImages = AliCloud.Ecs.GetImages.Invoke(new()
        ///     {
        ///         NameRegex = "^ubuntu_18.*64",
        ///         MostRecent = true,
        ///         Owners = "system",
        ///     });
        /// 
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tf-testAccRouteEntryConfig";
        ///     var fooNetwork = new AliCloud.Vpc.Network("foo", new()
        ///     {
        ///         Name = name,
        ///         CidrBlock = "10.1.0.0/21",
        ///     });
        /// 
        ///     var fooSwitch = new AliCloud.Vpc.Switch("foo", new()
        ///     {
        ///         VpcId = fooNetwork.Id,
        ///         CidrBlock = "10.1.1.0/24",
        ///         AvailabilityZone = @default.Apply(@default =&gt; @default.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id)),
        ///         VswitchName = name,
        ///     });
        /// 
        ///     var tfTestFoo = new AliCloud.Ecs.SecurityGroup("tf_test_foo", new()
        ///     {
        ///         Name = name,
        ///         Description = "foo",
        ///         VpcId = fooNetwork.Id,
        ///     });
        /// 
        ///     var fooInstance = new AliCloud.Ecs.Instance("foo", new()
        ///     {
        ///         SecurityGroups = new[]
        ///         {
        ///             tfTestFoo.Id,
        ///         },
        ///         VswitchId = fooSwitch.Id,
        ///         AllocatePublicIp = true,
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceType = defaultGetInstanceTypes.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
        ///         InternetChargeType = "PayByTraffic",
        ///         InternetMaxBandwidthOut = 5,
        ///         SystemDiskCategory = "cloud_efficiency",
        ///         ImageId = defaultGetImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id),
        ///         InstanceName = name,
        ///     });
        /// 
        ///     var fooRouteEntry = new AliCloud.Vpc.RouteEntry("foo", new()
        ///     {
        ///         RouteTableId = fooNetwork.RouteTableId,
        ///         DestinationCidrblock = "172.11.1.1/32",
        ///         NexthopType = "Instance",
        ///         NexthopId = fooInstance.Id,
        ///     });
        /// 
        ///     var ingress = new AliCloud.Ecs.SecurityGroupRule("ingress", new()
        ///     {
        ///         Type = "ingress",
        ///         IpProtocol = "tcp",
        ///         NicType = "intranet",
        ///         Policy = "accept",
        ///         PortRange = "22/22",
        ///         Priority = 1,
        ///         SecurityGroupId = tfTestFoo.Id,
        ///         CidrIp = "0.0.0.0/0",
        ///     });
        /// 
        ///     var foo = AliCloud.Vpc.GetRouteEntries.Invoke(new()
        ///     {
        ///         RouteTableId = fooRouteEntry.RouteTableId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteEntriesResult> Invoke(GetRouteEntriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteEntriesResult>("alicloud:vpc/getRouteEntries:getRouteEntries", args ?? new GetRouteEntriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteEntriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The destination CIDR block of the route entry.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        /// <summary>
        /// The instance ID of the next hop.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of the router table to which the route entry belongs.
        /// </summary>
        [Input("routeTableId", required: true)]
        public string RouteTableId { get; set; } = null!;

        /// <summary>
        /// The type of the route entry.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRouteEntriesArgs()
        {
        }
        public static new GetRouteEntriesArgs Empty => new GetRouteEntriesArgs();
    }

    public sealed class GetRouteEntriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The destination CIDR block of the route entry.
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// The instance ID of the next hop.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ID of the router table to which the route entry belongs.
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        /// <summary>
        /// The type of the route entry.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRouteEntriesInvokeArgs()
        {
        }
        public static new GetRouteEntriesInvokeArgs Empty => new GetRouteEntriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteEntriesResult
    {
        /// <summary>
        /// The destination CIDR block of the route entry.
        /// </summary>
        public readonly string? CidrBlock;
        /// <summary>
        /// A list of Route Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteEntriesEntryResult> Entries;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The instance ID of the next hop.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The ID of the router table to which the route entry belongs.
        /// </summary>
        public readonly string RouteTableId;
        /// <summary>
        /// The type of the route entry.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetRouteEntriesResult(
            string? cidrBlock,

            ImmutableArray<Outputs.GetRouteEntriesEntryResult> entries,

            string id,

            string? instanceId,

            string? outputFile,

            string routeTableId,

            string? type)
        {
            CidrBlock = cidrBlock;
            Entries = entries;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            RouteTableId = routeTableId;
            Type = type;
        }
    }
}
