// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ram
{
    /// <summary>
    /// ## Import
    /// 
    /// RAM Password Policy can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ram/passwordPolicy:PasswordPolicy example &lt;id&gt;.
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ram/passwordPolicy:PasswordPolicy")]
    public partial class PasswordPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to restrict logon after the password expires. Value:
        /// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
        /// - false (default): After the password expires, the RAM user can change the password and log on normally.
        /// </summary>
        [Output("hardExpiry")]
        public Output<bool?> HardExpiry { get; private set; } = null!;

        /// <summary>
        /// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
        /// Value range: 0~32.
        /// Default value: 0, which means that the password retry constraint is not enabled.
        /// </summary>
        [Output("maxLoginAttemps")]
        public Output<int?> MaxLoginAttemps { get; private set; } = null!;

        /// <summary>
        /// Password validity period.
        /// Value range: 0~1095. Unit: days.
        /// Default value: 0, which means never expires.
        /// </summary>
        [Output("maxPasswordAge")]
        public Output<int?> MaxPasswordAge { get; private set; } = null!;

        /// <summary>
        /// The minimum number of unique characters in the password.
        /// Valid values: 0 to 8.
        /// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
        /// </summary>
        [Output("minimumPasswordDifferentCharacter")]
        public Output<int?> MinimumPasswordDifferentCharacter { get; private set; } = null!;

        /// <summary>
        /// The minimum number of characters in the password.
        /// Valid values: 8 to 32. Default value: 8.
        /// </summary>
        [Output("minimumPasswordLength")]
        public Output<int> MinimumPasswordLength { get; private set; } = null!;

        /// <summary>
        /// Whether the user name is not allowed in the password. Value:
        /// - true: The password cannot contain the user name.
        /// - false (default): The user name can be included in the password.
        /// </summary>
        [Output("passwordNotContainUserName")]
        public Output<bool?> PasswordNotContainUserName { get; private set; } = null!;

        /// <summary>
        /// Historical password check policy.
        /// Do not use the previous N Passwords. The value range of N is 0 to 24.
        /// Default value: 0, indicating that the historical password check policy is not enabled.
        /// </summary>
        [Output("passwordReusePrevention")]
        public Output<int?> PasswordReusePrevention { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the password must contain lowercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Output("requireLowercaseCharacters")]
        public Output<bool?> RequireLowercaseCharacters { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the password must contain digits. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Output("requireNumbers")]
        public Output<bool?> RequireNumbers { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the password must contain special characters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Output("requireSymbols")]
        public Output<bool?> RequireSymbols { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the password must contain uppercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Output("requireUppercaseCharacters")]
        public Output<bool?> RequireUppercaseCharacters { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordPolicy(string name, PasswordPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:ram/passwordPolicy:PasswordPolicy", name, args ?? new PasswordPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordPolicy(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ram/passwordPolicy:PasswordPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordPolicy Get(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordPolicy(name, id, state, options);
        }
    }

    public sealed class PasswordPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to restrict logon after the password expires. Value:
        /// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
        /// - false (default): After the password expires, the RAM user can change the password and log on normally.
        /// </summary>
        [Input("hardExpiry")]
        public Input<bool>? HardExpiry { get; set; }

        /// <summary>
        /// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
        /// Value range: 0~32.
        /// Default value: 0, which means that the password retry constraint is not enabled.
        /// </summary>
        [Input("maxLoginAttemps")]
        public Input<int>? MaxLoginAttemps { get; set; }

        /// <summary>
        /// Password validity period.
        /// Value range: 0~1095. Unit: days.
        /// Default value: 0, which means never expires.
        /// </summary>
        [Input("maxPasswordAge")]
        public Input<int>? MaxPasswordAge { get; set; }

        /// <summary>
        /// The minimum number of unique characters in the password.
        /// Valid values: 0 to 8.
        /// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
        /// </summary>
        [Input("minimumPasswordDifferentCharacter")]
        public Input<int>? MinimumPasswordDifferentCharacter { get; set; }

        /// <summary>
        /// The minimum number of characters in the password.
        /// Valid values: 8 to 32. Default value: 8.
        /// </summary>
        [Input("minimumPasswordLength")]
        public Input<int>? MinimumPasswordLength { get; set; }

        /// <summary>
        /// Whether the user name is not allowed in the password. Value:
        /// - true: The password cannot contain the user name.
        /// - false (default): The user name can be included in the password.
        /// </summary>
        [Input("passwordNotContainUserName")]
        public Input<bool>? PasswordNotContainUserName { get; set; }

        /// <summary>
        /// Historical password check policy.
        /// Do not use the previous N Passwords. The value range of N is 0 to 24.
        /// Default value: 0, indicating that the historical password check policy is not enabled.
        /// </summary>
        [Input("passwordReusePrevention")]
        public Input<int>? PasswordReusePrevention { get; set; }

        /// <summary>
        /// Specifies whether the password must contain lowercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireLowercaseCharacters")]
        public Input<bool>? RequireLowercaseCharacters { get; set; }

        /// <summary>
        /// Specifies whether the password must contain digits. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireNumbers")]
        public Input<bool>? RequireNumbers { get; set; }

        /// <summary>
        /// Specifies whether the password must contain special characters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireSymbols")]
        public Input<bool>? RequireSymbols { get; set; }

        /// <summary>
        /// Specifies whether the password must contain uppercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireUppercaseCharacters")]
        public Input<bool>? RequireUppercaseCharacters { get; set; }

        public PasswordPolicyArgs()
        {
        }
        public static new PasswordPolicyArgs Empty => new PasswordPolicyArgs();
    }

    public sealed class PasswordPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to restrict logon after the password expires. Value:
        /// - true: After the password expires, you cannot log in to the console. You must reset the password of the RAM user through the main account or a RAM user with administrator permissions to log on normally.
        /// - false (default): After the password expires, the RAM user can change the password and log on normally.
        /// </summary>
        [Input("hardExpiry")]
        public Input<bool>? HardExpiry { get; set; }

        /// <summary>
        /// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
        /// Value range: 0~32.
        /// Default value: 0, which means that the password retry constraint is not enabled.
        /// </summary>
        [Input("maxLoginAttemps")]
        public Input<int>? MaxLoginAttemps { get; set; }

        /// <summary>
        /// Password validity period.
        /// Value range: 0~1095. Unit: days.
        /// Default value: 0, which means never expires.
        /// </summary>
        [Input("maxPasswordAge")]
        public Input<int>? MaxPasswordAge { get; set; }

        /// <summary>
        /// The minimum number of unique characters in the password.
        /// Valid values: 0 to 8.
        /// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
        /// </summary>
        [Input("minimumPasswordDifferentCharacter")]
        public Input<int>? MinimumPasswordDifferentCharacter { get; set; }

        /// <summary>
        /// The minimum number of characters in the password.
        /// Valid values: 8 to 32. Default value: 8.
        /// </summary>
        [Input("minimumPasswordLength")]
        public Input<int>? MinimumPasswordLength { get; set; }

        /// <summary>
        /// Whether the user name is not allowed in the password. Value:
        /// - true: The password cannot contain the user name.
        /// - false (default): The user name can be included in the password.
        /// </summary>
        [Input("passwordNotContainUserName")]
        public Input<bool>? PasswordNotContainUserName { get; set; }

        /// <summary>
        /// Historical password check policy.
        /// Do not use the previous N Passwords. The value range of N is 0 to 24.
        /// Default value: 0, indicating that the historical password check policy is not enabled.
        /// </summary>
        [Input("passwordReusePrevention")]
        public Input<int>? PasswordReusePrevention { get; set; }

        /// <summary>
        /// Specifies whether the password must contain lowercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireLowercaseCharacters")]
        public Input<bool>? RequireLowercaseCharacters { get; set; }

        /// <summary>
        /// Specifies whether the password must contain digits. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireNumbers")]
        public Input<bool>? RequireNumbers { get; set; }

        /// <summary>
        /// Specifies whether the password must contain special characters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireSymbols")]
        public Input<bool>? RequireSymbols { get; set; }

        /// <summary>
        /// Specifies whether the password must contain uppercase letters. Valid values:
        /// - true
        /// - false (default)
        /// </summary>
        [Input("requireUppercaseCharacters")]
        public Input<bool>? RequireUppercaseCharacters { get; set; }

        public PasswordPolicyState()
        {
        }
        public static new PasswordPolicyState Empty => new PasswordPolicyState();
    }
}
