// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ram
{
    /// <summary>
    /// Provides a RAM Policy resource.
    /// 
    /// For information about RAM Policy and how to use it, see [What is Policy](https://www.alibabacloud.com/help/en/ram/developer-reference/api-ram-2015-05-01-createpolicy).
    /// 
    /// &gt; **NOTE:** Available since v1.0.0.
    /// 
    /// &gt; **NOTE:** When you want to destroy this resource forcefully(means remove all the relationships associated with it automatically and then destroy it) without set `force`  with `true` at beginning, you need add `force = true` to configuration file and run `pulumi preview`, then you can delete resource forcefully.
    /// 
    /// &gt; **NOTE:** Each policy can own at most 5 versions and the oldest version will be removed after its version achieves 5.
    /// 
    /// &gt; **NOTE:** If the policy has multiple versions, all non-default versions will be deleted first when deleting policy.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new RAM Policy.
    ///     var @default = new Random.Index.Integer("default", new()
    ///     {
    ///         Min = 10000,
    ///         Max = 99999,
    ///     });
    /// 
    ///     var policy = new AliCloud.Ram.Policy("policy", new()
    ///     {
    ///         PolicyName = $"tf-example-{@default.Result}",
    ///         PolicyDocument = @"  {
    ///     ""Statement"": [
    ///       {
    ///         ""Action"": [
    ///           ""oss:ListObjects"",
    ///           ""oss:GetObject""
    ///         ],
    ///         ""Effect"": ""Allow"",
    ///         ""Resource"": [
    ///           ""acs:oss:*:*:mybucket"",
    ///           ""acs:oss:*:*:mybucket/*""
    ///         ]
    ///       }
    ///     ],
    ///       ""Version"": ""1""
    ///   }
    /// ",
    ///         Description = "this is a policy test",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RAM Policy can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ram/policy:Policy example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ram/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of attachments of the policy.
        /// </summary>
        [Output("attachmentCount")]
        public Output<int> AttachmentCount { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.246.0) The create time of the policy.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The default version ID of the policy.
        /// </summary>
        [Output("defaultVersion")]
        public Output<string> DefaultVersion { get; private set; } = null!;

        /// <summary>
        /// The description of the policy. It can be 1 to 1024 characters in length.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
        /// </summary>
        [Output("document")]
        public Output<string> Document { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to force delete the Policy. Default value: `false`. Valid values:
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The content of the policy. The maximum length is 6144 bytes.
        /// </summary>
        [Output("policyDocument")]
        public Output<string> PolicyDocument { get; private set; } = null!;

        /// <summary>
        /// The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
        /// </summary>
        [Output("policyName")]
        public Output<string> PolicyName { get; private set; } = null!;

        /// <summary>
        /// The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
        /// 
        /// Currently contains:
        /// - None: Turn off the rotation mechanism.
        /// - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
        /// </summary>
        [Output("rotateStrategy")]
        public Output<string?> RotateStrategy { get; private set; } = null!;

        /// <summary>
        /// Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
        /// </summary>
        [Output("statements")]
        public Output<ImmutableArray<Outputs.PolicyStatement>> Statements { get; private set; } = null!;

        /// <summary>
        /// The list of tags on the policy.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the policy.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;

        /// <summary>
        /// The ID of the default policy version.
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("alicloud:ram/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ram/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the policy. It can be 1 to 1024 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
        /// </summary>
        [Input("document")]
        public Input<string>? Document { get; set; }

        /// <summary>
        /// Specifies whether to force delete the Policy. Default value: `false`. Valid values:
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The content of the policy. The maximum length is 6144 bytes.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        /// <summary>
        /// The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
        /// 
        /// Currently contains:
        /// - None: Turn off the rotation mechanism.
        /// - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
        /// </summary>
        [Input("rotateStrategy")]
        public Input<string>? RotateStrategy { get; set; }

        [Input("statements")]
        private InputList<Inputs.PolicyStatementArgs>? _statements;

        /// <summary>
        /// Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
        /// </summary>
        [Obsolete(@"Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace. ")]
        public InputList<Inputs.PolicyStatementArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.PolicyStatementArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The list of tags on the policy.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of attachments of the policy.
        /// </summary>
        [Input("attachmentCount")]
        public Input<int>? AttachmentCount { get; set; }

        /// <summary>
        /// (Available since v1.246.0) The create time of the policy.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The default version ID of the policy.
        /// </summary>
        [Input("defaultVersion")]
        public Input<string>? DefaultVersion { get; set; }

        /// <summary>
        /// The description of the policy. It can be 1 to 1024 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Field `document` has been deprecated from provider version 1.114.0. New field `policy_document` instead.
        /// </summary>
        [Input("document")]
        public Input<string>? Document { get; set; }

        /// <summary>
        /// Specifies whether to force delete the Policy. Default value: `false`. Valid values:
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Field `name` has been deprecated from provider version 1.114.0. New field `policy_name` instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The content of the policy. The maximum length is 6144 bytes.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        /// <summary>
        /// The policy name. It can be 1 to 128 characters in length and can contain English letters, digits, and dashes (-).
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The automatic rotation mechanism of policy versions can delete historical policy versions. The default value is None.
        /// 
        /// Currently contains:
        /// - None: Turn off the rotation mechanism.
        /// - DeleteOldestNonDefaultVersionWhenLimitExceeded: When the number of permission policy versions exceeds the limit, the oldest and inactive version is deleted.
        /// </summary>
        [Input("rotateStrategy")]
        public Input<string>? RotateStrategy { get; set; }

        [Input("statements")]
        private InputList<Inputs.PolicyStatementGetArgs>? _statements;

        /// <summary>
        /// Field `statement` has been deprecated from provider version 1.49.0. New field `document` instead. See `statement` below.
        /// </summary>
        [Obsolete(@"Field 'statement' has been deprecated from version 1.49.0, and use field 'document' to replace. ")]
        public InputList<Inputs.PolicyStatementGetArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.PolicyStatementGetArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The list of tags on the policy.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the policy.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Field `version` has been deprecated from provider version 1.49.0. New field `document` instead.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The ID of the default policy version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
