// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ehpc.Outputs
{

    [OutputType]
    public sealed class GetJobTemplatesTemplateResult
    {
        /// <summary>
        /// Queue Jobs, Is of the Form: 1-10:2.
        /// </summary>
        public readonly string ArrayRequest;
        /// <summary>
        /// Job Maximum Run Time.
        /// </summary>
        public readonly string ClockTime;
        /// <summary>
        /// Job Commands.
        /// </summary>
        public readonly string CommandLine;
        /// <summary>
        /// A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
        /// </summary>
        public readonly int Gpu;
        /// <summary>
        /// The ID of the Job Template.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The first ID of the resource.
        /// </summary>
        public readonly string JobTemplateId;
        /// <summary>
        /// A Job Template Name.
        /// </summary>
        public readonly string JobTemplateName;
        /// <summary>
        /// A Single Compute Node Maximum Memory.
        /// </summary>
        public readonly string Mem;
        /// <summary>
        /// Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
        /// </summary>
        public readonly int Node;
        /// <summary>
        /// Job Commands the Directory.
        /// </summary>
        public readonly string PackagePath;
        /// <summary>
        /// The Job Priority.Possible Values: 0~9.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The Job Queue.
        /// </summary>
        public readonly string Queue;
        /// <summary>
        /// If the Job Is Support for the Re-Run.
        /// </summary>
        public readonly bool ReRunable;
        /// <summary>
        /// The name of the user who performed the job.
        /// </summary>
        public readonly string RunasUser;
        /// <summary>
        /// Error Output Path.
        /// </summary>
        public readonly string StderrRedirectPath;
        /// <summary>
        /// Standard Output Path and.
        /// </summary>
        public readonly string StdoutRedirectPath;
        /// <summary>
        /// A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
        /// </summary>
        public readonly int Task;
        /// <summary>
        /// A Single Task and the Number of Required Threads.Possible Values: 1~20000.
        /// </summary>
        public readonly int Thread;
        /// <summary>
        /// The Job of the Environment Variable.
        /// </summary>
        public readonly string Variables;

        [OutputConstructor]
        private GetJobTemplatesTemplateResult(
            string arrayRequest,

            string clockTime,

            string commandLine,

            int gpu,

            string id,

            string jobTemplateId,

            string jobTemplateName,

            string mem,

            int node,

            string packagePath,

            int priority,

            string queue,

            bool reRunable,

            string runasUser,

            string stderrRedirectPath,

            string stdoutRedirectPath,

            int task,

            int thread,

            string variables)
        {
            ArrayRequest = arrayRequest;
            ClockTime = clockTime;
            CommandLine = commandLine;
            Gpu = gpu;
            Id = id;
            JobTemplateId = jobTemplateId;
            JobTemplateName = jobTemplateName;
            Mem = mem;
            Node = node;
            PackagePath = packagePath;
            Priority = priority;
            Queue = queue;
            ReRunable = reRunable;
            RunasUser = runasUser;
            StderrRedirectPath = stderrRedirectPath;
            StdoutRedirectPath = stdoutRedirectPath;
            Task = task;
            Thread = thread;
            Variables = variables;
        }
    }
}
