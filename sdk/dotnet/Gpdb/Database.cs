// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gpdb
{
    /// <summary>
    /// Provides a GPDB Database resource.
    /// 
    /// For information about GPDB Database and how to use it, see [What is Database](https://www.alibabacloud.com/help/en/).
    /// 
    /// &gt; **NOTE:** Available since v1.232.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var default35OkxY = new AliCloud.Vpc.Network("default35OkxY", new()
    ///     {
    ///         CidrBlock = "192.168.0.0/16",
    ///     });
    /// 
    ///     var defaultl8haQ3 = new AliCloud.Vpc.Switch("defaultl8haQ3", new()
    ///     {
    ///         VpcId = default35OkxY.Id,
    ///         ZoneId = "cn-beijing-h",
    ///         CidrBlock = "192.168.1.0/24",
    ///     });
    /// 
    ///     var defaultTC08a9 = new AliCloud.Gpdb.Instance("defaultTC08a9", new()
    ///     {
    ///         InstanceSpec = "2C8G",
    ///         SegNodeNum = 2,
    ///         SegStorageType = "cloud_essd",
    ///         InstanceNetworkType = "VPC",
    ///         DbInstanceCategory = "Basic",
    ///         PaymentType = "PayAsYouGo",
    ///         SslEnabled = 0,
    ///         EngineVersion = "6.0",
    ///         Engine = "gpdb",
    ///         ZoneId = "cn-beijing-h",
    ///         VswitchId = defaultl8haQ3.Id,
    ///         StorageSize = 50,
    ///         MasterCu = 4,
    ///         VpcId = default35OkxY.Id,
    ///         DbInstanceMode = "StorageElastic",
    ///     });
    /// 
    ///     var @default = new AliCloud.Gpdb.Database("default", new()
    ///     {
    ///         CharacterSetName = "UTF8",
    ///         Owner = "adbpgadmin",
    ///         Description = "go-to-the-docks-for-french-fries",
    ///         DatabaseName = "seagull",
    ///         Collate = "en_US.utf8",
    ///         Ctype = "en_US.utf8",
    ///         DbInstanceId = defaultTC08a9.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GPDB Database can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:gpdb/database:Database example &lt;db_instance_id&gt;:&lt;database_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:gpdb/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Character set, default value is UTF8
        /// </summary>
        [Output("characterSetName")]
        public Output<string?> CharacterSetName { get; private set; } = null!;

        /// <summary>
        /// Database locale parameters, specifying string comparison/collation
        /// </summary>
        [Output("collate")]
        public Output<string?> Collate { get; private set; } = null!;

        /// <summary>
        /// Database locale parameters, specifying character classification/case conversion rules
        /// </summary>
        [Output("ctype")]
        public Output<string?> Ctype { get; private set; } = null!;

        /// <summary>
        /// Database Name
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Instance ID
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// Database Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Data Sheet owner
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("alicloud:gpdb/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:gpdb/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Character set, default value is UTF8
        /// </summary>
        [Input("characterSetName")]
        public Input<string>? CharacterSetName { get; set; }

        /// <summary>
        /// Database locale parameters, specifying string comparison/collation
        /// </summary>
        [Input("collate")]
        public Input<string>? Collate { get; set; }

        /// <summary>
        /// Database locale parameters, specifying character classification/case conversion rules
        /// </summary>
        [Input("ctype")]
        public Input<string>? Ctype { get; set; }

        /// <summary>
        /// Database Name
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Instance ID
        /// </summary>
        [Input("dbInstanceId", required: true)]
        public Input<string> DbInstanceId { get; set; } = null!;

        /// <summary>
        /// Database Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Data Sheet owner
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Character set, default value is UTF8
        /// </summary>
        [Input("characterSetName")]
        public Input<string>? CharacterSetName { get; set; }

        /// <summary>
        /// Database locale parameters, specifying string comparison/collation
        /// </summary>
        [Input("collate")]
        public Input<string>? Collate { get; set; }

        /// <summary>
        /// Database locale parameters, specifying character classification/case conversion rules
        /// </summary>
        [Input("ctype")]
        public Input<string>? Ctype { get; set; }

        /// <summary>
        /// Database Name
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Instance ID
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// Database Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Data Sheet owner
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
