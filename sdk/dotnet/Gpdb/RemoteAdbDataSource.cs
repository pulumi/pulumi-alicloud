// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Gpdb
{
    /// <summary>
    /// Provides a GPDB Remote ADB Data Source resource.
    /// 
    /// RemoteADBDataSource is the data external table call method between greenplums, which will be used for data external table access between ADB-PG.
    /// 
    /// For information about GPDB Remote ADB Data Source and how to use it, see [What is Remote ADB Data Source](https://www.alibabacloud.com/help/en/analyticdb/analyticdb-for-postgresql/developer-reference/api-gpdb-2016-05-03-createremoteadbdatasource).
    /// 
    /// &gt; **NOTE:** Available since v1.227.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableResourceCreation = "VSwitch",
    ///     });
    /// 
    ///     var default4Mf0nY = new AliCloud.Vpc.Network("default4Mf0nY", new()
    ///     {
    ///         CidrBlock = "192.168.0.0/16",
    ///     });
    /// 
    ///     var defaultwSAVpf = new AliCloud.Vpc.Switch("defaultwSAVpf", new()
    ///     {
    ///         VpcId = default4Mf0nY.Id,
    ///         ZoneId = "cn-beijing-h",
    ///         CidrBlock = "192.168.1.0/24",
    ///     });
    /// 
    ///     var defaultEtEzMF = new AliCloud.Gpdb.Instance("defaultEtEzMF", new()
    ///     {
    ///         InstanceSpec = "2C8G",
    ///         Description = name,
    ///         SegNodeNum = 2,
    ///         SegStorageType = "cloud_essd",
    ///         InstanceNetworkType = "VPC",
    ///         DbInstanceCategory = "Basic",
    ///         PaymentType = "PayAsYouGo",
    ///         SslEnabled = 0,
    ///         EngineVersion = "6.0",
    ///         ZoneId = "cn-beijing-h",
    ///         VswitchId = defaultwSAVpf.Id,
    ///         StorageSize = 50,
    ///         MasterCu = 4,
    ///         VpcId = default4Mf0nY.Id,
    ///         DbInstanceMode = "StorageElastic",
    ///         Engine = "gpdb",
    ///     });
    /// 
    ///     var defaultEY7t9t = new AliCloud.Gpdb.Instance("defaultEY7t9t", new()
    ///     {
    ///         InstanceSpec = "2C8G",
    ///         Description = name,
    ///         SegNodeNum = 2,
    ///         SegStorageType = "cloud_essd",
    ///         InstanceNetworkType = "VPC",
    ///         DbInstanceCategory = "Basic",
    ///         PaymentType = "PayAsYouGo",
    ///         SslEnabled = 0,
    ///         EngineVersion = "6.0",
    ///         ZoneId = "cn-beijing-h",
    ///         VswitchId = defaultwSAVpf.Id,
    ///         StorageSize = 50,
    ///         MasterCu = 4,
    ///         VpcId = default4Mf0nY.Id,
    ///         DbInstanceMode = "StorageElastic",
    ///         Engine = "gpdb",
    ///     });
    /// 
    ///     var default26qpEo = new AliCloud.Gpdb.Account("default26qpEo", new()
    ///     {
    ///         AccountDescription = "example_001",
    ///         DbInstanceId = defaultEtEzMF.Id,
    ///         AccountName = "example_001",
    ///         AccountPassword = "example_001",
    ///     });
    /// 
    ///     var defaultwXePof = new AliCloud.Gpdb.Account("defaultwXePof", new()
    ///     {
    ///         AccountDescription = "example_001",
    ///         DbInstanceId = defaultEY7t9t.Id,
    ///         AccountName = "example_001",
    ///         AccountPassword = "example_001",
    ///     });
    /// 
    ///     var defaultRemoteAdbDataSource = new AliCloud.Gpdb.RemoteAdbDataSource("default", new()
    ///     {
    ///         RemoteDatabase = "example_001",
    ///         ManagerUserName = "example_001",
    ///         UserName = "example_001",
    ///         RemoteDbInstanceId = defaultwXePof.DbInstanceId,
    ///         LocalDatabase = "example_001",
    ///         DataSourceName = "myexample",
    ///         UserPassword = "example_001",
    ///         ManagerUserPassword = "example_001",
    ///         LocalDbInstanceId = defaultEtEzMF.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GPDB Remote ADB Data Source can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource example &lt;local_db_instance_id&gt;:&lt;remote_adb_data_source_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource")]
    public partial class RemoteAdbDataSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data Source Name
        /// </summary>
        [Output("dataSourceName")]
        public Output<string?> DataSourceName { get; private set; } = null!;

        /// <summary>
        /// The database of the local instance which connection data.
        /// </summary>
        [Output("localDatabase")]
        public Output<string> LocalDatabase { get; private set; } = null!;

        /// <summary>
        /// The instanceId of the local instance which connection data.
        /// </summary>
        [Output("localDbInstanceId")]
        public Output<string> LocalDbInstanceId { get; private set; } = null!;

        /// <summary>
        /// The Management user name of the local instance.
        /// </summary>
        [Output("managerUserName")]
        public Output<string> ManagerUserName { get; private set; } = null!;

        /// <summary>
        /// Password of the Manager user of the local instance
        /// </summary>
        [Output("managerUserPassword")]
        public Output<string> ManagerUserPassword { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Output("remoteAdbDataSourceId")]
        public Output<int> RemoteAdbDataSourceId { get; private set; } = null!;

        /// <summary>
        /// The database of the remote instance which provide data.
        /// </summary>
        [Output("remoteDatabase")]
        public Output<string> RemoteDatabase { get; private set; } = null!;

        /// <summary>
        /// The instanceId of the remote instance which provide data.
        /// </summary>
        [Output("remoteDbInstanceId")]
        public Output<string> RemoteDbInstanceId { get; private set; } = null!;

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The user name used to connect to the remote instance
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The user password used to connect to the remote instance
        /// </summary>
        [Output("userPassword")]
        public Output<string> UserPassword { get; private set; } = null!;


        /// <summary>
        /// Create a RemoteAdbDataSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemoteAdbDataSource(string name, RemoteAdbDataSourceArgs args, CustomResourceOptions? options = null)
            : base("alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource", name, args ?? new RemoteAdbDataSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemoteAdbDataSource(string name, Input<string> id, RemoteAdbDataSourceState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:gpdb/remoteAdbDataSource:RemoteAdbDataSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "managerUserPassword",
                    "userPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemoteAdbDataSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemoteAdbDataSource Get(string name, Input<string> id, RemoteAdbDataSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new RemoteAdbDataSource(name, id, state, options);
        }
    }

    public sealed class RemoteAdbDataSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data Source Name
        /// </summary>
        [Input("dataSourceName")]
        public Input<string>? DataSourceName { get; set; }

        /// <summary>
        /// The database of the local instance which connection data.
        /// </summary>
        [Input("localDatabase", required: true)]
        public Input<string> LocalDatabase { get; set; } = null!;

        /// <summary>
        /// The instanceId of the local instance which connection data.
        /// </summary>
        [Input("localDbInstanceId", required: true)]
        public Input<string> LocalDbInstanceId { get; set; } = null!;

        /// <summary>
        /// The Management user name of the local instance.
        /// </summary>
        [Input("managerUserName", required: true)]
        public Input<string> ManagerUserName { get; set; } = null!;

        [Input("managerUserPassword", required: true)]
        private Input<string>? _managerUserPassword;

        /// <summary>
        /// Password of the Manager user of the local instance
        /// </summary>
        public Input<string>? ManagerUserPassword
        {
            get => _managerUserPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerUserPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The database of the remote instance which provide data.
        /// </summary>
        [Input("remoteDatabase", required: true)]
        public Input<string> RemoteDatabase { get; set; } = null!;

        /// <summary>
        /// The instanceId of the remote instance which provide data.
        /// </summary>
        [Input("remoteDbInstanceId", required: true)]
        public Input<string> RemoteDbInstanceId { get; set; } = null!;

        /// <summary>
        /// The user name used to connect to the remote instance
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        [Input("userPassword", required: true)]
        private Input<string>? _userPassword;

        /// <summary>
        /// The user password used to connect to the remote instance
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public RemoteAdbDataSourceArgs()
        {
        }
        public static new RemoteAdbDataSourceArgs Empty => new RemoteAdbDataSourceArgs();
    }

    public sealed class RemoteAdbDataSourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data Source Name
        /// </summary>
        [Input("dataSourceName")]
        public Input<string>? DataSourceName { get; set; }

        /// <summary>
        /// The database of the local instance which connection data.
        /// </summary>
        [Input("localDatabase")]
        public Input<string>? LocalDatabase { get; set; }

        /// <summary>
        /// The instanceId of the local instance which connection data.
        /// </summary>
        [Input("localDbInstanceId")]
        public Input<string>? LocalDbInstanceId { get; set; }

        /// <summary>
        /// The Management user name of the local instance.
        /// </summary>
        [Input("managerUserName")]
        public Input<string>? ManagerUserName { get; set; }

        [Input("managerUserPassword")]
        private Input<string>? _managerUserPassword;

        /// <summary>
        /// Password of the Manager user of the local instance
        /// </summary>
        public Input<string>? ManagerUserPassword
        {
            get => _managerUserPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerUserPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Input("remoteAdbDataSourceId")]
        public Input<int>? RemoteAdbDataSourceId { get; set; }

        /// <summary>
        /// The database of the remote instance which provide data.
        /// </summary>
        [Input("remoteDatabase")]
        public Input<string>? RemoteDatabase { get; set; }

        /// <summary>
        /// The instanceId of the remote instance which provide data.
        /// </summary>
        [Input("remoteDbInstanceId")]
        public Input<string>? RemoteDbInstanceId { get; set; }

        /// <summary>
        /// The status of the resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The user name used to connect to the remote instance
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("userPassword")]
        private Input<string>? _userPassword;

        /// <summary>
        /// The user password used to connect to the remote instance
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public RemoteAdbDataSourceState()
        {
        }
        public static new RemoteAdbDataSourceState Empty => new RemoteAdbDataSourceState();
    }
}
