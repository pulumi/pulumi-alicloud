// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.AckOne
{
    /// <summary>
    /// Provides an Ack One Membership Attachment resource. Fleet Manager Membership Attachment.
    /// 
    /// For information about Ack One Membership Attachment and how to use it, see [How to attach cluster tp hub](https://www.alibabacloud.com/help/en/ack/distributed-cloud-container-platform-for-kubernetes/developer-reference/api-adcp-2022-01-01-attachclustertohub).
    /// 
    /// &gt; **NOTE:** Available since v1.243.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var keyName = config.Get("keyName") ?? "%s";
    ///     var enhanced = AliCloud.Vpc.GetEnhancedNatAvailableZones.Invoke();
    /// 
    ///     var cloudEfficiency = AliCloud.Ecs.GetInstanceTypes.Invoke(new()
    ///     {
    ///         AvailabilityZone = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
    ///         CpuCoreCount = 4,
    ///         MemorySize = 8,
    ///         KubernetesNodeRole = "Worker",
    ///         SystemDiskCategory = "cloud_efficiency",
    ///     });
    /// 
    ///     var @default = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         CidrBlock = "10.4.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         CidrBlock = "10.4.0.0/24",
    ///         VpcId = @default.Id,
    ///         ZoneId = enhanced.Apply(getEnhancedNatAvailableZonesResult =&gt; getEnhancedNatAvailableZonesResult.Zones[0]?.ZoneId),
    ///     });
    /// 
    ///     var defaultManagedKubernetes = new AliCloud.CS.ManagedKubernetes("default", new()
    ///     {
    ///         ClusterSpec = "ack.pro.small",
    ///         VswitchIds = new[]
    ///         {
    ///             defaultSwitch.Id,
    ///         },
    ///         NewNatGateway = true,
    ///         PodCidr = Std.Cidrsubnet.Invoke(new()
    ///         {
    ///             Input = "10.0.0.0/8",
    ///             Newbits = 8,
    ///             Netnum = 36,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         ServiceCidr = Std.Cidrsubnet.Invoke(new()
    ///         {
    ///             Input = "172.16.0.0/16",
    ///             Newbits = 4,
    ///             Netnum = 7,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         SlbInternetEnabled = true,
    ///         IsEnterpriseSecurityGroup = true,
    ///     });
    /// 
    ///     var defaultKeyPair = new AliCloud.Ecs.KeyPair("default", new()
    ///     {
    ///         KeyPairName = keyName,
    ///     });
    /// 
    ///     var defaultNodePool = new AliCloud.CS.NodePool("default", new()
    ///     {
    ///         NodePoolName = name,
    ///         ClusterId = defaultManagedKubernetes.Id,
    ///         VswitchIds = new[]
    ///         {
    ///             defaultSwitch.Id,
    ///         },
    ///         InstanceTypes = new[]
    ///         {
    ///             cloudEfficiency.Apply(getInstanceTypesResult =&gt; getInstanceTypesResult.InstanceTypes[0]?.Id),
    ///         },
    ///         SystemDiskCategory = "cloud_efficiency",
    ///         SystemDiskSize = 40,
    ///         KeyName = defaultKeyPair.KeyPairName,
    ///         DesiredSize = "1",
    ///     });
    /// 
    ///     var defaultCluster = new AliCloud.AckOne.Cluster("default", new()
    ///     {
    ///         Network = new AliCloud.AckOne.Inputs.ClusterNetworkArgs
    ///         {
    ///             VpcId = @default.Id,
    ///             Vswitches = new[]
    ///             {
    ///                 defaultSwitch.Id,
    ///             },
    ///         },
    ///         ArgocdEnabled = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             defaultManagedKubernetes,
    ///         },
    ///     });
    /// 
    ///     var defaultMembershipAttachment = new AliCloud.AckOne.MembershipAttachment("default", new()
    ///     {
    ///         ClusterId = defaultCluster.Id,
    ///         SubClusterId = defaultManagedKubernetes.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Ack One Membership Attachment can be imported using the id, which consists of cluster_id and sub_cluster_id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:ackone/membershipAttachment:MembershipAttachment example &lt;cluster_id&gt;:&lt;sub_cluster_id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:ackone/membershipAttachment:MembershipAttachment")]
    public partial class MembershipAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the cluster to which the membership is being attached.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The ID of the member being attached to the cluster.
        /// </summary>
        [Output("subClusterId")]
        public Output<string> SubClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a MembershipAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MembershipAttachment(string name, MembershipAttachmentArgs args, CustomResourceOptions? options = null)
            : base("alicloud:ackone/membershipAttachment:MembershipAttachment", name, args ?? new MembershipAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MembershipAttachment(string name, Input<string> id, MembershipAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:ackone/membershipAttachment:MembershipAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MembershipAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MembershipAttachment Get(string name, Input<string> id, MembershipAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new MembershipAttachment(name, id, state, options);
        }
    }

    public sealed class MembershipAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the cluster to which the membership is being attached.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The ID of the member being attached to the cluster.
        /// </summary>
        [Input("subClusterId", required: true)]
        public Input<string> SubClusterId { get; set; } = null!;

        public MembershipAttachmentArgs()
        {
        }
        public static new MembershipAttachmentArgs Empty => new MembershipAttachmentArgs();
    }

    public sealed class MembershipAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the cluster to which the membership is being attached.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The ID of the member being attached to the cluster.
        /// </summary>
        [Input("subClusterId")]
        public Input<string>? SubClusterId { get; set; }

        public MembershipAttachmentState()
        {
        }
        public static new MembershipAttachmentState Empty => new MembershipAttachmentState();
    }
}
