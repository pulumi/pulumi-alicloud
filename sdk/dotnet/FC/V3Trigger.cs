// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.FC
{
    /// <summary>
    /// Provides a FCV3 Trigger resource.
    /// 
    /// A trigger is a way of triggering the execution of a function. In the event-driven computing model, the event source is the producer of the event, the function is the handler of the event, and the trigger provides a centralized and unified way to manage different event sources. In the event source, when the event occurs, if the rules defined by the trigger are met,.
    /// 
    /// For information about FCV3 Trigger and how to use it, see [What is Trigger](https://www.alibabacloud.com/help/en/functioncompute/api-fc-2023-03-30-createtrigger).
    /// 
    /// &gt; **NOTE:** Available since v1.228.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var functionName = config.Get("functionName") ?? "TerraformTriggerResourceAPI";
    ///     var triggerName = config.Get("triggerName") ?? "TerraformTrigger_CDN";
    ///     var function = new AliCloud.FC.V3Function("function", new()
    ///     {
    ///         MemorySize = 512,
    ///         Cpu = 0.5,
    ///         Handler = "index.Handler",
    ///         Code = new AliCloud.FC.Inputs.V3FunctionCodeArgs
    ///         {
    ///             ZipFile = "UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA=",
    ///         },
    ///         FunctionName = name,
    ///         Runtime = "python3.9",
    ///         DiskSize = 512,
    ///         LogConfig = new AliCloud.FC.Inputs.V3FunctionLogConfigArgs
    ///         {
    ///             LogBeginRule = "None",
    ///         },
    ///     });
    /// 
    ///     var current = AliCloud.GetAccount.Invoke();
    /// 
    ///     var @default = new AliCloud.FC.V3Trigger("default", new()
    ///     {
    ///         TriggerType = "cdn_events",
    ///         TriggerName = name,
    ///         Description = "create",
    ///         Qualifier = "LATEST",
    ///         TriggerConfig = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["eventName"] = "CachedObjectsPushed",
    ///             ["eventVersion"] = "1.0.0",
    ///             ["notes"] = "example",
    ///             ["filter"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["domain"] = new[]
    ///                 {
    ///                     "example.com",
    ///                 },
    ///             },
    ///         }),
    ///         SourceArn = $"acs:cdn:*:{current.Apply(getAccountResult =&gt; getAccountResult.Id)}",
    ///         InvocationRole = $"acs:ram::{current.Apply(getAccountResult =&gt; getAccountResult.Id)}:role/aliyuncdneventnotificationrole",
    ///         FunctionName = function.FunctionName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// HTTP Trigger
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var functionName = config.Get("functionName") ?? "TerraformTriggerResourceAPI";
    ///     var triggerName = config.Get("triggerName") ?? "TerraformTrigger_HTTP";
    ///     var function = new AliCloud.FC.V3Function("function", new()
    ///     {
    ///         MemorySize = 512,
    ///         Cpu = 0.5,
    ///         Handler = "index.Handler",
    ///         Code = new AliCloud.FC.Inputs.V3FunctionCodeArgs
    ///         {
    ///             ZipFile = "UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA=",
    ///         },
    ///         FunctionName = name,
    ///         Runtime = "python3.9",
    ///         DiskSize = 512,
    ///         LogConfig = new AliCloud.FC.Inputs.V3FunctionLogConfigArgs
    ///         {
    ///             LogBeginRule = "None",
    ///         },
    ///     });
    /// 
    ///     var current = AliCloud.GetAccount.Invoke();
    /// 
    ///     var @default = new AliCloud.FC.V3Trigger("default", new()
    ///     {
    ///         TriggerType = "http",
    ///         TriggerName = name,
    ///         Description = "create",
    ///         Qualifier = "LATEST",
    ///         TriggerConfig = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["authType"] = "anonymous",
    ///             ["methods"] = new[]
    ///             {
    ///                 "GET",
    ///                 "POST",
    ///             },
    ///         }),
    ///         FunctionName = function.FunctionName,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["outputCalicloudFcv3TriggerInternet"] = alicloudFcv3Trigger.Default.HttpTrigger[0].UrlInternet,
    ///         ["outputCalicloudFcv3TriggerIntranet"] = alicloudFcv3Trigger.Default.HttpTrigger[0].UrlIntranet,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FCV3 Trigger can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:fc/v3Trigger:V3Trigger example &lt;function_name&gt;:&lt;trigger_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:fc/v3Trigger:V3Trigger")]
    public partial class V3Trigger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation time
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description of the trigger
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Function Name
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.234.0) HTTP trigger information
        /// </summary>
        [Output("httpTrigger")]
        public Output<Outputs.V3TriggerHttpTrigger> HttpTrigger { get; private set; } = null!;

        /// <summary>
        /// The role required by the event source (such as OSS) to call the function.
        /// </summary>
        [Output("invocationRole")]
        public Output<string?> InvocationRole { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.234.0) The last modified time of the trigger
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The version or alias of the function
        /// </summary>
        [Output("qualifier")]
        public Output<string> Qualifier { get; private set; } = null!;

        /// <summary>
        /// Trigger Event source ARN
        /// </summary>
        [Output("sourceArn")]
        public Output<string> SourceArn { get; private set; } = null!;

        /// <summary>
        /// The state of the trigger
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.234.0) Resource identity of the function
        /// </summary>
        [Output("targetArn")]
        public Output<string> TargetArn { get; private set; } = null!;

        /// <summary>
        /// Trigger configuration. The configuration varies for different types of triggers.
        /// </summary>
        [Output("triggerConfig")]
        public Output<string?> TriggerConfig { get; private set; } = null!;

        /// <summary>
        /// (Available since v1.234.0) Trigger ID
        /// </summary>
        [Output("triggerId")]
        public Output<string> TriggerId { get; private set; } = null!;

        /// <summary>
        /// Trigger Name
        /// </summary>
        [Output("triggerName")]
        public Output<string> TriggerName { get; private set; } = null!;

        /// <summary>
        /// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, MnsTopic and eventbridge.
        /// </summary>
        [Output("triggerType")]
        public Output<string> TriggerType { get; private set; } = null!;


        /// <summary>
        /// Create a V3Trigger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V3Trigger(string name, V3TriggerArgs args, CustomResourceOptions? options = null)
            : base("alicloud:fc/v3Trigger:V3Trigger", name, args ?? new V3TriggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private V3Trigger(string name, Input<string> id, V3TriggerState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:fc/v3Trigger:V3Trigger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V3Trigger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V3Trigger Get(string name, Input<string> id, V3TriggerState? state = null, CustomResourceOptions? options = null)
        {
            return new V3Trigger(name, id, state, options);
        }
    }

    public sealed class V3TriggerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the trigger
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Function Name
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// The role required by the event source (such as OSS) to call the function.
        /// </summary>
        [Input("invocationRole")]
        public Input<string>? InvocationRole { get; set; }

        /// <summary>
        /// The version or alias of the function
        /// </summary>
        [Input("qualifier", required: true)]
        public Input<string> Qualifier { get; set; } = null!;

        /// <summary>
        /// Trigger Event source ARN
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// Trigger configuration. The configuration varies for different types of triggers.
        /// </summary>
        [Input("triggerConfig")]
        public Input<string>? TriggerConfig { get; set; }

        /// <summary>
        /// Trigger Name
        /// </summary>
        [Input("triggerName")]
        public Input<string>? TriggerName { get; set; }

        /// <summary>
        /// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, MnsTopic and eventbridge.
        /// </summary>
        [Input("triggerType", required: true)]
        public Input<string> TriggerType { get; set; } = null!;

        public V3TriggerArgs()
        {
        }
        public static new V3TriggerArgs Empty => new V3TriggerArgs();
    }

    public sealed class V3TriggerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation time
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description of the trigger
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Function Name
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// (Available since v1.234.0) HTTP trigger information
        /// </summary>
        [Input("httpTrigger")]
        public Input<Inputs.V3TriggerHttpTriggerGetArgs>? HttpTrigger { get; set; }

        /// <summary>
        /// The role required by the event source (such as OSS) to call the function.
        /// </summary>
        [Input("invocationRole")]
        public Input<string>? InvocationRole { get; set; }

        /// <summary>
        /// (Available since v1.234.0) The last modified time of the trigger
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<string>? LastModifiedTime { get; set; }

        /// <summary>
        /// The version or alias of the function
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Trigger Event source ARN
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// The state of the trigger
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// (Available since v1.234.0) Resource identity of the function
        /// </summary>
        [Input("targetArn")]
        public Input<string>? TargetArn { get; set; }

        /// <summary>
        /// Trigger configuration. The configuration varies for different types of triggers.
        /// </summary>
        [Input("triggerConfig")]
        public Input<string>? TriggerConfig { get; set; }

        /// <summary>
        /// (Available since v1.234.0) Trigger ID
        /// </summary>
        [Input("triggerId")]
        public Input<string>? TriggerId { get; set; }

        /// <summary>
        /// Trigger Name
        /// </summary>
        [Input("triggerName")]
        public Input<string>? TriggerName { get; set; }

        /// <summary>
        /// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, MnsTopic and eventbridge.
        /// </summary>
        [Input("triggerType")]
        public Input<string>? TriggerType { get; set; }

        public V3TriggerState()
        {
        }
        public static new V3TriggerState Empty => new V3TriggerState();
    }
}
