// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.FC
{
    /// <summary>
    /// Provides a Function Compute Service V3 (FCV3) Function resource.
    /// 
    /// The resource scheduling and running of Function Compute is based on functions. The FC function consists of function code and function configuration.
    /// 
    /// For information about Function Compute Service V3 (FCV3) Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getfunction).
    /// 
    /// &gt; **NOTE:** Available since v1.228.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var @default = new Random.Index.Uuid("default");
    /// 
    ///     var defaultBucket = new AliCloud.Oss.Bucket("default", new()
    ///     {
    ///         BucketName = $"{name}-{@default.Result}",
    ///     });
    /// 
    ///     var defaultBucketObject = new AliCloud.Oss.BucketObject("default", new()
    ///     {
    ///         Bucket = defaultBucket.BucketName,
    ///         Key = "FCV3Py39.zip",
    ///         Content = "print('hello')",
    ///     });
    /// 
    ///     var defaultV3Function = new AliCloud.FC.V3Function("default", new()
    ///     {
    ///         Description = "Create",
    ///         MemorySize = 512,
    ///         Layers = new[]
    ///         {
    ///             "acs:fc:cn-shanghai:official:layers/Python39-Aliyun-SDK/versions/3",
    ///         },
    ///         Timeout = 3,
    ///         Runtime = "custom.debian10",
    ///         Handler = "index.handler",
    ///         DiskSize = 512,
    ///         CustomRuntimeConfig = new AliCloud.FC.Inputs.V3FunctionCustomRuntimeConfigArgs
    ///         {
    ///             Commands = new[]
    ///             {
    ///                 "python",
    ///                 "-c",
    ///                 "example",
    ///             },
    ///             Args = new[]
    ///             {
    ///                 "app.py",
    ///                 "xx",
    ///                 "x",
    ///             },
    ///             Port = 9000,
    ///             HealthCheckConfig = new AliCloud.FC.Inputs.V3FunctionCustomRuntimeConfigHealthCheckConfigArgs
    ///             {
    ///                 HttpGetUrl = "/ready",
    ///                 InitialDelaySeconds = 1,
    ///                 PeriodSeconds = 10,
    ///                 SuccessThreshold = 1,
    ///                 TimeoutSeconds = 1,
    ///                 FailureThreshold = 3,
    ///             },
    ///         },
    ///         LogConfig = new AliCloud.FC.Inputs.V3FunctionLogConfigArgs
    ///         {
    ///             LogBeginRule = "None",
    ///         },
    ///         Code = new AliCloud.FC.Inputs.V3FunctionCodeArgs
    ///         {
    ///             OssBucketName = defaultBucket.BucketName,
    ///             OssObjectName = defaultBucketObject.Key,
    ///             Checksum = "4270285996107335518",
    ///         },
    ///         InstanceLifecycleConfig = new AliCloud.FC.Inputs.V3FunctionInstanceLifecycleConfigArgs
    ///         {
    ///             Initializer = new AliCloud.FC.Inputs.V3FunctionInstanceLifecycleConfigInitializerArgs
    ///             {
    ///                 Timeout = 1,
    ///                 Handler = "index.init",
    ///             },
    ///             PreStop = new AliCloud.FC.Inputs.V3FunctionInstanceLifecycleConfigPreStopArgs
    ///             {
    ///                 Timeout = 1,
    ///                 Handler = "index.stop",
    ///             },
    ///         },
    ///         Cpu = 0.5,
    ///         InstanceConcurrency = 2,
    ///         FunctionName = $"{name}-{@default.Result}",
    ///         EnvironmentVariables = 
    ///         {
    ///             { "EnvKey", "EnvVal" },
    ///         },
    ///         InternetAccess = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Function Compute Service V3 (FCV3) Function can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:fc/v3Function:V3Function example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:fc/v3Function:V3Function")]
    public partial class V3Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Function code ZIP package. code and customContainerConfig. See `code` below.
        /// </summary>
        [Output("code")]
        public Output<Outputs.V3FunctionCode?> Code { get; private set; } = null!;

        /// <summary>
        /// The code package size of the function returned by the system, in byte Example : 1024
        /// </summary>
        [Output("codeSize")]
        public Output<int> CodeSize { get; private set; } = null!;

        /// <summary>
        /// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        /// </summary>
        [Output("cpu")]
        public Output<double> Cpu { get; private set; } = null!;

        /// <summary>
        /// The creation time of the function.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
        /// </summary>
        [Output("customContainerConfig")]
        public Output<Outputs.V3FunctionCustomContainerConfig?> CustomContainerConfig { get; private set; } = null!;

        /// <summary>
        /// Function custom DNS configuration See `custom_dns` below.
        /// </summary>
        [Output("customDns")]
        public Output<Outputs.V3FunctionCustomDns?> CustomDns { get; private set; } = null!;

        /// <summary>
        /// Customize the runtime configuration. See `custom_runtime_config` below.
        /// </summary>
        [Output("customRuntimeConfig")]
        public Output<Outputs.V3FunctionCustomRuntimeConfig?> CustomRuntimeConfig { get; private set; } = null!;

        /// <summary>
        /// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
        /// </summary>
        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        /// <summary>
        /// The environment variable set for the function, you can get the value of the environment variable in the function.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableDictionary<string, string>?> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// ARN of function
        /// </summary>
        [Output("functionArn")]
        public Output<string> FunctionArn { get; private set; } = null!;

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Output("functionId")]
        public Output<string> FunctionId { get; private set; } = null!;

        /// <summary>
        /// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// Function GPU configuration. See `gpu_config` below.
        /// </summary>
        [Output("gpuConfig")]
        public Output<Outputs.V3FunctionGpuConfig?> GpuConfig { get; private set; } = null!;

        /// <summary>
        /// Function Handler: the call entry for the function compute system to run your function.
        /// </summary>
        [Output("handler")]
        public Output<string> Handler { get; private set; } = null!;

        /// <summary>
        /// Maximum instance concurrency.
        /// </summary>
        [Output("instanceConcurrency")]
        public Output<int> InstanceConcurrency { get; private set; } = null!;

        /// <summary>
        /// Instance isolation mode
        /// </summary>
        [Output("instanceIsolationMode")]
        public Output<string?> InstanceIsolationMode { get; private set; } = null!;

        /// <summary>
        /// Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
        /// </summary>
        [Output("instanceLifecycleConfig")]
        public Output<Outputs.V3FunctionInstanceLifecycleConfig?> InstanceLifecycleConfig { get; private set; } = null!;

        /// <summary>
        /// Allow function to access public network
        /// </summary>
        [Output("internetAccess")]
        public Output<bool> InternetAccess { get; private set; } = null!;

        /// <summary>
        /// Invocation Restriction Detail See `invocation_restriction` below.
        /// </summary>
        [Output("invocationRestriction")]
        public Output<Outputs.V3FunctionInvocationRestriction?> InvocationRestriction { get; private set; } = null!;

        /// <summary>
        /// Last time the function was Updated
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
        /// </summary>
        [Output("lastUpdateStatus")]
        public Output<string> LastUpdateStatus { get; private set; } = null!;

        /// <summary>
        /// The reason that caused the last function to update the Operation State to the current value
        /// </summary>
        [Output("lastUpdateStatusReason")]
        public Output<string> LastUpdateStatusReason { get; private set; } = null!;

        /// <summary>
        /// Status code of the reason that caused the last function update operation status to the current value
        /// </summary>
        [Output("lastUpdateStatusReasonCode")]
        public Output<string> LastUpdateStatusReasonCode { get; private set; } = null!;

        /// <summary>
        /// The list of layers.
        /// </summary>
        [Output("layers")]
        public Output<ImmutableArray<string>> Layers { get; private set; } = null!;

        /// <summary>
        /// The logs generated by the function are written to the configured Logstore. See `log_config` below.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.V3FunctionLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
        /// </summary>
        [Output("memorySize")]
        public Output<int> MemorySize { get; private set; } = null!;

        /// <summary>
        /// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
        /// </summary>
        [Output("nasConfig")]
        public Output<Outputs.V3FunctionNasConfig> NasConfig { get; private set; } = null!;

        /// <summary>
        /// OSS mount configuration See `oss_mount_config` below.
        /// </summary>
        [Output("ossMountConfig")]
        public Output<Outputs.V3FunctionOssMountConfig> OssMountConfig { get; private set; } = null!;

        /// <summary>
        /// Resource Group ID.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// Function runtime type.
        /// </summary>
        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        /// <summary>
        /// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string?> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
        /// </summary>
        [Output("sessionAffinityConfig")]
        public Output<string?> SessionAffinityConfig { get; private set; } = null!;

        /// <summary>
        /// Function Status
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The reason why the function is in the current state
        /// </summary>
        [Output("stateReason")]
        public Output<string> StateReason { get; private set; } = null!;

        /// <summary>
        /// The status code of the reason the function is in the current state.
        /// </summary>
        [Output("stateReasonCode")]
        public Output<string> StateReasonCode { get; private set; } = null!;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The maximum running time of the function, in seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        /// <summary>
        /// Tracing configuration
        /// </summary>
        [Output("tracingConfig")]
        public Output<Outputs.V3FunctionTracingConfig> TracingConfig { get; private set; } = null!;

        /// <summary>
        /// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.V3FunctionVpcConfig> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a V3Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V3Function(string name, V3FunctionArgs args, CustomResourceOptions? options = null)
            : base("alicloud:fc/v3Function:V3Function", name, args ?? new V3FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private V3Function(string name, Input<string> id, V3FunctionState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:fc/v3Function:V3Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V3Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V3Function Get(string name, Input<string> id, V3FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new V3Function(name, id, state, options);
        }
    }

    public sealed class V3FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function code ZIP package. code and customContainerConfig. See `code` below.
        /// </summary>
        [Input("code")]
        public Input<Inputs.V3FunctionCodeArgs>? Code { get; set; }

        /// <summary>
        /// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        /// </summary>
        [Input("cpu")]
        public Input<double>? Cpu { get; set; }

        /// <summary>
        /// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
        /// </summary>
        [Input("customContainerConfig")]
        public Input<Inputs.V3FunctionCustomContainerConfigArgs>? CustomContainerConfig { get; set; }

        /// <summary>
        /// Function custom DNS configuration See `custom_dns` below.
        /// </summary>
        [Input("customDns")]
        public Input<Inputs.V3FunctionCustomDnsArgs>? CustomDns { get; set; }

        /// <summary>
        /// Customize the runtime configuration. See `custom_runtime_config` below.
        /// </summary>
        [Input("customRuntimeConfig")]
        public Input<Inputs.V3FunctionCustomRuntimeConfigArgs>? CustomRuntimeConfig { get; set; }

        /// <summary>
        /// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// The environment variable set for the function, you can get the value of the environment variable in the function.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// Function GPU configuration. See `gpu_config` below.
        /// </summary>
        [Input("gpuConfig")]
        public Input<Inputs.V3FunctionGpuConfigArgs>? GpuConfig { get; set; }

        /// <summary>
        /// Function Handler: the call entry for the function compute system to run your function.
        /// </summary>
        [Input("handler", required: true)]
        public Input<string> Handler { get; set; } = null!;

        /// <summary>
        /// Maximum instance concurrency.
        /// </summary>
        [Input("instanceConcurrency")]
        public Input<int>? InstanceConcurrency { get; set; }

        /// <summary>
        /// Instance isolation mode
        /// </summary>
        [Input("instanceIsolationMode")]
        public Input<string>? InstanceIsolationMode { get; set; }

        /// <summary>
        /// Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
        /// </summary>
        [Input("instanceLifecycleConfig")]
        public Input<Inputs.V3FunctionInstanceLifecycleConfigArgs>? InstanceLifecycleConfig { get; set; }

        /// <summary>
        /// Allow function to access public network
        /// </summary>
        [Input("internetAccess")]
        public Input<bool>? InternetAccess { get; set; }

        /// <summary>
        /// Invocation Restriction Detail See `invocation_restriction` below.
        /// </summary>
        [Input("invocationRestriction")]
        public Input<Inputs.V3FunctionInvocationRestrictionArgs>? InvocationRestriction { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// The list of layers.
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// The logs generated by the function are written to the configured Logstore. See `log_config` below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.V3FunctionLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
        /// </summary>
        [Input("nasConfig")]
        public Input<Inputs.V3FunctionNasConfigArgs>? NasConfig { get; set; }

        /// <summary>
        /// OSS mount configuration See `oss_mount_config` below.
        /// </summary>
        [Input("ossMountConfig")]
        public Input<Inputs.V3FunctionOssMountConfigArgs>? OssMountConfig { get; set; }

        /// <summary>
        /// Resource Group ID.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Function runtime type.
        /// </summary>
        [Input("runtime", required: true)]
        public Input<string> Runtime { get; set; } = null!;

        /// <summary>
        /// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
        /// </summary>
        [Input("sessionAffinityConfig")]
        public Input<string>? SessionAffinityConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The maximum running time of the function, in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.V3FunctionVpcConfigArgs>? VpcConfig { get; set; }

        public V3FunctionArgs()
        {
        }
        public static new V3FunctionArgs Empty => new V3FunctionArgs();
    }

    public sealed class V3FunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function code ZIP package. code and customContainerConfig. See `code` below.
        /// </summary>
        [Input("code")]
        public Input<Inputs.V3FunctionCodeGetArgs>? Code { get; set; }

        /// <summary>
        /// The code package size of the function returned by the system, in byte Example : 1024
        /// </summary>
        [Input("codeSize")]
        public Input<int>? CodeSize { get; set; }

        /// <summary>
        /// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        /// </summary>
        [Input("cpu")]
        public Input<double>? Cpu { get; set; }

        /// <summary>
        /// The creation time of the function.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `custom_container_config` below.
        /// </summary>
        [Input("customContainerConfig")]
        public Input<Inputs.V3FunctionCustomContainerConfigGetArgs>? CustomContainerConfig { get; set; }

        /// <summary>
        /// Function custom DNS configuration See `custom_dns` below.
        /// </summary>
        [Input("customDns")]
        public Input<Inputs.V3FunctionCustomDnsGetArgs>? CustomDns { get; set; }

        /// <summary>
        /// Customize the runtime configuration. See `custom_runtime_config` below.
        /// </summary>
        [Input("customRuntimeConfig")]
        public Input<Inputs.V3FunctionCustomRuntimeConfigGetArgs>? CustomRuntimeConfig { get; set; }

        /// <summary>
        /// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// The environment variable set for the function, you can get the value of the environment variable in the function.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// ARN of function
        /// </summary>
        [Input("functionArn")]
        public Input<string>? FunctionArn { get; set; }

        /// <summary>
        /// The first ID of the resource
        /// </summary>
        [Input("functionId")]
        public Input<string>? FunctionId { get; set; }

        /// <summary>
        /// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// Function GPU configuration. See `gpu_config` below.
        /// </summary>
        [Input("gpuConfig")]
        public Input<Inputs.V3FunctionGpuConfigGetArgs>? GpuConfig { get; set; }

        /// <summary>
        /// Function Handler: the call entry for the function compute system to run your function.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        /// <summary>
        /// Maximum instance concurrency.
        /// </summary>
        [Input("instanceConcurrency")]
        public Input<int>? InstanceConcurrency { get; set; }

        /// <summary>
        /// Instance isolation mode
        /// </summary>
        [Input("instanceIsolationMode")]
        public Input<string>? InstanceIsolationMode { get; set; }

        /// <summary>
        /// Instance lifecycle callback method configuration. See `instance_lifecycle_config` below.
        /// </summary>
        [Input("instanceLifecycleConfig")]
        public Input<Inputs.V3FunctionInstanceLifecycleConfigGetArgs>? InstanceLifecycleConfig { get; set; }

        /// <summary>
        /// Allow function to access public network
        /// </summary>
        [Input("internetAccess")]
        public Input<bool>? InternetAccess { get; set; }

        /// <summary>
        /// Invocation Restriction Detail See `invocation_restriction` below.
        /// </summary>
        [Input("invocationRestriction")]
        public Input<Inputs.V3FunctionInvocationRestrictionGetArgs>? InvocationRestriction { get; set; }

        /// <summary>
        /// Last time the function was Updated
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<string>? LastModifiedTime { get; set; }

        /// <summary>
        /// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
        /// </summary>
        [Input("lastUpdateStatus")]
        public Input<string>? LastUpdateStatus { get; set; }

        /// <summary>
        /// The reason that caused the last function to update the Operation State to the current value
        /// </summary>
        [Input("lastUpdateStatusReason")]
        public Input<string>? LastUpdateStatusReason { get; set; }

        /// <summary>
        /// Status code of the reason that caused the last function update operation status to the current value
        /// </summary>
        [Input("lastUpdateStatusReasonCode")]
        public Input<string>? LastUpdateStatusReasonCode { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// The list of layers.
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// The logs generated by the function are written to the configured Logstore. See `log_config` below.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.V3FunctionLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nas_config` below.
        /// </summary>
        [Input("nasConfig")]
        public Input<Inputs.V3FunctionNasConfigGetArgs>? NasConfig { get; set; }

        /// <summary>
        /// OSS mount configuration See `oss_mount_config` below.
        /// </summary>
        [Input("ossMountConfig")]
        public Input<Inputs.V3FunctionOssMountConfigGetArgs>? OssMountConfig { get; set; }

        /// <summary>
        /// Resource Group ID.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Function runtime type.
        /// </summary>
        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        /// <summary>
        /// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
        /// </summary>
        [Input("sessionAffinityConfig")]
        public Input<string>? SessionAffinityConfig { get; set; }

        /// <summary>
        /// Function Status
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The reason why the function is in the current state
        /// </summary>
        [Input("stateReason")]
        public Input<string>? StateReason { get; set; }

        /// <summary>
        /// The status code of the reason the function is in the current state.
        /// </summary>
        [Input("stateReasonCode")]
        public Input<string>? StateReasonCode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The maximum running time of the function, in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Tracing configuration
        /// </summary>
        [Input("tracingConfig")]
        public Input<Inputs.V3FunctionTracingConfigGetArgs>? TracingConfig { get; set; }

        /// <summary>
        /// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpc_config` below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.V3FunctionVpcConfigGetArgs>? VpcConfig { get; set; }

        public V3FunctionState()
        {
        }
        public static new V3FunctionState Empty => new V3FunctionState();
    }
}
