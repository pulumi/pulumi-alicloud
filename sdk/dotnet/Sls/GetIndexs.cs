// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls
{
    public static class GetIndexs
    {
        /// <summary>
        /// This data source provides Sls Index available to the user.[What is Index](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateIndex)
        /// 
        /// &gt; **NOTE:** Available since v1.262.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var logstoreName = config.Get("logstoreName") ?? "logstore-example-1";
        ///     var projectName = config.Get("projectName") ?? "project-for-index-terraform-example-1";
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         Description = "terraform example",
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         HotTtl = 7,
        ///         RetentionPeriod = 30,
        ///         ShardCount = 2,
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = logstoreName,
        ///     });
        /// 
        ///     var defaultIndex = new AliCloud.Sls.Index("default", new()
        ///     {
        ///         Line = new AliCloud.Sls.Inputs.IndexLineArgs
        ///         {
        ///             Chn = true,
        ///             CaseSensitive = true,
        ///             Tokens = new[]
        ///             {
        ///                 "a",
        ///             },
        ///             ExcludeKeys = new[]
        ///             {
        ///                 "t",
        ///             },
        ///         },
        ///         Keys = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["example"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["caseSensitive"] = false,
        ///                 ["token"] = new[]
        ///                 {
        ///                     @"
        /// ",
        ///                     "	",
        ///                     ",",
        ///                     " ",
        ///                     ";",
        ///                     "\"",
        ///                     "'",
        ///                     "(",
        ///                     ")",
        ///                     "{",
        ///                     "}",
        ///                     "[",
        ///                     "]",
        ///                     "&lt;",
        ///                     "&gt;",
        ///                     "?",
        ///                     "/",
        ///                     "#",
        ///                     ":",
        ///                 },
        ///                 ["type"] = "text",
        ///                 ["doc_value"] = false,
        ///                 ["alias"] = "",
        ///                 ["chn"] = false,
        ///             },
        ///         }),
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetIndexs.Invoke(new()
        ///     {
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = defaultProject.ProjectName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsIndexExampleId"] = @default.Apply(@default =&gt; @default.Apply(getIndexsResult =&gt; getIndexsResult.Indexs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIndexsResult> InvokeAsync(GetIndexsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIndexsResult>("alicloud:sls/getIndexs:getIndexs", args ?? new GetIndexsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Sls Index available to the user.[What is Index](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateIndex)
        /// 
        /// &gt; **NOTE:** Available since v1.262.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var logstoreName = config.Get("logstoreName") ?? "logstore-example-1";
        ///     var projectName = config.Get("projectName") ?? "project-for-index-terraform-example-1";
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         Description = "terraform example",
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         HotTtl = 7,
        ///         RetentionPeriod = 30,
        ///         ShardCount = 2,
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = logstoreName,
        ///     });
        /// 
        ///     var defaultIndex = new AliCloud.Sls.Index("default", new()
        ///     {
        ///         Line = new AliCloud.Sls.Inputs.IndexLineArgs
        ///         {
        ///             Chn = true,
        ///             CaseSensitive = true,
        ///             Tokens = new[]
        ///             {
        ///                 "a",
        ///             },
        ///             ExcludeKeys = new[]
        ///             {
        ///                 "t",
        ///             },
        ///         },
        ///         Keys = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["example"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["caseSensitive"] = false,
        ///                 ["token"] = new[]
        ///                 {
        ///                     @"
        /// ",
        ///                     "	",
        ///                     ",",
        ///                     " ",
        ///                     ";",
        ///                     "\"",
        ///                     "'",
        ///                     "(",
        ///                     ")",
        ///                     "{",
        ///                     "}",
        ///                     "[",
        ///                     "]",
        ///                     "&lt;",
        ///                     "&gt;",
        ///                     "?",
        ///                     "/",
        ///                     "#",
        ///                     ":",
        ///                 },
        ///                 ["type"] = "text",
        ///                 ["doc_value"] = false,
        ///                 ["alias"] = "",
        ///                 ["chn"] = false,
        ///             },
        ///         }),
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetIndexs.Invoke(new()
        ///     {
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = defaultProject.ProjectName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsIndexExampleId"] = @default.Apply(@default =&gt; @default.Apply(getIndexsResult =&gt; getIndexsResult.Indexs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIndexsResult> Invoke(GetIndexsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndexsResult>("alicloud:sls/getIndexs:getIndexs", args ?? new GetIndexsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Sls Index available to the user.[What is Index](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateIndex)
        /// 
        /// &gt; **NOTE:** Available since v1.262.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "terraform-example";
        ///     var logstoreName = config.Get("logstoreName") ?? "logstore-example-1";
        ///     var projectName = config.Get("projectName") ?? "project-for-index-terraform-example-1";
        ///     var defaultProject = new AliCloud.Log.Project("default", new()
        ///     {
        ///         Description = "terraform example",
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultStore = new AliCloud.Log.Store("default", new()
        ///     {
        ///         HotTtl = 7,
        ///         RetentionPeriod = 30,
        ///         ShardCount = 2,
        ///         ProjectName = defaultProject.ProjectName,
        ///         LogstoreName = logstoreName,
        ///     });
        /// 
        ///     var defaultIndex = new AliCloud.Sls.Index("default", new()
        ///     {
        ///         Line = new AliCloud.Sls.Inputs.IndexLineArgs
        ///         {
        ///             Chn = true,
        ///             CaseSensitive = true,
        ///             Tokens = new[]
        ///             {
        ///                 "a",
        ///             },
        ///             ExcludeKeys = new[]
        ///             {
        ///                 "t",
        ///             },
        ///         },
        ///         Keys = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["example"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["caseSensitive"] = false,
        ///                 ["token"] = new[]
        ///                 {
        ///                     @"
        /// ",
        ///                     "	",
        ///                     ",",
        ///                     " ",
        ///                     ";",
        ///                     "\"",
        ///                     "'",
        ///                     "(",
        ///                     ")",
        ///                     "{",
        ///                     "}",
        ///                     "[",
        ///                     "]",
        ///                     "&lt;",
        ///                     "&gt;",
        ///                     "?",
        ///                     "/",
        ///                     "#",
        ///                     ":",
        ///                 },
        ///                 ["type"] = "text",
        ///                 ["doc_value"] = false,
        ///                 ["alias"] = "",
        ///                 ["chn"] = false,
        ///             },
        ///         }),
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetIndexs.Invoke(new()
        ///     {
        ///         LogstoreName = defaultStore.LogstoreName,
        ///         ProjectName = defaultProject.ProjectName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsIndexExampleId"] = @default.Apply(@default =&gt; @default.Apply(getIndexsResult =&gt; getIndexsResult.Indexs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIndexsResult> Invoke(GetIndexsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndexsResult>("alicloud:sls/getIndexs:getIndexs", args ?? new GetIndexsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndexsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Index IDs. The value is formulated as `&lt;project_name&gt;:&lt;logstore_name&gt;`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Logstore name
        /// </summary>
        [Input("logstoreName", required: true)]
        public string LogstoreName { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        public GetIndexsArgs()
        {
        }
        public static new GetIndexsArgs Empty => new GetIndexsArgs();
    }

    public sealed class GetIndexsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Index IDs. The value is formulated as `&lt;project_name&gt;:&lt;logstore_name&gt;`.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Logstore name
        /// </summary>
        [Input("logstoreName", required: true)]
        public Input<string> LogstoreName { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        public GetIndexsInvokeArgs()
        {
        }
        public static new GetIndexsInvokeArgs Empty => new GetIndexsInvokeArgs();
    }


    [OutputType]
    public sealed class GetIndexsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Index IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// A list of Index Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIndexsIndexResult> Indexs;
        public readonly string LogstoreName;
        public readonly string? OutputFile;
        public readonly string ProjectName;

        [OutputConstructor]
        private GetIndexsResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetIndexsIndexResult> indexs,

            string logstoreName,

            string? outputFile,

            string projectName)
        {
            Id = id;
            Ids = ids;
            Indexs = indexs;
            LogstoreName = logstoreName;
            OutputFile = outputFile;
            ProjectName = projectName;
        }
    }
}
