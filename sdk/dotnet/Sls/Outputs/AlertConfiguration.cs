// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls.Outputs
{

    [OutputType]
    public sealed class AlertConfiguration
    {
        /// <summary>
        /// Template Annotations.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertConfigurationAnnotation> Annotations;
        /// <summary>
        /// Whether to turn on automatic labeling. true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling. false: Turn off the automatic annotation function.
        /// </summary>
        public readonly bool? AutoAnnotation;
        /// <summary>
        /// Alarm trigger condition. See `ConditionConfiguration` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationConditionConfiguration? ConditionConfiguration;
        /// <summary>
        /// The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
        /// </summary>
        public readonly string? Dashboard;
        /// <summary>
        /// Group evaluation configuration. See `GroupConfiguration` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationGroupConfiguration? GroupConfiguration;
        /// <summary>
        /// Set operation configuration. See `JoinConfigurations` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertConfigurationJoinConfiguration> JoinConfigurations;
        /// <summary>
        /// Label. See `Labels` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertConfigurationLabel> Labels;
        /// <summary>
        /// Second-level timestamp representing the temporary shutdown deadline.
        /// </summary>
        public readonly int? MuteUntil;
        /// <summary>
        /// Whether no data triggers an alarm. true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated. false (default): Turn off the no data alarm function.
        /// </summary>
        public readonly bool? NoDataFire;
        /// <summary>
        /// Alarm severity when no data triggers an alarm.
        /// </summary>
        public readonly int? NoDataSeverity;
        /// <summary>
        /// Alert policy configuration. See `PolicyConfiguration` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationPolicyConfiguration? PolicyConfiguration;
        /// <summary>
        /// Query the statistical list. See `QueryList` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertConfigurationQueryList> QueryLists;
        /// <summary>
        /// Whether to send a recovery notification. true: A recovery alarm is triggered when the alarm is restored. false (default): Turn off the alarm recovery notification function.
        /// </summary>
        public readonly bool? SendResolved;
        /// <summary>
        /// Trigger condition, set at least one trigger condition. See `SeverityConfigurations` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertConfigurationSeverityConfiguration> SeverityConfigurations;
        /// <summary>
        /// Configuration of Alerts Sent to Alerthub. See `SinkAlerthub` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationSinkAlerthub? SinkAlerthub;
        /// <summary>
        /// Configure alerts sent to CloudMonitor. See `SinkCms` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationSinkCms? SinkCms;
        /// <summary>
        /// Configuration of sending alarms to EventStore. See `SinkEventStore` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationSinkEventStore? SinkEventStore;
        /// <summary>
        /// Customize the category of alarm monitoring rules.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Alarm rule template configuration. See `TemplateConfiguration` below.
        /// </summary>
        public readonly Outputs.AlertConfigurationTemplateConfiguration? TemplateConfiguration;
        /// <summary>
        /// Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
        /// </summary>
        public readonly int? Threshold;
        /// <summary>
        /// Template Type.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Template Version.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private AlertConfiguration(
            ImmutableArray<Outputs.AlertConfigurationAnnotation> annotations,

            bool? autoAnnotation,

            Outputs.AlertConfigurationConditionConfiguration? conditionConfiguration,

            string? dashboard,

            Outputs.AlertConfigurationGroupConfiguration? groupConfiguration,

            ImmutableArray<Outputs.AlertConfigurationJoinConfiguration> joinConfigurations,

            ImmutableArray<Outputs.AlertConfigurationLabel> labels,

            int? muteUntil,

            bool? noDataFire,

            int? noDataSeverity,

            Outputs.AlertConfigurationPolicyConfiguration? policyConfiguration,

            ImmutableArray<Outputs.AlertConfigurationQueryList> queryLists,

            bool? sendResolved,

            ImmutableArray<Outputs.AlertConfigurationSeverityConfiguration> severityConfigurations,

            Outputs.AlertConfigurationSinkAlerthub? sinkAlerthub,

            Outputs.AlertConfigurationSinkCms? sinkCms,

            Outputs.AlertConfigurationSinkEventStore? sinkEventStore,

            ImmutableArray<string> tags,

            Outputs.AlertConfigurationTemplateConfiguration? templateConfiguration,

            int? threshold,

            string? type,

            string? version)
        {
            Annotations = annotations;
            AutoAnnotation = autoAnnotation;
            ConditionConfiguration = conditionConfiguration;
            Dashboard = dashboard;
            GroupConfiguration = groupConfiguration;
            JoinConfigurations = joinConfigurations;
            Labels = labels;
            MuteUntil = muteUntil;
            NoDataFire = noDataFire;
            NoDataSeverity = noDataSeverity;
            PolicyConfiguration = policyConfiguration;
            QueryLists = queryLists;
            SendResolved = sendResolved;
            SeverityConfigurations = severityConfigurations;
            SinkAlerthub = sinkAlerthub;
            SinkCms = sinkCms;
            SinkEventStore = sinkEventStore;
            Tags = tags;
            TemplateConfiguration = templateConfiguration;
            Threshold = threshold;
            Type = type;
            Version = version;
        }
    }
}
