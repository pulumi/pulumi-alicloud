// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls.Outputs
{

    [OutputType]
    public sealed class GetAlertsAlertConfigurationResult
    {
        /// <summary>
        /// Template Annotations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertConfigurationAnnotationResult> Annotations;
        /// <summary>
        /// Whether to turn on automatic labeling.true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling.false: Turn off the automatic annotation function.
        /// </summary>
        public readonly bool AutoAnnotation;
        /// <summary>
        /// Alarm trigger condition.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationConditionConfigurationResult ConditionConfiguration;
        /// <summary>
        /// The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
        /// </summary>
        public readonly string Dashboard;
        /// <summary>
        /// Group evaluation configuration.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationGroupConfigurationResult GroupConfiguration;
        /// <summary>
        /// Set operation configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertConfigurationJoinConfigurationResult> JoinConfigurations;
        /// <summary>
        /// Label.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertConfigurationLabelResult> Labels;
        /// <summary>
        /// Second-level timestamp representing the temporary shutdown deadline.
        /// </summary>
        public readonly int MuteUntil;
        /// <summary>
        /// Whether no data triggers an alarm.true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated.false (default): Turn off the no data alarm function.
        /// </summary>
        public readonly bool NoDataFire;
        /// <summary>
        /// Alarm severity when no data triggers an alarm.
        /// </summary>
        public readonly int NoDataSeverity;
        /// <summary>
        /// Alert policy configuration.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationPolicyConfigurationResult PolicyConfiguration;
        /// <summary>
        /// Query the statistical list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertConfigurationQueryListResult> QueryLists;
        /// <summary>
        /// Whether to send a recovery notification.true: A recovery alarm is triggered when the alarm is restored.false (default): Turn off the alarm recovery notification function.
        /// </summary>
        public readonly bool SendResolved;
        /// <summary>
        /// Trigger condition, set at least one trigger condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertConfigurationSeverityConfigurationResult> SeverityConfigurations;
        /// <summary>
        /// Configuration of Alerts Sent to Alerthub.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationSinkAlerthubResult SinkAlerthub;
        /// <summary>
        /// Configure alerts sent to CloudMonitor.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationSinkCmsResult SinkCms;
        /// <summary>
        /// Configuration of sending alarms to EventStore.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationSinkEventStoreResult SinkEventStore;
        /// <summary>
        /// Customize the category of alarm monitoring rules.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Alarm rule template configuration.
        /// </summary>
        public readonly Outputs.GetAlertsAlertConfigurationTemplateConfigurationResult TemplateConfiguration;
        /// <summary>
        /// Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
        /// </summary>
        public readonly int Threshold;
        /// <summary>
        /// Check the frequency type. Log Service checks the query and analysis results according to the frequency you configured. The values are as follows:Fixedate: checks query and analysis results at regular intervals.Cron: specifies the time interval by using the Cron expression, and checks the query and analysis results at the specified time interval.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Fixed as 2.0.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetAlertsAlertConfigurationResult(
            ImmutableArray<Outputs.GetAlertsAlertConfigurationAnnotationResult> annotations,

            bool autoAnnotation,

            Outputs.GetAlertsAlertConfigurationConditionConfigurationResult conditionConfiguration,

            string dashboard,

            Outputs.GetAlertsAlertConfigurationGroupConfigurationResult groupConfiguration,

            ImmutableArray<Outputs.GetAlertsAlertConfigurationJoinConfigurationResult> joinConfigurations,

            ImmutableArray<Outputs.GetAlertsAlertConfigurationLabelResult> labels,

            int muteUntil,

            bool noDataFire,

            int noDataSeverity,

            Outputs.GetAlertsAlertConfigurationPolicyConfigurationResult policyConfiguration,

            ImmutableArray<Outputs.GetAlertsAlertConfigurationQueryListResult> queryLists,

            bool sendResolved,

            ImmutableArray<Outputs.GetAlertsAlertConfigurationSeverityConfigurationResult> severityConfigurations,

            Outputs.GetAlertsAlertConfigurationSinkAlerthubResult sinkAlerthub,

            Outputs.GetAlertsAlertConfigurationSinkCmsResult sinkCms,

            Outputs.GetAlertsAlertConfigurationSinkEventStoreResult sinkEventStore,

            ImmutableArray<string> tags,

            Outputs.GetAlertsAlertConfigurationTemplateConfigurationResult templateConfiguration,

            int threshold,

            string type,

            string version)
        {
            Annotations = annotations;
            AutoAnnotation = autoAnnotation;
            ConditionConfiguration = conditionConfiguration;
            Dashboard = dashboard;
            GroupConfiguration = groupConfiguration;
            JoinConfigurations = joinConfigurations;
            Labels = labels;
            MuteUntil = muteUntil;
            NoDataFire = noDataFire;
            NoDataSeverity = noDataSeverity;
            PolicyConfiguration = policyConfiguration;
            QueryLists = queryLists;
            SendResolved = sendResolved;
            SeverityConfigurations = severityConfigurations;
            SinkAlerthub = sinkAlerthub;
            SinkCms = sinkCms;
            SinkEventStore = sinkEventStore;
            Tags = tags;
            TemplateConfiguration = templateConfiguration;
            Threshold = threshold;
            Type = type;
            Version = version;
        }
    }
}
