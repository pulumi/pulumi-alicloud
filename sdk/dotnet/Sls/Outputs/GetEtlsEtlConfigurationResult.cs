// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls.Outputs
{

    [OutputType]
    public sealed class GetEtlsEtlConfigurationResult
    {
        /// <summary>
        /// Processing time start timestamp (accurate to the second). Enter 0 when the first log received from the source Logstore is consumed.
        /// </summary>
        public readonly int FromTime;
        /// <summary>
        /// Data processing syntax type.
        /// </summary>
        public readonly string Lang;
        /// <summary>
        /// Source Logstore Name.
        /// </summary>
        public readonly string Logstore;
        /// <summary>
        /// Advanced parameter configuration.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        /// <summary>
        /// The ARN role that authorizes writing to the target Logstore.
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// Processing script.
        /// </summary>
        public readonly string Script;
        /// <summary>
        /// Processing result output target list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEtlsEtlConfigurationSinkResult> Sinks;
        /// <summary>
        /// Processing time end timestamp (accurate to seconds). When continuous consumption is stopped manually, fill in 0.
        /// </summary>
        public readonly int ToTime;

        [OutputConstructor]
        private GetEtlsEtlConfigurationResult(
            int fromTime,

            string lang,

            string logstore,

            ImmutableDictionary<string, string> parameters,

            string roleArn,

            string script,

            ImmutableArray<Outputs.GetEtlsEtlConfigurationSinkResult> sinks,

            int toTime)
        {
            FromTime = fromTime;
            Lang = lang;
            Logstore = logstore;
            Parameters = parameters;
            RoleArn = roleArn;
            Script = script;
            Sinks = sinks;
            ToTime = toTime;
        }
    }
}
