// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls.Inputs
{

    public sealed class AlertConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputList<Inputs.AlertConfigurationAnnotationArgs>? _annotations;

        /// <summary>
        /// Template Annotations.
        /// </summary>
        public InputList<Inputs.AlertConfigurationAnnotationArgs> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<Inputs.AlertConfigurationAnnotationArgs>());
            set => _annotations = value;
        }

        /// <summary>
        /// Whether to turn on automatic labeling. true (default): The automatic annotation function is enabled, and the system automatically adds information such as__county__to the alarm. For more information, see Automatic Labeling. false: Turn off the automatic annotation function.
        /// </summary>
        [Input("autoAnnotation")]
        public Input<bool>? AutoAnnotation { get; set; }

        /// <summary>
        /// Alarm trigger condition. See `condition_configuration` below.
        /// </summary>
        [Input("conditionConfiguration")]
        public Input<Inputs.AlertConfigurationConditionConfigurationArgs>? ConditionConfiguration { get; set; }

        /// <summary>
        /// The instrument cluster associated with the alarm. It is recommended to set to internal-alert-analysis.
        /// </summary>
        [Input("dashboard")]
        public Input<string>? Dashboard { get; set; }

        /// <summary>
        /// Group evaluation configuration. See `group_configuration` below.
        /// </summary>
        [Input("groupConfiguration")]
        public Input<Inputs.AlertConfigurationGroupConfigurationArgs>? GroupConfiguration { get; set; }

        [Input("joinConfigurations")]
        private InputList<Inputs.AlertConfigurationJoinConfigurationArgs>? _joinConfigurations;

        /// <summary>
        /// Set operation configuration. See `join_configurations` below.
        /// </summary>
        public InputList<Inputs.AlertConfigurationJoinConfigurationArgs> JoinConfigurations
        {
            get => _joinConfigurations ?? (_joinConfigurations = new InputList<Inputs.AlertConfigurationJoinConfigurationArgs>());
            set => _joinConfigurations = value;
        }

        [Input("labels")]
        private InputList<Inputs.AlertConfigurationLabelArgs>? _labels;

        /// <summary>
        /// Label. See `labels` below.
        /// </summary>
        public InputList<Inputs.AlertConfigurationLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.AlertConfigurationLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Second-level timestamp representing the temporary shutdown deadline.
        /// </summary>
        [Input("muteUntil")]
        public Input<int>? MuteUntil { get; set; }

        /// <summary>
        /// Whether no data triggers an alarm. true: If the number of times the query and analysis results (if there are multiple results, the result after the collection operation) is no data exceeds the continuous trigger threshold, an alarm is generated. false (default): Turn off the no data alarm function.
        /// </summary>
        [Input("noDataFire")]
        public Input<bool>? NoDataFire { get; set; }

        /// <summary>
        /// Alarm severity when no data triggers an alarm.
        /// </summary>
        [Input("noDataSeverity")]
        public Input<int>? NoDataSeverity { get; set; }

        /// <summary>
        /// Alert policy configuration. See `policy_configuration` below.
        /// </summary>
        [Input("policyConfiguration")]
        public Input<Inputs.AlertConfigurationPolicyConfigurationArgs>? PolicyConfiguration { get; set; }

        [Input("queryLists")]
        private InputList<Inputs.AlertConfigurationQueryListArgs>? _queryLists;

        /// <summary>
        /// Query the statistical list. See `query_list` below.
        /// </summary>
        public InputList<Inputs.AlertConfigurationQueryListArgs> QueryLists
        {
            get => _queryLists ?? (_queryLists = new InputList<Inputs.AlertConfigurationQueryListArgs>());
            set => _queryLists = value;
        }

        /// <summary>
        /// Whether to send a recovery notification. true: A recovery alarm is triggered when the alarm is restored. false (default): Turn off the alarm recovery notification function.
        /// </summary>
        [Input("sendResolved")]
        public Input<bool>? SendResolved { get; set; }

        [Input("severityConfigurations")]
        private InputList<Inputs.AlertConfigurationSeverityConfigurationArgs>? _severityConfigurations;

        /// <summary>
        /// Trigger condition, set at least one trigger condition. See `severity_configurations` below.
        /// </summary>
        public InputList<Inputs.AlertConfigurationSeverityConfigurationArgs> SeverityConfigurations
        {
            get => _severityConfigurations ?? (_severityConfigurations = new InputList<Inputs.AlertConfigurationSeverityConfigurationArgs>());
            set => _severityConfigurations = value;
        }

        /// <summary>
        /// Configuration of Alerts Sent to Alerthub. See `sink_alerthub` below.
        /// </summary>
        [Input("sinkAlerthub")]
        public Input<Inputs.AlertConfigurationSinkAlerthubArgs>? SinkAlerthub { get; set; }

        /// <summary>
        /// Configure alerts sent to CloudMonitor. See `sink_cms` below.
        /// </summary>
        [Input("sinkCms")]
        public Input<Inputs.AlertConfigurationSinkCmsArgs>? SinkCms { get; set; }

        /// <summary>
        /// Configuration of sending alarms to EventStore. See `sink_event_store` below.
        /// </summary>
        [Input("sinkEventStore")]
        public Input<Inputs.AlertConfigurationSinkEventStoreArgs>? SinkEventStore { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Customize the category of alarm monitoring rules.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Alarm rule template configuration. See `template_configuration` below.
        /// </summary>
        [Input("templateConfiguration")]
        public Input<Inputs.AlertConfigurationTemplateConfigurationArgs>? TemplateConfiguration { get; set; }

        /// <summary>
        /// Set the continuous trigger threshold. When the cumulative number of triggers reaches this value, an alarm is generated. The statistics are not counted when the trigger condition is not met.
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        /// <summary>
        /// Template Type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Template Version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public AlertConfigurationArgs()
        {
        }
        public static new AlertConfigurationArgs Empty => new AlertConfigurationArgs();
    }
}
