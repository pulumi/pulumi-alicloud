// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls
{
    /// <summary>
    /// Provides a Log Service (SLS) Etl resource.
    /// 
    /// For information about Log Service (SLS) Etl and how to use it, see [What is Etl](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateETL).
    /// 
    /// &gt; **NOTE:** Available since v1.248.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var defaulthhAPo6 = new AliCloud.Log.Project("defaulthhAPo6", new()
    ///     {
    ///         Description = "terraform-etl-example-813",
    ///         ProjectName = "terraform-etl-example-330",
    ///     });
    /// 
    ///     var defaultzWKLkp = new AliCloud.Log.Store("defaultzWKLkp", new()
    ///     {
    ///         HotTtl = 8,
    ///         RetentionPeriod = 30,
    ///         ShardCount = 2,
    ///         ProjectName = defaulthhAPo6.Id,
    ///         LogstoreName = "example",
    ///     });
    /// 
    ///     var @default = new AliCloud.Sls.Etl("default", new()
    ///     {
    ///         Project = defaulthhAPo6.Id,
    ///         Description = "etl-1740472705-185721",
    ///         Configuration = new AliCloud.Sls.Inputs.EtlConfigurationArgs
    ///         {
    ///             Script = "* | extend a=1",
    ///             Lang = "SPL",
    ///             RoleArn = name,
    ///             Sinks = new[]
    ///             {
    ///                 new AliCloud.Sls.Inputs.EtlConfigurationSinkArgs
    ///                 {
    ///                     Name = "11111",
    ///                     Endpoint = "cn-hangzhou-intranet.log.aliyuncs.com",
    ///                     Project = "gy-hangzhou-huolang-1",
    ///                     Logstore = "gy-rm2",
    ///                     Datasets = new[]
    ///                     {
    ///                         "__UNNAMED__",
    ///                     },
    ///                     RoleArn = name,
    ///                 },
    ///             },
    ///             Logstore = defaultzWKLkp.LogstoreName,
    ///             FromTime = 1706771697,
    ///             ToTime = 1738394097,
    ///         },
    ///         JobName = "etl-1740472705-185721",
    ///         DisplayName = "etl-1740472705-185721",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Log Service (SLS) Etl can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:sls/etl:Etl example &lt;project&gt;:&lt;job_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:sls/etl:Etl")]
    public partial class Etl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ETL configuration. See `Configuration` below.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.EtlConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The time when the data transformation job was created.
        /// </summary>
        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Data Processing Task Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Data processing task display name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Unique identification of data processing task.
        /// </summary>
        [Output("jobName")]
        public Output<string> JobName { get; private set; } = null!;

        /// <summary>
        /// Project Name.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The status of the data transformation job.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Etl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Etl(string name, EtlArgs args, CustomResourceOptions? options = null)
            : base("alicloud:sls/etl:Etl", name, args ?? new EtlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Etl(string name, Input<string> id, EtlState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:sls/etl:Etl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Etl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Etl Get(string name, Input<string> id, EtlState? state = null, CustomResourceOptions? options = null)
        {
            return new Etl(name, id, state, options);
        }
    }

    public sealed class EtlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ETL configuration. See `Configuration` below.
        /// </summary>
        [Input("configuration", required: true)]
        public Input<Inputs.EtlConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// Data Processing Task Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Data processing task display name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Unique identification of data processing task.
        /// </summary>
        [Input("jobName", required: true)]
        public Input<string> JobName { get; set; } = null!;

        /// <summary>
        /// Project Name.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public EtlArgs()
        {
        }
        public static new EtlArgs Empty => new EtlArgs();
    }

    public sealed class EtlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ETL configuration. See `Configuration` below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.EtlConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The time when the data transformation job was created.
        /// </summary>
        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        /// <summary>
        /// Data Processing Task Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Data processing task display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Unique identification of data processing task.
        /// </summary>
        [Input("jobName")]
        public Input<string>? JobName { get; set; }

        /// <summary>
        /// Project Name.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The status of the data transformation job.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public EtlState()
        {
        }
        public static new EtlState Empty => new EtlState();
    }
}
