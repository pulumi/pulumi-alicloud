// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls
{
    /// <summary>
    /// Provides a Log Service (SLS) Index resource.
    /// 
    /// For information about Log Service (SLS) Index and how to use it, see [What is Index](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateIndex).
    /// 
    /// &gt; **NOTE:** Available since v1.260.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "terraform-example";
    ///     var logstoreName = config.Get("logstoreName") ?? "logstore-example";
    ///     var projectName = config.Get("projectName") ?? "project-for-index-terraform-example";
    ///     var @default = new AliCloud.Log.Project("default", new()
    ///     {
    ///         Description = "terraform example",
    ///         ProjectName = projectName,
    ///     });
    /// 
    ///     var defaultStore = new AliCloud.Log.Store("default", new()
    ///     {
    ///         HotTtl = 7,
    ///         RetentionPeriod = 30,
    ///         ShardCount = 2,
    ///         ProjectName = @default.ProjectName,
    ///         LogstoreName = logstoreName,
    ///     });
    /// 
    ///     var defaultIndex = new AliCloud.Sls.Index("default", new()
    ///     {
    ///         Line = new AliCloud.Sls.Inputs.IndexLineArgs
    ///         {
    ///             Chn = true,
    ///             CaseSensitive = true,
    ///             Tokens = new[]
    ///             {
    ///                 "a",
    ///             },
    ///             ExcludeKeys = new[]
    ///             {
    ///                 "t",
    ///             },
    ///         },
    ///         Keys = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["example"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["caseSensitive"] = false,
    ///                 ["token"] = new[]
    ///                 {
    ///                     @"
    /// ",
    ///                     "	",
    ///                     ",",
    ///                     " ",
    ///                     ";",
    ///                     "\"",
    ///                     "'",
    ///                     "(",
    ///                     ")",
    ///                     "{",
    ///                     "}",
    ///                     "[",
    ///                     "]",
    ///                     "&lt;",
    ///                     "&gt;",
    ///                     "?",
    ///                     "/",
    ///                     "#",
    ///                     ":",
    ///                 },
    ///                 ["type"] = "text",
    ///                 ["doc_value"] = false,
    ///                 ["alias"] = "",
    ///                 ["chn"] = false,
    ///             },
    ///         }),
    ///         LogstoreName = defaultStore.LogstoreName,
    ///         ProjectName = projectName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Log Service (SLS) Index can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:sls/index:Index example &lt;project_name&gt;:&lt;logstore_name&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:sls/index:Index")]
    public partial class Index : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Field index
        /// </summary>
        [Output("keys")]
        public Output<string?> Keys { get; private set; } = null!;

        /// <summary>
        /// Full-text index See `Line` below.
        /// </summary>
        [Output("line")]
        public Output<Outputs.IndexLine?> Line { get; private set; } = null!;

        /// <summary>
        /// Whether log clustering is enabled
        /// </summary>
        [Output("logReduce")]
        public Output<bool?> LogReduce { get; private set; } = null!;

        /// <summary>
        /// The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
        /// </summary>
        [Output("logReduceBlackLists")]
        public Output<ImmutableArray<string>> LogReduceBlackLists { get; private set; } = null!;

        /// <summary>
        /// The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
        /// </summary>
        [Output("logReduceWhiteLists")]
        public Output<ImmutableArray<string>> LogReduceWhiteLists { get; private set; } = null!;

        /// <summary>
        /// Logstore name
        /// </summary>
        [Output("logstoreName")]
        public Output<string> LogstoreName { get; private set; } = null!;

        /// <summary>
        /// Maximum length of statistical field
        /// </summary>
        [Output("maxTextLen")]
        public Output<int?> MaxTextLen { get; private set; } = null!;

        /// <summary>
        /// Project name
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;


        /// <summary>
        /// Create a Index resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Index(string name, IndexArgs args, CustomResourceOptions? options = null)
            : base("alicloud:sls/index:Index", name, args ?? new IndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Index(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:sls/index:Index", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Index resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Index Get(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
        {
            return new Index(name, id, state, options);
        }
    }

    public sealed class IndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Field index
        /// </summary>
        [Input("keys")]
        public Input<string>? Keys { get; set; }

        /// <summary>
        /// Full-text index See `Line` below.
        /// </summary>
        [Input("line")]
        public Input<Inputs.IndexLineArgs>? Line { get; set; }

        /// <summary>
        /// Whether log clustering is enabled
        /// </summary>
        [Input("logReduce")]
        public Input<bool>? LogReduce { get; set; }

        [Input("logReduceBlackLists")]
        private InputList<string>? _logReduceBlackLists;

        /// <summary>
        /// The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
        /// </summary>
        public InputList<string> LogReduceBlackLists
        {
            get => _logReduceBlackLists ?? (_logReduceBlackLists = new InputList<string>());
            set => _logReduceBlackLists = value;
        }

        [Input("logReduceWhiteLists")]
        private InputList<string>? _logReduceWhiteLists;

        /// <summary>
        /// The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
        /// </summary>
        public InputList<string> LogReduceWhiteLists
        {
            get => _logReduceWhiteLists ?? (_logReduceWhiteLists = new InputList<string>());
            set => _logReduceWhiteLists = value;
        }

        /// <summary>
        /// Logstore name
        /// </summary>
        [Input("logstoreName", required: true)]
        public Input<string> LogstoreName { get; set; } = null!;

        /// <summary>
        /// Maximum length of statistical field
        /// </summary>
        [Input("maxTextLen")]
        public Input<int>? MaxTextLen { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        public IndexArgs()
        {
        }
        public static new IndexArgs Empty => new IndexArgs();
    }

    public sealed class IndexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Field index
        /// </summary>
        [Input("keys")]
        public Input<string>? Keys { get; set; }

        /// <summary>
        /// Full-text index See `Line` below.
        /// </summary>
        [Input("line")]
        public Input<Inputs.IndexLineGetArgs>? Line { get; set; }

        /// <summary>
        /// Whether log clustering is enabled
        /// </summary>
        [Input("logReduce")]
        public Input<bool>? LogReduce { get; set; }

        [Input("logReduceBlackLists")]
        private InputList<string>? _logReduceBlackLists;

        /// <summary>
        /// The blacklist of the cluster fields of log clustering is filtered only when log clustering is enabled.
        /// </summary>
        public InputList<string> LogReduceBlackLists
        {
            get => _logReduceBlackLists ?? (_logReduceBlackLists = new InputList<string>());
            set => _logReduceBlackLists = value;
        }

        [Input("logReduceWhiteLists")]
        private InputList<string>? _logReduceWhiteLists;

        /// <summary>
        /// The whitelist of the cluster fields for log clustering. This filter is valid only when log clustering is enabled.
        /// </summary>
        public InputList<string> LogReduceWhiteLists
        {
            get => _logReduceWhiteLists ?? (_logReduceWhiteLists = new InputList<string>());
            set => _logReduceWhiteLists = value;
        }

        /// <summary>
        /// Logstore name
        /// </summary>
        [Input("logstoreName")]
        public Input<string>? LogstoreName { get; set; }

        /// <summary>
        /// Maximum length of statistical field
        /// </summary>
        [Input("maxTextLen")]
        public Input<int>? MaxTextLen { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public IndexState()
        {
        }
        public static new IndexState Empty => new IndexState();
    }
}
