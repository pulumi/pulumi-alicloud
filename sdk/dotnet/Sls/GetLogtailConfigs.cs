// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Sls
{
    public static class GetLogtailConfigs
    {
        /// <summary>
        /// This data source provides Sls Logtail Config available to the user.[What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig)
        /// 
        /// &gt; **NOTE:** Available since v1.259.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Max = 99999,
        ///         Min = 10000,
        ///     });
        /// 
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tfaccsls62147";
        ///     var projectName = config.Get("projectName") ?? "project-for-logtail-terraform";
        ///     var defaultuA28zS = new AliCloud.Log.Project("defaultuA28zS", new()
        ///     {
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultLogtailConfig = new AliCloud.Sls.LogtailConfig("default", new()
        ///     {
        ///         ProjectName = defaultuA28zS.ProjectName,
        ///         OutputDetail = new AliCloud.Sls.Inputs.LogtailConfigOutputDetailArgs
        ///         {
        ///             Endpoint = "cn-hangzhou-intranet.log.aliyuncs.com",
        ///             Region = "cn-hangzhou",
        ///             LogstoreName = "example",
        ///         },
        ///         OutputType = "LogService",
        ///         InputDetail = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["adjustTimezone"] = false,
        ///             ["delayAlarmBytes"] = 0,
        ///             ["delaySkipBytes"] = 0,
        ///             ["discardNonUtf8"] = false,
        ///             ["discardUnmatch"] = true,
        ///             ["dockerFile"] = false,
        ///             ["enableRawLog"] = false,
        ///             ["enableTag"] = false,
        ///             ["fileEncoding"] = "utf8",
        ///             ["filePattern"] = "access*.log",
        ///             ["filterKey"] = new[]
        ///             {
        ///                 "key1",
        ///             },
        ///             ["filterRegex"] = new[]
        ///             {
        ///                 "regex1",
        ///             },
        ///             ["key"] = new[]
        ///             {
        ///                 "key1",
        ///                 "key2",
        ///             },
        ///             ["localStorage"] = true,
        ///             ["logBeginRegex"] = ".*",
        ///             ["logPath"] = "/var/log/httpd",
        ///             ["logTimezone"] = "",
        ///             ["logType"] = "common_reg_log",
        ///             ["maxDepth"] = 1000,
        ///             ["maxSendRate"] = -1,
        ///             ["mergeType"] = "topic",
        ///             ["preserve"] = true,
        ///             ["preserveDepth"] = 0,
        ///             ["priority"] = 0,
        ///             ["regex"] = "(w+)(s+)",
        ///             ["sendRateExpire"] = 0,
        ///             ["sensitive_keys"] = new[]
        ///             {
        ///             },
        ///             ["tailExisted"] = false,
        ///             ["timeFormat"] = "%Y/%m/%d %H:%M:%S",
        ///             ["timeKey"] = "time",
        ///             ["topicFormat"] = "none",
        ///         }),
        ///         LogtailConfigName = "tfaccsls62147",
        ///         InputType = "file",
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetLogtailConfigs.Invoke(new()
        ///     {
        ///         LogtailConfigName = defaultLogtailConfig.LogtailConfigName,
        ///         LogstoreName = "example",
        ///         ProjectName = projectName,
        ///         Offset = 0,
        ///         Size = 100,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsLogtailConfigExampleId"] = @default.Apply(@default =&gt; @default.Apply(getLogtailConfigsResult =&gt; getLogtailConfigsResult.Configs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLogtailConfigsResult> InvokeAsync(GetLogtailConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogtailConfigsResult>("alicloud:sls/getLogtailConfigs:getLogtailConfigs", args ?? new GetLogtailConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Sls Logtail Config available to the user.[What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig)
        /// 
        /// &gt; **NOTE:** Available since v1.259.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Max = 99999,
        ///         Min = 10000,
        ///     });
        /// 
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tfaccsls62147";
        ///     var projectName = config.Get("projectName") ?? "project-for-logtail-terraform";
        ///     var defaultuA28zS = new AliCloud.Log.Project("defaultuA28zS", new()
        ///     {
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultLogtailConfig = new AliCloud.Sls.LogtailConfig("default", new()
        ///     {
        ///         ProjectName = defaultuA28zS.ProjectName,
        ///         OutputDetail = new AliCloud.Sls.Inputs.LogtailConfigOutputDetailArgs
        ///         {
        ///             Endpoint = "cn-hangzhou-intranet.log.aliyuncs.com",
        ///             Region = "cn-hangzhou",
        ///             LogstoreName = "example",
        ///         },
        ///         OutputType = "LogService",
        ///         InputDetail = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["adjustTimezone"] = false,
        ///             ["delayAlarmBytes"] = 0,
        ///             ["delaySkipBytes"] = 0,
        ///             ["discardNonUtf8"] = false,
        ///             ["discardUnmatch"] = true,
        ///             ["dockerFile"] = false,
        ///             ["enableRawLog"] = false,
        ///             ["enableTag"] = false,
        ///             ["fileEncoding"] = "utf8",
        ///             ["filePattern"] = "access*.log",
        ///             ["filterKey"] = new[]
        ///             {
        ///                 "key1",
        ///             },
        ///             ["filterRegex"] = new[]
        ///             {
        ///                 "regex1",
        ///             },
        ///             ["key"] = new[]
        ///             {
        ///                 "key1",
        ///                 "key2",
        ///             },
        ///             ["localStorage"] = true,
        ///             ["logBeginRegex"] = ".*",
        ///             ["logPath"] = "/var/log/httpd",
        ///             ["logTimezone"] = "",
        ///             ["logType"] = "common_reg_log",
        ///             ["maxDepth"] = 1000,
        ///             ["maxSendRate"] = -1,
        ///             ["mergeType"] = "topic",
        ///             ["preserve"] = true,
        ///             ["preserveDepth"] = 0,
        ///             ["priority"] = 0,
        ///             ["regex"] = "(w+)(s+)",
        ///             ["sendRateExpire"] = 0,
        ///             ["sensitive_keys"] = new[]
        ///             {
        ///             },
        ///             ["tailExisted"] = false,
        ///             ["timeFormat"] = "%Y/%m/%d %H:%M:%S",
        ///             ["timeKey"] = "time",
        ///             ["topicFormat"] = "none",
        ///         }),
        ///         LogtailConfigName = "tfaccsls62147",
        ///         InputType = "file",
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetLogtailConfigs.Invoke(new()
        ///     {
        ///         LogtailConfigName = defaultLogtailConfig.LogtailConfigName,
        ///         LogstoreName = "example",
        ///         ProjectName = projectName,
        ///         Offset = 0,
        ///         Size = 100,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsLogtailConfigExampleId"] = @default.Apply(@default =&gt; @default.Apply(getLogtailConfigsResult =&gt; getLogtailConfigsResult.Configs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogtailConfigsResult> Invoke(GetLogtailConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogtailConfigsResult>("alicloud:sls/getLogtailConfigs:getLogtailConfigs", args ?? new GetLogtailConfigsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides Sls Logtail Config available to the user.[What is Logtail Config](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateConfig)
        /// 
        /// &gt; **NOTE:** Available since v1.259.0.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// using Random = Pulumi.Random;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var defaultInteger = new Random.Index.Integer("default", new()
        ///     {
        ///         Max = 99999,
        ///         Min = 10000,
        ///     });
        /// 
        ///     var config = new Config();
        ///     var name = config.Get("name") ?? "tfaccsls62147";
        ///     var projectName = config.Get("projectName") ?? "project-for-logtail-terraform";
        ///     var defaultuA28zS = new AliCloud.Log.Project("defaultuA28zS", new()
        ///     {
        ///         ProjectName = projectName,
        ///     });
        /// 
        ///     var defaultLogtailConfig = new AliCloud.Sls.LogtailConfig("default", new()
        ///     {
        ///         ProjectName = defaultuA28zS.ProjectName,
        ///         OutputDetail = new AliCloud.Sls.Inputs.LogtailConfigOutputDetailArgs
        ///         {
        ///             Endpoint = "cn-hangzhou-intranet.log.aliyuncs.com",
        ///             Region = "cn-hangzhou",
        ///             LogstoreName = "example",
        ///         },
        ///         OutputType = "LogService",
        ///         InputDetail = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["adjustTimezone"] = false,
        ///             ["delayAlarmBytes"] = 0,
        ///             ["delaySkipBytes"] = 0,
        ///             ["discardNonUtf8"] = false,
        ///             ["discardUnmatch"] = true,
        ///             ["dockerFile"] = false,
        ///             ["enableRawLog"] = false,
        ///             ["enableTag"] = false,
        ///             ["fileEncoding"] = "utf8",
        ///             ["filePattern"] = "access*.log",
        ///             ["filterKey"] = new[]
        ///             {
        ///                 "key1",
        ///             },
        ///             ["filterRegex"] = new[]
        ///             {
        ///                 "regex1",
        ///             },
        ///             ["key"] = new[]
        ///             {
        ///                 "key1",
        ///                 "key2",
        ///             },
        ///             ["localStorage"] = true,
        ///             ["logBeginRegex"] = ".*",
        ///             ["logPath"] = "/var/log/httpd",
        ///             ["logTimezone"] = "",
        ///             ["logType"] = "common_reg_log",
        ///             ["maxDepth"] = 1000,
        ///             ["maxSendRate"] = -1,
        ///             ["mergeType"] = "topic",
        ///             ["preserve"] = true,
        ///             ["preserveDepth"] = 0,
        ///             ["priority"] = 0,
        ///             ["regex"] = "(w+)(s+)",
        ///             ["sendRateExpire"] = 0,
        ///             ["sensitive_keys"] = new[]
        ///             {
        ///             },
        ///             ["tailExisted"] = false,
        ///             ["timeFormat"] = "%Y/%m/%d %H:%M:%S",
        ///             ["timeKey"] = "time",
        ///             ["topicFormat"] = "none",
        ///         }),
        ///         LogtailConfigName = "tfaccsls62147",
        ///         InputType = "file",
        ///     });
        /// 
        ///     var @default = AliCloud.Sls.GetLogtailConfigs.Invoke(new()
        ///     {
        ///         LogtailConfigName = defaultLogtailConfig.LogtailConfigName,
        ///         LogstoreName = "example",
        ///         ProjectName = projectName,
        ///         Offset = 0,
        ///         Size = 100,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["alicloudSlsLogtailConfigExampleId"] = @default.Apply(@default =&gt; @default.Apply(getLogtailConfigsResult =&gt; getLogtailConfigsResult.Configs[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogtailConfigsResult> Invoke(GetLogtailConfigsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogtailConfigsResult>("alicloud:sls/getLogtailConfigs:getLogtailConfigs", args ?? new GetLogtailConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogtailConfigsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Logtail Config IDs. The value is formulated as `&lt;project_name&gt;:&lt;logtail_config_name&gt;`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Logstore name.
        /// </summary>
        [Input("logstoreName", required: true)]
        public string LogstoreName { get; set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("logtailConfigName")]
        public string? LogtailConfigName { get; set; }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Query start row. The default value is 0.
        /// </summary>
        [Input("offset", required: true)]
        public int Offset { get; set; }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        /// <summary>
        /// The number of rows per page set for a pagination query. The maximum value is 500.
        /// </summary>
        [Input("size", required: true)]
        public int Size { get; set; }

        public GetLogtailConfigsArgs()
        {
        }
        public static new GetLogtailConfigsArgs Empty => new GetLogtailConfigsArgs();
    }

    public sealed class GetLogtailConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Logtail Config IDs. The value is formulated as `&lt;project_name&gt;:&lt;logtail_config_name&gt;`.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Logstore name.
        /// </summary>
        [Input("logstoreName", required: true)]
        public Input<string> LogstoreName { get; set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("logtailConfigName")]
        public Input<string>? LogtailConfigName { get; set; }

        /// <summary>
        /// A regex string to filter results by Group Metric Rule name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Query start row. The default value is 0.
        /// </summary>
        [Input("offset", required: true)]
        public Input<int> Offset { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The number of rows per page set for a pagination query. The maximum value is 500.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        public GetLogtailConfigsInvokeArgs()
        {
        }
        public static new GetLogtailConfigsInvokeArgs Empty => new GetLogtailConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogtailConfigsResult
    {
        /// <summary>
        /// A list of Logtail Config Entries. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLogtailConfigsConfigResult> Configs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Logtail Config IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string LogstoreName;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string? LogtailConfigName;
        public readonly string? NameRegex;
        /// <summary>
        /// A list of name of Logtail Configs.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly int Offset;
        public readonly string? OutputFile;
        public readonly string ProjectName;
        public readonly int Size;

        [OutputConstructor]
        private GetLogtailConfigsResult(
            ImmutableArray<Outputs.GetLogtailConfigsConfigResult> configs,

            string id,

            ImmutableArray<string> ids,

            string logstoreName,

            string? logtailConfigName,

            string? nameRegex,

            ImmutableArray<string> names,

            int offset,

            string? outputFile,

            string projectName,

            int size)
        {
            Configs = configs;
            Id = id;
            Ids = ids;
            LogstoreName = logstoreName;
            LogtailConfigName = logtailConfigName;
            NameRegex = nameRegex;
            Names = names;
            Offset = offset;
            OutputFile = outputFile;
            ProjectName = projectName;
            Size = size;
        }
    }
}
