// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Emrv2
{
    /// <summary>
    /// Provides a EMR cluster resource. This resource is based on EMR's new version OpenAPI.
    /// 
    /// For information about EMR New and how to use it, see [Add a domain](https://www.alibabacloud.com/help/doc-detail/28068.htm).
    /// 
    /// &gt; **NOTE:** Available in v1.199.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultResourceGroups = AliCloud.ResourceManager.GetResourceGroups.Invoke(new()
    ///     {
    ///         Status = "OK",
    ///     });
    /// 
    ///     var defaultZones = AliCloud.GetZones.Invoke(new()
    ///     {
    ///         AvailableInstanceType = "ecs.g7.xlarge",
    ///     });
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("defaultNetwork", new()
    ///     {
    ///         VpcName = "TF-VPC",
    ///         CidrBlock = "172.16.0.0/12",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("defaultSwitch", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///         CidrBlock = "172.16.0.0/21",
    ///         ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VswitchName = "TF_VSwitch",
    ///     });
    /// 
    ///     var defaultEcsKeyPair = new AliCloud.Ecs.EcsKeyPair("defaultEcsKeyPair", new()
    ///     {
    ///         KeyPairName = "terraform-kp",
    ///     });
    /// 
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("defaultSecurityGroup", new()
    ///     {
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultRole = new AliCloud.Ram.Role("defaultRole", new()
    ///     {
    ///         Document = @"    {
    ///         ""Statement"": [
    ///         {
    ///             ""Action"": ""sts:AssumeRole"",
    ///             ""Effect"": ""Allow"",
    ///             ""Principal"": {
    ///             ""Service"": [
    ///                 ""emr.aliyuncs.com"",
    ///                 ""ecs.aliyuncs.com""
    ///             ]
    ///             }
    ///         }
    ///         ],
    ///         ""Version"": ""1""
    ///     }
    /// ",
    ///         Description = "this is a role test.",
    ///         Force = true,
    ///     });
    /// 
    ///     var defaultCluster = new AliCloud.Emrv2.Cluster("defaultCluster", new()
    ///     {
    ///         PaymentType = "PayAsYouGo",
    ///         ClusterType = "DATALAKE",
    ///         ReleaseVersion = "EMR-5.10.0",
    ///         ClusterName = "terraform-emr-cluster-v2",
    ///         DeployMode = "NORMAL",
    ///         SecurityMode = "NORMAL",
    ///         Applications = new[]
    ///         {
    ///             "HADOOP-COMMON",
    ///             "HDFS",
    ///             "YARN",
    ///             "HIVE",
    ///             "SPARK3",
    ///             "TEZ",
    ///         },
    ///         ApplicationConfigs = new[]
    ///         {
    ///             new AliCloud.Emrv2.Inputs.ClusterApplicationConfigArgs
    ///             {
    ///                 ApplicationName = "HIVE",
    ///                 ConfigFileName = "hivemetastore-site.xml",
    ///                 ConfigItemKey = "hive.metastore.type",
    ///                 ConfigItemValue = "DLF",
    ///                 ConfigScope = "CLUSTER",
    ///             },
    ///             new AliCloud.Emrv2.Inputs.ClusterApplicationConfigArgs
    ///             {
    ///                 ApplicationName = "SPARK3",
    ///                 ConfigFileName = "hive-site.xml",
    ///                 ConfigItemKey = "hive.metastore.type",
    ///                 ConfigItemValue = "DLF",
    ///                 ConfigScope = "CLUSTER",
    ///             },
    ///         },
    ///         NodeAttributes = new[]
    ///         {
    ///             new AliCloud.Emrv2.Inputs.ClusterNodeAttributeArgs
    ///             {
    ///                 RamRole = defaultRole.Name,
    ///                 SecurityGroupId = defaultSecurityGroup.Id,
    ///                 VpcId = defaultNetwork.Id,
    ///                 ZoneId = defaultZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///                 KeyPairName = defaultEcsKeyPair.Id,
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "created", "tf" },
    ///         },
    ///         NodeGroups = new[]
    ///         {
    ///             new AliCloud.Emrv2.Inputs.ClusterNodeGroupArgs
    ///             {
    ///                 NodeGroupType = "MASTER",
    ///                 NodeGroupName = "emr-master",
    ///                 PaymentType = "PayAsYouGo",
    ///                 VswitchIds = new[]
    ///                 {
    ///                     defaultSwitch.Id,
    ///                 },
    ///                 WithPublicIp = false,
    ///                 InstanceTypes = new[]
    ///                 {
    ///                     "ecs.g7.xlarge",
    ///                 },
    ///                 NodeCount = 1,
    ///                 SystemDisk = new AliCloud.Emrv2.Inputs.ClusterNodeGroupSystemDiskArgs
    ///                 {
    ///                     Category = "cloud_essd",
    ///                     Size = 80,
    ///                     Count = 1,
    ///                 },
    ///                 DataDisks = new[]
    ///                 {
    ///                     new AliCloud.Emrv2.Inputs.ClusterNodeGroupDataDiskArgs
    ///                     {
    ///                         Category = "cloud_essd",
    ///                         Size = 80,
    ///                         Count = 3,
    ///                     },
    ///                 },
    ///             },
    ///             new AliCloud.Emrv2.Inputs.ClusterNodeGroupArgs
    ///             {
    ///                 NodeGroupType = "CORE",
    ///                 NodeGroupName = "emr-core",
    ///                 PaymentType = "PayAsYouGo",
    ///                 VswitchIds = new[]
    ///                 {
    ///                     defaultSwitch.Id,
    ///                 },
    ///                 WithPublicIp = false,
    ///                 InstanceTypes = new[]
    ///                 {
    ///                     "ecs.g7.xlarge",
    ///                 },
    ///                 NodeCount = 3,
    ///                 SystemDisk = new AliCloud.Emrv2.Inputs.ClusterNodeGroupSystemDiskArgs
    ///                 {
    ///                     Category = "cloud_essd",
    ///                     Size = 80,
    ///                     Count = 1,
    ///                 },
    ///                 DataDisks = new[]
    ///                 {
    ///                     new AliCloud.Emrv2.Inputs.ClusterNodeGroupDataDiskArgs
    ///                     {
    ///                         Category = "cloud_essd",
    ///                         Size = 80,
    ///                         Count = 3,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupId = defaultResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0]),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Aliclioud E-MapReduce cluster can be imported using the id e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:emrv2/cluster:Cluster default &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:emrv2/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The application configurations of EMR cluster.
        /// </summary>
        [Output("applicationConfigs")]
        public Output<ImmutableArray<Outputs.ClusterApplicationConfig>> ApplicationConfigs { get; private set; } = null!;

        /// <summary>
        /// The applications of EMR cluster to be installed, e.g. HADOOP-COMMON, HDFS, YARN, HIVE, SPARK2, SPARK3, ZOOKEEPER etc. You can find all valid applications in emr web console.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<string>> Applications { get; private set; } = null!;

        /// <summary>
        /// The bootstrap scripts to be effected when creating emr-cluster or resize emr-cluster.
        /// </summary>
        [Output("bootstrapScripts")]
        public Output<ImmutableArray<Outputs.ClusterBootstrapScript>> BootstrapScripts { get; private set; } = null!;

        /// <summary>
        /// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// EMR Cluster Type, e.g. DATALAKE, OLAP, DATAFLOW, DATASERVING, CUSTOM etc. You can find all valid EMR cluster type in emr web console.
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// The deploy mode of EMR cluster. Supported value: NORMAL or HA.
        /// </summary>
        [Output("deployMode")]
        public Output<string> DeployMode { get; private set; } = null!;

        /// <summary>
        /// The node attributes of ecs instances which the emr-cluster belongs.
        /// </summary>
        [Output("nodeAttributes")]
        public Output<ImmutableArray<Outputs.ClusterNodeAttribute>> NodeAttributes { get; private set; } = null!;

        /// <summary>
        /// Groups of node, You can specify MASTER as a group, CORE as a group (just like the above example).
        /// </summary>
        [Output("nodeGroups")]
        public Output<ImmutableArray<Outputs.ClusterNodeGroup>> NodeGroups { get; private set; } = null!;

        /// <summary>
        /// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
        /// </summary>
        [Output("paymentType")]
        public Output<string> PaymentType { get; private set; } = null!;

        /// <summary>
        /// EMR Version, e.g. EMR-5.10.0. You can find the all valid EMR Version in emr web console.
        /// </summary>
        [Output("releaseVersion")]
        public Output<string> ReleaseVersion { get; private set; } = null!;

        /// <summary>
        /// The Id of resource group which the emr-cluster belongs.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The security mode of EMR cluster. Supported value: NORMAL or KERBEROS.
        /// </summary>
        [Output("securityMode")]
        public Output<string> SecurityMode { get; private set; } = null!;

        /// <summary>
        /// The detail configuration of subscription payment type.
        /// </summary>
        [Output("subscriptionConfig")]
        public Output<Outputs.ClusterSubscriptionConfig?> SubscriptionConfig { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("alicloud:emrv2/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:emrv2/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigs")]
        private InputList<Inputs.ClusterApplicationConfigArgs>? _applicationConfigs;

        /// <summary>
        /// The application configurations of EMR cluster.
        /// </summary>
        public InputList<Inputs.ClusterApplicationConfigArgs> ApplicationConfigs
        {
            get => _applicationConfigs ?? (_applicationConfigs = new InputList<Inputs.ClusterApplicationConfigArgs>());
            set => _applicationConfigs = value;
        }

        [Input("applications", required: true)]
        private InputList<string>? _applications;

        /// <summary>
        /// The applications of EMR cluster to be installed, e.g. HADOOP-COMMON, HDFS, YARN, HIVE, SPARK2, SPARK3, ZOOKEEPER etc. You can find all valid applications in emr web console.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        [Input("bootstrapScripts")]
        private InputList<Inputs.ClusterBootstrapScriptArgs>? _bootstrapScripts;

        /// <summary>
        /// The bootstrap scripts to be effected when creating emr-cluster or resize emr-cluster.
        /// </summary>
        public InputList<Inputs.ClusterBootstrapScriptArgs> BootstrapScripts
        {
            get => _bootstrapScripts ?? (_bootstrapScripts = new InputList<Inputs.ClusterBootstrapScriptArgs>());
            set => _bootstrapScripts = value;
        }

        /// <summary>
        /// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// EMR Cluster Type, e.g. DATALAKE, OLAP, DATAFLOW, DATASERVING, CUSTOM etc. You can find all valid EMR cluster type in emr web console.
        /// </summary>
        [Input("clusterType", required: true)]
        public Input<string> ClusterType { get; set; } = null!;

        /// <summary>
        /// The deploy mode of EMR cluster. Supported value: NORMAL or HA.
        /// </summary>
        [Input("deployMode")]
        public Input<string>? DeployMode { get; set; }

        [Input("nodeAttributes", required: true)]
        private InputList<Inputs.ClusterNodeAttributeArgs>? _nodeAttributes;

        /// <summary>
        /// The node attributes of ecs instances which the emr-cluster belongs.
        /// </summary>
        public InputList<Inputs.ClusterNodeAttributeArgs> NodeAttributes
        {
            get => _nodeAttributes ?? (_nodeAttributes = new InputList<Inputs.ClusterNodeAttributeArgs>());
            set => _nodeAttributes = value;
        }

        [Input("nodeGroups", required: true)]
        private InputList<Inputs.ClusterNodeGroupArgs>? _nodeGroups;

        /// <summary>
        /// Groups of node, You can specify MASTER as a group, CORE as a group (just like the above example).
        /// </summary>
        public InputList<Inputs.ClusterNodeGroupArgs> NodeGroups
        {
            get => _nodeGroups ?? (_nodeGroups = new InputList<Inputs.ClusterNodeGroupArgs>());
            set => _nodeGroups = value;
        }

        /// <summary>
        /// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// EMR Version, e.g. EMR-5.10.0. You can find the all valid EMR Version in emr web console.
        /// </summary>
        [Input("releaseVersion", required: true)]
        public Input<string> ReleaseVersion { get; set; } = null!;

        /// <summary>
        /// The Id of resource group which the emr-cluster belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The security mode of EMR cluster. Supported value: NORMAL or KERBEROS.
        /// </summary>
        [Input("securityMode")]
        public Input<string>? SecurityMode { get; set; }

        /// <summary>
        /// The detail configuration of subscription payment type.
        /// </summary>
        [Input("subscriptionConfig")]
        public Input<Inputs.ClusterSubscriptionConfigArgs>? SubscriptionConfig { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigs")]
        private InputList<Inputs.ClusterApplicationConfigGetArgs>? _applicationConfigs;

        /// <summary>
        /// The application configurations of EMR cluster.
        /// </summary>
        public InputList<Inputs.ClusterApplicationConfigGetArgs> ApplicationConfigs
        {
            get => _applicationConfigs ?? (_applicationConfigs = new InputList<Inputs.ClusterApplicationConfigGetArgs>());
            set => _applicationConfigs = value;
        }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// The applications of EMR cluster to be installed, e.g. HADOOP-COMMON, HDFS, YARN, HIVE, SPARK2, SPARK3, ZOOKEEPER etc. You can find all valid applications in emr web console.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        [Input("bootstrapScripts")]
        private InputList<Inputs.ClusterBootstrapScriptGetArgs>? _bootstrapScripts;

        /// <summary>
        /// The bootstrap scripts to be effected when creating emr-cluster or resize emr-cluster.
        /// </summary>
        public InputList<Inputs.ClusterBootstrapScriptGetArgs> BootstrapScripts
        {
            get => _bootstrapScripts ?? (_bootstrapScripts = new InputList<Inputs.ClusterBootstrapScriptGetArgs>());
            set => _bootstrapScripts = value;
        }

        /// <summary>
        /// The name of emr cluster. The name length must be less than 64. Supported characters: chinese character, english character, number, "-", "_".
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// EMR Cluster Type, e.g. DATALAKE, OLAP, DATAFLOW, DATASERVING, CUSTOM etc. You can find all valid EMR cluster type in emr web console.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// The deploy mode of EMR cluster. Supported value: NORMAL or HA.
        /// </summary>
        [Input("deployMode")]
        public Input<string>? DeployMode { get; set; }

        [Input("nodeAttributes")]
        private InputList<Inputs.ClusterNodeAttributeGetArgs>? _nodeAttributes;

        /// <summary>
        /// The node attributes of ecs instances which the emr-cluster belongs.
        /// </summary>
        public InputList<Inputs.ClusterNodeAttributeGetArgs> NodeAttributes
        {
            get => _nodeAttributes ?? (_nodeAttributes = new InputList<Inputs.ClusterNodeAttributeGetArgs>());
            set => _nodeAttributes = value;
        }

        [Input("nodeGroups")]
        private InputList<Inputs.ClusterNodeGroupGetArgs>? _nodeGroups;

        /// <summary>
        /// Groups of node, You can specify MASTER as a group, CORE as a group (just like the above example).
        /// </summary>
        public InputList<Inputs.ClusterNodeGroupGetArgs> NodeGroups
        {
            get => _nodeGroups ?? (_nodeGroups = new InputList<Inputs.ClusterNodeGroupGetArgs>());
            set => _nodeGroups = value;
        }

        /// <summary>
        /// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
        /// </summary>
        [Input("paymentType")]
        public Input<string>? PaymentType { get; set; }

        /// <summary>
        /// EMR Version, e.g. EMR-5.10.0. You can find the all valid EMR Version in emr web console.
        /// </summary>
        [Input("releaseVersion")]
        public Input<string>? ReleaseVersion { get; set; }

        /// <summary>
        /// The Id of resource group which the emr-cluster belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The security mode of EMR cluster. Supported value: NORMAL or KERBEROS.
        /// </summary>
        [Input("securityMode")]
        public Input<string>? SecurityMode { get; set; }

        /// <summary>
        /// The detail configuration of subscription payment type.
        /// </summary>
        [Input("subscriptionConfig")]
        public Input<Inputs.ClusterSubscriptionConfigGetArgs>? SubscriptionConfig { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
