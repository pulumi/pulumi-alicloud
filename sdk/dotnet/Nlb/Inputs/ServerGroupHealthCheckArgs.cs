// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nlb.Inputs
{

    public sealed class ServerGroupHealthCheckArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
        /// </summary>
        [Input("healthCheckConnectPort")]
        public Input<int>? HealthCheckConnectPort { get; set; }

        /// <summary>
        /// Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
        /// </summary>
        [Input("healthCheckConnectTimeout")]
        public Input<int>? HealthCheckConnectTimeout { get; set; }

        /// <summary>
        /// The domain name used for health check. Valid values:
        /// - **$SERVER_IP**: uses the intranet IP of the backend server.
        /// - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
        /// &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
        /// </summary>
        [Input("healthCheckDomain")]
        public Input<string>? HealthCheckDomain { get; set; }

        /// <summary>
        /// Whether to enable health check. Valid values:
        /// - **true**: on.
        /// - **false**: closed.
        /// </summary>
        [Input("healthCheckEnabled")]
        public Input<bool>? HealthCheckEnabled { get; set; }

        [Input("healthCheckHttpCodes")]
        private InputList<string>? _healthCheckHttpCodes;

        /// <summary>
        /// Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
        /// &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
        /// </summary>
        public InputList<string> HealthCheckHttpCodes
        {
            get => _healthCheckHttpCodes ?? (_healthCheckHttpCodes = new InputList<string>());
            set => _healthCheckHttpCodes = value;
        }

        /// <summary>
        /// Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
        /// </summary>
        [Input("healthCheckInterval")]
        public Input<int>? HealthCheckInterval { get; set; }

        /// <summary>
        /// Health check protocol. Valid values: **TCP** or **HTTP**.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// Health check path.
        /// &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
        /// </summary>
        [Input("healthCheckUrl")]
        public Input<string>? HealthCheckUrl { get; set; }

        /// <summary>
        /// After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
        /// </summary>
        [Input("healthyThreshold")]
        public Input<int>? HealthyThreshold { get; set; }

        /// <summary>
        /// The health check method. Valid values: **GET** or **HEAD**.
        /// &gt; **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
        /// </summary>
        [Input("httpCheckMethod")]
        public Input<string>? HttpCheckMethod { get; set; }

        /// <summary>
        /// After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
        /// </summary>
        [Input("unhealthyThreshold")]
        public Input<int>? UnhealthyThreshold { get; set; }

        public ServerGroupHealthCheckArgs()
        {
        }
        public static new ServerGroupHealthCheckArgs Empty => new ServerGroupHealthCheckArgs();
    }
}
