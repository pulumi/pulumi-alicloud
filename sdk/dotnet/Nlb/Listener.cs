// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nlb
{
    /// <summary>
    /// Provides a NLB Listener resource.
    /// 
    /// For information about NLB Listener and how to use it, see [What is Listener](https://www.alibabacloud.com/help/en/server-load-balancer/latest/api-nlb-2022-04-30-createlistener).
    /// 
    /// &gt; **NOTE:** Available since v1.191.0.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var name = config.Get("name") ?? "tf-example";
    ///     var @default = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var defaultGetZones = AliCloud.Nlb.GetZones.Invoke();
    /// 
    ///     var defaultNetwork = new AliCloud.Vpc.Network("default", new()
    ///     {
    ///         VpcName = name,
    ///         CidrBlock = "10.4.0.0/16",
    ///     });
    /// 
    ///     var defaultSwitch = new AliCloud.Vpc.Switch("default", new()
    ///     {
    ///         VswitchName = name,
    ///         CidrBlock = "10.4.0.0/24",
    ///         VpcId = defaultNetwork.Id,
    ///         ZoneId = defaultGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     var default1 = new AliCloud.Vpc.Switch("default1", new()
    ///     {
    ///         VswitchName = name,
    ///         CidrBlock = "10.4.1.0/24",
    ///         VpcId = defaultNetwork.Id,
    ///         ZoneId = defaultGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
    ///     });
    /// 
    ///     var defaultSecurityGroup = new AliCloud.Ecs.SecurityGroup("default", new()
    ///     {
    ///         Name = name,
    ///         VpcId = defaultNetwork.Id,
    ///     });
    /// 
    ///     var defaultLoadBalancer = new AliCloud.Nlb.LoadBalancer("default", new()
    ///     {
    ///         LoadBalancerName = name,
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0])),
    ///         LoadBalancerType = "Network",
    ///         AddressType = "Internet",
    ///         AddressIpVersion = "Ipv4",
    ///         VpcId = defaultNetwork.Id,
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///             { "For", "example" },
    ///         },
    ///         ZoneMappings = new[]
    ///         {
    ///             new AliCloud.Nlb.Inputs.LoadBalancerZoneMappingArgs
    ///             {
    ///                 VswitchId = defaultSwitch.Id,
    ///                 ZoneId = defaultGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///             },
    ///             new AliCloud.Nlb.Inputs.LoadBalancerZoneMappingArgs
    ///             {
    ///                 VswitchId = default1.Id,
    ///                 ZoneId = defaultGetZones.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultServerGroup = new AliCloud.Nlb.ServerGroup("default", new()
    ///     {
    ///         ResourceGroupId = @default.Apply(@default =&gt; @default.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0])),
    ///         ServerGroupName = name,
    ///         ServerGroupType = "Instance",
    ///         VpcId = defaultNetwork.Id,
    ///         Scheduler = "Wrr",
    ///         Protocol = "TCP",
    ///         ConnectionDrainEnabled = true,
    ///         ConnectionDrainTimeout = 60,
    ///         AddressIpVersion = "Ipv4",
    ///         HealthCheck = new AliCloud.Nlb.Inputs.ServerGroupHealthCheckArgs
    ///         {
    ///             HealthCheckEnabled = true,
    ///             HealthCheckType = "TCP",
    ///             HealthCheckConnectPort = 0,
    ///             HealthyThreshold = 2,
    ///             UnhealthyThreshold = 2,
    ///             HealthCheckConnectTimeout = 5,
    ///             HealthCheckInterval = 10,
    ///             HttpCheckMethod = "GET",
    ///             HealthCheckHttpCodes = new[]
    ///             {
    ///                 "http_2xx",
    ///                 "http_3xx",
    ///                 "http_4xx",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///             { "For", "example" },
    ///         },
    ///     });
    /// 
    ///     var defaultListener = new AliCloud.Nlb.Listener("default", new()
    ///     {
    ///         ListenerProtocol = "TCP",
    ///         ListenerPort = 80,
    ///         ListenerDescription = name,
    ///         LoadBalancerId = defaultLoadBalancer.Id,
    ///         ServerGroupId = defaultServerGroup.Id,
    ///         IdleTimeout = 900,
    ///         ProxyProtocolEnabled = true,
    ///         Cps = 10000,
    ///         Mss = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NLB Listener can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import alicloud:nlb/listener:Listener example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nlb/listener:Listener")]
    public partial class Listener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN). Valid values:
        /// </summary>
        [Output("alpnEnabled")]
        public Output<bool> AlpnEnabled { get; private set; } = null!;

        /// <summary>
        /// The ALPN policy. Valid values:
        /// - `HTTP1Only`: uses only HTTP 1.x. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// - `HTTP2Only`: uses only HTTP 2.0.
        /// - `HTTP2Optional`: preferentially uses HTTP 1.x over HTTP 2.0. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0, and the priority of HTTP 1.0 is higher than the priority of HTTP 2.0.
        /// - `HTTP2Preferred`: preferentially uses HTTP 2.0 over HTTP 1.x. The priority of HTTP 2.0 is higher than the priority of HTTP 1.1, and the priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// 
        /// &gt; **NOTE:**  This parameter is required if AlpnEnabled is set to true.
        /// 
        /// &gt; **NOTE:**  Effective only for TCPSSL listener.
        /// </summary>
        [Output("alpnPolicy")]
        public Output<string?> AlpnPolicy { get; private set; } = null!;

        /// <summary>
        /// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  Only one CA certificate is supported.
        /// </summary>
        [Output("caCertificateIds")]
        public Output<ImmutableArray<string>> CaCertificateIds { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable mutual authentication. Valid values:
        /// </summary>
        [Output("caEnabled")]
        public Output<bool> CaEnabled { get; private set; } = null!;

        /// <summary>
        /// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for TCPSSL listeners.
        /// </summary>
        [Output("certificateIds")]
        public Output<ImmutableArray<string>> CertificateIds { get; private set; } = null!;

        /// <summary>
        /// The maximum number of connections that can be created per second on the NLB instance. Valid values: `0` to `1000000`. `0` specifies that the number of connections is unlimited.
        /// </summary>
        [Output("cps")]
        public Output<int?> Cps { get; private set; } = null!;

        /// <summary>
        /// The last port in the listener port range. Valid values: `0` to `65535`. The number of the last port must be greater than the number of the first port.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Output("endPort")]
        public Output<int?> EndPort { get; private set; } = null!;

        /// <summary>
        /// The timeout period of idle connections. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
        /// </summary>
        [Output("idleTimeout")]
        public Output<int> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// Enter a name for the listener.
        /// 
        /// The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
        /// </summary>
        [Output("listenerDescription")]
        public Output<string?> ListenerDescription { get; private set; } = null!;

        /// <summary>
        /// The listener port. Valid values: `0` to `65535`.
        /// 
        /// If you set the value to `0`, the listener listens by port range. If you set the value to `0`, you must specify `StartPort` and `EndPort`.
        /// </summary>
        [Output("listenerPort")]
        public Output<int> ListenerPort { get; private set; } = null!;

        /// <summary>
        /// The listening protocol. Valid values: `TCP`, `UDP`, and `TCPSSL`.
        /// </summary>
        [Output("listenerProtocol")]
        public Output<string> ListenerProtocol { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Load Balancer (NLB) instance.
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// The maximum size of a TCP segment. Unit: bytes. Valid values: `0` to `1500`. `0` specifies that the maximum segment size remains unchanged.
        /// 
        /// &gt; **NOTE:**  This parameter is supported only by TCP listeners and listeners that use SSL over TCP.
        /// </summary>
        [Output("mss")]
        public Output<int?> Mss { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Valid values:
        /// </summary>
        [Output("proxyProtocolEnabled")]
        public Output<bool> ProxyProtocolEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable fine-grained monitoring. Valid values:
        /// </summary>
        [Output("secSensorEnabled")]
        public Output<bool> SecSensorEnabled { get; private set; } = null!;

        /// <summary>
        /// The security policy ID. System security policies and custom security policies are supported.
        /// 
        /// Valid values: `tls_cipher_policy\_1\_0` (default), `tls_cipher_policy\_1\_1`, `tls_cipher_policy\_1\_2`, `tls_cipher_policy\_1\_2\_strict`, and `tls_cipher_policy\_1\_2\_strict_with\_1\_3`.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for listeners that use SSL over TCP.
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the server group.
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        /// <summary>
        /// The first port in the listener port range. Valid values: `0` to `65535`.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Output("startPort")]
        public Output<int?> StartPort { get; private set; } = null!;

        /// <summary>
        /// The status of the resource. Valid values: `Running`, `Stopped`. When you want to enable this instance, you can set the property value to `Running`;
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nlb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nlb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN). Valid values:
        /// </summary>
        [Input("alpnEnabled")]
        public Input<bool>? AlpnEnabled { get; set; }

        /// <summary>
        /// The ALPN policy. Valid values:
        /// - `HTTP1Only`: uses only HTTP 1.x. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// - `HTTP2Only`: uses only HTTP 2.0.
        /// - `HTTP2Optional`: preferentially uses HTTP 1.x over HTTP 2.0. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0, and the priority of HTTP 1.0 is higher than the priority of HTTP 2.0.
        /// - `HTTP2Preferred`: preferentially uses HTTP 2.0 over HTTP 1.x. The priority of HTTP 2.0 is higher than the priority of HTTP 1.1, and the priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// 
        /// &gt; **NOTE:**  This parameter is required if AlpnEnabled is set to true.
        /// 
        /// &gt; **NOTE:**  Effective only for TCPSSL listener.
        /// </summary>
        [Input("alpnPolicy")]
        public Input<string>? AlpnPolicy { get; set; }

        [Input("caCertificateIds")]
        private InputList<string>? _caCertificateIds;

        /// <summary>
        /// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  Only one CA certificate is supported.
        /// </summary>
        public InputList<string> CaCertificateIds
        {
            get => _caCertificateIds ?? (_caCertificateIds = new InputList<string>());
            set => _caCertificateIds = value;
        }

        /// <summary>
        /// Specifies whether to enable mutual authentication. Valid values:
        /// </summary>
        [Input("caEnabled")]
        public Input<bool>? CaEnabled { get; set; }

        [Input("certificateIds")]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for TCPSSL listeners.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        /// <summary>
        /// The maximum number of connections that can be created per second on the NLB instance. Valid values: `0` to `1000000`. `0` specifies that the number of connections is unlimited.
        /// </summary>
        [Input("cps")]
        public Input<int>? Cps { get; set; }

        /// <summary>
        /// The last port in the listener port range. Valid values: `0` to `65535`. The number of the last port must be greater than the number of the first port.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        /// <summary>
        /// The timeout period of idle connections. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// Enter a name for the listener.
        /// 
        /// The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
        /// </summary>
        [Input("listenerDescription")]
        public Input<string>? ListenerDescription { get; set; }

        /// <summary>
        /// The listener port. Valid values: `0` to `65535`.
        /// 
        /// If you set the value to `0`, the listener listens by port range. If you set the value to `0`, you must specify `StartPort` and `EndPort`.
        /// </summary>
        [Input("listenerPort", required: true)]
        public Input<int> ListenerPort { get; set; } = null!;

        /// <summary>
        /// The listening protocol. Valid values: `TCP`, `UDP`, and `TCPSSL`.
        /// </summary>
        [Input("listenerProtocol", required: true)]
        public Input<string> ListenerProtocol { get; set; } = null!;

        /// <summary>
        /// The ID of the Network Load Balancer (NLB) instance.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// The maximum size of a TCP segment. Unit: bytes. Valid values: `0` to `1500`. `0` specifies that the maximum segment size remains unchanged.
        /// 
        /// &gt; **NOTE:**  This parameter is supported only by TCP listeners and listeners that use SSL over TCP.
        /// </summary>
        [Input("mss")]
        public Input<int>? Mss { get; set; }

        /// <summary>
        /// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Valid values:
        /// </summary>
        [Input("proxyProtocolEnabled")]
        public Input<bool>? ProxyProtocolEnabled { get; set; }

        /// <summary>
        /// Specifies whether to enable fine-grained monitoring. Valid values:
        /// </summary>
        [Input("secSensorEnabled")]
        public Input<bool>? SecSensorEnabled { get; set; }

        /// <summary>
        /// The security policy ID. System security policies and custom security policies are supported.
        /// 
        /// Valid values: `tls_cipher_policy\_1\_0` (default), `tls_cipher_policy\_1\_1`, `tls_cipher_policy\_1\_2`, `tls_cipher_policy\_1\_2\_strict`, and `tls_cipher_policy\_1\_2\_strict_with\_1\_3`.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for listeners that use SSL over TCP.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// The ID of the server group.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        /// <summary>
        /// The first port in the listener port range. Valid values: `0` to `65535`.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// The status of the resource. Valid values: `Running`, `Stopped`. When you want to enable this instance, you can set the property value to `Running`;
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ListenerArgs()
        {
        }
        public static new ListenerArgs Empty => new ListenerArgs();
    }

    public sealed class ListenerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN). Valid values:
        /// </summary>
        [Input("alpnEnabled")]
        public Input<bool>? AlpnEnabled { get; set; }

        /// <summary>
        /// The ALPN policy. Valid values:
        /// - `HTTP1Only`: uses only HTTP 1.x. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// - `HTTP2Only`: uses only HTTP 2.0.
        /// - `HTTP2Optional`: preferentially uses HTTP 1.x over HTTP 2.0. The priority of HTTP 1.1 is higher than the priority of HTTP 1.0, and the priority of HTTP 1.0 is higher than the priority of HTTP 2.0.
        /// - `HTTP2Preferred`: preferentially uses HTTP 2.0 over HTTP 1.x. The priority of HTTP 2.0 is higher than the priority of HTTP 1.1, and the priority of HTTP 1.1 is higher than the priority of HTTP 1.0.
        /// 
        /// &gt; **NOTE:**  This parameter is required if AlpnEnabled is set to true.
        /// 
        /// &gt; **NOTE:**  Effective only for TCPSSL listener.
        /// </summary>
        [Input("alpnPolicy")]
        public Input<string>? AlpnPolicy { get; set; }

        [Input("caCertificateIds")]
        private InputList<string>? _caCertificateIds;

        /// <summary>
        /// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  Only one CA certificate is supported.
        /// </summary>
        public InputList<string> CaCertificateIds
        {
            get => _caCertificateIds ?? (_caCertificateIds = new InputList<string>());
            set => _caCertificateIds = value;
        }

        /// <summary>
        /// Specifies whether to enable mutual authentication. Valid values:
        /// </summary>
        [Input("caEnabled")]
        public Input<bool>? CaEnabled { get; set; }

        [Input("certificateIds")]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. 
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for TCPSSL listeners.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        /// <summary>
        /// The maximum number of connections that can be created per second on the NLB instance. Valid values: `0` to `1000000`. `0` specifies that the number of connections is unlimited.
        /// </summary>
        [Input("cps")]
        public Input<int>? Cps { get; set; }

        /// <summary>
        /// The last port in the listener port range. Valid values: `0` to `65535`. The number of the last port must be greater than the number of the first port.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        /// <summary>
        /// The timeout period of idle connections. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// Enter a name for the listener.
        /// 
        /// The description must be 2 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\_), and hyphens (-).
        /// </summary>
        [Input("listenerDescription")]
        public Input<string>? ListenerDescription { get; set; }

        /// <summary>
        /// The listener port. Valid values: `0` to `65535`.
        /// 
        /// If you set the value to `0`, the listener listens by port range. If you set the value to `0`, you must specify `StartPort` and `EndPort`.
        /// </summary>
        [Input("listenerPort")]
        public Input<int>? ListenerPort { get; set; }

        /// <summary>
        /// The listening protocol. Valid values: `TCP`, `UDP`, and `TCPSSL`.
        /// </summary>
        [Input("listenerProtocol")]
        public Input<string>? ListenerProtocol { get; set; }

        /// <summary>
        /// The ID of the Network Load Balancer (NLB) instance.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// The maximum size of a TCP segment. Unit: bytes. Valid values: `0` to `1500`. `0` specifies that the maximum segment size remains unchanged.
        /// 
        /// &gt; **NOTE:**  This parameter is supported only by TCP listeners and listeners that use SSL over TCP.
        /// </summary>
        [Input("mss")]
        public Input<int>? Mss { get; set; }

        /// <summary>
        /// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers. Valid values:
        /// </summary>
        [Input("proxyProtocolEnabled")]
        public Input<bool>? ProxyProtocolEnabled { get; set; }

        /// <summary>
        /// Specifies whether to enable fine-grained monitoring. Valid values:
        /// </summary>
        [Input("secSensorEnabled")]
        public Input<bool>? SecSensorEnabled { get; set; }

        /// <summary>
        /// The security policy ID. System security policies and custom security policies are supported.
        /// 
        /// Valid values: `tls_cipher_policy\_1\_0` (default), `tls_cipher_policy\_1\_1`, `tls_cipher_policy\_1\_2`, `tls_cipher_policy\_1\_2\_strict`, and `tls_cipher_policy\_1\_2\_strict_with\_1\_3`.
        /// 
        /// &gt; **NOTE:**  This parameter takes effect only for listeners that use SSL over TCP.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// The ID of the server group.
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        /// <summary>
        /// The first port in the listener port range. Valid values: `0` to `65535`.
        /// 
        /// &gt; **NOTE:**  This parameter is required when `ListenerPort` is set to `0`.
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// The status of the resource. Valid values: `Running`, `Stopped`. When you want to enable this instance, you can set the property value to `Running`;
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tag of the resource
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ListenerState()
        {
        }
        public static new ListenerState Empty => new ListenerState();
    }
}
