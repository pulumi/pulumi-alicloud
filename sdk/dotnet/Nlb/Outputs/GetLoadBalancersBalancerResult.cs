// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nlb.Outputs
{

    [OutputType]
    public sealed class GetLoadBalancersBalancerResult
    {
        /// <summary>
        /// The IP version.
        /// </summary>
        public readonly string AddressIpVersion;
        /// <summary>
        /// The type of IPv4 address used by the NLB instance.
        /// </summary>
        public readonly string AddressType;
        /// <summary>
        /// The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.
        /// </summary>
        public readonly string BandwidthPackageId;
        /// <summary>
        /// The time when the resource was created. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Indicates whether cross-zone load balancing is enabled for the NLB instance.
        /// </summary>
        public readonly bool CrossZoneEnabled;
        /// <summary>
        /// The domain name of the NLB instance.
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// The ID of the NLB instance.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of IPv6 address used by the NLB instance.
        /// </summary>
        public readonly string Ipv6AddressType;
        /// <summary>
        /// The business status of the NLB instance.
        /// </summary>
        public readonly string LoadBalancerBusinessStatus;
        /// <summary>
        /// The ID of the NLB instance.
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// The name of the NLB instance.
        /// </summary>
        public readonly string LoadBalancerName;
        /// <summary>
        /// The type of the SLB instance. Only Network is supported, which indicates NLB.
        /// </summary>
        public readonly string LoadBalancerType;
        /// <summary>
        /// The configuration of the operation lock. This parameter takes effect if LoadBalancerBussinessStatus is Abnormal.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancersBalancerOperationLockResult> OperationLocks;
        /// <summary>
        /// The ID of the resource group.
        /// </summary>
        public readonly string ResourceGroupId;
        /// <summary>
        /// The security group to which the NLB instance belongs.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The status of the NLB instance.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The tag of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The ID of the VPC where the NLB instance is deployed.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// The zones and the vSwitches in the zones. An NLB instance can be deployed across 2 to 10 zones.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancersBalancerZoneMappingResult> ZoneMappings;

        [OutputConstructor]
        private GetLoadBalancersBalancerResult(
            string addressIpVersion,

            string addressType,

            string bandwidthPackageId,

            string createTime,

            bool crossZoneEnabled,

            string dnsName,

            string id,

            string ipv6AddressType,

            string loadBalancerBusinessStatus,

            string loadBalancerId,

            string loadBalancerName,

            string loadBalancerType,

            ImmutableArray<Outputs.GetLoadBalancersBalancerOperationLockResult> operationLocks,

            string resourceGroupId,

            ImmutableArray<string> securityGroupIds,

            string status,

            ImmutableDictionary<string, string>? tags,

            string vpcId,

            ImmutableArray<Outputs.GetLoadBalancersBalancerZoneMappingResult> zoneMappings)
        {
            AddressIpVersion = addressIpVersion;
            AddressType = addressType;
            BandwidthPackageId = bandwidthPackageId;
            CreateTime = createTime;
            CrossZoneEnabled = crossZoneEnabled;
            DnsName = dnsName;
            Id = id;
            Ipv6AddressType = ipv6AddressType;
            LoadBalancerBusinessStatus = loadBalancerBusinessStatus;
            LoadBalancerId = loadBalancerId;
            LoadBalancerName = loadBalancerName;
            LoadBalancerType = loadBalancerType;
            OperationLocks = operationLocks;
            ResourceGroupId = resourceGroupId;
            SecurityGroupIds = securityGroupIds;
            Status = status;
            Tags = tags;
            VpcId = vpcId;
            ZoneMappings = zoneMappings;
        }
    }
}
