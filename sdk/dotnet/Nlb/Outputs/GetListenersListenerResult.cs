// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nlb.Outputs
{

    [OutputType]
    public sealed class GetListenersListenerResult
    {
        /// <summary>
        /// ndicates whether Application-Layer Protocol Negotiation (ALPN) is enabled.
        /// </summary>
        public readonly bool AlpnEnabled;
        /// <summary>
        /// The ALPN policy.
        /// </summary>
        public readonly string AlpnPolicy;
        /// <summary>
        /// CA certificate list information. Currently, only one CA certificate can be added. **NOTE:** This parameter only takes effect for `TCPSSL` listeners.
        /// </summary>
        public readonly ImmutableArray<string> CaCertificateIds;
        /// <summary>
        /// Whether to start two-way authentication.
        /// </summary>
        public readonly bool CaEnabled;
        /// <summary>
        /// Server certificate list information. Currently, only one server certificate can be added. This parameter only takes effect for `TCPSSL` listeners.
        /// </summary>
        public readonly ImmutableArray<string> CertificateIds;
        /// <summary>
        /// The new connection speed limit for a network-based load balancing instance per second. Valid values: `0` ~ `1000000`. `0` indicates unlimited speed.
        /// </summary>
        public readonly int Cps;
        /// <summary>
        /// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
        /// </summary>
        public readonly string EndPort;
        /// <summary>
        /// The ID of the Nlb Listener.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Connection idle timeout time. Unit: seconds. Valid values: `1` ~ `900`.
        /// </summary>
        public readonly int IdleTimeout;
        /// <summary>
        /// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
        /// </summary>
        public readonly string ListenerDescription;
        /// <summary>
        /// The ID of the listener.
        /// </summary>
        public readonly string ListenerId;
        /// <summary>
        /// Listening port. Valid values: `0` ~ `65535`. `0`: indicates that full port listening is used. When set to 0, you must configure `StartPort` and `EndPort`.
        /// </summary>
        public readonly int ListenerPort;
        /// <summary>
        /// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
        /// </summary>
        public readonly string ListenerProtocol;
        /// <summary>
        /// The ID of the network-based server load balancer instance.
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// The maximum segment size of the TCP message. Unit: Bytes. Valid values: `0` ~ `1500`. `0` indicates that the MSS value of the TCP message is not modified. only `TCP` and `TCPSSL` listeners support this field value.
        /// </summary>
        public readonly int Mss;
        /// <summary>
        /// Whether to enable the Proxy Protocol to carry the source address of the client to the backend server.
        /// </summary>
        public readonly bool ProxyProtocolEnabled;
        /// <summary>
        /// Indicates whether fine-grained monitoring is enabled.
        /// </summary>
        public readonly bool SecSensorEnabled;
        /// <summary>
        /// Security policy ID. Support system security policies and custom security policies. Valid values: `tls_cipher_policy_1_0`, `tls_cipher_policy_1_1`, `tls_cipher_policy_1_2`, `tls_cipher_policy_1_2_strict`, or `tls_cipher_policy_1_2_strict_with_1_3`. **Note:** This parameter only takes effect for `TCPSSL` listeners.
        /// </summary>
        public readonly string SecurityPolicyId;
        /// <summary>
        /// The ID of the server group.
        /// </summary>
        public readonly string ServerGroupId;
        /// <summary>
        /// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
        /// </summary>
        public readonly string StartPort;
        /// <summary>
        /// The status of the resource.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetListenersListenerResult(
            bool alpnEnabled,

            string alpnPolicy,

            ImmutableArray<string> caCertificateIds,

            bool caEnabled,

            ImmutableArray<string> certificateIds,

            int cps,

            string endPort,

            string id,

            int idleTimeout,

            string listenerDescription,

            string listenerId,

            int listenerPort,

            string listenerProtocol,

            string loadBalancerId,

            int mss,

            bool proxyProtocolEnabled,

            bool secSensorEnabled,

            string securityPolicyId,

            string serverGroupId,

            string startPort,

            string status)
        {
            AlpnEnabled = alpnEnabled;
            AlpnPolicy = alpnPolicy;
            CaCertificateIds = caCertificateIds;
            CaEnabled = caEnabled;
            CertificateIds = certificateIds;
            Cps = cps;
            EndPort = endPort;
            Id = id;
            IdleTimeout = idleTimeout;
            ListenerDescription = listenerDescription;
            ListenerId = listenerId;
            ListenerPort = listenerPort;
            ListenerProtocol = listenerProtocol;
            LoadBalancerId = loadBalancerId;
            Mss = mss;
            ProxyProtocolEnabled = proxyProtocolEnabled;
            SecSensorEnabled = secSensorEnabled;
            SecurityPolicyId = securityPolicyId;
            ServerGroupId = serverGroupId;
            StartPort = startPort;
            Status = status;
        }
    }
}
