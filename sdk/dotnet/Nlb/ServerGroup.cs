// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Nlb
{
    /// <summary>
    /// Provides a NLB Server Group resource.
    /// 
    /// For information about NLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/server-load-balancer/latest/createservergroup-nlb).
    /// 
    /// &gt; **NOTE:** Available in v1.186.0+.
    /// 
    /// ## Example Usage
    /// 
    /// Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AliCloud = Pulumi.AliCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultResourceGroups = AliCloud.ResourceManager.GetResourceGroups.Invoke();
    /// 
    ///     var defaultNetworks = AliCloud.Vpc.GetNetworks.Invoke(new()
    ///     {
    ///         NameRegex = "default-NODELETING",
    ///     });
    /// 
    ///     var defaultServerGroup = new AliCloud.Nlb.ServerGroup("defaultServerGroup", new()
    ///     {
    ///         ResourceGroupId = defaultResourceGroups.Apply(getResourceGroupsResult =&gt; getResourceGroupsResult.Ids[0]),
    ///         ServerGroupName = @var.Name,
    ///         ServerGroupType = "Instance",
    ///         VpcId = defaultNetworks.Apply(getNetworksResult =&gt; getNetworksResult.Ids[0]),
    ///         Scheduler = "Wrr",
    ///         Protocol = "TCP",
    ///         HealthCheck = new AliCloud.Nlb.Inputs.ServerGroupHealthCheckArgs
    ///         {
    ///             HealthCheckEnabled = true,
    ///             HealthCheckType = "TCP",
    ///             HealthCheckConnectPort = 0,
    ///             HealthyThreshold = 2,
    ///             UnhealthyThreshold = 2,
    ///             HealthCheckConnectTimeout = 5,
    ///             HealthCheckInterval = 10,
    ///             HttpCheckMethod = "GET",
    ///             HealthCheckHttpCodes = new[]
    ///             {
    ///                 "http_2xx",
    ///                 "http_3xx",
    ///                 "http_4xx",
    ///             },
    ///         },
    ///         ConnectionDrain = true,
    ///         ConnectionDrainTimeout = 60,
    ///         Tags = 
    ///         {
    ///             { "Created", "TF" },
    ///         },
    ///         AddressIpVersion = "Ipv4",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NLB Server Group can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import alicloud:nlb/serverGroup:ServerGroup example &lt;id&gt;
    /// ```
    /// </summary>
    [AliCloudResourceType("alicloud:nlb/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The protocol version. Valid values: `Ipv4` (default), `DualStack`.
        /// </summary>
        [Output("addressIpVersion")]
        public Output<string> AddressIpVersion { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable connection draining.
        /// </summary>
        [Output("connectionDrain")]
        public Output<bool> ConnectionDrain { get; private set; } = null!;

        /// <summary>
        /// The timeout period of connection draining. Unit: seconds. Valid values: 10 to 900.
        /// </summary>
        [Output("connectionDrainTimeout")]
        public Output<int> ConnectionDrainTimeout { get; private set; } = null!;

        /// <summary>
        /// HealthCheck. See the following `Block health_check`.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ServerGroupHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// Indicates whether client address retention is enabled.
        /// </summary>
        [Output("preserveClientIpEnabled")]
        public Output<bool> PreserveClientIpEnabled { get; private set; } = null!;

        /// <summary>
        /// The backend protocol. Valid values: `TCP` (default), `UDP`, and `TCPSSL`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource group to which the security group belongs.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The routing algorithm. Valid values:
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Output("serverGroupName")]
        public Output<string> ServerGroupName { get; private set; } = null!;

        /// <summary>
        /// The type of the server group. Valid values:
        /// </summary>
        [Output("serverGroupType")]
        public Output<string> ServerGroupType { get; private set; } = null!;

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The id of the vpc.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("alicloud:nlb/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("alicloud:nlb/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol version. Valid values: `Ipv4` (default), `DualStack`.
        /// </summary>
        [Input("addressIpVersion")]
        public Input<string>? AddressIpVersion { get; set; }

        /// <summary>
        /// Specifies whether to enable connection draining.
        /// </summary>
        [Input("connectionDrain")]
        public Input<bool>? ConnectionDrain { get; set; }

        /// <summary>
        /// The timeout period of connection draining. Unit: seconds. Valid values: 10 to 900.
        /// </summary>
        [Input("connectionDrainTimeout")]
        public Input<int>? ConnectionDrainTimeout { get; set; }

        /// <summary>
        /// HealthCheck. See the following `Block health_check`.
        /// </summary>
        [Input("healthCheck", required: true)]
        public Input<Inputs.ServerGroupHealthCheckArgs> HealthCheck { get; set; } = null!;

        /// <summary>
        /// Indicates whether client address retention is enabled.
        /// </summary>
        [Input("preserveClientIpEnabled")]
        public Input<bool>? PreserveClientIpEnabled { get; set; }

        /// <summary>
        /// The backend protocol. Valid values: `TCP` (default), `UDP`, and `TCPSSL`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The ID of the resource group to which the security group belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The routing algorithm. Valid values:
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Input("serverGroupName", required: true)]
        public Input<string> ServerGroupName { get; set; } = null!;

        /// <summary>
        /// The type of the server group. Valid values:
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the vpc.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol version. Valid values: `Ipv4` (default), `DualStack`.
        /// </summary>
        [Input("addressIpVersion")]
        public Input<string>? AddressIpVersion { get; set; }

        /// <summary>
        /// Specifies whether to enable connection draining.
        /// </summary>
        [Input("connectionDrain")]
        public Input<bool>? ConnectionDrain { get; set; }

        /// <summary>
        /// The timeout period of connection draining. Unit: seconds. Valid values: 10 to 900.
        /// </summary>
        [Input("connectionDrainTimeout")]
        public Input<int>? ConnectionDrainTimeout { get; set; }

        /// <summary>
        /// HealthCheck. See the following `Block health_check`.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ServerGroupHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// Indicates whether client address retention is enabled.
        /// </summary>
        [Input("preserveClientIpEnabled")]
        public Input<bool>? PreserveClientIpEnabled { get; set; }

        /// <summary>
        /// The backend protocol. Valid values: `TCP` (default), `UDP`, and `TCPSSL`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The ID of the resource group to which the security group belongs.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The routing algorithm. Valid values:
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The name of the server group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The type of the server group. Valid values:
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        /// <summary>
        /// The status of the resource.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the vpc.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
