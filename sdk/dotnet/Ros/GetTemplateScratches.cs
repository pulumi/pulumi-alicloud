// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AliCloud.Ros
{
    public static class GetTemplateScratches
    {
        /// <summary>
        /// This data source provides the Ros Template Scratches of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.151.0+.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ids = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "example_value",
        ///         },
        ///     });
        /// 
        ///     var status = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Status = "GENERATE_COMPLETE",
        ///     });
        /// 
        ///     var templateScratchType = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         TemplateScratchType = "ResourceImport",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["rosTemplateScratchId1"] = ids.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId2"] = status.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId3"] = templateScratchType.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetTemplateScratchesResult> InvokeAsync(GetTemplateScratchesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTemplateScratchesResult>("alicloud:ros/getTemplateScratches:getTemplateScratches", args ?? new GetTemplateScratchesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Ros Template Scratches of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.151.0+.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ids = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "example_value",
        ///         },
        ///     });
        /// 
        ///     var status = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Status = "GENERATE_COMPLETE",
        ///     });
        /// 
        ///     var templateScratchType = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         TemplateScratchType = "ResourceImport",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["rosTemplateScratchId1"] = ids.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId2"] = status.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId3"] = templateScratchType.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateScratchesResult> Invoke(GetTemplateScratchesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateScratchesResult>("alicloud:ros/getTemplateScratches:getTemplateScratches", args ?? new GetTemplateScratchesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the Ros Template Scratches of the current Alibaba Cloud user.
        /// 
        /// &gt; **NOTE:** Available in v1.151.0+.
        /// 
        /// ## Example Usage
        /// 
        /// Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AliCloud = Pulumi.AliCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ids = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "example_value",
        ///         },
        ///     });
        /// 
        ///     var status = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         Status = "GENERATE_COMPLETE",
        ///     });
        /// 
        ///     var templateScratchType = AliCloud.Ros.GetTemplateScratches.Invoke(new()
        ///     {
        ///         TemplateScratchType = "ResourceImport",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["rosTemplateScratchId1"] = ids.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId2"] = status.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///         ["rosTemplateScratchId3"] = templateScratchType.Apply(getTemplateScratchesResult =&gt; getTemplateScratchesResult.Scratches[0]?.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetTemplateScratchesResult> Invoke(GetTemplateScratchesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateScratchesResult>("alicloud:ros/getTemplateScratches:getTemplateScratches", args ?? new GetTemplateScratchesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTemplateScratchesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Default to `False`. Set it to `True` can output more details about resource attributes.
        /// </summary>
        [Input("enableDetails")]
        public bool? EnableDetails { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Template Scratch IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The status of the resource. Valid Values: `GENERATE_IN_PROGRESS`, `GENERATE_COMPLETE` and `GENERATE_FAILED`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The type of the template scratch. Valid Values: `ResourceImport`, `ArchitectureReplication`.
        /// </summary>
        [Input("templateScratchType")]
        public string? TemplateScratchType { get; set; }

        public GetTemplateScratchesArgs()
        {
        }
        public static new GetTemplateScratchesArgs Empty => new GetTemplateScratchesArgs();
    }

    public sealed class GetTemplateScratchesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Default to `False`. Set it to `True` can output more details about resource attributes.
        /// </summary>
        [Input("enableDetails")]
        public Input<bool>? EnableDetails { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Template Scratch IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results (after running `pulumi preview`).
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The status of the resource. Valid Values: `GENERATE_IN_PROGRESS`, `GENERATE_COMPLETE` and `GENERATE_FAILED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the template scratch. Valid Values: `ResourceImport`, `ArchitectureReplication`.
        /// </summary>
        [Input("templateScratchType")]
        public Input<string>? TemplateScratchType { get; set; }

        public GetTemplateScratchesInvokeArgs()
        {
        }
        public static new GetTemplateScratchesInvokeArgs Empty => new GetTemplateScratchesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTemplateScratchesResult
    {
        public readonly bool? EnableDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.GetTemplateScratchesScratchResult> Scratches;
        public readonly string? Status;
        public readonly string? TemplateScratchType;

        [OutputConstructor]
        private GetTemplateScratchesResult(
            bool? enableDetails,

            string id,

            ImmutableArray<string> ids,

            string? outputFile,

            ImmutableArray<Outputs.GetTemplateScratchesScratchResult> scratches,

            string? status,

            string? templateScratchType)
        {
            EnableDetails = enableDetails;
            Id = id;
            Ids = ids;
            OutputFile = outputFile;
            Scratches = scratches;
            Status = status;
            TemplateScratchType = templateScratchType;
        }
    }
}
