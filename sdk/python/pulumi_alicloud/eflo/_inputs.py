# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterComponentArgs',
    'ClusterComponentArgsDict',
    'ClusterComponentComponentConfigArgs',
    'ClusterComponentComponentConfigArgsDict',
    'ClusterNetworksArgs',
    'ClusterNetworksArgsDict',
    'ClusterNetworksIpAllocationPolicyArgs',
    'ClusterNetworksIpAllocationPolicyArgsDict',
    'ClusterNetworksIpAllocationPolicyBondPolicyArgs',
    'ClusterNetworksIpAllocationPolicyBondPolicyArgsDict',
    'ClusterNetworksIpAllocationPolicyBondPolicyBondArgs',
    'ClusterNetworksIpAllocationPolicyBondPolicyBondArgsDict',
    'ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs',
    'ClusterNetworksIpAllocationPolicyMachineTypePolicyArgsDict',
    'ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs',
    'ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgsDict',
    'ClusterNetworksIpAllocationPolicyNodePolicyArgs',
    'ClusterNetworksIpAllocationPolicyNodePolicyArgsDict',
    'ClusterNetworksIpAllocationPolicyNodePolicyBondArgs',
    'ClusterNetworksIpAllocationPolicyNodePolicyBondArgsDict',
    'ClusterNetworksNewVpdInfoArgs',
    'ClusterNetworksNewVpdInfoArgsDict',
    'ClusterNetworksNewVpdInfoVpdSubnetArgs',
    'ClusterNetworksNewVpdInfoVpdSubnetArgsDict',
    'ClusterNetworksVpdInfoArgs',
    'ClusterNetworksVpdInfoArgsDict',
    'ClusterNodeGroupArgs',
    'ClusterNodeGroupArgsDict',
    'ClusterNodeGroupNodeArgs',
    'ClusterNodeGroupNodeArgsDict',
    'NodeGroupIpAllocationPolicyArgs',
    'NodeGroupIpAllocationPolicyArgsDict',
    'NodeGroupIpAllocationPolicyBondPolicyArgs',
    'NodeGroupIpAllocationPolicyBondPolicyArgsDict',
    'NodeGroupIpAllocationPolicyBondPolicyBondArgs',
    'NodeGroupIpAllocationPolicyBondPolicyBondArgsDict',
    'NodeGroupIpAllocationPolicyMachineTypePolicyArgs',
    'NodeGroupIpAllocationPolicyMachineTypePolicyArgsDict',
    'NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs',
    'NodeGroupIpAllocationPolicyMachineTypePolicyBondArgsDict',
    'NodeGroupIpAllocationPolicyNodePolicyArgs',
    'NodeGroupIpAllocationPolicyNodePolicyArgsDict',
    'NodeGroupIpAllocationPolicyNodePolicyBondArgs',
    'NodeGroupIpAllocationPolicyNodePolicyBondArgsDict',
    'NodeGroupNodeArgs',
    'NodeGroupNodeArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterComponentArgsDict(TypedDict):
        component_config: NotRequired[pulumi.Input['ClusterComponentComponentConfigArgsDict']]
        """
        Component Configuration See `component_config` below.
        """
        component_type: NotRequired[pulumi.Input[str]]
        """
        Component Type
        """
elif False:
    ClusterComponentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterComponentArgs:
    def __init__(__self__, *,
                 component_config: Optional[pulumi.Input['ClusterComponentComponentConfigArgs']] = None,
                 component_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterComponentComponentConfigArgs'] component_config: Component Configuration See `component_config` below.
        :param pulumi.Input[str] component_type: Component Type
        """
        if component_config is not None:
            pulumi.set(__self__, "component_config", component_config)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)

    @property
    @pulumi.getter(name="componentConfig")
    def component_config(self) -> Optional[pulumi.Input['ClusterComponentComponentConfigArgs']]:
        """
        Component Configuration See `component_config` below.
        """
        return pulumi.get(self, "component_config")

    @component_config.setter
    def component_config(self, value: Optional[pulumi.Input['ClusterComponentComponentConfigArgs']]):
        pulumi.set(self, "component_config", value)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[pulumi.Input[str]]:
        """
        Component Type
        """
        return pulumi.get(self, "component_type")

    @component_type.setter
    def component_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_type", value)


if not MYPY:
    class ClusterComponentComponentConfigArgsDict(TypedDict):
        basic_args: NotRequired[pulumi.Input[str]]
        """
        Component Basic Parameters
        """
        node_units: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
        ComponentType = "ACKEdge" is required. Other values are empty.
        """
elif False:
    ClusterComponentComponentConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterComponentComponentConfigArgs:
    def __init__(__self__, *,
                 basic_args: Optional[pulumi.Input[str]] = None,
                 node_units: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] basic_args: Component Basic Parameters
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_units: Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
               ComponentType = "ACKEdge" is required. Other values are empty.
        """
        if basic_args is not None:
            pulumi.set(__self__, "basic_args", basic_args)
        if node_units is not None:
            pulumi.set(__self__, "node_units", node_units)

    @property
    @pulumi.getter(name="basicArgs")
    def basic_args(self) -> Optional[pulumi.Input[str]]:
        """
        Component Basic Parameters
        """
        return pulumi.get(self, "basic_args")

    @basic_args.setter
    def basic_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_args", value)

    @property
    @pulumi.getter(name="nodeUnits")
    def node_units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Node pool configuration, and is used to establish the corresponding relationship between node groups and node pools. When
        ComponentType = "ACKEdge" is required. Other values are empty.
        """
        return pulumi.get(self, "node_units")

    @node_units.setter
    def node_units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_units", value)


if not MYPY:
    class ClusterNetworksArgsDict(TypedDict):
        ip_allocation_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyArgsDict']]]]
        """
        IP allocation policy See `ip_allocation_policy` below.
        """
        new_vpd_info: NotRequired[pulumi.Input['ClusterNetworksNewVpdInfoArgsDict']]
        """
        Vpd configuration information See `new_vpd_info` below.
        """
        security_group_id: NotRequired[pulumi.Input[str]]
        """
        Security group ID
        """
        tail_ip_version: NotRequired[pulumi.Input[str]]
        """
        IP version
        """
        vpc_id: NotRequired[pulumi.Input[str]]
        """
        VPC ID
        """
        vpd_info: NotRequired[pulumi.Input['ClusterNetworksVpdInfoArgsDict']]
        """
        Multiplexing VPD information See `vpd_info` below.
        """
        vswitch_id: NotRequired[pulumi.Input[str]]
        """
        Switch ID
        """
        vswitch_zone_id: NotRequired[pulumi.Input[str]]
        """
        Switch ZoneID
        """
elif False:
    ClusterNetworksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksArgs:
    def __init__(__self__, *,
                 ip_allocation_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyArgs']]]] = None,
                 new_vpd_info: Optional[pulumi.Input['ClusterNetworksNewVpdInfoArgs']] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 tail_ip_version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpd_info: Optional[pulumi.Input['ClusterNetworksVpdInfoArgs']] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 vswitch_zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyArgs']]] ip_allocation_policies: IP allocation policy See `ip_allocation_policy` below.
        :param pulumi.Input['ClusterNetworksNewVpdInfoArgs'] new_vpd_info: Vpd configuration information See `new_vpd_info` below.
        :param pulumi.Input[str] security_group_id: Security group ID
        :param pulumi.Input[str] tail_ip_version: IP version
        :param pulumi.Input[str] vpc_id: VPC ID
        :param pulumi.Input['ClusterNetworksVpdInfoArgs'] vpd_info: Multiplexing VPD information See `vpd_info` below.
        :param pulumi.Input[str] vswitch_id: Switch ID
        :param pulumi.Input[str] vswitch_zone_id: Switch ZoneID
        """
        if ip_allocation_policies is not None:
            pulumi.set(__self__, "ip_allocation_policies", ip_allocation_policies)
        if new_vpd_info is not None:
            pulumi.set(__self__, "new_vpd_info", new_vpd_info)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if tail_ip_version is not None:
            pulumi.set(__self__, "tail_ip_version", tail_ip_version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpd_info is not None:
            pulumi.set(__self__, "vpd_info", vpd_info)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)
        if vswitch_zone_id is not None:
            pulumi.set(__self__, "vswitch_zone_id", vswitch_zone_id)

    @property
    @pulumi.getter(name="ipAllocationPolicies")
    def ip_allocation_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyArgs']]]]:
        """
        IP allocation policy See `ip_allocation_policy` below.
        """
        return pulumi.get(self, "ip_allocation_policies")

    @ip_allocation_policies.setter
    def ip_allocation_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyArgs']]]]):
        pulumi.set(self, "ip_allocation_policies", value)

    @property
    @pulumi.getter(name="newVpdInfo")
    def new_vpd_info(self) -> Optional[pulumi.Input['ClusterNetworksNewVpdInfoArgs']]:
        """
        Vpd configuration information See `new_vpd_info` below.
        """
        return pulumi.get(self, "new_vpd_info")

    @new_vpd_info.setter
    def new_vpd_info(self, value: Optional[pulumi.Input['ClusterNetworksNewVpdInfoArgs']]):
        pulumi.set(self, "new_vpd_info", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="tailIpVersion")
    def tail_ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version
        """
        return pulumi.get(self, "tail_ip_version")

    @tail_ip_version.setter
    def tail_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tail_ip_version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpdInfo")
    def vpd_info(self) -> Optional[pulumi.Input['ClusterNetworksVpdInfoArgs']]:
        """
        Multiplexing VPD information See `vpd_info` below.
        """
        return pulumi.get(self, "vpd_info")

    @vpd_info.setter
    def vpd_info(self, value: Optional[pulumi.Input['ClusterNetworksVpdInfoArgs']]):
        pulumi.set(self, "vpd_info", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Switch ID
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)

    @property
    @pulumi.getter(name="vswitchZoneId")
    def vswitch_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Switch ZoneID
        """
        return pulumi.get(self, "vswitch_zone_id")

    @vswitch_zone_id.setter
    def vswitch_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_zone_id", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyArgsDict(TypedDict):
        bond_policy: NotRequired[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyArgsDict']]
        """
        Bond policy See `bond_policy` below.
        """
        machine_type_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyArgsDict']]]]
        """
        Model Assignment Policy See `machine_type_policy` below.
        """
        node_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyArgsDict']]]]
        """
        Node allocation policy See `node_policy` below.
        """
elif False:
    ClusterNetworksIpAllocationPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyArgs:
    def __init__(__self__, *,
                 bond_policy: Optional[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyArgs']] = None,
                 machine_type_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs']]]] = None,
                 node_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyArgs']]]] = None):
        """
        :param pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyArgs'] bond_policy: Bond policy See `bond_policy` below.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs']]] machine_type_policies: Model Assignment Policy See `machine_type_policy` below.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyArgs']]] node_policies: Node allocation policy See `node_policy` below.
        """
        if bond_policy is not None:
            pulumi.set(__self__, "bond_policy", bond_policy)
        if machine_type_policies is not None:
            pulumi.set(__self__, "machine_type_policies", machine_type_policies)
        if node_policies is not None:
            pulumi.set(__self__, "node_policies", node_policies)

    @property
    @pulumi.getter(name="bondPolicy")
    def bond_policy(self) -> Optional[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyArgs']]:
        """
        Bond policy See `bond_policy` below.
        """
        return pulumi.get(self, "bond_policy")

    @bond_policy.setter
    def bond_policy(self, value: Optional[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyArgs']]):
        pulumi.set(self, "bond_policy", value)

    @property
    @pulumi.getter(name="machineTypePolicies")
    def machine_type_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs']]]]:
        """
        Model Assignment Policy See `machine_type_policy` below.
        """
        return pulumi.get(self, "machine_type_policies")

    @machine_type_policies.setter
    def machine_type_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs']]]]):
        pulumi.set(self, "machine_type_policies", value)

    @property
    @pulumi.getter(name="nodePolicies")
    def node_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyArgs']]]]:
        """
        Node allocation policy See `node_policy` below.
        """
        return pulumi.get(self, "node_policies")

    @node_policies.setter
    def node_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyArgs']]]]):
        pulumi.set(self, "node_policies", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyBondPolicyArgsDict(TypedDict):
        bond_default_subnet: NotRequired[pulumi.Input[str]]
        """
        Default bond cluster subnet
        """
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
elif False:
    ClusterNetworksIpAllocationPolicyBondPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyBondPolicyArgs:
    def __init__(__self__, *,
                 bond_default_subnet: Optional[pulumi.Input[str]] = None,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyBondArgs']]]] = None):
        """
        :param pulumi.Input[str] bond_default_subnet: Default bond cluster subnet
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyBondArgs']]] bonds: Bond information See `bonds` below.
        """
        if bond_default_subnet is not None:
            pulumi.set(__self__, "bond_default_subnet", bond_default_subnet)
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)

    @property
    @pulumi.getter(name="bondDefaultSubnet")
    def bond_default_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Default bond cluster subnet
        """
        return pulumi.get(self, "bond_default_subnet")

    @bond_default_subnet.setter
    def bond_default_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_default_subnet", value)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyBondPolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyBondPolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    ClusterNetworksIpAllocationPolicyBondPolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyBondPolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyMachineTypePolicyArgsDict(TypedDict):
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
        machine_type: NotRequired[pulumi.Input[str]]
elif False:
    ClusterNetworksIpAllocationPolicyMachineTypePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs:
    def __init__(__self__, *,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs']]]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs']]] bonds: Bond information See `bonds` below.
        """
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyNodePolicyArgsDict(TypedDict):
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
        node_id: NotRequired[pulumi.Input[str]]
elif False:
    ClusterNetworksIpAllocationPolicyNodePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyNodePolicyArgs:
    def __init__(__self__, *,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyBondArgs']]]] = None,
                 node_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyBondArgs']]] bonds: Bond information See `bonds` below.
        """
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksIpAllocationPolicyNodePolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)


if not MYPY:
    class ClusterNetworksIpAllocationPolicyNodePolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    ClusterNetworksIpAllocationPolicyNodePolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksIpAllocationPolicyNodePolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class ClusterNetworksNewVpdInfoArgsDict(TypedDict):
        cen_id: NotRequired[pulumi.Input[str]]
        """
        Cloud Enterprise Network ID
        """
        cloud_link_cidr: NotRequired[pulumi.Input[str]]
        """
        Cloud chain cidr
        """
        cloud_link_id: NotRequired[pulumi.Input[str]]
        """
        Cloud chain ID
        """
        monitor_vpc_id: NotRequired[pulumi.Input[str]]
        """
        Proprietary Network
        """
        monitor_vswitch_id: NotRequired[pulumi.Input[str]]
        """
        Proprietary network switch
        """
        vpd_cidr: NotRequired[pulumi.Input[str]]
        """
        Cluster network segment
        """
        vpd_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksNewVpdInfoVpdSubnetArgsDict']]]]
        """
        List of cluster subnet ID
        """
elif False:
    ClusterNetworksNewVpdInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksNewVpdInfoArgs:
    def __init__(__self__, *,
                 cen_id: Optional[pulumi.Input[str]] = None,
                 cloud_link_cidr: Optional[pulumi.Input[str]] = None,
                 cloud_link_id: Optional[pulumi.Input[str]] = None,
                 monitor_vpc_id: Optional[pulumi.Input[str]] = None,
                 monitor_vswitch_id: Optional[pulumi.Input[str]] = None,
                 vpd_cidr: Optional[pulumi.Input[str]] = None,
                 vpd_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksNewVpdInfoVpdSubnetArgs']]]] = None):
        """
        :param pulumi.Input[str] cen_id: Cloud Enterprise Network ID
        :param pulumi.Input[str] cloud_link_cidr: Cloud chain cidr
        :param pulumi.Input[str] cloud_link_id: Cloud chain ID
        :param pulumi.Input[str] monitor_vpc_id: Proprietary Network
        :param pulumi.Input[str] monitor_vswitch_id: Proprietary network switch
        :param pulumi.Input[str] vpd_cidr: Cluster network segment
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNetworksNewVpdInfoVpdSubnetArgs']]] vpd_subnets: List of cluster subnet ID
        """
        if cen_id is not None:
            pulumi.set(__self__, "cen_id", cen_id)
        if cloud_link_cidr is not None:
            pulumi.set(__self__, "cloud_link_cidr", cloud_link_cidr)
        if cloud_link_id is not None:
            pulumi.set(__self__, "cloud_link_id", cloud_link_id)
        if monitor_vpc_id is not None:
            pulumi.set(__self__, "monitor_vpc_id", monitor_vpc_id)
        if monitor_vswitch_id is not None:
            pulumi.set(__self__, "monitor_vswitch_id", monitor_vswitch_id)
        if vpd_cidr is not None:
            pulumi.set(__self__, "vpd_cidr", vpd_cidr)
        if vpd_subnets is not None:
            pulumi.set(__self__, "vpd_subnets", vpd_subnets)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Enterprise Network ID
        """
        return pulumi.get(self, "cen_id")

    @cen_id.setter
    def cen_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cen_id", value)

    @property
    @pulumi.getter(name="cloudLinkCidr")
    def cloud_link_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud chain cidr
        """
        return pulumi.get(self, "cloud_link_cidr")

    @cloud_link_cidr.setter
    def cloud_link_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_link_cidr", value)

    @property
    @pulumi.getter(name="cloudLinkId")
    def cloud_link_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud chain ID
        """
        return pulumi.get(self, "cloud_link_id")

    @cloud_link_id.setter
    def cloud_link_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_link_id", value)

    @property
    @pulumi.getter(name="monitorVpcId")
    def monitor_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proprietary Network
        """
        return pulumi.get(self, "monitor_vpc_id")

    @monitor_vpc_id.setter
    def monitor_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_vpc_id", value)

    @property
    @pulumi.getter(name="monitorVswitchId")
    def monitor_vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proprietary network switch
        """
        return pulumi.get(self, "monitor_vswitch_id")

    @monitor_vswitch_id.setter
    def monitor_vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_vswitch_id", value)

    @property
    @pulumi.getter(name="vpdCidr")
    def vpd_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster network segment
        """
        return pulumi.get(self, "vpd_cidr")

    @vpd_cidr.setter
    def vpd_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpd_cidr", value)

    @property
    @pulumi.getter(name="vpdSubnets")
    def vpd_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksNewVpdInfoVpdSubnetArgs']]]]:
        """
        List of cluster subnet ID
        """
        return pulumi.get(self, "vpd_subnets")

    @vpd_subnets.setter
    def vpd_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNetworksNewVpdInfoVpdSubnetArgs']]]]):
        pulumi.set(self, "vpd_subnets", value)


if not MYPY:
    class ClusterNetworksNewVpdInfoVpdSubnetArgsDict(TypedDict):
        subnet_cidr: NotRequired[pulumi.Input[str]]
        """
        Subnet cidr
        """
        subnet_type: NotRequired[pulumi.Input[str]]
        """
        Subnet Type
        """
        zone_id: NotRequired[pulumi.Input[str]]
elif False:
    ClusterNetworksNewVpdInfoVpdSubnetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksNewVpdInfoVpdSubnetArgs:
    def __init__(__self__, *,
                 subnet_cidr: Optional[pulumi.Input[str]] = None,
                 subnet_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_cidr: Subnet cidr
        :param pulumi.Input[str] subnet_type: Subnet Type
        """
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if subnet_type is not None:
            pulumi.set(__self__, "subnet_type", subnet_type)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet cidr
        """
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_cidr", value)

    @property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet Type
        """
        return pulumi.get(self, "subnet_type")

    @subnet_type.setter
    def subnet_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class ClusterNetworksVpdInfoArgsDict(TypedDict):
        vpd_id: NotRequired[pulumi.Input[str]]
        """
        VPC ID
        """
        vpd_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of cluster subnet ID
        """
elif False:
    ClusterNetworksVpdInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNetworksVpdInfoArgs:
    def __init__(__self__, *,
                 vpd_id: Optional[pulumi.Input[str]] = None,
                 vpd_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] vpd_id: VPC ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpd_subnets: List of cluster subnet ID
        """
        if vpd_id is not None:
            pulumi.set(__self__, "vpd_id", vpd_id)
        if vpd_subnets is not None:
            pulumi.set(__self__, "vpd_subnets", vpd_subnets)

    @property
    @pulumi.getter(name="vpdId")
    def vpd_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID
        """
        return pulumi.get(self, "vpd_id")

    @vpd_id.setter
    def vpd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpd_id", value)

    @property
    @pulumi.getter(name="vpdSubnets")
    def vpd_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cluster subnet ID
        """
        return pulumi.get(self, "vpd_subnets")

    @vpd_subnets.setter
    def vpd_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpd_subnets", value)


if not MYPY:
    class ClusterNodeGroupArgsDict(TypedDict):
        image_id: NotRequired[pulumi.Input[str]]
        """
        System Image ID
        """
        machine_type: NotRequired[pulumi.Input[str]]
        """
        Model
        """
        node_group_description: NotRequired[pulumi.Input[str]]
        """
        Node Group Description
        """
        node_group_name: NotRequired[pulumi.Input[str]]
        """
        Node Group Name
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterNodeGroupNodeArgsDict']]]]
        """
        Node List See `nodes` below.
        """
        user_data: NotRequired[pulumi.Input[str]]
        """
        Instance custom data. It needs to be encoded in Base64 mode, and the original data is at most 16KB.
        """
        zone_id: NotRequired[pulumi.Input[str]]
        """
        Zone ID
        """
elif False:
    ClusterNodeGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeGroupArgs:
    def __init__(__self__, *,
                 image_id: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 node_group_description: Optional[pulumi.Input[str]] = None,
                 node_group_name: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodeGroupNodeArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image_id: System Image ID
        :param pulumi.Input[str] machine_type: Model
        :param pulumi.Input[str] node_group_description: Node Group Description
        :param pulumi.Input[str] node_group_name: Node Group Name
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNodeGroupNodeArgs']]] nodes: Node List See `nodes` below.
        :param pulumi.Input[str] user_data: Instance custom data. It needs to be encoded in Base64 mode, and the original data is at most 16KB.
        :param pulumi.Input[str] zone_id: Zone ID
        """
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if node_group_description is not None:
            pulumi.set(__self__, "node_group_description", node_group_description)
        if node_group_name is not None:
            pulumi.set(__self__, "node_group_name", node_group_name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        System Image ID
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Model
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="nodeGroupDescription")
    def node_group_description(self) -> Optional[pulumi.Input[str]]:
        """
        Node Group Description
        """
        return pulumi.get(self, "node_group_description")

    @node_group_description.setter
    def node_group_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_group_description", value)

    @property
    @pulumi.getter(name="nodeGroupName")
    def node_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Node Group Name
        """
        return pulumi.get(self, "node_group_name")

    @node_group_name.setter
    def node_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_group_name", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodeGroupNodeArgs']]]]:
        """
        Node List See `nodes` below.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodeGroupNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Instance custom data. It needs to be encoded in Base64 mode, and the original data is at most 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Zone ID
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class ClusterNodeGroupNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        """
        Host name
        """
        login_password: NotRequired[pulumi.Input[str]]
        """
        Login Password
        """
        node_id: NotRequired[pulumi.Input[str]]
        vpc_id: NotRequired[pulumi.Input[str]]
        vswitch_id: NotRequired[pulumi.Input[str]]
elif False:
    ClusterNodeGroupNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeGroupNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: Host name
        :param pulumi.Input[str] login_password: Login Password
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        Login Password
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyArgsDict(TypedDict):
        bond_policy: NotRequired[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyArgsDict']]
        """
        Specify the cluster subnet ID based on the bond name See `bond_policy` below.
        """
        machine_type_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyArgsDict']]]]
        """
        Model Assignment Policy See `machine_type_policy` below.
        """
        node_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyArgsDict']]]]
        """
        Node allocation policy See `node_policy` below.
        """
elif False:
    NodeGroupIpAllocationPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyArgs:
    def __init__(__self__, *,
                 bond_policy: Optional[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyArgs']] = None,
                 machine_type_policies: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyArgs']]]] = None,
                 node_policies: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyArgs']]]] = None):
        """
        :param pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyArgs'] bond_policy: Specify the cluster subnet ID based on the bond name See `bond_policy` below.
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyArgs']]] machine_type_policies: Model Assignment Policy See `machine_type_policy` below.
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyArgs']]] node_policies: Node allocation policy See `node_policy` below.
        """
        if bond_policy is not None:
            pulumi.set(__self__, "bond_policy", bond_policy)
        if machine_type_policies is not None:
            pulumi.set(__self__, "machine_type_policies", machine_type_policies)
        if node_policies is not None:
            pulumi.set(__self__, "node_policies", node_policies)

    @property
    @pulumi.getter(name="bondPolicy")
    def bond_policy(self) -> Optional[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyArgs']]:
        """
        Specify the cluster subnet ID based on the bond name See `bond_policy` below.
        """
        return pulumi.get(self, "bond_policy")

    @bond_policy.setter
    def bond_policy(self, value: Optional[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyArgs']]):
        pulumi.set(self, "bond_policy", value)

    @property
    @pulumi.getter(name="machineTypePolicies")
    def machine_type_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyArgs']]]]:
        """
        Model Assignment Policy See `machine_type_policy` below.
        """
        return pulumi.get(self, "machine_type_policies")

    @machine_type_policies.setter
    def machine_type_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyArgs']]]]):
        pulumi.set(self, "machine_type_policies", value)

    @property
    @pulumi.getter(name="nodePolicies")
    def node_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyArgs']]]]:
        """
        Node allocation policy See `node_policy` below.
        """
        return pulumi.get(self, "node_policies")

    @node_policies.setter
    def node_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyArgs']]]]):
        pulumi.set(self, "node_policies", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyBondPolicyArgsDict(TypedDict):
        bond_default_subnet: NotRequired[pulumi.Input[str]]
        """
        Default bond cluster subnet
        """
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
elif False:
    NodeGroupIpAllocationPolicyBondPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyBondPolicyArgs:
    def __init__(__self__, *,
                 bond_default_subnet: Optional[pulumi.Input[str]] = None,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyBondArgs']]]] = None):
        """
        :param pulumi.Input[str] bond_default_subnet: Default bond cluster subnet
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyBondArgs']]] bonds: Bond information See `bonds` below.
        """
        if bond_default_subnet is not None:
            pulumi.set(__self__, "bond_default_subnet", bond_default_subnet)
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)

    @property
    @pulumi.getter(name="bondDefaultSubnet")
    def bond_default_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Default bond cluster subnet
        """
        return pulumi.get(self, "bond_default_subnet")

    @bond_default_subnet.setter
    def bond_default_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bond_default_subnet", value)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyBondPolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyBondPolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    NodeGroupIpAllocationPolicyBondPolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyBondPolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyMachineTypePolicyArgsDict(TypedDict):
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
        machine_type: NotRequired[pulumi.Input[str]]
        """
        Machine type
        """
elif False:
    NodeGroupIpAllocationPolicyMachineTypePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyMachineTypePolicyArgs:
    def __init__(__self__, *,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs']]]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs']]] bonds: Bond information See `bonds` below.
        :param pulumi.Input[str] machine_type: Machine type
        """
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Machine type
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyMachineTypePolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    NodeGroupIpAllocationPolicyMachineTypePolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyNodePolicyArgsDict(TypedDict):
        bonds: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyBondArgsDict']]]]
        """
        Bond information See `bonds` below.
        """
        node_id: NotRequired[pulumi.Input[str]]
elif False:
    NodeGroupIpAllocationPolicyNodePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyNodePolicyArgs:
    def __init__(__self__, *,
                 bonds: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyBondArgs']]]] = None,
                 node_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyBondArgs']]] bonds: Bond information See `bonds` below.
        """
        if bonds is not None:
            pulumi.set(__self__, "bonds", bonds)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter
    def bonds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyBondArgs']]]]:
        """
        Bond information See `bonds` below.
        """
        return pulumi.get(self, "bonds")

    @bonds.setter
    def bonds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeGroupIpAllocationPolicyNodePolicyBondArgs']]]]):
        pulumi.set(self, "bonds", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)


if not MYPY:
    class NodeGroupIpAllocationPolicyNodePolicyBondArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The bond name
        """
        subnet: NotRequired[pulumi.Input[str]]
        """
        IP source cluster subnet
        """
elif False:
    NodeGroupIpAllocationPolicyNodePolicyBondArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupIpAllocationPolicyNodePolicyBondArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The bond name
        :param pulumi.Input[str] subnet: IP source cluster subnet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The bond name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP source cluster subnet
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class NodeGroupNodeArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[str]]
        """
        Host name
        """
        login_password: NotRequired[pulumi.Input[str]]
        """
        Login Password
        """
        node_id: NotRequired[pulumi.Input[str]]
        """
        Node ID
        """
        vpc_id: NotRequired[pulumi.Input[str]]
        """
        VPC ID
        """
        vswitch_id: NotRequired[pulumi.Input[str]]
        """
        Switch ID
        """
elif False:
    NodeGroupNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodeGroupNodeArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: Host name
        :param pulumi.Input[str] login_password: Login Password
        :param pulumi.Input[str] node_id: Node ID
        :param pulumi.Input[str] vpc_id: VPC ID
        :param pulumi.Input[str] vswitch_id: Switch ID
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        Login Password
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Node ID
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Switch ID
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)


