# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountAccountTag',
    'BaselineBaselineItem',
    'GetBaselinesBaselineResult',
]

@pulumi.output_type
class AccountAccountTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountAccountTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountAccountTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountAccountTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[_builtins.str] = None,
                 tag_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str tag_key: The key of the tags
        :param _builtins.str tag_value: The value of the tags
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[_builtins.str]:
        """
        The key of the tags
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[_builtins.str]:
        """
        The value of the tags
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class BaselineBaselineItem(dict):
    def __init__(__self__, *,
                 config: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str config: Baseline item configuration. The format is a JSON string.
        :param _builtins.str name: The baseline item name.
        :param _builtins.str version: The baseline item version.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[_builtins.str]:
        """
        Baseline item configuration. The format is a JSON string.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The baseline item name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The baseline item version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBaselinesBaselineResult(dict):
    def __init__(__self__, *,
                 baseline_id: _builtins.str,
                 baseline_name: _builtins.str,
                 description: _builtins.str):
        """
        :param _builtins.str baseline_id: Baseline ID
        :param _builtins.str baseline_name: Baseline Name.
        :param _builtins.str description: Baseline Description.
        """
        pulumi.set(__self__, "baseline_id", baseline_id)
        pulumi.set(__self__, "baseline_name", baseline_name)
        pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="baselineId")
    def baseline_id(self) -> _builtins.str:
        """
        Baseline ID
        """
        return pulumi.get(self, "baseline_id")

    @_builtins.property
    @pulumi.getter(name="baselineName")
    def baseline_name(self) -> _builtins.str:
        """
        Baseline Name.
        """
        return pulumi.get(self, "baseline_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Baseline Description.
        """
        return pulumi.get(self, "description")


