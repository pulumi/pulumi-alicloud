# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountAccountTagArgs',
    'AccountAccountTagArgsDict',
    'BaselineBaselineItemArgs',
    'BaselineBaselineItemArgsDict',
]

MYPY = False

if not MYPY:
    class AccountAccountTagArgsDict(TypedDict):
        tag_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The key of the tags
        """
        tag_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value of the tags
        """
elif False:
    AccountAccountTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountAccountTagArgs:
    def __init__(__self__, *,
                 tag_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] tag_key: The key of the tags
        :param pulumi.Input[_builtins.str] tag_value: The value of the tags
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key of the tags
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_key", value)

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value of the tags
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_value", value)


if not MYPY:
    class BaselineBaselineItemArgsDict(TypedDict):
        config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Baseline item configuration. The format is a JSON string.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The baseline item name.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The baseline item version.
        """
elif False:
    BaselineBaselineItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BaselineBaselineItemArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] config: Baseline item configuration. The format is a JSON string.
        :param pulumi.Input[_builtins.str] name: The baseline item name.
        :param pulumi.Input[_builtins.str] version: The baseline item version.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Baseline item configuration. The format is a JSON string.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The baseline item name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The baseline item version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


