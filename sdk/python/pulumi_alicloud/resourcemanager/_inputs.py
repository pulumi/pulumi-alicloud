# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AutoGroupingRuleRuleContentArgs',
    'AutoGroupingRuleRuleContentArgsDict',
    'ResourceGroupRegionStatusArgs',
    'ResourceGroupRegionStatusArgsDict',
    'ResourceShareResourceArgs',
    'ResourceShareResourceArgsDict',
]

MYPY = False

if not MYPY:
    class AutoGroupingRuleRuleContentArgsDict(TypedDict):
        target_resource_group_condition: pulumi.Input[_builtins.str]
        """
        The condition for the destination resource group.
        """
        auto_grouping_scope_condition: NotRequired[pulumi.Input[_builtins.str]]
        """
        The condition for the range of resources to be automatically transferred.
        """
elif False:
    AutoGroupingRuleRuleContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutoGroupingRuleRuleContentArgs:
    def __init__(__self__, *,
                 target_resource_group_condition: pulumi.Input[_builtins.str],
                 auto_grouping_scope_condition: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] target_resource_group_condition: The condition for the destination resource group.
        :param pulumi.Input[_builtins.str] auto_grouping_scope_condition: The condition for the range of resources to be automatically transferred.
        """
        pulumi.set(__self__, "target_resource_group_condition", target_resource_group_condition)
        if auto_grouping_scope_condition is not None:
            pulumi.set(__self__, "auto_grouping_scope_condition", auto_grouping_scope_condition)

    @_builtins.property
    @pulumi.getter(name="targetResourceGroupCondition")
    def target_resource_group_condition(self) -> pulumi.Input[_builtins.str]:
        """
        The condition for the destination resource group.
        """
        return pulumi.get(self, "target_resource_group_condition")

    @target_resource_group_condition.setter
    def target_resource_group_condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_resource_group_condition", value)

    @_builtins.property
    @pulumi.getter(name="autoGroupingScopeCondition")
    def auto_grouping_scope_condition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition for the range of resources to be automatically transferred.
        """
        return pulumi.get(self, "auto_grouping_scope_condition")

    @auto_grouping_scope_condition.setter
    def auto_grouping_scope_condition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_grouping_scope_condition", value)


if not MYPY:
    class ResourceGroupRegionStatusArgsDict(TypedDict):
        region_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the region.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the resource group.
        """
elif False:
    ResourceGroupRegionStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceGroupRegionStatusArgs:
    def __init__(__self__, *,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] region_id: The status of the region.
        :param pulumi.Input[_builtins.str] status: The status of the resource group.
        """
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the region.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ResourceShareResourceArgsDict(TypedDict):
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the shared resource.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
elif False:
    ResourceShareResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceShareResourceArgs:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_id: The ID of the shared resource.
        :param pulumi.Input[_builtins.str] resource_type: Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the shared resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)


