# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AutoGroupingRuleRuleContentArgs',
    'AutoGroupingRuleRuleContentArgsDict',
    'DeliveryChannelDeliveryChannelFilterArgs',
    'DeliveryChannelDeliveryChannelFilterArgsDict',
    'DeliveryChannelResourceChangeDeliveryArgs',
    'DeliveryChannelResourceChangeDeliveryArgsDict',
    'DeliveryChannelResourceChangeDeliverySlsPropertiesArgs',
    'DeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict',
    'DeliveryChannelResourceSnapshotDeliveryArgs',
    'DeliveryChannelResourceSnapshotDeliveryArgsDict',
    'DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs',
    'DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict',
    'MultiAccountDeliveryChannelDeliveryChannelFilterArgs',
    'MultiAccountDeliveryChannelDeliveryChannelFilterArgsDict',
    'MultiAccountDeliveryChannelResourceChangeDeliveryArgs',
    'MultiAccountDeliveryChannelResourceChangeDeliveryArgsDict',
    'MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs',
    'MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict',
    'MultiAccountDeliveryChannelResourceSnapshotDeliveryArgs',
    'MultiAccountDeliveryChannelResourceSnapshotDeliveryArgsDict',
    'MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs',
    'MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict',
    'ResourceGroupRegionStatusArgs',
    'ResourceGroupRegionStatusArgsDict',
    'ResourceShareResourceArgs',
    'ResourceShareResourceArgsDict',
]

MYPY = False

if not MYPY:
    class AutoGroupingRuleRuleContentArgsDict(TypedDict):
        target_resource_group_condition: pulumi.Input[_builtins.str]
        """
        The condition for the destination resource group.
        """
        auto_grouping_scope_condition: NotRequired[pulumi.Input[_builtins.str]]
        """
        The condition for the range of resources to be automatically transferred.
        """
elif False:
    AutoGroupingRuleRuleContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutoGroupingRuleRuleContentArgs:
    def __init__(__self__, *,
                 target_resource_group_condition: pulumi.Input[_builtins.str],
                 auto_grouping_scope_condition: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] target_resource_group_condition: The condition for the destination resource group.
        :param pulumi.Input[_builtins.str] auto_grouping_scope_condition: The condition for the range of resources to be automatically transferred.
        """
        pulumi.set(__self__, "target_resource_group_condition", target_resource_group_condition)
        if auto_grouping_scope_condition is not None:
            pulumi.set(__self__, "auto_grouping_scope_condition", auto_grouping_scope_condition)

    @_builtins.property
    @pulumi.getter(name="targetResourceGroupCondition")
    def target_resource_group_condition(self) -> pulumi.Input[_builtins.str]:
        """
        The condition for the destination resource group.
        """
        return pulumi.get(self, "target_resource_group_condition")

    @target_resource_group_condition.setter
    def target_resource_group_condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_resource_group_condition", value)

    @_builtins.property
    @pulumi.getter(name="autoGroupingScopeCondition")
    def auto_grouping_scope_condition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition for the range of resources to be automatically transferred.
        """
        return pulumi.get(self, "auto_grouping_scope_condition")

    @auto_grouping_scope_condition.setter
    def auto_grouping_scope_condition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_grouping_scope_condition", value)


if not MYPY:
    class DeliveryChannelDeliveryChannelFilterArgsDict(TypedDict):
        resource_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        An array of effective resource types for the delivery channel.
        - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
        - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
elif False:
    DeliveryChannelDeliveryChannelFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeliveryChannelDeliveryChannelFilterArgs:
    def __init__(__self__, *,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_types: An array of effective resource types for the delivery channel.
               - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
               - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        An array of effective resource types for the delivery channel.
        - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
        - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_types", value)


if not MYPY:
    class DeliveryChannelResourceChangeDeliveryArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable delivery of resource configuration change events. Valid values:
        - true
        - false
        """
        sls_properties: NotRequired[pulumi.Input['DeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict']]
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        target_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ARN of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        target_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the delivery destination.

        Valid values:
        - SLS
        """
elif False:
    DeliveryChannelResourceChangeDeliveryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeliveryChannelResourceChangeDeliveryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 sls_properties: Optional[pulumi.Input['DeliveryChannelResourceChangeDeliverySlsPropertiesArgs']] = None,
                 target_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable delivery of resource configuration change events. Valid values:
               - true
               - false
        :param pulumi.Input['DeliveryChannelResourceChangeDeliverySlsPropertiesArgs'] sls_properties: The Simple Log Service configurations. See `sls_properties` below.
        :param pulumi.Input[_builtins.str] target_arn: The ARN of the delivery destination.
               - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
               - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        :param pulumi.Input[_builtins.str] target_type: The type of the delivery destination.
               
               Valid values:
               - SLS
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sls_properties is not None:
            pulumi.set(__self__, "sls_properties", sls_properties)
        if target_arn is not None:
            pulumi.set(__self__, "target_arn", target_arn)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable delivery of resource configuration change events. Valid values:
        - true
        - false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="slsProperties")
    def sls_properties(self) -> Optional[pulumi.Input['DeliveryChannelResourceChangeDeliverySlsPropertiesArgs']]:
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        return pulumi.get(self, "sls_properties")

    @sls_properties.setter
    def sls_properties(self, value: Optional[pulumi.Input['DeliveryChannelResourceChangeDeliverySlsPropertiesArgs']]):
        pulumi.set(self, "sls_properties", value)

    @_builtins.property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        return pulumi.get(self, "target_arn")

    @target_arn.setter
    def target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_arn", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the delivery destination.

        Valid values:
        - SLS
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


if not MYPY:
    class DeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict(TypedDict):
        oversized_data_oss_target_arn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    DeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeliveryChannelResourceChangeDeliverySlsPropertiesArgs:
    def __init__(__self__, *,
                 oversized_data_oss_target_arn: Optional[pulumi.Input[_builtins.str]] = None):
        if oversized_data_oss_target_arn is not None:
            pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @oversized_data_oss_target_arn.setter
    def oversized_data_oss_target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oversized_data_oss_target_arn", value)


if not MYPY:
    class DeliveryChannelResourceSnapshotDeliveryArgsDict(TypedDict):
        custom_expression: NotRequired[pulumi.Input[_builtins.str]]
        """
        The custom expression.
        """
        delivery_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The delivery time.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
        - true
        - false
        """
        sls_properties: NotRequired[pulumi.Input['DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict']]
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        target_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Alibaba Cloud Resource Name (ARN) of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        target_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the delivery destination.

        Valid values:
        - `OSS` for standard delivery
        - `OSS` or `SLS` for custom delivery
        """
elif False:
    DeliveryChannelResourceSnapshotDeliveryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeliveryChannelResourceSnapshotDeliveryArgs:
    def __init__(__self__, *,
                 custom_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 delivery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 sls_properties: Optional[pulumi.Input['DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']] = None,
                 target_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] custom_expression: The custom expression.
        :param pulumi.Input[_builtins.str] delivery_time: The delivery time.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
               - true
               - false
        :param pulumi.Input['DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs'] sls_properties: The Simple Log Service configurations. See `sls_properties` below.
        :param pulumi.Input[_builtins.str] target_arn: The Alibaba Cloud Resource Name (ARN) of the delivery destination.
               - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
               - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        :param pulumi.Input[_builtins.str] target_type: The type of the delivery destination.
               
               Valid values:
               - `OSS` for standard delivery
               - `OSS` or `SLS` for custom delivery
        """
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if delivery_time is not None:
            pulumi.set(__self__, "delivery_time", delivery_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sls_properties is not None:
            pulumi.set(__self__, "sls_properties", sls_properties)
        if target_arn is not None:
            pulumi.set(__self__, "target_arn", target_arn)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom expression.
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_expression", value)

    @_builtins.property
    @pulumi.getter(name="deliveryTime")
    def delivery_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The delivery time.
        """
        return pulumi.get(self, "delivery_time")

    @delivery_time.setter
    def delivery_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delivery_time", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
        - true
        - false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="slsProperties")
    def sls_properties(self) -> Optional[pulumi.Input['DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']]:
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        return pulumi.get(self, "sls_properties")

    @sls_properties.setter
    def sls_properties(self, value: Optional[pulumi.Input['DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']]):
        pulumi.set(self, "sls_properties", value)

    @_builtins.property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Alibaba Cloud Resource Name (ARN) of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        return pulumi.get(self, "target_arn")

    @target_arn.setter
    def target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_arn", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the delivery destination.

        Valid values:
        - `OSS` for standard delivery
        - `OSS` or `SLS` for custom delivery
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


if not MYPY:
    class DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict(TypedDict):
        oversized_data_oss_target_arn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs:
    def __init__(__self__, *,
                 oversized_data_oss_target_arn: Optional[pulumi.Input[_builtins.str]] = None):
        if oversized_data_oss_target_arn is not None:
            pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @oversized_data_oss_target_arn.setter
    def oversized_data_oss_target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oversized_data_oss_target_arn", value)


if not MYPY:
    class MultiAccountDeliveryChannelDeliveryChannelFilterArgsDict(TypedDict):
        account_scopes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The account scopes of the delivery channel.
        """
        resource_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        An array of effective resource types for the delivery channel.
        - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
        - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
elif False:
    MultiAccountDeliveryChannelDeliveryChannelFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiAccountDeliveryChannelDeliveryChannelFilterArgs:
    def __init__(__self__, *,
                 account_scopes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] account_scopes: The account scopes of the delivery channel.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_types: An array of effective resource types for the delivery channel.
               - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
               - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
        pulumi.set(__self__, "account_scopes", account_scopes)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)

    @_builtins.property
    @pulumi.getter(name="accountScopes")
    def account_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The account scopes of the delivery channel.
        """
        return pulumi.get(self, "account_scopes")

    @account_scopes.setter
    def account_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "account_scopes", value)

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        An array of effective resource types for the delivery channel.
        - Example: ["ACS::VPC::VPC", "ACS::ECS::Instance"].
        - If you want to deliver items of all resource types supported by Resource Center, set this parameter to ["ALL"].
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_types", value)


if not MYPY:
    class MultiAccountDeliveryChannelResourceChangeDeliveryArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable delivery of resource configuration change events. Valid values:
        - true
        - false
        """
        sls_properties: NotRequired[pulumi.Input['MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict']]
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        target_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ARN of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        target_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the delivery destination.

        Valid values:
        - SLS
        """
elif False:
    MultiAccountDeliveryChannelResourceChangeDeliveryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiAccountDeliveryChannelResourceChangeDeliveryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 sls_properties: Optional[pulumi.Input['MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs']] = None,
                 target_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable delivery of resource configuration change events. Valid values:
               - true
               - false
        :param pulumi.Input['MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs'] sls_properties: The Simple Log Service configurations. See `sls_properties` below.
        :param pulumi.Input[_builtins.str] target_arn: The ARN of the delivery destination.
               - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
               - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        :param pulumi.Input[_builtins.str] target_type: The type of the delivery destination.
               
               Valid values:
               - SLS
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sls_properties is not None:
            pulumi.set(__self__, "sls_properties", sls_properties)
        if target_arn is not None:
            pulumi.set(__self__, "target_arn", target_arn)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable delivery of resource configuration change events. Valid values:
        - true
        - false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="slsProperties")
    def sls_properties(self) -> Optional[pulumi.Input['MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs']]:
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        return pulumi.get(self, "sls_properties")

    @sls_properties.setter
    def sls_properties(self, value: Optional[pulumi.Input['MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs']]):
        pulumi.set(self, "sls_properties", value)

    @_builtins.property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to`SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        return pulumi.get(self, "target_arn")

    @target_arn.setter
    def target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_arn", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the delivery destination.

        Valid values:
        - SLS
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


if not MYPY:
    class MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict(TypedDict):
        oversized_data_oss_target_arn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiAccountDeliveryChannelResourceChangeDeliverySlsPropertiesArgs:
    def __init__(__self__, *,
                 oversized_data_oss_target_arn: Optional[pulumi.Input[_builtins.str]] = None):
        if oversized_data_oss_target_arn is not None:
            pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @oversized_data_oss_target_arn.setter
    def oversized_data_oss_target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oversized_data_oss_target_arn", value)


if not MYPY:
    class MultiAccountDeliveryChannelResourceSnapshotDeliveryArgsDict(TypedDict):
        custom_expression: NotRequired[pulumi.Input[_builtins.str]]
        """
        The custom expression.
        """
        delivery_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        The delivery time.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
        - true
        - false
        """
        sls_properties: NotRequired[pulumi.Input['MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict']]
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        target_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Alibaba Cloud Resource Name (ARN) of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        target_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the delivery destination.

        Valid values:
        - `OSS` for standard delivery
        - `OSS` or `SLS` for custom delivery
        """
elif False:
    MultiAccountDeliveryChannelResourceSnapshotDeliveryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiAccountDeliveryChannelResourceSnapshotDeliveryArgs:
    def __init__(__self__, *,
                 custom_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 delivery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 sls_properties: Optional[pulumi.Input['MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']] = None,
                 target_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] custom_expression: The custom expression.
        :param pulumi.Input[_builtins.str] delivery_time: The delivery time.
        :param pulumi.Input[_builtins.bool] enabled: Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
               - true
               - false
        :param pulumi.Input['MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs'] sls_properties: The Simple Log Service configurations. See `sls_properties` below.
        :param pulumi.Input[_builtins.str] target_arn: The Alibaba Cloud Resource Name (ARN) of the delivery destination.
               - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
               - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        :param pulumi.Input[_builtins.str] target_type: The type of the delivery destination.
               
               Valid values:
               - `OSS` for standard delivery
               - `OSS` or `SLS` for custom delivery
        """
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if delivery_time is not None:
            pulumi.set(__self__, "delivery_time", delivery_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sls_properties is not None:
            pulumi.set(__self__, "sls_properties", sls_properties)
        if target_arn is not None:
            pulumi.set(__self__, "target_arn", target_arn)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @_builtins.property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The custom expression.
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_expression", value)

    @_builtins.property
    @pulumi.getter(name="deliveryTime")
    def delivery_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The delivery time.
        """
        return pulumi.get(self, "delivery_time")

    @delivery_time.setter
    def delivery_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delivery_time", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to enable delivery of scheduled resource snapshots. Valid values:
        - true
        - false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="slsProperties")
    def sls_properties(self) -> Optional[pulumi.Input['MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']]:
        """
        The Simple Log Service configurations. See `sls_properties` below.
        """
        return pulumi.get(self, "sls_properties")

    @sls_properties.setter
    def sls_properties(self, value: Optional[pulumi.Input['MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs']]):
        pulumi.set(self, "sls_properties", value)

    @_builtins.property
    @pulumi.getter(name="targetArn")
    def target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Alibaba Cloud Resource Name (ARN) of the delivery destination.
        - If you set TargetType to`OSS`, you must set TargetArn to the ARN of a bucket whose name is prefixed with `resourcecenter-`.
        - If you set TargetType to `SLS`, you must set TargetArn to the ARN of a Logstore whose name is prefixed with `resourcecenter-`.
        """
        return pulumi.get(self, "target_arn")

    @target_arn.setter
    def target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_arn", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the delivery destination.

        Valid values:
        - `OSS` for standard delivery
        - `OSS` or `SLS` for custom delivery
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)


if not MYPY:
    class MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict(TypedDict):
        oversized_data_oss_target_arn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiAccountDeliveryChannelResourceSnapshotDeliverySlsPropertiesArgs:
    def __init__(__self__, *,
                 oversized_data_oss_target_arn: Optional[pulumi.Input[_builtins.str]] = None):
        if oversized_data_oss_target_arn is not None:
            pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @oversized_data_oss_target_arn.setter
    def oversized_data_oss_target_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oversized_data_oss_target_arn", value)


if not MYPY:
    class ResourceGroupRegionStatusArgsDict(TypedDict):
        region_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the region.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the resource group.
        """
elif False:
    ResourceGroupRegionStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceGroupRegionStatusArgs:
    def __init__(__self__, *,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] region_id: The status of the region.
        :param pulumi.Input[_builtins.str] status: The status of the resource group.
        """
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the region.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ResourceShareResourceArgsDict(TypedDict):
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the shared resource.
        """
        resource_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
elif False:
    ResourceShareResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceShareResourceArgs:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_id: The ID of the shared resource.
        :param pulumi.Input[_builtins.str] resource_type: Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the shared resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shared resource type. For the types of resources that support sharing, see [Cloud services that support sharing](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/product-overview/services-that-work-with-resource-sharing).
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)


