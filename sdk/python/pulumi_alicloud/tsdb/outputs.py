# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstancesInstanceResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 auto_renew: str,
                 cpu_number: str,
                 disk_category: str,
                 engine_type: str,
                 expired_time: int,
                 id: str,
                 instance_alias: str,
                 instance_class: str,
                 instance_id: str,
                 instance_storage: str,
                 memory_size: str,
                 network_type: str,
                 payment_type: str,
                 status: str,
                 vpc_connection_address: str,
                 vpc_id: str,
                 vswitch_id: str,
                 zone_id: str):
        """
        :param str auto_renew: Auto renew.
        :param str cpu_number: The cpu core number of instance.
        :param str disk_category: The disk type of instance. `cloud_ssd` refers to SSD disk, `cloud_efficiency` refers to efficiency disk,cloud_essd refers to ESSD PL1 disk.
        :param str engine_type: The engine type of instance. Enumerative: `tsdb_tsdb` refers to TSDB, `tsdb_influxdb` refers to TSDB for InfluxDB️.
        :param int expired_time: Instance expiration time.
        :param str id: The ID of the Instance.
        :param str instance_alias: The alias of the instance.
        :param str instance_class: The specification of the instance.
        :param str instance_id: The ID of the instance.
        :param str instance_storage: The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
        :param str memory_size: The memory size of instance.
        :param str network_type: Instance network type.
        :param str payment_type: The billing method. Valid values: `PayAsYouGo` and `Subscription`. The `PayAsYouGo` value indicates the pay-as-you-go method, and the `Subscription` value indicates the subscription method.
        :param str status: Instance status, enumerative: ACTIVATION,DELETED, CREATING,CLASS_CHANGING,LOCKED.
        :param str vpc_connection_address: The vpc connection address of instance.
        :param str vpc_id: The ID of the virtual private cloud (VPC) that is connected to the instance.
        :param str vswitch_id: The vswitch id.
        :param str zone_id: The zone ID of the instance.
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_renew=auto_renew,
            cpu_number=cpu_number,
            disk_category=disk_category,
            engine_type=engine_type,
            expired_time=expired_time,
            id=id,
            instance_alias=instance_alias,
            instance_class=instance_class,
            instance_id=instance_id,
            instance_storage=instance_storage,
            memory_size=memory_size,
            network_type=network_type,
            payment_type=payment_type,
            status=status,
            vpc_connection_address=vpc_connection_address,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_renew: Optional[str] = None,
             cpu_number: Optional[str] = None,
             disk_category: Optional[str] = None,
             engine_type: Optional[str] = None,
             expired_time: Optional[int] = None,
             id: Optional[str] = None,
             instance_alias: Optional[str] = None,
             instance_class: Optional[str] = None,
             instance_id: Optional[str] = None,
             instance_storage: Optional[str] = None,
             memory_size: Optional[str] = None,
             network_type: Optional[str] = None,
             payment_type: Optional[str] = None,
             status: Optional[str] = None,
             vpc_connection_address: Optional[str] = None,
             vpc_id: Optional[str] = None,
             vswitch_id: Optional[str] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if auto_renew is None and 'autoRenew' in kwargs:
            auto_renew = kwargs['autoRenew']
        if auto_renew is None:
            raise TypeError("Missing 'auto_renew' argument")
        if cpu_number is None and 'cpuNumber' in kwargs:
            cpu_number = kwargs['cpuNumber']
        if cpu_number is None:
            raise TypeError("Missing 'cpu_number' argument")
        if disk_category is None and 'diskCategory' in kwargs:
            disk_category = kwargs['diskCategory']
        if disk_category is None:
            raise TypeError("Missing 'disk_category' argument")
        if engine_type is None and 'engineType' in kwargs:
            engine_type = kwargs['engineType']
        if engine_type is None:
            raise TypeError("Missing 'engine_type' argument")
        if expired_time is None and 'expiredTime' in kwargs:
            expired_time = kwargs['expiredTime']
        if expired_time is None:
            raise TypeError("Missing 'expired_time' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if instance_alias is None and 'instanceAlias' in kwargs:
            instance_alias = kwargs['instanceAlias']
        if instance_alias is None:
            raise TypeError("Missing 'instance_alias' argument")
        if instance_class is None and 'instanceClass' in kwargs:
            instance_class = kwargs['instanceClass']
        if instance_class is None:
            raise TypeError("Missing 'instance_class' argument")
        if instance_id is None and 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if instance_id is None:
            raise TypeError("Missing 'instance_id' argument")
        if instance_storage is None and 'instanceStorage' in kwargs:
            instance_storage = kwargs['instanceStorage']
        if instance_storage is None:
            raise TypeError("Missing 'instance_storage' argument")
        if memory_size is None and 'memorySize' in kwargs:
            memory_size = kwargs['memorySize']
        if memory_size is None:
            raise TypeError("Missing 'memory_size' argument")
        if network_type is None and 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if network_type is None:
            raise TypeError("Missing 'network_type' argument")
        if payment_type is None and 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if payment_type is None:
            raise TypeError("Missing 'payment_type' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if vpc_connection_address is None and 'vpcConnectionAddress' in kwargs:
            vpc_connection_address = kwargs['vpcConnectionAddress']
        if vpc_connection_address is None:
            raise TypeError("Missing 'vpc_connection_address' argument")
        if vpc_id is None and 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if vpc_id is None:
            raise TypeError("Missing 'vpc_id' argument")
        if vswitch_id is None and 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']
        if vswitch_id is None:
            raise TypeError("Missing 'vswitch_id' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("auto_renew", auto_renew)
        _setter("cpu_number", cpu_number)
        _setter("disk_category", disk_category)
        _setter("engine_type", engine_type)
        _setter("expired_time", expired_time)
        _setter("id", id)
        _setter("instance_alias", instance_alias)
        _setter("instance_class", instance_class)
        _setter("instance_id", instance_id)
        _setter("instance_storage", instance_storage)
        _setter("memory_size", memory_size)
        _setter("network_type", network_type)
        _setter("payment_type", payment_type)
        _setter("status", status)
        _setter("vpc_connection_address", vpc_connection_address)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> str:
        """
        Auto renew.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="cpuNumber")
    def cpu_number(self) -> str:
        """
        The cpu core number of instance.
        """
        return pulumi.get(self, "cpu_number")

    @property
    @pulumi.getter(name="diskCategory")
    def disk_category(self) -> str:
        """
        The disk type of instance. `cloud_ssd` refers to SSD disk, `cloud_efficiency` refers to efficiency disk,cloud_essd refers to ESSD PL1 disk.
        """
        return pulumi.get(self, "disk_category")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        """
        The engine type of instance. Enumerative: `tsdb_tsdb` refers to TSDB, `tsdb_influxdb` refers to TSDB for InfluxDB️.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> int:
        """
        Instance expiration time.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceAlias")
    def instance_alias(self) -> str:
        """
        The alias of the instance.
        """
        return pulumi.get(self, "instance_alias")

    @property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> str:
        """
        The specification of the instance.
        """
        return pulumi.get(self, "instance_class")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceStorage")
    def instance_storage(self) -> str:
        """
        The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
        """
        return pulumi.get(self, "instance_storage")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> str:
        """
        The memory size of instance.
        """
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Instance network type.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The billing method. Valid values: `PayAsYouGo` and `Subscription`. The `PayAsYouGo` value indicates the pay-as-you-go method, and the `Subscription` value indicates the subscription method.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Instance status, enumerative: ACTIVATION,DELETED, CREATING,CLASS_CHANGING,LOCKED.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vpcConnectionAddress")
    def vpc_connection_address(self) -> str:
        """
        The vpc connection address of instance.
        """
        return pulumi.get(self, "vpc_connection_address")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of the virtual private cloud (VPC) that is connected to the instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        The vswitch id.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone ID of the instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 local_name: str,
                 zone_id: str):
        """
        :param str id: The ID of zone.
        :param str local_name: The local name.
        :param str zone_id: The zone ID.
        """
        GetZonesZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            local_name=local_name,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             local_name: Optional[str] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if local_name is None and 'localName' in kwargs:
            local_name = kwargs['localName']
        if local_name is None:
            raise TypeError("Missing 'local_name' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("id", id)
        _setter("local_name", local_name)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localName")
    def local_name(self) -> str:
        """
        The local name.
        """
        return pulumi.get(self, "local_name")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")


