# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GatewayLogConfig',
    'GatewayLogConfigSls',
    'GatewayNetworkAccessConfig',
    'GatewayVpc',
    'GatewayVswitch',
    'GatewayZone',
    'GatewayZoneConfig',
]

@pulumi.output_type
class GatewayLogConfig(dict):
    def __init__(__self__, *,
                 sls: Optional['outputs.GatewayLogConfigSls'] = None):
        """
        :param 'GatewayLogConfigSlsArgs' sls: Sls See `sls` below.
        """
        if sls is not None:
            pulumi.set(__self__, "sls", sls)

    @_builtins.property
    @pulumi.getter
    def sls(self) -> Optional['outputs.GatewayLogConfigSls']:
        """
        Sls See `sls` below.
        """
        return pulumi.get(self, "sls")


@pulumi.output_type
class GatewayLogConfigSls(dict):
    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool enable: Enable Log Service
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Enable Log Service
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class GatewayNetworkAccessConfig(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Network Access Type
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Network Access Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: _builtins.str,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str vpc_id: The VPC network ID.
        :param _builtins.str name: The zone name.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC network ID.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GatewayVswitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vswitchId":
            suggest = "vswitch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayVswitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayVswitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayVswitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 vswitch_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The zone name.
        :param _builtins.str vswitch_id: The ID of the virtual switch.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The zone name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[_builtins.str]:
        """
        The ID of the virtual switch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GatewayZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vswitchId":
            suggest = "vswitch_id"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 vswitch_id: Optional[_builtins.str] = None,
                 zone_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The zone name.
        :param _builtins.str vswitch_id: The vswitch ID.
        :param _builtins.str zone_id: The zone ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The zone name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[_builtins.str]:
        """
        The vswitch ID.
        """
        return pulumi.get(self, "vswitch_id")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[_builtins.str]:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GatewayZoneConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectOption":
            suggest = "select_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayZoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayZoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayZoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 select_option: _builtins.str):
        """
        :param _builtins.str select_option: Availability Zone Options
        """
        pulumi.set(__self__, "select_option", select_option)

    @_builtins.property
    @pulumi.getter(name="selectOption")
    def select_option(self) -> _builtins.str:
        """
        Availability Zone Options
        """
        return pulumi.get(self, "select_option")


