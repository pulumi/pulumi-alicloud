# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CustomLineIpSegmentListArgs',
    'GtmInstanceAlertConfigArgs',
]

@pulumi.input_type
class CustomLineIpSegmentListArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str]):
        """
        :param pulumi.Input[str] end_ip: The end IP address of the CIDR block.
        :param pulumi.Input[str] start_ip: The start IP address of the CIDR block.
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[str]:
        """
        The end IP address of the CIDR block.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[str]:
        """
        The start IP address of the CIDR block.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class GtmInstanceAlertConfigArgs:
    def __init__(__self__, *,
                 dingtalk_notice: Optional[pulumi.Input[bool]] = None,
                 email_notice: Optional[pulumi.Input[bool]] = None,
                 notice_type: Optional[pulumi.Input[str]] = None,
                 sms_notice: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] dingtalk_notice: Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        :param pulumi.Input[bool] email_notice: Whether to configure mail notification. Valid values: `true`, `false`.
        :param pulumi.Input[str] notice_type: The Alarm Event Type.
               - `ADDR_ALERT`: Address not available.
               - `ADDR_RESUME`: Address Recovery available.
               - `ADDR_POOL_GROUP_UNAVAILABLE`: Address pool collection not available.
               - `ADDR_POOL_GROUP_AVAILABLE`: Address pool collection recovery available.
               - `ACCESS_STRATEGY_POOL_GROUP_SWITCH`: Primary/standby address pool switch.
               - `MONITOR_NODE_IP_CHANGE`: Monitoring node IP address changes.
        :param pulumi.Input[bool] sms_notice: Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        if dingtalk_notice is not None:
            pulumi.set(__self__, "dingtalk_notice", dingtalk_notice)
        if email_notice is not None:
            pulumi.set(__self__, "email_notice", email_notice)
        if notice_type is not None:
            pulumi.set(__self__, "notice_type", notice_type)
        if sms_notice is not None:
            pulumi.set(__self__, "sms_notice", sms_notice)

    @property
    @pulumi.getter(name="dingtalkNotice")
    def dingtalk_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "dingtalk_notice")

    @dingtalk_notice.setter
    def dingtalk_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dingtalk_notice", value)

    @property
    @pulumi.getter(name="emailNotice")
    def email_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure mail notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "email_notice")

    @email_notice.setter
    def email_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_notice", value)

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Alarm Event Type.
        - `ADDR_ALERT`: Address not available.
        - `ADDR_RESUME`: Address Recovery available.
        - `ADDR_POOL_GROUP_UNAVAILABLE`: Address pool collection not available.
        - `ADDR_POOL_GROUP_AVAILABLE`: Address pool collection recovery available.
        - `ACCESS_STRATEGY_POOL_GROUP_SWITCH`: Primary/standby address pool switch.
        - `MONITOR_NODE_IP_CHANGE`: Monitoring node IP address changes.
        """
        return pulumi.get(self, "notice_type")

    @notice_type.setter
    def notice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice_type", value)

    @property
    @pulumi.getter(name="smsNotice")
    def sms_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "sms_notice")

    @sms_notice.setter
    def sms_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_notice", value)


