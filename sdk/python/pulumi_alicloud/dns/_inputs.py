# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccessStrategyDefaultAddrPoolArgs',
    'AccessStrategyFailoverAddrPoolArgs',
    'AccessStrategyLineArgs',
    'AddressPoolAddressArgs',
    'CustomLineIpSegmentListArgs',
    'GtmInstanceAlertConfigArgs',
    'MonitorConfigIspCityNodeArgs',
]

@pulumi.input_type
class AccessStrategyDefaultAddrPoolArgs:
    def __init__(__self__, *,
                 addr_pool_id: pulumi.Input[str],
                 lba_weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_pool_id: The ID of the address pool in the primary address pool group.
        :param pulumi.Input[int] lba_weight: The weight of the address pool in the primary address pool group.
        """
        AccessStrategyDefaultAddrPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addr_pool_id=addr_pool_id,
            lba_weight=lba_weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addr_pool_id: pulumi.Input[str],
             lba_weight: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addrPoolId' in kwargs:
            addr_pool_id = kwargs['addrPoolId']
        if 'lbaWeight' in kwargs:
            lba_weight = kwargs['lbaWeight']

        _setter("addr_pool_id", addr_pool_id)
        if lba_weight is not None:
            _setter("lba_weight", lba_weight)

    @property
    @pulumi.getter(name="addrPoolId")
    def addr_pool_id(self) -> pulumi.Input[str]:
        """
        The ID of the address pool in the primary address pool group.
        """
        return pulumi.get(self, "addr_pool_id")

    @addr_pool_id.setter
    def addr_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr_pool_id", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the address pool in the primary address pool group.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lba_weight", value)


@pulumi.input_type
class AccessStrategyFailoverAddrPoolArgs:
    def __init__(__self__, *,
                 addr_pool_id: Optional[pulumi.Input[str]] = None,
                 lba_weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_pool_id: The ID of the address pool in the secondary address pool group.
        :param pulumi.Input[int] lba_weight: The weight of the address pool in the secondary address pool group.
        """
        AccessStrategyFailoverAddrPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addr_pool_id=addr_pool_id,
            lba_weight=lba_weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addr_pool_id: Optional[pulumi.Input[str]] = None,
             lba_weight: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addrPoolId' in kwargs:
            addr_pool_id = kwargs['addrPoolId']
        if 'lbaWeight' in kwargs:
            lba_weight = kwargs['lbaWeight']

        if addr_pool_id is not None:
            _setter("addr_pool_id", addr_pool_id)
        if lba_weight is not None:
            _setter("lba_weight", lba_weight)

    @property
    @pulumi.getter(name="addrPoolId")
    def addr_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the address pool in the secondary address pool group.
        """
        return pulumi.get(self, "addr_pool_id")

    @addr_pool_id.setter
    def addr_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_pool_id", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the address pool in the secondary address pool group.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lba_weight", value)


@pulumi.input_type
class AccessStrategyLineArgs:
    def __init__(__self__, *,
                 line_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_code: The line code of the source region.
        """
        AccessStrategyLineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_code=line_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lineCode' in kwargs:
            line_code = kwargs['lineCode']

        if line_code is not None:
            _setter("line_code", line_code)

    @property
    @pulumi.getter(name="lineCode")
    def line_code(self) -> Optional[pulumi.Input[str]]:
        """
        The line code of the source region.
        """
        return pulumi.get(self, "line_code")

    @line_code.setter
    def line_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_code", value)


@pulumi.input_type
class AddressPoolAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 attribute_info: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 lba_weight: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: The address that you want to add to the address pool.
        :param pulumi.Input[str] attribute_info: The source region of the address. expressed as a JSON string. The structure is as follows:
        :param pulumi.Input[str] mode: The type of the address. Valid values:`SMART`, `ONLINE` and `OFFLINE`.
        :param pulumi.Input[int] lba_weight: The weight of the address. **NOTE:** The attribute is valid when the attribute `lba_strategy` is `RATIO`.
        :param pulumi.Input[str] remark: The description of the address.
        """
        AddressPoolAddressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            attribute_info=attribute_info,
            mode=mode,
            lba_weight=lba_weight,
            remark=remark,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             attribute_info: pulumi.Input[str],
             mode: pulumi.Input[str],
             lba_weight: Optional[pulumi.Input[int]] = None,
             remark: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'attributeInfo' in kwargs:
            attribute_info = kwargs['attributeInfo']
        if 'lbaWeight' in kwargs:
            lba_weight = kwargs['lbaWeight']

        _setter("address", address)
        _setter("attribute_info", attribute_info)
        _setter("mode", mode)
        if lba_weight is not None:
            _setter("lba_weight", lba_weight)
        if remark is not None:
            _setter("remark", remark)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address that you want to add to the address pool.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="attributeInfo")
    def attribute_info(self) -> pulumi.Input[str]:
        """
        The source region of the address. expressed as a JSON string. The structure is as follows:
        """
        return pulumi.get(self, "attribute_info")

    @attribute_info.setter
    def attribute_info(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_info", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        The type of the address. Valid values:`SMART`, `ONLINE` and `OFFLINE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the address. **NOTE:** The attribute is valid when the attribute `lba_strategy` is `RATIO`.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lba_weight", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the address.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class CustomLineIpSegmentListArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str]):
        """
        :param pulumi.Input[str] end_ip: The end IP address of the CIDR block.
        :param pulumi.Input[str] start_ip: The start IP address of the CIDR block.
        """
        CustomLineIpSegmentListArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_ip=end_ip,
            start_ip=start_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_ip: pulumi.Input[str],
             start_ip: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'endIp' in kwargs:
            end_ip = kwargs['endIp']
        if 'startIp' in kwargs:
            start_ip = kwargs['startIp']

        _setter("end_ip", end_ip)
        _setter("start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[str]:
        """
        The end IP address of the CIDR block.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[str]:
        """
        The start IP address of the CIDR block.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class GtmInstanceAlertConfigArgs:
    def __init__(__self__, *,
                 dingtalk_notice: Optional[pulumi.Input[bool]] = None,
                 email_notice: Optional[pulumi.Input[bool]] = None,
                 notice_type: Optional[pulumi.Input[str]] = None,
                 sms_notice: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] dingtalk_notice: Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        :param pulumi.Input[bool] email_notice: Whether to configure mail notification. Valid values: `true`, `false`.
        :param pulumi.Input[str] notice_type: The Alarm Event Type.
        :param pulumi.Input[bool] sms_notice: Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        GtmInstanceAlertConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dingtalk_notice=dingtalk_notice,
            email_notice=email_notice,
            notice_type=notice_type,
            sms_notice=sms_notice,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dingtalk_notice: Optional[pulumi.Input[bool]] = None,
             email_notice: Optional[pulumi.Input[bool]] = None,
             notice_type: Optional[pulumi.Input[str]] = None,
             sms_notice: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dingtalkNotice' in kwargs:
            dingtalk_notice = kwargs['dingtalkNotice']
        if 'emailNotice' in kwargs:
            email_notice = kwargs['emailNotice']
        if 'noticeType' in kwargs:
            notice_type = kwargs['noticeType']
        if 'smsNotice' in kwargs:
            sms_notice = kwargs['smsNotice']

        if dingtalk_notice is not None:
            _setter("dingtalk_notice", dingtalk_notice)
        if email_notice is not None:
            _setter("email_notice", email_notice)
        if notice_type is not None:
            _setter("notice_type", notice_type)
        if sms_notice is not None:
            _setter("sms_notice", sms_notice)

    @property
    @pulumi.getter(name="dingtalkNotice")
    def dingtalk_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "dingtalk_notice")

    @dingtalk_notice.setter
    def dingtalk_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dingtalk_notice", value)

    @property
    @pulumi.getter(name="emailNotice")
    def email_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure mail notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "email_notice")

    @email_notice.setter
    def email_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_notice", value)

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Alarm Event Type.
        """
        return pulumi.get(self, "notice_type")

    @notice_type.setter
    def notice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice_type", value)

    @property
    @pulumi.getter(name="smsNotice")
    def sms_notice(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "sms_notice")

    @sms_notice.setter
    def sms_notice(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_notice", value)


@pulumi.input_type
class MonitorConfigIspCityNodeArgs:
    def __init__(__self__, *,
                 city_code: pulumi.Input[str],
                 isp_code: pulumi.Input[str]):
        """
        :param pulumi.Input[str] city_code: The code of the city node to monitor.
        :param pulumi.Input[str] isp_code: The code of the Internet provider service (ISP) node to monitor.
        """
        MonitorConfigIspCityNodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city_code=city_code,
            isp_code=isp_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city_code: pulumi.Input[str],
             isp_code: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cityCode' in kwargs:
            city_code = kwargs['cityCode']
        if 'ispCode' in kwargs:
            isp_code = kwargs['ispCode']

        _setter("city_code", city_code)
        _setter("isp_code", isp_code)

    @property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> pulumi.Input[str]:
        """
        The code of the city node to monitor.
        """
        return pulumi.get(self, "city_code")

    @city_code.setter
    def city_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "city_code", value)

    @property
    @pulumi.getter(name="ispCode")
    def isp_code(self) -> pulumi.Input[str]:
        """
        The code of the Internet provider service (ISP) node to monitor.
        """
        return pulumi.get(self, "isp_code")

    @isp_code.setter
    def isp_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "isp_code", value)


