# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccessStrategyDefaultAddrPoolArgs',
    'AccessStrategyDefaultAddrPoolArgsDict',
    'AccessStrategyFailoverAddrPoolArgs',
    'AccessStrategyFailoverAddrPoolArgsDict',
    'AccessStrategyLineArgs',
    'AccessStrategyLineArgsDict',
    'AddressPoolAddressArgs',
    'AddressPoolAddressArgsDict',
    'CustomLineIpSegmentListArgs',
    'CustomLineIpSegmentListArgsDict',
    'GtmInstanceAlertConfigArgs',
    'GtmInstanceAlertConfigArgsDict',
    'MonitorConfigIspCityNodeArgs',
    'MonitorConfigIspCityNodeArgsDict',
]

MYPY = False

if not MYPY:
    class AccessStrategyDefaultAddrPoolArgsDict(TypedDict):
        addr_pool_id: pulumi.Input[builtins.str]
        """
        The ID of the address pool in the primary address pool group.
        """
        lba_weight: NotRequired[pulumi.Input[builtins.int]]
        """
        The weight of the address pool in the primary address pool group.
        """
elif False:
    AccessStrategyDefaultAddrPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessStrategyDefaultAddrPoolArgs:
    def __init__(__self__, *,
                 addr_pool_id: pulumi.Input[builtins.str],
                 lba_weight: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] addr_pool_id: The ID of the address pool in the primary address pool group.
        :param pulumi.Input[builtins.int] lba_weight: The weight of the address pool in the primary address pool group.
        """
        pulumi.set(__self__, "addr_pool_id", addr_pool_id)
        if lba_weight is not None:
            pulumi.set(__self__, "lba_weight", lba_weight)

    @property
    @pulumi.getter(name="addrPoolId")
    def addr_pool_id(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the address pool in the primary address pool group.
        """
        return pulumi.get(self, "addr_pool_id")

    @addr_pool_id.setter
    def addr_pool_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "addr_pool_id", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The weight of the address pool in the primary address pool group.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lba_weight", value)


if not MYPY:
    class AccessStrategyFailoverAddrPoolArgsDict(TypedDict):
        addr_pool_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the address pool in the secondary address pool group.
        """
        lba_weight: NotRequired[pulumi.Input[builtins.int]]
        """
        The weight of the address pool in the secondary address pool group.
        """
elif False:
    AccessStrategyFailoverAddrPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessStrategyFailoverAddrPoolArgs:
    def __init__(__self__, *,
                 addr_pool_id: Optional[pulumi.Input[builtins.str]] = None,
                 lba_weight: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] addr_pool_id: The ID of the address pool in the secondary address pool group.
        :param pulumi.Input[builtins.int] lba_weight: The weight of the address pool in the secondary address pool group.
        """
        if addr_pool_id is not None:
            pulumi.set(__self__, "addr_pool_id", addr_pool_id)
        if lba_weight is not None:
            pulumi.set(__self__, "lba_weight", lba_weight)

    @property
    @pulumi.getter(name="addrPoolId")
    def addr_pool_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the address pool in the secondary address pool group.
        """
        return pulumi.get(self, "addr_pool_id")

    @addr_pool_id.setter
    def addr_pool_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "addr_pool_id", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The weight of the address pool in the secondary address pool group.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lba_weight", value)


if not MYPY:
    class AccessStrategyLineArgsDict(TypedDict):
        line_code: NotRequired[pulumi.Input[builtins.str]]
        """
        The line code of the source region.
        """
elif False:
    AccessStrategyLineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessStrategyLineArgs:
    def __init__(__self__, *,
                 line_code: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] line_code: The line code of the source region.
        """
        if line_code is not None:
            pulumi.set(__self__, "line_code", line_code)

    @property
    @pulumi.getter(name="lineCode")
    def line_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The line code of the source region.
        """
        return pulumi.get(self, "line_code")

    @line_code.setter
    def line_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "line_code", value)


if not MYPY:
    class AddressPoolAddressArgsDict(TypedDict):
        address: pulumi.Input[builtins.str]
        """
        The address that you want to add to the address pool.
        """
        attribute_info: pulumi.Input[builtins.str]
        """
        The source region of the address. expressed as a JSON string. The structure is as follows:
        * `LineCodes`: List of home lineCodes.
        * `lineCodeRectifyType`: The rectification type of the line code. Default value: `AUTO`. Valid values: `NO_NEED`: no need for rectification. `RECTIFIED`: rectified. `AUTO`: automatic rectification.
        """
        mode: pulumi.Input[builtins.str]
        """
        The type of the address. Valid values:`SMART`, `ONLINE` and `OFFLINE`.
        """
        lba_weight: NotRequired[pulumi.Input[builtins.int]]
        """
        The weight of the address. **NOTE:** The attribute is valid when the attribute `lba_strategy` is `RATIO`.
        """
        remark: NotRequired[pulumi.Input[builtins.str]]
        """
        The description of the address.
        """
elif False:
    AddressPoolAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressPoolAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[builtins.str],
                 attribute_info: pulumi.Input[builtins.str],
                 mode: pulumi.Input[builtins.str],
                 lba_weight: Optional[pulumi.Input[builtins.int]] = None,
                 remark: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] address: The address that you want to add to the address pool.
        :param pulumi.Input[builtins.str] attribute_info: The source region of the address. expressed as a JSON string. The structure is as follows:
               * `LineCodes`: List of home lineCodes.
               * `lineCodeRectifyType`: The rectification type of the line code. Default value: `AUTO`. Valid values: `NO_NEED`: no need for rectification. `RECTIFIED`: rectified. `AUTO`: automatic rectification.
        :param pulumi.Input[builtins.str] mode: The type of the address. Valid values:`SMART`, `ONLINE` and `OFFLINE`.
        :param pulumi.Input[builtins.int] lba_weight: The weight of the address. **NOTE:** The attribute is valid when the attribute `lba_strategy` is `RATIO`.
        :param pulumi.Input[builtins.str] remark: The description of the address.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "attribute_info", attribute_info)
        pulumi.set(__self__, "mode", mode)
        if lba_weight is not None:
            pulumi.set(__self__, "lba_weight", lba_weight)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[builtins.str]:
        """
        The address that you want to add to the address pool.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="attributeInfo")
    def attribute_info(self) -> pulumi.Input[builtins.str]:
        """
        The source region of the address. expressed as a JSON string. The structure is as follows:
        * `LineCodes`: List of home lineCodes.
        * `lineCodeRectifyType`: The rectification type of the line code. Default value: `AUTO`. Valid values: `NO_NEED`: no need for rectification. `RECTIFIED`: rectified. `AUTO`: automatic rectification.
        """
        return pulumi.get(self, "attribute_info")

    @attribute_info.setter
    def attribute_info(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "attribute_info", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.str]:
        """
        The type of the address. Valid values:`SMART`, `ONLINE` and `OFFLINE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="lbaWeight")
    def lba_weight(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The weight of the address. **NOTE:** The attribute is valid when the attribute `lba_strategy` is `RATIO`.
        """
        return pulumi.get(self, "lba_weight")

    @lba_weight.setter
    def lba_weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lba_weight", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the address.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remark", value)


if not MYPY:
    class CustomLineIpSegmentListArgsDict(TypedDict):
        end_ip: pulumi.Input[builtins.str]
        """
        The end IP address of the CIDR block.
        """
        start_ip: pulumi.Input[builtins.str]
        """
        The start IP address of the CIDR block.
        """
elif False:
    CustomLineIpSegmentListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomLineIpSegmentListArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[builtins.str],
                 start_ip: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] end_ip: The end IP address of the CIDR block.
        :param pulumi.Input[builtins.str] start_ip: The start IP address of the CIDR block.
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[builtins.str]:
        """
        The end IP address of the CIDR block.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[builtins.str]:
        """
        The start IP address of the CIDR block.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "start_ip", value)


if not MYPY:
    class GtmInstanceAlertConfigArgsDict(TypedDict):
        dingtalk_notice: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        """
        email_notice: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to configure mail notification. Valid values: `true`, `false`.
        """
        notice_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The Alarm Event Type.
        - `ADDR_ALERT`: Address not available.
        - `ADDR_RESUME`: Address Recovery available.
        - `ADDR_POOL_GROUP_UNAVAILABLE`: Address pool collection not available.
        - `ADDR_POOL_GROUP_AVAILABLE`: Address pool collection recovery available.
        - `ACCESS_STRATEGY_POOL_GROUP_SWITCH`: Primary/standby address pool switch.
        - `MONITOR_NODE_IP_CHANGE`: Monitoring node IP address changes.
        """
        sms_notice: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to configure SMS notification. Valid values: `true`, `false`.
        """
elif False:
    GtmInstanceAlertConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmInstanceAlertConfigArgs:
    def __init__(__self__, *,
                 dingtalk_notice: Optional[pulumi.Input[builtins.bool]] = None,
                 email_notice: Optional[pulumi.Input[builtins.bool]] = None,
                 notice_type: Optional[pulumi.Input[builtins.str]] = None,
                 sms_notice: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] dingtalk_notice: Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        :param pulumi.Input[builtins.bool] email_notice: Whether to configure mail notification. Valid values: `true`, `false`.
        :param pulumi.Input[builtins.str] notice_type: The Alarm Event Type.
               - `ADDR_ALERT`: Address not available.
               - `ADDR_RESUME`: Address Recovery available.
               - `ADDR_POOL_GROUP_UNAVAILABLE`: Address pool collection not available.
               - `ADDR_POOL_GROUP_AVAILABLE`: Address pool collection recovery available.
               - `ACCESS_STRATEGY_POOL_GROUP_SWITCH`: Primary/standby address pool switch.
               - `MONITOR_NODE_IP_CHANGE`: Monitoring node IP address changes.
        :param pulumi.Input[builtins.bool] sms_notice: Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        if dingtalk_notice is not None:
            pulumi.set(__self__, "dingtalk_notice", dingtalk_notice)
        if email_notice is not None:
            pulumi.set(__self__, "email_notice", email_notice)
        if notice_type is not None:
            pulumi.set(__self__, "notice_type", notice_type)
        if sms_notice is not None:
            pulumi.set(__self__, "sms_notice", sms_notice)

    @property
    @pulumi.getter(name="dingtalkNotice")
    def dingtalk_notice(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to configure DingTalk notifications. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "dingtalk_notice")

    @dingtalk_notice.setter
    def dingtalk_notice(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dingtalk_notice", value)

    @property
    @pulumi.getter(name="emailNotice")
    def email_notice(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to configure mail notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "email_notice")

    @email_notice.setter
    def email_notice(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "email_notice", value)

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Alarm Event Type.
        - `ADDR_ALERT`: Address not available.
        - `ADDR_RESUME`: Address Recovery available.
        - `ADDR_POOL_GROUP_UNAVAILABLE`: Address pool collection not available.
        - `ADDR_POOL_GROUP_AVAILABLE`: Address pool collection recovery available.
        - `ACCESS_STRATEGY_POOL_GROUP_SWITCH`: Primary/standby address pool switch.
        - `MONITOR_NODE_IP_CHANGE`: Monitoring node IP address changes.
        """
        return pulumi.get(self, "notice_type")

    @notice_type.setter
    def notice_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "notice_type", value)

    @property
    @pulumi.getter(name="smsNotice")
    def sms_notice(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to configure SMS notification. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "sms_notice")

    @sms_notice.setter
    def sms_notice(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sms_notice", value)


if not MYPY:
    class MonitorConfigIspCityNodeArgsDict(TypedDict):
        city_code: pulumi.Input[builtins.str]
        """
        The code of the city node to monitor.
        """
        isp_code: pulumi.Input[builtins.str]
        """
        The code of the Internet provider service (ISP) node to monitor.
        """
elif False:
    MonitorConfigIspCityNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MonitorConfigIspCityNodeArgs:
    def __init__(__self__, *,
                 city_code: pulumi.Input[builtins.str],
                 isp_code: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] city_code: The code of the city node to monitor.
        :param pulumi.Input[builtins.str] isp_code: The code of the Internet provider service (ISP) node to monitor.
        """
        pulumi.set(__self__, "city_code", city_code)
        pulumi.set(__self__, "isp_code", isp_code)

    @property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> pulumi.Input[builtins.str]:
        """
        The code of the city node to monitor.
        """
        return pulumi.get(self, "city_code")

    @city_code.setter
    def city_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "city_code", value)

    @property
    @pulumi.getter(name="ispCode")
    def isp_code(self) -> pulumi.Input[builtins.str]:
        """
        The code of the Internet provider service (ISP) node to monitor.
        """
        return pulumi.get(self, "isp_code")

    @isp_code.setter
    def isp_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "isp_code", value)


