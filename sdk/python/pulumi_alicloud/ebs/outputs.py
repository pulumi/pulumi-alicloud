# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDedicatedBlockStorageClustersClusterResult',
    'GetDiskReplicaGroupsGroupResult',
    'GetDiskReplicaPairsPairResult',
    'GetRegionsRegionResult',
    'GetRegionsRegionZoneResult',
]

@pulumi.output_type
class GetDedicatedBlockStorageClustersClusterResult(dict):
    def __init__(__self__, *,
                 available_capacity: str,
                 category: str,
                 create_time: str,
                 dedicated_block_storage_cluster_id: str,
                 dedicated_block_storage_cluster_name: str,
                 delivery_capacity: str,
                 description: str,
                 expired_time: str,
                 id: str,
                 performance_level: str,
                 resource_group_id: str,
                 status: str,
                 supported_category: str,
                 total_capacity: str,
                 type: str,
                 used_capacity: str,
                 zone_id: str):
        """
        :param str available_capacity: The available capacity of the dedicated block storage cluster. Unit: GiB.
        :param str category: The type of cloud disk that can be created by a dedicated block storage cluster.
        :param str create_time: The creation time of the resource
        :param str dedicated_block_storage_cluster_id: The first ID of the resource
        :param str dedicated_block_storage_cluster_name: The name of the resource
        :param str delivery_capacity: Capacity to be delivered in GB.
        :param str description: The description of the dedicated block storage cluster.
        :param str expired_time: The expiration time of the dedicated block storage cluster, in the Unix timestamp format, in seconds.
        :param str performance_level: Cloud disk performance level, possible values:-PL0.-PL1.-PL2.-PL3.> Only valid in SupportedCategory = cloud_essd.
        :param str resource_group_id: The ID of the resource group
        :param str status: The status of the resource
        :param str supported_category: This parameter is not supported.
        :param str total_capacity: The total capacity of the dedicated block storage cluster. Unit: GiB.
        :param str type: The dedicated block storage cluster performance type. Possible values:-Standard: Basic type. This type of dedicated block storage cluster can create an ESSD PL0 cloud disk.-Premium: performance type. This type of dedicated block storage cluster can create an ESSD PL1 cloud disk.
        :param str used_capacity: The used (created disk) capacity of the current cluster, in GB
        :param str zone_id: The zone ID  of the resource
        """
        GetDedicatedBlockStorageClustersClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available_capacity=available_capacity,
            category=category,
            create_time=create_time,
            dedicated_block_storage_cluster_id=dedicated_block_storage_cluster_id,
            dedicated_block_storage_cluster_name=dedicated_block_storage_cluster_name,
            delivery_capacity=delivery_capacity,
            description=description,
            expired_time=expired_time,
            id=id,
            performance_level=performance_level,
            resource_group_id=resource_group_id,
            status=status,
            supported_category=supported_category,
            total_capacity=total_capacity,
            type=type,
            used_capacity=used_capacity,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available_capacity: Optional[str] = None,
             category: Optional[str] = None,
             create_time: Optional[str] = None,
             dedicated_block_storage_cluster_id: Optional[str] = None,
             dedicated_block_storage_cluster_name: Optional[str] = None,
             delivery_capacity: Optional[str] = None,
             description: Optional[str] = None,
             expired_time: Optional[str] = None,
             id: Optional[str] = None,
             performance_level: Optional[str] = None,
             resource_group_id: Optional[str] = None,
             status: Optional[str] = None,
             supported_category: Optional[str] = None,
             total_capacity: Optional[str] = None,
             type: Optional[str] = None,
             used_capacity: Optional[str] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if available_capacity is None and 'availableCapacity' in kwargs:
            available_capacity = kwargs['availableCapacity']
        if available_capacity is None:
            raise TypeError("Missing 'available_capacity' argument")
        if category is None:
            raise TypeError("Missing 'category' argument")
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if create_time is None:
            raise TypeError("Missing 'create_time' argument")
        if dedicated_block_storage_cluster_id is None and 'dedicatedBlockStorageClusterId' in kwargs:
            dedicated_block_storage_cluster_id = kwargs['dedicatedBlockStorageClusterId']
        if dedicated_block_storage_cluster_id is None:
            raise TypeError("Missing 'dedicated_block_storage_cluster_id' argument")
        if dedicated_block_storage_cluster_name is None and 'dedicatedBlockStorageClusterName' in kwargs:
            dedicated_block_storage_cluster_name = kwargs['dedicatedBlockStorageClusterName']
        if dedicated_block_storage_cluster_name is None:
            raise TypeError("Missing 'dedicated_block_storage_cluster_name' argument")
        if delivery_capacity is None and 'deliveryCapacity' in kwargs:
            delivery_capacity = kwargs['deliveryCapacity']
        if delivery_capacity is None:
            raise TypeError("Missing 'delivery_capacity' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if expired_time is None and 'expiredTime' in kwargs:
            expired_time = kwargs['expiredTime']
        if expired_time is None:
            raise TypeError("Missing 'expired_time' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if performance_level is None and 'performanceLevel' in kwargs:
            performance_level = kwargs['performanceLevel']
        if performance_level is None:
            raise TypeError("Missing 'performance_level' argument")
        if resource_group_id is None and 'resourceGroupId' in kwargs:
            resource_group_id = kwargs['resourceGroupId']
        if resource_group_id is None:
            raise TypeError("Missing 'resource_group_id' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if supported_category is None and 'supportedCategory' in kwargs:
            supported_category = kwargs['supportedCategory']
        if supported_category is None:
            raise TypeError("Missing 'supported_category' argument")
        if total_capacity is None and 'totalCapacity' in kwargs:
            total_capacity = kwargs['totalCapacity']
        if total_capacity is None:
            raise TypeError("Missing 'total_capacity' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if used_capacity is None and 'usedCapacity' in kwargs:
            used_capacity = kwargs['usedCapacity']
        if used_capacity is None:
            raise TypeError("Missing 'used_capacity' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("available_capacity", available_capacity)
        _setter("category", category)
        _setter("create_time", create_time)
        _setter("dedicated_block_storage_cluster_id", dedicated_block_storage_cluster_id)
        _setter("dedicated_block_storage_cluster_name", dedicated_block_storage_cluster_name)
        _setter("delivery_capacity", delivery_capacity)
        _setter("description", description)
        _setter("expired_time", expired_time)
        _setter("id", id)
        _setter("performance_level", performance_level)
        _setter("resource_group_id", resource_group_id)
        _setter("status", status)
        _setter("supported_category", supported_category)
        _setter("total_capacity", total_capacity)
        _setter("type", type)
        _setter("used_capacity", used_capacity)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="availableCapacity")
    def available_capacity(self) -> str:
        """
        The available capacity of the dedicated block storage cluster. Unit: GiB.
        """
        return pulumi.get(self, "available_capacity")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The type of cloud disk that can be created by a dedicated block storage cluster.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the resource
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedBlockStorageClusterId")
    def dedicated_block_storage_cluster_id(self) -> str:
        """
        The first ID of the resource
        """
        return pulumi.get(self, "dedicated_block_storage_cluster_id")

    @property
    @pulumi.getter(name="dedicatedBlockStorageClusterName")
    def dedicated_block_storage_cluster_name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "dedicated_block_storage_cluster_name")

    @property
    @pulumi.getter(name="deliveryCapacity")
    def delivery_capacity(self) -> str:
        """
        Capacity to be delivered in GB.
        """
        return pulumi.get(self, "delivery_capacity")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the dedicated block storage cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> str:
        """
        The expiration time of the dedicated block storage cluster, in the Unix timestamp format, in seconds.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="performanceLevel")
    def performance_level(self) -> str:
        """
        Cloud disk performance level, possible values:-PL0.-PL1.-PL2.-PL3.> Only valid in SupportedCategory = cloud_essd.
        """
        return pulumi.get(self, "performance_level")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> str:
        """
        The ID of the resource group
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportedCategory")
    def supported_category(self) -> str:
        """
        This parameter is not supported.
        """
        return pulumi.get(self, "supported_category")

    @property
    @pulumi.getter(name="totalCapacity")
    def total_capacity(self) -> str:
        """
        The total capacity of the dedicated block storage cluster. Unit: GiB.
        """
        return pulumi.get(self, "total_capacity")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The dedicated block storage cluster performance type. Possible values:-Standard: Basic type. This type of dedicated block storage cluster can create an ESSD PL0 cloud disk.-Premium: performance type. This type of dedicated block storage cluster can create an ESSD PL1 cloud disk.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> str:
        """
        The used (created disk) capacity of the current cluster, in GB
        """
        return pulumi.get(self, "used_capacity")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone ID  of the resource
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetDiskReplicaGroupsGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 destination_region_id: str,
                 destination_zone_id: str,
                 group_name: str,
                 id: str,
                 last_recover_point: str,
                 primary_region: str,
                 primary_zone: str,
                 replica_group_id: str,
                 rpo: int,
                 site: str,
                 source_region_id: str,
                 source_zone_id: str,
                 standby_region: str,
                 standby_zone: str,
                 status: str):
        """
        :param str description: The description of the consistent replication group.
        :param str destination_region_id: The ID of the region to which the disaster recovery site belongs.
        :param str destination_zone_id: The ID of the zone to which the disaster recovery site belongs.
        :param str group_name: Consistent replication group name.
        :param str id: The ID of the Disk Replica Group.
        :param str primary_region: The initial source region of the replication group.
        :param str primary_zone: The initial source available area of the replication group.
        :param str replica_group_id: The ID of the consistent replication group.
        :param int rpo: The recovery point objective (RPO) of the replication pair-consistent group.
        :param str site: Site information sources for replication pairs and consistent replication groups.
        :param str source_region_id: The ID of the region to which the production site belongs.
        :param str source_zone_id: The ID of the zone to which the production site belongs.
        :param str standby_region: The initial destination region of the replication group.
        :param str standby_zone: The initial destination zone of the replication group.
        :param str status: The status of the consistent replication group. Possible values:
        """
        GetDiskReplicaGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            destination_region_id=destination_region_id,
            destination_zone_id=destination_zone_id,
            group_name=group_name,
            id=id,
            last_recover_point=last_recover_point,
            primary_region=primary_region,
            primary_zone=primary_zone,
            replica_group_id=replica_group_id,
            rpo=rpo,
            site=site,
            source_region_id=source_region_id,
            source_zone_id=source_zone_id,
            standby_region=standby_region,
            standby_zone=standby_zone,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             destination_region_id: Optional[str] = None,
             destination_zone_id: Optional[str] = None,
             group_name: Optional[str] = None,
             id: Optional[str] = None,
             last_recover_point: Optional[str] = None,
             primary_region: Optional[str] = None,
             primary_zone: Optional[str] = None,
             replica_group_id: Optional[str] = None,
             rpo: Optional[int] = None,
             site: Optional[str] = None,
             source_region_id: Optional[str] = None,
             source_zone_id: Optional[str] = None,
             standby_region: Optional[str] = None,
             standby_zone: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if destination_region_id is None and 'destinationRegionId' in kwargs:
            destination_region_id = kwargs['destinationRegionId']
        if destination_region_id is None:
            raise TypeError("Missing 'destination_region_id' argument")
        if destination_zone_id is None and 'destinationZoneId' in kwargs:
            destination_zone_id = kwargs['destinationZoneId']
        if destination_zone_id is None:
            raise TypeError("Missing 'destination_zone_id' argument")
        if group_name is None and 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if group_name is None:
            raise TypeError("Missing 'group_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if last_recover_point is None and 'lastRecoverPoint' in kwargs:
            last_recover_point = kwargs['lastRecoverPoint']
        if last_recover_point is None:
            raise TypeError("Missing 'last_recover_point' argument")
        if primary_region is None and 'primaryRegion' in kwargs:
            primary_region = kwargs['primaryRegion']
        if primary_region is None:
            raise TypeError("Missing 'primary_region' argument")
        if primary_zone is None and 'primaryZone' in kwargs:
            primary_zone = kwargs['primaryZone']
        if primary_zone is None:
            raise TypeError("Missing 'primary_zone' argument")
        if replica_group_id is None and 'replicaGroupId' in kwargs:
            replica_group_id = kwargs['replicaGroupId']
        if replica_group_id is None:
            raise TypeError("Missing 'replica_group_id' argument")
        if rpo is None:
            raise TypeError("Missing 'rpo' argument")
        if site is None:
            raise TypeError("Missing 'site' argument")
        if source_region_id is None and 'sourceRegionId' in kwargs:
            source_region_id = kwargs['sourceRegionId']
        if source_region_id is None:
            raise TypeError("Missing 'source_region_id' argument")
        if source_zone_id is None and 'sourceZoneId' in kwargs:
            source_zone_id = kwargs['sourceZoneId']
        if source_zone_id is None:
            raise TypeError("Missing 'source_zone_id' argument")
        if standby_region is None and 'standbyRegion' in kwargs:
            standby_region = kwargs['standbyRegion']
        if standby_region is None:
            raise TypeError("Missing 'standby_region' argument")
        if standby_zone is None and 'standbyZone' in kwargs:
            standby_zone = kwargs['standbyZone']
        if standby_zone is None:
            raise TypeError("Missing 'standby_zone' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("description", description)
        _setter("destination_region_id", destination_region_id)
        _setter("destination_zone_id", destination_zone_id)
        _setter("group_name", group_name)
        _setter("id", id)
        _setter("last_recover_point", last_recover_point)
        _setter("primary_region", primary_region)
        _setter("primary_zone", primary_zone)
        _setter("replica_group_id", replica_group_id)
        _setter("rpo", rpo)
        _setter("site", site)
        _setter("source_region_id", source_region_id)
        _setter("source_zone_id", source_zone_id)
        _setter("standby_region", standby_region)
        _setter("standby_zone", standby_zone)
        _setter("status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the consistent replication group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationRegionId")
    def destination_region_id(self) -> str:
        """
        The ID of the region to which the disaster recovery site belongs.
        """
        return pulumi.get(self, "destination_region_id")

    @property
    @pulumi.getter(name="destinationZoneId")
    def destination_zone_id(self) -> str:
        """
        The ID of the zone to which the disaster recovery site belongs.
        """
        return pulumi.get(self, "destination_zone_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Consistent replication group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Disk Replica Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRecoverPoint")
    def last_recover_point(self) -> str:
        return pulumi.get(self, "last_recover_point")

    @property
    @pulumi.getter(name="primaryRegion")
    def primary_region(self) -> str:
        """
        The initial source region of the replication group.
        """
        return pulumi.get(self, "primary_region")

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> str:
        """
        The initial source available area of the replication group.
        """
        return pulumi.get(self, "primary_zone")

    @property
    @pulumi.getter(name="replicaGroupId")
    def replica_group_id(self) -> str:
        """
        The ID of the consistent replication group.
        """
        return pulumi.get(self, "replica_group_id")

    @property
    @pulumi.getter
    def rpo(self) -> int:
        """
        The recovery point objective (RPO) of the replication pair-consistent group.
        """
        return pulumi.get(self, "rpo")

    @property
    @pulumi.getter
    def site(self) -> str:
        """
        Site information sources for replication pairs and consistent replication groups.
        """
        return pulumi.get(self, "site")

    @property
    @pulumi.getter(name="sourceRegionId")
    def source_region_id(self) -> str:
        """
        The ID of the region to which the production site belongs.
        """
        return pulumi.get(self, "source_region_id")

    @property
    @pulumi.getter(name="sourceZoneId")
    def source_zone_id(self) -> str:
        """
        The ID of the zone to which the production site belongs.
        """
        return pulumi.get(self, "source_zone_id")

    @property
    @pulumi.getter(name="standbyRegion")
    def standby_region(self) -> str:
        """
        The initial destination region of the replication group.
        """
        return pulumi.get(self, "standby_region")

    @property
    @pulumi.getter(name="standbyZone")
    def standby_zone(self) -> str:
        """
        The initial destination zone of the replication group.
        """
        return pulumi.get(self, "standby_zone")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the consistent replication group. Possible values:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDiskReplicaPairsPairResult(dict):
    def __init__(__self__, *,
                 bandwidth: str,
                 description: str,
                 destination_disk_id: str,
                 destination_region_id: str,
                 destination_zone_id: str,
                 disk_id: str,
                 id: str,
                 pair_name: str,
                 payment_type: str,
                 replica_pair_id: str,
                 resource_group_id: str,
                 rpo: str,
                 source_zone_id: str,
                 status: str):
        """
        :param str bandwidth: The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
        :param str description: The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with' http:// 'or' https.
        :param str destination_disk_id: The ID of the standby disk.
        :param str destination_region_id: The ID of the region to which the disaster recovery site belongs.
        :param str destination_zone_id: The ID of the zone to which the disaster recovery site belongs.
        :param str disk_id: The ID of the primary disk.
        :param str pair_name: The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
        :param str payment_type: The payment type of the resource.
        :param str replica_pair_id: The first ID of the resource
        :param str resource_group_id: The ID of the resource group
        :param str rpo: The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
        :param str source_zone_id: The ID of the zone to which the production site belongs.
        :param str status: The status of the resource.
        """
        GetDiskReplicaPairsPairResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth=bandwidth,
            description=description,
            destination_disk_id=destination_disk_id,
            destination_region_id=destination_region_id,
            destination_zone_id=destination_zone_id,
            disk_id=disk_id,
            id=id,
            pair_name=pair_name,
            payment_type=payment_type,
            replica_pair_id=replica_pair_id,
            resource_group_id=resource_group_id,
            rpo=rpo,
            source_zone_id=source_zone_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth: Optional[str] = None,
             description: Optional[str] = None,
             destination_disk_id: Optional[str] = None,
             destination_region_id: Optional[str] = None,
             destination_zone_id: Optional[str] = None,
             disk_id: Optional[str] = None,
             id: Optional[str] = None,
             pair_name: Optional[str] = None,
             payment_type: Optional[str] = None,
             replica_pair_id: Optional[str] = None,
             resource_group_id: Optional[str] = None,
             rpo: Optional[str] = None,
             source_zone_id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bandwidth is None:
            raise TypeError("Missing 'bandwidth' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if destination_disk_id is None and 'destinationDiskId' in kwargs:
            destination_disk_id = kwargs['destinationDiskId']
        if destination_disk_id is None:
            raise TypeError("Missing 'destination_disk_id' argument")
        if destination_region_id is None and 'destinationRegionId' in kwargs:
            destination_region_id = kwargs['destinationRegionId']
        if destination_region_id is None:
            raise TypeError("Missing 'destination_region_id' argument")
        if destination_zone_id is None and 'destinationZoneId' in kwargs:
            destination_zone_id = kwargs['destinationZoneId']
        if destination_zone_id is None:
            raise TypeError("Missing 'destination_zone_id' argument")
        if disk_id is None and 'diskId' in kwargs:
            disk_id = kwargs['diskId']
        if disk_id is None:
            raise TypeError("Missing 'disk_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if pair_name is None and 'pairName' in kwargs:
            pair_name = kwargs['pairName']
        if pair_name is None:
            raise TypeError("Missing 'pair_name' argument")
        if payment_type is None and 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if payment_type is None:
            raise TypeError("Missing 'payment_type' argument")
        if replica_pair_id is None and 'replicaPairId' in kwargs:
            replica_pair_id = kwargs['replicaPairId']
        if replica_pair_id is None:
            raise TypeError("Missing 'replica_pair_id' argument")
        if resource_group_id is None and 'resourceGroupId' in kwargs:
            resource_group_id = kwargs['resourceGroupId']
        if resource_group_id is None:
            raise TypeError("Missing 'resource_group_id' argument")
        if rpo is None:
            raise TypeError("Missing 'rpo' argument")
        if source_zone_id is None and 'sourceZoneId' in kwargs:
            source_zone_id = kwargs['sourceZoneId']
        if source_zone_id is None:
            raise TypeError("Missing 'source_zone_id' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("bandwidth", bandwidth)
        _setter("description", description)
        _setter("destination_disk_id", destination_disk_id)
        _setter("destination_region_id", destination_region_id)
        _setter("destination_zone_id", destination_zone_id)
        _setter("disk_id", disk_id)
        _setter("id", id)
        _setter("pair_name", pair_name)
        _setter("payment_type", payment_type)
        _setter("replica_pair_id", replica_pair_id)
        _setter("resource_group_id", resource_group_id)
        _setter("rpo", rpo)
        _setter("source_zone_id", source_zone_id)
        _setter("status", status)

    @property
    @pulumi.getter
    def bandwidth(self) -> str:
        """
        The bandwidth for asynchronous data replication between cloud disks. The unit is Kbps. Value range:-10240 Kbps: equal to 10 Mbps.-20480 Kbps: equal to 20 Mbps.-51200 Kbps: equal to 50 Mbps.-102400 Kbps: equal to 100 Mbps.Default value: 10240.This parameter cannot be specified when the ChargeType value is POSTPAY. The system value is 0, which indicates that the disk is dynamically allocated according to data write changes during asynchronous replication.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the asynchronous replication relationship. 2 to 256 English or Chinese characters in length and cannot start with' http:// 'or' https.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationDiskId")
    def destination_disk_id(self) -> str:
        """
        The ID of the standby disk.
        """
        return pulumi.get(self, "destination_disk_id")

    @property
    @pulumi.getter(name="destinationRegionId")
    def destination_region_id(self) -> str:
        """
        The ID of the region to which the disaster recovery site belongs.
        """
        return pulumi.get(self, "destination_region_id")

    @property
    @pulumi.getter(name="destinationZoneId")
    def destination_zone_id(self) -> str:
        """
        The ID of the zone to which the disaster recovery site belongs.
        """
        return pulumi.get(self, "destination_zone_id")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        The ID of the primary disk.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pairName")
    def pair_name(self) -> str:
        """
        The name of the asynchronous replication relationship. The length must be 2 to 128 characters in length and must start with a letter or Chinese name. It cannot start with http:// or https. It can contain Chinese, English, numbers, half-width colons (:), underscores (_), half-width periods (.), or dashes (-).
        """
        return pulumi.get(self, "pair_name")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The payment type of the resource.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter(name="replicaPairId")
    def replica_pair_id(self) -> str:
        """
        The first ID of the resource
        """
        return pulumi.get(self, "replica_pair_id")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> str:
        """
        The ID of the resource group
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter
    def rpo(self) -> str:
        """
        The RPO value set by the consistency group in seconds. Currently only 900 seconds are supported.
        """
        return pulumi.get(self, "rpo")

    @property
    @pulumi.getter(name="sourceZoneId")
    def source_zone_id(self) -> str:
        """
        The ID of the zone to which the production site belongs.
        """
        return pulumi.get(self, "source_zone_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 region_id: str,
                 zones: Sequence['outputs.GetRegionsRegionZoneResult']):
        """
        :param str region_id: The ID of the region.
        :param Sequence['GetRegionsRegionZoneArgs'] zones: A list of Ebs Zones.
        """
        GetRegionsRegionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region_id=region_id,
            zones=zones,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region_id: Optional[str] = None,
             zones: Optional[Sequence['outputs.GetRegionsRegionZoneResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if region_id is None and 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if region_id is None:
            raise TypeError("Missing 'region_id' argument")
        if zones is None:
            raise TypeError("Missing 'zones' argument")

        _setter("region_id", region_id)
        _setter("zones", zones)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetRegionsRegionZoneResult']:
        """
        A list of Ebs Zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetRegionsRegionZoneResult(dict):
    def __init__(__self__, *,
                 zone_id: str):
        """
        :param str zone_id: The ID of the zone.
        """
        GetRegionsRegionZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The ID of the zone.
        """
        return pulumi.get(self, "zone_id")


