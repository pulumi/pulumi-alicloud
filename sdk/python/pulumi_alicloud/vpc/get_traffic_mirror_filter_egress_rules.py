# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrafficMirrorFilterEgressRulesResult',
    'AwaitableGetTrafficMirrorFilterEgressRulesResult',
    'get_traffic_mirror_filter_egress_rules',
    'get_traffic_mirror_filter_egress_rules_output',
]

@pulumi.output_type
class GetTrafficMirrorFilterEgressRulesResult:
    """
    A collection of values returned by getTrafficMirrorFilterEgressRules.
    """
    def __init__(__self__, id=None, ids=None, output_file=None, rules=None, status=None, traffic_mirror_filter_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if traffic_mirror_filter_id and not isinstance(traffic_mirror_filter_id, str):
            raise TypeError("Expected argument 'traffic_mirror_filter_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetTrafficMirrorFilterEgressRulesRuleResult']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> str:
        return pulumi.get(self, "traffic_mirror_filter_id")


class AwaitableGetTrafficMirrorFilterEgressRulesResult(GetTrafficMirrorFilterEgressRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficMirrorFilterEgressRulesResult(
            id=self.id,
            ids=self.ids,
            output_file=self.output_file,
            rules=self.rules,
            status=self.status,
            traffic_mirror_filter_id=self.traffic_mirror_filter_id)


def get_traffic_mirror_filter_egress_rules(ids: Optional[Sequence[str]] = None,
                                           output_file: Optional[str] = None,
                                           status: Optional[str] = None,
                                           traffic_mirror_filter_id: Optional[str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficMirrorFilterEgressRulesResult:
    """
    This data source provides the Vpc Traffic Mirror Filter Egress Rules of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.140.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.vpc.get_traffic_mirror_filter_egress_rules(traffic_mirror_filter_id="example_traffic_mirror_filter_id",
        ids=["example_id"])
    pulumi.export("vpcTrafficMirrorFilterEgressRuleId1", ids.rules[0].id)
    status = alicloud.vpc.get_traffic_mirror_filter_egress_rules(traffic_mirror_filter_id="example_traffic_mirror_filter_id",
        ids=["example_id"],
        status="Created")
    pulumi.export("vpcTrafficMirrorFilterEgressRuleId2", status.rules[0].id)
    ```


    :param Sequence[str] ids: A list of Traffic Mirror Filter Egress Rule IDs.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the resource. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
    :param str traffic_mirror_filter_id: The ID of the filter associated with the outbound rule.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['outputFile'] = output_file
    __args__['status'] = status
    __args__['trafficMirrorFilterId'] = traffic_mirror_filter_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('alicloud:vpc/getTrafficMirrorFilterEgressRules:getTrafficMirrorFilterEgressRules', __args__, opts=opts, typ=GetTrafficMirrorFilterEgressRulesResult).value

    return AwaitableGetTrafficMirrorFilterEgressRulesResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rules=pulumi.get(__ret__, 'rules'),
        status=pulumi.get(__ret__, 'status'),
        traffic_mirror_filter_id=pulumi.get(__ret__, 'traffic_mirror_filter_id'))


@_utilities.lift_output_func(get_traffic_mirror_filter_egress_rules)
def get_traffic_mirror_filter_egress_rules_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                  output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                  status: Optional[pulumi.Input[Optional[str]]] = None,
                                                  traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficMirrorFilterEgressRulesResult]:
    """
    This data source provides the Vpc Traffic Mirror Filter Egress Rules of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.140.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.vpc.get_traffic_mirror_filter_egress_rules(traffic_mirror_filter_id="example_traffic_mirror_filter_id",
        ids=["example_id"])
    pulumi.export("vpcTrafficMirrorFilterEgressRuleId1", ids.rules[0].id)
    status = alicloud.vpc.get_traffic_mirror_filter_egress_rules(traffic_mirror_filter_id="example_traffic_mirror_filter_id",
        ids=["example_id"],
        status="Created")
    pulumi.export("vpcTrafficMirrorFilterEgressRuleId2", status.rules[0].id)
    ```


    :param Sequence[str] ids: A list of Traffic Mirror Filter Egress Rule IDs.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the resource. Valid values:`Creating`, `Created`, `Modifying` and `Deleting`.
    :param str traffic_mirror_filter_id: The ID of the filter associated with the outbound rule.
    """
    ...
