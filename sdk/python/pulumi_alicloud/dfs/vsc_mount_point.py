# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VscMountPointArgs', 'VscMountPoint']

@pulumi.input_type
class VscMountPointArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 alias_prefix: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VscMountPoint resource.
        :param pulumi.Input[str] file_system_id: The ID of the HDFS file system resource associated with the VSC mount point.
        :param pulumi.Input[str] alias_prefix: Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        :param pulumi.Input[str] description: The description of the Mount point.  The length is 0 to 100 characters.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        if alias_prefix is not None:
            pulumi.set(__self__, "alias_prefix", alias_prefix)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        The ID of the HDFS file system resource associated with the VSC mount point.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="aliasPrefix")
    def alias_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        """
        return pulumi.get(self, "alias_prefix")

    @alias_prefix.setter
    def alias_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_prefix", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Mount point.  The length is 0 to 100 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _VscMountPointState:
    def __init__(__self__, *,
                 alias_prefix: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input['VscMountPointInstanceArgs']]]] = None,
                 mount_point_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VscMountPoint resources.
        :param pulumi.Input[str] alias_prefix: Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        :param pulumi.Input[str] description: The description of the Mount point.  The length is 0 to 100 characters.
        :param pulumi.Input[str] file_system_id: The ID of the HDFS file system resource associated with the VSC mount point.
        :param pulumi.Input[Sequence[pulumi.Input['VscMountPointInstanceArgs']]] instances: The collection of ECS instances on which the HDFS file system is mounted.
        :param pulumi.Input[str] mount_point_id: VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        """
        if alias_prefix is not None:
            pulumi.set(__self__, "alias_prefix", alias_prefix)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if mount_point_id is not None:
            pulumi.set(__self__, "mount_point_id", mount_point_id)

    @property
    @pulumi.getter(name="aliasPrefix")
    def alias_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        """
        return pulumi.get(self, "alias_prefix")

    @alias_prefix.setter
    def alias_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_prefix", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Mount point.  The length is 0 to 100 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the HDFS file system resource associated with the VSC mount point.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VscMountPointInstanceArgs']]]]:
        """
        The collection of ECS instances on which the HDFS file system is mounted.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VscMountPointInstanceArgs']]]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> Optional[pulumi.Input[str]]:
        """
        VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        """
        return pulumi.get(self, "mount_point_id")

    @mount_point_id.setter
    def mount_point_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point_id", value)


class VscMountPoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_prefix: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a DFS Vsc Mount Point resource. VSC mount point.

        For information about DFS Vsc Mount Point and how to use it, see [What is Vsc Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).

        > **NOTE:** Available since v1.218.0.

        ## Example Usage

        Basic Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_alicloud as alicloud
        import pulumi_random as random

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default_random_integer = random.RandomInteger("defaultRandomInteger",
            min=10000,
            max=99999)
        default_zones = alicloud.dfs.get_zones()
        zone_id = default_zones.zones[0].zone_id
        storage_type = default_zones.zones[0].options[0].storage_type
        default_file_system = alicloud.dfs.FileSystem("defaultFileSystem",
            protocol_type="HDFS",
            description=name,
            file_system_name=default_random_integer.result.apply(lambda result: f"{name}-{result}"),
            space_capacity=1024,
            throughput_mode="Provisioned",
            provisioned_throughput_in_mi_bps=512,
            storage_type=storage_type,
            zone_id=zone_id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DFS Vsc Mount Point can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:dfs/vscMountPoint:VscMountPoint example <file_system_id>:<mount_point_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias_prefix: Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        :param pulumi.Input[str] description: The description of the Mount point.  The length is 0 to 100 characters.
        :param pulumi.Input[str] file_system_id: The ID of the HDFS file system resource associated with the VSC mount point.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VscMountPointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a DFS Vsc Mount Point resource. VSC mount point.

        For information about DFS Vsc Mount Point and how to use it, see [What is Vsc Mount Point](https://www.alibabacloud.com/help/en/aibaba-cloud-storage-services/latest/apsara-file-storage-for-hdfs).

        > **NOTE:** Available since v1.218.0.

        ## Example Usage

        Basic Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_alicloud as alicloud
        import pulumi_random as random

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default_random_integer = random.RandomInteger("defaultRandomInteger",
            min=10000,
            max=99999)
        default_zones = alicloud.dfs.get_zones()
        zone_id = default_zones.zones[0].zone_id
        storage_type = default_zones.zones[0].options[0].storage_type
        default_file_system = alicloud.dfs.FileSystem("defaultFileSystem",
            protocol_type="HDFS",
            description=name,
            file_system_name=default_random_integer.result.apply(lambda result: f"{name}-{result}"),
            space_capacity=1024,
            throughput_mode="Provisioned",
            provisioned_throughput_in_mi_bps=512,
            storage_type=storage_type,
            zone_id=zone_id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DFS Vsc Mount Point can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:dfs/vscMountPoint:VscMountPoint example <file_system_id>:<mount_point_id>
        ```

        :param str resource_name: The name of the resource.
        :param VscMountPointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VscMountPointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_prefix: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VscMountPointArgs.__new__(VscMountPointArgs)

            __props__.__dict__["alias_prefix"] = alias_prefix
            __props__.__dict__["description"] = description
            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            __props__.__dict__["instances"] = None
            __props__.__dict__["mount_point_id"] = None
        super(VscMountPoint, __self__).__init__(
            'alicloud:dfs/vscMountPoint:VscMountPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias_prefix: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VscMountPointInstanceArgs']]]]] = None,
            mount_point_id: Optional[pulumi.Input[str]] = None) -> 'VscMountPoint':
        """
        Get an existing VscMountPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias_prefix: Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        :param pulumi.Input[str] description: The description of the Mount point.  The length is 0 to 100 characters.
        :param pulumi.Input[str] file_system_id: The ID of the HDFS file system resource associated with the VSC mount point.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VscMountPointInstanceArgs']]]] instances: The collection of ECS instances on which the HDFS file system is mounted.
        :param pulumi.Input[str] mount_point_id: VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VscMountPointState.__new__(_VscMountPointState)

        __props__.__dict__["alias_prefix"] = alias_prefix
        __props__.__dict__["description"] = description
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["instances"] = instances
        __props__.__dict__["mount_point_id"] = mount_point_id
        return VscMountPoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aliasPrefix")
    def alias_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        Mount point alias prefix, which is used as the prefix for generating VSC mount point aliases.
        """
        return pulumi.get(self, "alias_prefix")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Mount point.  The length is 0 to 100 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        """
        The ID of the HDFS file system resource associated with the VSC mount point.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.VscMountPointInstance']]:
        """
        The collection of ECS instances on which the HDFS file system is mounted.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> pulumi.Output[str]:
        """
        VSC mount point ID, which is the unique identifier of the vsc mount point and is used to access the associated HDFS file system.
        """
        return pulumi.get(self, "mount_point_id")

