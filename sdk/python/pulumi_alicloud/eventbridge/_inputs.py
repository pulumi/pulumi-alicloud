# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApiDestinationHttpApiParametersArgs',
    'ConnectionAuthParametersArgs',
    'ConnectionAuthParametersApiKeyAuthParametersArgs',
    'ConnectionAuthParametersBasicAuthParametersArgs',
    'ConnectionAuthParametersOauthParametersArgs',
    'ConnectionAuthParametersOauthParametersClientParametersArgs',
    'ConnectionAuthParametersOauthParametersOauthHttpParametersArgs',
    'ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs',
    'ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs',
    'ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs',
    'ConnectionNetworkParametersArgs',
    'RuleTargetArgs',
    'RuleTargetDeadLetterQueueArgs',
    'RuleTargetParamListArgs',
]

@pulumi.input_type
class ApiDestinationHttpApiParametersArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 method: pulumi.Input[str]):
        """
        :param pulumi.Input[str] endpoint: The endpoint of the API destination.
        :param pulumi.Input[str] method: The HTTP request method. Valid values: `GET`, `POST`, `HEAD`, `DELETE`, `PUT`, `PATCH`.
        """
        ApiDestinationHttpApiParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            method=method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             method: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("endpoint", endpoint)
        _setter("method", method)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of the API destination.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        The HTTP request method. Valid values: `GET`, `POST`, `HEAD`, `DELETE`, `PUT`, `PATCH`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class ConnectionAuthParametersArgs:
    def __init__(__self__, *,
                 api_key_auth_parameters: Optional[pulumi.Input['ConnectionAuthParametersApiKeyAuthParametersArgs']] = None,
                 authorization_type: Optional[pulumi.Input[str]] = None,
                 basic_auth_parameters: Optional[pulumi.Input['ConnectionAuthParametersBasicAuthParametersArgs']] = None,
                 oauth_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersArgs']] = None):
        """
        :param pulumi.Input['ConnectionAuthParametersApiKeyAuthParametersArgs'] api_key_auth_parameters: The parameters that are configured for API key authentication. See `api_key_auth_parameters` below.
        :param pulumi.Input[str] authorization_type: The type of the authentication. Valid values: `API_KEY_AUTH`, `BASIC_AUTH`, `OAUTH_AUTH`.
        :param pulumi.Input['ConnectionAuthParametersBasicAuthParametersArgs'] basic_auth_parameters: The parameters that are configured for basic authentication. See `basic_auth_parameters` below.
        :param pulumi.Input['ConnectionAuthParametersOauthParametersArgs'] oauth_parameters: The parameters that are configured for OAuth authentication. See `oauth_parameters` below.
        """
        ConnectionAuthParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_key_auth_parameters=api_key_auth_parameters,
            authorization_type=authorization_type,
            basic_auth_parameters=basic_auth_parameters,
            oauth_parameters=oauth_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_key_auth_parameters: Optional[pulumi.Input['ConnectionAuthParametersApiKeyAuthParametersArgs']] = None,
             authorization_type: Optional[pulumi.Input[str]] = None,
             basic_auth_parameters: Optional[pulumi.Input['ConnectionAuthParametersBasicAuthParametersArgs']] = None,
             oauth_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiKeyAuthParameters' in kwargs:
            api_key_auth_parameters = kwargs['apiKeyAuthParameters']
        if 'authorizationType' in kwargs:
            authorization_type = kwargs['authorizationType']
        if 'basicAuthParameters' in kwargs:
            basic_auth_parameters = kwargs['basicAuthParameters']
        if 'oauthParameters' in kwargs:
            oauth_parameters = kwargs['oauthParameters']

        if api_key_auth_parameters is not None:
            _setter("api_key_auth_parameters", api_key_auth_parameters)
        if authorization_type is not None:
            _setter("authorization_type", authorization_type)
        if basic_auth_parameters is not None:
            _setter("basic_auth_parameters", basic_auth_parameters)
        if oauth_parameters is not None:
            _setter("oauth_parameters", oauth_parameters)

    @property
    @pulumi.getter(name="apiKeyAuthParameters")
    def api_key_auth_parameters(self) -> Optional[pulumi.Input['ConnectionAuthParametersApiKeyAuthParametersArgs']]:
        """
        The parameters that are configured for API key authentication. See `api_key_auth_parameters` below.
        """
        return pulumi.get(self, "api_key_auth_parameters")

    @api_key_auth_parameters.setter
    def api_key_auth_parameters(self, value: Optional[pulumi.Input['ConnectionAuthParametersApiKeyAuthParametersArgs']]):
        pulumi.set(self, "api_key_auth_parameters", value)

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the authentication. Valid values: `API_KEY_AUTH`, `BASIC_AUTH`, `OAUTH_AUTH`.
        """
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_type", value)

    @property
    @pulumi.getter(name="basicAuthParameters")
    def basic_auth_parameters(self) -> Optional[pulumi.Input['ConnectionAuthParametersBasicAuthParametersArgs']]:
        """
        The parameters that are configured for basic authentication. See `basic_auth_parameters` below.
        """
        return pulumi.get(self, "basic_auth_parameters")

    @basic_auth_parameters.setter
    def basic_auth_parameters(self, value: Optional[pulumi.Input['ConnectionAuthParametersBasicAuthParametersArgs']]):
        pulumi.set(self, "basic_auth_parameters", value)

    @property
    @pulumi.getter(name="oauthParameters")
    def oauth_parameters(self) -> Optional[pulumi.Input['ConnectionAuthParametersOauthParametersArgs']]:
        """
        The parameters that are configured for OAuth authentication. See `oauth_parameters` below.
        """
        return pulumi.get(self, "oauth_parameters")

    @oauth_parameters.setter
    def oauth_parameters(self, value: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersArgs']]):
        pulumi.set(self, "oauth_parameters", value)


@pulumi.input_type
class ConnectionAuthParametersApiKeyAuthParametersArgs:
    def __init__(__self__, *,
                 api_key_name: Optional[pulumi.Input[str]] = None,
                 api_key_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_key_name: The name of the API key.
        :param pulumi.Input[str] api_key_value: The value of the API key.
        """
        ConnectionAuthParametersApiKeyAuthParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_key_name=api_key_name,
            api_key_value=api_key_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_key_name: Optional[pulumi.Input[str]] = None,
             api_key_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiKeyName' in kwargs:
            api_key_name = kwargs['apiKeyName']
        if 'apiKeyValue' in kwargs:
            api_key_value = kwargs['apiKeyValue']

        if api_key_name is not None:
            _setter("api_key_name", api_key_name)
        if api_key_value is not None:
            _setter("api_key_value", api_key_value)

    @property
    @pulumi.getter(name="apiKeyName")
    def api_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the API key.
        """
        return pulumi.get(self, "api_key_name")

    @api_key_name.setter
    def api_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_name", value)

    @property
    @pulumi.getter(name="apiKeyValue")
    def api_key_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the API key.
        """
        return pulumi.get(self, "api_key_value")

    @api_key_value.setter
    def api_key_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_value", value)


@pulumi.input_type
class ConnectionAuthParametersBasicAuthParametersArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: The password for basic authentication.
        :param pulumi.Input[str] username: The username for basic authentication.
        """
        ConnectionAuthParametersBasicAuthParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if password is not None:
            _setter("password", password)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for basic authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username for basic authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersArgs:
    def __init__(__self__, *,
                 authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 client_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersClientParametersArgs']] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 oauth_http_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersArgs']] = None):
        """
        :param pulumi.Input[str] authorization_endpoint: The IP address of the authorized endpoint.
        :param pulumi.Input['ConnectionAuthParametersOauthParametersClientParametersArgs'] client_parameters: The parameters that are configured for the client. See `client_parameters` below.
        :param pulumi.Input[str] http_method: The HTTP request method. Valid values: `GET`, `POST`, `HEAD`, `DELETE`, `PUT`, `PATCH`.
        :param pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersArgs'] oauth_http_parameters: The request parameters that are configured for OAuth authentication. See `oauth_http_parameters` below.
        """
        ConnectionAuthParametersOauthParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization_endpoint=authorization_endpoint,
            client_parameters=client_parameters,
            http_method=http_method,
            oauth_http_parameters=oauth_http_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization_endpoint: Optional[pulumi.Input[str]] = None,
             client_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersClientParametersArgs']] = None,
             http_method: Optional[pulumi.Input[str]] = None,
             oauth_http_parameters: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authorizationEndpoint' in kwargs:
            authorization_endpoint = kwargs['authorizationEndpoint']
        if 'clientParameters' in kwargs:
            client_parameters = kwargs['clientParameters']
        if 'httpMethod' in kwargs:
            http_method = kwargs['httpMethod']
        if 'oauthHttpParameters' in kwargs:
            oauth_http_parameters = kwargs['oauthHttpParameters']

        if authorization_endpoint is not None:
            _setter("authorization_endpoint", authorization_endpoint)
        if client_parameters is not None:
            _setter("client_parameters", client_parameters)
        if http_method is not None:
            _setter("http_method", http_method)
        if oauth_http_parameters is not None:
            _setter("oauth_http_parameters", oauth_http_parameters)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the authorized endpoint.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientParameters")
    def client_parameters(self) -> Optional[pulumi.Input['ConnectionAuthParametersOauthParametersClientParametersArgs']]:
        """
        The parameters that are configured for the client. See `client_parameters` below.
        """
        return pulumi.get(self, "client_parameters")

    @client_parameters.setter
    def client_parameters(self, value: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersClientParametersArgs']]):
        pulumi.set(self, "client_parameters", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP request method. Valid values: `GET`, `POST`, `HEAD`, `DELETE`, `PUT`, `PATCH`.
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="oauthHttpParameters")
    def oauth_http_parameters(self) -> Optional[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersArgs']]:
        """
        The request parameters that are configured for OAuth authentication. See `oauth_http_parameters` below.
        """
        return pulumi.get(self, "oauth_http_parameters")

    @oauth_http_parameters.setter
    def oauth_http_parameters(self, value: Optional[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersArgs']]):
        pulumi.set(self, "oauth_http_parameters", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersClientParametersArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: The ID of the client.
        :param pulumi.Input[str] client_secret: The AccessKey secret of the client.
        """
        ConnectionAuthParametersOauthParametersClientParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            client_secret=client_secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']

        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret is not None:
            _setter("client_secret", client_secret)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKey secret of the client.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersOauthHttpParametersArgs:
    def __init__(__self__, *,
                 body_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs']]]] = None,
                 header_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs']]]] = None,
                 query_string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs']]] body_parameters: The parameters that are configured for the request body. See `body_parameters` below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs']]] header_parameters: The parameters that are configured for the request header. See `header_parameters` below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs']]] query_string_parameters: The parameters that are configured for the request path. See `query_string_parameters` below.
        """
        ConnectionAuthParametersOauthParametersOauthHttpParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_parameters=body_parameters,
            header_parameters=header_parameters,
            query_string_parameters=query_string_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs']]]] = None,
             header_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs']]]] = None,
             query_string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bodyParameters' in kwargs:
            body_parameters = kwargs['bodyParameters']
        if 'headerParameters' in kwargs:
            header_parameters = kwargs['headerParameters']
        if 'queryStringParameters' in kwargs:
            query_string_parameters = kwargs['queryStringParameters']

        if body_parameters is not None:
            _setter("body_parameters", body_parameters)
        if header_parameters is not None:
            _setter("header_parameters", header_parameters)
        if query_string_parameters is not None:
            _setter("query_string_parameters", query_string_parameters)

    @property
    @pulumi.getter(name="bodyParameters")
    def body_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs']]]]:
        """
        The parameters that are configured for the request body. See `body_parameters` below.
        """
        return pulumi.get(self, "body_parameters")

    @body_parameters.setter
    def body_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs']]]]):
        pulumi.set(self, "body_parameters", value)

    @property
    @pulumi.getter(name="headerParameters")
    def header_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs']]]]:
        """
        The parameters that are configured for the request header. See `header_parameters` below.
        """
        return pulumi.get(self, "header_parameters")

    @header_parameters.setter
    def header_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs']]]]):
        pulumi.set(self, "header_parameters", value)

    @property
    @pulumi.getter(name="queryStringParameters")
    def query_string_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs']]]]:
        """
        The parameters that are configured for the request path. See `query_string_parameters` below.
        """
        return pulumi.get(self, "query_string_parameters")

    @query_string_parameters.setter
    def query_string_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs']]]]):
        pulumi.set(self, "query_string_parameters", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs:
    def __init__(__self__, *,
                 is_value_secret: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] is_value_secret: Specifies whether to enable authentication.
        :param pulumi.Input[str] key: The key of the request path.
        :param pulumi.Input[str] value: The key of the request path.
        """
        ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_value_secret=is_value_secret,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_value_secret: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isValueSecret' in kwargs:
            is_value_secret = kwargs['isValueSecret']

        if is_value_secret is not None:
            _setter("is_value_secret", is_value_secret)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="isValueSecret")
    def is_value_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable authentication.
        """
        return pulumi.get(self, "is_value_secret")

    @is_value_secret.setter
    def is_value_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_value_secret", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs:
    def __init__(__self__, *,
                 is_value_secret: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] is_value_secret: Specifies whether to enable authentication.
        :param pulumi.Input[str] key: The key of the request path.
        :param pulumi.Input[str] value: The key of the request path.
        """
        ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_value_secret=is_value_secret,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_value_secret: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isValueSecret' in kwargs:
            is_value_secret = kwargs['isValueSecret']

        if is_value_secret is not None:
            _setter("is_value_secret", is_value_secret)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="isValueSecret")
    def is_value_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable authentication.
        """
        return pulumi.get(self, "is_value_secret")

    @is_value_secret.setter
    def is_value_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_value_secret", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs:
    def __init__(__self__, *,
                 is_value_secret: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] is_value_secret: Specifies whether to enable authentication.
        :param pulumi.Input[str] key: The key of the request path.
        :param pulumi.Input[str] value: The key of the request path.
        """
        ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_value_secret=is_value_secret,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_value_secret: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isValueSecret' in kwargs:
            is_value_secret = kwargs['isValueSecret']

        if is_value_secret is not None:
            _setter("is_value_secret", is_value_secret)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="isValueSecret")
    def is_value_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable authentication.
        """
        return pulumi.get(self, "is_value_secret")

    @is_value_secret.setter
    def is_value_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_value_secret", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the request path.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConnectionNetworkParametersArgs:
    def __init__(__self__, *,
                 network_type: pulumi.Input[str],
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitche_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] network_type: The network type. Valid values: `PublicNetwork`, `PrivateNetwork`. **NOTE:** If you set `network_type` to `PrivateNetwork`, you must configure `vpc_id`, `vswitche_id`, and `security_group_id`.
        :param pulumi.Input[str] security_group_id: The ID of the security group.
        :param pulumi.Input[str] vpc_id: The ID of the VPC.
        :param pulumi.Input[str] vswitche_id: The ID of the VSwitch.
        """
        ConnectionNetworkParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_type=network_type,
            security_group_id=security_group_id,
            vpc_id=vpc_id,
            vswitche_id=vswitche_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_type: pulumi.Input[str],
             security_group_id: Optional[pulumi.Input[str]] = None,
             vpc_id: Optional[pulumi.Input[str]] = None,
             vswitche_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if 'securityGroupId' in kwargs:
            security_group_id = kwargs['securityGroupId']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vswitcheId' in kwargs:
            vswitche_id = kwargs['vswitcheId']

        _setter("network_type", network_type)
        if security_group_id is not None:
            _setter("security_group_id", security_group_id)
        if vpc_id is not None:
            _setter("vpc_id", vpc_id)
        if vswitche_id is not None:
            _setter("vswitche_id", vswitche_id)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Input[str]:
        """
        The network type. Valid values: `PublicNetwork`, `PrivateNetwork`. **NOTE:** If you set `network_type` to `PrivateNetwork`, you must configure `vpc_id`, `vswitche_id`, and `security_group_id`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vswitcheId")
    def vswitche_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VSwitch.
        """
        return pulumi.get(self, "vswitche_id")

    @vswitche_id.setter
    def vswitche_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitche_id", value)


@pulumi.input_type
class RuleTargetArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 param_lists: pulumi.Input[Sequence[pulumi.Input['RuleTargetParamListArgs']]],
                 target_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 dead_letter_queue: Optional[pulumi.Input['RuleTargetDeadLetterQueueArgs']] = None,
                 push_retry_strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint: The endpoint of target.
        :param pulumi.Input[Sequence[pulumi.Input['RuleTargetParamListArgs']]] param_lists: A list of param. See `param_list` below.
        :param pulumi.Input[str] target_id: The ID of target.
        :param pulumi.Input[str] type: The type of target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
               **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
        :param pulumi.Input['RuleTargetDeadLetterQueueArgs'] dead_letter_queue: Dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
        :param pulumi.Input[str] push_retry_strategy: The retry policy that is used to push the event. Valid values:
        """
        RuleTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            param_lists=param_lists,
            target_id=target_id,
            type=type,
            dead_letter_queue=dead_letter_queue,
            push_retry_strategy=push_retry_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             param_lists: pulumi.Input[Sequence[pulumi.Input['RuleTargetParamListArgs']]],
             target_id: pulumi.Input[str],
             type: pulumi.Input[str],
             dead_letter_queue: Optional[pulumi.Input['RuleTargetDeadLetterQueueArgs']] = None,
             push_retry_strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramLists' in kwargs:
            param_lists = kwargs['paramLists']
        if 'targetId' in kwargs:
            target_id = kwargs['targetId']
        if 'deadLetterQueue' in kwargs:
            dead_letter_queue = kwargs['deadLetterQueue']
        if 'pushRetryStrategy' in kwargs:
            push_retry_strategy = kwargs['pushRetryStrategy']

        _setter("endpoint", endpoint)
        _setter("param_lists", param_lists)
        _setter("target_id", target_id)
        _setter("type", type)
        if dead_letter_queue is not None:
            _setter("dead_letter_queue", dead_letter_queue)
        if push_retry_strategy is not None:
            _setter("push_retry_strategy", push_retry_strategy)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of target.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="paramLists")
    def param_lists(self) -> pulumi.Input[Sequence[pulumi.Input['RuleTargetParamListArgs']]]:
        """
        A list of param. See `param_list` below.
        """
        return pulumi.get(self, "param_lists")

    @param_lists.setter
    def param_lists(self, value: pulumi.Input[Sequence[pulumi.Input['RuleTargetParamListArgs']]]):
        pulumi.set(self, "param_lists", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[str]:
        """
        The ID of target.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of target. Valid values: `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.dingtalk`, `acs.eventbridge`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fc.function`, `acs.fnf`, `acs.k8s`, `acs.mail`, `acs.mns.queue`, `acs.mns.topic`, `acs.openapi`, `acs.rabbitmq`, `acs.rds.mysql`, `acs.rocketmq`, `acs.sae`, `acs.sls`, `acs.sms`, `http`,`https` and `mysql`.
        **NOTE:** From version 1.208.1, `type` can be set to `acs.alikafka`, `acs.api.destination`, `acs.arms.loki`, `acs.datahub`, `acs.eventbridge.olap`, `acs.eventbus.SLSCloudLens`, `acs.fnf`, `acs.k8s`, `acs.openapi`, `acs.rds.mysql`, `acs.sae`, `acs.sls`, `mysql`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="deadLetterQueue")
    def dead_letter_queue(self) -> Optional[pulumi.Input['RuleTargetDeadLetterQueueArgs']]:
        """
        Dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See `dead_letter_queue` below.
        """
        return pulumi.get(self, "dead_letter_queue")

    @dead_letter_queue.setter
    def dead_letter_queue(self, value: Optional[pulumi.Input['RuleTargetDeadLetterQueueArgs']]):
        pulumi.set(self, "dead_letter_queue", value)

    @property
    @pulumi.getter(name="pushRetryStrategy")
    def push_retry_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The retry policy that is used to push the event. Valid values:
        """
        return pulumi.get(self, "push_retry_strategy")

    @push_retry_strategy.setter
    def push_retry_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "push_retry_strategy", value)


@pulumi.input_type
class RuleTargetDeadLetterQueueArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] arn: The srn of the dead letter queue.
        """
        RuleTargetDeadLetterQueueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if arn is not None:
            _setter("arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        The srn of the dead letter queue.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class RuleTargetParamListArgs:
    def __init__(__self__, *,
                 form: pulumi.Input[str],
                 resource_key: pulumi.Input[str],
                 template: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] form: The format of param. Valid values: `ORIGINAL`, `TEMPLATE`, `JSONPATH`, `CONSTANT`.
        :param pulumi.Input[str] resource_key: The resource key of param.  For more information, see [Event target parameters](https://www.alibabacloud.com/help/en/eventbridge/latest/event-target-parameters)
        :param pulumi.Input[str] template: The template of param.
        :param pulumi.Input[str] value: The value of param.
               
               > **NOTE:** There exists a potential diff error that the backend service will return a default param as following:
               
               ```python
               import pulumi
               ```
               
               In order to fix the diff, from version 1.160.0,
               this resource has removed the param which `resource_key = "IsBase64Encode"` and `value = "false"`.
               If you want to set `resource_key = "IsBase64Encode"`, please avoid to set `value = "false"`.
        """
        RuleTargetParamListArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            form=form,
            resource_key=resource_key,
            template=template,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             form: pulumi.Input[str],
             resource_key: pulumi.Input[str],
             template: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'resourceKey' in kwargs:
            resource_key = kwargs['resourceKey']

        _setter("form", form)
        _setter("resource_key", resource_key)
        if template is not None:
            _setter("template", template)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def form(self) -> pulumi.Input[str]:
        """
        The format of param. Valid values: `ORIGINAL`, `TEMPLATE`, `JSONPATH`, `CONSTANT`.
        """
        return pulumi.get(self, "form")

    @form.setter
    def form(self, value: pulumi.Input[str]):
        pulumi.set(self, "form", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> pulumi.Input[str]:
        """
        The resource key of param.  For more information, see [Event target parameters](https://www.alibabacloud.com/help/en/eventbridge/latest/event-target-parameters)
        """
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        The template of param.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of param.

        > **NOTE:** There exists a potential diff error that the backend service will return a default param as following:

        ```python
        import pulumi
        ```

        In order to fix the diff, from version 1.160.0,
        this resource has removed the param which `resource_key = "IsBase64Encode"` and `value = "false"`.
        If you want to set `resource_key = "IsBase64Encode"`, please avoid to set `value = "false"`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


