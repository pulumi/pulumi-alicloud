# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecretParametersResult',
    'AwaitableGetSecretParametersResult',
    'get_secret_parameters',
    'get_secret_parameters_output',
]

@pulumi.output_type
class GetSecretParametersResult:
    """
    A collection of values returned by getSecretParameters.
    """
    def __init__(__self__, enable_details=None, id=None, ids=None, name_regex=None, names=None, output_file=None, parameters=None, resource_group_id=None, secret_parameter_name=None, sort_field=None, sort_order=None, tags=None, with_decryption=None):
        if enable_details and not isinstance(enable_details, bool):
            raise TypeError("Expected argument 'enable_details' to be a bool")
        pulumi.set(__self__, "enable_details", enable_details)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if parameters and not isinstance(parameters, list):
            raise TypeError("Expected argument 'parameters' to be a list")
        pulumi.set(__self__, "parameters", parameters)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if secret_parameter_name and not isinstance(secret_parameter_name, str):
            raise TypeError("Expected argument 'secret_parameter_name' to be a str")
        pulumi.set(__self__, "secret_parameter_name", secret_parameter_name)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if sort_order and not isinstance(sort_order, str):
            raise TypeError("Expected argument 'sort_order' to be a str")
        pulumi.set(__self__, "sort_order", sort_order)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if with_decryption and not isinstance(with_decryption, bool):
            raise TypeError("Expected argument 'with_decryption' to be a bool")
        pulumi.set(__self__, "with_decryption", with_decryption)

    @property
    @pulumi.getter(name="enableDetails")
    def enable_details(self) -> Optional[bool]:
        return pulumi.get(self, "enable_details")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        """
        A list of Secret Parameter names.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetSecretParametersParameterResult']:
        """
        A list of Oos Secret Parameters. Each element contains the following attributes:
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[str]:
        """
        The ID of the Resource Group.
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter(name="secretParameterName")
    def secret_parameter_name(self) -> Optional[str]:
        """
        The name of the encryption parameter.
        """
        return pulumi.get(self, "secret_parameter_name")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[str]:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[str]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        The tags of the parameter.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="withDecryption")
    def with_decryption(self) -> Optional[bool]:
        return pulumi.get(self, "with_decryption")


class AwaitableGetSecretParametersResult(GetSecretParametersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretParametersResult(
            enable_details=self.enable_details,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            parameters=self.parameters,
            resource_group_id=self.resource_group_id,
            secret_parameter_name=self.secret_parameter_name,
            sort_field=self.sort_field,
            sort_order=self.sort_order,
            tags=self.tags,
            with_decryption=self.with_decryption)


def get_secret_parameters(enable_details: Optional[bool] = None,
                          ids: Optional[Sequence[str]] = None,
                          name_regex: Optional[str] = None,
                          output_file: Optional[str] = None,
                          resource_group_id: Optional[str] = None,
                          secret_parameter_name: Optional[str] = None,
                          sort_field: Optional[str] = None,
                          sort_order: Optional[str] = None,
                          tags: Optional[Mapping[str, str]] = None,
                          with_decryption: Optional[bool] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretParametersResult:
    """
    This data source provides the Oos Secret Parameters of the current Alibaba Cloud user.

    > **NOTE:** Available since v1.147.0.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    config = pulumi.Config()
    name = config.get("name")
    if name is None:
        name = "terraform-example"
    default = alicloud.oos.SecretParameter("default",
        secret_parameter_name=name,
        value="tf-testacc-oos_secret_parameter",
        type="Secret",
        description=name,
        constraints=\"\"\"  {
        "AllowedValues": [
            "tf-testacc-oos_secret_parameter"
        ],
        "AllowedPattern": "tf-testacc-oos_secret_parameter",
        "MinLength": 1,
        "MaxLength": 100
      }
    \"\"\",
        tags={
            "Created": "TF",
            "For": "SecretParameter",
        })
    ids = alicloud.oos.get_secret_parameters_output(ids=[default.id])
    pulumi.export("oosSecretParameterId0", ids.parameters[0].id)
    ```


    :param bool enable_details: Whether to query the detailed list of resource attributes. Default value: `false`.
    :param Sequence[str] ids: A list of Secret Parameter IDs.
    :param str name_regex: A regex string to filter results by Secret Parameter name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str resource_group_id: The ID of the Resource Group.
    :param str secret_parameter_name: The name of the Secret Parameter.
    :param str sort_field: The field used to sort the query results. Valid values: `Name`, `CreatedDate`.
    :param str sort_order: The order in which the entries are sorted. Default value: `Descending`. Valid values: `Ascending`, `Descending`.
    :param Mapping[str, str] tags: A mapping of tags to assign to the resource.
    :param bool with_decryption: Specifies whether to decrypt the parameter value. Default value: `false`. **Note:** `with_decryption` takes effect only if `enable_details` is set to `true`.
    """
    __args__ = dict()
    __args__['enableDetails'] = enable_details
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['resourceGroupId'] = resource_group_id
    __args__['secretParameterName'] = secret_parameter_name
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    __args__['tags'] = tags
    __args__['withDecryption'] = with_decryption
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('alicloud:oos/getSecretParameters:getSecretParameters', __args__, opts=opts, typ=GetSecretParametersResult).value

    return AwaitableGetSecretParametersResult(
        enable_details=pulumi.get(__ret__, 'enable_details'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        names=pulumi.get(__ret__, 'names'),
        output_file=pulumi.get(__ret__, 'output_file'),
        parameters=pulumi.get(__ret__, 'parameters'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        secret_parameter_name=pulumi.get(__ret__, 'secret_parameter_name'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        sort_order=pulumi.get(__ret__, 'sort_order'),
        tags=pulumi.get(__ret__, 'tags'),
        with_decryption=pulumi.get(__ret__, 'with_decryption'))
def get_secret_parameters_output(enable_details: Optional[pulumi.Input[Optional[bool]]] = None,
                                 ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 resource_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 secret_parameter_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 sort_field: Optional[pulumi.Input[Optional[str]]] = None,
                                 sort_order: Optional[pulumi.Input[Optional[str]]] = None,
                                 tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                 with_decryption: Optional[pulumi.Input[Optional[bool]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecretParametersResult]:
    """
    This data source provides the Oos Secret Parameters of the current Alibaba Cloud user.

    > **NOTE:** Available since v1.147.0.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    config = pulumi.Config()
    name = config.get("name")
    if name is None:
        name = "terraform-example"
    default = alicloud.oos.SecretParameter("default",
        secret_parameter_name=name,
        value="tf-testacc-oos_secret_parameter",
        type="Secret",
        description=name,
        constraints=\"\"\"  {
        "AllowedValues": [
            "tf-testacc-oos_secret_parameter"
        ],
        "AllowedPattern": "tf-testacc-oos_secret_parameter",
        "MinLength": 1,
        "MaxLength": 100
      }
    \"\"\",
        tags={
            "Created": "TF",
            "For": "SecretParameter",
        })
    ids = alicloud.oos.get_secret_parameters_output(ids=[default.id])
    pulumi.export("oosSecretParameterId0", ids.parameters[0].id)
    ```


    :param bool enable_details: Whether to query the detailed list of resource attributes. Default value: `false`.
    :param Sequence[str] ids: A list of Secret Parameter IDs.
    :param str name_regex: A regex string to filter results by Secret Parameter name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str resource_group_id: The ID of the Resource Group.
    :param str secret_parameter_name: The name of the Secret Parameter.
    :param str sort_field: The field used to sort the query results. Valid values: `Name`, `CreatedDate`.
    :param str sort_order: The order in which the entries are sorted. Default value: `Descending`. Valid values: `Ascending`, `Descending`.
    :param Mapping[str, str] tags: A mapping of tags to assign to the resource.
    :param bool with_decryption: Specifies whether to decrypt the parameter value. Default value: `false`. **Note:** `with_decryption` takes effect only if `enable_details` is set to `true`.
    """
    __args__ = dict()
    __args__['enableDetails'] = enable_details
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['resourceGroupId'] = resource_group_id
    __args__['secretParameterName'] = secret_parameter_name
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    __args__['tags'] = tags
    __args__['withDecryption'] = with_decryption
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('alicloud:oos/getSecretParameters:getSecretParameters', __args__, opts=opts, typ=GetSecretParametersResult)
    return __ret__.apply(lambda __response__: GetSecretParametersResult(
        enable_details=pulumi.get(__response__, 'enable_details'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        name_regex=pulumi.get(__response__, 'name_regex'),
        names=pulumi.get(__response__, 'names'),
        output_file=pulumi.get(__response__, 'output_file'),
        parameters=pulumi.get(__response__, 'parameters'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        secret_parameter_name=pulumi.get(__response__, 'secret_parameter_name'),
        sort_field=pulumi.get(__response__, 'sort_field'),
        sort_order=pulumi.get(__response__, 'sort_order'),
        tags=pulumi.get(__response__, 'tags'),
        with_decryption=pulumi.get(__response__, 'with_decryption')))
