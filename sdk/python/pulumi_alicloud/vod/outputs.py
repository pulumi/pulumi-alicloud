# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DomainSource',
    'GetDomainsDomainResult',
    'GetDomainsDomainSourceResult',
]

@pulumi.output_type
class DomainSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceContent":
            suggest = "source_content"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "sourcePriority":
            suggest = "source_priority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_content: str,
                 source_port: str,
                 source_type: str,
                 source_priority: Optional[str] = None):
        """
        :param str source_content: The address of the origin server. You can specify an IP address or a domain name.
        :param str source_port: The port number. You can specify port 443 or 80. **Default value: 80**. If you specify port 443, Alibaba Cloud CDN communicates with the origin server over HTTPS. You can also customize a port.
        :param str source_type: The type of the origin server. Valid values:
        :param str source_priority: The priority of the origin server if multiple origin servers are specified. Valid values: `20` and `30`. **Default value: 20**. A value of 20 indicates that the origin server is the primary origin server. A value of 30 indicates that the origin server is a secondary origin server.
        """
        DomainSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_content=source_content,
            source_port=source_port,
            source_type=source_type,
            source_priority=source_priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_content: str,
             source_port: str,
             source_type: str,
             source_priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceContent' in kwargs:
            source_content = kwargs['sourceContent']
        if 'sourcePort' in kwargs:
            source_port = kwargs['sourcePort']
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']
        if 'sourcePriority' in kwargs:
            source_priority = kwargs['sourcePriority']

        _setter("source_content", source_content)
        _setter("source_port", source_port)
        _setter("source_type", source_type)
        if source_priority is not None:
            _setter("source_priority", source_priority)

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> str:
        """
        The address of the origin server. You can specify an IP address or a domain name.
        """
        return pulumi.get(self, "source_content")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        """
        The port number. You can specify port 443 or 80. **Default value: 80**. If you specify port 443, Alibaba Cloud CDN communicates with the origin server over HTTPS. You can also customize a port.
        """
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The type of the origin server. Valid values:
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourcePriority")
    def source_priority(self) -> Optional[str]:
        """
        The priority of the origin server if multiple origin servers are specified. Valid values: `20` and `30`. **Default value: 20**. A value of 20 indicates that the origin server is the primary origin server. A value of 30 indicates that the origin server is a secondary origin server.
        """
        return pulumi.get(self, "source_priority")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 cname: str,
                 description: str,
                 domain_name: str,
                 gmt_created: str,
                 gmt_modified: str,
                 id: str,
                 sand_box: str,
                 sources: Sequence['outputs.GetDomainsDomainSourceResult'],
                 ssl_protocol: str,
                 status: str):
        """
        :param str cname: The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
        :param str description: The description of the domain name for CDN.
        :param str domain_name: The domain name for CDN.
        :param str gmt_created: The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        :param str gmt_modified: The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        :param str id: The ID of the Domain. Its value is same as Queue Name.
        :param str sand_box: Indicates whether the domain name for CDN is in a sandbox environment.
        :param Sequence['GetDomainsDomainSourceArgs'] sources: The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
        :param str ssl_protocol: Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
        :param str status: The status of the resource.
        """
        GetDomainsDomainResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cname=cname,
            description=description,
            domain_name=domain_name,
            gmt_created=gmt_created,
            gmt_modified=gmt_modified,
            id=id,
            sand_box=sand_box,
            sources=sources,
            ssl_protocol=ssl_protocol,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cname: str,
             description: str,
             domain_name: str,
             gmt_created: str,
             gmt_modified: str,
             id: str,
             sand_box: str,
             sources: Sequence['outputs.GetDomainsDomainSourceResult'],
             ssl_protocol: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if 'gmtCreated' in kwargs:
            gmt_created = kwargs['gmtCreated']
        if 'gmtModified' in kwargs:
            gmt_modified = kwargs['gmtModified']
        if 'sandBox' in kwargs:
            sand_box = kwargs['sandBox']
        if 'sslProtocol' in kwargs:
            ssl_protocol = kwargs['sslProtocol']

        _setter("cname", cname)
        _setter("description", description)
        _setter("domain_name", domain_name)
        _setter("gmt_created", gmt_created)
        _setter("gmt_modified", gmt_modified)
        _setter("id", id)
        _setter("sand_box", sand_box)
        _setter("sources", sources)
        _setter("ssl_protocol", ssl_protocol)
        _setter("status", status)

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        The CNAME that is assigned to the domain name for CDN. You must add a CNAME record in the system of your Domain Name System (DNS) service provider to map the domain name for CDN to the CNAME.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the domain name for CDN.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The domain name for CDN.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="gmtCreated")
    def gmt_created(self) -> str:
        """
        The time when the domain name for CDN was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "gmt_created")

    @property
    @pulumi.getter(name="gmtModified")
    def gmt_modified(self) -> str:
        """
        The last time when the domain name for CDN was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "gmt_modified")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Domain. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sandBox")
    def sand_box(self) -> str:
        """
        Indicates whether the domain name for CDN is in a sandbox environment.
        """
        return pulumi.get(self, "sand_box")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetDomainsDomainSourceResult']:
        """
        The information about the address of the origin server. For more information about the Sources parameter, See the following `Block sources`.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="sslProtocol")
    def ssl_protocol(self) -> str:
        """
        Indicates whether the Secure Sockets Layer (SSL) certificate is enabled. Valid values: `on`,`off`.
        """
        return pulumi.get(self, "ssl_protocol")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainsDomainSourceResult(dict):
    def __init__(__self__, *,
                 source_content: str,
                 source_port: str,
                 source_priority: str,
                 source_type: str):
        GetDomainsDomainSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_content=source_content,
            source_port=source_port,
            source_priority=source_priority,
            source_type=source_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_content: str,
             source_port: str,
             source_priority: str,
             source_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceContent' in kwargs:
            source_content = kwargs['sourceContent']
        if 'sourcePort' in kwargs:
            source_port = kwargs['sourcePort']
        if 'sourcePriority' in kwargs:
            source_priority = kwargs['sourcePriority']
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']

        _setter("source_content", source_content)
        _setter("source_port", source_port)
        _setter("source_priority", source_priority)
        _setter("source_type", source_type)

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> str:
        return pulumi.get(self, "source_content")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter(name="sourcePriority")
    def source_priority(self) -> str:
        return pulumi.get(self, "source_priority")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


