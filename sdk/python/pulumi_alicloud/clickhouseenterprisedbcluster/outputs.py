# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountDmlAuthSetting',
    'ClickHouseEnterpriseDbClusterMultiZone',
]

@pulumi.output_type
class AccountDmlAuthSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ddlAuthority":
            suggest = "ddl_authority"
        elif key == "dmlAuthority":
            suggest = "dml_authority"
        elif key == "allowDatabases":
            suggest = "allow_databases"
        elif key == "allowDictionaries":
            suggest = "allow_dictionaries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountDmlAuthSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountDmlAuthSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountDmlAuthSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ddl_authority: bool,
                 dml_authority: int,
                 allow_databases: Optional[Sequence[str]] = None,
                 allow_dictionaries: Optional[Sequence[str]] = None):
        """
        :param bool ddl_authority: Whether to grant the DDL permission to the database account. Value description:
        :param int dml_authority: Whether to grant the DML permission to the database account. The values are as follows:
        :param Sequence[str] allow_databases: The list of databases that require authorization. If there are more than one, separate them with commas (,).
        :param Sequence[str] allow_dictionaries: List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
        """
        pulumi.set(__self__, "ddl_authority", ddl_authority)
        pulumi.set(__self__, "dml_authority", dml_authority)
        if allow_databases is not None:
            pulumi.set(__self__, "allow_databases", allow_databases)
        if allow_dictionaries is not None:
            pulumi.set(__self__, "allow_dictionaries", allow_dictionaries)

    @property
    @pulumi.getter(name="ddlAuthority")
    def ddl_authority(self) -> bool:
        """
        Whether to grant the DDL permission to the database account. Value description:
        """
        return pulumi.get(self, "ddl_authority")

    @property
    @pulumi.getter(name="dmlAuthority")
    def dml_authority(self) -> int:
        """
        Whether to grant the DML permission to the database account. The values are as follows:
        """
        return pulumi.get(self, "dml_authority")

    @property
    @pulumi.getter(name="allowDatabases")
    def allow_databases(self) -> Optional[Sequence[str]]:
        """
        The list of databases that require authorization. If there are more than one, separate them with commas (,).
        """
        return pulumi.get(self, "allow_databases")

    @property
    @pulumi.getter(name="allowDictionaries")
    def allow_dictionaries(self) -> Optional[Sequence[str]]:
        """
        List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
        """
        return pulumi.get(self, "allow_dictionaries")


@pulumi.output_type
class ClickHouseEnterpriseDbClusterMultiZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vswitchIds":
            suggest = "vswitch_ids"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClickHouseEnterpriseDbClusterMultiZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClickHouseEnterpriseDbClusterMultiZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClickHouseEnterpriseDbClusterMultiZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vswitch_ids: Optional[Sequence[str]] = None,
                 zone_id: Optional[str] = None):
        """
        :param Sequence[str] vswitch_ids: The vSwtichID list.
        :param str zone_id: The zone ID.
        """
        if vswitch_ids is not None:
            pulumi.set(__self__, "vswitch_ids", vswitch_ids)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Optional[Sequence[str]]:
        """
        The vSwtichID list.
        """
        return pulumi.get(self, "vswitch_ids")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")


