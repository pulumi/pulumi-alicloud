# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccountDmlAuthSettingArgs',
    'AccountDmlAuthSettingArgsDict',
    'ClickHouseEnterpriseDbClusterMultiZoneArgs',
    'ClickHouseEnterpriseDbClusterMultiZoneArgsDict',
]

MYPY = False

if not MYPY:
    class AccountDmlAuthSettingArgsDict(TypedDict):
        ddl_authority: pulumi.Input[bool]
        """
        Whether to grant the DDL permission to the database account. Value description:
        """
        dml_authority: pulumi.Input[int]
        """
        Whether to grant the DML permission to the database account. The values are as follows:
        """
        allow_databases: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of databases that require authorization. If there are more than one, separate them with commas (,).
        """
        allow_dictionaries: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
        """
elif False:
    AccountDmlAuthSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccountDmlAuthSettingArgs:
    def __init__(__self__, *,
                 ddl_authority: pulumi.Input[bool],
                 dml_authority: pulumi.Input[int],
                 allow_databases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] ddl_authority: Whether to grant the DDL permission to the database account. Value description:
        :param pulumi.Input[int] dml_authority: Whether to grant the DML permission to the database account. The values are as follows:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_databases: The list of databases that require authorization. If there are more than one, separate them with commas (,).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_dictionaries: List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
        """
        pulumi.set(__self__, "ddl_authority", ddl_authority)
        pulumi.set(__self__, "dml_authority", dml_authority)
        if allow_databases is not None:
            pulumi.set(__self__, "allow_databases", allow_databases)
        if allow_dictionaries is not None:
            pulumi.set(__self__, "allow_dictionaries", allow_dictionaries)

    @property
    @pulumi.getter(name="ddlAuthority")
    def ddl_authority(self) -> pulumi.Input[bool]:
        """
        Whether to grant the DDL permission to the database account. Value description:
        """
        return pulumi.get(self, "ddl_authority")

    @ddl_authority.setter
    def ddl_authority(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ddl_authority", value)

    @property
    @pulumi.getter(name="dmlAuthority")
    def dml_authority(self) -> pulumi.Input[int]:
        """
        Whether to grant the DML permission to the database account. The values are as follows:
        """
        return pulumi.get(self, "dml_authority")

    @dml_authority.setter
    def dml_authority(self, value: pulumi.Input[int]):
        pulumi.set(self, "dml_authority", value)

    @property
    @pulumi.getter(name="allowDatabases")
    def allow_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of databases that require authorization. If there are more than one, separate them with commas (,).
        """
        return pulumi.get(self, "allow_databases")

    @allow_databases.setter
    def allow_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_databases", value)

    @property
    @pulumi.getter(name="allowDictionaries")
    def allow_dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of dictionaries that require authorization. If there are more than one, separate them with commas (,).
        """
        return pulumi.get(self, "allow_dictionaries")

    @allow_dictionaries.setter
    def allow_dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_dictionaries", value)


if not MYPY:
    class ClickHouseEnterpriseDbClusterMultiZoneArgsDict(TypedDict):
        vswitch_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The vSwtichID list.
        """
        zone_id: NotRequired[pulumi.Input[str]]
        """
        The zone ID.
        """
elif False:
    ClickHouseEnterpriseDbClusterMultiZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClickHouseEnterpriseDbClusterMultiZoneArgs:
    def __init__(__self__, *,
                 vswitch_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vswitch_ids: The vSwtichID list.
        :param pulumi.Input[str] zone_id: The zone ID.
        """
        if vswitch_ids is not None:
            pulumi.set(__self__, "vswitch_ids", vswitch_ids)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The vSwtichID list.
        """
        return pulumi.get(self, "vswitch_ids")

    @vswitch_ids.setter
    def vswitch_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vswitch_ids", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


