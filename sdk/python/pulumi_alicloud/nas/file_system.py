# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FileSystemArgs', 'FileSystem']

@pulumi.input_type
class FileSystemArgs:
    def __init__(__self__, *,
                 protocol_type: pulumi.Input[str],
                 storage_type: pulumi.Input[str],
                 capacity: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypt_type: Optional[pulumi.Input[int]] = None,
                 file_system_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 nfs_acl: Optional[pulumi.Input['FileSystemNfsAclArgs']] = None,
                 recycle_bin: Optional[pulumi.Input['FileSystemRecycleBinArgs']] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FileSystem resource.
        :param pulumi.Input[str] protocol_type: The protocol type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
               - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
               - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        :param pulumi.Input[str] storage_type: The storage type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
               - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
               - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
               > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        :param pulumi.Input[int] capacity: The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        :param pulumi.Input[str] description: The description of the file system.
        :param pulumi.Input[int] encrypt_type: Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        :param pulumi.Input[str] file_system_type: The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        :param pulumi.Input[str] kms_key_id: The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        :param pulumi.Input['FileSystemNfsAclArgs'] nfs_acl: The NFS ACL feature of the file system. See `nfs_acl` below.
               > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input['FileSystemRecycleBinArgs'] recycle_bin: The recycle bin feature of the file system. See `recycle_bin` below.
               > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] resource_group_id: The ID of the resource group.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] vpc_id: The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] vswitch_id: The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] zone_id: The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "storage_type", storage_type)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encrypt_type is not None:
            pulumi.set(__self__, "encrypt_type", encrypt_type)
        if file_system_type is not None:
            pulumi.set(__self__, "file_system_type", file_system_type)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if nfs_acl is not None:
            pulumi.set(__self__, "nfs_acl", nfs_acl)
        if recycle_bin is not None:
            pulumi.set(__self__, "recycle_bin", recycle_bin)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Input[str]:
        """
        The protocol type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        """
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol_type", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[str]:
        """
        The storage type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the file system.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptType")
    def encrypt_type(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        """
        return pulumi.get(self, "encrypt_type")

    @encrypt_type.setter
    def encrypt_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encrypt_type", value)

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        """
        return pulumi.get(self, "file_system_type")

    @file_system_type.setter
    def file_system_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_type", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="nfsAcl")
    def nfs_acl(self) -> Optional[pulumi.Input['FileSystemNfsAclArgs']]:
        """
        The NFS ACL feature of the file system. See `nfs_acl` below.
        > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "nfs_acl")

    @nfs_acl.setter
    def nfs_acl(self, value: Optional[pulumi.Input['FileSystemNfsAclArgs']]):
        pulumi.set(self, "nfs_acl", value)

    @property
    @pulumi.getter(name="recycleBin")
    def recycle_bin(self) -> Optional[pulumi.Input['FileSystemRecycleBinArgs']]:
        """
        The recycle bin feature of the file system. See `recycle_bin` below.
        > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "recycle_bin")

    @recycle_bin.setter
    def recycle_bin(self, value: Optional[pulumi.Input['FileSystemRecycleBinArgs']]):
        pulumi.set(self, "recycle_bin", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _FileSystemState:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypt_type: Optional[pulumi.Input[int]] = None,
                 file_system_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 nfs_acl: Optional[pulumi.Input['FileSystemNfsAclArgs']] = None,
                 protocol_type: Optional[pulumi.Input[str]] = None,
                 recycle_bin: Optional[pulumi.Input['FileSystemRecycleBinArgs']] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FileSystem resources.
        :param pulumi.Input[int] capacity: The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        :param pulumi.Input[str] create_time: (Available since v1.236.0) The time when the file system was created.
        :param pulumi.Input[str] description: The description of the file system.
        :param pulumi.Input[int] encrypt_type: Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        :param pulumi.Input[str] file_system_type: The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        :param pulumi.Input[str] kms_key_id: The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        :param pulumi.Input['FileSystemNfsAclArgs'] nfs_acl: The NFS ACL feature of the file system. See `nfs_acl` below.
               > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] protocol_type: The protocol type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
               - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
               - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        :param pulumi.Input['FileSystemRecycleBinArgs'] recycle_bin: The recycle bin feature of the file system. See `recycle_bin` below.
               > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] resource_group_id: The ID of the resource group.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        :param pulumi.Input[str] status: (Available since v1.236.0) The status of the File System.
        :param pulumi.Input[str] storage_type: The storage type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
               - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
               - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
               > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] vpc_id: The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] vswitch_id: The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] zone_id: The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encrypt_type is not None:
            pulumi.set(__self__, "encrypt_type", encrypt_type)
        if file_system_type is not None:
            pulumi.set(__self__, "file_system_type", file_system_type)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if nfs_acl is not None:
            pulumi.set(__self__, "nfs_acl", nfs_acl)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)
        if recycle_bin is not None:
            pulumi.set(__self__, "recycle_bin", recycle_bin)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Available since v1.236.0) The time when the file system was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the file system.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptType")
    def encrypt_type(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        """
        return pulumi.get(self, "encrypt_type")

    @encrypt_type.setter
    def encrypt_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encrypt_type", value)

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        """
        return pulumi.get(self, "file_system_type")

    @file_system_type.setter
    def file_system_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_type", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="nfsAcl")
    def nfs_acl(self) -> Optional[pulumi.Input['FileSystemNfsAclArgs']]:
        """
        The NFS ACL feature of the file system. See `nfs_acl` below.
        > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "nfs_acl")

    @nfs_acl.setter
    def nfs_acl(self, value: Optional[pulumi.Input['FileSystemNfsAclArgs']]):
        pulumi.set(self, "nfs_acl", value)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        """
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_type", value)

    @property
    @pulumi.getter(name="recycleBin")
    def recycle_bin(self) -> Optional[pulumi.Input['FileSystemRecycleBinArgs']]:
        """
        The recycle bin feature of the file system. See `recycle_bin` below.
        > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "recycle_bin")

    @recycle_bin.setter
    def recycle_bin(self, value: Optional[pulumi.Input['FileSystemRecycleBinArgs']]):
        pulumi.set(self, "recycle_bin", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (Available since v1.236.0) The status of the File System.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class FileSystem(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypt_type: Optional[pulumi.Input[int]] = None,
                 file_system_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 nfs_acl: Optional[pulumi.Input[Union['FileSystemNfsAclArgs', 'FileSystemNfsAclArgsDict']]] = None,
                 protocol_type: Optional[pulumi.Input[str]] = None,
                 recycle_bin: Optional[pulumi.Input[Union['FileSystemRecycleBinArgs', 'FileSystemRecycleBinArgsDict']]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a File Storage (NAS) File System resource.

        For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).

        > **NOTE:** Available since v1.33.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="standard")
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="NFS",
            storage_type="Capacity",
            description=name,
            encrypt_type=1,
            file_system_type="standard",
            recycle_bin={
                "status": "Enable",
                "reserved_days": 10,
            },
            nfs_acl={
                "enabled": True,
            },
            zone_id=default.zones[0].zone_id)
        ```

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="extreme")
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="NFS",
            storage_type="standard",
            capacity=100,
            description=name,
            encrypt_type=1,
            file_system_type="extreme",
            zone_id=default.zones[0].zone_id)
        ```

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="cpfs")
        default_network = alicloud.vpc.Network("default",
            vpc_name=name,
            cidr_block="172.17.3.0/24")
        default_switch = alicloud.vpc.Switch("default",
            vswitch_name=name,
            cidr_block="172.17.3.0/24",
            vpc_id=default_network.id,
            zone_id=default.zones[1].zone_id)
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="cpfs",
            storage_type="advance_100",
            capacity=5000,
            description=name,
            file_system_type="cpfs",
            vswitch_id=default_switch.id,
            vpc_id=default_network.id,
            zone_id=default.zones[1].zone_id)
        ```

        ## Import

        File Storage (NAS) File System can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:nas/fileSystem:FileSystem example <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity: The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        :param pulumi.Input[str] description: The description of the file system.
        :param pulumi.Input[int] encrypt_type: Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        :param pulumi.Input[str] file_system_type: The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        :param pulumi.Input[str] kms_key_id: The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        :param pulumi.Input[Union['FileSystemNfsAclArgs', 'FileSystemNfsAclArgsDict']] nfs_acl: The NFS ACL feature of the file system. See `nfs_acl` below.
               > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] protocol_type: The protocol type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
               - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
               - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        :param pulumi.Input[Union['FileSystemRecycleBinArgs', 'FileSystemRecycleBinArgsDict']] recycle_bin: The recycle bin feature of the file system. See `recycle_bin` below.
               > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] resource_group_id: The ID of the resource group.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        :param pulumi.Input[str] storage_type: The storage type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
               - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
               - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
               > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] vpc_id: The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] vswitch_id: The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] zone_id: The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FileSystemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a File Storage (NAS) File System resource.

        For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).

        > **NOTE:** Available since v1.33.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="standard")
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="NFS",
            storage_type="Capacity",
            description=name,
            encrypt_type=1,
            file_system_type="standard",
            recycle_bin={
                "status": "Enable",
                "reserved_days": 10,
            },
            nfs_acl={
                "enabled": True,
            },
            zone_id=default.zones[0].zone_id)
        ```

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="extreme")
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="NFS",
            storage_type="standard",
            capacity=100,
            description=name,
            encrypt_type=1,
            file_system_type="extreme",
            zone_id=default.zones[0].zone_id)
        ```

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "terraform-example"
        default = alicloud.nas.get_zones(file_system_type="cpfs")
        default_network = alicloud.vpc.Network("default",
            vpc_name=name,
            cidr_block="172.17.3.0/24")
        default_switch = alicloud.vpc.Switch("default",
            vswitch_name=name,
            cidr_block="172.17.3.0/24",
            vpc_id=default_network.id,
            zone_id=default.zones[1].zone_id)
        default_file_system = alicloud.nas.FileSystem("default",
            protocol_type="cpfs",
            storage_type="advance_100",
            capacity=5000,
            description=name,
            file_system_type="cpfs",
            vswitch_id=default_switch.id,
            vpc_id=default_network.id,
            zone_id=default.zones[1].zone_id)
        ```

        ## Import

        File Storage (NAS) File System can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:nas/fileSystem:FileSystem example <id>
        ```

        :param str resource_name: The name of the resource.
        :param FileSystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FileSystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypt_type: Optional[pulumi.Input[int]] = None,
                 file_system_type: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 nfs_acl: Optional[pulumi.Input[Union['FileSystemNfsAclArgs', 'FileSystemNfsAclArgsDict']]] = None,
                 protocol_type: Optional[pulumi.Input[str]] = None,
                 recycle_bin: Optional[pulumi.Input[Union['FileSystemRecycleBinArgs', 'FileSystemRecycleBinArgsDict']]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FileSystemArgs.__new__(FileSystemArgs)

            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["description"] = description
            __props__.__dict__["encrypt_type"] = encrypt_type
            __props__.__dict__["file_system_type"] = file_system_type
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["nfs_acl"] = nfs_acl
            if protocol_type is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_type'")
            __props__.__dict__["protocol_type"] = protocol_type
            __props__.__dict__["recycle_bin"] = recycle_bin
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["snapshot_id"] = snapshot_id
            if storage_type is None and not opts.urn:
                raise TypeError("Missing required property 'storage_type'")
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["vswitch_id"] = vswitch_id
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
        super(FileSystem, __self__).__init__(
            'alicloud:nas/fileSystem:FileSystem',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            encrypt_type: Optional[pulumi.Input[int]] = None,
            file_system_type: Optional[pulumi.Input[str]] = None,
            kms_key_id: Optional[pulumi.Input[str]] = None,
            nfs_acl: Optional[pulumi.Input[Union['FileSystemNfsAclArgs', 'FileSystemNfsAclArgsDict']]] = None,
            protocol_type: Optional[pulumi.Input[str]] = None,
            recycle_bin: Optional[pulumi.Input[Union['FileSystemRecycleBinArgs', 'FileSystemRecycleBinArgsDict']]] = None,
            resource_group_id: Optional[pulumi.Input[str]] = None,
            snapshot_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vswitch_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'FileSystem':
        """
        Get an existing FileSystem resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity: The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        :param pulumi.Input[str] create_time: (Available since v1.236.0) The time when the file system was created.
        :param pulumi.Input[str] description: The description of the file system.
        :param pulumi.Input[int] encrypt_type: Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        :param pulumi.Input[str] file_system_type: The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        :param pulumi.Input[str] kms_key_id: The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        :param pulumi.Input[Union['FileSystemNfsAclArgs', 'FileSystemNfsAclArgsDict']] nfs_acl: The NFS ACL feature of the file system. See `nfs_acl` below.
               > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] protocol_type: The protocol type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
               - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
               - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        :param pulumi.Input[Union['FileSystemRecycleBinArgs', 'FileSystemRecycleBinArgsDict']] recycle_bin: The recycle bin feature of the file system. See `recycle_bin` below.
               > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        :param pulumi.Input[str] resource_group_id: The ID of the resource group.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        :param pulumi.Input[str] status: (Available since v1.236.0) The status of the File System.
        :param pulumi.Input[str] storage_type: The storage type of the file system. Valid values:
               - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
               - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
               - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
               > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] vpc_id: The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] vswitch_id: The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        :param pulumi.Input[str] zone_id: The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FileSystemState.__new__(_FileSystemState)

        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["encrypt_type"] = encrypt_type
        __props__.__dict__["file_system_type"] = file_system_type
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["nfs_acl"] = nfs_acl
        __props__.__dict__["protocol_type"] = protocol_type
        __props__.__dict__["recycle_bin"] = recycle_bin
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vswitch_id"] = vswitch_id
        __props__.__dict__["zone_id"] = zone_id
        return FileSystem(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[int]:
        """
        The capacity of the file system. Unit: GiB. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `capacity` must be set.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        (Available since v1.236.0) The time when the file system was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the file system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptType")
    def encrypt_type(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
        """
        return pulumi.get(self, "encrypt_type")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> pulumi.Output[str]:
        """
        The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[str]:
        """
        The ID of the KMS-managed key. **Note:** If `encrypt_type` is set to `2`, `kms_key_id` must be set.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="nfsAcl")
    def nfs_acl(self) -> pulumi.Output['outputs.FileSystemNfsAcl']:
        """
        The NFS ACL feature of the file system. See `nfs_acl` below.
        > **NOTE:** `nfs_acl` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "nfs_acl")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Output[str]:
        """
        The protocol type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `NFS`, `SMB`.
        - If `file_system_type` is set to `extreme`. Valid values: `NFS`.
        - If `file_system_type` is set to `cpfs`. Valid values: `cpfs`.
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="recycleBin")
    def recycle_bin(self) -> pulumi.Output['outputs.FileSystemRecycleBin']:
        """
        The recycle bin feature of the file system. See `recycle_bin` below.
        > **NOTE:** `recycle_bin` takes effect only if `file_system_type` is set to `standard`.
        """
        return pulumi.get(self, "recycle_bin")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[str]:
        """
        The ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the snapshot. **NOTE:** `snapshot_id` takes effect only if `file_system_type` is set to `extreme`.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        (Available since v1.236.0) The status of the File System.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        The storage type of the file system. Valid values:
        - If `file_system_type` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
        - If `file_system_type` is set to `extreme`. Valid values: `standard`, `advance`.
        - If `file_system_type` is set to `cpfs`. Valid values: `advance_100`, `advance_200`.
        > **NOTE:** From version 1.140.0, `storage_type` can be set to `standard`, `advance`. From version 1.153.0, `storage_type` can be set to `advance_100`, `advance_200`. From version 1.236.0, `storage_type` can be set to `Premium`.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the VPC. **NOTE:** `vpc_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the vSwitch. **NOTE:** `vswitch_id` takes effect only if `file_system_type` is set to `cpfs`.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The ID of the zone. **Note:** If `file_system_type` is set to `extreme` or `cpfs`, `zone_id` must be set.
        """
        return pulumi.get(self, "zone_id")

