# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessGroupsGroupResult',
    'GetAccessRulesRuleResult',
    'GetAutoSnapshotPoliciesPolicyResult',
    'GetDataFlowsFlowResult',
    'GetFileSystemsSystemResult',
    'GetFilesetsFilesetResult',
    'GetLifecyclePoliciesPolicyResult',
    'GetMountTargetsTargetResult',
    'GetSnapshotsSnapshotResult',
    'GetZonesZoneResult',
    'GetZonesZoneInstanceTypeResult',
]

@pulumi.output_type
class GetAccessGroupsGroupResult(dict):
    def __init__(__self__, *,
                 access_group_name: str,
                 access_group_type: str,
                 description: str,
                 id: str,
                 mount_target_count: int,
                 rule_count: int,
                 type: str):
        """
        :param str access_group_name: The name of access group.
        :param str access_group_type: Filter results by a specific AccessGroupType.
        :param str description: Filter results by a specific Description.
        :param str id: This ID of this AccessGroup. It is formatted to ``<access_group_id>:<file_system_type>``. Before version 1.95.0, the value is `access_group_name`.
        :param int mount_target_count: MountTargetCount block of the AccessGroup
        :param int rule_count: RuleCount of the AccessGroup.
        :param str type: Field `type` has been deprecated from version 1.95.0. Use `access_group_type` instead.
        """
        GetAccessGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_group_name=access_group_name,
            access_group_type=access_group_type,
            description=description,
            id=id,
            mount_target_count=mount_target_count,
            rule_count=rule_count,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_group_name: str,
             access_group_type: str,
             description: str,
             id: str,
             mount_target_count: int,
             rule_count: int,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessGroupName' in kwargs:
            access_group_name = kwargs['accessGroupName']
        if 'accessGroupType' in kwargs:
            access_group_type = kwargs['accessGroupType']
        if 'mountTargetCount' in kwargs:
            mount_target_count = kwargs['mountTargetCount']
        if 'ruleCount' in kwargs:
            rule_count = kwargs['ruleCount']

        _setter("access_group_name", access_group_name)
        _setter("access_group_type", access_group_type)
        _setter("description", description)
        _setter("id", id)
        _setter("mount_target_count", mount_target_count)
        _setter("rule_count", rule_count)
        _setter("type", type)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> str:
        """
        The name of access group.
        """
        return pulumi.get(self, "access_group_name")

    @property
    @pulumi.getter(name="accessGroupType")
    def access_group_type(self) -> str:
        """
        Filter results by a specific AccessGroupType.
        """
        return pulumi.get(self, "access_group_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Filter results by a specific Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        This ID of this AccessGroup. It is formatted to ``<access_group_id>:<file_system_type>``. Before version 1.95.0, the value is `access_group_name`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mountTargetCount")
    def mount_target_count(self) -> int:
        """
        MountTargetCount block of the AccessGroup
        """
        return pulumi.get(self, "mount_target_count")

    @property
    @pulumi.getter(name="ruleCount")
    def rule_count(self) -> int:
        """
        RuleCount of the AccessGroup.
        """
        return pulumi.get(self, "rule_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Field `type` has been deprecated from version 1.95.0. Use `access_group_type` instead.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAccessRulesRuleResult(dict):
    def __init__(__self__, *,
                 access_rule_id: str,
                 priority: int,
                 rw_access: str,
                 source_cidr_ip: str,
                 user_access: str):
        """
        :param str access_rule_id: AccessRuleId of the AccessRule.
        :param int priority: Priority of the AccessRule.
        :param str rw_access: Filter results by a specific RWAccess.
        :param str source_cidr_ip: Filter results by a specific SourceCidrIp.
        :param str user_access: Filter results by a specific UserAccess.
        """
        GetAccessRulesRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_rule_id=access_rule_id,
            priority=priority,
            rw_access=rw_access,
            source_cidr_ip=source_cidr_ip,
            user_access=user_access,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_rule_id: str,
             priority: int,
             rw_access: str,
             source_cidr_ip: str,
             user_access: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessRuleId' in kwargs:
            access_rule_id = kwargs['accessRuleId']
        if 'rwAccess' in kwargs:
            rw_access = kwargs['rwAccess']
        if 'sourceCidrIp' in kwargs:
            source_cidr_ip = kwargs['sourceCidrIp']
        if 'userAccess' in kwargs:
            user_access = kwargs['userAccess']

        _setter("access_rule_id", access_rule_id)
        _setter("priority", priority)
        _setter("rw_access", rw_access)
        _setter("source_cidr_ip", source_cidr_ip)
        _setter("user_access", user_access)

    @property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> str:
        """
        AccessRuleId of the AccessRule.
        """
        return pulumi.get(self, "access_rule_id")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the AccessRule.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="rwAccess")
    def rw_access(self) -> str:
        """
        Filter results by a specific RWAccess.
        """
        return pulumi.get(self, "rw_access")

    @property
    @pulumi.getter(name="sourceCidrIp")
    def source_cidr_ip(self) -> str:
        """
        Filter results by a specific SourceCidrIp.
        """
        return pulumi.get(self, "source_cidr_ip")

    @property
    @pulumi.getter(name="userAccess")
    def user_access(self) -> str:
        """
        Filter results by a specific UserAccess.
        """
        return pulumi.get(self, "user_access")


@pulumi.output_type
class GetAutoSnapshotPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 auto_snapshot_policy_id: str,
                 auto_snapshot_policy_name: str,
                 create_time: str,
                 file_system_nums: int,
                 id: str,
                 repeat_weekdays: Sequence[str],
                 retention_days: int,
                 status: str,
                 time_points: Sequence[str]):
        """
        :param str auto_snapshot_policy_id: The ID of the automatic snapshot policy.
        :param str auto_snapshot_policy_name: The name of the automatic snapshot policy.
        :param str create_time: The time when the automatic snapshot policy was created.
        :param int file_system_nums: The number of file systems to which the automatic snapshot policy applies.
        :param str id: ID of the Auto Snapshot Policy.
        :param Sequence[str] repeat_weekdays: The day on which an auto snapshot was created.
        :param int retention_days: The number of days for which you want to retain auto snapshots.
        :param str status: The status of the automatic snapshot policy. Valid values: `Creating`, `Available`.
        :param Sequence[str] time_points: The point in time at which an auto snapshot was created. Unit: hours.
        """
        GetAutoSnapshotPoliciesPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_snapshot_policy_id=auto_snapshot_policy_id,
            auto_snapshot_policy_name=auto_snapshot_policy_name,
            create_time=create_time,
            file_system_nums=file_system_nums,
            id=id,
            repeat_weekdays=repeat_weekdays,
            retention_days=retention_days,
            status=status,
            time_points=time_points,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_snapshot_policy_id: str,
             auto_snapshot_policy_name: str,
             create_time: str,
             file_system_nums: int,
             id: str,
             repeat_weekdays: Sequence[str],
             retention_days: int,
             status: str,
             time_points: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoSnapshotPolicyId' in kwargs:
            auto_snapshot_policy_id = kwargs['autoSnapshotPolicyId']
        if 'autoSnapshotPolicyName' in kwargs:
            auto_snapshot_policy_name = kwargs['autoSnapshotPolicyName']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'fileSystemNums' in kwargs:
            file_system_nums = kwargs['fileSystemNums']
        if 'repeatWeekdays' in kwargs:
            repeat_weekdays = kwargs['repeatWeekdays']
        if 'retentionDays' in kwargs:
            retention_days = kwargs['retentionDays']
        if 'timePoints' in kwargs:
            time_points = kwargs['timePoints']

        _setter("auto_snapshot_policy_id", auto_snapshot_policy_id)
        _setter("auto_snapshot_policy_name", auto_snapshot_policy_name)
        _setter("create_time", create_time)
        _setter("file_system_nums", file_system_nums)
        _setter("id", id)
        _setter("repeat_weekdays", repeat_weekdays)
        _setter("retention_days", retention_days)
        _setter("status", status)
        _setter("time_points", time_points)

    @property
    @pulumi.getter(name="autoSnapshotPolicyId")
    def auto_snapshot_policy_id(self) -> str:
        """
        The ID of the automatic snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_id")

    @property
    @pulumi.getter(name="autoSnapshotPolicyName")
    def auto_snapshot_policy_name(self) -> str:
        """
        The name of the automatic snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the automatic snapshot policy was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="fileSystemNums")
    def file_system_nums(self) -> int:
        """
        The number of file systems to which the automatic snapshot policy applies.
        """
        return pulumi.get(self, "file_system_nums")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the Auto Snapshot Policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> Sequence[str]:
        """
        The day on which an auto snapshot was created.
        """
        return pulumi.get(self, "repeat_weekdays")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> int:
        """
        The number of days for which you want to retain auto snapshots.
        """
        return pulumi.get(self, "retention_days")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the automatic snapshot policy. Valid values: `Creating`, `Available`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timePoints")
    def time_points(self) -> Sequence[str]:
        """
        The point in time at which an auto snapshot was created. Unit: hours.
        """
        return pulumi.get(self, "time_points")


@pulumi.output_type
class GetDataFlowsFlowResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 data_flow_id: str,
                 description: str,
                 error_message: str,
                 file_system_id: str,
                 file_system_path: str,
                 fset_description: str,
                 fset_id: str,
                 id: str,
                 source_security_type: str,
                 source_storage: str,
                 status: str,
                 throughput: int):
        """
        :param str create_time: The time when Fileset was created. Executing the ISO8601 standard means that the return format is: 'yyyy-MM-ddTHH:mm:ssZ'.
        :param str data_flow_id: The ID of the Data Flow.
        :param str description: The Description of data flow.
        :param str error_message: Error message.
        :param str file_system_id: The ID of the file system.
        :param str file_system_path: The path of Fileset in the CPFS file system.
        :param str fset_description: Description of automatic update.
        :param str fset_id: The ID of the Fileset.
        :param str id: The resource ID of the data flow. The value formats as `<file_system_id>:<data_flow_id>`.
        :param str source_security_type: The security protection type of the source storage.
        :param str source_storage: The access path of the source store. Format: `<storage type>://<path>`.
        :param str status: The status of the Data flow.
        :param int throughput: The maximum transmission bandwidth of data flow, unit: `MB/s`.
        """
        GetDataFlowsFlowResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            data_flow_id=data_flow_id,
            description=description,
            error_message=error_message,
            file_system_id=file_system_id,
            file_system_path=file_system_path,
            fset_description=fset_description,
            fset_id=fset_id,
            id=id,
            source_security_type=source_security_type,
            source_storage=source_storage,
            status=status,
            throughput=throughput,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             data_flow_id: str,
             description: str,
             error_message: str,
             file_system_id: str,
             file_system_path: str,
             fset_description: str,
             fset_id: str,
             id: str,
             source_security_type: str,
             source_storage: str,
             status: str,
             throughput: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dataFlowId' in kwargs:
            data_flow_id = kwargs['dataFlowId']
        if 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']
        if 'fileSystemId' in kwargs:
            file_system_id = kwargs['fileSystemId']
        if 'fileSystemPath' in kwargs:
            file_system_path = kwargs['fileSystemPath']
        if 'fsetDescription' in kwargs:
            fset_description = kwargs['fsetDescription']
        if 'fsetId' in kwargs:
            fset_id = kwargs['fsetId']
        if 'sourceSecurityType' in kwargs:
            source_security_type = kwargs['sourceSecurityType']
        if 'sourceStorage' in kwargs:
            source_storage = kwargs['sourceStorage']

        _setter("create_time", create_time)
        _setter("data_flow_id", data_flow_id)
        _setter("description", description)
        _setter("error_message", error_message)
        _setter("file_system_id", file_system_id)
        _setter("file_system_path", file_system_path)
        _setter("fset_description", fset_description)
        _setter("fset_id", fset_id)
        _setter("id", id)
        _setter("source_security_type", source_security_type)
        _setter("source_storage", source_storage)
        _setter("status", status)
        _setter("throughput", throughput)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when Fileset was created. Executing the ISO8601 standard means that the return format is: 'yyyy-MM-ddTHH:mm:ssZ'.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataFlowId")
    def data_flow_id(self) -> str:
        """
        The ID of the Data Flow.
        """
        return pulumi.get(self, "data_flow_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The Description of data flow.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Error message.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> str:
        """
        The path of Fileset in the CPFS file system.
        """
        return pulumi.get(self, "file_system_path")

    @property
    @pulumi.getter(name="fsetDescription")
    def fset_description(self) -> str:
        """
        Description of automatic update.
        """
        return pulumi.get(self, "fset_description")

    @property
    @pulumi.getter(name="fsetId")
    def fset_id(self) -> str:
        """
        The ID of the Fileset.
        """
        return pulumi.get(self, "fset_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The resource ID of the data flow. The value formats as `<file_system_id>:<data_flow_id>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceSecurityType")
    def source_security_type(self) -> str:
        """
        The security protection type of the source storage.
        """
        return pulumi.get(self, "source_security_type")

    @property
    @pulumi.getter(name="sourceStorage")
    def source_storage(self) -> str:
        """
        The access path of the source store. Format: `<storage type>://<path>`.
        """
        return pulumi.get(self, "source_storage")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the Data flow.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def throughput(self) -> int:
        """
        The maximum transmission bandwidth of data flow, unit: `MB/s`.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class GetFileSystemsSystemResult(dict):
    def __init__(__self__, *,
                 capacity: int,
                 create_time: str,
                 description: str,
                 encrypt_type: int,
                 file_system_type: str,
                 id: str,
                 kms_key_id: str,
                 metered_size: int,
                 protocol_type: str,
                 region_id: str,
                 storage_type: str,
                 zone_id: str):
        """
        :param int capacity: (Optional, Available in v1.140.0+) The capacity of the file system.
        :param str create_time: Time of creation.
        :param str description: Description of the FileSystem.
        :param int encrypt_type: (Optional, Available in v1.121.2+) Whether the file system is encrypted. 
               * Valid values:
        :param str file_system_type: The type of the file system.
               Valid values:
               `standard` (Default),
               `extreme`.
        :param str id: ID of the FileSystem.
        :param str kms_key_id: (Optional, Available in v1.140.0+) The id of the KMS key.
        :param int metered_size: MeteredSize of the FileSystem.
        :param str protocol_type: The protocol type of the file system.
               Valid values:
               `NFS`,
               `SMB` (Available when the `file_system_type` is `standard`).
        :param str region_id: ID of the region where the FileSystem is located.
        :param str storage_type: The storage type of the file system.
               * Valid values:
        :param str zone_id: (Optional, Available in v1.140.0+) The id of the zone. Each region consists of multiple isolated locations known as zones. Each zone has an independent power supply and network.
        """
        GetFileSystemsSystemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity=capacity,
            create_time=create_time,
            description=description,
            encrypt_type=encrypt_type,
            file_system_type=file_system_type,
            id=id,
            kms_key_id=kms_key_id,
            metered_size=metered_size,
            protocol_type=protocol_type,
            region_id=region_id,
            storage_type=storage_type,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity: int,
             create_time: str,
             description: str,
             encrypt_type: int,
             file_system_type: str,
             id: str,
             kms_key_id: str,
             metered_size: int,
             protocol_type: str,
             region_id: str,
             storage_type: str,
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'encryptType' in kwargs:
            encrypt_type = kwargs['encryptType']
        if 'fileSystemType' in kwargs:
            file_system_type = kwargs['fileSystemType']
        if 'kmsKeyId' in kwargs:
            kms_key_id = kwargs['kmsKeyId']
        if 'meteredSize' in kwargs:
            metered_size = kwargs['meteredSize']
        if 'protocolType' in kwargs:
            protocol_type = kwargs['protocolType']
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("capacity", capacity)
        _setter("create_time", create_time)
        _setter("description", description)
        _setter("encrypt_type", encrypt_type)
        _setter("file_system_type", file_system_type)
        _setter("id", id)
        _setter("kms_key_id", kms_key_id)
        _setter("metered_size", metered_size)
        _setter("protocol_type", protocol_type)
        _setter("region_id", region_id)
        _setter("storage_type", storage_type)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def capacity(self) -> int:
        """
        (Optional, Available in v1.140.0+) The capacity of the file system.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time of creation.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the FileSystem.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptType")
    def encrypt_type(self) -> int:
        """
        (Optional, Available in v1.121.2+) Whether the file system is encrypted. 
        * Valid values:
        """
        return pulumi.get(self, "encrypt_type")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The type of the file system.
        Valid values:
        `standard` (Default),
        `extreme`.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the FileSystem.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        """
        (Optional, Available in v1.140.0+) The id of the KMS key.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="meteredSize")
    def metered_size(self) -> int:
        """
        MeteredSize of the FileSystem.
        """
        return pulumi.get(self, "metered_size")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        The protocol type of the file system.
        Valid values:
        `NFS`,
        `SMB` (Available when the `file_system_type` is `standard`).
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        ID of the region where the FileSystem is located.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of the file system.
        * Valid values:
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        (Optional, Available in v1.140.0+) The id of the zone. Each region consists of multiple isolated locations known as zones. Each zone has an independent power supply and network.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetFilesetsFilesetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 file_system_id: str,
                 file_system_path: str,
                 fileset_id: str,
                 id: str,
                 status: str,
                 update_time: str):
        """
        :param str create_time: The time when Fileset was created.
        :param str description: Description of Fileset.
        :param str file_system_id: The ID of the file system.
        :param str file_system_path: The path of Fileset.
        :param str fileset_id: The first ID of the resource.
        :param str id: The ID of the Fileset.
        :param str status: The status of the fileset.
        :param str update_time: The latest update time of Fileset.
        """
        GetFilesetsFilesetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            description=description,
            file_system_id=file_system_id,
            file_system_path=file_system_path,
            fileset_id=fileset_id,
            id=id,
            status=status,
            update_time=update_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             description: str,
             file_system_id: str,
             file_system_path: str,
             fileset_id: str,
             id: str,
             status: str,
             update_time: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'fileSystemId' in kwargs:
            file_system_id = kwargs['fileSystemId']
        if 'fileSystemPath' in kwargs:
            file_system_path = kwargs['fileSystemPath']
        if 'filesetId' in kwargs:
            fileset_id = kwargs['filesetId']
        if 'updateTime' in kwargs:
            update_time = kwargs['updateTime']

        _setter("create_time", create_time)
        _setter("description", description)
        _setter("file_system_id", file_system_id)
        _setter("file_system_path", file_system_path)
        _setter("fileset_id", fileset_id)
        _setter("id", id)
        _setter("status", status)
        _setter("update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when Fileset was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of Fileset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> str:
        """
        The path of Fileset.
        """
        return pulumi.get(self, "file_system_path")

    @property
    @pulumi.getter(name="filesetId")
    def fileset_id(self) -> str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "fileset_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Fileset.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the fileset.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The latest update time of Fileset.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetLifecyclePoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 file_system_id: str,
                 id: str,
                 lifecycle_policy_name: str,
                 lifecycle_rule_name: str,
                 paths: Sequence[str],
                 storage_type: str):
        """
        :param str create_time: The time when the lifecycle management policy was created.
        :param str file_system_id: The ID of the file system.
        :param str id: The ID of the Lifecycle Policy. Its value is same as Queue Name.
        :param str lifecycle_policy_name: The name of the lifecycle management policy.
        :param str lifecycle_rule_name: The rules in the lifecycle management policy.
        :param Sequence[str] paths: The list of absolute paths for multiple directories. In this case, you can associate a lifecycle management policy with each directory.
        :param str storage_type: The storage type of the data that is dumped to the IA storage medium.
        """
        GetLifecyclePoliciesPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            file_system_id=file_system_id,
            id=id,
            lifecycle_policy_name=lifecycle_policy_name,
            lifecycle_rule_name=lifecycle_rule_name,
            paths=paths,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             file_system_id: str,
             id: str,
             lifecycle_policy_name: str,
             lifecycle_rule_name: str,
             paths: Sequence[str],
             storage_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'fileSystemId' in kwargs:
            file_system_id = kwargs['fileSystemId']
        if 'lifecyclePolicyName' in kwargs:
            lifecycle_policy_name = kwargs['lifecyclePolicyName']
        if 'lifecycleRuleName' in kwargs:
            lifecycle_rule_name = kwargs['lifecycleRuleName']
        if 'storageType' in kwargs:
            storage_type = kwargs['storageType']

        _setter("create_time", create_time)
        _setter("file_system_id", file_system_id)
        _setter("id", id)
        _setter("lifecycle_policy_name", lifecycle_policy_name)
        _setter("lifecycle_rule_name", lifecycle_rule_name)
        _setter("paths", paths)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the lifecycle management policy was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Lifecycle Policy. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecyclePolicyName")
    def lifecycle_policy_name(self) -> str:
        """
        The name of the lifecycle management policy.
        """
        return pulumi.get(self, "lifecycle_policy_name")

    @property
    @pulumi.getter(name="lifecycleRuleName")
    def lifecycle_rule_name(self) -> str:
        """
        The rules in the lifecycle management policy.
        """
        return pulumi.get(self, "lifecycle_rule_name")

    @property
    @pulumi.getter
    def paths(self) -> Sequence[str]:
        """
        The list of absolute paths for multiple directories. In this case, you can associate a lifecycle management policy with each directory.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of the data that is dumped to the IA storage medium.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetMountTargetsTargetResult(dict):
    def __init__(__self__, *,
                 access_group_name: str,
                 id: str,
                 mount_target_domain: str,
                 network_type: str,
                 status: str,
                 type: str,
                 vpc_id: str,
                 vswitch_id: str):
        """
        :param str access_group_name: Filter results by a specific AccessGroupName.
        :param str id: ID of the MountTargetDomain.
        :param str mount_target_domain: Field `mount_target_domain` has been deprecated from provider version 1.53.0. New field `ids` replaces it.
        :param str network_type: Filter results by a specific NetworkType.
        :param str status: Filter results by the status of mount target. Valid values: `Active`, `Inactive` and `Pending`.
        :param str type: Field `type` has been deprecated from provider version 1.95.0. New field `network_type` replaces it.
        :param str vpc_id: Filter results by a specific VpcId.
        :param str vswitch_id: Filter results by a specific VSwitchId.
        """
        GetMountTargetsTargetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_group_name=access_group_name,
            id=id,
            mount_target_domain=mount_target_domain,
            network_type=network_type,
            status=status,
            type=type,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_group_name: str,
             id: str,
             mount_target_domain: str,
             network_type: str,
             status: str,
             type: str,
             vpc_id: str,
             vswitch_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessGroupName' in kwargs:
            access_group_name = kwargs['accessGroupName']
        if 'mountTargetDomain' in kwargs:
            mount_target_domain = kwargs['mountTargetDomain']
        if 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']

        _setter("access_group_name", access_group_name)
        _setter("id", id)
        _setter("mount_target_domain", mount_target_domain)
        _setter("network_type", network_type)
        _setter("status", status)
        _setter("type", type)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> str:
        """
        Filter results by a specific AccessGroupName.
        """
        return pulumi.get(self, "access_group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the MountTargetDomain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mountTargetDomain")
    def mount_target_domain(self) -> str:
        """
        Field `mount_target_domain` has been deprecated from provider version 1.53.0. New field `ids` replaces it.
        """
        return pulumi.get(self, "mount_target_domain")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Filter results by a specific NetworkType.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Filter results by the status of mount target. Valid values: `Active`, `Inactive` and `Pending`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Field `type` has been deprecated from provider version 1.95.0. New field `network_type` replaces it.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Filter results by a specific VpcId.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        Filter results by a specific VSwitchId.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 encrypt_type: int,
                 id: str,
                 progress: str,
                 remain_time: int,
                 retention_days: int,
                 snapshot_id: str,
                 snapshot_name: str,
                 source_file_system_id: str,
                 source_file_system_size: str,
                 source_file_system_version: str,
                 status: str):
        """
        :param str create_time: The creation time of the resource.
        :param str description: The description of the snapshot.
        :param int encrypt_type: The type of the encryption.
        :param str id: The ID of the Snapshot.
        :param str progress: The progress of the snapshot creation. The value of this parameter is expressed as a percentage.
        :param int remain_time: The remaining time that is required to create the snapshot. Unit: seconds.
        :param int retention_days: The retention period of the automatic snapshot. Unit: days.
        :param str snapshot_id: The ID of the resource.
        :param str snapshot_name: The name of the snapshot.
        :param str source_file_system_id: The ID of the source file system.
        :param str source_file_system_size: The capacity of the source file system. Unit: GiB.
        :param str source_file_system_version: The version of the source file system.
        :param str status: The status of the snapshot.
        """
        GetSnapshotsSnapshotResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            description=description,
            encrypt_type=encrypt_type,
            id=id,
            progress=progress,
            remain_time=remain_time,
            retention_days=retention_days,
            snapshot_id=snapshot_id,
            snapshot_name=snapshot_name,
            source_file_system_id=source_file_system_id,
            source_file_system_size=source_file_system_size,
            source_file_system_version=source_file_system_version,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             description: str,
             encrypt_type: int,
             id: str,
             progress: str,
             remain_time: int,
             retention_days: int,
             snapshot_id: str,
             snapshot_name: str,
             source_file_system_id: str,
             source_file_system_size: str,
             source_file_system_version: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'encryptType' in kwargs:
            encrypt_type = kwargs['encryptType']
        if 'remainTime' in kwargs:
            remain_time = kwargs['remainTime']
        if 'retentionDays' in kwargs:
            retention_days = kwargs['retentionDays']
        if 'snapshotId' in kwargs:
            snapshot_id = kwargs['snapshotId']
        if 'snapshotName' in kwargs:
            snapshot_name = kwargs['snapshotName']
        if 'sourceFileSystemId' in kwargs:
            source_file_system_id = kwargs['sourceFileSystemId']
        if 'sourceFileSystemSize' in kwargs:
            source_file_system_size = kwargs['sourceFileSystemSize']
        if 'sourceFileSystemVersion' in kwargs:
            source_file_system_version = kwargs['sourceFileSystemVersion']

        _setter("create_time", create_time)
        _setter("description", description)
        _setter("encrypt_type", encrypt_type)
        _setter("id", id)
        _setter("progress", progress)
        _setter("remain_time", remain_time)
        _setter("retention_days", retention_days)
        _setter("snapshot_id", snapshot_id)
        _setter("snapshot_name", snapshot_name)
        _setter("source_file_system_id", source_file_system_id)
        _setter("source_file_system_size", source_file_system_size)
        _setter("source_file_system_version", source_file_system_version)
        _setter("status", status)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptType")
    def encrypt_type(self) -> int:
        """
        The type of the encryption.
        """
        return pulumi.get(self, "encrypt_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Snapshot.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def progress(self) -> str:
        """
        The progress of the snapshot creation. The value of this parameter is expressed as a percentage.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> int:
        """
        The remaining time that is required to create the snapshot. Unit: seconds.
        """
        return pulumi.get(self, "remain_time")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> int:
        """
        The retention period of the automatic snapshot. Unit: days.
        """
        return pulumi.get(self, "retention_days")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        The ID of the resource.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> str:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @property
    @pulumi.getter(name="sourceFileSystemId")
    def source_file_system_id(self) -> str:
        """
        The ID of the source file system.
        """
        return pulumi.get(self, "source_file_system_id")

    @property
    @pulumi.getter(name="sourceFileSystemSize")
    def source_file_system_size(self) -> str:
        """
        The capacity of the source file system. Unit: GiB.
        """
        return pulumi.get(self, "source_file_system_size")

    @property
    @pulumi.getter(name="sourceFileSystemVersion")
    def source_file_system_version(self) -> str:
        """
        The version of the source file system.
        """
        return pulumi.get(self, "source_file_system_version")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the snapshot.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 instance_types: Sequence['outputs.GetZonesZoneInstanceTypeResult'],
                 zone_id: str):
        """
        :param Sequence['GetZonesZoneInstanceTypeArgs'] instance_types: A list of instance type information collection
        :param str zone_id: String to filter results by zone id.
        """
        GetZonesZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_types=instance_types,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_types: Sequence['outputs.GetZonesZoneInstanceTypeResult'],
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceTypes' in kwargs:
            instance_types = kwargs['instanceTypes']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("instance_types", instance_types)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence['outputs.GetZonesZoneInstanceTypeResult']:
        """
        A list of instance type information collection
        """
        return pulumi.get(self, "instance_types")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        String to filter results by zone id.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZonesZoneInstanceTypeResult(dict):
    def __init__(__self__, *,
                 protocol_type: str,
                 storage_type: str):
        """
        :param str protocol_type: File transfer protocol type. Valid values:
        :param str storage_type: The storage type of the nas zones. Valid values:
        """
        GetZonesZoneInstanceTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            protocol_type=protocol_type,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             protocol_type: str,
             storage_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'protocolType' in kwargs:
            protocol_type = kwargs['protocolType']
        if 'storageType' in kwargs:
            storage_type = kwargs['storageType']

        _setter("protocol_type", protocol_type)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        File transfer protocol type. Valid values:
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of the nas zones. Valid values:
        """
        return pulumi.get(self, "storage_type")


