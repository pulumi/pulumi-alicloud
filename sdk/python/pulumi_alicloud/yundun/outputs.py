# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BastionHostInstanceAdAuthServer',
    'BastionHostInstanceLdapAuthServer',
    'GetBastionHostInstancesInstanceResult',
    'GetDBAuditInstanceInstanceResult',
]

@pulumi.output_type
class BastionHostInstanceAdAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseDn":
            suggest = "base_dn"
        elif key == "isSsl":
            suggest = "is_ssl"
        elif key == "emailMapping":
            suggest = "email_mapping"
        elif key == "mobileMapping":
            suggest = "mobile_mapping"
        elif key == "nameMapping":
            suggest = "name_mapping"
        elif key == "standbyServer":
            suggest = "standby_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BastionHostInstanceAdAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BastionHostInstanceAdAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BastionHostInstanceAdAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: _builtins.str,
                 base_dn: _builtins.str,
                 domain: _builtins.str,
                 is_ssl: _builtins.bool,
                 port: _builtins.int,
                 server: _builtins.str,
                 email_mapping: Optional[_builtins.str] = None,
                 filter: Optional[_builtins.str] = None,
                 mobile_mapping: Optional[_builtins.str] = None,
                 name_mapping: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 standby_server: Optional[_builtins.str] = None):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "base_dn", base_dn)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "is_ssl", is_ssl)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        if email_mapping is not None:
            pulumi.set(__self__, "email_mapping", email_mapping)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if mobile_mapping is not None:
            pulumi.set(__self__, "mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            pulumi.set(__self__, "name_mapping", name_mapping)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if standby_server is not None:
            pulumi.set(__self__, "standby_server", standby_server)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> _builtins.str:
        return pulumi.get(self, "base_dn")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> _builtins.bool:
        return pulumi.get(self, "is_ssl")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email_mapping")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mobile_mapping")

    @_builtins.property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_mapping")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "standby_server")


@pulumi.output_type
class BastionHostInstanceLdapAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseDn":
            suggest = "base_dn"
        elif key == "emailMapping":
            suggest = "email_mapping"
        elif key == "isSsl":
            suggest = "is_ssl"
        elif key == "loginNameMapping":
            suggest = "login_name_mapping"
        elif key == "mobileMapping":
            suggest = "mobile_mapping"
        elif key == "nameMapping":
            suggest = "name_mapping"
        elif key == "standbyServer":
            suggest = "standby_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BastionHostInstanceLdapAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BastionHostInstanceLdapAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BastionHostInstanceLdapAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: _builtins.str,
                 base_dn: _builtins.str,
                 port: _builtins.int,
                 server: _builtins.str,
                 email_mapping: Optional[_builtins.str] = None,
                 filter: Optional[_builtins.str] = None,
                 is_ssl: Optional[_builtins.bool] = None,
                 login_name_mapping: Optional[_builtins.str] = None,
                 mobile_mapping: Optional[_builtins.str] = None,
                 name_mapping: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 standby_server: Optional[_builtins.str] = None):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "base_dn", base_dn)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        if email_mapping is not None:
            pulumi.set(__self__, "email_mapping", email_mapping)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_ssl is not None:
            pulumi.set(__self__, "is_ssl", is_ssl)
        if login_name_mapping is not None:
            pulumi.set(__self__, "login_name_mapping", login_name_mapping)
        if mobile_mapping is not None:
            pulumi.set(__self__, "mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            pulumi.set(__self__, "name_mapping", name_mapping)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if standby_server is not None:
            pulumi.set(__self__, "standby_server", standby_server)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> _builtins.str:
        return pulumi.get(self, "base_dn")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def server(self) -> _builtins.str:
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email_mapping")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_ssl")

    @_builtins.property
    @pulumi.getter(name="loginNameMapping")
    def login_name_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "login_name_mapping")

    @_builtins.property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mobile_mapping")

    @_builtins.property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_mapping")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "standby_server")


@pulumi.output_type
class GetBastionHostInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 instance_status: _builtins.str,
                 license_code: _builtins.str,
                 private_domain: _builtins.str,
                 public_domain: _builtins.str,
                 public_network_access: _builtins.bool,
                 security_group_ids: Sequence[_builtins.str],
                 storage: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 user_vswitch_id: _builtins.str):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "license_code", license_code)
        pulumi.set(__self__, "private_domain", private_domain)
        pulumi.set(__self__, "public_domain", public_domain)
        pulumi.set(__self__, "public_network_access", public_network_access)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_vswitch_id", user_vswitch_id)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.str:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> _builtins.str:
        return pulumi.get(self, "license_code")

    @_builtins.property
    @pulumi.getter(name="privateDomain")
    def private_domain(self) -> _builtins.str:
        return pulumi.get(self, "private_domain")

    @_builtins.property
    @pulumi.getter(name="publicDomain")
    def public_domain(self) -> _builtins.str:
        return pulumi.get(self, "public_domain")

    @_builtins.property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> _builtins.bool:
        return pulumi.get(self, "public_network_access")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> _builtins.str:
        return pulumi.get(self, "storage")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userVswitchId")
    def user_vswitch_id(self) -> _builtins.str:
        return pulumi.get(self, "user_vswitch_id")


@pulumi.output_type
class GetDBAuditInstanceInstanceResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 instance_status: _builtins.str,
                 license_code: _builtins.str,
                 private_domain: _builtins.str,
                 public_domain: _builtins.str,
                 public_network_access: _builtins.bool,
                 user_vswitch_id: _builtins.str,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "license_code", license_code)
        pulumi.set(__self__, "private_domain", private_domain)
        pulumi.set(__self__, "public_domain", public_domain)
        pulumi.set(__self__, "public_network_access", public_network_access)
        pulumi.set(__self__, "user_vswitch_id", user_vswitch_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> _builtins.str:
        return pulumi.get(self, "instance_status")

    @_builtins.property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> _builtins.str:
        return pulumi.get(self, "license_code")

    @_builtins.property
    @pulumi.getter(name="privateDomain")
    def private_domain(self) -> _builtins.str:
        return pulumi.get(self, "private_domain")

    @_builtins.property
    @pulumi.getter(name="publicDomain")
    def public_domain(self) -> _builtins.str:
        return pulumi.get(self, "public_domain")

    @_builtins.property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> _builtins.bool:
        return pulumi.get(self, "public_network_access")

    @_builtins.property
    @pulumi.getter(name="userVswitchId")
    def user_vswitch_id(self) -> _builtins.str:
        return pulumi.get(self, "user_vswitch_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")


