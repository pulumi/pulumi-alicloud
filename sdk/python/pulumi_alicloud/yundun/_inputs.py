# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BastionHostInstanceAdAuthServerArgs',
    'BastionHostInstanceAdAuthServerArgsDict',
    'BastionHostInstanceLdapAuthServerArgs',
    'BastionHostInstanceLdapAuthServerArgsDict',
]

MYPY = False

if not MYPY:
    class BastionHostInstanceAdAuthServerArgsDict(TypedDict):
        account: pulumi.Input[_builtins.str]
        base_dn: pulumi.Input[_builtins.str]
        domain: pulumi.Input[_builtins.str]
        is_ssl: pulumi.Input[_builtins.bool]
        port: pulumi.Input[_builtins.int]
        server: pulumi.Input[_builtins.str]
        email_mapping: NotRequired[pulumi.Input[_builtins.str]]
        filter: NotRequired[pulumi.Input[_builtins.str]]
        mobile_mapping: NotRequired[pulumi.Input[_builtins.str]]
        name_mapping: NotRequired[pulumi.Input[_builtins.str]]
        password: NotRequired[pulumi.Input[_builtins.str]]
        standby_server: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    BastionHostInstanceAdAuthServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BastionHostInstanceAdAuthServerArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[_builtins.str],
                 base_dn: pulumi.Input[_builtins.str],
                 domain: pulumi.Input[_builtins.str],
                 is_ssl: pulumi.Input[_builtins.bool],
                 port: pulumi.Input[_builtins.int],
                 server: pulumi.Input[_builtins.str],
                 email_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 mobile_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 name_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_server: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "base_dn", base_dn)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "is_ssl", is_ssl)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        if email_mapping is not None:
            pulumi.set(__self__, "email_mapping", email_mapping)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if mobile_mapping is not None:
            pulumi.set(__self__, "mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            pulumi.set(__self__, "name_mapping", name_mapping)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if standby_server is not None:
            pulumi.set(__self__, "standby_server", standby_server)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "base_dn", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "is_ssl")

    @is_ssl.setter
    def is_ssl(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_ssl", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email_mapping")

    @email_mapping.setter
    def email_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_mapping", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mobile_mapping")

    @mobile_mapping.setter
    def mobile_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mobile_mapping", value)

    @_builtins.property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name_mapping")

    @name_mapping.setter
    def name_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_mapping", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "standby_server")

    @standby_server.setter
    def standby_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standby_server", value)


if not MYPY:
    class BastionHostInstanceLdapAuthServerArgsDict(TypedDict):
        account: pulumi.Input[_builtins.str]
        base_dn: pulumi.Input[_builtins.str]
        port: pulumi.Input[_builtins.int]
        server: pulumi.Input[_builtins.str]
        email_mapping: NotRequired[pulumi.Input[_builtins.str]]
        filter: NotRequired[pulumi.Input[_builtins.str]]
        is_ssl: NotRequired[pulumi.Input[_builtins.bool]]
        login_name_mapping: NotRequired[pulumi.Input[_builtins.str]]
        mobile_mapping: NotRequired[pulumi.Input[_builtins.str]]
        name_mapping: NotRequired[pulumi.Input[_builtins.str]]
        password: NotRequired[pulumi.Input[_builtins.str]]
        standby_server: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    BastionHostInstanceLdapAuthServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BastionHostInstanceLdapAuthServerArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[_builtins.str],
                 base_dn: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 server: pulumi.Input[_builtins.str],
                 email_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 is_ssl: Optional[pulumi.Input[_builtins.bool]] = None,
                 login_name_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 mobile_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 name_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 standby_server: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "base_dn", base_dn)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        if email_mapping is not None:
            pulumi.set(__self__, "email_mapping", email_mapping)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_ssl is not None:
            pulumi.set(__self__, "is_ssl", is_ssl)
        if login_name_mapping is not None:
            pulumi.set(__self__, "login_name_mapping", login_name_mapping)
        if mobile_mapping is not None:
            pulumi.set(__self__, "mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            pulumi.set(__self__, "name_mapping", name_mapping)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if standby_server is not None:
            pulumi.set(__self__, "standby_server", standby_server)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "base_dn", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email_mapping")

    @email_mapping.setter
    def email_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_mapping", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_ssl")

    @is_ssl.setter
    def is_ssl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_ssl", value)

    @_builtins.property
    @pulumi.getter(name="loginNameMapping")
    def login_name_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "login_name_mapping")

    @login_name_mapping.setter
    def login_name_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_name_mapping", value)

    @_builtins.property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mobile_mapping")

    @mobile_mapping.setter
    def mobile_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mobile_mapping", value)

    @_builtins.property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name_mapping")

    @name_mapping.setter
    def name_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_mapping", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "standby_server")

    @standby_server.setter
    def standby_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standby_server", value)


