# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BastionHostInstanceArgs', 'BastionHostInstance']

@pulumi.input_type
class BastionHostInstanceArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[str],
                 description: pulumi.Input[str],
                 license_code: pulumi.Input[str],
                 plan_code: pulumi.Input[str],
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 storage: pulumi.Input[str],
                 vswitch_id: pulumi.Input[str],
                 ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]] = None,
                 enable_public_access: Optional[pulumi.Input[bool]] = None,
                 ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 renew_period: Optional[pulumi.Input[int]] = None,
                 renewal_period_unit: Optional[pulumi.Input[str]] = None,
                 renewal_status: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a BastionHostInstance resource.
        """
        BastionHostInstanceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth=bandwidth,
            description=description,
            license_code=license_code,
            plan_code=plan_code,
            security_group_ids=security_group_ids,
            storage=storage,
            vswitch_id=vswitch_id,
            ad_auth_servers=ad_auth_servers,
            enable_public_access=enable_public_access,
            ldap_auth_servers=ldap_auth_servers,
            period=period,
            public_white_lists=public_white_lists,
            renew_period=renew_period,
            renewal_period_unit=renewal_period_unit,
            renewal_status=renewal_status,
            resource_group_id=resource_group_id,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth: pulumi.Input[str],
             description: pulumi.Input[str],
             license_code: pulumi.Input[str],
             plan_code: pulumi.Input[str],
             security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
             storage: pulumi.Input[str],
             vswitch_id: pulumi.Input[str],
             ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]] = None,
             enable_public_access: Optional[pulumi.Input[bool]] = None,
             ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]] = None,
             period: Optional[pulumi.Input[int]] = None,
             public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             renew_period: Optional[pulumi.Input[int]] = None,
             renewal_period_unit: Optional[pulumi.Input[str]] = None,
             renewal_status: Optional[pulumi.Input[str]] = None,
             resource_group_id: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'licenseCode' in kwargs:
            license_code = kwargs['licenseCode']
        if 'planCode' in kwargs:
            plan_code = kwargs['planCode']
        if 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']
        if 'adAuthServers' in kwargs:
            ad_auth_servers = kwargs['adAuthServers']
        if 'enablePublicAccess' in kwargs:
            enable_public_access = kwargs['enablePublicAccess']
        if 'ldapAuthServers' in kwargs:
            ldap_auth_servers = kwargs['ldapAuthServers']
        if 'publicWhiteLists' in kwargs:
            public_white_lists = kwargs['publicWhiteLists']
        if 'renewPeriod' in kwargs:
            renew_period = kwargs['renewPeriod']
        if 'renewalPeriodUnit' in kwargs:
            renewal_period_unit = kwargs['renewalPeriodUnit']
        if 'renewalStatus' in kwargs:
            renewal_status = kwargs['renewalStatus']
        if 'resourceGroupId' in kwargs:
            resource_group_id = kwargs['resourceGroupId']

        _setter("bandwidth", bandwidth)
        _setter("description", description)
        _setter("license_code", license_code)
        _setter("plan_code", plan_code)
        _setter("security_group_ids", security_group_ids)
        _setter("storage", storage)
        _setter("vswitch_id", vswitch_id)
        if ad_auth_servers is not None:
            _setter("ad_auth_servers", ad_auth_servers)
        if enable_public_access is not None:
            _setter("enable_public_access", enable_public_access)
        if ldap_auth_servers is not None:
            _setter("ldap_auth_servers", ldap_auth_servers)
        if period is not None:
            _setter("period", period)
        if public_white_lists is not None:
            _setter("public_white_lists", public_white_lists)
        if renew_period is not None:
            _setter("renew_period", renew_period)
        if renewal_period_unit is not None:
            _setter("renewal_period_unit", renewal_period_unit)
        if renewal_status is not None:
            _setter("renewal_status", renewal_status)
        if resource_group_id is not None:
            _setter("resource_group_id", resource_group_id)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[str]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license_code")

    @license_code.setter
    def license_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "license_code", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vswitch_id", value)

    @property
    @pulumi.getter(name="adAuthServers")
    def ad_auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]]:
        return pulumi.get(self, "ad_auth_servers")

    @ad_auth_servers.setter
    def ad_auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]]):
        pulumi.set(self, "ad_auth_servers", value)

    @property
    @pulumi.getter(name="enablePublicAccess")
    def enable_public_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_public_access")

    @enable_public_access.setter
    def enable_public_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_public_access", value)

    @property
    @pulumi.getter(name="ldapAuthServers")
    def ldap_auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]]:
        return pulumi.get(self, "ldap_auth_servers")

    @ldap_auth_servers.setter
    def ldap_auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]]):
        pulumi.set(self, "ldap_auth_servers", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="publicWhiteLists")
    def public_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "public_white_lists")

    @public_white_lists.setter
    def public_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_white_lists", value)

    @property
    @pulumi.getter(name="renewPeriod")
    def renew_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "renew_period")

    @renew_period.setter
    def renew_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_period", value)

    @property
    @pulumi.getter(name="renewalPeriodUnit")
    def renewal_period_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renewal_period_unit")

    @renewal_period_unit.setter
    def renewal_period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_period_unit", value)

    @property
    @pulumi.getter(name="renewalStatus")
    def renewal_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renewal_status")

    @renewal_status.setter
    def renewal_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_status", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _BastionHostInstanceState:
    def __init__(__self__, *,
                 ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]] = None,
                 bandwidth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_public_access: Optional[pulumi.Input[bool]] = None,
                 ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]] = None,
                 license_code: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 plan_code: Optional[pulumi.Input[str]] = None,
                 public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 renew_period: Optional[pulumi.Input[int]] = None,
                 renewal_period_unit: Optional[pulumi.Input[str]] = None,
                 renewal_status: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BastionHostInstance resources.
        """
        _BastionHostInstanceState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_auth_servers=ad_auth_servers,
            bandwidth=bandwidth,
            description=description,
            enable_public_access=enable_public_access,
            ldap_auth_servers=ldap_auth_servers,
            license_code=license_code,
            period=period,
            plan_code=plan_code,
            public_white_lists=public_white_lists,
            renew_period=renew_period,
            renewal_period_unit=renewal_period_unit,
            renewal_status=renewal_status,
            resource_group_id=resource_group_id,
            security_group_ids=security_group_ids,
            storage=storage,
            tags=tags,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]] = None,
             bandwidth: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enable_public_access: Optional[pulumi.Input[bool]] = None,
             ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]] = None,
             license_code: Optional[pulumi.Input[str]] = None,
             period: Optional[pulumi.Input[int]] = None,
             plan_code: Optional[pulumi.Input[str]] = None,
             public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             renew_period: Optional[pulumi.Input[int]] = None,
             renewal_period_unit: Optional[pulumi.Input[str]] = None,
             renewal_status: Optional[pulumi.Input[str]] = None,
             resource_group_id: Optional[pulumi.Input[str]] = None,
             security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             storage: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             vswitch_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adAuthServers' in kwargs:
            ad_auth_servers = kwargs['adAuthServers']
        if 'enablePublicAccess' in kwargs:
            enable_public_access = kwargs['enablePublicAccess']
        if 'ldapAuthServers' in kwargs:
            ldap_auth_servers = kwargs['ldapAuthServers']
        if 'licenseCode' in kwargs:
            license_code = kwargs['licenseCode']
        if 'planCode' in kwargs:
            plan_code = kwargs['planCode']
        if 'publicWhiteLists' in kwargs:
            public_white_lists = kwargs['publicWhiteLists']
        if 'renewPeriod' in kwargs:
            renew_period = kwargs['renewPeriod']
        if 'renewalPeriodUnit' in kwargs:
            renewal_period_unit = kwargs['renewalPeriodUnit']
        if 'renewalStatus' in kwargs:
            renewal_status = kwargs['renewalStatus']
        if 'resourceGroupId' in kwargs:
            resource_group_id = kwargs['resourceGroupId']
        if 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']

        if ad_auth_servers is not None:
            _setter("ad_auth_servers", ad_auth_servers)
        if bandwidth is not None:
            _setter("bandwidth", bandwidth)
        if description is not None:
            _setter("description", description)
        if enable_public_access is not None:
            _setter("enable_public_access", enable_public_access)
        if ldap_auth_servers is not None:
            _setter("ldap_auth_servers", ldap_auth_servers)
        if license_code is not None:
            _setter("license_code", license_code)
        if period is not None:
            _setter("period", period)
        if plan_code is not None:
            _setter("plan_code", plan_code)
        if public_white_lists is not None:
            _setter("public_white_lists", public_white_lists)
        if renew_period is not None:
            _setter("renew_period", renew_period)
        if renewal_period_unit is not None:
            _setter("renewal_period_unit", renewal_period_unit)
        if renewal_status is not None:
            _setter("renewal_status", renewal_status)
        if resource_group_id is not None:
            _setter("resource_group_id", resource_group_id)
        if security_group_ids is not None:
            _setter("security_group_ids", security_group_ids)
        if storage is not None:
            _setter("storage", storage)
        if tags is not None:
            _setter("tags", tags)
        if vswitch_id is not None:
            _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="adAuthServers")
    def ad_auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]]:
        return pulumi.get(self, "ad_auth_servers")

    @ad_auth_servers.setter
    def ad_auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceAdAuthServerArgs']]]]):
        pulumi.set(self, "ad_auth_servers", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enablePublicAccess")
    def enable_public_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_public_access")

    @enable_public_access.setter
    def enable_public_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_public_access", value)

    @property
    @pulumi.getter(name="ldapAuthServers")
    def ldap_auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]]:
        return pulumi.get(self, "ldap_auth_servers")

    @ldap_auth_servers.setter
    def ldap_auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BastionHostInstanceLdapAuthServerArgs']]]]):
        pulumi.set(self, "ldap_auth_servers", value)

    @property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license_code")

    @license_code.setter
    def license_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_code", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="publicWhiteLists")
    def public_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "public_white_lists")

    @public_white_lists.setter
    def public_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_white_lists", value)

    @property
    @pulumi.getter(name="renewPeriod")
    def renew_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "renew_period")

    @renew_period.setter
    def renew_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_period", value)

    @property
    @pulumi.getter(name="renewalPeriodUnit")
    def renewal_period_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renewal_period_unit")

    @renewal_period_unit.setter
    def renewal_period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_period_unit", value)

    @property
    @pulumi.getter(name="renewalStatus")
    def renewal_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renewal_status")

    @renewal_status.setter
    def renewal_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_status", value)

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_id", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)


class BastionHostInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceAdAuthServerArgs']]]]] = None,
                 bandwidth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_public_access: Optional[pulumi.Input[bool]] = None,
                 ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceLdapAuthServerArgs']]]]] = None,
                 license_code: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 plan_code: Optional[pulumi.Input[str]] = None,
                 public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 renew_period: Optional[pulumi.Input[int]] = None,
                 renewal_period_unit: Optional[pulumi.Input[str]] = None,
                 renewal_status: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a BastionHostInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BastionHostInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BastionHostInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BastionHostInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BastionHostInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            BastionHostInstanceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceAdAuthServerArgs']]]]] = None,
                 bandwidth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_public_access: Optional[pulumi.Input[bool]] = None,
                 ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceLdapAuthServerArgs']]]]] = None,
                 license_code: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 plan_code: Optional[pulumi.Input[str]] = None,
                 public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 renew_period: Optional[pulumi.Input[int]] = None,
                 renewal_period_unit: Optional[pulumi.Input[str]] = None,
                 renewal_status: Optional[pulumi.Input[str]] = None,
                 resource_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BastionHostInstanceArgs.__new__(BastionHostInstanceArgs)

            __props__.__dict__["ad_auth_servers"] = ad_auth_servers
            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_public_access"] = enable_public_access
            __props__.__dict__["ldap_auth_servers"] = ldap_auth_servers
            if license_code is None and not opts.urn:
                raise TypeError("Missing required property 'license_code'")
            __props__.__dict__["license_code"] = license_code
            __props__.__dict__["period"] = period
            if plan_code is None and not opts.urn:
                raise TypeError("Missing required property 'plan_code'")
            __props__.__dict__["plan_code"] = plan_code
            __props__.__dict__["public_white_lists"] = public_white_lists
            __props__.__dict__["renew_period"] = renew_period
            __props__.__dict__["renewal_period_unit"] = renewal_period_unit
            __props__.__dict__["renewal_status"] = renewal_status
            __props__.__dict__["resource_group_id"] = resource_group_id
            if security_group_ids is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_ids'")
            __props__.__dict__["security_group_ids"] = security_group_ids
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["tags"] = tags
            if vswitch_id is None and not opts.urn:
                raise TypeError("Missing required property 'vswitch_id'")
            __props__.__dict__["vswitch_id"] = vswitch_id
        super(BastionHostInstance, __self__).__init__(
            'alicloud:yundun/bastionHostInstance:BastionHostInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ad_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceAdAuthServerArgs']]]]] = None,
            bandwidth: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_public_access: Optional[pulumi.Input[bool]] = None,
            ldap_auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BastionHostInstanceLdapAuthServerArgs']]]]] = None,
            license_code: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            plan_code: Optional[pulumi.Input[str]] = None,
            public_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            renew_period: Optional[pulumi.Input[int]] = None,
            renewal_period_unit: Optional[pulumi.Input[str]] = None,
            renewal_status: Optional[pulumi.Input[str]] = None,
            resource_group_id: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vswitch_id: Optional[pulumi.Input[str]] = None) -> 'BastionHostInstance':
        """
        Get an existing BastionHostInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BastionHostInstanceState.__new__(_BastionHostInstanceState)

        __props__.__dict__["ad_auth_servers"] = ad_auth_servers
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_public_access"] = enable_public_access
        __props__.__dict__["ldap_auth_servers"] = ldap_auth_servers
        __props__.__dict__["license_code"] = license_code
        __props__.__dict__["period"] = period
        __props__.__dict__["plan_code"] = plan_code
        __props__.__dict__["public_white_lists"] = public_white_lists
        __props__.__dict__["renew_period"] = renew_period
        __props__.__dict__["renewal_period_unit"] = renewal_period_unit
        __props__.__dict__["renewal_status"] = renewal_status
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["storage"] = storage
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vswitch_id"] = vswitch_id
        return BastionHostInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adAuthServers")
    def ad_auth_servers(self) -> pulumi.Output[Sequence['outputs.BastionHostInstanceAdAuthServer']]:
        return pulumi.get(self, "ad_auth_servers")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enablePublicAccess")
    def enable_public_access(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_public_access")

    @property
    @pulumi.getter(name="ldapAuthServers")
    def ldap_auth_servers(self) -> pulumi.Output[Sequence['outputs.BastionHostInstanceLdapAuthServer']]:
        return pulumi.get(self, "ldap_auth_servers")

    @property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> pulumi.Output[str]:
        return pulumi.get(self, "license_code")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Output[str]:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="publicWhiteLists")
    def public_white_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "public_white_lists")

    @property
    @pulumi.getter(name="renewPeriod")
    def renew_period(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "renew_period")

    @property
    @pulumi.getter(name="renewalPeriodUnit")
    def renewal_period_unit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "renewal_period_unit")

    @property
    @pulumi.getter(name="renewalStatus")
    def renewal_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "renewal_status")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vswitch_id")

