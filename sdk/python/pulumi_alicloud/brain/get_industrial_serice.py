# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities, _tables

__all__ = [
    'GetIndustrialSericeResult',
    'AwaitableGetIndustrialSericeResult',
    'get_industrial_serice',
]

@pulumi.output_type
class GetIndustrialSericeResult:
    """
    A collection of values returned by getIndustrialSerice.
    """
    def __init__(__self__, enable=None, id=None, status=None):
        if enable and not isinstance(enable, str):
            raise TypeError("Expected argument 'enable' to be a str")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def enable(self) -> Optional[str]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current service enable status.
        """
        return pulumi.get(self, "status")


class AwaitableGetIndustrialSericeResult(GetIndustrialSericeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndustrialSericeResult(
            enable=self.enable,
            id=self.id,
            status=self.status)


def get_industrial_serice(enable: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndustrialSericeResult:
    """
    Using this data source can open Brain Industrial service automatically. If the service has been opened, it will return opened.

    > **NOTE:** Available in v1.115.0+

    ## Example Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    open = alicloud.brain.get_industrial_serice(enable="On")
    ```


    :param str enable: Setting the value to `On` to enable the service. If has been enabled, return the result. Valid values: `On` or `Off`. Default to `Off`.
    """
    __args__ = dict()
    __args__['enable'] = enable
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:brain/getIndustrialSerice:getIndustrialSerice', __args__, opts=opts, typ=GetIndustrialSericeResult).value

    return AwaitableGetIndustrialSericeResult(
        enable=__ret__.enable,
        id=__ret__.id,
        status=__ret__.status)
