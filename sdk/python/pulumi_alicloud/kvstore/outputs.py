# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceParameter',
    'GetAccountsAccountResult',
    'GetConnectionsConnectionResult',
    'GetInstanceClassesClassResult',
    'GetInstanceEnginesInstanceEngineResult',
    'GetInstancesInstanceResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class InstanceParameter(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Field `parameters` has been deprecated from provider version 1.101.0 and `config` instead.
        :param _builtins.str value: Field `parameters` has been deprecated from provider version 1.101.0 and `config` instead.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Field 'parameters' has been deprecated from version 1.101.0. Use 'config' instead.""")
    def name(self) -> Optional[_builtins.str]:
        """
        Field `parameters` has been deprecated from provider version 1.101.0 and `config` instead.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Field 'parameters' has been deprecated from version 1.101.0. Use 'config' instead.""")
    def value(self) -> Optional[_builtins.str]:
        """
        Field `parameters` has been deprecated from provider version 1.101.0 and `config` instead.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_name: _builtins.str,
                 account_privilege: _builtins.str,
                 account_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str account_name: The name of the account.
        :param _builtins.str account_privilege: The privilege of account access database.
        :param _builtins.str account_type: Privilege type of account.
        :param _builtins.str description: The description of account.
        :param _builtins.str id: The ID of the Account.
        :param _builtins.str instance_id: The Id of instance in which account belongs.
        :param _builtins.str status: The status of account.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_privilege", account_privilege)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> _builtins.str:
        """
        The privilege of account access database.
        """
        return pulumi.get(self, "account_privilege")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> _builtins.str:
        """
        Privilege type of account.
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of account.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Account.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The Id of instance in which account belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of account.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 connection_string: _builtins.str,
                 db_instance_net_type: _builtins.str,
                 expired_time: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 ip_address: _builtins.str,
                 port: _builtins.str,
                 upgradeable: _builtins.str,
                 vpc_id: _builtins.str,
                 vpc_instance_id: _builtins.str,
                 vswitch_id: _builtins.str):
        """
        :param _builtins.str connection_string: The connection string of the instance.
        :param _builtins.str db_instance_net_type: The network type of the instance.
        :param _builtins.str expired_time: The expiration time of the classic network address.
        :param _builtins.str ip_address: The IP address of the instance.
        :param _builtins.str port: The port number of the instance.
        :param _builtins.str upgradeable: The remaining validity period of the endpoint of the classic network.
        :param _builtins.str vpc_id: The ID of the VPC where the instance is deployed.
        :param _builtins.str vpc_instance_id: The ID of the instance. It is returned only when the value of the DBInstanceNetType parameter is 2 (indicating VPC).
        :param _builtins.str vswitch_id: The ID of the vSwitch.
        """
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "db_instance_net_type", db_instance_net_type)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "upgradeable", upgradeable)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_instance_id", vpc_instance_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> _builtins.str:
        """
        The connection string of the instance.
        """
        return pulumi.get(self, "connection_string")

    @_builtins.property
    @pulumi.getter(name="dbInstanceNetType")
    def db_instance_net_type(self) -> _builtins.str:
        """
        The network type of the instance.
        """
        return pulumi.get(self, "db_instance_net_type")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> _builtins.str:
        """
        The expiration time of the classic network address.
        """
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The IP address of the instance.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port number of the instance.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def upgradeable(self) -> _builtins.str:
        """
        The remaining validity period of the endpoint of the classic network.
        """
        return pulumi.get(self, "upgradeable")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC where the instance is deployed.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcInstanceId")
    def vpc_instance_id(self) -> _builtins.str:
        """
        The ID of the instance. It is returned only when the value of the DBInstanceNetType parameter is 2 (indicating VPC).
        """
        return pulumi.get(self, "vpc_instance_id")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        The ID of the vSwitch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetInstanceClassesClassResult(dict):
    def __init__(__self__, *,
                 instance_class: _builtins.str,
                 price: _builtins.str):
        """
        :param _builtins.str instance_class: KVStore available instance class.
        """
        pulumi.set(__self__, "instance_class", instance_class)
        pulumi.set(__self__, "price", price)

    @_builtins.property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> _builtins.str:
        """
        KVStore available instance class.
        """
        return pulumi.get(self, "instance_class")

    @_builtins.property
    @pulumi.getter
    def price(self) -> _builtins.str:
        return pulumi.get(self, "price")


@pulumi.output_type
class GetInstanceEnginesInstanceEngineResult(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 engine_version: _builtins.str,
                 zone_id: _builtins.str):
        """
        :param _builtins.str engine: Database type. Options are `Redis`, `Memcache`. Default to `Redis`.
        :param _builtins.str engine_version: Database version required by the user. Value options of Redis can refer to the latest docs [detail info](https://www.alibabacloud.com/help/en/redis/developer-reference/api-r-kvstore-2015-01-01-createinstance-redis) `EngineVersion`. Value of Memcache should be empty.
        :param _builtins.str zone_id: The Zone to launch the Tair (Redis OSS-Compatible) And Memcache (KVStore) Instance.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Database type. Options are `Redis`, `Memcache`. Default to `Redis`.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Database version required by the user. Value options of Redis can refer to the latest docs [detail info](https://www.alibabacloud.com/help/en/redis/developer-reference/api-r-kvstore-2015-01-01-createinstance-redis) `EngineVersion`. Value of Memcache should be empty.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The Zone to launch the Tair (Redis OSS-Compatible) And Memcache (KVStore) Instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 architecture_type: _builtins.str,
                 auto_renew: _builtins.bool,
                 auto_renew_period: _builtins.int,
                 availability_zone: _builtins.str,
                 bandwidth: _builtins.int,
                 capacity: _builtins.int,
                 charge_type: _builtins.str,
                 config: Mapping[str, _builtins.str],
                 connection_domain: _builtins.str,
                 connection_mode: _builtins.str,
                 connections: _builtins.int,
                 create_time: _builtins.str,
                 db_instance_id: _builtins.str,
                 db_instance_name: _builtins.str,
                 destroy_time: _builtins.str,
                 end_time: _builtins.str,
                 engine_version: _builtins.str,
                 expire_time: _builtins.str,
                 has_renew_change_order: _builtins.bool,
                 id: _builtins.str,
                 instance_class: _builtins.str,
                 instance_release_protection: _builtins.bool,
                 instance_type: _builtins.str,
                 is_rds: _builtins.bool,
                 maintain_end_time: _builtins.str,
                 maintain_start_time: _builtins.str,
                 max_connections: _builtins.int,
                 name: _builtins.str,
                 network_type: _builtins.str,
                 node_type: _builtins.str,
                 package_type: _builtins.str,
                 payment_type: _builtins.str,
                 port: _builtins.int,
                 private_ip: _builtins.str,
                 qps: _builtins.int,
                 region_id: _builtins.str,
                 replacate_id: _builtins.str,
                 resource_group_id: _builtins.str,
                 search_key: _builtins.str,
                 secondary_zone_id: _builtins.str,
                 security_group_id: _builtins.str,
                 security_ip_group_attribute: _builtins.str,
                 security_ip_group_name: _builtins.str,
                 security_ips: Sequence[_builtins.str],
                 ssl_enable: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 user_name: _builtins.str,
                 vpc_auth_mode: _builtins.str,
                 vpc_cloud_instance_id: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_id: _builtins.str,
                 zone_id: _builtins.str):
        """
        :param _builtins.str architecture_type: The type of the architecture. Valid values: `cluster`, `standard` and `SplitRW`.
        :param _builtins.bool auto_renew: Indicates whether auto-renewal is enabled for the instance.
        :param _builtins.int auto_renew_period: The duration for which the instance is automatically renewed. Unit: months.
        :param _builtins.str availability_zone: It has been deprecated from provider version 1.101.0 and `zone_id` instead.
        :param _builtins.int bandwidth: Instance bandwidth limit. Unit: Mbit/s.
        :param _builtins.int capacity: Capacity of the applied Tair (Redis OSS-Compatible) And Memcached (KVStore) Classic Instance. Unit: MB.
        :param _builtins.str charge_type: It has been deprecated from provider version 1.101.0 and `payment_type` instead.
        :param Mapping[str, _builtins.str] config: The parameter configuration of the instance.
        :param _builtins.str connection_domain: Instance connection domain (only Intranet access supported).
        :param _builtins.str connection_mode: The connection mode of the instance.
        :param _builtins.int connections: IIt has been deprecated from provider version 1.101.0 and `max_connections` instead.
        :param _builtins.str create_time: Creation time of the instance.
        :param _builtins.str db_instance_id: The ID of the instance.
        :param _builtins.str db_instance_name: The name of the instance.
        :param _builtins.str destroy_time: The time when the instance was destroyed.
        :param _builtins.str end_time: Expiration time. Pay-As-You-Go instances are never expire.
        :param _builtins.str engine_version: The engine version. Valid values: `2.8`, `4.0`, `5.0`, `6.0`, `7.0`.
        :param _builtins.str expire_time: It has been deprecated from provider version 1.101.0 and `end_time` instead.
        :param _builtins.bool has_renew_change_order: Indicates whether there was an order of renewal with configuration change that had not taken effect.
        :param _builtins.str id: The ID of the instance.
        :param _builtins.str instance_class: Type of the applied Tair (Redis OSS-Compatible) And Memcache (KVStore) Classic Instance. For more information, see [Instance type table](https://help.aliyun.com/zh/redis/developer-reference/instance-types).
        :param _builtins.bool instance_release_protection: Indicates whether the release protection feature is enabled for the instance.
        :param _builtins.str instance_type: The engine type of the KVStore DBInstance. Options are `Memcache`, and `Redis`. If no value is specified, all types are returned.
        :param _builtins.bool is_rds: Indicates whether the instance is managed by Relational Database Service (RDS).
        :param _builtins.str maintain_end_time: The end time of the maintenance window. The time is in the HH:mmZ format. The time is displayed in UTC.
        :param _builtins.str maintain_start_time: The start time of the maintenance window. The time is in the HH:mmZ format. The time is displayed in UTC.
        :param _builtins.int max_connections: Instance connection quantity limit. Unit: count.
        :param _builtins.str name: It has been deprecated from provider version 1.101.0 and `db_instance_name` instead.
        :param _builtins.str network_type: The type of the network. Valid values: `CLASSIC`, `VPC`.
        :param _builtins.str node_type: The node type of the instance.
        :param _builtins.str package_type: The type of the package.
        :param _builtins.str payment_type: The payment type. Valid values: `PostPaid`, `PrePaid`.
        :param _builtins.int port: The service port of the instance.
        :param _builtins.str private_ip: Private IP address of the instance.
        :param _builtins.int qps: The queries per second (QPS) supported by the instance.
        :param _builtins.str region_id: Region ID the instance belongs to.
        :param _builtins.str replacate_id: The logical ID of the replica instance.
        :param _builtins.str resource_group_id: The ID of the resource group.
        :param _builtins.str search_key: The name of the instance.
        :param _builtins.str secondary_zone_id: The ID of the secondary zone to which you want to migrate the Tair (Redis OSS-Compatible) And Memcache (KVStore) Classic Instance.
        :param _builtins.str security_group_id: The ID of the security group associated with the instance.
        :param _builtins.str security_ip_group_attribute: By default, this parameter is left empty. The attribute of the whitelist. The console does not display the whitelist whose value of this parameter is hidden
        :param _builtins.str security_ip_group_name: The name of the IP address whitelist.
        :param Sequence[_builtins.str] security_ips: The IP addresses in the whitelist.
        :param _builtins.str ssl_enable: Indicates whether SSL encryption is enabled.
        :param _builtins.str status: The status of the KVStore DBInstance. Valid values: `Changing`, `CleaningUpExpiredData`, `Creating`, `Flushing`, `HASwitching`, `Inactive`, `MajorVersionUpgrading`, `Migrating`, `NetworkModifying`, `Normal`, `Rebooting`, `SSLModifying`, `Transforming`, `ZoneMigrating`.
        :param Mapping[str, _builtins.str] tags: Query the instance bound to the tag. The format of the incoming value is `json` string, including `TagKey` and `TagValue`. `TagKey` cannot be null, and `TagValue` can be empty. Format example `{"key1":"value1"}`.
        :param _builtins.str user_name: The username of the instance.
        :param _builtins.str vpc_auth_mode: Indicates whether password authentication is enabled. Valid values: Open, Close.
        :param _builtins.str vpc_cloud_instance_id: Connection port of the instance.
        :param _builtins.str vpc_id: Used to retrieve instances belong to specified VPC.
        :param _builtins.str vswitch_id: Used to retrieve instances belong to specified `vswitch` resources.
        :param _builtins.str zone_id: The ID of the zone.
        """
        pulumi.set(__self__, "architecture_type", architecture_type)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "connection_domain", connection_domain)
        pulumi.set(__self__, "connection_mode", connection_mode)
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "db_instance_name", db_instance_name)
        pulumi.set(__self__, "destroy_time", destroy_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "has_renew_change_order", has_renew_change_order)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_class", instance_class)
        pulumi.set(__self__, "instance_release_protection", instance_release_protection)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "is_rds", is_rds)
        pulumi.set(__self__, "maintain_end_time", maintain_end_time)
        pulumi.set(__self__, "maintain_start_time", maintain_start_time)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "replacate_id", replacate_id)
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        pulumi.set(__self__, "search_key", search_key)
        pulumi.set(__self__, "secondary_zone_id", secondary_zone_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_ip_group_attribute", security_ip_group_attribute)
        pulumi.set(__self__, "security_ip_group_name", security_ip_group_name)
        pulumi.set(__self__, "security_ips", security_ips)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "vpc_auth_mode", vpc_auth_mode)
        pulumi.set(__self__, "vpc_cloud_instance_id", vpc_cloud_instance_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="architectureType")
    def architecture_type(self) -> _builtins.str:
        """
        The type of the architecture. Valid values: `cluster`, `standard` and `SplitRW`.
        """
        return pulumi.get(self, "architecture_type")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> _builtins.bool:
        """
        Indicates whether auto-renewal is enabled for the instance.
        """
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> _builtins.int:
        """
        The duration for which the instance is automatically renewed. Unit: months.
        """
        return pulumi.get(self, "auto_renew_period")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        It has been deprecated from provider version 1.101.0 and `zone_id` instead.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Instance bandwidth limit. Unit: Mbit/s.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> _builtins.int:
        """
        Capacity of the applied Tair (Redis OSS-Compatible) And Memcached (KVStore) Classic Instance. Unit: MB.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> _builtins.str:
        """
        It has been deprecated from provider version 1.101.0 and `payment_type` instead.
        """
        return pulumi.get(self, "charge_type")

    @_builtins.property
    @pulumi.getter
    def config(self) -> Mapping[str, _builtins.str]:
        """
        The parameter configuration of the instance.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="connectionDomain")
    def connection_domain(self) -> _builtins.str:
        """
        Instance connection domain (only Intranet access supported).
        """
        return pulumi.get(self, "connection_domain")

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> _builtins.str:
        """
        The connection mode of the instance.
        """
        return pulumi.get(self, "connection_mode")

    @_builtins.property
    @pulumi.getter
    def connections(self) -> _builtins.int:
        """
        IIt has been deprecated from provider version 1.101.0 and `max_connections` instead.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Creation time of the instance.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> _builtins.str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "db_instance_id")

    @_builtins.property
    @pulumi.getter(name="dbInstanceName")
    def db_instance_name(self) -> _builtins.str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "db_instance_name")

    @_builtins.property
    @pulumi.getter(name="destroyTime")
    def destroy_time(self) -> _builtins.str:
        """
        The time when the instance was destroyed.
        """
        return pulumi.get(self, "destroy_time")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        Expiration time. Pay-As-You-Go instances are never expire.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        The engine version. Valid values: `2.8`, `4.0`, `5.0`, `6.0`, `7.0`.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        It has been deprecated from provider version 1.101.0 and `end_time` instead.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="hasRenewChangeOrder")
    def has_renew_change_order(self) -> _builtins.bool:
        """
        Indicates whether there was an order of renewal with configuration change that had not taken effect.
        """
        return pulumi.get(self, "has_renew_change_order")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> _builtins.str:
        """
        Type of the applied Tair (Redis OSS-Compatible) And Memcache (KVStore) Classic Instance. For more information, see [Instance type table](https://help.aliyun.com/zh/redis/developer-reference/instance-types).
        """
        return pulumi.get(self, "instance_class")

    @_builtins.property
    @pulumi.getter(name="instanceReleaseProtection")
    def instance_release_protection(self) -> _builtins.bool:
        """
        Indicates whether the release protection feature is enabled for the instance.
        """
        return pulumi.get(self, "instance_release_protection")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        The engine type of the KVStore DBInstance. Options are `Memcache`, and `Redis`. If no value is specified, all types are returned.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="isRds")
    def is_rds(self) -> _builtins.bool:
        """
        Indicates whether the instance is managed by Relational Database Service (RDS).
        """
        return pulumi.get(self, "is_rds")

    @_builtins.property
    @pulumi.getter(name="maintainEndTime")
    def maintain_end_time(self) -> _builtins.str:
        """
        The end time of the maintenance window. The time is in the HH:mmZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "maintain_end_time")

    @_builtins.property
    @pulumi.getter(name="maintainStartTime")
    def maintain_start_time(self) -> _builtins.str:
        """
        The start time of the maintenance window. The time is in the HH:mmZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "maintain_start_time")

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> _builtins.int:
        """
        Instance connection quantity limit. Unit: count.
        """
        return pulumi.get(self, "max_connections")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        It has been deprecated from provider version 1.101.0 and `db_instance_name` instead.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The type of the network. Valid values: `CLASSIC`, `VPC`.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        """
        The node type of the instance.
        """
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter(name="packageType")
    def package_type(self) -> _builtins.str:
        """
        The type of the package.
        """
        return pulumi.get(self, "package_type")

    @_builtins.property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> _builtins.str:
        """
        The payment type. Valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "payment_type")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The service port of the instance.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Private IP address of the instance.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.int:
        """
        The queries per second (QPS) supported by the instance.
        """
        return pulumi.get(self, "qps")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID the instance belongs to.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="replacateId")
    def replacate_id(self) -> _builtins.str:
        """
        The logical ID of the replica instance.
        """
        return pulumi.get(self, "replacate_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        """
        The ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> _builtins.str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "search_key")

    @_builtins.property
    @pulumi.getter(name="secondaryZoneId")
    def secondary_zone_id(self) -> _builtins.str:
        """
        The ID of the secondary zone to which you want to migrate the Tair (Redis OSS-Compatible) And Memcache (KVStore) Classic Instance.
        """
        return pulumi.get(self, "secondary_zone_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group associated with the instance.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityIpGroupAttribute")
    def security_ip_group_attribute(self) -> _builtins.str:
        """
        By default, this parameter is left empty. The attribute of the whitelist. The console does not display the whitelist whose value of this parameter is hidden
        """
        return pulumi.get(self, "security_ip_group_attribute")

    @_builtins.property
    @pulumi.getter(name="securityIpGroupName")
    def security_ip_group_name(self) -> _builtins.str:
        """
        The name of the IP address whitelist.
        """
        return pulumi.get(self, "security_ip_group_name")

    @_builtins.property
    @pulumi.getter(name="securityIps")
    def security_ips(self) -> Sequence[_builtins.str]:
        """
        The IP addresses in the whitelist.
        """
        return pulumi.get(self, "security_ips")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> _builtins.str:
        """
        Indicates whether SSL encryption is enabled.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the KVStore DBInstance. Valid values: `Changing`, `CleaningUpExpiredData`, `Creating`, `Flushing`, `HASwitching`, `Inactive`, `MajorVersionUpgrading`, `Migrating`, `NetworkModifying`, `Normal`, `Rebooting`, `SSLModifying`, `Transforming`, `ZoneMigrating`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Query the instance bound to the tag. The format of the incoming value is `json` string, including `TagKey` and `TagValue`. `TagKey` cannot be null, and `TagValue` can be empty. Format example `{"key1":"value1"}`.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The username of the instance.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="vpcAuthMode")
    def vpc_auth_mode(self) -> _builtins.str:
        """
        Indicates whether password authentication is enabled. Valid values: Open, Close.
        """
        return pulumi.get(self, "vpc_auth_mode")

    @_builtins.property
    @pulumi.getter(name="vpcCloudInstanceId")
    def vpc_cloud_instance_id(self) -> _builtins.str:
        """
        Connection port of the instance.
        """
        return pulumi.get(self, "vpc_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Used to retrieve instances belong to specified VPC.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        Used to retrieve instances belong to specified `vswitch` resources.
        """
        return pulumi.get(self, "vswitch_id")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The ID of the zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 multi_zone_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str id: ID of the zone.
        :param Sequence[_builtins.str] multi_zone_ids: A list of zone ids in which the multi zone.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "multi_zone_ids", multi_zone_ids)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the zone.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="multiZoneIds")
    def multi_zone_ids(self) -> Sequence[_builtins.str]:
        """
        A list of zone ids in which the multi zone.
        """
        return pulumi.get(self, "multi_zone_ids")


