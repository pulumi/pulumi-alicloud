# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities, _tables

__all__ = [
    'GetInstancesInstanceResult',
    'GetSaslAclsAclResult',
    'GetSaslUsersUserResult',
    'GetTopicsTopicResult',
    'GetTrailsActiontrailResult',
    'GetTrailsDeprecatedActiontrailResult',
    'GetTrailsDeprecatedTrailResult',
    'GetTrailsTrailResult',
]

@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 config: str,
                 create_time: str,
                 deploy_type: int,
                 disk_size: int,
                 disk_type: int,
                 eip_max: int,
                 end_point: str,
                 id: str,
                 io_max: int,
                 name: str,
                 paid_type: str,
                 security_group: str,
                 service_status: int,
                 service_version: str,
                 spec_type: str,
                 topic_quota: int,
                 vpc_id: str,
                 vswitch_id: str,
                 zone_id: str):
        """
        :param str config: The config the instance.
        :param str create_time: The create time of the instance.
        :param int deploy_type: The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
        :param int disk_size: The disk size of the instance.
        :param int disk_type: The disk type of the instance. 0: efficient cloud disk , 1: SSD.
        :param int eip_max: The peak bandwidth of the instance.
        :param str end_point: The endPoint to access the instance.
        :param str id: ID of the instance.
        :param int io_max: The peak value of io of the instance.
        :param str name: Name of the instance.
        :param str paid_type: The paid type of the instance.
        :param str security_group: The security group of the instance.
        :param int service_status: The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
        :param str service_version: The kafka openSource version of the instance.
        :param str spec_type: The spec type of the instance.
        :param int topic_quota: The max num of topic can be create of the instance.
        :param str vpc_id: The ID of attaching VPC to instance.
        :param str vswitch_id: The ID of attaching vswitch to instance.
        :param str zone_id: The ID of attaching zone to instance.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "deploy_type", deploy_type)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "eip_max", eip_max)
        pulumi.set(__self__, "end_point", end_point)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "io_max", io_max)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paid_type", paid_type)
        pulumi.set(__self__, "security_group", security_group)
        pulumi.set(__self__, "service_status", service_status)
        pulumi.set(__self__, "service_version", service_version)
        pulumi.set(__self__, "spec_type", spec_type)
        pulumi.set(__self__, "topic_quota", topic_quota)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        The config the instance.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> int:
        """
        The deploy type of the instance. 0: sharing instance, 1: vpc instance, 2: vpc instance(support ip mapping), 3: eip instance, 4: eip/vpc instance, 5: vpc instance.
        """
        return pulumi.get(self, "deploy_type")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        The disk size of the instance.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> int:
        """
        The disk type of the instance. 0: efficient cloud disk , 1: SSD.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="eipMax")
    def eip_max(self) -> int:
        """
        The peak bandwidth of the instance.
        """
        return pulumi.get(self, "eip_max")

    @property
    @pulumi.getter(name="endPoint")
    def end_point(self) -> str:
        """
        The endPoint to access the instance.
        """
        return pulumi.get(self, "end_point")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ioMax")
    def io_max(self) -> int:
        """
        The peak value of io of the instance.
        """
        return pulumi.get(self, "io_max")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paidType")
    def paid_type(self) -> str:
        """
        The paid type of the instance.
        """
        return pulumi.get(self, "paid_type")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> str:
        """
        The security group of the instance.
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> int:
        """
        The current status of the instance. -1: unknown status, 0: wait deploy, 1: initializing, 2: preparing, 3 starting, 5: in service, 7: wait upgrade, 8: upgrading, 10: released, 15: freeze, 101: deploy error, 102: upgrade error.
        """
        return pulumi.get(self, "service_status")

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> str:
        """
        The kafka openSource version of the instance.
        """
        return pulumi.get(self, "service_version")

    @property
    @pulumi.getter(name="specType")
    def spec_type(self) -> str:
        """
        The spec type of the instance.
        """
        return pulumi.get(self, "spec_type")

    @property
    @pulumi.getter(name="topicQuota")
    def topic_quota(self) -> int:
        """
        The max num of topic can be create of the instance.
        """
        return pulumi.get(self, "topic_quota")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of attaching VPC to instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        The ID of attaching vswitch to instance.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The ID of attaching zone to instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetSaslAclsAclResult(dict):
    def __init__(__self__, *,
                 acl_operation_type: str,
                 acl_resource_name: str,
                 acl_resource_pattern_type: str,
                 acl_resource_type: str,
                 host: str,
                 username: str):
        """
        :param str acl_operation_type: The operation type of the sasl acl.
        :param str acl_resource_name: Get results for the specified resource name.
        :param str acl_resource_pattern_type: The resource pattern type of the sasl acl.
        :param str acl_resource_type: Get results for the specified resource type.
        :param str host: The host of the sasl acl.
        :param str username: Get results for the specified username.
        """
        pulumi.set(__self__, "acl_operation_type", acl_operation_type)
        pulumi.set(__self__, "acl_resource_name", acl_resource_name)
        pulumi.set(__self__, "acl_resource_pattern_type", acl_resource_pattern_type)
        pulumi.set(__self__, "acl_resource_type", acl_resource_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="aclOperationType")
    def acl_operation_type(self) -> str:
        """
        The operation type of the sasl acl.
        """
        return pulumi.get(self, "acl_operation_type")

    @property
    @pulumi.getter(name="aclResourceName")
    def acl_resource_name(self) -> str:
        """
        Get results for the specified resource name.
        """
        return pulumi.get(self, "acl_resource_name")

    @property
    @pulumi.getter(name="aclResourcePatternType")
    def acl_resource_pattern_type(self) -> str:
        """
        The resource pattern type of the sasl acl.
        """
        return pulumi.get(self, "acl_resource_pattern_type")

    @property
    @pulumi.getter(name="aclResourceType")
    def acl_resource_type(self) -> str:
        """
        Get results for the specified resource type.
        """
        return pulumi.get(self, "acl_resource_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host of the sasl acl.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Get results for the specified username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSaslUsersUserResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The password of the user.
        :param str username: The username of the user.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of the user.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetTopicsTopicResult(dict):
    def __init__(__self__, *,
                 compact_topic: bool,
                 create_time: str,
                 local_topic: bool,
                 partition_num: int,
                 remark: str,
                 status: int,
                 topic: str):
        """
        :param bool compact_topic: whether the current topic is kafka compact topic or not.
        :param str create_time: Time of creation.
        :param bool local_topic: whether the current topic is kafka local topic or not.
        :param int partition_num: Partition number of the topic.
        :param str remark: Remark of the topic.
        :param int status: The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
        :param str topic: The name of the topic.
        """
        pulumi.set(__self__, "compact_topic", compact_topic)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "local_topic", local_topic)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="compactTopic")
    def compact_topic(self) -> bool:
        """
        whether the current topic is kafka compact topic or not.
        """
        return pulumi.get(self, "compact_topic")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time of creation.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="localTopic")
    def local_topic(self) -> bool:
        """
        whether the current topic is kafka local topic or not.
        """
        return pulumi.get(self, "local_topic")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> int:
        """
        Partition number of the topic.
        """
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark of the topic.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The current status code of the topic. There are three values to describe the topic status: 0 stands for the topic is in service, 1 stands for freezing and 2 stands for pause.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        The name of the topic.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class GetTrailsActiontrailResult(dict):
    def __init__(__self__, *,
                 event_rw: str,
                 id: str,
                 is_organization_trail: bool,
                 oss_bucket_name: str,
                 oss_key_prefix: str,
                 oss_write_role_arn: str,
                 sls_project_arn: str,
                 sls_write_role_arn: str,
                 status: str,
                 trail_name: str,
                 trail_region: str):
        """
        :param str event_rw: Indicates whether the event is a read or a write event.
        :param str id: The id of the ActionTrail Trail. It is the same as trail name.
        :param str oss_bucket_name: The name of the specified OSS bucket.
        :param str oss_key_prefix: The prefix of the specified OSS bucket name.
        :param str sls_project_arn: The unique ARN of the Log Service project.
        :param str sls_write_role_arn: The unique ARN of the Log Service role.
        :param str status: Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
        :param str trail_name: The name of the ActionTrail Trail.
        :param str trail_region: The regions to which the trail is applied.
        """
        pulumi.set(__self__, "event_rw", event_rw)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_organization_trail", is_organization_trail)
        pulumi.set(__self__, "oss_bucket_name", oss_bucket_name)
        pulumi.set(__self__, "oss_key_prefix", oss_key_prefix)
        pulumi.set(__self__, "oss_write_role_arn", oss_write_role_arn)
        pulumi.set(__self__, "sls_project_arn", sls_project_arn)
        pulumi.set(__self__, "sls_write_role_arn", sls_write_role_arn)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trail_name", trail_name)
        pulumi.set(__self__, "trail_region", trail_region)

    @property
    @pulumi.getter(name="eventRw")
    def event_rw(self) -> str:
        """
        Indicates whether the event is a read or a write event.
        """
        return pulumi.get(self, "event_rw")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the ActionTrail Trail. It is the same as trail name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOrganizationTrail")
    def is_organization_trail(self) -> bool:
        return pulumi.get(self, "is_organization_trail")

    @property
    @pulumi.getter(name="ossBucketName")
    def oss_bucket_name(self) -> str:
        """
        The name of the specified OSS bucket.
        """
        return pulumi.get(self, "oss_bucket_name")

    @property
    @pulumi.getter(name="ossKeyPrefix")
    def oss_key_prefix(self) -> str:
        """
        The prefix of the specified OSS bucket name.
        """
        return pulumi.get(self, "oss_key_prefix")

    @property
    @pulumi.getter(name="ossWriteRoleArn")
    def oss_write_role_arn(self) -> str:
        return pulumi.get(self, "oss_write_role_arn")

    @property
    @pulumi.getter(name="slsProjectArn")
    def sls_project_arn(self) -> str:
        """
        The unique ARN of the Log Service project.
        """
        return pulumi.get(self, "sls_project_arn")

    @property
    @pulumi.getter(name="slsWriteRoleArn")
    def sls_write_role_arn(self) -> str:
        """
        The unique ARN of the Log Service role.
        """
        return pulumi.get(self, "sls_write_role_arn")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trailName")
    def trail_name(self) -> str:
        """
        The name of the ActionTrail Trail.
        """
        return pulumi.get(self, "trail_name")

    @property
    @pulumi.getter(name="trailRegion")
    def trail_region(self) -> str:
        """
        The regions to which the trail is applied.
        """
        return pulumi.get(self, "trail_region")


@pulumi.output_type
class GetTrailsDeprecatedActiontrailResult(dict):
    def __init__(__self__, *,
                 event_rw: str,
                 id: str,
                 is_organization_trail: bool,
                 oss_bucket_name: str,
                 oss_key_prefix: str,
                 oss_write_role_arn: str,
                 sls_project_arn: str,
                 sls_write_role_arn: str,
                 status: str,
                 trail_name: str,
                 trail_region: str):
        """
        :param str event_rw: Indicates whether the event is a read or a write event.
        :param str oss_bucket_name: The name of the specified OSS bucket.
        :param str oss_key_prefix: The prefix of the specified OSS bucket name.
        :param str sls_project_arn: The unique ARN of the Log Service project.
        :param str sls_write_role_arn: The unique ARN of the Log Service role.
        """
        pulumi.set(__self__, "event_rw", event_rw)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_organization_trail", is_organization_trail)
        pulumi.set(__self__, "oss_bucket_name", oss_bucket_name)
        pulumi.set(__self__, "oss_key_prefix", oss_key_prefix)
        pulumi.set(__self__, "oss_write_role_arn", oss_write_role_arn)
        pulumi.set(__self__, "sls_project_arn", sls_project_arn)
        pulumi.set(__self__, "sls_write_role_arn", sls_write_role_arn)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trail_name", trail_name)
        pulumi.set(__self__, "trail_region", trail_region)

    @property
    @pulumi.getter(name="eventRw")
    def event_rw(self) -> str:
        """
        Indicates whether the event is a read or a write event.
        """
        return pulumi.get(self, "event_rw")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOrganizationTrail")
    def is_organization_trail(self) -> bool:
        return pulumi.get(self, "is_organization_trail")

    @property
    @pulumi.getter(name="ossBucketName")
    def oss_bucket_name(self) -> str:
        """
        The name of the specified OSS bucket.
        """
        return pulumi.get(self, "oss_bucket_name")

    @property
    @pulumi.getter(name="ossKeyPrefix")
    def oss_key_prefix(self) -> str:
        """
        The prefix of the specified OSS bucket name.
        """
        return pulumi.get(self, "oss_key_prefix")

    @property
    @pulumi.getter(name="ossWriteRoleArn")
    def oss_write_role_arn(self) -> str:
        return pulumi.get(self, "oss_write_role_arn")

    @property
    @pulumi.getter(name="slsProjectArn")
    def sls_project_arn(self) -> str:
        """
        The unique ARN of the Log Service project.
        """
        return pulumi.get(self, "sls_project_arn")

    @property
    @pulumi.getter(name="slsWriteRoleArn")
    def sls_write_role_arn(self) -> str:
        """
        The unique ARN of the Log Service role.
        """
        return pulumi.get(self, "sls_write_role_arn")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trailName")
    def trail_name(self) -> str:
        return pulumi.get(self, "trail_name")

    @property
    @pulumi.getter(name="trailRegion")
    def trail_region(self) -> str:
        return pulumi.get(self, "trail_region")


@pulumi.output_type
class GetTrailsDeprecatedTrailResult(dict):
    def __init__(__self__, *,
                 event_rw: str,
                 id: str,
                 is_organization_trail: bool,
                 oss_bucket_name: str,
                 oss_key_prefix: str,
                 oss_write_role_arn: str,
                 sls_project_arn: str,
                 sls_write_role_arn: str,
                 status: str,
                 trail_name: str,
                 trail_region: str):
        """
        :param str event_rw: Indicates whether the event is a read or a write event.
        :param str oss_bucket_name: The name of the specified OSS bucket.
        :param str oss_key_prefix: The prefix of the specified OSS bucket name.
        :param str sls_project_arn: The unique ARN of the Log Service project.
        :param str sls_write_role_arn: The unique ARN of the Log Service role.
        """
        pulumi.set(__self__, "event_rw", event_rw)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_organization_trail", is_organization_trail)
        pulumi.set(__self__, "oss_bucket_name", oss_bucket_name)
        pulumi.set(__self__, "oss_key_prefix", oss_key_prefix)
        pulumi.set(__self__, "oss_write_role_arn", oss_write_role_arn)
        pulumi.set(__self__, "sls_project_arn", sls_project_arn)
        pulumi.set(__self__, "sls_write_role_arn", sls_write_role_arn)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trail_name", trail_name)
        pulumi.set(__self__, "trail_region", trail_region)

    @property
    @pulumi.getter(name="eventRw")
    def event_rw(self) -> str:
        """
        Indicates whether the event is a read or a write event.
        """
        return pulumi.get(self, "event_rw")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOrganizationTrail")
    def is_organization_trail(self) -> bool:
        return pulumi.get(self, "is_organization_trail")

    @property
    @pulumi.getter(name="ossBucketName")
    def oss_bucket_name(self) -> str:
        """
        The name of the specified OSS bucket.
        """
        return pulumi.get(self, "oss_bucket_name")

    @property
    @pulumi.getter(name="ossKeyPrefix")
    def oss_key_prefix(self) -> str:
        """
        The prefix of the specified OSS bucket name.
        """
        return pulumi.get(self, "oss_key_prefix")

    @property
    @pulumi.getter(name="ossWriteRoleArn")
    def oss_write_role_arn(self) -> str:
        return pulumi.get(self, "oss_write_role_arn")

    @property
    @pulumi.getter(name="slsProjectArn")
    def sls_project_arn(self) -> str:
        """
        The unique ARN of the Log Service project.
        """
        return pulumi.get(self, "sls_project_arn")

    @property
    @pulumi.getter(name="slsWriteRoleArn")
    def sls_write_role_arn(self) -> str:
        """
        The unique ARN of the Log Service role.
        """
        return pulumi.get(self, "sls_write_role_arn")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trailName")
    def trail_name(self) -> str:
        return pulumi.get(self, "trail_name")

    @property
    @pulumi.getter(name="trailRegion")
    def trail_region(self) -> str:
        return pulumi.get(self, "trail_region")


@pulumi.output_type
class GetTrailsTrailResult(dict):
    def __init__(__self__, *,
                 event_rw: str,
                 id: str,
                 is_organization_trail: bool,
                 oss_bucket_name: str,
                 oss_key_prefix: str,
                 oss_write_role_arn: str,
                 sls_project_arn: str,
                 sls_write_role_arn: str,
                 status: str,
                 trail_name: str,
                 trail_region: str):
        """
        :param str event_rw: Indicates whether the event is a read or a write event.
        :param str id: The id of the ActionTrail Trail. It is the same as trail name.
        :param str oss_bucket_name: The name of the specified OSS bucket.
        :param str oss_key_prefix: The prefix of the specified OSS bucket name.
        :param str sls_project_arn: The unique ARN of the Log Service project.
        :param str sls_write_role_arn: The unique ARN of the Log Service role.
        :param str status: Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
        :param str trail_name: The name of the ActionTrail Trail.
        :param str trail_region: The regions to which the trail is applied.
        """
        pulumi.set(__self__, "event_rw", event_rw)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_organization_trail", is_organization_trail)
        pulumi.set(__self__, "oss_bucket_name", oss_bucket_name)
        pulumi.set(__self__, "oss_key_prefix", oss_key_prefix)
        pulumi.set(__self__, "oss_write_role_arn", oss_write_role_arn)
        pulumi.set(__self__, "sls_project_arn", sls_project_arn)
        pulumi.set(__self__, "sls_write_role_arn", sls_write_role_arn)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trail_name", trail_name)
        pulumi.set(__self__, "trail_region", trail_region)

    @property
    @pulumi.getter(name="eventRw")
    def event_rw(self) -> str:
        """
        Indicates whether the event is a read or a write event.
        """
        return pulumi.get(self, "event_rw")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the ActionTrail Trail. It is the same as trail name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOrganizationTrail")
    def is_organization_trail(self) -> bool:
        return pulumi.get(self, "is_organization_trail")

    @property
    @pulumi.getter(name="ossBucketName")
    def oss_bucket_name(self) -> str:
        """
        The name of the specified OSS bucket.
        """
        return pulumi.get(self, "oss_bucket_name")

    @property
    @pulumi.getter(name="ossKeyPrefix")
    def oss_key_prefix(self) -> str:
        """
        The prefix of the specified OSS bucket name.
        """
        return pulumi.get(self, "oss_key_prefix")

    @property
    @pulumi.getter(name="ossWriteRoleArn")
    def oss_write_role_arn(self) -> str:
        return pulumi.get(self, "oss_write_role_arn")

    @property
    @pulumi.getter(name="slsProjectArn")
    def sls_project_arn(self) -> str:
        """
        The unique ARN of the Log Service project.
        """
        return pulumi.get(self, "sls_project_arn")

    @property
    @pulumi.getter(name="slsWriteRoleArn")
    def sls_write_role_arn(self) -> str:
        """
        The unique ARN of the Log Service role.
        """
        return pulumi.get(self, "sls_write_role_arn")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Filter the results by status of the ActionTrail Trail. Valid values: `Disable`, `Enable`, `Fresh`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trailName")
    def trail_name(self) -> str:
        """
        The name of the ActionTrail Trail.
        """
        return pulumi.get(self, "trail_name")

    @property
    @pulumi.getter(name="trailRegion")
    def trail_region(self) -> str:
        """
        The regions to which the trail is applied.
        """
        return pulumi.get(self, "trail_region")


