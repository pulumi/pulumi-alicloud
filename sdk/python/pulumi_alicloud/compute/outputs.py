# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'NestServiceInstanceCommodity',
    'NestServiceInstanceOperationMetadata',
    'GetNestServiceInstancesFilterResult',
    'GetNestServiceInstancesServiceInstanceResult',
    'GetNestServiceInstancesServiceInstanceServiceResult',
    'GetNestServiceInstancesServiceInstanceServiceServiceInfoResult',
]

@pulumi.output_type
class NestServiceInstanceCommodity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "payPeriod":
            suggest = "pay_period"
        elif key == "payPeriodUnit":
            suggest = "pay_period_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NestServiceInstanceCommodity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NestServiceInstanceCommodity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NestServiceInstanceCommodity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pay_period: Optional[builtins.int] = None,
                 pay_period_unit: Optional[builtins.str] = None):
        """
        :param builtins.int pay_period: Length of purchase.
        :param builtins.str pay_period_unit: Duration unit. Valid values: `Year`, `Month`, `Day`.
        """
        if pay_period is not None:
            pulumi.set(__self__, "pay_period", pay_period)
        if pay_period_unit is not None:
            pulumi.set(__self__, "pay_period_unit", pay_period_unit)

    @property
    @pulumi.getter(name="payPeriod")
    def pay_period(self) -> Optional[builtins.int]:
        """
        Length of purchase.
        """
        return pulumi.get(self, "pay_period")

    @property
    @pulumi.getter(name="payPeriodUnit")
    def pay_period_unit(self) -> Optional[builtins.str]:
        """
        Duration unit. Valid values: `Year`, `Month`, `Day`.
        """
        return pulumi.get(self, "pay_period_unit")


@pulumi.output_type
class NestServiceInstanceOperationMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operatedServiceInstanceId":
            suggest = "operated_service_instance_id"
        elif key == "operationEndTime":
            suggest = "operation_end_time"
        elif key == "operationStartTime":
            suggest = "operation_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NestServiceInstanceOperationMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NestServiceInstanceOperationMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NestServiceInstanceOperationMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operated_service_instance_id: Optional[builtins.str] = None,
                 operation_end_time: Optional[builtins.str] = None,
                 operation_start_time: Optional[builtins.str] = None,
                 resources: Optional[builtins.str] = None):
        """
        :param builtins.str operated_service_instance_id: The ID of the imported service instance.
        :param builtins.str operation_end_time: The end time of O&M.
        :param builtins.str operation_start_time: The start time of O&M.
        :param builtins.str resources: The list of imported resources.
        """
        if operated_service_instance_id is not None:
            pulumi.set(__self__, "operated_service_instance_id", operated_service_instance_id)
        if operation_end_time is not None:
            pulumi.set(__self__, "operation_end_time", operation_end_time)
        if operation_start_time is not None:
            pulumi.set(__self__, "operation_start_time", operation_start_time)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="operatedServiceInstanceId")
    def operated_service_instance_id(self) -> Optional[builtins.str]:
        """
        The ID of the imported service instance.
        """
        return pulumi.get(self, "operated_service_instance_id")

    @property
    @pulumi.getter(name="operationEndTime")
    def operation_end_time(self) -> Optional[builtins.str]:
        """
        The end time of O&M.
        """
        return pulumi.get(self, "operation_end_time")

    @property
    @pulumi.getter(name="operationStartTime")
    def operation_start_time(self) -> Optional[builtins.str]:
        """
        The start time of O&M.
        """
        return pulumi.get(self, "operation_start_time")

    @property
    @pulumi.getter
    def resources(self) -> Optional[builtins.str]:
        """
        The list of imported resources.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetNestServiceInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str name: The name of the service.
        :param Sequence[builtins.str] values: Set of values that are accepted for the given field.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        Set of values that are accepted for the given field.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNestServiceInstancesServiceInstanceResult(dict):
    def __init__(__self__, *,
                 enable_instance_ops: builtins.bool,
                 id: builtins.str,
                 operated_service_instance_id: builtins.str,
                 operation_end_time: builtins.str,
                 operation_start_time: builtins.str,
                 parameters: builtins.str,
                 resources: builtins.str,
                 service_instance_id: builtins.str,
                 service_instance_name: builtins.str,
                 services: Sequence['outputs.GetNestServiceInstancesServiceInstanceServiceResult'],
                 source: builtins.str,
                 status: builtins.str,
                 tags: Mapping[str, builtins.str],
                 template_name: builtins.str):
        """
        :param builtins.bool enable_instance_ops: Whether the service instance has the O&M function.
        :param builtins.str id: The ID of the Service Instance.
        :param builtins.str operated_service_instance_id: The ID of the imported service instance.
        :param builtins.str operation_end_time: The end time of O&M.
        :param builtins.str operation_start_time: The start time of O&M.
        :param builtins.str parameters: The parameters entered by the deployment service instance.
        :param builtins.str resources: The list of imported resources.
        :param builtins.str service_instance_id: The ID of the Service Instance.
        :param builtins.str service_instance_name: The name of the Service Instance.
        :param Sequence['GetNestServiceInstancesServiceInstanceServiceArgs'] services: Service details.
        :param builtins.str source: The source of the Service Instance.
        :param builtins.str status: The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
        :param Mapping[str, builtins.str] tags: A mapping of tags to assign to the resource.
        :param builtins.str template_name: The name of the template.
        """
        pulumi.set(__self__, "enable_instance_ops", enable_instance_ops)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operated_service_instance_id", operated_service_instance_id)
        pulumi.set(__self__, "operation_end_time", operation_end_time)
        pulumi.set(__self__, "operation_start_time", operation_start_time)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "service_instance_id", service_instance_id)
        pulumi.set(__self__, "service_instance_name", service_instance_name)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="enableInstanceOps")
    def enable_instance_ops(self) -> builtins.bool:
        """
        Whether the service instance has the O&M function.
        """
        return pulumi.get(self, "enable_instance_ops")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Service Instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="operatedServiceInstanceId")
    def operated_service_instance_id(self) -> builtins.str:
        """
        The ID of the imported service instance.
        """
        return pulumi.get(self, "operated_service_instance_id")

    @property
    @pulumi.getter(name="operationEndTime")
    def operation_end_time(self) -> builtins.str:
        """
        The end time of O&M.
        """
        return pulumi.get(self, "operation_end_time")

    @property
    @pulumi.getter(name="operationStartTime")
    def operation_start_time(self) -> builtins.str:
        """
        The start time of O&M.
        """
        return pulumi.get(self, "operation_start_time")

    @property
    @pulumi.getter
    def parameters(self) -> builtins.str:
        """
        The parameters entered by the deployment service instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def resources(self) -> builtins.str:
        """
        The list of imported resources.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> builtins.str:
        """
        The ID of the Service Instance.
        """
        return pulumi.get(self, "service_instance_id")

    @property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> builtins.str:
        """
        The name of the Service Instance.
        """
        return pulumi.get(self, "service_instance_name")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetNestServiceInstancesServiceInstanceServiceResult']:
        """
        Service details.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        The source of the Service Instance.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> builtins.str:
        """
        The name of the template.
        """
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetNestServiceInstancesServiceInstanceServiceResult(dict):
    def __init__(__self__, *,
                 deploy_type: builtins.str,
                 publish_time: builtins.str,
                 service_id: builtins.str,
                 service_infos: Sequence['outputs.GetNestServiceInstancesServiceInstanceServiceServiceInfoResult'],
                 service_type: builtins.str,
                 status: builtins.str,
                 supplier_name: builtins.str,
                 supplier_url: builtins.str,
                 version: builtins.str,
                 version_name: builtins.str):
        """
        :param builtins.str deploy_type: The type of the deployment.
        :param builtins.str publish_time: The time of publish.
        :param builtins.str service_id: The id of the service.
        :param Sequence['GetNestServiceInstancesServiceInstanceServiceServiceInfoArgs'] service_infos: Service information.
        :param builtins.str service_type: The type of the service.
        :param builtins.str status: The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
        :param builtins.str supplier_name: The name of the supplier.
        :param builtins.str supplier_url: The url of the supplier.
        :param builtins.str version: The version of the service.
        :param builtins.str version_name: The version name of the service.
        """
        pulumi.set(__self__, "deploy_type", deploy_type)
        pulumi.set(__self__, "publish_time", publish_time)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_infos", service_infos)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "supplier_name", supplier_name)
        pulumi.set(__self__, "supplier_url", supplier_url)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> builtins.str:
        """
        The type of the deployment.
        """
        return pulumi.get(self, "deploy_type")

    @property
    @pulumi.getter(name="publishTime")
    def publish_time(self) -> builtins.str:
        """
        The time of publish.
        """
        return pulumi.get(self, "publish_time")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> builtins.str:
        """
        The id of the service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceInfos")
    def service_infos(self) -> Sequence['outputs.GetNestServiceInstancesServiceInstanceServiceServiceInfoResult']:
        """
        Service information.
        """
        return pulumi.get(self, "service_infos")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> builtins.str:
        """
        The type of the service.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the Service Instance. Valid Values: `Created`, `Deploying`, `DeployedFailed`, `Deployed`, `Upgrading`, `Deleting`, `Deleted`, `DeletedFailed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supplierName")
    def supplier_name(self) -> builtins.str:
        """
        The name of the supplier.
        """
        return pulumi.get(self, "supplier_name")

    @property
    @pulumi.getter(name="supplierUrl")
    def supplier_url(self) -> builtins.str:
        """
        The url of the supplier.
        """
        return pulumi.get(self, "supplier_url")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The version of the service.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> builtins.str:
        """
        The version name of the service.
        """
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetNestServiceInstancesServiceInstanceServiceServiceInfoResult(dict):
    def __init__(__self__, *,
                 image: builtins.str,
                 locale: builtins.str,
                 name: builtins.str,
                 short_description: builtins.str):
        """
        :param builtins.str image: The image of the service.
        :param builtins.str locale: The locale of the service.
        :param builtins.str name: The name of the service.
        :param builtins.str short_description: The short description of the service.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The image of the service.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def locale(self) -> builtins.str:
        """
        The locale of the service.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> builtins.str:
        """
        The short description of the service.
        """
        return pulumi.get(self, "short_description")


