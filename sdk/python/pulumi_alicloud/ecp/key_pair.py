# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyPairArgs', 'KeyPair']

@pulumi.input_type
class KeyPairArgs:
    def __init__(__self__, *,
                 key_pair_name: pulumi.Input[str],
                 public_key_body: pulumi.Input[str]):
        """
        The set of arguments for constructing a KeyPair resource.
        :param pulumi.Input[str] key_pair_name: The Key Name.
        :param pulumi.Input[str] public_key_body: The public key body.
        """
        KeyPairArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_pair_name=key_pair_name,
            public_key_body=public_key_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_pair_name: pulumi.Input[str],
             public_key_body: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyPairName' in kwargs:
            key_pair_name = kwargs['keyPairName']
        if 'publicKeyBody' in kwargs:
            public_key_body = kwargs['publicKeyBody']

        _setter("key_pair_name", key_pair_name)
        _setter("public_key_body", public_key_body)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> pulumi.Input[str]:
        """
        The Key Name.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_pair_name", value)

    @property
    @pulumi.getter(name="publicKeyBody")
    def public_key_body(self) -> pulumi.Input[str]:
        """
        The public key body.
        """
        return pulumi.get(self, "public_key_body")

    @public_key_body.setter
    def public_key_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key_body", value)


@pulumi.input_type
class _KeyPairState:
    def __init__(__self__, *,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 public_key_body: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KeyPair resources.
        :param pulumi.Input[str] key_pair_name: The Key Name.
        :param pulumi.Input[str] public_key_body: The public key body.
        """
        _KeyPairState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_pair_name=key_pair_name,
            public_key_body=public_key_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_pair_name: Optional[pulumi.Input[str]] = None,
             public_key_body: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyPairName' in kwargs:
            key_pair_name = kwargs['keyPairName']
        if 'publicKeyBody' in kwargs:
            public_key_body = kwargs['publicKeyBody']

        if key_pair_name is not None:
            _setter("key_pair_name", key_pair_name)
        if public_key_body is not None:
            _setter("public_key_body", public_key_body)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Key Name.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair_name", value)

    @property
    @pulumi.getter(name="publicKeyBody")
    def public_key_body(self) -> Optional[pulumi.Input[str]]:
        """
        The public key body.
        """
        return pulumi.get(self, "public_key_body")

    @public_key_body.setter
    def public_key_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key_body", value)


class KeyPair(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 public_key_body: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Elastic Cloud Phone (ECP) Key Pair resource.

        For information about Elastic Cloud Phone (ECP) Key Pair and how to use it, see [What is Key Pair](https://help.aliyun.com/document_detail/257197.html).

        > **NOTE:** Available in v1.130.0+.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        example = alicloud.ecp.KeyPair("example",
            key_pair_name="my-KeyPair",
            public_key_body="ssh-rsa AAAAxxxxxxxxxxtyuudsfsg")
        ```

        ## Import

        Elastic Cloud Phone (ECP) Key Pair can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:ecp/keyPair:KeyPair example <key_pair_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_pair_name: The Key Name.
        :param pulumi.Input[str] public_key_body: The public key body.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyPairArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Elastic Cloud Phone (ECP) Key Pair resource.

        For information about Elastic Cloud Phone (ECP) Key Pair and how to use it, see [What is Key Pair](https://help.aliyun.com/document_detail/257197.html).

        > **NOTE:** Available in v1.130.0+.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        example = alicloud.ecp.KeyPair("example",
            key_pair_name="my-KeyPair",
            public_key_body="ssh-rsa AAAAxxxxxxxxxxtyuudsfsg")
        ```

        ## Import

        Elastic Cloud Phone (ECP) Key Pair can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:ecp/keyPair:KeyPair example <key_pair_name>
        ```

        :param str resource_name: The name of the resource.
        :param KeyPairArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyPairArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            KeyPairArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 public_key_body: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyPairArgs.__new__(KeyPairArgs)

            if key_pair_name is None and not opts.urn:
                raise TypeError("Missing required property 'key_pair_name'")
            __props__.__dict__["key_pair_name"] = key_pair_name
            if public_key_body is None and not opts.urn:
                raise TypeError("Missing required property 'public_key_body'")
            __props__.__dict__["public_key_body"] = public_key_body
        super(KeyPair, __self__).__init__(
            'alicloud:ecp/keyPair:KeyPair',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key_pair_name: Optional[pulumi.Input[str]] = None,
            public_key_body: Optional[pulumi.Input[str]] = None) -> 'KeyPair':
        """
        Get an existing KeyPair resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_pair_name: The Key Name.
        :param pulumi.Input[str] public_key_body: The public key body.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyPairState.__new__(_KeyPairState)

        __props__.__dict__["key_pair_name"] = key_pair_name
        __props__.__dict__["public_key_body"] = public_key_body
        return KeyPair(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> pulumi.Output[str]:
        """
        The Key Name.
        """
        return pulumi.get(self, "key_pair_name")

    @property
    @pulumi.getter(name="publicKeyBody")
    def public_key_body(self) -> pulumi.Output[str]:
        """
        The public key body.
        """
        return pulumi.get(self, "public_key_body")

