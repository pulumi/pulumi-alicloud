# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceEcsList',
    'GetAutoSnapShotPoliciesAutoSnapShotPolicyResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceEcsListResult',
    'GetSnapshotsSnapshotResult',
]

@pulumi.output_type
class InstanceEcsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ecsId":
            suggest = "ecs_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceEcsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceEcsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceEcsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ecs_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str ecs_id: The ID of the ECS instance.
        """
        if ecs_id is not None:
            pulumi.set(__self__, "ecs_id", ecs_id)

    @_builtins.property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> Optional[_builtins.str]:
        """
        The ID of the ECS instance.
        """
        return pulumi.get(self, "ecs_id")


@pulumi.output_type
class GetAutoSnapShotPoliciesAutoSnapShotPolicyResult(dict):
    def __init__(__self__, *,
                 applied_dbfs_number: _builtins.int,
                 create_time: _builtins.str,
                 id: _builtins.str,
                 last_modified: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str,
                 repeat_weekdays: Sequence[_builtins.str],
                 retention_days: _builtins.int,
                 status: _builtins.str,
                 status_detail: _builtins.str,
                 time_points: Sequence[_builtins.str]):
        """
        :param _builtins.int applied_dbfs_number: The number of database file systems set by the automatic snapshot policy.
        :param _builtins.str create_time: The creation time of the resource
        :param _builtins.str id: The ID of the policy.
        :param _builtins.str last_modified: Last modification time of automatic snapshot policy
        :param _builtins.str policy_id: Automatic snapshot policy ID
        :param _builtins.str policy_name: Automatic snapshot policy name
        :param Sequence[_builtins.str] repeat_weekdays: A collection of automatic snapshots performed on several days of the week.
        :param _builtins.int retention_days: Automatic snapshot retention days
        :param _builtins.str status: Automatic snapshot policy status
        :param _builtins.str status_detail: Automatic snapshot policy status details
        :param Sequence[_builtins.str] time_points: The set of times at which the snapshot is taken on the day the automatic snapshot is executed.
        """
        pulumi.set(__self__, "applied_dbfs_number", applied_dbfs_number)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "repeat_weekdays", repeat_weekdays)
        pulumi.set(__self__, "retention_days", retention_days)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_detail", status_detail)
        pulumi.set(__self__, "time_points", time_points)

    @_builtins.property
    @pulumi.getter(name="appliedDbfsNumber")
    def applied_dbfs_number(self) -> _builtins.int:
        """
        The number of database file systems set by the automatic snapshot policy.
        """
        return pulumi.get(self, "applied_dbfs_number")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the resource
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> _builtins.str:
        """
        Last modification time of automatic snapshot policy
        """
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        Automatic snapshot policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Automatic snapshot policy name
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> Sequence[_builtins.str]:
        """
        A collection of automatic snapshots performed on several days of the week.
        """
        return pulumi.get(self, "repeat_weekdays")

    @_builtins.property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> _builtins.int:
        """
        Automatic snapshot retention days
        """
        return pulumi.get(self, "retention_days")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Automatic snapshot policy status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> _builtins.str:
        """
        Automatic snapshot policy status details
        """
        return pulumi.get(self, "status_detail")

    @_builtins.property
    @pulumi.getter(name="timePoints")
    def time_points(self) -> Sequence[_builtins.str]:
        """
        The set of times at which the snapshot is taken on the day the automatic snapshot is executed.
        """
        return pulumi.get(self, "time_points")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 attach_node_number: _builtins.int,
                 category: _builtins.str,
                 create_time: _builtins.str,
                 dbfs_cluster_id: _builtins.str,
                 ecs_lists: Sequence['outputs.GetInstancesInstanceEcsListResult'],
                 enable_raid: _builtins.bool,
                 encryption: _builtins.bool,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 instance_name: _builtins.str,
                 kms_key_id: _builtins.str,
                 payment_type: _builtins.str,
                 performance_level: _builtins.str,
                 raid_stripe_unit_number: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str,
                 zone_id: _builtins.str):
        """
        :param _builtins.int attach_node_number: the number of nodes of the Database file system.
        :param _builtins.str category: The type of the Database file system. Valid values: `standard`.
        :param _builtins.str create_time: The create time of the Database file system.
        :param _builtins.str dbfs_cluster_id: The cluster ID of the Database file system.
        :param Sequence['GetInstancesInstanceEcsListArgs'] ecs_lists: The collection of ECS instances mounted to the Database file system.
        :param _builtins.bool enable_raid: Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
        :param _builtins.bool encryption: Whether to encrypt the Database file system. Valid values: `true` and `false`.
        :param _builtins.str id: The ID of the Instance.
        :param _builtins.str instance_id: The ID of the Database File System
        :param _builtins.str instance_name: The name of the Database file system.
        :param _builtins.str kms_key_id: The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
        :param _builtins.str payment_type: Thr payment type of the Database file system. Valid value: `PayAsYouGo`.
        :param _builtins.str performance_level: The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
        :param _builtins.str raid_stripe_unit_number: The number of strip . When `enable_raid` parameter is set to `true` will transfer. This parameter is valid When `enable_raid` parameter is set to `true`.
        :param _builtins.int size: The size Of the Database file system. Unit: GiB.
        :param _builtins.str status: The status of the Database file system.
        :param _builtins.str zone_id: The Zone ID of the Database file system.
        """
        pulumi.set(__self__, "attach_node_number", attach_node_number)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dbfs_cluster_id", dbfs_cluster_id)
        pulumi.set(__self__, "ecs_lists", ecs_lists)
        pulumi.set(__self__, "enable_raid", enable_raid)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "performance_level", performance_level)
        pulumi.set(__self__, "raid_stripe_unit_number", raid_stripe_unit_number)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="attachNodeNumber")
    def attach_node_number(self) -> _builtins.int:
        """
        the number of nodes of the Database file system.
        """
        return pulumi.get(self, "attach_node_number")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The type of the Database file system. Valid values: `standard`.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The create time of the Database file system.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="dbfsClusterId")
    def dbfs_cluster_id(self) -> _builtins.str:
        """
        The cluster ID of the Database file system.
        """
        return pulumi.get(self, "dbfs_cluster_id")

    @_builtins.property
    @pulumi.getter(name="ecsLists")
    def ecs_lists(self) -> Sequence['outputs.GetInstancesInstanceEcsListResult']:
        """
        The collection of ECS instances mounted to the Database file system.
        """
        return pulumi.get(self, "ecs_lists")

    @_builtins.property
    @pulumi.getter(name="enableRaid")
    def enable_raid(self) -> _builtins.bool:
        """
        Whether to create the Database file system in RAID way. Valid values : `true` anf `false`.
        """
        return pulumi.get(self, "enable_raid")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> _builtins.bool:
        """
        Whether to encrypt the Database file system. Valid values: `true` and `false`.
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the Database File System
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        """
        The name of the Database file system.
        """
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> _builtins.str:
        """
        The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
        """
        return pulumi.get(self, "kms_key_id")

    @_builtins.property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> _builtins.str:
        """
        Thr payment type of the Database file system. Valid value: `PayAsYouGo`.
        """
        return pulumi.get(self, "payment_type")

    @_builtins.property
    @pulumi.getter(name="performanceLevel")
    def performance_level(self) -> _builtins.str:
        """
        The performance level of the Database file system. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
        """
        return pulumi.get(self, "performance_level")

    @_builtins.property
    @pulumi.getter(name="raidStripeUnitNumber")
    def raid_stripe_unit_number(self) -> _builtins.str:
        """
        The number of strip . When `enable_raid` parameter is set to `true` will transfer. This parameter is valid When `enable_raid` parameter is set to `true`.
        """
        return pulumi.get(self, "raid_stripe_unit_number")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size Of the Database file system. Unit: GiB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the Database file system.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The Zone ID of the Database file system.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstancesInstanceEcsListResult(dict):
    def __init__(__self__, *,
                 ecs_id: _builtins.str):
        """
        :param _builtins.str ecs_id: The ID of the ECS instance.
        """
        pulumi.set(__self__, "ecs_id", ecs_id)

    @_builtins.property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> _builtins.str:
        """
        The ID of the ECS instance.
        """
        return pulumi.get(self, "ecs_id")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 instance_id: _builtins.str,
                 last_modified_time: _builtins.str,
                 progress: _builtins.str,
                 remain_time: _builtins.int,
                 retention_days: _builtins.int,
                 snapshot_id: _builtins.str,
                 snapshot_name: _builtins.str,
                 snapshot_type: _builtins.str,
                 source_fs_size: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str category: The type of the Snapshot.
        :param _builtins.str create_time: The creation time of the snapshot.
        :param _builtins.str description: The description of the snapshot.
        :param _builtins.str id: The ID of the Snapshot.
        :param _builtins.str instance_id: The ID of the database file system.
        :param _builtins.str last_modified_time: The last modification time of the snapshot.
        :param _builtins.str progress: The progress of the snapshot.
        :param _builtins.int remain_time: The remaining completion time of the snapshot being created, in seconds.
        :param _builtins.int retention_days: The retention days of the snapshot.
        :param _builtins.str snapshot_id: The ID of the snapshot.
        :param _builtins.str snapshot_name: The name of the snapshot.
        :param _builtins.str snapshot_type: The creation of the snapshot.
        :param _builtins.int source_fs_size: Source database file system capacity.
        :param _builtins.str status: The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "remain_time", remain_time)
        pulumi.set(__self__, "retention_days", retention_days)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)
        pulumi.set(__self__, "snapshot_type", snapshot_type)
        pulumi.set(__self__, "source_fs_size", source_fs_size)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        The type of the Snapshot.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the snapshot.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Snapshot.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The ID of the database file system.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> _builtins.str:
        """
        The last modification time of the snapshot.
        """
        return pulumi.get(self, "last_modified_time")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        The progress of the snapshot.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> _builtins.int:
        """
        The remaining completion time of the snapshot being created, in seconds.
        """
        return pulumi.get(self, "remain_time")

    @_builtins.property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> _builtins.int:
        """
        The retention days of the snapshot.
        """
        return pulumi.get(self, "retention_days")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> _builtins.str:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> _builtins.str:
        """
        The creation of the snapshot.
        """
        return pulumi.get(self, "snapshot_type")

    @_builtins.property
    @pulumi.getter(name="sourceFsSize")
    def source_fs_size(self) -> _builtins.int:
        """
        Source database file system capacity.
        """
        return pulumi.get(self, "source_fs_size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
        """
        return pulumi.get(self, "status")


