# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotsResult',
    'AwaitableGetSnapshotsResult',
    'get_snapshots',
    'get_snapshots_output',
]

@pulumi.output_type
class GetSnapshotsResult:
    """
    A collection of values returned by getSnapshots.
    """
    def __init__(__self__, id=None, ids=None, name_regex=None, names=None, output_file=None, snapshots=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetSnapshotsResult(GetSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsResult(
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            snapshots=self.snapshots,
            status=self.status)


def get_snapshots(ids: Optional[Sequence[str]] = None,
                  name_regex: Optional[str] = None,
                  output_file: Optional[str] = None,
                  status: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsResult:
    """
    This data source provides the Dbfs Snapshots of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.156.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.databasefilesystem.get_snapshots(ids=["example_id"])
    pulumi.export("dbfsSnapshotId1", ids.snapshots[0].id)
    name_regex = alicloud.databasefilesystem.get_snapshots(name_regex="^my-Snapshot")
    pulumi.export("dbfsSnapshotId2", name_regex.snapshots[0].id)
    status = alicloud.databasefilesystem.get_snapshots(status="accomplished")
    pulumi.export("dbfsSnapshotId3", status.snapshots[0].id)
    ```


    :param Sequence[str] ids: A list of Snapshot IDs.
    :param str name_regex: A regex string to filter results by Snapshot name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('alicloud:databasefilesystem/getSnapshots:getSnapshots', __args__, opts=opts, typ=GetSnapshotsResult).value

    return AwaitableGetSnapshotsResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        names=pulumi.get(__ret__, 'names'),
        output_file=pulumi.get(__ret__, 'output_file'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_snapshots)
def get_snapshots_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                         output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         status: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnapshotsResult]:
    """
    This data source provides the Dbfs Snapshots of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.156.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.databasefilesystem.get_snapshots(ids=["example_id"])
    pulumi.export("dbfsSnapshotId1", ids.snapshots[0].id)
    name_regex = alicloud.databasefilesystem.get_snapshots(name_regex="^my-Snapshot")
    pulumi.export("dbfsSnapshotId2", name_regex.snapshots[0].id)
    status = alicloud.databasefilesystem.get_snapshots(status="accomplished")
    pulumi.export("dbfsSnapshotId3", status.snapshots[0].id)
    ```


    :param Sequence[str] ids: A list of Snapshot IDs.
    :param str name_regex: A regex string to filter results by Snapshot name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the snapshot. Possible values: `progressing`, `accomplished`, `failed`.
    """
    ...
