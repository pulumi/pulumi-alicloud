# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSystemGroupsGroupResult',
    'GetSystemGroupsGroupStatResult',
]

@pulumi.output_type
class GetSystemGroupsGroupResult(dict):
    def __init__(__self__, *,
                 app: str,
                 callback: str,
                 create_time: str,
                 description: str,
                 enabled: bool,
                 gb_id: str,
                 gb_ip: str,
                 group_id: str,
                 group_name: str,
                 id: str,
                 in_protocol: str,
                 out_protocol: str,
                 play_domain: str,
                 push_domain: str,
                 stats: Sequence['outputs.GetSystemGroupsGroupStatResult']):
        """
        :param str app: The App Name of Group.
        :param str callback: The space within the device status update of the callback, need to start with http:// or https:// at the beginning.
        :param str create_time: The creation time of the Group.
        :param str description: The description of the Group.
        :param bool enabled: Whether to open Group.
        :param str gb_id: Space of national standard ID. **NOTE:** Available only in the national standard access space.
        :param str gb_ip: Space of national standard signaling server address. **NOTE:** Available only in the national standard access space.
        :param str group_id: The ID of Group.
        :param str group_name: The name of Group.
        :param str id: The ID of the Group.
        :param str in_protocol: The use of the access protocol support `gb28181`,`rtmp`(Real Time Messaging Protocol).
        :param str out_protocol: The use of space play Protocol multi-valued separate them with commas (,). Valid values: `flv`,`hls`, `rtmp`(Real Time Messaging Protocol).
        :param str play_domain: The domain name of plan streaming used by the group.
        :param str push_domain: The domain name of push streaming used by the group.
        :param Sequence['GetSystemGroupsGroupStatArgs'] stats: The Device statistics of Group.
        """
        GetSystemGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            callback=callback,
            create_time=create_time,
            description=description,
            enabled=enabled,
            gb_id=gb_id,
            gb_ip=gb_ip,
            group_id=group_id,
            group_name=group_name,
            id=id,
            in_protocol=in_protocol,
            out_protocol=out_protocol,
            play_domain=play_domain,
            push_domain=push_domain,
            stats=stats,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             callback: Optional[str] = None,
             create_time: Optional[str] = None,
             description: Optional[str] = None,
             enabled: Optional[bool] = None,
             gb_id: Optional[str] = None,
             gb_ip: Optional[str] = None,
             group_id: Optional[str] = None,
             group_name: Optional[str] = None,
             id: Optional[str] = None,
             in_protocol: Optional[str] = None,
             out_protocol: Optional[str] = None,
             play_domain: Optional[str] = None,
             push_domain: Optional[str] = None,
             stats: Optional[Sequence['outputs.GetSystemGroupsGroupStatResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if app is None:
            raise TypeError("Missing 'app' argument")
        if callback is None:
            raise TypeError("Missing 'callback' argument")
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if create_time is None:
            raise TypeError("Missing 'create_time' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if gb_id is None and 'gbId' in kwargs:
            gb_id = kwargs['gbId']
        if gb_id is None:
            raise TypeError("Missing 'gb_id' argument")
        if gb_ip is None and 'gbIp' in kwargs:
            gb_ip = kwargs['gbIp']
        if gb_ip is None:
            raise TypeError("Missing 'gb_ip' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if group_name is None and 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if group_name is None:
            raise TypeError("Missing 'group_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if in_protocol is None and 'inProtocol' in kwargs:
            in_protocol = kwargs['inProtocol']
        if in_protocol is None:
            raise TypeError("Missing 'in_protocol' argument")
        if out_protocol is None and 'outProtocol' in kwargs:
            out_protocol = kwargs['outProtocol']
        if out_protocol is None:
            raise TypeError("Missing 'out_protocol' argument")
        if play_domain is None and 'playDomain' in kwargs:
            play_domain = kwargs['playDomain']
        if play_domain is None:
            raise TypeError("Missing 'play_domain' argument")
        if push_domain is None and 'pushDomain' in kwargs:
            push_domain = kwargs['pushDomain']
        if push_domain is None:
            raise TypeError("Missing 'push_domain' argument")
        if stats is None:
            raise TypeError("Missing 'stats' argument")

        _setter("app", app)
        _setter("callback", callback)
        _setter("create_time", create_time)
        _setter("description", description)
        _setter("enabled", enabled)
        _setter("gb_id", gb_id)
        _setter("gb_ip", gb_ip)
        _setter("group_id", group_id)
        _setter("group_name", group_name)
        _setter("id", id)
        _setter("in_protocol", in_protocol)
        _setter("out_protocol", out_protocol)
        _setter("play_domain", play_domain)
        _setter("push_domain", push_domain)
        _setter("stats", stats)

    @property
    @pulumi.getter
    def app(self) -> str:
        """
        The App Name of Group.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def callback(self) -> str:
        """
        The space within the device status update of the callback, need to start with http:// or https:// at the beginning.
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the Group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to open Group.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="gbId")
    def gb_id(self) -> str:
        """
        Space of national standard ID. **NOTE:** Available only in the national standard access space.
        """
        return pulumi.get(self, "gb_id")

    @property
    @pulumi.getter(name="gbIp")
    def gb_ip(self) -> str:
        """
        Space of national standard signaling server address. **NOTE:** Available only in the national standard access space.
        """
        return pulumi.get(self, "gb_ip")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The ID of Group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The name of Group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inProtocol")
    def in_protocol(self) -> str:
        """
        The use of the access protocol support `gb28181`,`rtmp`(Real Time Messaging Protocol).
        """
        return pulumi.get(self, "in_protocol")

    @property
    @pulumi.getter(name="outProtocol")
    def out_protocol(self) -> str:
        """
        The use of space play Protocol multi-valued separate them with commas (,). Valid values: `flv`,`hls`, `rtmp`(Real Time Messaging Protocol).
        """
        return pulumi.get(self, "out_protocol")

    @property
    @pulumi.getter(name="playDomain")
    def play_domain(self) -> str:
        """
        The domain name of plan streaming used by the group.
        """
        return pulumi.get(self, "play_domain")

    @property
    @pulumi.getter(name="pushDomain")
    def push_domain(self) -> str:
        """
        The domain name of push streaming used by the group.
        """
        return pulumi.get(self, "push_domain")

    @property
    @pulumi.getter
    def stats(self) -> Sequence['outputs.GetSystemGroupsGroupStatResult']:
        """
        The Device statistics of Group.
        """
        return pulumi.get(self, "stats")


@pulumi.output_type
class GetSystemGroupsGroupStatResult(dict):
    def __init__(__self__, *,
                 device_num: str,
                 ied_num: str,
                 ipc_num: str,
                 platform_num: str):
        """
        :param str device_num: The total number of devices in the group.
        :param str ied_num: The total number of smart devices in the group.
        :param str ipc_num: The total number of cameras in the group.
        :param str platform_num: The total number of platforms in the group.
        """
        GetSystemGroupsGroupStatResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            device_num=device_num,
            ied_num=ied_num,
            ipc_num=ipc_num,
            platform_num=platform_num,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             device_num: Optional[str] = None,
             ied_num: Optional[str] = None,
             ipc_num: Optional[str] = None,
             platform_num: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if device_num is None and 'deviceNum' in kwargs:
            device_num = kwargs['deviceNum']
        if device_num is None:
            raise TypeError("Missing 'device_num' argument")
        if ied_num is None and 'iedNum' in kwargs:
            ied_num = kwargs['iedNum']
        if ied_num is None:
            raise TypeError("Missing 'ied_num' argument")
        if ipc_num is None and 'ipcNum' in kwargs:
            ipc_num = kwargs['ipcNum']
        if ipc_num is None:
            raise TypeError("Missing 'ipc_num' argument")
        if platform_num is None and 'platformNum' in kwargs:
            platform_num = kwargs['platformNum']
        if platform_num is None:
            raise TypeError("Missing 'platform_num' argument")

        _setter("device_num", device_num)
        _setter("ied_num", ied_num)
        _setter("ipc_num", ipc_num)
        _setter("platform_num", platform_num)

    @property
    @pulumi.getter(name="deviceNum")
    def device_num(self) -> str:
        """
        The total number of devices in the group.
        """
        return pulumi.get(self, "device_num")

    @property
    @pulumi.getter(name="iedNum")
    def ied_num(self) -> str:
        """
        The total number of smart devices in the group.
        """
        return pulumi.get(self, "ied_num")

    @property
    @pulumi.getter(name="ipcNum")
    def ipc_num(self) -> str:
        """
        The total number of cameras in the group.
        """
        return pulumi.get(self, "ipc_num")

    @property
    @pulumi.getter(name="platformNum")
    def platform_num(self) -> str:
        """
        The total number of platforms in the group.
        """
        return pulumi.get(self, "platform_num")


