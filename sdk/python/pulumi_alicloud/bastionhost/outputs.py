# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceAdAuthServer',
    'InstanceLdapAuthServer',
    'GetHostAccountsAccountResult',
    'GetHostGroupsGroupResult',
    'GetHostShareKeysKeyResult',
    'GetHostsHostResult',
    'GetHostsHostProtocolResult',
    'GetInstancesInstanceResult',
    'GetUserGroupsGroupResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class InstanceAdAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseDn":
            suggest = "base_dn"
        elif key == "isSsl":
            suggest = "is_ssl"
        elif key == "emailMapping":
            suggest = "email_mapping"
        elif key == "mobileMapping":
            suggest = "mobile_mapping"
        elif key == "nameMapping":
            suggest = "name_mapping"
        elif key == "standbyServer":
            suggest = "standby_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAdAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAdAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAdAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: str,
                 base_dn: str,
                 domain: str,
                 is_ssl: bool,
                 password: str,
                 port: int,
                 server: str,
                 email_mapping: Optional[str] = None,
                 filter: Optional[str] = None,
                 mobile_mapping: Optional[str] = None,
                 name_mapping: Optional[str] = None,
                 standby_server: Optional[str] = None):
        """
        :param str account: The username of the account that is used for the AD server.
        :param str base_dn: The Base distinguished name (DN).
        :param str domain: The domain on the AD server.
        :param bool is_ssl: Specifies whether to support SSL.
        :param str password: The password of the account that is used for the AD server.
        :param int port: The port that is used to access the AD server.
        :param str server: The address of the AD server.
        :param str email_mapping: The field that is used to indicate the email address of a user on the AD server.
        :param str filter: The condition that is used to filter users.
        :param str mobile_mapping: The field that is used to indicate the mobile phone number of a user on the AD server.
        :param str name_mapping: The field that is used to indicate the name of a user on the AD server.
        :param str standby_server: The address of the secondary AD server.
        """
        InstanceAdAuthServer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account=account,
            base_dn=base_dn,
            domain=domain,
            is_ssl=is_ssl,
            password=password,
            port=port,
            server=server,
            email_mapping=email_mapping,
            filter=filter,
            mobile_mapping=mobile_mapping,
            name_mapping=name_mapping,
            standby_server=standby_server,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account: str,
             base_dn: str,
             domain: str,
             is_ssl: bool,
             password: str,
             port: int,
             server: str,
             email_mapping: Optional[str] = None,
             filter: Optional[str] = None,
             mobile_mapping: Optional[str] = None,
             name_mapping: Optional[str] = None,
             standby_server: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'baseDn' in kwargs:
            base_dn = kwargs['baseDn']
        if 'isSsl' in kwargs:
            is_ssl = kwargs['isSsl']
        if 'emailMapping' in kwargs:
            email_mapping = kwargs['emailMapping']
        if 'mobileMapping' in kwargs:
            mobile_mapping = kwargs['mobileMapping']
        if 'nameMapping' in kwargs:
            name_mapping = kwargs['nameMapping']
        if 'standbyServer' in kwargs:
            standby_server = kwargs['standbyServer']

        _setter("account", account)
        _setter("base_dn", base_dn)
        _setter("domain", domain)
        _setter("is_ssl", is_ssl)
        _setter("password", password)
        _setter("port", port)
        _setter("server", server)
        if email_mapping is not None:
            _setter("email_mapping", email_mapping)
        if filter is not None:
            _setter("filter", filter)
        if mobile_mapping is not None:
            _setter("mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            _setter("name_mapping", name_mapping)
        if standby_server is not None:
            _setter("standby_server", standby_server)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        The username of the account that is used for the AD server.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> str:
        """
        The Base distinguished name (DN).
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain on the AD server.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> bool:
        """
        Specifies whether to support SSL.
        """
        return pulumi.get(self, "is_ssl")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the account that is used for the AD server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that is used to access the AD server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The address of the AD server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the email address of a user on the AD server.
        """
        return pulumi.get(self, "email_mapping")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        The condition that is used to filter users.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the mobile phone number of a user on the AD server.
        """
        return pulumi.get(self, "mobile_mapping")

    @property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the name of a user on the AD server.
        """
        return pulumi.get(self, "name_mapping")

    @property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[str]:
        """
        The address of the secondary AD server.
        """
        return pulumi.get(self, "standby_server")


@pulumi.output_type
class InstanceLdapAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseDn":
            suggest = "base_dn"
        elif key == "emailMapping":
            suggest = "email_mapping"
        elif key == "isSsl":
            suggest = "is_ssl"
        elif key == "loginNameMapping":
            suggest = "login_name_mapping"
        elif key == "mobileMapping":
            suggest = "mobile_mapping"
        elif key == "nameMapping":
            suggest = "name_mapping"
        elif key == "standbyServer":
            suggest = "standby_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLdapAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLdapAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLdapAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: str,
                 base_dn: str,
                 password: str,
                 port: int,
                 server: str,
                 email_mapping: Optional[str] = None,
                 filter: Optional[str] = None,
                 is_ssl: Optional[bool] = None,
                 login_name_mapping: Optional[str] = None,
                 mobile_mapping: Optional[str] = None,
                 name_mapping: Optional[str] = None,
                 standby_server: Optional[str] = None):
        """
        :param str account: The username of the account that is used for the LDAP server.
        :param str base_dn: The Base distinguished name (DN).
        :param str password: The password of the account that is used for the LDAP server.
        :param int port: The port that is used to access the LDAP server.
        :param str server: The address of the LDAP server.
        :param str email_mapping: The field that is used to indicate the email address of a user on the LDAP server.
        :param str filter: The condition that is used to filter users.
        :param bool is_ssl: Specifies whether to support SSL.
        :param str login_name_mapping: The field that is used to indicate the logon name of a user on the LDAP server.
        :param str mobile_mapping: The field that is used to indicate the mobile phone number of a user on the LDAP server.
        :param str name_mapping: The field that is used to indicate the name of a user on the LDAP server.
        :param str standby_server: The address of the secondary LDAP server.
        """
        InstanceLdapAuthServer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account=account,
            base_dn=base_dn,
            password=password,
            port=port,
            server=server,
            email_mapping=email_mapping,
            filter=filter,
            is_ssl=is_ssl,
            login_name_mapping=login_name_mapping,
            mobile_mapping=mobile_mapping,
            name_mapping=name_mapping,
            standby_server=standby_server,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account: str,
             base_dn: str,
             password: str,
             port: int,
             server: str,
             email_mapping: Optional[str] = None,
             filter: Optional[str] = None,
             is_ssl: Optional[bool] = None,
             login_name_mapping: Optional[str] = None,
             mobile_mapping: Optional[str] = None,
             name_mapping: Optional[str] = None,
             standby_server: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'baseDn' in kwargs:
            base_dn = kwargs['baseDn']
        if 'emailMapping' in kwargs:
            email_mapping = kwargs['emailMapping']
        if 'isSsl' in kwargs:
            is_ssl = kwargs['isSsl']
        if 'loginNameMapping' in kwargs:
            login_name_mapping = kwargs['loginNameMapping']
        if 'mobileMapping' in kwargs:
            mobile_mapping = kwargs['mobileMapping']
        if 'nameMapping' in kwargs:
            name_mapping = kwargs['nameMapping']
        if 'standbyServer' in kwargs:
            standby_server = kwargs['standbyServer']

        _setter("account", account)
        _setter("base_dn", base_dn)
        _setter("password", password)
        _setter("port", port)
        _setter("server", server)
        if email_mapping is not None:
            _setter("email_mapping", email_mapping)
        if filter is not None:
            _setter("filter", filter)
        if is_ssl is not None:
            _setter("is_ssl", is_ssl)
        if login_name_mapping is not None:
            _setter("login_name_mapping", login_name_mapping)
        if mobile_mapping is not None:
            _setter("mobile_mapping", mobile_mapping)
        if name_mapping is not None:
            _setter("name_mapping", name_mapping)
        if standby_server is not None:
            _setter("standby_server", standby_server)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        The username of the account that is used for the LDAP server.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> str:
        """
        The Base distinguished name (DN).
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the account that is used for the LDAP server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that is used to access the LDAP server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The address of the LDAP server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the email address of a user on the LDAP server.
        """
        return pulumi.get(self, "email_mapping")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        The condition that is used to filter users.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isSsl")
    def is_ssl(self) -> Optional[bool]:
        """
        Specifies whether to support SSL.
        """
        return pulumi.get(self, "is_ssl")

    @property
    @pulumi.getter(name="loginNameMapping")
    def login_name_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the logon name of a user on the LDAP server.
        """
        return pulumi.get(self, "login_name_mapping")

    @property
    @pulumi.getter(name="mobileMapping")
    def mobile_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the mobile phone number of a user on the LDAP server.
        """
        return pulumi.get(self, "mobile_mapping")

    @property
    @pulumi.getter(name="nameMapping")
    def name_mapping(self) -> Optional[str]:
        """
        The field that is used to indicate the name of a user on the LDAP server.
        """
        return pulumi.get(self, "name_mapping")

    @property
    @pulumi.getter(name="standbyServer")
    def standby_server(self) -> Optional[str]:
        """
        The address of the secondary LDAP server.
        """
        return pulumi.get(self, "standby_server")


@pulumi.output_type
class GetHostAccountsAccountResult(dict):
    def __init__(__self__, *,
                 has_password: bool,
                 host_account_id: str,
                 host_account_name: str,
                 host_id: str,
                 id: str,
                 instance_id: str,
                 private_key_fingerprint: str,
                 protocol_name: str):
        """
        :param bool has_password: Whether to set a new password.
        :param str host_account_id: Hosting account ID.
        :param str host_account_name: Specify the new hosting account's name, support the longest 128 characters.
        :param str host_id: Specifies the database where you want to create your hosting account's host ID.
        :param str id: The ID of the Host Account.
        :param str instance_id: Specifies the database where you want to create your hosting account's host bastion host ID of.
        :param str private_key_fingerprint: The situation where the private keys of the fingerprint information.
        :param str protocol_name: Specify the new hosting account of the agreement name. Valid values: USING SSH and RDP.
        """
        GetHostAccountsAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            has_password=has_password,
            host_account_id=host_account_id,
            host_account_name=host_account_name,
            host_id=host_id,
            id=id,
            instance_id=instance_id,
            private_key_fingerprint=private_key_fingerprint,
            protocol_name=protocol_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             has_password: bool,
             host_account_id: str,
             host_account_name: str,
             host_id: str,
             id: str,
             instance_id: str,
             private_key_fingerprint: str,
             protocol_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hasPassword' in kwargs:
            has_password = kwargs['hasPassword']
        if 'hostAccountId' in kwargs:
            host_account_id = kwargs['hostAccountId']
        if 'hostAccountName' in kwargs:
            host_account_name = kwargs['hostAccountName']
        if 'hostId' in kwargs:
            host_id = kwargs['hostId']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'privateKeyFingerprint' in kwargs:
            private_key_fingerprint = kwargs['privateKeyFingerprint']
        if 'protocolName' in kwargs:
            protocol_name = kwargs['protocolName']

        _setter("has_password", has_password)
        _setter("host_account_id", host_account_id)
        _setter("host_account_name", host_account_name)
        _setter("host_id", host_id)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("private_key_fingerprint", private_key_fingerprint)
        _setter("protocol_name", protocol_name)

    @property
    @pulumi.getter(name="hasPassword")
    def has_password(self) -> bool:
        """
        Whether to set a new password.
        """
        return pulumi.get(self, "has_password")

    @property
    @pulumi.getter(name="hostAccountId")
    def host_account_id(self) -> str:
        """
        Hosting account ID.
        """
        return pulumi.get(self, "host_account_id")

    @property
    @pulumi.getter(name="hostAccountName")
    def host_account_name(self) -> str:
        """
        Specify the new hosting account's name, support the longest 128 characters.
        """
        return pulumi.get(self, "host_account_name")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        """
        Specifies the database where you want to create your hosting account's host ID.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Host Account.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Specifies the database where you want to create your hosting account's host bastion host ID of.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="privateKeyFingerprint")
    def private_key_fingerprint(self) -> str:
        """
        The situation where the private keys of the fingerprint information.
        """
        return pulumi.get(self, "private_key_fingerprint")

    @property
    @pulumi.getter(name="protocolName")
    def protocol_name(self) -> str:
        """
        Specify the new hosting account of the agreement name. Valid values: USING SSH and RDP.
        """
        return pulumi.get(self, "protocol_name")


@pulumi.output_type
class GetHostGroupsGroupResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 host_group_id: str,
                 host_group_name: str,
                 id: str,
                 instance_id: str):
        """
        :param str comment: Specify the New Host Group of Notes, Supports up to 500 Characters.
        :param str host_group_id: Host Group ID.
        :param str host_group_name: Specify the New Host Group Name, Supports up to 128 Characters.
        :param str id: The ID of the Host Group.
        :param str instance_id: Specify the New Host Group Where the Bastion Host ID of.
        """
        GetHostGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comment=comment,
            host_group_id=host_group_id,
            host_group_name=host_group_name,
            id=id,
            instance_id=instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comment: str,
             host_group_id: str,
             host_group_name: str,
             id: str,
             instance_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostGroupId' in kwargs:
            host_group_id = kwargs['hostGroupId']
        if 'hostGroupName' in kwargs:
            host_group_name = kwargs['hostGroupName']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']

        _setter("comment", comment)
        _setter("host_group_id", host_group_id)
        _setter("host_group_name", host_group_name)
        _setter("id", id)
        _setter("instance_id", instance_id)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Specify the New Host Group of Notes, Supports up to 500 Characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> str:
        """
        Host Group ID.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter(name="hostGroupName")
    def host_group_name(self) -> str:
        """
        Specify the New Host Group Name, Supports up to 128 Characters.
        """
        return pulumi.get(self, "host_group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Host Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Specify the New Host Group Where the Bastion Host ID of.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetHostShareKeysKeyResult(dict):
    def __init__(__self__, *,
                 host_share_key_id: str,
                 host_share_key_name: str,
                 id: str,
                 instance_id: str,
                 private_key_finger_print: str):
        """
        :param str host_share_key_id: The first ID of the resource.
        :param str host_share_key_name: The name of the host shared key.
        :param str id: The ID of the Host Share Key.
        :param str instance_id: The ID of the Bastion instance.
        :param str private_key_finger_print: The fingerprint of the private key.
        """
        GetHostShareKeysKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_share_key_id=host_share_key_id,
            host_share_key_name=host_share_key_name,
            id=id,
            instance_id=instance_id,
            private_key_finger_print=private_key_finger_print,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_share_key_id: str,
             host_share_key_name: str,
             id: str,
             instance_id: str,
             private_key_finger_print: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostShareKeyId' in kwargs:
            host_share_key_id = kwargs['hostShareKeyId']
        if 'hostShareKeyName' in kwargs:
            host_share_key_name = kwargs['hostShareKeyName']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'privateKeyFingerPrint' in kwargs:
            private_key_finger_print = kwargs['privateKeyFingerPrint']

        _setter("host_share_key_id", host_share_key_id)
        _setter("host_share_key_name", host_share_key_name)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("private_key_finger_print", private_key_finger_print)

    @property
    @pulumi.getter(name="hostShareKeyId")
    def host_share_key_id(self) -> str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "host_share_key_id")

    @property
    @pulumi.getter(name="hostShareKeyName")
    def host_share_key_name(self) -> str:
        """
        The name of the host shared key.
        """
        return pulumi.get(self, "host_share_key_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Host Share Key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the Bastion instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="privateKeyFingerPrint")
    def private_key_finger_print(self) -> str:
        """
        The fingerprint of the private key.
        """
        return pulumi.get(self, "private_key_finger_print")


@pulumi.output_type
class GetHostsHostResult(dict):
    def __init__(__self__, *,
                 active_address_type: str,
                 comment: str,
                 host_id: str,
                 host_name: str,
                 host_private_address: str,
                 host_public_address: str,
                 id: str,
                 instance_id: str,
                 os_type: str,
                 protocols: Sequence['outputs.GetHostsHostProtocolResult'],
                 source: str,
                 source_instance_id: str):
        """
        :param str active_address_type: Specify the new create a host of address types. Valid values: Public: the IP address of a Public network Private: Private network address.
        :param str comment: Specify a host of notes, supports up to 500 characters.
        :param str host_id: The host ID.
        :param str host_name: Specify the new create a host name of the supports up to 128 characters.
        :param str host_private_address: Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS.
        :param str host_public_address: Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
        :param str id: The ID of the Host.
        :param str instance_id: Specify the new create a host where the Bastion host ID of.
        :param str os_type: Specify the new create the host's operating system. Valid values: Linux Windows.
        :param Sequence['GetHostsHostProtocolArgs'] protocols: The host of the protocol information.
        :param str source: Specify the new create a host of source. Valid values: Local: localhost Ecs:ECS instance Rds:RDS exclusive cluster host.
        :param str source_instance_id: Specify the newly created ECS instance ID or dedicated cluster host ID.
        """
        GetHostsHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active_address_type=active_address_type,
            comment=comment,
            host_id=host_id,
            host_name=host_name,
            host_private_address=host_private_address,
            host_public_address=host_public_address,
            id=id,
            instance_id=instance_id,
            os_type=os_type,
            protocols=protocols,
            source=source,
            source_instance_id=source_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active_address_type: str,
             comment: str,
             host_id: str,
             host_name: str,
             host_private_address: str,
             host_public_address: str,
             id: str,
             instance_id: str,
             os_type: str,
             protocols: Sequence['outputs.GetHostsHostProtocolResult'],
             source: str,
             source_instance_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'activeAddressType' in kwargs:
            active_address_type = kwargs['activeAddressType']
        if 'hostId' in kwargs:
            host_id = kwargs['hostId']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'hostPrivateAddress' in kwargs:
            host_private_address = kwargs['hostPrivateAddress']
        if 'hostPublicAddress' in kwargs:
            host_public_address = kwargs['hostPublicAddress']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'osType' in kwargs:
            os_type = kwargs['osType']
        if 'sourceInstanceId' in kwargs:
            source_instance_id = kwargs['sourceInstanceId']

        _setter("active_address_type", active_address_type)
        _setter("comment", comment)
        _setter("host_id", host_id)
        _setter("host_name", host_name)
        _setter("host_private_address", host_private_address)
        _setter("host_public_address", host_public_address)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("os_type", os_type)
        _setter("protocols", protocols)
        _setter("source", source)
        _setter("source_instance_id", source_instance_id)

    @property
    @pulumi.getter(name="activeAddressType")
    def active_address_type(self) -> str:
        """
        Specify the new create a host of address types. Valid values: Public: the IP address of a Public network Private: Private network address.
        """
        return pulumi.get(self, "active_address_type")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Specify a host of notes, supports up to 500 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        """
        The host ID.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Specify the new create a host name of the supports up to 128 characters.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostPrivateAddress")
    def host_private_address(self) -> str:
        """
        Specify the new create a host of the private network address, it is possible to use the domain name or IP ADDRESS.
        """
        return pulumi.get(self, "host_private_address")

    @property
    @pulumi.getter(name="hostPublicAddress")
    def host_public_address(self) -> str:
        """
        Specify the new create a host of the IP address of a public network, it is possible to use the domain name or IP ADDRESS.
        """
        return pulumi.get(self, "host_public_address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Host.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Specify the new create a host where the Bastion host ID of.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        Specify the new create the host's operating system. Valid values: Linux Windows.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence['outputs.GetHostsHostProtocolResult']:
        """
        The host of the protocol information.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Specify the new create a host of source. Valid values: Local: localhost Ecs:ECS instance Rds:RDS exclusive cluster host.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> str:
        """
        Specify the newly created ECS instance ID or dedicated cluster host ID.
        """
        return pulumi.get(self, "source_instance_id")


@pulumi.output_type
class GetHostsHostProtocolResult(dict):
    def __init__(__self__, *,
                 host_finger_print: str,
                 port: int,
                 protocol_name: str):
        """
        :param str host_finger_print: Host fingerprint information, it is possible to uniquely identify a host.
        :param int port: Host the service port of the RDS.
        :param str protocol_name: The host uses the protocol name.
        """
        GetHostsHostProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_finger_print=host_finger_print,
            port=port,
            protocol_name=protocol_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_finger_print: str,
             port: int,
             protocol_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostFingerPrint' in kwargs:
            host_finger_print = kwargs['hostFingerPrint']
        if 'protocolName' in kwargs:
            protocol_name = kwargs['protocolName']

        _setter("host_finger_print", host_finger_print)
        _setter("port", port)
        _setter("protocol_name", protocol_name)

    @property
    @pulumi.getter(name="hostFingerPrint")
    def host_finger_print(self) -> str:
        """
        Host fingerprint information, it is possible to uniquely identify a host.
        """
        return pulumi.get(self, "host_finger_print")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Host the service port of the RDS.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="protocolName")
    def protocol_name(self) -> str:
        """
        The host uses the protocol name.
        """
        return pulumi.get(self, "protocol_name")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 instance_status: str,
                 license_code: str,
                 private_domain: str,
                 public_domain: str,
                 public_network_access: bool,
                 security_group_ids: Sequence[str],
                 user_vswitch_id: str,
                 tags: Optional[Mapping[str, Any]] = None):
        """
        :param str description: The instance's remark.
        :param str id: The instance's id.
        :param str instance_status: The instance's status.
        :param str private_domain: The instance's private domain name.
        :param str public_domain: The instance's public domain name.
        :param bool public_network_access: The instance's public network access configuration.
        :param Sequence[str] security_group_ids: The instance's security group configuration.
        :param str user_vswitch_id: The instance's vSwitch ID.
        :param Mapping[str, Any] tags: A map of tags assigned to the bastionhost instance. It must be in the format:
               ```python
               import pulumi
               import pulumi_alicloud as alicloud
               
               instance = alicloud.bastionhost.get_instances(tags={
                   "tagKey1": "tagValue1",
               })
               ```
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            id=id,
            instance_status=instance_status,
            license_code=license_code,
            private_domain=private_domain,
            public_domain=public_domain,
            public_network_access=public_network_access,
            security_group_ids=security_group_ids,
            user_vswitch_id=user_vswitch_id,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             id: str,
             instance_status: str,
             license_code: str,
             private_domain: str,
             public_domain: str,
             public_network_access: bool,
             security_group_ids: Sequence[str],
             user_vswitch_id: str,
             tags: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceStatus' in kwargs:
            instance_status = kwargs['instanceStatus']
        if 'licenseCode' in kwargs:
            license_code = kwargs['licenseCode']
        if 'privateDomain' in kwargs:
            private_domain = kwargs['privateDomain']
        if 'publicDomain' in kwargs:
            public_domain = kwargs['publicDomain']
        if 'publicNetworkAccess' in kwargs:
            public_network_access = kwargs['publicNetworkAccess']
        if 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if 'userVswitchId' in kwargs:
            user_vswitch_id = kwargs['userVswitchId']

        _setter("description", description)
        _setter("id", id)
        _setter("instance_status", instance_status)
        _setter("license_code", license_code)
        _setter("private_domain", private_domain)
        _setter("public_domain", public_domain)
        _setter("public_network_access", public_network_access)
        _setter("security_group_ids", security_group_ids)
        _setter("user_vswitch_id", user_vswitch_id)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The instance's remark.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The instance's id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        """
        The instance's status.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="licenseCode")
    def license_code(self) -> str:
        return pulumi.get(self, "license_code")

    @property
    @pulumi.getter(name="privateDomain")
    def private_domain(self) -> str:
        """
        The instance's private domain name.
        """
        return pulumi.get(self, "private_domain")

    @property
    @pulumi.getter(name="publicDomain")
    def public_domain(self) -> str:
        """
        The instance's public domain name.
        """
        return pulumi.get(self, "public_domain")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> bool:
        """
        The instance's public network access configuration.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The instance's security group configuration.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="userVswitchId")
    def user_vswitch_id(self) -> str:
        """
        The instance's vSwitch ID.
        """
        return pulumi.get(self, "user_vswitch_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        A map of tags assigned to the bastionhost instance. It must be in the format:
        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        instance = alicloud.bastionhost.get_instances(tags={
            "tagKey1": "tagValue1",
        })
        ```
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetUserGroupsGroupResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 id: str,
                 instance_id: str,
                 user_group_id: str,
                 user_group_name: str):
        """
        :param str comment: Specify the New Group of Remark Information. Supports up to 500 Characters.
        :param str id: The ID of the User Group.
        :param str instance_id: Specify the New Group of the Bastion Host of Instance Id.
        :param str user_group_id: The User Group ID.
        :param str user_group_name: Specify the New Group Name. Supports up to 128 Characters.
        """
        GetUserGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comment=comment,
            id=id,
            instance_id=instance_id,
            user_group_id=user_group_id,
            user_group_name=user_group_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comment: str,
             id: str,
             instance_id: str,
             user_group_id: str,
             user_group_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'userGroupId' in kwargs:
            user_group_id = kwargs['userGroupId']
        if 'userGroupName' in kwargs:
            user_group_name = kwargs['userGroupName']

        _setter("comment", comment)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("user_group_id", user_group_id)
        _setter("user_group_name", user_group_name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Specify the New Group of Remark Information. Supports up to 500 Characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the User Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Specify the New Group of the Bastion Host of Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> str:
        """
        The User Group ID.
        """
        return pulumi.get(self, "user_group_id")

    @property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> str:
        """
        Specify the New Group Name. Supports up to 128 Characters.
        """
        return pulumi.get(self, "user_group_name")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 display_name: str,
                 email: str,
                 id: str,
                 instance_id: str,
                 mobile: str,
                 mobile_country_code: str,
                 source: str,
                 source_user_id: str,
                 status: str,
                 user_id: str,
                 user_name: str):
        """
        :param str comment: Specify the New of the User That Created the Remark Information. Supports up to 500 Characters.
        :param str display_name: Specify the New Created the User's Display Name. Supports up to 128 Characters.
        :param str email: Specify the New User's Mailbox.
        :param str id: The ID of the User.
        :param str instance_id: You Want to Query the User the Bastion Host ID of.
        :param str mobile: Specify the New of the User That Created a Different Mobile Phone Number from Your.
        :param str mobile_country_code: Specify the New Create User Mobile Phone Number of the International Domain Name. The Default Value Is the CN Value: CN: Mainland China (+86) HK: hong Kong, China (+852) Mo: Macau, China (+853) TW: Taiwan, China (+886) ru: Russian (+7) SG: Singapore (+65) My: malaysia (+60) ID: Indonesia (+62) De: Germany (+49) AU: Australia (+61) US: United States (+1) AE: dubai (+971) JP: Japan (+81) Introducing the Long-Range GB: United Kingdom (+44) in: India (+91) KR: South Korea (+82) Ph: philippines (+63) Ch: Switzerland (+41) Se: Sweden (+46).
        :param str source: Specify the New of the User That Created the Source. Valid Values: Local: Local User RAM: Ram User.
        :param str source_user_id: Specify the Newly Created User Is Uniquely Identified. Indicates That the Parameter Is a Bastion Host Corresponding to the User with the Ram User's Unique Identifier. The Newly Created User Source Grant Permission to a RAM User (That Is, Source Used as a Ram), this Parameter Is Required. You Can Call Access Control of Listusers Interface from the Return Data Userid to Obtain the Parameters.
        :param str status: The status of the resource.
        :param str user_id: The User ID.
        :param str user_name: Specify the New User Name. This Parameter Is Only by Letters, Lowercase Letters, Numbers, and Underscores (_), Supports up to 128 Characters.
        """
        GetUsersUserResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comment=comment,
            display_name=display_name,
            email=email,
            id=id,
            instance_id=instance_id,
            mobile=mobile,
            mobile_country_code=mobile_country_code,
            source=source,
            source_user_id=source_user_id,
            status=status,
            user_id=user_id,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comment: str,
             display_name: str,
             email: str,
             id: str,
             instance_id: str,
             mobile: str,
             mobile_country_code: str,
             source: str,
             source_user_id: str,
             status: str,
             user_id: str,
             user_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'mobileCountryCode' in kwargs:
            mobile_country_code = kwargs['mobileCountryCode']
        if 'sourceUserId' in kwargs:
            source_user_id = kwargs['sourceUserId']
        if 'userId' in kwargs:
            user_id = kwargs['userId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        _setter("comment", comment)
        _setter("display_name", display_name)
        _setter("email", email)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("mobile", mobile)
        _setter("mobile_country_code", mobile_country_code)
        _setter("source", source)
        _setter("source_user_id", source_user_id)
        _setter("status", status)
        _setter("user_id", user_id)
        _setter("user_name", user_name)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Specify the New of the User That Created the Remark Information. Supports up to 500 Characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Specify the New Created the User's Display Name. Supports up to 128 Characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Specify the New User's Mailbox.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the User.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        You Want to Query the User the Bastion Host ID of.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def mobile(self) -> str:
        """
        Specify the New of the User That Created a Different Mobile Phone Number from Your.
        """
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="mobileCountryCode")
    def mobile_country_code(self) -> str:
        """
        Specify the New Create User Mobile Phone Number of the International Domain Name. The Default Value Is the CN Value: CN: Mainland China (+86) HK: hong Kong, China (+852) Mo: Macau, China (+853) TW: Taiwan, China (+886) ru: Russian (+7) SG: Singapore (+65) My: malaysia (+60) ID: Indonesia (+62) De: Germany (+49) AU: Australia (+61) US: United States (+1) AE: dubai (+971) JP: Japan (+81) Introducing the Long-Range GB: United Kingdom (+44) in: India (+91) KR: South Korea (+82) Ph: philippines (+63) Ch: Switzerland (+41) Se: Sweden (+46).
        """
        return pulumi.get(self, "mobile_country_code")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Specify the New of the User That Created the Source. Valid Values: Local: Local User RAM: Ram User.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceUserId")
    def source_user_id(self) -> str:
        """
        Specify the Newly Created User Is Uniquely Identified. Indicates That the Parameter Is a Bastion Host Corresponding to the User with the Ram User's Unique Identifier. The Newly Created User Source Grant Permission to a RAM User (That Is, Source Used as a Ram), this Parameter Is Required. You Can Call Access Control of Listusers Interface from the Return Data Userid to Obtain the Parameters.
        """
        return pulumi.get(self, "source_user_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Specify the New User Name. This Parameter Is Only by Letters, Lowercase Letters, Numbers, and Underscores (_), Supports up to 128 Characters.
        """
        return pulumi.get(self, "user_name")


