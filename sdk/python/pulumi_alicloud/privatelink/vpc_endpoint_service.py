# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VpcEndpointServiceArgs', 'VpcEndpointService']

@pulumi.input_type
class VpcEndpointServiceArgs:
    def __init__(__self__, *,
                 auto_accept_connection: Optional[pulumi.Input[bool]] = None,
                 connect_bandwidth: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 payer: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpcEndpointService resource.
        :param pulumi.Input[bool] auto_accept_connection: Whether to automatically accept terminal node connections.
        :param pulumi.Input[int] connect_bandwidth: The connection bandwidth.
        :param pulumi.Input[bool] dry_run: Whether to pre-check this request only. Default to: `false`
        :param pulumi.Input[str] payer: The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        :param pulumi.Input[str] service_description: The description of the terminal node service.
               
               > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        """
        VpcEndpointServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_accept_connection=auto_accept_connection,
            connect_bandwidth=connect_bandwidth,
            dry_run=dry_run,
            payer=payer,
            service_description=service_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_accept_connection: Optional[pulumi.Input[bool]] = None,
             connect_bandwidth: Optional[pulumi.Input[int]] = None,
             dry_run: Optional[pulumi.Input[bool]] = None,
             payer: Optional[pulumi.Input[str]] = None,
             service_description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoAcceptConnection' in kwargs:
            auto_accept_connection = kwargs['autoAcceptConnection']
        if 'connectBandwidth' in kwargs:
            connect_bandwidth = kwargs['connectBandwidth']
        if 'dryRun' in kwargs:
            dry_run = kwargs['dryRun']
        if 'serviceDescription' in kwargs:
            service_description = kwargs['serviceDescription']

        if auto_accept_connection is not None:
            _setter("auto_accept_connection", auto_accept_connection)
        if connect_bandwidth is not None:
            _setter("connect_bandwidth", connect_bandwidth)
        if dry_run is not None:
            _setter("dry_run", dry_run)
        if payer is not None:
            _setter("payer", payer)
        if service_description is not None:
            _setter("service_description", service_description)

    @property
    @pulumi.getter(name="autoAcceptConnection")
    def auto_accept_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically accept terminal node connections.
        """
        return pulumi.get(self, "auto_accept_connection")

    @auto_accept_connection.setter
    def auto_accept_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_accept_connection", value)

    @property
    @pulumi.getter(name="connectBandwidth")
    def connect_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The connection bandwidth.
        """
        return pulumi.get(self, "connect_bandwidth")

    @connect_bandwidth.setter
    def connect_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_bandwidth", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to pre-check this request only. Default to: `false`
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def payer(self) -> Optional[pulumi.Input[str]]:
        """
        The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        """
        return pulumi.get(self, "payer")

    @payer.setter
    def payer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payer", value)

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the terminal node service.

        > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        """
        return pulumi.get(self, "service_description")

    @service_description.setter
    def service_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_description", value)


@pulumi.input_type
class _VpcEndpointServiceState:
    def __init__(__self__, *,
                 auto_accept_connection: Optional[pulumi.Input[bool]] = None,
                 connect_bandwidth: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 payer: Optional[pulumi.Input[str]] = None,
                 service_business_status: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None,
                 service_domain: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpcEndpointService resources.
        :param pulumi.Input[bool] auto_accept_connection: Whether to automatically accept terminal node connections.
        :param pulumi.Input[int] connect_bandwidth: The connection bandwidth.
        :param pulumi.Input[bool] dry_run: Whether to pre-check this request only. Default to: `false`
        :param pulumi.Input[str] payer: The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        :param pulumi.Input[str] service_business_status: The business status of Vpc Endpoint Service.
        :param pulumi.Input[str] service_description: The description of the terminal node service.
               
               > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        :param pulumi.Input[str] service_domain: Service Domain.
        :param pulumi.Input[str] status: The status of Vpc Endpoint Service.
        """
        _VpcEndpointServiceState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_accept_connection=auto_accept_connection,
            connect_bandwidth=connect_bandwidth,
            dry_run=dry_run,
            payer=payer,
            service_business_status=service_business_status,
            service_description=service_description,
            service_domain=service_domain,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_accept_connection: Optional[pulumi.Input[bool]] = None,
             connect_bandwidth: Optional[pulumi.Input[int]] = None,
             dry_run: Optional[pulumi.Input[bool]] = None,
             payer: Optional[pulumi.Input[str]] = None,
             service_business_status: Optional[pulumi.Input[str]] = None,
             service_description: Optional[pulumi.Input[str]] = None,
             service_domain: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoAcceptConnection' in kwargs:
            auto_accept_connection = kwargs['autoAcceptConnection']
        if 'connectBandwidth' in kwargs:
            connect_bandwidth = kwargs['connectBandwidth']
        if 'dryRun' in kwargs:
            dry_run = kwargs['dryRun']
        if 'serviceBusinessStatus' in kwargs:
            service_business_status = kwargs['serviceBusinessStatus']
        if 'serviceDescription' in kwargs:
            service_description = kwargs['serviceDescription']
        if 'serviceDomain' in kwargs:
            service_domain = kwargs['serviceDomain']

        if auto_accept_connection is not None:
            _setter("auto_accept_connection", auto_accept_connection)
        if connect_bandwidth is not None:
            _setter("connect_bandwidth", connect_bandwidth)
        if dry_run is not None:
            _setter("dry_run", dry_run)
        if payer is not None:
            _setter("payer", payer)
        if service_business_status is not None:
            _setter("service_business_status", service_business_status)
        if service_description is not None:
            _setter("service_description", service_description)
        if service_domain is not None:
            _setter("service_domain", service_domain)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="autoAcceptConnection")
    def auto_accept_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically accept terminal node connections.
        """
        return pulumi.get(self, "auto_accept_connection")

    @auto_accept_connection.setter
    def auto_accept_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_accept_connection", value)

    @property
    @pulumi.getter(name="connectBandwidth")
    def connect_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The connection bandwidth.
        """
        return pulumi.get(self, "connect_bandwidth")

    @connect_bandwidth.setter
    def connect_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_bandwidth", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to pre-check this request only. Default to: `false`
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def payer(self) -> Optional[pulumi.Input[str]]:
        """
        The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        """
        return pulumi.get(self, "payer")

    @payer.setter
    def payer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payer", value)

    @property
    @pulumi.getter(name="serviceBusinessStatus")
    def service_business_status(self) -> Optional[pulumi.Input[str]]:
        """
        The business status of Vpc Endpoint Service.
        """
        return pulumi.get(self, "service_business_status")

    @service_business_status.setter
    def service_business_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_business_status", value)

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the terminal node service.

        > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        """
        return pulumi.get(self, "service_description")

    @service_description.setter
    def service_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_description", value)

    @property
    @pulumi.getter(name="serviceDomain")
    def service_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Service Domain.
        """
        return pulumi.get(self, "service_domain")

    @service_domain.setter
    def service_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_domain", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of Vpc Endpoint Service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class VpcEndpointService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_accept_connection: Optional[pulumi.Input[bool]] = None,
                 connect_bandwidth: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 payer: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Private Link Vpc Endpoint Service resource.

        For information about Private Link Vpc Endpoint Service and how to use it, see [What is Vpc Endpoint Service](https://www.alibabacloud.com/help/en/privatelink/latest/api-privatelink-2020-04-15-createvpcendpointservice).

        > **NOTE:** Available since v1.109.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "tf_example"
        example = alicloud.privatelink.VpcEndpointService("example",
            service_description=name,
            connect_bandwidth=103,
            auto_accept_connection=False)
        ```

        ## Import

        Private Link Vpc Endpoint Service can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:privatelink/vpcEndpointService:VpcEndpointService example <service_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_accept_connection: Whether to automatically accept terminal node connections.
        :param pulumi.Input[int] connect_bandwidth: The connection bandwidth.
        :param pulumi.Input[bool] dry_run: Whether to pre-check this request only. Default to: `false`
        :param pulumi.Input[str] payer: The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        :param pulumi.Input[str] service_description: The description of the terminal node service.
               
               > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcEndpointServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Private Link Vpc Endpoint Service resource.

        For information about Private Link Vpc Endpoint Service and how to use it, see [What is Vpc Endpoint Service](https://www.alibabacloud.com/help/en/privatelink/latest/api-privatelink-2020-04-15-createvpcendpointservice).

        > **NOTE:** Available since v1.109.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "tf_example"
        example = alicloud.privatelink.VpcEndpointService("example",
            service_description=name,
            connect_bandwidth=103,
            auto_accept_connection=False)
        ```

        ## Import

        Private Link Vpc Endpoint Service can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:privatelink/vpcEndpointService:VpcEndpointService example <service_id>
        ```

        :param str resource_name: The name of the resource.
        :param VpcEndpointServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcEndpointServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VpcEndpointServiceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_accept_connection: Optional[pulumi.Input[bool]] = None,
                 connect_bandwidth: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 payer: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcEndpointServiceArgs.__new__(VpcEndpointServiceArgs)

            __props__.__dict__["auto_accept_connection"] = auto_accept_connection
            __props__.__dict__["connect_bandwidth"] = connect_bandwidth
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["payer"] = payer
            __props__.__dict__["service_description"] = service_description
            __props__.__dict__["service_business_status"] = None
            __props__.__dict__["service_domain"] = None
            __props__.__dict__["status"] = None
        super(VpcEndpointService, __self__).__init__(
            'alicloud:privatelink/vpcEndpointService:VpcEndpointService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_accept_connection: Optional[pulumi.Input[bool]] = None,
            connect_bandwidth: Optional[pulumi.Input[int]] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            payer: Optional[pulumi.Input[str]] = None,
            service_business_status: Optional[pulumi.Input[str]] = None,
            service_description: Optional[pulumi.Input[str]] = None,
            service_domain: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'VpcEndpointService':
        """
        Get an existing VpcEndpointService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_accept_connection: Whether to automatically accept terminal node connections.
        :param pulumi.Input[int] connect_bandwidth: The connection bandwidth.
        :param pulumi.Input[bool] dry_run: Whether to pre-check this request only. Default to: `false`
        :param pulumi.Input[str] payer: The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        :param pulumi.Input[str] service_business_status: The business status of Vpc Endpoint Service.
        :param pulumi.Input[str] service_description: The description of the terminal node service.
               
               > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        :param pulumi.Input[str] service_domain: Service Domain.
        :param pulumi.Input[str] status: The status of Vpc Endpoint Service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcEndpointServiceState.__new__(_VpcEndpointServiceState)

        __props__.__dict__["auto_accept_connection"] = auto_accept_connection
        __props__.__dict__["connect_bandwidth"] = connect_bandwidth
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["payer"] = payer
        __props__.__dict__["service_business_status"] = service_business_status
        __props__.__dict__["service_description"] = service_description
        __props__.__dict__["service_domain"] = service_domain
        __props__.__dict__["status"] = status
        return VpcEndpointService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAcceptConnection")
    def auto_accept_connection(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically accept terminal node connections.
        """
        return pulumi.get(self, "auto_accept_connection")

    @property
    @pulumi.getter(name="connectBandwidth")
    def connect_bandwidth(self) -> pulumi.Output[int]:
        """
        The connection bandwidth.
        """
        return pulumi.get(self, "connect_bandwidth")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to pre-check this request only. Default to: `false`
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def payer(self) -> pulumi.Output[Optional[str]]:
        """
        The payer type. Valid Value: `EndpointService`, `Endpoint`. Default to: `Endpoint`.
        """
        return pulumi.get(self, "payer")

    @property
    @pulumi.getter(name="serviceBusinessStatus")
    def service_business_status(self) -> pulumi.Output[str]:
        """
        The business status of Vpc Endpoint Service.
        """
        return pulumi.get(self, "service_business_status")

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the terminal node service.

        > **NOTE:** The `resources` only support load balancing instance with private network type and PrivateLink function.
        """
        return pulumi.get(self, "service_description")

    @property
    @pulumi.getter(name="serviceDomain")
    def service_domain(self) -> pulumi.Output[str]:
        """
        Service Domain.
        """
        return pulumi.get(self, "service_domain")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of Vpc Endpoint Service.
        """
        return pulumi.get(self, "status")

