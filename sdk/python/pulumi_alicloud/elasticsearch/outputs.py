# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstancesInstanceResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 data_node_amount: int,
                 data_node_disk_size: int,
                 data_node_disk_type: str,
                 data_node_spec: str,
                 description: str,
                 id: str,
                 instance_charge_type: str,
                 status: str,
                 tags: Mapping[str, Any],
                 updated_at: str,
                 version: str,
                 vswitch_id: str):
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            data_node_amount=data_node_amount,
            data_node_disk_size=data_node_disk_size,
            data_node_disk_type=data_node_disk_type,
            data_node_spec=data_node_spec,
            description=description,
            id=id,
            instance_charge_type=instance_charge_type,
            status=status,
            tags=tags,
            updated_at=updated_at,
            version=version,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             data_node_amount: Optional[int] = None,
             data_node_disk_size: Optional[int] = None,
             data_node_disk_type: Optional[str] = None,
             data_node_spec: Optional[str] = None,
             description: Optional[str] = None,
             id: Optional[str] = None,
             instance_charge_type: Optional[str] = None,
             status: Optional[str] = None,
             tags: Optional[Mapping[str, Any]] = None,
             updated_at: Optional[str] = None,
             version: Optional[str] = None,
             vswitch_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if created_at is None:
            raise TypeError("Missing 'created_at' argument")
        if data_node_amount is None and 'dataNodeAmount' in kwargs:
            data_node_amount = kwargs['dataNodeAmount']
        if data_node_amount is None:
            raise TypeError("Missing 'data_node_amount' argument")
        if data_node_disk_size is None and 'dataNodeDiskSize' in kwargs:
            data_node_disk_size = kwargs['dataNodeDiskSize']
        if data_node_disk_size is None:
            raise TypeError("Missing 'data_node_disk_size' argument")
        if data_node_disk_type is None and 'dataNodeDiskType' in kwargs:
            data_node_disk_type = kwargs['dataNodeDiskType']
        if data_node_disk_type is None:
            raise TypeError("Missing 'data_node_disk_type' argument")
        if data_node_spec is None and 'dataNodeSpec' in kwargs:
            data_node_spec = kwargs['dataNodeSpec']
        if data_node_spec is None:
            raise TypeError("Missing 'data_node_spec' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if instance_charge_type is None and 'instanceChargeType' in kwargs:
            instance_charge_type = kwargs['instanceChargeType']
        if instance_charge_type is None:
            raise TypeError("Missing 'instance_charge_type' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if tags is None:
            raise TypeError("Missing 'tags' argument")
        if updated_at is None and 'updatedAt' in kwargs:
            updated_at = kwargs['updatedAt']
        if updated_at is None:
            raise TypeError("Missing 'updated_at' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")
        if vswitch_id is None and 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']
        if vswitch_id is None:
            raise TypeError("Missing 'vswitch_id' argument")

        _setter("created_at", created_at)
        _setter("data_node_amount", data_node_amount)
        _setter("data_node_disk_size", data_node_disk_size)
        _setter("data_node_disk_type", data_node_disk_type)
        _setter("data_node_spec", data_node_spec)
        _setter("description", description)
        _setter("id", id)
        _setter("instance_charge_type", instance_charge_type)
        _setter("status", status)
        _setter("tags", tags)
        _setter("updated_at", updated_at)
        _setter("version", version)
        _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataNodeAmount")
    def data_node_amount(self) -> int:
        return pulumi.get(self, "data_node_amount")

    @property
    @pulumi.getter(name="dataNodeDiskSize")
    def data_node_disk_size(self) -> int:
        return pulumi.get(self, "data_node_disk_size")

    @property
    @pulumi.getter(name="dataNodeDiskType")
    def data_node_disk_type(self) -> str:
        return pulumi.get(self, "data_node_disk_type")

    @property
    @pulumi.getter(name="dataNodeSpec")
    def data_node_spec(self) -> str:
        return pulumi.get(self, "data_node_spec")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 multi_zone_ids: Sequence[str]):
        """
        :param str id: ID of the zone.
        :param Sequence[str] multi_zone_ids: A list of zone ids in which the multi zone.
        """
        GetZonesZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            multi_zone_ids=multi_zone_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             multi_zone_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if multi_zone_ids is None and 'multiZoneIds' in kwargs:
            multi_zone_ids = kwargs['multiZoneIds']
        if multi_zone_ids is None:
            raise TypeError("Missing 'multi_zone_ids' argument")

        _setter("id", id)
        _setter("multi_zone_ids", multi_zone_ids)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multiZoneIds")
    def multi_zone_ids(self) -> Sequence[str]:
        """
        A list of zone ids in which the multi zone.
        """
        return pulumi.get(self, "multi_zone_ids")


