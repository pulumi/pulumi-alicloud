# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['QosPolicyArgs', 'QosPolicy']

@pulumi.input_type
class QosPolicyArgs:
    def __init__(__self__, *,
                 dest_cidr: pulumi.Input[str],
                 dest_port_range: pulumi.Input[str],
                 ip_protocol: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 qos_id: pulumi.Input[str],
                 source_cidr: pulumi.Input[str],
                 source_port_range: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a QosPolicy resource.
        :param pulumi.Input[str] dest_cidr: The destination CIDR block.
        :param pulumi.Input[str] dest_port_range: The destination port range.
        :param pulumi.Input[str] ip_protocol: The transport layer protocol.
        :param pulumi.Input[int] priority: The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        :param pulumi.Input[str] qos_id: The instance ID of the QoS policy to which the quintuple rule is created.
        :param pulumi.Input[str] source_cidr: The source CIDR block.
        :param pulumi.Input[str] source_port_range: The source port range of the transport layer.
        :param pulumi.Input[str] description: The description of the QoS policy.
        :param pulumi.Input[str] end_time: The expiration time of the quintuple rule.
        :param pulumi.Input[str] name: The name of the QoS policy.
        :param pulumi.Input[str] start_time: The time when the quintuple rule takes effect.
        """
        QosPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dest_cidr=dest_cidr,
            dest_port_range=dest_port_range,
            ip_protocol=ip_protocol,
            priority=priority,
            qos_id=qos_id,
            source_cidr=source_cidr,
            source_port_range=source_port_range,
            description=description,
            end_time=end_time,
            name=name,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dest_cidr: pulumi.Input[str],
             dest_port_range: pulumi.Input[str],
             ip_protocol: pulumi.Input[str],
             priority: pulumi.Input[int],
             qos_id: pulumi.Input[str],
             source_cidr: pulumi.Input[str],
             source_port_range: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             end_time: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             start_time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destCidr' in kwargs:
            dest_cidr = kwargs['destCidr']
        if 'destPortRange' in kwargs:
            dest_port_range = kwargs['destPortRange']
        if 'ipProtocol' in kwargs:
            ip_protocol = kwargs['ipProtocol']
        if 'qosId' in kwargs:
            qos_id = kwargs['qosId']
        if 'sourceCidr' in kwargs:
            source_cidr = kwargs['sourceCidr']
        if 'sourcePortRange' in kwargs:
            source_port_range = kwargs['sourcePortRange']
        if 'endTime' in kwargs:
            end_time = kwargs['endTime']
        if 'startTime' in kwargs:
            start_time = kwargs['startTime']

        _setter("dest_cidr", dest_cidr)
        _setter("dest_port_range", dest_port_range)
        _setter("ip_protocol", ip_protocol)
        _setter("priority", priority)
        _setter("qos_id", qos_id)
        _setter("source_cidr", source_cidr)
        _setter("source_port_range", source_port_range)
        if description is not None:
            _setter("description", description)
        if end_time is not None:
            _setter("end_time", end_time)
        if name is not None:
            _setter("name", name)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter(name="destCidr")
    def dest_cidr(self) -> pulumi.Input[str]:
        """
        The destination CIDR block.
        """
        return pulumi.get(self, "dest_cidr")

    @dest_cidr.setter
    def dest_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_cidr", value)

    @property
    @pulumi.getter(name="destPortRange")
    def dest_port_range(self) -> pulumi.Input[str]:
        """
        The destination port range.
        """
        return pulumi.get(self, "dest_port_range")

    @dest_port_range.setter
    def dest_port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Input[str]:
        """
        The transport layer protocol.
        """
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="qosId")
    def qos_id(self) -> pulumi.Input[str]:
        """
        The instance ID of the QoS policy to which the quintuple rule is created.
        """
        return pulumi.get(self, "qos_id")

    @qos_id.setter
    def qos_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "qos_id", value)

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> pulumi.Input[str]:
        """
        The source CIDR block.
        """
        return pulumi.get(self, "source_cidr")

    @source_cidr.setter
    def source_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_cidr", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> pulumi.Input[str]:
        """
        The source port range of the transport layer.
        """
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_port_range", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the QoS policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of the quintuple rule.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the QoS policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the quintuple rule takes effect.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _QosPolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_cidr: Optional[pulumi.Input[str]] = None,
                 dest_port_range: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 qos_id: Optional[pulumi.Input[str]] = None,
                 source_cidr: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering QosPolicy resources.
        :param pulumi.Input[str] description: The description of the QoS policy.
        :param pulumi.Input[str] dest_cidr: The destination CIDR block.
        :param pulumi.Input[str] dest_port_range: The destination port range.
        :param pulumi.Input[str] end_time: The expiration time of the quintuple rule.
        :param pulumi.Input[str] ip_protocol: The transport layer protocol.
        :param pulumi.Input[str] name: The name of the QoS policy.
        :param pulumi.Input[int] priority: The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        :param pulumi.Input[str] qos_id: The instance ID of the QoS policy to which the quintuple rule is created.
        :param pulumi.Input[str] source_cidr: The source CIDR block.
        :param pulumi.Input[str] source_port_range: The source port range of the transport layer.
        :param pulumi.Input[str] start_time: The time when the quintuple rule takes effect.
        """
        _QosPolicyState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            dest_cidr=dest_cidr,
            dest_port_range=dest_port_range,
            end_time=end_time,
            ip_protocol=ip_protocol,
            name=name,
            priority=priority,
            qos_id=qos_id,
            source_cidr=source_cidr,
            source_port_range=source_port_range,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             dest_cidr: Optional[pulumi.Input[str]] = None,
             dest_port_range: Optional[pulumi.Input[str]] = None,
             end_time: Optional[pulumi.Input[str]] = None,
             ip_protocol: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             priority: Optional[pulumi.Input[int]] = None,
             qos_id: Optional[pulumi.Input[str]] = None,
             source_cidr: Optional[pulumi.Input[str]] = None,
             source_port_range: Optional[pulumi.Input[str]] = None,
             start_time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destCidr' in kwargs:
            dest_cidr = kwargs['destCidr']
        if 'destPortRange' in kwargs:
            dest_port_range = kwargs['destPortRange']
        if 'endTime' in kwargs:
            end_time = kwargs['endTime']
        if 'ipProtocol' in kwargs:
            ip_protocol = kwargs['ipProtocol']
        if 'qosId' in kwargs:
            qos_id = kwargs['qosId']
        if 'sourceCidr' in kwargs:
            source_cidr = kwargs['sourceCidr']
        if 'sourcePortRange' in kwargs:
            source_port_range = kwargs['sourcePortRange']
        if 'startTime' in kwargs:
            start_time = kwargs['startTime']

        if description is not None:
            _setter("description", description)
        if dest_cidr is not None:
            _setter("dest_cidr", dest_cidr)
        if dest_port_range is not None:
            _setter("dest_port_range", dest_port_range)
        if end_time is not None:
            _setter("end_time", end_time)
        if ip_protocol is not None:
            _setter("ip_protocol", ip_protocol)
        if name is not None:
            _setter("name", name)
        if priority is not None:
            _setter("priority", priority)
        if qos_id is not None:
            _setter("qos_id", qos_id)
        if source_cidr is not None:
            _setter("source_cidr", source_cidr)
        if source_port_range is not None:
            _setter("source_port_range", source_port_range)
        if start_time is not None:
            _setter("start_time", start_time)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the QoS policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destCidr")
    def dest_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The destination CIDR block.
        """
        return pulumi.get(self, "dest_cidr")

    @dest_cidr.setter
    def dest_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_cidr", value)

    @property
    @pulumi.getter(name="destPortRange")
    def dest_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The destination port range.
        """
        return pulumi.get(self, "dest_port_range")

    @dest_port_range.setter
    def dest_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_port_range", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of the quintuple rule.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The transport layer protocol.
        """
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the QoS policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="qosId")
    def qos_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance ID of the QoS policy to which the quintuple rule is created.
        """
        return pulumi.get(self, "qos_id")

    @qos_id.setter
    def qos_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_id", value)

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The source CIDR block.
        """
        return pulumi.get(self, "source_cidr")

    @source_cidr.setter
    def source_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_cidr", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The source port range of the transport layer.
        """
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the quintuple rule takes effect.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class QosPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_cidr: Optional[pulumi.Input[str]] = None,
                 dest_port_range: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 qos_id: Optional[pulumi.Input[str]] = None,
                 source_cidr: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Sag qos policy resource.
        You need to create a QoS policy to set priorities, rate limits, and quintuple rules for different messages.

        For information about Sag Qos Policy and how to use it, see [What is Qos Policy](https://www.alibabacloud.com/help/en/smart-access-gateway/latest/createqospolicy).

        > **NOTE:** Available since v1.60.0.

        > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]

        ## Import

        The Sag Qos Policy can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:rocketmq/qosPolicy:QosPolicy example qos-abc123456:qospy-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the QoS policy.
        :param pulumi.Input[str] dest_cidr: The destination CIDR block.
        :param pulumi.Input[str] dest_port_range: The destination port range.
        :param pulumi.Input[str] end_time: The expiration time of the quintuple rule.
        :param pulumi.Input[str] ip_protocol: The transport layer protocol.
        :param pulumi.Input[str] name: The name of the QoS policy.
        :param pulumi.Input[int] priority: The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        :param pulumi.Input[str] qos_id: The instance ID of the QoS policy to which the quintuple rule is created.
        :param pulumi.Input[str] source_cidr: The source CIDR block.
        :param pulumi.Input[str] source_port_range: The source port range of the transport layer.
        :param pulumi.Input[str] start_time: The time when the quintuple rule takes effect.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QosPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Sag qos policy resource.
        You need to create a QoS policy to set priorities, rate limits, and quintuple rules for different messages.

        For information about Sag Qos Policy and how to use it, see [What is Qos Policy](https://www.alibabacloud.com/help/en/smart-access-gateway/latest/createqospolicy).

        > **NOTE:** Available since v1.60.0.

        > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]

        ## Import

        The Sag Qos Policy can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:rocketmq/qosPolicy:QosPolicy example qos-abc123456:qospy-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param QosPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QosPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            QosPolicyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_cidr: Optional[pulumi.Input[str]] = None,
                 dest_port_range: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 qos_id: Optional[pulumi.Input[str]] = None,
                 source_cidr: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QosPolicyArgs.__new__(QosPolicyArgs)

            __props__.__dict__["description"] = description
            if dest_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'dest_cidr'")
            __props__.__dict__["dest_cidr"] = dest_cidr
            if dest_port_range is None and not opts.urn:
                raise TypeError("Missing required property 'dest_port_range'")
            __props__.__dict__["dest_port_range"] = dest_port_range
            __props__.__dict__["end_time"] = end_time
            if ip_protocol is None and not opts.urn:
                raise TypeError("Missing required property 'ip_protocol'")
            __props__.__dict__["ip_protocol"] = ip_protocol
            __props__.__dict__["name"] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            if qos_id is None and not opts.urn:
                raise TypeError("Missing required property 'qos_id'")
            __props__.__dict__["qos_id"] = qos_id
            if source_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'source_cidr'")
            __props__.__dict__["source_cidr"] = source_cidr
            if source_port_range is None and not opts.urn:
                raise TypeError("Missing required property 'source_port_range'")
            __props__.__dict__["source_port_range"] = source_port_range
            __props__.__dict__["start_time"] = start_time
        super(QosPolicy, __self__).__init__(
            'alicloud:rocketmq/qosPolicy:QosPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dest_cidr: Optional[pulumi.Input[str]] = None,
            dest_port_range: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            ip_protocol: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            qos_id: Optional[pulumi.Input[str]] = None,
            source_cidr: Optional[pulumi.Input[str]] = None,
            source_port_range: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'QosPolicy':
        """
        Get an existing QosPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the QoS policy.
        :param pulumi.Input[str] dest_cidr: The destination CIDR block.
        :param pulumi.Input[str] dest_port_range: The destination port range.
        :param pulumi.Input[str] end_time: The expiration time of the quintuple rule.
        :param pulumi.Input[str] ip_protocol: The transport layer protocol.
        :param pulumi.Input[str] name: The name of the QoS policy.
        :param pulumi.Input[int] priority: The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        :param pulumi.Input[str] qos_id: The instance ID of the QoS policy to which the quintuple rule is created.
        :param pulumi.Input[str] source_cidr: The source CIDR block.
        :param pulumi.Input[str] source_port_range: The source port range of the transport layer.
        :param pulumi.Input[str] start_time: The time when the quintuple rule takes effect.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QosPolicyState.__new__(_QosPolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dest_cidr"] = dest_cidr
        __props__.__dict__["dest_port_range"] = dest_port_range
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["ip_protocol"] = ip_protocol
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["qos_id"] = qos_id
        __props__.__dict__["source_cidr"] = source_cidr
        __props__.__dict__["source_port_range"] = source_port_range
        __props__.__dict__["start_time"] = start_time
        return QosPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the QoS policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destCidr")
    def dest_cidr(self) -> pulumi.Output[str]:
        """
        The destination CIDR block.
        """
        return pulumi.get(self, "dest_cidr")

    @property
    @pulumi.getter(name="destPortRange")
    def dest_port_range(self) -> pulumi.Output[str]:
        """
        The destination port range.
        """
        return pulumi.get(self, "dest_port_range")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[str]]:
        """
        The expiration time of the quintuple rule.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Output[str]:
        """
        The transport layer protocol.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the QoS policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        The priority of the quintuple rule. A smaller value indicates a higher priority. If the priorities of two quintuple rules are the same, the rule created earlier is applied first.Value range: 1 to 7.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="qosId")
    def qos_id(self) -> pulumi.Output[str]:
        """
        The instance ID of the QoS policy to which the quintuple rule is created.
        """
        return pulumi.get(self, "qos_id")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> pulumi.Output[str]:
        """
        The source CIDR block.
        """
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> pulumi.Output[str]:
        """
        The source port range of the transport layer.
        """
        return pulumi.get(self, "source_port_range")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The time when the quintuple rule takes effect.
        """
        return pulumi.get(self, "start_time")

