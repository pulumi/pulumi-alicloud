# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPolicyDocumentResult',
    'AwaitableGetPolicyDocumentResult',
    'get_policy_document',
    'get_policy_document_output',
]

@pulumi.output_type
class GetPolicyDocumentResult:
    """
    A collection of values returned by getPolicyDocument.
    """
    def __init__(__self__, document=None, id=None, output_file=None, statements=None, version=None):
        if document and not isinstance(document, str):
            raise TypeError("Expected argument 'document' to be a str")
        pulumi.set(__self__, "document", document)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if statements and not isinstance(statements, list):
            raise TypeError("Expected argument 'statements' to be a list")
        pulumi.set(__self__, "statements", statements)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def document(self) -> str:
        """
        Standard policy document rendered based on the arguments above.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def statements(self) -> Optional[Sequence['outputs.GetPolicyDocumentStatementResult']]:
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


class AwaitableGetPolicyDocumentResult(GetPolicyDocumentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyDocumentResult(
            document=self.document,
            id=self.id,
            output_file=self.output_file,
            statements=self.statements,
            version=self.version)


def get_policy_document(output_file: Optional[str] = None,
                        statements: Optional[Sequence[pulumi.InputType['GetPolicyDocumentStatementArgs']]] = None,
                        version: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyDocumentResult:
    """
    This data source Generates a RAM policy document of the current Alibaba Cloud user.

    > **NOTE:** Available since v1.184.0+.

    ## Example Usage


    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param Sequence[pulumi.InputType['GetPolicyDocumentStatementArgs']] statements: Statement of the RAM policy document. See the following `Block statement`. See `statement` below.
    :param str version: Version of the RAM policy document. Valid value is `1`. Default value is `1`.
    """
    __args__ = dict()
    __args__['outputFile'] = output_file
    __args__['statements'] = statements
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('alicloud:ram/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value

    return AwaitableGetPolicyDocumentResult(
        document=pulumi.get(__ret__, 'document'),
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        statements=pulumi.get(__ret__, 'statements'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_policy_document)
def get_policy_document_output(output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPolicyDocumentStatementArgs']]]]] = None,
                               version: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyDocumentResult]:
    """
    This data source Generates a RAM policy document of the current Alibaba Cloud user.

    > **NOTE:** Available since v1.184.0+.

    ## Example Usage


    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param Sequence[pulumi.InputType['GetPolicyDocumentStatementArgs']] statements: Statement of the RAM policy document. See the following `Block statement`. See `statement` below.
    :param str version: Version of the RAM policy document. Valid value is `1`. Default value is `1`.
    """
    ...
