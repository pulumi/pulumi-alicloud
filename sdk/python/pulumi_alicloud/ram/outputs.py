# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PolicyStatement',
    'GetGroupsGroupResult',
    'GetPoliciesPolicyResult',
    'GetPolicyDocumentStatementResult',
    'GetPolicyDocumentStatementConditionResult',
    'GetPolicyDocumentStatementPrincipalResult',
    'GetRolesRoleResult',
    'GetSamlProvidersProviderResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class PolicyStatement(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 effect: str,
                 resources: Sequence[str]):
        """
        :param Sequence[str] actions: (It has been deprecated since version 1.49.0, and use field 'document' to replace.) List of operations for the `resource`. The format of each item in this list is `${service}:${action_name}`, such as `oss:ListBuckets` and `ecs:Describe*`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${action_name}` refers to the name of an api interface which related to the `${service}`.
        :param str effect: (It has been deprecated since version 1.49.0, and use field 'document' to replace.) This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`.
        :param Sequence[str] resources: (It has been deprecated since version 1.49.0, and use field 'document' to replace.) List of specific objects which will be authorized. The format of each item in this list is `acs:${service}:${region}:${account_id}:${relative_id}`, such as `acs:ecs:*:*:instance/inst-002` and `acs:oss:*:1234567890000:mybucket`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${region}` is the region info which can use `*` replace when it is not supplied, the `${account_id}` refers to someone's Alicloud account id or you can use `*` to replace, the `${relative_id}` is the resource description section which related to the `${service}`.
        """
        PolicyStatement._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            effect=effect,
            resources=resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Sequence[str],
             effect: str,
             resources: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("actions", actions)
        _setter("effect", effect)
        _setter("resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        (It has been deprecated since version 1.49.0, and use field 'document' to replace.) List of operations for the `resource`. The format of each item in this list is `${service}:${action_name}`, such as `oss:ListBuckets` and `ecs:Describe*`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${action_name}` refers to the name of an api interface which related to the `${service}`.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        (It has been deprecated since version 1.49.0, and use field 'document' to replace.) This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def resources(self) -> Sequence[str]:
        """
        (It has been deprecated since version 1.49.0, and use field 'document' to replace.) List of specific objects which will be authorized. The format of each item in this list is `acs:${service}:${region}:${account_id}:${relative_id}`, such as `acs:ecs:*:*:instance/inst-002` and `acs:oss:*:1234567890000:mybucket`. The `${service}` can be `ecs`, `oss`, `ots` and so on, the `${region}` is the region info which can use `*` replace when it is not supplied, the `${account_id}` refers to someone's Alicloud account id or you can use `*` to replace, the `${relative_id}` is the resource description section which related to the `${service}`.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 name: str):
        """
        :param str comments: Comments of the group.
        :param str name: Name of the group.
        """
        GetGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comments=comments,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comments: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("comments", comments)
        _setter("name", name)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comments of the group.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 attachment_count: int,
                 create_date: str,
                 default_version: str,
                 description: str,
                 document: str,
                 id: str,
                 name: str,
                 policy_document: str,
                 policy_name: str,
                 type: str,
                 update_date: str,
                 user_name: str,
                 version_id: str):
        """
        :param int attachment_count: Attachment count of the policy.
        :param str create_date: Creation date of the policy.
        :param str default_version: Default version of the policy.
        :param str description: Description of the policy.
        :param str document: Policy document of the policy.
        :param str id: ID of the policy.
        :param str name: Name of the policy.
        :param str policy_document: Policy document of the policy.
        :param str policy_name: Name of the policy.
        :param str type: Filter results by a specific policy type. Valid values are `Custom` and `System`.
        :param str update_date: Update date of the policy.
        :param str user_name: Filter results by a specific user name. Returned policies are attached to the specified user.
        :param str version_id: The ID of default policy.
        """
        GetPoliciesPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachment_count=attachment_count,
            create_date=create_date,
            default_version=default_version,
            description=description,
            document=document,
            id=id,
            name=name,
            policy_document=policy_document,
            policy_name=policy_name,
            type=type,
            update_date=update_date,
            user_name=user_name,
            version_id=version_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachment_count: int,
             create_date: str,
             default_version: str,
             description: str,
             document: str,
             id: str,
             name: str,
             policy_document: str,
             policy_name: str,
             type: str,
             update_date: str,
             user_name: str,
             version_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'attachmentCount' in kwargs:
            attachment_count = kwargs['attachmentCount']
        if 'createDate' in kwargs:
            create_date = kwargs['createDate']
        if 'defaultVersion' in kwargs:
            default_version = kwargs['defaultVersion']
        if 'policyDocument' in kwargs:
            policy_document = kwargs['policyDocument']
        if 'policyName' in kwargs:
            policy_name = kwargs['policyName']
        if 'updateDate' in kwargs:
            update_date = kwargs['updateDate']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'versionId' in kwargs:
            version_id = kwargs['versionId']

        _setter("attachment_count", attachment_count)
        _setter("create_date", create_date)
        _setter("default_version", default_version)
        _setter("description", description)
        _setter("document", document)
        _setter("id", id)
        _setter("name", name)
        _setter("policy_document", policy_document)
        _setter("policy_name", policy_name)
        _setter("type", type)
        _setter("update_date", update_date)
        _setter("user_name", user_name)
        _setter("version_id", version_id)

    @property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> int:
        """
        Attachment count of the policy.
        """
        return pulumi.get(self, "attachment_count")

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> str:
        """
        Creation date of the policy.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="defaultVersion")
    def default_version(self) -> str:
        """
        Default version of the policy.
        """
        return pulumi.get(self, "default_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> str:
        """
        Policy document of the policy.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> str:
        """
        Policy document of the policy.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Name of the policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Filter results by a specific policy type. Valid values are `Custom` and `System`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> str:
        """
        Update date of the policy.
        """
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Filter results by a specific user name. Returned policies are attached to the specified user.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        The ID of default policy.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetPolicyDocumentStatementResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 conditions: Optional[Sequence['outputs.GetPolicyDocumentStatementConditionResult']] = None,
                 effect: Optional[str] = None,
                 principals: Optional[Sequence['outputs.GetPolicyDocumentStatementPrincipalResult']] = None,
                 resources: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] actions: Action of the RAM policy document. If you want to create a RAM role policy document, it must be `["sts:AssumeRole"]`.
        :param Sequence['GetPolicyDocumentStatementConditionArgs'] conditions: Specifies the condition that are required for a policy to take effect. See `condition` below.
        :param str effect: This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`. Default value is `Allow`. If you want to create a RAM role policy document, it must be `Allow`.
        :param Sequence['GetPolicyDocumentStatementPrincipalArgs'] principals: Principal of the RAM policy document. If you want to create a RAM role policy document, it must be set. See `principal` below.
        :param Sequence[str] resources: List of specific objects which will be authorized. If you want to create a RAM policy document, it must be set.
        """
        GetPolicyDocumentStatementResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            conditions=conditions,
            effect=effect,
            principals=principals,
            resources=resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Sequence[str],
             conditions: Optional[Sequence['outputs.GetPolicyDocumentStatementConditionResult']] = None,
             effect: Optional[str] = None,
             principals: Optional[Sequence['outputs.GetPolicyDocumentStatementPrincipalResult']] = None,
             resources: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("actions", actions)
        if conditions is not None:
            _setter("conditions", conditions)
        if effect is not None:
            _setter("effect", effect)
        if principals is not None:
            _setter("principals", principals)
        if resources is not None:
            _setter("resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        Action of the RAM policy document. If you want to create a RAM role policy document, it must be `["sts:AssumeRole"]`.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetPolicyDocumentStatementConditionResult']]:
        """
        Specifies the condition that are required for a policy to take effect. See `condition` below.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`. Default value is `Allow`. If you want to create a RAM role policy document, it must be `Allow`.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def principals(self) -> Optional[Sequence['outputs.GetPolicyDocumentStatementPrincipalResult']]:
        """
        Principal of the RAM policy document. If you want to create a RAM role policy document, it must be set. See `principal` below.
        """
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        """
        List of specific objects which will be authorized. If you want to create a RAM policy document, it must be set.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetPolicyDocumentStatementConditionResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 values: Sequence[str],
                 variable: str):
        """
        :param str operator: The operator of the condition.
        :param Sequence[str] values: The values of the condition.
        :param str variable: The variable of the condition.
        """
        GetPolicyDocumentStatementConditionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            values=values,
            variable=variable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             values: Sequence[str],
             variable: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("values", values)
        _setter("variable", variable)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator of the condition.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of the condition.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def variable(self) -> str:
        """
        The variable of the condition.
        """
        return pulumi.get(self, "variable")


@pulumi.output_type
class GetPolicyDocumentStatementPrincipalResult(dict):
    def __init__(__self__, *,
                 entity: str,
                 identifiers: Sequence[str]):
        """
        :param str entity: The trusted entity. Valid values: `RAM`, `Service` and `Federated`.
        :param Sequence[str] identifiers: The identifiers of the principal.
        """
        GetPolicyDocumentStatementPrincipalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity=entity,
            identifiers=identifiers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity: str,
             identifiers: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("entity", entity)
        _setter("identifiers", identifiers)

    @property
    @pulumi.getter
    def entity(self) -> str:
        """
        The trusted entity. Valid values: `RAM`, `Service` and `Federated`.
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def identifiers(self) -> Sequence[str]:
        """
        The identifiers of the principal.
        """
        return pulumi.get(self, "identifiers")


@pulumi.output_type
class GetRolesRoleResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 assume_role_policy_document: str,
                 create_date: str,
                 description: str,
                 document: str,
                 id: str,
                 name: str,
                 update_date: str):
        """
        :param str arn: Resource descriptor of the role.
        :param str assume_role_policy_document: Authorization strategy of the role. This parameter is deprecated and replaced by `document`.
        :param str create_date: Creation date of the role.
        :param str description: Description of the role.
        :param str document: Authorization strategy of the role.
        :param str id: ID of the role.
        :param str name: Name of the role.
        :param str update_date: Update date of the role.
        """
        GetRolesRoleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            assume_role_policy_document=assume_role_policy_document,
            create_date=create_date,
            description=description,
            document=document,
            id=id,
            name=name,
            update_date=update_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: str,
             assume_role_policy_document: str,
             create_date: str,
             description: str,
             document: str,
             id: str,
             name: str,
             update_date: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'assumeRolePolicyDocument' in kwargs:
            assume_role_policy_document = kwargs['assumeRolePolicyDocument']
        if 'createDate' in kwargs:
            create_date = kwargs['createDate']
        if 'updateDate' in kwargs:
            update_date = kwargs['updateDate']

        _setter("arn", arn)
        _setter("assume_role_policy_document", assume_role_policy_document)
        _setter("create_date", create_date)
        _setter("description", description)
        _setter("document", document)
        _setter("id", id)
        _setter("name", name)
        _setter("update_date", update_date)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        Resource descriptor of the role.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="assumeRolePolicyDocument")
    def assume_role_policy_document(self) -> str:
        """
        Authorization strategy of the role. This parameter is deprecated and replaced by `document`.
        """
        return pulumi.get(self, "assume_role_policy_document")

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> str:
        """
        Creation date of the role.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> str:
        """
        Authorization strategy of the role.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the role.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> str:
        """
        Update date of the role.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetSamlProvidersProviderResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 description: str,
                 encodedsaml_metadata_document: str,
                 id: str,
                 saml_provider_name: str,
                 update_date: str):
        """
        :param str arn: The Alibaba Cloud Resource Name (ARN) of the IdP.
        :param str description: The description of SAML Provider.
        :param str encodedsaml_metadata_document: The encodedsaml metadata document.
        :param str id: The ID of the SAML Provider.
        :param str saml_provider_name: The saml provider name.
        :param str update_date: The update time.
        """
        GetSamlProvidersProviderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            description=description,
            encodedsaml_metadata_document=encodedsaml_metadata_document,
            id=id,
            saml_provider_name=saml_provider_name,
            update_date=update_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: str,
             description: str,
             encodedsaml_metadata_document: str,
             id: str,
             saml_provider_name: str,
             update_date: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'encodedsamlMetadataDocument' in kwargs:
            encodedsaml_metadata_document = kwargs['encodedsamlMetadataDocument']
        if 'samlProviderName' in kwargs:
            saml_provider_name = kwargs['samlProviderName']
        if 'updateDate' in kwargs:
            update_date = kwargs['updateDate']

        _setter("arn", arn)
        _setter("description", description)
        _setter("encodedsaml_metadata_document", encodedsaml_metadata_document)
        _setter("id", id)
        _setter("saml_provider_name", saml_provider_name)
        _setter("update_date", update_date)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Alibaba Cloud Resource Name (ARN) of the IdP.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of SAML Provider.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encodedsamlMetadataDocument")
    def encodedsaml_metadata_document(self) -> str:
        """
        The encodedsaml metadata document.
        """
        return pulumi.get(self, "encodedsaml_metadata_document")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the SAML Provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="samlProviderName")
    def saml_provider_name(self) -> str:
        """
        The saml provider name.
        """
        return pulumi.get(self, "saml_provider_name")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 create_date: str,
                 id: str,
                 last_login_date: str,
                 name: str):
        """
        :param str create_date: Creation date of the user.
        :param str id: The original id is user's name, but it is user id in 1.37.0+.
        :param str last_login_date: (Removed) Last login date of the user. Removed from version 1.79.0.
        :param str name: Name of the user.
        """
        GetUsersUserResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_date=create_date,
            id=id,
            last_login_date=last_login_date,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_date: str,
             id: str,
             last_login_date: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createDate' in kwargs:
            create_date = kwargs['createDate']
        if 'lastLoginDate' in kwargs:
            last_login_date = kwargs['lastLoginDate']

        _setter("create_date", create_date)
        _setter("id", id)
        _setter("last_login_date", last_login_date)
        _setter("name", name)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> str:
        """
        Creation date of the user.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The original id is user's name, but it is user id in 1.37.0+.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastLoginDate")
    def last_login_date(self) -> str:
        """
        (Removed) Last login date of the user. Removed from version 1.79.0.
        """
        return pulumi.get(self, "last_login_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user.
        """
        return pulumi.get(self, "name")


