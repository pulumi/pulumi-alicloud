# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GatewaySlbList',
    'GetClustersClusterResult',
    'GetClustersClusterInstanceModelResult',
    'GetEngineNamespacesNamespaceResult',
    'GetGatewaysGatewayResult',
    'GetGatewaysGatewaySlbListResult',
    'GetZnodesZnodeResult',
]

@pulumi.output_type
class GatewaySlbList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associateId":
            suggest = "associate_id"
        elif key == "gatewaySlbMode":
            suggest = "gateway_slb_mode"
        elif key == "gatewaySlbStatus":
            suggest = "gateway_slb_status"
        elif key == "gmtCreate":
            suggest = "gmt_create"
        elif key == "slbId":
            suggest = "slb_id"
        elif key == "slbIp":
            suggest = "slb_ip"
        elif key == "slbPort":
            suggest = "slb_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaySlbList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaySlbList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaySlbList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 associate_id: Optional[str] = None,
                 gateway_slb_mode: Optional[str] = None,
                 gateway_slb_status: Optional[str] = None,
                 gmt_create: Optional[str] = None,
                 slb_id: Optional[str] = None,
                 slb_ip: Optional[str] = None,
                 slb_port: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str associate_id: The associate id.
        :param str gateway_slb_mode: The Mode of the gateway slb.
        :param str gateway_slb_status: The Status of the gateway slb.
        :param str gmt_create: The creation time of the gateway slb.
        :param str slb_id: The ID of the gateway slb.
        :param str slb_ip: The ip of the gateway slb.
        :param str slb_port: The port of the gateway slb.
        :param str type: The type of the gateway slb.
        """
        GatewaySlbList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            associate_id=associate_id,
            gateway_slb_mode=gateway_slb_mode,
            gateway_slb_status=gateway_slb_status,
            gmt_create=gmt_create,
            slb_id=slb_id,
            slb_ip=slb_ip,
            slb_port=slb_port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             associate_id: Optional[str] = None,
             gateway_slb_mode: Optional[str] = None,
             gateway_slb_status: Optional[str] = None,
             gmt_create: Optional[str] = None,
             slb_id: Optional[str] = None,
             slb_ip: Optional[str] = None,
             slb_port: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'associateId' in kwargs:
            associate_id = kwargs['associateId']
        if 'gatewaySlbMode' in kwargs:
            gateway_slb_mode = kwargs['gatewaySlbMode']
        if 'gatewaySlbStatus' in kwargs:
            gateway_slb_status = kwargs['gatewaySlbStatus']
        if 'gmtCreate' in kwargs:
            gmt_create = kwargs['gmtCreate']
        if 'slbId' in kwargs:
            slb_id = kwargs['slbId']
        if 'slbIp' in kwargs:
            slb_ip = kwargs['slbIp']
        if 'slbPort' in kwargs:
            slb_port = kwargs['slbPort']

        if associate_id is not None:
            _setter("associate_id", associate_id)
        if gateway_slb_mode is not None:
            _setter("gateway_slb_mode", gateway_slb_mode)
        if gateway_slb_status is not None:
            _setter("gateway_slb_status", gateway_slb_status)
        if gmt_create is not None:
            _setter("gmt_create", gmt_create)
        if slb_id is not None:
            _setter("slb_id", slb_id)
        if slb_ip is not None:
            _setter("slb_ip", slb_ip)
        if slb_port is not None:
            _setter("slb_port", slb_port)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="associateId")
    def associate_id(self) -> Optional[str]:
        """
        The associate id.
        """
        return pulumi.get(self, "associate_id")

    @property
    @pulumi.getter(name="gatewaySlbMode")
    def gateway_slb_mode(self) -> Optional[str]:
        """
        The Mode of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_mode")

    @property
    @pulumi.getter(name="gatewaySlbStatus")
    def gateway_slb_status(self) -> Optional[str]:
        """
        The Status of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_status")

    @property
    @pulumi.getter(name="gmtCreate")
    def gmt_create(self) -> Optional[str]:
        """
        The creation time of the gateway slb.
        """
        return pulumi.get(self, "gmt_create")

    @property
    @pulumi.getter(name="slbId")
    def slb_id(self) -> Optional[str]:
        """
        The ID of the gateway slb.
        """
        return pulumi.get(self, "slb_id")

    @property
    @pulumi.getter(name="slbIp")
    def slb_ip(self) -> Optional[str]:
        """
        The ip of the gateway slb.
        """
        return pulumi.get(self, "slb_ip")

    @property
    @pulumi.getter(name="slbPort")
    def slb_port(self) -> Optional[str]:
        """
        The port of the gateway slb.
        """
        return pulumi.get(self, "slb_port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the gateway slb.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 acl_id: str,
                 app_version: str,
                 cluster_id: str,
                 cluster_name: str,
                 cluster_type: str,
                 cpu: int,
                 health_status: str,
                 id: str,
                 init_cost_time: int,
                 instance_count: int,
                 instance_id: str,
                 instance_models: Sequence['outputs.GetClustersClusterInstanceModelResult'],
                 internet_address: str,
                 internet_domain: str,
                 internet_port: str,
                 intranet_address: str,
                 intranet_domain: str,
                 intranet_port: str,
                 memory_capacity: int,
                 pay_info: str,
                 pub_network_flow: str,
                 status: str):
        """
        :param str acl_id: The id of acl.
        :param str app_version: The version of app.
        :param str cluster_id: ID of the MSE Cluster.
        :param str cluster_name: ID of the OOS Executions.
        :param str cluster_type: The type of MSE Cluster.
        :param int cpu: The num of cpu.
        :param str health_status: The health status of MSE Cluster.
        :param str id: ID of the MSE Cluster.
        :param int init_cost_time: Time-consuming to create.
        :param int instance_count: The count of instance.
        :param str instance_id: ID of the MSE Cluster.
        :param Sequence['GetClustersClusterInstanceModelArgs'] instance_models: The list of instances.
        :param str internet_address: The address of public network.
        :param str internet_domain: The domain of public network.
        :param str internet_port: The port of public network.
        :param str intranet_address: The address of private network.
        :param str intranet_domain: The domain of private network.
        :param str intranet_port: The port of private network.
        :param int memory_capacity: The memory size.
        :param str pay_info: The type of payment.
        :param str pub_network_flow: The public network bandwidth.
        :param str status: The status of MSE Cluster. Valid: `DESTROY_FAILED`, `DESTROY_ING`, `DESTROY_SUCCESS`, `INIT_FAILED`, `INIT_ING`, `INIT_SUCCESS`, `INIT_TIME_OUT`, `RESTART_FAILED`, `RESTART_ING`, `RESTART_SUCCESS`, `SCALE_FAILED`, `SCALE_ING`, `SCALE_SUCCESS`
        """
        GetClustersClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acl_id=acl_id,
            app_version=app_version,
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            cluster_type=cluster_type,
            cpu=cpu,
            health_status=health_status,
            id=id,
            init_cost_time=init_cost_time,
            instance_count=instance_count,
            instance_id=instance_id,
            instance_models=instance_models,
            internet_address=internet_address,
            internet_domain=internet_domain,
            internet_port=internet_port,
            intranet_address=intranet_address,
            intranet_domain=intranet_domain,
            intranet_port=intranet_port,
            memory_capacity=memory_capacity,
            pay_info=pay_info,
            pub_network_flow=pub_network_flow,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acl_id: str,
             app_version: str,
             cluster_id: str,
             cluster_name: str,
             cluster_type: str,
             cpu: int,
             health_status: str,
             id: str,
             init_cost_time: int,
             instance_count: int,
             instance_id: str,
             instance_models: Sequence['outputs.GetClustersClusterInstanceModelResult'],
             internet_address: str,
             internet_domain: str,
             internet_port: str,
             intranet_address: str,
             intranet_domain: str,
             intranet_port: str,
             memory_capacity: int,
             pay_info: str,
             pub_network_flow: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aclId' in kwargs:
            acl_id = kwargs['aclId']
        if 'appVersion' in kwargs:
            app_version = kwargs['appVersion']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'clusterType' in kwargs:
            cluster_type = kwargs['clusterType']
        if 'healthStatus' in kwargs:
            health_status = kwargs['healthStatus']
        if 'initCostTime' in kwargs:
            init_cost_time = kwargs['initCostTime']
        if 'instanceCount' in kwargs:
            instance_count = kwargs['instanceCount']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'instanceModels' in kwargs:
            instance_models = kwargs['instanceModels']
        if 'internetAddress' in kwargs:
            internet_address = kwargs['internetAddress']
        if 'internetDomain' in kwargs:
            internet_domain = kwargs['internetDomain']
        if 'internetPort' in kwargs:
            internet_port = kwargs['internetPort']
        if 'intranetAddress' in kwargs:
            intranet_address = kwargs['intranetAddress']
        if 'intranetDomain' in kwargs:
            intranet_domain = kwargs['intranetDomain']
        if 'intranetPort' in kwargs:
            intranet_port = kwargs['intranetPort']
        if 'memoryCapacity' in kwargs:
            memory_capacity = kwargs['memoryCapacity']
        if 'payInfo' in kwargs:
            pay_info = kwargs['payInfo']
        if 'pubNetworkFlow' in kwargs:
            pub_network_flow = kwargs['pubNetworkFlow']

        _setter("acl_id", acl_id)
        _setter("app_version", app_version)
        _setter("cluster_id", cluster_id)
        _setter("cluster_name", cluster_name)
        _setter("cluster_type", cluster_type)
        _setter("cpu", cpu)
        _setter("health_status", health_status)
        _setter("id", id)
        _setter("init_cost_time", init_cost_time)
        _setter("instance_count", instance_count)
        _setter("instance_id", instance_id)
        _setter("instance_models", instance_models)
        _setter("internet_address", internet_address)
        _setter("internet_domain", internet_domain)
        _setter("internet_port", internet_port)
        _setter("intranet_address", intranet_address)
        _setter("intranet_domain", intranet_domain)
        _setter("intranet_port", intranet_port)
        _setter("memory_capacity", memory_capacity)
        _setter("pay_info", pay_info)
        _setter("pub_network_flow", pub_network_flow)
        _setter("status", status)

    @property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> str:
        """
        The id of acl.
        """
        return pulumi.get(self, "acl_id")

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> str:
        """
        The version of app.
        """
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        ID of the OOS Executions.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The type of MSE Cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The num of cpu.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        The health status of MSE Cluster.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initCostTime")
    def init_cost_time(self) -> int:
        """
        Time-consuming to create.
        """
        return pulumi.get(self, "init_cost_time")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The count of instance.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceModels")
    def instance_models(self) -> Sequence['outputs.GetClustersClusterInstanceModelResult']:
        """
        The list of instances.
        """
        return pulumi.get(self, "instance_models")

    @property
    @pulumi.getter(name="internetAddress")
    def internet_address(self) -> str:
        """
        The address of public network.
        """
        return pulumi.get(self, "internet_address")

    @property
    @pulumi.getter(name="internetDomain")
    def internet_domain(self) -> str:
        """
        The domain of public network.
        """
        return pulumi.get(self, "internet_domain")

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> str:
        """
        The port of public network.
        """
        return pulumi.get(self, "internet_port")

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> str:
        """
        The address of private network.
        """
        return pulumi.get(self, "intranet_address")

    @property
    @pulumi.getter(name="intranetDomain")
    def intranet_domain(self) -> str:
        """
        The domain of private network.
        """
        return pulumi.get(self, "intranet_domain")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> str:
        """
        The port of private network.
        """
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter(name="memoryCapacity")
    def memory_capacity(self) -> int:
        """
        The memory size.
        """
        return pulumi.get(self, "memory_capacity")

    @property
    @pulumi.getter(name="payInfo")
    def pay_info(self) -> str:
        """
        The type of payment.
        """
        return pulumi.get(self, "pay_info")

    @property
    @pulumi.getter(name="pubNetworkFlow")
    def pub_network_flow(self) -> str:
        """
        The public network bandwidth.
        """
        return pulumi.get(self, "pub_network_flow")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of MSE Cluster. Valid: `DESTROY_FAILED`, `DESTROY_ING`, `DESTROY_SUCCESS`, `INIT_FAILED`, `INIT_ING`, `INIT_SUCCESS`, `INIT_TIME_OUT`, `RESTART_FAILED`, `RESTART_ING`, `RESTART_SUCCESS`, `SCALE_FAILED`, `SCALE_ING`, `SCALE_SUCCESS`
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClustersClusterInstanceModelResult(dict):
    def __init__(__self__, *,
                 health_status: str,
                 instance_type: str,
                 internet_ip: str,
                 ip: str,
                 pod_name: str,
                 role: str,
                 single_tunnel_vip: str,
                 vip: str):
        """
        :param str health_status: The health status of MSE Cluster.
        """
        GetClustersClusterInstanceModelResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            health_status=health_status,
            instance_type=instance_type,
            internet_ip=internet_ip,
            ip=ip,
            pod_name=pod_name,
            role=role,
            single_tunnel_vip=single_tunnel_vip,
            vip=vip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             health_status: str,
             instance_type: str,
             internet_ip: str,
             ip: str,
             pod_name: str,
             role: str,
             single_tunnel_vip: str,
             vip: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'healthStatus' in kwargs:
            health_status = kwargs['healthStatus']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'internetIp' in kwargs:
            internet_ip = kwargs['internetIp']
        if 'podName' in kwargs:
            pod_name = kwargs['podName']
        if 'singleTunnelVip' in kwargs:
            single_tunnel_vip = kwargs['singleTunnelVip']

        _setter("health_status", health_status)
        _setter("instance_type", instance_type)
        _setter("internet_ip", internet_ip)
        _setter("ip", ip)
        _setter("pod_name", pod_name)
        _setter("role", role)
        _setter("single_tunnel_vip", single_tunnel_vip)
        _setter("vip", vip)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        The health status of MSE Cluster.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="internetIp")
    def internet_ip(self) -> str:
        return pulumi.get(self, "internet_ip")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="podName")
    def pod_name(self) -> str:
        return pulumi.get(self, "pod_name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="singleTunnelVip")
    def single_tunnel_vip(self) -> str:
        return pulumi.get(self, "single_tunnel_vip")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetEngineNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 config_count: int,
                 id: str,
                 namespace_desc: str,
                 namespace_id: str,
                 namespace_show_name: str,
                 quota: int,
                 service_count: str,
                 type: int):
        """
        :param int config_count: The Number of Configuration of the Namespace.
        :param str id: The ID of the Engine Namespace. It is formatted to `<cluster_id>:<namespace_id>`.
        :param str namespace_desc: The description of the Namespace.
        :param str namespace_id: The id of Namespace.
        :param str namespace_show_name: The name of the Namespace.
        :param int quota: The Quota of the Namespace.
        :param str service_count: The number of active services.
        :param int type: The type of the Namespace, the value is as follows:
               - '0': Global Configuration.
               - '1': default namespace.
               - '2': Custom Namespace.
        """
        GetEngineNamespacesNamespaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_count=config_count,
            id=id,
            namespace_desc=namespace_desc,
            namespace_id=namespace_id,
            namespace_show_name=namespace_show_name,
            quota=quota,
            service_count=service_count,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_count: int,
             id: str,
             namespace_desc: str,
             namespace_id: str,
             namespace_show_name: str,
             quota: int,
             service_count: str,
             type: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configCount' in kwargs:
            config_count = kwargs['configCount']
        if 'namespaceDesc' in kwargs:
            namespace_desc = kwargs['namespaceDesc']
        if 'namespaceId' in kwargs:
            namespace_id = kwargs['namespaceId']
        if 'namespaceShowName' in kwargs:
            namespace_show_name = kwargs['namespaceShowName']
        if 'serviceCount' in kwargs:
            service_count = kwargs['serviceCount']

        _setter("config_count", config_count)
        _setter("id", id)
        _setter("namespace_desc", namespace_desc)
        _setter("namespace_id", namespace_id)
        _setter("namespace_show_name", namespace_show_name)
        _setter("quota", quota)
        _setter("service_count", service_count)
        _setter("type", type)

    @property
    @pulumi.getter(name="configCount")
    def config_count(self) -> int:
        """
        The Number of Configuration of the Namespace.
        """
        return pulumi.get(self, "config_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Engine Namespace. It is formatted to `<cluster_id>:<namespace_id>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="namespaceDesc")
    def namespace_desc(self) -> str:
        """
        The description of the Namespace.
        """
        return pulumi.get(self, "namespace_desc")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        The id of Namespace.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceShowName")
    def namespace_show_name(self) -> str:
        """
        The name of the Namespace.
        """
        return pulumi.get(self, "namespace_show_name")

    @property
    @pulumi.getter
    def quota(self) -> int:
        """
        The Quota of the Namespace.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter(name="serviceCount")
    def service_count(self) -> str:
        """
        The number of active services.
        """
        return pulumi.get(self, "service_count")

    @property
    @pulumi.getter
    def type(self) -> int:
        """
        The type of the Namespace, the value is as follows:
        - '0': Global Configuration.
        - '1': default namespace.
        - '2': Custom Namespace.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 backup_vswitch_id: str,
                 gateway_name: str,
                 gateway_unique_id: str,
                 id: str,
                 payment_type: str,
                 replica: str,
                 slb_lists: Sequence['outputs.GetGatewaysGatewaySlbListResult'],
                 spec: str,
                 status: str,
                 vpc_id: str,
                 vswitch_id: str):
        """
        :param str backup_vswitch_id: The backup vswitch id.
        :param str gateway_name: The name of the Gateway.
        :param str gateway_unique_id: Gateway unique identification.
        :param str id: The ID of the Gateway.
        :param str payment_type: The payment type of the resource.
        :param str replica: Number of Gateway Nodes.
        :param Sequence['GetGatewaysGatewaySlbListArgs'] slb_lists: A list of gateway Slb.
        :param str spec: Gateway Node Specifications.
        :param str status: The status of the gateway.
        :param str vpc_id: The ID of the vpc.
        :param str vswitch_id: The ID of the vswitch.
        """
        GetGatewaysGatewayResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup_vswitch_id=backup_vswitch_id,
            gateway_name=gateway_name,
            gateway_unique_id=gateway_unique_id,
            id=id,
            payment_type=payment_type,
            replica=replica,
            slb_lists=slb_lists,
            spec=spec,
            status=status,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup_vswitch_id: str,
             gateway_name: str,
             gateway_unique_id: str,
             id: str,
             payment_type: str,
             replica: str,
             slb_lists: Sequence['outputs.GetGatewaysGatewaySlbListResult'],
             spec: str,
             status: str,
             vpc_id: str,
             vswitch_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'backupVswitchId' in kwargs:
            backup_vswitch_id = kwargs['backupVswitchId']
        if 'gatewayName' in kwargs:
            gateway_name = kwargs['gatewayName']
        if 'gatewayUniqueId' in kwargs:
            gateway_unique_id = kwargs['gatewayUniqueId']
        if 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if 'slbLists' in kwargs:
            slb_lists = kwargs['slbLists']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']

        _setter("backup_vswitch_id", backup_vswitch_id)
        _setter("gateway_name", gateway_name)
        _setter("gateway_unique_id", gateway_unique_id)
        _setter("id", id)
        _setter("payment_type", payment_type)
        _setter("replica", replica)
        _setter("slb_lists", slb_lists)
        _setter("spec", spec)
        _setter("status", status)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="backupVswitchId")
    def backup_vswitch_id(self) -> str:
        """
        The backup vswitch id.
        """
        return pulumi.get(self, "backup_vswitch_id")

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        """
        The name of the Gateway.
        """
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter(name="gatewayUniqueId")
    def gateway_unique_id(self) -> str:
        """
        Gateway unique identification.
        """
        return pulumi.get(self, "gateway_unique_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The payment type of the resource.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter
    def replica(self) -> str:
        """
        Number of Gateway Nodes.
        """
        return pulumi.get(self, "replica")

    @property
    @pulumi.getter(name="slbLists")
    def slb_lists(self) -> Sequence['outputs.GetGatewaysGatewaySlbListResult']:
        """
        A list of gateway Slb.
        """
        return pulumi.get(self, "slb_lists")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        Gateway Node Specifications.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        The ID of the vswitch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetGatewaysGatewaySlbListResult(dict):
    def __init__(__self__, *,
                 associate_id: str,
                 gateway_slb_mode: str,
                 gateway_slb_status: str,
                 gmt_create: str,
                 slb_id: str,
                 slb_ip: str,
                 slb_port: str,
                 type: str):
        """
        :param str associate_id: The associate id.
        :param str gateway_slb_mode: The Mode of the gateway slb.
        :param str gateway_slb_status: The Status of the gateway slb.
        :param str gmt_create: The creation time of the gateway slb.
        :param str slb_id: The ID of the gateway slb.
        :param str slb_ip: The ip of the gateway slb.
        :param str slb_port: The port of the gateway slb.
        :param str type: The type of the gateway slb.
        """
        GetGatewaysGatewaySlbListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            associate_id=associate_id,
            gateway_slb_mode=gateway_slb_mode,
            gateway_slb_status=gateway_slb_status,
            gmt_create=gmt_create,
            slb_id=slb_id,
            slb_ip=slb_ip,
            slb_port=slb_port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             associate_id: str,
             gateway_slb_mode: str,
             gateway_slb_status: str,
             gmt_create: str,
             slb_id: str,
             slb_ip: str,
             slb_port: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'associateId' in kwargs:
            associate_id = kwargs['associateId']
        if 'gatewaySlbMode' in kwargs:
            gateway_slb_mode = kwargs['gatewaySlbMode']
        if 'gatewaySlbStatus' in kwargs:
            gateway_slb_status = kwargs['gatewaySlbStatus']
        if 'gmtCreate' in kwargs:
            gmt_create = kwargs['gmtCreate']
        if 'slbId' in kwargs:
            slb_id = kwargs['slbId']
        if 'slbIp' in kwargs:
            slb_ip = kwargs['slbIp']
        if 'slbPort' in kwargs:
            slb_port = kwargs['slbPort']

        _setter("associate_id", associate_id)
        _setter("gateway_slb_mode", gateway_slb_mode)
        _setter("gateway_slb_status", gateway_slb_status)
        _setter("gmt_create", gmt_create)
        _setter("slb_id", slb_id)
        _setter("slb_ip", slb_ip)
        _setter("slb_port", slb_port)
        _setter("type", type)

    @property
    @pulumi.getter(name="associateId")
    def associate_id(self) -> str:
        """
        The associate id.
        """
        return pulumi.get(self, "associate_id")

    @property
    @pulumi.getter(name="gatewaySlbMode")
    def gateway_slb_mode(self) -> str:
        """
        The Mode of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_mode")

    @property
    @pulumi.getter(name="gatewaySlbStatus")
    def gateway_slb_status(self) -> str:
        """
        The Status of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_status")

    @property
    @pulumi.getter(name="gmtCreate")
    def gmt_create(self) -> str:
        """
        The creation time of the gateway slb.
        """
        return pulumi.get(self, "gmt_create")

    @property
    @pulumi.getter(name="slbId")
    def slb_id(self) -> str:
        """
        The ID of the gateway slb.
        """
        return pulumi.get(self, "slb_id")

    @property
    @pulumi.getter(name="slbIp")
    def slb_ip(self) -> str:
        """
        The ip of the gateway slb.
        """
        return pulumi.get(self, "slb_ip")

    @property
    @pulumi.getter(name="slbPort")
    def slb_port(self) -> str:
        """
        The port of the gateway slb.
        """
        return pulumi.get(self, "slb_port")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the gateway slb.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZnodesZnodeResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 data: str,
                 dir: bool,
                 id: str,
                 path: str,
                 znode_name: str):
        """
        :param str cluster_id: The ID of the Cluster.
        :param str data: The Node data.
        :param bool dir: Node list information, the value is as follows:
        :param str id: The ID of the Znode. The value formats as `<cluster_id>:<path>`.
        :param str path: The Node path.
        :param str znode_name: The Node name.
        """
        GetZnodesZnodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            data=data,
            dir=dir,
            id=id,
            path=path,
            znode_name=znode_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: str,
             data: str,
             dir: bool,
             id: str,
             path: str,
             znode_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'znodeName' in kwargs:
            znode_name = kwargs['znodeName']

        _setter("cluster_id", cluster_id)
        _setter("data", data)
        _setter("dir", dir)
        _setter("id", id)
        _setter("path", path)
        _setter("znode_name", znode_name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ID of the Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The Node data.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def dir(self) -> bool:
        """
        Node list information, the value is as follows:
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Znode. The value formats as `<cluster_id>:<path>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The Node path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="znodeName")
    def znode_name(self) -> str:
        """
        The Node name.
        """
        return pulumi.get(self, "znode_name")


