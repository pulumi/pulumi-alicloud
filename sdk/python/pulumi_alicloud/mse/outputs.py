# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GatewaySlbList',
    'GetClustersClusterResult',
    'GetClustersClusterInstanceModelResult',
    'GetEngineNamespacesNamespaceResult',
    'GetGatewaysGatewayResult',
    'GetGatewaysGatewaySlbListResult',
    'GetNacosConfigsConfigResult',
    'GetZnodesZnodeResult',
]

@pulumi.output_type
class GatewaySlbList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associateId":
            suggest = "associate_id"
        elif key == "gatewaySlbMode":
            suggest = "gateway_slb_mode"
        elif key == "gatewaySlbStatus":
            suggest = "gateway_slb_status"
        elif key == "gmtCreate":
            suggest = "gmt_create"
        elif key == "slbId":
            suggest = "slb_id"
        elif key == "slbIp":
            suggest = "slb_ip"
        elif key == "slbPort":
            suggest = "slb_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaySlbList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaySlbList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaySlbList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 associate_id: Optional[_builtins.str] = None,
                 gateway_slb_mode: Optional[_builtins.str] = None,
                 gateway_slb_status: Optional[_builtins.str] = None,
                 gmt_create: Optional[_builtins.str] = None,
                 slb_id: Optional[_builtins.str] = None,
                 slb_ip: Optional[_builtins.str] = None,
                 slb_port: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str associate_id: The associate id.
        :param _builtins.str gateway_slb_mode: The Mode of the gateway slb.
        :param _builtins.str gateway_slb_status: The Status of the gateway slb.
        :param _builtins.str gmt_create: The creation time of the gateway slb.
        :param _builtins.str slb_id: The ID of the gateway slb.
        :param _builtins.str slb_ip: The ip of the gateway slb.
        :param _builtins.str slb_port: The port of the gateway slb.
        :param _builtins.str type: The type of the gateway slb.
        """
        if associate_id is not None:
            pulumi.set(__self__, "associate_id", associate_id)
        if gateway_slb_mode is not None:
            pulumi.set(__self__, "gateway_slb_mode", gateway_slb_mode)
        if gateway_slb_status is not None:
            pulumi.set(__self__, "gateway_slb_status", gateway_slb_status)
        if gmt_create is not None:
            pulumi.set(__self__, "gmt_create", gmt_create)
        if slb_id is not None:
            pulumi.set(__self__, "slb_id", slb_id)
        if slb_ip is not None:
            pulumi.set(__self__, "slb_ip", slb_ip)
        if slb_port is not None:
            pulumi.set(__self__, "slb_port", slb_port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associateId")
    def associate_id(self) -> Optional[_builtins.str]:
        """
        The associate id.
        """
        return pulumi.get(self, "associate_id")

    @_builtins.property
    @pulumi.getter(name="gatewaySlbMode")
    def gateway_slb_mode(self) -> Optional[_builtins.str]:
        """
        The Mode of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_mode")

    @_builtins.property
    @pulumi.getter(name="gatewaySlbStatus")
    def gateway_slb_status(self) -> Optional[_builtins.str]:
        """
        The Status of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_status")

    @_builtins.property
    @pulumi.getter(name="gmtCreate")
    def gmt_create(self) -> Optional[_builtins.str]:
        """
        The creation time of the gateway slb.
        """
        return pulumi.get(self, "gmt_create")

    @_builtins.property
    @pulumi.getter(name="slbId")
    def slb_id(self) -> Optional[_builtins.str]:
        """
        The ID of the gateway slb.
        """
        return pulumi.get(self, "slb_id")

    @_builtins.property
    @pulumi.getter(name="slbIp")
    def slb_ip(self) -> Optional[_builtins.str]:
        """
        The ip of the gateway slb.
        """
        return pulumi.get(self, "slb_ip")

    @_builtins.property
    @pulumi.getter(name="slbPort")
    def slb_port(self) -> Optional[_builtins.str]:
        """
        The port of the gateway slb.
        """
        return pulumi.get(self, "slb_port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the gateway slb.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 acl_id: _builtins.str,
                 app_version: _builtins.str,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 cluster_type: _builtins.str,
                 cpu: _builtins.int,
                 health_status: _builtins.str,
                 id: _builtins.str,
                 init_cost_time: _builtins.int,
                 instance_count: _builtins.int,
                 instance_id: _builtins.str,
                 instance_models: Sequence['outputs.GetClustersClusterInstanceModelResult'],
                 internet_address: _builtins.str,
                 internet_domain: _builtins.str,
                 internet_port: _builtins.str,
                 intranet_address: _builtins.str,
                 intranet_domain: _builtins.str,
                 intranet_port: _builtins.str,
                 memory_capacity: _builtins.int,
                 pay_info: _builtins.str,
                 pub_network_flow: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str acl_id: The id of acl.
        :param _builtins.str app_version: The version of app.
        :param _builtins.str cluster_id: ID of the MSE Cluster.
        :param _builtins.str cluster_name: ID of the OOS Executions.
        :param _builtins.str cluster_type: The type of MSE Cluster.
        :param _builtins.int cpu: The num of cpu.
        :param _builtins.str health_status: The health status of the instance.
        :param _builtins.str id: ID of the MSE Cluster.
        :param _builtins.int init_cost_time: Time-consuming to create.
        :param _builtins.int instance_count: The count of instance.
        :param _builtins.str instance_id: ID of the MSE Cluster.
        :param Sequence['GetClustersClusterInstanceModelArgs'] instance_models: The list of instance nodes.
        :param _builtins.str internet_address: The address of public network.
        :param _builtins.str internet_domain: The domain of public network.
        :param _builtins.str internet_port: The port of public network.
        :param _builtins.str intranet_address: The address of private network.
        :param _builtins.str intranet_domain: The domain of private network.
        :param _builtins.str intranet_port: The port of private network.
        :param _builtins.int memory_capacity: The memory size.
        :param _builtins.str pay_info: The type of payment.
        :param _builtins.str pub_network_flow: The public network bandwidth.
        :param _builtins.str status: The status of MSE Cluster. Valid: `DESTROY_FAILED`, `DESTROY_ING`, `DESTROY_SUCCESS`, `INIT_FAILED`, `INIT_ING`, `INIT_SUCCESS`, `INIT_TIME_OUT`, `RESTART_FAILED`, `RESTART_ING`, `RESTART_SUCCESS`, `SCALE_FAILED`, `SCALE_ING`, `SCALE_SUCCESS`
        """
        pulumi.set(__self__, "acl_id", acl_id)
        pulumi.set(__self__, "app_version", app_version)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "init_cost_time", init_cost_time)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_models", instance_models)
        pulumi.set(__self__, "internet_address", internet_address)
        pulumi.set(__self__, "internet_domain", internet_domain)
        pulumi.set(__self__, "internet_port", internet_port)
        pulumi.set(__self__, "intranet_address", intranet_address)
        pulumi.set(__self__, "intranet_domain", intranet_domain)
        pulumi.set(__self__, "intranet_port", intranet_port)
        pulumi.set(__self__, "memory_capacity", memory_capacity)
        pulumi.set(__self__, "pay_info", pay_info)
        pulumi.set(__self__, "pub_network_flow", pub_network_flow)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> _builtins.str:
        """
        The id of acl.
        """
        return pulumi.get(self, "acl_id")

    @_builtins.property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> _builtins.str:
        """
        The version of app.
        """
        return pulumi.get(self, "app_version")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        ID of the OOS Executions.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The type of MSE Cluster.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.int:
        """
        The num of cpu.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> _builtins.str:
        """
        The health status of the instance.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="initCostTime")
    def init_cost_time(self) -> _builtins.int:
        """
        Time-consuming to create.
        """
        return pulumi.get(self, "init_cost_time")

    @_builtins.property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> _builtins.int:
        """
        The count of instance.
        """
        return pulumi.get(self, "instance_count")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        ID of the MSE Cluster.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceModels")
    def instance_models(self) -> Sequence['outputs.GetClustersClusterInstanceModelResult']:
        """
        The list of instance nodes.
        """
        return pulumi.get(self, "instance_models")

    @_builtins.property
    @pulumi.getter(name="internetAddress")
    def internet_address(self) -> _builtins.str:
        """
        The address of public network.
        """
        return pulumi.get(self, "internet_address")

    @_builtins.property
    @pulumi.getter(name="internetDomain")
    def internet_domain(self) -> _builtins.str:
        """
        The domain of public network.
        """
        return pulumi.get(self, "internet_domain")

    @_builtins.property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> _builtins.str:
        """
        The port of public network.
        """
        return pulumi.get(self, "internet_port")

    @_builtins.property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> _builtins.str:
        """
        The address of private network.
        """
        return pulumi.get(self, "intranet_address")

    @_builtins.property
    @pulumi.getter(name="intranetDomain")
    def intranet_domain(self) -> _builtins.str:
        """
        The domain of private network.
        """
        return pulumi.get(self, "intranet_domain")

    @_builtins.property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> _builtins.str:
        """
        The port of private network.
        """
        return pulumi.get(self, "intranet_port")

    @_builtins.property
    @pulumi.getter(name="memoryCapacity")
    def memory_capacity(self) -> _builtins.int:
        """
        The memory size.
        """
        return pulumi.get(self, "memory_capacity")

    @_builtins.property
    @pulumi.getter(name="payInfo")
    def pay_info(self) -> _builtins.str:
        """
        The type of payment.
        """
        return pulumi.get(self, "pay_info")

    @_builtins.property
    @pulumi.getter(name="pubNetworkFlow")
    def pub_network_flow(self) -> _builtins.str:
        """
        The public network bandwidth.
        """
        return pulumi.get(self, "pub_network_flow")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of MSE Cluster. Valid: `DESTROY_FAILED`, `DESTROY_ING`, `DESTROY_SUCCESS`, `INIT_FAILED`, `INIT_ING`, `INIT_SUCCESS`, `INIT_TIME_OUT`, `RESTART_FAILED`, `RESTART_ING`, `RESTART_SUCCESS`, `SCALE_FAILED`, `SCALE_ING`, `SCALE_SUCCESS`
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClustersClusterInstanceModelResult(dict):
    def __init__(__self__, *,
                 health_status: _builtins.str,
                 instance_type: _builtins.str,
                 internet_ip: _builtins.str,
                 ip: _builtins.str,
                 pod_name: _builtins.str,
                 role: _builtins.str,
                 single_tunnel_vip: _builtins.str,
                 vip: _builtins.str):
        """
        :param _builtins.str health_status: The health status of the instance.
        :param _builtins.str instance_type: (Deprecated from version 1.232.0)
        :param _builtins.str internet_ip: The public IP address.
        :param _builtins.str ip: The IP address of the instance.
        :param _builtins.str pod_name: The name of the pod.
        :param _builtins.str role: The role.
        :param _builtins.str single_tunnel_vip: The single-thread IP address.
        :param _builtins.str vip: (Deprecated from version 1.232.0)
        """
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "internet_ip", internet_ip)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "pod_name", pod_name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "single_tunnel_vip", single_tunnel_vip)
        pulumi.set(__self__, "vip", vip)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> _builtins.str:
        """
        The health status of the instance.
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        (Deprecated from version 1.232.0)
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter(name="internetIp")
    def internet_ip(self) -> _builtins.str:
        """
        The public IP address.
        """
        return pulumi.get(self, "internet_ip")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        The IP address of the instance.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="podName")
    def pod_name(self) -> _builtins.str:
        """
        The name of the pod.
        """
        return pulumi.get(self, "pod_name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        The role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="singleTunnelVip")
    def single_tunnel_vip(self) -> _builtins.str:
        """
        The single-thread IP address.
        """
        return pulumi.get(self, "single_tunnel_vip")

    @_builtins.property
    @pulumi.getter
    def vip(self) -> _builtins.str:
        """
        (Deprecated from version 1.232.0)
        """
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetEngineNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 config_count: _builtins.int,
                 id: _builtins.str,
                 namespace_desc: _builtins.str,
                 namespace_id: _builtins.str,
                 namespace_show_name: _builtins.str,
                 quota: _builtins.int,
                 service_count: _builtins.str,
                 type: _builtins.int):
        """
        :param _builtins.int config_count: The Number of Configuration of the Namespace.
        :param _builtins.str id: The ID of the Engine Namespace. It is formatted to `<instance_id>:<namespace_id>`.
        :param _builtins.str namespace_desc: The description of the Namespace.
        :param _builtins.str namespace_id: The id of Namespace.
        :param _builtins.str namespace_show_name: The name of the Namespace.
        :param _builtins.int quota: The Quota of the Namespace.
        :param _builtins.str service_count: The number of active services.
        :param _builtins.int type: The type of the Namespace, the value is as follows:
               - '0': Global Configuration.
               - '1': default namespace.
               - '2': Custom Namespace.
        """
        pulumi.set(__self__, "config_count", config_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "namespace_desc", namespace_desc)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "namespace_show_name", namespace_show_name)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "service_count", service_count)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="configCount")
    def config_count(self) -> _builtins.int:
        """
        The Number of Configuration of the Namespace.
        """
        return pulumi.get(self, "config_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Engine Namespace. It is formatted to `<instance_id>:<namespace_id>`.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="namespaceDesc")
    def namespace_desc(self) -> _builtins.str:
        """
        The description of the Namespace.
        """
        return pulumi.get(self, "namespace_desc")

    @_builtins.property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> _builtins.str:
        """
        The id of Namespace.
        """
        return pulumi.get(self, "namespace_id")

    @_builtins.property
    @pulumi.getter(name="namespaceShowName")
    def namespace_show_name(self) -> _builtins.str:
        """
        The name of the Namespace.
        """
        return pulumi.get(self, "namespace_show_name")

    @_builtins.property
    @pulumi.getter
    def quota(self) -> _builtins.int:
        """
        The Quota of the Namespace.
        """
        return pulumi.get(self, "quota")

    @_builtins.property
    @pulumi.getter(name="serviceCount")
    def service_count(self) -> _builtins.str:
        """
        The number of active services.
        """
        return pulumi.get(self, "service_count")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The type of the Namespace, the value is as follows:
        - '0': Global Configuration.
        - '1': default namespace.
        - '2': Custom Namespace.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 backup_vswitch_id: _builtins.str,
                 gateway_name: _builtins.str,
                 gateway_unique_id: _builtins.str,
                 id: _builtins.str,
                 payment_type: _builtins.str,
                 replica: _builtins.str,
                 slb_lists: Sequence['outputs.GetGatewaysGatewaySlbListResult'],
                 spec: _builtins.str,
                 status: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_id: _builtins.str):
        """
        :param _builtins.str backup_vswitch_id: The backup vswitch id.
        :param _builtins.str gateway_name: The name of the Gateway.
        :param _builtins.str gateway_unique_id: Gateway unique identification.
        :param _builtins.str id: The ID of the Gateway.
        :param _builtins.str payment_type: The payment type of the resource.
        :param _builtins.str replica: Number of Gateway Nodes.
        :param Sequence['GetGatewaysGatewaySlbListArgs'] slb_lists: A list of gateway Slb.
        :param _builtins.str spec: Gateway Node Specifications.
        :param _builtins.str status: The status of the gateway.
        :param _builtins.str vpc_id: The ID of the vpc.
        :param _builtins.str vswitch_id: The ID of the vswitch.
        """
        pulumi.set(__self__, "backup_vswitch_id", backup_vswitch_id)
        pulumi.set(__self__, "gateway_name", gateway_name)
        pulumi.set(__self__, "gateway_unique_id", gateway_unique_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "slb_lists", slb_lists)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter(name="backupVswitchId")
    def backup_vswitch_id(self) -> _builtins.str:
        """
        The backup vswitch id.
        """
        return pulumi.get(self, "backup_vswitch_id")

    @_builtins.property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> _builtins.str:
        """
        The name of the Gateway.
        """
        return pulumi.get(self, "gateway_name")

    @_builtins.property
    @pulumi.getter(name="gatewayUniqueId")
    def gateway_unique_id(self) -> _builtins.str:
        """
        Gateway unique identification.
        """
        return pulumi.get(self, "gateway_unique_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> _builtins.str:
        """
        The payment type of the resource.
        """
        return pulumi.get(self, "payment_type")

    @_builtins.property
    @pulumi.getter
    def replica(self) -> _builtins.str:
        """
        Number of Gateway Nodes.
        """
        return pulumi.get(self, "replica")

    @_builtins.property
    @pulumi.getter(name="slbLists")
    def slb_lists(self) -> Sequence['outputs.GetGatewaysGatewaySlbListResult']:
        """
        A list of gateway Slb.
        """
        return pulumi.get(self, "slb_lists")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> _builtins.str:
        """
        Gateway Node Specifications.
        """
        return pulumi.get(self, "spec")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        The ID of the vswitch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetGatewaysGatewaySlbListResult(dict):
    def __init__(__self__, *,
                 associate_id: _builtins.str,
                 gateway_slb_mode: _builtins.str,
                 gateway_slb_status: _builtins.str,
                 gmt_create: _builtins.str,
                 slb_id: _builtins.str,
                 slb_ip: _builtins.str,
                 slb_port: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str associate_id: The associate id.
        :param _builtins.str gateway_slb_mode: The Mode of the gateway slb.
        :param _builtins.str gateway_slb_status: The Status of the gateway slb.
        :param _builtins.str gmt_create: The creation time of the gateway slb.
        :param _builtins.str slb_id: The ID of the gateway slb.
        :param _builtins.str slb_ip: The ip of the gateway slb.
        :param _builtins.str slb_port: The port of the gateway slb.
        :param _builtins.str type: The type of the gateway slb.
        """
        pulumi.set(__self__, "associate_id", associate_id)
        pulumi.set(__self__, "gateway_slb_mode", gateway_slb_mode)
        pulumi.set(__self__, "gateway_slb_status", gateway_slb_status)
        pulumi.set(__self__, "gmt_create", gmt_create)
        pulumi.set(__self__, "slb_id", slb_id)
        pulumi.set(__self__, "slb_ip", slb_ip)
        pulumi.set(__self__, "slb_port", slb_port)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associateId")
    def associate_id(self) -> _builtins.str:
        """
        The associate id.
        """
        return pulumi.get(self, "associate_id")

    @_builtins.property
    @pulumi.getter(name="gatewaySlbMode")
    def gateway_slb_mode(self) -> _builtins.str:
        """
        The Mode of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_mode")

    @_builtins.property
    @pulumi.getter(name="gatewaySlbStatus")
    def gateway_slb_status(self) -> _builtins.str:
        """
        The Status of the gateway slb.
        """
        return pulumi.get(self, "gateway_slb_status")

    @_builtins.property
    @pulumi.getter(name="gmtCreate")
    def gmt_create(self) -> _builtins.str:
        """
        The creation time of the gateway slb.
        """
        return pulumi.get(self, "gmt_create")

    @_builtins.property
    @pulumi.getter(name="slbId")
    def slb_id(self) -> _builtins.str:
        """
        The ID of the gateway slb.
        """
        return pulumi.get(self, "slb_id")

    @_builtins.property
    @pulumi.getter(name="slbIp")
    def slb_ip(self) -> _builtins.str:
        """
        The ip of the gateway slb.
        """
        return pulumi.get(self, "slb_ip")

    @_builtins.property
    @pulumi.getter(name="slbPort")
    def slb_port(self) -> _builtins.str:
        """
        The port of the gateway slb.
        """
        return pulumi.get(self, "slb_port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the gateway slb.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNacosConfigsConfigResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 beta_ips: _builtins.str,
                 content: _builtins.str,
                 data_id: _builtins.str,
                 desc: _builtins.str,
                 encrypted_data_key: _builtins.str,
                 group: _builtins.str,
                 id: _builtins.str,
                 md5: _builtins.str,
                 tags: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str app_name: The name of the application.
        :param _builtins.str beta_ips: The list of IP addresses where the beta release of the configuration is performed.
        :param _builtins.str content: The content of the configuration.
        :param _builtins.str data_id: The ID of the data.
        :param _builtins.str desc: The description of the configuration.
        :param _builtins.str encrypted_data_key: The encryption key.
        :param _builtins.str group: The ID of the group.
        :param _builtins.str id: The ID of the Nacos Config. It is formatted to `<instance_id>:<namespace_id>:<data_id>:<group>`.
        :param _builtins.str md5: The message digest of the configuration.
        :param _builtins.str tags: The tags of the configuration.
        :param _builtins.str type: The format of the configuration. Supported formats include TEXT, JSON, and XML.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "beta_ips", beta_ips)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "data_id", data_id)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "encrypted_data_key", encrypted_data_key)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="betaIps")
    def beta_ips(self) -> _builtins.str:
        """
        The list of IP addresses where the beta release of the configuration is performed.
        """
        return pulumi.get(self, "beta_ips")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The content of the configuration.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="dataId")
    def data_id(self) -> _builtins.str:
        """
        The ID of the data.
        """
        return pulumi.get(self, "data_id")

    @_builtins.property
    @pulumi.getter
    def desc(self) -> _builtins.str:
        """
        The description of the configuration.
        """
        return pulumi.get(self, "desc")

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> _builtins.str:
        """
        The encryption key.
        """
        return pulumi.get(self, "encrypted_data_key")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        The ID of the group.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Nacos Config. It is formatted to `<instance_id>:<namespace_id>:<data_id>:<group>`.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def md5(self) -> _builtins.str:
        """
        The message digest of the configuration.
        """
        return pulumi.get(self, "md5")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        """
        The tags of the configuration.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The format of the configuration. Supported formats include TEXT, JSON, and XML.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZnodesZnodeResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 data: _builtins.str,
                 dir: _builtins.bool,
                 id: _builtins.str,
                 path: _builtins.str,
                 znode_name: _builtins.str):
        """
        :param _builtins.str cluster_id: The ID of the Cluster.
        :param _builtins.str data: The Node data.
        :param _builtins.bool dir: Node list information, the value is as follows:
        :param _builtins.str id: The ID of the Znode. The value formats as `<cluster_id>:<path>`.
        :param _builtins.str path: The Node path.
        :param _builtins.str znode_name: The Node name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "znode_name", znode_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The ID of the Cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        """
        The Node data.
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def dir(self) -> _builtins.bool:
        """
        Node list information, the value is as follows:
        """
        return pulumi.get(self, "dir")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Znode. The value formats as `<cluster_id>:<path>`.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The Node path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="znodeName")
    def znode_name(self) -> _builtins.str:
        """
        The Node name.
        """
        return pulumi.get(self, "znode_name")


