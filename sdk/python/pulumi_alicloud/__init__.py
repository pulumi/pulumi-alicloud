# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .get_account import *
from .get_caller_identity import *
from .get_file_crc64_checksum import *
from .get_regions import *
from .get_zones import *
from .provider import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    actiontrail,
    adb,
    alikafka,
    apigateway,
    brain,
    cas,
    cassandra,
    cdn,
    cen,
    cfg,
    cloudconnect,
    cloudstoragegateway,
    cms,
    config,
    cr,
    cs,
    datahub,
    dataworks,
    dcdn,
    ddos,
    dds,
    dms,
    dns,
    drds,
    eci,
    ecs,
    edas,
    eipanycast,
    elasticsearch,
    emr,
    ess,
    fc,
    fnf,
    ga,
    gpdb,
    hbase,
    iot,
    kms,
    kvstore,
    log,
    marketplace,
    maxcompute,
    mns,
    mongodb,
    mse,
    nas,
    oos,
    oss,
    ots,
    polardb,
    privatelink,
    pvtz,
    quotas,
    ram,
    rds,
    resourcemanager,
    rocketmq,
    ros,
    sae,
    sag,
    slb,
    tsdb,
    videosurveillance,
    vpc,
    vpn,
    waf,
    yundun,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:alicloud":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("alicloud", Package())

_register_module()
