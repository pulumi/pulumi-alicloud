# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CustomPropertyPropertyValue',
    'EcdPolicyGroupAuthorizeAccessPolicyRule',
    'EcdPolicyGroupAuthorizeSecurityPolicyRule',
    'GetAdConnectorDirectoriesDirectoryResult',
    'GetAdConnectorDirectoriesDirectoryAdConnectorResult',
    'GetAdConnectorOfficeSitesSiteResult',
    'GetAdConnectorOfficeSitesSiteAdConnectorResult',
    'GetAdConnectorOfficeSitesSiteLogResult',
    'GetBundlesBundleResult',
    'GetBundlesBundleDesktopTypeAttributeResult',
    'GetBundlesBundleDiskResult',
    'GetCommandsCommandResult',
    'GetCommandsCommandInvokeDesktopResult',
    'GetCustomPropertiesPropertyResult',
    'GetCustomPropertiesPropertyPropertyValueResult',
    'GetDesktopTypesTypeResult',
    'GetDesktopsDesktopResult',
    'GetImagesImageResult',
    'GetNasFileSystemsSystemResult',
    'GetNetworkPackagesPackageResult',
    'GetPolicyGroupsGroupResult',
    'GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult',
    'GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult',
    'GetRamDirectoriesDirectoryResult',
    'GetRamDirectoriesDirectoryAdConnectorResult',
    'GetRamDirectoriesDirectoryLogResult',
    'GetSimpleOfficeSitesSiteResult',
    'GetSnapshotsSnapshotResult',
    'GetUsersUserResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class CustomPropertyPropertyValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyValue":
            suggest = "property_value"
        elif key == "propertyValueId":
            suggest = "property_value_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomPropertyPropertyValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomPropertyPropertyValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomPropertyPropertyValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_value: Optional[_builtins.str] = None,
                 property_value_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str property_value: The value of an attribute.
        :param _builtins.str property_value_id: The value of an attribute id.
        """
        if property_value is not None:
            pulumi.set(__self__, "property_value", property_value)
        if property_value_id is not None:
            pulumi.set(__self__, "property_value_id", property_value_id)

    @_builtins.property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> Optional[_builtins.str]:
        """
        The value of an attribute.
        """
        return pulumi.get(self, "property_value")

    @_builtins.property
    @pulumi.getter(name="propertyValueId")
    def property_value_id(self) -> Optional[_builtins.str]:
        """
        The value of an attribute id.
        """
        return pulumi.get(self, "property_value_id")


@pulumi.output_type
class EcdPolicyGroupAuthorizeAccessPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrIp":
            suggest = "cidr_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EcdPolicyGroupAuthorizeAccessPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EcdPolicyGroupAuthorizeAccessPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EcdPolicyGroupAuthorizeAccessPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_ip: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str cidr_ip: The cidrip of authorize access rule.
        :param _builtins.str description: The description of authorize access rule.
        """
        if cidr_ip is not None:
            pulumi.set(__self__, "cidr_ip", cidr_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> Optional[_builtins.str]:
        """
        The cidrip of authorize access rule.
        """
        return pulumi.get(self, "cidr_ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of authorize access rule.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class EcdPolicyGroupAuthorizeSecurityPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrIp":
            suggest = "cidr_ip"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EcdPolicyGroupAuthorizeSecurityPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EcdPolicyGroupAuthorizeSecurityPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EcdPolicyGroupAuthorizeSecurityPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_ip: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 ip_protocol: Optional[_builtins.str] = None,
                 policy: Optional[_builtins.str] = None,
                 port_range: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str cidr_ip: The cidrip of security rules.
        :param _builtins.str description: The description of security rules.
        :param _builtins.str ip_protocol: The ip protocol of security rules.
        :param _builtins.str policy: The policy of security rules.
        :param _builtins.str port_range: The port range of security rules.
        :param _builtins.str priority: The priority of security rules.
        :param _builtins.str type: The type of security rules.
        """
        if cidr_ip is not None:
            pulumi.set(__self__, "cidr_ip", cidr_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> Optional[_builtins.str]:
        """
        The cidrip of security rules.
        """
        return pulumi.get(self, "cidr_ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of security rules.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[_builtins.str]:
        """
        The ip protocol of security rules.
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[_builtins.str]:
        """
        The policy of security rules.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[_builtins.str]:
        """
        The port range of security rules.
        """
        return pulumi.get(self, "port_range")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        The priority of security rules.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of security rules.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAdConnectorDirectoriesDirectoryResult(dict):
    def __init__(__self__, *,
                 ad_connector_directory_id: _builtins.str,
                 ad_connectors: Sequence['outputs.GetAdConnectorDirectoriesDirectoryAdConnectorResult'],
                 create_time: _builtins.str,
                 custom_security_group_id: _builtins.str,
                 directory_name: _builtins.str,
                 directory_type: _builtins.str,
                 dns_addresses: Sequence[_builtins.str],
                 dns_user_name: _builtins.str,
                 domain_name: _builtins.str,
                 domain_user_name: _builtins.str,
                 enable_admin_access: _builtins.bool,
                 id: _builtins.str,
                 mfa_enabled: _builtins.bool,
                 status: _builtins.str,
                 sub_dns_addresses: Sequence[_builtins.str],
                 sub_domain_name: _builtins.str,
                 trust_password: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str ad_connector_directory_id: The ID of the ad connector directory.
        :param Sequence['GetAdConnectorDirectoriesDirectoryAdConnectorArgs'] ad_connectors: The AD connectors.
        :param _builtins.str create_time: The CreateTime of resource.
        :param _builtins.str custom_security_group_id: The ID of the security group.
        :param _builtins.str directory_name: The name of directory.
        :param _builtins.str directory_type: The name of the domain.
        :param Sequence[_builtins.str] dns_addresses: The address of DNSAddress.
        :param _builtins.str dns_user_name: The username of DNS.
        :param _builtins.str domain_name: The name of the domain.
        :param _builtins.str domain_user_name: domain admin user name.
        :param _builtins.bool enable_admin_access: Whether to grant local administrator rights to users who use cloud desktops.
        :param _builtins.str id: The ID of the Ad Connector Directory.
        :param _builtins.bool mfa_enabled: Whether MFA authentication is enabled. After all AD users in this directory log on to the cloud desktop, enter the correct password and then enter the dynamic verification code generated by the MFA device.
        :param _builtins.str status: The status of directory.
        :param Sequence[_builtins.str] sub_dns_addresses: The Enterprise already has the DNS address of the AD subdomain.
        :param _builtins.str sub_domain_name: The Enterprise already has a fully qualified domain name (FQDN) of an AD subdomain, with both a host name and a domain name.
        :param _builtins.str trust_password: The trust password.
        :param _builtins.str vpc_id: The ID of the vpc.
        :param Sequence[_builtins.str] vswitch_ids: List of vSwitch IDs in the directory.
        """
        pulumi.set(__self__, "ad_connector_directory_id", ad_connector_directory_id)
        pulumi.set(__self__, "ad_connectors", ad_connectors)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_security_group_id", custom_security_group_id)
        pulumi.set(__self__, "directory_name", directory_name)
        pulumi.set(__self__, "directory_type", directory_type)
        pulumi.set(__self__, "dns_addresses", dns_addresses)
        pulumi.set(__self__, "dns_user_name", dns_user_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_user_name", domain_user_name)
        pulumi.set(__self__, "enable_admin_access", enable_admin_access)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_dns_addresses", sub_dns_addresses)
        pulumi.set(__self__, "sub_domain_name", sub_domain_name)
        pulumi.set(__self__, "trust_password", trust_password)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_ids", vswitch_ids)

    @_builtins.property
    @pulumi.getter(name="adConnectorDirectoryId")
    def ad_connector_directory_id(self) -> _builtins.str:
        """
        The ID of the ad connector directory.
        """
        return pulumi.get(self, "ad_connector_directory_id")

    @_builtins.property
    @pulumi.getter(name="adConnectors")
    def ad_connectors(self) -> Sequence['outputs.GetAdConnectorDirectoriesDirectoryAdConnectorResult']:
        """
        The AD connectors.
        """
        return pulumi.get(self, "ad_connectors")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The CreateTime of resource.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customSecurityGroupId")
    def custom_security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "custom_security_group_id")

    @_builtins.property
    @pulumi.getter(name="directoryName")
    def directory_name(self) -> _builtins.str:
        """
        The name of directory.
        """
        return pulumi.get(self, "directory_name")

    @_builtins.property
    @pulumi.getter(name="directoryType")
    def directory_type(self) -> _builtins.str:
        """
        The name of the domain.
        """
        return pulumi.get(self, "directory_type")

    @_builtins.property
    @pulumi.getter(name="dnsAddresses")
    def dns_addresses(self) -> Sequence[_builtins.str]:
        """
        The address of DNSAddress.
        """
        return pulumi.get(self, "dns_addresses")

    @_builtins.property
    @pulumi.getter(name="dnsUserName")
    def dns_user_name(self) -> _builtins.str:
        """
        The username of DNS.
        """
        return pulumi.get(self, "dns_user_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The name of the domain.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> _builtins.str:
        """
        domain admin user name.
        """
        return pulumi.get(self, "domain_user_name")

    @_builtins.property
    @pulumi.getter(name="enableAdminAccess")
    def enable_admin_access(self) -> _builtins.bool:
        """
        Whether to grant local administrator rights to users who use cloud desktops.
        """
        return pulumi.get(self, "enable_admin_access")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Ad Connector Directory.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> _builtins.bool:
        """
        Whether MFA authentication is enabled. After all AD users in this directory log on to the cloud desktop, enter the correct password and then enter the dynamic verification code generated by the MFA device.
        """
        return pulumi.get(self, "mfa_enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of directory.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subDnsAddresses")
    def sub_dns_addresses(self) -> Sequence[_builtins.str]:
        """
        The Enterprise already has the DNS address of the AD subdomain.
        """
        return pulumi.get(self, "sub_dns_addresses")

    @_builtins.property
    @pulumi.getter(name="subDomainName")
    def sub_domain_name(self) -> _builtins.str:
        """
        The Enterprise already has a fully qualified domain name (FQDN) of an AD subdomain, with both a host name and a domain name.
        """
        return pulumi.get(self, "sub_domain_name")

    @_builtins.property
    @pulumi.getter(name="trustPassword")
    def trust_password(self) -> _builtins.str:
        """
        The trust password.
        """
        return pulumi.get(self, "trust_password")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Sequence[_builtins.str]:
        """
        List of vSwitch IDs in the directory.
        """
        return pulumi.get(self, "vswitch_ids")


@pulumi.output_type
class GetAdConnectorDirectoriesDirectoryAdConnectorResult(dict):
    def __init__(__self__, *,
                 ad_connector_address: _builtins.str,
                 connector_status: _builtins.str,
                 network_interface_id: _builtins.str,
                 specification: _builtins.str,
                 trust_key: _builtins.str,
                 vswitch_id: _builtins.str):
        """
        :param _builtins.str ad_connector_address: The address of AD connector.
        :param _builtins.str connector_status: The status of connector.
        :param _builtins.str network_interface_id: The ID of the network interface.
        :param _builtins.str specification: The AD Connector specifications.
        :param _builtins.str trust_key: The AD Connector control trust password.
        :param _builtins.str vswitch_id: The ID of vSwitch.
        """
        pulumi.set(__self__, "ad_connector_address", ad_connector_address)
        pulumi.set(__self__, "connector_status", connector_status)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "trust_key", trust_key)
        pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter(name="adConnectorAddress")
    def ad_connector_address(self) -> _builtins.str:
        """
        The address of AD connector.
        """
        return pulumi.get(self, "ad_connector_address")

    @_builtins.property
    @pulumi.getter(name="connectorStatus")
    def connector_status(self) -> _builtins.str:
        """
        The status of connector.
        """
        return pulumi.get(self, "connector_status")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        """
        The ID of the network interface.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> _builtins.str:
        """
        The AD Connector specifications.
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter(name="trustKey")
    def trust_key(self) -> _builtins.str:
        """
        The AD Connector control trust password.
        """
        return pulumi.get(self, "trust_key")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        The ID of vSwitch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetAdConnectorOfficeSitesSiteResult(dict):
    def __init__(__self__, *,
                 ad_connector_office_site_name: _builtins.str,
                 ad_connectors: Sequence['outputs.GetAdConnectorOfficeSitesSiteAdConnectorResult'],
                 bandwidth: _builtins.int,
                 cen_id: _builtins.str,
                 cidr_block: _builtins.str,
                 create_time: _builtins.str,
                 custom_security_group_id: _builtins.str,
                 desktop_access_type: _builtins.str,
                 desktop_vpc_endpoint: _builtins.str,
                 dns_addresses: Sequence[_builtins.str],
                 dns_user_name: _builtins.str,
                 domain_name: _builtins.str,
                 domain_user_name: _builtins.str,
                 enable_admin_access: _builtins.bool,
                 enable_cross_desktop_access: _builtins.bool,
                 enable_internet_access: _builtins.bool,
                 file_system_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 logs: Sequence['outputs.GetAdConnectorOfficeSitesSiteLogResult'],
                 mfa_enabled: _builtins.bool,
                 network_package_id: _builtins.str,
                 office_site_id: _builtins.str,
                 office_site_type: _builtins.str,
                 sso_enabled: _builtins.bool,
                 status: _builtins.str,
                 sub_domain_dns_addresses: Sequence[_builtins.str],
                 sub_domain_name: _builtins.str,
                 trust_password: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str ad_connector_office_site_name: The Name of the ad connector office site.
        :param Sequence['GetAdConnectorOfficeSitesSiteAdConnectorArgs'] ad_connectors: AD Connector Collection of Information.
        :param _builtins.int bandwidth: The Internet Bandwidth Peak. Possible Values: 0~200. If This Field Is Set to 0, Indicates That There Is No Open Internet Access.
        :param _builtins.str cen_id: Cloud Enterprise Network Instance Id.
        :param _builtins.str cidr_block: Workspace Corresponds to the Security Office Network of IPv4 Segment.
        :param _builtins.str create_time: Workspace Creation Time.
        :param _builtins.str custom_security_group_id: Security Group ID.
        :param _builtins.str desktop_access_type: The method that is used to connect the client to cloud desktops.
        :param _builtins.str desktop_vpc_endpoint: The endpoint that is used to connect to cloud desktops over a VPC.
        :param Sequence[_builtins.str] dns_addresses: Enterprise Ad Corresponding DNS Address.
        :param _builtins.str dns_user_name: The Easy-to-Use DNS Name.
        :param _builtins.str domain_name: Enterprise of Ad Domain Name.
        :param _builtins.str domain_user_name: The Domain Administrator's Username.
        :param _builtins.bool enable_admin_access: Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        :param _builtins.bool enable_cross_desktop_access: Indicates whether the desktop communication feature is enabled for cloud desktops in the same workspace. After the feature is enabled, the cloud desktops in the same workspace can access each other.
        :param _builtins.bool enable_internet_access: Whether the Open Internet Access Function.
        :param Sequence[_builtins.str] file_system_ids: NAS File System ID.
        :param _builtins.str id: The ID of the Ad Connector Office Site.
        :param Sequence['GetAdConnectorOfficeSitesSiteLogArgs'] logs: Registered Log Information.
        :param _builtins.bool mfa_enabled: Whether to Enable Multi-Factor Authentication MFA.
        :param _builtins.str network_package_id: The ID of the Internet Access.
        :param _builtins.str office_site_id: The ID of the Workspace.
        :param _builtins.str office_site_type: Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        :param _builtins.bool sso_enabled: Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        :param _builtins.str status: The workspace status.
        :param Sequence[_builtins.str] sub_domain_dns_addresses: Sub-Domain DNS Address.
        :param _builtins.str sub_domain_name: The AD Domain DNS Name.
        :param _builtins.str trust_password: The AD Trust Password.
        :param _builtins.str vpc_id: Security Office VPC ID.
        :param Sequence[_builtins.str] vswitch_ids: The vswitch ids.
        """
        pulumi.set(__self__, "ad_connector_office_site_name", ad_connector_office_site_name)
        pulumi.set(__self__, "ad_connectors", ad_connectors)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_security_group_id", custom_security_group_id)
        pulumi.set(__self__, "desktop_access_type", desktop_access_type)
        pulumi.set(__self__, "desktop_vpc_endpoint", desktop_vpc_endpoint)
        pulumi.set(__self__, "dns_addresses", dns_addresses)
        pulumi.set(__self__, "dns_user_name", dns_user_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_user_name", domain_user_name)
        pulumi.set(__self__, "enable_admin_access", enable_admin_access)
        pulumi.set(__self__, "enable_cross_desktop_access", enable_cross_desktop_access)
        pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        pulumi.set(__self__, "file_system_ids", file_system_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        pulumi.set(__self__, "network_package_id", network_package_id)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_type", office_site_type)
        pulumi.set(__self__, "sso_enabled", sso_enabled)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_domain_dns_addresses", sub_domain_dns_addresses)
        pulumi.set(__self__, "sub_domain_name", sub_domain_name)
        pulumi.set(__self__, "trust_password", trust_password)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_ids", vswitch_ids)

    @_builtins.property
    @pulumi.getter(name="adConnectorOfficeSiteName")
    def ad_connector_office_site_name(self) -> _builtins.str:
        """
        The Name of the ad connector office site.
        """
        return pulumi.get(self, "ad_connector_office_site_name")

    @_builtins.property
    @pulumi.getter(name="adConnectors")
    def ad_connectors(self) -> Sequence['outputs.GetAdConnectorOfficeSitesSiteAdConnectorResult']:
        """
        AD Connector Collection of Information.
        """
        return pulumi.get(self, "ad_connectors")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        The Internet Bandwidth Peak. Possible Values: 0~200. If This Field Is Set to 0, Indicates That There Is No Open Internet Access.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> _builtins.str:
        """
        Cloud Enterprise Network Instance Id.
        """
        return pulumi.get(self, "cen_id")

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> _builtins.str:
        """
        Workspace Corresponds to the Security Office Network of IPv4 Segment.
        """
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Workspace Creation Time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customSecurityGroupId")
    def custom_security_group_id(self) -> _builtins.str:
        """
        Security Group ID.
        """
        return pulumi.get(self, "custom_security_group_id")

    @_builtins.property
    @pulumi.getter(name="desktopAccessType")
    def desktop_access_type(self) -> _builtins.str:
        """
        The method that is used to connect the client to cloud desktops.
        """
        return pulumi.get(self, "desktop_access_type")

    @_builtins.property
    @pulumi.getter(name="desktopVpcEndpoint")
    def desktop_vpc_endpoint(self) -> _builtins.str:
        """
        The endpoint that is used to connect to cloud desktops over a VPC.
        """
        return pulumi.get(self, "desktop_vpc_endpoint")

    @_builtins.property
    @pulumi.getter(name="dnsAddresses")
    def dns_addresses(self) -> Sequence[_builtins.str]:
        """
        Enterprise Ad Corresponding DNS Address.
        """
        return pulumi.get(self, "dns_addresses")

    @_builtins.property
    @pulumi.getter(name="dnsUserName")
    def dns_user_name(self) -> _builtins.str:
        """
        The Easy-to-Use DNS Name.
        """
        return pulumi.get(self, "dns_user_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Enterprise of Ad Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> _builtins.str:
        """
        The Domain Administrator's Username.
        """
        return pulumi.get(self, "domain_user_name")

    @_builtins.property
    @pulumi.getter(name="enableAdminAccess")
    def enable_admin_access(self) -> _builtins.bool:
        """
        Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        """
        return pulumi.get(self, "enable_admin_access")

    @_builtins.property
    @pulumi.getter(name="enableCrossDesktopAccess")
    def enable_cross_desktop_access(self) -> _builtins.bool:
        """
        Indicates whether the desktop communication feature is enabled for cloud desktops in the same workspace. After the feature is enabled, the cloud desktops in the same workspace can access each other.
        """
        return pulumi.get(self, "enable_cross_desktop_access")

    @_builtins.property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> _builtins.bool:
        """
        Whether the Open Internet Access Function.
        """
        return pulumi.get(self, "enable_internet_access")

    @_builtins.property
    @pulumi.getter(name="fileSystemIds")
    def file_system_ids(self) -> Sequence[_builtins.str]:
        """
        NAS File System ID.
        """
        return pulumi.get(self, "file_system_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Ad Connector Office Site.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetAdConnectorOfficeSitesSiteLogResult']:
        """
        Registered Log Information.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> _builtins.bool:
        """
        Whether to Enable Multi-Factor Authentication MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @_builtins.property
    @pulumi.getter(name="networkPackageId")
    def network_package_id(self) -> _builtins.str:
        """
        The ID of the Internet Access.
        """
        return pulumi.get(self, "network_package_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> _builtins.str:
        """
        The ID of the Workspace.
        """
        return pulumi.get(self, "office_site_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteType")
    def office_site_type(self) -> _builtins.str:
        """
        Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        """
        return pulumi.get(self, "office_site_type")

    @_builtins.property
    @pulumi.getter(name="ssoEnabled")
    def sso_enabled(self) -> _builtins.bool:
        """
        Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        """
        return pulumi.get(self, "sso_enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The workspace status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subDomainDnsAddresses")
    def sub_domain_dns_addresses(self) -> Sequence[_builtins.str]:
        """
        Sub-Domain DNS Address.
        """
        return pulumi.get(self, "sub_domain_dns_addresses")

    @_builtins.property
    @pulumi.getter(name="subDomainName")
    def sub_domain_name(self) -> _builtins.str:
        """
        The AD Domain DNS Name.
        """
        return pulumi.get(self, "sub_domain_name")

    @_builtins.property
    @pulumi.getter(name="trustPassword")
    def trust_password(self) -> _builtins.str:
        """
        The AD Trust Password.
        """
        return pulumi.get(self, "trust_password")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Security Office VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Sequence[_builtins.str]:
        """
        The vswitch ids.
        """
        return pulumi.get(self, "vswitch_ids")


@pulumi.output_type
class GetAdConnectorOfficeSitesSiteAdConnectorResult(dict):
    def __init__(__self__, *,
                 ad_connector_address: _builtins.str,
                 connector_status: _builtins.str,
                 network_interface_id: _builtins.str,
                 vswitch_id: _builtins.str):
        """
        :param _builtins.str ad_connector_address: AD Connector across Zones, Its Connection Addresses.
        :param _builtins.str connector_status: AD Connector of the State. Possible Values: Creating: in the Creation of. Connecting: Connection. Requires the User to Your Own Ad Configured on the Domain to Which. Running: Run. Expired: If You Are out-of-Date. CONNECT_ERROR: Connection Error.
        :param _builtins.str network_interface_id: AD Connector Mount of the Card ID.
        :param _builtins.str vswitch_id: AD Connector in the Network Corresponding to the ID of the vSwitch in.
        """
        pulumi.set(__self__, "ad_connector_address", ad_connector_address)
        pulumi.set(__self__, "connector_status", connector_status)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter(name="adConnectorAddress")
    def ad_connector_address(self) -> _builtins.str:
        """
        AD Connector across Zones, Its Connection Addresses.
        """
        return pulumi.get(self, "ad_connector_address")

    @_builtins.property
    @pulumi.getter(name="connectorStatus")
    def connector_status(self) -> _builtins.str:
        """
        AD Connector of the State. Possible Values: Creating: in the Creation of. Connecting: Connection. Requires the User to Your Own Ad Configured on the Domain to Which. Running: Run. Expired: If You Are out-of-Date. CONNECT_ERROR: Connection Error.
        """
        return pulumi.get(self, "connector_status")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        """
        AD Connector Mount of the Card ID.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        AD Connector in the Network Corresponding to the ID of the vSwitch in.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetAdConnectorOfficeSitesSiteLogResult(dict):
    def __init__(__self__, *,
                 level: _builtins.str,
                 message: _builtins.str,
                 step: _builtins.str,
                 time_stamp: _builtins.str):
        """
        :param _builtins.str level: Log Level. Possible Values: Info: Information Error: Error Warn: Warning.
        :param _builtins.str message: The Log Details.
        :param _builtins.str step: Log Information Corresponding to the Step.
        :param _builtins.str time_stamp: Log Print Time.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "step", step)
        pulumi.set(__self__, "time_stamp", time_stamp)

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Log Level. Possible Values: Info: Information Error: Error Warn: Warning.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The Log Details.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.str:
        """
        Log Information Corresponding to the Step.
        """
        return pulumi.get(self, "step")

    @_builtins.property
    @pulumi.getter(name="timeStamp")
    def time_stamp(self) -> _builtins.str:
        """
        Log Print Time.
        """
        return pulumi.get(self, "time_stamp")


@pulumi.output_type
class GetBundlesBundleResult(dict):
    def __init__(__self__, *,
                 bundle_id: _builtins.str,
                 bundle_name: _builtins.str,
                 bundle_type: _builtins.str,
                 description: _builtins.str,
                 desktop_type: _builtins.str,
                 desktop_type_attributes: Sequence['outputs.GetBundlesBundleDesktopTypeAttributeResult'],
                 disks: Sequence['outputs.GetBundlesBundleDiskResult'],
                 id: _builtins.str,
                 image_id: _builtins.str,
                 os_type: _builtins.str):
        """
        :param _builtins.str bundle_id: The bundle id of the bundle.
        :param _builtins.str bundle_name: The name of the bundle.
        :param _builtins.str bundle_type: The bundle type of  the bundle. Valid values: `SYSTEM`,`CUSTOM`.
        :param _builtins.str description: The description of the bundle.
        :param _builtins.str desktop_type: The desktop type of the bundle.
        :param Sequence['GetBundlesBundleDesktopTypeAttributeArgs'] desktop_type_attributes: The desktop type attribute of the bundle.
        :param Sequence['GetBundlesBundleDiskArgs'] disks: The disks of the bundle.
        :param _builtins.str id: The ID of the bundle.
        :param _builtins.str image_id: The image id attribute of the bundle.
        :param _builtins.str os_type: The os type attribute of the bundle.
        """
        pulumi.set(__self__, "bundle_id", bundle_id)
        pulumi.set(__self__, "bundle_name", bundle_name)
        pulumi.set(__self__, "bundle_type", bundle_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "desktop_type", desktop_type)
        pulumi.set(__self__, "desktop_type_attributes", desktop_type_attributes)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "os_type", os_type)

    @_builtins.property
    @pulumi.getter(name="bundleId")
    def bundle_id(self) -> _builtins.str:
        """
        The bundle id of the bundle.
        """
        return pulumi.get(self, "bundle_id")

    @_builtins.property
    @pulumi.getter(name="bundleName")
    def bundle_name(self) -> _builtins.str:
        """
        The name of the bundle.
        """
        return pulumi.get(self, "bundle_name")

    @_builtins.property
    @pulumi.getter(name="bundleType")
    def bundle_type(self) -> _builtins.str:
        """
        The bundle type of  the bundle. Valid values: `SYSTEM`,`CUSTOM`.
        """
        return pulumi.get(self, "bundle_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the bundle.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="desktopType")
    def desktop_type(self) -> _builtins.str:
        """
        The desktop type of the bundle.
        """
        return pulumi.get(self, "desktop_type")

    @_builtins.property
    @pulumi.getter(name="desktopTypeAttributes")
    def desktop_type_attributes(self) -> Sequence['outputs.GetBundlesBundleDesktopTypeAttributeResult']:
        """
        The desktop type attribute of the bundle.
        """
        return pulumi.get(self, "desktop_type_attributes")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetBundlesBundleDiskResult']:
        """
        The disks of the bundle.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the bundle.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image id attribute of the bundle.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The os type attribute of the bundle.
        """
        return pulumi.get(self, "os_type")


@pulumi.output_type
class GetBundlesBundleDesktopTypeAttributeResult(dict):
    def __init__(__self__, *,
                 cpu_count: _builtins.int,
                 gpu_count: _builtins.str,
                 gpu_spec: _builtins.str,
                 memory_size: _builtins.str):
        """
        :param _builtins.int cpu_count: The cpu count attribute of the bundle.
        :param _builtins.str gpu_count: The gpu count attribute of the bundle.
        :param _builtins.str gpu_spec: The gpu spec attribute of the bundle.
        :param _builtins.str memory_size: The memory size attribute of the bundle.
        """
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "gpu_count", gpu_count)
        pulumi.set(__self__, "gpu_spec", gpu_spec)
        pulumi.set(__self__, "memory_size", memory_size)

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> _builtins.int:
        """
        The cpu count attribute of the bundle.
        """
        return pulumi.get(self, "cpu_count")

    @_builtins.property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> _builtins.str:
        """
        The gpu count attribute of the bundle.
        """
        return pulumi.get(self, "gpu_count")

    @_builtins.property
    @pulumi.getter(name="gpuSpec")
    def gpu_spec(self) -> _builtins.str:
        """
        The gpu spec attribute of the bundle.
        """
        return pulumi.get(self, "gpu_spec")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> _builtins.str:
        """
        The memory size attribute of the bundle.
        """
        return pulumi.get(self, "memory_size")


@pulumi.output_type
class GetBundlesBundleDiskResult(dict):
    def __init__(__self__, *,
                 disk_size: _builtins.str,
                 disk_type: _builtins.str):
        """
        :param _builtins.str disk_size: The disk size attribute of the bundle.
        :param _builtins.str disk_type: The disk type attribute of the bundle.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> _builtins.str:
        """
        The disk size attribute of the bundle.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> _builtins.str:
        """
        The disk type attribute of the bundle.
        """
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class GetCommandsCommandResult(dict):
    def __init__(__self__, *,
                 command_content: _builtins.str,
                 command_type: _builtins.str,
                 create_time: _builtins.str,
                 id: _builtins.str,
                 invoke_desktops: Sequence['outputs.GetCommandsCommandInvokeDesktopResult'],
                 invoke_id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str command_content: The Contents of the Script to Base64 Encoded Transmission.
        :param _builtins.str command_type: The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
        :param _builtins.str create_time: The Task of Creation Time.
        :param _builtins.str id: The ID of the Command.
        :param Sequence['GetCommandsCommandInvokeDesktopArgs'] invoke_desktops: The Implementation of the Target Cloud Desktop Collection.
        :param _builtins.str invoke_id: The invoke id of the Command.
        :param _builtins.str status: Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
        """
        pulumi.set(__self__, "command_content", command_content)
        pulumi.set(__self__, "command_type", command_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invoke_desktops", invoke_desktops)
        pulumi.set(__self__, "invoke_id", invoke_id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="commandContent")
    def command_content(self) -> _builtins.str:
        """
        The Contents of the Script to Base64 Encoded Transmission.
        """
        return pulumi.get(self, "command_content")

    @_builtins.property
    @pulumi.getter(name="commandType")
    def command_type(self) -> _builtins.str:
        """
        The Script Type. Valid values: `RunBatScript`, `RunPowerShellScript`.
        """
        return pulumi.get(self, "command_type")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The Task of Creation Time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Command.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="invokeDesktops")
    def invoke_desktops(self) -> Sequence['outputs.GetCommandsCommandInvokeDesktopResult']:
        """
        The Implementation of the Target Cloud Desktop Collection.
        """
        return pulumi.get(self, "invoke_desktops")

    @_builtins.property
    @pulumi.getter(name="invokeId")
    def invoke_id(self) -> _builtins.str:
        """
        The invoke id of the Command.
        """
        return pulumi.get(self, "invoke_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Script Is Executed in the Overall Implementation of the State. Valid values: `Pending`, `Failed`, `PartialFailed`, `Running`, `Stopped`, `Stopping`, `Finished`, `Success`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCommandsCommandInvokeDesktopResult(dict):
    def __init__(__self__, *,
                 desktop_id: _builtins.str,
                 dropped: _builtins.int,
                 error_code: _builtins.str,
                 error_info: _builtins.str,
                 exit_code: _builtins.str,
                 finish_time: _builtins.str,
                 invocation_status: _builtins.str,
                 output: _builtins.str,
                 repeats: _builtins.int,
                 start_time: _builtins.str,
                 stop_time: _builtins.str):
        """
        :param _builtins.str desktop_id: The desktop id of the Desktop.
        :param _builtins.int dropped: Output Field Text Length Exceeds 24 KB of Truncated Discarded Text Length.
        :param _builtins.str error_code: Command of the Failure Or Perform the Reason for the Failure of the Code.
        :param _builtins.str error_info: Command of the Failure Or Perform the Reason for the Failure of the Details.
        :param _builtins.str exit_code: Command of the Failure Or Perform the Reason for the Failure of the Details.
        :param _builtins.str finish_time: The Script Process until the End of Time.
        :param _builtins.str invocation_status: A Single Cloud Desktop Script Progress Status.
        :param _builtins.str output: Script the Output of the Process.
        :param _builtins.int repeats: Command in the Desktop Implementation.
        :param _builtins.str start_time: The Script Process on the Desktop, in the Start Timing of the Execution.
        :param _builtins.str stop_time: If You Use the invocation Indicates That the Call of the Time.
        """
        pulumi.set(__self__, "desktop_id", desktop_id)
        pulumi.set(__self__, "dropped", dropped)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_info", error_info)
        pulumi.set(__self__, "exit_code", exit_code)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "invocation_status", invocation_status)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "repeats", repeats)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "stop_time", stop_time)

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> _builtins.str:
        """
        The desktop id of the Desktop.
        """
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter
    def dropped(self) -> _builtins.int:
        """
        Output Field Text Length Exceeds 24 KB of Truncated Discarded Text Length.
        """
        return pulumi.get(self, "dropped")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Command of the Failure Or Perform the Reason for the Failure of the Code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> _builtins.str:
        """
        Command of the Failure Or Perform the Reason for the Failure of the Details.
        """
        return pulumi.get(self, "error_info")

    @_builtins.property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> _builtins.str:
        """
        Command of the Failure Or Perform the Reason for the Failure of the Details.
        """
        return pulumi.get(self, "exit_code")

    @_builtins.property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> _builtins.str:
        """
        The Script Process until the End of Time.
        """
        return pulumi.get(self, "finish_time")

    @_builtins.property
    @pulumi.getter(name="invocationStatus")
    def invocation_status(self) -> _builtins.str:
        """
        A Single Cloud Desktop Script Progress Status.
        """
        return pulumi.get(self, "invocation_status")

    @_builtins.property
    @pulumi.getter
    def output(self) -> _builtins.str:
        """
        Script the Output of the Process.
        """
        return pulumi.get(self, "output")

    @_builtins.property
    @pulumi.getter
    def repeats(self) -> _builtins.int:
        """
        Command in the Desktop Implementation.
        """
        return pulumi.get(self, "repeats")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The Script Process on the Desktop, in the Start Timing of the Execution.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="stopTime")
    def stop_time(self) -> _builtins.str:
        """
        If You Use the invocation Indicates That the Call of the Time.
        """
        return pulumi.get(self, "stop_time")


@pulumi.output_type
class GetCustomPropertiesPropertyResult(dict):
    def __init__(__self__, *,
                 custom_property_id: _builtins.str,
                 id: _builtins.str,
                 property_key: _builtins.str,
                 property_values: Sequence['outputs.GetCustomPropertiesPropertyPropertyValueResult']):
        """
        :param _builtins.str custom_property_id: The first ID of the resource.
        :param _builtins.str id: The ID of the Custom Property.
        :param _builtins.str property_key: The Custom attribute key.
        :param Sequence['GetCustomPropertiesPropertyPropertyValueArgs'] property_values: Custom attribute sets the value of.
        """
        pulumi.set(__self__, "custom_property_id", custom_property_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "property_key", property_key)
        pulumi.set(__self__, "property_values", property_values)

    @_builtins.property
    @pulumi.getter(name="customPropertyId")
    def custom_property_id(self) -> _builtins.str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "custom_property_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Custom Property.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="propertyKey")
    def property_key(self) -> _builtins.str:
        """
        The Custom attribute key.
        """
        return pulumi.get(self, "property_key")

    @_builtins.property
    @pulumi.getter(name="propertyValues")
    def property_values(self) -> Sequence['outputs.GetCustomPropertiesPropertyPropertyValueResult']:
        """
        Custom attribute sets the value of.
        """
        return pulumi.get(self, "property_values")


@pulumi.output_type
class GetCustomPropertiesPropertyPropertyValueResult(dict):
    def __init__(__self__, *,
                 property_value: _builtins.str,
                 property_value_id: _builtins.str):
        """
        :param _builtins.str property_value: The value of an attribute.
        :param _builtins.str property_value_id: The value of an attribute id.
        """
        pulumi.set(__self__, "property_value", property_value)
        pulumi.set(__self__, "property_value_id", property_value_id)

    @_builtins.property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> _builtins.str:
        """
        The value of an attribute.
        """
        return pulumi.get(self, "property_value")

    @_builtins.property
    @pulumi.getter(name="propertyValueId")
    def property_value_id(self) -> _builtins.str:
        """
        The value of an attribute id.
        """
        return pulumi.get(self, "property_value_id")


@pulumi.output_type
class GetDesktopTypesTypeResult(dict):
    def __init__(__self__, *,
                 cpu_count: _builtins.str,
                 data_disk_size: _builtins.str,
                 desktop_type_id: _builtins.str,
                 gpu_count: _builtins.float,
                 gpu_spec: _builtins.str,
                 id: _builtins.str,
                 instance_type_family: _builtins.str,
                 memory_size: _builtins.str,
                 status: _builtins.str,
                 system_disk_size: _builtins.str):
        """
        :param _builtins.str cpu_count: The CPU cores.
        :param _builtins.str data_disk_size: The size of the data disk. Unit: GiB.
        :param _builtins.str desktop_type_id: Specification ID.
        :param _builtins.float gpu_count: The GPU cores.
        :param _builtins.str gpu_spec: The GPU video memory.
        :param _builtins.str id: The ID of the Desktop Type.
        :param _builtins.str instance_type_family: The Specification family.
        :param _builtins.str memory_size: The Memory size. Unit: MiB.
        :param _builtins.str status: The status of the resource.
        :param _builtins.str system_disk_size: The size of the system disk. Unit: GiB.
        """
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "desktop_type_id", desktop_type_id)
        pulumi.set(__self__, "gpu_count", gpu_count)
        pulumi.set(__self__, "gpu_spec", gpu_spec)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_type_family", instance_type_family)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> _builtins.str:
        """
        The CPU cores.
        """
        return pulumi.get(self, "cpu_count")

    @_builtins.property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> _builtins.str:
        """
        The size of the data disk. Unit: GiB.
        """
        return pulumi.get(self, "data_disk_size")

    @_builtins.property
    @pulumi.getter(name="desktopTypeId")
    def desktop_type_id(self) -> _builtins.str:
        """
        Specification ID.
        """
        return pulumi.get(self, "desktop_type_id")

    @_builtins.property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> _builtins.float:
        """
        The GPU cores.
        """
        return pulumi.get(self, "gpu_count")

    @_builtins.property
    @pulumi.getter(name="gpuSpec")
    def gpu_spec(self) -> _builtins.str:
        """
        The GPU video memory.
        """
        return pulumi.get(self, "gpu_spec")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Desktop Type.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceTypeFamily")
    def instance_type_family(self) -> _builtins.str:
        """
        The Specification family.
        """
        return pulumi.get(self, "instance_type_family")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> _builtins.str:
        """
        The Memory size. Unit: MiB.
        """
        return pulumi.get(self, "memory_size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.str:
        """
        The size of the system disk. Unit: GiB.
        """
        return pulumi.get(self, "system_disk_size")


@pulumi.output_type
class GetDesktopsDesktopResult(dict):
    def __init__(__self__, *,
                 cpu: _builtins.int,
                 create_time: _builtins.str,
                 desktop_id: _builtins.str,
                 desktop_name: _builtins.str,
                 desktop_type: _builtins.str,
                 directory_id: _builtins.str,
                 end_user_ids: Sequence[_builtins.str],
                 expired_time: _builtins.str,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 memory: _builtins.str,
                 network_interface_id: _builtins.str,
                 payment_type: _builtins.str,
                 policy_group_id: _builtins.str,
                 status: _builtins.str,
                 system_disk_size: _builtins.int):
        """
        :param _builtins.int cpu: The number of CPUs.
        :param _builtins.str create_time: The creation time of the Desktop.
        :param _builtins.str desktop_id: The desktop id of the Desktop.
        :param _builtins.str desktop_name: The desktop name of the Desktop.
        :param _builtins.str desktop_type: The desktop type of the Desktop.
        :param _builtins.str directory_id: The directory id of the Desktop.
        :param Sequence[_builtins.str] end_user_ids: The desktop end user id of the Desktop.
        :param _builtins.str expired_time: The expired time of the Desktop.
        :param _builtins.str id: The ID of the Desktop.
        :param _builtins.str image_id: The image id of the Desktop.
        :param _builtins.str memory: The memory of the Desktop.
        :param _builtins.str network_interface_id: The network interface id of the Desktop.
        :param _builtins.str payment_type: The payment type of the Desktop.
        :param _builtins.str policy_group_id: The policy group id of the Desktop.
        :param _builtins.str status: The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
        :param _builtins.int system_disk_size: The system disk size of the Desktop.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "desktop_id", desktop_id)
        pulumi.set(__self__, "desktop_name", desktop_name)
        pulumi.set(__self__, "desktop_type", desktop_type)
        pulumi.set(__self__, "directory_id", directory_id)
        pulumi.set(__self__, "end_user_ids", end_user_ids)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.int:
        """
        The number of CPUs.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the Desktop.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> _builtins.str:
        """
        The desktop id of the Desktop.
        """
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter(name="desktopName")
    def desktop_name(self) -> _builtins.str:
        """
        The desktop name of the Desktop.
        """
        return pulumi.get(self, "desktop_name")

    @_builtins.property
    @pulumi.getter(name="desktopType")
    def desktop_type(self) -> _builtins.str:
        """
        The desktop type of the Desktop.
        """
        return pulumi.get(self, "desktop_type")

    @_builtins.property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> _builtins.str:
        """
        The directory id of the Desktop.
        """
        return pulumi.get(self, "directory_id")

    @_builtins.property
    @pulumi.getter(name="endUserIds")
    def end_user_ids(self) -> Sequence[_builtins.str]:
        """
        The desktop end user id of the Desktop.
        """
        return pulumi.get(self, "end_user_ids")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> _builtins.str:
        """
        The expired time of the Desktop.
        """
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Desktop.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image id of the Desktop.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        The memory of the Desktop.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        """
        The network interface id of the Desktop.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> _builtins.str:
        """
        The payment type of the Desktop.
        """
        return pulumi.get(self, "payment_type")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> _builtins.str:
        """
        The policy group id of the Desktop.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> _builtins.int:
        """
        The system disk size of the Desktop.
        """
        return pulumi.get(self, "system_disk_size")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 data_disk_size: _builtins.int,
                 description: _builtins.str,
                 gpu_category: _builtins.bool,
                 id: _builtins.str,
                 image_id: _builtins.str,
                 image_name: _builtins.str,
                 image_type: _builtins.str,
                 os_type: _builtins.str,
                 progress: _builtins.str,
                 size: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str create_time: The creation time of the image.
        :param _builtins.int data_disk_size: The size of data disk of the image.
        :param _builtins.str description: The description of the image.
        :param _builtins.bool gpu_category: The Gpu Category of the image.
        :param _builtins.str id: The ID of the Image.
        :param _builtins.str image_id: The image id of the image.
        :param _builtins.str image_name: The image name.
        :param _builtins.str image_type: The image type of the image. Valid values: `SYSTEM`, `CUSTOM`.
        :param _builtins.str os_type: The os type of the image.
        :param _builtins.str progress: The progress of the image.
        :param _builtins.int size: The size of the image.
        :param _builtins.str status: The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gpu_category", gpu_category)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of the image.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> _builtins.int:
        """
        The size of data disk of the image.
        """
        return pulumi.get(self, "data_disk_size")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the image.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gpuCategory")
    def gpu_category(self) -> _builtins.bool:
        """
        The Gpu Category of the image.
        """
        return pulumi.get(self, "gpu_category")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Image.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The image id of the image.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        The image name.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        The image type of the image. Valid values: `SYSTEM`, `CUSTOM`.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> _builtins.str:
        """
        The os type of the image.
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        The progress of the image.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the image. Valid values: `Creating`, `Available`, `CreateFailed`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNasFileSystemsSystemResult(dict):
    def __init__(__self__, *,
                 capacity: _builtins.str,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 file_system_id: _builtins.str,
                 file_system_type: _builtins.str,
                 id: _builtins.str,
                 metered_size: _builtins.str,
                 mount_target_domain: _builtins.str,
                 mount_target_status: _builtins.str,
                 nas_file_system_name: _builtins.str,
                 office_site_id: _builtins.str,
                 office_site_name: _builtins.str,
                 status: _builtins.str,
                 storage_type: _builtins.str,
                 support_acl: _builtins.bool,
                 zone_id: _builtins.str):
        """
        :param _builtins.str capacity: The capacity of nas file system.
        :param _builtins.str create_time: The create time of nas file system.
        :param _builtins.str description: The description of nas file system.
        :param _builtins.str file_system_id: The filesystem id of nas file system.
        :param _builtins.str file_system_type: The type of nas file system.
        :param _builtins.str id: The ID of the Nas File System.
        :param _builtins.str metered_size: The size of metered.
        :param _builtins.str mount_target_domain: The domain of mount target.
        :param _builtins.str mount_target_status: The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
        :param _builtins.str nas_file_system_name: The name of nas file system.
        :param _builtins.str office_site_id: The ID of office site.
        :param _builtins.str office_site_name: The name of office site.
        :param _builtins.str status: The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
        :param _builtins.str storage_type: The storage type of nas file system.
        :param _builtins.bool support_acl: Whether to support Acl.
        :param _builtins.str zone_id: The zone id of nas file system.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metered_size", metered_size)
        pulumi.set(__self__, "mount_target_domain", mount_target_domain)
        pulumi.set(__self__, "mount_target_status", mount_target_status)
        pulumi.set(__self__, "nas_file_system_name", nas_file_system_name)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_name", office_site_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "support_acl", support_acl)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> _builtins.str:
        """
        The capacity of nas file system.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The create time of nas file system.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of nas file system.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> _builtins.str:
        """
        The filesystem id of nas file system.
        """
        return pulumi.get(self, "file_system_id")

    @_builtins.property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> _builtins.str:
        """
        The type of nas file system.
        """
        return pulumi.get(self, "file_system_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Nas File System.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="meteredSize")
    def metered_size(self) -> _builtins.str:
        """
        The size of metered.
        """
        return pulumi.get(self, "metered_size")

    @_builtins.property
    @pulumi.getter(name="mountTargetDomain")
    def mount_target_domain(self) -> _builtins.str:
        """
        The domain of mount target.
        """
        return pulumi.get(self, "mount_target_domain")

    @_builtins.property
    @pulumi.getter(name="mountTargetStatus")
    def mount_target_status(self) -> _builtins.str:
        """
        The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
        """
        return pulumi.get(self, "mount_target_status")

    @_builtins.property
    @pulumi.getter(name="nasFileSystemName")
    def nas_file_system_name(self) -> _builtins.str:
        """
        The name of nas file system.
        """
        return pulumi.get(self, "nas_file_system_name")

    @_builtins.property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> _builtins.str:
        """
        The ID of office site.
        """
        return pulumi.get(self, "office_site_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteName")
    def office_site_name(self) -> _builtins.str:
        """
        The name of office site.
        """
        return pulumi.get(self, "office_site_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        """
        The storage type of nas file system.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="supportAcl")
    def support_acl(self) -> _builtins.bool:
        """
        Whether to support Acl.
        """
        return pulumi.get(self, "support_acl")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        The zone id of nas file system.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNetworkPackagesPackageResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 create_time: _builtins.str,
                 eip_addresses: Sequence[_builtins.str],
                 expired_time: _builtins.str,
                 id: _builtins.str,
                 internet_charge_type: _builtins.str,
                 network_package_id: _builtins.str,
                 office_site_id: _builtins.str,
                 office_site_name: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.int bandwidth: The bandwidth of package.
        :param _builtins.str create_time: The creation time of network package.
        :param Sequence[_builtins.str] eip_addresses: The public IP address list of the network packet.
        :param _builtins.str expired_time: The expired time of package.
        :param _builtins.str id: The ID of the Network Package.
        :param _builtins.str internet_charge_type: The internet charge type  of  package.
        :param _builtins.str network_package_id: The ID of network package.
        :param _builtins.str office_site_id: The ID of office site.
        :param _builtins.str office_site_name: The name of office site.
        :param _builtins.str status: The status of network package. Valid values: `Creating`, `InUse`, `Releasing`,`Released`.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "eip_addresses", eip_addresses)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "network_package_id", network_package_id)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_name", office_site_name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        The bandwidth of package.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The creation time of network package.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="eipAddresses")
    def eip_addresses(self) -> Sequence[_builtins.str]:
        """
        The public IP address list of the network packet.
        """
        return pulumi.get(self, "eip_addresses")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> _builtins.str:
        """
        The expired time of package.
        """
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Network Package.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> _builtins.str:
        """
        The internet charge type  of  package.
        """
        return pulumi.get(self, "internet_charge_type")

    @_builtins.property
    @pulumi.getter(name="networkPackageId")
    def network_package_id(self) -> _builtins.str:
        """
        The ID of network package.
        """
        return pulumi.get(self, "network_package_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> _builtins.str:
        """
        The ID of office site.
        """
        return pulumi.get(self, "office_site_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteName")
    def office_site_name(self) -> _builtins.str:
        """
        The name of office site.
        """
        return pulumi.get(self, "office_site_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of network package. Valid values: `Creating`, `InUse`, `Releasing`,`Released`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPolicyGroupsGroupResult(dict):
    def __init__(__self__, *,
                 authorize_access_policy_rules: Sequence['outputs.GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult'],
                 authorize_security_policy_rules: Sequence['outputs.GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult'],
                 camera_redirect: _builtins.str,
                 clipboard: _builtins.str,
                 domain_list: _builtins.str,
                 eds_count: _builtins.int,
                 html_access: _builtins.str,
                 html_file_transfer: _builtins.str,
                 id: _builtins.str,
                 local_drive: _builtins.str,
                 policy_group_id: _builtins.str,
                 policy_group_name: _builtins.str,
                 policy_group_type: _builtins.str,
                 recording: _builtins.str,
                 recording_end_time: _builtins.str,
                 recording_fps: _builtins.int,
                 recording_start_time: _builtins.str,
                 status: _builtins.str,
                 usb_redirect: _builtins.str,
                 visual_quality: _builtins.str,
                 watermark: _builtins.str,
                 watermark_transparency: _builtins.str,
                 watermark_type: _builtins.str):
        """
        :param Sequence['GetPolicyGroupsGroupAuthorizeAccessPolicyRuleArgs'] authorize_access_policy_rules: The rule of authorize access rule.
        :param Sequence['GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleArgs'] authorize_security_policy_rules: The policy rule.
        :param _builtins.str camera_redirect: Whether to enable local camera redirection. Valid values: `on`, `off`.
        :param _builtins.str clipboard: The clipboard policy.
        :param _builtins.str domain_list: The list of domain.
        :param _builtins.int eds_count: The count of eds.
        :param _builtins.str html_access: The access of html5.
        :param _builtins.str html_file_transfer: The html5 file transfer.
        :param _builtins.str id: The ID of the Policy Group.
        :param _builtins.str local_drive: Local drive redirect policy.
        :param _builtins.str policy_group_id: The policy group id.
        :param _builtins.str policy_group_name: The name of policy group.
        :param _builtins.str policy_group_type: The type of policy group.
        :param _builtins.str recording: Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
        :param _builtins.str recording_end_time: The end time of recording.
        :param _builtins.int recording_fps: The fps of recording. Valid values: `2`, `5`, `10`, `15`.
        :param _builtins.str recording_start_time: The start time of recording.
        :param _builtins.str status: The status of policy.
        :param _builtins.str usb_redirect: The usb redirect policy.
        :param _builtins.str visual_quality: The quality of visual.sae_ecdsae_nameecd_po
        :param _builtins.str watermark: The watermark policy.
        :param _builtins.str watermark_transparency: The watermark transparency.
        :param _builtins.str watermark_type: The type of watemark.
        """
        pulumi.set(__self__, "authorize_access_policy_rules", authorize_access_policy_rules)
        pulumi.set(__self__, "authorize_security_policy_rules", authorize_security_policy_rules)
        pulumi.set(__self__, "camera_redirect", camera_redirect)
        pulumi.set(__self__, "clipboard", clipboard)
        pulumi.set(__self__, "domain_list", domain_list)
        pulumi.set(__self__, "eds_count", eds_count)
        pulumi.set(__self__, "html_access", html_access)
        pulumi.set(__self__, "html_file_transfer", html_file_transfer)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_drive", local_drive)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "policy_group_name", policy_group_name)
        pulumi.set(__self__, "policy_group_type", policy_group_type)
        pulumi.set(__self__, "recording", recording)
        pulumi.set(__self__, "recording_end_time", recording_end_time)
        pulumi.set(__self__, "recording_fps", recording_fps)
        pulumi.set(__self__, "recording_start_time", recording_start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "usb_redirect", usb_redirect)
        pulumi.set(__self__, "visual_quality", visual_quality)
        pulumi.set(__self__, "watermark", watermark)
        pulumi.set(__self__, "watermark_transparency", watermark_transparency)
        pulumi.set(__self__, "watermark_type", watermark_type)

    @_builtins.property
    @pulumi.getter(name="authorizeAccessPolicyRules")
    def authorize_access_policy_rules(self) -> Sequence['outputs.GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult']:
        """
        The rule of authorize access rule.
        """
        return pulumi.get(self, "authorize_access_policy_rules")

    @_builtins.property
    @pulumi.getter(name="authorizeSecurityPolicyRules")
    def authorize_security_policy_rules(self) -> Sequence['outputs.GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult']:
        """
        The policy rule.
        """
        return pulumi.get(self, "authorize_security_policy_rules")

    @_builtins.property
    @pulumi.getter(name="cameraRedirect")
    def camera_redirect(self) -> _builtins.str:
        """
        Whether to enable local camera redirection. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "camera_redirect")

    @_builtins.property
    @pulumi.getter
    def clipboard(self) -> _builtins.str:
        """
        The clipboard policy.
        """
        return pulumi.get(self, "clipboard")

    @_builtins.property
    @pulumi.getter(name="domainList")
    def domain_list(self) -> _builtins.str:
        """
        The list of domain.
        """
        return pulumi.get(self, "domain_list")

    @_builtins.property
    @pulumi.getter(name="edsCount")
    def eds_count(self) -> _builtins.int:
        """
        The count of eds.
        """
        return pulumi.get(self, "eds_count")

    @_builtins.property
    @pulumi.getter(name="htmlAccess")
    def html_access(self) -> _builtins.str:
        """
        The access of html5.
        """
        return pulumi.get(self, "html_access")

    @_builtins.property
    @pulumi.getter(name="htmlFileTransfer")
    def html_file_transfer(self) -> _builtins.str:
        """
        The html5 file transfer.
        """
        return pulumi.get(self, "html_file_transfer")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Policy Group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localDrive")
    def local_drive(self) -> _builtins.str:
        """
        Local drive redirect policy.
        """
        return pulumi.get(self, "local_drive")

    @_builtins.property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> _builtins.str:
        """
        The policy group id.
        """
        return pulumi.get(self, "policy_group_id")

    @_builtins.property
    @pulumi.getter(name="policyGroupName")
    def policy_group_name(self) -> _builtins.str:
        """
        The name of policy group.
        """
        return pulumi.get(self, "policy_group_name")

    @_builtins.property
    @pulumi.getter(name="policyGroupType")
    def policy_group_type(self) -> _builtins.str:
        """
        The type of policy group.
        """
        return pulumi.get(self, "policy_group_type")

    @_builtins.property
    @pulumi.getter
    def recording(self) -> _builtins.str:
        """
        Whether to enable screen recording. Valid values: `off`, `alltime`, `period`.
        """
        return pulumi.get(self, "recording")

    @_builtins.property
    @pulumi.getter(name="recordingEndTime")
    def recording_end_time(self) -> _builtins.str:
        """
        The end time of recording.
        """
        return pulumi.get(self, "recording_end_time")

    @_builtins.property
    @pulumi.getter(name="recordingFps")
    def recording_fps(self) -> _builtins.int:
        """
        The fps of recording. Valid values: `2`, `5`, `10`, `15`.
        """
        return pulumi.get(self, "recording_fps")

    @_builtins.property
    @pulumi.getter(name="recordingStartTime")
    def recording_start_time(self) -> _builtins.str:
        """
        The start time of recording.
        """
        return pulumi.get(self, "recording_start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of policy.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="usbRedirect")
    def usb_redirect(self) -> _builtins.str:
        """
        The usb redirect policy.
        """
        return pulumi.get(self, "usb_redirect")

    @_builtins.property
    @pulumi.getter(name="visualQuality")
    def visual_quality(self) -> _builtins.str:
        """
        The quality of visual.sae_ecdsae_nameecd_po
        """
        return pulumi.get(self, "visual_quality")

    @_builtins.property
    @pulumi.getter
    def watermark(self) -> _builtins.str:
        """
        The watermark policy.
        """
        return pulumi.get(self, "watermark")

    @_builtins.property
    @pulumi.getter(name="watermarkTransparency")
    def watermark_transparency(self) -> _builtins.str:
        """
        The watermark transparency.
        """
        return pulumi.get(self, "watermark_transparency")

    @_builtins.property
    @pulumi.getter(name="watermarkType")
    def watermark_type(self) -> _builtins.str:
        """
        The type of watemark.
        """
        return pulumi.get(self, "watermark_type")


@pulumi.output_type
class GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cidr_ip: _builtins.str,
                 description: _builtins.str):
        """
        :param _builtins.str cidr_ip: The cidrip of authorize access rule..
        :param _builtins.str description: The description of authorize access rule.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> _builtins.str:
        """
        The cidrip of authorize access rule..
        """
        return pulumi.get(self, "cidr_ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of authorize access rule.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cidr_ip: _builtins.str,
                 description: _builtins.str,
                 ip_protocol: _builtins.str,
                 policy: _builtins.str,
                 port_range: _builtins.str,
                 priority: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str cidr_ip: The cidrip of security rules.
        :param _builtins.str description: The description of security rules.
        :param _builtins.str ip_protocol: The ip protocol of security rules.
        :param _builtins.str policy: The policy of security rules.
        :param _builtins.str port_range: The port range of security rules.
        :param _builtins.str priority: The priority of security rules.
        :param _builtins.str type: The type of security rules.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> _builtins.str:
        """
        The cidrip of security rules.
        """
        return pulumi.get(self, "cidr_ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of security rules.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> _builtins.str:
        """
        The ip protocol of security rules.
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        The policy of security rules.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="portRange")
    def port_range(self) -> _builtins.str:
        """
        The port range of security rules.
        """
        return pulumi.get(self, "port_range")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        The priority of security rules.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of security rules.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRamDirectoriesDirectoryResult(dict):
    def __init__(__self__, *,
                 ad_connectors: Sequence['outputs.GetRamDirectoriesDirectoryAdConnectorResult'],
                 create_time: _builtins.str,
                 custom_security_group_id: _builtins.str,
                 desktop_access_type: _builtins.str,
                 desktop_vpc_endpoint: _builtins.str,
                 directory_type: _builtins.str,
                 dns_addresses: Sequence[_builtins.str],
                 dns_user_name: _builtins.str,
                 domain_name: _builtins.str,
                 domain_password: _builtins.str,
                 domain_user_name: _builtins.str,
                 enable_admin_access: _builtins.bool,
                 enable_cross_desktop_access: _builtins.bool,
                 enable_internet_access: _builtins.bool,
                 file_system_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 logs: Sequence['outputs.GetRamDirectoriesDirectoryLogResult'],
                 mfa_enabled: _builtins.bool,
                 ram_directory_id: _builtins.str,
                 ram_directory_name: _builtins.str,
                 sso_enabled: _builtins.bool,
                 status: _builtins.str,
                 sub_dns_addresses: Sequence[_builtins.str],
                 sub_domain_name: _builtins.str,
                 trust_password: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_ids: Sequence[_builtins.str]):
        """
        :param Sequence['GetRamDirectoriesDirectoryAdConnectorArgs'] ad_connectors: The AD connectors.
        :param _builtins.str create_time: The CreateTime of resource.
        :param _builtins.str custom_security_group_id: The id of the custom security group.
        :param _builtins.str desktop_access_type: The desktop access type.
        :param _builtins.str desktop_vpc_endpoint: The desktop vpc endpoint.
        :param _builtins.str directory_type: The directory type.
        :param Sequence[_builtins.str] dns_addresses: The address of DNSAddress.
        :param _builtins.str dns_user_name: The username of DNS.
        :param _builtins.str domain_name: The name of the domain.
        :param _builtins.str domain_password: The domain password.
        :param _builtins.str domain_user_name: The username of the domain.
        :param _builtins.bool enable_admin_access: Whether to enable admin access.
        :param _builtins.bool enable_cross_desktop_access: Whether to enable cross desktop access.
        :param _builtins.bool enable_internet_access: Whether enable internet access.
        :param Sequence[_builtins.str] file_system_ids: The ids of filesystem.
        :param _builtins.str id: The ID of the Ram Directory.
        :param Sequence['GetRamDirectoriesDirectoryLogArgs'] logs: The register log information.
        :param _builtins.bool mfa_enabled: Whether to enable MFA.
        :param _builtins.str ram_directory_id: The ID of ram directory.
        :param _builtins.str ram_directory_name: The name of directory.
        :param _builtins.bool sso_enabled: Whether to enable SSO.
        :param _builtins.str status: The status of directory.
        :param Sequence[_builtins.str] sub_dns_addresses: The address of sub DNS.
        :param _builtins.str sub_domain_name: The Name of the sub-domain.
        :param _builtins.str trust_password: The trust password.
        :param _builtins.str vpc_id: The ID of the vpc.
        :param Sequence[_builtins.str] vswitch_ids: List of vSwitch IDs in the directory.
        """
        pulumi.set(__self__, "ad_connectors", ad_connectors)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_security_group_id", custom_security_group_id)
        pulumi.set(__self__, "desktop_access_type", desktop_access_type)
        pulumi.set(__self__, "desktop_vpc_endpoint", desktop_vpc_endpoint)
        pulumi.set(__self__, "directory_type", directory_type)
        pulumi.set(__self__, "dns_addresses", dns_addresses)
        pulumi.set(__self__, "dns_user_name", dns_user_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_password", domain_password)
        pulumi.set(__self__, "domain_user_name", domain_user_name)
        pulumi.set(__self__, "enable_admin_access", enable_admin_access)
        pulumi.set(__self__, "enable_cross_desktop_access", enable_cross_desktop_access)
        pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        pulumi.set(__self__, "file_system_ids", file_system_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        pulumi.set(__self__, "ram_directory_id", ram_directory_id)
        pulumi.set(__self__, "ram_directory_name", ram_directory_name)
        pulumi.set(__self__, "sso_enabled", sso_enabled)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_dns_addresses", sub_dns_addresses)
        pulumi.set(__self__, "sub_domain_name", sub_domain_name)
        pulumi.set(__self__, "trust_password", trust_password)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_ids", vswitch_ids)

    @_builtins.property
    @pulumi.getter(name="adConnectors")
    def ad_connectors(self) -> Sequence['outputs.GetRamDirectoriesDirectoryAdConnectorResult']:
        """
        The AD connectors.
        """
        return pulumi.get(self, "ad_connectors")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The CreateTime of resource.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customSecurityGroupId")
    def custom_security_group_id(self) -> _builtins.str:
        """
        The id of the custom security group.
        """
        return pulumi.get(self, "custom_security_group_id")

    @_builtins.property
    @pulumi.getter(name="desktopAccessType")
    def desktop_access_type(self) -> _builtins.str:
        """
        The desktop access type.
        """
        return pulumi.get(self, "desktop_access_type")

    @_builtins.property
    @pulumi.getter(name="desktopVpcEndpoint")
    def desktop_vpc_endpoint(self) -> _builtins.str:
        """
        The desktop vpc endpoint.
        """
        return pulumi.get(self, "desktop_vpc_endpoint")

    @_builtins.property
    @pulumi.getter(name="directoryType")
    def directory_type(self) -> _builtins.str:
        """
        The directory type.
        """
        return pulumi.get(self, "directory_type")

    @_builtins.property
    @pulumi.getter(name="dnsAddresses")
    def dns_addresses(self) -> Sequence[_builtins.str]:
        """
        The address of DNSAddress.
        """
        return pulumi.get(self, "dns_addresses")

    @_builtins.property
    @pulumi.getter(name="dnsUserName")
    def dns_user_name(self) -> _builtins.str:
        """
        The username of DNS.
        """
        return pulumi.get(self, "dns_user_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The name of the domain.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainPassword")
    def domain_password(self) -> _builtins.str:
        """
        The domain password.
        """
        return pulumi.get(self, "domain_password")

    @_builtins.property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> _builtins.str:
        """
        The username of the domain.
        """
        return pulumi.get(self, "domain_user_name")

    @_builtins.property
    @pulumi.getter(name="enableAdminAccess")
    def enable_admin_access(self) -> _builtins.bool:
        """
        Whether to enable admin access.
        """
        return pulumi.get(self, "enable_admin_access")

    @_builtins.property
    @pulumi.getter(name="enableCrossDesktopAccess")
    def enable_cross_desktop_access(self) -> _builtins.bool:
        """
        Whether to enable cross desktop access.
        """
        return pulumi.get(self, "enable_cross_desktop_access")

    @_builtins.property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> _builtins.bool:
        """
        Whether enable internet access.
        """
        return pulumi.get(self, "enable_internet_access")

    @_builtins.property
    @pulumi.getter(name="fileSystemIds")
    def file_system_ids(self) -> Sequence[_builtins.str]:
        """
        The ids of filesystem.
        """
        return pulumi.get(self, "file_system_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Ram Directory.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetRamDirectoriesDirectoryLogResult']:
        """
        The register log information.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> _builtins.bool:
        """
        Whether to enable MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @_builtins.property
    @pulumi.getter(name="ramDirectoryId")
    def ram_directory_id(self) -> _builtins.str:
        """
        The ID of ram directory.
        """
        return pulumi.get(self, "ram_directory_id")

    @_builtins.property
    @pulumi.getter(name="ramDirectoryName")
    def ram_directory_name(self) -> _builtins.str:
        """
        The name of directory.
        """
        return pulumi.get(self, "ram_directory_name")

    @_builtins.property
    @pulumi.getter(name="ssoEnabled")
    def sso_enabled(self) -> _builtins.bool:
        """
        Whether to enable SSO.
        """
        return pulumi.get(self, "sso_enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of directory.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subDnsAddresses")
    def sub_dns_addresses(self) -> Sequence[_builtins.str]:
        """
        The address of sub DNS.
        """
        return pulumi.get(self, "sub_dns_addresses")

    @_builtins.property
    @pulumi.getter(name="subDomainName")
    def sub_domain_name(self) -> _builtins.str:
        """
        The Name of the sub-domain.
        """
        return pulumi.get(self, "sub_domain_name")

    @_builtins.property
    @pulumi.getter(name="trustPassword")
    def trust_password(self) -> _builtins.str:
        """
        The trust password.
        """
        return pulumi.get(self, "trust_password")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Sequence[_builtins.str]:
        """
        List of vSwitch IDs in the directory.
        """
        return pulumi.get(self, "vswitch_ids")


@pulumi.output_type
class GetRamDirectoriesDirectoryAdConnectorResult(dict):
    def __init__(__self__, *,
                 ad_connector_address: _builtins.str,
                 connector_status: _builtins.str,
                 network_interface_id: _builtins.str,
                 vswitch_id: _builtins.str):
        """
        :param _builtins.str ad_connector_address: The address of AD connector.
        :param _builtins.str connector_status: The status of connector.
        :param _builtins.str network_interface_id: The ID of the network interface.
        :param _builtins.str vswitch_id: The ID of vSwitch.
        """
        pulumi.set(__self__, "ad_connector_address", ad_connector_address)
        pulumi.set(__self__, "connector_status", connector_status)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)

    @_builtins.property
    @pulumi.getter(name="adConnectorAddress")
    def ad_connector_address(self) -> _builtins.str:
        """
        The address of AD connector.
        """
        return pulumi.get(self, "ad_connector_address")

    @_builtins.property
    @pulumi.getter(name="connectorStatus")
    def connector_status(self) -> _builtins.str:
        """
        The status of connector.
        """
        return pulumi.get(self, "connector_status")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        """
        The ID of the network interface.
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> _builtins.str:
        """
        The ID of vSwitch.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetRamDirectoriesDirectoryLogResult(dict):
    def __init__(__self__, *,
                 level: _builtins.str,
                 message: _builtins.str,
                 step: _builtins.str,
                 time_stamp: _builtins.str):
        """
        :param _builtins.str level: The level of log.
        :param _builtins.str message: The message of log.
        :param _builtins.str step: The step of log.
        :param _builtins.str time_stamp: The time stamp of log.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "step", step)
        pulumi.set(__self__, "time_stamp", time_stamp)

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The level of log.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The message of log.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def step(self) -> _builtins.str:
        """
        The step of log.
        """
        return pulumi.get(self, "step")

    @_builtins.property
    @pulumi.getter(name="timeStamp")
    def time_stamp(self) -> _builtins.str:
        """
        The time stamp of log.
        """
        return pulumi.get(self, "time_stamp")


@pulumi.output_type
class GetSimpleOfficeSitesSiteResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 cen_id: _builtins.str,
                 cidr_block: _builtins.str,
                 create_time: _builtins.str,
                 custom_security_group_id: _builtins.str,
                 desktop_access_type: _builtins.str,
                 desktop_vpc_endpoint: _builtins.str,
                 dns_addresses: Sequence[_builtins.str],
                 dns_user_name: _builtins.str,
                 domain_name: _builtins.str,
                 domain_password: _builtins.str,
                 domain_user_name: _builtins.str,
                 enable_admin_access: _builtins.bool,
                 enable_cross_desktop_access: _builtins.bool,
                 enable_internet_access: _builtins.bool,
                 file_system_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 mfa_enabled: _builtins.bool,
                 network_package_id: _builtins.str,
                 office_site_id: _builtins.str,
                 office_site_type: _builtins.str,
                 simple_office_site_name: _builtins.str,
                 sso_enabled: _builtins.bool,
                 sso_status: _builtins.bool,
                 status: _builtins.str,
                 sub_dns_addresses: Sequence[_builtins.str],
                 sub_domain_name: _builtins.str,
                 trust_password: _builtins.str,
                 vpc_id: _builtins.str,
                 vswitch_ids: Sequence[_builtins.str]):
        """
        :param _builtins.int bandwidth: The Internet Bandwidth Peak. It has been deprecated from version 1.142.0 and can be found in the new datasource alicloud_ecd_network_packages.
        :param _builtins.str cen_id: Cloud Enterprise Network Instance Id.
        :param _builtins.str cidr_block: Workspace Corresponds to the Security Office Network of IPv4 Segment.
        :param _builtins.str create_time: Workspace Creation Time.
        :param _builtins.str custom_security_group_id: Security Group ID.
        :param _builtins.str desktop_access_type: Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
        :param _builtins.str desktop_vpc_endpoint: The Desktop Vpc Endpoint.
        :param Sequence[_builtins.str] dns_addresses: Enterprise Ad Corresponding DNS Address.
        :param _builtins.str dns_user_name: Easy-to-Use DNS Name.
        :param _builtins.str domain_name: Enterprise of Ad Domain Name.
        :param _builtins.str domain_password: Domain of the User Who Will Administer This Target Application Password.
        :param _builtins.str domain_user_name: The Domain Administrator's Username.
        :param _builtins.bool enable_admin_access: Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        :param _builtins.bool enable_cross_desktop_access: Enable Cross-Desktop Access.
        :param _builtins.bool enable_internet_access: Whether the Open Internet Access Function.
        :param Sequence[_builtins.str] file_system_ids: NAS File System ID.
        :param _builtins.str id: The ID of the Simple Office Site.
        :param _builtins.bool mfa_enabled: Whether to Enable Multi-Factor Authentication MFA.
        :param _builtins.str network_package_id: Internet Access ID.
        :param _builtins.str office_site_id: The Workspace ID.
        :param _builtins.str office_site_type: Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        :param _builtins.str simple_office_site_name: The simple office site name.
        :param _builtins.bool sso_enabled: Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        :param _builtins.bool sso_status: Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        :param _builtins.str status: Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
        :param Sequence[_builtins.str] sub_dns_addresses: AD Subdomain of the DNS Address.
        :param _builtins.str sub_domain_name: AD Domain DNS Name.
        :param _builtins.str trust_password: AD Trust Password.
        :param _builtins.str vpc_id: Security Office VPC ID.
        :param Sequence[_builtins.str] vswitch_ids: The vswitch ids.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_security_group_id", custom_security_group_id)
        pulumi.set(__self__, "desktop_access_type", desktop_access_type)
        pulumi.set(__self__, "desktop_vpc_endpoint", desktop_vpc_endpoint)
        pulumi.set(__self__, "dns_addresses", dns_addresses)
        pulumi.set(__self__, "dns_user_name", dns_user_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_password", domain_password)
        pulumi.set(__self__, "domain_user_name", domain_user_name)
        pulumi.set(__self__, "enable_admin_access", enable_admin_access)
        pulumi.set(__self__, "enable_cross_desktop_access", enable_cross_desktop_access)
        pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        pulumi.set(__self__, "file_system_ids", file_system_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        pulumi.set(__self__, "network_package_id", network_package_id)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_type", office_site_type)
        pulumi.set(__self__, "simple_office_site_name", simple_office_site_name)
        pulumi.set(__self__, "sso_enabled", sso_enabled)
        pulumi.set(__self__, "sso_status", sso_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_dns_addresses", sub_dns_addresses)
        pulumi.set(__self__, "sub_domain_name", sub_domain_name)
        pulumi.set(__self__, "trust_password", trust_password)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_ids", vswitch_ids)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Field 'bandwidth' has been deprecated from provider version 1.142.0.""")
    def bandwidth(self) -> _builtins.int:
        """
        The Internet Bandwidth Peak. It has been deprecated from version 1.142.0 and can be found in the new datasource alicloud_ecd_network_packages.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> _builtins.str:
        """
        Cloud Enterprise Network Instance Id.
        """
        return pulumi.get(self, "cen_id")

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> _builtins.str:
        """
        Workspace Corresponds to the Security Office Network of IPv4 Segment.
        """
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Workspace Creation Time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customSecurityGroupId")
    def custom_security_group_id(self) -> _builtins.str:
        """
        Security Group ID.
        """
        return pulumi.get(self, "custom_security_group_id")

    @_builtins.property
    @pulumi.getter(name="desktopAccessType")
    def desktop_access_type(self) -> _builtins.str:
        """
        Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
        """
        return pulumi.get(self, "desktop_access_type")

    @_builtins.property
    @pulumi.getter(name="desktopVpcEndpoint")
    def desktop_vpc_endpoint(self) -> _builtins.str:
        """
        The Desktop Vpc Endpoint.
        """
        return pulumi.get(self, "desktop_vpc_endpoint")

    @_builtins.property
    @pulumi.getter(name="dnsAddresses")
    def dns_addresses(self) -> Sequence[_builtins.str]:
        """
        Enterprise Ad Corresponding DNS Address.
        """
        return pulumi.get(self, "dns_addresses")

    @_builtins.property
    @pulumi.getter(name="dnsUserName")
    def dns_user_name(self) -> _builtins.str:
        """
        Easy-to-Use DNS Name.
        """
        return pulumi.get(self, "dns_user_name")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Enterprise of Ad Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainPassword")
    def domain_password(self) -> _builtins.str:
        """
        Domain of the User Who Will Administer This Target Application Password.
        """
        return pulumi.get(self, "domain_password")

    @_builtins.property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> _builtins.str:
        """
        The Domain Administrator's Username.
        """
        return pulumi.get(self, "domain_user_name")

    @_builtins.property
    @pulumi.getter(name="enableAdminAccess")
    def enable_admin_access(self) -> _builtins.bool:
        """
        Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        """
        return pulumi.get(self, "enable_admin_access")

    @_builtins.property
    @pulumi.getter(name="enableCrossDesktopAccess")
    def enable_cross_desktop_access(self) -> _builtins.bool:
        """
        Enable Cross-Desktop Access.
        """
        return pulumi.get(self, "enable_cross_desktop_access")

    @_builtins.property
    @pulumi.getter(name="enableInternetAccess")
    @_utilities.deprecated("""Field 'enable_internet_access' has been deprecated from provider version 1.142.0.""")
    def enable_internet_access(self) -> _builtins.bool:
        """
        Whether the Open Internet Access Function.
        """
        return pulumi.get(self, "enable_internet_access")

    @_builtins.property
    @pulumi.getter(name="fileSystemIds")
    def file_system_ids(self) -> Sequence[_builtins.str]:
        """
        NAS File System ID.
        """
        return pulumi.get(self, "file_system_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Simple Office Site.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> _builtins.bool:
        """
        Whether to Enable Multi-Factor Authentication MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @_builtins.property
    @pulumi.getter(name="networkPackageId")
    def network_package_id(self) -> _builtins.str:
        """
        Internet Access ID.
        """
        return pulumi.get(self, "network_package_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> _builtins.str:
        """
        The Workspace ID.
        """
        return pulumi.get(self, "office_site_id")

    @_builtins.property
    @pulumi.getter(name="officeSiteType")
    def office_site_type(self) -> _builtins.str:
        """
        Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        """
        return pulumi.get(self, "office_site_type")

    @_builtins.property
    @pulumi.getter(name="simpleOfficeSiteName")
    def simple_office_site_name(self) -> _builtins.str:
        """
        The simple office site name.
        """
        return pulumi.get(self, "simple_office_site_name")

    @_builtins.property
    @pulumi.getter(name="ssoEnabled")
    def sso_enabled(self) -> _builtins.bool:
        """
        Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        """
        return pulumi.get(self, "sso_enabled")

    @_builtins.property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> _builtins.bool:
        """
        Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        """
        return pulumi.get(self, "sso_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subDnsAddresses")
    def sub_dns_addresses(self) -> Sequence[_builtins.str]:
        """
        AD Subdomain of the DNS Address.
        """
        return pulumi.get(self, "sub_dns_addresses")

    @_builtins.property
    @pulumi.getter(name="subDomainName")
    def sub_domain_name(self) -> _builtins.str:
        """
        AD Domain DNS Name.
        """
        return pulumi.get(self, "sub_domain_name")

    @_builtins.property
    @pulumi.getter(name="trustPassword")
    def trust_password(self) -> _builtins.str:
        """
        AD Trust Password.
        """
        return pulumi.get(self, "trust_password")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Security Office VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Sequence[_builtins.str]:
        """
        The vswitch ids.
        """
        return pulumi.get(self, "vswitch_ids")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 desktop_id: _builtins.str,
                 id: _builtins.str,
                 progress: _builtins.str,
                 remain_time: _builtins.int,
                 snapshot_id: _builtins.str,
                 snapshot_name: _builtins.str,
                 snapshot_type: _builtins.str,
                 source_disk_size: _builtins.str,
                 source_disk_type: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str create_time: The time when the snapshot was created.
        :param _builtins.str description: The description of the snapshot.
        :param _builtins.str desktop_id: The ID of the cloud desktop to which the snapshot belongs.
        :param _builtins.str id: The ID of the Snapshot.
        :param _builtins.str progress: The progress of creating the snapshot.
        :param _builtins.int remain_time: The remaining time that is required to create the snapshot. Unit: seconds.
        :param _builtins.str snapshot_id: The ID of the snapshot.
        :param _builtins.str snapshot_name: The name of the snapshot.
        :param _builtins.str snapshot_type: The type of the snapshot.
        :param _builtins.str source_disk_size: The capacity of the source disk. Unit: GiB.
        :param _builtins.str source_disk_type: The type of the source disk.
        :param _builtins.str status: The status of the snapshot.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "desktop_id", desktop_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "remain_time", remain_time)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)
        pulumi.set(__self__, "snapshot_type", snapshot_type)
        pulumi.set(__self__, "source_disk_size", source_disk_size)
        pulumi.set(__self__, "source_disk_type", source_disk_type)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        The time when the snapshot was created.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="desktopId")
    def desktop_id(self) -> _builtins.str:
        """
        The ID of the cloud desktop to which the snapshot belongs.
        """
        return pulumi.get(self, "desktop_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Snapshot.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.str:
        """
        The progress of creating the snapshot.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="remainTime")
    def remain_time(self) -> _builtins.int:
        """
        The remaining time that is required to create the snapshot. Unit: seconds.
        """
        return pulumi.get(self, "remain_time")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> _builtins.str:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @_builtins.property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> _builtins.str:
        """
        The type of the snapshot.
        """
        return pulumi.get(self, "snapshot_type")

    @_builtins.property
    @pulumi.getter(name="sourceDiskSize")
    def source_disk_size(self) -> _builtins.str:
        """
        The capacity of the source disk. Unit: GiB.
        """
        return pulumi.get(self, "source_disk_size")

    @_builtins.property
    @pulumi.getter(name="sourceDiskType")
    def source_disk_type(self) -> _builtins.str:
        """
        The type of the source disk.
        """
        return pulumi.get(self, "source_disk_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the snapshot.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str,
                 end_user_id: _builtins.str,
                 id: _builtins.str,
                 phone: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str email: The email of the user email.
        :param _builtins.str end_user_id: The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
        :param _builtins.str id: The ID of the user id.
        :param _builtins.str phone: The phone of the mobile phone number.
        :param _builtins.str status: The status of the resource.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "end_user_id", end_user_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        The email of the user email.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="endUserId")
    def end_user_id(self) -> _builtins.str:
        """
        The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
        """
        return pulumi.get(self, "end_user_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the user id.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def phone(self) -> _builtins.str:
        """
        The phone of the mobile phone number.
        """
        return pulumi.get(self, "phone")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 zone_id: _builtins.str):
        """
        :param _builtins.str zone_id: String to filter results by zone id.
        """
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        """
        String to filter results by zone id.
        """
        return pulumi.get(self, "zone_id")


