# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBackupPlansPlanResult',
    'GetClustersClusterResult',
    'GetDataCentersCenterResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class GetBackupPlansPlanResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 backup_period: str,
                 backup_time: str,
                 cluster_id: str,
                 create_time: str,
                 data_center_id: str,
                 id: str,
                 retention_period: int):
        """
        :param bool active: Specifies whether to activate the backup plan.
        :param str backup_period: The backup cycle. Valid values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday.
        :param str backup_time: The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
        :param str cluster_id: The ID of the cluster for the backup.
        :param str create_time: The time when the backup plan was created.
        :param str data_center_id: The ID of the data center for the backup in the cluster.
        :param str id: The ID of the Backup Plan.
        :param int retention_period: The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days.
        """
        GetBackupPlansPlanResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            backup_period=backup_period,
            backup_time=backup_time,
            cluster_id=cluster_id,
            create_time=create_time,
            data_center_id=data_center_id,
            id=id,
            retention_period=retention_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: bool,
             backup_period: str,
             backup_time: str,
             cluster_id: str,
             create_time: str,
             data_center_id: str,
             id: str,
             retention_period: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'backupPeriod' in kwargs:
            backup_period = kwargs['backupPeriod']
        if 'backupTime' in kwargs:
            backup_time = kwargs['backupTime']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dataCenterId' in kwargs:
            data_center_id = kwargs['dataCenterId']
        if 'retentionPeriod' in kwargs:
            retention_period = kwargs['retentionPeriod']

        _setter("active", active)
        _setter("backup_period", backup_period)
        _setter("backup_time", backup_time)
        _setter("cluster_id", cluster_id)
        _setter("create_time", create_time)
        _setter("data_center_id", data_center_id)
        _setter("id", id)
        _setter("retention_period", retention_period)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Specifies whether to activate the backup plan.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="backupPeriod")
    def backup_period(self) -> str:
        """
        The backup cycle. Valid values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday.
        """
        return pulumi.get(self, "backup_period")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> str:
        """
        The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ID of the cluster for the backup.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the backup plan was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataCenterId")
    def data_center_id(self) -> str:
        """
        The ID of the data center for the backup in the cluster.
        """
        return pulumi.get(self, "data_center_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Backup Plan.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> int:
        """
        The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days.
        """
        return pulumi.get(self, "retention_period")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 created_time: str,
                 data_center_count: int,
                 expire_time: str,
                 id: str,
                 lock_mode: str,
                 major_version: str,
                 minor_version: str,
                 pay_type: str,
                 status: str,
                 tags: Optional[Mapping[str, Any]] = None):
        """
        :param str cluster_id: The ID of the Cassandra cluster.
        :param str cluster_name: The name of the Cassandra cluster.
        :param int data_center_count: The count of data centers
        :param str expire_time: The expire time of the cluster.
        :param str id: The ID of the Cassandra cluster.
        :param str lock_mode: The lock mode of the cluster.
        :param str major_version: The major version of the cluster.
        :param str minor_version: The minor version of the cluster.
        :param str pay_type: Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
        :param str status: Status of the cluster.
        :param Mapping[str, Any] tags: A mapping of tags to assign to the resource.
        """
        GetClustersClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            created_time=created_time,
            data_center_count=data_center_count,
            expire_time=expire_time,
            id=id,
            lock_mode=lock_mode,
            major_version=major_version,
            minor_version=minor_version,
            pay_type=pay_type,
            status=status,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: str,
             cluster_name: str,
             created_time: str,
             data_center_count: int,
             expire_time: str,
             id: str,
             lock_mode: str,
             major_version: str,
             minor_version: str,
             pay_type: str,
             status: str,
             tags: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'createdTime' in kwargs:
            created_time = kwargs['createdTime']
        if 'dataCenterCount' in kwargs:
            data_center_count = kwargs['dataCenterCount']
        if 'expireTime' in kwargs:
            expire_time = kwargs['expireTime']
        if 'lockMode' in kwargs:
            lock_mode = kwargs['lockMode']
        if 'majorVersion' in kwargs:
            major_version = kwargs['majorVersion']
        if 'minorVersion' in kwargs:
            minor_version = kwargs['minorVersion']
        if 'payType' in kwargs:
            pay_type = kwargs['payType']

        _setter("cluster_id", cluster_id)
        _setter("cluster_name", cluster_name)
        _setter("created_time", created_time)
        _setter("data_center_count", data_center_count)
        _setter("expire_time", expire_time)
        _setter("id", id)
        _setter("lock_mode", lock_mode)
        _setter("major_version", major_version)
        _setter("minor_version", minor_version)
        _setter("pay_type", pay_type)
        _setter("status", status)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ID of the Cassandra cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the Cassandra cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="dataCenterCount")
    def data_center_count(self) -> int:
        """
        The count of data centers
        """
        return pulumi.get(self, "data_center_count")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expire time of the cluster.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Cassandra cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> str:
        """
        The lock mode of the cluster.
        """
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter(name="majorVersion")
    def major_version(self) -> str:
        """
        The major version of the cluster.
        """
        return pulumi.get(self, "major_version")

    @property
    @pulumi.getter(name="minorVersion")
    def minor_version(self) -> str:
        """
        The minor version of the cluster.
        """
        return pulumi.get(self, "minor_version")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> str:
        """
        Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
        """
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        A mapping of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDataCentersCenterResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 commodity_instance: str,
                 created_time: str,
                 data_center_id: str,
                 data_center_name: str,
                 disk_size: int,
                 disk_type: str,
                 expire_time: str,
                 instance_type: str,
                 lock_mode: str,
                 node_count: int,
                 pay_type: str,
                 status: str,
                 vpc_id: str,
                 vswitch_id: str,
                 zone_id: str):
        """
        :param str cluster_id: The cluster id of dataCenters belongs to.
        :param str commodity_instance: The commodity ID of the Cassandra dataCenter.
        :param str data_center_id: The id of the Cassandra dataCenter.
        :param str data_center_name: The name of the Cassandra dataCenter.
        :param int disk_size: One node disk size, unit:GB.
        :param str disk_type: Cloud_ssd or cloud_efficiency.
        :param str expire_time: The expire time of the dataCenter.
        :param str instance_type: The instance type of the Cassandra dataCenter, eg: cassandra.c.large.
        :param str lock_mode: The lock mode of the dataCenter.
        :param int node_count: The node count of dataCenter.
        :param str pay_type: Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
        :param str status: Status of the dataCenter.
        :param str vpc_id: VPC ID the dataCenter belongs to.
        :param str vswitch_id: VSwitch ID the dataCenter belongs to.
        :param str zone_id: Zone ID the dataCenter belongs to.
        """
        GetDataCentersCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            commodity_instance=commodity_instance,
            created_time=created_time,
            data_center_id=data_center_id,
            data_center_name=data_center_name,
            disk_size=disk_size,
            disk_type=disk_type,
            expire_time=expire_time,
            instance_type=instance_type,
            lock_mode=lock_mode,
            node_count=node_count,
            pay_type=pay_type,
            status=status,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: str,
             commodity_instance: str,
             created_time: str,
             data_center_id: str,
             data_center_name: str,
             disk_size: int,
             disk_type: str,
             expire_time: str,
             instance_type: str,
             lock_mode: str,
             node_count: int,
             pay_type: str,
             status: str,
             vpc_id: str,
             vswitch_id: str,
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'commodityInstance' in kwargs:
            commodity_instance = kwargs['commodityInstance']
        if 'createdTime' in kwargs:
            created_time = kwargs['createdTime']
        if 'dataCenterId' in kwargs:
            data_center_id = kwargs['dataCenterId']
        if 'dataCenterName' in kwargs:
            data_center_name = kwargs['dataCenterName']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'diskType' in kwargs:
            disk_type = kwargs['diskType']
        if 'expireTime' in kwargs:
            expire_time = kwargs['expireTime']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'lockMode' in kwargs:
            lock_mode = kwargs['lockMode']
        if 'nodeCount' in kwargs:
            node_count = kwargs['nodeCount']
        if 'payType' in kwargs:
            pay_type = kwargs['payType']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("cluster_id", cluster_id)
        _setter("commodity_instance", commodity_instance)
        _setter("created_time", created_time)
        _setter("data_center_id", data_center_id)
        _setter("data_center_name", data_center_name)
        _setter("disk_size", disk_size)
        _setter("disk_type", disk_type)
        _setter("expire_time", expire_time)
        _setter("instance_type", instance_type)
        _setter("lock_mode", lock_mode)
        _setter("node_count", node_count)
        _setter("pay_type", pay_type)
        _setter("status", status)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of dataCenters belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="commodityInstance")
    def commodity_instance(self) -> str:
        """
        The commodity ID of the Cassandra dataCenter.
        """
        return pulumi.get(self, "commodity_instance")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="dataCenterId")
    def data_center_id(self) -> str:
        """
        The id of the Cassandra dataCenter.
        """
        return pulumi.get(self, "data_center_id")

    @property
    @pulumi.getter(name="dataCenterName")
    def data_center_name(self) -> str:
        """
        The name of the Cassandra dataCenter.
        """
        return pulumi.get(self, "data_center_name")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        One node disk size, unit:GB.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Cloud_ssd or cloud_efficiency.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expire time of the dataCenter.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The instance type of the Cassandra dataCenter, eg: cassandra.c.large.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> str:
        """
        The lock mode of the dataCenter.
        """
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The node count of dataCenter.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> str:
        """
        Billing method. Value options are `Subscription` for Pay-As-You-Go and `PayAsYouGo` for yearly or monthly subscription.
        """
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the dataCenter.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID the dataCenter belongs to.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        VSwitch ID the dataCenter belongs to.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Zone ID the dataCenter belongs to.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 multi_zone_ids: Sequence[str]):
        """
        :param str id: ID of the zone.
        :param Sequence[str] multi_zone_ids: A list of zone ids in which the multi zone.
        """
        GetZonesZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            multi_zone_ids=multi_zone_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             multi_zone_ids: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'multiZoneIds' in kwargs:
            multi_zone_ids = kwargs['multiZoneIds']

        _setter("id", id)
        _setter("multi_zone_ids", multi_zone_ids)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multiZoneIds")
    def multi_zone_ids(self) -> Sequence[str]:
        """
        A list of zone ids in which the multi zone.
        """
        return pulumi.get(self, "multi_zone_ids")


