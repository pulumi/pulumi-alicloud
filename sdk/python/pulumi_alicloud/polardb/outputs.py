# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterDbClusterIpArray',
    'ClusterParameter',
    'ParameterGroupParameter',
    'GetAccountsAccountResult',
    'GetAccountsAccountDatabasePrivilegeResult',
    'GetClustersClusterResult',
    'GetClustersClusterDbNodeResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesDatabaseAccountResult',
    'GetEndpointsEndpointResult',
    'GetEndpointsEndpointAddressItemResult',
    'GetGlobalDatabaseNetworksNetworkResult',
    'GetGlobalDatabaseNetworksNetworkDbClusterResult',
    'GetNodeClassesClassResult',
    'GetNodeClassesClassSupportedEngineResult',
    'GetNodeClassesClassSupportedEngineAvailableResourceResult',
    'GetParameterGroupsGroupResult',
    'GetZonesZoneResult',
]

@pulumi.output_type
class ClusterDbClusterIpArray(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbClusterIpArrayName":
            suggest = "db_cluster_ip_array_name"
        elif key == "modifyMode":
            suggest = "modify_mode"
        elif key == "securityIps":
            suggest = "security_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDbClusterIpArray. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDbClusterIpArray.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDbClusterIpArray.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_cluster_ip_array_name: Optional[str] = None,
                 modify_mode: Optional[str] = None,
                 security_ips: Optional[Sequence[str]] = None):
        """
        :param str db_cluster_ip_array_name: The name of the IP whitelist group. The group name must be 2 to 120 characters in length and consists of lowercase letters and digits. It must start with a letter, and end with a letter or a digit.
               **NOTE:** If the specified whitelist group name does not exist, the whitelist group is created. If the specified whitelist group name exists, the whitelist group is modified. If you do not specify this parameter, the default group is modified. You can create a maximum of 50 IP whitelist groups for a cluster.
        :param str modify_mode: The method for modifying the IP whitelist. Valid values are `Cover`, `Append`, `Delete`.
               **NOTE:** There does not recommend setting modify_mode to `Append` or `Delete` and it will bring a potential diff error.
        :param Sequence[str] security_ips: List of IP addresses allowed to access all databases of a cluster. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]).
        """
        ClusterDbClusterIpArray._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db_cluster_ip_array_name=db_cluster_ip_array_name,
            modify_mode=modify_mode,
            security_ips=security_ips,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db_cluster_ip_array_name: Optional[str] = None,
             modify_mode: Optional[str] = None,
             security_ips: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dbClusterIpArrayName' in kwargs:
            db_cluster_ip_array_name = kwargs['dbClusterIpArrayName']
        if 'modifyMode' in kwargs:
            modify_mode = kwargs['modifyMode']
        if 'securityIps' in kwargs:
            security_ips = kwargs['securityIps']

        if db_cluster_ip_array_name is not None:
            _setter("db_cluster_ip_array_name", db_cluster_ip_array_name)
        if modify_mode is not None:
            _setter("modify_mode", modify_mode)
        if security_ips is not None:
            _setter("security_ips", security_ips)

    @property
    @pulumi.getter(name="dbClusterIpArrayName")
    def db_cluster_ip_array_name(self) -> Optional[str]:
        """
        The name of the IP whitelist group. The group name must be 2 to 120 characters in length and consists of lowercase letters and digits. It must start with a letter, and end with a letter or a digit.
        **NOTE:** If the specified whitelist group name does not exist, the whitelist group is created. If the specified whitelist group name exists, the whitelist group is modified. If you do not specify this parameter, the default group is modified. You can create a maximum of 50 IP whitelist groups for a cluster.
        """
        return pulumi.get(self, "db_cluster_ip_array_name")

    @property
    @pulumi.getter(name="modifyMode")
    def modify_mode(self) -> Optional[str]:
        """
        The method for modifying the IP whitelist. Valid values are `Cover`, `Append`, `Delete`.
        **NOTE:** There does not recommend setting modify_mode to `Append` or `Delete` and it will bring a potential diff error.
        """
        return pulumi.get(self, "modify_mode")

    @property
    @pulumi.getter(name="securityIps")
    def security_ips(self) -> Optional[Sequence[str]]:
        """
        List of IP addresses allowed to access all databases of a cluster. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]).
        """
        return pulumi.get(self, "security_ips")


@pulumi.output_type
class ClusterParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Kernel parameter name.
        :param str value: Kernel parameter value.
        """
        ClusterParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Kernel parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Kernel parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ParameterGroupParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParameterGroupParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParameterGroupParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParameterGroupParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: str,
                 param_value: str):
        """
        :param str param_name: The name of a parameter in the parameter template.
        :param str param_value: The value of a parameter in the parameter template.
        """
        ParameterGroupParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        The name of a parameter in the parameter template.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        The value of a parameter in the parameter template.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_description: str,
                 account_lock_state: str,
                 account_name: str,
                 account_status: str,
                 account_type: str,
                 database_privileges: Sequence['outputs.GetAccountsAccountDatabasePrivilegeResult']):
        """
        :param str account_description: Account description.
        :param str account_lock_state: Account lock state, Valid values are `Lock`, `UnLock`.
        :param str account_name: Account name.
        :param str account_status: Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
        :param str account_type: Account type, Valid values are `Normal`, `Super`.
        :param Sequence['GetAccountsAccountDatabasePrivilegeArgs'] database_privileges: A list of database privilege. Each element contains the following attributes.
        """
        GetAccountsAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_description=account_description,
            account_lock_state=account_lock_state,
            account_name=account_name,
            account_status=account_status,
            account_type=account_type,
            database_privileges=database_privileges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_description: str,
             account_lock_state: str,
             account_name: str,
             account_status: str,
             account_type: str,
             database_privileges: Sequence['outputs.GetAccountsAccountDatabasePrivilegeResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountDescription' in kwargs:
            account_description = kwargs['accountDescription']
        if 'accountLockState' in kwargs:
            account_lock_state = kwargs['accountLockState']
        if 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if 'accountStatus' in kwargs:
            account_status = kwargs['accountStatus']
        if 'accountType' in kwargs:
            account_type = kwargs['accountType']
        if 'databasePrivileges' in kwargs:
            database_privileges = kwargs['databasePrivileges']

        _setter("account_description", account_description)
        _setter("account_lock_state", account_lock_state)
        _setter("account_name", account_name)
        _setter("account_status", account_status)
        _setter("account_type", account_type)
        _setter("database_privileges", database_privileges)

    @property
    @pulumi.getter(name="accountDescription")
    def account_description(self) -> str:
        """
        Account description.
        """
        return pulumi.get(self, "account_description")

    @property
    @pulumi.getter(name="accountLockState")
    def account_lock_state(self) -> str:
        """
        Account lock state, Valid values are `Lock`, `UnLock`.
        """
        return pulumi.get(self, "account_lock_state")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> str:
        """
        Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
        """
        return pulumi.get(self, "account_status")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        Account type, Valid values are `Normal`, `Super`.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Sequence['outputs.GetAccountsAccountDatabasePrivilegeResult']:
        """
        A list of database privilege. Each element contains the following attributes.
        """
        return pulumi.get(self, "database_privileges")


@pulumi.output_type
class GetAccountsAccountDatabasePrivilegeResult(dict):
    def __init__(__self__, *,
                 account_privilege: str,
                 db_name: str):
        """
        :param str account_privilege: Account privilege of database
        :param str db_name: The account owned database name
        """
        GetAccountsAccountDatabasePrivilegeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_privilege=account_privilege,
            db_name=db_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_privilege: str,
             db_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountPrivilege' in kwargs:
            account_privilege = kwargs['accountPrivilege']
        if 'dbName' in kwargs:
            db_name = kwargs['dbName']

        _setter("account_privilege", account_privilege)
        _setter("db_name", db_name)

    @property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> str:
        """
        Account privilege of database
        """
        return pulumi.get(self, "account_privilege")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        The account owned database name
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 charge_type: str,
                 connection_string: str,
                 create_time: str,
                 db_node_class: str,
                 db_node_number: int,
                 db_nodes: Sequence['outputs.GetClustersClusterDbNodeResult'],
                 db_type: str,
                 db_version: str,
                 delete_lock: int,
                 description: str,
                 engine: str,
                 expire_time: str,
                 expired: str,
                 id: str,
                 lock_mode: str,
                 network_type: str,
                 port: str,
                 region_id: str,
                 status: str,
                 storage_used: int,
                 vpc_id: str,
                 zone_id: str):
        """
        :param str charge_type: Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
        :param str connection_string: PolarDB cluster connection string.
        :param str create_time: The create_time of the db_nodes.
        :param str db_node_class: The db_node_class of the db_nodes.
        :param int db_node_number: The DBNodeNumber of the PolarDB cluster.
        :param Sequence['GetClustersClusterDbNodeArgs'] db_nodes: The DBNodes of the PolarDB cluster.
        :param str db_type: Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
        :param str db_version: The DBVersion of the PolarDB cluster.
        :param int delete_lock: The DeleteLock of the PolarDB cluster.
        :param str description: The description of the PolarDB cluster.
        :param str engine: Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
        :param str expire_time: Expiration time. Pay-As-You-Go clusters never expire.
        :param str expired: The expired of the PolarDB cluster.
        :param str id: The ID of the PolarDB cluster.
        :param str lock_mode: The LockMode of the PolarDB cluster.
        :param str network_type: The DBClusterNetworkType of the PolarDB cluster.
        :param str port: PolarDB cluster connection port.
        :param str region_id: The region_id of the db_nodes.
        :param str status: status of the cluster.
        :param int storage_used: The StorageUsed of the PolarDB cluster.
        :param str vpc_id: ID of the VPC the cluster belongs to.
        :param str zone_id: The zone_id of the db_nodes.
        """
        GetClustersClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            charge_type=charge_type,
            connection_string=connection_string,
            create_time=create_time,
            db_node_class=db_node_class,
            db_node_number=db_node_number,
            db_nodes=db_nodes,
            db_type=db_type,
            db_version=db_version,
            delete_lock=delete_lock,
            description=description,
            engine=engine,
            expire_time=expire_time,
            expired=expired,
            id=id,
            lock_mode=lock_mode,
            network_type=network_type,
            port=port,
            region_id=region_id,
            status=status,
            storage_used=storage_used,
            vpc_id=vpc_id,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             charge_type: str,
             connection_string: str,
             create_time: str,
             db_node_class: str,
             db_node_number: int,
             db_nodes: Sequence['outputs.GetClustersClusterDbNodeResult'],
             db_type: str,
             db_version: str,
             delete_lock: int,
             description: str,
             engine: str,
             expire_time: str,
             expired: str,
             id: str,
             lock_mode: str,
             network_type: str,
             port: str,
             region_id: str,
             status: str,
             storage_used: int,
             vpc_id: str,
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'chargeType' in kwargs:
            charge_type = kwargs['chargeType']
        if 'connectionString' in kwargs:
            connection_string = kwargs['connectionString']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dbNodeClass' in kwargs:
            db_node_class = kwargs['dbNodeClass']
        if 'dbNodeNumber' in kwargs:
            db_node_number = kwargs['dbNodeNumber']
        if 'dbNodes' in kwargs:
            db_nodes = kwargs['dbNodes']
        if 'dbType' in kwargs:
            db_type = kwargs['dbType']
        if 'dbVersion' in kwargs:
            db_version = kwargs['dbVersion']
        if 'deleteLock' in kwargs:
            delete_lock = kwargs['deleteLock']
        if 'expireTime' in kwargs:
            expire_time = kwargs['expireTime']
        if 'lockMode' in kwargs:
            lock_mode = kwargs['lockMode']
        if 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if 'storageUsed' in kwargs:
            storage_used = kwargs['storageUsed']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("charge_type", charge_type)
        _setter("connection_string", connection_string)
        _setter("create_time", create_time)
        _setter("db_node_class", db_node_class)
        _setter("db_node_number", db_node_number)
        _setter("db_nodes", db_nodes)
        _setter("db_type", db_type)
        _setter("db_version", db_version)
        _setter("delete_lock", delete_lock)
        _setter("description", description)
        _setter("engine", engine)
        _setter("expire_time", expire_time)
        _setter("expired", expired)
        _setter("id", id)
        _setter("lock_mode", lock_mode)
        _setter("network_type", network_type)
        _setter("port", port)
        _setter("region_id", region_id)
        _setter("status", status)
        _setter("storage_used", storage_used)
        _setter("vpc_id", vpc_id)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        Billing method. Value options: `PostPaid` for Pay-As-You-Go and `PrePaid` for subscription.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        PolarDB cluster connection string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create_time of the db_nodes.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbNodeClass")
    def db_node_class(self) -> str:
        """
        The db_node_class of the db_nodes.
        """
        return pulumi.get(self, "db_node_class")

    @property
    @pulumi.getter(name="dbNodeNumber")
    def db_node_number(self) -> int:
        """
        The DBNodeNumber of the PolarDB cluster.
        """
        return pulumi.get(self, "db_node_number")

    @property
    @pulumi.getter(name="dbNodes")
    def db_nodes(self) -> Sequence['outputs.GetClustersClusterDbNodeResult']:
        """
        The DBNodes of the PolarDB cluster.
        """
        return pulumi.get(self, "db_nodes")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        """
        Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The DBVersion of the PolarDB cluster.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="deleteLock")
    def delete_lock(self) -> int:
        """
        The DeleteLock of the PolarDB cluster.
        """
        return pulumi.get(self, "delete_lock")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the PolarDB cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        Database type. Options are `MySQL`, `Oracle` and `PostgreSQL`. If no value is specified, all types are returned.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration time. Pay-As-You-Go clusters never expire.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def expired(self) -> str:
        """
        The expired of the PolarDB cluster.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the PolarDB cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> str:
        """
        The LockMode of the PolarDB cluster.
        """
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        The DBClusterNetworkType of the PolarDB cluster.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        PolarDB cluster connection port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region_id of the db_nodes.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageUsed")
    def storage_used(self) -> int:
        """
        The StorageUsed of the PolarDB cluster.
        """
        return pulumi.get(self, "storage_used")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC the cluster belongs to.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone_id of the db_nodes.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetClustersClusterDbNodeResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 db_node_class: str,
                 db_node_id: str,
                 db_node_role: str,
                 db_node_status: str,
                 max_connections: int,
                 max_iops: int,
                 region_id: str,
                 zone_id: str):
        """
        :param str create_time: The create_time of the db_nodes.
        :param str db_node_class: The db_node_class of the db_nodes.
        :param str db_node_id: The db_node_id of the db_nodes.
        :param str db_node_role: The db_node_role of the db_nodes.
        :param str db_node_status: The db_node_status of the db_nodes.
        :param int max_connections: The max_connections of the db_nodes.
        :param int max_iops: The max_iops of the db_nodes.
        :param str region_id: The region_id of the db_nodes.
        :param str zone_id: The zone_id of the db_nodes.
        """
        GetClustersClusterDbNodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            db_node_class=db_node_class,
            db_node_id=db_node_id,
            db_node_role=db_node_role,
            db_node_status=db_node_status,
            max_connections=max_connections,
            max_iops=max_iops,
            region_id=region_id,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             db_node_class: str,
             db_node_id: str,
             db_node_role: str,
             db_node_status: str,
             max_connections: int,
             max_iops: int,
             region_id: str,
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dbNodeClass' in kwargs:
            db_node_class = kwargs['dbNodeClass']
        if 'dbNodeId' in kwargs:
            db_node_id = kwargs['dbNodeId']
        if 'dbNodeRole' in kwargs:
            db_node_role = kwargs['dbNodeRole']
        if 'dbNodeStatus' in kwargs:
            db_node_status = kwargs['dbNodeStatus']
        if 'maxConnections' in kwargs:
            max_connections = kwargs['maxConnections']
        if 'maxIops' in kwargs:
            max_iops = kwargs['maxIops']
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("create_time", create_time)
        _setter("db_node_class", db_node_class)
        _setter("db_node_id", db_node_id)
        _setter("db_node_role", db_node_role)
        _setter("db_node_status", db_node_status)
        _setter("max_connections", max_connections)
        _setter("max_iops", max_iops)
        _setter("region_id", region_id)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create_time of the db_nodes.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbNodeClass")
    def db_node_class(self) -> str:
        """
        The db_node_class of the db_nodes.
        """
        return pulumi.get(self, "db_node_class")

    @property
    @pulumi.getter(name="dbNodeId")
    def db_node_id(self) -> str:
        """
        The db_node_id of the db_nodes.
        """
        return pulumi.get(self, "db_node_id")

    @property
    @pulumi.getter(name="dbNodeRole")
    def db_node_role(self) -> str:
        """
        The db_node_role of the db_nodes.
        """
        return pulumi.get(self, "db_node_role")

    @property
    @pulumi.getter(name="dbNodeStatus")
    def db_node_status(self) -> str:
        """
        The db_node_status of the db_nodes.
        """
        return pulumi.get(self, "db_node_status")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> int:
        """
        The max_connections of the db_nodes.
        """
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="maxIops")
    def max_iops(self) -> int:
        """
        The max_iops of the db_nodes.
        """
        return pulumi.get(self, "max_iops")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region_id of the db_nodes.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone_id of the db_nodes.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetDatabasesDatabaseAccountResult'],
                 character_set_name: str,
                 db_description: str,
                 db_name: str,
                 db_status: str,
                 engine: str):
        """
        :param Sequence['GetDatabasesDatabaseAccountArgs'] accounts: A list of accounts of database. Each element contains the following attributes.
        :param str character_set_name: The character set name of database.
        :param str db_description: Database description.
        :param str db_name: Database name.
        :param str db_status: The status of database.
        :param str engine: The engine of database.
        """
        GetDatabasesDatabaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accounts=accounts,
            character_set_name=character_set_name,
            db_description=db_description,
            db_name=db_name,
            db_status=db_status,
            engine=engine,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accounts: Sequence['outputs.GetDatabasesDatabaseAccountResult'],
             character_set_name: str,
             db_description: str,
             db_name: str,
             db_status: str,
             engine: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'characterSetName' in kwargs:
            character_set_name = kwargs['characterSetName']
        if 'dbDescription' in kwargs:
            db_description = kwargs['dbDescription']
        if 'dbName' in kwargs:
            db_name = kwargs['dbName']
        if 'dbStatus' in kwargs:
            db_status = kwargs['dbStatus']

        _setter("accounts", accounts)
        _setter("character_set_name", character_set_name)
        _setter("db_description", db_description)
        _setter("db_name", db_name)
        _setter("db_status", db_status)
        _setter("engine", engine)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetDatabasesDatabaseAccountResult']:
        """
        A list of accounts of database. Each element contains the following attributes.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> str:
        """
        The character set name of database.
        """
        return pulumi.get(self, "character_set_name")

    @property
    @pulumi.getter(name="dbDescription")
    def db_description(self) -> str:
        """
        Database description.
        """
        return pulumi.get(self, "db_description")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbStatus")
    def db_status(self) -> str:
        """
        The status of database.
        """
        return pulumi.get(self, "db_status")

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        The engine of database.
        """
        return pulumi.get(self, "engine")


@pulumi.output_type
class GetDatabasesDatabaseAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_status: str,
                 privilege_status: str):
        """
        :param str account_name: Account name.
        :param str account_status: Account status.
        :param str privilege_status: The privilege status of account.
        """
        GetDatabasesDatabaseAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_status=account_status,
            privilege_status=privilege_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: str,
             account_status: str,
             privilege_status: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if 'accountStatus' in kwargs:
            account_status = kwargs['accountStatus']
        if 'privilegeStatus' in kwargs:
            privilege_status = kwargs['privilegeStatus']

        _setter("account_name", account_name)
        _setter("account_status", account_status)
        _setter("privilege_status", privilege_status)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> str:
        """
        Account status.
        """
        return pulumi.get(self, "account_status")

    @property
    @pulumi.getter(name="privilegeStatus")
    def privilege_status(self) -> str:
        """
        The privilege status of account.
        """
        return pulumi.get(self, "privilege_status")


@pulumi.output_type
class GetEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 address_items: Sequence['outputs.GetEndpointsEndpointAddressItemResult'],
                 auto_add_new_nodes: str,
                 db_endpoint_id: str,
                 endpoint_config: str,
                 endpoint_type: str,
                 nodes: str,
                 read_write_mode: str):
        """
        :param Sequence['GetEndpointsEndpointAddressItemArgs'] address_items: A list of endpoint addresses. Each element contains the following attributes.
        :param str auto_add_new_nodes: Whether the new node is automatically added to the default cluster address.Options are `Enable` and `Disable`.
        :param str db_endpoint_id: endpoint of the cluster.
        :param str endpoint_config: The Endpoint configuration. `ConsistLevel`: session consistency level, value:`0`: final consistency,`1`: session consistency;`LoadBalanceStrategy`: load balancing strategy. Based on the automatic scheduling of load, the value is: `load`.
        :param str endpoint_type: Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
        :param str nodes: A list of nodes that connect to the address configuration.
        :param str read_write_mode: Read-write mode:`ReadWrite`: readable and writable (automatic read-write separation).`ReadOnly`: ReadOnly.
        """
        GetEndpointsEndpointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_items=address_items,
            auto_add_new_nodes=auto_add_new_nodes,
            db_endpoint_id=db_endpoint_id,
            endpoint_config=endpoint_config,
            endpoint_type=endpoint_type,
            nodes=nodes,
            read_write_mode=read_write_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_items: Sequence['outputs.GetEndpointsEndpointAddressItemResult'],
             auto_add_new_nodes: str,
             db_endpoint_id: str,
             endpoint_config: str,
             endpoint_type: str,
             nodes: str,
             read_write_mode: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressItems' in kwargs:
            address_items = kwargs['addressItems']
        if 'autoAddNewNodes' in kwargs:
            auto_add_new_nodes = kwargs['autoAddNewNodes']
        if 'dbEndpointId' in kwargs:
            db_endpoint_id = kwargs['dbEndpointId']
        if 'endpointConfig' in kwargs:
            endpoint_config = kwargs['endpointConfig']
        if 'endpointType' in kwargs:
            endpoint_type = kwargs['endpointType']
        if 'readWriteMode' in kwargs:
            read_write_mode = kwargs['readWriteMode']

        _setter("address_items", address_items)
        _setter("auto_add_new_nodes", auto_add_new_nodes)
        _setter("db_endpoint_id", db_endpoint_id)
        _setter("endpoint_config", endpoint_config)
        _setter("endpoint_type", endpoint_type)
        _setter("nodes", nodes)
        _setter("read_write_mode", read_write_mode)

    @property
    @pulumi.getter(name="addressItems")
    def address_items(self) -> Sequence['outputs.GetEndpointsEndpointAddressItemResult']:
        """
        A list of endpoint addresses. Each element contains the following attributes.
        """
        return pulumi.get(self, "address_items")

    @property
    @pulumi.getter(name="autoAddNewNodes")
    def auto_add_new_nodes(self) -> str:
        """
        Whether the new node is automatically added to the default cluster address.Options are `Enable` and `Disable`.
        """
        return pulumi.get(self, "auto_add_new_nodes")

    @property
    @pulumi.getter(name="dbEndpointId")
    def db_endpoint_id(self) -> str:
        """
        endpoint of the cluster.
        """
        return pulumi.get(self, "db_endpoint_id")

    @property
    @pulumi.getter(name="endpointConfig")
    def endpoint_config(self) -> str:
        """
        The Endpoint configuration. `ConsistLevel`: session consistency level, value:`0`: final consistency,`1`: session consistency;`LoadBalanceStrategy`: load balancing strategy. Based on the automatic scheduling of load, the value is: `load`.
        """
        return pulumi.get(self, "endpoint_config")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        Cluster address type.`Cluster`: the default address of the Cluster.`Primary`: Primary address.`Custom`: Custom cluster addresses.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter
    def nodes(self) -> str:
        """
        A list of nodes that connect to the address configuration.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> str:
        """
        Read-write mode:`ReadWrite`: readable and writable (automatic read-write separation).`ReadOnly`: ReadOnly.
        """
        return pulumi.get(self, "read_write_mode")


@pulumi.output_type
class GetEndpointsEndpointAddressItemResult(dict):
    def __init__(__self__, *,
                 connection_string: str,
                 ip_address: str,
                 net_type: str,
                 port: str,
                 vpc_id: str,
                 vswitch_id: str):
        """
        :param str connection_string: Connection instance string.
        :param str ip_address: The ip address of connection string.
        :param str net_type: IP network type:`Public` or `Private`.
        :param str port: Intranet connection port.
        :param str vpc_id: ID of the VPC the instance belongs to.
        :param str vswitch_id: ID of the VSwitch the cluster belongs to.
        """
        GetEndpointsEndpointAddressItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_string=connection_string,
            ip_address=ip_address,
            net_type=net_type,
            port=port,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_string: str,
             ip_address: str,
             net_type: str,
             port: str,
             vpc_id: str,
             vswitch_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'connectionString' in kwargs:
            connection_string = kwargs['connectionString']
        if 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if 'netType' in kwargs:
            net_type = kwargs['netType']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']

        _setter("connection_string", connection_string)
        _setter("ip_address", ip_address)
        _setter("net_type", net_type)
        _setter("port", port)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        Connection instance string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The ip address of connection string.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> str:
        """
        IP network type:`Public` or `Private`.
        """
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Intranet connection port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC the instance belongs to.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        ID of the VSwitch the cluster belongs to.
        """
        return pulumi.get(self, "vswitch_id")


@pulumi.output_type
class GetGlobalDatabaseNetworksNetworkResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 db_clusters: Sequence['outputs.GetGlobalDatabaseNetworksNetworkDbClusterResult'],
                 db_type: str,
                 db_version: str,
                 description: str,
                 gdn_id: str,
                 id: str,
                 status: str):
        """
        :param str create_time: The time when the Global Database Network was created. The time is in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
        :param Sequence['GetGlobalDatabaseNetworksNetworkDbClusterArgs'] db_clusters: The details of each cluster in the Global Database Network.
        :param str db_type: The type of the database engine. Only MySQL is supported.
        :param str db_version: The version number of the database engine. Only the 8.0 version is supported.
        :param str description: The description of the Global Database Network.
        :param str gdn_id: The ID of the Global Database Network.
        :param str id: The ID of the Global Database Network.
        :param str status: The status of the Global Database Network. Valid values:
        """
        GetGlobalDatabaseNetworksNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            db_clusters=db_clusters,
            db_type=db_type,
            db_version=db_version,
            description=description,
            gdn_id=gdn_id,
            id=id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             db_clusters: Sequence['outputs.GetGlobalDatabaseNetworksNetworkDbClusterResult'],
             db_type: str,
             db_version: str,
             description: str,
             gdn_id: str,
             id: str,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dbClusters' in kwargs:
            db_clusters = kwargs['dbClusters']
        if 'dbType' in kwargs:
            db_type = kwargs['dbType']
        if 'dbVersion' in kwargs:
            db_version = kwargs['dbVersion']
        if 'gdnId' in kwargs:
            gdn_id = kwargs['gdnId']

        _setter("create_time", create_time)
        _setter("db_clusters", db_clusters)
        _setter("db_type", db_type)
        _setter("db_version", db_version)
        _setter("description", description)
        _setter("gdn_id", gdn_id)
        _setter("id", id)
        _setter("status", status)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the Global Database Network was created. The time is in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbClusters")
    def db_clusters(self) -> Sequence['outputs.GetGlobalDatabaseNetworksNetworkDbClusterResult']:
        """
        The details of each cluster in the Global Database Network.
        """
        return pulumi.get(self, "db_clusters")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        """
        The type of the database engine. Only MySQL is supported.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The version number of the database engine. Only the 8.0 version is supported.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Global Database Network.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gdnId")
    def gdn_id(self) -> str:
        """
        The ID of the Global Database Network.
        """
        return pulumi.get(self, "gdn_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Global Database Network.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the Global Database Network. Valid values:
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGlobalDatabaseNetworksNetworkDbClusterResult(dict):
    def __init__(__self__, *,
                 db_cluster_id: str,
                 region_id: str,
                 role: str):
        """
        :param str db_cluster_id: The ID of the cluster.
        :param str region_id: The region ID of the cluster.
        :param str role: The role of the cluster.
        """
        GetGlobalDatabaseNetworksNetworkDbClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db_cluster_id=db_cluster_id,
            region_id=region_id,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db_cluster_id: str,
             region_id: str,
             role: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dbClusterId' in kwargs:
            db_cluster_id = kwargs['dbClusterId']
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']

        _setter("db_cluster_id", db_cluster_id)
        _setter("region_id", region_id)
        _setter("role", role)

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> str:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region ID of the cluster.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role of the cluster.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetNodeClassesClassResult(dict):
    def __init__(__self__, *,
                 supported_engines: Sequence['outputs.GetNodeClassesClassSupportedEngineResult'],
                 zone_id: str):
        """
        :param Sequence['GetNodeClassesClassSupportedEngineArgs'] supported_engines: A list of PolarDB node classes in the zone.
        :param str zone_id: The Zone to launch the PolarDB cluster.
        """
        GetNodeClassesClassResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            supported_engines=supported_engines,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             supported_engines: Sequence['outputs.GetNodeClassesClassSupportedEngineResult'],
             zone_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'supportedEngines' in kwargs:
            supported_engines = kwargs['supportedEngines']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        _setter("supported_engines", supported_engines)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="supportedEngines")
    def supported_engines(self) -> Sequence['outputs.GetNodeClassesClassSupportedEngineResult']:
        """
        A list of PolarDB node classes in the zone.
        """
        return pulumi.get(self, "supported_engines")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The Zone to launch the PolarDB cluster.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNodeClassesClassSupportedEngineResult(dict):
    def __init__(__self__, *,
                 available_resources: Sequence['outputs.GetNodeClassesClassSupportedEngineAvailableResourceResult'],
                 engine: str):
        """
        :param Sequence['GetNodeClassesClassSupportedEngineAvailableResourceArgs'] available_resources: A list of PolarDB node available classes.
        :param str engine: In the zone, the database type supports classes in the following available_resources.
        """
        GetNodeClassesClassSupportedEngineResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available_resources=available_resources,
            engine=engine,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available_resources: Sequence['outputs.GetNodeClassesClassSupportedEngineAvailableResourceResult'],
             engine: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availableResources' in kwargs:
            available_resources = kwargs['availableResources']

        _setter("available_resources", available_resources)
        _setter("engine", engine)

    @property
    @pulumi.getter(name="availableResources")
    def available_resources(self) -> Sequence['outputs.GetNodeClassesClassSupportedEngineAvailableResourceResult']:
        """
        A list of PolarDB node available classes.
        """
        return pulumi.get(self, "available_resources")

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        In the zone, the database type supports classes in the following available_resources.
        """
        return pulumi.get(self, "engine")


@pulumi.output_type
class GetNodeClassesClassSupportedEngineAvailableResourceResult(dict):
    def __init__(__self__, *,
                 db_node_class: str):
        """
        :param str db_node_class: The PolarDB node class type by the user.
        """
        GetNodeClassesClassSupportedEngineAvailableResourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db_node_class=db_node_class,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db_node_class: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dbNodeClass' in kwargs:
            db_node_class = kwargs['dbNodeClass']

        _setter("db_node_class", db_node_class)

    @property
    @pulumi.getter(name="dbNodeClass")
    def db_node_class(self) -> str:
        """
        The PolarDB node class type by the user.
        """
        return pulumi.get(self, "db_node_class")


@pulumi.output_type
class GetParameterGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 db_type: str,
                 db_version: str,
                 force_restart: str,
                 id: str,
                 parameter_counts: int,
                 parameter_group_desc: str,
                 parameter_group_id: str,
                 parameter_group_name: str,
                 parameter_group_type: str):
        """
        :param str create_time: The time when the parameter template was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        :param str db_type: The type of the database engine. Only `MySQL` is supported.
        :param str db_version: The version number of the database engine. Valid values: `5.6`, `5.7`, `8.0`.
        :param str force_restart: Indicates whether to restart the cluster when this parameter template is applied.
        :param str id: The ID of the Parameter Group.
        :param int parameter_counts: The number of parameters in the parameter template.
        :param str parameter_group_desc: The description of the parameter template.
        :param str parameter_group_id: The ID of the Parameter Group.
        :param str parameter_group_name: The name of the parameter template.
        :param str parameter_group_type: The type of the parameter template.
        """
        GetParameterGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            db_type=db_type,
            db_version=db_version,
            force_restart=force_restart,
            id=id,
            parameter_counts=parameter_counts,
            parameter_group_desc=parameter_group_desc,
            parameter_group_id=parameter_group_id,
            parameter_group_name=parameter_group_name,
            parameter_group_type=parameter_group_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             db_type: str,
             db_version: str,
             force_restart: str,
             id: str,
             parameter_counts: int,
             parameter_group_desc: str,
             parameter_group_id: str,
             parameter_group_name: str,
             parameter_group_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'dbType' in kwargs:
            db_type = kwargs['dbType']
        if 'dbVersion' in kwargs:
            db_version = kwargs['dbVersion']
        if 'forceRestart' in kwargs:
            force_restart = kwargs['forceRestart']
        if 'parameterCounts' in kwargs:
            parameter_counts = kwargs['parameterCounts']
        if 'parameterGroupDesc' in kwargs:
            parameter_group_desc = kwargs['parameterGroupDesc']
        if 'parameterGroupId' in kwargs:
            parameter_group_id = kwargs['parameterGroupId']
        if 'parameterGroupName' in kwargs:
            parameter_group_name = kwargs['parameterGroupName']
        if 'parameterGroupType' in kwargs:
            parameter_group_type = kwargs['parameterGroupType']

        _setter("create_time", create_time)
        _setter("db_type", db_type)
        _setter("db_version", db_version)
        _setter("force_restart", force_restart)
        _setter("id", id)
        _setter("parameter_counts", parameter_counts)
        _setter("parameter_group_desc", parameter_group_desc)
        _setter("parameter_group_id", parameter_group_id)
        _setter("parameter_group_name", parameter_group_name)
        _setter("parameter_group_type", parameter_group_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the parameter template was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        """
        The type of the database engine. Only `MySQL` is supported.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The version number of the database engine. Valid values: `5.6`, `5.7`, `8.0`.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> str:
        """
        Indicates whether to restart the cluster when this parameter template is applied.
        """
        return pulumi.get(self, "force_restart")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Parameter Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="parameterCounts")
    def parameter_counts(self) -> int:
        """
        The number of parameters in the parameter template.
        """
        return pulumi.get(self, "parameter_counts")

    @property
    @pulumi.getter(name="parameterGroupDesc")
    def parameter_group_desc(self) -> str:
        """
        The description of the parameter template.
        """
        return pulumi.get(self, "parameter_group_desc")

    @property
    @pulumi.getter(name="parameterGroupId")
    def parameter_group_id(self) -> str:
        """
        The ID of the Parameter Group.
        """
        return pulumi.get(self, "parameter_group_id")

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> str:
        """
        The name of the parameter template.
        """
        return pulumi.get(self, "parameter_group_name")

    @property
    @pulumi.getter(name="parameterGroupType")
    def parameter_group_type(self) -> str:
        """
        The type of the parameter template.
        """
        return pulumi.get(self, "parameter_group_type")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 multi_zone_ids: Sequence[str]):
        """
        :param str id: ID of the zone.
        :param Sequence[str] multi_zone_ids: A list of zone ids in which the multi zone.
        """
        GetZonesZoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            multi_zone_ids=multi_zone_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             multi_zone_ids: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'multiZoneIds' in kwargs:
            multi_zone_ids = kwargs['multiZoneIds']

        _setter("id", id)
        _setter("multi_zone_ids", multi_zone_ids)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="multiZoneIds")
    def multi_zone_ids(self) -> Sequence[str]:
        """
        A list of zone ids in which the multi zone.
        """
        return pulumi.get(self, "multi_zone_ids")


