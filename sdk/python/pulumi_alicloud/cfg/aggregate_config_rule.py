# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AggregateConfigRuleArgs', 'AggregateConfigRule']

@pulumi.input_type
class AggregateConfigRuleArgs:
    def __init__(__self__, *,
                 aggregate_config_rule_name: pulumi.Input[str],
                 aggregator_id: pulumi.Input[str],
                 config_rule_trigger_types: pulumi.Input[str],
                 resource_types_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 risk_level: pulumi.Input[int],
                 source_identifier: pulumi.Input[str],
                 source_owner: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 region_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AggregateConfigRule resource.
        :param pulumi.Input[str] aggregate_config_rule_name: The name of the rule.
        :param pulumi.Input[str] aggregator_id: The Aggregator Id.
        :param pulumi.Input[str] config_rule_trigger_types: The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types_scopes: Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        :param pulumi.Input[int] risk_level: The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        :param pulumi.Input[str] source_identifier: The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        :param pulumi.Input[str] source_owner: Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[str] exclude_resource_ids_scope: The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        :param pulumi.Input[Mapping[str, Any]] input_parameters: The settings map of the input parameters for the rule.
        :param pulumi.Input[str] maximum_execution_frequency: The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        :param pulumi.Input[str] region_ids_scope: The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[str] resource_group_ids_scope: The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[str] status: The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        :param pulumi.Input[str] tag_key_scope: The rule monitors the tag key, only applies to rules created based on managed rules.
        :param pulumi.Input[str] tag_value_scope: The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        AggregateConfigRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_config_rule_name=aggregate_config_rule_name,
            aggregator_id=aggregator_id,
            config_rule_trigger_types=config_rule_trigger_types,
            resource_types_scopes=resource_types_scopes,
            risk_level=risk_level,
            source_identifier=source_identifier,
            source_owner=source_owner,
            description=description,
            exclude_resource_ids_scope=exclude_resource_ids_scope,
            input_parameters=input_parameters,
            maximum_execution_frequency=maximum_execution_frequency,
            region_ids_scope=region_ids_scope,
            resource_group_ids_scope=resource_group_ids_scope,
            status=status,
            tag_key_scope=tag_key_scope,
            tag_value_scope=tag_value_scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_config_rule_name: pulumi.Input[str],
             aggregator_id: pulumi.Input[str],
             config_rule_trigger_types: pulumi.Input[str],
             resource_types_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
             risk_level: pulumi.Input[int],
             source_identifier: pulumi.Input[str],
             source_owner: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
             input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             region_ids_scope: Optional[pulumi.Input[str]] = None,
             resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             tag_key_scope: Optional[pulumi.Input[str]] = None,
             tag_value_scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregateConfigRuleName' in kwargs:
            aggregate_config_rule_name = kwargs['aggregateConfigRuleName']
        if 'aggregatorId' in kwargs:
            aggregator_id = kwargs['aggregatorId']
        if 'configRuleTriggerTypes' in kwargs:
            config_rule_trigger_types = kwargs['configRuleTriggerTypes']
        if 'resourceTypesScopes' in kwargs:
            resource_types_scopes = kwargs['resourceTypesScopes']
        if 'riskLevel' in kwargs:
            risk_level = kwargs['riskLevel']
        if 'sourceIdentifier' in kwargs:
            source_identifier = kwargs['sourceIdentifier']
        if 'sourceOwner' in kwargs:
            source_owner = kwargs['sourceOwner']
        if 'excludeResourceIdsScope' in kwargs:
            exclude_resource_ids_scope = kwargs['excludeResourceIdsScope']
        if 'inputParameters' in kwargs:
            input_parameters = kwargs['inputParameters']
        if 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']
        if 'regionIdsScope' in kwargs:
            region_ids_scope = kwargs['regionIdsScope']
        if 'resourceGroupIdsScope' in kwargs:
            resource_group_ids_scope = kwargs['resourceGroupIdsScope']
        if 'tagKeyScope' in kwargs:
            tag_key_scope = kwargs['tagKeyScope']
        if 'tagValueScope' in kwargs:
            tag_value_scope = kwargs['tagValueScope']

        _setter("aggregate_config_rule_name", aggregate_config_rule_name)
        _setter("aggregator_id", aggregator_id)
        _setter("config_rule_trigger_types", config_rule_trigger_types)
        _setter("resource_types_scopes", resource_types_scopes)
        _setter("risk_level", risk_level)
        _setter("source_identifier", source_identifier)
        _setter("source_owner", source_owner)
        if description is not None:
            _setter("description", description)
        if exclude_resource_ids_scope is not None:
            _setter("exclude_resource_ids_scope", exclude_resource_ids_scope)
        if input_parameters is not None:
            _setter("input_parameters", input_parameters)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)
        if region_ids_scope is not None:
            _setter("region_ids_scope", region_ids_scope)
        if resource_group_ids_scope is not None:
            _setter("resource_group_ids_scope", resource_group_ids_scope)
        if status is not None:
            _setter("status", status)
        if tag_key_scope is not None:
            _setter("tag_key_scope", tag_key_scope)
        if tag_value_scope is not None:
            _setter("tag_value_scope", tag_value_scope)

    @property
    @pulumi.getter(name="aggregateConfigRuleName")
    def aggregate_config_rule_name(self) -> pulumi.Input[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "aggregate_config_rule_name")

    @aggregate_config_rule_name.setter
    def aggregate_config_rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregate_config_rule_name", value)

    @property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> pulumi.Input[str]:
        """
        The Aggregator Id.
        """
        return pulumi.get(self, "aggregator_id")

    @aggregator_id.setter
    def aggregator_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregator_id", value)

    @property
    @pulumi.getter(name="configRuleTriggerTypes")
    def config_rule_trigger_types(self) -> pulumi.Input[str]:
        """
        The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        """
        return pulumi.get(self, "config_rule_trigger_types")

    @config_rule_trigger_types.setter
    def config_rule_trigger_types(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_rule_trigger_types", value)

    @property
    @pulumi.getter(name="resourceTypesScopes")
    def resource_types_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        """
        return pulumi.get(self, "resource_types_scopes")

    @resource_types_scopes.setter
    def resource_types_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_types_scopes", value)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> pulumi.Input[int]:
        """
        The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "risk_level", value)

    @property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        """
        return pulumi.get(self, "source_identifier")

    @source_identifier.setter
    def source_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_identifier", value)

    @property
    @pulumi.getter(name="sourceOwner")
    def source_owner(self) -> pulumi.Input[str]:
        """
        Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        """
        return pulumi.get(self, "source_owner")

    @source_owner.setter
    def source_owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_owner", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="excludeResourceIdsScope")
    def exclude_resource_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        """
        return pulumi.get(self, "exclude_resource_ids_scope")

    @exclude_resource_ids_scope.setter
    def exclude_resource_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_resource_ids_scope", value)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The settings map of the input parameters for the rule.
        """
        return pulumi.get(self, "input_parameters")

    @input_parameters.setter
    def input_parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "input_parameters", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)

    @property
    @pulumi.getter(name="regionIdsScope")
    def region_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "region_ids_scope")

    @region_ids_scope.setter
    def region_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_ids_scope", value)

    @property
    @pulumi.getter(name="resourceGroupIdsScope")
    def resource_group_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "resource_group_ids_scope")

    @resource_group_ids_scope.setter
    def resource_group_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_ids_scope", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors the tag key, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_key_scope")

    @tag_key_scope.setter
    def tag_key_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key_scope", value)

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_value_scope")

    @tag_value_scope.setter
    def tag_value_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value_scope", value)


@pulumi.input_type
class _AggregateConfigRuleState:
    def __init__(__self__, *,
                 aggregate_config_rule_name: Optional[pulumi.Input[str]] = None,
                 aggregator_id: Optional[pulumi.Input[str]] = None,
                 config_rule_id: Optional[pulumi.Input[str]] = None,
                 config_rule_trigger_types: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 region_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 risk_level: Optional[pulumi.Input[int]] = None,
                 source_identifier: Optional[pulumi.Input[str]] = None,
                 source_owner: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AggregateConfigRule resources.
        :param pulumi.Input[str] aggregate_config_rule_name: The name of the rule.
        :param pulumi.Input[str] aggregator_id: The Aggregator Id.
        :param pulumi.Input[str] config_rule_id: (Available since v1.141.0) The rule ID of Aggregate Config Rule.
        :param pulumi.Input[str] config_rule_trigger_types: The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[str] exclude_resource_ids_scope: The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        :param pulumi.Input[Mapping[str, Any]] input_parameters: The settings map of the input parameters for the rule.
        :param pulumi.Input[str] maximum_execution_frequency: The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        :param pulumi.Input[str] region_ids_scope: The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[str] resource_group_ids_scope: The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types_scopes: Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        :param pulumi.Input[int] risk_level: The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        :param pulumi.Input[str] source_identifier: The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        :param pulumi.Input[str] source_owner: Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        :param pulumi.Input[str] status: The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        :param pulumi.Input[str] tag_key_scope: The rule monitors the tag key, only applies to rules created based on managed rules.
        :param pulumi.Input[str] tag_value_scope: The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        _AggregateConfigRuleState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_config_rule_name=aggregate_config_rule_name,
            aggregator_id=aggregator_id,
            config_rule_id=config_rule_id,
            config_rule_trigger_types=config_rule_trigger_types,
            description=description,
            exclude_resource_ids_scope=exclude_resource_ids_scope,
            input_parameters=input_parameters,
            maximum_execution_frequency=maximum_execution_frequency,
            region_ids_scope=region_ids_scope,
            resource_group_ids_scope=resource_group_ids_scope,
            resource_types_scopes=resource_types_scopes,
            risk_level=risk_level,
            source_identifier=source_identifier,
            source_owner=source_owner,
            status=status,
            tag_key_scope=tag_key_scope,
            tag_value_scope=tag_value_scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_config_rule_name: Optional[pulumi.Input[str]] = None,
             aggregator_id: Optional[pulumi.Input[str]] = None,
             config_rule_id: Optional[pulumi.Input[str]] = None,
             config_rule_trigger_types: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
             input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             region_ids_scope: Optional[pulumi.Input[str]] = None,
             resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
             resource_types_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             risk_level: Optional[pulumi.Input[int]] = None,
             source_identifier: Optional[pulumi.Input[str]] = None,
             source_owner: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             tag_key_scope: Optional[pulumi.Input[str]] = None,
             tag_value_scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregateConfigRuleName' in kwargs:
            aggregate_config_rule_name = kwargs['aggregateConfigRuleName']
        if 'aggregatorId' in kwargs:
            aggregator_id = kwargs['aggregatorId']
        if 'configRuleId' in kwargs:
            config_rule_id = kwargs['configRuleId']
        if 'configRuleTriggerTypes' in kwargs:
            config_rule_trigger_types = kwargs['configRuleTriggerTypes']
        if 'excludeResourceIdsScope' in kwargs:
            exclude_resource_ids_scope = kwargs['excludeResourceIdsScope']
        if 'inputParameters' in kwargs:
            input_parameters = kwargs['inputParameters']
        if 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']
        if 'regionIdsScope' in kwargs:
            region_ids_scope = kwargs['regionIdsScope']
        if 'resourceGroupIdsScope' in kwargs:
            resource_group_ids_scope = kwargs['resourceGroupIdsScope']
        if 'resourceTypesScopes' in kwargs:
            resource_types_scopes = kwargs['resourceTypesScopes']
        if 'riskLevel' in kwargs:
            risk_level = kwargs['riskLevel']
        if 'sourceIdentifier' in kwargs:
            source_identifier = kwargs['sourceIdentifier']
        if 'sourceOwner' in kwargs:
            source_owner = kwargs['sourceOwner']
        if 'tagKeyScope' in kwargs:
            tag_key_scope = kwargs['tagKeyScope']
        if 'tagValueScope' in kwargs:
            tag_value_scope = kwargs['tagValueScope']

        if aggregate_config_rule_name is not None:
            _setter("aggregate_config_rule_name", aggregate_config_rule_name)
        if aggregator_id is not None:
            _setter("aggregator_id", aggregator_id)
        if config_rule_id is not None:
            _setter("config_rule_id", config_rule_id)
        if config_rule_trigger_types is not None:
            _setter("config_rule_trigger_types", config_rule_trigger_types)
        if description is not None:
            _setter("description", description)
        if exclude_resource_ids_scope is not None:
            _setter("exclude_resource_ids_scope", exclude_resource_ids_scope)
        if input_parameters is not None:
            _setter("input_parameters", input_parameters)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)
        if region_ids_scope is not None:
            _setter("region_ids_scope", region_ids_scope)
        if resource_group_ids_scope is not None:
            _setter("resource_group_ids_scope", resource_group_ids_scope)
        if resource_types_scopes is not None:
            _setter("resource_types_scopes", resource_types_scopes)
        if risk_level is not None:
            _setter("risk_level", risk_level)
        if source_identifier is not None:
            _setter("source_identifier", source_identifier)
        if source_owner is not None:
            _setter("source_owner", source_owner)
        if status is not None:
            _setter("status", status)
        if tag_key_scope is not None:
            _setter("tag_key_scope", tag_key_scope)
        if tag_value_scope is not None:
            _setter("tag_value_scope", tag_value_scope)

    @property
    @pulumi.getter(name="aggregateConfigRuleName")
    def aggregate_config_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "aggregate_config_rule_name")

    @aggregate_config_rule_name.setter
    def aggregate_config_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_config_rule_name", value)

    @property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Aggregator Id.
        """
        return pulumi.get(self, "aggregator_id")

    @aggregator_id.setter
    def aggregator_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_id", value)

    @property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Available since v1.141.0) The rule ID of Aggregate Config Rule.
        """
        return pulumi.get(self, "config_rule_id")

    @config_rule_id.setter
    def config_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_rule_id", value)

    @property
    @pulumi.getter(name="configRuleTriggerTypes")
    def config_rule_trigger_types(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        """
        return pulumi.get(self, "config_rule_trigger_types")

    @config_rule_trigger_types.setter
    def config_rule_trigger_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_rule_trigger_types", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="excludeResourceIdsScope")
    def exclude_resource_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        """
        return pulumi.get(self, "exclude_resource_ids_scope")

    @exclude_resource_ids_scope.setter
    def exclude_resource_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_resource_ids_scope", value)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The settings map of the input parameters for the rule.
        """
        return pulumi.get(self, "input_parameters")

    @input_parameters.setter
    def input_parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "input_parameters", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)

    @property
    @pulumi.getter(name="regionIdsScope")
    def region_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "region_ids_scope")

    @region_ids_scope.setter
    def region_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_ids_scope", value)

    @property
    @pulumi.getter(name="resourceGroupIdsScope")
    def resource_group_ids_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "resource_group_ids_scope")

    @resource_group_ids_scope.setter
    def resource_group_ids_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_ids_scope", value)

    @property
    @pulumi.getter(name="resourceTypesScopes")
    def resource_types_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        """
        return pulumi.get(self, "resource_types_scopes")

    @resource_types_scopes.setter
    def resource_types_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types_scopes", value)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[pulumi.Input[int]]:
        """
        The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "risk_level", value)

    @property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        """
        return pulumi.get(self, "source_identifier")

    @source_identifier.setter
    def source_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_identifier", value)

    @property
    @pulumi.getter(name="sourceOwner")
    def source_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        """
        return pulumi.get(self, "source_owner")

    @source_owner.setter
    def source_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_owner", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors the tag key, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_key_scope")

    @tag_key_scope.setter
    def tag_key_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key_scope", value)

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> Optional[pulumi.Input[str]]:
        """
        The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_value_scope")

    @tag_value_scope.setter
    def tag_value_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value_scope", value)


class AggregateConfigRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregate_config_rule_name: Optional[pulumi.Input[str]] = None,
                 aggregator_id: Optional[pulumi.Input[str]] = None,
                 config_rule_trigger_types: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 region_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 risk_level: Optional[pulumi.Input[int]] = None,
                 source_identifier: Optional[pulumi.Input[str]] = None,
                 source_owner: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Cloud Config Aggregate Config Rule resource.

        For information about Cloud Config Aggregate Config Rule and how to use it, see [What is Aggregate Config Rule](https://www.alibabacloud.com/help/en/cloud-config/latest/api-config-2020-09-07-createaggregateconfigrule).

        > **NOTE:** Available since v1.124.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "tf-example"
        default_accounts = alicloud.resourcemanager.get_accounts(status="CreateSuccess")
        default_aggregator = alicloud.cfg.Aggregator("defaultAggregator",
            aggregator_accounts=[alicloud.cfg.AggregatorAggregatorAccountArgs(
                account_id=default_accounts.accounts[0].account_id,
                account_name=default_accounts.accounts[0].display_name,
                account_type="ResourceDirectory",
            )],
            aggregator_name=name,
            description=name,
            aggregator_type="CUSTOM")
        default_aggregate_config_rule = alicloud.cfg.AggregateConfigRule("defaultAggregateConfigRule",
            aggregate_config_rule_name="contains-tag",
            aggregator_id=default_aggregator.id,
            config_rule_trigger_types="ConfigurationItemChangeNotification",
            source_owner="ALIYUN",
            source_identifier="contains-tag",
            risk_level=1,
            resource_types_scopes=["ACS::ECS::Instance"],
            input_parameters={
                "key": "example",
                "value": "example",
            })
        ```

        ## Import

        Cloud Config Aggregate Config Rule can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:cfg/aggregateConfigRule:AggregateConfigRule example "<aggregator_id>:<config_rule_id>"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregate_config_rule_name: The name of the rule.
        :param pulumi.Input[str] aggregator_id: The Aggregator Id.
        :param pulumi.Input[str] config_rule_trigger_types: The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[str] exclude_resource_ids_scope: The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        :param pulumi.Input[Mapping[str, Any]] input_parameters: The settings map of the input parameters for the rule.
        :param pulumi.Input[str] maximum_execution_frequency: The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        :param pulumi.Input[str] region_ids_scope: The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[str] resource_group_ids_scope: The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types_scopes: Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        :param pulumi.Input[int] risk_level: The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        :param pulumi.Input[str] source_identifier: The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        :param pulumi.Input[str] source_owner: Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        :param pulumi.Input[str] status: The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        :param pulumi.Input[str] tag_key_scope: The rule monitors the tag key, only applies to rules created based on managed rules.
        :param pulumi.Input[str] tag_value_scope: The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AggregateConfigRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Cloud Config Aggregate Config Rule resource.

        For information about Cloud Config Aggregate Config Rule and how to use it, see [What is Aggregate Config Rule](https://www.alibabacloud.com/help/en/cloud-config/latest/api-config-2020-09-07-createaggregateconfigrule).

        > **NOTE:** Available since v1.124.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "tf-example"
        default_accounts = alicloud.resourcemanager.get_accounts(status="CreateSuccess")
        default_aggregator = alicloud.cfg.Aggregator("defaultAggregator",
            aggregator_accounts=[alicloud.cfg.AggregatorAggregatorAccountArgs(
                account_id=default_accounts.accounts[0].account_id,
                account_name=default_accounts.accounts[0].display_name,
                account_type="ResourceDirectory",
            )],
            aggregator_name=name,
            description=name,
            aggregator_type="CUSTOM")
        default_aggregate_config_rule = alicloud.cfg.AggregateConfigRule("defaultAggregateConfigRule",
            aggregate_config_rule_name="contains-tag",
            aggregator_id=default_aggregator.id,
            config_rule_trigger_types="ConfigurationItemChangeNotification",
            source_owner="ALIYUN",
            source_identifier="contains-tag",
            risk_level=1,
            resource_types_scopes=["ACS::ECS::Instance"],
            input_parameters={
                "key": "example",
                "value": "example",
            })
        ```

        ## Import

        Cloud Config Aggregate Config Rule can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:cfg/aggregateConfigRule:AggregateConfigRule example "<aggregator_id>:<config_rule_id>"
        ```

        :param str resource_name: The name of the resource.
        :param AggregateConfigRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AggregateConfigRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AggregateConfigRuleArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregate_config_rule_name: Optional[pulumi.Input[str]] = None,
                 aggregator_id: Optional[pulumi.Input[str]] = None,
                 config_rule_trigger_types: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 region_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 risk_level: Optional[pulumi.Input[int]] = None,
                 source_identifier: Optional[pulumi.Input[str]] = None,
                 source_owner: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AggregateConfigRuleArgs.__new__(AggregateConfigRuleArgs)

            if aggregate_config_rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'aggregate_config_rule_name'")
            __props__.__dict__["aggregate_config_rule_name"] = aggregate_config_rule_name
            if aggregator_id is None and not opts.urn:
                raise TypeError("Missing required property 'aggregator_id'")
            __props__.__dict__["aggregator_id"] = aggregator_id
            if config_rule_trigger_types is None and not opts.urn:
                raise TypeError("Missing required property 'config_rule_trigger_types'")
            __props__.__dict__["config_rule_trigger_types"] = config_rule_trigger_types
            __props__.__dict__["description"] = description
            __props__.__dict__["exclude_resource_ids_scope"] = exclude_resource_ids_scope
            __props__.__dict__["input_parameters"] = input_parameters
            __props__.__dict__["maximum_execution_frequency"] = maximum_execution_frequency
            __props__.__dict__["region_ids_scope"] = region_ids_scope
            __props__.__dict__["resource_group_ids_scope"] = resource_group_ids_scope
            if resource_types_scopes is None and not opts.urn:
                raise TypeError("Missing required property 'resource_types_scopes'")
            __props__.__dict__["resource_types_scopes"] = resource_types_scopes
            if risk_level is None and not opts.urn:
                raise TypeError("Missing required property 'risk_level'")
            __props__.__dict__["risk_level"] = risk_level
            if source_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'source_identifier'")
            __props__.__dict__["source_identifier"] = source_identifier
            if source_owner is None and not opts.urn:
                raise TypeError("Missing required property 'source_owner'")
            __props__.__dict__["source_owner"] = source_owner
            __props__.__dict__["status"] = status
            __props__.__dict__["tag_key_scope"] = tag_key_scope
            __props__.__dict__["tag_value_scope"] = tag_value_scope
            __props__.__dict__["config_rule_id"] = None
        super(AggregateConfigRule, __self__).__init__(
            'alicloud:cfg/aggregateConfigRule:AggregateConfigRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregate_config_rule_name: Optional[pulumi.Input[str]] = None,
            aggregator_id: Optional[pulumi.Input[str]] = None,
            config_rule_id: Optional[pulumi.Input[str]] = None,
            config_rule_trigger_types: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            exclude_resource_ids_scope: Optional[pulumi.Input[str]] = None,
            input_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
            region_ids_scope: Optional[pulumi.Input[str]] = None,
            resource_group_ids_scope: Optional[pulumi.Input[str]] = None,
            resource_types_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            risk_level: Optional[pulumi.Input[int]] = None,
            source_identifier: Optional[pulumi.Input[str]] = None,
            source_owner: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tag_key_scope: Optional[pulumi.Input[str]] = None,
            tag_value_scope: Optional[pulumi.Input[str]] = None) -> 'AggregateConfigRule':
        """
        Get an existing AggregateConfigRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregate_config_rule_name: The name of the rule.
        :param pulumi.Input[str] aggregator_id: The Aggregator Id.
        :param pulumi.Input[str] config_rule_id: (Available since v1.141.0) The rule ID of Aggregate Config Rule.
        :param pulumi.Input[str] config_rule_trigger_types: The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[str] exclude_resource_ids_scope: The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        :param pulumi.Input[Mapping[str, Any]] input_parameters: The settings map of the input parameters for the rule.
        :param pulumi.Input[str] maximum_execution_frequency: The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        :param pulumi.Input[str] region_ids_scope: The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[str] resource_group_ids_scope: The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types_scopes: Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        :param pulumi.Input[int] risk_level: The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        :param pulumi.Input[str] source_identifier: The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        :param pulumi.Input[str] source_owner: Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        :param pulumi.Input[str] status: The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        :param pulumi.Input[str] tag_key_scope: The rule monitors the tag key, only applies to rules created based on managed rules.
        :param pulumi.Input[str] tag_value_scope: The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AggregateConfigRuleState.__new__(_AggregateConfigRuleState)

        __props__.__dict__["aggregate_config_rule_name"] = aggregate_config_rule_name
        __props__.__dict__["aggregator_id"] = aggregator_id
        __props__.__dict__["config_rule_id"] = config_rule_id
        __props__.__dict__["config_rule_trigger_types"] = config_rule_trigger_types
        __props__.__dict__["description"] = description
        __props__.__dict__["exclude_resource_ids_scope"] = exclude_resource_ids_scope
        __props__.__dict__["input_parameters"] = input_parameters
        __props__.__dict__["maximum_execution_frequency"] = maximum_execution_frequency
        __props__.__dict__["region_ids_scope"] = region_ids_scope
        __props__.__dict__["resource_group_ids_scope"] = resource_group_ids_scope
        __props__.__dict__["resource_types_scopes"] = resource_types_scopes
        __props__.__dict__["risk_level"] = risk_level
        __props__.__dict__["source_identifier"] = source_identifier
        __props__.__dict__["source_owner"] = source_owner
        __props__.__dict__["status"] = status
        __props__.__dict__["tag_key_scope"] = tag_key_scope
        __props__.__dict__["tag_value_scope"] = tag_value_scope
        return AggregateConfigRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregateConfigRuleName")
    def aggregate_config_rule_name(self) -> pulumi.Output[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "aggregate_config_rule_name")

    @property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> pulumi.Output[str]:
        """
        The Aggregator Id.
        """
        return pulumi.get(self, "aggregator_id")

    @property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> pulumi.Output[str]:
        """
        (Available since v1.141.0) The rule ID of Aggregate Config Rule.
        """
        return pulumi.get(self, "config_rule_id")

    @property
    @pulumi.getter(name="configRuleTriggerTypes")
    def config_rule_trigger_types(self) -> pulumi.Output[str]:
        """
        The trigger type of the rule. Valid values: `ConfigurationItemChangeNotification`: The rule is triggered upon configuration changes. `ScheduledNotification`: The rule is triggered as scheduled.
        """
        return pulumi.get(self, "config_rule_trigger_types")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="excludeResourceIdsScope")
    def exclude_resource_ids_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The rule monitors excluded resource IDs, multiple of which are separated by commas, only applies to rules created based on managed rules, , custom rule this field is empty.
        """
        return pulumi.get(self, "exclude_resource_ids_scope")

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The settings map of the input parameters for the rule.
        """
        return pulumi.get(self, "input_parameters")

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> pulumi.Output[str]:
        """
        The frequency of the compliance evaluations. Valid values:  `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, `TwentyFour_Hours`. System default value is `TwentyFour_Hours` and valid when the `config_rule_trigger_types` is `ScheduledNotification`.
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @property
    @pulumi.getter(name="regionIdsScope")
    def region_ids_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The rule monitors region IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "region_ids_scope")

    @property
    @pulumi.getter(name="resourceGroupIdsScope")
    def resource_group_ids_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The rule monitors resource group IDs, separated by commas, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "resource_group_ids_scope")

    @property
    @pulumi.getter(name="resourceTypesScopes")
    def resource_types_scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        Resource types to be evaluated. [Alibaba Cloud services that support Cloud Config.](https://www.alibabacloud.com/help/en/doc-detail/127411.htm)
        """
        return pulumi.get(self, "resource_types_scopes")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> pulumi.Output[int]:
        """
        The risk level of the resources that are not compliant with the rule. Valid values:  `1`: critical `2`: warning `3`: info.
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> pulumi.Output[str]:
        """
        The identifier of the rule. For a managed rule, the value is the identifier of the managed rule. For a custom rule, the value is the ARN of the custom rule. Using managed rules, refer to [List of Managed rules.](https://www.alibabacloud.com/help/en/doc-detail/127404.htm)
        """
        return pulumi.get(self, "source_identifier")

    @property
    @pulumi.getter(name="sourceOwner")
    def source_owner(self) -> pulumi.Output[str]:
        """
        Specifies whether you or Alibaba Cloud owns and manages the rule. Valid values: `CUSTOM_FC`: The rule is a custom rule and you own the rule. `ALIYUN`: The rule is a managed rule and Alibaba Cloud owns the rule.
        """
        return pulumi.get(self, "source_owner")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The rule status. The valid values: `ACTIVE`, `INACTIVE`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The rule monitors the tag key, only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_key_scope")

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> pulumi.Output[Optional[str]]:
        """
        The rule monitors the tag value, use with the `tag_key_scope` options. only applies to rules created based on managed rules.
        """
        return pulumi.get(self, "tag_value_scope")

