# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AggregateCompliancePackConfigRule',
    'AggregateCompliancePackConfigRuleConfigRuleParameter',
    'AggregateCompliancePackConfigRuleId',
    'AggregatorAggregatorAccount',
    'CompliancePackConfigRule',
    'CompliancePackConfigRuleConfigRuleParameter',
    'CompliancePackConfigRuleId',
    'RuleCompliance',
    'GetAggregateCompliancePacksPackResult',
    'GetAggregateCompliancePacksPackConfigRuleResult',
    'GetAggregateCompliancePacksPackConfigRuleConfigRuleParameterResult',
    'GetAggregateConfigRulesRuleResult',
    'GetAggregateConfigRulesRuleComplianceResult',
    'GetAggregateDeliveriesDeliveryResult',
    'GetAggregatorsAggregatorResult',
    'GetAggregatorsAggregatorAggregatorAccountResult',
    'GetCompliancePacksPackResult',
    'GetCompliancePacksPackConfigRuleResult',
    'GetCompliancePacksPackConfigRuleConfigRuleParameterResult',
    'GetConfigurationRecordersRecorderResult',
    'GetDeliveriesDeliveryResult',
    'GetDeliveryChannelsChannelResult',
    'GetRulesRuleResult',
    'GetRulesRuleComplianceResult',
]

@pulumi.output_type
class AggregateCompliancePackConfigRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedRuleIdentifier":
            suggest = "managed_rule_identifier"
        elif key == "configRuleParameters":
            suggest = "config_rule_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregateCompliancePackConfigRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregateCompliancePackConfigRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregateCompliancePackConfigRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_rule_identifier: _builtins.str,
                 config_rule_parameters: Optional[Sequence['outputs.AggregateCompliancePackConfigRuleConfigRuleParameter']] = None):
        """
        :param _builtins.str managed_rule_identifier: The Managed Rule Identifier.
        :param Sequence['AggregateCompliancePackConfigRuleConfigRuleParameterArgs'] config_rule_parameters: A list of parameter rules. See `config_rule_parameters` below.
        """
        pulumi.set(__self__, "managed_rule_identifier", managed_rule_identifier)
        if config_rule_parameters is not None:
            pulumi.set(__self__, "config_rule_parameters", config_rule_parameters)

    @_builtins.property
    @pulumi.getter(name="managedRuleIdentifier")
    def managed_rule_identifier(self) -> _builtins.str:
        """
        The Managed Rule Identifier.
        """
        return pulumi.get(self, "managed_rule_identifier")

    @_builtins.property
    @pulumi.getter(name="configRuleParameters")
    def config_rule_parameters(self) -> Optional[Sequence['outputs.AggregateCompliancePackConfigRuleConfigRuleParameter']]:
        """
        A list of parameter rules. See `config_rule_parameters` below.
        """
        return pulumi.get(self, "config_rule_parameters")


@pulumi.output_type
class AggregateCompliancePackConfigRuleConfigRuleParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "parameterValue":
            suggest = "parameter_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregateCompliancePackConfigRuleConfigRuleParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregateCompliancePackConfigRuleConfigRuleParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregateCompliancePackConfigRuleConfigRuleParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: Optional[_builtins.str] = None,
                 parameter_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameter_name: The Parameter Name.
        :param _builtins.str parameter_value: The Parameter Value.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[_builtins.str]:
        """
        The Parameter Name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[_builtins.str]:
        """
        The Parameter Value.
        """
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class AggregateCompliancePackConfigRuleId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configRuleId":
            suggest = "config_rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregateCompliancePackConfigRuleId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregateCompliancePackConfigRuleId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregateCompliancePackConfigRuleId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_rule_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str config_rule_id: The rule ID of Aggregate Config Rule.
        """
        if config_rule_id is not None:
            pulumi.set(__self__, "config_rule_id", config_rule_id)

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> Optional[_builtins.str]:
        """
        The rule ID of Aggregate Config Rule.
        """
        return pulumi.get(self, "config_rule_id")


@pulumi.output_type
class AggregatorAggregatorAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "accountType":
            suggest = "account_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregatorAggregatorAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregatorAggregatorAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregatorAggregatorAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 account_name: _builtins.str,
                 account_type: _builtins.str):
        """
        :param _builtins.str account_id: Aggregator account Uid.
        :param _builtins.str account_name: Aggregator account name.
        :param _builtins.str account_type: Aggregator account source type. Valid values: `ResourceDirectory`.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_type", account_type)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Aggregator account Uid.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        Aggregator account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> _builtins.str:
        """
        Aggregator account source type. Valid values: `ResourceDirectory`.
        """
        return pulumi.get(self, "account_type")


@pulumi.output_type
class CompliancePackConfigRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedRuleIdentifier":
            suggest = "managed_rule_identifier"
        elif key == "configRuleParameters":
            suggest = "config_rule_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompliancePackConfigRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompliancePackConfigRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompliancePackConfigRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_rule_identifier: _builtins.str,
                 config_rule_parameters: Optional[Sequence['outputs.CompliancePackConfigRuleConfigRuleParameter']] = None):
        """
        :param _builtins.str managed_rule_identifier: The Managed Rule Identifier.
        :param Sequence['CompliancePackConfigRuleConfigRuleParameterArgs'] config_rule_parameters: A list of Config Rule Parameters. See `config_rule_parameters` below.
        """
        pulumi.set(__self__, "managed_rule_identifier", managed_rule_identifier)
        if config_rule_parameters is not None:
            pulumi.set(__self__, "config_rule_parameters", config_rule_parameters)

    @_builtins.property
    @pulumi.getter(name="managedRuleIdentifier")
    def managed_rule_identifier(self) -> _builtins.str:
        """
        The Managed Rule Identifier.
        """
        return pulumi.get(self, "managed_rule_identifier")

    @_builtins.property
    @pulumi.getter(name="configRuleParameters")
    def config_rule_parameters(self) -> Optional[Sequence['outputs.CompliancePackConfigRuleConfigRuleParameter']]:
        """
        A list of Config Rule Parameters. See `config_rule_parameters` below.
        """
        return pulumi.get(self, "config_rule_parameters")


@pulumi.output_type
class CompliancePackConfigRuleConfigRuleParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "parameterValue":
            suggest = "parameter_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompliancePackConfigRuleConfigRuleParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompliancePackConfigRuleConfigRuleParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompliancePackConfigRuleConfigRuleParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: Optional[_builtins.str] = None,
                 parameter_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameter_name: The parameter name.
        :param _builtins.str parameter_value: The parameter value.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[_builtins.str]:
        """
        The parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[_builtins.str]:
        """
        The parameter value.
        """
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class CompliancePackConfigRuleId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configRuleId":
            suggest = "config_rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompliancePackConfigRuleId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompliancePackConfigRuleId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompliancePackConfigRuleId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_rule_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str config_rule_id: The rule ID of Config Rule.
        """
        if config_rule_id is not None:
            pulumi.set(__self__, "config_rule_id", config_rule_id)

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> Optional[_builtins.str]:
        """
        The rule ID of Config Rule.
        """
        return pulumi.get(self, "config_rule_id")


@pulumi.output_type
class RuleCompliance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "complianceType":
            suggest = "compliance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleCompliance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleCompliance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleCompliance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compliance_type: Optional[_builtins.str] = None,
                 count: Optional[_builtins.int] = None):
        """
        :param _builtins.str compliance_type: The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
        :param _builtins.int count: The count of compliance.
        """
        if compliance_type is not None:
            pulumi.set(__self__, "compliance_type", compliance_type)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @_builtins.property
    @pulumi.getter(name="complianceType")
    def compliance_type(self) -> Optional[_builtins.str]:
        """
        The type of compliance. Valid values: `COMPLIANT`, `NON_COMPLIANT`, `NOT_APPLICABLE`, `INSUFFICIENT_DATA`.
        """
        return pulumi.get(self, "compliance_type")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.int]:
        """
        The count of compliance.
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetAggregateCompliancePacksPackResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 aggregate_compliance_pack_name: _builtins.str,
                 aggregator_compliance_pack_id: _builtins.str,
                 compliance_pack_template_id: _builtins.str,
                 config_rules: Sequence['outputs.GetAggregateCompliancePacksPackConfigRuleResult'],
                 description: _builtins.str,
                 id: _builtins.str,
                 risk_level: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str account_id: The Aliyun User Id.
        :param _builtins.str aggregate_compliance_pack_name: The Aggregate Compliance Package Name.
        :param _builtins.str aggregator_compliance_pack_id: The Aggregate Compliance Package Id.
        :param _builtins.str compliance_pack_template_id: The template ID of the Compliance Package.
        :param Sequence['GetAggregateCompliancePacksPackConfigRuleArgs'] config_rules: A list of The Aggregate Compliance Package Rules.
        :param _builtins.str description: The description of aggregate compliance pack.
        :param _builtins.str id: The ID of the Aggregate Compliance Pack.
        :param _builtins.int risk_level: The Risk Level.
        :param _builtins.str status: The status of the resource. Valid values `ACTIVE`, `CREATING`, `INACTIVE`.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "aggregate_compliance_pack_name", aggregate_compliance_pack_name)
        pulumi.set(__self__, "aggregator_compliance_pack_id", aggregator_compliance_pack_id)
        pulumi.set(__self__, "compliance_pack_template_id", compliance_pack_template_id)
        pulumi.set(__self__, "config_rules", config_rules)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The Aliyun User Id.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregateCompliancePackName")
    def aggregate_compliance_pack_name(self) -> _builtins.str:
        """
        The Aggregate Compliance Package Name.
        """
        return pulumi.get(self, "aggregate_compliance_pack_name")

    @_builtins.property
    @pulumi.getter(name="aggregatorCompliancePackId")
    def aggregator_compliance_pack_id(self) -> _builtins.str:
        """
        The Aggregate Compliance Package Id.
        """
        return pulumi.get(self, "aggregator_compliance_pack_id")

    @_builtins.property
    @pulumi.getter(name="compliancePackTemplateId")
    def compliance_pack_template_id(self) -> _builtins.str:
        """
        The template ID of the Compliance Package.
        """
        return pulumi.get(self, "compliance_pack_template_id")

    @_builtins.property
    @pulumi.getter(name="configRules")
    def config_rules(self) -> Sequence['outputs.GetAggregateCompliancePacksPackConfigRuleResult']:
        """
        A list of The Aggregate Compliance Package Rules.
        """
        return pulumi.get(self, "config_rules")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of aggregate compliance pack.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Aggregate Compliance Pack.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.int:
        """
        The Risk Level.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the resource. Valid values `ACTIVE`, `CREATING`, `INACTIVE`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAggregateCompliancePacksPackConfigRuleResult(dict):
    def __init__(__self__, *,
                 config_rule_id: _builtins.str,
                 config_rule_parameters: Sequence['outputs.GetAggregateCompliancePacksPackConfigRuleConfigRuleParameterResult'],
                 managed_rule_identifier: _builtins.str):
        """
        :param _builtins.str config_rule_id: The ID of the rule.
        :param Sequence['GetAggregateCompliancePacksPackConfigRuleConfigRuleParameterArgs'] config_rule_parameters: A list of parameter rules.
        :param _builtins.str managed_rule_identifier: Managed Rule Identifier.
        """
        pulumi.set(__self__, "config_rule_id", config_rule_id)
        pulumi.set(__self__, "config_rule_parameters", config_rule_parameters)
        pulumi.set(__self__, "managed_rule_identifier", managed_rule_identifier)

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "config_rule_id")

    @_builtins.property
    @pulumi.getter(name="configRuleParameters")
    def config_rule_parameters(self) -> Sequence['outputs.GetAggregateCompliancePacksPackConfigRuleConfigRuleParameterResult']:
        """
        A list of parameter rules.
        """
        return pulumi.get(self, "config_rule_parameters")

    @_builtins.property
    @pulumi.getter(name="managedRuleIdentifier")
    def managed_rule_identifier(self) -> _builtins.str:
        """
        Managed Rule Identifier.
        """
        return pulumi.get(self, "managed_rule_identifier")


@pulumi.output_type
class GetAggregateCompliancePacksPackConfigRuleConfigRuleParameterResult(dict):
    def __init__(__self__, *,
                 parameter_name: _builtins.str,
                 parameter_value: _builtins.str,
                 required: _builtins.bool):
        """
        :param _builtins.str parameter_name: The Parameter Name.
        :param _builtins.str parameter_value: The Parameter Value.
        :param _builtins.bool required: Required.
        """
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)
        pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        The Parameter Name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> _builtins.str:
        """
        The Parameter Value.
        """
        return pulumi.get(self, "parameter_value")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Required.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetAggregateConfigRulesRuleResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 aggregate_config_rule_name: _builtins.str,
                 aggregator_id: _builtins.str,
                 compliance_pack_id: _builtins.str,
                 compliances: Sequence['outputs.GetAggregateConfigRulesRuleComplianceResult'],
                 config_rule_arn: _builtins.str,
                 config_rule_id: _builtins.str,
                 config_rule_trigger_types: _builtins.str,
                 description: _builtins.str,
                 event_source: _builtins.str,
                 exclude_resource_ids_scope: _builtins.str,
                 id: _builtins.str,
                 input_parameters: Mapping[str, _builtins.str],
                 maximum_execution_frequency: _builtins.str,
                 modified_timestamp: _builtins.str,
                 region_ids_scope: _builtins.str,
                 resource_group_ids_scope: _builtins.str,
                 resource_types_scopes: Sequence[_builtins.str],
                 risk_level: _builtins.int,
                 source_identifier: _builtins.str,
                 source_owner: _builtins.str,
                 status: _builtins.str,
                 tag_key_scope: _builtins.str,
                 tag_value_scope: _builtins.str):
        """
        :param _builtins.str account_id: The Aliyun User ID.
        :param _builtins.str aggregate_config_rule_name: The config rule name.
        :param _builtins.str aggregator_id: The ID of aggregator.
        :param _builtins.str compliance_pack_id: The ID of Compliance Package.
        :param Sequence['GetAggregateConfigRulesRuleComplianceArgs'] compliances: The Compliance information.
        :param _builtins.str config_rule_arn: The config rule arn.
        :param _builtins.str config_rule_id: The ID of the rule.
        :param _builtins.str config_rule_trigger_types: The trigger types of config rules.
        :param _builtins.str description: The description of the rule.
        :param _builtins.str event_source: Event source of the Config Rule.
        :param _builtins.str exclude_resource_ids_scope: The id of the resources to be evaluated against the rule.
        :param _builtins.str id: The ID of the Aggregate Config Rule.
        :param Mapping[str, _builtins.str] input_parameters: The settings of the input parameters for the rule.
        :param _builtins.str maximum_execution_frequency: The frequency of the compliance evaluations.
        :param _builtins.str modified_timestamp: The timestamp when the rule was last modified.
        :param _builtins.str region_ids_scope: The scope of resource region ids.
        :param _builtins.str resource_group_ids_scope: The scope of resource group ids.
        :param Sequence[_builtins.str] resource_types_scopes: The types of resources evaluated by the rule.
        :param _builtins.int risk_level: The Risk Level. Valid values `1`: critical, `2`: warning, `3`: info.
        :param _builtins.str source_identifier: The identifier of the managed rule or the arn of the custom function.
        :param _builtins.str source_owner: The source owner of the Config Rule.
        :param _builtins.str status: The state of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
        :param _builtins.str tag_key_scope: The scope of tay key.
        :param _builtins.str tag_value_scope: The scope of tay value.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "aggregate_config_rule_name", aggregate_config_rule_name)
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        pulumi.set(__self__, "compliance_pack_id", compliance_pack_id)
        pulumi.set(__self__, "compliances", compliances)
        pulumi.set(__self__, "config_rule_arn", config_rule_arn)
        pulumi.set(__self__, "config_rule_id", config_rule_id)
        pulumi.set(__self__, "config_rule_trigger_types", config_rule_trigger_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_source", event_source)
        pulumi.set(__self__, "exclude_resource_ids_scope", exclude_resource_ids_scope)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_parameters", input_parameters)
        pulumi.set(__self__, "maximum_execution_frequency", maximum_execution_frequency)
        pulumi.set(__self__, "modified_timestamp", modified_timestamp)
        pulumi.set(__self__, "region_ids_scope", region_ids_scope)
        pulumi.set(__self__, "resource_group_ids_scope", resource_group_ids_scope)
        pulumi.set(__self__, "resource_types_scopes", resource_types_scopes)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "source_identifier", source_identifier)
        pulumi.set(__self__, "source_owner", source_owner)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_key_scope", tag_key_scope)
        pulumi.set(__self__, "tag_value_scope", tag_value_scope)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The Aliyun User ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregateConfigRuleName")
    def aggregate_config_rule_name(self) -> _builtins.str:
        """
        The config rule name.
        """
        return pulumi.get(self, "aggregate_config_rule_name")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        """
        The ID of aggregator.
        """
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter(name="compliancePackId")
    def compliance_pack_id(self) -> _builtins.str:
        """
        The ID of Compliance Package.
        """
        return pulumi.get(self, "compliance_pack_id")

    @_builtins.property
    @pulumi.getter
    def compliances(self) -> Sequence['outputs.GetAggregateConfigRulesRuleComplianceResult']:
        """
        The Compliance information.
        """
        return pulumi.get(self, "compliances")

    @_builtins.property
    @pulumi.getter(name="configRuleArn")
    def config_rule_arn(self) -> _builtins.str:
        """
        The config rule arn.
        """
        return pulumi.get(self, "config_rule_arn")

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "config_rule_id")

    @_builtins.property
    @pulumi.getter(name="configRuleTriggerTypes")
    def config_rule_trigger_types(self) -> _builtins.str:
        """
        The trigger types of config rules.
        """
        return pulumi.get(self, "config_rule_trigger_types")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> _builtins.str:
        """
        Event source of the Config Rule.
        """
        return pulumi.get(self, "event_source")

    @_builtins.property
    @pulumi.getter(name="excludeResourceIdsScope")
    def exclude_resource_ids_scope(self) -> _builtins.str:
        """
        The id of the resources to be evaluated against the rule.
        """
        return pulumi.get(self, "exclude_resource_ids_scope")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Aggregate Config Rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Mapping[str, _builtins.str]:
        """
        The settings of the input parameters for the rule.
        """
        return pulumi.get(self, "input_parameters")

    @_builtins.property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> _builtins.str:
        """
        The frequency of the compliance evaluations.
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @_builtins.property
    @pulumi.getter(name="modifiedTimestamp")
    def modified_timestamp(self) -> _builtins.str:
        """
        The timestamp when the rule was last modified.
        """
        return pulumi.get(self, "modified_timestamp")

    @_builtins.property
    @pulumi.getter(name="regionIdsScope")
    def region_ids_scope(self) -> _builtins.str:
        """
        The scope of resource region ids.
        """
        return pulumi.get(self, "region_ids_scope")

    @_builtins.property
    @pulumi.getter(name="resourceGroupIdsScope")
    def resource_group_ids_scope(self) -> _builtins.str:
        """
        The scope of resource group ids.
        """
        return pulumi.get(self, "resource_group_ids_scope")

    @_builtins.property
    @pulumi.getter(name="resourceTypesScopes")
    def resource_types_scopes(self) -> Sequence[_builtins.str]:
        """
        The types of resources evaluated by the rule.
        """
        return pulumi.get(self, "resource_types_scopes")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.int:
        """
        The Risk Level. Valid values `1`: critical, `2`: warning, `3`: info.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> _builtins.str:
        """
        The identifier of the managed rule or the arn of the custom function.
        """
        return pulumi.get(self, "source_identifier")

    @_builtins.property
    @pulumi.getter(name="sourceOwner")
    def source_owner(self) -> _builtins.str:
        """
        The source owner of the Config Rule.
        """
        return pulumi.get(self, "source_owner")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The state of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> _builtins.str:
        """
        The scope of tay key.
        """
        return pulumi.get(self, "tag_key_scope")

    @_builtins.property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> _builtins.str:
        """
        The scope of tay value.
        """
        return pulumi.get(self, "tag_value_scope")


@pulumi.output_type
class GetAggregateConfigRulesRuleComplianceResult(dict):
    def __init__(__self__, *,
                 compliance_type: _builtins.str,
                 count: _builtins.int):
        """
        :param _builtins.str compliance_type: The Compliance Type.
        :param _builtins.int count: The Count.
        """
        pulumi.set(__self__, "compliance_type", compliance_type)
        pulumi.set(__self__, "count", count)

    @_builtins.property
    @pulumi.getter(name="complianceType")
    def compliance_type(self) -> _builtins.str:
        """
        The Compliance Type.
        """
        return pulumi.get(self, "compliance_type")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The Count.
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetAggregateDeliveriesDeliveryResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 aggregator_id: _builtins.str,
                 configuration_item_change_notification: _builtins.bool,
                 configuration_snapshot: _builtins.bool,
                 delivery_channel_assume_role_arn: _builtins.str,
                 delivery_channel_condition: _builtins.str,
                 delivery_channel_id: _builtins.str,
                 delivery_channel_name: _builtins.str,
                 delivery_channel_target_arn: _builtins.str,
                 delivery_channel_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 non_compliant_notification: _builtins.bool,
                 oversized_data_oss_target_arn: _builtins.str,
                 status: _builtins.int):
        """
        :param _builtins.str account_id: The Aliyun User Id.
        :param _builtins.str aggregator_id: The ID of the Aggregator.
        :param _builtins.bool configuration_item_change_notification: Open or close delivery configuration change history.
        :param _builtins.bool configuration_snapshot: Open or close timed snapshot of shipping resources.
        :param _builtins.str delivery_channel_assume_role_arn: The Alibaba Cloud Resource Name (ARN) of the role to be assumed by the delivery method.
        :param _builtins.str delivery_channel_condition: The rule attached to the delivery method.
        :param _builtins.str delivery_channel_id: The ID of the delivery method.
        :param _builtins.str delivery_channel_name: The name of the delivery method.
        :param _builtins.str delivery_channel_target_arn: The ARN of the delivery destination.
        :param _builtins.str delivery_channel_type: The type of the delivery method.
        :param _builtins.str description: The description of the delivery method.
        :param _builtins.str id: The ID of the Aggregate Delivery.
        :param _builtins.bool non_compliant_notification: Open or close non-compliance events of delivery resources.
        :param _builtins.str oversized_data_oss_target_arn: The oss ARN of the delivery channel when the value data oversized limit.
        :param _builtins.int status: The status of the delivery method. Valid values: `0`: The delivery method is disabled. `1`: The delivery destination is enabled.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        pulumi.set(__self__, "configuration_item_change_notification", configuration_item_change_notification)
        pulumi.set(__self__, "configuration_snapshot", configuration_snapshot)
        pulumi.set(__self__, "delivery_channel_assume_role_arn", delivery_channel_assume_role_arn)
        pulumi.set(__self__, "delivery_channel_condition", delivery_channel_condition)
        pulumi.set(__self__, "delivery_channel_id", delivery_channel_id)
        pulumi.set(__self__, "delivery_channel_name", delivery_channel_name)
        pulumi.set(__self__, "delivery_channel_target_arn", delivery_channel_target_arn)
        pulumi.set(__self__, "delivery_channel_type", delivery_channel_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "non_compliant_notification", non_compliant_notification)
        pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The Aliyun User Id.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        """
        The ID of the Aggregator.
        """
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter(name="configurationItemChangeNotification")
    def configuration_item_change_notification(self) -> _builtins.bool:
        """
        Open or close delivery configuration change history.
        """
        return pulumi.get(self, "configuration_item_change_notification")

    @_builtins.property
    @pulumi.getter(name="configurationSnapshot")
    def configuration_snapshot(self) -> _builtins.bool:
        """
        Open or close timed snapshot of shipping resources.
        """
        return pulumi.get(self, "configuration_snapshot")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelAssumeRoleArn")
    def delivery_channel_assume_role_arn(self) -> _builtins.str:
        """
        The Alibaba Cloud Resource Name (ARN) of the role to be assumed by the delivery method.
        """
        return pulumi.get(self, "delivery_channel_assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelCondition")
    def delivery_channel_condition(self) -> _builtins.str:
        """
        The rule attached to the delivery method.
        """
        return pulumi.get(self, "delivery_channel_condition")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelId")
    def delivery_channel_id(self) -> _builtins.str:
        """
        The ID of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_id")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelName")
    def delivery_channel_name(self) -> _builtins.str:
        """
        The name of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_name")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelTargetArn")
    def delivery_channel_target_arn(self) -> _builtins.str:
        """
        The ARN of the delivery destination.
        """
        return pulumi.get(self, "delivery_channel_target_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelType")
    def delivery_channel_type(self) -> _builtins.str:
        """
        The type of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the delivery method.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Aggregate Delivery.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nonCompliantNotification")
    def non_compliant_notification(self) -> _builtins.bool:
        """
        Open or close non-compliance events of delivery resources.
        """
        return pulumi.get(self, "non_compliant_notification")

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> _builtins.str:
        """
        The oss ARN of the delivery channel when the value data oversized limit.
        """
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The status of the delivery method. Valid values: `0`: The delivery method is disabled. `1`: The delivery destination is enabled.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAggregatorsAggregatorResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 aggregator_accounts: Sequence['outputs.GetAggregatorsAggregatorAggregatorAccountResult'],
                 aggregator_id: _builtins.str,
                 aggregator_name: _builtins.str,
                 aggregator_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str account_id: Aggregator account uid.
        :param Sequence['GetAggregatorsAggregatorAggregatorAccountArgs'] aggregator_accounts: Account information in aggregator.
        :param _builtins.str aggregator_id: The id of aggregator.
        :param _builtins.str aggregator_name: The name of aggregator.
        :param _builtins.str aggregator_type: The type of aggregator.
        :param _builtins.str description: The description of aggregator.
        :param _builtins.str id: The id of the aggregator.
        :param _builtins.str status: The status of the resource. Valid Values:  `0`: creating `1`: normal `2`: deleting.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "aggregator_accounts", aggregator_accounts)
        pulumi.set(__self__, "aggregator_id", aggregator_id)
        pulumi.set(__self__, "aggregator_name", aggregator_name)
        pulumi.set(__self__, "aggregator_type", aggregator_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Aggregator account uid.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorAccounts")
    def aggregator_accounts(self) -> Sequence['outputs.GetAggregatorsAggregatorAggregatorAccountResult']:
        """
        Account information in aggregator.
        """
        return pulumi.get(self, "aggregator_accounts")

    @_builtins.property
    @pulumi.getter(name="aggregatorId")
    def aggregator_id(self) -> _builtins.str:
        """
        The id of aggregator.
        """
        return pulumi.get(self, "aggregator_id")

    @_builtins.property
    @pulumi.getter(name="aggregatorName")
    def aggregator_name(self) -> _builtins.str:
        """
        The name of aggregator.
        """
        return pulumi.get(self, "aggregator_name")

    @_builtins.property
    @pulumi.getter(name="aggregatorType")
    def aggregator_type(self) -> _builtins.str:
        """
        The type of aggregator.
        """
        return pulumi.get(self, "aggregator_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of aggregator.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the aggregator.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the resource. Valid Values:  `0`: creating `1`: normal `2`: deleting.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAggregatorsAggregatorAggregatorAccountResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 account_name: _builtins.str,
                 account_type: _builtins.str):
        """
        :param _builtins.str account_id: Aggregator account uid.
        :param _builtins.str account_name: Aggregator account name.
        :param _builtins.str account_type: Aggregator account source type.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_type", account_type)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Aggregator account uid.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        Aggregator account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> _builtins.str:
        """
        Aggregator account source type.
        """
        return pulumi.get(self, "account_type")


@pulumi.output_type
class GetCompliancePacksPackResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 compliance_pack_id: _builtins.str,
                 compliance_pack_name: _builtins.str,
                 compliance_pack_template_id: _builtins.str,
                 config_rules: Sequence['outputs.GetCompliancePacksPackConfigRuleResult'],
                 description: _builtins.str,
                 id: _builtins.str,
                 risk_level: _builtins.int,
                 status: _builtins.str):
        """
        :param _builtins.str account_id: The Aliyun User Id.
        :param _builtins.str compliance_pack_id: The Compliance Package ID.
        :param _builtins.str compliance_pack_name: The Compliance Package Name.
        :param _builtins.str compliance_pack_template_id: The template ID of the Compliance Package.
        :param Sequence['GetCompliancePacksPackConfigRuleArgs'] config_rules: A list of The Compliance Package Rules.
        :param _builtins.str description: The description of compliance pack.
        :param _builtins.str id: The ID of the Compliance Pack.
        :param _builtins.int risk_level: The Ris Level.
        :param _builtins.str status: The status of the resource. Valid values `ACTIVE`, `CREATING`.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "compliance_pack_id", compliance_pack_id)
        pulumi.set(__self__, "compliance_pack_name", compliance_pack_name)
        pulumi.set(__self__, "compliance_pack_template_id", compliance_pack_template_id)
        pulumi.set(__self__, "config_rules", config_rules)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The Aliyun User Id.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="compliancePackId")
    def compliance_pack_id(self) -> _builtins.str:
        """
        The Compliance Package ID.
        """
        return pulumi.get(self, "compliance_pack_id")

    @_builtins.property
    @pulumi.getter(name="compliancePackName")
    def compliance_pack_name(self) -> _builtins.str:
        """
        The Compliance Package Name.
        """
        return pulumi.get(self, "compliance_pack_name")

    @_builtins.property
    @pulumi.getter(name="compliancePackTemplateId")
    def compliance_pack_template_id(self) -> _builtins.str:
        """
        The template ID of the Compliance Package.
        """
        return pulumi.get(self, "compliance_pack_template_id")

    @_builtins.property
    @pulumi.getter(name="configRules")
    def config_rules(self) -> Sequence['outputs.GetCompliancePacksPackConfigRuleResult']:
        """
        A list of The Compliance Package Rules.
        """
        return pulumi.get(self, "config_rules")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of compliance pack.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Compliance Pack.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.int:
        """
        The Ris Level.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the resource. Valid values `ACTIVE`, `CREATING`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCompliancePacksPackConfigRuleResult(dict):
    def __init__(__self__, *,
                 config_rule_id: _builtins.str,
                 config_rule_parameters: Sequence['outputs.GetCompliancePacksPackConfigRuleConfigRuleParameterResult'],
                 managed_rule_identifier: _builtins.str):
        """
        :param _builtins.str config_rule_id: The ID of the rule.
        :param Sequence['GetCompliancePacksPackConfigRuleConfigRuleParameterArgs'] config_rule_parameters: A list of parameter rules.
        :param _builtins.str managed_rule_identifier: Managed Rule Identifier.
        """
        pulumi.set(__self__, "config_rule_id", config_rule_id)
        pulumi.set(__self__, "config_rule_parameters", config_rule_parameters)
        pulumi.set(__self__, "managed_rule_identifier", managed_rule_identifier)

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> _builtins.str:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "config_rule_id")

    @_builtins.property
    @pulumi.getter(name="configRuleParameters")
    def config_rule_parameters(self) -> Sequence['outputs.GetCompliancePacksPackConfigRuleConfigRuleParameterResult']:
        """
        A list of parameter rules.
        """
        return pulumi.get(self, "config_rule_parameters")

    @_builtins.property
    @pulumi.getter(name="managedRuleIdentifier")
    def managed_rule_identifier(self) -> _builtins.str:
        """
        Managed Rule Identifier.
        """
        return pulumi.get(self, "managed_rule_identifier")


@pulumi.output_type
class GetCompliancePacksPackConfigRuleConfigRuleParameterResult(dict):
    def __init__(__self__, *,
                 parameter_name: _builtins.str,
                 parameter_value: _builtins.str,
                 required: _builtins.bool):
        """
        :param _builtins.str parameter_name: The Parameter Name.
        :param _builtins.str parameter_value: The Parameter Value.
        :param _builtins.bool required: Required.
        """
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)
        pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> _builtins.str:
        """
        The Parameter Name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> _builtins.str:
        """
        The Parameter Value.
        """
        return pulumi.get(self, "parameter_value")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Required.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetConfigurationRecordersRecorderResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 id: _builtins.str,
                 organization_enable_status: _builtins.str,
                 organization_master_id: _builtins.int,
                 resource_types: Sequence[_builtins.str],
                 status: _builtins.str):
        """
        :param _builtins.str account_id: The ID of the Alicloud account.
        :param _builtins.str id: The ID of the Config Configuration Recorder. Value as the `account_id`.
        :param _builtins.str organization_enable_status: Enterprise version configuration audit enabled status.
        :param _builtins.int organization_master_id: The ID of the Enterprise management account.
        :param Sequence[_builtins.str] resource_types: A list of resource types to be monitored.
        :param _builtins.str status: Status of resource monitoring.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "organization_enable_status", organization_enable_status)
        pulumi.set(__self__, "organization_master_id", organization_master_id)
        pulumi.set(__self__, "resource_types", resource_types)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The ID of the Alicloud account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Config Configuration Recorder. Value as the `account_id`.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="organizationEnableStatus")
    def organization_enable_status(self) -> _builtins.str:
        """
        Enterprise version configuration audit enabled status.
        """
        return pulumi.get(self, "organization_enable_status")

    @_builtins.property
    @pulumi.getter(name="organizationMasterId")
    def organization_master_id(self) -> _builtins.int:
        """
        The ID of the Enterprise management account.
        """
        return pulumi.get(self, "organization_master_id")

    @_builtins.property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[_builtins.str]:
        """
        A list of resource types to be monitored.
        """
        return pulumi.get(self, "resource_types")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of resource monitoring.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDeliveriesDeliveryResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 configuration_item_change_notification: _builtins.bool,
                 configuration_snapshot: _builtins.bool,
                 delivery_channel_assume_role_arn: _builtins.str,
                 delivery_channel_condition: _builtins.str,
                 delivery_channel_id: _builtins.str,
                 delivery_channel_name: _builtins.str,
                 delivery_channel_target_arn: _builtins.str,
                 delivery_channel_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 non_compliant_notification: _builtins.bool,
                 oversized_data_oss_target_arn: _builtins.str,
                 status: _builtins.int):
        """
        :param _builtins.str account_id: The Aliyun User Id.
        :param _builtins.bool configuration_item_change_notification: Open or close delivery configuration change history.
        :param _builtins.bool configuration_snapshot: Open or close timed snapshot of shipping resources.
        :param _builtins.str delivery_channel_assume_role_arn: The Alibaba Cloud Resource Name (ARN) of the role to be assumed by the delivery method.
        :param _builtins.str delivery_channel_condition: The rule attached to the delivery method.
        :param _builtins.str delivery_channel_id: The ID of the delivery method.
        :param _builtins.str delivery_channel_name: The name of the delivery method.
        :param _builtins.str delivery_channel_target_arn: The ARN of the delivery destination.
        :param _builtins.str delivery_channel_type: The type of the delivery method.
        :param _builtins.str description: The description of the delivery method.
        :param _builtins.str id: The ID of the Delivery.
        :param _builtins.bool non_compliant_notification: Open or close non-compliance events of delivery resources.
        :param _builtins.str oversized_data_oss_target_arn: The oss ARN of the delivery channel when the value data oversized limit.
        :param _builtins.int status: The status of the delivery method. Valid values: `0`: The delivery method is disabled. `1`: The delivery destination is enabled.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "configuration_item_change_notification", configuration_item_change_notification)
        pulumi.set(__self__, "configuration_snapshot", configuration_snapshot)
        pulumi.set(__self__, "delivery_channel_assume_role_arn", delivery_channel_assume_role_arn)
        pulumi.set(__self__, "delivery_channel_condition", delivery_channel_condition)
        pulumi.set(__self__, "delivery_channel_id", delivery_channel_id)
        pulumi.set(__self__, "delivery_channel_name", delivery_channel_name)
        pulumi.set(__self__, "delivery_channel_target_arn", delivery_channel_target_arn)
        pulumi.set(__self__, "delivery_channel_type", delivery_channel_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "non_compliant_notification", non_compliant_notification)
        pulumi.set(__self__, "oversized_data_oss_target_arn", oversized_data_oss_target_arn)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The Aliyun User Id.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="configurationItemChangeNotification")
    def configuration_item_change_notification(self) -> _builtins.bool:
        """
        Open or close delivery configuration change history.
        """
        return pulumi.get(self, "configuration_item_change_notification")

    @_builtins.property
    @pulumi.getter(name="configurationSnapshot")
    def configuration_snapshot(self) -> _builtins.bool:
        """
        Open or close timed snapshot of shipping resources.
        """
        return pulumi.get(self, "configuration_snapshot")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelAssumeRoleArn")
    def delivery_channel_assume_role_arn(self) -> _builtins.str:
        """
        The Alibaba Cloud Resource Name (ARN) of the role to be assumed by the delivery method.
        """
        return pulumi.get(self, "delivery_channel_assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelCondition")
    def delivery_channel_condition(self) -> _builtins.str:
        """
        The rule attached to the delivery method.
        """
        return pulumi.get(self, "delivery_channel_condition")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelId")
    def delivery_channel_id(self) -> _builtins.str:
        """
        The ID of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_id")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelName")
    def delivery_channel_name(self) -> _builtins.str:
        """
        The name of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_name")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelTargetArn")
    def delivery_channel_target_arn(self) -> _builtins.str:
        """
        The ARN of the delivery destination.
        """
        return pulumi.get(self, "delivery_channel_target_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelType")
    def delivery_channel_type(self) -> _builtins.str:
        """
        The type of the delivery method.
        """
        return pulumi.get(self, "delivery_channel_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the delivery method.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Delivery.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nonCompliantNotification")
    def non_compliant_notification(self) -> _builtins.bool:
        """
        Open or close non-compliance events of delivery resources.
        """
        return pulumi.get(self, "non_compliant_notification")

    @_builtins.property
    @pulumi.getter(name="oversizedDataOssTargetArn")
    def oversized_data_oss_target_arn(self) -> _builtins.str:
        """
        The oss ARN of the delivery channel when the value data oversized limit.
        """
        return pulumi.get(self, "oversized_data_oss_target_arn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The status of the delivery method. Valid values: `0`: The delivery method is disabled. `1`: The delivery destination is enabled.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDeliveryChannelsChannelResult(dict):
    def __init__(__self__, *,
                 delivery_channel_assume_role_arn: _builtins.str,
                 delivery_channel_condition: _builtins.str,
                 delivery_channel_id: _builtins.str,
                 delivery_channel_name: _builtins.str,
                 delivery_channel_target_arn: _builtins.str,
                 delivery_channel_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.int):
        """
        :param _builtins.str delivery_channel_assume_role_arn: The Alibaba Cloud Resource Name (ARN) of the role assumed by delivery method.
        :param _builtins.str delivery_channel_condition: The rule attached to the delivery method. This parameter is applicable only to delivery methods of the Message Service (MNS) type.
        :param _builtins.str delivery_channel_id: The ID of the delivery channel.
        :param _builtins.str delivery_channel_name: The name of the delivery channel.
        :param _builtins.str delivery_channel_target_arn: The ARN of the delivery destination.
        :param _builtins.str delivery_channel_type: The type of the delivery channel.
        :param _builtins.str description: The description of the delivery channel.
        :param _builtins.str id: The ID of the Config Delivery Channel.
        :param _builtins.int status: The status of the config delivery channel. Valid values `0`: Disable delivery channel, `1`: Enable delivery channel.
        """
        pulumi.set(__self__, "delivery_channel_assume_role_arn", delivery_channel_assume_role_arn)
        pulumi.set(__self__, "delivery_channel_condition", delivery_channel_condition)
        pulumi.set(__self__, "delivery_channel_id", delivery_channel_id)
        pulumi.set(__self__, "delivery_channel_name", delivery_channel_name)
        pulumi.set(__self__, "delivery_channel_target_arn", delivery_channel_target_arn)
        pulumi.set(__self__, "delivery_channel_type", delivery_channel_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="deliveryChannelAssumeRoleArn")
    def delivery_channel_assume_role_arn(self) -> _builtins.str:
        """
        The Alibaba Cloud Resource Name (ARN) of the role assumed by delivery method.
        """
        return pulumi.get(self, "delivery_channel_assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelCondition")
    def delivery_channel_condition(self) -> _builtins.str:
        """
        The rule attached to the delivery method. This parameter is applicable only to delivery methods of the Message Service (MNS) type.
        """
        return pulumi.get(self, "delivery_channel_condition")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelId")
    def delivery_channel_id(self) -> _builtins.str:
        """
        The ID of the delivery channel.
        """
        return pulumi.get(self, "delivery_channel_id")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelName")
    def delivery_channel_name(self) -> _builtins.str:
        """
        The name of the delivery channel.
        """
        return pulumi.get(self, "delivery_channel_name")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelTargetArn")
    def delivery_channel_target_arn(self) -> _builtins.str:
        """
        The ARN of the delivery destination.
        """
        return pulumi.get(self, "delivery_channel_target_arn")

    @_builtins.property
    @pulumi.getter(name="deliveryChannelType")
    def delivery_channel_type(self) -> _builtins.str:
        """
        The type of the delivery channel.
        """
        return pulumi.get(self, "delivery_channel_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the delivery channel.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Config Delivery Channel.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The status of the config delivery channel. Valid values `0`: Disable delivery channel, `1`: Enable delivery channel.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRulesRuleResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 compliance_pack_id: _builtins.str,
                 compliances: Sequence['outputs.GetRulesRuleComplianceResult'],
                 config_rule_arn: _builtins.str,
                 config_rule_id: _builtins.str,
                 config_rule_state: _builtins.str,
                 config_rule_trigger_types: _builtins.str,
                 description: _builtins.str,
                 event_source: _builtins.str,
                 exclude_resource_ids_scope: _builtins.str,
                 id: _builtins.str,
                 input_parameters: Mapping[str, _builtins.str],
                 maximum_execution_frequency: _builtins.str,
                 modified_timestamp: _builtins.str,
                 region_ids_scope: _builtins.str,
                 resource_group_ids_scope: _builtins.str,
                 resource_types_scopes: Sequence[_builtins.str],
                 risk_level: _builtins.int,
                 rule_name: _builtins.str,
                 scope_compliance_resource_types: Sequence[_builtins.str],
                 source_detail_message_type: _builtins.str,
                 source_identifier: _builtins.str,
                 source_maximum_execution_frequency: _builtins.str,
                 source_owner: _builtins.str,
                 status: _builtins.str,
                 tag_key_scope: _builtins.str,
                 tag_value_scope: _builtins.str):
        """
        :param _builtins.str account_id: The ID of the Alibaba Cloud account.
        :param _builtins.str compliance_pack_id: The compliance package ID.
        :param Sequence['GetRulesRuleComplianceArgs'] compliances: The information about the compliance evaluations based on the rule.
        :param _builtins.str config_rule_arn: The ARN of the Config Rule.
        :param _builtins.str config_rule_id: The ID of the Config Rule.
        :param _builtins.str config_rule_state: Field `config_rule_state` has been deprecated from provider version 1.124.1. New field `status` instead.
        :param _builtins.str config_rule_trigger_types: (Available since v1.124.1) A list of trigger types of config rule.
        :param _builtins.str description: The description of the Config Rule.
        :param _builtins.str event_source: Event source of the Config Rule.
        :param _builtins.str exclude_resource_ids_scope: (Available since v1.124.1) The scope of exclude of resource ids.
        :param _builtins.str id: The ID of the Config Rule.
        :param Mapping[str, _builtins.str] input_parameters: The input parameters of the Config Rule.
        :param _builtins.str maximum_execution_frequency: (Available since v1.124.1) The frequency of maximum execution.
        :param _builtins.str modified_timestamp: the timestamp of the Config Rule modified.
        :param _builtins.str region_ids_scope: (Available since v1.124.1) The scope of region ids.
        :param _builtins.str resource_group_ids_scope: (Available since v1.124.1) The scope of resource group ids.
        :param Sequence[_builtins.str] resource_types_scopes: (Available since v1.124.1) The scope of resource types.
        :param _builtins.int risk_level: The risk level of Config Rule. Valid values: `1`: Critical ,`2`: Warning , `3`: Info.
        :param _builtins.str rule_name: The name of config rule.
        :param Sequence[_builtins.str] scope_compliance_resource_types: The types of the resources to be evaluated against the rule.
        :param _builtins.str source_detail_message_type: Rule trigger mechanism.
        :param _builtins.str source_identifier: The identifier of the managed rule or the arn of the custom function.
        :param _builtins.str source_maximum_execution_frequency: Rule execution cycle.
        :param _builtins.str source_owner: The source owner of the Config Rule.
        :param _builtins.str status: The status of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
        :param _builtins.str tag_key_scope: (Available since v1.124.1) The scope of tag key.
        :param _builtins.str tag_value_scope: (Available since v1.124.1) The scope of tag value.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "compliance_pack_id", compliance_pack_id)
        pulumi.set(__self__, "compliances", compliances)
        pulumi.set(__self__, "config_rule_arn", config_rule_arn)
        pulumi.set(__self__, "config_rule_id", config_rule_id)
        pulumi.set(__self__, "config_rule_state", config_rule_state)
        pulumi.set(__self__, "config_rule_trigger_types", config_rule_trigger_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_source", event_source)
        pulumi.set(__self__, "exclude_resource_ids_scope", exclude_resource_ids_scope)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_parameters", input_parameters)
        pulumi.set(__self__, "maximum_execution_frequency", maximum_execution_frequency)
        pulumi.set(__self__, "modified_timestamp", modified_timestamp)
        pulumi.set(__self__, "region_ids_scope", region_ids_scope)
        pulumi.set(__self__, "resource_group_ids_scope", resource_group_ids_scope)
        pulumi.set(__self__, "resource_types_scopes", resource_types_scopes)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "scope_compliance_resource_types", scope_compliance_resource_types)
        pulumi.set(__self__, "source_detail_message_type", source_detail_message_type)
        pulumi.set(__self__, "source_identifier", source_identifier)
        pulumi.set(__self__, "source_maximum_execution_frequency", source_maximum_execution_frequency)
        pulumi.set(__self__, "source_owner", source_owner)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_key_scope", tag_key_scope)
        pulumi.set(__self__, "tag_value_scope", tag_value_scope)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The ID of the Alibaba Cloud account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="compliancePackId")
    def compliance_pack_id(self) -> _builtins.str:
        """
        The compliance package ID.
        """
        return pulumi.get(self, "compliance_pack_id")

    @_builtins.property
    @pulumi.getter
    def compliances(self) -> Sequence['outputs.GetRulesRuleComplianceResult']:
        """
        The information about the compliance evaluations based on the rule.
        """
        return pulumi.get(self, "compliances")

    @_builtins.property
    @pulumi.getter(name="configRuleArn")
    def config_rule_arn(self) -> _builtins.str:
        """
        The ARN of the Config Rule.
        """
        return pulumi.get(self, "config_rule_arn")

    @_builtins.property
    @pulumi.getter(name="configRuleId")
    def config_rule_id(self) -> _builtins.str:
        """
        The ID of the Config Rule.
        """
        return pulumi.get(self, "config_rule_id")

    @_builtins.property
    @pulumi.getter(name="configRuleState")
    def config_rule_state(self) -> _builtins.str:
        """
        Field `config_rule_state` has been deprecated from provider version 1.124.1. New field `status` instead.
        """
        return pulumi.get(self, "config_rule_state")

    @_builtins.property
    @pulumi.getter(name="configRuleTriggerTypes")
    def config_rule_trigger_types(self) -> _builtins.str:
        """
        (Available since v1.124.1) A list of trigger types of config rule.
        """
        return pulumi.get(self, "config_rule_trigger_types")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Config Rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> _builtins.str:
        """
        Event source of the Config Rule.
        """
        return pulumi.get(self, "event_source")

    @_builtins.property
    @pulumi.getter(name="excludeResourceIdsScope")
    def exclude_resource_ids_scope(self) -> _builtins.str:
        """
        (Available since v1.124.1) The scope of exclude of resource ids.
        """
        return pulumi.get(self, "exclude_resource_ids_scope")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the Config Rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Mapping[str, _builtins.str]:
        """
        The input parameters of the Config Rule.
        """
        return pulumi.get(self, "input_parameters")

    @_builtins.property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> _builtins.str:
        """
        (Available since v1.124.1) The frequency of maximum execution.
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @_builtins.property
    @pulumi.getter(name="modifiedTimestamp")
    def modified_timestamp(self) -> _builtins.str:
        """
        the timestamp of the Config Rule modified.
        """
        return pulumi.get(self, "modified_timestamp")

    @_builtins.property
    @pulumi.getter(name="regionIdsScope")
    def region_ids_scope(self) -> _builtins.str:
        """
        (Available since v1.124.1) The scope of region ids.
        """
        return pulumi.get(self, "region_ids_scope")

    @_builtins.property
    @pulumi.getter(name="resourceGroupIdsScope")
    def resource_group_ids_scope(self) -> _builtins.str:
        """
        (Available since v1.124.1) The scope of resource group ids.
        """
        return pulumi.get(self, "resource_group_ids_scope")

    @_builtins.property
    @pulumi.getter(name="resourceTypesScopes")
    def resource_types_scopes(self) -> Sequence[_builtins.str]:
        """
        (Available since v1.124.1) The scope of resource types.
        """
        return pulumi.get(self, "resource_types_scopes")

    @_builtins.property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> _builtins.int:
        """
        The risk level of Config Rule. Valid values: `1`: Critical ,`2`: Warning , `3`: Info.
        """
        return pulumi.get(self, "risk_level")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        The name of config rule.
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="scopeComplianceResourceTypes")
    def scope_compliance_resource_types(self) -> Sequence[_builtins.str]:
        """
        The types of the resources to be evaluated against the rule.
        """
        return pulumi.get(self, "scope_compliance_resource_types")

    @_builtins.property
    @pulumi.getter(name="sourceDetailMessageType")
    def source_detail_message_type(self) -> _builtins.str:
        """
        Rule trigger mechanism.
        """
        return pulumi.get(self, "source_detail_message_type")

    @_builtins.property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> _builtins.str:
        """
        The identifier of the managed rule or the arn of the custom function.
        """
        return pulumi.get(self, "source_identifier")

    @_builtins.property
    @pulumi.getter(name="sourceMaximumExecutionFrequency")
    def source_maximum_execution_frequency(self) -> _builtins.str:
        """
        Rule execution cycle.
        """
        return pulumi.get(self, "source_maximum_execution_frequency")

    @_builtins.property
    @pulumi.getter(name="sourceOwner")
    def source_owner(self) -> _builtins.str:
        """
        The source owner of the Config Rule.
        """
        return pulumi.get(self, "source_owner")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the config rule, valid values: `ACTIVE`, `DELETING`, `EVALUATING` and `INACTIVE`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> _builtins.str:
        """
        (Available since v1.124.1) The scope of tag key.
        """
        return pulumi.get(self, "tag_key_scope")

    @_builtins.property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> _builtins.str:
        """
        (Available since v1.124.1) The scope of tag value.
        """
        return pulumi.get(self, "tag_value_scope")


@pulumi.output_type
class GetRulesRuleComplianceResult(dict):
    def __init__(__self__, *,
                 compliance_type: _builtins.str,
                 count: _builtins.int):
        """
        :param _builtins.str compliance_type: The compliance evaluation result of the target resources.
        :param _builtins.int count: The number of resources with the specified compliance evaluation result.
        """
        pulumi.set(__self__, "compliance_type", compliance_type)
        pulumi.set(__self__, "count", count)

    @_builtins.property
    @pulumi.getter(name="complianceType")
    def compliance_type(self) -> _builtins.str:
        """
        The compliance evaluation result of the target resources.
        """
        return pulumi.get(self, "compliance_type")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        The number of resources with the specified compliance evaluation result.
        """
        return pulumi.get(self, "count")


