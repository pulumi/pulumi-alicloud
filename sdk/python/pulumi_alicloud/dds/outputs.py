# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMongoInstancesInstanceResult',
    'GetMongoInstancesInstanceMongoResult',
    'GetMongoInstancesInstanceShardResult',
]

@pulumi.output_type
class GetMongoInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 charge_type: str,
                 creation_time: str,
                 engine: str,
                 engine_version: str,
                 expiration_time: str,
                 id: str,
                 instance_class: str,
                 instance_type: str,
                 lock_mode: str,
                 mongos: Sequence['outputs.GetMongoInstancesInstanceMongoResult'],
                 name: str,
                 network_type: str,
                 region_id: str,
                 replication: str,
                 shards: Sequence['outputs.GetMongoInstancesInstanceShardResult'],
                 status: str,
                 storage: int,
                 tags: Mapping[str, Any]):
        GetMongoInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_zone=availability_zone,
            charge_type=charge_type,
            creation_time=creation_time,
            engine=engine,
            engine_version=engine_version,
            expiration_time=expiration_time,
            id=id,
            instance_class=instance_class,
            instance_type=instance_type,
            lock_mode=lock_mode,
            mongos=mongos,
            name=name,
            network_type=network_type,
            region_id=region_id,
            replication=replication,
            shards=shards,
            status=status,
            storage=storage,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_zone: str,
             charge_type: str,
             creation_time: str,
             engine: str,
             engine_version: str,
             expiration_time: str,
             id: str,
             instance_class: str,
             instance_type: str,
             lock_mode: str,
             mongos: Sequence['outputs.GetMongoInstancesInstanceMongoResult'],
             name: str,
             network_type: str,
             region_id: str,
             replication: str,
             shards: Sequence['outputs.GetMongoInstancesInstanceShardResult'],
             status: str,
             storage: int,
             tags: Mapping[str, Any],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'chargeType' in kwargs:
            charge_type = kwargs['chargeType']
        if 'creationTime' in kwargs:
            creation_time = kwargs['creationTime']
        if 'engineVersion' in kwargs:
            engine_version = kwargs['engineVersion']
        if 'expirationTime' in kwargs:
            expiration_time = kwargs['expirationTime']
        if 'instanceClass' in kwargs:
            instance_class = kwargs['instanceClass']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'lockMode' in kwargs:
            lock_mode = kwargs['lockMode']
        if 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']

        _setter("availability_zone", availability_zone)
        _setter("charge_type", charge_type)
        _setter("creation_time", creation_time)
        _setter("engine", engine)
        _setter("engine_version", engine_version)
        _setter("expiration_time", expiration_time)
        _setter("id", id)
        _setter("instance_class", instance_class)
        _setter("instance_type", instance_type)
        _setter("lock_mode", lock_mode)
        _setter("mongos", mongos)
        _setter("name", name)
        _setter("network_type", network_type)
        _setter("region_id", region_id)
        _setter("replication", replication)
        _setter("shards", shards)
        _setter("status", status)
        _setter("storage", storage)
        _setter("tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> str:
        return pulumi.get(self, "instance_class")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> str:
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter
    def mongos(self) -> Sequence['outputs.GetMongoInstancesInstanceMongoResult']:
        return pulumi.get(self, "mongos")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def replication(self) -> str:
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter
    def shards(self) -> Sequence['outputs.GetMongoInstancesInstanceShardResult']:
        return pulumi.get(self, "shards")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetMongoInstancesInstanceMongoResult(dict):
    def __init__(__self__, *,
                 class_: str,
                 description: str,
                 node_id: str):
        GetMongoInstancesInstanceMongoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            class_=class_,
            description=description,
            node_id=node_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             class_: str,
             description: str,
             node_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'class' in kwargs:
            class_ = kwargs['class']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']

        _setter("class_", class_)
        _setter("description", description)
        _setter("node_id", node_id)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")


@pulumi.output_type
class GetMongoInstancesInstanceShardResult(dict):
    def __init__(__self__, *,
                 class_: str,
                 description: str,
                 node_id: str,
                 storage: int):
        GetMongoInstancesInstanceShardResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            class_=class_,
            description=description,
            node_id=node_id,
            storage=storage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             class_: str,
             description: str,
             node_id: str,
             storage: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'class' in kwargs:
            class_ = kwargs['class']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']

        _setter("class_", class_)
        _setter("description", description)
        _setter("node_id", node_id)
        _setter("storage", storage)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")


