# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBindingsBindingResult',
    'GetExchangesExchangeResult',
    'GetInstancesInstanceResult',
    'GetQueuesQueueResult',
    'GetStaticAccountsAccountResult',
    'GetVirtualHostsHostResult',
]

@pulumi.output_type
class GetBindingsBindingResult(dict):
    def __init__(__self__, *,
                 argument: str,
                 binding_key: str,
                 binding_type: str,
                 destination_name: str,
                 id: str,
                 instance_id: str,
                 source_exchange: str,
                 virtual_host_name: str):
        """
        :param str argument: X-match Attributes. Valid Values: All: Default Value, All the Message Header of Key-Value Pairs Stored in the Must Match. Any: at Least One Pair of the Message Header of Key-Value Pairs Stored in the Must Match. This Parameter Applies Only to Headers Exchange Other Types of Exchange Is Invalid. Other Types of Exchange Here Can Either Be an Arbitrary Value.
        :param str binding_key: The Binding Key. The Source of the Binding Exchange Non-Topic Type: Can Only Contain Letters, Lowercase Letters, Numbers, and the Dash (-), the Underscore Character (_), English Periods (.) and the at Sign (@). Length from 1 to 255 Characters. The Source of the Binding Exchange Topic Type: Can Contain Letters, Lowercase Letters, Numbers, and the Dash (-), the Underscore Character (_), English Periods (.) and the at Sign (@). If You Include the Hash (.
        :param str binding_type: The Target Binding Types.
        :param str destination_name: The Target Queue Or Exchange of the Name.
        :param str id: The ID of the Binding. The value formats as `<instance_id>:<virtual_host_name>:<source_exchange>:<destination_name>`.
        :param str instance_id: Instance Id.
        :param str source_exchange: The Source Exchange Name.
        :param str virtual_host_name: Virtualhost Name.
        """
        GetBindingsBindingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            argument=argument,
            binding_key=binding_key,
            binding_type=binding_type,
            destination_name=destination_name,
            id=id,
            instance_id=instance_id,
            source_exchange=source_exchange,
            virtual_host_name=virtual_host_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             argument: str,
             binding_key: str,
             binding_type: str,
             destination_name: str,
             id: str,
             instance_id: str,
             source_exchange: str,
             virtual_host_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bindingKey' in kwargs:
            binding_key = kwargs['bindingKey']
        if 'bindingType' in kwargs:
            binding_type = kwargs['bindingType']
        if 'destinationName' in kwargs:
            destination_name = kwargs['destinationName']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'sourceExchange' in kwargs:
            source_exchange = kwargs['sourceExchange']
        if 'virtualHostName' in kwargs:
            virtual_host_name = kwargs['virtualHostName']

        _setter("argument", argument)
        _setter("binding_key", binding_key)
        _setter("binding_type", binding_type)
        _setter("destination_name", destination_name)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("source_exchange", source_exchange)
        _setter("virtual_host_name", virtual_host_name)

    @property
    @pulumi.getter
    def argument(self) -> str:
        """
        X-match Attributes. Valid Values: All: Default Value, All the Message Header of Key-Value Pairs Stored in the Must Match. Any: at Least One Pair of the Message Header of Key-Value Pairs Stored in the Must Match. This Parameter Applies Only to Headers Exchange Other Types of Exchange Is Invalid. Other Types of Exchange Here Can Either Be an Arbitrary Value.
        """
        return pulumi.get(self, "argument")

    @property
    @pulumi.getter(name="bindingKey")
    def binding_key(self) -> str:
        """
        The Binding Key. The Source of the Binding Exchange Non-Topic Type: Can Only Contain Letters, Lowercase Letters, Numbers, and the Dash (-), the Underscore Character (_), English Periods (.) and the at Sign (@). Length from 1 to 255 Characters. The Source of the Binding Exchange Topic Type: Can Contain Letters, Lowercase Letters, Numbers, and the Dash (-), the Underscore Character (_), English Periods (.) and the at Sign (@). If You Include the Hash (.
        """
        return pulumi.get(self, "binding_key")

    @property
    @pulumi.getter(name="bindingType")
    def binding_type(self) -> str:
        """
        The Target Binding Types.
        """
        return pulumi.get(self, "binding_type")

    @property
    @pulumi.getter(name="destinationName")
    def destination_name(self) -> str:
        """
        The Target Queue Or Exchange of the Name.
        """
        return pulumi.get(self, "destination_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Binding. The value formats as `<instance_id>:<virtual_host_name>:<source_exchange>:<destination_name>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="sourceExchange")
    def source_exchange(self) -> str:
        """
        The Source Exchange Name.
        """
        return pulumi.get(self, "source_exchange")

    @property
    @pulumi.getter(name="virtualHostName")
    def virtual_host_name(self) -> str:
        """
        Virtualhost Name.
        """
        return pulumi.get(self, "virtual_host_name")


@pulumi.output_type
class GetExchangesExchangeResult(dict):
    def __init__(__self__, *,
                 attributes: Mapping[str, Any],
                 auto_delete_state: bool,
                 create_time: str,
                 exchange_name: str,
                 exchange_type: str,
                 id: str,
                 instance_id: str,
                 virtual_host_name: str):
        """
        :param Mapping[str, Any] attributes: The attributes.
        :param bool auto_delete_state: Indicates whether the Auto Delete attribute is configured.
        :param str create_time: The creation time.
        :param str exchange_name: The name of the exchange.
        :param str exchange_type: The type of the exchange.
        :param str id: The ID of the Exchange. Its value is same as Queue Name.
        :param str instance_id: The ID of the instance.
        :param str virtual_host_name: The name of virtual host where an exchange resides.
        """
        GetExchangesExchangeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            auto_delete_state=auto_delete_state,
            create_time=create_time,
            exchange_name=exchange_name,
            exchange_type=exchange_type,
            id=id,
            instance_id=instance_id,
            virtual_host_name=virtual_host_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Mapping[str, Any],
             auto_delete_state: bool,
             create_time: str,
             exchange_name: str,
             exchange_type: str,
             id: str,
             instance_id: str,
             virtual_host_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoDeleteState' in kwargs:
            auto_delete_state = kwargs['autoDeleteState']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'exchangeName' in kwargs:
            exchange_name = kwargs['exchangeName']
        if 'exchangeType' in kwargs:
            exchange_type = kwargs['exchangeType']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'virtualHostName' in kwargs:
            virtual_host_name = kwargs['virtualHostName']

        _setter("attributes", attributes)
        _setter("auto_delete_state", auto_delete_state)
        _setter("create_time", create_time)
        _setter("exchange_name", exchange_name)
        _setter("exchange_type", exchange_type)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("virtual_host_name", virtual_host_name)

    @property
    @pulumi.getter
    def attributes(self) -> Mapping[str, Any]:
        """
        The attributes.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="autoDeleteState")
    def auto_delete_state(self) -> bool:
        """
        Indicates whether the Auto Delete attribute is configured.
        """
        return pulumi.get(self, "auto_delete_state")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="exchangeName")
    def exchange_name(self) -> str:
        """
        The name of the exchange.
        """
        return pulumi.get(self, "exchange_name")

    @property
    @pulumi.getter(name="exchangeType")
    def exchange_type(self) -> str:
        """
        The type of the exchange.
        """
        return pulumi.get(self, "exchange_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Exchange. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="virtualHostName")
    def virtual_host_name(self) -> str:
        """
        The name of virtual host where an exchange resides.
        """
        return pulumi.get(self, "virtual_host_name")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 expire_time: str,
                 id: str,
                 instance_id: str,
                 instance_name: str,
                 instance_type: str,
                 payment_type: str,
                 private_end_point: str,
                 public_endpoint: str,
                 renewal_duration: int,
                 renewal_duration_unit: str,
                 renewal_status: str,
                 status: str,
                 support_eip: bool):
        """
        :param str create_time: OrderCreateTime.
        :param str expire_time: ExpireTime.
        :param str id: The ID of the Instance.
        :param str instance_id: THe instance Id.
        :param str instance_name: THe instance name.
        :param str instance_type: The instance type.
        :param str payment_type: The Pay-as-You-Type Values Include: the Subscription of a Pre-Paid.
        :param str private_end_point: The private endPoint.
        :param str public_endpoint: The public dndpoint.
        :param int renewal_duration: Renewal duration.
        :param str renewal_duration_unit: Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
        :param str renewal_status: Renew status.
        :param str status: The status of the resource.
        :param bool support_eip: Whether to support eip.
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_time=create_time,
            expire_time=expire_time,
            id=id,
            instance_id=instance_id,
            instance_name=instance_name,
            instance_type=instance_type,
            payment_type=payment_type,
            private_end_point=private_end_point,
            public_endpoint=public_endpoint,
            renewal_duration=renewal_duration,
            renewal_duration_unit=renewal_duration_unit,
            renewal_status=renewal_status,
            status=status,
            support_eip=support_eip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_time: str,
             expire_time: str,
             id: str,
             instance_id: str,
             instance_name: str,
             instance_type: str,
             payment_type: str,
             private_end_point: str,
             public_endpoint: str,
             renewal_duration: int,
             renewal_duration_unit: str,
             renewal_status: str,
             status: str,
             support_eip: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'expireTime' in kwargs:
            expire_time = kwargs['expireTime']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'instanceName' in kwargs:
            instance_name = kwargs['instanceName']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if 'privateEndPoint' in kwargs:
            private_end_point = kwargs['privateEndPoint']
        if 'publicEndpoint' in kwargs:
            public_endpoint = kwargs['publicEndpoint']
        if 'renewalDuration' in kwargs:
            renewal_duration = kwargs['renewalDuration']
        if 'renewalDurationUnit' in kwargs:
            renewal_duration_unit = kwargs['renewalDurationUnit']
        if 'renewalStatus' in kwargs:
            renewal_status = kwargs['renewalStatus']
        if 'supportEip' in kwargs:
            support_eip = kwargs['supportEip']

        _setter("create_time", create_time)
        _setter("expire_time", expire_time)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("instance_name", instance_name)
        _setter("instance_type", instance_type)
        _setter("payment_type", payment_type)
        _setter("private_end_point", private_end_point)
        _setter("public_endpoint", public_endpoint)
        _setter("renewal_duration", renewal_duration)
        _setter("renewal_duration_unit", renewal_duration_unit)
        _setter("renewal_status", renewal_status)
        _setter("status", status)
        _setter("support_eip", support_eip)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        OrderCreateTime.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        ExpireTime.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        THe instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        THe instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The Pay-as-You-Type Values Include: the Subscription of a Pre-Paid.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter(name="privateEndPoint")
    def private_end_point(self) -> str:
        """
        The private endPoint.
        """
        return pulumi.get(self, "private_end_point")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        """
        The public dndpoint.
        """
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter(name="renewalDuration")
    def renewal_duration(self) -> int:
        """
        Renewal duration.
        """
        return pulumi.get(self, "renewal_duration")

    @property
    @pulumi.getter(name="renewalDurationUnit")
    def renewal_duration_unit(self) -> str:
        """
        Auto-Renewal Cycle Unit Values Include: Month: Month. Year: Years.
        """
        return pulumi.get(self, "renewal_duration_unit")

    @property
    @pulumi.getter(name="renewalStatus")
    def renewal_status(self) -> str:
        """
        Renew status.
        """
        return pulumi.get(self, "renewal_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportEip")
    def support_eip(self) -> bool:
        """
        Whether to support eip.
        """
        return pulumi.get(self, "support_eip")


@pulumi.output_type
class GetQueuesQueueResult(dict):
    def __init__(__self__, *,
                 attributes: Mapping[str, Any],
                 auto_delete_state: bool,
                 create_time: str,
                 exclusive_state: bool,
                 id: str,
                 instance_id: str,
                 last_consume_time: str,
                 queue_name: str,
                 virtual_host_name: str):
        """
        :param Mapping[str, Any] attributes: The attributes for the Queue.
        :param bool auto_delete_state: Specifies whether the Auto Delete attribute is configured.
        :param str create_time: CreateTime.
        :param bool exclusive_state: Specifies whether the queue is an exclusive queue.
        :param str id: The ID of the Queue. Its value is same as Queue Name.
        :param str instance_id: The ID of the instance.
        :param str last_consume_time: The last consume time.
        :param str queue_name: The queue name.
        :param str virtual_host_name: The name of the virtual host.
        """
        GetQueuesQueueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            auto_delete_state=auto_delete_state,
            create_time=create_time,
            exclusive_state=exclusive_state,
            id=id,
            instance_id=instance_id,
            last_consume_time=last_consume_time,
            queue_name=queue_name,
            virtual_host_name=virtual_host_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Mapping[str, Any],
             auto_delete_state: bool,
             create_time: str,
             exclusive_state: bool,
             id: str,
             instance_id: str,
             last_consume_time: str,
             queue_name: str,
             virtual_host_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoDeleteState' in kwargs:
            auto_delete_state = kwargs['autoDeleteState']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'exclusiveState' in kwargs:
            exclusive_state = kwargs['exclusiveState']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'lastConsumeTime' in kwargs:
            last_consume_time = kwargs['lastConsumeTime']
        if 'queueName' in kwargs:
            queue_name = kwargs['queueName']
        if 'virtualHostName' in kwargs:
            virtual_host_name = kwargs['virtualHostName']

        _setter("attributes", attributes)
        _setter("auto_delete_state", auto_delete_state)
        _setter("create_time", create_time)
        _setter("exclusive_state", exclusive_state)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("last_consume_time", last_consume_time)
        _setter("queue_name", queue_name)
        _setter("virtual_host_name", virtual_host_name)

    @property
    @pulumi.getter
    def attributes(self) -> Mapping[str, Any]:
        """
        The attributes for the Queue.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="autoDeleteState")
    def auto_delete_state(self) -> bool:
        """
        Specifies whether the Auto Delete attribute is configured.
        """
        return pulumi.get(self, "auto_delete_state")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        CreateTime.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="exclusiveState")
    def exclusive_state(self) -> bool:
        """
        Specifies whether the queue is an exclusive queue.
        """
        return pulumi.get(self, "exclusive_state")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Queue. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="lastConsumeTime")
    def last_consume_time(self) -> str:
        """
        The last consume time.
        """
        return pulumi.get(self, "last_consume_time")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        The queue name.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="virtualHostName")
    def virtual_host_name(self) -> str:
        """
        The name of the virtual host.
        """
        return pulumi.get(self, "virtual_host_name")


@pulumi.output_type
class GetStaticAccountsAccountResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 create_time: str,
                 id: str,
                 instance_id: str,
                 master_uid: str,
                 password: str,
                 user_name: str):
        """
        :param str access_key: Access key.
        :param str create_time: Create time stamp. Unix timestamp, to millisecond level.
        :param str id: The `key` of the resource supplied above.The value is formulated as `<instance_id>:<access_key>`.
        :param str instance_id: InstanceId
        :param str master_uid: The ID of the user's primary account.
        :param str password: Static password.
        :param str user_name: Static username.
        """
        GetStaticAccountsAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            create_time=create_time,
            id=id,
            instance_id=instance_id,
            master_uid=master_uid,
            password=password,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             create_time: str,
             id: str,
             instance_id: str,
             master_uid: str,
             password: str,
             user_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'masterUid' in kwargs:
            master_uid = kwargs['masterUid']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        _setter("access_key", access_key)
        _setter("create_time", create_time)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("master_uid", master_uid)
        _setter("password", password)
        _setter("user_name", user_name)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        Access key.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp. Unix timestamp, to millisecond level.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The `key` of the resource supplied above.The value is formulated as `<instance_id>:<access_key>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        InstanceId
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="masterUid")
    def master_uid(self) -> str:
        """
        The ID of the user's primary account.
        """
        return pulumi.get(self, "master_uid")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Static password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Static username.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetVirtualHostsHostResult(dict):
    def __init__(__self__, *,
                 id: str,
                 instance_id: str,
                 virtual_host_name: str):
        """
        :param str id: The ID of the Virtual Host.
        :param str instance_id: InstanceId.
        :param str virtual_host_name: VirtualHostName.
        """
        GetVirtualHostsHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            instance_id=instance_id,
            virtual_host_name=virtual_host_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             instance_id: str,
             virtual_host_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'virtualHostName' in kwargs:
            virtual_host_name = kwargs['virtualHostName']

        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("virtual_host_name", virtual_host_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Virtual Host.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        InstanceId.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="virtualHostName")
    def virtual_host_name(self) -> str:
        """
        VirtualHostName.
        """
        return pulumi.get(self, "virtual_host_name")


