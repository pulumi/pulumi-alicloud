# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['MachineGroup']


class MachineGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identify_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identify_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## Import

        Log machine group can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:log/machineGroup:MachineGroup example tf-log:tf-machine-group
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identify_lists: The specific machine identification, which can be an IP address or user-defined identity.
        :param pulumi.Input[str] identify_type: The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
        :param pulumi.Input[str] name: The machine group name, which is unique in the same project.
        :param pulumi.Input[str] project: The project name to the machine group belongs.
        :param pulumi.Input[str] topic: The topic of a machine group.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if identify_lists is None:
                raise TypeError("Missing required property 'identify_lists'")
            __props__['identify_lists'] = identify_lists
            __props__['identify_type'] = identify_type
            __props__['name'] = name
            if project is None:
                raise TypeError("Missing required property 'project'")
            __props__['project'] = project
            __props__['topic'] = topic
        super(MachineGroup, __self__).__init__(
            'alicloud:log/machineGroup:MachineGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            identify_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            identify_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            topic: Optional[pulumi.Input[str]] = None) -> 'MachineGroup':
        """
        Get an existing MachineGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identify_lists: The specific machine identification, which can be an IP address or user-defined identity.
        :param pulumi.Input[str] identify_type: The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
        :param pulumi.Input[str] name: The machine group name, which is unique in the same project.
        :param pulumi.Input[str] project: The project name to the machine group belongs.
        :param pulumi.Input[str] topic: The topic of a machine group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["identify_lists"] = identify_lists
        __props__["identify_type"] = identify_type
        __props__["name"] = name
        __props__["project"] = project
        __props__["topic"] = topic
        return MachineGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="identifyLists")
    def identify_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The specific machine identification, which can be an IP address or user-defined identity.
        """
        return pulumi.get(self, "identify_lists")

    @property
    @pulumi.getter(name="identifyType")
    def identify_type(self) -> pulumi.Output[Optional[str]]:
        """
        The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
        """
        return pulumi.get(self, "identify_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The machine group name, which is unique in the same project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The project name to the machine group belongs.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Output[Optional[str]]:
        """
        The topic of a machine group.
        """
        return pulumi.get(self, "topic")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

