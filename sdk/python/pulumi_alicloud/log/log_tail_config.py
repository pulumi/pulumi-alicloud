# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['LogTailConfig']


class LogTailConfig(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 input_detail: Optional[pulumi.Input[str]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 log_sample: Optional[pulumi.Input[str]] = None,
                 logstore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## Import

        Logtial config can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:log/logTailConfig:LogTailConfig example tf-log:tf-log-store:tf-log-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] input_detail: The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
        :param pulumi.Input[str] input_type: The input type. Currently only two types of files and plugin are supported.
        :param pulumi.Input[str] log_sample: （Optional）The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
        :param pulumi.Input[str] logstore: The log store name to the query index belongs.
        :param pulumi.Input[str] name: The Logtail configuration name, which is unique in the same project.
        :param pulumi.Input[str] output_type: The output type. Currently, only LogService is supported.
        :param pulumi.Input[str] project: The project name to the log store belongs.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if input_detail is None:
                raise TypeError("Missing required property 'input_detail'")
            __props__['input_detail'] = input_detail
            if input_type is None:
                raise TypeError("Missing required property 'input_type'")
            __props__['input_type'] = input_type
            __props__['log_sample'] = log_sample
            if logstore is None:
                raise TypeError("Missing required property 'logstore'")
            __props__['logstore'] = logstore
            __props__['name'] = name
            if output_type is None:
                raise TypeError("Missing required property 'output_type'")
            __props__['output_type'] = output_type
            if project is None:
                raise TypeError("Missing required property 'project'")
            __props__['project'] = project
        super(LogTailConfig, __self__).__init__(
            'alicloud:log/logTailConfig:LogTailConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            input_detail: Optional[pulumi.Input[str]] = None,
            input_type: Optional[pulumi.Input[str]] = None,
            log_sample: Optional[pulumi.Input[str]] = None,
            logstore: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output_type: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None) -> 'LogTailConfig':
        """
        Get an existing LogTailConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] input_detail: The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
        :param pulumi.Input[str] input_type: The input type. Currently only two types of files and plugin are supported.
        :param pulumi.Input[str] log_sample: （Optional）The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
        :param pulumi.Input[str] logstore: The log store name to the query index belongs.
        :param pulumi.Input[str] name: The Logtail configuration name, which is unique in the same project.
        :param pulumi.Input[str] output_type: The output type. Currently, only LogService is supported.
        :param pulumi.Input[str] project: The project name to the log store belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["input_detail"] = input_detail
        __props__["input_type"] = input_type
        __props__["log_sample"] = log_sample
        __props__["logstore"] = logstore
        __props__["name"] = name
        __props__["output_type"] = output_type
        __props__["project"] = project
        return LogTailConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="inputDetail")
    def input_detail(self) -> pulumi.Output[str]:
        """
        The logtail configure the required JSON files. ([Refer to details](https://www.alibabacloud.com/help/doc-detail/29058.htm))
        """
        return pulumi.get(self, "input_detail")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> pulumi.Output[str]:
        """
        The input type. Currently only two types of files and plugin are supported.
        """
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter(name="logSample")
    def log_sample(self) -> pulumi.Output[Optional[str]]:
        """
        （Optional）The log sample of the Logtail configuration. The log size cannot exceed 1,000 bytes.
        """
        return pulumi.get(self, "log_sample")

    @property
    @pulumi.getter
    def logstore(self) -> pulumi.Output[str]:
        """
        The log store name to the query index belongs.
        """
        return pulumi.get(self, "logstore")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Logtail configuration name, which is unique in the same project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> pulumi.Output[str]:
        """
        The output type. Currently, only LogService is supported.
        """
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The project name to the log store belongs.
        """
        return pulumi.get(self, "project")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

