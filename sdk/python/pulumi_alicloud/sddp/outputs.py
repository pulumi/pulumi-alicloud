# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConfigsConfigResult',
    'GetDataLimitsLimitResult',
    'GetInstancesInstanceResult',
    'GetRulesRuleResult',
]

@pulumi.output_type
class GetConfigsConfigResult(dict):
    def __init__(__self__, *,
                 code: str,
                 config_id: str,
                 default_value: str,
                 description: str,
                 id: str,
                 value: str):
        """
        :param str code: Abnormal Alarm General Configuration Module by Using the Encoding.Valid values: `access_failed_cnt`, `access_permission_exprie_max_days`, `log_datasize_avg_days`.
        :param str config_id: Configure the Number.
        :param str default_value: Default Value.
        :param str description: Abnormal Alarm General Description of the Configuration Item.
        :param str id: The ID of the Config.
        :param str value: The Specified Exception Alarm Generic by Using the Value. Code Different Values for This Parameter the Specific Meaning of Different.
        """
        GetConfigsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            config_id=config_id,
            default_value=default_value,
            description=description,
            id=id,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             config_id: Optional[str] = None,
             default_value: Optional[str] = None,
             description: Optional[str] = None,
             id: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if code is None:
            raise TypeError("Missing 'code' argument")
        if config_id is None and 'configId' in kwargs:
            config_id = kwargs['configId']
        if config_id is None:
            raise TypeError("Missing 'config_id' argument")
        if default_value is None and 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']
        if default_value is None:
            raise TypeError("Missing 'default_value' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("code", code)
        _setter("config_id", config_id)
        _setter("default_value", default_value)
        _setter("description", description)
        _setter("id", id)
        _setter("value", value)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Abnormal Alarm General Configuration Module by Using the Encoding.Valid values: `access_failed_cnt`, `access_permission_exprie_max_days`, `log_datasize_avg_days`.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        """
        Configure the Number.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Default Value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Abnormal Alarm General Description of the Configuration Item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Config.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Specified Exception Alarm Generic by Using the Value. Code Different Values for This Parameter the Specific Meaning of Different.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataLimitsLimitResult(dict):
    def __init__(__self__, *,
                 audit_status: int,
                 check_status: int,
                 data_limit_id: str,
                 engine_type: str,
                 id: str,
                 local_name: str,
                 log_store_day: int,
                 parent_id: str,
                 port: int,
                 resource_type: str,
                 user_name: str):
        """
        :param int audit_status: Whether to enable the log auditing feature.
        :param int check_status: The status of the connectivity test between the data asset and SDDP.
        :param str data_limit_id: The first ID of the resource.
        :param str engine_type: The type of the database.
        :param str id: The ID of the Data Limit.
        :param str local_name: The name of the service to which the data asset belongs.
        :param int log_store_day: The retention period of raw logs after you enable the log auditing feature.
        :param str parent_id: The ID of the data asset.
        :param int port: The port that is used to connect to the database.
        :param str resource_type: The type of the service to which the data asset belongs.
        :param str user_name: The name of the user who owns the data asset.
        """
        GetDataLimitsLimitResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audit_status=audit_status,
            check_status=check_status,
            data_limit_id=data_limit_id,
            engine_type=engine_type,
            id=id,
            local_name=local_name,
            log_store_day=log_store_day,
            parent_id=parent_id,
            port=port,
            resource_type=resource_type,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audit_status: Optional[int] = None,
             check_status: Optional[int] = None,
             data_limit_id: Optional[str] = None,
             engine_type: Optional[str] = None,
             id: Optional[str] = None,
             local_name: Optional[str] = None,
             log_store_day: Optional[int] = None,
             parent_id: Optional[str] = None,
             port: Optional[int] = None,
             resource_type: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if audit_status is None and 'auditStatus' in kwargs:
            audit_status = kwargs['auditStatus']
        if audit_status is None:
            raise TypeError("Missing 'audit_status' argument")
        if check_status is None and 'checkStatus' in kwargs:
            check_status = kwargs['checkStatus']
        if check_status is None:
            raise TypeError("Missing 'check_status' argument")
        if data_limit_id is None and 'dataLimitId' in kwargs:
            data_limit_id = kwargs['dataLimitId']
        if data_limit_id is None:
            raise TypeError("Missing 'data_limit_id' argument")
        if engine_type is None and 'engineType' in kwargs:
            engine_type = kwargs['engineType']
        if engine_type is None:
            raise TypeError("Missing 'engine_type' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if local_name is None and 'localName' in kwargs:
            local_name = kwargs['localName']
        if local_name is None:
            raise TypeError("Missing 'local_name' argument")
        if log_store_day is None and 'logStoreDay' in kwargs:
            log_store_day = kwargs['logStoreDay']
        if log_store_day is None:
            raise TypeError("Missing 'log_store_day' argument")
        if parent_id is None and 'parentId' in kwargs:
            parent_id = kwargs['parentId']
        if parent_id is None:
            raise TypeError("Missing 'parent_id' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")
        if resource_type is None and 'resourceType' in kwargs:
            resource_type = kwargs['resourceType']
        if resource_type is None:
            raise TypeError("Missing 'resource_type' argument")
        if user_name is None and 'userName' in kwargs:
            user_name = kwargs['userName']
        if user_name is None:
            raise TypeError("Missing 'user_name' argument")

        _setter("audit_status", audit_status)
        _setter("check_status", check_status)
        _setter("data_limit_id", data_limit_id)
        _setter("engine_type", engine_type)
        _setter("id", id)
        _setter("local_name", local_name)
        _setter("log_store_day", log_store_day)
        _setter("parent_id", parent_id)
        _setter("port", port)
        _setter("resource_type", resource_type)
        _setter("user_name", user_name)

    @property
    @pulumi.getter(name="auditStatus")
    def audit_status(self) -> int:
        """
        Whether to enable the log auditing feature.
        """
        return pulumi.get(self, "audit_status")

    @property
    @pulumi.getter(name="checkStatus")
    def check_status(self) -> int:
        """
        The status of the connectivity test between the data asset and SDDP.
        """
        return pulumi.get(self, "check_status")

    @property
    @pulumi.getter(name="dataLimitId")
    def data_limit_id(self) -> str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "data_limit_id")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        """
        The type of the database.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Data Limit.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localName")
    def local_name(self) -> str:
        """
        The name of the service to which the data asset belongs.
        """
        return pulumi.get(self, "local_name")

    @property
    @pulumi.getter(name="logStoreDay")
    def log_store_day(self) -> int:
        """
        The retention period of raw logs after you enable the log auditing feature.
        """
        return pulumi.get(self, "log_store_day")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        """
        The ID of the data asset.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that is used to connect to the database.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of the service to which the data asset belongs.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The name of the user who owns the data asset.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 authed: bool,
                 id: str,
                 instance_id: str,
                 instance_num: str,
                 odps_set: bool,
                 oss_bucket_set: bool,
                 oss_size: str,
                 payment_type: str,
                 rds_set: bool,
                 status: str):
        """
        :param bool authed: Whether the required RAM authorization is configured.
        :param str instance_id: The ID of the instance.
        :param str instance_num: The number of instances.
        :param bool odps_set: Whether the authorized MaxCompute (ODPS) assets.
        :param bool oss_bucket_set: Whether the authorized oss assets.
        :param str oss_size: The OSS size of the instance.
        :param str payment_type: The payment type of the resource. Valid values: `Subscription`.
        :param bool rds_set: Whether the authorized rds assets.
        :param str status: The status of the resource.
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authed=authed,
            id=id,
            instance_id=instance_id,
            instance_num=instance_num,
            odps_set=odps_set,
            oss_bucket_set=oss_bucket_set,
            oss_size=oss_size,
            payment_type=payment_type,
            rds_set=rds_set,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authed: Optional[bool] = None,
             id: Optional[str] = None,
             instance_id: Optional[str] = None,
             instance_num: Optional[str] = None,
             odps_set: Optional[bool] = None,
             oss_bucket_set: Optional[bool] = None,
             oss_size: Optional[str] = None,
             payment_type: Optional[str] = None,
             rds_set: Optional[bool] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authed is None:
            raise TypeError("Missing 'authed' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if instance_id is None and 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if instance_id is None:
            raise TypeError("Missing 'instance_id' argument")
        if instance_num is None and 'instanceNum' in kwargs:
            instance_num = kwargs['instanceNum']
        if instance_num is None:
            raise TypeError("Missing 'instance_num' argument")
        if odps_set is None and 'odpsSet' in kwargs:
            odps_set = kwargs['odpsSet']
        if odps_set is None:
            raise TypeError("Missing 'odps_set' argument")
        if oss_bucket_set is None and 'ossBucketSet' in kwargs:
            oss_bucket_set = kwargs['ossBucketSet']
        if oss_bucket_set is None:
            raise TypeError("Missing 'oss_bucket_set' argument")
        if oss_size is None and 'ossSize' in kwargs:
            oss_size = kwargs['ossSize']
        if oss_size is None:
            raise TypeError("Missing 'oss_size' argument")
        if payment_type is None and 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if payment_type is None:
            raise TypeError("Missing 'payment_type' argument")
        if rds_set is None and 'rdsSet' in kwargs:
            rds_set = kwargs['rdsSet']
        if rds_set is None:
            raise TypeError("Missing 'rds_set' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("authed", authed)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("instance_num", instance_num)
        _setter("odps_set", odps_set)
        _setter("oss_bucket_set", oss_bucket_set)
        _setter("oss_size", oss_size)
        _setter("payment_type", payment_type)
        _setter("rds_set", rds_set)
        _setter("status", status)

    @property
    @pulumi.getter
    def authed(self) -> bool:
        """
        Whether the required RAM authorization is configured.
        """
        return pulumi.get(self, "authed")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> str:
        """
        The number of instances.
        """
        return pulumi.get(self, "instance_num")

    @property
    @pulumi.getter(name="odpsSet")
    def odps_set(self) -> bool:
        """
        Whether the authorized MaxCompute (ODPS) assets.
        """
        return pulumi.get(self, "odps_set")

    @property
    @pulumi.getter(name="ossBucketSet")
    def oss_bucket_set(self) -> bool:
        """
        Whether the authorized oss assets.
        """
        return pulumi.get(self, "oss_bucket_set")

    @property
    @pulumi.getter(name="ossSize")
    def oss_size(self) -> str:
        """
        The OSS size of the instance.
        """
        return pulumi.get(self, "oss_size")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The payment type of the resource. Valid values: `Subscription`.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter(name="rdsSet")
    def rds_set(self) -> bool:
        """
        Whether the authorized rds assets.
        """
        return pulumi.get(self, "rds_set")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRulesRuleResult(dict):
    def __init__(__self__, *,
                 category: int,
                 category_name: str,
                 content: str,
                 content_category: str,
                 create_time: str,
                 custom_type: int,
                 description: str,
                 display_name: str,
                 gmt_modified: str,
                 id: str,
                 login_name: str,
                 major_key: str,
                 name: str,
                 product_code: str,
                 product_id: str,
                 risk_level_id: str,
                 risk_level_name: str,
                 rule_id: str,
                 stat_express: str,
                 status: int,
                 target: str,
                 user_id: str,
                 warn_level: int):
        """
        :param int category: Sensitive Data Identification Rules for the Type of.
        :param str category_name: Sensitive Data Identification Rules Belongs Type Name.
        :param str content: Sensitive Data Identification Rules the Content.
        :param str content_category: The Content Classification.
        :param str create_time: Sensitive Data Identification Rules the Creation Time of the Number of Milliseconds.
        :param int custom_type: Sensitive Data Identification Rules of Type. 0: the Built-in 1: The User-Defined.
        :param str description: Sensitive Data Identification a Description of the Rule Information.
        :param str display_name: Sensitive Data Identification Rules, Founder of Account Display Name.
        :param str gmt_modified: Sensitive Data Identification Rules to the Modified Time of the Number of Milliseconds.
        :param str id: The ID of the Rule.
        :param str login_name: Sensitive Data Identification Rules, Founder Of Account Login.
        :param str major_key: The Primary Key.
        :param str name: The name of rule.
        :param str product_code: Product Code.
        :param str product_id: Product ID.
        :param str risk_level_id: Sensitive Data Identification Rules of Risk Level ID. Valid values:1:S1, Weak Risk Level. 2:S2, Medium Risk Level. 3:S3 High Risk Level. 4:S4, the Highest Risk Level.
        :param str risk_level_name: Sensitive Data Identification Rules the Risk Level of. S1: Weak Risk Level S2: Moderate Risk Level S3: High Risk Level S4: the Highest Risk Level.
        :param str rule_id: The first ID of the resource.
        :param str stat_express: Triggered the Alarm Conditions.
        :param int status: Sensitive Data Identification Rules Detection State of.
        :param str target: The Target.
        :param str user_id: The User ID.
        :param int warn_level: The Level of Risk.
        """
        GetRulesRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            category_name=category_name,
            content=content,
            content_category=content_category,
            create_time=create_time,
            custom_type=custom_type,
            description=description,
            display_name=display_name,
            gmt_modified=gmt_modified,
            id=id,
            login_name=login_name,
            major_key=major_key,
            name=name,
            product_code=product_code,
            product_id=product_id,
            risk_level_id=risk_level_id,
            risk_level_name=risk_level_name,
            rule_id=rule_id,
            stat_express=stat_express,
            status=status,
            target=target,
            user_id=user_id,
            warn_level=warn_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[int] = None,
             category_name: Optional[str] = None,
             content: Optional[str] = None,
             content_category: Optional[str] = None,
             create_time: Optional[str] = None,
             custom_type: Optional[int] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             gmt_modified: Optional[str] = None,
             id: Optional[str] = None,
             login_name: Optional[str] = None,
             major_key: Optional[str] = None,
             name: Optional[str] = None,
             product_code: Optional[str] = None,
             product_id: Optional[str] = None,
             risk_level_id: Optional[str] = None,
             risk_level_name: Optional[str] = None,
             rule_id: Optional[str] = None,
             stat_express: Optional[str] = None,
             status: Optional[int] = None,
             target: Optional[str] = None,
             user_id: Optional[str] = None,
             warn_level: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if category_name is None and 'categoryName' in kwargs:
            category_name = kwargs['categoryName']
        if category_name is None:
            raise TypeError("Missing 'category_name' argument")
        if content is None:
            raise TypeError("Missing 'content' argument")
        if content_category is None and 'contentCategory' in kwargs:
            content_category = kwargs['contentCategory']
        if content_category is None:
            raise TypeError("Missing 'content_category' argument")
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if create_time is None:
            raise TypeError("Missing 'create_time' argument")
        if custom_type is None and 'customType' in kwargs:
            custom_type = kwargs['customType']
        if custom_type is None:
            raise TypeError("Missing 'custom_type' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if gmt_modified is None and 'gmtModified' in kwargs:
            gmt_modified = kwargs['gmtModified']
        if gmt_modified is None:
            raise TypeError("Missing 'gmt_modified' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if login_name is None and 'loginName' in kwargs:
            login_name = kwargs['loginName']
        if login_name is None:
            raise TypeError("Missing 'login_name' argument")
        if major_key is None and 'majorKey' in kwargs:
            major_key = kwargs['majorKey']
        if major_key is None:
            raise TypeError("Missing 'major_key' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if product_code is None and 'productCode' in kwargs:
            product_code = kwargs['productCode']
        if product_code is None:
            raise TypeError("Missing 'product_code' argument")
        if product_id is None and 'productId' in kwargs:
            product_id = kwargs['productId']
        if product_id is None:
            raise TypeError("Missing 'product_id' argument")
        if risk_level_id is None and 'riskLevelId' in kwargs:
            risk_level_id = kwargs['riskLevelId']
        if risk_level_id is None:
            raise TypeError("Missing 'risk_level_id' argument")
        if risk_level_name is None and 'riskLevelName' in kwargs:
            risk_level_name = kwargs['riskLevelName']
        if risk_level_name is None:
            raise TypeError("Missing 'risk_level_name' argument")
        if rule_id is None and 'ruleId' in kwargs:
            rule_id = kwargs['ruleId']
        if rule_id is None:
            raise TypeError("Missing 'rule_id' argument")
        if stat_express is None and 'statExpress' in kwargs:
            stat_express = kwargs['statExpress']
        if stat_express is None:
            raise TypeError("Missing 'stat_express' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if target is None:
            raise TypeError("Missing 'target' argument")
        if user_id is None and 'userId' in kwargs:
            user_id = kwargs['userId']
        if user_id is None:
            raise TypeError("Missing 'user_id' argument")
        if warn_level is None and 'warnLevel' in kwargs:
            warn_level = kwargs['warnLevel']
        if warn_level is None:
            raise TypeError("Missing 'warn_level' argument")

        _setter("category", category)
        _setter("category_name", category_name)
        _setter("content", content)
        _setter("content_category", content_category)
        _setter("create_time", create_time)
        _setter("custom_type", custom_type)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("gmt_modified", gmt_modified)
        _setter("id", id)
        _setter("login_name", login_name)
        _setter("major_key", major_key)
        _setter("name", name)
        _setter("product_code", product_code)
        _setter("product_id", product_id)
        _setter("risk_level_id", risk_level_id)
        _setter("risk_level_name", risk_level_name)
        _setter("rule_id", rule_id)
        _setter("stat_express", stat_express)
        _setter("status", status)
        _setter("target", target)
        _setter("user_id", user_id)
        _setter("warn_level", warn_level)

    @property
    @pulumi.getter
    def category(self) -> int:
        """
        Sensitive Data Identification Rules for the Type of.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> str:
        """
        Sensitive Data Identification Rules Belongs Type Name.
        """
        return pulumi.get(self, "category_name")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Sensitive Data Identification Rules the Content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentCategory")
    def content_category(self) -> str:
        """
        The Content Classification.
        """
        return pulumi.get(self, "content_category")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Sensitive Data Identification Rules the Creation Time of the Number of Milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> int:
        """
        Sensitive Data Identification Rules of Type. 0: the Built-in 1: The User-Defined.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Sensitive Data Identification a Description of the Rule Information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Sensitive Data Identification Rules, Founder of Account Display Name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="gmtModified")
    def gmt_modified(self) -> str:
        """
        Sensitive Data Identification Rules to the Modified Time of the Number of Milliseconds.
        """
        return pulumi.get(self, "gmt_modified")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> str:
        """
        Sensitive Data Identification Rules, Founder Of Account Login.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="majorKey")
    def major_key(self) -> str:
        """
        The Primary Key.
        """
        return pulumi.get(self, "major_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        Product Code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Product ID.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="riskLevelId")
    def risk_level_id(self) -> str:
        """
        Sensitive Data Identification Rules of Risk Level ID. Valid values:1:S1, Weak Risk Level. 2:S2, Medium Risk Level. 3:S3 High Risk Level. 4:S4, the Highest Risk Level.
        """
        return pulumi.get(self, "risk_level_id")

    @property
    @pulumi.getter(name="riskLevelName")
    def risk_level_name(self) -> str:
        """
        Sensitive Data Identification Rules the Risk Level of. S1: Weak Risk Level S2: Moderate Risk Level S3: High Risk Level S4: the Highest Risk Level.
        """
        return pulumi.get(self, "risk_level_name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="statExpress")
    def stat_express(self) -> str:
        """
        Triggered the Alarm Conditions.
        """
        return pulumi.get(self, "stat_express")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Sensitive Data Identification Rules Detection State of.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The Target.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="warnLevel")
    def warn_level(self) -> int:
        """
        The Level of Risk.
        """
        return pulumi.get(self, "warn_level")


