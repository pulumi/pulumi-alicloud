# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VvpInstanceResourceSpecArgs',
    'VvpInstanceResourceSpecArgsDict',
    'VvpInstanceStorageArgs',
    'VvpInstanceStorageArgsDict',
    'VvpInstanceStorageOssArgs',
    'VvpInstanceStorageOssArgsDict',
]

MYPY = False

if not MYPY:
    class VvpInstanceResourceSpecArgsDict(TypedDict):
        cpu: NotRequired[pulumi.Input[_builtins.int]]
        """
        CPU number.
        """
        memory_gb: NotRequired[pulumi.Input[_builtins.int]]
        """
        Memory size.
        """
elif False:
    VvpInstanceResourceSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VvpInstanceResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[_builtins.int]] = None,
                 memory_gb: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] cpu: CPU number.
        :param pulumi.Input[_builtins.int] memory_gb: Memory size.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory_gb is not None:
            pulumi.set(__self__, "memory_gb", memory_gb)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        CPU number.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Memory size.
        """
        return pulumi.get(self, "memory_gb")

    @memory_gb.setter
    def memory_gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_gb", value)


if not MYPY:
    class VvpInstanceStorageArgsDict(TypedDict):
        oss: pulumi.Input['VvpInstanceStorageOssArgsDict']
        """
        OSS stores information. See `oss` below.
        """
elif False:
    VvpInstanceStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VvpInstanceStorageArgs:
    def __init__(__self__, *,
                 oss: pulumi.Input['VvpInstanceStorageOssArgs']):
        """
        :param pulumi.Input['VvpInstanceStorageOssArgs'] oss: OSS stores information. See `oss` below.
        """
        pulumi.set(__self__, "oss", oss)

    @_builtins.property
    @pulumi.getter
    def oss(self) -> pulumi.Input['VvpInstanceStorageOssArgs']:
        """
        OSS stores information. See `oss` below.
        """
        return pulumi.get(self, "oss")

    @oss.setter
    def oss(self, value: pulumi.Input['VvpInstanceStorageOssArgs']):
        pulumi.set(self, "oss", value)


if not MYPY:
    class VvpInstanceStorageOssArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        OSS Bucket name.
        """
elif False:
    VvpInstanceStorageOssArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VvpInstanceStorageOssArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] bucket: OSS Bucket name.
        """
        pulumi.set(__self__, "bucket", bucket)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        OSS Bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)


