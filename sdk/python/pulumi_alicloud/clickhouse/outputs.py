# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DbClusterDbClusterAccessWhiteList',
    'GetAccountsAccountResult',
    'GetBackupPoliciesPolicyResult',
    'GetDbClustersClusterResult',
    'GetDbClustersClusterDbClusterAccessWhiteListResult',
    'GetDbClustersClusterScaleOutStatusResult',
    'GetRegionsRegionResult',
    'GetRegionsRegionZoneIdResult',
]

@pulumi.output_type
class DbClusterDbClusterAccessWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbClusterIpArrayAttribute":
            suggest = "db_cluster_ip_array_attribute"
        elif key == "dbClusterIpArrayName":
            suggest = "db_cluster_ip_array_name"
        elif key == "securityIpList":
            suggest = "security_ip_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbClusterDbClusterAccessWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbClusterDbClusterAccessWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbClusterDbClusterAccessWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_cluster_ip_array_attribute: Optional[str] = None,
                 db_cluster_ip_array_name: Optional[str] = None,
                 security_ip_list: Optional[str] = None):
        """
        :param str db_cluster_ip_array_attribute: Field `db_cluster_ip_array_attribute` has been removed from provider.
        :param str db_cluster_ip_array_name: Whitelist group name.
        :param str security_ip_list: The IP address list under the whitelist group.
        """
        DbClusterDbClusterAccessWhiteList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db_cluster_ip_array_attribute=db_cluster_ip_array_attribute,
            db_cluster_ip_array_name=db_cluster_ip_array_name,
            security_ip_list=security_ip_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db_cluster_ip_array_attribute: Optional[str] = None,
             db_cluster_ip_array_name: Optional[str] = None,
             security_ip_list: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if db_cluster_ip_array_attribute is None and 'dbClusterIpArrayAttribute' in kwargs:
            db_cluster_ip_array_attribute = kwargs['dbClusterIpArrayAttribute']
        if db_cluster_ip_array_name is None and 'dbClusterIpArrayName' in kwargs:
            db_cluster_ip_array_name = kwargs['dbClusterIpArrayName']
        if security_ip_list is None and 'securityIpList' in kwargs:
            security_ip_list = kwargs['securityIpList']

        if db_cluster_ip_array_attribute is not None:
            _setter("db_cluster_ip_array_attribute", db_cluster_ip_array_attribute)
        if db_cluster_ip_array_name is not None:
            _setter("db_cluster_ip_array_name", db_cluster_ip_array_name)
        if security_ip_list is not None:
            _setter("security_ip_list", security_ip_list)

    @property
    @pulumi.getter(name="dbClusterIpArrayAttribute")
    def db_cluster_ip_array_attribute(self) -> Optional[str]:
        """
        Field `db_cluster_ip_array_attribute` has been removed from provider.
        """
        return pulumi.get(self, "db_cluster_ip_array_attribute")

    @property
    @pulumi.getter(name="dbClusterIpArrayName")
    def db_cluster_ip_array_name(self) -> Optional[str]:
        """
        Whitelist group name.
        """
        return pulumi.get(self, "db_cluster_ip_array_name")

    @property
    @pulumi.getter(name="securityIpList")
    def security_ip_list(self) -> Optional[str]:
        """
        The IP address list under the whitelist group.
        """
        return pulumi.get(self, "security_ip_list")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_description: str,
                 account_name: str,
                 account_type: str,
                 db_cluster_id: str,
                 id: str,
                 status: str):
        """
        :param str account_description: In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
        :param str account_name: Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
        :param str account_type: The Valid Account type: `Normal`, `Super`.
        :param str db_cluster_id: The DBCluster id.
        :param str id: The ID of the Account. Its value is same as Queue Name.
        :param str status: The status of the resource.
        """
        GetAccountsAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_description=account_description,
            account_name=account_name,
            account_type=account_type,
            db_cluster_id=db_cluster_id,
            id=id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_description: Optional[str] = None,
             account_name: Optional[str] = None,
             account_type: Optional[str] = None,
             db_cluster_id: Optional[str] = None,
             id: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if account_description is None and 'accountDescription' in kwargs:
            account_description = kwargs['accountDescription']
        if account_description is None:
            raise TypeError("Missing 'account_description' argument")
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_type is None and 'accountType' in kwargs:
            account_type = kwargs['accountType']
        if account_type is None:
            raise TypeError("Missing 'account_type' argument")
        if db_cluster_id is None and 'dbClusterId' in kwargs:
            db_cluster_id = kwargs['dbClusterId']
        if db_cluster_id is None:
            raise TypeError("Missing 'db_cluster_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("account_description", account_description)
        _setter("account_name", account_name)
        _setter("account_type", account_type)
        _setter("db_cluster_id", db_cluster_id)
        _setter("id", id)
        _setter("status", status)

    @property
    @pulumi.getter(name="accountDescription")
    def account_description(self) -> str:
        """
        In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
        """
        return pulumi.get(self, "account_description")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        The Valid Account type: `Normal`, `Super`.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> str:
        """
        The DBCluster id.
        """
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Account. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 backup_retention_period: int,
                 db_cluster_id: str,
                 id: str,
                 preferred_backup_periods: Sequence[str],
                 preferred_backup_time: str,
                 status: str):
        """
        :param int backup_retention_period: Data backup days. Valid values: `7` to `730`.
        :param str db_cluster_id: The db cluster id.
        :param str id: The ID of the Backup Policy.
        :param Sequence[str] preferred_backup_periods: DBCluster Backup period.
        :param str preferred_backup_time: Backup Time, UTC time.
        :param str status: The status of the resource.
        """
        GetBackupPoliciesPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup_retention_period=backup_retention_period,
            db_cluster_id=db_cluster_id,
            id=id,
            preferred_backup_periods=preferred_backup_periods,
            preferred_backup_time=preferred_backup_time,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup_retention_period: Optional[int] = None,
             db_cluster_id: Optional[str] = None,
             id: Optional[str] = None,
             preferred_backup_periods: Optional[Sequence[str]] = None,
             preferred_backup_time: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if backup_retention_period is None and 'backupRetentionPeriod' in kwargs:
            backup_retention_period = kwargs['backupRetentionPeriod']
        if backup_retention_period is None:
            raise TypeError("Missing 'backup_retention_period' argument")
        if db_cluster_id is None and 'dbClusterId' in kwargs:
            db_cluster_id = kwargs['dbClusterId']
        if db_cluster_id is None:
            raise TypeError("Missing 'db_cluster_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if preferred_backup_periods is None and 'preferredBackupPeriods' in kwargs:
            preferred_backup_periods = kwargs['preferredBackupPeriods']
        if preferred_backup_periods is None:
            raise TypeError("Missing 'preferred_backup_periods' argument")
        if preferred_backup_time is None and 'preferredBackupTime' in kwargs:
            preferred_backup_time = kwargs['preferredBackupTime']
        if preferred_backup_time is None:
            raise TypeError("Missing 'preferred_backup_time' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("backup_retention_period", backup_retention_period)
        _setter("db_cluster_id", db_cluster_id)
        _setter("id", id)
        _setter("preferred_backup_periods", preferred_backup_periods)
        _setter("preferred_backup_time", preferred_backup_time)
        _setter("status", status)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> int:
        """
        Data backup days. Valid values: `7` to `730`.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> str:
        """
        The db cluster id.
        """
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Backup Policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="preferredBackupPeriods")
    def preferred_backup_periods(self) -> Sequence[str]:
        """
        DBCluster Backup period.
        """
        return pulumi.get(self, "preferred_backup_periods")

    @property
    @pulumi.getter(name="preferredBackupTime")
    def preferred_backup_time(self) -> str:
        """
        Backup Time, UTC time.
        """
        return pulumi.get(self, "preferred_backup_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDbClustersClusterResult(dict):
    def __init__(__self__, *,
                 ali_uid: str,
                 bid: str,
                 category: str,
                 commodity_code: str,
                 connection_string: str,
                 control_version: str,
                 create_time: str,
                 db_cluster_access_white_lists: Sequence['outputs.GetDbClustersClusterDbClusterAccessWhiteListResult'],
                 db_cluster_description: str,
                 db_cluster_id: str,
                 db_cluster_network_type: str,
                 db_cluster_type: str,
                 db_node_class: str,
                 db_node_count: str,
                 db_node_storage: str,
                 encryption_key: str,
                 encryption_type: str,
                 engine: str,
                 engine_version: str,
                 expire_time: str,
                 id: str,
                 is_expired: str,
                 lock_mode: str,
                 lock_reason: str,
                 maintain_time: str,
                 payment_type: str,
                 port: int,
                 public_connection_string: str,
                 public_port: str,
                 scale_out_statuses: Sequence['outputs.GetDbClustersClusterScaleOutStatusResult'],
                 status: str,
                 storage_type: str,
                 support_backup: int,
                 support_https_port: bool,
                 support_mysql_port: bool,
                 vpc_cloud_instance_id: str,
                 vpc_id: str,
                 vswitch_id: str,
                 zone_id: str):
        """
        :param str ali_uid: Alibaba Cloud account Id.
        :param str bid: The ID of the business process flow.
        :param str category: Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
        :param str commodity_code: The Commodity Code of the DBCluster.
        :param str connection_string: Connection string.
        :param str control_version: The control version of the DBCluster.
        :param str create_time: The creation time of the resource.
        :param Sequence['GetDbClustersClusterDbClusterAccessWhiteListArgs'] db_cluster_access_white_lists: The db cluster access white list.
        :param str db_cluster_description: The DBCluster description.
        :param str db_cluster_network_type: The DBCluster network type.
        :param str db_cluster_type: The DBCluster type.
        :param str db_node_class: The node class of the DBCluster.
        :param str db_node_count: The node count of the DBCluster.
        :param str db_node_storage: The node storage of the DBCluster.
        :param str encryption_key: Key management service KMS key ID.
        :param str encryption_type: Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
        :param str engine: The Engine of the DBCluster.
        :param str engine_version: The engine version of the DBCluster.
        :param str expire_time: The expiration time of the DBCluster.
        :param str id: The ID of the DBCluster.
        :param str is_expired: If the instance has expired.
        :param str lock_mode: The lock mode of the DBCluster.
        :param str lock_reason: Lock reason of the DBCluster.
        :param str maintain_time: Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
        :param str payment_type: The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        :param int port: Connection port.
        :param str public_connection_string: A public IP address for the connection.
        :param str public_port: Public network port.
        :param Sequence['GetDbClustersClusterScaleOutStatusArgs'] scale_out_statuses: Scale state.
        :param str status: The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
        :param str storage_type: Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
        :param int support_backup: Support fallback scheme.
        :param bool support_https_port: The system supports http port number.
        :param bool support_mysql_port: Supports Mysql, and those of the ports.
        :param str vpc_cloud_instance_id: Virtual Private Cloud (VPC cloud instance ID.
        :param str vpc_id: The VPC ID of the DBCluster.
        :param str vswitch_id: The vswitch id of the DBCluster.
        :param str zone_id: The zone ID of the DBCluster.
        """
        GetDbClustersClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ali_uid=ali_uid,
            bid=bid,
            category=category,
            commodity_code=commodity_code,
            connection_string=connection_string,
            control_version=control_version,
            create_time=create_time,
            db_cluster_access_white_lists=db_cluster_access_white_lists,
            db_cluster_description=db_cluster_description,
            db_cluster_id=db_cluster_id,
            db_cluster_network_type=db_cluster_network_type,
            db_cluster_type=db_cluster_type,
            db_node_class=db_node_class,
            db_node_count=db_node_count,
            db_node_storage=db_node_storage,
            encryption_key=encryption_key,
            encryption_type=encryption_type,
            engine=engine,
            engine_version=engine_version,
            expire_time=expire_time,
            id=id,
            is_expired=is_expired,
            lock_mode=lock_mode,
            lock_reason=lock_reason,
            maintain_time=maintain_time,
            payment_type=payment_type,
            port=port,
            public_connection_string=public_connection_string,
            public_port=public_port,
            scale_out_statuses=scale_out_statuses,
            status=status,
            storage_type=storage_type,
            support_backup=support_backup,
            support_https_port=support_https_port,
            support_mysql_port=support_mysql_port,
            vpc_cloud_instance_id=vpc_cloud_instance_id,
            vpc_id=vpc_id,
            vswitch_id=vswitch_id,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ali_uid: Optional[str] = None,
             bid: Optional[str] = None,
             category: Optional[str] = None,
             commodity_code: Optional[str] = None,
             connection_string: Optional[str] = None,
             control_version: Optional[str] = None,
             create_time: Optional[str] = None,
             db_cluster_access_white_lists: Optional[Sequence['outputs.GetDbClustersClusterDbClusterAccessWhiteListResult']] = None,
             db_cluster_description: Optional[str] = None,
             db_cluster_id: Optional[str] = None,
             db_cluster_network_type: Optional[str] = None,
             db_cluster_type: Optional[str] = None,
             db_node_class: Optional[str] = None,
             db_node_count: Optional[str] = None,
             db_node_storage: Optional[str] = None,
             encryption_key: Optional[str] = None,
             encryption_type: Optional[str] = None,
             engine: Optional[str] = None,
             engine_version: Optional[str] = None,
             expire_time: Optional[str] = None,
             id: Optional[str] = None,
             is_expired: Optional[str] = None,
             lock_mode: Optional[str] = None,
             lock_reason: Optional[str] = None,
             maintain_time: Optional[str] = None,
             payment_type: Optional[str] = None,
             port: Optional[int] = None,
             public_connection_string: Optional[str] = None,
             public_port: Optional[str] = None,
             scale_out_statuses: Optional[Sequence['outputs.GetDbClustersClusterScaleOutStatusResult']] = None,
             status: Optional[str] = None,
             storage_type: Optional[str] = None,
             support_backup: Optional[int] = None,
             support_https_port: Optional[bool] = None,
             support_mysql_port: Optional[bool] = None,
             vpc_cloud_instance_id: Optional[str] = None,
             vpc_id: Optional[str] = None,
             vswitch_id: Optional[str] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ali_uid is None and 'aliUid' in kwargs:
            ali_uid = kwargs['aliUid']
        if ali_uid is None:
            raise TypeError("Missing 'ali_uid' argument")
        if bid is None:
            raise TypeError("Missing 'bid' argument")
        if category is None:
            raise TypeError("Missing 'category' argument")
        if commodity_code is None and 'commodityCode' in kwargs:
            commodity_code = kwargs['commodityCode']
        if commodity_code is None:
            raise TypeError("Missing 'commodity_code' argument")
        if connection_string is None and 'connectionString' in kwargs:
            connection_string = kwargs['connectionString']
        if connection_string is None:
            raise TypeError("Missing 'connection_string' argument")
        if control_version is None and 'controlVersion' in kwargs:
            control_version = kwargs['controlVersion']
        if control_version is None:
            raise TypeError("Missing 'control_version' argument")
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if create_time is None:
            raise TypeError("Missing 'create_time' argument")
        if db_cluster_access_white_lists is None and 'dbClusterAccessWhiteLists' in kwargs:
            db_cluster_access_white_lists = kwargs['dbClusterAccessWhiteLists']
        if db_cluster_access_white_lists is None:
            raise TypeError("Missing 'db_cluster_access_white_lists' argument")
        if db_cluster_description is None and 'dbClusterDescription' in kwargs:
            db_cluster_description = kwargs['dbClusterDescription']
        if db_cluster_description is None:
            raise TypeError("Missing 'db_cluster_description' argument")
        if db_cluster_id is None and 'dbClusterId' in kwargs:
            db_cluster_id = kwargs['dbClusterId']
        if db_cluster_id is None:
            raise TypeError("Missing 'db_cluster_id' argument")
        if db_cluster_network_type is None and 'dbClusterNetworkType' in kwargs:
            db_cluster_network_type = kwargs['dbClusterNetworkType']
        if db_cluster_network_type is None:
            raise TypeError("Missing 'db_cluster_network_type' argument")
        if db_cluster_type is None and 'dbClusterType' in kwargs:
            db_cluster_type = kwargs['dbClusterType']
        if db_cluster_type is None:
            raise TypeError("Missing 'db_cluster_type' argument")
        if db_node_class is None and 'dbNodeClass' in kwargs:
            db_node_class = kwargs['dbNodeClass']
        if db_node_class is None:
            raise TypeError("Missing 'db_node_class' argument")
        if db_node_count is None and 'dbNodeCount' in kwargs:
            db_node_count = kwargs['dbNodeCount']
        if db_node_count is None:
            raise TypeError("Missing 'db_node_count' argument")
        if db_node_storage is None and 'dbNodeStorage' in kwargs:
            db_node_storage = kwargs['dbNodeStorage']
        if db_node_storage is None:
            raise TypeError("Missing 'db_node_storage' argument")
        if encryption_key is None and 'encryptionKey' in kwargs:
            encryption_key = kwargs['encryptionKey']
        if encryption_key is None:
            raise TypeError("Missing 'encryption_key' argument")
        if encryption_type is None and 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if encryption_type is None:
            raise TypeError("Missing 'encryption_type' argument")
        if engine is None:
            raise TypeError("Missing 'engine' argument")
        if engine_version is None and 'engineVersion' in kwargs:
            engine_version = kwargs['engineVersion']
        if engine_version is None:
            raise TypeError("Missing 'engine_version' argument")
        if expire_time is None and 'expireTime' in kwargs:
            expire_time = kwargs['expireTime']
        if expire_time is None:
            raise TypeError("Missing 'expire_time' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if is_expired is None and 'isExpired' in kwargs:
            is_expired = kwargs['isExpired']
        if is_expired is None:
            raise TypeError("Missing 'is_expired' argument")
        if lock_mode is None and 'lockMode' in kwargs:
            lock_mode = kwargs['lockMode']
        if lock_mode is None:
            raise TypeError("Missing 'lock_mode' argument")
        if lock_reason is None and 'lockReason' in kwargs:
            lock_reason = kwargs['lockReason']
        if lock_reason is None:
            raise TypeError("Missing 'lock_reason' argument")
        if maintain_time is None and 'maintainTime' in kwargs:
            maintain_time = kwargs['maintainTime']
        if maintain_time is None:
            raise TypeError("Missing 'maintain_time' argument")
        if payment_type is None and 'paymentType' in kwargs:
            payment_type = kwargs['paymentType']
        if payment_type is None:
            raise TypeError("Missing 'payment_type' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")
        if public_connection_string is None and 'publicConnectionString' in kwargs:
            public_connection_string = kwargs['publicConnectionString']
        if public_connection_string is None:
            raise TypeError("Missing 'public_connection_string' argument")
        if public_port is None and 'publicPort' in kwargs:
            public_port = kwargs['publicPort']
        if public_port is None:
            raise TypeError("Missing 'public_port' argument")
        if scale_out_statuses is None and 'scaleOutStatuses' in kwargs:
            scale_out_statuses = kwargs['scaleOutStatuses']
        if scale_out_statuses is None:
            raise TypeError("Missing 'scale_out_statuses' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")
        if support_backup is None and 'supportBackup' in kwargs:
            support_backup = kwargs['supportBackup']
        if support_backup is None:
            raise TypeError("Missing 'support_backup' argument")
        if support_https_port is None and 'supportHttpsPort' in kwargs:
            support_https_port = kwargs['supportHttpsPort']
        if support_https_port is None:
            raise TypeError("Missing 'support_https_port' argument")
        if support_mysql_port is None and 'supportMysqlPort' in kwargs:
            support_mysql_port = kwargs['supportMysqlPort']
        if support_mysql_port is None:
            raise TypeError("Missing 'support_mysql_port' argument")
        if vpc_cloud_instance_id is None and 'vpcCloudInstanceId' in kwargs:
            vpc_cloud_instance_id = kwargs['vpcCloudInstanceId']
        if vpc_cloud_instance_id is None:
            raise TypeError("Missing 'vpc_cloud_instance_id' argument")
        if vpc_id is None and 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if vpc_id is None:
            raise TypeError("Missing 'vpc_id' argument")
        if vswitch_id is None and 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']
        if vswitch_id is None:
            raise TypeError("Missing 'vswitch_id' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("ali_uid", ali_uid)
        _setter("bid", bid)
        _setter("category", category)
        _setter("commodity_code", commodity_code)
        _setter("connection_string", connection_string)
        _setter("control_version", control_version)
        _setter("create_time", create_time)
        _setter("db_cluster_access_white_lists", db_cluster_access_white_lists)
        _setter("db_cluster_description", db_cluster_description)
        _setter("db_cluster_id", db_cluster_id)
        _setter("db_cluster_network_type", db_cluster_network_type)
        _setter("db_cluster_type", db_cluster_type)
        _setter("db_node_class", db_node_class)
        _setter("db_node_count", db_node_count)
        _setter("db_node_storage", db_node_storage)
        _setter("encryption_key", encryption_key)
        _setter("encryption_type", encryption_type)
        _setter("engine", engine)
        _setter("engine_version", engine_version)
        _setter("expire_time", expire_time)
        _setter("id", id)
        _setter("is_expired", is_expired)
        _setter("lock_mode", lock_mode)
        _setter("lock_reason", lock_reason)
        _setter("maintain_time", maintain_time)
        _setter("payment_type", payment_type)
        _setter("port", port)
        _setter("public_connection_string", public_connection_string)
        _setter("public_port", public_port)
        _setter("scale_out_statuses", scale_out_statuses)
        _setter("status", status)
        _setter("storage_type", storage_type)
        _setter("support_backup", support_backup)
        _setter("support_https_port", support_https_port)
        _setter("support_mysql_port", support_mysql_port)
        _setter("vpc_cloud_instance_id", vpc_cloud_instance_id)
        _setter("vpc_id", vpc_id)
        _setter("vswitch_id", vswitch_id)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="aliUid")
    def ali_uid(self) -> str:
        """
        Alibaba Cloud account Id.
        """
        return pulumi.get(self, "ali_uid")

    @property
    @pulumi.getter
    def bid(self) -> str:
        """
        The ID of the business process flow.
        """
        return pulumi.get(self, "bid")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="commodityCode")
    def commodity_code(self) -> str:
        """
        The Commodity Code of the DBCluster.
        """
        return pulumi.get(self, "commodity_code")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> str:
        """
        Connection string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="controlVersion")
    def control_version(self) -> str:
        """
        The control version of the DBCluster.
        """
        return pulumi.get(self, "control_version")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbClusterAccessWhiteLists")
    def db_cluster_access_white_lists(self) -> Sequence['outputs.GetDbClustersClusterDbClusterAccessWhiteListResult']:
        """
        The db cluster access white list.
        """
        return pulumi.get(self, "db_cluster_access_white_lists")

    @property
    @pulumi.getter(name="dbClusterDescription")
    def db_cluster_description(self) -> str:
        """
        The DBCluster description.
        """
        return pulumi.get(self, "db_cluster_description")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> str:
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter(name="dbClusterNetworkType")
    def db_cluster_network_type(self) -> str:
        """
        The DBCluster network type.
        """
        return pulumi.get(self, "db_cluster_network_type")

    @property
    @pulumi.getter(name="dbClusterType")
    def db_cluster_type(self) -> str:
        """
        The DBCluster type.
        """
        return pulumi.get(self, "db_cluster_type")

    @property
    @pulumi.getter(name="dbNodeClass")
    def db_node_class(self) -> str:
        """
        The node class of the DBCluster.
        """
        return pulumi.get(self, "db_node_class")

    @property
    @pulumi.getter(name="dbNodeCount")
    def db_node_count(self) -> str:
        """
        The node count of the DBCluster.
        """
        return pulumi.get(self, "db_node_count")

    @property
    @pulumi.getter(name="dbNodeStorage")
    def db_node_storage(self) -> str:
        """
        The node storage of the DBCluster.
        """
        return pulumi.get(self, "db_node_storage")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> str:
        """
        Key management service KMS key ID.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        The Engine of the DBCluster.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        The engine version of the DBCluster.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration time of the DBCluster.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the DBCluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> str:
        """
        If the instance has expired.
        """
        return pulumi.get(self, "is_expired")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> str:
        """
        The lock mode of the DBCluster.
        """
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> str:
        """
        Lock reason of the DBCluster.
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="maintainTime")
    def maintain_time(self) -> str:
        """
        Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
        """
        return pulumi.get(self, "maintain_time")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Connection port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="publicConnectionString")
    def public_connection_string(self) -> str:
        """
        A public IP address for the connection.
        """
        return pulumi.get(self, "public_connection_string")

    @property
    @pulumi.getter(name="publicPort")
    def public_port(self) -> str:
        """
        Public network port.
        """
        return pulumi.get(self, "public_port")

    @property
    @pulumi.getter(name="scaleOutStatuses")
    def scale_out_statuses(self) -> Sequence['outputs.GetDbClustersClusterScaleOutStatusResult']:
        """
        Scale state.
        """
        return pulumi.get(self, "scale_out_statuses")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="supportBackup")
    def support_backup(self) -> int:
        """
        Support fallback scheme.
        """
        return pulumi.get(self, "support_backup")

    @property
    @pulumi.getter(name="supportHttpsPort")
    def support_https_port(self) -> bool:
        """
        The system supports http port number.
        """
        return pulumi.get(self, "support_https_port")

    @property
    @pulumi.getter(name="supportMysqlPort")
    def support_mysql_port(self) -> bool:
        """
        Supports Mysql, and those of the ports.
        """
        return pulumi.get(self, "support_mysql_port")

    @property
    @pulumi.getter(name="vpcCloudInstanceId")
    def vpc_cloud_instance_id(self) -> str:
        """
        Virtual Private Cloud (VPC cloud instance ID.
        """
        return pulumi.get(self, "vpc_cloud_instance_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The VPC ID of the DBCluster.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> str:
        """
        The vswitch id of the DBCluster.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone ID of the DBCluster.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetDbClustersClusterDbClusterAccessWhiteListResult(dict):
    def __init__(__self__, *,
                 db_cluster_ip_array_attribute: str,
                 db_cluster_ip_array_name: str,
                 security_ip_list: str):
        """
        :param str db_cluster_ip_array_attribute: Field `db_cluster_ip_array_attribute` has been removed from provider.
        :param str db_cluster_ip_array_name: Whitelist group name.
        :param str security_ip_list: The IP address list under the whitelist group.
        """
        GetDbClustersClusterDbClusterAccessWhiteListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            db_cluster_ip_array_attribute=db_cluster_ip_array_attribute,
            db_cluster_ip_array_name=db_cluster_ip_array_name,
            security_ip_list=security_ip_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             db_cluster_ip_array_attribute: Optional[str] = None,
             db_cluster_ip_array_name: Optional[str] = None,
             security_ip_list: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if db_cluster_ip_array_attribute is None and 'dbClusterIpArrayAttribute' in kwargs:
            db_cluster_ip_array_attribute = kwargs['dbClusterIpArrayAttribute']
        if db_cluster_ip_array_attribute is None:
            raise TypeError("Missing 'db_cluster_ip_array_attribute' argument")
        if db_cluster_ip_array_name is None and 'dbClusterIpArrayName' in kwargs:
            db_cluster_ip_array_name = kwargs['dbClusterIpArrayName']
        if db_cluster_ip_array_name is None:
            raise TypeError("Missing 'db_cluster_ip_array_name' argument")
        if security_ip_list is None and 'securityIpList' in kwargs:
            security_ip_list = kwargs['securityIpList']
        if security_ip_list is None:
            raise TypeError("Missing 'security_ip_list' argument")

        _setter("db_cluster_ip_array_attribute", db_cluster_ip_array_attribute)
        _setter("db_cluster_ip_array_name", db_cluster_ip_array_name)
        _setter("security_ip_list", security_ip_list)

    @property
    @pulumi.getter(name="dbClusterIpArrayAttribute")
    def db_cluster_ip_array_attribute(self) -> str:
        """
        Field `db_cluster_ip_array_attribute` has been removed from provider.
        """
        return pulumi.get(self, "db_cluster_ip_array_attribute")

    @property
    @pulumi.getter(name="dbClusterIpArrayName")
    def db_cluster_ip_array_name(self) -> str:
        """
        Whitelist group name.
        """
        return pulumi.get(self, "db_cluster_ip_array_name")

    @property
    @pulumi.getter(name="securityIpList")
    def security_ip_list(self) -> str:
        """
        The IP address list under the whitelist group.
        """
        return pulumi.get(self, "security_ip_list")


@pulumi.output_type
class GetDbClustersClusterScaleOutStatusResult(dict):
    def __init__(__self__, *,
                 progress: str,
                 ratio: str):
        """
        :param str progress: Process.
        :param str ratio: Efficiency.
        """
        GetDbClustersClusterScaleOutStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            progress=progress,
            ratio=ratio,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             progress: Optional[str] = None,
             ratio: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if progress is None:
            raise TypeError("Missing 'progress' argument")
        if ratio is None:
            raise TypeError("Missing 'ratio' argument")

        _setter("progress", progress)
        _setter("ratio", ratio)

    @property
    @pulumi.getter
    def progress(self) -> str:
        """
        Process.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def ratio(self) -> str:
        """
        Efficiency.
        """
        return pulumi.get(self, "ratio")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 region_id: str,
                 zone_ids: Sequence['outputs.GetRegionsRegionZoneIdResult']):
        """
        :param str region_id: The Region ID.
        :param Sequence['GetRegionsRegionZoneIdArgs'] zone_ids: A list of available zone ids in the region_id.
        """
        GetRegionsRegionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region_id=region_id,
            zone_ids=zone_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region_id: Optional[str] = None,
             zone_ids: Optional[Sequence['outputs.GetRegionsRegionZoneIdResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if region_id is None and 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if region_id is None:
            raise TypeError("Missing 'region_id' argument")
        if zone_ids is None and 'zoneIds' in kwargs:
            zone_ids = kwargs['zoneIds']
        if zone_ids is None:
            raise TypeError("Missing 'zone_ids' argument")

        _setter("region_id", region_id)
        _setter("zone_ids", zone_ids)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Sequence['outputs.GetRegionsRegionZoneIdResult']:
        """
        A list of available zone ids in the region_id.
        """
        return pulumi.get(self, "zone_ids")


@pulumi.output_type
class GetRegionsRegionZoneIdResult(dict):
    def __init__(__self__, *,
                 vpc_enabled: bool,
                 zone_id: str):
        """
        :param bool vpc_enabled: Whether to support vpc network.
        :param str zone_id: The zone ID.
        """
        GetRegionsRegionZoneIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vpc_enabled=vpc_enabled,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vpc_enabled: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if vpc_enabled is None and 'vpcEnabled' in kwargs:
            vpc_enabled = kwargs['vpcEnabled']
        if vpc_enabled is None:
            raise TypeError("Missing 'vpc_enabled' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("vpc_enabled", vpc_enabled)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="vpcEnabled")
    def vpc_enabled(self) -> bool:
        """
        Whether to support vpc network.
        """
        return pulumi.get(self, "vpc_enabled")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")


