# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DbClusterDbClusterAccessWhiteList',
    'DbClusterMultiZoneVswitchList',
    'GetAccountsAccountResult',
    'GetBackupPoliciesPolicyResult',
    'GetDbClustersClusterResult',
    'GetDbClustersClusterDbClusterAccessWhiteListResult',
    'GetDbClustersClusterScaleOutStatusResult',
    'GetRegionsRegionResult',
    'GetRegionsRegionZoneIdResult',
]

@pulumi.output_type
class DbClusterDbClusterAccessWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbClusterIpArrayAttribute":
            suggest = "db_cluster_ip_array_attribute"
        elif key == "dbClusterIpArrayName":
            suggest = "db_cluster_ip_array_name"
        elif key == "securityIpList":
            suggest = "security_ip_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbClusterDbClusterAccessWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbClusterDbClusterAccessWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbClusterDbClusterAccessWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_cluster_ip_array_attribute: Optional[builtins.str] = None,
                 db_cluster_ip_array_name: Optional[builtins.str] = None,
                 security_ip_list: Optional[builtins.str] = None):
        """
        :param builtins.str db_cluster_ip_array_attribute: Field `db_cluster_ip_array_attribute` has been removed from provider.
        :param builtins.str db_cluster_ip_array_name: Whitelist group name.
        :param builtins.str security_ip_list: The IP address list under the whitelist group.
        """
        if db_cluster_ip_array_attribute is not None:
            pulumi.set(__self__, "db_cluster_ip_array_attribute", db_cluster_ip_array_attribute)
        if db_cluster_ip_array_name is not None:
            pulumi.set(__self__, "db_cluster_ip_array_name", db_cluster_ip_array_name)
        if security_ip_list is not None:
            pulumi.set(__self__, "security_ip_list", security_ip_list)

    @property
    @pulumi.getter(name="dbClusterIpArrayAttribute")
    def db_cluster_ip_array_attribute(self) -> Optional[builtins.str]:
        """
        Field `db_cluster_ip_array_attribute` has been removed from provider.
        """
        return pulumi.get(self, "db_cluster_ip_array_attribute")

    @property
    @pulumi.getter(name="dbClusterIpArrayName")
    def db_cluster_ip_array_name(self) -> Optional[builtins.str]:
        """
        Whitelist group name.
        """
        return pulumi.get(self, "db_cluster_ip_array_name")

    @property
    @pulumi.getter(name="securityIpList")
    def security_ip_list(self) -> Optional[builtins.str]:
        """
        The IP address list under the whitelist group.
        """
        return pulumi.get(self, "security_ip_list")


@pulumi.output_type
class DbClusterMultiZoneVswitchList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vswitchId":
            suggest = "vswitch_id"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbClusterMultiZoneVswitchList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbClusterMultiZoneVswitchList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbClusterMultiZoneVswitchList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vswitch_id: builtins.str,
                 zone_id: Optional[builtins.str] = None):
        """
        :param builtins.str vswitch_id: The ID of the vswitch.
        :param builtins.str zone_id: The zone ID of the vswitch.
        """
        pulumi.set(__self__, "vswitch_id", vswitch_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> builtins.str:
        """
        The ID of the vswitch.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[builtins.str]:
        """
        The zone ID of the vswitch.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_description: builtins.str,
                 account_name: builtins.str,
                 account_type: builtins.str,
                 db_cluster_id: builtins.str,
                 id: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str account_description: In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
        :param builtins.str account_name: Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
        :param builtins.str account_type: The Valid Account type: `Normal`, `Super`.
        :param builtins.str db_cluster_id: The DBCluster id.
        :param builtins.str id: The ID of the Account. Its value is same as Queue Name.
        :param builtins.str status: The status of the resource. Valid Status: `Creating`,`Available`,`Deleting`.
        """
        pulumi.set(__self__, "account_description", account_description)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountDescription")
    def account_description(self) -> builtins.str:
        """
        In Chinese, English letter. May contain Chinese and English characters, lowercase letters, numbers, and underscores (_), the dash (-). Cannot start with http:// and https:// at the beginning. Length is from 2 to 256 characters.
        """
        return pulumi.get(self, "account_description")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> builtins.str:
        """
        Account name: lowercase letters, numbers, underscores, lowercase letter; length no more than 16 characters.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> builtins.str:
        """
        The Valid Account type: `Normal`, `Super`.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> builtins.str:
        """
        The DBCluster id.
        """
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Account. Its value is same as Queue Name.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the resource. Valid Status: `Creating`,`Available`,`Deleting`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 backup_retention_period: builtins.int,
                 db_cluster_id: builtins.str,
                 id: builtins.str,
                 preferred_backup_periods: Sequence[builtins.str],
                 preferred_backup_time: builtins.str,
                 status: builtins.str):
        """
        :param builtins.int backup_retention_period: Data backup days. Valid values: `7` to `730`.
        :param builtins.str db_cluster_id: The db cluster id.
        :param builtins.str id: The ID of the Backup Policy.
        :param Sequence[builtins.str] preferred_backup_periods: DBCluster Backup period.
        :param builtins.str preferred_backup_time: Backup Time, UTC time.
        :param builtins.str status: The status of the resource.
        """
        pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "preferred_backup_periods", preferred_backup_periods)
        pulumi.set(__self__, "preferred_backup_time", preferred_backup_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> builtins.int:
        """
        Data backup days. Valid values: `7` to `730`.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> builtins.str:
        """
        The db cluster id.
        """
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Backup Policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="preferredBackupPeriods")
    def preferred_backup_periods(self) -> Sequence[builtins.str]:
        """
        DBCluster Backup period.
        """
        return pulumi.get(self, "preferred_backup_periods")

    @property
    @pulumi.getter(name="preferredBackupTime")
    def preferred_backup_time(self) -> builtins.str:
        """
        Backup Time, UTC time.
        """
        return pulumi.get(self, "preferred_backup_time")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDbClustersClusterResult(dict):
    def __init__(__self__, *,
                 ali_uid: builtins.str,
                 bid: builtins.str,
                 category: builtins.str,
                 commodity_code: builtins.str,
                 connection_string: builtins.str,
                 control_version: builtins.str,
                 create_time: builtins.str,
                 db_cluster_access_white_lists: Sequence['outputs.GetDbClustersClusterDbClusterAccessWhiteListResult'],
                 db_cluster_description: builtins.str,
                 db_cluster_id: builtins.str,
                 db_cluster_network_type: builtins.str,
                 db_cluster_type: builtins.str,
                 db_node_class: builtins.str,
                 db_node_count: builtins.str,
                 db_node_storage: builtins.str,
                 encryption_key: builtins.str,
                 encryption_type: builtins.str,
                 engine: builtins.str,
                 engine_version: builtins.str,
                 expire_time: builtins.str,
                 id: builtins.str,
                 is_expired: builtins.str,
                 lock_mode: builtins.str,
                 lock_reason: builtins.str,
                 maintain_time: builtins.str,
                 payment_type: builtins.str,
                 port: builtins.int,
                 public_connection_string: builtins.str,
                 public_port: builtins.str,
                 scale_out_statuses: Sequence['outputs.GetDbClustersClusterScaleOutStatusResult'],
                 status: builtins.str,
                 storage_type: builtins.str,
                 support_backup: builtins.int,
                 support_https_port: builtins.bool,
                 support_mysql_port: builtins.bool,
                 vpc_cloud_instance_id: builtins.str,
                 vpc_id: builtins.str,
                 vswitch_id: builtins.str,
                 zone_id: builtins.str):
        """
        :param builtins.str ali_uid: Alibaba Cloud account Id.
        :param builtins.str bid: The ID of the business process flow.
        :param builtins.str category: Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
        :param builtins.str commodity_code: The Commodity Code of the DBCluster.
        :param builtins.str connection_string: Connection string.
        :param builtins.str control_version: The control version of the DBCluster.
        :param builtins.str create_time: The creation time of the resource.
        :param Sequence['GetDbClustersClusterDbClusterAccessWhiteListArgs'] db_cluster_access_white_lists: The db cluster access white list.
        :param builtins.str db_cluster_description: The DBCluster description.
        :param builtins.str db_cluster_network_type: The DBCluster network type.
        :param builtins.str db_cluster_type: The DBCluster type.
        :param builtins.str db_node_class: The node class of the DBCluster.
        :param builtins.str db_node_count: The node count of the DBCluster.
        :param builtins.str db_node_storage: The node storage of the DBCluster.
        :param builtins.str encryption_key: Key management service KMS key ID.
        :param builtins.str encryption_type: Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
        :param builtins.str engine: The Engine of the DBCluster.
        :param builtins.str engine_version: The engine version of the DBCluster.
        :param builtins.str expire_time: The expiration time of the DBCluster.
        :param builtins.str id: The ID of the DBCluster.
        :param builtins.str is_expired: If the instance has expired.
        :param builtins.str lock_mode: The lock mode of the DBCluster.
        :param builtins.str lock_reason: Lock reason of the DBCluster.
        :param builtins.str maintain_time: Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
        :param builtins.str payment_type: The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        :param builtins.int port: Connection port.
        :param builtins.str public_connection_string: A public IP address for the connection.
        :param builtins.str public_port: Public network port.
        :param Sequence['GetDbClustersClusterScaleOutStatusArgs'] scale_out_statuses: Scale state.
        :param builtins.str status: The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
        :param builtins.str storage_type: Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
        :param builtins.int support_backup: Support fallback scheme.
        :param builtins.bool support_https_port: The system supports http port number.
        :param builtins.bool support_mysql_port: Supports Mysql, and those of the ports.
        :param builtins.str vpc_cloud_instance_id: Virtual Private Cloud (VPC cloud instance ID.
        :param builtins.str vpc_id: The VPC ID of the DBCluster.
        :param builtins.str vswitch_id: The vswitch id of the DBCluster.
        :param builtins.str zone_id: The zone ID of the DBCluster.
        """
        pulumi.set(__self__, "ali_uid", ali_uid)
        pulumi.set(__self__, "bid", bid)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "commodity_code", commodity_code)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "control_version", control_version)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_cluster_access_white_lists", db_cluster_access_white_lists)
        pulumi.set(__self__, "db_cluster_description", db_cluster_description)
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        pulumi.set(__self__, "db_cluster_network_type", db_cluster_network_type)
        pulumi.set(__self__, "db_cluster_type", db_cluster_type)
        pulumi.set(__self__, "db_node_class", db_node_class)
        pulumi.set(__self__, "db_node_count", db_node_count)
        pulumi.set(__self__, "db_node_storage", db_node_storage)
        pulumi.set(__self__, "encryption_key", encryption_key)
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_expired", is_expired)
        pulumi.set(__self__, "lock_mode", lock_mode)
        pulumi.set(__self__, "lock_reason", lock_reason)
        pulumi.set(__self__, "maintain_time", maintain_time)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "public_connection_string", public_connection_string)
        pulumi.set(__self__, "public_port", public_port)
        pulumi.set(__self__, "scale_out_statuses", scale_out_statuses)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "support_backup", support_backup)
        pulumi.set(__self__, "support_https_port", support_https_port)
        pulumi.set(__self__, "support_mysql_port", support_mysql_port)
        pulumi.set(__self__, "vpc_cloud_instance_id", vpc_cloud_instance_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_id", vswitch_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="aliUid")
    def ali_uid(self) -> builtins.str:
        """
        Alibaba Cloud account Id.
        """
        return pulumi.get(self, "ali_uid")

    @property
    @pulumi.getter
    def bid(self) -> builtins.str:
        """
        The ID of the business process flow.
        """
        return pulumi.get(self, "bid")

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Instance family values include: Basic: Basic edition; HighAvailability: high availability edition.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="commodityCode")
    def commodity_code(self) -> builtins.str:
        """
        The Commodity Code of the DBCluster.
        """
        return pulumi.get(self, "commodity_code")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> builtins.str:
        """
        Connection string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="controlVersion")
    def control_version(self) -> builtins.str:
        """
        The control version of the DBCluster.
        """
        return pulumi.get(self, "control_version")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        """
        The creation time of the resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbClusterAccessWhiteLists")
    def db_cluster_access_white_lists(self) -> Sequence['outputs.GetDbClustersClusterDbClusterAccessWhiteListResult']:
        """
        The db cluster access white list.
        """
        return pulumi.get(self, "db_cluster_access_white_lists")

    @property
    @pulumi.getter(name="dbClusterDescription")
    def db_cluster_description(self) -> builtins.str:
        """
        The DBCluster description.
        """
        return pulumi.get(self, "db_cluster_description")

    @property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> builtins.str:
        return pulumi.get(self, "db_cluster_id")

    @property
    @pulumi.getter(name="dbClusterNetworkType")
    def db_cluster_network_type(self) -> builtins.str:
        """
        The DBCluster network type.
        """
        return pulumi.get(self, "db_cluster_network_type")

    @property
    @pulumi.getter(name="dbClusterType")
    def db_cluster_type(self) -> builtins.str:
        """
        The DBCluster type.
        """
        return pulumi.get(self, "db_cluster_type")

    @property
    @pulumi.getter(name="dbNodeClass")
    def db_node_class(self) -> builtins.str:
        """
        The node class of the DBCluster.
        """
        return pulumi.get(self, "db_node_class")

    @property
    @pulumi.getter(name="dbNodeCount")
    def db_node_count(self) -> builtins.str:
        """
        The node count of the DBCluster.
        """
        return pulumi.get(self, "db_node_count")

    @property
    @pulumi.getter(name="dbNodeStorage")
    def db_node_storage(self) -> builtins.str:
        """
        The node storage of the DBCluster.
        """
        return pulumi.get(self, "db_node_storage")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> builtins.str:
        """
        Key management service KMS key ID.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> builtins.str:
        """
        Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The Engine of the DBCluster.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> builtins.str:
        """
        The engine version of the DBCluster.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> builtins.str:
        """
        The expiration time of the DBCluster.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the DBCluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> builtins.str:
        """
        If the instance has expired.
        """
        return pulumi.get(self, "is_expired")

    @property
    @pulumi.getter(name="lockMode")
    def lock_mode(self) -> builtins.str:
        """
        The lock mode of the DBCluster.
        """
        return pulumi.get(self, "lock_mode")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> builtins.str:
        """
        Lock reason of the DBCluster.
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="maintainTime")
    def maintain_time(self) -> builtins.str:
        """
        Examples of the maintenance window, in the format of hh:mmZ-hh:mm Z.
        """
        return pulumi.get(self, "maintain_time")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> builtins.str:
        """
        The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Connection port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="publicConnectionString")
    def public_connection_string(self) -> builtins.str:
        """
        A public IP address for the connection.
        """
        return pulumi.get(self, "public_connection_string")

    @property
    @pulumi.getter(name="publicPort")
    def public_port(self) -> builtins.str:
        """
        Public network port.
        """
        return pulumi.get(self, "public_port")

    @property
    @pulumi.getter(name="scaleOutStatuses")
    def scale_out_statuses(self) -> Sequence['outputs.GetDbClustersClusterScaleOutStatusResult']:
        """
        Scale state.
        """
        return pulumi.get(self, "scale_out_statuses")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the DBCluster. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        Storage type of DBCluster. Valid values: `cloud_essd`, `cloud_efficiency`, `cloud_essd_pl2`, `cloud_essd_pl3`.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="supportBackup")
    def support_backup(self) -> builtins.int:
        """
        Support fallback scheme.
        """
        return pulumi.get(self, "support_backup")

    @property
    @pulumi.getter(name="supportHttpsPort")
    def support_https_port(self) -> builtins.bool:
        """
        The system supports http port number.
        """
        return pulumi.get(self, "support_https_port")

    @property
    @pulumi.getter(name="supportMysqlPort")
    def support_mysql_port(self) -> builtins.bool:
        """
        Supports Mysql, and those of the ports.
        """
        return pulumi.get(self, "support_mysql_port")

    @property
    @pulumi.getter(name="vpcCloudInstanceId")
    def vpc_cloud_instance_id(self) -> builtins.str:
        """
        Virtual Private Cloud (VPC cloud instance ID.
        """
        return pulumi.get(self, "vpc_cloud_instance_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        The VPC ID of the DBCluster.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> builtins.str:
        """
        The vswitch id of the DBCluster.
        """
        return pulumi.get(self, "vswitch_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        """
        The zone ID of the DBCluster.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetDbClustersClusterDbClusterAccessWhiteListResult(dict):
    def __init__(__self__, *,
                 db_cluster_ip_array_attribute: builtins.str,
                 db_cluster_ip_array_name: builtins.str,
                 security_ip_list: builtins.str):
        """
        :param builtins.str db_cluster_ip_array_attribute: Field `db_cluster_ip_array_attribute` has been removed from provider.
        :param builtins.str db_cluster_ip_array_name: Whitelist group name.
        :param builtins.str security_ip_list: The IP address list under the whitelist group.
        """
        pulumi.set(__self__, "db_cluster_ip_array_attribute", db_cluster_ip_array_attribute)
        pulumi.set(__self__, "db_cluster_ip_array_name", db_cluster_ip_array_name)
        pulumi.set(__self__, "security_ip_list", security_ip_list)

    @property
    @pulumi.getter(name="dbClusterIpArrayAttribute")
    def db_cluster_ip_array_attribute(self) -> builtins.str:
        """
        Field `db_cluster_ip_array_attribute` has been removed from provider.
        """
        return pulumi.get(self, "db_cluster_ip_array_attribute")

    @property
    @pulumi.getter(name="dbClusterIpArrayName")
    def db_cluster_ip_array_name(self) -> builtins.str:
        """
        Whitelist group name.
        """
        return pulumi.get(self, "db_cluster_ip_array_name")

    @property
    @pulumi.getter(name="securityIpList")
    def security_ip_list(self) -> builtins.str:
        """
        The IP address list under the whitelist group.
        """
        return pulumi.get(self, "security_ip_list")


@pulumi.output_type
class GetDbClustersClusterScaleOutStatusResult(dict):
    def __init__(__self__, *,
                 progress: builtins.str,
                 ratio: builtins.str):
        """
        :param builtins.str progress: Process.
        :param builtins.str ratio: Efficiency.
        """
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "ratio", ratio)

    @property
    @pulumi.getter
    def progress(self) -> builtins.str:
        """
        Process.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def ratio(self) -> builtins.str:
        """
        Efficiency.
        """
        return pulumi.get(self, "ratio")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 region_id: builtins.str,
                 zone_ids: Sequence['outputs.GetRegionsRegionZoneIdResult']):
        """
        :param builtins.str region_id: The Region ID.
        :param Sequence['GetRegionsRegionZoneIdArgs'] zone_ids: A list of available zone ids in the region_id.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> builtins.str:
        """
        The Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Sequence['outputs.GetRegionsRegionZoneIdResult']:
        """
        A list of available zone ids in the region_id.
        """
        return pulumi.get(self, "zone_ids")


@pulumi.output_type
class GetRegionsRegionZoneIdResult(dict):
    def __init__(__self__, *,
                 vpc_enabled: builtins.bool,
                 zone_id: builtins.str):
        """
        :param builtins.bool vpc_enabled: Whether to support vpc network.
        :param builtins.str zone_id: The zone ID.
        """
        pulumi.set(__self__, "vpc_enabled", vpc_enabled)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="vpcEnabled")
    def vpc_enabled(self) -> builtins.bool:
        """
        Whether to support vpc network.
        """
        return pulumi.get(self, "vpc_enabled")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        """
        The zone ID.
        """
        return pulumi.get(self, "zone_id")


