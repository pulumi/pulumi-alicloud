# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstancesInstanceResult',
]

@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 client_instance_id: str,
                 client_instance_name: str,
                 client_instance_type: str,
                 id: str,
                 instance_id: str,
                 instance_name: str,
                 instance_type: str,
                 status: str,
                 zone_id: str):
        """
        :param str client_instance_id: The ID of the ECS instance to be bound.
        :param str client_instance_name: The name of the ECS instance bound to the EAIS instance.
        :param str client_instance_type: The type of the ECS instance bound to the EAIS instance.
        :param str id: The ID of the Instance.
        :param str instance_id: The ID of the resource.
        :param str instance_name: The name of the resource.
        :param str instance_type: The type of the resource. Valid values: `eais.ei-a6.4xlarge`, `eais.ei-a6.2xlarge`, `eais.ei-a6.xlarge`, `eais.ei-a6.large`, `eais.ei-a6.medium`.
        :param str status: The status of the resource. Valid values: `Attaching`, `Available`, `Detaching`, `InUse`, `Starting`, `Unavailable`.
        :param str zone_id: The ID of the region to which the EAIS instance belongs.
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_instance_id=client_instance_id,
            client_instance_name=client_instance_name,
            client_instance_type=client_instance_type,
            id=id,
            instance_id=instance_id,
            instance_name=instance_name,
            instance_type=instance_type,
            status=status,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_instance_id: Optional[str] = None,
             client_instance_name: Optional[str] = None,
             client_instance_type: Optional[str] = None,
             id: Optional[str] = None,
             instance_id: Optional[str] = None,
             instance_name: Optional[str] = None,
             instance_type: Optional[str] = None,
             status: Optional[str] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if client_instance_id is None and 'clientInstanceId' in kwargs:
            client_instance_id = kwargs['clientInstanceId']
        if client_instance_id is None:
            raise TypeError("Missing 'client_instance_id' argument")
        if client_instance_name is None and 'clientInstanceName' in kwargs:
            client_instance_name = kwargs['clientInstanceName']
        if client_instance_name is None:
            raise TypeError("Missing 'client_instance_name' argument")
        if client_instance_type is None and 'clientInstanceType' in kwargs:
            client_instance_type = kwargs['clientInstanceType']
        if client_instance_type is None:
            raise TypeError("Missing 'client_instance_type' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if instance_id is None and 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if instance_id is None:
            raise TypeError("Missing 'instance_id' argument")
        if instance_name is None and 'instanceName' in kwargs:
            instance_name = kwargs['instanceName']
        if instance_name is None:
            raise TypeError("Missing 'instance_name' argument")
        if instance_type is None and 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if instance_type is None:
            raise TypeError("Missing 'instance_type' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if zone_id is None and 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if zone_id is None:
            raise TypeError("Missing 'zone_id' argument")

        _setter("client_instance_id", client_instance_id)
        _setter("client_instance_name", client_instance_name)
        _setter("client_instance_type", client_instance_type)
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("instance_name", instance_name)
        _setter("instance_type", instance_type)
        _setter("status", status)
        _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="clientInstanceId")
    def client_instance_id(self) -> str:
        """
        The ID of the ECS instance to be bound.
        """
        return pulumi.get(self, "client_instance_id")

    @property
    @pulumi.getter(name="clientInstanceName")
    def client_instance_name(self) -> str:
        """
        The name of the ECS instance bound to the EAIS instance.
        """
        return pulumi.get(self, "client_instance_name")

    @property
    @pulumi.getter(name="clientInstanceType")
    def client_instance_type(self) -> str:
        """
        The type of the ECS instance bound to the EAIS instance.
        """
        return pulumi.get(self, "client_instance_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the resource.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The type of the resource. Valid values: `eais.ei-a6.4xlarge`, `eais.ei-a6.2xlarge`, `eais.ei-a6.xlarge`, `eais.ei-a6.large`, `eais.ei-a6.medium`.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the resource. Valid values: `Attaching`, `Available`, `Detaching`, `InUse`, `Starting`, `Unavailable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The ID of the region to which the EAIS instance belongs.
        """
        return pulumi.get(self, "zone_id")


