# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'LoadBalancerDeletionProtectionConfigArgs',
    'LoadBalancerDeletionProtectionConfigArgsDict',
    'LoadBalancerModificationProtectionConfigArgs',
    'LoadBalancerModificationProtectionConfigArgsDict',
    'LoadBalancerZoneMappingArgs',
    'LoadBalancerZoneMappingArgsDict',
    'ServerGroupHealthCheckArgs',
    'ServerGroupHealthCheckArgsDict',
]

MYPY = False

if not MYPY:
    class LoadBalancerDeletionProtectionConfigArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether to enable deletion protection. Valid values:
        """
        enabled_time: NotRequired[pulumi.Input[str]]
        """
        Opening time of the configuration read-only mode.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        The reason why deletion protection is enabled. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.


        > **NOTE:**  This parameter takes effect only when `DeletionProtectionEnabled` is set to `true`.
        """
elif False:
    LoadBalancerDeletionProtectionConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerDeletionProtectionConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_time: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Specifies whether to enable deletion protection. Valid values:
        :param pulumi.Input[str] enabled_time: Opening time of the configuration read-only mode.
        :param pulumi.Input[str] reason: The reason why deletion protection is enabled. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.
               
               
               > **NOTE:**  This parameter takes effect only when `DeletionProtectionEnabled` is set to `true`.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_time is not None:
            pulumi.set(__self__, "enabled_time", enabled_time)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable deletion protection. Valid values:
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledTime")
    def enabled_time(self) -> Optional[pulumi.Input[str]]:
        """
        Opening time of the configuration read-only mode.
        """
        return pulumi.get(self, "enabled_time")

    @enabled_time.setter
    def enabled_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled_time", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason why deletion protection is enabled. The reason must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The reason must start with a letter.


        > **NOTE:**  This parameter takes effect only when `DeletionProtectionEnabled` is set to `true`.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


if not MYPY:
    class LoadBalancerModificationProtectionConfigArgsDict(TypedDict):
        enabled_time: NotRequired[pulumi.Input[str]]
        """
        Opening time of the configuration read-only mode.
        """
        reason: NotRequired[pulumi.Input[str]]
        """
        The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The value must start with a letter.

        > **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Specifies whether to enable the configuration read-only mode. Valid values:
        - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
        - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.

        > **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
        """
elif False:
    LoadBalancerModificationProtectionConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerModificationProtectionConfigArgs:
    def __init__(__self__, *,
                 enabled_time: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] enabled_time: Opening time of the configuration read-only mode.
        :param pulumi.Input[str] reason: The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The value must start with a letter.
               
               > **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
        :param pulumi.Input[str] status: Specifies whether to enable the configuration read-only mode. Valid values:
               - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
               - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.
               
               > **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
        """
        if enabled_time is not None:
            pulumi.set(__self__, "enabled_time", enabled_time)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="enabledTime")
    def enabled_time(self) -> Optional[pulumi.Input[str]]:
        """
        Opening time of the configuration read-only mode.
        """
        return pulumi.get(self, "enabled_time")

    @enabled_time.setter
    def enabled_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled_time", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason why the configuration read-only mode is enabled. The value must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The value must start with a letter.

        > **NOTE:**   This parameter takes effect only if the `status` parameter is set to `ConsoleProtection`.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable the configuration read-only mode. Valid values:
        - `NonProtection`: disables the configuration read-only mode. In this case, you cannot set the `ModificationProtectionReason` parameter. If you specify `ModificationProtectionReason`, the value is cleared.
        - `ConsoleProtection`: enables the configuration read-only mode. In this case, you can specify `ModificationProtectionReason`.

        > **NOTE:**  If you set this parameter to `ConsoleProtection`, you cannot use the NLB console to modify instance configurations. However, you can call API operations to modify instance configurations.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class LoadBalancerZoneMappingArgsDict(TypedDict):
        vswitch_id: pulumi.Input[str]
        """
        The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance. You must add at least two zones. You can add a maximum of 10 zones.
        """
        zone_id: pulumi.Input[str]
        """
        The ID of the zone of the NLB instance. You must add at least two zones. You can add a maximum of 10 zones.

        You can call the [DescribeZones](https://www.alibabacloud.com/help/en/doc-detail/443890.html) operation to query the most recent zone list.
        """
        allocation_id: NotRequired[pulumi.Input[str]]
        """
        The ID of the elastic IP address (EIP) that is associated with the Internet-facing NLB instance. You can specify one EIP for each zone. You must add at least two zones. You can add a maximum of 10 zones.
        """
        eni_id: NotRequired[pulumi.Input[str]]
        """
        The ID of the elastic network interface (ENI).
        """
        ipv6_address: NotRequired[pulumi.Input[str]]
        """
        The IPv6 address of the NLB instance.
        """
        private_ipv4_address: NotRequired[pulumi.Input[str]]
        """
        The private IP address. You must add at least two zones. You can add a maximum of 10 zones.
        """
        public_ipv4_address: NotRequired[pulumi.Input[str]]
        """
        Public IPv4 address of a network-based server load balancer instance.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Zone Status
        """
elif False:
    LoadBalancerZoneMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerZoneMappingArgs:
    def __init__(__self__, *,
                 vswitch_id: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 allocation_id: Optional[pulumi.Input[str]] = None,
                 eni_id: Optional[pulumi.Input[str]] = None,
                 ipv6_address: Optional[pulumi.Input[str]] = None,
                 private_ipv4_address: Optional[pulumi.Input[str]] = None,
                 public_ipv4_address: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vswitch_id: The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance. You must add at least two zones. You can add a maximum of 10 zones.
        :param pulumi.Input[str] zone_id: The ID of the zone of the NLB instance. You must add at least two zones. You can add a maximum of 10 zones.
               
               You can call the [DescribeZones](https://www.alibabacloud.com/help/en/doc-detail/443890.html) operation to query the most recent zone list.
        :param pulumi.Input[str] allocation_id: The ID of the elastic IP address (EIP) that is associated with the Internet-facing NLB instance. You can specify one EIP for each zone. You must add at least two zones. You can add a maximum of 10 zones.
        :param pulumi.Input[str] eni_id: The ID of the elastic network interface (ENI).
        :param pulumi.Input[str] ipv6_address: The IPv6 address of the NLB instance.
        :param pulumi.Input[str] private_ipv4_address: The private IP address. You must add at least two zones. You can add a maximum of 10 zones.
        :param pulumi.Input[str] public_ipv4_address: Public IPv4 address of a network-based server load balancer instance.
        :param pulumi.Input[str] status: Zone Status
        """
        pulumi.set(__self__, "vswitch_id", vswitch_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if allocation_id is not None:
            pulumi.set(__self__, "allocation_id", allocation_id)
        if eni_id is not None:
            pulumi.set(__self__, "eni_id", eni_id)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)
        if public_ipv4_address is not None:
            pulumi.set(__self__, "public_ipv4_address", public_ipv4_address)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> pulumi.Input[str]:
        """
        The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance. You must add at least two zones. You can add a maximum of 10 zones.
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vswitch_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The ID of the zone of the NLB instance. You must add at least two zones. You can add a maximum of 10 zones.

        You can call the [DescribeZones](https://www.alibabacloud.com/help/en/doc-detail/443890.html) operation to query the most recent zone list.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the elastic IP address (EIP) that is associated with the Internet-facing NLB instance. You can specify one EIP for each zone. You must add at least two zones. You can add a maximum of 10 zones.
        """
        return pulumi.get(self, "allocation_id")

    @allocation_id.setter
    def allocation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocation_id", value)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the elastic network interface (ENI).
        """
        return pulumi.get(self, "eni_id")

    @eni_id.setter
    def eni_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eni_id", value)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv6 address of the NLB instance.
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address. You must add at least two zones. You can add a maximum of 10 zones.
        """
        return pulumi.get(self, "private_ipv4_address")

    @private_ipv4_address.setter
    def private_ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ipv4_address", value)

    @property
    @pulumi.getter(name="publicIpv4Address")
    def public_ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        Public IPv4 address of a network-based server load balancer instance.
        """
        return pulumi.get(self, "public_ipv4_address")

    @public_ipv4_address.setter
    def public_ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ipv4_address", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Zone Status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ServerGroupHealthCheckArgsDict(TypedDict):
        health_check_connect_port: NotRequired[pulumi.Input[int]]
        """
        The port that you want to use for health checks on backend servers.

        Valid values: `0` to `65535`.

        Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
        """
        health_check_connect_timeout: NotRequired[pulumi.Input[int]]
        """
        The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
        """
        health_check_domain: NotRequired[pulumi.Input[str]]
        """
        The domain name that you want to use for health checks. Valid values:
        - `$SERVER_IP`: the private IP address of a backend server.
        """
        health_check_enabled: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether to enable the health check feature. Valid values:
        """
        health_check_http_codes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\\_2xx` (default), `http\\_3xx`, `http\\_4xx`, and `http\\_5xx`.

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        health_check_interval: NotRequired[pulumi.Input[int]]
        """
        The interval at which health checks are performed. Unit: seconds.

        Valid values: `5` to `50`.

        Default value: `10`.
        """
        health_check_type: NotRequired[pulumi.Input[str]]
        """
        The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
        """
        health_check_url: NotRequired[pulumi.Input[str]]
        """
        The path to which health check requests are sent.

        The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : ' , +`. The path must start with a forward slash (/).

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        healthy_threshold: NotRequired[pulumi.Input[int]]
        """
        The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.

        Valid values: `2` to `10`.

        Default value: `2`.
        """
        http_check_method: NotRequired[pulumi.Input[str]]
        """
        The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        unhealthy_threshold: NotRequired[pulumi.Input[int]]
        """
        The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.

        Valid values: `2` to `10`.

        Default value: `2`.
        """
elif False:
    ServerGroupHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupHealthCheckArgs:
    def __init__(__self__, *,
                 health_check_connect_port: Optional[pulumi.Input[int]] = None,
                 health_check_connect_timeout: Optional[pulumi.Input[int]] = None,
                 health_check_domain: Optional[pulumi.Input[str]] = None,
                 health_check_enabled: Optional[pulumi.Input[bool]] = None,
                 health_check_http_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_url: Optional[pulumi.Input[str]] = None,
                 healthy_threshold: Optional[pulumi.Input[int]] = None,
                 http_check_method: Optional[pulumi.Input[str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] health_check_connect_port: The port that you want to use for health checks on backend servers.
               
               Valid values: `0` to `65535`.
               
               Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
        :param pulumi.Input[int] health_check_connect_timeout: The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
        :param pulumi.Input[str] health_check_domain: The domain name that you want to use for health checks. Valid values:
               - `$SERVER_IP`: the private IP address of a backend server.
        :param pulumi.Input[bool] health_check_enabled: Specifies whether to enable the health check feature. Valid values:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_check_http_codes: The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\\_2xx` (default), `http\\_3xx`, `http\\_4xx`, and `http\\_5xx`.
               
               > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        :param pulumi.Input[int] health_check_interval: The interval at which health checks are performed. Unit: seconds.
               
               Valid values: `5` to `50`.
               
               Default value: `10`.
        :param pulumi.Input[str] health_check_type: The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
        :param pulumi.Input[str] health_check_url: The path to which health check requests are sent.
               
               The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : ' , +`. The path must start with a forward slash (/).
               
               > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        :param pulumi.Input[int] healthy_threshold: The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.
               
               Valid values: `2` to `10`.
               
               Default value: `2`.
        :param pulumi.Input[str] http_check_method: The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.
               
               > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        :param pulumi.Input[int] unhealthy_threshold: The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.
               
               Valid values: `2` to `10`.
               
               Default value: `2`.
        """
        if health_check_connect_port is not None:
            pulumi.set(__self__, "health_check_connect_port", health_check_connect_port)
        if health_check_connect_timeout is not None:
            pulumi.set(__self__, "health_check_connect_timeout", health_check_connect_timeout)
        if health_check_domain is not None:
            pulumi.set(__self__, "health_check_domain", health_check_domain)
        if health_check_enabled is not None:
            pulumi.set(__self__, "health_check_enabled", health_check_enabled)
        if health_check_http_codes is not None:
            pulumi.set(__self__, "health_check_http_codes", health_check_http_codes)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_check_url is not None:
            pulumi.set(__self__, "health_check_url", health_check_url)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_check_method is not None:
            pulumi.set(__self__, "http_check_method", http_check_method)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthCheckConnectPort")
    def health_check_connect_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port that you want to use for health checks on backend servers.

        Valid values: `0` to `65535`.

        Default value: `0`. If you set the value to 0, the port of the backend server is used for health checks.
        """
        return pulumi.get(self, "health_check_connect_port")

    @health_check_connect_port.setter
    def health_check_connect_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_connect_port", value)

    @property
    @pulumi.getter(name="healthCheckConnectTimeout")
    def health_check_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum timeout period of a health check. Unit: seconds. Valid values: `1` to `300`. Default value: `5`.
        """
        return pulumi.get(self, "health_check_connect_timeout")

    @health_check_connect_timeout.setter
    def health_check_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_connect_timeout", value)

    @property
    @pulumi.getter(name="healthCheckDomain")
    def health_check_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name that you want to use for health checks. Valid values:
        - `$SERVER_IP`: the private IP address of a backend server.
        """
        return pulumi.get(self, "health_check_domain")

    @health_check_domain.setter
    def health_check_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_domain", value)

    @property
    @pulumi.getter(name="healthCheckEnabled")
    def health_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the health check feature. Valid values:
        """
        return pulumi.get(self, "health_check_enabled")

    @health_check_enabled.setter
    def health_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_enabled", value)

    @property
    @pulumi.getter(name="healthCheckHttpCodes")
    def health_check_http_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The HTTP status codes to return for health checks. Separate multiple HTTP status codes with commas (,). Valid values: `http\\_2xx` (default), `http\\_3xx`, `http\\_4xx`, and `http\\_5xx`.

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        return pulumi.get(self, "health_check_http_codes")

    @health_check_http_codes.setter
    def health_check_http_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "health_check_http_codes", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The interval at which health checks are performed. Unit: seconds.

        Valid values: `5` to `50`.

        Default value: `10`.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol that you want to use for health checks. Valid values: `TCP` (default) and `HTTP`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthCheckUrl")
    def health_check_url(self) -> Optional[pulumi.Input[str]]:
        """
        The path to which health check requests are sent.

        The path must be 1 to 80 characters in length, and can contain only letters, digits, and the following special characters: `- / . % ? # & =`. It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : ' , +`. The path must start with a forward slash (/).

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        return pulumi.get(self, "health_check_url")

    @health_check_url.setter
    def health_check_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_url", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status changes from `fail` to `success`.

        Valid values: `2` to `10`.

        Default value: `2`.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="httpCheckMethod")
    def http_check_method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method that is used for health checks. Valid values: `GET` (default) and `HEAD`.

        > **NOTE:**  This parameter takes effect only when `HealthCheckType` is set to `HTTP`.
        """
        return pulumi.get(self, "http_check_method")

    @http_check_method.setter
    def http_check_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_check_method", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status changes from `success` to `fail`.

        Valid values: `2` to `10`.

        Default value: `2`.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)


