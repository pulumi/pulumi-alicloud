# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BasicAccelerateIpEndpointRelationArgs', 'BasicAccelerateIpEndpointRelation']

@pulumi.input_type
class BasicAccelerateIpEndpointRelationArgs:
    def __init__(__self__, *,
                 accelerate_ip_id: pulumi.Input[str],
                 accelerator_id: pulumi.Input[str],
                 endpoint_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a BasicAccelerateIpEndpointRelation resource.
        :param pulumi.Input[str] accelerate_ip_id: The ID of the Basic Accelerate IP.
        :param pulumi.Input[str] accelerator_id: The ID of the Basic GA instance.
        :param pulumi.Input[str] endpoint_id: The ID of the Basic Endpoint.
        """
        BasicAccelerateIpEndpointRelationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accelerate_ip_id=accelerate_ip_id,
            accelerator_id=accelerator_id,
            endpoint_id=endpoint_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accelerate_ip_id: pulumi.Input[str],
             accelerator_id: pulumi.Input[str],
             endpoint_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accelerateIpId' in kwargs:
            accelerate_ip_id = kwargs['accelerateIpId']
        if 'acceleratorId' in kwargs:
            accelerator_id = kwargs['acceleratorId']
        if 'endpointId' in kwargs:
            endpoint_id = kwargs['endpointId']

        _setter("accelerate_ip_id", accelerate_ip_id)
        _setter("accelerator_id", accelerator_id)
        _setter("endpoint_id", endpoint_id)

    @property
    @pulumi.getter(name="accelerateIpId")
    def accelerate_ip_id(self) -> pulumi.Input[str]:
        """
        The ID of the Basic Accelerate IP.
        """
        return pulumi.get(self, "accelerate_ip_id")

    @accelerate_ip_id.setter
    def accelerate_ip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "accelerate_ip_id", value)

    @property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> pulumi.Input[str]:
        """
        The ID of the Basic GA instance.
        """
        return pulumi.get(self, "accelerator_id")

    @accelerator_id.setter
    def accelerator_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "accelerator_id", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[str]:
        """
        The ID of the Basic Endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_id", value)


@pulumi.input_type
class _BasicAccelerateIpEndpointRelationState:
    def __init__(__self__, *,
                 accelerate_ip_id: Optional[pulumi.Input[str]] = None,
                 accelerator_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BasicAccelerateIpEndpointRelation resources.
        :param pulumi.Input[str] accelerate_ip_id: The ID of the Basic Accelerate IP.
        :param pulumi.Input[str] accelerator_id: The ID of the Basic GA instance.
        :param pulumi.Input[str] endpoint_id: The ID of the Basic Endpoint.
        :param pulumi.Input[str] status: The status of the Basic Accelerate Ip Endpoint Relation.
        """
        _BasicAccelerateIpEndpointRelationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accelerate_ip_id=accelerate_ip_id,
            accelerator_id=accelerator_id,
            endpoint_id=endpoint_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accelerate_ip_id: Optional[pulumi.Input[str]] = None,
             accelerator_id: Optional[pulumi.Input[str]] = None,
             endpoint_id: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accelerateIpId' in kwargs:
            accelerate_ip_id = kwargs['accelerateIpId']
        if 'acceleratorId' in kwargs:
            accelerator_id = kwargs['acceleratorId']
        if 'endpointId' in kwargs:
            endpoint_id = kwargs['endpointId']

        if accelerate_ip_id is not None:
            _setter("accelerate_ip_id", accelerate_ip_id)
        if accelerator_id is not None:
            _setter("accelerator_id", accelerator_id)
        if endpoint_id is not None:
            _setter("endpoint_id", endpoint_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="accelerateIpId")
    def accelerate_ip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Basic Accelerate IP.
        """
        return pulumi.get(self, "accelerate_ip_id")

    @accelerate_ip_id.setter
    def accelerate_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerate_ip_id", value)

    @property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Basic GA instance.
        """
        return pulumi.get(self, "accelerator_id")

    @accelerator_id.setter
    def accelerator_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_id", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Basic Endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the Basic Accelerate Ip Endpoint Relation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class BasicAccelerateIpEndpointRelation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerate_ip_id: Optional[pulumi.Input[str]] = None,
                 accelerator_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation resource.

        For information about Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation and how to use it, see [What is Basic Accelerate Ip Endpoint Relation](https://www.alibabacloud.com/help/en/global-accelerator/latest/api-ga-2019-11-20-createbasicaccelerateipendpointrelation).

        > **NOTE:** Available since v1.194.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "cn-shenzhen"
        endpoint_region = config.get("endpointRegion")
        if endpoint_region is None:
            endpoint_region = "cn-hangzhou"
        sz = alicloud.Provider("sz", region=region)
        hz = alicloud.Provider("hz", region=endpoint_region)
        default_zones = alicloud.get_zones(available_resource_creation="VSwitch")
        default_network = alicloud.vpc.Network("defaultNetwork",
            vpc_name="terraform-example",
            cidr_block="172.17.3.0/24",
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_switch = alicloud.vpc.Switch("defaultSwitch",
            vswitch_name="terraform-example",
            cidr_block="172.17.3.0/24",
            vpc_id=default_network.id,
            zone_id=default_zones.zones[0].id,
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_security_group = alicloud.ecs.SecurityGroup("defaultSecurityGroup", vpc_id=default_network.id,
        opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_ecs_network_interface = alicloud.ecs.EcsNetworkInterface("defaultEcsNetworkInterface",
            vswitch_id=default_switch.id,
            security_group_ids=[default_security_group.id],
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_basic_accelerator = alicloud.ga.BasicAccelerator("defaultBasicAccelerator",
            duration=1,
            basic_accelerator_name="terraform-example",
            description="terraform-example",
            bandwidth_billing_type="CDT",
            auto_use_coupon="true",
            auto_pay=True)
        default_basic_ip_set = alicloud.ga.BasicIpSet("defaultBasicIpSet",
            accelerator_id=default_basic_accelerator.id,
            accelerate_region_id=endpoint_region,
            isp_type="BGP",
            bandwidth=5)
        default_basic_accelerate_ip = alicloud.ga.BasicAccelerateIp("defaultBasicAccelerateIp",
            accelerator_id=default_basic_accelerator.id,
            ip_set_id=default_basic_ip_set.id)
        default_basic_endpoint_group = alicloud.ga.BasicEndpointGroup("defaultBasicEndpointGroup",
            accelerator_id=default_basic_accelerator.id,
            endpoint_group_region=region,
            basic_endpoint_group_name="terraform-example",
            description="terraform-example")
        default_basic_endpoint = alicloud.ga.BasicEndpoint("defaultBasicEndpoint",
            accelerator_id=default_basic_accelerator.id,
            endpoint_group_id=default_basic_endpoint_group.id,
            endpoint_type="ENI",
            endpoint_address=default_ecs_network_interface.id,
            endpoint_sub_address_type="primary",
            endpoint_sub_address="192.168.0.1",
            basic_endpoint_name="terraform-example",
            opts=pulumi.ResourceOptions(provider=alicloud["hz"]))
        default_basic_accelerate_ip_endpoint_relation = alicloud.ga.BasicAccelerateIpEndpointRelation("defaultBasicAccelerateIpEndpointRelation",
            accelerator_id=default_basic_accelerate_ip.accelerator_id,
            accelerate_ip_id=default_basic_accelerate_ip.id,
            endpoint_id=default_basic_endpoint.endpoint_id)
        ```

        ## Import

        Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:ga/basicAccelerateIpEndpointRelation:BasicAccelerateIpEndpointRelation example <accelerator_id>:<accelerate_ip_id>:<endpoint_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accelerate_ip_id: The ID of the Basic Accelerate IP.
        :param pulumi.Input[str] accelerator_id: The ID of the Basic GA instance.
        :param pulumi.Input[str] endpoint_id: The ID of the Basic Endpoint.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BasicAccelerateIpEndpointRelationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation resource.

        For information about Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation and how to use it, see [What is Basic Accelerate Ip Endpoint Relation](https://www.alibabacloud.com/help/en/global-accelerator/latest/api-ga-2019-11-20-createbasicaccelerateipendpointrelation).

        > **NOTE:** Available since v1.194.0.

        ## Example Usage

        Basic Usage

        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "cn-shenzhen"
        endpoint_region = config.get("endpointRegion")
        if endpoint_region is None:
            endpoint_region = "cn-hangzhou"
        sz = alicloud.Provider("sz", region=region)
        hz = alicloud.Provider("hz", region=endpoint_region)
        default_zones = alicloud.get_zones(available_resource_creation="VSwitch")
        default_network = alicloud.vpc.Network("defaultNetwork",
            vpc_name="terraform-example",
            cidr_block="172.17.3.0/24",
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_switch = alicloud.vpc.Switch("defaultSwitch",
            vswitch_name="terraform-example",
            cidr_block="172.17.3.0/24",
            vpc_id=default_network.id,
            zone_id=default_zones.zones[0].id,
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_security_group = alicloud.ecs.SecurityGroup("defaultSecurityGroup", vpc_id=default_network.id,
        opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_ecs_network_interface = alicloud.ecs.EcsNetworkInterface("defaultEcsNetworkInterface",
            vswitch_id=default_switch.id,
            security_group_ids=[default_security_group.id],
            opts=pulumi.ResourceOptions(provider=alicloud["sz"]))
        default_basic_accelerator = alicloud.ga.BasicAccelerator("defaultBasicAccelerator",
            duration=1,
            basic_accelerator_name="terraform-example",
            description="terraform-example",
            bandwidth_billing_type="CDT",
            auto_use_coupon="true",
            auto_pay=True)
        default_basic_ip_set = alicloud.ga.BasicIpSet("defaultBasicIpSet",
            accelerator_id=default_basic_accelerator.id,
            accelerate_region_id=endpoint_region,
            isp_type="BGP",
            bandwidth=5)
        default_basic_accelerate_ip = alicloud.ga.BasicAccelerateIp("defaultBasicAccelerateIp",
            accelerator_id=default_basic_accelerator.id,
            ip_set_id=default_basic_ip_set.id)
        default_basic_endpoint_group = alicloud.ga.BasicEndpointGroup("defaultBasicEndpointGroup",
            accelerator_id=default_basic_accelerator.id,
            endpoint_group_region=region,
            basic_endpoint_group_name="terraform-example",
            description="terraform-example")
        default_basic_endpoint = alicloud.ga.BasicEndpoint("defaultBasicEndpoint",
            accelerator_id=default_basic_accelerator.id,
            endpoint_group_id=default_basic_endpoint_group.id,
            endpoint_type="ENI",
            endpoint_address=default_ecs_network_interface.id,
            endpoint_sub_address_type="primary",
            endpoint_sub_address="192.168.0.1",
            basic_endpoint_name="terraform-example",
            opts=pulumi.ResourceOptions(provider=alicloud["hz"]))
        default_basic_accelerate_ip_endpoint_relation = alicloud.ga.BasicAccelerateIpEndpointRelation("defaultBasicAccelerateIpEndpointRelation",
            accelerator_id=default_basic_accelerate_ip.accelerator_id,
            accelerate_ip_id=default_basic_accelerate_ip.id,
            endpoint_id=default_basic_endpoint.endpoint_id)
        ```

        ## Import

        Global Accelerator (GA) Basic Accelerate Ip Endpoint Relation can be imported using the id, e.g.

        ```sh
         $ pulumi import alicloud:ga/basicAccelerateIpEndpointRelation:BasicAccelerateIpEndpointRelation example <accelerator_id>:<accelerate_ip_id>:<endpoint_id>
        ```

        :param str resource_name: The name of the resource.
        :param BasicAccelerateIpEndpointRelationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BasicAccelerateIpEndpointRelationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            BasicAccelerateIpEndpointRelationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerate_ip_id: Optional[pulumi.Input[str]] = None,
                 accelerator_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BasicAccelerateIpEndpointRelationArgs.__new__(BasicAccelerateIpEndpointRelationArgs)

            if accelerate_ip_id is None and not opts.urn:
                raise TypeError("Missing required property 'accelerate_ip_id'")
            __props__.__dict__["accelerate_ip_id"] = accelerate_ip_id
            if accelerator_id is None and not opts.urn:
                raise TypeError("Missing required property 'accelerator_id'")
            __props__.__dict__["accelerator_id"] = accelerator_id
            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            __props__.__dict__["status"] = None
        super(BasicAccelerateIpEndpointRelation, __self__).__init__(
            'alicloud:ga/basicAccelerateIpEndpointRelation:BasicAccelerateIpEndpointRelation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accelerate_ip_id: Optional[pulumi.Input[str]] = None,
            accelerator_id: Optional[pulumi.Input[str]] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'BasicAccelerateIpEndpointRelation':
        """
        Get an existing BasicAccelerateIpEndpointRelation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accelerate_ip_id: The ID of the Basic Accelerate IP.
        :param pulumi.Input[str] accelerator_id: The ID of the Basic GA instance.
        :param pulumi.Input[str] endpoint_id: The ID of the Basic Endpoint.
        :param pulumi.Input[str] status: The status of the Basic Accelerate Ip Endpoint Relation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BasicAccelerateIpEndpointRelationState.__new__(_BasicAccelerateIpEndpointRelationState)

        __props__.__dict__["accelerate_ip_id"] = accelerate_ip_id
        __props__.__dict__["accelerator_id"] = accelerator_id
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["status"] = status
        return BasicAccelerateIpEndpointRelation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accelerateIpId")
    def accelerate_ip_id(self) -> pulumi.Output[str]:
        """
        The ID of the Basic Accelerate IP.
        """
        return pulumi.get(self, "accelerate_ip_id")

    @property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> pulumi.Output[str]:
        """
        The ID of the Basic GA instance.
        """
        return pulumi.get(self, "accelerator_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        """
        The ID of the Basic Endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the Basic Accelerate Ip Endpoint Relation.
        """
        return pulumi.get(self, "status")

