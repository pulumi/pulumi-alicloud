# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['V2FunctionArgs', 'V2Function']

@pulumi.input_type
class V2FunctionArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[_builtins.str],
                 handler: pulumi.Input[_builtins.str],
                 runtime: pulumi.Input[_builtins.str],
                 service_name: pulumi.Input[_builtins.str],
                 ca_port: Optional[pulumi.Input[_builtins.int]] = None,
                 code: Optional[pulumi.Input['V2FunctionCodeArgs']] = None,
                 code_checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 custom_container_config: Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']] = None,
                 custom_dns: Optional[pulumi.Input['V2FunctionCustomDnsArgs']] = None,
                 custom_health_check_config: Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']] = None,
                 custom_runtime_config: Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 gpu_memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 initialization_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 initializer: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_concurrency: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_lifecycle_config: Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a V2Function resource.
        :param pulumi.Input[_builtins.str] function_name: function name.
        :param pulumi.Input[_builtins.str] handler: entry point of function.
        :param pulumi.Input[_builtins.str] runtime: runtime of function code.
        :param pulumi.Input[_builtins.str] service_name: The name of the function Service.
        :param pulumi.Input[_builtins.int] ca_port: The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        :param pulumi.Input['V2FunctionCodeArgs'] code: Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        :param pulumi.Input[_builtins.str] code_checksum: crc64 of function code.
        :param pulumi.Input[_builtins.float] cpu: The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        :param pulumi.Input['V2FunctionCustomContainerConfigArgs'] custom_container_config: Custom-container runtime related function configuration. See `custom_container_config` below.
        :param pulumi.Input['V2FunctionCustomDnsArgs'] custom_dns: Function custom DNS configuration. See `custom_dns` below.
        :param pulumi.Input['V2FunctionCustomHealthCheckConfigArgs'] custom_health_check_config: Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        :param pulumi.Input['V2FunctionCustomRuntimeConfigArgs'] custom_runtime_config: Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        :param pulumi.Input[_builtins.str] description: description of function.
        :param pulumi.Input[_builtins.int] disk_size: The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        :param pulumi.Input[_builtins.int] gpu_memory_size: The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        :param pulumi.Input[_builtins.int] initialization_timeout: max running time of initializer.
        :param pulumi.Input[_builtins.str] initializer: initializer entry point of function.
        :param pulumi.Input[_builtins.int] instance_concurrency: The maximum concurrency allowed for a single function instance.
        :param pulumi.Input['V2FunctionInstanceLifecycleConfigArgs'] instance_lifecycle_config: Instance lifecycle configuration. See `instance_lifecycle_config` below.
        :param pulumi.Input[_builtins.str] instance_type: The instance type of the function. Valid values:
               - **e1**: Elastic instance.
               - **c1**: performance instance.
               - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
               - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
               - **g1**: Same as **fc.gpu.tesla.1**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] layers: List of layers.
               > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        :param pulumi.Input[_builtins.int] memory_size: memory size needed by function.
        :param pulumi.Input[_builtins.int] timeout: max running time of function.
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "service_name", service_name)
        if ca_port is not None:
            pulumi.set(__self__, "ca_port", ca_port)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if code_checksum is not None:
            pulumi.set(__self__, "code_checksum", code_checksum)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if custom_container_config is not None:
            pulumi.set(__self__, "custom_container_config", custom_container_config)
        if custom_dns is not None:
            pulumi.set(__self__, "custom_dns", custom_dns)
        if custom_health_check_config is not None:
            pulumi.set(__self__, "custom_health_check_config", custom_health_check_config)
        if custom_runtime_config is not None:
            pulumi.set(__self__, "custom_runtime_config", custom_runtime_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if gpu_memory_size is not None:
            pulumi.set(__self__, "gpu_memory_size", gpu_memory_size)
        if initialization_timeout is not None:
            pulumi.set(__self__, "initialization_timeout", initialization_timeout)
        if initializer is not None:
            pulumi.set(__self__, "initializer", initializer)
        if instance_concurrency is not None:
            pulumi.set(__self__, "instance_concurrency", instance_concurrency)
        if instance_lifecycle_config is not None:
            pulumi.set(__self__, "instance_lifecycle_config", instance_lifecycle_config)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if memory_size is not None:
            pulumi.set(__self__, "memory_size", memory_size)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[_builtins.str]:
        """
        function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_name", value)

    @_builtins.property
    @pulumi.getter
    def handler(self) -> pulumi.Input[_builtins.str]:
        """
        entry point of function.
        """
        return pulumi.get(self, "handler")

    @handler.setter
    def handler(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "handler", value)

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[_builtins.str]:
        """
        runtime of function code.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "runtime", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the function Service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter(name="caPort")
    def ca_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        """
        return pulumi.get(self, "ca_port")

    @ca_port.setter
    def ca_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ca_port", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input['V2FunctionCodeArgs']]:
        """
        Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input['V2FunctionCodeArgs']]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="codeChecksum")
    def code_checksum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        crc64 of function code.
        """
        return pulumi.get(self, "code_checksum")

    @code_checksum.setter
    def code_checksum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_checksum", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter(name="customContainerConfig")
    def custom_container_config(self) -> Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']]:
        """
        Custom-container runtime related function configuration. See `custom_container_config` below.
        """
        return pulumi.get(self, "custom_container_config")

    @custom_container_config.setter
    def custom_container_config(self, value: Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']]):
        pulumi.set(self, "custom_container_config", value)

    @_builtins.property
    @pulumi.getter(name="customDns")
    def custom_dns(self) -> Optional[pulumi.Input['V2FunctionCustomDnsArgs']]:
        """
        Function custom DNS configuration. See `custom_dns` below.
        """
        return pulumi.get(self, "custom_dns")

    @custom_dns.setter
    def custom_dns(self, value: Optional[pulumi.Input['V2FunctionCustomDnsArgs']]):
        pulumi.set(self, "custom_dns", value)

    @_builtins.property
    @pulumi.getter(name="customHealthCheckConfig")
    def custom_health_check_config(self) -> Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']]:
        """
        Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        """
        return pulumi.get(self, "custom_health_check_config")

    @custom_health_check_config.setter
    def custom_health_check_config(self, value: Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']]):
        pulumi.set(self, "custom_health_check_config", value)

    @_builtins.property
    @pulumi.getter(name="customRuntimeConfig")
    def custom_runtime_config(self) -> Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']]:
        """
        Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        """
        return pulumi.get(self, "custom_runtime_config")

    @custom_runtime_config.setter
    def custom_runtime_config(self, value: Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']]):
        pulumi.set(self, "custom_runtime_config", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk_size", value)

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment_variables", value)

    @_builtins.property
    @pulumi.getter(name="gpuMemorySize")
    def gpu_memory_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        """
        return pulumi.get(self, "gpu_memory_size")

    @gpu_memory_size.setter
    def gpu_memory_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "gpu_memory_size", value)

    @_builtins.property
    @pulumi.getter(name="initializationTimeout")
    def initialization_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max running time of initializer.
        """
        return pulumi.get(self, "initialization_timeout")

    @initialization_timeout.setter
    def initialization_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "initialization_timeout", value)

    @_builtins.property
    @pulumi.getter
    def initializer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        initializer entry point of function.
        """
        return pulumi.get(self, "initializer")

    @initializer.setter
    def initializer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "initializer", value)

    @_builtins.property
    @pulumi.getter(name="instanceConcurrency")
    def instance_concurrency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum concurrency allowed for a single function instance.
        """
        return pulumi.get(self, "instance_concurrency")

    @instance_concurrency.setter
    def instance_concurrency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="instanceLifecycleConfig")
    def instance_lifecycle_config(self) -> Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']]:
        """
        Instance lifecycle configuration. See `instance_lifecycle_config` below.
        """
        return pulumi.get(self, "instance_lifecycle_config")

    @instance_lifecycle_config.setter
    def instance_lifecycle_config(self, value: Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']]):
        pulumi.set(self, "instance_lifecycle_config", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance type of the function. Valid values:
        - **e1**: Elastic instance.
        - **c1**: performance instance.
        - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
        - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
        - **g1**: Same as **fc.gpu.tesla.1**.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of layers.
        > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "layers", value)

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        memory size needed by function.
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_size", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max running time of function.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _V2FunctionState:
    def __init__(__self__, *,
                 ca_port: Optional[pulumi.Input[_builtins.int]] = None,
                 code: Optional[pulumi.Input['V2FunctionCodeArgs']] = None,
                 code_checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_container_config: Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']] = None,
                 custom_dns: Optional[pulumi.Input['V2FunctionCustomDnsArgs']] = None,
                 custom_health_check_config: Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']] = None,
                 custom_runtime_config: Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 function_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 function_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 handler: Optional[pulumi.Input[_builtins.str]] = None,
                 initialization_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 initializer: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_concurrency: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_lifecycle_config: Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering V2Function resources.
        :param pulumi.Input[_builtins.int] ca_port: The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        :param pulumi.Input['V2FunctionCodeArgs'] code: Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        :param pulumi.Input[_builtins.str] code_checksum: crc64 of function code.
        :param pulumi.Input[_builtins.float] cpu: The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        :param pulumi.Input[_builtins.str] create_time: create time of function.
        :param pulumi.Input['V2FunctionCustomContainerConfigArgs'] custom_container_config: Custom-container runtime related function configuration. See `custom_container_config` below.
        :param pulumi.Input['V2FunctionCustomDnsArgs'] custom_dns: Function custom DNS configuration. See `custom_dns` below.
        :param pulumi.Input['V2FunctionCustomHealthCheckConfigArgs'] custom_health_check_config: Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        :param pulumi.Input['V2FunctionCustomRuntimeConfigArgs'] custom_runtime_config: Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        :param pulumi.Input[_builtins.str] description: description of function.
        :param pulumi.Input[_builtins.int] disk_size: The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        :param pulumi.Input[_builtins.str] function_arn: The Function Compute service function arn. It formats as `acs:fc:<region>:<uid>:services/<serviceName>.LATEST/functions/<functionName>`.
        :param pulumi.Input[_builtins.str] function_name: function name.
        :param pulumi.Input[_builtins.int] gpu_memory_size: The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        :param pulumi.Input[_builtins.str] handler: entry point of function.
        :param pulumi.Input[_builtins.int] initialization_timeout: max running time of initializer.
        :param pulumi.Input[_builtins.str] initializer: initializer entry point of function.
        :param pulumi.Input[_builtins.int] instance_concurrency: The maximum concurrency allowed for a single function instance.
        :param pulumi.Input['V2FunctionInstanceLifecycleConfigArgs'] instance_lifecycle_config: Instance lifecycle configuration. See `instance_lifecycle_config` below.
        :param pulumi.Input[_builtins.str] instance_type: The instance type of the function. Valid values:
               - **e1**: Elastic instance.
               - **c1**: performance instance.
               - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
               - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
               - **g1**: Same as **fc.gpu.tesla.1**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] layers: List of layers.
               > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        :param pulumi.Input[_builtins.int] memory_size: memory size needed by function.
        :param pulumi.Input[_builtins.str] runtime: runtime of function code.
        :param pulumi.Input[_builtins.str] service_name: The name of the function Service.
        :param pulumi.Input[_builtins.int] timeout: max running time of function.
        """
        if ca_port is not None:
            pulumi.set(__self__, "ca_port", ca_port)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if code_checksum is not None:
            pulumi.set(__self__, "code_checksum", code_checksum)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_container_config is not None:
            pulumi.set(__self__, "custom_container_config", custom_container_config)
        if custom_dns is not None:
            pulumi.set(__self__, "custom_dns", custom_dns)
        if custom_health_check_config is not None:
            pulumi.set(__self__, "custom_health_check_config", custom_health_check_config)
        if custom_runtime_config is not None:
            pulumi.set(__self__, "custom_runtime_config", custom_runtime_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if function_arn is not None:
            pulumi.set(__self__, "function_arn", function_arn)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if gpu_memory_size is not None:
            pulumi.set(__self__, "gpu_memory_size", gpu_memory_size)
        if handler is not None:
            pulumi.set(__self__, "handler", handler)
        if initialization_timeout is not None:
            pulumi.set(__self__, "initialization_timeout", initialization_timeout)
        if initializer is not None:
            pulumi.set(__self__, "initializer", initializer)
        if instance_concurrency is not None:
            pulumi.set(__self__, "instance_concurrency", instance_concurrency)
        if instance_lifecycle_config is not None:
            pulumi.set(__self__, "instance_lifecycle_config", instance_lifecycle_config)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if memory_size is not None:
            pulumi.set(__self__, "memory_size", memory_size)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="caPort")
    def ca_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        """
        return pulumi.get(self, "ca_port")

    @ca_port.setter
    def ca_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ca_port", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input['V2FunctionCodeArgs']]:
        """
        Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input['V2FunctionCodeArgs']]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="codeChecksum")
    def code_checksum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        crc64 of function code.
        """
        return pulumi.get(self, "code_checksum")

    @code_checksum.setter
    def code_checksum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_checksum", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        create time of function.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="customContainerConfig")
    def custom_container_config(self) -> Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']]:
        """
        Custom-container runtime related function configuration. See `custom_container_config` below.
        """
        return pulumi.get(self, "custom_container_config")

    @custom_container_config.setter
    def custom_container_config(self, value: Optional[pulumi.Input['V2FunctionCustomContainerConfigArgs']]):
        pulumi.set(self, "custom_container_config", value)

    @_builtins.property
    @pulumi.getter(name="customDns")
    def custom_dns(self) -> Optional[pulumi.Input['V2FunctionCustomDnsArgs']]:
        """
        Function custom DNS configuration. See `custom_dns` below.
        """
        return pulumi.get(self, "custom_dns")

    @custom_dns.setter
    def custom_dns(self, value: Optional[pulumi.Input['V2FunctionCustomDnsArgs']]):
        pulumi.set(self, "custom_dns", value)

    @_builtins.property
    @pulumi.getter(name="customHealthCheckConfig")
    def custom_health_check_config(self) -> Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']]:
        """
        Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        """
        return pulumi.get(self, "custom_health_check_config")

    @custom_health_check_config.setter
    def custom_health_check_config(self, value: Optional[pulumi.Input['V2FunctionCustomHealthCheckConfigArgs']]):
        pulumi.set(self, "custom_health_check_config", value)

    @_builtins.property
    @pulumi.getter(name="customRuntimeConfig")
    def custom_runtime_config(self) -> Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']]:
        """
        Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        """
        return pulumi.get(self, "custom_runtime_config")

    @custom_runtime_config.setter
    def custom_runtime_config(self, value: Optional[pulumi.Input['V2FunctionCustomRuntimeConfigArgs']]):
        pulumi.set(self, "custom_runtime_config", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        description of function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk_size", value)

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment_variables", value)

    @_builtins.property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Function Compute service function arn. It formats as `acs:fc:<region>:<uid>:services/<serviceName>.LATEST/functions/<functionName>`.
        """
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_arn", value)

    @_builtins.property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_name", value)

    @_builtins.property
    @pulumi.getter(name="gpuMemorySize")
    def gpu_memory_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        """
        return pulumi.get(self, "gpu_memory_size")

    @gpu_memory_size.setter
    def gpu_memory_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "gpu_memory_size", value)

    @_builtins.property
    @pulumi.getter
    def handler(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        entry point of function.
        """
        return pulumi.get(self, "handler")

    @handler.setter
    def handler(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "handler", value)

    @_builtins.property
    @pulumi.getter(name="initializationTimeout")
    def initialization_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max running time of initializer.
        """
        return pulumi.get(self, "initialization_timeout")

    @initialization_timeout.setter
    def initialization_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "initialization_timeout", value)

    @_builtins.property
    @pulumi.getter
    def initializer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        initializer entry point of function.
        """
        return pulumi.get(self, "initializer")

    @initializer.setter
    def initializer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "initializer", value)

    @_builtins.property
    @pulumi.getter(name="instanceConcurrency")
    def instance_concurrency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum concurrency allowed for a single function instance.
        """
        return pulumi.get(self, "instance_concurrency")

    @instance_concurrency.setter
    def instance_concurrency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "instance_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="instanceLifecycleConfig")
    def instance_lifecycle_config(self) -> Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']]:
        """
        Instance lifecycle configuration. See `instance_lifecycle_config` below.
        """
        return pulumi.get(self, "instance_lifecycle_config")

    @instance_lifecycle_config.setter
    def instance_lifecycle_config(self, value: Optional[pulumi.Input['V2FunctionInstanceLifecycleConfigArgs']]):
        pulumi.set(self, "instance_lifecycle_config", value)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance type of the function. Valid values:
        - **e1**: Elastic instance.
        - **c1**: performance instance.
        - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
        - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
        - **g1**: Same as **fc.gpu.tesla.1**.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of layers.
        > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "layers", value)

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        memory size needed by function.
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_size", value)

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        runtime of function code.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the function Service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max running time of function.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("alicloud:fc/v2Function:V2Function")
class V2Function(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_port: Optional[pulumi.Input[_builtins.int]] = None,
                 code: Optional[pulumi.Input[Union['V2FunctionCodeArgs', 'V2FunctionCodeArgsDict']]] = None,
                 code_checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 custom_container_config: Optional[pulumi.Input[Union['V2FunctionCustomContainerConfigArgs', 'V2FunctionCustomContainerConfigArgsDict']]] = None,
                 custom_dns: Optional[pulumi.Input[Union['V2FunctionCustomDnsArgs', 'V2FunctionCustomDnsArgsDict']]] = None,
                 custom_health_check_config: Optional[pulumi.Input[Union['V2FunctionCustomHealthCheckConfigArgs', 'V2FunctionCustomHealthCheckConfigArgsDict']]] = None,
                 custom_runtime_config: Optional[pulumi.Input[Union['V2FunctionCustomRuntimeConfigArgs', 'V2FunctionCustomRuntimeConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 function_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 handler: Optional[pulumi.Input[_builtins.str]] = None,
                 initialization_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 initializer: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_concurrency: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_lifecycle_config: Optional[pulumi.Input[Union['V2FunctionInstanceLifecycleConfigArgs', 'V2FunctionInstanceLifecycleConfigArgsDict']]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Provides a FCV2 Function resource. Function is the unit of system scheduling and operation. Functions must be subordinate to services. All functions under the same service share some identical settings, such as service authorization and log configuration.

        For information about FCV2 Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/resource-orchestration-service/latest/aliyun-fc-function).

        > **NOTE:** Available since v1.208.0.

        ## Import

        FCV2 Function can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:fc/v2Function:V2Function example <service_name>:<function_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] ca_port: The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        :param pulumi.Input[Union['V2FunctionCodeArgs', 'V2FunctionCodeArgsDict']] code: Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        :param pulumi.Input[_builtins.str] code_checksum: crc64 of function code.
        :param pulumi.Input[_builtins.float] cpu: The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        :param pulumi.Input[Union['V2FunctionCustomContainerConfigArgs', 'V2FunctionCustomContainerConfigArgsDict']] custom_container_config: Custom-container runtime related function configuration. See `custom_container_config` below.
        :param pulumi.Input[Union['V2FunctionCustomDnsArgs', 'V2FunctionCustomDnsArgsDict']] custom_dns: Function custom DNS configuration. See `custom_dns` below.
        :param pulumi.Input[Union['V2FunctionCustomHealthCheckConfigArgs', 'V2FunctionCustomHealthCheckConfigArgsDict']] custom_health_check_config: Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        :param pulumi.Input[Union['V2FunctionCustomRuntimeConfigArgs', 'V2FunctionCustomRuntimeConfigArgsDict']] custom_runtime_config: Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        :param pulumi.Input[_builtins.str] description: description of function.
        :param pulumi.Input[_builtins.int] disk_size: The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        :param pulumi.Input[_builtins.str] function_name: function name.
        :param pulumi.Input[_builtins.int] gpu_memory_size: The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        :param pulumi.Input[_builtins.str] handler: entry point of function.
        :param pulumi.Input[_builtins.int] initialization_timeout: max running time of initializer.
        :param pulumi.Input[_builtins.str] initializer: initializer entry point of function.
        :param pulumi.Input[_builtins.int] instance_concurrency: The maximum concurrency allowed for a single function instance.
        :param pulumi.Input[Union['V2FunctionInstanceLifecycleConfigArgs', 'V2FunctionInstanceLifecycleConfigArgsDict']] instance_lifecycle_config: Instance lifecycle configuration. See `instance_lifecycle_config` below.
        :param pulumi.Input[_builtins.str] instance_type: The instance type of the function. Valid values:
               - **e1**: Elastic instance.
               - **c1**: performance instance.
               - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
               - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
               - **g1**: Same as **fc.gpu.tesla.1**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] layers: List of layers.
               > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        :param pulumi.Input[_builtins.int] memory_size: memory size needed by function.
        :param pulumi.Input[_builtins.str] runtime: runtime of function code.
        :param pulumi.Input[_builtins.str] service_name: The name of the function Service.
        :param pulumi.Input[_builtins.int] timeout: max running time of function.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: V2FunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a FCV2 Function resource. Function is the unit of system scheduling and operation. Functions must be subordinate to services. All functions under the same service share some identical settings, such as service authorization and log configuration.

        For information about FCV2 Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/resource-orchestration-service/latest/aliyun-fc-function).

        > **NOTE:** Available since v1.208.0.

        ## Import

        FCV2 Function can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:fc/v2Function:V2Function example <service_name>:<function_name>
        ```

        :param str resource_name: The name of the resource.
        :param V2FunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(V2FunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_port: Optional[pulumi.Input[_builtins.int]] = None,
                 code: Optional[pulumi.Input[Union['V2FunctionCodeArgs', 'V2FunctionCodeArgsDict']]] = None,
                 code_checksum: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu: Optional[pulumi.Input[_builtins.float]] = None,
                 custom_container_config: Optional[pulumi.Input[Union['V2FunctionCustomContainerConfigArgs', 'V2FunctionCustomContainerConfigArgsDict']]] = None,
                 custom_dns: Optional[pulumi.Input[Union['V2FunctionCustomDnsArgs', 'V2FunctionCustomDnsArgsDict']]] = None,
                 custom_health_check_config: Optional[pulumi.Input[Union['V2FunctionCustomHealthCheckConfigArgs', 'V2FunctionCustomHealthCheckConfigArgsDict']]] = None,
                 custom_runtime_config: Optional[pulumi.Input[Union['V2FunctionCustomRuntimeConfigArgs', 'V2FunctionCustomRuntimeConfigArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 function_name: Optional[pulumi.Input[_builtins.str]] = None,
                 gpu_memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 handler: Optional[pulumi.Input[_builtins.str]] = None,
                 initialization_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 initializer: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_concurrency: Optional[pulumi.Input[_builtins.int]] = None,
                 instance_lifecycle_config: Optional[pulumi.Input[Union['V2FunctionInstanceLifecycleConfigArgs', 'V2FunctionInstanceLifecycleConfigArgsDict']]] = None,
                 instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 memory_size: Optional[pulumi.Input[_builtins.int]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = V2FunctionArgs.__new__(V2FunctionArgs)

            __props__.__dict__["ca_port"] = ca_port
            __props__.__dict__["code"] = code
            __props__.__dict__["code_checksum"] = code_checksum
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["custom_container_config"] = custom_container_config
            __props__.__dict__["custom_dns"] = custom_dns
            __props__.__dict__["custom_health_check_config"] = custom_health_check_config
            __props__.__dict__["custom_runtime_config"] = custom_runtime_config
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["environment_variables"] = environment_variables
            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__.__dict__["function_name"] = function_name
            __props__.__dict__["gpu_memory_size"] = gpu_memory_size
            if handler is None and not opts.urn:
                raise TypeError("Missing required property 'handler'")
            __props__.__dict__["handler"] = handler
            __props__.__dict__["initialization_timeout"] = initialization_timeout
            __props__.__dict__["initializer"] = initializer
            __props__.__dict__["instance_concurrency"] = instance_concurrency
            __props__.__dict__["instance_lifecycle_config"] = instance_lifecycle_config
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["layers"] = layers
            __props__.__dict__["memory_size"] = memory_size
            if runtime is None and not opts.urn:
                raise TypeError("Missing required property 'runtime'")
            __props__.__dict__["runtime"] = runtime
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["create_time"] = None
            __props__.__dict__["function_arn"] = None
        super(V2Function, __self__).__init__(
            'alicloud:fc/v2Function:V2Function',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_port: Optional[pulumi.Input[_builtins.int]] = None,
            code: Optional[pulumi.Input[Union['V2FunctionCodeArgs', 'V2FunctionCodeArgsDict']]] = None,
            code_checksum: Optional[pulumi.Input[_builtins.str]] = None,
            cpu: Optional[pulumi.Input[_builtins.float]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            custom_container_config: Optional[pulumi.Input[Union['V2FunctionCustomContainerConfigArgs', 'V2FunctionCustomContainerConfigArgsDict']]] = None,
            custom_dns: Optional[pulumi.Input[Union['V2FunctionCustomDnsArgs', 'V2FunctionCustomDnsArgsDict']]] = None,
            custom_health_check_config: Optional[pulumi.Input[Union['V2FunctionCustomHealthCheckConfigArgs', 'V2FunctionCustomHealthCheckConfigArgsDict']]] = None,
            custom_runtime_config: Optional[pulumi.Input[Union['V2FunctionCustomRuntimeConfigArgs', 'V2FunctionCustomRuntimeConfigArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disk_size: Optional[pulumi.Input[_builtins.int]] = None,
            environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            function_arn: Optional[pulumi.Input[_builtins.str]] = None,
            function_name: Optional[pulumi.Input[_builtins.str]] = None,
            gpu_memory_size: Optional[pulumi.Input[_builtins.int]] = None,
            handler: Optional[pulumi.Input[_builtins.str]] = None,
            initialization_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            initializer: Optional[pulumi.Input[_builtins.str]] = None,
            instance_concurrency: Optional[pulumi.Input[_builtins.int]] = None,
            instance_lifecycle_config: Optional[pulumi.Input[Union['V2FunctionInstanceLifecycleConfigArgs', 'V2FunctionInstanceLifecycleConfigArgsDict']]] = None,
            instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            layers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            memory_size: Optional[pulumi.Input[_builtins.int]] = None,
            runtime: Optional[pulumi.Input[_builtins.str]] = None,
            service_name: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.int]] = None) -> 'V2Function':
        """
        Get an existing V2Function resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] ca_port: The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        :param pulumi.Input[Union['V2FunctionCodeArgs', 'V2FunctionCodeArgsDict']] code: Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        :param pulumi.Input[_builtins.str] code_checksum: crc64 of function code.
        :param pulumi.Input[_builtins.float] cpu: The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        :param pulumi.Input[_builtins.str] create_time: create time of function.
        :param pulumi.Input[Union['V2FunctionCustomContainerConfigArgs', 'V2FunctionCustomContainerConfigArgsDict']] custom_container_config: Custom-container runtime related function configuration. See `custom_container_config` below.
        :param pulumi.Input[Union['V2FunctionCustomDnsArgs', 'V2FunctionCustomDnsArgsDict']] custom_dns: Function custom DNS configuration. See `custom_dns` below.
        :param pulumi.Input[Union['V2FunctionCustomHealthCheckConfigArgs', 'V2FunctionCustomHealthCheckConfigArgsDict']] custom_health_check_config: Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        :param pulumi.Input[Union['V2FunctionCustomRuntimeConfigArgs', 'V2FunctionCustomRuntimeConfigArgsDict']] custom_runtime_config: Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        :param pulumi.Input[_builtins.str] description: description of function.
        :param pulumi.Input[_builtins.int] disk_size: The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        :param pulumi.Input[_builtins.str] function_arn: The Function Compute service function arn. It formats as `acs:fc:<region>:<uid>:services/<serviceName>.LATEST/functions/<functionName>`.
        :param pulumi.Input[_builtins.str] function_name: function name.
        :param pulumi.Input[_builtins.int] gpu_memory_size: The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        :param pulumi.Input[_builtins.str] handler: entry point of function.
        :param pulumi.Input[_builtins.int] initialization_timeout: max running time of initializer.
        :param pulumi.Input[_builtins.str] initializer: initializer entry point of function.
        :param pulumi.Input[_builtins.int] instance_concurrency: The maximum concurrency allowed for a single function instance.
        :param pulumi.Input[Union['V2FunctionInstanceLifecycleConfigArgs', 'V2FunctionInstanceLifecycleConfigArgsDict']] instance_lifecycle_config: Instance lifecycle configuration. See `instance_lifecycle_config` below.
        :param pulumi.Input[_builtins.str] instance_type: The instance type of the function. Valid values:
               - **e1**: Elastic instance.
               - **c1**: performance instance.
               - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
               - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
               - **g1**: Same as **fc.gpu.tesla.1**.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] layers: List of layers.
               > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        :param pulumi.Input[_builtins.int] memory_size: memory size needed by function.
        :param pulumi.Input[_builtins.str] runtime: runtime of function code.
        :param pulumi.Input[_builtins.str] service_name: The name of the function Service.
        :param pulumi.Input[_builtins.int] timeout: max running time of function.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _V2FunctionState.__new__(_V2FunctionState)

        __props__.__dict__["ca_port"] = ca_port
        __props__.__dict__["code"] = code
        __props__.__dict__["code_checksum"] = code_checksum
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["custom_container_config"] = custom_container_config
        __props__.__dict__["custom_dns"] = custom_dns
        __props__.__dict__["custom_health_check_config"] = custom_health_check_config
        __props__.__dict__["custom_runtime_config"] = custom_runtime_config
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["function_arn"] = function_arn
        __props__.__dict__["function_name"] = function_name
        __props__.__dict__["gpu_memory_size"] = gpu_memory_size
        __props__.__dict__["handler"] = handler
        __props__.__dict__["initialization_timeout"] = initialization_timeout
        __props__.__dict__["initializer"] = initializer
        __props__.__dict__["instance_concurrency"] = instance_concurrency
        __props__.__dict__["instance_lifecycle_config"] = instance_lifecycle_config
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["layers"] = layers
        __props__.__dict__["memory_size"] = memory_size
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["timeout"] = timeout
        return V2Function(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="caPort")
    def ca_port(self) -> pulumi.Output[_builtins.int]:
        """
        The listening port of the HTTP Server when the Custom Runtime or Custom Container is running.
        """
        return pulumi.get(self, "ca_port")

    @_builtins.property
    @pulumi.getter
    def code(self) -> pulumi.Output[Optional['outputs.V2FunctionCode']]:
        """
        Function Code ZIP package. code and customContainerConfig choose one. See `code` below.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="codeChecksum")
    def code_checksum(self) -> pulumi.Output[_builtins.str]:
        """
        crc64 of function code.
        """
        return pulumi.get(self, "code_checksum")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        create time of function.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="customContainerConfig")
    def custom_container_config(self) -> pulumi.Output[Optional['outputs.V2FunctionCustomContainerConfig']]:
        """
        Custom-container runtime related function configuration. See `custom_container_config` below.
        """
        return pulumi.get(self, "custom_container_config")

    @_builtins.property
    @pulumi.getter(name="customDns")
    def custom_dns(self) -> pulumi.Output[Optional['outputs.V2FunctionCustomDns']]:
        """
        Function custom DNS configuration. See `custom_dns` below.
        """
        return pulumi.get(self, "custom_dns")

    @_builtins.property
    @pulumi.getter(name="customHealthCheckConfig")
    def custom_health_check_config(self) -> pulumi.Output[Optional['outputs.V2FunctionCustomHealthCheckConfig']]:
        """
        Custom runtime/container Custom health check configuration. See `custom_health_check_config` below.
        """
        return pulumi.get(self, "custom_health_check_config")

    @_builtins.property
    @pulumi.getter(name="customRuntimeConfig")
    def custom_runtime_config(self) -> pulumi.Output[Optional['outputs.V2FunctionCustomRuntimeConfig']]:
        """
        Detailed configuration of Custom Runtime function. See `custom_runtime_config` below.
        """
        return pulumi.get(self, "custom_runtime_config")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        description of function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The disk specification of the function. The unit is MB. The optional value is 512 MB or 10240MB.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The environment variable set for the function can get the value of the environment variable in the function. For more information, see Environment Variables.
        """
        return pulumi.get(self, "environment_variables")

    @_builtins.property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The Function Compute service function arn. It formats as `acs:fc:<region>:<uid>:services/<serviceName>.LATEST/functions/<functionName>`.
        """
        return pulumi.get(self, "function_arn")

    @_builtins.property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[_builtins.str]:
        """
        function name.
        """
        return pulumi.get(self, "function_name")

    @_builtins.property
    @pulumi.getter(name="gpuMemorySize")
    def gpu_memory_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The GPU memory specification of the function, in MB, is a multiple of 1024MB.
        """
        return pulumi.get(self, "gpu_memory_size")

    @_builtins.property
    @pulumi.getter
    def handler(self) -> pulumi.Output[_builtins.str]:
        """
        entry point of function.
        """
        return pulumi.get(self, "handler")

    @_builtins.property
    @pulumi.getter(name="initializationTimeout")
    def initialization_timeout(self) -> pulumi.Output[_builtins.int]:
        """
        max running time of initializer.
        """
        return pulumi.get(self, "initialization_timeout")

    @_builtins.property
    @pulumi.getter
    def initializer(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        initializer entry point of function.
        """
        return pulumi.get(self, "initializer")

    @_builtins.property
    @pulumi.getter(name="instanceConcurrency")
    def instance_concurrency(self) -> pulumi.Output[_builtins.int]:
        """
        The maximum concurrency allowed for a single function instance.
        """
        return pulumi.get(self, "instance_concurrency")

    @_builtins.property
    @pulumi.getter(name="instanceLifecycleConfig")
    def instance_lifecycle_config(self) -> pulumi.Output[Optional['outputs.V2FunctionInstanceLifecycleConfig']]:
        """
        Instance lifecycle configuration. See `instance_lifecycle_config` below.
        """
        return pulumi.get(self, "instance_lifecycle_config")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        The instance type of the function. Valid values:
        - **e1**: Elastic instance.
        - **c1**: performance instance.
        - **fc.gpu.tesla.1**: the T4 card type of the Tesla series of GPU instances.
        - **fc.gpu.ampere.1**: The Ampere series A10 card type of the GPU instance.
        - **g1**: Same as **fc.gpu.tesla.1**.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def layers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of layers.
        > **NOTE:**  Multiple layers will be merged in the order of array subscripts from large to small, and the contents of layers with small subscripts will overwrite the files with the same name of layers with large subscripts.
        """
        return pulumi.get(self, "layers")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> pulumi.Output[_builtins.int]:
        """
        memory size needed by function.
        """
        return pulumi.get(self, "memory_size")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[_builtins.str]:
        """
        runtime of function code.
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the function Service.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[_builtins.int]:
        """
        max running time of function.
        """
        return pulumi.get(self, "timeout")

