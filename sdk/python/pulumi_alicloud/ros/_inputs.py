# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ChangeSetParameterArgs',
    'ChangeSetParameterArgsDict',
    'StackGroupAutoDeploymentArgs',
    'StackGroupAutoDeploymentArgsDict',
    'StackGroupParameterArgs',
    'StackGroupParameterArgsDict',
    'StackInstanceParameterOverrideArgs',
    'StackInstanceParameterOverrideArgsDict',
    'StackParameterArgs',
    'StackParameterArgsDict',
    'TemplateScratchPreferenceParameterArgs',
    'TemplateScratchPreferenceParameterArgsDict',
    'TemplateScratchSourceResourceArgs',
    'TemplateScratchSourceResourceArgsDict',
    'TemplateScratchSourceResourceGroupArgs',
    'TemplateScratchSourceResourceGroupArgsDict',
    'TemplateScratchSourceTagArgs',
    'TemplateScratchSourceTagArgsDict',
]

MYPY = False

if not MYPY:
    class ChangeSetParameterArgsDict(TypedDict):
        parameter_key: pulumi.Input[_builtins.str]
        """
        The parameter key.
        """
        parameter_value: pulumi.Input[_builtins.str]
        """
        The parameter value.
        """
elif False:
    ChangeSetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChangeSetParameterArgs:
    def __init__(__self__, *,
                 parameter_key: pulumi.Input[_builtins.str],
                 parameter_value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] parameter_key: The parameter key.
        :param pulumi.Input[_builtins.str] parameter_value: The parameter value.
        """
        pulumi.set(__self__, "parameter_key", parameter_key)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterKey")
    def parameter_key(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter key.
        """
        return pulumi.get(self, "parameter_key")

    @parameter_key.setter
    def parameter_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_key", value)

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter value.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_value", value)


if not MYPY:
    class StackGroupAutoDeploymentArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable automatic deployment. Valid Values:
        """
        retain_stacks_on_account_removal: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to retain the stack in the member account when the member account is deleted from the target folder. Valid values:
        """
elif False:
    StackGroupAutoDeploymentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StackGroupAutoDeploymentArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 retain_stacks_on_account_removal: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Enable or disable automatic deployment. Valid Values:
        :param pulumi.Input[_builtins.bool] retain_stacks_on_account_removal: Whether to retain the stack in the member account when the member account is deleted from the target folder. Valid values:
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if retain_stacks_on_account_removal is not None:
            pulumi.set(__self__, "retain_stacks_on_account_removal", retain_stacks_on_account_removal)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable automatic deployment. Valid Values:
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="retainStacksOnAccountRemoval")
    def retain_stacks_on_account_removal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to retain the stack in the member account when the member account is deleted from the target folder. Valid values:
        """
        return pulumi.get(self, "retain_stacks_on_account_removal")

    @retain_stacks_on_account_removal.setter
    def retain_stacks_on_account_removal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "retain_stacks_on_account_removal", value)


if not MYPY:
    class StackGroupParameterArgsDict(TypedDict):
        parameter_key: pulumi.Input[_builtins.str]
        """
        The key of parameter N. If you do not specify the key and value of the parameter, ROS uses the default key and value in the template.
        """
        parameter_value: pulumi.Input[_builtins.str]
        """
        The value of parameter N.
        """
elif False:
    StackGroupParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StackGroupParameterArgs:
    def __init__(__self__, *,
                 parameter_key: pulumi.Input[_builtins.str],
                 parameter_value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] parameter_key: The key of parameter N. If you do not specify the key and value of the parameter, ROS uses the default key and value in the template.
        :param pulumi.Input[_builtins.str] parameter_value: The value of parameter N.
        """
        pulumi.set(__self__, "parameter_key", parameter_key)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterKey")
    def parameter_key(self) -> pulumi.Input[_builtins.str]:
        """
        The key of parameter N. If you do not specify the key and value of the parameter, ROS uses the default key and value in the template.
        """
        return pulumi.get(self, "parameter_key")

    @parameter_key.setter
    def parameter_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_key", value)

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of parameter N.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_value", value)


if not MYPY:
    class StackInstanceParameterOverrideArgsDict(TypedDict):
        parameter_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The key of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        """
        parameter_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        """
elif False:
    StackInstanceParameterOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StackInstanceParameterOverrideArgs:
    def __init__(__self__, *,
                 parameter_key: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parameter_key: The key of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        :param pulumi.Input[_builtins.str] parameter_value: The value of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        """
        if parameter_key is not None:
            pulumi.set(__self__, "parameter_key", parameter_key)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterKey")
    def parameter_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        """
        return pulumi.get(self, "parameter_key")

    @parameter_key.setter
    def parameter_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_key", value)

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value of override parameter. If you do not specify the key and value of the parameter, ROS uses the key and value that you specified when you created the stack group.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_value", value)


if not MYPY:
    class StackParameterArgsDict(TypedDict):
        parameter_value: pulumi.Input[_builtins.str]
        """
        The parameter value.
        """
        parameter_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The parameter key.
        """
elif False:
    StackParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StackParameterArgs:
    def __init__(__self__, *,
                 parameter_value: pulumi.Input[_builtins.str],
                 parameter_key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parameter_value: The parameter value.
        :param pulumi.Input[_builtins.str] parameter_key: The parameter key.
        """
        pulumi.set(__self__, "parameter_value", parameter_value)
        if parameter_key is not None:
            pulumi.set(__self__, "parameter_key", parameter_key)

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter value.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_value", value)

    @_builtins.property
    @pulumi.getter(name="parameterKey")
    def parameter_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The parameter key.
        """
        return pulumi.get(self, "parameter_key")

    @parameter_key.setter
    def parameter_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_key", value)


if not MYPY:
    class TemplateScratchPreferenceParameterArgsDict(TypedDict):
        parameter_key: pulumi.Input[_builtins.str]
        """
        Priority parameter key. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        """
        parameter_value: pulumi.Input[_builtins.str]
        """
        Priority parameter value. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        """
elif False:
    TemplateScratchPreferenceParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateScratchPreferenceParameterArgs:
    def __init__(__self__, *,
                 parameter_key: pulumi.Input[_builtins.str],
                 parameter_value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] parameter_key: Priority parameter key. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        :param pulumi.Input[_builtins.str] parameter_value: Priority parameter value. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        """
        pulumi.set(__self__, "parameter_key", parameter_key)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @_builtins.property
    @pulumi.getter(name="parameterKey")
    def parameter_key(self) -> pulumi.Input[_builtins.str]:
        """
        Priority parameter key. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        """
        return pulumi.get(self, "parameter_key")

    @parameter_key.setter
    def parameter_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_key", value)

    @_builtins.property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[_builtins.str]:
        """
        Priority parameter value. For more information about values, see [supplementary instructions for request parameters](https://www.alibabacloud.com/help/zh/doc-detail/358846.html#h2-url-4).
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_value", value)


if not MYPY:
    class TemplateScratchSourceResourceArgsDict(TypedDict):
        resource_id: pulumi.Input[_builtins.str]
        """
        The ID of the Source Resource.
        """
        resource_type: pulumi.Input[_builtins.str]
        """
        The type of the Source resource.
        """
elif False:
    TemplateScratchSourceResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateScratchSourceResourceArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 resource_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] resource_id: The ID of the Source Resource.
        :param pulumi.Input[_builtins.str] resource_type: The type of the Source resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Source Resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the Source resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class TemplateScratchSourceResourceGroupArgsDict(TypedDict):
        resource_group_id: pulumi.Input[_builtins.str]
        """
        The ID of the Source Resource Group.
        """
        resource_type_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    TemplateScratchSourceResourceGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateScratchSourceResourceGroupArgs:
    def __init__(__self__, *,
                 resource_group_id: pulumi.Input[_builtins.str],
                 resource_type_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the Source Resource Group.
        """
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_type_filters is not None:
            pulumi.set(__self__, "resource_type_filters", resource_type_filters)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Source Resource Group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceTypeFilters")
    def resource_type_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "resource_type_filters")

    @resource_type_filters.setter
    def resource_type_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_type_filters", value)


if not MYPY:
    class TemplateScratchSourceTagArgsDict(TypedDict):
        resource_tags: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        """
        Source label. **NOTE:** A maximum of 10 source labels can be configured.
        """
        resource_type_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    TemplateScratchSourceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateScratchSourceTagArgs:
    def __init__(__self__, *,
                 resource_tags: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 resource_type_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] resource_tags: Source label. **NOTE:** A maximum of 10 source labels can be configured.
        """
        pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type_filters is not None:
            pulumi.set(__self__, "resource_type_filters", resource_type_filters)

    @_builtins.property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Source label. **NOTE:** A maximum of 10 source labels can be configured.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "resource_tags", value)

    @_builtins.property
    @pulumi.getter(name="resourceTypeFilters")
    def resource_type_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "resource_type_filters")

    @resource_type_filters.setter
    def resource_type_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_type_filters", value)


