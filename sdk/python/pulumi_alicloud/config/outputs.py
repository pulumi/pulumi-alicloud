# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AssumeRole',
    'AssumeRoleWithOidc',
    'Endpoints',
    'SignVersion',
]

@pulumi.output_type
class AssumeRole(dict):
    def __init__(__self__, *,
                 role_arn: builtins.str,
                 external_id: Optional[builtins.str] = None,
                 policy: Optional[builtins.str] = None,
                 session_expiration: Optional[builtins.int] = None,
                 session_name: Optional[builtins.str] = None):
        """
        :param builtins.str role_arn: The ARN of a RAM role to assume prior to making API calls.
        :param builtins.str policy: The permissions applied when assuming a role. You cannot use, this policy to grant further permissions that are in excess to those of the, role that is being assumed.
        :param builtins.int session_expiration: The time after which the established session for assuming role expires. Valid value range: [900-3600] seconds. Default to 0 (in this case Alicloud use own default value).
        """
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if session_expiration is not None:
            pulumi.set(__self__, "session_expiration", session_expiration)
        if session_name is not None:
            pulumi.set(__self__, "session_name", session_name)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> builtins.str:
        """
        The ARN of a RAM role to assume prior to making API calls.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        The permissions applied when assuming a role. You cannot use, this policy to grant further permissions that are in excess to those of the, role that is being assumed.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="sessionExpiration")
    def session_expiration(self) -> Optional[builtins.int]:
        """
        The time after which the established session for assuming role expires. Valid value range: [900-3600] seconds. Default to 0 (in this case Alicloud use own default value).
        """
        return pulumi.get(self, "session_expiration")

    @property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "session_name")


@pulumi.output_type
class AssumeRoleWithOidc(dict):
    def __init__(__self__, *,
                 oidc_provider_arn: builtins.str,
                 role_arn: builtins.str,
                 oidc_token: Optional[builtins.str] = None,
                 oidc_token_file: Optional[builtins.str] = None,
                 policy: Optional[builtins.str] = None,
                 role_session_name: Optional[builtins.str] = None,
                 session_expiration: Optional[builtins.int] = None):
        """
        :param builtins.str oidc_provider_arn: ARN of the OIDC IdP.
        :param builtins.str role_arn: ARN of a RAM role to assume prior to making API calls.
        :param builtins.str oidc_token_file: The file path of OIDC token that is issued by the external IdP.
        :param builtins.str policy: The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
        :param builtins.str role_session_name: The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
        :param builtins.int session_expiration: The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
        """
        pulumi.set(__self__, "oidc_provider_arn", oidc_provider_arn)
        pulumi.set(__self__, "role_arn", role_arn)
        if oidc_token is not None:
            pulumi.set(__self__, "oidc_token", oidc_token)
        if oidc_token_file is not None:
            pulumi.set(__self__, "oidc_token_file", oidc_token_file)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_expiration is not None:
            pulumi.set(__self__, "session_expiration", session_expiration)

    @property
    @pulumi.getter(name="oidcProviderArn")
    def oidc_provider_arn(self) -> builtins.str:
        """
        ARN of the OIDC IdP.
        """
        return pulumi.get(self, "oidc_provider_arn")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> builtins.str:
        """
        ARN of a RAM role to assume prior to making API calls.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="oidcToken")
    def oidc_token(self) -> Optional[builtins.str]:
        return pulumi.get(self, "oidc_token")

    @property
    @pulumi.getter(name="oidcTokenFile")
    def oidc_token_file(self) -> Optional[builtins.str]:
        """
        The file path of OIDC token that is issued by the external IdP.
        """
        return pulumi.get(self, "oidc_token_file")

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        The policy that specifies the permissions of the returned STS token. You can use this parameter to grant the STS token fewer permissions than the permissions granted to the RAM role.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[builtins.str]:
        """
        The custom name of the role session. Set this parameter based on your business requirements. In most cases, this parameter is set to the identity of the user who calls the operation, for example, the username.
        """
        return pulumi.get(self, "role_session_name")

    @property
    @pulumi.getter(name="sessionExpiration")
    def session_expiration(self) -> Optional[builtins.int]:
        """
        The validity period of the STS token. Unit: seconds. Default value: 3600. Minimum value: 900. Maximum value: the value of the MaxSessionDuration parameter when creating a ram role.
        """
        return pulumi.get(self, "session_expiration")


@pulumi.output_type
class Endpoints(dict):
    def __init__(__self__, *,
                 acr: Optional[builtins.str] = None,
                 actiontrail: Optional[builtins.str] = None,
                 adb: Optional[builtins.str] = None,
                 aiworkspace: Optional[builtins.str] = None,
                 alb: Optional[builtins.str] = None,
                 alidfs: Optional[builtins.str] = None,
                 alidns: Optional[builtins.str] = None,
                 alikafka: Optional[builtins.str] = None,
                 amqp: Optional[builtins.str] = None,
                 antiddos_public: Optional[builtins.str] = None,
                 apig: Optional[builtins.str] = None,
                 apigateway: Optional[builtins.str] = None,
                 arms: Optional[builtins.str] = None,
                 bastionhost: Optional[builtins.str] = None,
                 beebot: Optional[builtins.str] = None,
                 bpstudio: Optional[builtins.str] = None,
                 brain_industrial: Optional[builtins.str] = None,
                 bssopenapi: Optional[builtins.str] = None,
                 cas: Optional[builtins.str] = None,
                 cassandra: Optional[builtins.str] = None,
                 cbn: Optional[builtins.str] = None,
                 cbs: Optional[builtins.str] = None,
                 cddc: Optional[builtins.str] = None,
                 cdn: Optional[builtins.str] = None,
                 cds: Optional[builtins.str] = None,
                 chatbot: Optional[builtins.str] = None,
                 clickhouse: Optional[builtins.str] = None,
                 cloudapi: Optional[builtins.str] = None,
                 cloudauth: Optional[builtins.str] = None,
                 cloudfirewall: Optional[builtins.str] = None,
                 cloudfw: Optional[builtins.str] = None,
                 cloudphone: Optional[builtins.str] = None,
                 cloudsso: Optional[builtins.str] = None,
                 cms: Optional[builtins.str] = None,
                 computenest: Optional[builtins.str] = None,
                 config: Optional[builtins.str] = None,
                 cr: Optional[builtins.str] = None,
                 cs: Optional[builtins.str] = None,
                 das: Optional[builtins.str] = None,
                 datahub: Optional[builtins.str] = None,
                 dataworks_public: Optional[builtins.str] = None,
                 dataworkspublic: Optional[builtins.str] = None,
                 dbfs: Optional[builtins.str] = None,
                 dbs: Optional[builtins.str] = None,
                 dcdn: Optional[builtins.str] = None,
                 ddosbasic: Optional[builtins.str] = None,
                 ddosbgp: Optional[builtins.str] = None,
                 ddoscoo: Optional[builtins.str] = None,
                 dds: Optional[builtins.str] = None,
                 devops_rdc: Optional[builtins.str] = None,
                 devopsrdc: Optional[builtins.str] = None,
                 dfs: Optional[builtins.str] = None,
                 dg: Optional[builtins.str] = None,
                 dm: Optional[builtins.str] = None,
                 dms_enterprise: Optional[builtins.str] = None,
                 dmsenterprise: Optional[builtins.str] = None,
                 dns: Optional[builtins.str] = None,
                 drds: Optional[builtins.str] = None,
                 dts: Optional[builtins.str] = None,
                 dysms: Optional[builtins.str] = None,
                 dysmsapi: Optional[builtins.str] = None,
                 eais: Optional[builtins.str] = None,
                 ebs: Optional[builtins.str] = None,
                 ecd: Optional[builtins.str] = None,
                 eci: Optional[builtins.str] = None,
                 ecs: Optional[builtins.str] = None,
                 edas: Optional[builtins.str] = None,
                 edasschedulerx: Optional[builtins.str] = None,
                 eds_user: Optional[builtins.str] = None,
                 edsuser: Optional[builtins.str] = None,
                 eflo: Optional[builtins.str] = None,
                 eflo_cnp: Optional[builtins.str] = None,
                 eflo_controller: Optional[builtins.str] = None,
                 ehpc: Optional[builtins.str] = None,
                 ehs: Optional[builtins.str] = None,
                 eipanycast: Optional[builtins.str] = None,
                 elasticsearch: Optional[builtins.str] = None,
                 emr: Optional[builtins.str] = None,
                 ens: Optional[builtins.str] = None,
                 esa: Optional[builtins.str] = None,
                 ess: Optional[builtins.str] = None,
                 eventbridge: Optional[builtins.str] = None,
                 fc: Optional[builtins.str] = None,
                 fc_open: Optional[builtins.str] = None,
                 fnf: Optional[builtins.str] = None,
                 ga: Optional[builtins.str] = None,
                 gaplus: Optional[builtins.str] = None,
                 gdb: Optional[builtins.str] = None,
                 gds: Optional[builtins.str] = None,
                 gpdb: Optional[builtins.str] = None,
                 gwlb: Optional[builtins.str] = None,
                 gwsecd: Optional[builtins.str] = None,
                 hbr: Optional[builtins.str] = None,
                 hcs_sgw: Optional[builtins.str] = None,
                 hitsdb: Optional[builtins.str] = None,
                 imm: Optional[builtins.str] = None,
                 imp: Optional[builtins.str] = None,
                 ims: Optional[builtins.str] = None,
                 iot: Optional[builtins.str] = None,
                 kms: Optional[builtins.str] = None,
                 kvstore: Optional[builtins.str] = None,
                 location: Optional[builtins.str] = None,
                 log: Optional[builtins.str] = None,
                 market: Optional[builtins.str] = None,
                 maxcompute: Optional[builtins.str] = None,
                 mhub: Optional[builtins.str] = None,
                 mns: Optional[builtins.str] = None,
                 mns_open: Optional[builtins.str] = None,
                 mscopensubscription: Optional[builtins.str] = None,
                 mse: Optional[builtins.str] = None,
                 nas: Optional[builtins.str] = None,
                 nlb: Optional[builtins.str] = None,
                 oceanbase: Optional[builtins.str] = None,
                 oceanbasepro: Optional[builtins.str] = None,
                 ons: Optional[builtins.str] = None,
                 onsproxy: Optional[builtins.str] = None,
                 oos: Optional[builtins.str] = None,
                 opensearch: Optional[builtins.str] = None,
                 oss: Optional[builtins.str] = None,
                 ots: Optional[builtins.str] = None,
                 polardb: Optional[builtins.str] = None,
                 polardbx: Optional[builtins.str] = None,
                 privatelink: Optional[builtins.str] = None,
                 pvtz: Optional[builtins.str] = None,
                 quickbi: Optional[builtins.str] = None,
                 quickbi_public: Optional[builtins.str] = None,
                 quotas: Optional[builtins.str] = None,
                 r_kvstore: Optional[builtins.str] = None,
                 ram: Optional[builtins.str] = None,
                 rds: Optional[builtins.str] = None,
                 redisa: Optional[builtins.str] = None,
                 resourcemanager: Optional[builtins.str] = None,
                 resourcesharing: Optional[builtins.str] = None,
                 ressharing: Optional[builtins.str] = None,
                 rocketmq: Optional[builtins.str] = None,
                 ros: Optional[builtins.str] = None,
                 sae: Optional[builtins.str] = None,
                 sas: Optional[builtins.str] = None,
                 scdn: Optional[builtins.str] = None,
                 schedulerx2: Optional[builtins.str] = None,
                 sddp: Optional[builtins.str] = None,
                 selectdb: Optional[builtins.str] = None,
                 serverless: Optional[builtins.str] = None,
                 servicecatalog: Optional[builtins.str] = None,
                 servicemesh: Optional[builtins.str] = None,
                 sgw: Optional[builtins.str] = None,
                 slb: Optional[builtins.str] = None,
                 smartag: Optional[builtins.str] = None,
                 srvcatalog: Optional[builtins.str] = None,
                 sts: Optional[builtins.str] = None,
                 swas: Optional[builtins.str] = None,
                 swas_open: Optional[builtins.str] = None,
                 tag: Optional[builtins.str] = None,
                 vod: Optional[builtins.str] = None,
                 vpc: Optional[builtins.str] = None,
                 vpcipam: Optional[builtins.str] = None,
                 vpcpeer: Optional[builtins.str] = None,
                 vs: Optional[builtins.str] = None,
                 waf: Optional[builtins.str] = None,
                 waf_openapi: Optional[builtins.str] = None):
        """
        :param builtins.str acr: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom acr endpoints.
        :param builtins.str actiontrail: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Actiontrail endpoints.
        :param builtins.str adb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom AnalyticDB endpoints.
        :param builtins.str alb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alb endpoints.
        :param builtins.str alidfs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidfs endpoints.
        :param builtins.str alidns: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidns endpoints.
        :param builtins.str alikafka: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ALIKAFKA endpoints.
        :param builtins.str amqp: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom onsproxy endpoints.
        :param builtins.str antiddos_public: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ddosbasic endpoints.
        :param builtins.str apigateway: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Api Gateway endpoints.
        :param builtins.str arms: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom arms endpoints.
        :param builtins.str bastionhost: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom bastionhost endpoints.
        :param builtins.str beebot: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom beebot endpoints.
        :param builtins.str bpstudio: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom bpstudio endpoints.
        :param builtins.str brain_industrial: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom brain_industrial endpoints.
        :param builtins.str bssopenapi: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom BSSOPENAPI endpoints.
        :param builtins.str cas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom CAS endpoints.
        :param builtins.str cassandra: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cassandra endpoints.
        :param builtins.str cbn: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbn endpoints.
        :param builtins.str cbs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbs endpoints.
        :param builtins.str cddc: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cddc endpoints.
        :param builtins.str cdn: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom CDN endpoints.
        :param builtins.str cds: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cds endpoints.
        :param builtins.str chatbot: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom beebot endpoints.
        :param builtins.str clickhouse: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom clickhouse endpoints.
        :param builtins.str cloudapi: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Api Gateway endpoints.
        :param builtins.str cloudauth: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudauth endpoints.
        :param builtins.str cloudfirewall: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudfirewall endpoints.
        :param builtins.str cloudfw: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudfw endpoints.
        :param builtins.str cloudphone: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudphone endpoints.
        :param builtins.str cloudsso: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudsso endpoints.
        :param builtins.str cms: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Cloud Monitor endpoints.
        :param builtins.str computenest: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom computenest endpoints.
        :param builtins.str config: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom config endpoints.
        :param builtins.str cr: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Container Registry endpoints.
        :param builtins.str cs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Container Service endpoints.
        :param builtins.str das: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom das endpoints.
        :param builtins.str datahub: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Datahub endpoints.
        :param builtins.str dataworks_public: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dataworkspublic endpoints.
        :param builtins.str dataworkspublic: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dataworkspublic endpoints.
        :param builtins.str dbfs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dbfs endpoints.
        :param builtins.str dbs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbs endpoints.
        :param builtins.str dcdn: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dcdn endpoints.
        :param builtins.str ddosbasic: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ddosbasic endpoints.
        :param builtins.str ddosbgp: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DDOSBGP endpoints.
        :param builtins.str ddoscoo: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DDOSCOO endpoints.
        :param builtins.str dds: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MongoDB endpoints.
        :param builtins.str devopsrdc: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom devopsrdc endpoints.
        :param builtins.str dfs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidfs endpoints.
        :param builtins.str dg: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dg endpoints.
        :param builtins.str dm: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dm endpoints.
        :param builtins.str dms_enterprise: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dms_enterprise endpoints.
        :param builtins.str dmsenterprise: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dmsenterprise endpoints.
        :param builtins.str dns: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DNS endpoints.
        :param builtins.str drds: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DRDS endpoints.
        :param builtins.str dts: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dts endpoints.
        :param builtins.str dysmsapi: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dysmsapi endpoints.
        :param builtins.str eais: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eais endpoints.
        :param builtins.str ebs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ebs endpoints.
        :param builtins.str ecd: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gwsecd endpoints.
        :param builtins.str eci: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eci endpoints.
        :param builtins.str ecs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ECS endpoints.
        :param builtins.str edas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edas endpoints.
        :param builtins.str edasschedulerx: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edasschedulerx endpoints.
        :param builtins.str eds_user: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edsuser endpoints.
        :param builtins.str edsuser: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edsuser endpoints.
        :param builtins.str eflo: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eflo endpoints.
        :param builtins.str eflo_controller: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom efloctrl endpoints.
        :param builtins.str ehpc: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ehpc endpoints.
        :param builtins.str ehs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ehs endpoints.
        :param builtins.str eipanycast: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eipanycast endpoints.
        :param builtins.str elasticsearch: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Elasticsearch endpoints.
        :param builtins.str emr: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom EMR endpoints.
        :param builtins.str ens: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ens endpoints.
        :param builtins.str ess: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Autoscaling endpoints.
        :param builtins.str eventbridge: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eventbridge_share endpoints.
        :param builtins.str fc: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Function Computing endpoints.
        :param builtins.str fc_open: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Function Computing endpoints.
        :param builtins.str fnf: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom fnf endpoints.
        :param builtins.str ga: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ga endpoints.
        :param builtins.str gaplus: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gaplus endpoints.
        :param builtins.str gdb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gds endpoints.
        :param builtins.str gds: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gds endpoints.
        :param builtins.str gpdb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom GPDB endpoints.
        :param builtins.str gwsecd: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gwsecd endpoints.
        :param builtins.str hbr: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hbr endpoints.
        :param builtins.str hcs_sgw: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hcs_sgw endpoints.
        :param builtins.str hitsdb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hitsdb endpoints.
        :param builtins.str imm: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom imm endpoints.
        :param builtins.str imp: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom imp endpoints.
        :param builtins.str ims: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ims endpoints.
        :param builtins.str iot: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom iot endpoints.
        :param builtins.str kms: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom KMS endpoints.
        :param builtins.str kvstore: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom R-KVStore endpoints.
        :param builtins.str location: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Location Service endpoints.
        :param builtins.str log: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Log Service endpoints.
        :param builtins.str market: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Market Place endpoints.
        :param builtins.str maxcompute: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MaxCompute endpoints.
        :param builtins.str mhub: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mhub endpoints.
        :param builtins.str mns: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MNS endpoints.
        :param builtins.str mns_open: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MNS endpoints.
        :param builtins.str mscopensubscription: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mscopensubscription endpoints.
        :param builtins.str mse: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mse endpoints.
        :param builtins.str nas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom NAS endpoints.
        :param builtins.str nlb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom nlb endpoints.
        :param builtins.str oceanbase: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oceanbase endpoints.
        :param builtins.str oceanbasepro: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oceanbase endpoints.
        :param builtins.str ons: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ONS endpoints.
        :param builtins.str onsproxy: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom onsproxy endpoints.
        :param builtins.str oos: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oos endpoints.
        :param builtins.str opensearch: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom opensearch endpoints.
        :param builtins.str oss: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom OSS endpoints.
        :param builtins.str ots: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Table Store endpoints.
        :param builtins.str polardb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom PolarDB endpoints.
        :param builtins.str polardbx: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DRDS endpoints.
        :param builtins.str privatelink: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom privatelink endpoints.
        :param builtins.str pvtz: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Private Zone endpoints.
        :param builtins.str quickbi: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quickbi endpoints.
        :param builtins.str quickbi_public: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quickbi endpoints.
        :param builtins.str quotas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quotas endpoints.
        :param builtins.str r_kvstore: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom r_kvstore endpoints.
        :param builtins.str ram: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom RAM endpoints.
        :param builtins.str rds: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom RDS endpoints.
        :param builtins.str redisa: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom redisa endpoints.
        :param builtins.str resourcemanager: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom resourcemanager endpoints.
        :param builtins.str ressharing: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom resourcesharing endpoints.
        :param builtins.str ros: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ros endpoints.
        :param builtins.str sae: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom serverless endpoints.
        :param builtins.str sas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sas endpoints.
        :param builtins.str scdn: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom scdn endpoints.
        :param builtins.str schedulerx2: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edasschedulerx endpoints.
        :param builtins.str sddp: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sddp endpoints.
        :param builtins.str selectdb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom selectdb endpoints.
        :param builtins.str serverless: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom serverless endpoints.
        :param builtins.str servicecatalog: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom srvcatalog endpoints.
        :param builtins.str servicemesh: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom servicemesh endpoints.
        :param builtins.str sgw: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sgw endpoints.
        :param builtins.str slb: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom SLB endpoints.
        :param builtins.str smartag: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom smartag endpoints.
        :param builtins.str srvcatalog: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom srvcatalog endpoints.
        :param builtins.str sts: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom STS endpoints.
        :param builtins.str swas: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom swas endpoints.
        :param builtins.str swas_open: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom swas endpoints.
        :param builtins.str tag: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom tag endpoints.
        :param builtins.str vod: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vod endpoints.
        :param builtins.str vpc: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom VPC and VPN endpoints.
        :param builtins.str vpcpeer: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vpcpeer endpoints.
        :param builtins.str vs: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vs endpoints.
        :param builtins.str waf: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom waf endpoints.
        :param builtins.str waf_openapi: Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom waf_openapi endpoints.
        """
        if acr is not None:
            pulumi.set(__self__, "acr", acr)
        if actiontrail is not None:
            pulumi.set(__self__, "actiontrail", actiontrail)
        if adb is not None:
            pulumi.set(__self__, "adb", adb)
        if aiworkspace is not None:
            pulumi.set(__self__, "aiworkspace", aiworkspace)
        if alb is not None:
            pulumi.set(__self__, "alb", alb)
        if alidfs is not None:
            pulumi.set(__self__, "alidfs", alidfs)
        if alidns is not None:
            pulumi.set(__self__, "alidns", alidns)
        if alikafka is not None:
            pulumi.set(__self__, "alikafka", alikafka)
        if amqp is not None:
            pulumi.set(__self__, "amqp", amqp)
        if antiddos_public is not None:
            pulumi.set(__self__, "antiddos_public", antiddos_public)
        if apig is not None:
            pulumi.set(__self__, "apig", apig)
        if apigateway is not None:
            pulumi.set(__self__, "apigateway", apigateway)
        if arms is not None:
            pulumi.set(__self__, "arms", arms)
        if bastionhost is not None:
            pulumi.set(__self__, "bastionhost", bastionhost)
        if beebot is not None:
            pulumi.set(__self__, "beebot", beebot)
        if bpstudio is not None:
            pulumi.set(__self__, "bpstudio", bpstudio)
        if brain_industrial is not None:
            pulumi.set(__self__, "brain_industrial", brain_industrial)
        if bssopenapi is not None:
            pulumi.set(__self__, "bssopenapi", bssopenapi)
        if cas is not None:
            pulumi.set(__self__, "cas", cas)
        if cassandra is not None:
            pulumi.set(__self__, "cassandra", cassandra)
        if cbn is not None:
            pulumi.set(__self__, "cbn", cbn)
        if cbs is not None:
            pulumi.set(__self__, "cbs", cbs)
        if cddc is not None:
            pulumi.set(__self__, "cddc", cddc)
        if cdn is not None:
            pulumi.set(__self__, "cdn", cdn)
        if cds is not None:
            pulumi.set(__self__, "cds", cds)
        if chatbot is not None:
            pulumi.set(__self__, "chatbot", chatbot)
        if clickhouse is not None:
            pulumi.set(__self__, "clickhouse", clickhouse)
        if cloudapi is not None:
            pulumi.set(__self__, "cloudapi", cloudapi)
        if cloudauth is not None:
            pulumi.set(__self__, "cloudauth", cloudauth)
        if cloudfirewall is not None:
            pulumi.set(__self__, "cloudfirewall", cloudfirewall)
        if cloudfw is not None:
            pulumi.set(__self__, "cloudfw", cloudfw)
        if cloudphone is not None:
            pulumi.set(__self__, "cloudphone", cloudphone)
        if cloudsso is not None:
            pulumi.set(__self__, "cloudsso", cloudsso)
        if cms is not None:
            pulumi.set(__self__, "cms", cms)
        if computenest is not None:
            pulumi.set(__self__, "computenest", computenest)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if cr is not None:
            pulumi.set(__self__, "cr", cr)
        if cs is not None:
            pulumi.set(__self__, "cs", cs)
        if das is not None:
            pulumi.set(__self__, "das", das)
        if datahub is not None:
            pulumi.set(__self__, "datahub", datahub)
        if dataworks_public is not None:
            pulumi.set(__self__, "dataworks_public", dataworks_public)
        if dataworkspublic is not None:
            pulumi.set(__self__, "dataworkspublic", dataworkspublic)
        if dbfs is not None:
            pulumi.set(__self__, "dbfs", dbfs)
        if dbs is not None:
            pulumi.set(__self__, "dbs", dbs)
        if dcdn is not None:
            pulumi.set(__self__, "dcdn", dcdn)
        if ddosbasic is not None:
            pulumi.set(__self__, "ddosbasic", ddosbasic)
        if ddosbgp is not None:
            pulumi.set(__self__, "ddosbgp", ddosbgp)
        if ddoscoo is not None:
            pulumi.set(__self__, "ddoscoo", ddoscoo)
        if dds is not None:
            pulumi.set(__self__, "dds", dds)
        if devops_rdc is not None:
            pulumi.set(__self__, "devops_rdc", devops_rdc)
        if devopsrdc is not None:
            pulumi.set(__self__, "devopsrdc", devopsrdc)
        if dfs is not None:
            pulumi.set(__self__, "dfs", dfs)
        if dg is not None:
            pulumi.set(__self__, "dg", dg)
        if dm is not None:
            pulumi.set(__self__, "dm", dm)
        if dms_enterprise is not None:
            pulumi.set(__self__, "dms_enterprise", dms_enterprise)
        if dmsenterprise is not None:
            pulumi.set(__self__, "dmsenterprise", dmsenterprise)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if drds is not None:
            pulumi.set(__self__, "drds", drds)
        if dts is not None:
            pulumi.set(__self__, "dts", dts)
        if dysms is not None:
            pulumi.set(__self__, "dysms", dysms)
        if dysmsapi is not None:
            pulumi.set(__self__, "dysmsapi", dysmsapi)
        if eais is not None:
            pulumi.set(__self__, "eais", eais)
        if ebs is not None:
            pulumi.set(__self__, "ebs", ebs)
        if ecd is not None:
            pulumi.set(__self__, "ecd", ecd)
        if eci is not None:
            pulumi.set(__self__, "eci", eci)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if edas is not None:
            pulumi.set(__self__, "edas", edas)
        if edasschedulerx is not None:
            pulumi.set(__self__, "edasschedulerx", edasschedulerx)
        if eds_user is not None:
            pulumi.set(__self__, "eds_user", eds_user)
        if edsuser is not None:
            pulumi.set(__self__, "edsuser", edsuser)
        if eflo is not None:
            pulumi.set(__self__, "eflo", eflo)
        if eflo_cnp is not None:
            pulumi.set(__self__, "eflo_cnp", eflo_cnp)
        if eflo_controller is not None:
            pulumi.set(__self__, "eflo_controller", eflo_controller)
        if ehpc is not None:
            pulumi.set(__self__, "ehpc", ehpc)
        if ehs is not None:
            pulumi.set(__self__, "ehs", ehs)
        if eipanycast is not None:
            pulumi.set(__self__, "eipanycast", eipanycast)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if emr is not None:
            pulumi.set(__self__, "emr", emr)
        if ens is not None:
            pulumi.set(__self__, "ens", ens)
        if esa is not None:
            pulumi.set(__self__, "esa", esa)
        if ess is not None:
            pulumi.set(__self__, "ess", ess)
        if eventbridge is not None:
            pulumi.set(__self__, "eventbridge", eventbridge)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if fc_open is not None:
            pulumi.set(__self__, "fc_open", fc_open)
        if fnf is not None:
            pulumi.set(__self__, "fnf", fnf)
        if ga is not None:
            pulumi.set(__self__, "ga", ga)
        if gaplus is not None:
            pulumi.set(__self__, "gaplus", gaplus)
        if gdb is not None:
            pulumi.set(__self__, "gdb", gdb)
        if gds is not None:
            pulumi.set(__self__, "gds", gds)
        if gpdb is not None:
            pulumi.set(__self__, "gpdb", gpdb)
        if gwlb is not None:
            pulumi.set(__self__, "gwlb", gwlb)
        if gwsecd is not None:
            pulumi.set(__self__, "gwsecd", gwsecd)
        if hbr is not None:
            pulumi.set(__self__, "hbr", hbr)
        if hcs_sgw is not None:
            pulumi.set(__self__, "hcs_sgw", hcs_sgw)
        if hitsdb is not None:
            pulumi.set(__self__, "hitsdb", hitsdb)
        if imm is not None:
            pulumi.set(__self__, "imm", imm)
        if imp is not None:
            pulumi.set(__self__, "imp", imp)
        if ims is not None:
            pulumi.set(__self__, "ims", ims)
        if iot is not None:
            pulumi.set(__self__, "iot", iot)
        if kms is not None:
            pulumi.set(__self__, "kms", kms)
        if kvstore is not None:
            pulumi.set(__self__, "kvstore", kvstore)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if market is not None:
            pulumi.set(__self__, "market", market)
        if maxcompute is not None:
            pulumi.set(__self__, "maxcompute", maxcompute)
        if mhub is not None:
            pulumi.set(__self__, "mhub", mhub)
        if mns is not None:
            pulumi.set(__self__, "mns", mns)
        if mns_open is not None:
            pulumi.set(__self__, "mns_open", mns_open)
        if mscopensubscription is not None:
            pulumi.set(__self__, "mscopensubscription", mscopensubscription)
        if mse is not None:
            pulumi.set(__self__, "mse", mse)
        if nas is not None:
            pulumi.set(__self__, "nas", nas)
        if nlb is not None:
            pulumi.set(__self__, "nlb", nlb)
        if oceanbase is not None:
            pulumi.set(__self__, "oceanbase", oceanbase)
        if oceanbasepro is not None:
            pulumi.set(__self__, "oceanbasepro", oceanbasepro)
        if ons is not None:
            pulumi.set(__self__, "ons", ons)
        if onsproxy is not None:
            pulumi.set(__self__, "onsproxy", onsproxy)
        if oos is not None:
            pulumi.set(__self__, "oos", oos)
        if opensearch is not None:
            pulumi.set(__self__, "opensearch", opensearch)
        if oss is not None:
            pulumi.set(__self__, "oss", oss)
        if ots is not None:
            pulumi.set(__self__, "ots", ots)
        if polardb is not None:
            pulumi.set(__self__, "polardb", polardb)
        if polardbx is not None:
            pulumi.set(__self__, "polardbx", polardbx)
        if privatelink is not None:
            pulumi.set(__self__, "privatelink", privatelink)
        if pvtz is not None:
            pulumi.set(__self__, "pvtz", pvtz)
        if quickbi is not None:
            pulumi.set(__self__, "quickbi", quickbi)
        if quickbi_public is not None:
            pulumi.set(__self__, "quickbi_public", quickbi_public)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if r_kvstore is not None:
            pulumi.set(__self__, "r_kvstore", r_kvstore)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redisa is not None:
            pulumi.set(__self__, "redisa", redisa)
        if resourcemanager is not None:
            pulumi.set(__self__, "resourcemanager", resourcemanager)
        if resourcesharing is not None:
            pulumi.set(__self__, "resourcesharing", resourcesharing)
        if ressharing is not None:
            pulumi.set(__self__, "ressharing", ressharing)
        if rocketmq is not None:
            pulumi.set(__self__, "rocketmq", rocketmq)
        if ros is not None:
            pulumi.set(__self__, "ros", ros)
        if sae is not None:
            pulumi.set(__self__, "sae", sae)
        if sas is not None:
            pulumi.set(__self__, "sas", sas)
        if scdn is not None:
            pulumi.set(__self__, "scdn", scdn)
        if schedulerx2 is not None:
            pulumi.set(__self__, "schedulerx2", schedulerx2)
        if sddp is not None:
            pulumi.set(__self__, "sddp", sddp)
        if selectdb is not None:
            pulumi.set(__self__, "selectdb", selectdb)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)
        if servicecatalog is not None:
            pulumi.set(__self__, "servicecatalog", servicecatalog)
        if servicemesh is not None:
            pulumi.set(__self__, "servicemesh", servicemesh)
        if sgw is not None:
            pulumi.set(__self__, "sgw", sgw)
        if slb is not None:
            pulumi.set(__self__, "slb", slb)
        if smartag is not None:
            pulumi.set(__self__, "smartag", smartag)
        if srvcatalog is not None:
            pulumi.set(__self__, "srvcatalog", srvcatalog)
        if sts is not None:
            pulumi.set(__self__, "sts", sts)
        if swas is not None:
            pulumi.set(__self__, "swas", swas)
        if swas_open is not None:
            pulumi.set(__self__, "swas_open", swas_open)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vod is not None:
            pulumi.set(__self__, "vod", vod)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if vpcipam is not None:
            pulumi.set(__self__, "vpcipam", vpcipam)
        if vpcpeer is not None:
            pulumi.set(__self__, "vpcpeer", vpcpeer)
        if vs is not None:
            pulumi.set(__self__, "vs", vs)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if waf_openapi is not None:
            pulumi.set(__self__, "waf_openapi", waf_openapi)

    @property
    @pulumi.getter
    def acr(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom acr endpoints.
        """
        return pulumi.get(self, "acr")

    @property
    @pulumi.getter
    def actiontrail(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Actiontrail endpoints.
        """
        return pulumi.get(self, "actiontrail")

    @property
    @pulumi.getter
    def adb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom AnalyticDB endpoints.
        """
        return pulumi.get(self, "adb")

    @property
    @pulumi.getter
    def aiworkspace(self) -> Optional[builtins.str]:
        return pulumi.get(self, "aiworkspace")

    @property
    @pulumi.getter
    def alb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alb endpoints.
        """
        return pulumi.get(self, "alb")

    @property
    @pulumi.getter
    def alidfs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidfs endpoints.
        """
        return pulumi.get(self, "alidfs")

    @property
    @pulumi.getter
    def alidns(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidns endpoints.
        """
        return pulumi.get(self, "alidns")

    @property
    @pulumi.getter
    def alikafka(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ALIKAFKA endpoints.
        """
        return pulumi.get(self, "alikafka")

    @property
    @pulumi.getter
    def amqp(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom onsproxy endpoints.
        """
        return pulumi.get(self, "amqp")

    @property
    @pulumi.getter(name="antiddosPublic")
    def antiddos_public(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ddosbasic endpoints.
        """
        return pulumi.get(self, "antiddos_public")

    @property
    @pulumi.getter
    def apig(self) -> Optional[builtins.str]:
        return pulumi.get(self, "apig")

    @property
    @pulumi.getter
    def apigateway(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Api Gateway endpoints.
        """
        return pulumi.get(self, "apigateway")

    @property
    @pulumi.getter
    def arms(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom arms endpoints.
        """
        return pulumi.get(self, "arms")

    @property
    @pulumi.getter
    def bastionhost(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom bastionhost endpoints.
        """
        return pulumi.get(self, "bastionhost")

    @property
    @pulumi.getter
    def beebot(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom beebot endpoints.
        """
        return pulumi.get(self, "beebot")

    @property
    @pulumi.getter
    def bpstudio(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom bpstudio endpoints.
        """
        return pulumi.get(self, "bpstudio")

    @property
    @pulumi.getter(name="brainIndustrial")
    def brain_industrial(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom brain_industrial endpoints.
        """
        return pulumi.get(self, "brain_industrial")

    @property
    @pulumi.getter
    def bssopenapi(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom BSSOPENAPI endpoints.
        """
        return pulumi.get(self, "bssopenapi")

    @property
    @pulumi.getter
    def cas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom CAS endpoints.
        """
        return pulumi.get(self, "cas")

    @property
    @pulumi.getter
    def cassandra(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cassandra endpoints.
        """
        return pulumi.get(self, "cassandra")

    @property
    @pulumi.getter
    def cbn(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbn endpoints.
        """
        return pulumi.get(self, "cbn")

    @property
    @pulumi.getter
    def cbs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbs endpoints.
        """
        return pulumi.get(self, "cbs")

    @property
    @pulumi.getter
    def cddc(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cddc endpoints.
        """
        return pulumi.get(self, "cddc")

    @property
    @pulumi.getter
    def cdn(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom CDN endpoints.
        """
        return pulumi.get(self, "cdn")

    @property
    @pulumi.getter
    def cds(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cds endpoints.
        """
        return pulumi.get(self, "cds")

    @property
    @pulumi.getter
    def chatbot(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom beebot endpoints.
        """
        return pulumi.get(self, "chatbot")

    @property
    @pulumi.getter
    def clickhouse(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom clickhouse endpoints.
        """
        return pulumi.get(self, "clickhouse")

    @property
    @pulumi.getter
    def cloudapi(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Api Gateway endpoints.
        """
        return pulumi.get(self, "cloudapi")

    @property
    @pulumi.getter
    def cloudauth(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudauth endpoints.
        """
        return pulumi.get(self, "cloudauth")

    @property
    @pulumi.getter
    def cloudfirewall(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudfirewall endpoints.
        """
        return pulumi.get(self, "cloudfirewall")

    @property
    @pulumi.getter
    def cloudfw(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudfw endpoints.
        """
        return pulumi.get(self, "cloudfw")

    @property
    @pulumi.getter
    def cloudphone(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudphone endpoints.
        """
        return pulumi.get(self, "cloudphone")

    @property
    @pulumi.getter
    def cloudsso(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cloudsso endpoints.
        """
        return pulumi.get(self, "cloudsso")

    @property
    @pulumi.getter
    def cms(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Cloud Monitor endpoints.
        """
        return pulumi.get(self, "cms")

    @property
    @pulumi.getter
    def computenest(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom computenest endpoints.
        """
        return pulumi.get(self, "computenest")

    @property
    @pulumi.getter
    def config(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom config endpoints.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def cr(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Container Registry endpoints.
        """
        return pulumi.get(self, "cr")

    @property
    @pulumi.getter
    def cs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Container Service endpoints.
        """
        return pulumi.get(self, "cs")

    @property
    @pulumi.getter
    def das(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom das endpoints.
        """
        return pulumi.get(self, "das")

    @property
    @pulumi.getter
    def datahub(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Datahub endpoints.
        """
        return pulumi.get(self, "datahub")

    @property
    @pulumi.getter(name="dataworksPublic")
    def dataworks_public(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dataworkspublic endpoints.
        """
        return pulumi.get(self, "dataworks_public")

    @property
    @pulumi.getter
    def dataworkspublic(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dataworkspublic endpoints.
        """
        return pulumi.get(self, "dataworkspublic")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dbfs endpoints.
        """
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def dbs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom cbs endpoints.
        """
        return pulumi.get(self, "dbs")

    @property
    @pulumi.getter
    def dcdn(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dcdn endpoints.
        """
        return pulumi.get(self, "dcdn")

    @property
    @pulumi.getter
    def ddosbasic(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ddosbasic endpoints.
        """
        return pulumi.get(self, "ddosbasic")

    @property
    @pulumi.getter
    def ddosbgp(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DDOSBGP endpoints.
        """
        return pulumi.get(self, "ddosbgp")

    @property
    @pulumi.getter
    def ddoscoo(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DDOSCOO endpoints.
        """
        return pulumi.get(self, "ddoscoo")

    @property
    @pulumi.getter
    def dds(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MongoDB endpoints.
        """
        return pulumi.get(self, "dds")

    @property
    @pulumi.getter(name="devopsRdc")
    def devops_rdc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "devops_rdc")

    @property
    @pulumi.getter
    def devopsrdc(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom devopsrdc endpoints.
        """
        return pulumi.get(self, "devopsrdc")

    @property
    @pulumi.getter
    def dfs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom alidfs endpoints.
        """
        return pulumi.get(self, "dfs")

    @property
    @pulumi.getter
    def dg(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dg endpoints.
        """
        return pulumi.get(self, "dg")

    @property
    @pulumi.getter
    def dm(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dm endpoints.
        """
        return pulumi.get(self, "dm")

    @property
    @pulumi.getter(name="dmsEnterprise")
    def dms_enterprise(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dms_enterprise endpoints.
        """
        return pulumi.get(self, "dms_enterprise")

    @property
    @pulumi.getter
    def dmsenterprise(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dmsenterprise endpoints.
        """
        return pulumi.get(self, "dmsenterprise")

    @property
    @pulumi.getter
    def dns(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DNS endpoints.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def drds(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DRDS endpoints.
        """
        return pulumi.get(self, "drds")

    @property
    @pulumi.getter
    def dts(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dts endpoints.
        """
        return pulumi.get(self, "dts")

    @property
    @pulumi.getter
    def dysms(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dysms")

    @property
    @pulumi.getter
    def dysmsapi(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom dysmsapi endpoints.
        """
        return pulumi.get(self, "dysmsapi")

    @property
    @pulumi.getter
    def eais(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eais endpoints.
        """
        return pulumi.get(self, "eais")

    @property
    @pulumi.getter
    def ebs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ebs endpoints.
        """
        return pulumi.get(self, "ebs")

    @property
    @pulumi.getter
    def ecd(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gwsecd endpoints.
        """
        return pulumi.get(self, "ecd")

    @property
    @pulumi.getter
    def eci(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eci endpoints.
        """
        return pulumi.get(self, "eci")

    @property
    @pulumi.getter
    def ecs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ECS endpoints.
        """
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter
    def edas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edas endpoints.
        """
        return pulumi.get(self, "edas")

    @property
    @pulumi.getter
    def edasschedulerx(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edasschedulerx endpoints.
        """
        return pulumi.get(self, "edasschedulerx")

    @property
    @pulumi.getter(name="edsUser")
    def eds_user(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edsuser endpoints.
        """
        return pulumi.get(self, "eds_user")

    @property
    @pulumi.getter
    def edsuser(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edsuser endpoints.
        """
        return pulumi.get(self, "edsuser")

    @property
    @pulumi.getter
    def eflo(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eflo endpoints.
        """
        return pulumi.get(self, "eflo")

    @property
    @pulumi.getter(name="efloCnp")
    def eflo_cnp(self) -> Optional[builtins.str]:
        return pulumi.get(self, "eflo_cnp")

    @property
    @pulumi.getter(name="efloController")
    def eflo_controller(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom efloctrl endpoints.
        """
        return pulumi.get(self, "eflo_controller")

    @property
    @pulumi.getter
    def ehpc(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ehpc endpoints.
        """
        return pulumi.get(self, "ehpc")

    @property
    @pulumi.getter
    def ehs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ehs endpoints.
        """
        return pulumi.get(self, "ehs")

    @property
    @pulumi.getter
    def eipanycast(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eipanycast endpoints.
        """
        return pulumi.get(self, "eipanycast")

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Elasticsearch endpoints.
        """
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter
    def emr(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom EMR endpoints.
        """
        return pulumi.get(self, "emr")

    @property
    @pulumi.getter
    def ens(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ens endpoints.
        """
        return pulumi.get(self, "ens")

    @property
    @pulumi.getter
    def esa(self) -> Optional[builtins.str]:
        return pulumi.get(self, "esa")

    @property
    @pulumi.getter
    def ess(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Autoscaling endpoints.
        """
        return pulumi.get(self, "ess")

    @property
    @pulumi.getter
    def eventbridge(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom eventbridge_share endpoints.
        """
        return pulumi.get(self, "eventbridge")

    @property
    @pulumi.getter
    def fc(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Function Computing endpoints.
        """
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="fcOpen")
    def fc_open(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Function Computing endpoints.
        """
        return pulumi.get(self, "fc_open")

    @property
    @pulumi.getter
    def fnf(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom fnf endpoints.
        """
        return pulumi.get(self, "fnf")

    @property
    @pulumi.getter
    def ga(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ga endpoints.
        """
        return pulumi.get(self, "ga")

    @property
    @pulumi.getter
    def gaplus(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gaplus endpoints.
        """
        return pulumi.get(self, "gaplus")

    @property
    @pulumi.getter
    def gdb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gds endpoints.
        """
        return pulumi.get(self, "gdb")

    @property
    @pulumi.getter
    def gds(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gds endpoints.
        """
        return pulumi.get(self, "gds")

    @property
    @pulumi.getter
    def gpdb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom GPDB endpoints.
        """
        return pulumi.get(self, "gpdb")

    @property
    @pulumi.getter
    def gwlb(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gwlb")

    @property
    @pulumi.getter
    def gwsecd(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom gwsecd endpoints.
        """
        return pulumi.get(self, "gwsecd")

    @property
    @pulumi.getter
    def hbr(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hbr endpoints.
        """
        return pulumi.get(self, "hbr")

    @property
    @pulumi.getter(name="hcsSgw")
    def hcs_sgw(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hcs_sgw endpoints.
        """
        return pulumi.get(self, "hcs_sgw")

    @property
    @pulumi.getter
    def hitsdb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom hitsdb endpoints.
        """
        return pulumi.get(self, "hitsdb")

    @property
    @pulumi.getter
    def imm(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom imm endpoints.
        """
        return pulumi.get(self, "imm")

    @property
    @pulumi.getter
    def imp(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom imp endpoints.
        """
        return pulumi.get(self, "imp")

    @property
    @pulumi.getter
    def ims(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ims endpoints.
        """
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter
    def iot(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom iot endpoints.
        """
        return pulumi.get(self, "iot")

    @property
    @pulumi.getter
    def kms(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom KMS endpoints.
        """
        return pulumi.get(self, "kms")

    @property
    @pulumi.getter
    def kvstore(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom R-KVStore endpoints.
        """
        return pulumi.get(self, "kvstore")

    @property
    @pulumi.getter
    def location(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Location Service endpoints.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Log Service endpoints.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def market(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Market Place endpoints.
        """
        return pulumi.get(self, "market")

    @property
    @pulumi.getter
    def maxcompute(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MaxCompute endpoints.
        """
        return pulumi.get(self, "maxcompute")

    @property
    @pulumi.getter
    def mhub(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mhub endpoints.
        """
        return pulumi.get(self, "mhub")

    @property
    @pulumi.getter
    def mns(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MNS endpoints.
        """
        return pulumi.get(self, "mns")

    @property
    @pulumi.getter(name="mnsOpen")
    def mns_open(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom MNS endpoints.
        """
        return pulumi.get(self, "mns_open")

    @property
    @pulumi.getter
    def mscopensubscription(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mscopensubscription endpoints.
        """
        return pulumi.get(self, "mscopensubscription")

    @property
    @pulumi.getter
    def mse(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom mse endpoints.
        """
        return pulumi.get(self, "mse")

    @property
    @pulumi.getter
    def nas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom NAS endpoints.
        """
        return pulumi.get(self, "nas")

    @property
    @pulumi.getter
    def nlb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom nlb endpoints.
        """
        return pulumi.get(self, "nlb")

    @property
    @pulumi.getter
    def oceanbase(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oceanbase endpoints.
        """
        return pulumi.get(self, "oceanbase")

    @property
    @pulumi.getter
    def oceanbasepro(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oceanbase endpoints.
        """
        return pulumi.get(self, "oceanbasepro")

    @property
    @pulumi.getter
    def ons(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ONS endpoints.
        """
        return pulumi.get(self, "ons")

    @property
    @pulumi.getter
    def onsproxy(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom onsproxy endpoints.
        """
        return pulumi.get(self, "onsproxy")

    @property
    @pulumi.getter
    def oos(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom oos endpoints.
        """
        return pulumi.get(self, "oos")

    @property
    @pulumi.getter
    def opensearch(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom opensearch endpoints.
        """
        return pulumi.get(self, "opensearch")

    @property
    @pulumi.getter
    def oss(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom OSS endpoints.
        """
        return pulumi.get(self, "oss")

    @property
    @pulumi.getter
    def ots(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Table Store endpoints.
        """
        return pulumi.get(self, "ots")

    @property
    @pulumi.getter
    def polardb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom PolarDB endpoints.
        """
        return pulumi.get(self, "polardb")

    @property
    @pulumi.getter
    def polardbx(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom DRDS endpoints.
        """
        return pulumi.get(self, "polardbx")

    @property
    @pulumi.getter
    def privatelink(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom privatelink endpoints.
        """
        return pulumi.get(self, "privatelink")

    @property
    @pulumi.getter
    def pvtz(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom Private Zone endpoints.
        """
        return pulumi.get(self, "pvtz")

    @property
    @pulumi.getter
    def quickbi(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quickbi endpoints.
        """
        return pulumi.get(self, "quickbi")

    @property
    @pulumi.getter(name="quickbiPublic")
    def quickbi_public(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quickbi endpoints.
        """
        return pulumi.get(self, "quickbi_public")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom quotas endpoints.
        """
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="rKvstore")
    def r_kvstore(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom r_kvstore endpoints.
        """
        return pulumi.get(self, "r_kvstore")

    @property
    @pulumi.getter
    def ram(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom RAM endpoints.
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def rds(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom RDS endpoints.
        """
        return pulumi.get(self, "rds")

    @property
    @pulumi.getter
    def redisa(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom redisa endpoints.
        """
        return pulumi.get(self, "redisa")

    @property
    @pulumi.getter
    def resourcemanager(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom resourcemanager endpoints.
        """
        return pulumi.get(self, "resourcemanager")

    @property
    @pulumi.getter
    def resourcesharing(self) -> Optional[builtins.str]:
        return pulumi.get(self, "resourcesharing")

    @property
    @pulumi.getter
    def ressharing(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom resourcesharing endpoints.
        """
        return pulumi.get(self, "ressharing")

    @property
    @pulumi.getter
    def rocketmq(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rocketmq")

    @property
    @pulumi.getter
    def ros(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom ros endpoints.
        """
        return pulumi.get(self, "ros")

    @property
    @pulumi.getter
    def sae(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom serverless endpoints.
        """
        return pulumi.get(self, "sae")

    @property
    @pulumi.getter
    def sas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sas endpoints.
        """
        return pulumi.get(self, "sas")

    @property
    @pulumi.getter
    def scdn(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom scdn endpoints.
        """
        return pulumi.get(self, "scdn")

    @property
    @pulumi.getter
    def schedulerx2(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom edasschedulerx endpoints.
        """
        return pulumi.get(self, "schedulerx2")

    @property
    @pulumi.getter
    def sddp(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sddp endpoints.
        """
        return pulumi.get(self, "sddp")

    @property
    @pulumi.getter
    def selectdb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom selectdb endpoints.
        """
        return pulumi.get(self, "selectdb")

    @property
    @pulumi.getter
    def serverless(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom serverless endpoints.
        """
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter
    def servicecatalog(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom srvcatalog endpoints.
        """
        return pulumi.get(self, "servicecatalog")

    @property
    @pulumi.getter
    def servicemesh(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom servicemesh endpoints.
        """
        return pulumi.get(self, "servicemesh")

    @property
    @pulumi.getter
    def sgw(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom sgw endpoints.
        """
        return pulumi.get(self, "sgw")

    @property
    @pulumi.getter
    def slb(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom SLB endpoints.
        """
        return pulumi.get(self, "slb")

    @property
    @pulumi.getter
    def smartag(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom smartag endpoints.
        """
        return pulumi.get(self, "smartag")

    @property
    @pulumi.getter
    def srvcatalog(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom srvcatalog endpoints.
        """
        return pulumi.get(self, "srvcatalog")

    @property
    @pulumi.getter
    def sts(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom STS endpoints.
        """
        return pulumi.get(self, "sts")

    @property
    @pulumi.getter
    def swas(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom swas endpoints.
        """
        return pulumi.get(self, "swas")

    @property
    @pulumi.getter(name="swasOpen")
    def swas_open(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom swas endpoints.
        """
        return pulumi.get(self, "swas_open")

    @property
    @pulumi.getter
    def tag(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom tag endpoints.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vod(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vod endpoints.
        """
        return pulumi.get(self, "vod")

    @property
    @pulumi.getter
    def vpc(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom VPC and VPN endpoints.
        """
        return pulumi.get(self, "vpc")

    @property
    @pulumi.getter
    def vpcipam(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vpcipam")

    @property
    @pulumi.getter
    def vpcpeer(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vpcpeer endpoints.
        """
        return pulumi.get(self, "vpcpeer")

    @property
    @pulumi.getter
    def vs(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom vs endpoints.
        """
        return pulumi.get(self, "vs")

    @property
    @pulumi.getter
    def waf(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom waf endpoints.
        """
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter(name="wafOpenapi")
    def waf_openapi(self) -> Optional[builtins.str]:
        """
        Use this to override the default endpoint URL constructed from the `region`. It's typically used to connect to custom waf_openapi endpoints.
        """
        return pulumi.get(self, "waf_openapi")


@pulumi.output_type
class SignVersion(dict):
    def __init__(__self__, *,
                 oss: Optional[builtins.str] = None,
                 sls: Optional[builtins.str] = None):
        if oss is not None:
            pulumi.set(__self__, "oss", oss)
        if sls is not None:
            pulumi.set(__self__, "sls", sls)

    @property
    @pulumi.getter
    def oss(self) -> Optional[builtins.str]:
        return pulumi.get(self, "oss")

    @property
    @pulumi.getter
    def sls(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sls")


