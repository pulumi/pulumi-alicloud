# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AssumeRole',
    'Endpoints',
]

@pulumi.output_type
class AssumeRole(dict):
    def __init__(__self__, *,
                 role_arn: str,
                 external_id: Optional[str] = None,
                 policy: Optional[str] = None,
                 session_expiration: Optional[int] = None,
                 session_name: Optional[str] = None):
        AssumeRole._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            external_id=external_id,
            policy=policy,
            session_expiration=session_expiration,
            session_name=session_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: str,
             external_id: Optional[str] = None,
             policy: Optional[str] = None,
             session_expiration: Optional[int] = None,
             session_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'sessionExpiration' in kwargs:
            session_expiration = kwargs['sessionExpiration']
        if 'sessionName' in kwargs:
            session_name = kwargs['sessionName']

        _setter("role_arn", role_arn)
        if external_id is not None:
            _setter("external_id", external_id)
        if policy is not None:
            _setter("policy", policy)
        if session_expiration is not None:
            _setter("session_expiration", session_expiration)
        if session_name is not None:
            _setter("session_name", session_name)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="sessionExpiration")
    def session_expiration(self) -> Optional[int]:
        return pulumi.get(self, "session_expiration")

    @property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[str]:
        return pulumi.get(self, "session_name")


@pulumi.output_type
class Endpoints(dict):
    def __init__(__self__, *,
                 acr: Optional[str] = None,
                 actiontrail: Optional[str] = None,
                 adb: Optional[str] = None,
                 alb: Optional[str] = None,
                 alidfs: Optional[str] = None,
                 alidns: Optional[str] = None,
                 alikafka: Optional[str] = None,
                 apigateway: Optional[str] = None,
                 arms: Optional[str] = None,
                 bastionhost: Optional[str] = None,
                 beebot: Optional[str] = None,
                 bpstudio: Optional[str] = None,
                 brain_industrial: Optional[str] = None,
                 bssopenapi: Optional[str] = None,
                 cas: Optional[str] = None,
                 cassandra: Optional[str] = None,
                 cbn: Optional[str] = None,
                 cbs: Optional[str] = None,
                 cddc: Optional[str] = None,
                 cdn: Optional[str] = None,
                 cds: Optional[str] = None,
                 clickhouse: Optional[str] = None,
                 cloudauth: Optional[str] = None,
                 cloudfirewall: Optional[str] = None,
                 cloudfw: Optional[str] = None,
                 cloudphone: Optional[str] = None,
                 cloudsso: Optional[str] = None,
                 cms: Optional[str] = None,
                 computenest: Optional[str] = None,
                 config: Optional[str] = None,
                 cr: Optional[str] = None,
                 cs: Optional[str] = None,
                 das: Optional[str] = None,
                 datahub: Optional[str] = None,
                 dataworkspublic: Optional[str] = None,
                 dbfs: Optional[str] = None,
                 dcdn: Optional[str] = None,
                 ddosbasic: Optional[str] = None,
                 ddosbgp: Optional[str] = None,
                 ddoscoo: Optional[str] = None,
                 dds: Optional[str] = None,
                 devopsrdc: Optional[str] = None,
                 dg: Optional[str] = None,
                 dm: Optional[str] = None,
                 dms_enterprise: Optional[str] = None,
                 dmsenterprise: Optional[str] = None,
                 dns: Optional[str] = None,
                 drds: Optional[str] = None,
                 dts: Optional[str] = None,
                 dysms: Optional[str] = None,
                 eais: Optional[str] = None,
                 ebs: Optional[str] = None,
                 eci: Optional[str] = None,
                 ecs: Optional[str] = None,
                 edas: Optional[str] = None,
                 edasschedulerx: Optional[str] = None,
                 edsuser: Optional[str] = None,
                 eflo: Optional[str] = None,
                 ehpc: Optional[str] = None,
                 ehs: Optional[str] = None,
                 eipanycast: Optional[str] = None,
                 elasticsearch: Optional[str] = None,
                 emr: Optional[str] = None,
                 ens: Optional[str] = None,
                 ess: Optional[str] = None,
                 eventbridge: Optional[str] = None,
                 fc: Optional[str] = None,
                 fnf: Optional[str] = None,
                 ga: Optional[str] = None,
                 gaplus: Optional[str] = None,
                 gds: Optional[str] = None,
                 gpdb: Optional[str] = None,
                 gwsecd: Optional[str] = None,
                 hbr: Optional[str] = None,
                 hcs_sgw: Optional[str] = None,
                 hitsdb: Optional[str] = None,
                 imm: Optional[str] = None,
                 imp: Optional[str] = None,
                 ims: Optional[str] = None,
                 iot: Optional[str] = None,
                 kms: Optional[str] = None,
                 kvstore: Optional[str] = None,
                 location: Optional[str] = None,
                 log: Optional[str] = None,
                 market: Optional[str] = None,
                 maxcompute: Optional[str] = None,
                 mhub: Optional[str] = None,
                 mns: Optional[str] = None,
                 mscopensubscription: Optional[str] = None,
                 mse: Optional[str] = None,
                 nas: Optional[str] = None,
                 nlb: Optional[str] = None,
                 oceanbase: Optional[str] = None,
                 ons: Optional[str] = None,
                 onsproxy: Optional[str] = None,
                 oos: Optional[str] = None,
                 opensearch: Optional[str] = None,
                 oss: Optional[str] = None,
                 ots: Optional[str] = None,
                 polardb: Optional[str] = None,
                 privatelink: Optional[str] = None,
                 pvtz: Optional[str] = None,
                 quickbi: Optional[str] = None,
                 quotas: Optional[str] = None,
                 r_kvstore: Optional[str] = None,
                 ram: Optional[str] = None,
                 rds: Optional[str] = None,
                 redisa: Optional[str] = None,
                 resourcemanager: Optional[str] = None,
                 resourcesharing: Optional[str] = None,
                 ros: Optional[str] = None,
                 sas: Optional[str] = None,
                 scdn: Optional[str] = None,
                 sddp: Optional[str] = None,
                 serverless: Optional[str] = None,
                 servicemesh: Optional[str] = None,
                 sgw: Optional[str] = None,
                 slb: Optional[str] = None,
                 smartag: Optional[str] = None,
                 srvcatalog: Optional[str] = None,
                 sts: Optional[str] = None,
                 swas: Optional[str] = None,
                 tag: Optional[str] = None,
                 vod: Optional[str] = None,
                 vpc: Optional[str] = None,
                 vpcpeer: Optional[str] = None,
                 vs: Optional[str] = None,
                 waf: Optional[str] = None,
                 waf_openapi: Optional[str] = None):
        Endpoints._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acr=acr,
            actiontrail=actiontrail,
            adb=adb,
            alb=alb,
            alidfs=alidfs,
            alidns=alidns,
            alikafka=alikafka,
            apigateway=apigateway,
            arms=arms,
            bastionhost=bastionhost,
            beebot=beebot,
            bpstudio=bpstudio,
            brain_industrial=brain_industrial,
            bssopenapi=bssopenapi,
            cas=cas,
            cassandra=cassandra,
            cbn=cbn,
            cbs=cbs,
            cddc=cddc,
            cdn=cdn,
            cds=cds,
            clickhouse=clickhouse,
            cloudauth=cloudauth,
            cloudfirewall=cloudfirewall,
            cloudfw=cloudfw,
            cloudphone=cloudphone,
            cloudsso=cloudsso,
            cms=cms,
            computenest=computenest,
            config=config,
            cr=cr,
            cs=cs,
            das=das,
            datahub=datahub,
            dataworkspublic=dataworkspublic,
            dbfs=dbfs,
            dcdn=dcdn,
            ddosbasic=ddosbasic,
            ddosbgp=ddosbgp,
            ddoscoo=ddoscoo,
            dds=dds,
            devopsrdc=devopsrdc,
            dg=dg,
            dm=dm,
            dms_enterprise=dms_enterprise,
            dmsenterprise=dmsenterprise,
            dns=dns,
            drds=drds,
            dts=dts,
            dysms=dysms,
            eais=eais,
            ebs=ebs,
            eci=eci,
            ecs=ecs,
            edas=edas,
            edasschedulerx=edasschedulerx,
            edsuser=edsuser,
            eflo=eflo,
            ehpc=ehpc,
            ehs=ehs,
            eipanycast=eipanycast,
            elasticsearch=elasticsearch,
            emr=emr,
            ens=ens,
            ess=ess,
            eventbridge=eventbridge,
            fc=fc,
            fnf=fnf,
            ga=ga,
            gaplus=gaplus,
            gds=gds,
            gpdb=gpdb,
            gwsecd=gwsecd,
            hbr=hbr,
            hcs_sgw=hcs_sgw,
            hitsdb=hitsdb,
            imm=imm,
            imp=imp,
            ims=ims,
            iot=iot,
            kms=kms,
            kvstore=kvstore,
            location=location,
            log=log,
            market=market,
            maxcompute=maxcompute,
            mhub=mhub,
            mns=mns,
            mscopensubscription=mscopensubscription,
            mse=mse,
            nas=nas,
            nlb=nlb,
            oceanbase=oceanbase,
            ons=ons,
            onsproxy=onsproxy,
            oos=oos,
            opensearch=opensearch,
            oss=oss,
            ots=ots,
            polardb=polardb,
            privatelink=privatelink,
            pvtz=pvtz,
            quickbi=quickbi,
            quotas=quotas,
            r_kvstore=r_kvstore,
            ram=ram,
            rds=rds,
            redisa=redisa,
            resourcemanager=resourcemanager,
            resourcesharing=resourcesharing,
            ros=ros,
            sas=sas,
            scdn=scdn,
            sddp=sddp,
            serverless=serverless,
            servicemesh=servicemesh,
            sgw=sgw,
            slb=slb,
            smartag=smartag,
            srvcatalog=srvcatalog,
            sts=sts,
            swas=swas,
            tag=tag,
            vod=vod,
            vpc=vpc,
            vpcpeer=vpcpeer,
            vs=vs,
            waf=waf,
            waf_openapi=waf_openapi,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acr: Optional[str] = None,
             actiontrail: Optional[str] = None,
             adb: Optional[str] = None,
             alb: Optional[str] = None,
             alidfs: Optional[str] = None,
             alidns: Optional[str] = None,
             alikafka: Optional[str] = None,
             apigateway: Optional[str] = None,
             arms: Optional[str] = None,
             bastionhost: Optional[str] = None,
             beebot: Optional[str] = None,
             bpstudio: Optional[str] = None,
             brain_industrial: Optional[str] = None,
             bssopenapi: Optional[str] = None,
             cas: Optional[str] = None,
             cassandra: Optional[str] = None,
             cbn: Optional[str] = None,
             cbs: Optional[str] = None,
             cddc: Optional[str] = None,
             cdn: Optional[str] = None,
             cds: Optional[str] = None,
             clickhouse: Optional[str] = None,
             cloudauth: Optional[str] = None,
             cloudfirewall: Optional[str] = None,
             cloudfw: Optional[str] = None,
             cloudphone: Optional[str] = None,
             cloudsso: Optional[str] = None,
             cms: Optional[str] = None,
             computenest: Optional[str] = None,
             config: Optional[str] = None,
             cr: Optional[str] = None,
             cs: Optional[str] = None,
             das: Optional[str] = None,
             datahub: Optional[str] = None,
             dataworkspublic: Optional[str] = None,
             dbfs: Optional[str] = None,
             dcdn: Optional[str] = None,
             ddosbasic: Optional[str] = None,
             ddosbgp: Optional[str] = None,
             ddoscoo: Optional[str] = None,
             dds: Optional[str] = None,
             devopsrdc: Optional[str] = None,
             dg: Optional[str] = None,
             dm: Optional[str] = None,
             dms_enterprise: Optional[str] = None,
             dmsenterprise: Optional[str] = None,
             dns: Optional[str] = None,
             drds: Optional[str] = None,
             dts: Optional[str] = None,
             dysms: Optional[str] = None,
             eais: Optional[str] = None,
             ebs: Optional[str] = None,
             eci: Optional[str] = None,
             ecs: Optional[str] = None,
             edas: Optional[str] = None,
             edasschedulerx: Optional[str] = None,
             edsuser: Optional[str] = None,
             eflo: Optional[str] = None,
             ehpc: Optional[str] = None,
             ehs: Optional[str] = None,
             eipanycast: Optional[str] = None,
             elasticsearch: Optional[str] = None,
             emr: Optional[str] = None,
             ens: Optional[str] = None,
             ess: Optional[str] = None,
             eventbridge: Optional[str] = None,
             fc: Optional[str] = None,
             fnf: Optional[str] = None,
             ga: Optional[str] = None,
             gaplus: Optional[str] = None,
             gds: Optional[str] = None,
             gpdb: Optional[str] = None,
             gwsecd: Optional[str] = None,
             hbr: Optional[str] = None,
             hcs_sgw: Optional[str] = None,
             hitsdb: Optional[str] = None,
             imm: Optional[str] = None,
             imp: Optional[str] = None,
             ims: Optional[str] = None,
             iot: Optional[str] = None,
             kms: Optional[str] = None,
             kvstore: Optional[str] = None,
             location: Optional[str] = None,
             log: Optional[str] = None,
             market: Optional[str] = None,
             maxcompute: Optional[str] = None,
             mhub: Optional[str] = None,
             mns: Optional[str] = None,
             mscopensubscription: Optional[str] = None,
             mse: Optional[str] = None,
             nas: Optional[str] = None,
             nlb: Optional[str] = None,
             oceanbase: Optional[str] = None,
             ons: Optional[str] = None,
             onsproxy: Optional[str] = None,
             oos: Optional[str] = None,
             opensearch: Optional[str] = None,
             oss: Optional[str] = None,
             ots: Optional[str] = None,
             polardb: Optional[str] = None,
             privatelink: Optional[str] = None,
             pvtz: Optional[str] = None,
             quickbi: Optional[str] = None,
             quotas: Optional[str] = None,
             r_kvstore: Optional[str] = None,
             ram: Optional[str] = None,
             rds: Optional[str] = None,
             redisa: Optional[str] = None,
             resourcemanager: Optional[str] = None,
             resourcesharing: Optional[str] = None,
             ros: Optional[str] = None,
             sas: Optional[str] = None,
             scdn: Optional[str] = None,
             sddp: Optional[str] = None,
             serverless: Optional[str] = None,
             servicemesh: Optional[str] = None,
             sgw: Optional[str] = None,
             slb: Optional[str] = None,
             smartag: Optional[str] = None,
             srvcatalog: Optional[str] = None,
             sts: Optional[str] = None,
             swas: Optional[str] = None,
             tag: Optional[str] = None,
             vod: Optional[str] = None,
             vpc: Optional[str] = None,
             vpcpeer: Optional[str] = None,
             vs: Optional[str] = None,
             waf: Optional[str] = None,
             waf_openapi: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'brainIndustrial' in kwargs:
            brain_industrial = kwargs['brainIndustrial']
        if 'dmsEnterprise' in kwargs:
            dms_enterprise = kwargs['dmsEnterprise']
        if 'hcsSgw' in kwargs:
            hcs_sgw = kwargs['hcsSgw']
        if 'rKvstore' in kwargs:
            r_kvstore = kwargs['rKvstore']
        if 'wafOpenapi' in kwargs:
            waf_openapi = kwargs['wafOpenapi']

        if acr is not None:
            _setter("acr", acr)
        if actiontrail is not None:
            _setter("actiontrail", actiontrail)
        if adb is not None:
            _setter("adb", adb)
        if alb is not None:
            _setter("alb", alb)
        if alidfs is not None:
            _setter("alidfs", alidfs)
        if alidns is not None:
            _setter("alidns", alidns)
        if alikafka is not None:
            _setter("alikafka", alikafka)
        if apigateway is not None:
            _setter("apigateway", apigateway)
        if arms is not None:
            _setter("arms", arms)
        if bastionhost is not None:
            _setter("bastionhost", bastionhost)
        if beebot is not None:
            _setter("beebot", beebot)
        if bpstudio is not None:
            _setter("bpstudio", bpstudio)
        if brain_industrial is not None:
            _setter("brain_industrial", brain_industrial)
        if bssopenapi is not None:
            _setter("bssopenapi", bssopenapi)
        if cas is not None:
            _setter("cas", cas)
        if cassandra is not None:
            _setter("cassandra", cassandra)
        if cbn is not None:
            _setter("cbn", cbn)
        if cbs is not None:
            _setter("cbs", cbs)
        if cddc is not None:
            _setter("cddc", cddc)
        if cdn is not None:
            _setter("cdn", cdn)
        if cds is not None:
            _setter("cds", cds)
        if clickhouse is not None:
            _setter("clickhouse", clickhouse)
        if cloudauth is not None:
            _setter("cloudauth", cloudauth)
        if cloudfirewall is not None:
            _setter("cloudfirewall", cloudfirewall)
        if cloudfw is not None:
            _setter("cloudfw", cloudfw)
        if cloudphone is not None:
            _setter("cloudphone", cloudphone)
        if cloudsso is not None:
            _setter("cloudsso", cloudsso)
        if cms is not None:
            _setter("cms", cms)
        if computenest is not None:
            _setter("computenest", computenest)
        if config is not None:
            _setter("config", config)
        if cr is not None:
            _setter("cr", cr)
        if cs is not None:
            _setter("cs", cs)
        if das is not None:
            _setter("das", das)
        if datahub is not None:
            _setter("datahub", datahub)
        if dataworkspublic is not None:
            _setter("dataworkspublic", dataworkspublic)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if dcdn is not None:
            _setter("dcdn", dcdn)
        if ddosbasic is not None:
            _setter("ddosbasic", ddosbasic)
        if ddosbgp is not None:
            _setter("ddosbgp", ddosbgp)
        if ddoscoo is not None:
            _setter("ddoscoo", ddoscoo)
        if dds is not None:
            _setter("dds", dds)
        if devopsrdc is not None:
            _setter("devopsrdc", devopsrdc)
        if dg is not None:
            _setter("dg", dg)
        if dm is not None:
            _setter("dm", dm)
        if dms_enterprise is not None:
            _setter("dms_enterprise", dms_enterprise)
        if dmsenterprise is not None:
            _setter("dmsenterprise", dmsenterprise)
        if dns is not None:
            _setter("dns", dns)
        if drds is not None:
            _setter("drds", drds)
        if dts is not None:
            _setter("dts", dts)
        if dysms is not None:
            _setter("dysms", dysms)
        if eais is not None:
            _setter("eais", eais)
        if ebs is not None:
            _setter("ebs", ebs)
        if eci is not None:
            _setter("eci", eci)
        if ecs is not None:
            _setter("ecs", ecs)
        if edas is not None:
            _setter("edas", edas)
        if edasschedulerx is not None:
            _setter("edasschedulerx", edasschedulerx)
        if edsuser is not None:
            _setter("edsuser", edsuser)
        if eflo is not None:
            _setter("eflo", eflo)
        if ehpc is not None:
            _setter("ehpc", ehpc)
        if ehs is not None:
            _setter("ehs", ehs)
        if eipanycast is not None:
            _setter("eipanycast", eipanycast)
        if elasticsearch is not None:
            _setter("elasticsearch", elasticsearch)
        if emr is not None:
            _setter("emr", emr)
        if ens is not None:
            _setter("ens", ens)
        if ess is not None:
            _setter("ess", ess)
        if eventbridge is not None:
            _setter("eventbridge", eventbridge)
        if fc is not None:
            _setter("fc", fc)
        if fnf is not None:
            _setter("fnf", fnf)
        if ga is not None:
            _setter("ga", ga)
        if gaplus is not None:
            _setter("gaplus", gaplus)
        if gds is not None:
            _setter("gds", gds)
        if gpdb is not None:
            _setter("gpdb", gpdb)
        if gwsecd is not None:
            _setter("gwsecd", gwsecd)
        if hbr is not None:
            _setter("hbr", hbr)
        if hcs_sgw is not None:
            _setter("hcs_sgw", hcs_sgw)
        if hitsdb is not None:
            _setter("hitsdb", hitsdb)
        if imm is not None:
            _setter("imm", imm)
        if imp is not None:
            _setter("imp", imp)
        if ims is not None:
            _setter("ims", ims)
        if iot is not None:
            _setter("iot", iot)
        if kms is not None:
            _setter("kms", kms)
        if kvstore is not None:
            _setter("kvstore", kvstore)
        if location is not None:
            _setter("location", location)
        if log is not None:
            _setter("log", log)
        if market is not None:
            _setter("market", market)
        if maxcompute is not None:
            _setter("maxcompute", maxcompute)
        if mhub is not None:
            _setter("mhub", mhub)
        if mns is not None:
            _setter("mns", mns)
        if mscopensubscription is not None:
            _setter("mscopensubscription", mscopensubscription)
        if mse is not None:
            _setter("mse", mse)
        if nas is not None:
            _setter("nas", nas)
        if nlb is not None:
            _setter("nlb", nlb)
        if oceanbase is not None:
            _setter("oceanbase", oceanbase)
        if ons is not None:
            _setter("ons", ons)
        if onsproxy is not None:
            _setter("onsproxy", onsproxy)
        if oos is not None:
            _setter("oos", oos)
        if opensearch is not None:
            _setter("opensearch", opensearch)
        if oss is not None:
            _setter("oss", oss)
        if ots is not None:
            _setter("ots", ots)
        if polardb is not None:
            _setter("polardb", polardb)
        if privatelink is not None:
            _setter("privatelink", privatelink)
        if pvtz is not None:
            _setter("pvtz", pvtz)
        if quickbi is not None:
            _setter("quickbi", quickbi)
        if quotas is not None:
            _setter("quotas", quotas)
        if r_kvstore is not None:
            _setter("r_kvstore", r_kvstore)
        if ram is not None:
            _setter("ram", ram)
        if rds is not None:
            _setter("rds", rds)
        if redisa is not None:
            _setter("redisa", redisa)
        if resourcemanager is not None:
            _setter("resourcemanager", resourcemanager)
        if resourcesharing is not None:
            _setter("resourcesharing", resourcesharing)
        if ros is not None:
            _setter("ros", ros)
        if sas is not None:
            _setter("sas", sas)
        if scdn is not None:
            _setter("scdn", scdn)
        if sddp is not None:
            _setter("sddp", sddp)
        if serverless is not None:
            _setter("serverless", serverless)
        if servicemesh is not None:
            _setter("servicemesh", servicemesh)
        if sgw is not None:
            _setter("sgw", sgw)
        if slb is not None:
            _setter("slb", slb)
        if smartag is not None:
            _setter("smartag", smartag)
        if srvcatalog is not None:
            _setter("srvcatalog", srvcatalog)
        if sts is not None:
            _setter("sts", sts)
        if swas is not None:
            _setter("swas", swas)
        if tag is not None:
            _setter("tag", tag)
        if vod is not None:
            _setter("vod", vod)
        if vpc is not None:
            _setter("vpc", vpc)
        if vpcpeer is not None:
            _setter("vpcpeer", vpcpeer)
        if vs is not None:
            _setter("vs", vs)
        if waf is not None:
            _setter("waf", waf)
        if waf_openapi is not None:
            _setter("waf_openapi", waf_openapi)

    @property
    @pulumi.getter
    def acr(self) -> Optional[str]:
        return pulumi.get(self, "acr")

    @property
    @pulumi.getter
    def actiontrail(self) -> Optional[str]:
        return pulumi.get(self, "actiontrail")

    @property
    @pulumi.getter
    def adb(self) -> Optional[str]:
        return pulumi.get(self, "adb")

    @property
    @pulumi.getter
    def alb(self) -> Optional[str]:
        return pulumi.get(self, "alb")

    @property
    @pulumi.getter
    def alidfs(self) -> Optional[str]:
        return pulumi.get(self, "alidfs")

    @property
    @pulumi.getter
    def alidns(self) -> Optional[str]:
        return pulumi.get(self, "alidns")

    @property
    @pulumi.getter
    def alikafka(self) -> Optional[str]:
        return pulumi.get(self, "alikafka")

    @property
    @pulumi.getter
    def apigateway(self) -> Optional[str]:
        return pulumi.get(self, "apigateway")

    @property
    @pulumi.getter
    def arms(self) -> Optional[str]:
        return pulumi.get(self, "arms")

    @property
    @pulumi.getter
    def bastionhost(self) -> Optional[str]:
        return pulumi.get(self, "bastionhost")

    @property
    @pulumi.getter
    def beebot(self) -> Optional[str]:
        return pulumi.get(self, "beebot")

    @property
    @pulumi.getter
    def bpstudio(self) -> Optional[str]:
        return pulumi.get(self, "bpstudio")

    @property
    @pulumi.getter(name="brainIndustrial")
    def brain_industrial(self) -> Optional[str]:
        return pulumi.get(self, "brain_industrial")

    @property
    @pulumi.getter
    def bssopenapi(self) -> Optional[str]:
        return pulumi.get(self, "bssopenapi")

    @property
    @pulumi.getter
    def cas(self) -> Optional[str]:
        return pulumi.get(self, "cas")

    @property
    @pulumi.getter
    def cassandra(self) -> Optional[str]:
        return pulumi.get(self, "cassandra")

    @property
    @pulumi.getter
    def cbn(self) -> Optional[str]:
        return pulumi.get(self, "cbn")

    @property
    @pulumi.getter
    def cbs(self) -> Optional[str]:
        return pulumi.get(self, "cbs")

    @property
    @pulumi.getter
    def cddc(self) -> Optional[str]:
        return pulumi.get(self, "cddc")

    @property
    @pulumi.getter
    def cdn(self) -> Optional[str]:
        return pulumi.get(self, "cdn")

    @property
    @pulumi.getter
    def cds(self) -> Optional[str]:
        return pulumi.get(self, "cds")

    @property
    @pulumi.getter
    def clickhouse(self) -> Optional[str]:
        return pulumi.get(self, "clickhouse")

    @property
    @pulumi.getter
    def cloudauth(self) -> Optional[str]:
        return pulumi.get(self, "cloudauth")

    @property
    @pulumi.getter
    def cloudfirewall(self) -> Optional[str]:
        return pulumi.get(self, "cloudfirewall")

    @property
    @pulumi.getter
    def cloudfw(self) -> Optional[str]:
        return pulumi.get(self, "cloudfw")

    @property
    @pulumi.getter
    def cloudphone(self) -> Optional[str]:
        return pulumi.get(self, "cloudphone")

    @property
    @pulumi.getter
    def cloudsso(self) -> Optional[str]:
        return pulumi.get(self, "cloudsso")

    @property
    @pulumi.getter
    def cms(self) -> Optional[str]:
        return pulumi.get(self, "cms")

    @property
    @pulumi.getter
    def computenest(self) -> Optional[str]:
        return pulumi.get(self, "computenest")

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def cr(self) -> Optional[str]:
        return pulumi.get(self, "cr")

    @property
    @pulumi.getter
    def cs(self) -> Optional[str]:
        return pulumi.get(self, "cs")

    @property
    @pulumi.getter
    def das(self) -> Optional[str]:
        return pulumi.get(self, "das")

    @property
    @pulumi.getter
    def datahub(self) -> Optional[str]:
        return pulumi.get(self, "datahub")

    @property
    @pulumi.getter
    def dataworkspublic(self) -> Optional[str]:
        return pulumi.get(self, "dataworkspublic")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional[str]:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def dcdn(self) -> Optional[str]:
        return pulumi.get(self, "dcdn")

    @property
    @pulumi.getter
    def ddosbasic(self) -> Optional[str]:
        return pulumi.get(self, "ddosbasic")

    @property
    @pulumi.getter
    def ddosbgp(self) -> Optional[str]:
        return pulumi.get(self, "ddosbgp")

    @property
    @pulumi.getter
    def ddoscoo(self) -> Optional[str]:
        return pulumi.get(self, "ddoscoo")

    @property
    @pulumi.getter
    def dds(self) -> Optional[str]:
        return pulumi.get(self, "dds")

    @property
    @pulumi.getter
    def devopsrdc(self) -> Optional[str]:
        return pulumi.get(self, "devopsrdc")

    @property
    @pulumi.getter
    def dg(self) -> Optional[str]:
        return pulumi.get(self, "dg")

    @property
    @pulumi.getter
    def dm(self) -> Optional[str]:
        return pulumi.get(self, "dm")

    @property
    @pulumi.getter(name="dmsEnterprise")
    def dms_enterprise(self) -> Optional[str]:
        return pulumi.get(self, "dms_enterprise")

    @property
    @pulumi.getter
    def dmsenterprise(self) -> Optional[str]:
        return pulumi.get(self, "dmsenterprise")

    @property
    @pulumi.getter
    def dns(self) -> Optional[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def drds(self) -> Optional[str]:
        return pulumi.get(self, "drds")

    @property
    @pulumi.getter
    def dts(self) -> Optional[str]:
        return pulumi.get(self, "dts")

    @property
    @pulumi.getter
    def dysms(self) -> Optional[str]:
        return pulumi.get(self, "dysms")

    @property
    @pulumi.getter
    def eais(self) -> Optional[str]:
        return pulumi.get(self, "eais")

    @property
    @pulumi.getter
    def ebs(self) -> Optional[str]:
        return pulumi.get(self, "ebs")

    @property
    @pulumi.getter
    def eci(self) -> Optional[str]:
        return pulumi.get(self, "eci")

    @property
    @pulumi.getter
    def ecs(self) -> Optional[str]:
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter
    def edas(self) -> Optional[str]:
        return pulumi.get(self, "edas")

    @property
    @pulumi.getter
    def edasschedulerx(self) -> Optional[str]:
        return pulumi.get(self, "edasschedulerx")

    @property
    @pulumi.getter
    def edsuser(self) -> Optional[str]:
        return pulumi.get(self, "edsuser")

    @property
    @pulumi.getter
    def eflo(self) -> Optional[str]:
        return pulumi.get(self, "eflo")

    @property
    @pulumi.getter
    def ehpc(self) -> Optional[str]:
        return pulumi.get(self, "ehpc")

    @property
    @pulumi.getter
    def ehs(self) -> Optional[str]:
        return pulumi.get(self, "ehs")

    @property
    @pulumi.getter
    def eipanycast(self) -> Optional[str]:
        return pulumi.get(self, "eipanycast")

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter
    def emr(self) -> Optional[str]:
        return pulumi.get(self, "emr")

    @property
    @pulumi.getter
    def ens(self) -> Optional[str]:
        return pulumi.get(self, "ens")

    @property
    @pulumi.getter
    def ess(self) -> Optional[str]:
        return pulumi.get(self, "ess")

    @property
    @pulumi.getter
    def eventbridge(self) -> Optional[str]:
        return pulumi.get(self, "eventbridge")

    @property
    @pulumi.getter
    def fc(self) -> Optional[str]:
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter
    def fnf(self) -> Optional[str]:
        return pulumi.get(self, "fnf")

    @property
    @pulumi.getter
    def ga(self) -> Optional[str]:
        return pulumi.get(self, "ga")

    @property
    @pulumi.getter
    def gaplus(self) -> Optional[str]:
        return pulumi.get(self, "gaplus")

    @property
    @pulumi.getter
    def gds(self) -> Optional[str]:
        return pulumi.get(self, "gds")

    @property
    @pulumi.getter
    def gpdb(self) -> Optional[str]:
        return pulumi.get(self, "gpdb")

    @property
    @pulumi.getter
    def gwsecd(self) -> Optional[str]:
        return pulumi.get(self, "gwsecd")

    @property
    @pulumi.getter
    def hbr(self) -> Optional[str]:
        return pulumi.get(self, "hbr")

    @property
    @pulumi.getter(name="hcsSgw")
    def hcs_sgw(self) -> Optional[str]:
        return pulumi.get(self, "hcs_sgw")

    @property
    @pulumi.getter
    def hitsdb(self) -> Optional[str]:
        return pulumi.get(self, "hitsdb")

    @property
    @pulumi.getter
    def imm(self) -> Optional[str]:
        return pulumi.get(self, "imm")

    @property
    @pulumi.getter
    def imp(self) -> Optional[str]:
        return pulumi.get(self, "imp")

    @property
    @pulumi.getter
    def ims(self) -> Optional[str]:
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter
    def iot(self) -> Optional[str]:
        return pulumi.get(self, "iot")

    @property
    @pulumi.getter
    def kms(self) -> Optional[str]:
        return pulumi.get(self, "kms")

    @property
    @pulumi.getter
    def kvstore(self) -> Optional[str]:
        return pulumi.get(self, "kvstore")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def market(self) -> Optional[str]:
        return pulumi.get(self, "market")

    @property
    @pulumi.getter
    def maxcompute(self) -> Optional[str]:
        return pulumi.get(self, "maxcompute")

    @property
    @pulumi.getter
    def mhub(self) -> Optional[str]:
        return pulumi.get(self, "mhub")

    @property
    @pulumi.getter
    def mns(self) -> Optional[str]:
        return pulumi.get(self, "mns")

    @property
    @pulumi.getter
    def mscopensubscription(self) -> Optional[str]:
        return pulumi.get(self, "mscopensubscription")

    @property
    @pulumi.getter
    def mse(self) -> Optional[str]:
        return pulumi.get(self, "mse")

    @property
    @pulumi.getter
    def nas(self) -> Optional[str]:
        return pulumi.get(self, "nas")

    @property
    @pulumi.getter
    def nlb(self) -> Optional[str]:
        return pulumi.get(self, "nlb")

    @property
    @pulumi.getter
    def oceanbase(self) -> Optional[str]:
        return pulumi.get(self, "oceanbase")

    @property
    @pulumi.getter
    def ons(self) -> Optional[str]:
        return pulumi.get(self, "ons")

    @property
    @pulumi.getter
    def onsproxy(self) -> Optional[str]:
        return pulumi.get(self, "onsproxy")

    @property
    @pulumi.getter
    def oos(self) -> Optional[str]:
        return pulumi.get(self, "oos")

    @property
    @pulumi.getter
    def opensearch(self) -> Optional[str]:
        return pulumi.get(self, "opensearch")

    @property
    @pulumi.getter
    def oss(self) -> Optional[str]:
        return pulumi.get(self, "oss")

    @property
    @pulumi.getter
    def ots(self) -> Optional[str]:
        return pulumi.get(self, "ots")

    @property
    @pulumi.getter
    def polardb(self) -> Optional[str]:
        return pulumi.get(self, "polardb")

    @property
    @pulumi.getter
    def privatelink(self) -> Optional[str]:
        return pulumi.get(self, "privatelink")

    @property
    @pulumi.getter
    def pvtz(self) -> Optional[str]:
        return pulumi.get(self, "pvtz")

    @property
    @pulumi.getter
    def quickbi(self) -> Optional[str]:
        return pulumi.get(self, "quickbi")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[str]:
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="rKvstore")
    def r_kvstore(self) -> Optional[str]:
        return pulumi.get(self, "r_kvstore")

    @property
    @pulumi.getter
    def ram(self) -> Optional[str]:
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def rds(self) -> Optional[str]:
        return pulumi.get(self, "rds")

    @property
    @pulumi.getter
    def redisa(self) -> Optional[str]:
        return pulumi.get(self, "redisa")

    @property
    @pulumi.getter
    def resourcemanager(self) -> Optional[str]:
        return pulumi.get(self, "resourcemanager")

    @property
    @pulumi.getter
    def resourcesharing(self) -> Optional[str]:
        return pulumi.get(self, "resourcesharing")

    @property
    @pulumi.getter
    def ros(self) -> Optional[str]:
        return pulumi.get(self, "ros")

    @property
    @pulumi.getter
    def sas(self) -> Optional[str]:
        return pulumi.get(self, "sas")

    @property
    @pulumi.getter
    def scdn(self) -> Optional[str]:
        return pulumi.get(self, "scdn")

    @property
    @pulumi.getter
    def sddp(self) -> Optional[str]:
        return pulumi.get(self, "sddp")

    @property
    @pulumi.getter
    def serverless(self) -> Optional[str]:
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter
    def servicemesh(self) -> Optional[str]:
        return pulumi.get(self, "servicemesh")

    @property
    @pulumi.getter
    def sgw(self) -> Optional[str]:
        return pulumi.get(self, "sgw")

    @property
    @pulumi.getter
    def slb(self) -> Optional[str]:
        return pulumi.get(self, "slb")

    @property
    @pulumi.getter
    def smartag(self) -> Optional[str]:
        return pulumi.get(self, "smartag")

    @property
    @pulumi.getter
    def srvcatalog(self) -> Optional[str]:
        return pulumi.get(self, "srvcatalog")

    @property
    @pulumi.getter
    def sts(self) -> Optional[str]:
        return pulumi.get(self, "sts")

    @property
    @pulumi.getter
    def swas(self) -> Optional[str]:
        return pulumi.get(self, "swas")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vod(self) -> Optional[str]:
        return pulumi.get(self, "vod")

    @property
    @pulumi.getter
    def vpc(self) -> Optional[str]:
        return pulumi.get(self, "vpc")

    @property
    @pulumi.getter
    def vpcpeer(self) -> Optional[str]:
        return pulumi.get(self, "vpcpeer")

    @property
    @pulumi.getter
    def vs(self) -> Optional[str]:
        return pulumi.get(self, "vs")

    @property
    @pulumi.getter
    def waf(self) -> Optional[str]:
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter(name="wafOpenapi")
    def waf_openapi(self) -> Optional[str]:
        return pulumi.get(self, "waf_openapi")


