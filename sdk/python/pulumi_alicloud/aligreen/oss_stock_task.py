# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OssStockTaskArgs', 'OssStockTask']

@pulumi.input_type
class OssStockTaskArgs:
    def __init__(__self__, *,
                 audio_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 audio_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 audio_max_size: Optional[pulumi.Input[int]] = None,
                 audio_opened: Optional[pulumi.Input[bool]] = None,
                 audio_scan_limit: Optional[pulumi.Input[int]] = None,
                 audio_scenes: Optional[pulumi.Input[str]] = None,
                 auto_freeze_type: Optional[pulumi.Input[str]] = None,
                 biz_type: Optional[pulumi.Input[str]] = None,
                 buckets: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 image_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 image_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_opened: Optional[pulumi.Input[bool]] = None,
                 image_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_scan_limit: Optional[pulumi.Input[int]] = None,
                 image_scenes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 scan_image_no_file_type: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 video_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 video_frame_interval: Optional[pulumi.Input[int]] = None,
                 video_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_max_frames: Optional[pulumi.Input[int]] = None,
                 video_max_size: Optional[pulumi.Input[int]] = None,
                 video_opened: Optional[pulumi.Input[bool]] = None,
                 video_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_scan_limit: Optional[pulumi.Input[int]] = None,
                 video_scenes: Optional[pulumi.Input[str]] = None,
                 video_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_voice_antispam_freeze_config: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OssStockTask resource.
        :param pulumi.Input[str] audio_antispam_freeze_config: Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        :param pulumi.Input[bool] audio_auto_freeze_opened: Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] audio_max_size: Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        :param pulumi.Input[bool] audio_opened: oss stock scan task detect audio. true: scan audio, false: do not scan audio
        :param pulumi.Input[int] audio_scan_limit: The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] audio_scenes: The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        :param pulumi.Input[str] auto_freeze_type: Automatic freeze type. Value: acl: modify permissions, copy: Move files
        :param pulumi.Input[str] biz_type: Business scenarios used by the oss stock scan task
        :param pulumi.Input[str] buckets: The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        :param pulumi.Input[int] callback_id: The ID of the primary key of the notification message bound to the oss stock scan task.
        :param pulumi.Input[str] end_date: The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        :param pulumi.Input[str] image_ad_freeze_config: Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_auto_freeze_opened: Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        :param pulumi.Input[str] image_live_freeze_config: Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_opened: oss stock scan task detect images. true: scan images, false: do not scan images
        :param pulumi.Input[str] image_porn_freeze_config: Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[int] image_scan_limit: The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_scenes: The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        :param pulumi.Input[str] image_terrorism_freeze_config: The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] scan_image_no_file_type: Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        :param pulumi.Input[str] start_date: The start time of the file upload time range represents the files uploaded after scanning this time point.
        :param pulumi.Input[str] video_ad_freeze_config: The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[bool] video_auto_freeze_opened: Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] video_frame_interval: Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        :param pulumi.Input[str] video_live_freeze_config: Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[int] video_max_frames: A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        :param pulumi.Input[int] video_max_size: Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        :param pulumi.Input[bool] video_opened: oss stock scan task detect video. true: scan video, false: do not scan video
        :param pulumi.Input[str] video_porn_freeze_config: Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        :param pulumi.Input[int] video_scan_limit: The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] video_scenes: The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        :param pulumi.Input[str] video_terrorism_freeze_config: The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[str] video_voice_antispam_freeze_config: Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        if audio_antispam_freeze_config is not None:
            pulumi.set(__self__, "audio_antispam_freeze_config", audio_antispam_freeze_config)
        if audio_auto_freeze_opened is not None:
            pulumi.set(__self__, "audio_auto_freeze_opened", audio_auto_freeze_opened)
        if audio_max_size is not None:
            pulumi.set(__self__, "audio_max_size", audio_max_size)
        if audio_opened is not None:
            pulumi.set(__self__, "audio_opened", audio_opened)
        if audio_scan_limit is not None:
            pulumi.set(__self__, "audio_scan_limit", audio_scan_limit)
        if audio_scenes is not None:
            pulumi.set(__self__, "audio_scenes", audio_scenes)
        if auto_freeze_type is not None:
            pulumi.set(__self__, "auto_freeze_type", auto_freeze_type)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if callback_id is not None:
            pulumi.set(__self__, "callback_id", callback_id)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if image_ad_freeze_config is not None:
            pulumi.set(__self__, "image_ad_freeze_config", image_ad_freeze_config)
        if image_auto_freeze_opened is not None:
            pulumi.set(__self__, "image_auto_freeze_opened", image_auto_freeze_opened)
        if image_live_freeze_config is not None:
            pulumi.set(__self__, "image_live_freeze_config", image_live_freeze_config)
        if image_opened is not None:
            pulumi.set(__self__, "image_opened", image_opened)
        if image_porn_freeze_config is not None:
            pulumi.set(__self__, "image_porn_freeze_config", image_porn_freeze_config)
        if image_scan_limit is not None:
            pulumi.set(__self__, "image_scan_limit", image_scan_limit)
        if image_scenes is not None:
            pulumi.set(__self__, "image_scenes", image_scenes)
        if image_terrorism_freeze_config is not None:
            pulumi.set(__self__, "image_terrorism_freeze_config", image_terrorism_freeze_config)
        if scan_image_no_file_type is not None:
            pulumi.set(__self__, "scan_image_no_file_type", scan_image_no_file_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if video_ad_freeze_config is not None:
            pulumi.set(__self__, "video_ad_freeze_config", video_ad_freeze_config)
        if video_auto_freeze_opened is not None:
            pulumi.set(__self__, "video_auto_freeze_opened", video_auto_freeze_opened)
        if video_frame_interval is not None:
            pulumi.set(__self__, "video_frame_interval", video_frame_interval)
        if video_live_freeze_config is not None:
            pulumi.set(__self__, "video_live_freeze_config", video_live_freeze_config)
        if video_max_frames is not None:
            pulumi.set(__self__, "video_max_frames", video_max_frames)
        if video_max_size is not None:
            pulumi.set(__self__, "video_max_size", video_max_size)
        if video_opened is not None:
            pulumi.set(__self__, "video_opened", video_opened)
        if video_porn_freeze_config is not None:
            pulumi.set(__self__, "video_porn_freeze_config", video_porn_freeze_config)
        if video_scan_limit is not None:
            pulumi.set(__self__, "video_scan_limit", video_scan_limit)
        if video_scenes is not None:
            pulumi.set(__self__, "video_scenes", video_scenes)
        if video_terrorism_freeze_config is not None:
            pulumi.set(__self__, "video_terrorism_freeze_config", video_terrorism_freeze_config)
        if video_voice_antispam_freeze_config is not None:
            pulumi.set(__self__, "video_voice_antispam_freeze_config", video_voice_antispam_freeze_config)

    @property
    @pulumi.getter(name="audioAntispamFreezeConfig")
    def audio_antispam_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        """
        return pulumi.get(self, "audio_antispam_freeze_config")

    @audio_antispam_freeze_config.setter
    def audio_antispam_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_antispam_freeze_config", value)

    @property
    @pulumi.getter(name="audioAutoFreezeOpened")
    def audio_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "audio_auto_freeze_opened")

    @audio_auto_freeze_opened.setter
    def audio_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audio_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="audioMaxSize")
    def audio_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        """
        return pulumi.get(self, "audio_max_size")

    @audio_max_size.setter
    def audio_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_max_size", value)

    @property
    @pulumi.getter(name="audioOpened")
    def audio_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect audio. true: scan audio, false: do not scan audio
        """
        return pulumi.get(self, "audio_opened")

    @audio_opened.setter
    def audio_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audio_opened", value)

    @property
    @pulumi.getter(name="audioScanLimit")
    def audio_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "audio_scan_limit")

    @audio_scan_limit.setter
    def audio_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_scan_limit", value)

    @property
    @pulumi.getter(name="audioScenes")
    def audio_scenes(self) -> Optional[pulumi.Input[str]]:
        """
        The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        """
        return pulumi.get(self, "audio_scenes")

    @audio_scenes.setter
    def audio_scenes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_scenes", value)

    @property
    @pulumi.getter(name="autoFreezeType")
    def auto_freeze_type(self) -> Optional[pulumi.Input[str]]:
        """
        Automatic freeze type. Value: acl: modify permissions, copy: Move files
        """
        return pulumi.get(self, "auto_freeze_type")

    @auto_freeze_type.setter
    def auto_freeze_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_freeze_type", value)

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[pulumi.Input[str]]:
        """
        Business scenarios used by the oss stock scan task
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "biz_type", value)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the primary key of the notification message bound to the oss stock scan task.
        """
        return pulumi.get(self, "callback_id")

    @callback_id.setter
    def callback_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "callback_id", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="imageAdFreezeConfig")
    def image_ad_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_ad_freeze_config")

    @image_ad_freeze_config.setter
    def image_ad_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_ad_freeze_config", value)

    @property
    @pulumi.getter(name="imageAutoFreezeOpened")
    def image_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        """
        return pulumi.get(self, "image_auto_freeze_opened")

    @image_auto_freeze_opened.setter
    def image_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="imageLiveFreezeConfig")
    def image_live_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_live_freeze_config")

    @image_live_freeze_config.setter
    def image_live_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_live_freeze_config", value)

    @property
    @pulumi.getter(name="imageOpened")
    def image_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect images. true: scan images, false: do not scan images
        """
        return pulumi.get(self, "image_opened")

    @image_opened.setter
    def image_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_opened", value)

    @property
    @pulumi.getter(name="imagePornFreezeConfig")
    def image_porn_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_porn_freeze_config")

    @image_porn_freeze_config.setter
    def image_porn_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_porn_freeze_config", value)

    @property
    @pulumi.getter(name="imageScanLimit")
    def image_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        """
        return pulumi.get(self, "image_scan_limit")

    @image_scan_limit.setter
    def image_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_scan_limit", value)

    @property
    @pulumi.getter(name="imageScenes")
    def image_scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        """
        return pulumi.get(self, "image_scenes")

    @image_scenes.setter
    def image_scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "image_scenes", value)

    @property
    @pulumi.getter(name="imageTerrorismFreezeConfig")
    def image_terrorism_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_terrorism_freeze_config")

    @image_terrorism_freeze_config.setter
    def image_terrorism_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_terrorism_freeze_config", value)

    @property
    @pulumi.getter(name="scanImageNoFileType")
    def scan_image_no_file_type(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        """
        return pulumi.get(self, "scan_image_no_file_type")

    @scan_image_no_file_type.setter
    def scan_image_no_file_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_image_no_file_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        The start time of the file upload time range represents the files uploaded after scanning this time point.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="videoAdFreezeConfig")
    def video_ad_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_ad_freeze_config")

    @video_ad_freeze_config.setter
    def video_ad_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_ad_freeze_config", value)

    @property
    @pulumi.getter(name="videoAutoFreezeOpened")
    def video_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "video_auto_freeze_opened")

    @video_auto_freeze_opened.setter
    def video_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "video_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="videoFrameInterval")
    def video_frame_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        """
        return pulumi.get(self, "video_frame_interval")

    @video_frame_interval.setter
    def video_frame_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_frame_interval", value)

    @property
    @pulumi.getter(name="videoLiveFreezeConfig")
    def video_live_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_live_freeze_config")

    @video_live_freeze_config.setter
    def video_live_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_live_freeze_config", value)

    @property
    @pulumi.getter(name="videoMaxFrames")
    def video_max_frames(self) -> Optional[pulumi.Input[int]]:
        """
        A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        """
        return pulumi.get(self, "video_max_frames")

    @video_max_frames.setter
    def video_max_frames(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_max_frames", value)

    @property
    @pulumi.getter(name="videoMaxSize")
    def video_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        """
        return pulumi.get(self, "video_max_size")

    @video_max_size.setter
    def video_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_max_size", value)

    @property
    @pulumi.getter(name="videoOpened")
    def video_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect video. true: scan video, false: do not scan video
        """
        return pulumi.get(self, "video_opened")

    @video_opened.setter
    def video_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "video_opened", value)

    @property
    @pulumi.getter(name="videoPornFreezeConfig")
    def video_porn_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        """
        return pulumi.get(self, "video_porn_freeze_config")

    @video_porn_freeze_config.setter
    def video_porn_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_porn_freeze_config", value)

    @property
    @pulumi.getter(name="videoScanLimit")
    def video_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "video_scan_limit")

    @video_scan_limit.setter
    def video_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_scan_limit", value)

    @property
    @pulumi.getter(name="videoScenes")
    def video_scenes(self) -> Optional[pulumi.Input[str]]:
        """
        The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        """
        return pulumi.get(self, "video_scenes")

    @video_scenes.setter
    def video_scenes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_scenes", value)

    @property
    @pulumi.getter(name="videoTerrorismFreezeConfig")
    def video_terrorism_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_terrorism_freeze_config")

    @video_terrorism_freeze_config.setter
    def video_terrorism_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_terrorism_freeze_config", value)

    @property
    @pulumi.getter(name="videoVoiceAntispamFreezeConfig")
    def video_voice_antispam_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_voice_antispam_freeze_config")

    @video_voice_antispam_freeze_config.setter
    def video_voice_antispam_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_voice_antispam_freeze_config", value)


@pulumi.input_type
class _OssStockTaskState:
    def __init__(__self__, *,
                 audio_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 audio_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 audio_max_size: Optional[pulumi.Input[int]] = None,
                 audio_opened: Optional[pulumi.Input[bool]] = None,
                 audio_scan_limit: Optional[pulumi.Input[int]] = None,
                 audio_scenes: Optional[pulumi.Input[str]] = None,
                 auto_freeze_type: Optional[pulumi.Input[str]] = None,
                 biz_type: Optional[pulumi.Input[str]] = None,
                 buckets: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 image_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 image_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_opened: Optional[pulumi.Input[bool]] = None,
                 image_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_scan_limit: Optional[pulumi.Input[int]] = None,
                 image_scenes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 scan_image_no_file_type: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 video_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 video_frame_interval: Optional[pulumi.Input[int]] = None,
                 video_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_max_frames: Optional[pulumi.Input[int]] = None,
                 video_max_size: Optional[pulumi.Input[int]] = None,
                 video_opened: Optional[pulumi.Input[bool]] = None,
                 video_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_scan_limit: Optional[pulumi.Input[int]] = None,
                 video_scenes: Optional[pulumi.Input[str]] = None,
                 video_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_voice_antispam_freeze_config: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OssStockTask resources.
        :param pulumi.Input[str] audio_antispam_freeze_config: Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        :param pulumi.Input[bool] audio_auto_freeze_opened: Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] audio_max_size: Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        :param pulumi.Input[bool] audio_opened: oss stock scan task detect audio. true: scan audio, false: do not scan audio
        :param pulumi.Input[int] audio_scan_limit: The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] audio_scenes: The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        :param pulumi.Input[str] auto_freeze_type: Automatic freeze type. Value: acl: modify permissions, copy: Move files
        :param pulumi.Input[str] biz_type: Business scenarios used by the oss stock scan task
        :param pulumi.Input[str] buckets: The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        :param pulumi.Input[int] callback_id: The ID of the primary key of the notification message bound to the oss stock scan task.
        :param pulumi.Input[str] end_date: The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        :param pulumi.Input[str] image_ad_freeze_config: Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_auto_freeze_opened: Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        :param pulumi.Input[str] image_live_freeze_config: Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_opened: oss stock scan task detect images. true: scan images, false: do not scan images
        :param pulumi.Input[str] image_porn_freeze_config: Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[int] image_scan_limit: The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_scenes: The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        :param pulumi.Input[str] image_terrorism_freeze_config: The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] scan_image_no_file_type: Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        :param pulumi.Input[str] start_date: The start time of the file upload time range represents the files uploaded after scanning this time point.
        :param pulumi.Input[str] video_ad_freeze_config: The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[bool] video_auto_freeze_opened: Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] video_frame_interval: Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        :param pulumi.Input[str] video_live_freeze_config: Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[int] video_max_frames: A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        :param pulumi.Input[int] video_max_size: Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        :param pulumi.Input[bool] video_opened: oss stock scan task detect video. true: scan video, false: do not scan video
        :param pulumi.Input[str] video_porn_freeze_config: Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        :param pulumi.Input[int] video_scan_limit: The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] video_scenes: The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        :param pulumi.Input[str] video_terrorism_freeze_config: The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[str] video_voice_antispam_freeze_config: Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        if audio_antispam_freeze_config is not None:
            pulumi.set(__self__, "audio_antispam_freeze_config", audio_antispam_freeze_config)
        if audio_auto_freeze_opened is not None:
            pulumi.set(__self__, "audio_auto_freeze_opened", audio_auto_freeze_opened)
        if audio_max_size is not None:
            pulumi.set(__self__, "audio_max_size", audio_max_size)
        if audio_opened is not None:
            pulumi.set(__self__, "audio_opened", audio_opened)
        if audio_scan_limit is not None:
            pulumi.set(__self__, "audio_scan_limit", audio_scan_limit)
        if audio_scenes is not None:
            pulumi.set(__self__, "audio_scenes", audio_scenes)
        if auto_freeze_type is not None:
            pulumi.set(__self__, "auto_freeze_type", auto_freeze_type)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if callback_id is not None:
            pulumi.set(__self__, "callback_id", callback_id)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if image_ad_freeze_config is not None:
            pulumi.set(__self__, "image_ad_freeze_config", image_ad_freeze_config)
        if image_auto_freeze_opened is not None:
            pulumi.set(__self__, "image_auto_freeze_opened", image_auto_freeze_opened)
        if image_live_freeze_config is not None:
            pulumi.set(__self__, "image_live_freeze_config", image_live_freeze_config)
        if image_opened is not None:
            pulumi.set(__self__, "image_opened", image_opened)
        if image_porn_freeze_config is not None:
            pulumi.set(__self__, "image_porn_freeze_config", image_porn_freeze_config)
        if image_scan_limit is not None:
            pulumi.set(__self__, "image_scan_limit", image_scan_limit)
        if image_scenes is not None:
            pulumi.set(__self__, "image_scenes", image_scenes)
        if image_terrorism_freeze_config is not None:
            pulumi.set(__self__, "image_terrorism_freeze_config", image_terrorism_freeze_config)
        if scan_image_no_file_type is not None:
            pulumi.set(__self__, "scan_image_no_file_type", scan_image_no_file_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if video_ad_freeze_config is not None:
            pulumi.set(__self__, "video_ad_freeze_config", video_ad_freeze_config)
        if video_auto_freeze_opened is not None:
            pulumi.set(__self__, "video_auto_freeze_opened", video_auto_freeze_opened)
        if video_frame_interval is not None:
            pulumi.set(__self__, "video_frame_interval", video_frame_interval)
        if video_live_freeze_config is not None:
            pulumi.set(__self__, "video_live_freeze_config", video_live_freeze_config)
        if video_max_frames is not None:
            pulumi.set(__self__, "video_max_frames", video_max_frames)
        if video_max_size is not None:
            pulumi.set(__self__, "video_max_size", video_max_size)
        if video_opened is not None:
            pulumi.set(__self__, "video_opened", video_opened)
        if video_porn_freeze_config is not None:
            pulumi.set(__self__, "video_porn_freeze_config", video_porn_freeze_config)
        if video_scan_limit is not None:
            pulumi.set(__self__, "video_scan_limit", video_scan_limit)
        if video_scenes is not None:
            pulumi.set(__self__, "video_scenes", video_scenes)
        if video_terrorism_freeze_config is not None:
            pulumi.set(__self__, "video_terrorism_freeze_config", video_terrorism_freeze_config)
        if video_voice_antispam_freeze_config is not None:
            pulumi.set(__self__, "video_voice_antispam_freeze_config", video_voice_antispam_freeze_config)

    @property
    @pulumi.getter(name="audioAntispamFreezeConfig")
    def audio_antispam_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        """
        return pulumi.get(self, "audio_antispam_freeze_config")

    @audio_antispam_freeze_config.setter
    def audio_antispam_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_antispam_freeze_config", value)

    @property
    @pulumi.getter(name="audioAutoFreezeOpened")
    def audio_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "audio_auto_freeze_opened")

    @audio_auto_freeze_opened.setter
    def audio_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audio_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="audioMaxSize")
    def audio_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        """
        return pulumi.get(self, "audio_max_size")

    @audio_max_size.setter
    def audio_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_max_size", value)

    @property
    @pulumi.getter(name="audioOpened")
    def audio_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect audio. true: scan audio, false: do not scan audio
        """
        return pulumi.get(self, "audio_opened")

    @audio_opened.setter
    def audio_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audio_opened", value)

    @property
    @pulumi.getter(name="audioScanLimit")
    def audio_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "audio_scan_limit")

    @audio_scan_limit.setter
    def audio_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_scan_limit", value)

    @property
    @pulumi.getter(name="audioScenes")
    def audio_scenes(self) -> Optional[pulumi.Input[str]]:
        """
        The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        """
        return pulumi.get(self, "audio_scenes")

    @audio_scenes.setter
    def audio_scenes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_scenes", value)

    @property
    @pulumi.getter(name="autoFreezeType")
    def auto_freeze_type(self) -> Optional[pulumi.Input[str]]:
        """
        Automatic freeze type. Value: acl: modify permissions, copy: Move files
        """
        return pulumi.get(self, "auto_freeze_type")

    @auto_freeze_type.setter
    def auto_freeze_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_freeze_type", value)

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[pulumi.Input[str]]:
        """
        Business scenarios used by the oss stock scan task
        """
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "biz_type", value)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the primary key of the notification message bound to the oss stock scan task.
        """
        return pulumi.get(self, "callback_id")

    @callback_id.setter
    def callback_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "callback_id", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="imageAdFreezeConfig")
    def image_ad_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_ad_freeze_config")

    @image_ad_freeze_config.setter
    def image_ad_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_ad_freeze_config", value)

    @property
    @pulumi.getter(name="imageAutoFreezeOpened")
    def image_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        """
        return pulumi.get(self, "image_auto_freeze_opened")

    @image_auto_freeze_opened.setter
    def image_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="imageLiveFreezeConfig")
    def image_live_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_live_freeze_config")

    @image_live_freeze_config.setter
    def image_live_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_live_freeze_config", value)

    @property
    @pulumi.getter(name="imageOpened")
    def image_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect images. true: scan images, false: do not scan images
        """
        return pulumi.get(self, "image_opened")

    @image_opened.setter
    def image_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_opened", value)

    @property
    @pulumi.getter(name="imagePornFreezeConfig")
    def image_porn_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_porn_freeze_config")

    @image_porn_freeze_config.setter
    def image_porn_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_porn_freeze_config", value)

    @property
    @pulumi.getter(name="imageScanLimit")
    def image_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        """
        return pulumi.get(self, "image_scan_limit")

    @image_scan_limit.setter
    def image_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_scan_limit", value)

    @property
    @pulumi.getter(name="imageScenes")
    def image_scenes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        """
        return pulumi.get(self, "image_scenes")

    @image_scenes.setter
    def image_scenes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "image_scenes", value)

    @property
    @pulumi.getter(name="imageTerrorismFreezeConfig")
    def image_terrorism_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_terrorism_freeze_config")

    @image_terrorism_freeze_config.setter
    def image_terrorism_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_terrorism_freeze_config", value)

    @property
    @pulumi.getter(name="scanImageNoFileType")
    def scan_image_no_file_type(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        """
        return pulumi.get(self, "scan_image_no_file_type")

    @scan_image_no_file_type.setter
    def scan_image_no_file_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_image_no_file_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        The start time of the file upload time range represents the files uploaded after scanning this time point.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="videoAdFreezeConfig")
    def video_ad_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_ad_freeze_config")

    @video_ad_freeze_config.setter
    def video_ad_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_ad_freeze_config", value)

    @property
    @pulumi.getter(name="videoAutoFreezeOpened")
    def video_auto_freeze_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "video_auto_freeze_opened")

    @video_auto_freeze_opened.setter
    def video_auto_freeze_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "video_auto_freeze_opened", value)

    @property
    @pulumi.getter(name="videoFrameInterval")
    def video_frame_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        """
        return pulumi.get(self, "video_frame_interval")

    @video_frame_interval.setter
    def video_frame_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_frame_interval", value)

    @property
    @pulumi.getter(name="videoLiveFreezeConfig")
    def video_live_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_live_freeze_config")

    @video_live_freeze_config.setter
    def video_live_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_live_freeze_config", value)

    @property
    @pulumi.getter(name="videoMaxFrames")
    def video_max_frames(self) -> Optional[pulumi.Input[int]]:
        """
        A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        """
        return pulumi.get(self, "video_max_frames")

    @video_max_frames.setter
    def video_max_frames(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_max_frames", value)

    @property
    @pulumi.getter(name="videoMaxSize")
    def video_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        """
        return pulumi.get(self, "video_max_size")

    @video_max_size.setter
    def video_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_max_size", value)

    @property
    @pulumi.getter(name="videoOpened")
    def video_opened(self) -> Optional[pulumi.Input[bool]]:
        """
        oss stock scan task detect video. true: scan video, false: do not scan video
        """
        return pulumi.get(self, "video_opened")

    @video_opened.setter
    def video_opened(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "video_opened", value)

    @property
    @pulumi.getter(name="videoPornFreezeConfig")
    def video_porn_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        """
        return pulumi.get(self, "video_porn_freeze_config")

    @video_porn_freeze_config.setter
    def video_porn_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_porn_freeze_config", value)

    @property
    @pulumi.getter(name="videoScanLimit")
    def video_scan_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "video_scan_limit")

    @video_scan_limit.setter
    def video_scan_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_scan_limit", value)

    @property
    @pulumi.getter(name="videoScenes")
    def video_scenes(self) -> Optional[pulumi.Input[str]]:
        """
        The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        """
        return pulumi.get(self, "video_scenes")

    @video_scenes.setter
    def video_scenes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_scenes", value)

    @property
    @pulumi.getter(name="videoTerrorismFreezeConfig")
    def video_terrorism_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_terrorism_freeze_config")

    @video_terrorism_freeze_config.setter
    def video_terrorism_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_terrorism_freeze_config", value)

    @property
    @pulumi.getter(name="videoVoiceAntispamFreezeConfig")
    def video_voice_antispam_freeze_config(self) -> Optional[pulumi.Input[str]]:
        """
        Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_voice_antispam_freeze_config")

    @video_voice_antispam_freeze_config.setter
    def video_voice_antispam_freeze_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_voice_antispam_freeze_config", value)


class OssStockTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 audio_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 audio_max_size: Optional[pulumi.Input[int]] = None,
                 audio_opened: Optional[pulumi.Input[bool]] = None,
                 audio_scan_limit: Optional[pulumi.Input[int]] = None,
                 audio_scenes: Optional[pulumi.Input[str]] = None,
                 auto_freeze_type: Optional[pulumi.Input[str]] = None,
                 biz_type: Optional[pulumi.Input[str]] = None,
                 buckets: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 image_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 image_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_opened: Optional[pulumi.Input[bool]] = None,
                 image_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_scan_limit: Optional[pulumi.Input[int]] = None,
                 image_scenes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 scan_image_no_file_type: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 video_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 video_frame_interval: Optional[pulumi.Input[int]] = None,
                 video_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_max_frames: Optional[pulumi.Input[int]] = None,
                 video_max_size: Optional[pulumi.Input[int]] = None,
                 video_opened: Optional[pulumi.Input[bool]] = None,
                 video_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_scan_limit: Optional[pulumi.Input[int]] = None,
                 video_scenes: Optional[pulumi.Input[str]] = None,
                 video_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_voice_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        Aligreen Oss Stock Task can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:aligreen/ossStockTask:OssStockTask example <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] audio_antispam_freeze_config: Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        :param pulumi.Input[bool] audio_auto_freeze_opened: Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] audio_max_size: Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        :param pulumi.Input[bool] audio_opened: oss stock scan task detect audio. true: scan audio, false: do not scan audio
        :param pulumi.Input[int] audio_scan_limit: The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] audio_scenes: The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        :param pulumi.Input[str] auto_freeze_type: Automatic freeze type. Value: acl: modify permissions, copy: Move files
        :param pulumi.Input[str] biz_type: Business scenarios used by the oss stock scan task
        :param pulumi.Input[str] buckets: The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        :param pulumi.Input[int] callback_id: The ID of the primary key of the notification message bound to the oss stock scan task.
        :param pulumi.Input[str] end_date: The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        :param pulumi.Input[str] image_ad_freeze_config: Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_auto_freeze_opened: Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        :param pulumi.Input[str] image_live_freeze_config: Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_opened: oss stock scan task detect images. true: scan images, false: do not scan images
        :param pulumi.Input[str] image_porn_freeze_config: Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[int] image_scan_limit: The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_scenes: The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        :param pulumi.Input[str] image_terrorism_freeze_config: The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] scan_image_no_file_type: Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        :param pulumi.Input[str] start_date: The start time of the file upload time range represents the files uploaded after scanning this time point.
        :param pulumi.Input[str] video_ad_freeze_config: The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[bool] video_auto_freeze_opened: Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] video_frame_interval: Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        :param pulumi.Input[str] video_live_freeze_config: Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[int] video_max_frames: A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        :param pulumi.Input[int] video_max_size: Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        :param pulumi.Input[bool] video_opened: oss stock scan task detect video. true: scan video, false: do not scan video
        :param pulumi.Input[str] video_porn_freeze_config: Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        :param pulumi.Input[int] video_scan_limit: The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] video_scenes: The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        :param pulumi.Input[str] video_terrorism_freeze_config: The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[str] video_voice_antispam_freeze_config: Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OssStockTaskArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Aligreen Oss Stock Task can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:aligreen/ossStockTask:OssStockTask example <id>
        ```

        :param str resource_name: The name of the resource.
        :param OssStockTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OssStockTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 audio_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 audio_max_size: Optional[pulumi.Input[int]] = None,
                 audio_opened: Optional[pulumi.Input[bool]] = None,
                 audio_scan_limit: Optional[pulumi.Input[int]] = None,
                 audio_scenes: Optional[pulumi.Input[str]] = None,
                 auto_freeze_type: Optional[pulumi.Input[str]] = None,
                 biz_type: Optional[pulumi.Input[str]] = None,
                 buckets: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 image_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 image_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_opened: Optional[pulumi.Input[bool]] = None,
                 image_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 image_scan_limit: Optional[pulumi.Input[int]] = None,
                 image_scenes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 scan_image_no_file_type: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 video_ad_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
                 video_frame_interval: Optional[pulumi.Input[int]] = None,
                 video_live_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_max_frames: Optional[pulumi.Input[int]] = None,
                 video_max_size: Optional[pulumi.Input[int]] = None,
                 video_opened: Optional[pulumi.Input[bool]] = None,
                 video_porn_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_scan_limit: Optional[pulumi.Input[int]] = None,
                 video_scenes: Optional[pulumi.Input[str]] = None,
                 video_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
                 video_voice_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OssStockTaskArgs.__new__(OssStockTaskArgs)

            __props__.__dict__["audio_antispam_freeze_config"] = audio_antispam_freeze_config
            __props__.__dict__["audio_auto_freeze_opened"] = audio_auto_freeze_opened
            __props__.__dict__["audio_max_size"] = audio_max_size
            __props__.__dict__["audio_opened"] = audio_opened
            __props__.__dict__["audio_scan_limit"] = audio_scan_limit
            __props__.__dict__["audio_scenes"] = audio_scenes
            __props__.__dict__["auto_freeze_type"] = auto_freeze_type
            __props__.__dict__["biz_type"] = biz_type
            __props__.__dict__["buckets"] = buckets
            __props__.__dict__["callback_id"] = callback_id
            __props__.__dict__["end_date"] = end_date
            __props__.__dict__["image_ad_freeze_config"] = image_ad_freeze_config
            __props__.__dict__["image_auto_freeze_opened"] = image_auto_freeze_opened
            __props__.__dict__["image_live_freeze_config"] = image_live_freeze_config
            __props__.__dict__["image_opened"] = image_opened
            __props__.__dict__["image_porn_freeze_config"] = image_porn_freeze_config
            __props__.__dict__["image_scan_limit"] = image_scan_limit
            __props__.__dict__["image_scenes"] = image_scenes
            __props__.__dict__["image_terrorism_freeze_config"] = image_terrorism_freeze_config
            __props__.__dict__["scan_image_no_file_type"] = scan_image_no_file_type
            __props__.__dict__["start_date"] = start_date
            __props__.__dict__["video_ad_freeze_config"] = video_ad_freeze_config
            __props__.__dict__["video_auto_freeze_opened"] = video_auto_freeze_opened
            __props__.__dict__["video_frame_interval"] = video_frame_interval
            __props__.__dict__["video_live_freeze_config"] = video_live_freeze_config
            __props__.__dict__["video_max_frames"] = video_max_frames
            __props__.__dict__["video_max_size"] = video_max_size
            __props__.__dict__["video_opened"] = video_opened
            __props__.__dict__["video_porn_freeze_config"] = video_porn_freeze_config
            __props__.__dict__["video_scan_limit"] = video_scan_limit
            __props__.__dict__["video_scenes"] = video_scenes
            __props__.__dict__["video_terrorism_freeze_config"] = video_terrorism_freeze_config
            __props__.__dict__["video_voice_antispam_freeze_config"] = video_voice_antispam_freeze_config
        super(OssStockTask, __self__).__init__(
            'alicloud:aligreen/ossStockTask:OssStockTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audio_antispam_freeze_config: Optional[pulumi.Input[str]] = None,
            audio_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
            audio_max_size: Optional[pulumi.Input[int]] = None,
            audio_opened: Optional[pulumi.Input[bool]] = None,
            audio_scan_limit: Optional[pulumi.Input[int]] = None,
            audio_scenes: Optional[pulumi.Input[str]] = None,
            auto_freeze_type: Optional[pulumi.Input[str]] = None,
            biz_type: Optional[pulumi.Input[str]] = None,
            buckets: Optional[pulumi.Input[str]] = None,
            callback_id: Optional[pulumi.Input[int]] = None,
            end_date: Optional[pulumi.Input[str]] = None,
            image_ad_freeze_config: Optional[pulumi.Input[str]] = None,
            image_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
            image_live_freeze_config: Optional[pulumi.Input[str]] = None,
            image_opened: Optional[pulumi.Input[bool]] = None,
            image_porn_freeze_config: Optional[pulumi.Input[str]] = None,
            image_scan_limit: Optional[pulumi.Input[int]] = None,
            image_scenes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            image_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
            scan_image_no_file_type: Optional[pulumi.Input[bool]] = None,
            start_date: Optional[pulumi.Input[str]] = None,
            video_ad_freeze_config: Optional[pulumi.Input[str]] = None,
            video_auto_freeze_opened: Optional[pulumi.Input[bool]] = None,
            video_frame_interval: Optional[pulumi.Input[int]] = None,
            video_live_freeze_config: Optional[pulumi.Input[str]] = None,
            video_max_frames: Optional[pulumi.Input[int]] = None,
            video_max_size: Optional[pulumi.Input[int]] = None,
            video_opened: Optional[pulumi.Input[bool]] = None,
            video_porn_freeze_config: Optional[pulumi.Input[str]] = None,
            video_scan_limit: Optional[pulumi.Input[int]] = None,
            video_scenes: Optional[pulumi.Input[str]] = None,
            video_terrorism_freeze_config: Optional[pulumi.Input[str]] = None,
            video_voice_antispam_freeze_config: Optional[pulumi.Input[str]] = None) -> 'OssStockTask':
        """
        Get an existing OssStockTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] audio_antispam_freeze_config: Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        :param pulumi.Input[bool] audio_auto_freeze_opened: Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] audio_max_size: Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        :param pulumi.Input[bool] audio_opened: oss stock scan task detect audio. true: scan audio, false: do not scan audio
        :param pulumi.Input[int] audio_scan_limit: The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] audio_scenes: The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        :param pulumi.Input[str] auto_freeze_type: Automatic freeze type. Value: acl: modify permissions, copy: Move files
        :param pulumi.Input[str] biz_type: Business scenarios used by the oss stock scan task
        :param pulumi.Input[str] buckets: The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        :param pulumi.Input[int] callback_id: The ID of the primary key of the notification message bound to the oss stock scan task.
        :param pulumi.Input[str] end_date: The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        :param pulumi.Input[str] image_ad_freeze_config: Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_auto_freeze_opened: Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        :param pulumi.Input[str] image_live_freeze_config: Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] image_opened: oss stock scan task detect images. true: scan images, false: do not scan images
        :param pulumi.Input[str] image_porn_freeze_config: Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[int] image_scan_limit: The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_scenes: The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        :param pulumi.Input[str] image_terrorism_freeze_config: The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        :param pulumi.Input[bool] scan_image_no_file_type: Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        :param pulumi.Input[str] start_date: The start time of the file upload time range represents the files uploaded after scanning this time point.
        :param pulumi.Input[str] video_ad_freeze_config: The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[bool] video_auto_freeze_opened: Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        :param pulumi.Input[int] video_frame_interval: Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        :param pulumi.Input[str] video_live_freeze_config: Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[int] video_max_frames: A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        :param pulumi.Input[int] video_max_size: Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        :param pulumi.Input[bool] video_opened: oss stock scan task detect video. true: scan video, false: do not scan video
        :param pulumi.Input[str] video_porn_freeze_config: Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        :param pulumi.Input[int] video_scan_limit: The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        :param pulumi.Input[str] video_scenes: The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        :param pulumi.Input[str] video_terrorism_freeze_config: The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        :param pulumi.Input[str] video_voice_antispam_freeze_config: Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OssStockTaskState.__new__(_OssStockTaskState)

        __props__.__dict__["audio_antispam_freeze_config"] = audio_antispam_freeze_config
        __props__.__dict__["audio_auto_freeze_opened"] = audio_auto_freeze_opened
        __props__.__dict__["audio_max_size"] = audio_max_size
        __props__.__dict__["audio_opened"] = audio_opened
        __props__.__dict__["audio_scan_limit"] = audio_scan_limit
        __props__.__dict__["audio_scenes"] = audio_scenes
        __props__.__dict__["auto_freeze_type"] = auto_freeze_type
        __props__.__dict__["biz_type"] = biz_type
        __props__.__dict__["buckets"] = buckets
        __props__.__dict__["callback_id"] = callback_id
        __props__.__dict__["end_date"] = end_date
        __props__.__dict__["image_ad_freeze_config"] = image_ad_freeze_config
        __props__.__dict__["image_auto_freeze_opened"] = image_auto_freeze_opened
        __props__.__dict__["image_live_freeze_config"] = image_live_freeze_config
        __props__.__dict__["image_opened"] = image_opened
        __props__.__dict__["image_porn_freeze_config"] = image_porn_freeze_config
        __props__.__dict__["image_scan_limit"] = image_scan_limit
        __props__.__dict__["image_scenes"] = image_scenes
        __props__.__dict__["image_terrorism_freeze_config"] = image_terrorism_freeze_config
        __props__.__dict__["scan_image_no_file_type"] = scan_image_no_file_type
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["video_ad_freeze_config"] = video_ad_freeze_config
        __props__.__dict__["video_auto_freeze_opened"] = video_auto_freeze_opened
        __props__.__dict__["video_frame_interval"] = video_frame_interval
        __props__.__dict__["video_live_freeze_config"] = video_live_freeze_config
        __props__.__dict__["video_max_frames"] = video_max_frames
        __props__.__dict__["video_max_size"] = video_max_size
        __props__.__dict__["video_opened"] = video_opened
        __props__.__dict__["video_porn_freeze_config"] = video_porn_freeze_config
        __props__.__dict__["video_scan_limit"] = video_scan_limit
        __props__.__dict__["video_scenes"] = video_scenes
        __props__.__dict__["video_terrorism_freeze_config"] = video_terrorism_freeze_config
        __props__.__dict__["video_voice_antispam_freeze_config"] = video_voice_antispam_freeze_config
        return OssStockTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="audioAntispamFreezeConfig")
    def audio_antispam_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Voice auto freeze configuration. Example:{"type":"suggestion","value":"block,review"}. The results are frozen according to the suggestion in the speech detection results.
        """
        return pulumi.get(self, "audio_antispam_freeze_config")

    @property
    @pulumi.getter(name="audioAutoFreezeOpened")
    def audio_auto_freeze_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        Audio detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "audio_auto_freeze_opened")

    @property
    @pulumi.getter(name="audioMaxSize")
    def audio_max_size(self) -> pulumi.Output[Optional[int]]:
        """
        Resource property field representing the maximum size of a single audio. 1~2048MB, the default is 200MB, more than not detected.
        """
        return pulumi.get(self, "audio_max_size")

    @property
    @pulumi.getter(name="audioOpened")
    def audio_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        oss stock scan task detect audio. true: scan audio, false: do not scan audio
        """
        return pulumi.get(self, "audio_opened")

    @property
    @pulumi.getter(name="audioScanLimit")
    def audio_scan_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The upper limit of voice scan in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "audio_scan_limit")

    @property
    @pulumi.getter(name="audioScenes")
    def audio_scenes(self) -> pulumi.Output[Optional[str]]:
        """
        The audio detection scenarios included in the oss stock scan task. Set the value to antispam.
        """
        return pulumi.get(self, "audio_scenes")

    @property
    @pulumi.getter(name="autoFreezeType")
    def auto_freeze_type(self) -> pulumi.Output[Optional[str]]:
        """
        Automatic freeze type. Value: acl: modify permissions, copy: Move files
        """
        return pulumi.get(self, "auto_freeze_type")

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> pulumi.Output[Optional[str]]:
        """
        Business scenarios used by the oss stock scan task
        """
        return pulumi.get(self, "biz_type")

    @property
    @pulumi.getter
    def buckets(self) -> pulumi.Output[Optional[str]]:
        """
        The bucket configuration list of the oss stock scan task. Example:[{"Bucket":"bucket_01","Selected":true,"Prefixes":["img/test_"],"Type":"exclude"}]
        """
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> pulumi.Output[Optional[int]]:
        """
        The ID of the primary key of the notification message bound to the oss stock scan task.
        """
        return pulumi.get(self, "callback_id")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[Optional[str]]:
        """
        The end time of the file upload time range indicates the scanning of files uploaded before this time point.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="imageAdFreezeConfig")
    def image_ad_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Picture automatically freezes the configuration of ad scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_ad_freeze_config")

    @property
    @pulumi.getter(name="imageAutoFreezeOpened")
    def image_auto_freeze_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        Picture detection auto freeze switch. Value: true: auto freeze, false: not auto freeze.
        """
        return pulumi.get(self, "image_auto_freeze_opened")

    @property
    @pulumi.getter(name="imageLiveFreezeConfig")
    def image_live_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Picture automatic freezing live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_live_freeze_config")

    @property
    @pulumi.getter(name="imageOpened")
    def image_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        oss stock scan task detect images. true: scan images, false: do not scan images
        """
        return pulumi.get(self, "image_opened")

    @property
    @pulumi.getter(name="imagePornFreezeConfig")
    def image_porn_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Picture automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_porn_freeze_config")

    @property
    @pulumi.getter(name="imageScanLimit")
    def image_scan_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The upper limit for scanning images in the oss stock scan task. The default value is 10000 images per Bucket.
        """
        return pulumi.get(self, "image_scan_limit")

    @property
    @pulumi.getter(name="imageScenes")
    def image_scenes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The image moderation scenario included in the oss stock scan task.Valid values: porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection
        """
        return pulumi.get(self, "image_scenes")

    @property
    @pulumi.getter(name="imageTerrorismFreezeConfig")
    def image_terrorism_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        The picture automatically freezes the configuration of terrorism scenes. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the picture detection result.
        """
        return pulumi.get(self, "image_terrorism_freeze_config")

    @property
    @pulumi.getter(name="scanImageNoFileType")
    def scan_image_no_file_type(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the oss stock scan task detects images with file names without suffixes. true: Detect pictures with file names without suffixes, false: Do not detect pictures with file names without suffixes
        """
        return pulumi.get(self, "scan_image_no_file_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[Optional[str]]:
        """
        The start time of the file upload time range represents the files uploaded after scanning this time point.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="videoAdFreezeConfig")
    def video_ad_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        The video automatically freezes the configuration of ad scenarios. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_ad_freeze_config")

    @property
    @pulumi.getter(name="videoAutoFreezeOpened")
    def video_auto_freeze_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        Video detection auto freeze switch. Value: true: automatically freeze, false: not automatically freeze.
        """
        return pulumi.get(self, "video_auto_freeze_opened")

    @property
    @pulumi.getter(name="videoFrameInterval")
    def video_frame_interval(self) -> pulumi.Output[Optional[int]]:
        """
        Resource attribute field representing the framing frequency. 1~60 seconds/frame, the default is 1 second/frame
        """
        return pulumi.get(self, "video_frame_interval")

    @property
    @pulumi.getter(name="videoLiveFreezeConfig")
    def video_live_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Video automatic freeze live scene configuration. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_live_freeze_config")

    @property
    @pulumi.getter(name="videoMaxFrames")
    def video_max_frames(self) -> pulumi.Output[Optional[int]]:
        """
        A resource attribute field that represents the upper limit of a single video frame cut. 5 to 20000 frames, the default is 200 frames
        """
        return pulumi.get(self, "video_max_frames")

    @property
    @pulumi.getter(name="videoMaxSize")
    def video_max_size(self) -> pulumi.Output[Optional[int]]:
        """
        Resource property field representing the maximum size of a single video. 1~2048MB, the default is 500MB, more than not detected.
        """
        return pulumi.get(self, "video_max_size")

    @property
    @pulumi.getter(name="videoOpened")
    def video_opened(self) -> pulumi.Output[Optional[bool]]:
        """
        oss stock scan task detect video. true: scan video, false: do not scan video
        """
        return pulumi.get(self, "video_opened")

    @property
    @pulumi.getter(name="videoPornFreezeConfig")
    def video_porn_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Video automatic freezing porn scene configuration. Example: {"type": "suggestion", "value": "block,review"}. The result will be frozen according to the suggestion in the video detection result.
        """
        return pulumi.get(self, "video_porn_freeze_config")

    @property
    @pulumi.getter(name="videoScanLimit")
    def video_scan_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The upper limit of video scanning in the oss stock scan task. The default value is 1000/Bucket.
        """
        return pulumi.get(self, "video_scan_limit")

    @property
    @pulumi.getter(name="videoScenes")
    def video_scenes(self) -> pulumi.Output[Optional[str]]:
        """
        The video detection scenarios included in the oss stock scan task. porn: pornography detection terrorism: terrorist content detection ad: ad violation detection live: undesirable scene detection antispam: Video voice antispam
        """
        return pulumi.get(self, "video_scenes")

    @property
    @pulumi.getter(name="videoTerrorismFreezeConfig")
    def video_terrorism_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        The video automatically freezes the configuration of terrorism scenes. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_terrorism_freeze_config")

    @property
    @pulumi.getter(name="videoVoiceAntispamFreezeConfig")
    def video_voice_antispam_freeze_config(self) -> pulumi.Output[Optional[str]]:
        """
        Voice auto freeze configuration in video. Example:{"type":"suggestion","value":"block,review"}. The results will be frozen according to the suggestion in the video detection results.
        """
        return pulumi.get(self, "video_voice_antispam_freeze_config")

