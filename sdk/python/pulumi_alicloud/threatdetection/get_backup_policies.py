# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupPoliciesResult',
    'AwaitableGetBackupPoliciesResult',
    'get_backup_policies',
    'get_backup_policies_output',
]

@pulumi.output_type
class GetBackupPoliciesResult:
    """
    A collection of values returned by getBackupPolicies.
    """
    def __init__(__self__, current_page=None, id=None, ids=None, machine_remark=None, name=None, name_regex=None, names=None, output_file=None, page_size=None, policies=None, status=None):
        if current_page and not isinstance(current_page, int):
            raise TypeError("Expected argument 'current_page' to be a int")
        pulumi.set(__self__, "current_page", current_page)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if machine_remark and not isinstance(machine_remark, str):
            raise TypeError("Expected argument 'machine_remark' to be a str")
        pulumi.set(__self__, "machine_remark", machine_remark)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if page_size and not isinstance(page_size, int):
            raise TypeError("Expected argument 'page_size' to be a int")
        pulumi.set(__self__, "page_size", page_size)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="currentPage")
    def current_page(self) -> Optional[int]:
        return pulumi.get(self, "current_page")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="machineRemark")
    def machine_remark(self) -> Optional[str]:
        return pulumi.get(self, "machine_remark")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        """
        A list of Threat Detection Backup Policy names.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[int]:
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetBackupPoliciesPolicyResult']:
        """
        A list of Threat Detection Backup policies. Each element contains the following attributes:
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the anti-ransomware policy.
        """
        return pulumi.get(self, "status")


class AwaitableGetBackupPoliciesResult(GetBackupPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupPoliciesResult(
            current_page=self.current_page,
            id=self.id,
            ids=self.ids,
            machine_remark=self.machine_remark,
            name=self.name,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            page_size=self.page_size,
            policies=self.policies,
            status=self.status)


def get_backup_policies(current_page: Optional[int] = None,
                        ids: Optional[Sequence[str]] = None,
                        machine_remark: Optional[str] = None,
                        name: Optional[str] = None,
                        name_regex: Optional[str] = None,
                        output_file: Optional[str] = None,
                        page_size: Optional[int] = None,
                        status: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupPoliciesResult:
    """
    This data source provides the Threat Detection Backup Policies of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.195.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.threatdetection.get_backup_policies(ids=["example_id"])
    pulumi.export("threatDetectionBackupPoliciesId1", ids.policies[0].id)
    name_regex = alicloud.threatdetection.get_backup_policies(name_regex="tf-example")
    pulumi.export("threatDetectionBackupPoliciesId2", name_regex.policies[0].id)
    ```


    :param Sequence[str] ids: A list of Threat Detection Backup Policies IDs.
    :param str machine_remark: The information that you want to use to identify the servers protected by the anti-ransomware policy. You can enter the IP address or ID of a server.
    :param str name: The name of the anti-ransomware policy that you want to query.
    :param str name_regex: A regex string to filter results by Threat Detection Backup Policies name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the anti-ransomware policy. Valid Value: `enabled`, `disabled`, `closed`.
    """
    __args__ = dict()
    __args__['currentPage'] = current_page
    __args__['ids'] = ids
    __args__['machineRemark'] = machine_remark
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['pageSize'] = page_size
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('alicloud:threatdetection/getBackupPolicies:getBackupPolicies', __args__, opts=opts, typ=GetBackupPoliciesResult).value

    return AwaitableGetBackupPoliciesResult(
        current_page=pulumi.get(__ret__, 'current_page'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        machine_remark=pulumi.get(__ret__, 'machine_remark'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        names=pulumi.get(__ret__, 'names'),
        output_file=pulumi.get(__ret__, 'output_file'),
        page_size=pulumi.get(__ret__, 'page_size'),
        policies=pulumi.get(__ret__, 'policies'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_backup_policies)
def get_backup_policies_output(current_page: Optional[pulumi.Input[Optional[int]]] = None,
                               ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               machine_remark: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                               output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               page_size: Optional[pulumi.Input[Optional[int]]] = None,
                               status: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupPoliciesResult]:
    """
    This data source provides the Threat Detection Backup Policies of the current Alibaba Cloud user.

    > **NOTE:** Available in v1.195.0+.

    ## Example Usage

    Basic Usage

    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ids = alicloud.threatdetection.get_backup_policies(ids=["example_id"])
    pulumi.export("threatDetectionBackupPoliciesId1", ids.policies[0].id)
    name_regex = alicloud.threatdetection.get_backup_policies(name_regex="tf-example")
    pulumi.export("threatDetectionBackupPoliciesId2", name_regex.policies[0].id)
    ```


    :param Sequence[str] ids: A list of Threat Detection Backup Policies IDs.
    :param str machine_remark: The information that you want to use to identify the servers protected by the anti-ransomware policy. You can enter the IP address or ID of a server.
    :param str name: The name of the anti-ransomware policy that you want to query.
    :param str name_regex: A regex string to filter results by Threat Detection Backup Policies name.
    :param str output_file: File name where to save data source results (after running `pulumi preview`).
    :param str status: The status of the anti-ransomware policy. Valid Value: `enabled`, `disabled`, `closed`.
    """
    ...
