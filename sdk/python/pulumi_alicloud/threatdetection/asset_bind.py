# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AssetBindArgs', 'AssetBind']

@pulumi.input_type
class AssetBindArgs:
    def __init__(__self__, *,
                 auth_version: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AssetBind resource.
        :param pulumi.Input[int] auth_version: Bind version.
        :param pulumi.Input[str] uuid: The first ID of the resource
        """
        if auth_version is not None:
            pulumi.set(__self__, "auth_version", auth_version)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authVersion")
    def auth_version(self) -> Optional[pulumi.Input[int]]:
        """
        Bind version.
        """
        return pulumi.get(self, "auth_version")

    @auth_version.setter
    def auth_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_version", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The first ID of the resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _AssetBindState:
    def __init__(__self__, *,
                 auth_version: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AssetBind resources.
        :param pulumi.Input[int] auth_version: Bind version.
        :param pulumi.Input[str] uuid: The first ID of the resource
        """
        if auth_version is not None:
            pulumi.set(__self__, "auth_version", auth_version)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authVersion")
    def auth_version(self) -> Optional[pulumi.Input[int]]:
        """
        Bind version.
        """
        return pulumi.get(self, "auth_version")

    @auth_version.setter
    def auth_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_version", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The first ID of the resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class AssetBind(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_version: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        Threat Detection Asset Bind can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:threatdetection/assetBind:AssetBind example <id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_version: Bind version.
        :param pulumi.Input[str] uuid: The first ID of the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AssetBindArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Threat Detection Asset Bind can be imported using the id, e.g.

        ```sh
        $ pulumi import alicloud:threatdetection/assetBind:AssetBind example <id>
        ```

        :param str resource_name: The name of the resource.
        :param AssetBindArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssetBindArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_version: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssetBindArgs.__new__(AssetBindArgs)

            __props__.__dict__["auth_version"] = auth_version
            __props__.__dict__["uuid"] = uuid
        super(AssetBind, __self__).__init__(
            'alicloud:threatdetection/assetBind:AssetBind',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_version: Optional[pulumi.Input[int]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'AssetBind':
        """
        Get an existing AssetBind resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_version: Bind version.
        :param pulumi.Input[str] uuid: The first ID of the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AssetBindState.__new__(_AssetBindState)

        __props__.__dict__["auth_version"] = auth_version
        __props__.__dict__["uuid"] = uuid
        return AssetBind(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authVersion")
    def auth_version(self) -> pulumi.Output[Optional[int]]:
        """
        Bind version.
        """
        return pulumi.get(self, "auth_version")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The first ID of the resource
        """
        return pulumi.get(self, "uuid")

