# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AntiBruteForceRuleProtocolTypeArgs',
    'AntiBruteForceRuleProtocolTypeArgsDict',
    'AttackPathSensitiveAssetConfigAttackPathAssetListArgs',
    'AttackPathSensitiveAssetConfigAttackPathAssetListArgsDict',
    'HoneypotPresetMetaArgs',
    'HoneypotPresetMetaArgsDict',
    'HoneypotProbeHoneypotBindListArgs',
    'HoneypotProbeHoneypotBindListArgsDict',
    'HoneypotProbeHoneypotBindListBindPortListArgs',
    'HoneypotProbeHoneypotBindListBindPortListArgsDict',
    'SasTrailServiceTrailArgs',
    'SasTrailServiceTrailArgsDict',
]

MYPY = False

if not MYPY:
    class AntiBruteForceRuleProtocolTypeArgsDict(TypedDict):
        rdp: NotRequired[pulumi.Input[_builtins.str]]
        """
        Whether to enable RDP interception. Default value: `on`. Valid values: `on`, `off`.
        """
        sql_server: NotRequired[pulumi.Input[_builtins.str]]
        """
        Whether to enable the SqlServer interception method. Default value: `off`. Valid values: `on`, `off`.
        """
        ssh: NotRequired[pulumi.Input[_builtins.str]]
        """
        Whether to enable SSH interception. Default value: `on`. Valid values: `on`, `off`.
        """
elif False:
    AntiBruteForceRuleProtocolTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiBruteForceRuleProtocolTypeArgs:
    def __init__(__self__, *,
                 rdp: Optional[pulumi.Input[_builtins.str]] = None,
                 sql_server: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] rdp: Whether to enable RDP interception. Default value: `on`. Valid values: `on`, `off`.
        :param pulumi.Input[_builtins.str] sql_server: Whether to enable the SqlServer interception method. Default value: `off`. Valid values: `on`, `off`.
        :param pulumi.Input[_builtins.str] ssh: Whether to enable SSH interception. Default value: `on`. Valid values: `on`, `off`.
        """
        if rdp is not None:
            pulumi.set(__self__, "rdp", rdp)
        if sql_server is not None:
            pulumi.set(__self__, "sql_server", sql_server)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @_builtins.property
    @pulumi.getter
    def rdp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to enable RDP interception. Default value: `on`. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "rdp")

    @rdp.setter
    def rdp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rdp", value)

    @_builtins.property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to enable the SqlServer interception method. Default value: `off`. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "sql_server")

    @sql_server.setter
    def sql_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sql_server", value)

    @_builtins.property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to enable SSH interception. Default value: `on`. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh", value)


if not MYPY:
    class AttackPathSensitiveAssetConfigAttackPathAssetListArgsDict(TypedDict):
        asset_sub_type: pulumi.Input[_builtins.int]
        """
        Cloud product asset subtype.
        """
        asset_type: pulumi.Input[_builtins.int]
        """
        The asset type of the cloud product asset.
        """
        instance_id: pulumi.Input[_builtins.str]
        """
        The ID of the cloud product instance.
        """
        region_id: pulumi.Input[_builtins.str]
        """
        The region ID of the cloud product.
        """
        vendor: pulumi.Input[_builtins.int]
        """
        Cloud product asset vendor. Valid values: `0`.
        """
elif False:
    AttackPathSensitiveAssetConfigAttackPathAssetListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AttackPathSensitiveAssetConfigAttackPathAssetListArgs:
    def __init__(__self__, *,
                 asset_sub_type: pulumi.Input[_builtins.int],
                 asset_type: pulumi.Input[_builtins.int],
                 instance_id: pulumi.Input[_builtins.str],
                 region_id: pulumi.Input[_builtins.str],
                 vendor: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] asset_sub_type: Cloud product asset subtype.
        :param pulumi.Input[_builtins.int] asset_type: The asset type of the cloud product asset.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the cloud product instance.
        :param pulumi.Input[_builtins.str] region_id: The region ID of the cloud product.
        :param pulumi.Input[_builtins.int] vendor: Cloud product asset vendor. Valid values: `0`.
        """
        pulumi.set(__self__, "asset_sub_type", asset_sub_type)
        pulumi.set(__self__, "asset_type", asset_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "vendor", vendor)

    @_builtins.property
    @pulumi.getter(name="assetSubType")
    def asset_sub_type(self) -> pulumi.Input[_builtins.int]:
        """
        Cloud product asset subtype.
        """
        return pulumi.get(self, "asset_sub_type")

    @asset_sub_type.setter
    def asset_sub_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "asset_sub_type", value)

    @_builtins.property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> pulumi.Input[_builtins.int]:
        """
        The asset type of the cloud product asset.
        """
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "asset_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the cloud product instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        The region ID of the cloud product.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def vendor(self) -> pulumi.Input[_builtins.int]:
        """
        Cloud product asset vendor. Valid values: `0`.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "vendor", value)


if not MYPY:
    class HoneypotPresetMetaArgsDict(TypedDict):
        burp: pulumi.Input[_builtins.str]
        """
        Burp counter.
        """
        portrait_option: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Social traceability.
        """
        trojan_git: NotRequired[pulumi.Input[_builtins.str]]
        """
        Git countered.
        """
elif False:
    HoneypotPresetMetaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoneypotPresetMetaArgs:
    def __init__(__self__, *,
                 burp: pulumi.Input[_builtins.str],
                 portrait_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 trojan_git: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] burp: Burp counter.
        :param pulumi.Input[_builtins.bool] portrait_option: Social traceability.
        :param pulumi.Input[_builtins.str] trojan_git: Git countered.
        """
        pulumi.set(__self__, "burp", burp)
        if portrait_option is not None:
            pulumi.set(__self__, "portrait_option", portrait_option)
        if trojan_git is not None:
            pulumi.set(__self__, "trojan_git", trojan_git)

    @_builtins.property
    @pulumi.getter
    def burp(self) -> pulumi.Input[_builtins.str]:
        """
        Burp counter.
        """
        return pulumi.get(self, "burp")

    @burp.setter
    def burp(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "burp", value)

    @_builtins.property
    @pulumi.getter(name="portraitOption")
    def portrait_option(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Social traceability.
        """
        return pulumi.get(self, "portrait_option")

    @portrait_option.setter
    def portrait_option(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "portrait_option", value)

    @_builtins.property
    @pulumi.getter(name="trojanGit")
    def trojan_git(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git countered.
        """
        return pulumi.get(self, "trojan_git")

    @trojan_git.setter
    def trojan_git(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trojan_git", value)


if not MYPY:
    class HoneypotProbeHoneypotBindListArgsDict(TypedDict):
        bind_port_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['HoneypotProbeHoneypotBindListBindPortListArgsDict']]]]
        """
        List of listening ports.See the following `Block BindPortList`.
        """
        honeypot_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Honeypot ID.
        """
elif False:
    HoneypotProbeHoneypotBindListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoneypotProbeHoneypotBindListArgs:
    def __init__(__self__, *,
                 bind_port_lists: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotProbeHoneypotBindListBindPortListArgs']]]] = None,
                 honeypot_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HoneypotProbeHoneypotBindListBindPortListArgs']]] bind_port_lists: List of listening ports.See the following `Block BindPortList`.
        :param pulumi.Input[_builtins.str] honeypot_id: Honeypot ID.
        """
        if bind_port_lists is not None:
            pulumi.set(__self__, "bind_port_lists", bind_port_lists)
        if honeypot_id is not None:
            pulumi.set(__self__, "honeypot_id", honeypot_id)

    @_builtins.property
    @pulumi.getter(name="bindPortLists")
    def bind_port_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotProbeHoneypotBindListBindPortListArgs']]]]:
        """
        List of listening ports.See the following `Block BindPortList`.
        """
        return pulumi.get(self, "bind_port_lists")

    @bind_port_lists.setter
    def bind_port_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HoneypotProbeHoneypotBindListBindPortListArgs']]]]):
        pulumi.set(self, "bind_port_lists", value)

    @_builtins.property
    @pulumi.getter(name="honeypotId")
    def honeypot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Honeypot ID.
        """
        return pulumi.get(self, "honeypot_id")

    @honeypot_id.setter
    def honeypot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "honeypot_id", value)


if not MYPY:
    class HoneypotProbeHoneypotBindListBindPortListArgsDict(TypedDict):
        bind_port: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to bind the port.
        """
        end_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        End port.
        """
        fixed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the port is fixed.
        """
        start_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Start port.
        """
        target_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination port.
        """
elif False:
    HoneypotProbeHoneypotBindListBindPortListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoneypotProbeHoneypotBindListBindPortListArgs:
    def __init__(__self__, *,
                 bind_port: Optional[pulumi.Input[_builtins.bool]] = None,
                 end_port: Optional[pulumi.Input[_builtins.int]] = None,
                 fixed: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_port: Optional[pulumi.Input[_builtins.int]] = None,
                 target_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] bind_port: Whether to bind the port.
        :param pulumi.Input[_builtins.int] end_port: End port.
        :param pulumi.Input[_builtins.bool] fixed: Whether the port is fixed.
        :param pulumi.Input[_builtins.int] start_port: Start port.
        :param pulumi.Input[_builtins.int] target_port: Destination port.
        """
        if bind_port is not None:
            pulumi.set(__self__, "bind_port", bind_port)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if fixed is not None:
            pulumi.set(__self__, "fixed", fixed)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @_builtins.property
    @pulumi.getter(name="bindPort")
    def bind_port(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to bind the port.
        """
        return pulumi.get(self, "bind_port")

    @bind_port.setter
    def bind_port(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bind_port", value)

    @_builtins.property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        End port.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "end_port", value)

    @_builtins.property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the port is fixed.
        """
        return pulumi.get(self, "fixed")

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fixed", value)

    @_builtins.property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Start port.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "start_port", value)

    @_builtins.property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination port.
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "target_port", value)


if not MYPY:
    class SasTrailServiceTrailArgsDict(TypedDict):
        config: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service tracking on status. The value is:
        - **on:** Open
        - **off:** off.
        """
        update_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        The timestamp of the last service update. Unit: milliseconds.
        """
elif False:
    SasTrailServiceTrailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SasTrailServiceTrailArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] config: Service tracking on status. The value is:
               - **on:** Open
               - **off:** off.
        :param pulumi.Input[_builtins.int] update_time: The timestamp of the last service update. Unit: milliseconds.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service tracking on status. The value is:
        - **on:** Open
        - **off:** off.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timestamp of the last service update. Unit: milliseconds.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "update_time", value)


