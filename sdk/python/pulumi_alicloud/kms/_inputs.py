# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceBindVpcArgs',
]

@pulumi.input_type
class InstanceBindVpcArgs:
    def __init__(__self__, *,
                 region_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_owner_id: Optional[pulumi.Input[int]] = None,
                 vswitch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region_id: region id.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[int] vpc_owner_id: VPC owner root user ID.
        :param pulumi.Input[str] vswitch_id: vswitch id.
        """
        InstanceBindVpcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region_id=region_id,
            vpc_id=vpc_id,
            vpc_owner_id=vpc_owner_id,
            vswitch_id=vswitch_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region_id: Optional[pulumi.Input[str]] = None,
             vpc_id: Optional[pulumi.Input[str]] = None,
             vpc_owner_id: Optional[pulumi.Input[int]] = None,
             vswitch_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'regionId' in kwargs:
            region_id = kwargs['regionId']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'vpcOwnerId' in kwargs:
            vpc_owner_id = kwargs['vpcOwnerId']
        if 'vswitchId' in kwargs:
            vswitch_id = kwargs['vswitchId']

        if region_id is not None:
            _setter("region_id", region_id)
        if vpc_id is not None:
            _setter("vpc_id", vpc_id)
        if vpc_owner_id is not None:
            _setter("vpc_owner_id", vpc_owner_id)
        if vswitch_id is not None:
            _setter("vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        region id.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcOwnerId")
    def vpc_owner_id(self) -> Optional[pulumi.Input[int]]:
        """
        VPC owner root user ID.
        """
        return pulumi.get(self, "vpc_owner_id")

    @vpc_owner_id.setter
    def vpc_owner_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpc_owner_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[str]]:
        """
        vswitch id.
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vswitch_id", value)


