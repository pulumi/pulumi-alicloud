# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceBindVpcArgs',
    'InstanceBindVpcArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceBindVpcArgsDict(TypedDict):
        region_id: NotRequired[pulumi.Input[builtins.str]]
        """
        region id.
        """
        vpc_id: NotRequired[pulumi.Input[builtins.str]]
        """
        VPC ID.
        """
        vpc_owner_id: NotRequired[pulumi.Input[builtins.str]]
        """
        VPC owner root user ID.
        """
        vswitch_id: NotRequired[pulumi.Input[builtins.str]]
        """
        vswitch id.
        """
elif False:
    InstanceBindVpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceBindVpcArgs:
    def __init__(__self__, *,
                 region_id: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_owner_id: Optional[pulumi.Input[builtins.str]] = None,
                 vswitch_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] region_id: region id.
        :param pulumi.Input[builtins.str] vpc_id: VPC ID.
        :param pulumi.Input[builtins.str] vpc_owner_id: VPC owner root user ID.
        :param pulumi.Input[builtins.str] vswitch_id: vswitch id.
        """
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_owner_id is not None:
            pulumi.set(__self__, "vpc_owner_id", vpc_owner_id)
        if vswitch_id is not None:
            pulumi.set(__self__, "vswitch_id", vswitch_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        region id.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcOwnerId")
    def vpc_owner_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC owner root user ID.
        """
        return pulumi.get(self, "vpc_owner_id")

    @vpc_owner_id.setter
    def vpc_owner_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_owner_id", value)

    @property
    @pulumi.getter(name="vswitchId")
    def vswitch_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        vswitch id.
        """
        return pulumi.get(self, "vswitch_id")

    @vswitch_id.setter
    def vswitch_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vswitch_id", value)


