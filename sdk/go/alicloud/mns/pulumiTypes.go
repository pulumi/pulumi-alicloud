// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GetQueuesQueue struct {
	// This attribute defines the length of time, in seconds, after which every message sent to the queue is dequeued.
	DelaySeconds int `pulumi:"delaySeconds"`
	// The id of the queue, The value is set to `name`.
	Id string `pulumi:"id"`
	// This indicates the maximum length, in bytes, of any message body sent to the queue.
	MaximumMessageSize int `pulumi:"maximumMessageSize"`
	// Messages are deleted from the queue after a specified length of time, whether they have been activated or not. This attribute defines the viability period, in seconds, for every message in the queue.
	MessageRetentionPeriod int `pulumi:"messageRetentionPeriod"`
	// The name of the queue
	Name string `pulumi:"name"`
	// Long polling is measured in seconds. When this attribute is set to 0, long polling is disabled. When it is not set to 0, long polling is enabled and message dequeue requests will be processed only when valid messages are received or when long polling times out.
	PollingWaitSeconds int `pulumi:"pollingWaitSeconds"`
	// Dequeued messages change from active (visible) status to inactive (invisible) status. This attribute defines the length of time, in seconds, that messages remain invisible. Messages return to active status after the set period.
	VisibilityTimeouts int `pulumi:"visibilityTimeouts"`
}

// GetQueuesQueueInput is an input type that accepts GetQueuesQueueArgs and GetQueuesQueueOutput values.
// You can construct a concrete instance of `GetQueuesQueueInput` via:
//
//          GetQueuesQueueArgs{...}
type GetQueuesQueueInput interface {
	pulumi.Input

	ToGetQueuesQueueOutput() GetQueuesQueueOutput
	ToGetQueuesQueueOutputWithContext(context.Context) GetQueuesQueueOutput
}

type GetQueuesQueueArgs struct {
	// This attribute defines the length of time, in seconds, after which every message sent to the queue is dequeued.
	DelaySeconds pulumi.IntInput `pulumi:"delaySeconds"`
	// The id of the queue, The value is set to `name`.
	Id pulumi.StringInput `pulumi:"id"`
	// This indicates the maximum length, in bytes, of any message body sent to the queue.
	MaximumMessageSize pulumi.IntInput `pulumi:"maximumMessageSize"`
	// Messages are deleted from the queue after a specified length of time, whether they have been activated or not. This attribute defines the viability period, in seconds, for every message in the queue.
	MessageRetentionPeriod pulumi.IntInput `pulumi:"messageRetentionPeriod"`
	// The name of the queue
	Name pulumi.StringInput `pulumi:"name"`
	// Long polling is measured in seconds. When this attribute is set to 0, long polling is disabled. When it is not set to 0, long polling is enabled and message dequeue requests will be processed only when valid messages are received or when long polling times out.
	PollingWaitSeconds pulumi.IntInput `pulumi:"pollingWaitSeconds"`
	// Dequeued messages change from active (visible) status to inactive (invisible) status. This attribute defines the length of time, in seconds, that messages remain invisible. Messages return to active status after the set period.
	VisibilityTimeouts pulumi.IntInput `pulumi:"visibilityTimeouts"`
}

func (GetQueuesQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueuesQueue)(nil)).Elem()
}

func (i GetQueuesQueueArgs) ToGetQueuesQueueOutput() GetQueuesQueueOutput {
	return i.ToGetQueuesQueueOutputWithContext(context.Background())
}

func (i GetQueuesQueueArgs) ToGetQueuesQueueOutputWithContext(ctx context.Context) GetQueuesQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueuesQueueOutput)
}

// GetQueuesQueueArrayInput is an input type that accepts GetQueuesQueueArray and GetQueuesQueueArrayOutput values.
// You can construct a concrete instance of `GetQueuesQueueArrayInput` via:
//
//          GetQueuesQueueArray{ GetQueuesQueueArgs{...} }
type GetQueuesQueueArrayInput interface {
	pulumi.Input

	ToGetQueuesQueueArrayOutput() GetQueuesQueueArrayOutput
	ToGetQueuesQueueArrayOutputWithContext(context.Context) GetQueuesQueueArrayOutput
}

type GetQueuesQueueArray []GetQueuesQueueInput

func (GetQueuesQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueuesQueue)(nil)).Elem()
}

func (i GetQueuesQueueArray) ToGetQueuesQueueArrayOutput() GetQueuesQueueArrayOutput {
	return i.ToGetQueuesQueueArrayOutputWithContext(context.Background())
}

func (i GetQueuesQueueArray) ToGetQueuesQueueArrayOutputWithContext(ctx context.Context) GetQueuesQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueuesQueueArrayOutput)
}

type GetQueuesQueueOutput struct{ *pulumi.OutputState }

func (GetQueuesQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueuesQueue)(nil)).Elem()
}

func (o GetQueuesQueueOutput) ToGetQueuesQueueOutput() GetQueuesQueueOutput {
	return o
}

func (o GetQueuesQueueOutput) ToGetQueuesQueueOutputWithContext(ctx context.Context) GetQueuesQueueOutput {
	return o
}

// This attribute defines the length of time, in seconds, after which every message sent to the queue is dequeued.
func (o GetQueuesQueueOutput) DelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetQueuesQueue) int { return v.DelaySeconds }).(pulumi.IntOutput)
}

// The id of the queue, The value is set to `name`.
func (o GetQueuesQueueOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueuesQueue) string { return v.Id }).(pulumi.StringOutput)
}

// This indicates the maximum length, in bytes, of any message body sent to the queue.
func (o GetQueuesQueueOutput) MaximumMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetQueuesQueue) int { return v.MaximumMessageSize }).(pulumi.IntOutput)
}

// Messages are deleted from the queue after a specified length of time, whether they have been activated or not. This attribute defines the viability period, in seconds, for every message in the queue.
func (o GetQueuesQueueOutput) MessageRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetQueuesQueue) int { return v.MessageRetentionPeriod }).(pulumi.IntOutput)
}

// The name of the queue
func (o GetQueuesQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueuesQueue) string { return v.Name }).(pulumi.StringOutput)
}

// Long polling is measured in seconds. When this attribute is set to 0, long polling is disabled. When it is not set to 0, long polling is enabled and message dequeue requests will be processed only when valid messages are received or when long polling times out.
func (o GetQueuesQueueOutput) PollingWaitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetQueuesQueue) int { return v.PollingWaitSeconds }).(pulumi.IntOutput)
}

// Dequeued messages change from active (visible) status to inactive (invisible) status. This attribute defines the length of time, in seconds, that messages remain invisible. Messages return to active status after the set period.
func (o GetQueuesQueueOutput) VisibilityTimeouts() pulumi.IntOutput {
	return o.ApplyT(func(v GetQueuesQueue) int { return v.VisibilityTimeouts }).(pulumi.IntOutput)
}

type GetQueuesQueueArrayOutput struct{ *pulumi.OutputState }

func (GetQueuesQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueuesQueue)(nil)).Elem()
}

func (o GetQueuesQueueArrayOutput) ToGetQueuesQueueArrayOutput() GetQueuesQueueArrayOutput {
	return o
}

func (o GetQueuesQueueArrayOutput) ToGetQueuesQueueArrayOutputWithContext(ctx context.Context) GetQueuesQueueArrayOutput {
	return o
}

func (o GetQueuesQueueArrayOutput) Index(i pulumi.IntInput) GetQueuesQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQueuesQueue {
		return vs[0].([]GetQueuesQueue)[vs[1].(int)]
	}).(GetQueuesQueueOutput)
}

type GetTopicSubscriptionsSubscription struct {
	// Describe the terminal address of the message received in this subscription.
	// * `filterTag`- A string to filter resulting messages of the topic by their message tag.
	Endpoint  string `pulumi:"endpoint"`
	FilterTag string `pulumi:"filterTag"`
	// The ID of the topic subscription. The value is set to `name`.
	Id string `pulumi:"id"`
	// The name of the subscription.
	// * `topicName`- The topic which The subscription belongs to was named with the name.
	Name string `pulumi:"name"`
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users.
	NotifyContentFormat string `pulumi:"notifyContentFormat"`
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails.
	NotifyStrategy string `pulumi:"notifyStrategy"`
	// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	TopicName string `pulumi:"topicName"`
}

// GetTopicSubscriptionsSubscriptionInput is an input type that accepts GetTopicSubscriptionsSubscriptionArgs and GetTopicSubscriptionsSubscriptionOutput values.
// You can construct a concrete instance of `GetTopicSubscriptionsSubscriptionInput` via:
//
//          GetTopicSubscriptionsSubscriptionArgs{...}
type GetTopicSubscriptionsSubscriptionInput interface {
	pulumi.Input

	ToGetTopicSubscriptionsSubscriptionOutput() GetTopicSubscriptionsSubscriptionOutput
	ToGetTopicSubscriptionsSubscriptionOutputWithContext(context.Context) GetTopicSubscriptionsSubscriptionOutput
}

type GetTopicSubscriptionsSubscriptionArgs struct {
	// Describe the terminal address of the message received in this subscription.
	// * `filterTag`- A string to filter resulting messages of the topic by their message tag.
	Endpoint  pulumi.StringInput `pulumi:"endpoint"`
	FilterTag pulumi.StringInput `pulumi:"filterTag"`
	// The ID of the topic subscription. The value is set to `name`.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the subscription.
	// * `topicName`- The topic which The subscription belongs to was named with the name.
	Name pulumi.StringInput `pulumi:"name"`
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users.
	NotifyContentFormat pulumi.StringInput `pulumi:"notifyContentFormat"`
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails.
	NotifyStrategy pulumi.StringInput `pulumi:"notifyStrategy"`
	// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetTopicSubscriptionsSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicSubscriptionsSubscription)(nil)).Elem()
}

func (i GetTopicSubscriptionsSubscriptionArgs) ToGetTopicSubscriptionsSubscriptionOutput() GetTopicSubscriptionsSubscriptionOutput {
	return i.ToGetTopicSubscriptionsSubscriptionOutputWithContext(context.Background())
}

func (i GetTopicSubscriptionsSubscriptionArgs) ToGetTopicSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetTopicSubscriptionsSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicSubscriptionsSubscriptionOutput)
}

// GetTopicSubscriptionsSubscriptionArrayInput is an input type that accepts GetTopicSubscriptionsSubscriptionArray and GetTopicSubscriptionsSubscriptionArrayOutput values.
// You can construct a concrete instance of `GetTopicSubscriptionsSubscriptionArrayInput` via:
//
//          GetTopicSubscriptionsSubscriptionArray{ GetTopicSubscriptionsSubscriptionArgs{...} }
type GetTopicSubscriptionsSubscriptionArrayInput interface {
	pulumi.Input

	ToGetTopicSubscriptionsSubscriptionArrayOutput() GetTopicSubscriptionsSubscriptionArrayOutput
	ToGetTopicSubscriptionsSubscriptionArrayOutputWithContext(context.Context) GetTopicSubscriptionsSubscriptionArrayOutput
}

type GetTopicSubscriptionsSubscriptionArray []GetTopicSubscriptionsSubscriptionInput

func (GetTopicSubscriptionsSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicSubscriptionsSubscription)(nil)).Elem()
}

func (i GetTopicSubscriptionsSubscriptionArray) ToGetTopicSubscriptionsSubscriptionArrayOutput() GetTopicSubscriptionsSubscriptionArrayOutput {
	return i.ToGetTopicSubscriptionsSubscriptionArrayOutputWithContext(context.Background())
}

func (i GetTopicSubscriptionsSubscriptionArray) ToGetTopicSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetTopicSubscriptionsSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicSubscriptionsSubscriptionArrayOutput)
}

type GetTopicSubscriptionsSubscriptionOutput struct{ *pulumi.OutputState }

func (GetTopicSubscriptionsSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicSubscriptionsSubscription)(nil)).Elem()
}

func (o GetTopicSubscriptionsSubscriptionOutput) ToGetTopicSubscriptionsSubscriptionOutput() GetTopicSubscriptionsSubscriptionOutput {
	return o
}

func (o GetTopicSubscriptionsSubscriptionOutput) ToGetTopicSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetTopicSubscriptionsSubscriptionOutput {
	return o
}

// Describe the terminal address of the message received in this subscription.
// * `filterTag`- A string to filter resulting messages of the topic by their message tag.
func (o GetTopicSubscriptionsSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.Endpoint }).(pulumi.StringOutput)
}

func (o GetTopicSubscriptionsSubscriptionOutput) FilterTag() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.FilterTag }).(pulumi.StringOutput)
}

// The ID of the topic subscription. The value is set to `name`.
func (o GetTopicSubscriptionsSubscriptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the subscription.
// * `topicName`- The topic which The subscription belongs to was named with the name.
func (o GetTopicSubscriptionsSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.Name }).(pulumi.StringOutput)
}

// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users.
func (o GetTopicSubscriptionsSubscriptionOutput) NotifyContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.NotifyContentFormat }).(pulumi.StringOutput)
}

// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails.
func (o GetTopicSubscriptionsSubscriptionOutput) NotifyStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.NotifyStrategy }).(pulumi.StringOutput)
}

// Two topics on a single account in the same region cannot have the same name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
func (o GetTopicSubscriptionsSubscriptionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSubscriptionsSubscription) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetTopicSubscriptionsSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (GetTopicSubscriptionsSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicSubscriptionsSubscription)(nil)).Elem()
}

func (o GetTopicSubscriptionsSubscriptionArrayOutput) ToGetTopicSubscriptionsSubscriptionArrayOutput() GetTopicSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetTopicSubscriptionsSubscriptionArrayOutput) ToGetTopicSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetTopicSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetTopicSubscriptionsSubscriptionArrayOutput) Index(i pulumi.IntInput) GetTopicSubscriptionsSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicSubscriptionsSubscription {
		return vs[0].([]GetTopicSubscriptionsSubscription)[vs[1].(int)]
	}).(GetTopicSubscriptionsSubscriptionOutput)
}

type GetTopicsTopic struct {
	// The id of the topic. The value is set to `name`.
	Id string `pulumi:"id"`
	// Whether to enable logging.
	LoggingEnabled bool `pulumi:"loggingEnabled"`
	// This indicates the maximum length, in bytes, of any message body sent to the topic.
	MaximumMessageSize int `pulumi:"maximumMessageSize"`
	// The name of the topic.
	Name string `pulumi:"name"`
}

// GetTopicsTopicInput is an input type that accepts GetTopicsTopicArgs and GetTopicsTopicOutput values.
// You can construct a concrete instance of `GetTopicsTopicInput` via:
//
//          GetTopicsTopicArgs{...}
type GetTopicsTopicInput interface {
	pulumi.Input

	ToGetTopicsTopicOutput() GetTopicsTopicOutput
	ToGetTopicsTopicOutputWithContext(context.Context) GetTopicsTopicOutput
}

type GetTopicsTopicArgs struct {
	// The id of the topic. The value is set to `name`.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether to enable logging.
	LoggingEnabled pulumi.BoolInput `pulumi:"loggingEnabled"`
	// This indicates the maximum length, in bytes, of any message body sent to the topic.
	MaximumMessageSize pulumi.IntInput `pulumi:"maximumMessageSize"`
	// The name of the topic.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return i.ToGetTopicsTopicOutputWithContext(context.Background())
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicOutput)
}

// GetTopicsTopicArrayInput is an input type that accepts GetTopicsTopicArray and GetTopicsTopicArrayOutput values.
// You can construct a concrete instance of `GetTopicsTopicArrayInput` via:
//
//          GetTopicsTopicArray{ GetTopicsTopicArgs{...} }
type GetTopicsTopicArrayInput interface {
	pulumi.Input

	ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput
	ToGetTopicsTopicArrayOutputWithContext(context.Context) GetTopicsTopicArrayOutput
}

type GetTopicsTopicArray []GetTopicsTopicInput

func (GetTopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return i.ToGetTopicsTopicArrayOutputWithContext(context.Background())
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicArrayOutput)
}

type GetTopicsTopicOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return o
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return o
}

// The id of the topic. The value is set to `name`.
func (o GetTopicsTopicOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to enable logging.
func (o GetTopicsTopicOutput) LoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTopicsTopic) bool { return v.LoggingEnabled }).(pulumi.BoolOutput)
}

// This indicates the maximum length, in bytes, of any message body sent to the topic.
func (o GetTopicsTopicOutput) MaximumMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopic) int { return v.MaximumMessageSize }).(pulumi.IntOutput)
}

// The name of the topic.
func (o GetTopicsTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Name }).(pulumi.StringOutput)
}

type GetTopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) Index(i pulumi.IntInput) GetTopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsTopic {
		return vs[0].([]GetTopicsTopic)[vs[1].(int)]
	}).(GetTopicsTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueuesQueueInput)(nil)).Elem(), GetQueuesQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueuesQueueArrayInput)(nil)).Elem(), GetQueuesQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicSubscriptionsSubscriptionInput)(nil)).Elem(), GetTopicSubscriptionsSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicSubscriptionsSubscriptionArrayInput)(nil)).Elem(), GetTopicSubscriptionsSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicInput)(nil)).Elem(), GetTopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicArrayInput)(nil)).Elem(), GetTopicsTopicArray{})
	pulumi.RegisterOutputType(GetQueuesQueueOutput{})
	pulumi.RegisterOutputType(GetQueuesQueueArrayOutput{})
	pulumi.RegisterOutputType(GetTopicSubscriptionsSubscriptionOutput{})
	pulumi.RegisterOutputType(GetTopicSubscriptionsSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicArrayOutput{})
}
