// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package brain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Brain Industrial Pid Loop resource.
//
// > **NOTE:** Available in v1.117.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/brain"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := brain.NewIndustrialPidLoop(ctx, "example", &brain.IndustrialPidLoopArgs{
// 			PidLoopConfiguration: pulumi.String("YourLoopConfiguration"),
// 			PidLoopDcsType:       pulumi.String("standard"),
// 			PidLoopIsCrucial:     pulumi.Bool(true),
// 			PidLoopName:          pulumi.String("tf-testAcc"),
// 			PidLoopType:          pulumi.String("0"),
// 			PidProjectId:         pulumi.String("856c6b8f-ca63-40a4-xxxx-xxxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Brain Industrial Pid Loop can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:brain/industrialPidLoop:IndustrialPidLoop example <id>
// ```
type IndustrialPidLoop struct {
	pulumi.CustomResourceState

	// The Pid Loop Configuration.
	PidLoopConfiguration pulumi.StringOutput `pulumi:"pidLoopConfiguration"`
	// The dcs type of Pid Loop. Valid values: `standard`.
	PidLoopDcsType pulumi.StringOutput `pulumi:"pidLoopDcsType"`
	// The desc of Pid Loop.
	PidLoopDesc pulumi.StringPtrOutput `pulumi:"pidLoopDesc"`
	// Whether is crucial Pid Loop.
	PidLoopIsCrucial pulumi.BoolOutput `pulumi:"pidLoopIsCrucial"`
	// The name of Pid Loop.
	PidLoopName pulumi.StringOutput `pulumi:"pidLoopName"`
	// The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
	PidLoopType pulumi.StringOutput `pulumi:"pidLoopType"`
	// The pid project id.
	PidProjectId pulumi.StringOutput `pulumi:"pidProjectId"`
	// The status of Pid Loop.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewIndustrialPidLoop registers a new resource with the given unique name, arguments, and options.
func NewIndustrialPidLoop(ctx *pulumi.Context,
	name string, args *IndustrialPidLoopArgs, opts ...pulumi.ResourceOption) (*IndustrialPidLoop, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PidLoopConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'PidLoopConfiguration'")
	}
	if args.PidLoopDcsType == nil {
		return nil, errors.New("invalid value for required argument 'PidLoopDcsType'")
	}
	if args.PidLoopIsCrucial == nil {
		return nil, errors.New("invalid value for required argument 'PidLoopIsCrucial'")
	}
	if args.PidLoopName == nil {
		return nil, errors.New("invalid value for required argument 'PidLoopName'")
	}
	if args.PidLoopType == nil {
		return nil, errors.New("invalid value for required argument 'PidLoopType'")
	}
	if args.PidProjectId == nil {
		return nil, errors.New("invalid value for required argument 'PidProjectId'")
	}
	var resource IndustrialPidLoop
	err := ctx.RegisterResource("alicloud:brain/industrialPidLoop:IndustrialPidLoop", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndustrialPidLoop gets an existing IndustrialPidLoop resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndustrialPidLoop(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndustrialPidLoopState, opts ...pulumi.ResourceOption) (*IndustrialPidLoop, error) {
	var resource IndustrialPidLoop
	err := ctx.ReadResource("alicloud:brain/industrialPidLoop:IndustrialPidLoop", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IndustrialPidLoop resources.
type industrialPidLoopState struct {
	// The Pid Loop Configuration.
	PidLoopConfiguration *string `pulumi:"pidLoopConfiguration"`
	// The dcs type of Pid Loop. Valid values: `standard`.
	PidLoopDcsType *string `pulumi:"pidLoopDcsType"`
	// The desc of Pid Loop.
	PidLoopDesc *string `pulumi:"pidLoopDesc"`
	// Whether is crucial Pid Loop.
	PidLoopIsCrucial *bool `pulumi:"pidLoopIsCrucial"`
	// The name of Pid Loop.
	PidLoopName *string `pulumi:"pidLoopName"`
	// The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
	PidLoopType *string `pulumi:"pidLoopType"`
	// The pid project id.
	PidProjectId *string `pulumi:"pidProjectId"`
	// The status of Pid Loop.
	Status *string `pulumi:"status"`
}

type IndustrialPidLoopState struct {
	// The Pid Loop Configuration.
	PidLoopConfiguration pulumi.StringPtrInput
	// The dcs type of Pid Loop. Valid values: `standard`.
	PidLoopDcsType pulumi.StringPtrInput
	// The desc of Pid Loop.
	PidLoopDesc pulumi.StringPtrInput
	// Whether is crucial Pid Loop.
	PidLoopIsCrucial pulumi.BoolPtrInput
	// The name of Pid Loop.
	PidLoopName pulumi.StringPtrInput
	// The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
	PidLoopType pulumi.StringPtrInput
	// The pid project id.
	PidProjectId pulumi.StringPtrInput
	// The status of Pid Loop.
	Status pulumi.StringPtrInput
}

func (IndustrialPidLoopState) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidLoopState)(nil)).Elem()
}

type industrialPidLoopArgs struct {
	// The Pid Loop Configuration.
	PidLoopConfiguration string `pulumi:"pidLoopConfiguration"`
	// The dcs type of Pid Loop. Valid values: `standard`.
	PidLoopDcsType string `pulumi:"pidLoopDcsType"`
	// The desc of Pid Loop.
	PidLoopDesc *string `pulumi:"pidLoopDesc"`
	// Whether is crucial Pid Loop.
	PidLoopIsCrucial bool `pulumi:"pidLoopIsCrucial"`
	// The name of Pid Loop.
	PidLoopName string `pulumi:"pidLoopName"`
	// The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
	PidLoopType string `pulumi:"pidLoopType"`
	// The pid project id.
	PidProjectId string `pulumi:"pidProjectId"`
}

// The set of arguments for constructing a IndustrialPidLoop resource.
type IndustrialPidLoopArgs struct {
	// The Pid Loop Configuration.
	PidLoopConfiguration pulumi.StringInput
	// The dcs type of Pid Loop. Valid values: `standard`.
	PidLoopDcsType pulumi.StringInput
	// The desc of Pid Loop.
	PidLoopDesc pulumi.StringPtrInput
	// Whether is crucial Pid Loop.
	PidLoopIsCrucial pulumi.BoolInput
	// The name of Pid Loop.
	PidLoopName pulumi.StringInput
	// The type of Pid Loop. Valid values: `0`, `1`, `2`, `3`, `4`, `5`.
	PidLoopType pulumi.StringInput
	// The pid project id.
	PidProjectId pulumi.StringInput
}

func (IndustrialPidLoopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*industrialPidLoopArgs)(nil)).Elem()
}

type IndustrialPidLoopInput interface {
	pulumi.Input

	ToIndustrialPidLoopOutput() IndustrialPidLoopOutput
	ToIndustrialPidLoopOutputWithContext(ctx context.Context) IndustrialPidLoopOutput
}

func (*IndustrialPidLoop) ElementType() reflect.Type {
	return reflect.TypeOf((**IndustrialPidLoop)(nil)).Elem()
}

func (i *IndustrialPidLoop) ToIndustrialPidLoopOutput() IndustrialPidLoopOutput {
	return i.ToIndustrialPidLoopOutputWithContext(context.Background())
}

func (i *IndustrialPidLoop) ToIndustrialPidLoopOutputWithContext(ctx context.Context) IndustrialPidLoopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndustrialPidLoopOutput)
}

// IndustrialPidLoopArrayInput is an input type that accepts IndustrialPidLoopArray and IndustrialPidLoopArrayOutput values.
// You can construct a concrete instance of `IndustrialPidLoopArrayInput` via:
//
//          IndustrialPidLoopArray{ IndustrialPidLoopArgs{...} }
type IndustrialPidLoopArrayInput interface {
	pulumi.Input

	ToIndustrialPidLoopArrayOutput() IndustrialPidLoopArrayOutput
	ToIndustrialPidLoopArrayOutputWithContext(context.Context) IndustrialPidLoopArrayOutput
}

type IndustrialPidLoopArray []IndustrialPidLoopInput

func (IndustrialPidLoopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IndustrialPidLoop)(nil)).Elem()
}

func (i IndustrialPidLoopArray) ToIndustrialPidLoopArrayOutput() IndustrialPidLoopArrayOutput {
	return i.ToIndustrialPidLoopArrayOutputWithContext(context.Background())
}

func (i IndustrialPidLoopArray) ToIndustrialPidLoopArrayOutputWithContext(ctx context.Context) IndustrialPidLoopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndustrialPidLoopArrayOutput)
}

// IndustrialPidLoopMapInput is an input type that accepts IndustrialPidLoopMap and IndustrialPidLoopMapOutput values.
// You can construct a concrete instance of `IndustrialPidLoopMapInput` via:
//
//          IndustrialPidLoopMap{ "key": IndustrialPidLoopArgs{...} }
type IndustrialPidLoopMapInput interface {
	pulumi.Input

	ToIndustrialPidLoopMapOutput() IndustrialPidLoopMapOutput
	ToIndustrialPidLoopMapOutputWithContext(context.Context) IndustrialPidLoopMapOutput
}

type IndustrialPidLoopMap map[string]IndustrialPidLoopInput

func (IndustrialPidLoopMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IndustrialPidLoop)(nil)).Elem()
}

func (i IndustrialPidLoopMap) ToIndustrialPidLoopMapOutput() IndustrialPidLoopMapOutput {
	return i.ToIndustrialPidLoopMapOutputWithContext(context.Background())
}

func (i IndustrialPidLoopMap) ToIndustrialPidLoopMapOutputWithContext(ctx context.Context) IndustrialPidLoopMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndustrialPidLoopMapOutput)
}

type IndustrialPidLoopOutput struct{ *pulumi.OutputState }

func (IndustrialPidLoopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndustrialPidLoop)(nil)).Elem()
}

func (o IndustrialPidLoopOutput) ToIndustrialPidLoopOutput() IndustrialPidLoopOutput {
	return o
}

func (o IndustrialPidLoopOutput) ToIndustrialPidLoopOutputWithContext(ctx context.Context) IndustrialPidLoopOutput {
	return o
}

type IndustrialPidLoopArrayOutput struct{ *pulumi.OutputState }

func (IndustrialPidLoopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IndustrialPidLoop)(nil)).Elem()
}

func (o IndustrialPidLoopArrayOutput) ToIndustrialPidLoopArrayOutput() IndustrialPidLoopArrayOutput {
	return o
}

func (o IndustrialPidLoopArrayOutput) ToIndustrialPidLoopArrayOutputWithContext(ctx context.Context) IndustrialPidLoopArrayOutput {
	return o
}

func (o IndustrialPidLoopArrayOutput) Index(i pulumi.IntInput) IndustrialPidLoopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IndustrialPidLoop {
		return vs[0].([]*IndustrialPidLoop)[vs[1].(int)]
	}).(IndustrialPidLoopOutput)
}

type IndustrialPidLoopMapOutput struct{ *pulumi.OutputState }

func (IndustrialPidLoopMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IndustrialPidLoop)(nil)).Elem()
}

func (o IndustrialPidLoopMapOutput) ToIndustrialPidLoopMapOutput() IndustrialPidLoopMapOutput {
	return o
}

func (o IndustrialPidLoopMapOutput) ToIndustrialPidLoopMapOutputWithContext(ctx context.Context) IndustrialPidLoopMapOutput {
	return o
}

func (o IndustrialPidLoopMapOutput) MapIndex(k pulumi.StringInput) IndustrialPidLoopOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IndustrialPidLoop {
		return vs[0].(map[string]*IndustrialPidLoop)[vs[1].(string)]
	}).(IndustrialPidLoopOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndustrialPidLoopInput)(nil)).Elem(), &IndustrialPidLoop{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndustrialPidLoopArrayInput)(nil)).Elem(), IndustrialPidLoopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndustrialPidLoopMapInput)(nil)).Elem(), IndustrialPidLoopMap{})
	pulumi.RegisterOutputType(IndustrialPidLoopOutput{})
	pulumi.RegisterOutputType(IndustrialPidLoopArrayOutput{})
	pulumi.RegisterOutputType(IndustrialPidLoopMapOutput{})
}
