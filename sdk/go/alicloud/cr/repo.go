// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource will help you to manager Container Registry repositories.
//
// > **NOTE:** Available in v1.35.0+.
//
// > **NOTE:** You need to set your registry password in Container Registry console before use this resource.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cr.NewNamespace(ctx, "my-namespace", &cr.NamespaceArgs{
//				AutoCreate:        pulumi.Bool(false),
//				DefaultVisibility: pulumi.String("PUBLIC"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cr.NewRepo(ctx, "my-repo", &cr.RepoArgs{
//				Namespace: my_namespace.Name,
//				Summary:   pulumi.String("this is summary of my new repo"),
//				RepoType:  pulumi.String("PUBLIC"),
//				Detail:    pulumi.String("this is a public repo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Registry repository can be imported using the `namespace/repository`, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cr/repo:Repo default `my-namespace/my-repo`
//
// ```
type Repo struct {
	pulumi.CustomResourceState

	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail pulumi.StringPtrOutput `pulumi:"detail"`
	// The repository domain list.
	DomainList RepoDomainListOutput `pulumi:"domainList"`
	// Name of container registry repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of container registry namespace where repository is located.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType pulumi.StringOutput `pulumi:"repoType"`
	// The repository general information. It can contain 1 to 80 characters.
	Summary pulumi.StringOutput `pulumi:"summary"`
}

// NewRepo registers a new resource with the given unique name, arguments, and options.
func NewRepo(ctx *pulumi.Context,
	name string, args *RepoArgs, opts ...pulumi.ResourceOption) (*Repo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.RepoType == nil {
		return nil, errors.New("invalid value for required argument 'RepoType'")
	}
	if args.Summary == nil {
		return nil, errors.New("invalid value for required argument 'Summary'")
	}
	var resource Repo
	err := ctx.RegisterResource("alicloud:cr/repo:Repo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepo gets an existing Repo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoState, opts ...pulumi.ResourceOption) (*Repo, error) {
	var resource Repo
	err := ctx.ReadResource("alicloud:cr/repo:Repo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repo resources.
type repoState struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail *string `pulumi:"detail"`
	// The repository domain list.
	DomainList *RepoDomainList `pulumi:"domainList"`
	// Name of container registry repository.
	Name *string `pulumi:"name"`
	// Name of container registry namespace where repository is located.
	Namespace *string `pulumi:"namespace"`
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType *string `pulumi:"repoType"`
	// The repository general information. It can contain 1 to 80 characters.
	Summary *string `pulumi:"summary"`
}

type RepoState struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail pulumi.StringPtrInput
	// The repository domain list.
	DomainList RepoDomainListPtrInput
	// Name of container registry repository.
	Name pulumi.StringPtrInput
	// Name of container registry namespace where repository is located.
	Namespace pulumi.StringPtrInput
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType pulumi.StringPtrInput
	// The repository general information. It can contain 1 to 80 characters.
	Summary pulumi.StringPtrInput
}

func (RepoState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoState)(nil)).Elem()
}

type repoArgs struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail *string `pulumi:"detail"`
	// Name of container registry repository.
	Name *string `pulumi:"name"`
	// Name of container registry namespace where repository is located.
	Namespace string `pulumi:"namespace"`
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType string `pulumi:"repoType"`
	// The repository general information. It can contain 1 to 80 characters.
	Summary string `pulumi:"summary"`
}

// The set of arguments for constructing a Repo resource.
type RepoArgs struct {
	// The repository specific information. MarkDown format is supported, and the length limit is 2000.
	Detail pulumi.StringPtrInput
	// Name of container registry repository.
	Name pulumi.StringPtrInput
	// Name of container registry namespace where repository is located.
	Namespace pulumi.StringInput
	// `PUBLIC` or `PRIVATE`, repo's visibility.
	RepoType pulumi.StringInput
	// The repository general information. It can contain 1 to 80 characters.
	Summary pulumi.StringInput
}

func (RepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoArgs)(nil)).Elem()
}

type RepoInput interface {
	pulumi.Input

	ToRepoOutput() RepoOutput
	ToRepoOutputWithContext(ctx context.Context) RepoOutput
}

func (*Repo) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (i *Repo) ToRepoOutput() RepoOutput {
	return i.ToRepoOutputWithContext(context.Background())
}

func (i *Repo) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoOutput)
}

// RepoArrayInput is an input type that accepts RepoArray and RepoArrayOutput values.
// You can construct a concrete instance of `RepoArrayInput` via:
//
//	RepoArray{ RepoArgs{...} }
type RepoArrayInput interface {
	pulumi.Input

	ToRepoArrayOutput() RepoArrayOutput
	ToRepoArrayOutputWithContext(context.Context) RepoArrayOutput
}

type RepoArray []RepoInput

func (RepoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (i RepoArray) ToRepoArrayOutput() RepoArrayOutput {
	return i.ToRepoArrayOutputWithContext(context.Background())
}

func (i RepoArray) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoArrayOutput)
}

// RepoMapInput is an input type that accepts RepoMap and RepoMapOutput values.
// You can construct a concrete instance of `RepoMapInput` via:
//
//	RepoMap{ "key": RepoArgs{...} }
type RepoMapInput interface {
	pulumi.Input

	ToRepoMapOutput() RepoMapOutput
	ToRepoMapOutputWithContext(context.Context) RepoMapOutput
}

type RepoMap map[string]RepoInput

func (RepoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (i RepoMap) ToRepoMapOutput() RepoMapOutput {
	return i.ToRepoMapOutputWithContext(context.Background())
}

func (i RepoMap) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoMapOutput)
}

type RepoOutput struct{ *pulumi.OutputState }

func (RepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (o RepoOutput) ToRepoOutput() RepoOutput {
	return o
}

func (o RepoOutput) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return o
}

// The repository specific information. MarkDown format is supported, and the length limit is 2000.
func (o RepoOutput) Detail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.Detail }).(pulumi.StringPtrOutput)
}

// The repository domain list.
func (o RepoOutput) DomainList() RepoDomainListOutput {
	return o.ApplyT(func(v *Repo) RepoDomainListOutput { return v.DomainList }).(RepoDomainListOutput)
}

// Name of container registry repository.
func (o RepoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of container registry namespace where repository is located.
func (o RepoOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// `PUBLIC` or `PRIVATE`, repo's visibility.
func (o RepoOutput) RepoType() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.RepoType }).(pulumi.StringOutput)
}

// The repository general information. It can contain 1 to 80 characters.
func (o RepoOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Summary }).(pulumi.StringOutput)
}

type RepoArrayOutput struct{ *pulumi.OutputState }

func (RepoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (o RepoArrayOutput) ToRepoArrayOutput() RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) Index(i pulumi.IntInput) RepoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].([]*Repo)[vs[1].(int)]
	}).(RepoOutput)
}

type RepoMapOutput struct{ *pulumi.OutputState }

func (RepoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (o RepoMapOutput) ToRepoMapOutput() RepoMapOutput {
	return o
}

func (o RepoMapOutput) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return o
}

func (o RepoMapOutput) MapIndex(k pulumi.StringInput) RepoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].(map[string]*Repo)[vs[1].(string)]
	}).(RepoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoInput)(nil)).Elem(), &Repo{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoArrayInput)(nil)).Elem(), RepoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoMapInput)(nil)).Elem(), RepoMap{})
	pulumi.RegisterOutputType(RepoOutput{})
	pulumi.RegisterOutputType(RepoArrayOutput{})
	pulumi.RegisterOutputType(RepoMapOutput{})
}
