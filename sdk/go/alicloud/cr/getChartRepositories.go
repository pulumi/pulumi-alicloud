// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Cr Chart Repositories of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.149.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cr.GetChartRepositories(ctx, &cr.GetChartRepositoriesArgs{
// 			InstanceId: "example_value",
// 			Ids: []string{
// 				"example_value-1",
// 				"example_value-2",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("crChartRepositoryId1", data.Alicloud_cr_chart_repositories.Default.Ids[0])
// 		return nil
// 	})
// }
// ```
func GetChartRepositories(ctx *pulumi.Context, args *GetChartRepositoriesArgs, opts ...pulumi.InvokeOption) (*GetChartRepositoriesResult, error) {
	var rv GetChartRepositoriesResult
	err := ctx.Invoke("alicloud:cr/getChartRepositories:getChartRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getChartRepositories.
type GetChartRepositoriesArgs struct {
	// A list of matched Container Registry Enterprise Edition repositories.
	Ids []string `pulumi:"ids"`
	// The ID of the Container Registry instance.
	InstanceId string `pulumi:"instanceId"`
	// A regex string to filter results by repository name.
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getChartRepositories.
type GetChartRepositoriesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string                           `pulumi:"id"`
	Ids          []string                         `pulumi:"ids"`
	InstanceId   string                           `pulumi:"instanceId"`
	NameRegex    *string                          `pulumi:"nameRegex"`
	Names        []string                         `pulumi:"names"`
	OutputFile   *string                          `pulumi:"outputFile"`
	Repositories []GetChartRepositoriesRepository `pulumi:"repositories"`
}

func GetChartRepositoriesOutput(ctx *pulumi.Context, args GetChartRepositoriesOutputArgs, opts ...pulumi.InvokeOption) GetChartRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetChartRepositoriesResult, error) {
			args := v.(GetChartRepositoriesArgs)
			r, err := GetChartRepositories(ctx, &args, opts...)
			var s GetChartRepositoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetChartRepositoriesResultOutput)
}

// A collection of arguments for invoking getChartRepositories.
type GetChartRepositoriesOutputArgs struct {
	// A list of matched Container Registry Enterprise Edition repositories.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The ID of the Container Registry instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// A regex string to filter results by repository name.
	NameRegex  pulumi.StringPtrInput `pulumi:"nameRegex"`
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetChartRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChartRepositoriesArgs)(nil)).Elem()
}

// A collection of values returned by getChartRepositories.
type GetChartRepositoriesResultOutput struct{ *pulumi.OutputState }

func (GetChartRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChartRepositoriesResult)(nil)).Elem()
}

func (o GetChartRepositoriesResultOutput) ToGetChartRepositoriesResultOutput() GetChartRepositoriesResultOutput {
	return o
}

func (o GetChartRepositoriesResultOutput) ToGetChartRepositoriesResultOutputWithContext(ctx context.Context) GetChartRepositoriesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetChartRepositoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetChartRepositoriesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetChartRepositoriesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetChartRepositoriesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetChartRepositoriesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetChartRepositoriesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetChartRepositoriesResultOutput) Repositories() GetChartRepositoriesRepositoryArrayOutput {
	return o.ApplyT(func(v GetChartRepositoriesResult) []GetChartRepositoriesRepository { return v.Repositories }).(GetChartRepositoriesRepositoryArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetChartRepositoriesResultOutput{})
}
