// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Log Service (SLS) Machine Group resource.
//
// For information about Log Service (SLS) Machine Group and how to use it, see [What is Machine Group](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateMachineGroup).
//
// > **NOTE:** Available since v1.259.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			projectName := "project-for-machine-group-terraform"
//			if param := cfg.Get("projectName"); param != "" {
//				projectName = param
//			}
//			_, err := log.NewProject(ctx, "defaultyJqrue", &log.ProjectArgs{
//				Description: pulumi.String("for terraform example"),
//				Name:        pulumi.String(projectName),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sls.NewMachineGroup(ctx, "default", &sls.MachineGroupArgs{
//				GroupName:           pulumi.String("group1"),
//				ProjectName:         pulumi.String(projectName),
//				MachineIdentifyType: pulumi.String("ip"),
//				GroupAttribute: &sls.MachineGroupGroupAttributeArgs{
//					GroupTopic:   pulumi.String("example"),
//					ExternalName: pulumi.String("example"),
//				},
//				MachineLists: pulumi.StringArray{
//					pulumi.String("192.168.1.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Log Service (SLS) Machine Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:sls/machineGroup:MachineGroup example <project_name>:<group_name>
// ```
type MachineGroup struct {
	pulumi.CustomResourceState

	// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
	GroupAttribute MachineGroupGroupAttributePtrOutput `pulumi:"groupAttribute"`
	// Machine Group name
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Machine group type, optional value is empty.
	GroupType pulumi.StringPtrOutput `pulumi:"groupType"`
	// Machine identification type.
	// - ip: ip address Machine Group.
	// - userdefined: user-defined identity Machine Group.
	MachineIdentifyType pulumi.StringOutput `pulumi:"machineIdentifyType"`
	// The identification information of the machine group.
	// - If machineidentifiytype is configured to ip, enter the ip address of the server.
	// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
	MachineLists pulumi.StringArrayOutput `pulumi:"machineLists"`
	// Project name
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
}

// NewMachineGroup registers a new resource with the given unique name, arguments, and options.
func NewMachineGroup(ctx *pulumi.Context,
	name string, args *MachineGroupArgs, opts ...pulumi.ResourceOption) (*MachineGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.MachineIdentifyType == nil {
		return nil, errors.New("invalid value for required argument 'MachineIdentifyType'")
	}
	if args.MachineLists == nil {
		return nil, errors.New("invalid value for required argument 'MachineLists'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineGroup
	err := ctx.RegisterResource("alicloud:sls/machineGroup:MachineGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineGroup gets an existing MachineGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineGroupState, opts ...pulumi.ResourceOption) (*MachineGroup, error) {
	var resource MachineGroup
	err := ctx.ReadResource("alicloud:sls/machineGroup:MachineGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineGroup resources.
type machineGroupState struct {
	// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
	GroupAttribute *MachineGroupGroupAttribute `pulumi:"groupAttribute"`
	// Machine Group name
	GroupName *string `pulumi:"groupName"`
	// Machine group type, optional value is empty.
	GroupType *string `pulumi:"groupType"`
	// Machine identification type.
	// - ip: ip address Machine Group.
	// - userdefined: user-defined identity Machine Group.
	MachineIdentifyType *string `pulumi:"machineIdentifyType"`
	// The identification information of the machine group.
	// - If machineidentifiytype is configured to ip, enter the ip address of the server.
	// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
	MachineLists []string `pulumi:"machineLists"`
	// Project name
	ProjectName *string `pulumi:"projectName"`
}

type MachineGroupState struct {
	// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
	GroupAttribute MachineGroupGroupAttributePtrInput
	// Machine Group name
	GroupName pulumi.StringPtrInput
	// Machine group type, optional value is empty.
	GroupType pulumi.StringPtrInput
	// Machine identification type.
	// - ip: ip address Machine Group.
	// - userdefined: user-defined identity Machine Group.
	MachineIdentifyType pulumi.StringPtrInput
	// The identification information of the machine group.
	// - If machineidentifiytype is configured to ip, enter the ip address of the server.
	// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
	MachineLists pulumi.StringArrayInput
	// Project name
	ProjectName pulumi.StringPtrInput
}

func (MachineGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineGroupState)(nil)).Elem()
}

type machineGroupArgs struct {
	// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
	GroupAttribute *MachineGroupGroupAttribute `pulumi:"groupAttribute"`
	// Machine Group name
	GroupName string `pulumi:"groupName"`
	// Machine group type, optional value is empty.
	GroupType *string `pulumi:"groupType"`
	// Machine identification type.
	// - ip: ip address Machine Group.
	// - userdefined: user-defined identity Machine Group.
	MachineIdentifyType string `pulumi:"machineIdentifyType"`
	// The identification information of the machine group.
	// - If machineidentifiytype is configured to ip, enter the ip address of the server.
	// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
	MachineLists []string `pulumi:"machineLists"`
	// Project name
	ProjectName string `pulumi:"projectName"`
}

// The set of arguments for constructing a MachineGroup resource.
type MachineGroupArgs struct {
	// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
	GroupAttribute MachineGroupGroupAttributePtrInput
	// Machine Group name
	GroupName pulumi.StringInput
	// Machine group type, optional value is empty.
	GroupType pulumi.StringPtrInput
	// Machine identification type.
	// - ip: ip address Machine Group.
	// - userdefined: user-defined identity Machine Group.
	MachineIdentifyType pulumi.StringInput
	// The identification information of the machine group.
	// - If machineidentifiytype is configured to ip, enter the ip address of the server.
	// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
	MachineLists pulumi.StringArrayInput
	// Project name
	ProjectName pulumi.StringInput
}

func (MachineGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineGroupArgs)(nil)).Elem()
}

type MachineGroupInput interface {
	pulumi.Input

	ToMachineGroupOutput() MachineGroupOutput
	ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput
}

func (*MachineGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineGroup)(nil)).Elem()
}

func (i *MachineGroup) ToMachineGroupOutput() MachineGroupOutput {
	return i.ToMachineGroupOutputWithContext(context.Background())
}

func (i *MachineGroup) ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupOutput)
}

// MachineGroupArrayInput is an input type that accepts MachineGroupArray and MachineGroupArrayOutput values.
// You can construct a concrete instance of `MachineGroupArrayInput` via:
//
//	MachineGroupArray{ MachineGroupArgs{...} }
type MachineGroupArrayInput interface {
	pulumi.Input

	ToMachineGroupArrayOutput() MachineGroupArrayOutput
	ToMachineGroupArrayOutputWithContext(context.Context) MachineGroupArrayOutput
}

type MachineGroupArray []MachineGroupInput

func (MachineGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineGroup)(nil)).Elem()
}

func (i MachineGroupArray) ToMachineGroupArrayOutput() MachineGroupArrayOutput {
	return i.ToMachineGroupArrayOutputWithContext(context.Background())
}

func (i MachineGroupArray) ToMachineGroupArrayOutputWithContext(ctx context.Context) MachineGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupArrayOutput)
}

// MachineGroupMapInput is an input type that accepts MachineGroupMap and MachineGroupMapOutput values.
// You can construct a concrete instance of `MachineGroupMapInput` via:
//
//	MachineGroupMap{ "key": MachineGroupArgs{...} }
type MachineGroupMapInput interface {
	pulumi.Input

	ToMachineGroupMapOutput() MachineGroupMapOutput
	ToMachineGroupMapOutputWithContext(context.Context) MachineGroupMapOutput
}

type MachineGroupMap map[string]MachineGroupInput

func (MachineGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineGroup)(nil)).Elem()
}

func (i MachineGroupMap) ToMachineGroupMapOutput() MachineGroupMapOutput {
	return i.ToMachineGroupMapOutputWithContext(context.Background())
}

func (i MachineGroupMap) ToMachineGroupMapOutputWithContext(ctx context.Context) MachineGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupMapOutput)
}

type MachineGroupOutput struct{ *pulumi.OutputState }

func (MachineGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineGroup)(nil)).Elem()
}

func (o MachineGroupOutput) ToMachineGroupOutput() MachineGroupOutput {
	return o
}

func (o MachineGroupOutput) ToMachineGroupOutputWithContext(ctx context.Context) MachineGroupOutput {
	return o
}

// Properties of machine groups. For details, please refer to the groupAttribute parameter description in the following table. See `groupAttribute` below.
func (o MachineGroupOutput) GroupAttribute() MachineGroupGroupAttributePtrOutput {
	return o.ApplyT(func(v *MachineGroup) MachineGroupGroupAttributePtrOutput { return v.GroupAttribute }).(MachineGroupGroupAttributePtrOutput)
}

// Machine Group name
func (o MachineGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Machine group type, optional value is empty.
func (o MachineGroupOutput) GroupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineGroup) pulumi.StringPtrOutput { return v.GroupType }).(pulumi.StringPtrOutput)
}

// Machine identification type.
// - ip: ip address Machine Group.
// - userdefined: user-defined identity Machine Group.
func (o MachineGroupOutput) MachineIdentifyType() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineGroup) pulumi.StringOutput { return v.MachineIdentifyType }).(pulumi.StringOutput)
}

// The identification information of the machine group.
// - If machineidentifiytype is configured to ip, enter the ip address of the server.
// - If machineidentifiytype is configured to userdefined, enter a custom identifier here.
func (o MachineGroupOutput) MachineLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachineGroup) pulumi.StringArrayOutput { return v.MachineLists }).(pulumi.StringArrayOutput)
}

// Project name
func (o MachineGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

type MachineGroupArrayOutput struct{ *pulumi.OutputState }

func (MachineGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineGroup)(nil)).Elem()
}

func (o MachineGroupArrayOutput) ToMachineGroupArrayOutput() MachineGroupArrayOutput {
	return o
}

func (o MachineGroupArrayOutput) ToMachineGroupArrayOutputWithContext(ctx context.Context) MachineGroupArrayOutput {
	return o
}

func (o MachineGroupArrayOutput) Index(i pulumi.IntInput) MachineGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MachineGroup {
		return vs[0].([]*MachineGroup)[vs[1].(int)]
	}).(MachineGroupOutput)
}

type MachineGroupMapOutput struct{ *pulumi.OutputState }

func (MachineGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineGroup)(nil)).Elem()
}

func (o MachineGroupMapOutput) ToMachineGroupMapOutput() MachineGroupMapOutput {
	return o
}

func (o MachineGroupMapOutput) ToMachineGroupMapOutputWithContext(ctx context.Context) MachineGroupMapOutput {
	return o
}

func (o MachineGroupMapOutput) MapIndex(k pulumi.StringInput) MachineGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MachineGroup {
		return vs[0].(map[string]*MachineGroup)[vs[1].(string)]
	}).(MachineGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineGroupInput)(nil)).Elem(), &MachineGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineGroupArrayInput)(nil)).Elem(), MachineGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineGroupMapInput)(nil)).Elem(), MachineGroupMap{})
	pulumi.RegisterOutputType(MachineGroupOutput{})
	pulumi.RegisterOutputType(MachineGroupArrayOutput{})
	pulumi.RegisterOutputType(MachineGroupMapOutput{})
}
