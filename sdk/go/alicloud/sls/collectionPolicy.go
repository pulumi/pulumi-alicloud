// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SLS Collection Policy resource.
//
// Orchestration policies for cloud product log collection.
//
// For information about SLS Collection Policy and how to use it, see [What is Collection Policy](https://www.alibabacloud.com/help/zh/sls/developer-reference/api-sls-2020-12-30-upsertcollectionpolicy).
//
// > **NOTE:** Available since v1.232.0.
//
// ## Example Usage
//
// Enable real-time log query for all of OSS buckets.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sls"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			projectCreate01, err := log.NewProject(ctx, "project_create_01", &log.ProjectArgs{
//				Description: pulumi.String(name),
//				ProjectName: pulumi.String(invokeFormat.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			logstoreCreate01, err := log.NewStore(ctx, "logstore_create_01", &log.StoreArgs{
//				RetentionPeriod: pulumi.Int(30),
//				ShardCount:      pulumi.Int(2),
//				ProjectName:     projectCreate01.ProjectName,
//				LogstoreName:    pulumi.String(invokeFormat1.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat2, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s2%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			update01, err := log.NewProject(ctx, "update_01", &log.ProjectArgs{
//				Description: pulumi.String(name),
//				ProjectName: pulumi.String(invokeFormat2.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat3, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s2%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = log.NewStore(ctx, "logstore002", &log.StoreArgs{
//				RetentionPeriod: pulumi.Int(30),
//				ShardCount:      pulumi.Int(2),
//				ProjectName:     update01.ProjectName,
//				LogstoreName:    pulumi.String(invokeFormat3.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sls.NewCollectionPolicy(ctx, "default", &sls.CollectionPolicyArgs{
//				PolicyConfig: &sls.CollectionPolicyPolicyConfigArgs{
//					ResourceMode: pulumi.String("all"),
//					Regions: pulumi.StringArray{
//						pulumi.String("cn-hangzhou"),
//					},
//				},
//				DataCode:          pulumi.String("metering_log"),
//				CentralizeEnabled: pulumi.Bool(true),
//				ProductCode:       pulumi.String("oss"),
//				PolicyName:        pulumi.String("xc-example-oss-01"),
//				Enabled:           pulumi.Bool(true),
//				DataConfig: &sls.CollectionPolicyDataConfigArgs{
//					DataRegion: pulumi.String("cn-hangzhou"),
//				},
//				CentralizeConfig: &sls.CollectionPolicyCentralizeConfigArgs{
//					DestTtl:      pulumi.Int(3),
//					DestRegion:   pulumi.String("cn-shanghai"),
//					DestProject:  projectCreate01.ProjectName,
//					DestLogstore: logstoreCreate01.LogstoreName,
//				},
//				ResourceDirectory: &sls.CollectionPolicyResourceDirectoryArgs{
//					AccountGroupType: pulumi.String("custom"),
//					Members: pulumi.StringArray{
//						pulumi.String("1936728897040477"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Enable real-time log query for one or more specific OSS buckets
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sls"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example-on-single-bucket"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			projectCreate01, err := log.NewProject(ctx, "project_create_01", &log.ProjectArgs{
//				Description: pulumi.String(name),
//				ProjectName: pulumi.String(invokeFormat.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = log.NewStore(ctx, "logstore_create_01", &log.StoreArgs{
//				RetentionPeriod: pulumi.Int(30),
//				ShardCount:      pulumi.Int(2),
//				ProjectName:     projectCreate01.ProjectName,
//				LogstoreName:    pulumi.String(invokeFormat1.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat2, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s2%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			update01, err := log.NewProject(ctx, "update_01", &log.ProjectArgs{
//				Description: pulumi.String(name),
//				ProjectName: pulumi.String(invokeFormat2.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat3, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s2%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = log.NewStore(ctx, "logstore002", &log.StoreArgs{
//				RetentionPeriod: pulumi.Int(30),
//				ShardCount:      pulumi.Int(2),
//				ProjectName:     update01.ProjectName,
//				LogstoreName:    pulumi.String(invokeFormat3.Result),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat4, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1%s",
//				Args: []interface{}{
//					name,
//					_default.Result,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bucket, err := oss.NewBucket(ctx, "bucket", &oss.BucketArgs{
//				Bucket: pulumi.String(invokeFormat4.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sls.NewCollectionPolicy(ctx, "default", &sls.CollectionPolicyArgs{
//				PolicyConfig: &sls.CollectionPolicyPolicyConfigArgs{
//					ResourceMode: pulumi.String("instanceMode"),
//					InstanceIds: pulumi.StringArray{
//						bucket.ID(),
//					},
//				},
//				DataCode:          pulumi.String("access_log"),
//				CentralizeEnabled: pulumi.Bool(false),
//				ProductCode:       pulumi.String("oss"),
//				PolicyName:        pulumi.String("xc-example-oss-01"),
//				Enabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SLS Collection Policy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:sls/collectionPolicy:CollectionPolicy example <id>
// ```
type CollectionPolicy struct {
	pulumi.CustomResourceState

	// Centralized transfer configuration. See `centralizeConfig` below.
	CentralizeConfig CollectionPolicyCentralizeConfigOutput `pulumi:"centralizeConfig"`
	// Whether to enable centralized Conversion. The default value is false.
	CentralizeEnabled pulumi.BoolPtrOutput `pulumi:"centralizeEnabled"`
	// Log type encoding.
	DataCode pulumi.StringOutput `pulumi:"dataCode"`
	// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
	DataConfig CollectionPolicyDataConfigOutput `pulumi:"dataConfig"`
	// Whether to open.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Collection rule configuration. See `policyConfig` below.
	PolicyConfig CollectionPolicyPolicyConfigOutput `pulumi:"policyConfig"`
	// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Product code.
	ProductCode pulumi.StringOutput `pulumi:"productCode"`
	// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
	ResourceDirectory CollectionPolicyResourceDirectoryOutput `pulumi:"resourceDirectory"`
}

// NewCollectionPolicy registers a new resource with the given unique name, arguments, and options.
func NewCollectionPolicy(ctx *pulumi.Context,
	name string, args *CollectionPolicyArgs, opts ...pulumi.ResourceOption) (*CollectionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataCode == nil {
		return nil, errors.New("invalid value for required argument 'DataCode'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PolicyConfig == nil {
		return nil, errors.New("invalid value for required argument 'PolicyConfig'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.ProductCode == nil {
		return nil, errors.New("invalid value for required argument 'ProductCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CollectionPolicy
	err := ctx.RegisterResource("alicloud:sls/collectionPolicy:CollectionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollectionPolicy gets an existing CollectionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollectionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectionPolicyState, opts ...pulumi.ResourceOption) (*CollectionPolicy, error) {
	var resource CollectionPolicy
	err := ctx.ReadResource("alicloud:sls/collectionPolicy:CollectionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CollectionPolicy resources.
type collectionPolicyState struct {
	// Centralized transfer configuration. See `centralizeConfig` below.
	CentralizeConfig *CollectionPolicyCentralizeConfig `pulumi:"centralizeConfig"`
	// Whether to enable centralized Conversion. The default value is false.
	CentralizeEnabled *bool `pulumi:"centralizeEnabled"`
	// Log type encoding.
	DataCode *string `pulumi:"dataCode"`
	// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
	DataConfig *CollectionPolicyDataConfig `pulumi:"dataConfig"`
	// Whether to open.
	Enabled *bool `pulumi:"enabled"`
	// Collection rule configuration. See `policyConfig` below.
	PolicyConfig *CollectionPolicyPolicyConfig `pulumi:"policyConfig"`
	// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
	PolicyName *string `pulumi:"policyName"`
	// Product code.
	ProductCode *string `pulumi:"productCode"`
	// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
	ResourceDirectory *CollectionPolicyResourceDirectory `pulumi:"resourceDirectory"`
}

type CollectionPolicyState struct {
	// Centralized transfer configuration. See `centralizeConfig` below.
	CentralizeConfig CollectionPolicyCentralizeConfigPtrInput
	// Whether to enable centralized Conversion. The default value is false.
	CentralizeEnabled pulumi.BoolPtrInput
	// Log type encoding.
	DataCode pulumi.StringPtrInput
	// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
	DataConfig CollectionPolicyDataConfigPtrInput
	// Whether to open.
	Enabled pulumi.BoolPtrInput
	// Collection rule configuration. See `policyConfig` below.
	PolicyConfig CollectionPolicyPolicyConfigPtrInput
	// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
	PolicyName pulumi.StringPtrInput
	// Product code.
	ProductCode pulumi.StringPtrInput
	// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
	ResourceDirectory CollectionPolicyResourceDirectoryPtrInput
}

func (CollectionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionPolicyState)(nil)).Elem()
}

type collectionPolicyArgs struct {
	// Centralized transfer configuration. See `centralizeConfig` below.
	CentralizeConfig *CollectionPolicyCentralizeConfig `pulumi:"centralizeConfig"`
	// Whether to enable centralized Conversion. The default value is false.
	CentralizeEnabled *bool `pulumi:"centralizeEnabled"`
	// Log type encoding.
	DataCode string `pulumi:"dataCode"`
	// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
	DataConfig *CollectionPolicyDataConfig `pulumi:"dataConfig"`
	// Whether to open.
	Enabled bool `pulumi:"enabled"`
	// Collection rule configuration. See `policyConfig` below.
	PolicyConfig CollectionPolicyPolicyConfig `pulumi:"policyConfig"`
	// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
	PolicyName string `pulumi:"policyName"`
	// Product code.
	ProductCode string `pulumi:"productCode"`
	// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
	ResourceDirectory *CollectionPolicyResourceDirectory `pulumi:"resourceDirectory"`
}

// The set of arguments for constructing a CollectionPolicy resource.
type CollectionPolicyArgs struct {
	// Centralized transfer configuration. See `centralizeConfig` below.
	CentralizeConfig CollectionPolicyCentralizeConfigPtrInput
	// Whether to enable centralized Conversion. The default value is false.
	CentralizeEnabled pulumi.BoolPtrInput
	// Log type encoding.
	DataCode pulumi.StringInput
	// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
	DataConfig CollectionPolicyDataConfigPtrInput
	// Whether to open.
	Enabled pulumi.BoolInput
	// Collection rule configuration. See `policyConfig` below.
	PolicyConfig CollectionPolicyPolicyConfigInput
	// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
	PolicyName pulumi.StringInput
	// Product code.
	ProductCode pulumi.StringInput
	// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
	ResourceDirectory CollectionPolicyResourceDirectoryPtrInput
}

func (CollectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionPolicyArgs)(nil)).Elem()
}

type CollectionPolicyInput interface {
	pulumi.Input

	ToCollectionPolicyOutput() CollectionPolicyOutput
	ToCollectionPolicyOutputWithContext(ctx context.Context) CollectionPolicyOutput
}

func (*CollectionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectionPolicy)(nil)).Elem()
}

func (i *CollectionPolicy) ToCollectionPolicyOutput() CollectionPolicyOutput {
	return i.ToCollectionPolicyOutputWithContext(context.Background())
}

func (i *CollectionPolicy) ToCollectionPolicyOutputWithContext(ctx context.Context) CollectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionPolicyOutput)
}

// CollectionPolicyArrayInput is an input type that accepts CollectionPolicyArray and CollectionPolicyArrayOutput values.
// You can construct a concrete instance of `CollectionPolicyArrayInput` via:
//
//	CollectionPolicyArray{ CollectionPolicyArgs{...} }
type CollectionPolicyArrayInput interface {
	pulumi.Input

	ToCollectionPolicyArrayOutput() CollectionPolicyArrayOutput
	ToCollectionPolicyArrayOutputWithContext(context.Context) CollectionPolicyArrayOutput
}

type CollectionPolicyArray []CollectionPolicyInput

func (CollectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectionPolicy)(nil)).Elem()
}

func (i CollectionPolicyArray) ToCollectionPolicyArrayOutput() CollectionPolicyArrayOutput {
	return i.ToCollectionPolicyArrayOutputWithContext(context.Background())
}

func (i CollectionPolicyArray) ToCollectionPolicyArrayOutputWithContext(ctx context.Context) CollectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionPolicyArrayOutput)
}

// CollectionPolicyMapInput is an input type that accepts CollectionPolicyMap and CollectionPolicyMapOutput values.
// You can construct a concrete instance of `CollectionPolicyMapInput` via:
//
//	CollectionPolicyMap{ "key": CollectionPolicyArgs{...} }
type CollectionPolicyMapInput interface {
	pulumi.Input

	ToCollectionPolicyMapOutput() CollectionPolicyMapOutput
	ToCollectionPolicyMapOutputWithContext(context.Context) CollectionPolicyMapOutput
}

type CollectionPolicyMap map[string]CollectionPolicyInput

func (CollectionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectionPolicy)(nil)).Elem()
}

func (i CollectionPolicyMap) ToCollectionPolicyMapOutput() CollectionPolicyMapOutput {
	return i.ToCollectionPolicyMapOutputWithContext(context.Background())
}

func (i CollectionPolicyMap) ToCollectionPolicyMapOutputWithContext(ctx context.Context) CollectionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionPolicyMapOutput)
}

type CollectionPolicyOutput struct{ *pulumi.OutputState }

func (CollectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectionPolicy)(nil)).Elem()
}

func (o CollectionPolicyOutput) ToCollectionPolicyOutput() CollectionPolicyOutput {
	return o
}

func (o CollectionPolicyOutput) ToCollectionPolicyOutputWithContext(ctx context.Context) CollectionPolicyOutput {
	return o
}

// Centralized transfer configuration. See `centralizeConfig` below.
func (o CollectionPolicyOutput) CentralizeConfig() CollectionPolicyCentralizeConfigOutput {
	return o.ApplyT(func(v *CollectionPolicy) CollectionPolicyCentralizeConfigOutput { return v.CentralizeConfig }).(CollectionPolicyCentralizeConfigOutput)
}

// Whether to enable centralized Conversion. The default value is false.
func (o CollectionPolicyOutput) CentralizeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollectionPolicy) pulumi.BoolPtrOutput { return v.CentralizeEnabled }).(pulumi.BoolPtrOutput)
}

// Log type encoding.
func (o CollectionPolicyOutput) DataCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectionPolicy) pulumi.StringOutput { return v.DataCode }).(pulumi.StringOutput)
}

// The configuration is supported only when the log type is global. For example, if the productCode is sls, global logs will be collected to the corresponding region during the first configuration. See `dataConfig` below.
func (o CollectionPolicyOutput) DataConfig() CollectionPolicyDataConfigOutput {
	return o.ApplyT(func(v *CollectionPolicy) CollectionPolicyDataConfigOutput { return v.DataConfig }).(CollectionPolicyDataConfigOutput)
}

// Whether to open.
func (o CollectionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CollectionPolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Collection rule configuration. See `policyConfig` below.
func (o CollectionPolicyOutput) PolicyConfig() CollectionPolicyPolicyConfigOutput {
	return o.ApplyT(func(v *CollectionPolicy) CollectionPolicyPolicyConfigOutput { return v.PolicyConfig }).(CollectionPolicyPolicyConfigOutput)
}

// The name of the rule, with a minimum of 3 characters and a maximum of 63 characters, must start with a letter.
func (o CollectionPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectionPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Product code.
func (o CollectionPolicyOutput) ProductCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectionPolicy) pulumi.StringOutput { return v.ProductCode }).(pulumi.StringOutput)
}

// For Resource Directory configuration, the account must have opened the resource directory and be an administrator or a delegated administrator. See `resourceDirectory` below.
func (o CollectionPolicyOutput) ResourceDirectory() CollectionPolicyResourceDirectoryOutput {
	return o.ApplyT(func(v *CollectionPolicy) CollectionPolicyResourceDirectoryOutput { return v.ResourceDirectory }).(CollectionPolicyResourceDirectoryOutput)
}

type CollectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (CollectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectionPolicy)(nil)).Elem()
}

func (o CollectionPolicyArrayOutput) ToCollectionPolicyArrayOutput() CollectionPolicyArrayOutput {
	return o
}

func (o CollectionPolicyArrayOutput) ToCollectionPolicyArrayOutputWithContext(ctx context.Context) CollectionPolicyArrayOutput {
	return o
}

func (o CollectionPolicyArrayOutput) Index(i pulumi.IntInput) CollectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CollectionPolicy {
		return vs[0].([]*CollectionPolicy)[vs[1].(int)]
	}).(CollectionPolicyOutput)
}

type CollectionPolicyMapOutput struct{ *pulumi.OutputState }

func (CollectionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectionPolicy)(nil)).Elem()
}

func (o CollectionPolicyMapOutput) ToCollectionPolicyMapOutput() CollectionPolicyMapOutput {
	return o
}

func (o CollectionPolicyMapOutput) ToCollectionPolicyMapOutputWithContext(ctx context.Context) CollectionPolicyMapOutput {
	return o
}

func (o CollectionPolicyMapOutput) MapIndex(k pulumi.StringInput) CollectionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CollectionPolicy {
		return vs[0].(map[string]*CollectionPolicy)[vs[1].(string)]
	}).(CollectionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionPolicyInput)(nil)).Elem(), &CollectionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionPolicyArrayInput)(nil)).Elem(), CollectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionPolicyMapInput)(nil)).Elem(), CollectionPolicyMap{})
	pulumi.RegisterOutputType(CollectionPolicyOutput{})
	pulumi.RegisterOutputType(CollectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(CollectionPolicyMapOutput{})
}
