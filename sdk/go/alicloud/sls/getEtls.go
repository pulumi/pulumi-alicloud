// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides Sls Etl available to the user.[What is Etl](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateETL)
//
// > **NOTE:** Available since v1.258.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// defaulthhAPo6, err := log.NewProject(ctx, "defaulthhAPo6", &log.ProjectArgs{
// Description: pulumi.String("terraform-etl-example-813"),
// ProjectName: pulumi.String("terraform-etl-example-330"),
// })
// if err != nil {
// return err
// }
// defaultzWKLkp, err := log.NewStore(ctx, "defaultzWKLkp", &log.StoreArgs{
// HotTtl: pulumi.Int(8),
// RetentionPeriod: pulumi.Int(30),
// ShardCount: pulumi.Int(2),
// ProjectName: defaulthhAPo6.ID(),
// LogstoreName: pulumi.String("example"),
// })
// if err != nil {
// return err
// }
// _, err = sls.NewEtl(ctx, "default", &sls.EtlArgs{
// Project: defaulthhAPo6.ID(),
// Description: pulumi.String("etl-1740472705-185721"),
// Configuration: &sls.EtlConfigurationArgs{
// Script: pulumi.String("* | extend a=1"),
// Lang: pulumi.String("SPL"),
// RoleArn: pulumi.String(name),
// Sinks: sls.EtlConfigurationSinkArray{
// &sls.EtlConfigurationSinkArgs{
// Name: pulumi.String("11111"),
// Endpoint: pulumi.String("cn-hangzhou-intranet.log.aliyuncs.com"),
// Project: pulumi.String("gy-hangzhou-huolang-1"),
// Logstore: pulumi.String("gy-rm2"),
// Datasets: pulumi.StringArray{
// pulumi.String("__UNNAMED__"),
// },
// RoleArn: pulumi.String(name),
// },
// },
// Logstore: defaultzWKLkp.LogstoreName,
// FromTime: pulumi.Int(1706771697),
// ToTime: pulumi.Int(1738394097),
// },
// JobName: pulumi.String("etl-1740472705-185721"),
// DisplayName: pulumi.String("etl-1740472705-185721"),
// })
// if err != nil {
// return err
// }
// _default := sls.GetEtlsOutput(ctx, sls.GetEtlsOutputArgs{
// Logstore: defaultzWKLkp.Name,
// Project: defaulthhAPo6.ID(),
// }, nil);
// ctx.Export("alicloudSlsEtlExampleId", _default.ApplyT(func(_default sls.GetEtlsResult) (*string, error) {
// return &default.Etls[0].Id, nil
// }).(pulumi.StringPtrOutput))
// return nil
// })
// }
// ```
func GetEtls(ctx *pulumi.Context, args *GetEtlsArgs, opts ...pulumi.InvokeOption) (*GetEtlsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEtlsResult
	err := ctx.Invoke("alicloud:sls/getEtls:getEtls", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEtls.
type GetEtlsArgs struct {
	// A list of Etl IDs. The value is formulated as `<project>:<job_name>`.
	Ids []string `pulumi:"ids"`
	// Source Logstore Name.
	Logstore string `pulumi:"logstore"`
	// Query start row. The default value is 0.
	Offset *int `pulumi:"offset"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// Project Name
	Project string `pulumi:"project"`
	// Specify the number of data processing tasks returned by the query
	Size *int `pulumi:"size"`
}

// A collection of values returned by getEtls.
type GetEtlsResult struct {
	// A list of Etl Entries. Each element contains the following attributes:
	Etls []GetEtlsEtl `pulumi:"etls"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of Etl IDs.
	Ids []string `pulumi:"ids"`
	// Destination Logstore Name.
	Logstore   string  `pulumi:"logstore"`
	Offset     *int    `pulumi:"offset"`
	OutputFile *string `pulumi:"outputFile"`
	// Target Project name.
	Project string `pulumi:"project"`
	Size    *int   `pulumi:"size"`
}

func GetEtlsOutput(ctx *pulumi.Context, args GetEtlsOutputArgs, opts ...pulumi.InvokeOption) GetEtlsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetEtlsResultOutput, error) {
			args := v.(GetEtlsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:sls/getEtls:getEtls", args, GetEtlsResultOutput{}, options).(GetEtlsResultOutput), nil
		}).(GetEtlsResultOutput)
}

// A collection of arguments for invoking getEtls.
type GetEtlsOutputArgs struct {
	// A list of Etl IDs. The value is formulated as `<project>:<job_name>`.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// Source Logstore Name.
	Logstore pulumi.StringInput `pulumi:"logstore"`
	// Query start row. The default value is 0.
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Project Name
	Project pulumi.StringInput `pulumi:"project"`
	// Specify the number of data processing tasks returned by the query
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (GetEtlsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEtlsArgs)(nil)).Elem()
}

// A collection of values returned by getEtls.
type GetEtlsResultOutput struct{ *pulumi.OutputState }

func (GetEtlsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEtlsResult)(nil)).Elem()
}

func (o GetEtlsResultOutput) ToGetEtlsResultOutput() GetEtlsResultOutput {
	return o
}

func (o GetEtlsResultOutput) ToGetEtlsResultOutputWithContext(ctx context.Context) GetEtlsResultOutput {
	return o
}

// A list of Etl Entries. Each element contains the following attributes:
func (o GetEtlsResultOutput) Etls() GetEtlsEtlArrayOutput {
	return o.ApplyT(func(v GetEtlsResult) []GetEtlsEtl { return v.Etls }).(GetEtlsEtlArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEtlsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEtlsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of Etl IDs.
func (o GetEtlsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEtlsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// Destination Logstore Name.
func (o GetEtlsResultOutput) Logstore() pulumi.StringOutput {
	return o.ApplyT(func(v GetEtlsResult) string { return v.Logstore }).(pulumi.StringOutput)
}

func (o GetEtlsResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEtlsResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o GetEtlsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEtlsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Target Project name.
func (o GetEtlsResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetEtlsResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetEtlsResultOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEtlsResult) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEtlsResultOutput{})
}
