// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Log Service (SLS) Etl resource.
//
// For information about Log Service (SLS) Etl and how to use it, see [What is Etl](https://next.api.alibabacloud.com/document/Sls/2020-12-30/CreateETL).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaulthhAPo6, err := log.NewProject(ctx, "defaulthhAPo6", &log.ProjectArgs{
//				Description: pulumi.String("terraform-etl-example-813"),
//				ProjectName: pulumi.String("terraform-etl-example-330"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultzWKLkp, err := log.NewStore(ctx, "defaultzWKLkp", &log.StoreArgs{
//				HotTtl:          pulumi.Int(8),
//				RetentionPeriod: pulumi.Int(30),
//				ShardCount:      pulumi.Int(2),
//				ProjectName:     defaulthhAPo6.ID(),
//				LogstoreName:    pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sls.NewEtl(ctx, "default", &sls.EtlArgs{
//				Project:     defaulthhAPo6.ID(),
//				Description: pulumi.String("etl-1740472705-185721"),
//				Configuration: &sls.EtlConfigurationArgs{
//					Script:  pulumi.String("* | extend a=1"),
//					Lang:    pulumi.String("SPL"),
//					RoleArn: pulumi.String(name),
//					Sinks: sls.EtlConfigurationSinkArray{
//						&sls.EtlConfigurationSinkArgs{
//							Name:     pulumi.String("11111"),
//							Endpoint: pulumi.String("cn-hangzhou-intranet.log.aliyuncs.com"),
//							Project:  pulumi.String("gy-hangzhou-huolang-1"),
//							Logstore: pulumi.String("gy-rm2"),
//							Datasets: pulumi.StringArray{
//								pulumi.String("__UNNAMED__"),
//							},
//							RoleArn: pulumi.String(name),
//						},
//					},
//					Logstore: defaultzWKLkp.LogstoreName,
//					FromTime: pulumi.Int(1706771697),
//					ToTime:   pulumi.Int(1738394097),
//				},
//				JobName:     pulumi.String("etl-1740472705-185721"),
//				DisplayName: pulumi.String("etl-1740472705-185721"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Log Service (SLS) Etl can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:sls/etl:Etl example <project>:<job_name>
// ```
type Etl struct {
	pulumi.CustomResourceState

	// The ETL configuration. See `configuration` below.
	Configuration EtlConfigurationOutput `pulumi:"configuration"`
	// The time when the data transformation job was created.
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// Data Processing Task Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Data processing task display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Unique identification of data processing task.
	JobName pulumi.StringOutput `pulumi:"jobName"`
	// Project Name.
	Project pulumi.StringOutput `pulumi:"project"`
	// The status of the data transformation job.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEtl registers a new resource with the given unique name, arguments, and options.
func NewEtl(ctx *pulumi.Context,
	name string, args *EtlArgs, opts ...pulumi.ResourceOption) (*Etl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.JobName == nil {
		return nil, errors.New("invalid value for required argument 'JobName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Etl
	err := ctx.RegisterResource("alicloud:sls/etl:Etl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEtl gets an existing Etl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEtl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EtlState, opts ...pulumi.ResourceOption) (*Etl, error) {
	var resource Etl
	err := ctx.ReadResource("alicloud:sls/etl:Etl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Etl resources.
type etlState struct {
	// The ETL configuration. See `configuration` below.
	Configuration *EtlConfiguration `pulumi:"configuration"`
	// The time when the data transformation job was created.
	CreateTime *int `pulumi:"createTime"`
	// Data Processing Task Description.
	Description *string `pulumi:"description"`
	// Data processing task display name.
	DisplayName *string `pulumi:"displayName"`
	// Unique identification of data processing task.
	JobName *string `pulumi:"jobName"`
	// Project Name.
	Project *string `pulumi:"project"`
	// The status of the data transformation job.
	Status *string `pulumi:"status"`
}

type EtlState struct {
	// The ETL configuration. See `configuration` below.
	Configuration EtlConfigurationPtrInput
	// The time when the data transformation job was created.
	CreateTime pulumi.IntPtrInput
	// Data Processing Task Description.
	Description pulumi.StringPtrInput
	// Data processing task display name.
	DisplayName pulumi.StringPtrInput
	// Unique identification of data processing task.
	JobName pulumi.StringPtrInput
	// Project Name.
	Project pulumi.StringPtrInput
	// The status of the data transformation job.
	Status pulumi.StringPtrInput
}

func (EtlState) ElementType() reflect.Type {
	return reflect.TypeOf((*etlState)(nil)).Elem()
}

type etlArgs struct {
	// The ETL configuration. See `configuration` below.
	Configuration EtlConfiguration `pulumi:"configuration"`
	// Data Processing Task Description.
	Description *string `pulumi:"description"`
	// Data processing task display name.
	DisplayName string `pulumi:"displayName"`
	// Unique identification of data processing task.
	JobName string `pulumi:"jobName"`
	// Project Name.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a Etl resource.
type EtlArgs struct {
	// The ETL configuration. See `configuration` below.
	Configuration EtlConfigurationInput
	// Data Processing Task Description.
	Description pulumi.StringPtrInput
	// Data processing task display name.
	DisplayName pulumi.StringInput
	// Unique identification of data processing task.
	JobName pulumi.StringInput
	// Project Name.
	Project pulumi.StringInput
}

func (EtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etlArgs)(nil)).Elem()
}

type EtlInput interface {
	pulumi.Input

	ToEtlOutput() EtlOutput
	ToEtlOutputWithContext(ctx context.Context) EtlOutput
}

func (*Etl) ElementType() reflect.Type {
	return reflect.TypeOf((**Etl)(nil)).Elem()
}

func (i *Etl) ToEtlOutput() EtlOutput {
	return i.ToEtlOutputWithContext(context.Background())
}

func (i *Etl) ToEtlOutputWithContext(ctx context.Context) EtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlOutput)
}

// EtlArrayInput is an input type that accepts EtlArray and EtlArrayOutput values.
// You can construct a concrete instance of `EtlArrayInput` via:
//
//	EtlArray{ EtlArgs{...} }
type EtlArrayInput interface {
	pulumi.Input

	ToEtlArrayOutput() EtlArrayOutput
	ToEtlArrayOutputWithContext(context.Context) EtlArrayOutput
}

type EtlArray []EtlInput

func (EtlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Etl)(nil)).Elem()
}

func (i EtlArray) ToEtlArrayOutput() EtlArrayOutput {
	return i.ToEtlArrayOutputWithContext(context.Background())
}

func (i EtlArray) ToEtlArrayOutputWithContext(ctx context.Context) EtlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlArrayOutput)
}

// EtlMapInput is an input type that accepts EtlMap and EtlMapOutput values.
// You can construct a concrete instance of `EtlMapInput` via:
//
//	EtlMap{ "key": EtlArgs{...} }
type EtlMapInput interface {
	pulumi.Input

	ToEtlMapOutput() EtlMapOutput
	ToEtlMapOutputWithContext(context.Context) EtlMapOutput
}

type EtlMap map[string]EtlInput

func (EtlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Etl)(nil)).Elem()
}

func (i EtlMap) ToEtlMapOutput() EtlMapOutput {
	return i.ToEtlMapOutputWithContext(context.Background())
}

func (i EtlMap) ToEtlMapOutputWithContext(ctx context.Context) EtlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlMapOutput)
}

type EtlOutput struct{ *pulumi.OutputState }

func (EtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Etl)(nil)).Elem()
}

func (o EtlOutput) ToEtlOutput() EtlOutput {
	return o
}

func (o EtlOutput) ToEtlOutputWithContext(ctx context.Context) EtlOutput {
	return o
}

// The ETL configuration. See `configuration` below.
func (o EtlOutput) Configuration() EtlConfigurationOutput {
	return o.ApplyT(func(v *Etl) EtlConfigurationOutput { return v.Configuration }).(EtlConfigurationOutput)
}

// The time when the data transformation job was created.
func (o EtlOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Etl) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// Data Processing Task Description.
func (o EtlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Etl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Data processing task display name.
func (o EtlOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Etl) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique identification of data processing task.
func (o EtlOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v *Etl) pulumi.StringOutput { return v.JobName }).(pulumi.StringOutput)
}

// Project Name.
func (o EtlOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Etl) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The status of the data transformation job.
func (o EtlOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Etl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EtlArrayOutput struct{ *pulumi.OutputState }

func (EtlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Etl)(nil)).Elem()
}

func (o EtlArrayOutput) ToEtlArrayOutput() EtlArrayOutput {
	return o
}

func (o EtlArrayOutput) ToEtlArrayOutputWithContext(ctx context.Context) EtlArrayOutput {
	return o
}

func (o EtlArrayOutput) Index(i pulumi.IntInput) EtlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Etl {
		return vs[0].([]*Etl)[vs[1].(int)]
	}).(EtlOutput)
}

type EtlMapOutput struct{ *pulumi.OutputState }

func (EtlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Etl)(nil)).Elem()
}

func (o EtlMapOutput) ToEtlMapOutput() EtlMapOutput {
	return o
}

func (o EtlMapOutput) ToEtlMapOutputWithContext(ctx context.Context) EtlMapOutput {
	return o
}

func (o EtlMapOutput) MapIndex(k pulumi.StringInput) EtlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Etl {
		return vs[0].(map[string]*Etl)[vs[1].(string)]
	}).(EtlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtlInput)(nil)).Elem(), &Etl{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtlArrayInput)(nil)).Elem(), EtlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtlMapInput)(nil)).Elem(), EtlMap{})
	pulumi.RegisterOutputType(EtlOutput{})
	pulumi.RegisterOutputType(EtlArrayOutput{})
	pulumi.RegisterOutputType(EtlMapOutput{})
}
