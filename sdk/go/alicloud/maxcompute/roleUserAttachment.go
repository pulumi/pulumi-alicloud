// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maxcompute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Max Compute Role User Attachment resource.
//
// Resources associated with a user and a project-level role.
//
// For information about Max Compute Role User Attachment and how to use it, see [What is Role User Attachment](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.242.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/maxcompute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			aliyunUser := "ALIYUN$openapiautomation@test.aliyunid.com"
//			if param := cfg.Get("aliyunUser"); param != "" {
//				aliyunUser = param
//			}
//			ramUser := "RAM$openapiautomation@test.aliyunid.com:tf-example"
//			if param := cfg.Get("ramUser"); param != "" {
//				ramUser = param
//			}
//			ramRole := "RAM$openapiautomation@test.aliyunid.com:role/terraform-no-ak-assumerole-no-deleting"
//			if param := cfg.Get("ramRole"); param != "" {
//				ramRole = param
//			}
//			roleName := "role_project_admin"
//			if param := cfg.Get("roleName"); param != "" {
//				roleName = param
//			}
//			projectName := "default_project_669886c"
//			if param := cfg.Get("projectName"); param != "" {
//				projectName = param
//			}
//			_, err := maxcompute.NewRoleUserAttachment(ctx, "default", &maxcompute.RoleUserAttachmentArgs{
//				RoleName:    pulumi.String(roleName),
//				User:        pulumi.String(ramRole),
//				ProjectName: pulumi.String(projectName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Max Compute Role User Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:maxcompute/roleUserAttachment:RoleUserAttachment example <project_name>-<role_name>-<user>
// ```
type RoleUserAttachment struct {
	pulumi.CustomResourceState

	// Project Name
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Role Name, Valid Values: super_administrator, admin, Custom Role
	//
	// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Supported input: Alibaba Cloud account, RAM user, and RAM role
	//
	// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewRoleUserAttachment registers a new resource with the given unique name, arguments, and options.
func NewRoleUserAttachment(ctx *pulumi.Context,
	name string, args *RoleUserAttachmentArgs, opts ...pulumi.ResourceOption) (*RoleUserAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleUserAttachment
	err := ctx.RegisterResource("alicloud:maxcompute/roleUserAttachment:RoleUserAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleUserAttachment gets an existing RoleUserAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleUserAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleUserAttachmentState, opts ...pulumi.ResourceOption) (*RoleUserAttachment, error) {
	var resource RoleUserAttachment
	err := ctx.ReadResource("alicloud:maxcompute/roleUserAttachment:RoleUserAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleUserAttachment resources.
type roleUserAttachmentState struct {
	// Project Name
	ProjectName *string `pulumi:"projectName"`
	// Role Name, Valid Values: super_administrator, admin, Custom Role
	//
	// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
	RoleName *string `pulumi:"roleName"`
	// Supported input: Alibaba Cloud account, RAM user, and RAM role
	//
	// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
	User *string `pulumi:"user"`
}

type RoleUserAttachmentState struct {
	// Project Name
	ProjectName pulumi.StringPtrInput
	// Role Name, Valid Values: super_administrator, admin, Custom Role
	//
	// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
	RoleName pulumi.StringPtrInput
	// Supported input: Alibaba Cloud account, RAM user, and RAM role
	//
	// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
	User pulumi.StringPtrInput
}

func (RoleUserAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleUserAttachmentState)(nil)).Elem()
}

type roleUserAttachmentArgs struct {
	// Project Name
	ProjectName string `pulumi:"projectName"`
	// Role Name, Valid Values: super_administrator, admin, Custom Role
	//
	// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
	RoleName string `pulumi:"roleName"`
	// Supported input: Alibaba Cloud account, RAM user, and RAM role
	//
	// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a RoleUserAttachment resource.
type RoleUserAttachmentArgs struct {
	// Project Name
	ProjectName pulumi.StringInput
	// Role Name, Valid Values: super_administrator, admin, Custom Role
	//
	// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
	RoleName pulumi.StringInput
	// Supported input: Alibaba Cloud account, RAM user, and RAM role
	//
	// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
	User pulumi.StringPtrInput
}

func (RoleUserAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleUserAttachmentArgs)(nil)).Elem()
}

type RoleUserAttachmentInput interface {
	pulumi.Input

	ToRoleUserAttachmentOutput() RoleUserAttachmentOutput
	ToRoleUserAttachmentOutputWithContext(ctx context.Context) RoleUserAttachmentOutput
}

func (*RoleUserAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleUserAttachment)(nil)).Elem()
}

func (i *RoleUserAttachment) ToRoleUserAttachmentOutput() RoleUserAttachmentOutput {
	return i.ToRoleUserAttachmentOutputWithContext(context.Background())
}

func (i *RoleUserAttachment) ToRoleUserAttachmentOutputWithContext(ctx context.Context) RoleUserAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleUserAttachmentOutput)
}

// RoleUserAttachmentArrayInput is an input type that accepts RoleUserAttachmentArray and RoleUserAttachmentArrayOutput values.
// You can construct a concrete instance of `RoleUserAttachmentArrayInput` via:
//
//	RoleUserAttachmentArray{ RoleUserAttachmentArgs{...} }
type RoleUserAttachmentArrayInput interface {
	pulumi.Input

	ToRoleUserAttachmentArrayOutput() RoleUserAttachmentArrayOutput
	ToRoleUserAttachmentArrayOutputWithContext(context.Context) RoleUserAttachmentArrayOutput
}

type RoleUserAttachmentArray []RoleUserAttachmentInput

func (RoleUserAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleUserAttachment)(nil)).Elem()
}

func (i RoleUserAttachmentArray) ToRoleUserAttachmentArrayOutput() RoleUserAttachmentArrayOutput {
	return i.ToRoleUserAttachmentArrayOutputWithContext(context.Background())
}

func (i RoleUserAttachmentArray) ToRoleUserAttachmentArrayOutputWithContext(ctx context.Context) RoleUserAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleUserAttachmentArrayOutput)
}

// RoleUserAttachmentMapInput is an input type that accepts RoleUserAttachmentMap and RoleUserAttachmentMapOutput values.
// You can construct a concrete instance of `RoleUserAttachmentMapInput` via:
//
//	RoleUserAttachmentMap{ "key": RoleUserAttachmentArgs{...} }
type RoleUserAttachmentMapInput interface {
	pulumi.Input

	ToRoleUserAttachmentMapOutput() RoleUserAttachmentMapOutput
	ToRoleUserAttachmentMapOutputWithContext(context.Context) RoleUserAttachmentMapOutput
}

type RoleUserAttachmentMap map[string]RoleUserAttachmentInput

func (RoleUserAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleUserAttachment)(nil)).Elem()
}

func (i RoleUserAttachmentMap) ToRoleUserAttachmentMapOutput() RoleUserAttachmentMapOutput {
	return i.ToRoleUserAttachmentMapOutputWithContext(context.Background())
}

func (i RoleUserAttachmentMap) ToRoleUserAttachmentMapOutputWithContext(ctx context.Context) RoleUserAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleUserAttachmentMapOutput)
}

type RoleUserAttachmentOutput struct{ *pulumi.OutputState }

func (RoleUserAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleUserAttachment)(nil)).Elem()
}

func (o RoleUserAttachmentOutput) ToRoleUserAttachmentOutput() RoleUserAttachmentOutput {
	return o
}

func (o RoleUserAttachmentOutput) ToRoleUserAttachmentOutputWithContext(ctx context.Context) RoleUserAttachmentOutput {
	return o
}

// Project Name
func (o RoleUserAttachmentOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleUserAttachment) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Role Name, Valid Values: super_administrator, admin, Custom Role
//
// > **NOTE:** -- super_administrator: the built-in management role of MaxCompute. The Super Administrator of the project has the permission to operate all resources in the project and the management permission. Project owners or users with the Super_Administrator role can assign the Super_Administrator role to other users. -- admin: the built-in management role of MaxCompute, which has the permission to operate all resources in the project and some basic management permissions. Project owners can assign the Admin role to other users. -- Custom role: a role that is not built-in to MaxCompute and needs to be customized. You can refer to the role (starting with role_) definition in DataWorks.
func (o RoleUserAttachmentOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleUserAttachment) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Supported input: Alibaba Cloud account, RAM user, and RAM role
//
// > **NOTE:** -- Alibaba Cloud account: the account registered on the Alibaba Cloud official website. - RAM User: a user created by an Alibaba Cloud account to assist the Alibaba Cloud account to complete data processing. -- RAM role: a RAM role, like a RAM user, is a type of RAM identity. A RAM role is a virtual user that does not have a specific identity authentication key and needs to be played by a trusted entity user for normal use.
func (o RoleUserAttachmentOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleUserAttachment) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type RoleUserAttachmentArrayOutput struct{ *pulumi.OutputState }

func (RoleUserAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleUserAttachment)(nil)).Elem()
}

func (o RoleUserAttachmentArrayOutput) ToRoleUserAttachmentArrayOutput() RoleUserAttachmentArrayOutput {
	return o
}

func (o RoleUserAttachmentArrayOutput) ToRoleUserAttachmentArrayOutputWithContext(ctx context.Context) RoleUserAttachmentArrayOutput {
	return o
}

func (o RoleUserAttachmentArrayOutput) Index(i pulumi.IntInput) RoleUserAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleUserAttachment {
		return vs[0].([]*RoleUserAttachment)[vs[1].(int)]
	}).(RoleUserAttachmentOutput)
}

type RoleUserAttachmentMapOutput struct{ *pulumi.OutputState }

func (RoleUserAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleUserAttachment)(nil)).Elem()
}

func (o RoleUserAttachmentMapOutput) ToRoleUserAttachmentMapOutput() RoleUserAttachmentMapOutput {
	return o
}

func (o RoleUserAttachmentMapOutput) ToRoleUserAttachmentMapOutputWithContext(ctx context.Context) RoleUserAttachmentMapOutput {
	return o
}

func (o RoleUserAttachmentMapOutput) MapIndex(k pulumi.StringInput) RoleUserAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleUserAttachment {
		return vs[0].(map[string]*RoleUserAttachment)[vs[1].(string)]
	}).(RoleUserAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleUserAttachmentInput)(nil)).Elem(), &RoleUserAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleUserAttachmentArrayInput)(nil)).Elem(), RoleUserAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleUserAttachmentMapInput)(nil)).Elem(), RoleUserAttachmentMap{})
	pulumi.RegisterOutputType(RoleUserAttachmentOutput{})
	pulumi.RegisterOutputType(RoleUserAttachmentArrayOutput{})
	pulumi.RegisterOutputType(RoleUserAttachmentMapOutput{})
}
