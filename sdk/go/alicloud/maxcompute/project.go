// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maxcompute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Max Compute Project resource.
//
// For information about Max Compute Project and how to use it, see [What is Project](https://help.aliyun.com/document_detail/473237.html).
//
// > **NOTE:** Available in v1.77.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/maxcompute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := maxcompute.NewProject(ctx, "default", &maxcompute.ProjectArgs{
//				Comment:      pulumi.String("test_for_terraform"),
//				DefaultQuota: pulumi.String("默认后付费Quota"),
//				ProductType:  pulumi.String("PAYASYOUGO"),
//				ProjectName:  pulumi.String("test_create_spec_one"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Project struct {
	pulumi.CustomResourceState

	// Comments of project
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Default Computing Resource Group
	DefaultQuota pulumi.StringPtrOutput `pulumi:"defaultQuota"`
	// IP whitelistSee the following `Block IpWhiteList`.
	IpWhiteList ProjectIpWhiteListPtrOutput `pulumi:"ipWhiteList"`
	// Project owner
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
	ProductType pulumi.StringPtrOutput `pulumi:"productType"`
	// The name of the project
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Project base attributesSee the following `Block Properties`.
	Properties ProjectPropertiesOutput `pulumi:"properties"`
	// Security-related attributesSee the following `Block SecurityProperties`.
	SecurityProperties ProjectSecurityPropertiesOutput `pulumi:"securityProperties"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// Life cycle type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	var resource Project
	err := ctx.RegisterResource("alicloud:maxcompute/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("alicloud:maxcompute/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Comments of project
	Comment *string `pulumi:"comment"`
	// Default Computing Resource Group
	DefaultQuota *string `pulumi:"defaultQuota"`
	// IP whitelistSee the following `Block IpWhiteList`.
	IpWhiteList *ProjectIpWhiteList `pulumi:"ipWhiteList"`
	// Project owner
	Owner *string `pulumi:"owner"`
	// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
	ProductType *string `pulumi:"productType"`
	// The name of the project
	ProjectName *string `pulumi:"projectName"`
	// Project base attributesSee the following `Block Properties`.
	Properties *ProjectProperties `pulumi:"properties"`
	// Security-related attributesSee the following `Block SecurityProperties`.
	SecurityProperties *ProjectSecurityProperties `pulumi:"securityProperties"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// Life cycle type.
	Type *string `pulumi:"type"`
}

type ProjectState struct {
	// Comments of project
	Comment pulumi.StringPtrInput
	// Default Computing Resource Group
	DefaultQuota pulumi.StringPtrInput
	// IP whitelistSee the following `Block IpWhiteList`.
	IpWhiteList ProjectIpWhiteListPtrInput
	// Project owner
	Owner pulumi.StringPtrInput
	// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
	ProductType pulumi.StringPtrInput
	// The name of the project
	ProjectName pulumi.StringPtrInput
	// Project base attributesSee the following `Block Properties`.
	Properties ProjectPropertiesPtrInput
	// Security-related attributesSee the following `Block SecurityProperties`.
	SecurityProperties ProjectSecurityPropertiesPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// Life cycle type.
	Type pulumi.StringPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Comments of project
	Comment *string `pulumi:"comment"`
	// Default Computing Resource Group
	DefaultQuota *string `pulumi:"defaultQuota"`
	// IP whitelistSee the following `Block IpWhiteList`.
	IpWhiteList *ProjectIpWhiteList `pulumi:"ipWhiteList"`
	// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
	ProductType *string `pulumi:"productType"`
	// The name of the project
	ProjectName string `pulumi:"projectName"`
	// Project base attributesSee the following `Block Properties`.
	Properties *ProjectProperties `pulumi:"properties"`
	// Security-related attributesSee the following `Block SecurityProperties`.
	SecurityProperties *ProjectSecurityProperties `pulumi:"securityProperties"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Comments of project
	Comment pulumi.StringPtrInput
	// Default Computing Resource Group
	DefaultQuota pulumi.StringPtrInput
	// IP whitelistSee the following `Block IpWhiteList`.
	IpWhiteList ProjectIpWhiteListPtrInput
	// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
	ProductType pulumi.StringPtrInput
	// The name of the project
	ProjectName pulumi.StringInput
	// Project base attributesSee the following `Block Properties`.
	Properties ProjectPropertiesPtrInput
	// Security-related attributesSee the following `Block SecurityProperties`.
	SecurityProperties ProjectSecurityPropertiesPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Comments of project
func (o ProjectOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Default Computing Resource Group
func (o ProjectOutput) DefaultQuota() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.DefaultQuota }).(pulumi.StringPtrOutput)
}

// IP whitelistSee the following `Block IpWhiteList`.
func (o ProjectOutput) IpWhiteList() ProjectIpWhiteListPtrOutput {
	return o.ApplyT(func(v *Project) ProjectIpWhiteListPtrOutput { return v.IpWhiteList }).(ProjectIpWhiteListPtrOutput)
}

// Project owner
func (o ProjectOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Quota payment type, support `PayAsYouGo`, `Subscription`, `Dev`.
func (o ProjectOutput) ProductType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ProductType }).(pulumi.StringPtrOutput)
}

// The name of the project
func (o ProjectOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Project base attributesSee the following `Block Properties`.
func (o ProjectOutput) Properties() ProjectPropertiesOutput {
	return o.ApplyT(func(v *Project) ProjectPropertiesOutput { return v.Properties }).(ProjectPropertiesOutput)
}

// Security-related attributesSee the following `Block SecurityProperties`.
func (o ProjectOutput) SecurityProperties() ProjectSecurityPropertiesOutput {
	return o.ApplyT(func(v *Project) ProjectSecurityPropertiesOutput { return v.SecurityProperties }).(ProjectSecurityPropertiesOutput)
}

// The status of the resource
func (o ProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Life cycle type.
func (o ProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
