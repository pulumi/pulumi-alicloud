// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sag

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Smartag Flow Log resource.
//
// For information about Smartag Flow Log and how to use it, see [What is Flow Log](https://www.alibabacloud.com/help/en/smart-access-gateway/latest/createflowlog).
//
// > **NOTE:** Available in v1.168.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sag"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sag.NewSmartagFlowLog(ctx, "example", &sag.SmartagFlowLogArgs{
//				FlowLogName:       pulumi.String("example_value"),
//				LogstoreName:      pulumi.String("example_value"),
//				NetflowServerIp:   pulumi.String("example_value"),
//				NetflowServerPort: pulumi.Int(1),
//				OutputType:        pulumi.String("all"),
//				ProjectName:       pulumi.String("example_value"),
//				SlsRegionId:       pulumi.String("example_value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Smartag Flow Log can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:sag/smartagFlowLog:SmartagFlowLog example <id>
//
// ```
type SmartagFlowLog struct {
	pulumi.CustomResourceState

	// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
	ActiveAging pulumi.IntOutput `pulumi:"activeAging"`
	// The description of the flow log.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the flow log.
	FlowLogName pulumi.StringPtrOutput `pulumi:"flowLogName"`
	// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
	InactiveAging pulumi.IntOutput `pulumi:"inactiveAging"`
	// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	LogstoreName pulumi.StringPtrOutput `pulumi:"logstoreName"`
	// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerIp pulumi.StringPtrOutput `pulumi:"netflowServerIp"`
	// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerPort pulumi.IntOutput `pulumi:"netflowServerPort"`
	// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowVersion pulumi.StringOutput `pulumi:"netflowVersion"`
	// The location where the flow log is stored. Valid values:
	OutputType pulumi.StringOutput `pulumi:"outputType"`
	// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
	SlsRegionId pulumi.StringPtrOutput `pulumi:"slsRegionId"`
	// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewSmartagFlowLog registers a new resource with the given unique name, arguments, and options.
func NewSmartagFlowLog(ctx *pulumi.Context,
	name string, args *SmartagFlowLogArgs, opts ...pulumi.ResourceOption) (*SmartagFlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OutputType == nil {
		return nil, errors.New("invalid value for required argument 'OutputType'")
	}
	var resource SmartagFlowLog
	err := ctx.RegisterResource("alicloud:sag/smartagFlowLog:SmartagFlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmartagFlowLog gets an existing SmartagFlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmartagFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmartagFlowLogState, opts ...pulumi.ResourceOption) (*SmartagFlowLog, error) {
	var resource SmartagFlowLog
	err := ctx.ReadResource("alicloud:sag/smartagFlowLog:SmartagFlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmartagFlowLog resources.
type smartagFlowLogState struct {
	// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
	ActiveAging *int `pulumi:"activeAging"`
	// The description of the flow log.
	Description *string `pulumi:"description"`
	// The name of the flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
	InactiveAging *int `pulumi:"inactiveAging"`
	// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	LogstoreName *string `pulumi:"logstoreName"`
	// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerIp *string `pulumi:"netflowServerIp"`
	// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerPort *int `pulumi:"netflowServerPort"`
	// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowVersion *string `pulumi:"netflowVersion"`
	// The location where the flow log is stored. Valid values:
	OutputType *string `pulumi:"outputType"`
	// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	ProjectName *string `pulumi:"projectName"`
	// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
	SlsRegionId *string `pulumi:"slsRegionId"`
	// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
	Status *string `pulumi:"status"`
}

type SmartagFlowLogState struct {
	// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
	ActiveAging pulumi.IntPtrInput
	// The description of the flow log.
	Description pulumi.StringPtrInput
	// The name of the flow log.
	FlowLogName pulumi.StringPtrInput
	// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
	InactiveAging pulumi.IntPtrInput
	// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	LogstoreName pulumi.StringPtrInput
	// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerIp pulumi.StringPtrInput
	// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerPort pulumi.IntPtrInput
	// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowVersion pulumi.StringPtrInput
	// The location where the flow log is stored. Valid values:
	OutputType pulumi.StringPtrInput
	// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	ProjectName pulumi.StringPtrInput
	// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
	SlsRegionId pulumi.StringPtrInput
	// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
	Status pulumi.StringPtrInput
}

func (SmartagFlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*smartagFlowLogState)(nil)).Elem()
}

type smartagFlowLogArgs struct {
	// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
	ActiveAging *int `pulumi:"activeAging"`
	// The description of the flow log.
	Description *string `pulumi:"description"`
	// The name of the flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
	InactiveAging *int `pulumi:"inactiveAging"`
	// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	LogstoreName *string `pulumi:"logstoreName"`
	// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerIp *string `pulumi:"netflowServerIp"`
	// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerPort *int `pulumi:"netflowServerPort"`
	// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowVersion *string `pulumi:"netflowVersion"`
	// The location where the flow log is stored. Valid values:
	OutputType string `pulumi:"outputType"`
	// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	ProjectName *string `pulumi:"projectName"`
	// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
	SlsRegionId *string `pulumi:"slsRegionId"`
	// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a SmartagFlowLog resource.
type SmartagFlowLogArgs struct {
	// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
	ActiveAging pulumi.IntPtrInput
	// The description of the flow log.
	Description pulumi.StringPtrInput
	// The name of the flow log.
	FlowLogName pulumi.StringPtrInput
	// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
	InactiveAging pulumi.IntPtrInput
	// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	LogstoreName pulumi.StringPtrInput
	// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerIp pulumi.StringPtrInput
	// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowServerPort pulumi.IntPtrInput
	// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
	NetflowVersion pulumi.StringPtrInput
	// The location where the flow log is stored. Valid values:
	OutputType pulumi.StringInput
	// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
	ProjectName pulumi.StringPtrInput
	// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
	SlsRegionId pulumi.StringPtrInput
	// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
	Status pulumi.StringPtrInput
}

func (SmartagFlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smartagFlowLogArgs)(nil)).Elem()
}

type SmartagFlowLogInput interface {
	pulumi.Input

	ToSmartagFlowLogOutput() SmartagFlowLogOutput
	ToSmartagFlowLogOutputWithContext(ctx context.Context) SmartagFlowLogOutput
}

func (*SmartagFlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartagFlowLog)(nil)).Elem()
}

func (i *SmartagFlowLog) ToSmartagFlowLogOutput() SmartagFlowLogOutput {
	return i.ToSmartagFlowLogOutputWithContext(context.Background())
}

func (i *SmartagFlowLog) ToSmartagFlowLogOutputWithContext(ctx context.Context) SmartagFlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartagFlowLogOutput)
}

// SmartagFlowLogArrayInput is an input type that accepts SmartagFlowLogArray and SmartagFlowLogArrayOutput values.
// You can construct a concrete instance of `SmartagFlowLogArrayInput` via:
//
//	SmartagFlowLogArray{ SmartagFlowLogArgs{...} }
type SmartagFlowLogArrayInput interface {
	pulumi.Input

	ToSmartagFlowLogArrayOutput() SmartagFlowLogArrayOutput
	ToSmartagFlowLogArrayOutputWithContext(context.Context) SmartagFlowLogArrayOutput
}

type SmartagFlowLogArray []SmartagFlowLogInput

func (SmartagFlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmartagFlowLog)(nil)).Elem()
}

func (i SmartagFlowLogArray) ToSmartagFlowLogArrayOutput() SmartagFlowLogArrayOutput {
	return i.ToSmartagFlowLogArrayOutputWithContext(context.Background())
}

func (i SmartagFlowLogArray) ToSmartagFlowLogArrayOutputWithContext(ctx context.Context) SmartagFlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartagFlowLogArrayOutput)
}

// SmartagFlowLogMapInput is an input type that accepts SmartagFlowLogMap and SmartagFlowLogMapOutput values.
// You can construct a concrete instance of `SmartagFlowLogMapInput` via:
//
//	SmartagFlowLogMap{ "key": SmartagFlowLogArgs{...} }
type SmartagFlowLogMapInput interface {
	pulumi.Input

	ToSmartagFlowLogMapOutput() SmartagFlowLogMapOutput
	ToSmartagFlowLogMapOutputWithContext(context.Context) SmartagFlowLogMapOutput
}

type SmartagFlowLogMap map[string]SmartagFlowLogInput

func (SmartagFlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmartagFlowLog)(nil)).Elem()
}

func (i SmartagFlowLogMap) ToSmartagFlowLogMapOutput() SmartagFlowLogMapOutput {
	return i.ToSmartagFlowLogMapOutputWithContext(context.Background())
}

func (i SmartagFlowLogMap) ToSmartagFlowLogMapOutputWithContext(ctx context.Context) SmartagFlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartagFlowLogMapOutput)
}

type SmartagFlowLogOutput struct{ *pulumi.OutputState }

func (SmartagFlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartagFlowLog)(nil)).Elem()
}

func (o SmartagFlowLogOutput) ToSmartagFlowLogOutput() SmartagFlowLogOutput {
	return o
}

func (o SmartagFlowLogOutput) ToSmartagFlowLogOutputWithContext(ctx context.Context) SmartagFlowLogOutput {
	return o
}

// The time interval at which log data of active connections is collected. Valid values: `60` to `6000`. Default value: `300`. Unit: second.
func (o SmartagFlowLogOutput) ActiveAging() pulumi.IntOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.IntOutput { return v.ActiveAging }).(pulumi.IntOutput)
}

// The description of the flow log.
func (o SmartagFlowLogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the flow log.
func (o SmartagFlowLogOutput) FlowLogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.FlowLogName }).(pulumi.StringPtrOutput)
}

// The time interval at which log data of inactive connections is connected. Valid values: `10` to `600`. Default value: `15`. Unit: second.
func (o SmartagFlowLogOutput) InactiveAging() pulumi.IntOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.IntOutput { return v.InactiveAging }).(pulumi.IntOutput)
}

// The Logstore in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) LogstoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.LogstoreName }).(pulumi.StringPtrOutput)
}

// The IP address of the NetFlow collector where the flow log is stored. If `outputType` is set to `netflow` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) NetflowServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.NetflowServerIp }).(pulumi.StringPtrOutput)
}

// The port of the NetFlow collector. Default value: `9995`. If `outputType` is set to `netflow` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) NetflowServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.IntOutput { return v.NetflowServerPort }).(pulumi.IntOutput)
}

// The NetFlow version. Default value: `V9`. Valid values: `V10`, `V5`, `V9`. If `outputType` is set to `netflow` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) NetflowVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringOutput { return v.NetflowVersion }).(pulumi.StringOutput)
}

// The location where the flow log is stored. Valid values:
func (o SmartagFlowLogOutput) OutputType() pulumi.StringOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringOutput { return v.OutputType }).(pulumi.StringOutput)
}

// The project in Log Service. If `outputType` is set to `sls` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The ID of the region where Log Service is deployed. If `outputType` is set to `sls` or `all`, this parameter is required.
func (o SmartagFlowLogOutput) SlsRegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringPtrOutput { return v.SlsRegionId }).(pulumi.StringPtrOutput)
}

// The status of the flow log. Valid values:  `Active`: The flow log is enabled. `Inactive`: The flow log is disabled.
func (o SmartagFlowLogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SmartagFlowLog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type SmartagFlowLogArrayOutput struct{ *pulumi.OutputState }

func (SmartagFlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmartagFlowLog)(nil)).Elem()
}

func (o SmartagFlowLogArrayOutput) ToSmartagFlowLogArrayOutput() SmartagFlowLogArrayOutput {
	return o
}

func (o SmartagFlowLogArrayOutput) ToSmartagFlowLogArrayOutputWithContext(ctx context.Context) SmartagFlowLogArrayOutput {
	return o
}

func (o SmartagFlowLogArrayOutput) Index(i pulumi.IntInput) SmartagFlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmartagFlowLog {
		return vs[0].([]*SmartagFlowLog)[vs[1].(int)]
	}).(SmartagFlowLogOutput)
}

type SmartagFlowLogMapOutput struct{ *pulumi.OutputState }

func (SmartagFlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmartagFlowLog)(nil)).Elem()
}

func (o SmartagFlowLogMapOutput) ToSmartagFlowLogMapOutput() SmartagFlowLogMapOutput {
	return o
}

func (o SmartagFlowLogMapOutput) ToSmartagFlowLogMapOutputWithContext(ctx context.Context) SmartagFlowLogMapOutput {
	return o
}

func (o SmartagFlowLogMapOutput) MapIndex(k pulumi.StringInput) SmartagFlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmartagFlowLog {
		return vs[0].(map[string]*SmartagFlowLog)[vs[1].(string)]
	}).(SmartagFlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmartagFlowLogInput)(nil)).Elem(), &SmartagFlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartagFlowLogArrayInput)(nil)).Elem(), SmartagFlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartagFlowLogMapInput)(nil)).Elem(), SmartagFlowLogMap{})
	pulumi.RegisterOutputType(SmartagFlowLogOutput{})
	pulumi.RegisterOutputType(SmartagFlowLogArrayOutput{})
	pulumi.RegisterOutputType(SmartagFlowLogMapOutput{})
}
