// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Service Catalog Product Portfolio Association resource.
//
// Product portfolio association.
//
// For information about Service Catalog Product Portfolio Association and how to use it, see [What is Product Portfolio Association](https://www.alibabacloud.com/help/en/service-catalog/developer-reference/api-servicecatalog-2021-09-01-associateproductwithportfolio).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/servicecatalog"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			default0yAgJ8, err := servicecatalog.NewPortfolio(ctx, "default0yAgJ8", &servicecatalog.PortfolioArgs{
//				ProviderName:  pulumi.String(name),
//				Description:   pulumi.String("desc"),
//				PortfolioName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1",
//				Args: []string{
//					name,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRetBJw, err := servicecatalog.NewProduct(ctx, "defaultRetBJw", &servicecatalog.ProductArgs{
//				ProviderName: pulumi.String(name),
//				ProductName:  pulumi.String(invokeFormat.Result),
//				ProductType:  pulumi.String("Ros"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicecatalog.NewProductPortfolioAssociation(ctx, "default", &servicecatalog.ProductPortfolioAssociationArgs{
//				PortfolioId: default0yAgJ8.ID(),
//				ProductId:   defaultRetBJw.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Catalog Product Portfolio Association can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation example <product_id>:<portfolio_id>
// ```
type ProductPortfolioAssociation struct {
	pulumi.CustomResourceState

	// Product Portfolio ID
	PortfolioId pulumi.StringOutput `pulumi:"portfolioId"`
	// Product ID
	ProductId pulumi.StringOutput `pulumi:"productId"`
}

// NewProductPortfolioAssociation registers a new resource with the given unique name, arguments, and options.
func NewProductPortfolioAssociation(ctx *pulumi.Context,
	name string, args *ProductPortfolioAssociationArgs, opts ...pulumi.ResourceOption) (*ProductPortfolioAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductPortfolioAssociation
	err := ctx.RegisterResource("alicloud:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductPortfolioAssociation gets an existing ProductPortfolioAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductPortfolioAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductPortfolioAssociationState, opts ...pulumi.ResourceOption) (*ProductPortfolioAssociation, error) {
	var resource ProductPortfolioAssociation
	err := ctx.ReadResource("alicloud:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductPortfolioAssociation resources.
type productPortfolioAssociationState struct {
	// Product Portfolio ID
	PortfolioId *string `pulumi:"portfolioId"`
	// Product ID
	ProductId *string `pulumi:"productId"`
}

type ProductPortfolioAssociationState struct {
	// Product Portfolio ID
	PortfolioId pulumi.StringPtrInput
	// Product ID
	ProductId pulumi.StringPtrInput
}

func (ProductPortfolioAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*productPortfolioAssociationState)(nil)).Elem()
}

type productPortfolioAssociationArgs struct {
	// Product Portfolio ID
	PortfolioId string `pulumi:"portfolioId"`
	// Product ID
	ProductId string `pulumi:"productId"`
}

// The set of arguments for constructing a ProductPortfolioAssociation resource.
type ProductPortfolioAssociationArgs struct {
	// Product Portfolio ID
	PortfolioId pulumi.StringInput
	// Product ID
	ProductId pulumi.StringInput
}

func (ProductPortfolioAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productPortfolioAssociationArgs)(nil)).Elem()
}

type ProductPortfolioAssociationInput interface {
	pulumi.Input

	ToProductPortfolioAssociationOutput() ProductPortfolioAssociationOutput
	ToProductPortfolioAssociationOutputWithContext(ctx context.Context) ProductPortfolioAssociationOutput
}

func (*ProductPortfolioAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductPortfolioAssociation)(nil)).Elem()
}

func (i *ProductPortfolioAssociation) ToProductPortfolioAssociationOutput() ProductPortfolioAssociationOutput {
	return i.ToProductPortfolioAssociationOutputWithContext(context.Background())
}

func (i *ProductPortfolioAssociation) ToProductPortfolioAssociationOutputWithContext(ctx context.Context) ProductPortfolioAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPortfolioAssociationOutput)
}

// ProductPortfolioAssociationArrayInput is an input type that accepts ProductPortfolioAssociationArray and ProductPortfolioAssociationArrayOutput values.
// You can construct a concrete instance of `ProductPortfolioAssociationArrayInput` via:
//
//	ProductPortfolioAssociationArray{ ProductPortfolioAssociationArgs{...} }
type ProductPortfolioAssociationArrayInput interface {
	pulumi.Input

	ToProductPortfolioAssociationArrayOutput() ProductPortfolioAssociationArrayOutput
	ToProductPortfolioAssociationArrayOutputWithContext(context.Context) ProductPortfolioAssociationArrayOutput
}

type ProductPortfolioAssociationArray []ProductPortfolioAssociationInput

func (ProductPortfolioAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductPortfolioAssociation)(nil)).Elem()
}

func (i ProductPortfolioAssociationArray) ToProductPortfolioAssociationArrayOutput() ProductPortfolioAssociationArrayOutput {
	return i.ToProductPortfolioAssociationArrayOutputWithContext(context.Background())
}

func (i ProductPortfolioAssociationArray) ToProductPortfolioAssociationArrayOutputWithContext(ctx context.Context) ProductPortfolioAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPortfolioAssociationArrayOutput)
}

// ProductPortfolioAssociationMapInput is an input type that accepts ProductPortfolioAssociationMap and ProductPortfolioAssociationMapOutput values.
// You can construct a concrete instance of `ProductPortfolioAssociationMapInput` via:
//
//	ProductPortfolioAssociationMap{ "key": ProductPortfolioAssociationArgs{...} }
type ProductPortfolioAssociationMapInput interface {
	pulumi.Input

	ToProductPortfolioAssociationMapOutput() ProductPortfolioAssociationMapOutput
	ToProductPortfolioAssociationMapOutputWithContext(context.Context) ProductPortfolioAssociationMapOutput
}

type ProductPortfolioAssociationMap map[string]ProductPortfolioAssociationInput

func (ProductPortfolioAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductPortfolioAssociation)(nil)).Elem()
}

func (i ProductPortfolioAssociationMap) ToProductPortfolioAssociationMapOutput() ProductPortfolioAssociationMapOutput {
	return i.ToProductPortfolioAssociationMapOutputWithContext(context.Background())
}

func (i ProductPortfolioAssociationMap) ToProductPortfolioAssociationMapOutputWithContext(ctx context.Context) ProductPortfolioAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPortfolioAssociationMapOutput)
}

type ProductPortfolioAssociationOutput struct{ *pulumi.OutputState }

func (ProductPortfolioAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductPortfolioAssociation)(nil)).Elem()
}

func (o ProductPortfolioAssociationOutput) ToProductPortfolioAssociationOutput() ProductPortfolioAssociationOutput {
	return o
}

func (o ProductPortfolioAssociationOutput) ToProductPortfolioAssociationOutputWithContext(ctx context.Context) ProductPortfolioAssociationOutput {
	return o
}

// Product Portfolio ID
func (o ProductPortfolioAssociationOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductPortfolioAssociation) pulumi.StringOutput { return v.PortfolioId }).(pulumi.StringOutput)
}

// Product ID
func (o ProductPortfolioAssociationOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductPortfolioAssociation) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

type ProductPortfolioAssociationArrayOutput struct{ *pulumi.OutputState }

func (ProductPortfolioAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductPortfolioAssociation)(nil)).Elem()
}

func (o ProductPortfolioAssociationArrayOutput) ToProductPortfolioAssociationArrayOutput() ProductPortfolioAssociationArrayOutput {
	return o
}

func (o ProductPortfolioAssociationArrayOutput) ToProductPortfolioAssociationArrayOutputWithContext(ctx context.Context) ProductPortfolioAssociationArrayOutput {
	return o
}

func (o ProductPortfolioAssociationArrayOutput) Index(i pulumi.IntInput) ProductPortfolioAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductPortfolioAssociation {
		return vs[0].([]*ProductPortfolioAssociation)[vs[1].(int)]
	}).(ProductPortfolioAssociationOutput)
}

type ProductPortfolioAssociationMapOutput struct{ *pulumi.OutputState }

func (ProductPortfolioAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductPortfolioAssociation)(nil)).Elem()
}

func (o ProductPortfolioAssociationMapOutput) ToProductPortfolioAssociationMapOutput() ProductPortfolioAssociationMapOutput {
	return o
}

func (o ProductPortfolioAssociationMapOutput) ToProductPortfolioAssociationMapOutputWithContext(ctx context.Context) ProductPortfolioAssociationMapOutput {
	return o
}

func (o ProductPortfolioAssociationMapOutput) MapIndex(k pulumi.StringInput) ProductPortfolioAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductPortfolioAssociation {
		return vs[0].(map[string]*ProductPortfolioAssociation)[vs[1].(string)]
	}).(ProductPortfolioAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPortfolioAssociationInput)(nil)).Elem(), &ProductPortfolioAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPortfolioAssociationArrayInput)(nil)).Elem(), ProductPortfolioAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPortfolioAssociationMapInput)(nil)).Elem(), ProductPortfolioAssociationMap{})
	pulumi.RegisterOutputType(ProductPortfolioAssociationOutput{})
	pulumi.RegisterOutputType(ProductPortfolioAssociationArrayOutput{})
	pulumi.RegisterOutputType(ProductPortfolioAssociationMapOutput{})
}
