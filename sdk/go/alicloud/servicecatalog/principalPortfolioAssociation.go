// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Service Catalog Principal Portfolio Association resource.
//
// Principal portfolio association.
//
// For information about Service Catalog Principal Portfolio Association and how to use it, see [What is Principal Portfolio Association](https://www.alibabacloud.com/help/en/service-catalog/developer-reference/api-servicecatalog-2021-09-01-associateprincipalwithportfolio).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/servicecatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultDaXVxI, err := servicecatalog.NewPortfolio(ctx, "defaultDaXVxI", &servicecatalog.PortfolioArgs{
//				ProviderName:  pulumi.String(name),
//				Description:   pulumi.String("desc"),
//				PortfolioName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			default48JHf4, err := ram.NewRole(ctx, "default48JHf4", &ram.RoleArgs{
//				Name: pulumi.String(name),
//				Document: pulumi.String(`    {
//	        "Statement": [
//	        {
//	            "Action": "sts:AssumeRole",
//	            "Effect": "Allow",
//	            "Principal": {
//	            "Service": [
//	                "emr.aliyuncs.com",
//	                "ecs.aliyuncs.com"
//	            ]
//	            }
//	        }
//	        ],
//	        "Version": "1"
//	    }
//
// `),
//
//				Description: pulumi.String("this is a role test."),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicecatalog.NewPrincipalPortfolioAssociation(ctx, "default", &servicecatalog.PrincipalPortfolioAssociationArgs{
//				PrincipalId:   default48JHf4.ID(),
//				PortfolioId:   defaultDaXVxI.ID(),
//				PrincipalType: pulumi.String("RamRole"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Catalog Principal Portfolio Association can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation example <principal_id>:<principal_type>:<portfolio_id>
// ```
type PrincipalPortfolioAssociation struct {
	pulumi.CustomResourceState

	// Product Portfolio ID
	PortfolioId pulumi.StringOutput `pulumi:"portfolioId"`
	// RAM entity ID
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// RAM entity type
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
}

// NewPrincipalPortfolioAssociation registers a new resource with the given unique name, arguments, and options.
func NewPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, args *PrincipalPortfolioAssociationArgs, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.PrincipalType == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrincipalPortfolioAssociation
	err := ctx.RegisterResource("alicloud:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrincipalPortfolioAssociation gets an existing PrincipalPortfolioAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrincipalPortfolioAssociationState, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	var resource PrincipalPortfolioAssociation
	err := ctx.ReadResource("alicloud:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrincipalPortfolioAssociation resources.
type principalPortfolioAssociationState struct {
	// Product Portfolio ID
	PortfolioId *string `pulumi:"portfolioId"`
	// RAM entity ID
	PrincipalId *string `pulumi:"principalId"`
	// RAM entity type
	PrincipalType *string `pulumi:"principalType"`
}

type PrincipalPortfolioAssociationState struct {
	// Product Portfolio ID
	PortfolioId pulumi.StringPtrInput
	// RAM entity ID
	PrincipalId pulumi.StringPtrInput
	// RAM entity type
	PrincipalType pulumi.StringPtrInput
}

func (PrincipalPortfolioAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationState)(nil)).Elem()
}

type principalPortfolioAssociationArgs struct {
	// Product Portfolio ID
	PortfolioId string `pulumi:"portfolioId"`
	// RAM entity ID
	PrincipalId string `pulumi:"principalId"`
	// RAM entity type
	PrincipalType string `pulumi:"principalType"`
}

// The set of arguments for constructing a PrincipalPortfolioAssociation resource.
type PrincipalPortfolioAssociationArgs struct {
	// Product Portfolio ID
	PortfolioId pulumi.StringInput
	// RAM entity ID
	PrincipalId pulumi.StringInput
	// RAM entity type
	PrincipalType pulumi.StringInput
}

func (PrincipalPortfolioAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationArgs)(nil)).Elem()
}

type PrincipalPortfolioAssociationInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput
	ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput
}

func (*PrincipalPortfolioAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return i.ToPrincipalPortfolioAssociationOutputWithContext(context.Background())
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationOutput)
}

// PrincipalPortfolioAssociationArrayInput is an input type that accepts PrincipalPortfolioAssociationArray and PrincipalPortfolioAssociationArrayOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationArrayInput` via:
//
//	PrincipalPortfolioAssociationArray{ PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationArrayInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput
	ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Context) PrincipalPortfolioAssociationArrayOutput
}

type PrincipalPortfolioAssociationArray []PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return i.ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationArrayOutput)
}

// PrincipalPortfolioAssociationMapInput is an input type that accepts PrincipalPortfolioAssociationMap and PrincipalPortfolioAssociationMapOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationMapInput` via:
//
//	PrincipalPortfolioAssociationMap{ "key": PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationMapInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput
	ToPrincipalPortfolioAssociationMapOutputWithContext(context.Context) PrincipalPortfolioAssociationMapOutput
}

type PrincipalPortfolioAssociationMap map[string]PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return i.ToPrincipalPortfolioAssociationMapOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationMapOutput)
}

type PrincipalPortfolioAssociationOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return o
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return o
}

// Product Portfolio ID
func (o PrincipalPortfolioAssociationOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringOutput { return v.PortfolioId }).(pulumi.StringOutput)
}

// RAM entity ID
func (o PrincipalPortfolioAssociationOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// RAM entity type
func (o PrincipalPortfolioAssociationOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

type PrincipalPortfolioAssociationArrayOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) Index(i pulumi.IntInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrincipalPortfolioAssociation {
		return vs[0].([]*PrincipalPortfolioAssociation)[vs[1].(int)]
	}).(PrincipalPortfolioAssociationOutput)
}

type PrincipalPortfolioAssociationMapOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) MapIndex(k pulumi.StringInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrincipalPortfolioAssociation {
		return vs[0].(map[string]*PrincipalPortfolioAssociation)[vs[1].(string)]
	}).(PrincipalPortfolioAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationInput)(nil)).Elem(), &PrincipalPortfolioAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationArrayInput)(nil)).Elem(), PrincipalPortfolioAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationMapInput)(nil)).Elem(), PrincipalPortfolioAssociationMap{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationArrayOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationMapOutput{})
}
