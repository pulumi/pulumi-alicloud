// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Service Catalog Product Version resource.
//
// There can be one or more versions of the product.
//
// For information about Service Catalog Product Version and how to use it, see [What is Product Version](https://www.alibabacloud.com/help/en/service-catalog/developer-reference/api-servicecatalog-2021-09-01-createproductversion).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/servicecatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultmaeTcE, err := servicecatalog.NewProduct(ctx, "defaultmaeTcE", &servicecatalog.ProductArgs{
//				ProviderName: pulumi.String(name),
//				ProductName:  pulumi.String(name),
//				ProductType:  pulumi.String("Ros"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicecatalog.NewProductVersion(ctx, "default", &servicecatalog.ProductVersionArgs{
//				Guidance:           pulumi.String("Default"),
//				TemplateUrl:        pulumi.String("oss://servicecatalog-cn-hangzhou/1466115886172051/terraform/template/tpl-bp1x4v3r44u7u7/template.json"),
//				Active:             pulumi.Bool(true),
//				Description:        pulumi.String("产品版本测试"),
//				ProductVersionName: pulumi.String(name),
//				ProductId:          defaultmaeTcE.ID(),
//				TemplateType:       pulumi.String("RosTerraformTemplate"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Catalog Product Version can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:servicecatalog/productVersion:ProductVersion example <id>
// ```
type ProductVersion struct {
	pulumi.CustomResourceState

	// Whether the version is activated
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Version description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Administrator guidance
	Guidance pulumi.StringPtrOutput `pulumi:"guidance"`
	// Product ID
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// The name of the resource
	ProductVersionName pulumi.StringOutput `pulumi:"productVersionName"`
	// Template Type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Template URL
	TemplateUrl pulumi.StringOutput `pulumi:"templateUrl"`
}

// NewProductVersion registers a new resource with the given unique name, arguments, and options.
func NewProductVersion(ctx *pulumi.Context,
	name string, args *ProductVersionArgs, opts ...pulumi.ResourceOption) (*ProductVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.ProductVersionName == nil {
		return nil, errors.New("invalid value for required argument 'ProductVersionName'")
	}
	if args.TemplateType == nil {
		return nil, errors.New("invalid value for required argument 'TemplateType'")
	}
	if args.TemplateUrl == nil {
		return nil, errors.New("invalid value for required argument 'TemplateUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductVersion
	err := ctx.RegisterResource("alicloud:servicecatalog/productVersion:ProductVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductVersion gets an existing ProductVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductVersionState, opts ...pulumi.ResourceOption) (*ProductVersion, error) {
	var resource ProductVersion
	err := ctx.ReadResource("alicloud:servicecatalog/productVersion:ProductVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductVersion resources.
type productVersionState struct {
	// Whether the version is activated
	Active *bool `pulumi:"active"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Version description
	Description *string `pulumi:"description"`
	// Administrator guidance
	Guidance *string `pulumi:"guidance"`
	// Product ID
	ProductId *string `pulumi:"productId"`
	// The name of the resource
	ProductVersionName *string `pulumi:"productVersionName"`
	// Template Type
	TemplateType *string `pulumi:"templateType"`
	// Template URL
	TemplateUrl *string `pulumi:"templateUrl"`
}

type ProductVersionState struct {
	// Whether the version is activated
	Active pulumi.BoolPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Version description
	Description pulumi.StringPtrInput
	// Administrator guidance
	Guidance pulumi.StringPtrInput
	// Product ID
	ProductId pulumi.StringPtrInput
	// The name of the resource
	ProductVersionName pulumi.StringPtrInput
	// Template Type
	TemplateType pulumi.StringPtrInput
	// Template URL
	TemplateUrl pulumi.StringPtrInput
}

func (ProductVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*productVersionState)(nil)).Elem()
}

type productVersionArgs struct {
	// Whether the version is activated
	Active *bool `pulumi:"active"`
	// Version description
	Description *string `pulumi:"description"`
	// Administrator guidance
	Guidance *string `pulumi:"guidance"`
	// Product ID
	ProductId string `pulumi:"productId"`
	// The name of the resource
	ProductVersionName string `pulumi:"productVersionName"`
	// Template Type
	TemplateType string `pulumi:"templateType"`
	// Template URL
	TemplateUrl string `pulumi:"templateUrl"`
}

// The set of arguments for constructing a ProductVersion resource.
type ProductVersionArgs struct {
	// Whether the version is activated
	Active pulumi.BoolPtrInput
	// Version description
	Description pulumi.StringPtrInput
	// Administrator guidance
	Guidance pulumi.StringPtrInput
	// Product ID
	ProductId pulumi.StringInput
	// The name of the resource
	ProductVersionName pulumi.StringInput
	// Template Type
	TemplateType pulumi.StringInput
	// Template URL
	TemplateUrl pulumi.StringInput
}

func (ProductVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productVersionArgs)(nil)).Elem()
}

type ProductVersionInput interface {
	pulumi.Input

	ToProductVersionOutput() ProductVersionOutput
	ToProductVersionOutputWithContext(ctx context.Context) ProductVersionOutput
}

func (*ProductVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductVersion)(nil)).Elem()
}

func (i *ProductVersion) ToProductVersionOutput() ProductVersionOutput {
	return i.ToProductVersionOutputWithContext(context.Background())
}

func (i *ProductVersion) ToProductVersionOutputWithContext(ctx context.Context) ProductVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductVersionOutput)
}

// ProductVersionArrayInput is an input type that accepts ProductVersionArray and ProductVersionArrayOutput values.
// You can construct a concrete instance of `ProductVersionArrayInput` via:
//
//	ProductVersionArray{ ProductVersionArgs{...} }
type ProductVersionArrayInput interface {
	pulumi.Input

	ToProductVersionArrayOutput() ProductVersionArrayOutput
	ToProductVersionArrayOutputWithContext(context.Context) ProductVersionArrayOutput
}

type ProductVersionArray []ProductVersionInput

func (ProductVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductVersion)(nil)).Elem()
}

func (i ProductVersionArray) ToProductVersionArrayOutput() ProductVersionArrayOutput {
	return i.ToProductVersionArrayOutputWithContext(context.Background())
}

func (i ProductVersionArray) ToProductVersionArrayOutputWithContext(ctx context.Context) ProductVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductVersionArrayOutput)
}

// ProductVersionMapInput is an input type that accepts ProductVersionMap and ProductVersionMapOutput values.
// You can construct a concrete instance of `ProductVersionMapInput` via:
//
//	ProductVersionMap{ "key": ProductVersionArgs{...} }
type ProductVersionMapInput interface {
	pulumi.Input

	ToProductVersionMapOutput() ProductVersionMapOutput
	ToProductVersionMapOutputWithContext(context.Context) ProductVersionMapOutput
}

type ProductVersionMap map[string]ProductVersionInput

func (ProductVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductVersion)(nil)).Elem()
}

func (i ProductVersionMap) ToProductVersionMapOutput() ProductVersionMapOutput {
	return i.ToProductVersionMapOutputWithContext(context.Background())
}

func (i ProductVersionMap) ToProductVersionMapOutputWithContext(ctx context.Context) ProductVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductVersionMapOutput)
}

type ProductVersionOutput struct{ *pulumi.OutputState }

func (ProductVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductVersion)(nil)).Elem()
}

func (o ProductVersionOutput) ToProductVersionOutput() ProductVersionOutput {
	return o
}

func (o ProductVersionOutput) ToProductVersionOutputWithContext(ctx context.Context) ProductVersionOutput {
	return o
}

// Whether the version is activated
func (o ProductVersionOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The creation time of the resource
func (o ProductVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Version description
func (o ProductVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Administrator guidance
func (o ProductVersionOutput) Guidance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringPtrOutput { return v.Guidance }).(pulumi.StringPtrOutput)
}

// Product ID
func (o ProductVersionOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// The name of the resource
func (o ProductVersionOutput) ProductVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringOutput { return v.ProductVersionName }).(pulumi.StringOutput)
}

// Template Type
func (o ProductVersionOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Template URL
func (o ProductVersionOutput) TemplateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductVersion) pulumi.StringOutput { return v.TemplateUrl }).(pulumi.StringOutput)
}

type ProductVersionArrayOutput struct{ *pulumi.OutputState }

func (ProductVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductVersion)(nil)).Elem()
}

func (o ProductVersionArrayOutput) ToProductVersionArrayOutput() ProductVersionArrayOutput {
	return o
}

func (o ProductVersionArrayOutput) ToProductVersionArrayOutputWithContext(ctx context.Context) ProductVersionArrayOutput {
	return o
}

func (o ProductVersionArrayOutput) Index(i pulumi.IntInput) ProductVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductVersion {
		return vs[0].([]*ProductVersion)[vs[1].(int)]
	}).(ProductVersionOutput)
}

type ProductVersionMapOutput struct{ *pulumi.OutputState }

func (ProductVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductVersion)(nil)).Elem()
}

func (o ProductVersionMapOutput) ToProductVersionMapOutput() ProductVersionMapOutput {
	return o
}

func (o ProductVersionMapOutput) ToProductVersionMapOutputWithContext(ctx context.Context) ProductVersionMapOutput {
	return o
}

func (o ProductVersionMapOutput) MapIndex(k pulumi.StringInput) ProductVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductVersion {
		return vs[0].(map[string]*ProductVersion)[vs[1].(string)]
	}).(ProductVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductVersionInput)(nil)).Elem(), &ProductVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductVersionArrayInput)(nil)).Elem(), ProductVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductVersionMapInput)(nil)).Elem(), ProductVersionMap{})
	pulumi.RegisterOutputType(ProductVersionOutput{})
	pulumi.RegisterOutputType(ProductVersionArrayOutput{})
	pulumi.RegisterOutputType(ProductVersionMapOutput{})
}
