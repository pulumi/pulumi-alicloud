// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EDAS instance cluster attachment resource.
//
// > **NOTE:** Available in 1.82.0+
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/edas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := edas.NewInstanceClusterAttachment(ctx, "default", &edas.InstanceClusterAttachmentArgs{
//				ClusterId:   pulumi.Any(_var.Cluster_id),
//				InstanceIds: pulumi.Any(_var.Instance_ids),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstanceClusterAttachment struct {
	pulumi.CustomResourceState

	// The ID of the cluster that you want to create the application.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The cluster members map of the resource supplied above. The key is instanceId and the value is cluster_member_id.
	ClusterMemberIds pulumi.StringMapOutput `pulumi:"clusterMemberIds"`
	// The ecu map of the resource supplied above. The key is instanceId and the value is ecu_id.
	EcuMap pulumi.StringMapOutput `pulumi:"ecuMap"`
	// The ID of instance. Type: list.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// The status map of the resource supplied above. The key is instanceId and the values are 1(running) 0(converting) -1(failed) and -2(offline).
	StatusMap pulumi.IntMapOutput `pulumi:"statusMap"`
}

// NewInstanceClusterAttachment registers a new resource with the given unique name, arguments, and options.
func NewInstanceClusterAttachment(ctx *pulumi.Context,
	name string, args *InstanceClusterAttachmentArgs, opts ...pulumi.ResourceOption) (*InstanceClusterAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	var resource InstanceClusterAttachment
	err := ctx.RegisterResource("alicloud:edas/instanceClusterAttachment:InstanceClusterAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceClusterAttachment gets an existing InstanceClusterAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceClusterAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceClusterAttachmentState, opts ...pulumi.ResourceOption) (*InstanceClusterAttachment, error) {
	var resource InstanceClusterAttachment
	err := ctx.ReadResource("alicloud:edas/instanceClusterAttachment:InstanceClusterAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceClusterAttachment resources.
type instanceClusterAttachmentState struct {
	// The ID of the cluster that you want to create the application.
	ClusterId *string `pulumi:"clusterId"`
	// The cluster members map of the resource supplied above. The key is instanceId and the value is cluster_member_id.
	ClusterMemberIds map[string]string `pulumi:"clusterMemberIds"`
	// The ecu map of the resource supplied above. The key is instanceId and the value is ecu_id.
	EcuMap map[string]string `pulumi:"ecuMap"`
	// The ID of instance. Type: list.
	InstanceIds []string `pulumi:"instanceIds"`
	// The status map of the resource supplied above. The key is instanceId and the values are 1(running) 0(converting) -1(failed) and -2(offline).
	StatusMap map[string]int `pulumi:"statusMap"`
}

type InstanceClusterAttachmentState struct {
	// The ID of the cluster that you want to create the application.
	ClusterId pulumi.StringPtrInput
	// The cluster members map of the resource supplied above. The key is instanceId and the value is cluster_member_id.
	ClusterMemberIds pulumi.StringMapInput
	// The ecu map of the resource supplied above. The key is instanceId and the value is ecu_id.
	EcuMap pulumi.StringMapInput
	// The ID of instance. Type: list.
	InstanceIds pulumi.StringArrayInput
	// The status map of the resource supplied above. The key is instanceId and the values are 1(running) 0(converting) -1(failed) and -2(offline).
	StatusMap pulumi.IntMapInput
}

func (InstanceClusterAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterAttachmentState)(nil)).Elem()
}

type instanceClusterAttachmentArgs struct {
	// The ID of the cluster that you want to create the application.
	ClusterId string `pulumi:"clusterId"`
	// The ID of instance. Type: list.
	InstanceIds []string `pulumi:"instanceIds"`
}

// The set of arguments for constructing a InstanceClusterAttachment resource.
type InstanceClusterAttachmentArgs struct {
	// The ID of the cluster that you want to create the application.
	ClusterId pulumi.StringInput
	// The ID of instance. Type: list.
	InstanceIds pulumi.StringArrayInput
}

func (InstanceClusterAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterAttachmentArgs)(nil)).Elem()
}

type InstanceClusterAttachmentInput interface {
	pulumi.Input

	ToInstanceClusterAttachmentOutput() InstanceClusterAttachmentOutput
	ToInstanceClusterAttachmentOutputWithContext(ctx context.Context) InstanceClusterAttachmentOutput
}

func (*InstanceClusterAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceClusterAttachment)(nil)).Elem()
}

func (i *InstanceClusterAttachment) ToInstanceClusterAttachmentOutput() InstanceClusterAttachmentOutput {
	return i.ToInstanceClusterAttachmentOutputWithContext(context.Background())
}

func (i *InstanceClusterAttachment) ToInstanceClusterAttachmentOutputWithContext(ctx context.Context) InstanceClusterAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterAttachmentOutput)
}

// InstanceClusterAttachmentArrayInput is an input type that accepts InstanceClusterAttachmentArray and InstanceClusterAttachmentArrayOutput values.
// You can construct a concrete instance of `InstanceClusterAttachmentArrayInput` via:
//
//	InstanceClusterAttachmentArray{ InstanceClusterAttachmentArgs{...} }
type InstanceClusterAttachmentArrayInput interface {
	pulumi.Input

	ToInstanceClusterAttachmentArrayOutput() InstanceClusterAttachmentArrayOutput
	ToInstanceClusterAttachmentArrayOutputWithContext(context.Context) InstanceClusterAttachmentArrayOutput
}

type InstanceClusterAttachmentArray []InstanceClusterAttachmentInput

func (InstanceClusterAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceClusterAttachment)(nil)).Elem()
}

func (i InstanceClusterAttachmentArray) ToInstanceClusterAttachmentArrayOutput() InstanceClusterAttachmentArrayOutput {
	return i.ToInstanceClusterAttachmentArrayOutputWithContext(context.Background())
}

func (i InstanceClusterAttachmentArray) ToInstanceClusterAttachmentArrayOutputWithContext(ctx context.Context) InstanceClusterAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterAttachmentArrayOutput)
}

// InstanceClusterAttachmentMapInput is an input type that accepts InstanceClusterAttachmentMap and InstanceClusterAttachmentMapOutput values.
// You can construct a concrete instance of `InstanceClusterAttachmentMapInput` via:
//
//	InstanceClusterAttachmentMap{ "key": InstanceClusterAttachmentArgs{...} }
type InstanceClusterAttachmentMapInput interface {
	pulumi.Input

	ToInstanceClusterAttachmentMapOutput() InstanceClusterAttachmentMapOutput
	ToInstanceClusterAttachmentMapOutputWithContext(context.Context) InstanceClusterAttachmentMapOutput
}

type InstanceClusterAttachmentMap map[string]InstanceClusterAttachmentInput

func (InstanceClusterAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceClusterAttachment)(nil)).Elem()
}

func (i InstanceClusterAttachmentMap) ToInstanceClusterAttachmentMapOutput() InstanceClusterAttachmentMapOutput {
	return i.ToInstanceClusterAttachmentMapOutputWithContext(context.Background())
}

func (i InstanceClusterAttachmentMap) ToInstanceClusterAttachmentMapOutputWithContext(ctx context.Context) InstanceClusterAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterAttachmentMapOutput)
}

type InstanceClusterAttachmentOutput struct{ *pulumi.OutputState }

func (InstanceClusterAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceClusterAttachment)(nil)).Elem()
}

func (o InstanceClusterAttachmentOutput) ToInstanceClusterAttachmentOutput() InstanceClusterAttachmentOutput {
	return o
}

func (o InstanceClusterAttachmentOutput) ToInstanceClusterAttachmentOutputWithContext(ctx context.Context) InstanceClusterAttachmentOutput {
	return o
}

// The ID of the cluster that you want to create the application.
func (o InstanceClusterAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceClusterAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The cluster members map of the resource supplied above. The key is instanceId and the value is cluster_member_id.
func (o InstanceClusterAttachmentOutput) ClusterMemberIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceClusterAttachment) pulumi.StringMapOutput { return v.ClusterMemberIds }).(pulumi.StringMapOutput)
}

// The ecu map of the resource supplied above. The key is instanceId and the value is ecu_id.
func (o InstanceClusterAttachmentOutput) EcuMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceClusterAttachment) pulumi.StringMapOutput { return v.EcuMap }).(pulumi.StringMapOutput)
}

// The ID of instance. Type: list.
func (o InstanceClusterAttachmentOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceClusterAttachment) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The status map of the resource supplied above. The key is instanceId and the values are 1(running) 0(converting) -1(failed) and -2(offline).
func (o InstanceClusterAttachmentOutput) StatusMap() pulumi.IntMapOutput {
	return o.ApplyT(func(v *InstanceClusterAttachment) pulumi.IntMapOutput { return v.StatusMap }).(pulumi.IntMapOutput)
}

type InstanceClusterAttachmentArrayOutput struct{ *pulumi.OutputState }

func (InstanceClusterAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceClusterAttachment)(nil)).Elem()
}

func (o InstanceClusterAttachmentArrayOutput) ToInstanceClusterAttachmentArrayOutput() InstanceClusterAttachmentArrayOutput {
	return o
}

func (o InstanceClusterAttachmentArrayOutput) ToInstanceClusterAttachmentArrayOutputWithContext(ctx context.Context) InstanceClusterAttachmentArrayOutput {
	return o
}

func (o InstanceClusterAttachmentArrayOutput) Index(i pulumi.IntInput) InstanceClusterAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceClusterAttachment {
		return vs[0].([]*InstanceClusterAttachment)[vs[1].(int)]
	}).(InstanceClusterAttachmentOutput)
}

type InstanceClusterAttachmentMapOutput struct{ *pulumi.OutputState }

func (InstanceClusterAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceClusterAttachment)(nil)).Elem()
}

func (o InstanceClusterAttachmentMapOutput) ToInstanceClusterAttachmentMapOutput() InstanceClusterAttachmentMapOutput {
	return o
}

func (o InstanceClusterAttachmentMapOutput) ToInstanceClusterAttachmentMapOutputWithContext(ctx context.Context) InstanceClusterAttachmentMapOutput {
	return o
}

func (o InstanceClusterAttachmentMapOutput) MapIndex(k pulumi.StringInput) InstanceClusterAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceClusterAttachment {
		return vs[0].(map[string]*InstanceClusterAttachment)[vs[1].(string)]
	}).(InstanceClusterAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceClusterAttachmentInput)(nil)).Elem(), &InstanceClusterAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceClusterAttachmentArrayInput)(nil)).Elem(), InstanceClusterAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceClusterAttachmentMapInput)(nil)).Elem(), InstanceClusterAttachmentMap{})
	pulumi.RegisterOutputType(InstanceClusterAttachmentOutput{})
	pulumi.RegisterOutputType(InstanceClusterAttachmentArrayOutput{})
	pulumi.RegisterOutputType(InstanceClusterAttachmentMapOutput{})
}
