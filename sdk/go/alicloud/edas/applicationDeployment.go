// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Deploys applications on EDAS, see [What is EDAS Application Deployment](https://www.alibabacloud.com/help/en/edas/developer-reference/api-edas-2017-08-01-deployapplication).
//
// > **NOTE:** Available since v1.82.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/edas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				NameRegex: pulumi.StringRef("^ubuntu_[0-9]+_[0-9]+_x64*"),
//				Owners:    pulumi.StringRef("system"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone: pulumi.StringRef(defaultZones.Zones[0].Id),
//				CpuCoreCount:     pulumi.IntRef(1),
//				MemorySize:       pulumi.Float64Ref(2),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.0.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := ecs.NewInstance(ctx, "defaultInstance", &ecs.InstanceArgs{
//				AvailabilityZone: *pulumi.String(defaultZones.Zones[0].Id),
//				InstanceName:     pulumi.String(name),
//				ImageId:          *pulumi.String(defaultImages.Images[0].Id),
//				InstanceType:     *pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
//				SecurityGroups: pulumi.StringArray{
//					defaultSecurityGroup.ID(),
//				},
//				VswitchId: defaultSwitch.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := edas.NewCluster(ctx, "defaultCluster", &edas.ClusterArgs{
//				ClusterName:     pulumi.String(name),
//				ClusterType:     pulumi.Int(2),
//				NetworkMode:     pulumi.Int(2),
//				LogicalRegionId: *pulumi.String(defaultRegions.Regions[0].Id),
//				VpcId:           defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewInstanceClusterAttachment(ctx, "defaultInstanceClusterAttachment", &edas.InstanceClusterAttachmentArgs{
//				ClusterId: defaultCluster.ID(),
//				InstanceIds: pulumi.StringArray{
//					defaultInstance.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultApplication, err := edas.NewApplication(ctx, "defaultApplication", &edas.ApplicationArgs{
//				ApplicationName: pulumi.String(name),
//				ClusterId:       defaultCluster.ID(),
//				PackageType:     pulumi.String("JAR"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewDeployGroup(ctx, "defaultDeployGroup", &edas.DeployGroupArgs{
//				AppId:     defaultApplication.ID(),
//				GroupName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewApplicationDeployment(ctx, "defaultApplicationDeployment", &edas.ApplicationDeploymentArgs{
//				AppId:   defaultApplication.ID(),
//				GroupId: pulumi.String("all"),
//				WarUrl:  pulumi.String("http://edas-sz.oss-cn-shenzhen.aliyuncs.com/prod/demo/SPRING_CLOUD_CONSUMER.jar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApplicationDeployment struct {
	pulumi.CustomResourceState

	// The ID of the application that you want to deploy.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Last package version deployed.
	LastPackageVersion pulumi.StringOutput `pulumi:"lastPackageVersion"`
	// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
	PackageVersion pulumi.StringPtrOutput `pulumi:"packageVersion"`
	// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
	WarUrl pulumi.StringOutput `pulumi:"warUrl"`
}

// NewApplicationDeployment registers a new resource with the given unique name, arguments, and options.
func NewApplicationDeployment(ctx *pulumi.Context,
	name string, args *ApplicationDeploymentArgs, opts ...pulumi.ResourceOption) (*ApplicationDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.WarUrl == nil {
		return nil, errors.New("invalid value for required argument 'WarUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationDeployment
	err := ctx.RegisterResource("alicloud:edas/applicationDeployment:ApplicationDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationDeployment gets an existing ApplicationDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationDeploymentState, opts ...pulumi.ResourceOption) (*ApplicationDeployment, error) {
	var resource ApplicationDeployment
	err := ctx.ReadResource("alicloud:edas/applicationDeployment:ApplicationDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationDeployment resources.
type applicationDeploymentState struct {
	// The ID of the application that you want to deploy.
	AppId *string `pulumi:"appId"`
	// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
	GroupId *string `pulumi:"groupId"`
	// Last package version deployed.
	LastPackageVersion *string `pulumi:"lastPackageVersion"`
	// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
	PackageVersion *string `pulumi:"packageVersion"`
	// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
	WarUrl *string `pulumi:"warUrl"`
}

type ApplicationDeploymentState struct {
	// The ID of the application that you want to deploy.
	AppId pulumi.StringPtrInput
	// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
	GroupId pulumi.StringPtrInput
	// Last package version deployed.
	LastPackageVersion pulumi.StringPtrInput
	// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
	PackageVersion pulumi.StringPtrInput
	// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
	WarUrl pulumi.StringPtrInput
}

func (ApplicationDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDeploymentState)(nil)).Elem()
}

type applicationDeploymentArgs struct {
	// The ID of the application that you want to deploy.
	AppId string `pulumi:"appId"`
	// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
	GroupId string `pulumi:"groupId"`
	// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
	PackageVersion *string `pulumi:"packageVersion"`
	// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
	WarUrl string `pulumi:"warUrl"`
}

// The set of arguments for constructing a ApplicationDeployment resource.
type ApplicationDeploymentArgs struct {
	// The ID of the application that you want to deploy.
	AppId pulumi.StringInput
	// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
	GroupId pulumi.StringInput
	// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
	PackageVersion pulumi.StringPtrInput
	// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
	WarUrl pulumi.StringInput
}

func (ApplicationDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDeploymentArgs)(nil)).Elem()
}

type ApplicationDeploymentInput interface {
	pulumi.Input

	ToApplicationDeploymentOutput() ApplicationDeploymentOutput
	ToApplicationDeploymentOutputWithContext(ctx context.Context) ApplicationDeploymentOutput
}

func (*ApplicationDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeployment)(nil)).Elem()
}

func (i *ApplicationDeployment) ToApplicationDeploymentOutput() ApplicationDeploymentOutput {
	return i.ToApplicationDeploymentOutputWithContext(context.Background())
}

func (i *ApplicationDeployment) ToApplicationDeploymentOutputWithContext(ctx context.Context) ApplicationDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeploymentOutput)
}

func (i *ApplicationDeployment) ToOutput(ctx context.Context) pulumix.Output[*ApplicationDeployment] {
	return pulumix.Output[*ApplicationDeployment]{
		OutputState: i.ToApplicationDeploymentOutputWithContext(ctx).OutputState,
	}
}

// ApplicationDeploymentArrayInput is an input type that accepts ApplicationDeploymentArray and ApplicationDeploymentArrayOutput values.
// You can construct a concrete instance of `ApplicationDeploymentArrayInput` via:
//
//	ApplicationDeploymentArray{ ApplicationDeploymentArgs{...} }
type ApplicationDeploymentArrayInput interface {
	pulumi.Input

	ToApplicationDeploymentArrayOutput() ApplicationDeploymentArrayOutput
	ToApplicationDeploymentArrayOutputWithContext(context.Context) ApplicationDeploymentArrayOutput
}

type ApplicationDeploymentArray []ApplicationDeploymentInput

func (ApplicationDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationDeployment)(nil)).Elem()
}

func (i ApplicationDeploymentArray) ToApplicationDeploymentArrayOutput() ApplicationDeploymentArrayOutput {
	return i.ToApplicationDeploymentArrayOutputWithContext(context.Background())
}

func (i ApplicationDeploymentArray) ToApplicationDeploymentArrayOutputWithContext(ctx context.Context) ApplicationDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeploymentArrayOutput)
}

func (i ApplicationDeploymentArray) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationDeployment] {
	return pulumix.Output[[]*ApplicationDeployment]{
		OutputState: i.ToApplicationDeploymentArrayOutputWithContext(ctx).OutputState,
	}
}

// ApplicationDeploymentMapInput is an input type that accepts ApplicationDeploymentMap and ApplicationDeploymentMapOutput values.
// You can construct a concrete instance of `ApplicationDeploymentMapInput` via:
//
//	ApplicationDeploymentMap{ "key": ApplicationDeploymentArgs{...} }
type ApplicationDeploymentMapInput interface {
	pulumi.Input

	ToApplicationDeploymentMapOutput() ApplicationDeploymentMapOutput
	ToApplicationDeploymentMapOutputWithContext(context.Context) ApplicationDeploymentMapOutput
}

type ApplicationDeploymentMap map[string]ApplicationDeploymentInput

func (ApplicationDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationDeployment)(nil)).Elem()
}

func (i ApplicationDeploymentMap) ToApplicationDeploymentMapOutput() ApplicationDeploymentMapOutput {
	return i.ToApplicationDeploymentMapOutputWithContext(context.Background())
}

func (i ApplicationDeploymentMap) ToApplicationDeploymentMapOutputWithContext(ctx context.Context) ApplicationDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeploymentMapOutput)
}

func (i ApplicationDeploymentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationDeployment] {
	return pulumix.Output[map[string]*ApplicationDeployment]{
		OutputState: i.ToApplicationDeploymentMapOutputWithContext(ctx).OutputState,
	}
}

type ApplicationDeploymentOutput struct{ *pulumi.OutputState }

func (ApplicationDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeployment)(nil)).Elem()
}

func (o ApplicationDeploymentOutput) ToApplicationDeploymentOutput() ApplicationDeploymentOutput {
	return o
}

func (o ApplicationDeploymentOutput) ToApplicationDeploymentOutputWithContext(ctx context.Context) ApplicationDeploymentOutput {
	return o
}

func (o ApplicationDeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationDeployment] {
	return pulumix.Output[*ApplicationDeployment]{
		OutputState: o.OutputState,
	}
}

// The ID of the application that you want to deploy.
func (o ApplicationDeploymentOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDeployment) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The ID of the instance group where the application is going to be deployed. Set this parameter to all if you want to deploy the application to all groups.
func (o ApplicationDeploymentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDeployment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Last package version deployed.
func (o ApplicationDeploymentOutput) LastPackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDeployment) pulumi.StringOutput { return v.LastPackageVersion }).(pulumi.StringOutput)
}

// The version of the application that you want to deploy. It must be unique for every application. The length cannot exceed 64 characters. We recommended you to use a timestamp.
func (o ApplicationDeploymentOutput) PackageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationDeployment) pulumi.StringPtrOutput { return v.PackageVersion }).(pulumi.StringPtrOutput)
}

// The address to store the uploaded web application (WAR) package for application deployment. This parameter is required when the deployType parameter is set as url.
func (o ApplicationDeploymentOutput) WarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDeployment) pulumi.StringOutput { return v.WarUrl }).(pulumi.StringOutput)
}

type ApplicationDeploymentArrayOutput struct{ *pulumi.OutputState }

func (ApplicationDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationDeployment)(nil)).Elem()
}

func (o ApplicationDeploymentArrayOutput) ToApplicationDeploymentArrayOutput() ApplicationDeploymentArrayOutput {
	return o
}

func (o ApplicationDeploymentArrayOutput) ToApplicationDeploymentArrayOutputWithContext(ctx context.Context) ApplicationDeploymentArrayOutput {
	return o
}

func (o ApplicationDeploymentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ApplicationDeployment] {
	return pulumix.Output[[]*ApplicationDeployment]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationDeploymentArrayOutput) Index(i pulumi.IntInput) ApplicationDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationDeployment {
		return vs[0].([]*ApplicationDeployment)[vs[1].(int)]
	}).(ApplicationDeploymentOutput)
}

type ApplicationDeploymentMapOutput struct{ *pulumi.OutputState }

func (ApplicationDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationDeployment)(nil)).Elem()
}

func (o ApplicationDeploymentMapOutput) ToApplicationDeploymentMapOutput() ApplicationDeploymentMapOutput {
	return o
}

func (o ApplicationDeploymentMapOutput) ToApplicationDeploymentMapOutputWithContext(ctx context.Context) ApplicationDeploymentMapOutput {
	return o
}

func (o ApplicationDeploymentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApplicationDeployment] {
	return pulumix.Output[map[string]*ApplicationDeployment]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationDeploymentMapOutput) MapIndex(k pulumi.StringInput) ApplicationDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationDeployment {
		return vs[0].(map[string]*ApplicationDeployment)[vs[1].(string)]
	}).(ApplicationDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDeploymentInput)(nil)).Elem(), &ApplicationDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDeploymentArrayInput)(nil)).Elem(), ApplicationDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDeploymentMapInput)(nil)).Elem(), ApplicationDeploymentMap{})
	pulumi.RegisterOutputType(ApplicationDeploymentOutput{})
	pulumi.RegisterOutputType(ApplicationDeploymentArrayOutput{})
	pulumi.RegisterOutputType(ApplicationDeploymentMapOutput{})
}
