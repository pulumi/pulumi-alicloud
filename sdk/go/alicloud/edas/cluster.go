// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EDAS cluster resource, see [What is EDAS Cluster](https://www.alibabacloud.com/help/en/edas/developer-reference/api-edas-2017-08-01-insertcluster).
//
// > **NOTE:** Available since v1.82.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/edas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewCluster(ctx, "defaultCluster", &edas.ClusterArgs{
//				ClusterName:     pulumi.String(name),
//				ClusterType:     pulumi.Int(2),
//				NetworkMode:     pulumi.Int(2),
//				LogicalRegionId: *pulumi.String(defaultRegions.Regions[0].Id),
//				VpcId:           defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EDAS cluster can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:edas/cluster:Cluster cluster cluster_id
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// The name of the cluster that you want to create.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntOutput `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrOutput `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntOutput `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.NetworkMode == nil {
		return nil, errors.New("invalid value for required argument 'NetworkMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("alicloud:edas/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("alicloud:edas/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The name of the cluster that you want to create.
	ClusterName *string `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType *int `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode *int `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// The name of the cluster that you want to create.
	ClusterName pulumi.StringPtrInput
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntPtrInput
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrInput
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntPtrInput
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name of the cluster that you want to create.
	ClusterName string `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType int `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode int `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the cluster that you want to create.
	ClusterName pulumi.StringInput
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntInput
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrInput
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntInput
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: i.ToClusterOutputWithContext(ctx).OutputState,
	}
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

func (i ClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: i.ToClusterArrayOutputWithContext(ctx).OutputState,
	}
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

func (i ClusterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: i.ToClusterMapOutputWithContext(ctx).OutputState,
	}
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: o.OutputState,
	}
}

// The name of the cluster that you want to create.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
func (o ClusterOutput) ClusterType() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ClusterType }).(pulumi.IntOutput)
}

// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
func (o ClusterOutput) LogicalRegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.LogicalRegionId }).(pulumi.StringPtrOutput)
}

// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
func (o ClusterOutput) NetworkMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NetworkMode }).(pulumi.IntOutput)
}

// The ID of the Virtual Private Cloud (VPC) for the cluster.
func (o ClusterOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
