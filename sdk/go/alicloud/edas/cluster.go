// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an EDAS cluster resource.
//
// > **NOTE:** Available in 1.82.0+
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/edas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := edas.NewCluster(ctx, "_default", &edas.ClusterArgs{
// 			ClusterName:     pulumi.Any(_var.Cluster_name),
// 			ClusterType:     pulumi.Any(_var.Cluster_type),
// 			NetworkMode:     pulumi.Any(_var.Network_mode),
// 			LogicalRegionId: pulumi.Any(_var.Logical_region_id),
// 			VpcId:           pulumi.Any(_var.Vpc_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// EDAS cluster can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:edas/cluster:Cluster cluster cluster_id
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// The name of the cluster that you want to create.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntOutput `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrOutput `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntOutput `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.ClusterType == nil {
		return nil, errors.New("missing required argument 'ClusterType'")
	}
	if args == nil || args.NetworkMode == nil {
		return nil, errors.New("missing required argument 'NetworkMode'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("alicloud:edas/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("alicloud:edas/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The name of the cluster that you want to create.
	ClusterName *string `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType *int `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode *int `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// The name of the cluster that you want to create.
	ClusterName pulumi.StringPtrInput
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntPtrInput
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrInput
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntPtrInput
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name of the cluster that you want to create.
	ClusterName string `pulumi:"clusterName"`
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType int `pulumi:"clusterType"`
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode int `pulumi:"networkMode"`
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the cluster that you want to create.
	ClusterName pulumi.StringInput
	// The type of the cluster that you want to create. Valid values only: 2: ECS cluster.
	ClusterType pulumi.IntInput
	// The ID of the namespace where you want to create the application. You can call the ListUserDefineRegion operation to query the namespace ID.
	LogicalRegionId pulumi.StringPtrInput
	// The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
	NetworkMode pulumi.IntInput
	// The ID of the Virtual Private Cloud (VPC) for the cluster.
	VpcId pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (i Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct {
	*pulumi.OutputState
}

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutput)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
