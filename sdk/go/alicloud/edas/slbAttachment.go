// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Binds SLB to an EDAS application.
//
// > **NOTE:** Available since v1.82.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/edas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/slb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				NameRegex: pulumi.StringRef("^ubuntu_[0-9]+_[0-9]+_x64*"),
//				Owners:    pulumi.StringRef("system"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone: pulumi.StringRef(defaultZones.Zones[0].Id),
//				CpuCoreCount:     pulumi.IntRef(1),
//				MemorySize:       pulumi.Float64Ref(2),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.0.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := ecs.NewInstance(ctx, "defaultInstance", &ecs.InstanceArgs{
//				AvailabilityZone: *pulumi.String(defaultZones.Zones[0].Id),
//				InstanceName:     pulumi.String(name),
//				ImageId:          *pulumi.String(defaultImages.Images[0].Id),
//				InstanceType:     *pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
//				SecurityGroups: pulumi.StringArray{
//					defaultSecurityGroup.ID(),
//				},
//				VswitchId:               defaultSwitch.ID(),
//				InternetMaxBandwidthOut: pulumi.Int(10),
//				InternetChargeType:      pulumi.String("PayByTraffic"),
//				InstanceChargeType:      pulumi.String("PostPaid"),
//				SystemDiskCategory:      pulumi.String("cloud_efficiency"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := edas.NewCluster(ctx, "defaultCluster", &edas.ClusterArgs{
//				ClusterName:     pulumi.String(name),
//				ClusterType:     pulumi.Int(2),
//				NetworkMode:     pulumi.Int(2),
//				LogicalRegionId: *pulumi.String(defaultRegions.Regions[0].Id),
//				VpcId:           defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewInstanceClusterAttachment(ctx, "defaultInstanceClusterAttachment", &edas.InstanceClusterAttachmentArgs{
//				ClusterId: defaultCluster.ID(),
//				InstanceIds: pulumi.StringArray{
//					defaultInstance.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultApplication, err := edas.NewApplication(ctx, "defaultApplication", &edas.ApplicationArgs{
//				ApplicationName: pulumi.String(name),
//				ClusterId:       defaultCluster.ID(),
//				PackageType:     pulumi.String("JAR"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultApplicationLoadBalancer, err := slb.NewApplicationLoadBalancer(ctx, "defaultApplicationLoadBalancer", &slb.ApplicationLoadBalancerArgs{
//				LoadBalancerName: pulumi.String(name),
//				VswitchId:        defaultSwitch.ID(),
//				LoadBalancerSpec: pulumi.String("slb.s2.small"),
//				AddressType:      pulumi.String("intranet"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = edas.NewSlbAttachment(ctx, "defaultSlbAttachment", &edas.SlbAttachmentArgs{
//				AppId: defaultApplication.ID(),
//				SlbId: defaultApplicationLoadBalancer.ID(),
//				SlbIp: defaultApplicationLoadBalancer.Address,
//				Type:  defaultApplicationLoadBalancer.AddressType,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SlbAttachment struct {
	pulumi.CustomResourceState

	// The ID of the application to which you want to bind an SLB instance.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The listening port for the bound SLB instance.
	ListenerPort pulumi.IntPtrOutput `pulumi:"listenerPort"`
	// The ID of the SLB instance that is going to be bound.
	SlbId pulumi.StringOutput `pulumi:"slbId"`
	// The IP address that is allocated to the bound SLB instance.
	SlbIp pulumi.StringOutput `pulumi:"slbIp"`
	// Running Status of SLB instance. Inactive：The instance is stopped, and listener will not monitor and forward traffic. Active：The instance is running. After the instance is created, the default state is active. Locked：The instance is locked, the instance has been owed or locked by Alibaba Cloud. Expired: The instance has expired.
	SlbStatus pulumi.StringOutput `pulumi:"slbStatus"`
	// The type of the bound SLB instance.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
	VserverGroupId pulumi.StringPtrOutput `pulumi:"vserverGroupId"`
	// VPC related vswitch ID.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewSlbAttachment registers a new resource with the given unique name, arguments, and options.
func NewSlbAttachment(ctx *pulumi.Context,
	name string, args *SlbAttachmentArgs, opts ...pulumi.ResourceOption) (*SlbAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.SlbId == nil {
		return nil, errors.New("invalid value for required argument 'SlbId'")
	}
	if args.SlbIp == nil {
		return nil, errors.New("invalid value for required argument 'SlbIp'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlbAttachment
	err := ctx.RegisterResource("alicloud:edas/slbAttachment:SlbAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlbAttachment gets an existing SlbAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlbAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlbAttachmentState, opts ...pulumi.ResourceOption) (*SlbAttachment, error) {
	var resource SlbAttachment
	err := ctx.ReadResource("alicloud:edas/slbAttachment:SlbAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlbAttachment resources.
type slbAttachmentState struct {
	// The ID of the application to which you want to bind an SLB instance.
	AppId *string `pulumi:"appId"`
	// The listening port for the bound SLB instance.
	ListenerPort *int `pulumi:"listenerPort"`
	// The ID of the SLB instance that is going to be bound.
	SlbId *string `pulumi:"slbId"`
	// The IP address that is allocated to the bound SLB instance.
	SlbIp *string `pulumi:"slbIp"`
	// Running Status of SLB instance. Inactive：The instance is stopped, and listener will not monitor and forward traffic. Active：The instance is running. After the instance is created, the default state is active. Locked：The instance is locked, the instance has been owed or locked by Alibaba Cloud. Expired: The instance has expired.
	SlbStatus *string `pulumi:"slbStatus"`
	// The type of the bound SLB instance.
	Type *string `pulumi:"type"`
	// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
	VserverGroupId *string `pulumi:"vserverGroupId"`
	// VPC related vswitch ID.
	VswitchId *string `pulumi:"vswitchId"`
}

type SlbAttachmentState struct {
	// The ID of the application to which you want to bind an SLB instance.
	AppId pulumi.StringPtrInput
	// The listening port for the bound SLB instance.
	ListenerPort pulumi.IntPtrInput
	// The ID of the SLB instance that is going to be bound.
	SlbId pulumi.StringPtrInput
	// The IP address that is allocated to the bound SLB instance.
	SlbIp pulumi.StringPtrInput
	// Running Status of SLB instance. Inactive：The instance is stopped, and listener will not monitor and forward traffic. Active：The instance is running. After the instance is created, the default state is active. Locked：The instance is locked, the instance has been owed or locked by Alibaba Cloud. Expired: The instance has expired.
	SlbStatus pulumi.StringPtrInput
	// The type of the bound SLB instance.
	Type pulumi.StringPtrInput
	// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
	VserverGroupId pulumi.StringPtrInput
	// VPC related vswitch ID.
	VswitchId pulumi.StringPtrInput
}

func (SlbAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*slbAttachmentState)(nil)).Elem()
}

type slbAttachmentArgs struct {
	// The ID of the application to which you want to bind an SLB instance.
	AppId string `pulumi:"appId"`
	// The listening port for the bound SLB instance.
	ListenerPort *int `pulumi:"listenerPort"`
	// The ID of the SLB instance that is going to be bound.
	SlbId string `pulumi:"slbId"`
	// The IP address that is allocated to the bound SLB instance.
	SlbIp string `pulumi:"slbIp"`
	// The type of the bound SLB instance.
	Type string `pulumi:"type"`
	// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
	VserverGroupId *string `pulumi:"vserverGroupId"`
}

// The set of arguments for constructing a SlbAttachment resource.
type SlbAttachmentArgs struct {
	// The ID of the application to which you want to bind an SLB instance.
	AppId pulumi.StringInput
	// The listening port for the bound SLB instance.
	ListenerPort pulumi.IntPtrInput
	// The ID of the SLB instance that is going to be bound.
	SlbId pulumi.StringInput
	// The IP address that is allocated to the bound SLB instance.
	SlbIp pulumi.StringInput
	// The type of the bound SLB instance.
	Type pulumi.StringInput
	// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
	VserverGroupId pulumi.StringPtrInput
}

func (SlbAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slbAttachmentArgs)(nil)).Elem()
}

type SlbAttachmentInput interface {
	pulumi.Input

	ToSlbAttachmentOutput() SlbAttachmentOutput
	ToSlbAttachmentOutputWithContext(ctx context.Context) SlbAttachmentOutput
}

func (*SlbAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SlbAttachment)(nil)).Elem()
}

func (i *SlbAttachment) ToSlbAttachmentOutput() SlbAttachmentOutput {
	return i.ToSlbAttachmentOutputWithContext(context.Background())
}

func (i *SlbAttachment) ToSlbAttachmentOutputWithContext(ctx context.Context) SlbAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlbAttachmentOutput)
}

func (i *SlbAttachment) ToOutput(ctx context.Context) pulumix.Output[*SlbAttachment] {
	return pulumix.Output[*SlbAttachment]{
		OutputState: i.ToSlbAttachmentOutputWithContext(ctx).OutputState,
	}
}

// SlbAttachmentArrayInput is an input type that accepts SlbAttachmentArray and SlbAttachmentArrayOutput values.
// You can construct a concrete instance of `SlbAttachmentArrayInput` via:
//
//	SlbAttachmentArray{ SlbAttachmentArgs{...} }
type SlbAttachmentArrayInput interface {
	pulumi.Input

	ToSlbAttachmentArrayOutput() SlbAttachmentArrayOutput
	ToSlbAttachmentArrayOutputWithContext(context.Context) SlbAttachmentArrayOutput
}

type SlbAttachmentArray []SlbAttachmentInput

func (SlbAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlbAttachment)(nil)).Elem()
}

func (i SlbAttachmentArray) ToSlbAttachmentArrayOutput() SlbAttachmentArrayOutput {
	return i.ToSlbAttachmentArrayOutputWithContext(context.Background())
}

func (i SlbAttachmentArray) ToSlbAttachmentArrayOutputWithContext(ctx context.Context) SlbAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlbAttachmentArrayOutput)
}

func (i SlbAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*SlbAttachment] {
	return pulumix.Output[[]*SlbAttachment]{
		OutputState: i.ToSlbAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// SlbAttachmentMapInput is an input type that accepts SlbAttachmentMap and SlbAttachmentMapOutput values.
// You can construct a concrete instance of `SlbAttachmentMapInput` via:
//
//	SlbAttachmentMap{ "key": SlbAttachmentArgs{...} }
type SlbAttachmentMapInput interface {
	pulumi.Input

	ToSlbAttachmentMapOutput() SlbAttachmentMapOutput
	ToSlbAttachmentMapOutputWithContext(context.Context) SlbAttachmentMapOutput
}

type SlbAttachmentMap map[string]SlbAttachmentInput

func (SlbAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlbAttachment)(nil)).Elem()
}

func (i SlbAttachmentMap) ToSlbAttachmentMapOutput() SlbAttachmentMapOutput {
	return i.ToSlbAttachmentMapOutputWithContext(context.Background())
}

func (i SlbAttachmentMap) ToSlbAttachmentMapOutputWithContext(ctx context.Context) SlbAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlbAttachmentMapOutput)
}

func (i SlbAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SlbAttachment] {
	return pulumix.Output[map[string]*SlbAttachment]{
		OutputState: i.ToSlbAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type SlbAttachmentOutput struct{ *pulumi.OutputState }

func (SlbAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlbAttachment)(nil)).Elem()
}

func (o SlbAttachmentOutput) ToSlbAttachmentOutput() SlbAttachmentOutput {
	return o
}

func (o SlbAttachmentOutput) ToSlbAttachmentOutputWithContext(ctx context.Context) SlbAttachmentOutput {
	return o
}

func (o SlbAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*SlbAttachment] {
	return pulumix.Output[*SlbAttachment]{
		OutputState: o.OutputState,
	}
}

// The ID of the application to which you want to bind an SLB instance.
func (o SlbAttachmentOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The listening port for the bound SLB instance.
func (o SlbAttachmentOutput) ListenerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.IntPtrOutput { return v.ListenerPort }).(pulumi.IntPtrOutput)
}

// The ID of the SLB instance that is going to be bound.
func (o SlbAttachmentOutput) SlbId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.SlbId }).(pulumi.StringOutput)
}

// The IP address that is allocated to the bound SLB instance.
func (o SlbAttachmentOutput) SlbIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.SlbIp }).(pulumi.StringOutput)
}

// Running Status of SLB instance. Inactive：The instance is stopped, and listener will not monitor and forward traffic. Active：The instance is running. After the instance is created, the default state is active. Locked：The instance is locked, the instance has been owed or locked by Alibaba Cloud. Expired: The instance has expired.
func (o SlbAttachmentOutput) SlbStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.SlbStatus }).(pulumi.StringOutput)
}

// The type of the bound SLB instance.
func (o SlbAttachmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ID of the virtual server (VServer) group associated with the intranet SLB instance.
func (o SlbAttachmentOutput) VserverGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringPtrOutput { return v.VserverGroupId }).(pulumi.StringPtrOutput)
}

// VPC related vswitch ID.
func (o SlbAttachmentOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlbAttachment) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

type SlbAttachmentArrayOutput struct{ *pulumi.OutputState }

func (SlbAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlbAttachment)(nil)).Elem()
}

func (o SlbAttachmentArrayOutput) ToSlbAttachmentArrayOutput() SlbAttachmentArrayOutput {
	return o
}

func (o SlbAttachmentArrayOutput) ToSlbAttachmentArrayOutputWithContext(ctx context.Context) SlbAttachmentArrayOutput {
	return o
}

func (o SlbAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SlbAttachment] {
	return pulumix.Output[[]*SlbAttachment]{
		OutputState: o.OutputState,
	}
}

func (o SlbAttachmentArrayOutput) Index(i pulumi.IntInput) SlbAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlbAttachment {
		return vs[0].([]*SlbAttachment)[vs[1].(int)]
	}).(SlbAttachmentOutput)
}

type SlbAttachmentMapOutput struct{ *pulumi.OutputState }

func (SlbAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlbAttachment)(nil)).Elem()
}

func (o SlbAttachmentMapOutput) ToSlbAttachmentMapOutput() SlbAttachmentMapOutput {
	return o
}

func (o SlbAttachmentMapOutput) ToSlbAttachmentMapOutputWithContext(ctx context.Context) SlbAttachmentMapOutput {
	return o
}

func (o SlbAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SlbAttachment] {
	return pulumix.Output[map[string]*SlbAttachment]{
		OutputState: o.OutputState,
	}
}

func (o SlbAttachmentMapOutput) MapIndex(k pulumi.StringInput) SlbAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlbAttachment {
		return vs[0].(map[string]*SlbAttachment)[vs[1].(string)]
	}).(SlbAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlbAttachmentInput)(nil)).Elem(), &SlbAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlbAttachmentArrayInput)(nil)).Elem(), SlbAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlbAttachmentMapInput)(nil)).Elem(), SlbAttachmentMap{})
	pulumi.RegisterOutputType(SlbAttachmentOutput{})
	pulumi.RegisterOutputType(SlbAttachmentArrayOutput{})
	pulumi.RegisterOutputType(SlbAttachmentMapOutput{})
}
