// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package edas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create an EDAS k8s application.For information about EDAS K8s Application and how to use it, see [What is EDAS K8s Application](https://www.alibabacloud.com/help/doc-detail/85029.htm).
//
// > **NOTE:** Available in 1.105.0+
//
// ## Import
//
// EDAS k8s application can be imported as below, e.g.
//
// ```sh
//  $ pulumi import alicloud:edas/k8sApplication:K8sApplication new_k8s_application application_id
// ```
type K8sApplication struct {
	pulumi.CustomResourceState

	// The description of the application
	ApplicationDescriotion pulumi.StringPtrOutput `pulumi:"applicationDescriotion"`
	// The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The set command, if set, will replace the startup command in the mirror when the mirror is started.
	Command pulumi.StringPtrOutput `pulumi:"command"`
	// Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
	CommandArgs pulumi.StringArrayOutput `pulumi:"commandArgs"`
	// EDAS-Container version that the deployed package depends on. Image does not support this parameter.
	EdasContainerVersion pulumi.StringPtrOutput `pulumi:"edasContainerVersion"`
	// Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
	Envs pulumi.StringMapOutput `pulumi:"envs"`
	// Mirror address. When the packageType is set to 'Image', this parameter item is required.
	ImageUrl pulumi.StringPtrOutput `pulumi:"imageUrl"`
	// Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
	InternetSlbId pulumi.StringPtrOutput `pulumi:"internetSlbId"`
	// The public network SLB front-end port, range 1~65535.
	InternetSlbPort pulumi.IntPtrOutput `pulumi:"internetSlbPort"`
	// The public network SLB protocol supports TCP, HTTP and HTTPS protocols.
	InternetSlbProtocol pulumi.StringPtrOutput `pulumi:"internetSlbProtocol"`
	// The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
	InternetTargetPort pulumi.IntPtrOutput `pulumi:"internetTargetPort"`
	// The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
	Jdk pulumi.StringPtrOutput `pulumi:"jdk"`
	// The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
	LimitMCpu pulumi.IntPtrOutput `pulumi:"limitMCpu"`
	// The memory limit of the application instance during application operation, unit: M.
	LimitMem pulumi.IntPtrOutput `pulumi:"limitMem"`
	// Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
	Liveness pulumi.StringPtrOutput `pulumi:"liveness"`
	// The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
	LocalVolume pulumi.StringPtrOutput `pulumi:"localVolume"`
	// The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
	LogicalRegionId pulumi.StringPtrOutput `pulumi:"logicalRegionId"`
	// Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
	MountDescs pulumi.StringPtrOutput `pulumi:"mountDescs"`
	// The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrOutput `pulumi:"nasId"`
	// Application package type. Optional parameter values include: FatJar, WAR and Image.
	PackageType pulumi.StringPtrOutput `pulumi:"packageType"`
	// The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
	PackageUrl pulumi.StringPtrOutput `pulumi:"packageUrl"`
	// The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
	PackageVersion pulumi.StringPtrOutput `pulumi:"packageVersion"`
	// Execute script after startup
	PostStart pulumi.StringPtrOutput `pulumi:"postStart"`
	// Execute script before stopping
	PreStop pulumi.StringPtrOutput `pulumi:"preStop"`
	// Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
	Readiness pulumi.StringPtrOutput `pulumi:"readiness"`
	// Number of application instances.
	Replicas pulumi.IntPtrOutput `pulumi:"replicas"`
	// When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
	RequestsMCpu pulumi.IntPtrOutput `pulumi:"requestsMCpu"`
	// When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
	RequestsMem pulumi.IntPtrOutput `pulumi:"requestsMem"`
	// The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
	WebContainer pulumi.StringPtrOutput `pulumi:"webContainer"`
}

// NewK8sApplication registers a new resource with the given unique name, arguments, and options.
func NewK8sApplication(ctx *pulumi.Context,
	name string, args *K8sApplicationArgs, opts ...pulumi.ResourceOption) (*K8sApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource K8sApplication
	err := ctx.RegisterResource("alicloud:edas/k8sApplication:K8sApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sApplication gets an existing K8sApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sApplicationState, opts ...pulumi.ResourceOption) (*K8sApplication, error) {
	var resource K8sApplication
	err := ctx.ReadResource("alicloud:edas/k8sApplication:K8sApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sApplication resources.
type k8sApplicationState struct {
	// The description of the application
	ApplicationDescriotion *string `pulumi:"applicationDescriotion"`
	// The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
	ApplicationName *string `pulumi:"applicationName"`
	// The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
	ClusterId *string `pulumi:"clusterId"`
	// The set command, if set, will replace the startup command in the mirror when the mirror is started.
	Command *string `pulumi:"command"`
	// Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
	CommandArgs []string `pulumi:"commandArgs"`
	// EDAS-Container version that the deployed package depends on. Image does not support this parameter.
	EdasContainerVersion *string `pulumi:"edasContainerVersion"`
	// Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
	Envs map[string]string `pulumi:"envs"`
	// Mirror address. When the packageType is set to 'Image', this parameter item is required.
	ImageUrl *string `pulumi:"imageUrl"`
	// Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
	InternetSlbId *string `pulumi:"internetSlbId"`
	// The public network SLB front-end port, range 1~65535.
	InternetSlbPort *int `pulumi:"internetSlbPort"`
	// The public network SLB protocol supports TCP, HTTP and HTTPS protocols.
	InternetSlbProtocol *string `pulumi:"internetSlbProtocol"`
	// The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
	InternetTargetPort *int `pulumi:"internetTargetPort"`
	// The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
	Jdk *string `pulumi:"jdk"`
	// The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
	LimitMCpu *int `pulumi:"limitMCpu"`
	// The memory limit of the application instance during application operation, unit: M.
	LimitMem *int `pulumi:"limitMem"`
	// Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
	Liveness *string `pulumi:"liveness"`
	// The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
	LocalVolume *string `pulumi:"localVolume"`
	// The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
	MountDescs *string `pulumi:"mountDescs"`
	// The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
	Namespace *string `pulumi:"namespace"`
	// The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId *string `pulumi:"nasId"`
	// Application package type. Optional parameter values include: FatJar, WAR and Image.
	PackageType *string `pulumi:"packageType"`
	// The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
	PackageUrl *string `pulumi:"packageUrl"`
	// The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
	PackageVersion *string `pulumi:"packageVersion"`
	// Execute script after startup
	PostStart *string `pulumi:"postStart"`
	// Execute script before stopping
	PreStop *string `pulumi:"preStop"`
	// Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
	Readiness *string `pulumi:"readiness"`
	// Number of application instances.
	Replicas *int `pulumi:"replicas"`
	// When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
	RequestsMCpu *int `pulumi:"requestsMCpu"`
	// When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
	RequestsMem *int `pulumi:"requestsMem"`
	// The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
	WebContainer *string `pulumi:"webContainer"`
}

type K8sApplicationState struct {
	// The description of the application
	ApplicationDescriotion pulumi.StringPtrInput
	// The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
	ApplicationName pulumi.StringPtrInput
	// The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
	ClusterId pulumi.StringPtrInput
	// The set command, if set, will replace the startup command in the mirror when the mirror is started.
	Command pulumi.StringPtrInput
	// Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
	CommandArgs pulumi.StringArrayInput
	// EDAS-Container version that the deployed package depends on. Image does not support this parameter.
	EdasContainerVersion pulumi.StringPtrInput
	// Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
	Envs pulumi.StringMapInput
	// Mirror address. When the packageType is set to 'Image', this parameter item is required.
	ImageUrl pulumi.StringPtrInput
	// Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
	InternetSlbId pulumi.StringPtrInput
	// The public network SLB front-end port, range 1~65535.
	InternetSlbPort pulumi.IntPtrInput
	// The public network SLB protocol supports TCP, HTTP and HTTPS protocols.
	InternetSlbProtocol pulumi.StringPtrInput
	// The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
	InternetTargetPort pulumi.IntPtrInput
	// The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
	Jdk pulumi.StringPtrInput
	// The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
	LimitMCpu pulumi.IntPtrInput
	// The memory limit of the application instance during application operation, unit: M.
	LimitMem pulumi.IntPtrInput
	// Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
	Liveness pulumi.StringPtrInput
	// The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
	LocalVolume pulumi.StringPtrInput
	// The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
	LogicalRegionId pulumi.StringPtrInput
	// Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
	MountDescs pulumi.StringPtrInput
	// The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
	Namespace pulumi.StringPtrInput
	// The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrInput
	// Application package type. Optional parameter values include: FatJar, WAR and Image.
	PackageType pulumi.StringPtrInput
	// The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
	PackageUrl pulumi.StringPtrInput
	// The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
	PackageVersion pulumi.StringPtrInput
	// Execute script after startup
	PostStart pulumi.StringPtrInput
	// Execute script before stopping
	PreStop pulumi.StringPtrInput
	// Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
	Readiness pulumi.StringPtrInput
	// Number of application instances.
	Replicas pulumi.IntPtrInput
	// When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
	RequestsMCpu pulumi.IntPtrInput
	// When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
	RequestsMem pulumi.IntPtrInput
	// The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
	WebContainer pulumi.StringPtrInput
}

func (K8sApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sApplicationState)(nil)).Elem()
}

type k8sApplicationArgs struct {
	// The description of the application
	ApplicationDescriotion *string `pulumi:"applicationDescriotion"`
	// The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
	ApplicationName string `pulumi:"applicationName"`
	// The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
	ClusterId string `pulumi:"clusterId"`
	// The set command, if set, will replace the startup command in the mirror when the mirror is started.
	Command *string `pulumi:"command"`
	// Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
	CommandArgs []string `pulumi:"commandArgs"`
	// EDAS-Container version that the deployed package depends on. Image does not support this parameter.
	EdasContainerVersion *string `pulumi:"edasContainerVersion"`
	// Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
	Envs map[string]string `pulumi:"envs"`
	// Mirror address. When the packageType is set to 'Image', this parameter item is required.
	ImageUrl *string `pulumi:"imageUrl"`
	// Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
	InternetSlbId *string `pulumi:"internetSlbId"`
	// The public network SLB front-end port, range 1~65535.
	InternetSlbPort *int `pulumi:"internetSlbPort"`
	// The public network SLB protocol supports TCP, HTTP and HTTPS protocols.
	InternetSlbProtocol *string `pulumi:"internetSlbProtocol"`
	// The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
	InternetTargetPort *int `pulumi:"internetTargetPort"`
	// The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
	Jdk *string `pulumi:"jdk"`
	// The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
	LimitMCpu *int `pulumi:"limitMCpu"`
	// The memory limit of the application instance during application operation, unit: M.
	LimitMem *int `pulumi:"limitMem"`
	// Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
	Liveness *string `pulumi:"liveness"`
	// The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
	LocalVolume *string `pulumi:"localVolume"`
	// The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
	LogicalRegionId *string `pulumi:"logicalRegionId"`
	// Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
	MountDescs *string `pulumi:"mountDescs"`
	// The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
	Namespace *string `pulumi:"namespace"`
	// The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId *string `pulumi:"nasId"`
	// Application package type. Optional parameter values include: FatJar, WAR and Image.
	PackageType *string `pulumi:"packageType"`
	// The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
	PackageUrl *string `pulumi:"packageUrl"`
	// The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
	PackageVersion *string `pulumi:"packageVersion"`
	// Execute script after startup
	PostStart *string `pulumi:"postStart"`
	// Execute script before stopping
	PreStop *string `pulumi:"preStop"`
	// Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
	Readiness *string `pulumi:"readiness"`
	// Number of application instances.
	Replicas *int `pulumi:"replicas"`
	// When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
	RequestsMCpu *int `pulumi:"requestsMCpu"`
	// When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
	RequestsMem *int `pulumi:"requestsMem"`
	// The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
	WebContainer *string `pulumi:"webContainer"`
}

// The set of arguments for constructing a K8sApplication resource.
type K8sApplicationArgs struct {
	// The description of the application
	ApplicationDescriotion pulumi.StringPtrInput
	// The name of the application you want to create. Must start with character,supports numbers, letters and dashes (-), supports up to 36 characters
	ApplicationName pulumi.StringInput
	// The ID of the alicloud container service kubernetes cluster that you want to import to. You can call the ListCluster operation to query.
	ClusterId pulumi.StringInput
	// The set command, if set, will replace the startup command in the mirror when the mirror is started.
	Command pulumi.StringPtrInput
	// Used in combination with the command, the parameter of the command is a JsonArray string in the format: `[{"argument":"-c"},{"argument":"test"}]`. Among them, -c and test are two parameters that need to be set.
	CommandArgs pulumi.StringArrayInput
	// EDAS-Container version that the deployed package depends on. Image does not support this parameter.
	EdasContainerVersion pulumi.StringPtrInput
	// Deployment environment variables, the format must conform to the JSON object array, such as: `{"name":"x","value":"y"},{"name":"x2","value":"y2"}`, If you want to cancel the configuration, you need to set an empty JSON array "" to indicate no configuration.
	Envs pulumi.StringMapInput
	// Mirror address. When the packageType is set to 'Image', this parameter item is required.
	ImageUrl pulumi.StringPtrInput
	// Public network SLB ID. If not configured, EDAS will automatically purchase a new SLB for the user.
	InternetSlbId pulumi.StringPtrInput
	// The public network SLB front-end port, range 1~65535.
	InternetSlbPort pulumi.IntPtrInput
	// The public network SLB protocol supports TCP, HTTP and HTTPS protocols.
	InternetSlbProtocol pulumi.StringPtrInput
	// The private SLB back-end port, is also the service port of the application, ranging from 1 to 65535.
	InternetTargetPort pulumi.IntPtrInput
	// The JDK version that the deployed package depends on. The optional parameter values are Open JDK 7 and Open JDK 8. Image does not support this parameter.
	Jdk pulumi.StringPtrInput
	// The CPU quota of the application instance during application operation. Unit: Number of millcores, set to 0 means unlimited, similar to request_cpu.
	LimitMCpu pulumi.IntPtrInput
	// The memory limit of the application instance during application operation, unit: M.
	LimitMem pulumi.IntPtrInput
	// Container survival status monitoring, format such as: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1,"tcpSocket":{"host":"", "port":8080} }`.
	Liveness pulumi.StringPtrInput
	// The configuration of the host file mounted to the container. For example: `[{"type":"","nodePath":"/localfiles","mountPath":"/app/files"},{"type":"Directory","nodePath":"/mnt", "mountPath":"/app/storage"}]`. Among them, nodePath is the host path; mountPath is the path in the container; type is the mount type.
	LocalVolume pulumi.StringPtrInput
	// The ID corresponding to the EDAS namespace, the non-default namespace must be filled in.
	LogicalRegionId pulumi.StringPtrInput
	// Mount configuration description, as a serialized JSON. For example: `[{"nasPath": "/k8s","mountPath": "/mnt"},{"nasPath": "/files","mountPath": "/app/files"}]`. Among them, nasPath refers to the file storage path; mountPath refers to the path mounted in the container.
	MountDescs pulumi.StringPtrInput
	// The namespace of the K8s cluster, it will determine which K8s namespace your application is deployed in. The default is 'default'.
	Namespace pulumi.StringPtrInput
	// The ID of the mounted NAS must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field exists, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrInput
	// Application package type. Optional parameter values include: FatJar, WAR and Image.
	PackageType pulumi.StringPtrInput
	// The url of the package to deploy.Applications deployed through FatJar or WAR packages need to configure it.
	PackageUrl pulumi.StringPtrInput
	// The version number of the deployment package. WAR and FatJar types are required. Please customize its meaning.
	PackageVersion pulumi.StringPtrInput
	// Execute script after startup
	PostStart pulumi.StringPtrInput
	// Execute script before stopping
	PreStop pulumi.StringPtrInput
	// Container service status check. If the check fails, the traffic passing through K8s Service will not be transferred to the container. The format is: `{"failureThreshold": 3,"initialDelaySeconds": 5,"successThreshold": 1,"timeoutSeconds": 1, "httpGet": {"path": "/consumer","port": 8080,"scheme": "HTTP","httpHeaders": [{"name": "test","value": "testvalue"} ]}}`.
	Readiness pulumi.StringPtrInput
	// Number of application instances.
	Replicas pulumi.IntPtrInput
	// When the application is created, the CPU quota of the application instance, unit: number of millcores, similar to request_cpu
	RequestsMCpu pulumi.IntPtrInput
	// When the application is created, the memory limit of the application instance, unit: M. When set to 0, it means unlimited.
	RequestsMem pulumi.IntPtrInput
	// The Tomcat version that the deployment package depends on. Applicable to Spring Cloud and Dubbo applications deployed through WAR packages. Image does not support this parameter.
	WebContainer pulumi.StringPtrInput
}

func (K8sApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sApplicationArgs)(nil)).Elem()
}

type K8sApplicationInput interface {
	pulumi.Input

	ToK8sApplicationOutput() K8sApplicationOutput
	ToK8sApplicationOutputWithContext(ctx context.Context) K8sApplicationOutput
}

func (*K8sApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sApplication)(nil)).Elem()
}

func (i *K8sApplication) ToK8sApplicationOutput() K8sApplicationOutput {
	return i.ToK8sApplicationOutputWithContext(context.Background())
}

func (i *K8sApplication) ToK8sApplicationOutputWithContext(ctx context.Context) K8sApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sApplicationOutput)
}

// K8sApplicationArrayInput is an input type that accepts K8sApplicationArray and K8sApplicationArrayOutput values.
// You can construct a concrete instance of `K8sApplicationArrayInput` via:
//
//          K8sApplicationArray{ K8sApplicationArgs{...} }
type K8sApplicationArrayInput interface {
	pulumi.Input

	ToK8sApplicationArrayOutput() K8sApplicationArrayOutput
	ToK8sApplicationArrayOutputWithContext(context.Context) K8sApplicationArrayOutput
}

type K8sApplicationArray []K8sApplicationInput

func (K8sApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sApplication)(nil)).Elem()
}

func (i K8sApplicationArray) ToK8sApplicationArrayOutput() K8sApplicationArrayOutput {
	return i.ToK8sApplicationArrayOutputWithContext(context.Background())
}

func (i K8sApplicationArray) ToK8sApplicationArrayOutputWithContext(ctx context.Context) K8sApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sApplicationArrayOutput)
}

// K8sApplicationMapInput is an input type that accepts K8sApplicationMap and K8sApplicationMapOutput values.
// You can construct a concrete instance of `K8sApplicationMapInput` via:
//
//          K8sApplicationMap{ "key": K8sApplicationArgs{...} }
type K8sApplicationMapInput interface {
	pulumi.Input

	ToK8sApplicationMapOutput() K8sApplicationMapOutput
	ToK8sApplicationMapOutputWithContext(context.Context) K8sApplicationMapOutput
}

type K8sApplicationMap map[string]K8sApplicationInput

func (K8sApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sApplication)(nil)).Elem()
}

func (i K8sApplicationMap) ToK8sApplicationMapOutput() K8sApplicationMapOutput {
	return i.ToK8sApplicationMapOutputWithContext(context.Background())
}

func (i K8sApplicationMap) ToK8sApplicationMapOutputWithContext(ctx context.Context) K8sApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sApplicationMapOutput)
}

type K8sApplicationOutput struct{ *pulumi.OutputState }

func (K8sApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sApplication)(nil)).Elem()
}

func (o K8sApplicationOutput) ToK8sApplicationOutput() K8sApplicationOutput {
	return o
}

func (o K8sApplicationOutput) ToK8sApplicationOutputWithContext(ctx context.Context) K8sApplicationOutput {
	return o
}

type K8sApplicationArrayOutput struct{ *pulumi.OutputState }

func (K8sApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sApplication)(nil)).Elem()
}

func (o K8sApplicationArrayOutput) ToK8sApplicationArrayOutput() K8sApplicationArrayOutput {
	return o
}

func (o K8sApplicationArrayOutput) ToK8sApplicationArrayOutputWithContext(ctx context.Context) K8sApplicationArrayOutput {
	return o
}

func (o K8sApplicationArrayOutput) Index(i pulumi.IntInput) K8sApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sApplication {
		return vs[0].([]*K8sApplication)[vs[1].(int)]
	}).(K8sApplicationOutput)
}

type K8sApplicationMapOutput struct{ *pulumi.OutputState }

func (K8sApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sApplication)(nil)).Elem()
}

func (o K8sApplicationMapOutput) ToK8sApplicationMapOutput() K8sApplicationMapOutput {
	return o
}

func (o K8sApplicationMapOutput) ToK8sApplicationMapOutputWithContext(ctx context.Context) K8sApplicationMapOutput {
	return o
}

func (o K8sApplicationMapOutput) MapIndex(k pulumi.StringInput) K8sApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sApplication {
		return vs[0].(map[string]*K8sApplication)[vs[1].(string)]
	}).(K8sApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sApplicationInput)(nil)).Elem(), &K8sApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sApplicationArrayInput)(nil)).Elem(), K8sApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sApplicationMapInput)(nil)).Elem(), K8sApplicationMap{})
	pulumi.RegisterOutputType(K8sApplicationOutput{})
	pulumi.RegisterOutputType(K8sApplicationArrayOutput{})
	pulumi.RegisterOutputType(K8sApplicationMapOutput{})
}
