// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ens

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ENS Vswitch resource.
//
// For information about ENS Vswitch and how to use it, see [What is Vswitch](https://www.alibabacloud.com/help/en/ens/developer-reference/api-createvswitch).
//
// > **NOTE:** Available since v1.213.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ens"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := ens.NewNetwork(ctx, "default", &ens.NetworkArgs{
//				NetworkName: pulumi.String(name),
//				Description: pulumi.String(name),
//				CidrBlock:   pulumi.String("192.168.2.0/24"),
//				EnsRegionId: pulumi.String("cn-chenzhou-telecom_unicom_cmcc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ens.NewVswitch(ctx, "default", &ens.VswitchArgs{
//				Description: pulumi.String(name),
//				CidrBlock:   pulumi.String("192.168.2.0/24"),
//				VswitchName: pulumi.String(name),
//				EnsRegionId: pulumi.String("cn-chenzhou-telecom_unicom_cmcc"),
//				NetworkId:   _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ENS Vswitch can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ens/vswitch:Vswitch example <id>
// ```
type Vswitch struct {
	pulumi.CustomResourceState

	// The CIDR block of the vSwitch.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The time when the VPC was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the vSwitch.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ENS Region ID.
	EnsRegionId pulumi.StringOutput `pulumi:"ensRegionId"`
	// The ID of the network to which the vSwitch that you want to create belongs.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The status of the vSwitch.
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of the vSwitch.
	VswitchName pulumi.StringPtrOutput `pulumi:"vswitchName"`
}

// NewVswitch registers a new resource with the given unique name, arguments, and options.
func NewVswitch(ctx *pulumi.Context,
	name string, args *VswitchArgs, opts ...pulumi.ResourceOption) (*Vswitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.EnsRegionId == nil {
		return nil, errors.New("invalid value for required argument 'EnsRegionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vswitch
	err := ctx.RegisterResource("alicloud:ens/vswitch:Vswitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVswitch gets an existing Vswitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVswitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VswitchState, opts ...pulumi.ResourceOption) (*Vswitch, error) {
	var resource Vswitch
	err := ctx.ReadResource("alicloud:ens/vswitch:Vswitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vswitch resources.
type vswitchState struct {
	// The CIDR block of the vSwitch.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The time when the VPC was created.
	CreateTime *string `pulumi:"createTime"`
	// The description of the vSwitch.
	Description *string `pulumi:"description"`
	// ENS Region ID.
	EnsRegionId *string `pulumi:"ensRegionId"`
	// The ID of the network to which the vSwitch that you want to create belongs.
	NetworkId *string `pulumi:"networkId"`
	// The status of the vSwitch.
	Status *string `pulumi:"status"`
	// The name of the vSwitch.
	VswitchName *string `pulumi:"vswitchName"`
}

type VswitchState struct {
	// The CIDR block of the vSwitch.
	CidrBlock pulumi.StringPtrInput
	// The time when the VPC was created.
	CreateTime pulumi.StringPtrInput
	// The description of the vSwitch.
	Description pulumi.StringPtrInput
	// ENS Region ID.
	EnsRegionId pulumi.StringPtrInput
	// The ID of the network to which the vSwitch that you want to create belongs.
	NetworkId pulumi.StringPtrInput
	// The status of the vSwitch.
	Status pulumi.StringPtrInput
	// The name of the vSwitch.
	VswitchName pulumi.StringPtrInput
}

func (VswitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vswitchState)(nil)).Elem()
}

type vswitchArgs struct {
	// The CIDR block of the vSwitch.
	CidrBlock string `pulumi:"cidrBlock"`
	// The description of the vSwitch.
	Description *string `pulumi:"description"`
	// ENS Region ID.
	EnsRegionId string `pulumi:"ensRegionId"`
	// The ID of the network to which the vSwitch that you want to create belongs.
	NetworkId *string `pulumi:"networkId"`
	// The name of the vSwitch.
	VswitchName *string `pulumi:"vswitchName"`
}

// The set of arguments for constructing a Vswitch resource.
type VswitchArgs struct {
	// The CIDR block of the vSwitch.
	CidrBlock pulumi.StringInput
	// The description of the vSwitch.
	Description pulumi.StringPtrInput
	// ENS Region ID.
	EnsRegionId pulumi.StringInput
	// The ID of the network to which the vSwitch that you want to create belongs.
	NetworkId pulumi.StringPtrInput
	// The name of the vSwitch.
	VswitchName pulumi.StringPtrInput
}

func (VswitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vswitchArgs)(nil)).Elem()
}

type VswitchInput interface {
	pulumi.Input

	ToVswitchOutput() VswitchOutput
	ToVswitchOutputWithContext(ctx context.Context) VswitchOutput
}

func (*Vswitch) ElementType() reflect.Type {
	return reflect.TypeOf((**Vswitch)(nil)).Elem()
}

func (i *Vswitch) ToVswitchOutput() VswitchOutput {
	return i.ToVswitchOutputWithContext(context.Background())
}

func (i *Vswitch) ToVswitchOutputWithContext(ctx context.Context) VswitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VswitchOutput)
}

// VswitchArrayInput is an input type that accepts VswitchArray and VswitchArrayOutput values.
// You can construct a concrete instance of `VswitchArrayInput` via:
//
//	VswitchArray{ VswitchArgs{...} }
type VswitchArrayInput interface {
	pulumi.Input

	ToVswitchArrayOutput() VswitchArrayOutput
	ToVswitchArrayOutputWithContext(context.Context) VswitchArrayOutput
}

type VswitchArray []VswitchInput

func (VswitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vswitch)(nil)).Elem()
}

func (i VswitchArray) ToVswitchArrayOutput() VswitchArrayOutput {
	return i.ToVswitchArrayOutputWithContext(context.Background())
}

func (i VswitchArray) ToVswitchArrayOutputWithContext(ctx context.Context) VswitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VswitchArrayOutput)
}

// VswitchMapInput is an input type that accepts VswitchMap and VswitchMapOutput values.
// You can construct a concrete instance of `VswitchMapInput` via:
//
//	VswitchMap{ "key": VswitchArgs{...} }
type VswitchMapInput interface {
	pulumi.Input

	ToVswitchMapOutput() VswitchMapOutput
	ToVswitchMapOutputWithContext(context.Context) VswitchMapOutput
}

type VswitchMap map[string]VswitchInput

func (VswitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vswitch)(nil)).Elem()
}

func (i VswitchMap) ToVswitchMapOutput() VswitchMapOutput {
	return i.ToVswitchMapOutputWithContext(context.Background())
}

func (i VswitchMap) ToVswitchMapOutputWithContext(ctx context.Context) VswitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VswitchMapOutput)
}

type VswitchOutput struct{ *pulumi.OutputState }

func (VswitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vswitch)(nil)).Elem()
}

func (o VswitchOutput) ToVswitchOutput() VswitchOutput {
	return o
}

func (o VswitchOutput) ToVswitchOutputWithContext(ctx context.Context) VswitchOutput {
	return o
}

// The CIDR block of the vSwitch.
func (o VswitchOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// The time when the VPC was created.
func (o VswitchOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the vSwitch.
func (o VswitchOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ENS Region ID.
func (o VswitchOutput) EnsRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringOutput { return v.EnsRegionId }).(pulumi.StringOutput)
}

// The ID of the network to which the vSwitch that you want to create belongs.
func (o VswitchOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The status of the vSwitch.
func (o VswitchOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of the vSwitch.
func (o VswitchOutput) VswitchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vswitch) pulumi.StringPtrOutput { return v.VswitchName }).(pulumi.StringPtrOutput)
}

type VswitchArrayOutput struct{ *pulumi.OutputState }

func (VswitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vswitch)(nil)).Elem()
}

func (o VswitchArrayOutput) ToVswitchArrayOutput() VswitchArrayOutput {
	return o
}

func (o VswitchArrayOutput) ToVswitchArrayOutputWithContext(ctx context.Context) VswitchArrayOutput {
	return o
}

func (o VswitchArrayOutput) Index(i pulumi.IntInput) VswitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vswitch {
		return vs[0].([]*Vswitch)[vs[1].(int)]
	}).(VswitchOutput)
}

type VswitchMapOutput struct{ *pulumi.OutputState }

func (VswitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vswitch)(nil)).Elem()
}

func (o VswitchMapOutput) ToVswitchMapOutput() VswitchMapOutput {
	return o
}

func (o VswitchMapOutput) ToVswitchMapOutputWithContext(ctx context.Context) VswitchMapOutput {
	return o
}

func (o VswitchMapOutput) MapIndex(k pulumi.StringInput) VswitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vswitch {
		return vs[0].(map[string]*Vswitch)[vs[1].(string)]
	}).(VswitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VswitchInput)(nil)).Elem(), &Vswitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VswitchArrayInput)(nil)).Elem(), VswitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VswitchMapInput)(nil)).Elem(), VswitchMap{})
	pulumi.RegisterOutputType(VswitchOutput{})
	pulumi.RegisterOutputType(VswitchArrayOutput{})
	pulumi.RegisterOutputType(VswitchMapOutput{})
}
