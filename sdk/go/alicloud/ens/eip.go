// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ens

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ENS Eip resource.
//
// Edge elastic public network IP. When you use it for the first time, please contact the product classmates to add a resource whitelist.
//
// For information about ENS Eip and how to use it, see [What is Eip](https://www.alibabacloud.com/help/en/ens/developer-reference/api-createeipinstance).
//
// > **NOTE:** Available since v1.213.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ens"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := ens.NewEip(ctx, "default", &ens.EipArgs{
//				Description:        pulumi.String("EipDescription_autotest"),
//				Bandwidth:          pulumi.Int(5),
//				Isp:                pulumi.String("cmcc"),
//				PaymentType:        pulumi.String("PayAsYouGo"),
//				EnsRegionId:        pulumi.String("cn-chenzhou-telecom_unicom_cmcc"),
//				EipName:            pulumi.String(name),
//				InternetChargeType: pulumi.String("95BandwidthByMonth"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ENS Eip can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ens/eip:Eip example <id>
// ```
type Eip struct {
	pulumi.CustomResourceState

	// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The creation time of the EIP instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the EIP.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the EIP.
	EipName pulumi.StringPtrOutput `pulumi:"eipName"`
	// Ens node ID.
	EnsRegionId pulumi.StringOutput `pulumi:"ensRegionId"`
	// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
	InternetChargeType pulumi.StringOutput `pulumi:"internetChargeType"`
	// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
	Isp pulumi.StringOutput `pulumi:"isp"`
	// The billing method of the EIP. Valid value: `PayAsYouGo`.
	PaymentType pulumi.StringOutput `pulumi:"paymentType"`
	// The status of the EIP.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEip registers a new resource with the given unique name, arguments, and options.
func NewEip(ctx *pulumi.Context,
	name string, args *EipArgs, opts ...pulumi.ResourceOption) (*Eip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnsRegionId == nil {
		return nil, errors.New("invalid value for required argument 'EnsRegionId'")
	}
	if args.InternetChargeType == nil {
		return nil, errors.New("invalid value for required argument 'InternetChargeType'")
	}
	if args.PaymentType == nil {
		return nil, errors.New("invalid value for required argument 'PaymentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Eip
	err := ctx.RegisterResource("alicloud:ens/eip:Eip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEip gets an existing Eip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipState, opts ...pulumi.ResourceOption) (*Eip, error) {
	var resource Eip
	err := ctx.ReadResource("alicloud:ens/eip:Eip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eip resources.
type eipState struct {
	// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// The creation time of the EIP instance.
	CreateTime *string `pulumi:"createTime"`
	// The description of the EIP.
	Description *string `pulumi:"description"`
	// The name of the EIP.
	EipName *string `pulumi:"eipName"`
	// Ens node ID.
	EnsRegionId *string `pulumi:"ensRegionId"`
	// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
	Isp *string `pulumi:"isp"`
	// The billing method of the EIP. Valid value: `PayAsYouGo`.
	PaymentType *string `pulumi:"paymentType"`
	// The status of the EIP.
	Status *string `pulumi:"status"`
}

type EipState struct {
	// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// The creation time of the EIP instance.
	CreateTime pulumi.StringPtrInput
	// The description of the EIP.
	Description pulumi.StringPtrInput
	// The name of the EIP.
	EipName pulumi.StringPtrInput
	// Ens node ID.
	EnsRegionId pulumi.StringPtrInput
	// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
	InternetChargeType pulumi.StringPtrInput
	// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
	Isp pulumi.StringPtrInput
	// The billing method of the EIP. Valid value: `PayAsYouGo`.
	PaymentType pulumi.StringPtrInput
	// The status of the EIP.
	Status pulumi.StringPtrInput
}

func (EipState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipState)(nil)).Elem()
}

type eipArgs struct {
	// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// The description of the EIP.
	Description *string `pulumi:"description"`
	// The name of the EIP.
	EipName *string `pulumi:"eipName"`
	// Ens node ID.
	EnsRegionId string `pulumi:"ensRegionId"`
	// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
	InternetChargeType string `pulumi:"internetChargeType"`
	// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
	Isp *string `pulumi:"isp"`
	// The billing method of the EIP. Valid value: `PayAsYouGo`.
	PaymentType string `pulumi:"paymentType"`
}

// The set of arguments for constructing a Eip resource.
type EipArgs struct {
	// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// The description of the EIP.
	Description pulumi.StringPtrInput
	// The name of the EIP.
	EipName pulumi.StringPtrInput
	// Ens node ID.
	EnsRegionId pulumi.StringInput
	// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
	InternetChargeType pulumi.StringInput
	// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
	Isp pulumi.StringPtrInput
	// The billing method of the EIP. Valid value: `PayAsYouGo`.
	PaymentType pulumi.StringInput
}

func (EipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipArgs)(nil)).Elem()
}

type EipInput interface {
	pulumi.Input

	ToEipOutput() EipOutput
	ToEipOutputWithContext(ctx context.Context) EipOutput
}

func (*Eip) ElementType() reflect.Type {
	return reflect.TypeOf((**Eip)(nil)).Elem()
}

func (i *Eip) ToEipOutput() EipOutput {
	return i.ToEipOutputWithContext(context.Background())
}

func (i *Eip) ToEipOutputWithContext(ctx context.Context) EipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipOutput)
}

// EipArrayInput is an input type that accepts EipArray and EipArrayOutput values.
// You can construct a concrete instance of `EipArrayInput` via:
//
//	EipArray{ EipArgs{...} }
type EipArrayInput interface {
	pulumi.Input

	ToEipArrayOutput() EipArrayOutput
	ToEipArrayOutputWithContext(context.Context) EipArrayOutput
}

type EipArray []EipInput

func (EipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eip)(nil)).Elem()
}

func (i EipArray) ToEipArrayOutput() EipArrayOutput {
	return i.ToEipArrayOutputWithContext(context.Background())
}

func (i EipArray) ToEipArrayOutputWithContext(ctx context.Context) EipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipArrayOutput)
}

// EipMapInput is an input type that accepts EipMap and EipMapOutput values.
// You can construct a concrete instance of `EipMapInput` via:
//
//	EipMap{ "key": EipArgs{...} }
type EipMapInput interface {
	pulumi.Input

	ToEipMapOutput() EipMapOutput
	ToEipMapOutputWithContext(context.Context) EipMapOutput
}

type EipMap map[string]EipInput

func (EipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eip)(nil)).Elem()
}

func (i EipMap) ToEipMapOutput() EipMapOutput {
	return i.ToEipMapOutputWithContext(context.Background())
}

func (i EipMap) ToEipMapOutputWithContext(ctx context.Context) EipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipMapOutput)
}

type EipOutput struct{ *pulumi.OutputState }

func (EipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Eip)(nil)).Elem()
}

func (o EipOutput) ToEipOutput() EipOutput {
	return o
}

func (o EipOutput) ToEipOutputWithContext(ctx context.Context) EipOutput {
	return o
}

// The maximum bandwidth of the EIP. Default value: `5`. Valid values: `5` to `10000`. Unit: Mbit/s.
func (o EipOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Eip) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The creation time of the EIP instance.
func (o EipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the EIP.
func (o EipOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the EIP.
func (o EipOutput) EipName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringPtrOutput { return v.EipName }).(pulumi.StringPtrOutput)
}

// Ens node ID.
func (o EipOutput) EnsRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.EnsRegionId }).(pulumi.StringOutput)
}

// The metering method of the EIP. Valid value: `95BandwidthByMonth`.
func (o EipOutput) InternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.InternetChargeType }).(pulumi.StringOutput)
}

// The Internet service provider. Valid value: `cmcc`, `unicom`, `telecom`.
func (o EipOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.Isp }).(pulumi.StringOutput)
}

// The billing method of the EIP. Valid value: `PayAsYouGo`.
func (o EipOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PaymentType }).(pulumi.StringOutput)
}

// The status of the EIP.
func (o EipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EipArrayOutput struct{ *pulumi.OutputState }

func (EipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eip)(nil)).Elem()
}

func (o EipArrayOutput) ToEipArrayOutput() EipArrayOutput {
	return o
}

func (o EipArrayOutput) ToEipArrayOutputWithContext(ctx context.Context) EipArrayOutput {
	return o
}

func (o EipArrayOutput) Index(i pulumi.IntInput) EipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Eip {
		return vs[0].([]*Eip)[vs[1].(int)]
	}).(EipOutput)
}

type EipMapOutput struct{ *pulumi.OutputState }

func (EipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eip)(nil)).Elem()
}

func (o EipMapOutput) ToEipMapOutput() EipMapOutput {
	return o
}

func (o EipMapOutput) ToEipMapOutputWithContext(ctx context.Context) EipMapOutput {
	return o
}

func (o EipMapOutput) MapIndex(k pulumi.StringInput) EipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Eip {
		return vs[0].(map[string]*Eip)[vs[1].(string)]
	}).(EipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EipInput)(nil)).Elem(), &Eip{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipArrayInput)(nil)).Elem(), EipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipMapInput)(nil)).Elem(), EipMap{})
	pulumi.RegisterOutputType(EipOutput{})
	pulumi.RegisterOutputType(EipArrayOutput{})
	pulumi.RegisterOutputType(EipMapOutput{})
}
