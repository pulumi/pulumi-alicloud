// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Elastic Desktop Service(EDS) User resource.
//
// For information about Elastic Desktop Service(EDS) User and how to use it, see [What is User](https://help.aliyun.com/document_detail/188382.html).
//
// > **NOTE:** Available in v1.142.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := eds.NewUser(ctx, "example", &eds.UserArgs{
// 			Email:     pulumi.String("your_email"),
// 			EndUserId: pulumi.String("example_value"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ECD User can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:eds/user:User example <end_user_id>
// ```
type User struct {
	pulumi.CustomResourceState

	// The email of the user email.
	Email pulumi.StringOutput `pulumi:"email"`
	// The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
	EndUserId pulumi.StringOutput `pulumi:"endUserId"`
	// The password of the user password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The phone of the mobile phone number.
	Phone pulumi.StringPtrOutput `pulumi:"phone"`
	// The status of the resource. Valid values: `Unlocked`, `Locked`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.EndUserId == nil {
		return nil, errors.New("invalid value for required argument 'EndUserId'")
	}
	var resource User
	err := ctx.RegisterResource("alicloud:eds/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("alicloud:eds/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The email of the user email.
	Email *string `pulumi:"email"`
	// The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
	EndUserId *string `pulumi:"endUserId"`
	// The password of the user password.
	Password *string `pulumi:"password"`
	// The phone of the mobile phone number.
	Phone *string `pulumi:"phone"`
	// The status of the resource. Valid values: `Unlocked`, `Locked`.
	Status *string `pulumi:"status"`
}

type UserState struct {
	// The email of the user email.
	Email pulumi.StringPtrInput
	// The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
	EndUserId pulumi.StringPtrInput
	// The password of the user password.
	Password pulumi.StringPtrInput
	// The phone of the mobile phone number.
	Phone pulumi.StringPtrInput
	// The status of the resource. Valid values: `Unlocked`, `Locked`.
	Status pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The email of the user email.
	Email string `pulumi:"email"`
	// The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
	EndUserId string `pulumi:"endUserId"`
	// The password of the user password.
	Password *string `pulumi:"password"`
	// The phone of the mobile phone number.
	Phone *string `pulumi:"phone"`
	// The status of the resource. Valid values: `Unlocked`, `Locked`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The email of the user email.
	Email pulumi.StringInput
	// The Username. The custom setting is composed of lowercase letters, numbers and underscores, and the length is 3~24 characters.
	EndUserId pulumi.StringInput
	// The password of the user password.
	Password pulumi.StringPtrInput
	// The phone of the mobile phone number.
	Phone pulumi.StringPtrInput
	// The status of the resource. Valid values: `Unlocked`, `Locked`.
	Status pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//          UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//          UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
