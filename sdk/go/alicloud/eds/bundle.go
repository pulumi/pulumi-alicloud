// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECD Bundle resource.
//
// For information about ECD Bundle and how to use it, see [What is Bundle](https://help.aliyun.com/document_detail/188883.html).
//
// > **NOTE:** Available in v1.170.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultImages, err := eds.GetImages(ctx, &eds.GetImagesArgs{
//				ImageType:           pulumi.StringRef("SYSTEM"),
//				OsType:              pulumi.StringRef("Windows"),
//				DesktopInstanceType: pulumi.StringRef("eds.hf.4c8g"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultDesktopTypes, err := eds.GetDesktopTypes(ctx, &eds.GetDesktopTypesArgs{
//				InstanceTypeFamily: pulumi.StringRef("eds.hf"),
//				CpuCount:           pulumi.IntRef(4),
//				MemorySize:         pulumi.IntRef(8192),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = eds.NewBundle(ctx, "defaultBundle", &eds.BundleArgs{
//				Description: pulumi.Any(_var.Name),
//				DesktopType: *pulumi.String(defaultDesktopTypes.Ids[0]),
//				BundleName:  pulumi.Any(_var.Name),
//				ImageId:     *pulumi.String(defaultImages.Ids[0]),
//				UserDiskSizeGibs: pulumi.IntArray{
//					pulumi.Int(70),
//				},
//				RootDiskSizeGib:          pulumi.Int(80),
//				RootDiskPerformanceLevel: pulumi.String("PL1"),
//				UserDiskPerformanceLevel: pulumi.String("PL1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ECD Bundle can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:eds/bundle:Bundle example <id>
//
// ```
type Bundle struct {
	pulumi.CustomResourceState

	// The name of the bundle.
	BundleName pulumi.StringPtrOutput `pulumi:"bundleName"`
	// The description of the bundle.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
	DesktopType pulumi.StringOutput `pulumi:"desktopType"`
	// The ID of the image.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	RootDiskPerformanceLevel pulumi.StringPtrOutput `pulumi:"rootDiskPerformanceLevel"`
	// The root disk size gib.
	RootDiskSizeGib pulumi.IntOutput `pulumi:"rootDiskSizeGib"`
	// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	UserDiskPerformanceLevel pulumi.StringPtrOutput `pulumi:"userDiskPerformanceLevel"`
	// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
	// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
	// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
	UserDiskSizeGibs pulumi.IntArrayOutput `pulumi:"userDiskSizeGibs"`
}

// NewBundle registers a new resource with the given unique name, arguments, and options.
func NewBundle(ctx *pulumi.Context,
	name string, args *BundleArgs, opts ...pulumi.ResourceOption) (*Bundle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DesktopType == nil {
		return nil, errors.New("invalid value for required argument 'DesktopType'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.RootDiskSizeGib == nil {
		return nil, errors.New("invalid value for required argument 'RootDiskSizeGib'")
	}
	if args.UserDiskSizeGibs == nil {
		return nil, errors.New("invalid value for required argument 'UserDiskSizeGibs'")
	}
	var resource Bundle
	err := ctx.RegisterResource("alicloud:eds/bundle:Bundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBundle gets an existing Bundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BundleState, opts ...pulumi.ResourceOption) (*Bundle, error) {
	var resource Bundle
	err := ctx.ReadResource("alicloud:eds/bundle:Bundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bundle resources.
type bundleState struct {
	// The name of the bundle.
	BundleName *string `pulumi:"bundleName"`
	// The description of the bundle.
	Description *string `pulumi:"description"`
	// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
	DesktopType *string `pulumi:"desktopType"`
	// The ID of the image.
	ImageId *string `pulumi:"imageId"`
	// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
	Language *string `pulumi:"language"`
	// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	RootDiskPerformanceLevel *string `pulumi:"rootDiskPerformanceLevel"`
	// The root disk size gib.
	RootDiskSizeGib *int `pulumi:"rootDiskSizeGib"`
	// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	UserDiskPerformanceLevel *string `pulumi:"userDiskPerformanceLevel"`
	// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
	// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
	// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
	UserDiskSizeGibs []int `pulumi:"userDiskSizeGibs"`
}

type BundleState struct {
	// The name of the bundle.
	BundleName pulumi.StringPtrInput
	// The description of the bundle.
	Description pulumi.StringPtrInput
	// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
	DesktopType pulumi.StringPtrInput
	// The ID of the image.
	ImageId pulumi.StringPtrInput
	// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
	Language pulumi.StringPtrInput
	// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	RootDiskPerformanceLevel pulumi.StringPtrInput
	// The root disk size gib.
	RootDiskSizeGib pulumi.IntPtrInput
	// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	UserDiskPerformanceLevel pulumi.StringPtrInput
	// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
	// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
	// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
	UserDiskSizeGibs pulumi.IntArrayInput
}

func (BundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*bundleState)(nil)).Elem()
}

type bundleArgs struct {
	// The name of the bundle.
	BundleName *string `pulumi:"bundleName"`
	// The description of the bundle.
	Description *string `pulumi:"description"`
	// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
	DesktopType string `pulumi:"desktopType"`
	// The ID of the image.
	ImageId string `pulumi:"imageId"`
	// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
	Language *string `pulumi:"language"`
	// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	RootDiskPerformanceLevel *string `pulumi:"rootDiskPerformanceLevel"`
	// The root disk size gib.
	RootDiskSizeGib int `pulumi:"rootDiskSizeGib"`
	// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	UserDiskPerformanceLevel *string `pulumi:"userDiskPerformanceLevel"`
	// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
	// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
	// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
	UserDiskSizeGibs []int `pulumi:"userDiskSizeGibs"`
}

// The set of arguments for constructing a Bundle resource.
type BundleArgs struct {
	// The name of the bundle.
	BundleName pulumi.StringPtrInput
	// The description of the bundle.
	Description pulumi.StringPtrInput
	// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
	DesktopType pulumi.StringInput
	// The ID of the image.
	ImageId pulumi.StringInput
	// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
	Language pulumi.StringPtrInput
	// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	RootDiskPerformanceLevel pulumi.StringPtrInput
	// The root disk size gib.
	RootDiskSizeGib pulumi.IntInput
	// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
	UserDiskPerformanceLevel pulumi.StringPtrInput
	// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
	// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
	// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
	UserDiskSizeGibs pulumi.IntArrayInput
}

func (BundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bundleArgs)(nil)).Elem()
}

type BundleInput interface {
	pulumi.Input

	ToBundleOutput() BundleOutput
	ToBundleOutputWithContext(ctx context.Context) BundleOutput
}

func (*Bundle) ElementType() reflect.Type {
	return reflect.TypeOf((**Bundle)(nil)).Elem()
}

func (i *Bundle) ToBundleOutput() BundleOutput {
	return i.ToBundleOutputWithContext(context.Background())
}

func (i *Bundle) ToBundleOutputWithContext(ctx context.Context) BundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BundleOutput)
}

// BundleArrayInput is an input type that accepts BundleArray and BundleArrayOutput values.
// You can construct a concrete instance of `BundleArrayInput` via:
//
//	BundleArray{ BundleArgs{...} }
type BundleArrayInput interface {
	pulumi.Input

	ToBundleArrayOutput() BundleArrayOutput
	ToBundleArrayOutputWithContext(context.Context) BundleArrayOutput
}

type BundleArray []BundleInput

func (BundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bundle)(nil)).Elem()
}

func (i BundleArray) ToBundleArrayOutput() BundleArrayOutput {
	return i.ToBundleArrayOutputWithContext(context.Background())
}

func (i BundleArray) ToBundleArrayOutputWithContext(ctx context.Context) BundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BundleArrayOutput)
}

// BundleMapInput is an input type that accepts BundleMap and BundleMapOutput values.
// You can construct a concrete instance of `BundleMapInput` via:
//
//	BundleMap{ "key": BundleArgs{...} }
type BundleMapInput interface {
	pulumi.Input

	ToBundleMapOutput() BundleMapOutput
	ToBundleMapOutputWithContext(context.Context) BundleMapOutput
}

type BundleMap map[string]BundleInput

func (BundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bundle)(nil)).Elem()
}

func (i BundleMap) ToBundleMapOutput() BundleMapOutput {
	return i.ToBundleMapOutputWithContext(context.Background())
}

func (i BundleMap) ToBundleMapOutputWithContext(ctx context.Context) BundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BundleMapOutput)
}

type BundleOutput struct{ *pulumi.OutputState }

func (BundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bundle)(nil)).Elem()
}

func (o BundleOutput) ToBundleOutput() BundleOutput {
	return o
}

func (o BundleOutput) ToBundleOutputWithContext(ctx context.Context) BundleOutput {
	return o
}

// The name of the bundle.
func (o BundleOutput) BundleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringPtrOutput { return v.BundleName }).(pulumi.StringPtrOutput)
}

// The description of the bundle.
func (o BundleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The desktop type. You can call `eds.getDesktopTypes` to query desktop type.
func (o BundleOutput) DesktopType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringOutput { return v.DesktopType }).(pulumi.StringOutput)
}

// The ID of the image.
func (o BundleOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// The language. Valid values: `zh-CN`, `zh-HK`, `en-US`, `ja-JP`.
func (o BundleOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// The root disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
func (o BundleOutput) RootDiskPerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringPtrOutput { return v.RootDiskPerformanceLevel }).(pulumi.StringPtrOutput)
}

// The root disk size gib.
func (o BundleOutput) RootDiskSizeGib() pulumi.IntOutput {
	return o.ApplyT(func(v *Bundle) pulumi.IntOutput { return v.RootDiskSizeGib }).(pulumi.IntOutput)
}

// The user disk performance level. Valid values: `PL0`, `PL1`, `PL2`, `PL3`.
func (o BundleOutput) UserDiskPerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bundle) pulumi.StringPtrOutput { return v.UserDiskPerformanceLevel }).(pulumi.StringPtrOutput)
}

// The size of the data disk. Currently, only one data disk can be set. Unit: GiB.
// - The size of the data disk that supports the setting corresponds to the specification. For more information, see [Overview of Desktop Specifications](https://help.aliyun.com/document_detail/188609.htm?spm=a2c4g.11186623.0.0.6406297bE0U5DG).
// - The data disk size (user_disk_size_gib) set in the template must be greater than the data disk size (data_disk_size) in the mirror.
func (o BundleOutput) UserDiskSizeGibs() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Bundle) pulumi.IntArrayOutput { return v.UserDiskSizeGibs }).(pulumi.IntArrayOutput)
}

type BundleArrayOutput struct{ *pulumi.OutputState }

func (BundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bundle)(nil)).Elem()
}

func (o BundleArrayOutput) ToBundleArrayOutput() BundleArrayOutput {
	return o
}

func (o BundleArrayOutput) ToBundleArrayOutputWithContext(ctx context.Context) BundleArrayOutput {
	return o
}

func (o BundleArrayOutput) Index(i pulumi.IntInput) BundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bundle {
		return vs[0].([]*Bundle)[vs[1].(int)]
	}).(BundleOutput)
}

type BundleMapOutput struct{ *pulumi.OutputState }

func (BundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bundle)(nil)).Elem()
}

func (o BundleMapOutput) ToBundleMapOutput() BundleMapOutput {
	return o
}

func (o BundleMapOutput) ToBundleMapOutputWithContext(ctx context.Context) BundleMapOutput {
	return o
}

func (o BundleMapOutput) MapIndex(k pulumi.StringInput) BundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bundle {
		return vs[0].(map[string]*Bundle)[vs[1].(string)]
	}).(BundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BundleInput)(nil)).Elem(), &Bundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*BundleArrayInput)(nil)).Elem(), BundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BundleMapInput)(nil)).Elem(), BundleMap{})
	pulumi.RegisterOutputType(BundleOutput{})
	pulumi.RegisterOutputType(BundleArrayOutput{})
	pulumi.RegisterOutputType(BundleMapOutput{})
}
