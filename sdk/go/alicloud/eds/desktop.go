// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECD Desktop resource.
//
// For information about ECD Desktop and how to use it, see [What is Desktop](https://help.aliyun.com/document_detail/188382.html).
//
// > **NOTE:** Available in v1.144.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultSimpleOfficeSite, err := eds.NewSimpleOfficeSite(ctx, "defaultSimpleOfficeSite", &eds.SimpleOfficeSiteArgs{
// 			CidrBlock:            pulumi.String("172.16.0.0/12"),
// 			DesktopAccessType:    pulumi.String("Internet"),
// 			OfficeSiteName:       pulumi.String("your_office_site_name"),
// 			EnableInternetAccess: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := "SYSTEM"
// 		defaultBundles, err := eds.GetBundles(ctx, &eds.GetBundlesArgs{
// 			BundleType: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultEcdPolicyGroup, err := eds.NewEcdPolicyGroup(ctx, "defaultEcdPolicyGroup", &eds.EcdPolicyGroupArgs{
// 			PolicyGroupName: pulumi.String("your_policy_group_name"),
// 			Clipboard:       pulumi.String("readwrite"),
// 			LocalDrive:      pulumi.String("read"),
// 			AuthorizeAccessPolicyRules: eds.EcdPolicyGroupAuthorizeAccessPolicyRuleArray{
// 				&eds.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs{
// 					Description: pulumi.String("example_value"),
// 					CidrIp:      pulumi.String("1.2.3.4/24"),
// 				},
// 			},
// 			AuthorizeSecurityPolicyRules: eds.EcdPolicyGroupAuthorizeSecurityPolicyRuleArray{
// 				&eds.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs{
// 					Type:        pulumi.String("inflow"),
// 					Policy:      pulumi.String("accept"),
// 					Description: pulumi.String("example_value"),
// 					PortRange:   pulumi.String("80/80"),
// 					IpProtocol:  pulumi.String("TCP"),
// 					Priority:    pulumi.String("1"),
// 					CidrIp:      pulumi.String("0.0.0.0/0"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultUser, err := eds.NewUser(ctx, "defaultUser", &eds.UserArgs{
// 			EndUserId: pulumi.String("your_end_user_id"),
// 			Email:     pulumi.String("your_email"),
// 			Phone:     pulumi.String("your_phone"),
// 			Password:  pulumi.String("your_password"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = eds.NewDesktop(ctx, "defaultDesktop", &eds.DesktopArgs{
// 			OfficeSiteId:  defaultSimpleOfficeSite.ID(),
// 			PolicyGroupId: defaultEcdPolicyGroup.ID(),
// 			BundleId:      pulumi.String(defaultBundles.Bundles[0].Id),
// 			DesktopName:   pulumi.String("your_desktop_name"),
// 			EndUserIds: pulumi.StringArray{
// 				defaultUser.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ECD Desktop can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:eds/desktop:Desktop example <id>
// ```
type Desktop struct {
	pulumi.CustomResourceState

	// The amount of the Desktop.
	Amount pulumi.IntPtrOutput `pulumi:"amount"`
	// The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
	AutoPay pulumi.BoolPtrOutput `pulumi:"autoPay"`
	// The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// The bundle id of the Desktop.
	BundleId pulumi.StringOutput `pulumi:"bundleId"`
	// The desktop name of the Desktop.
	DesktopName pulumi.StringPtrOutput `pulumi:"desktopName"`
	// The desktop type of the Desktop.
	DesktopType pulumi.StringOutput `pulumi:"desktopType"`
	// The desktop end user id of the Desktop.
	EndUserIds pulumi.StringArrayOutput `pulumi:"endUserIds"`
	// The hostname of the Desktop.
	HostName pulumi.StringPtrOutput `pulumi:"hostName"`
	// The ID of the Simple Office Site.
	OfficeSiteId pulumi.StringOutput `pulumi:"officeSiteId"`
	// The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
	PaymentType pulumi.StringOutput `pulumi:"paymentType"`
	// The period of the Desktop.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The period unit of the Desktop.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The policy group id of the Desktop.
	PolicyGroupId pulumi.StringOutput `pulumi:"policyGroupId"`
	// The root disk size gib of the Desktop.
	RootDiskSizeGib pulumi.IntPtrOutput `pulumi:"rootDiskSizeGib"`
	// The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The stopped mode of the Desktop.
	StoppedMode pulumi.StringOutput `pulumi:"stoppedMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
	UserAssignMode pulumi.StringOutput `pulumi:"userAssignMode"`
	// The user disk size gib of the Desktop.
	UserDiskSizeGib pulumi.IntPtrOutput `pulumi:"userDiskSizeGib"`
}

// NewDesktop registers a new resource with the given unique name, arguments, and options.
func NewDesktop(ctx *pulumi.Context,
	name string, args *DesktopArgs, opts ...pulumi.ResourceOption) (*Desktop, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.OfficeSiteId == nil {
		return nil, errors.New("invalid value for required argument 'OfficeSiteId'")
	}
	if args.PolicyGroupId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyGroupId'")
	}
	var resource Desktop
	err := ctx.RegisterResource("alicloud:eds/desktop:Desktop", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDesktop gets an existing Desktop resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDesktop(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DesktopState, opts ...pulumi.ResourceOption) (*Desktop, error) {
	var resource Desktop
	err := ctx.ReadResource("alicloud:eds/desktop:Desktop", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Desktop resources.
type desktopState struct {
	// The amount of the Desktop.
	Amount *int `pulumi:"amount"`
	// The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
	AutoPay *bool `pulumi:"autoPay"`
	// The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The bundle id of the Desktop.
	BundleId *string `pulumi:"bundleId"`
	// The desktop name of the Desktop.
	DesktopName *string `pulumi:"desktopName"`
	// The desktop type of the Desktop.
	DesktopType *string `pulumi:"desktopType"`
	// The desktop end user id of the Desktop.
	EndUserIds []string `pulumi:"endUserIds"`
	// The hostname of the Desktop.
	HostName *string `pulumi:"hostName"`
	// The ID of the Simple Office Site.
	OfficeSiteId *string `pulumi:"officeSiteId"`
	// The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
	PaymentType *string `pulumi:"paymentType"`
	// The period of the Desktop.
	Period *int `pulumi:"period"`
	// The period unit of the Desktop.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy group id of the Desktop.
	PolicyGroupId *string `pulumi:"policyGroupId"`
	// The root disk size gib of the Desktop.
	RootDiskSizeGib *int `pulumi:"rootDiskSizeGib"`
	// The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
	Status *string `pulumi:"status"`
	// The stopped mode of the Desktop.
	StoppedMode *string `pulumi:"stoppedMode"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
	UserAssignMode *string `pulumi:"userAssignMode"`
	// The user disk size gib of the Desktop.
	UserDiskSizeGib *int `pulumi:"userDiskSizeGib"`
}

type DesktopState struct {
	// The amount of the Desktop.
	Amount pulumi.IntPtrInput
	// The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
	AutoPay pulumi.BoolPtrInput
	// The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
	AutoRenew pulumi.BoolPtrInput
	// The bundle id of the Desktop.
	BundleId pulumi.StringPtrInput
	// The desktop name of the Desktop.
	DesktopName pulumi.StringPtrInput
	// The desktop type of the Desktop.
	DesktopType pulumi.StringPtrInput
	// The desktop end user id of the Desktop.
	EndUserIds pulumi.StringArrayInput
	// The hostname of the Desktop.
	HostName pulumi.StringPtrInput
	// The ID of the Simple Office Site.
	OfficeSiteId pulumi.StringPtrInput
	// The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
	PaymentType pulumi.StringPtrInput
	// The period of the Desktop.
	Period pulumi.IntPtrInput
	// The period unit of the Desktop.
	PeriodUnit pulumi.StringPtrInput
	// The policy group id of the Desktop.
	PolicyGroupId pulumi.StringPtrInput
	// The root disk size gib of the Desktop.
	RootDiskSizeGib pulumi.IntPtrInput
	// The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
	Status pulumi.StringPtrInput
	// The stopped mode of the Desktop.
	StoppedMode pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
	UserAssignMode pulumi.StringPtrInput
	// The user disk size gib of the Desktop.
	UserDiskSizeGib pulumi.IntPtrInput
}

func (DesktopState) ElementType() reflect.Type {
	return reflect.TypeOf((*desktopState)(nil)).Elem()
}

type desktopArgs struct {
	// The amount of the Desktop.
	Amount *int `pulumi:"amount"`
	// The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
	AutoPay *bool `pulumi:"autoPay"`
	// The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The bundle id of the Desktop.
	BundleId string `pulumi:"bundleId"`
	// The desktop name of the Desktop.
	DesktopName *string `pulumi:"desktopName"`
	// The desktop type of the Desktop.
	DesktopType *string `pulumi:"desktopType"`
	// The desktop end user id of the Desktop.
	EndUserIds []string `pulumi:"endUserIds"`
	// The hostname of the Desktop.
	HostName *string `pulumi:"hostName"`
	// The ID of the Simple Office Site.
	OfficeSiteId string `pulumi:"officeSiteId"`
	// The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
	PaymentType *string `pulumi:"paymentType"`
	// The period of the Desktop.
	Period *int `pulumi:"period"`
	// The period unit of the Desktop.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy group id of the Desktop.
	PolicyGroupId string `pulumi:"policyGroupId"`
	// The root disk size gib of the Desktop.
	RootDiskSizeGib *int `pulumi:"rootDiskSizeGib"`
	// The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
	Status *string `pulumi:"status"`
	// The stopped mode of the Desktop.
	StoppedMode *string `pulumi:"stoppedMode"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
	UserAssignMode *string `pulumi:"userAssignMode"`
	// The user disk size gib of the Desktop.
	UserDiskSizeGib *int `pulumi:"userDiskSizeGib"`
}

// The set of arguments for constructing a Desktop resource.
type DesktopArgs struct {
	// The amount of the Desktop.
	Amount pulumi.IntPtrInput
	// The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
	AutoPay pulumi.BoolPtrInput
	// The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
	AutoRenew pulumi.BoolPtrInput
	// The bundle id of the Desktop.
	BundleId pulumi.StringInput
	// The desktop name of the Desktop.
	DesktopName pulumi.StringPtrInput
	// The desktop type of the Desktop.
	DesktopType pulumi.StringPtrInput
	// The desktop end user id of the Desktop.
	EndUserIds pulumi.StringArrayInput
	// The hostname of the Desktop.
	HostName pulumi.StringPtrInput
	// The ID of the Simple Office Site.
	OfficeSiteId pulumi.StringInput
	// The payment type of the Desktop. Valid values: `PayAsYouGo`, `Subscription`. Default to `PayAsYouGo`.
	PaymentType pulumi.StringPtrInput
	// The period of the Desktop.
	Period pulumi.IntPtrInput
	// The period unit of the Desktop.
	PeriodUnit pulumi.StringPtrInput
	// The policy group id of the Desktop.
	PolicyGroupId pulumi.StringInput
	// The root disk size gib of the Desktop.
	RootDiskSizeGib pulumi.IntPtrInput
	// The status of the Desktop. Valid values: `Deleted`, `Expired`, `Pending`, `Running`, `Starting`, `Stopped`, `Stopping`.
	Status pulumi.StringPtrInput
	// The stopped mode of the Desktop.
	StoppedMode pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The user assign mode of the Desktop. Valid values: `ALL`, `PER_USER`. Default to `ALL`.
	UserAssignMode pulumi.StringPtrInput
	// The user disk size gib of the Desktop.
	UserDiskSizeGib pulumi.IntPtrInput
}

func (DesktopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*desktopArgs)(nil)).Elem()
}

type DesktopInput interface {
	pulumi.Input

	ToDesktopOutput() DesktopOutput
	ToDesktopOutputWithContext(ctx context.Context) DesktopOutput
}

func (*Desktop) ElementType() reflect.Type {
	return reflect.TypeOf((**Desktop)(nil)).Elem()
}

func (i *Desktop) ToDesktopOutput() DesktopOutput {
	return i.ToDesktopOutputWithContext(context.Background())
}

func (i *Desktop) ToDesktopOutputWithContext(ctx context.Context) DesktopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopOutput)
}

// DesktopArrayInput is an input type that accepts DesktopArray and DesktopArrayOutput values.
// You can construct a concrete instance of `DesktopArrayInput` via:
//
//          DesktopArray{ DesktopArgs{...} }
type DesktopArrayInput interface {
	pulumi.Input

	ToDesktopArrayOutput() DesktopArrayOutput
	ToDesktopArrayOutputWithContext(context.Context) DesktopArrayOutput
}

type DesktopArray []DesktopInput

func (DesktopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Desktop)(nil)).Elem()
}

func (i DesktopArray) ToDesktopArrayOutput() DesktopArrayOutput {
	return i.ToDesktopArrayOutputWithContext(context.Background())
}

func (i DesktopArray) ToDesktopArrayOutputWithContext(ctx context.Context) DesktopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopArrayOutput)
}

// DesktopMapInput is an input type that accepts DesktopMap and DesktopMapOutput values.
// You can construct a concrete instance of `DesktopMapInput` via:
//
//          DesktopMap{ "key": DesktopArgs{...} }
type DesktopMapInput interface {
	pulumi.Input

	ToDesktopMapOutput() DesktopMapOutput
	ToDesktopMapOutputWithContext(context.Context) DesktopMapOutput
}

type DesktopMap map[string]DesktopInput

func (DesktopMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Desktop)(nil)).Elem()
}

func (i DesktopMap) ToDesktopMapOutput() DesktopMapOutput {
	return i.ToDesktopMapOutputWithContext(context.Background())
}

func (i DesktopMap) ToDesktopMapOutputWithContext(ctx context.Context) DesktopMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopMapOutput)
}

type DesktopOutput struct{ *pulumi.OutputState }

func (DesktopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Desktop)(nil)).Elem()
}

func (o DesktopOutput) ToDesktopOutput() DesktopOutput {
	return o
}

func (o DesktopOutput) ToDesktopOutputWithContext(ctx context.Context) DesktopOutput {
	return o
}

type DesktopArrayOutput struct{ *pulumi.OutputState }

func (DesktopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Desktop)(nil)).Elem()
}

func (o DesktopArrayOutput) ToDesktopArrayOutput() DesktopArrayOutput {
	return o
}

func (o DesktopArrayOutput) ToDesktopArrayOutputWithContext(ctx context.Context) DesktopArrayOutput {
	return o
}

func (o DesktopArrayOutput) Index(i pulumi.IntInput) DesktopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Desktop {
		return vs[0].([]*Desktop)[vs[1].(int)]
	}).(DesktopOutput)
}

type DesktopMapOutput struct{ *pulumi.OutputState }

func (DesktopMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Desktop)(nil)).Elem()
}

func (o DesktopMapOutput) ToDesktopMapOutput() DesktopMapOutput {
	return o
}

func (o DesktopMapOutput) ToDesktopMapOutputWithContext(ctx context.Context) DesktopMapOutput {
	return o
}

func (o DesktopMapOutput) MapIndex(k pulumi.StringInput) DesktopOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Desktop {
		return vs[0].(map[string]*Desktop)[vs[1].(string)]
	}).(DesktopOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopInput)(nil)).Elem(), &Desktop{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopArrayInput)(nil)).Elem(), DesktopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DesktopMapInput)(nil)).Elem(), DesktopMap{})
	pulumi.RegisterOutputType(DesktopOutput{})
	pulumi.RegisterOutputType(DesktopArrayOutput{})
	pulumi.RegisterOutputType(DesktopMapOutput{})
}
