// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Elastic Desktop Service(EDS) Policy Group resource.
//
// For information about Elastic Desktop Service(EDS) Policy Group and how to use it, see [What is Policy Group](https://help.aliyun.com/document_detail/188382.html).
//
// > **NOTE:** Available in v1.130.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := eds.NewEcdPolicyGroup(ctx, "default", &eds.EcdPolicyGroupArgs{
// 			AuthorizeAccessPolicyRules: eds.EcdPolicyGroupAuthorizeAccessPolicyRuleArray{
// 				&eds.EcdPolicyGroupAuthorizeAccessPolicyRuleArgs{
// 					CidrIp:      pulumi.String("1.2.3.45/24"),
// 					Description: pulumi.String("my-description1"),
// 				},
// 			},
// 			AuthorizeSecurityPolicyRules: eds.EcdPolicyGroupAuthorizeSecurityPolicyRuleArray{
// 				&eds.EcdPolicyGroupAuthorizeSecurityPolicyRuleArgs{
// 					CidrIp:      pulumi.String("1.2.3.4/24"),
// 					Description: pulumi.String("my-description"),
// 					IpProtocol:  pulumi.String("TCP"),
// 					Policy:      pulumi.String("accept"),
// 					PortRange:   pulumi.String("80/80"),
// 					Priority:    pulumi.String("1"),
// 					Type:        pulumi.String("inflow"),
// 				},
// 			},
// 			Clipboard:       pulumi.String("read"),
// 			LocalDrive:      pulumi.String("read"),
// 			PolicyGroupName: pulumi.String("my-policy-group"),
// 			UsbRedirect:     pulumi.String("off"),
// 			Watermark:       pulumi.String("off"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Elastic Desktop Service(EDS) Policy Group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:eds/ecdPolicyGroup:EcdPolicyGroup example <id>
// ```
type EcdPolicyGroup struct {
	pulumi.CustomResourceState

	// The rule of authorize access rule.
	AuthorizeAccessPolicyRules EcdPolicyGroupAuthorizeAccessPolicyRuleArrayOutput `pulumi:"authorizeAccessPolicyRules"`
	// The policy rule.
	AuthorizeSecurityPolicyRules EcdPolicyGroupAuthorizeSecurityPolicyRuleArrayOutput `pulumi:"authorizeSecurityPolicyRules"`
	// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
	Clipboard pulumi.StringOutput `pulumi:"clipboard"`
	// The list of domain.
	DomainList pulumi.StringPtrOutput `pulumi:"domainList"`
	// The access of html5. Valid values: `off`, `on`.
	HtmlAccess pulumi.StringOutput `pulumi:"htmlAccess"`
	// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
	HtmlFileTransfer pulumi.StringOutput `pulumi:"htmlFileTransfer"`
	// Local drive redirect policy. Valid values: `  readwrite `, `off`, `read`.
	LocalDrive pulumi.StringOutput `pulumi:"localDrive"`
	// The name of policy group.
	PolicyGroupName pulumi.StringPtrOutput `pulumi:"policyGroupName"`
	// The status of policy.
	Status pulumi.StringOutput `pulumi:"status"`
	// The usb redirect policy. Valid values: `off`, `on`.
	UsbRedirect pulumi.StringOutput `pulumi:"usbRedirect"`
	// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
	VisualQuality pulumi.StringOutput `pulumi:"visualQuality"`
	// The watermark policy. Valid values: `off`, `on`.
	Watermark pulumi.StringOutput `pulumi:"watermark"`
	// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
	WatermarkTransparency pulumi.StringOutput `pulumi:"watermarkTransparency"`
	// The type of watemark. Valid values: `EndUserId`, `HostName`.
	WatermarkType pulumi.StringOutput `pulumi:"watermarkType"`
}

// NewEcdPolicyGroup registers a new resource with the given unique name, arguments, and options.
func NewEcdPolicyGroup(ctx *pulumi.Context,
	name string, args *EcdPolicyGroupArgs, opts ...pulumi.ResourceOption) (*EcdPolicyGroup, error) {
	if args == nil {
		args = &EcdPolicyGroupArgs{}
	}

	var resource EcdPolicyGroup
	err := ctx.RegisterResource("alicloud:eds/ecdPolicyGroup:EcdPolicyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcdPolicyGroup gets an existing EcdPolicyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcdPolicyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcdPolicyGroupState, opts ...pulumi.ResourceOption) (*EcdPolicyGroup, error) {
	var resource EcdPolicyGroup
	err := ctx.ReadResource("alicloud:eds/ecdPolicyGroup:EcdPolicyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcdPolicyGroup resources.
type ecdPolicyGroupState struct {
	// The rule of authorize access rule.
	AuthorizeAccessPolicyRules []EcdPolicyGroupAuthorizeAccessPolicyRule `pulumi:"authorizeAccessPolicyRules"`
	// The policy rule.
	AuthorizeSecurityPolicyRules []EcdPolicyGroupAuthorizeSecurityPolicyRule `pulumi:"authorizeSecurityPolicyRules"`
	// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
	Clipboard *string `pulumi:"clipboard"`
	// The list of domain.
	DomainList *string `pulumi:"domainList"`
	// The access of html5. Valid values: `off`, `on`.
	HtmlAccess *string `pulumi:"htmlAccess"`
	// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
	HtmlFileTransfer *string `pulumi:"htmlFileTransfer"`
	// Local drive redirect policy. Valid values: `  readwrite `, `off`, `read`.
	LocalDrive *string `pulumi:"localDrive"`
	// The name of policy group.
	PolicyGroupName *string `pulumi:"policyGroupName"`
	// The status of policy.
	Status *string `pulumi:"status"`
	// The usb redirect policy. Valid values: `off`, `on`.
	UsbRedirect *string `pulumi:"usbRedirect"`
	// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
	VisualQuality *string `pulumi:"visualQuality"`
	// The watermark policy. Valid values: `off`, `on`.
	Watermark *string `pulumi:"watermark"`
	// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
	WatermarkTransparency *string `pulumi:"watermarkTransparency"`
	// The type of watemark. Valid values: `EndUserId`, `HostName`.
	WatermarkType *string `pulumi:"watermarkType"`
}

type EcdPolicyGroupState struct {
	// The rule of authorize access rule.
	AuthorizeAccessPolicyRules EcdPolicyGroupAuthorizeAccessPolicyRuleArrayInput
	// The policy rule.
	AuthorizeSecurityPolicyRules EcdPolicyGroupAuthorizeSecurityPolicyRuleArrayInput
	// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
	Clipboard pulumi.StringPtrInput
	// The list of domain.
	DomainList pulumi.StringPtrInput
	// The access of html5. Valid values: `off`, `on`.
	HtmlAccess pulumi.StringPtrInput
	// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
	HtmlFileTransfer pulumi.StringPtrInput
	// Local drive redirect policy. Valid values: `  readwrite `, `off`, `read`.
	LocalDrive pulumi.StringPtrInput
	// The name of policy group.
	PolicyGroupName pulumi.StringPtrInput
	// The status of policy.
	Status pulumi.StringPtrInput
	// The usb redirect policy. Valid values: `off`, `on`.
	UsbRedirect pulumi.StringPtrInput
	// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
	VisualQuality pulumi.StringPtrInput
	// The watermark policy. Valid values: `off`, `on`.
	Watermark pulumi.StringPtrInput
	// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
	WatermarkTransparency pulumi.StringPtrInput
	// The type of watemark. Valid values: `EndUserId`, `HostName`.
	WatermarkType pulumi.StringPtrInput
}

func (EcdPolicyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdPolicyGroupState)(nil)).Elem()
}

type ecdPolicyGroupArgs struct {
	// The rule of authorize access rule.
	AuthorizeAccessPolicyRules []EcdPolicyGroupAuthorizeAccessPolicyRule `pulumi:"authorizeAccessPolicyRules"`
	// The policy rule.
	AuthorizeSecurityPolicyRules []EcdPolicyGroupAuthorizeSecurityPolicyRule `pulumi:"authorizeSecurityPolicyRules"`
	// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
	Clipboard *string `pulumi:"clipboard"`
	// The list of domain.
	DomainList *string `pulumi:"domainList"`
	// The access of html5. Valid values: `off`, `on`.
	HtmlAccess *string `pulumi:"htmlAccess"`
	// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
	HtmlFileTransfer *string `pulumi:"htmlFileTransfer"`
	// Local drive redirect policy. Valid values: `  readwrite `, `off`, `read`.
	LocalDrive *string `pulumi:"localDrive"`
	// The name of policy group.
	PolicyGroupName *string `pulumi:"policyGroupName"`
	// The usb redirect policy. Valid values: `off`, `on`.
	UsbRedirect *string `pulumi:"usbRedirect"`
	// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
	VisualQuality *string `pulumi:"visualQuality"`
	// The watermark policy. Valid values: `off`, `on`.
	Watermark *string `pulumi:"watermark"`
	// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
	WatermarkTransparency *string `pulumi:"watermarkTransparency"`
	// The type of watemark. Valid values: `EndUserId`, `HostName`.
	WatermarkType *string `pulumi:"watermarkType"`
}

// The set of arguments for constructing a EcdPolicyGroup resource.
type EcdPolicyGroupArgs struct {
	// The rule of authorize access rule.
	AuthorizeAccessPolicyRules EcdPolicyGroupAuthorizeAccessPolicyRuleArrayInput
	// The policy rule.
	AuthorizeSecurityPolicyRules EcdPolicyGroupAuthorizeSecurityPolicyRuleArrayInput
	// The clipboard policy. Valid values: `off`, `read`, `readwrite`.
	Clipboard pulumi.StringPtrInput
	// The list of domain.
	DomainList pulumi.StringPtrInput
	// The access of html5. Valid values: `off`, `on`.
	HtmlAccess pulumi.StringPtrInput
	// The html5 file transfer. Valid values: `all`, `download`, `off`, `upload`.
	HtmlFileTransfer pulumi.StringPtrInput
	// Local drive redirect policy. Valid values: `  readwrite `, `off`, `read`.
	LocalDrive pulumi.StringPtrInput
	// The name of policy group.
	PolicyGroupName pulumi.StringPtrInput
	// The usb redirect policy. Valid values: `off`, `on`.
	UsbRedirect pulumi.StringPtrInput
	// The quality of visual. Valid values: `high`, `lossless`, `low`, `medium`.
	VisualQuality pulumi.StringPtrInput
	// The watermark policy. Valid values: `off`, `on`.
	Watermark pulumi.StringPtrInput
	// The watermark transparency. Valid values: `DARK`, `LIGHT`, `MIDDLE`.
	WatermarkTransparency pulumi.StringPtrInput
	// The type of watemark. Valid values: `EndUserId`, `HostName`.
	WatermarkType pulumi.StringPtrInput
}

func (EcdPolicyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdPolicyGroupArgs)(nil)).Elem()
}

type EcdPolicyGroupInput interface {
	pulumi.Input

	ToEcdPolicyGroupOutput() EcdPolicyGroupOutput
	ToEcdPolicyGroupOutputWithContext(ctx context.Context) EcdPolicyGroupOutput
}

func (*EcdPolicyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EcdPolicyGroup)(nil)).Elem()
}

func (i *EcdPolicyGroup) ToEcdPolicyGroupOutput() EcdPolicyGroupOutput {
	return i.ToEcdPolicyGroupOutputWithContext(context.Background())
}

func (i *EcdPolicyGroup) ToEcdPolicyGroupOutputWithContext(ctx context.Context) EcdPolicyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcdPolicyGroupOutput)
}

// EcdPolicyGroupArrayInput is an input type that accepts EcdPolicyGroupArray and EcdPolicyGroupArrayOutput values.
// You can construct a concrete instance of `EcdPolicyGroupArrayInput` via:
//
//          EcdPolicyGroupArray{ EcdPolicyGroupArgs{...} }
type EcdPolicyGroupArrayInput interface {
	pulumi.Input

	ToEcdPolicyGroupArrayOutput() EcdPolicyGroupArrayOutput
	ToEcdPolicyGroupArrayOutputWithContext(context.Context) EcdPolicyGroupArrayOutput
}

type EcdPolicyGroupArray []EcdPolicyGroupInput

func (EcdPolicyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcdPolicyGroup)(nil)).Elem()
}

func (i EcdPolicyGroupArray) ToEcdPolicyGroupArrayOutput() EcdPolicyGroupArrayOutput {
	return i.ToEcdPolicyGroupArrayOutputWithContext(context.Background())
}

func (i EcdPolicyGroupArray) ToEcdPolicyGroupArrayOutputWithContext(ctx context.Context) EcdPolicyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcdPolicyGroupArrayOutput)
}

// EcdPolicyGroupMapInput is an input type that accepts EcdPolicyGroupMap and EcdPolicyGroupMapOutput values.
// You can construct a concrete instance of `EcdPolicyGroupMapInput` via:
//
//          EcdPolicyGroupMap{ "key": EcdPolicyGroupArgs{...} }
type EcdPolicyGroupMapInput interface {
	pulumi.Input

	ToEcdPolicyGroupMapOutput() EcdPolicyGroupMapOutput
	ToEcdPolicyGroupMapOutputWithContext(context.Context) EcdPolicyGroupMapOutput
}

type EcdPolicyGroupMap map[string]EcdPolicyGroupInput

func (EcdPolicyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcdPolicyGroup)(nil)).Elem()
}

func (i EcdPolicyGroupMap) ToEcdPolicyGroupMapOutput() EcdPolicyGroupMapOutput {
	return i.ToEcdPolicyGroupMapOutputWithContext(context.Background())
}

func (i EcdPolicyGroupMap) ToEcdPolicyGroupMapOutputWithContext(ctx context.Context) EcdPolicyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcdPolicyGroupMapOutput)
}

type EcdPolicyGroupOutput struct{ *pulumi.OutputState }

func (EcdPolicyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcdPolicyGroup)(nil)).Elem()
}

func (o EcdPolicyGroupOutput) ToEcdPolicyGroupOutput() EcdPolicyGroupOutput {
	return o
}

func (o EcdPolicyGroupOutput) ToEcdPolicyGroupOutputWithContext(ctx context.Context) EcdPolicyGroupOutput {
	return o
}

type EcdPolicyGroupArrayOutput struct{ *pulumi.OutputState }

func (EcdPolicyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcdPolicyGroup)(nil)).Elem()
}

func (o EcdPolicyGroupArrayOutput) ToEcdPolicyGroupArrayOutput() EcdPolicyGroupArrayOutput {
	return o
}

func (o EcdPolicyGroupArrayOutput) ToEcdPolicyGroupArrayOutputWithContext(ctx context.Context) EcdPolicyGroupArrayOutput {
	return o
}

func (o EcdPolicyGroupArrayOutput) Index(i pulumi.IntInput) EcdPolicyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcdPolicyGroup {
		return vs[0].([]*EcdPolicyGroup)[vs[1].(int)]
	}).(EcdPolicyGroupOutput)
}

type EcdPolicyGroupMapOutput struct{ *pulumi.OutputState }

func (EcdPolicyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcdPolicyGroup)(nil)).Elem()
}

func (o EcdPolicyGroupMapOutput) ToEcdPolicyGroupMapOutput() EcdPolicyGroupMapOutput {
	return o
}

func (o EcdPolicyGroupMapOutput) ToEcdPolicyGroupMapOutputWithContext(ctx context.Context) EcdPolicyGroupMapOutput {
	return o
}

func (o EcdPolicyGroupMapOutput) MapIndex(k pulumi.StringInput) EcdPolicyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcdPolicyGroup {
		return vs[0].(map[string]*EcdPolicyGroup)[vs[1].(string)]
	}).(EcdPolicyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcdPolicyGroupInput)(nil)).Elem(), &EcdPolicyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcdPolicyGroupArrayInput)(nil)).Elem(), EcdPolicyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcdPolicyGroupMapInput)(nil)).Elem(), EcdPolicyGroupMap{})
	pulumi.RegisterOutputType(EcdPolicyGroupOutput{})
	pulumi.RegisterOutputType(EcdPolicyGroupArrayOutput{})
	pulumi.RegisterOutputType(EcdPolicyGroupMapOutput{})
}
