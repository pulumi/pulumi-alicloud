// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Function Version resource.
//
// Version of the function.
//
// For information about FCV3 Function Version and how to use it, see [What is Function Version](https://www.alibabacloud.com/help/en/functioncompute/api-fc-2023-03-30-listfunctionversions).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewUuid(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			function, err := fc.NewV3Function(ctx, "function", &fc.V3FunctionArgs{
//				MemorySize: pulumi.Int(512),
//				Cpu:        pulumi.Float64(0.5),
//				Handler:    pulumi.String("index.Handler"),
//				Code: &fc.V3FunctionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//				FunctionName: pulumi.Sprintf("%v-%v", name, _default.Result),
//				Runtime:      pulumi.String("python3.9"),
//				DiskSize:     pulumi.Int(512),
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3FunctionVersion(ctx, "default", &fc.V3FunctionVersionArgs{
//				FunctionName: function.FunctionName,
//				Description:  pulumi.String("version1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Function Version can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3FunctionVersion:V3FunctionVersion example <function_name>:<version_id>
// ```
type V3FunctionVersion struct {
	pulumi.CustomResourceState

	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the function version
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Function Name
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// (Available since v1.234.0) Update time
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
}

// NewV3FunctionVersion registers a new resource with the given unique name, arguments, and options.
func NewV3FunctionVersion(ctx *pulumi.Context,
	name string, args *V3FunctionVersionArgs, opts ...pulumi.ResourceOption) (*V3FunctionVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3FunctionVersion
	err := ctx.RegisterResource("alicloud:fc/v3FunctionVersion:V3FunctionVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3FunctionVersion gets an existing V3FunctionVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3FunctionVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3FunctionVersionState, opts ...pulumi.ResourceOption) (*V3FunctionVersion, error) {
	var resource V3FunctionVersion
	err := ctx.ReadResource("alicloud:fc/v3FunctionVersion:V3FunctionVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3FunctionVersion resources.
type v3functionVersionState struct {
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Description of the function version
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName *string `pulumi:"functionName"`
	// (Available since v1.234.0) Update time
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
}

type V3FunctionVersionState struct {
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Description of the function version
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringPtrInput
	// (Available since v1.234.0) Update time
	LastModifiedTime pulumi.StringPtrInput
}

func (V3FunctionVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionVersionState)(nil)).Elem()
}

type v3functionVersionArgs struct {
	// Description of the function version
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName string `pulumi:"functionName"`
}

// The set of arguments for constructing a V3FunctionVersion resource.
type V3FunctionVersionArgs struct {
	// Description of the function version
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringInput
}

func (V3FunctionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionVersionArgs)(nil)).Elem()
}

type V3FunctionVersionInput interface {
	pulumi.Input

	ToV3FunctionVersionOutput() V3FunctionVersionOutput
	ToV3FunctionVersionOutputWithContext(ctx context.Context) V3FunctionVersionOutput
}

func (*V3FunctionVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**V3FunctionVersion)(nil)).Elem()
}

func (i *V3FunctionVersion) ToV3FunctionVersionOutput() V3FunctionVersionOutput {
	return i.ToV3FunctionVersionOutputWithContext(context.Background())
}

func (i *V3FunctionVersion) ToV3FunctionVersionOutputWithContext(ctx context.Context) V3FunctionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionVersionOutput)
}

// V3FunctionVersionArrayInput is an input type that accepts V3FunctionVersionArray and V3FunctionVersionArrayOutput values.
// You can construct a concrete instance of `V3FunctionVersionArrayInput` via:
//
//	V3FunctionVersionArray{ V3FunctionVersionArgs{...} }
type V3FunctionVersionArrayInput interface {
	pulumi.Input

	ToV3FunctionVersionArrayOutput() V3FunctionVersionArrayOutput
	ToV3FunctionVersionArrayOutputWithContext(context.Context) V3FunctionVersionArrayOutput
}

type V3FunctionVersionArray []V3FunctionVersionInput

func (V3FunctionVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3FunctionVersion)(nil)).Elem()
}

func (i V3FunctionVersionArray) ToV3FunctionVersionArrayOutput() V3FunctionVersionArrayOutput {
	return i.ToV3FunctionVersionArrayOutputWithContext(context.Background())
}

func (i V3FunctionVersionArray) ToV3FunctionVersionArrayOutputWithContext(ctx context.Context) V3FunctionVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionVersionArrayOutput)
}

// V3FunctionVersionMapInput is an input type that accepts V3FunctionVersionMap and V3FunctionVersionMapOutput values.
// You can construct a concrete instance of `V3FunctionVersionMapInput` via:
//
//	V3FunctionVersionMap{ "key": V3FunctionVersionArgs{...} }
type V3FunctionVersionMapInput interface {
	pulumi.Input

	ToV3FunctionVersionMapOutput() V3FunctionVersionMapOutput
	ToV3FunctionVersionMapOutputWithContext(context.Context) V3FunctionVersionMapOutput
}

type V3FunctionVersionMap map[string]V3FunctionVersionInput

func (V3FunctionVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3FunctionVersion)(nil)).Elem()
}

func (i V3FunctionVersionMap) ToV3FunctionVersionMapOutput() V3FunctionVersionMapOutput {
	return i.ToV3FunctionVersionMapOutputWithContext(context.Background())
}

func (i V3FunctionVersionMap) ToV3FunctionVersionMapOutputWithContext(ctx context.Context) V3FunctionVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionVersionMapOutput)
}

type V3FunctionVersionOutput struct{ *pulumi.OutputState }

func (V3FunctionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3FunctionVersion)(nil)).Elem()
}

func (o V3FunctionVersionOutput) ToV3FunctionVersionOutput() V3FunctionVersionOutput {
	return o
}

func (o V3FunctionVersionOutput) ToV3FunctionVersionOutputWithContext(ctx context.Context) V3FunctionVersionOutput {
	return o
}

// The creation time of the resource
func (o V3FunctionVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3FunctionVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the function version
func (o V3FunctionVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3FunctionVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Function Name
func (o V3FunctionVersionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3FunctionVersion) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// (Available since v1.234.0) Update time
func (o V3FunctionVersionOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3FunctionVersion) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

type V3FunctionVersionArrayOutput struct{ *pulumi.OutputState }

func (V3FunctionVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3FunctionVersion)(nil)).Elem()
}

func (o V3FunctionVersionArrayOutput) ToV3FunctionVersionArrayOutput() V3FunctionVersionArrayOutput {
	return o
}

func (o V3FunctionVersionArrayOutput) ToV3FunctionVersionArrayOutputWithContext(ctx context.Context) V3FunctionVersionArrayOutput {
	return o
}

func (o V3FunctionVersionArrayOutput) Index(i pulumi.IntInput) V3FunctionVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3FunctionVersion {
		return vs[0].([]*V3FunctionVersion)[vs[1].(int)]
	}).(V3FunctionVersionOutput)
}

type V3FunctionVersionMapOutput struct{ *pulumi.OutputState }

func (V3FunctionVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3FunctionVersion)(nil)).Elem()
}

func (o V3FunctionVersionMapOutput) ToV3FunctionVersionMapOutput() V3FunctionVersionMapOutput {
	return o
}

func (o V3FunctionVersionMapOutput) ToV3FunctionVersionMapOutputWithContext(ctx context.Context) V3FunctionVersionMapOutput {
	return o
}

func (o V3FunctionVersionMapOutput) MapIndex(k pulumi.StringInput) V3FunctionVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3FunctionVersion {
		return vs[0].(map[string]*V3FunctionVersion)[vs[1].(string)]
	}).(V3FunctionVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionVersionInput)(nil)).Elem(), &V3FunctionVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionVersionArrayInput)(nil)).Elem(), V3FunctionVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionVersionMapInput)(nil)).Elem(), V3FunctionVersionMap{})
	pulumi.RegisterOutputType(V3FunctionVersionOutput{})
	pulumi.RegisterOutputType(V3FunctionVersionArrayOutput{})
	pulumi.RegisterOutputType(V3FunctionVersionMapOutput{})
}
