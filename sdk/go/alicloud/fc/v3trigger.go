// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Trigger resource.
//
// A trigger is a way of triggering the execution of a function. In the event-driven computing model, the event source is the producer of the event, the function is the handler of the event, and the trigger provides a centralized and unified way to manage different event sources. In the event source, when the event occurs, if the rules defined by the trigger are met,.
//
// For information about FCV3 Trigger and how to use it, see [What is Trigger](https://www.alibabacloud.com/help/en/functioncompute/api-fc-2023-03-30-createtrigger).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			functionName := "TerraformTriggerResourceAPI"
//			if param := cfg.Get("functionName"); param != "" {
//				functionName = param
//			}
//			triggerName := "TerraformTrigger_CDN"
//			if param := cfg.Get("triggerName"); param != "" {
//				triggerName = param
//			}
//			function, err := fc.NewV3Function(ctx, "function", &fc.V3FunctionArgs{
//				MemorySize: pulumi.Int(512),
//				Cpu:        pulumi.Float64(0.5),
//				Handler:    pulumi.String("index.Handler"),
//				Code: &fc.V3FunctionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//				FunctionName: pulumi.String(name),
//				Runtime:      pulumi.String("python3.9"),
//				DiskSize:     pulumi.Int(512),
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			current, err := alicloud.GetAccount(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"eventName":    "CachedObjectsPushed",
//				"eventVersion": "1.0.0",
//				"notes":        "example",
//				"filter": map[string]interface{}{
//					"domain": []string{
//						"example.com",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = fc.NewV3Trigger(ctx, "default", &fc.V3TriggerArgs{
//				TriggerType:    pulumi.String("cdn_events"),
//				TriggerName:    pulumi.String(name),
//				Description:    pulumi.String("create"),
//				Qualifier:      pulumi.String("LATEST"),
//				TriggerConfig:  pulumi.String(json0),
//				SourceArn:      pulumi.Sprintf("acs:cdn:*:%v", current.Id),
//				InvocationRole: pulumi.Sprintf("acs:ram::%v:role/aliyuncdneventnotificationrole", current.Id),
//				FunctionName:   function.FunctionName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Trigger can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3Trigger:V3Trigger example <function_name>:<trigger_name>
// ```
type V3Trigger struct {
	pulumi.CustomResourceState

	// Creation time
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the trigger
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Function Name
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// (Available since v1.234.0) HTTP trigger information
	HttpTrigger V3TriggerHttpTriggerOutput `pulumi:"httpTrigger"`
	// The role required by the event source (such as OSS) to call the function.
	InvocationRole pulumi.StringPtrOutput `pulumi:"invocationRole"`
	// (Available since v1.234.0) The last modified time of the trigger
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The version or alias of the function
	Qualifier pulumi.StringOutput `pulumi:"qualifier"`
	// Trigger Event source ARN
	SourceArn pulumi.StringPtrOutput `pulumi:"sourceArn"`
	// The state of the trigger
	Status pulumi.StringOutput `pulumi:"status"`
	// (Available since v1.234.0) Resource identity of the function
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig pulumi.StringPtrOutput `pulumi:"triggerConfig"`
	// (Available since v1.234.0) Trigger ID
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// Trigger Name
	TriggerName pulumi.StringOutput `pulumi:"triggerName"`
	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
	TriggerType pulumi.StringOutput `pulumi:"triggerType"`
}

// NewV3Trigger registers a new resource with the given unique name, arguments, and options.
func NewV3Trigger(ctx *pulumi.Context,
	name string, args *V3TriggerArgs, opts ...pulumi.ResourceOption) (*V3Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Qualifier == nil {
		return nil, errors.New("invalid value for required argument 'Qualifier'")
	}
	if args.TriggerType == nil {
		return nil, errors.New("invalid value for required argument 'TriggerType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3Trigger
	err := ctx.RegisterResource("alicloud:fc/v3Trigger:V3Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3Trigger gets an existing V3Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3Trigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3TriggerState, opts ...pulumi.ResourceOption) (*V3Trigger, error) {
	var resource V3Trigger
	err := ctx.ReadResource("alicloud:fc/v3Trigger:V3Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3Trigger resources.
type v3triggerState struct {
	// Creation time
	CreateTime *string `pulumi:"createTime"`
	// Description of the trigger
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName *string `pulumi:"functionName"`
	// (Available since v1.234.0) HTTP trigger information
	HttpTrigger *V3TriggerHttpTrigger `pulumi:"httpTrigger"`
	// The role required by the event source (such as OSS) to call the function.
	InvocationRole *string `pulumi:"invocationRole"`
	// (Available since v1.234.0) The last modified time of the trigger
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// The version or alias of the function
	Qualifier *string `pulumi:"qualifier"`
	// Trigger Event source ARN
	SourceArn *string `pulumi:"sourceArn"`
	// The state of the trigger
	Status *string `pulumi:"status"`
	// (Available since v1.234.0) Resource identity of the function
	TargetArn *string `pulumi:"targetArn"`
	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig *string `pulumi:"triggerConfig"`
	// (Available since v1.234.0) Trigger ID
	TriggerId *string `pulumi:"triggerId"`
	// Trigger Name
	TriggerName *string `pulumi:"triggerName"`
	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
	TriggerType *string `pulumi:"triggerType"`
}

type V3TriggerState struct {
	// Creation time
	CreateTime pulumi.StringPtrInput
	// Description of the trigger
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringPtrInput
	// (Available since v1.234.0) HTTP trigger information
	HttpTrigger V3TriggerHttpTriggerPtrInput
	// The role required by the event source (such as OSS) to call the function.
	InvocationRole pulumi.StringPtrInput
	// (Available since v1.234.0) The last modified time of the trigger
	LastModifiedTime pulumi.StringPtrInput
	// The version or alias of the function
	Qualifier pulumi.StringPtrInput
	// Trigger Event source ARN
	SourceArn pulumi.StringPtrInput
	// The state of the trigger
	Status pulumi.StringPtrInput
	// (Available since v1.234.0) Resource identity of the function
	TargetArn pulumi.StringPtrInput
	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig pulumi.StringPtrInput
	// (Available since v1.234.0) Trigger ID
	TriggerId pulumi.StringPtrInput
	// Trigger Name
	TriggerName pulumi.StringPtrInput
	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
	TriggerType pulumi.StringPtrInput
}

func (V3TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3triggerState)(nil)).Elem()
}

type v3triggerArgs struct {
	// Description of the trigger
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName string `pulumi:"functionName"`
	// The role required by the event source (such as OSS) to call the function.
	InvocationRole *string `pulumi:"invocationRole"`
	// The version or alias of the function
	Qualifier string `pulumi:"qualifier"`
	// Trigger Event source ARN
	SourceArn *string `pulumi:"sourceArn"`
	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig *string `pulumi:"triggerConfig"`
	// Trigger Name
	TriggerName *string `pulumi:"triggerName"`
	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
	TriggerType string `pulumi:"triggerType"`
}

// The set of arguments for constructing a V3Trigger resource.
type V3TriggerArgs struct {
	// Description of the trigger
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringInput
	// The role required by the event source (such as OSS) to call the function.
	InvocationRole pulumi.StringPtrInput
	// The version or alias of the function
	Qualifier pulumi.StringInput
	// Trigger Event source ARN
	SourceArn pulumi.StringPtrInput
	// Trigger configuration. The configuration varies for different types of triggers.
	TriggerConfig pulumi.StringPtrInput
	// Trigger Name
	TriggerName pulumi.StringPtrInput
	// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
	TriggerType pulumi.StringInput
}

func (V3TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3triggerArgs)(nil)).Elem()
}

type V3TriggerInput interface {
	pulumi.Input

	ToV3TriggerOutput() V3TriggerOutput
	ToV3TriggerOutputWithContext(ctx context.Context) V3TriggerOutput
}

func (*V3Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Trigger)(nil)).Elem()
}

func (i *V3Trigger) ToV3TriggerOutput() V3TriggerOutput {
	return i.ToV3TriggerOutputWithContext(context.Background())
}

func (i *V3Trigger) ToV3TriggerOutputWithContext(ctx context.Context) V3TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3TriggerOutput)
}

// V3TriggerArrayInput is an input type that accepts V3TriggerArray and V3TriggerArrayOutput values.
// You can construct a concrete instance of `V3TriggerArrayInput` via:
//
//	V3TriggerArray{ V3TriggerArgs{...} }
type V3TriggerArrayInput interface {
	pulumi.Input

	ToV3TriggerArrayOutput() V3TriggerArrayOutput
	ToV3TriggerArrayOutputWithContext(context.Context) V3TriggerArrayOutput
}

type V3TriggerArray []V3TriggerInput

func (V3TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Trigger)(nil)).Elem()
}

func (i V3TriggerArray) ToV3TriggerArrayOutput() V3TriggerArrayOutput {
	return i.ToV3TriggerArrayOutputWithContext(context.Background())
}

func (i V3TriggerArray) ToV3TriggerArrayOutputWithContext(ctx context.Context) V3TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3TriggerArrayOutput)
}

// V3TriggerMapInput is an input type that accepts V3TriggerMap and V3TriggerMapOutput values.
// You can construct a concrete instance of `V3TriggerMapInput` via:
//
//	V3TriggerMap{ "key": V3TriggerArgs{...} }
type V3TriggerMapInput interface {
	pulumi.Input

	ToV3TriggerMapOutput() V3TriggerMapOutput
	ToV3TriggerMapOutputWithContext(context.Context) V3TriggerMapOutput
}

type V3TriggerMap map[string]V3TriggerInput

func (V3TriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Trigger)(nil)).Elem()
}

func (i V3TriggerMap) ToV3TriggerMapOutput() V3TriggerMapOutput {
	return i.ToV3TriggerMapOutputWithContext(context.Background())
}

func (i V3TriggerMap) ToV3TriggerMapOutputWithContext(ctx context.Context) V3TriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3TriggerMapOutput)
}

type V3TriggerOutput struct{ *pulumi.OutputState }

func (V3TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Trigger)(nil)).Elem()
}

func (o V3TriggerOutput) ToV3TriggerOutput() V3TriggerOutput {
	return o
}

func (o V3TriggerOutput) ToV3TriggerOutputWithContext(ctx context.Context) V3TriggerOutput {
	return o
}

// Creation time
func (o V3TriggerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the trigger
func (o V3TriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Function Name
func (o V3TriggerOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// (Available since v1.234.0) HTTP trigger information
func (o V3TriggerOutput) HttpTrigger() V3TriggerHttpTriggerOutput {
	return o.ApplyT(func(v *V3Trigger) V3TriggerHttpTriggerOutput { return v.HttpTrigger }).(V3TriggerHttpTriggerOutput)
}

// The role required by the event source (such as OSS) to call the function.
func (o V3TriggerOutput) InvocationRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringPtrOutput { return v.InvocationRole }).(pulumi.StringPtrOutput)
}

// (Available since v1.234.0) The last modified time of the trigger
func (o V3TriggerOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The version or alias of the function
func (o V3TriggerOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.Qualifier }).(pulumi.StringOutput)
}

// Trigger Event source ARN
func (o V3TriggerOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringPtrOutput { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// The state of the trigger
func (o V3TriggerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// (Available since v1.234.0) Resource identity of the function
func (o V3TriggerOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

// Trigger configuration. The configuration varies for different types of triggers.
func (o V3TriggerOutput) TriggerConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringPtrOutput { return v.TriggerConfig }).(pulumi.StringPtrOutput)
}

// (Available since v1.234.0) Trigger ID
func (o V3TriggerOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// Trigger Name
func (o V3TriggerOutput) TriggerName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.TriggerName }).(pulumi.StringOutput)
}

// The type of the trigger. Currently, the supported types include oss, log, http, timer, tablestore, cdn_events, mnsTopic and eventbridge.
func (o V3TriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Trigger) pulumi.StringOutput { return v.TriggerType }).(pulumi.StringOutput)
}

type V3TriggerArrayOutput struct{ *pulumi.OutputState }

func (V3TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Trigger)(nil)).Elem()
}

func (o V3TriggerArrayOutput) ToV3TriggerArrayOutput() V3TriggerArrayOutput {
	return o
}

func (o V3TriggerArrayOutput) ToV3TriggerArrayOutputWithContext(ctx context.Context) V3TriggerArrayOutput {
	return o
}

func (o V3TriggerArrayOutput) Index(i pulumi.IntInput) V3TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3Trigger {
		return vs[0].([]*V3Trigger)[vs[1].(int)]
	}).(V3TriggerOutput)
}

type V3TriggerMapOutput struct{ *pulumi.OutputState }

func (V3TriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Trigger)(nil)).Elem()
}

func (o V3TriggerMapOutput) ToV3TriggerMapOutput() V3TriggerMapOutput {
	return o
}

func (o V3TriggerMapOutput) ToV3TriggerMapOutputWithContext(ctx context.Context) V3TriggerMapOutput {
	return o
}

func (o V3TriggerMapOutput) MapIndex(k pulumi.StringInput) V3TriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3Trigger {
		return vs[0].(map[string]*V3Trigger)[vs[1].(string)]
	}).(V3TriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3TriggerInput)(nil)).Elem(), &V3Trigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3TriggerArrayInput)(nil)).Elem(), V3TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3TriggerMapInput)(nil)).Elem(), V3TriggerMap{})
	pulumi.RegisterOutputType(V3TriggerOutput{})
	pulumi.RegisterOutputType(V3TriggerArrayOutput{})
	pulumi.RegisterOutputType(V3TriggerMapOutput{})
}
