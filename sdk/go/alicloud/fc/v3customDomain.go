// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Custom Domain resource.
//
// Custom Domain names allow users to access FC functions through custom domain names, providing convenience for building Web services using function compute.
// You can bind a custom domain name to Function Compute and set different paths to different functions of different services.
//
// For information about FCV3 Custom Domain and how to use it, see [What is Custom Domain](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getcustomdomain).
//
// > **NOTE:** This content is a technical preview, and should not be relied on in a production environment.
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "flask-6ew9.fcv3.1511928242963727.cn-shanghai.fc.devsapp.net"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			functionName1 := "terraform-custom-domain-t1"
//			if param := cfg.Get("functionName1"); param != "" {
//				functionName1 = param
//			}
//			authConfig := `{
//	    "jwks": {
//	        "keys": [
//	            {
//	                "p": "8AdUVeldoE4LueFuzEF_C8tvJ7NhlkzS58Gz9KJTPXPr5DADSUVLWJCr5OdFE79q513SneT0UhGo-JfQ1lNMoNv5-YZ1AxIo9fZUEPIe-KyX9ttaglpzCAUE3TeKdm5J-_HZQzBPKbyUwJHAILNgB2-4IBZZwK7LAfbmfi9TmFM",
//	                "kty": "RSA",
//	                "q": "x8m5ydXwC8AAp9I-hOnUAx6yQJz1Nx-jXPCfn--XdHpJuNcuwRQsuUCSRQs_h3SoCI3qZZdzswQnPrtHFxgUJtQFuMj-QZpyMnebDb81rmczl2KPVUtaVDVagJEF6U9Ov3PfrLhvHUEv5u7p6s4Z6maBUaByfFlhEVPv4_ao8Us",
//	                "d": "bjIQAKD2e65gwJ38_Sqq_EmLFuMMey3gjDv1bSCHFH8fyONJTq-utrZfvspz6EegRwW2mSHW9kq87hRwIBW9y7ED5N4KG5gHDjyh57BRE0SKv0Dz1igtKLyp-nl8-aHc1DbONwr1d7tZfFt255TxIN8cPTakXOp2Av_ztql_JotVUGK8eHmXNJFlvq5tc180sKWMHNSNsCUhQgcB1TWb_gwcqxdsIWPsLZI491XKeTGQ98J7z5h6R1cTC97lfJZ0vNtJahd2jHd3WfTUDj5-untMKyZpYYak2Vr8xtFz8H6Q5Rsz8uX_7gtEqYH2CMjPdbXcebrnD1igRSJMYiP0lQ",
//	                "e": "AQAB",
//	                "use": "sig",
//	                "qi": "MTCCRu8AcvvjbHms7V_sDFO7wX0YNyvOJAAbuTmHvQbJ0NDeDta-f-hi8cjkMk7Fpk2hej158E5gDyO62UG99wHZSbmHT34MvIdmhQ5mnbL-5KK9rxde0nayO1ebGepD_GJThPAg9iskzeWpCg5X2etNo2bHoG_ZLQGXj2BQ1VM",
//	                "dp": "J4_ttKNcTTnP8PlZO81n1VfYoGCOqylKceyZbq76rVxX-yp2wDLtslFWI8qCtjiMtEnglynPo19JzH-pakocjT70us4Qp0rs-W16ebiOpko8WfHZvzaNUzsQjC3FYrPW-fHo74wc4DI3Cm57jmhCYbdmT9OfQ4UL7Oz3HMFMNAU",
//	                "alg": "RS256",
//	                "dq": "H4-VgvYB-sk1EU3cRIDv1iJWRHDHKBMeaoM0pD5kLalX1hRgNW4rdoRl1vRk79AU720D11Kqm2APlxBctaA_JrcdxEg0KkbsvV45p11KbKeu9b5DKFVECsN27ZJ7XZUCuqnibtWf7_4pRBD_8PDoFShmS2_ORiiUdflNjzSbEas",
//	                "n": "u1LWgoomekdOMfB1lEe96OHehd4XRNCbZRm96RqwOYTTc28Sc_U5wKV2umDzolfoI682ct2BNnRRahYgZPhbOCzHYM6i8sRXjz9Ghx3QHw9zrYACtArwQxrTFiejbfzDPGdPrMQg7T8wjtLtkSyDmCzeXpbIdwmxuLyt_ahLfHelr94kEksMDa42V4Fi5bMW4cCLjlEKzBEHGmFdT8UbLPCvpgsM84JK63e5ifdeI9NdadbC8ZMiR--dFCujT7AgRRyMzxgdn2l-nZJ2ZaYzbLUtAW5_U2kfRVkDNa8d1g__2V5zjU6nfLJ1S2MoXMgRgDPeHpEehZVu2kNaSFvDUQ"
//	            }
//	        ]
//	    },
//	    "tokenLookup": "header:auth",
//	    "claimPassBy": "header:name:name"
//	}
//
// `
//
//	if param := cfg.Get("authConfig"); param != "" {
//		authConfig = param
//	}
//	certificate := `-----BEGIN CERTIFICATE-----
//
// MIIDRjCCAq+gAwIBAgIJAJn3ox4K13PoMA0GCSqGSIb3DQEBBQUAMHYxCzAJBgNV
// BAYTAkNOMQswCQYDVQQIEwJCSjELMAkGA1UEBxMCQkoxDDAKBgNVBAoTA0FMSTEP
// MA0GA1UECxMGQUxJWVVOMQ0wCwYDVQQDEwR0ZXN0MR8wHQYJKoZIhvcNAQkBFhB0
// ZXN0QGhvdG1haWwuY29tMB4XDTE0MTEyNDA2MDQyNVoXDTI0MTEyMTA2MDQyNVow
// djELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjEMMAoGA1UE
// ChMDQUxJMQ8wDQYDVQQLEwZBTElZVU4xDTALBgNVBAMTBHRlc3QxHzAdBgkqhkiG
// 9w0BCQEWEHRlc3RAaG90bWFpbC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ
// AoGBAM7SS3e9+Nj0HKAsRuIDNSsS3UK6b+62YQb2uuhKrp1HMrOx61WSDR2qkAnB
// coG00Uz38EE+9DLYNUVQBK7aSgLP5M1Ak4wr4GqGyCgjejzzh3DshUzLCCy2rook
// KOyRTlPX+Q5l7rE1fcSNzgepcae5i2sE1XXXzLRIDIvQxcspAgMBAAGjgdswgdgw
// HQYDVR0OBBYEFBdy+OuMsvbkV7R14f0OyoLoh2z4MIGoBgNVHSMEgaAwgZ2AFBdy
// +OuMsvbkV7R14f0OyoLoh2z4oXqkeDB2MQswCQYDVQQGEwJDTjELMAkGA1UECBMC
// QkoxCzAJBgNVBAcTAkJKMQwwCgYDVQQKEwNBTEkxDzANBgNVBAsTBkFMSVlVTjEN
// MAsGA1UEAxMEdGVzdDEfMB0GCSqGSIb3DQEJARYQdGVzdEBob3RtYWlsLmNvbYIJ
// AJn3ox4K13PoMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAY7KOsnyT
// cQzfhiiG7ASjiPakw5wXoycHt5GCvLG5htp2TKVzgv9QTliA3gtfv6oV4zRZx7X1
// Ofi6hVgErtHaXJheuPVeW6eAW8mHBoEfvDAfU3y9waYrtUevSl07643bzKL6v+Qd
// DUBTxOAvSYfXTtI90EAxEG/bJJyOm5LqoiA=
// -----END CERTIFICATE-----
// `
//
//	if param := cfg.Get("certificate"); param != "" {
//		certificate = param
//	}
//	privateKey := `-----BEGIN RSA PRIVATE KEY-----
//
// MIICXAIBAAKBgQDO0kt3vfjY9BygLEbiAzUrEt1Cum/utmEG9rroSq6dRzKzsetV
// kg0dqpAJwXKBtNFM9/BBPvQy2DVFUASu2koCz+TNQJOMK+BqhsgoI3o884dw7IVM
// ywgstq6KJCjskU5T1/kOZe6xNX3Ejc4HqXGnuYtrBNV118y0SAyL0MXLKQIDAQAB
// AoGAfe3NxbsGKhN42o4bGsKZPQDfeCHMxayGp5bTd10BtQIE/ST4BcJH+ihAS7Bd
// 6FwQlKzivNd4GP1MckemklCXfsVckdL94e8ZbJl23GdWul3v8V+KndJHqv5zVJmP
// hwWoKimwIBTb2s0ctVryr2f18N4hhyFw1yGp0VxclGHkjgECQQD9CvllsnOwHpP4
// MdrDHbdb29QrobKyKW8pPcDd+sth+kP6Y8MnCVuAKXCKj5FeIsgVtfluPOsZjPzz
// 71QQWS1dAkEA0T0KXO8gaBQwJhIoo/w6hy5JGZnrNSpOPp5xvJuMAafs2eyvmhJm
// Ev9SN/Pf2VYa1z6FEnBaLOVD6hf6YQIsPQJAX/CZPoW6dzwgvimo1/GcY6eleiWE
// qygqjWhsh71e/3bz7yuEAnj5yE3t7Zshcp+dXR3xxGo0eSuLfLFxHgGxwQJAAxf8
// 9DzQ5NkPkTCJi0sqbl8/03IUKTgT6hcbpWdDXa7m8J3wRr3o5nUB+TPQ5nzAbthM
// zWX931YQeACcwhxvHQJBAN5mTzzJD4w4Ma6YTaNHyXakdYfyAWrOkPIWZxfhMfXe
// DrlNdiysTI4Dd1dLeErVpjsckAaOW/JDG5PCSwkaMxk=
// -----END RSA PRIVATE KEY-----
// `
//
//			if param := cfg.Get("privateKey"); param != "" {
//				privateKey = param
//			}
//			_, err := fc.NewV3CustomDomain(ctx, "default", &fc.V3CustomDomainArgs{
//				CustomDomainName: pulumi.String("flask-6ew9.fcv3.1511928242963727.cn-shanghai.fc.devsapp.net"),
//				RouteConfig: &fc.V3CustomDomainRouteConfigArgs{
//					Routes: fc.V3CustomDomainRouteConfigRouteArray{
//						&fc.V3CustomDomainRouteConfigRouteArgs{
//							FunctionName: pulumi.String(functionName1),
//							RewriteConfig: &fc.V3CustomDomainRouteConfigRouteRewriteConfigArgs{
//								RegexRules: fc.V3CustomDomainRouteConfigRouteRewriteConfigRegexRuleArray{
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigRegexRuleArgs{
//										Match:       pulumi.String("/api/*"),
//										Replacement: pulumi.String("$1"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigRegexRuleArgs{
//										Match:       pulumi.String("/api1/*"),
//										Replacement: pulumi.String("$1"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigRegexRuleArgs{
//										Match:       pulumi.String("/api2/*"),
//										Replacement: pulumi.String("$1"),
//									},
//								},
//								WildcardRules: fc.V3CustomDomainRouteConfigRouteRewriteConfigWildcardRuleArray{
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigWildcardRuleArgs{
//										Match:       pulumi.String("^/api1/.+?/(.*)"),
//										Replacement: pulumi.String("/api/v1/$1"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigWildcardRuleArgs{
//										Match:       pulumi.String("^/api2/.+?/(.*)"),
//										Replacement: pulumi.String("/api/v2/$1"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigWildcardRuleArgs{
//										Match:       pulumi.String("^/api2/.+?/(.*)"),
//										Replacement: pulumi.String("/api/v3/$1"),
//									},
//								},
//								EqualRules: fc.V3CustomDomainRouteConfigRouteRewriteConfigEqualRuleArray{
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigEqualRuleArgs{
//										Match:       pulumi.String("/old"),
//										Replacement: pulumi.String("/new"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigEqualRuleArgs{
//										Replacement: pulumi.String("/new1"),
//										Match:       pulumi.String("/old1"),
//									},
//									&fc.V3CustomDomainRouteConfigRouteRewriteConfigEqualRuleArgs{
//										Match:       pulumi.String("/old2"),
//										Replacement: pulumi.String("/new2"),
//									},
//								},
//							},
//							Methods: pulumi.StringArray{
//								pulumi.String("GET"),
//								pulumi.String("POST"),
//								pulumi.String("DELETE"),
//								pulumi.String("HEAD"),
//							},
//							Path:      pulumi.String("/a"),
//							Qualifier: pulumi.String("LATEST"),
//						},
//						&fc.V3CustomDomainRouteConfigRouteArgs{
//							FunctionName: pulumi.String(functionName1),
//							Methods: pulumi.StringArray{
//								pulumi.String("GET"),
//							},
//							Path:      pulumi.String("/b"),
//							Qualifier: pulumi.String("LATEST"),
//						},
//						&fc.V3CustomDomainRouteConfigRouteArgs{
//							FunctionName: pulumi.String(functionName1),
//							Methods: pulumi.StringArray{
//								pulumi.String("POST"),
//							},
//							Path:      pulumi.String("/c"),
//							Qualifier: pulumi.String("1"),
//						},
//					},
//				},
//				AuthConfig: &fc.V3CustomDomainAuthConfigArgs{
//					AuthType: pulumi.String("jwt"),
//					AuthInfo: pulumi.String(authConfig),
//				},
//				Protocol: pulumi.String("HTTP,HTTPS"),
//				CertConfig: &fc.V3CustomDomainCertConfigArgs{
//					CertName:    pulumi.String("cert-name"),
//					Certificate: pulumi.String(certificate),
//					PrivateKey:  pulumi.String(privateKey),
//				},
//				TlsConfig: &fc.V3CustomDomainTlsConfigArgs{
//					CipherSuites: pulumi.StringArray{
//						pulumi.String("TLS_RSA_WITH_AES_128_CBC_SHA"),
//						pulumi.String("TLS_RSA_WITH_AES_256_CBC_SHA"),
//						pulumi.String("TLS_RSA_WITH_AES_128_GCM_SHA256"),
//						pulumi.String("TLS_RSA_WITH_AES_256_GCM_SHA384"),
//					},
//					MaxVersion: pulumi.String("TLSv1.3"),
//					MinVersion: pulumi.String("TLSv1.0"),
//				},
//				WafConfig: &fc.V3CustomDomainWafConfigArgs{
//					EnableWaf: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Custom Domain can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3CustomDomain:V3CustomDomain example <id>
// ```
type V3CustomDomain struct {
	pulumi.CustomResourceState

	// Permission authentication configuration See `authConfig` below.
	AuthConfig V3CustomDomainAuthConfigPtrOutput `pulumi:"authConfig"`
	// HTTPS certificate information See `certConfig` below.
	CertConfig V3CustomDomainCertConfigPtrOutput `pulumi:"certConfig"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the resource
	CustomDomainName pulumi.StringOutput `pulumi:"customDomainName"`
	// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Route matching rule configuration See `routeConfig` below.
	RouteConfig V3CustomDomainRouteConfigPtrOutput `pulumi:"routeConfig"`
	// TLS configuration information See `tlsConfig` below.
	TlsConfig V3CustomDomainTlsConfigPtrOutput `pulumi:"tlsConfig"`
	// Web application firewall configuration information See `wafConfig` below.
	WafConfig V3CustomDomainWafConfigPtrOutput `pulumi:"wafConfig"`
}

// NewV3CustomDomain registers a new resource with the given unique name, arguments, and options.
func NewV3CustomDomain(ctx *pulumi.Context,
	name string, args *V3CustomDomainArgs, opts ...pulumi.ResourceOption) (*V3CustomDomain, error) {
	if args == nil {
		args = &V3CustomDomainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3CustomDomain
	err := ctx.RegisterResource("alicloud:fc/v3CustomDomain:V3CustomDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3CustomDomain gets an existing V3CustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3CustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3CustomDomainState, opts ...pulumi.ResourceOption) (*V3CustomDomain, error) {
	var resource V3CustomDomain
	err := ctx.ReadResource("alicloud:fc/v3CustomDomain:V3CustomDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3CustomDomain resources.
type v3customDomainState struct {
	// Permission authentication configuration See `authConfig` below.
	AuthConfig *V3CustomDomainAuthConfig `pulumi:"authConfig"`
	// HTTPS certificate information See `certConfig` below.
	CertConfig *V3CustomDomainCertConfig `pulumi:"certConfig"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// The name of the resource
	CustomDomainName *string `pulumi:"customDomainName"`
	// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
	Protocol *string `pulumi:"protocol"`
	// Route matching rule configuration See `routeConfig` below.
	RouteConfig *V3CustomDomainRouteConfig `pulumi:"routeConfig"`
	// TLS configuration information See `tlsConfig` below.
	TlsConfig *V3CustomDomainTlsConfig `pulumi:"tlsConfig"`
	// Web application firewall configuration information See `wafConfig` below.
	WafConfig *V3CustomDomainWafConfig `pulumi:"wafConfig"`
}

type V3CustomDomainState struct {
	// Permission authentication configuration See `authConfig` below.
	AuthConfig V3CustomDomainAuthConfigPtrInput
	// HTTPS certificate information See `certConfig` below.
	CertConfig V3CustomDomainCertConfigPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// The name of the resource
	CustomDomainName pulumi.StringPtrInput
	// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
	Protocol pulumi.StringPtrInput
	// Route matching rule configuration See `routeConfig` below.
	RouteConfig V3CustomDomainRouteConfigPtrInput
	// TLS configuration information See `tlsConfig` below.
	TlsConfig V3CustomDomainTlsConfigPtrInput
	// Web application firewall configuration information See `wafConfig` below.
	WafConfig V3CustomDomainWafConfigPtrInput
}

func (V3CustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3customDomainState)(nil)).Elem()
}

type v3customDomainArgs struct {
	// Permission authentication configuration See `authConfig` below.
	AuthConfig *V3CustomDomainAuthConfig `pulumi:"authConfig"`
	// HTTPS certificate information See `certConfig` below.
	CertConfig *V3CustomDomainCertConfig `pulumi:"certConfig"`
	// The name of the resource
	CustomDomainName *string `pulumi:"customDomainName"`
	// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
	Protocol *string `pulumi:"protocol"`
	// Route matching rule configuration See `routeConfig` below.
	RouteConfig *V3CustomDomainRouteConfig `pulumi:"routeConfig"`
	// TLS configuration information See `tlsConfig` below.
	TlsConfig *V3CustomDomainTlsConfig `pulumi:"tlsConfig"`
	// Web application firewall configuration information See `wafConfig` below.
	WafConfig *V3CustomDomainWafConfig `pulumi:"wafConfig"`
}

// The set of arguments for constructing a V3CustomDomain resource.
type V3CustomDomainArgs struct {
	// Permission authentication configuration See `authConfig` below.
	AuthConfig V3CustomDomainAuthConfigPtrInput
	// HTTPS certificate information See `certConfig` below.
	CertConfig V3CustomDomainCertConfigPtrInput
	// The name of the resource
	CustomDomainName pulumi.StringPtrInput
	// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
	Protocol pulumi.StringPtrInput
	// Route matching rule configuration See `routeConfig` below.
	RouteConfig V3CustomDomainRouteConfigPtrInput
	// TLS configuration information See `tlsConfig` below.
	TlsConfig V3CustomDomainTlsConfigPtrInput
	// Web application firewall configuration information See `wafConfig` below.
	WafConfig V3CustomDomainWafConfigPtrInput
}

func (V3CustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3customDomainArgs)(nil)).Elem()
}

type V3CustomDomainInput interface {
	pulumi.Input

	ToV3CustomDomainOutput() V3CustomDomainOutput
	ToV3CustomDomainOutputWithContext(ctx context.Context) V3CustomDomainOutput
}

func (*V3CustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**V3CustomDomain)(nil)).Elem()
}

func (i *V3CustomDomain) ToV3CustomDomainOutput() V3CustomDomainOutput {
	return i.ToV3CustomDomainOutputWithContext(context.Background())
}

func (i *V3CustomDomain) ToV3CustomDomainOutputWithContext(ctx context.Context) V3CustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3CustomDomainOutput)
}

// V3CustomDomainArrayInput is an input type that accepts V3CustomDomainArray and V3CustomDomainArrayOutput values.
// You can construct a concrete instance of `V3CustomDomainArrayInput` via:
//
//	V3CustomDomainArray{ V3CustomDomainArgs{...} }
type V3CustomDomainArrayInput interface {
	pulumi.Input

	ToV3CustomDomainArrayOutput() V3CustomDomainArrayOutput
	ToV3CustomDomainArrayOutputWithContext(context.Context) V3CustomDomainArrayOutput
}

type V3CustomDomainArray []V3CustomDomainInput

func (V3CustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3CustomDomain)(nil)).Elem()
}

func (i V3CustomDomainArray) ToV3CustomDomainArrayOutput() V3CustomDomainArrayOutput {
	return i.ToV3CustomDomainArrayOutputWithContext(context.Background())
}

func (i V3CustomDomainArray) ToV3CustomDomainArrayOutputWithContext(ctx context.Context) V3CustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3CustomDomainArrayOutput)
}

// V3CustomDomainMapInput is an input type that accepts V3CustomDomainMap and V3CustomDomainMapOutput values.
// You can construct a concrete instance of `V3CustomDomainMapInput` via:
//
//	V3CustomDomainMap{ "key": V3CustomDomainArgs{...} }
type V3CustomDomainMapInput interface {
	pulumi.Input

	ToV3CustomDomainMapOutput() V3CustomDomainMapOutput
	ToV3CustomDomainMapOutputWithContext(context.Context) V3CustomDomainMapOutput
}

type V3CustomDomainMap map[string]V3CustomDomainInput

func (V3CustomDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3CustomDomain)(nil)).Elem()
}

func (i V3CustomDomainMap) ToV3CustomDomainMapOutput() V3CustomDomainMapOutput {
	return i.ToV3CustomDomainMapOutputWithContext(context.Background())
}

func (i V3CustomDomainMap) ToV3CustomDomainMapOutputWithContext(ctx context.Context) V3CustomDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3CustomDomainMapOutput)
}

type V3CustomDomainOutput struct{ *pulumi.OutputState }

func (V3CustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3CustomDomain)(nil)).Elem()
}

func (o V3CustomDomainOutput) ToV3CustomDomainOutput() V3CustomDomainOutput {
	return o
}

func (o V3CustomDomainOutput) ToV3CustomDomainOutputWithContext(ctx context.Context) V3CustomDomainOutput {
	return o
}

// Permission authentication configuration See `authConfig` below.
func (o V3CustomDomainOutput) AuthConfig() V3CustomDomainAuthConfigPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) V3CustomDomainAuthConfigPtrOutput { return v.AuthConfig }).(V3CustomDomainAuthConfigPtrOutput)
}

// HTTPS certificate information See `certConfig` below.
func (o V3CustomDomainOutput) CertConfig() V3CustomDomainCertConfigPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) V3CustomDomainCertConfigPtrOutput { return v.CertConfig }).(V3CustomDomainCertConfigPtrOutput)
}

// The creation time of the resource
func (o V3CustomDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3CustomDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o V3CustomDomainOutput) CustomDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3CustomDomain) pulumi.StringOutput { return v.CustomDomainName }).(pulumi.StringOutput)
}

// The protocol type supported by the domain name. HTTP: only HTTP protocol is supported. HTTPS: only HTTPS is supported. HTTP,HTTPS: Supports HTTP and HTTPS protocols.
func (o V3CustomDomainOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Route matching rule configuration See `routeConfig` below.
func (o V3CustomDomainOutput) RouteConfig() V3CustomDomainRouteConfigPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) V3CustomDomainRouteConfigPtrOutput { return v.RouteConfig }).(V3CustomDomainRouteConfigPtrOutput)
}

// TLS configuration information See `tlsConfig` below.
func (o V3CustomDomainOutput) TlsConfig() V3CustomDomainTlsConfigPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) V3CustomDomainTlsConfigPtrOutput { return v.TlsConfig }).(V3CustomDomainTlsConfigPtrOutput)
}

// Web application firewall configuration information See `wafConfig` below.
func (o V3CustomDomainOutput) WafConfig() V3CustomDomainWafConfigPtrOutput {
	return o.ApplyT(func(v *V3CustomDomain) V3CustomDomainWafConfigPtrOutput { return v.WafConfig }).(V3CustomDomainWafConfigPtrOutput)
}

type V3CustomDomainArrayOutput struct{ *pulumi.OutputState }

func (V3CustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3CustomDomain)(nil)).Elem()
}

func (o V3CustomDomainArrayOutput) ToV3CustomDomainArrayOutput() V3CustomDomainArrayOutput {
	return o
}

func (o V3CustomDomainArrayOutput) ToV3CustomDomainArrayOutputWithContext(ctx context.Context) V3CustomDomainArrayOutput {
	return o
}

func (o V3CustomDomainArrayOutput) Index(i pulumi.IntInput) V3CustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3CustomDomain {
		return vs[0].([]*V3CustomDomain)[vs[1].(int)]
	}).(V3CustomDomainOutput)
}

type V3CustomDomainMapOutput struct{ *pulumi.OutputState }

func (V3CustomDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3CustomDomain)(nil)).Elem()
}

func (o V3CustomDomainMapOutput) ToV3CustomDomainMapOutput() V3CustomDomainMapOutput {
	return o
}

func (o V3CustomDomainMapOutput) ToV3CustomDomainMapOutputWithContext(ctx context.Context) V3CustomDomainMapOutput {
	return o
}

func (o V3CustomDomainMapOutput) MapIndex(k pulumi.StringInput) V3CustomDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3CustomDomain {
		return vs[0].(map[string]*V3CustomDomain)[vs[1].(string)]
	}).(V3CustomDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3CustomDomainInput)(nil)).Elem(), &V3CustomDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3CustomDomainArrayInput)(nil)).Elem(), V3CustomDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3CustomDomainMapInput)(nil)).Elem(), V3CustomDomainMap{})
	pulumi.RegisterOutputType(V3CustomDomainOutput{})
	pulumi.RegisterOutputType(V3CustomDomainArrayOutput{})
	pulumi.RegisterOutputType(V3CustomDomainMapOutput{})
}
