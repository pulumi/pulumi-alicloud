// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Alias resource.
//
// Alias for functions.
//
// For information about FCV3 Alias and how to use it, see [What is Alias](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-createalias).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			functionName := "flask-3xdg"
//			if param := cfg.Get("functionName"); param != "" {
//				functionName = param
//			}
//			_, err := fc.NewV3Alias(ctx, "default", &fc.V3AliasArgs{
//				VersionId:    pulumi.String("1"),
//				FunctionName: pulumi.String(functionName),
//				Description:  pulumi.String("create alias"),
//				AliasName:    pulumi.String(name),
//				AdditionalVersionWeight: pulumi.Float64Map{
//					"2": pulumi.Float64(0.5),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Alias can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3Alias:V3Alias example <function_name>:<alias_name>
// ```
type V3Alias struct {
	pulumi.CustomResourceState

	// Grayscale version
	AdditionalVersionWeight pulumi.Float64MapOutput `pulumi:"additionalVersionWeight"`
	// Function Alias
	AliasName pulumi.StringOutput `pulumi:"aliasName"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Function Name
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// (Available since v1.234.0) Last modification time
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The version that the alias points
	VersionId pulumi.StringPtrOutput `pulumi:"versionId"`
}

// NewV3Alias registers a new resource with the given unique name, arguments, and options.
func NewV3Alias(ctx *pulumi.Context,
	name string, args *V3AliasArgs, opts ...pulumi.ResourceOption) (*V3Alias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3Alias
	err := ctx.RegisterResource("alicloud:fc/v3Alias:V3Alias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3Alias gets an existing V3Alias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3Alias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3AliasState, opts ...pulumi.ResourceOption) (*V3Alias, error) {
	var resource V3Alias
	err := ctx.ReadResource("alicloud:fc/v3Alias:V3Alias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3Alias resources.
type v3aliasState struct {
	// Grayscale version
	AdditionalVersionWeight map[string]float64 `pulumi:"additionalVersionWeight"`
	// Function Alias
	AliasName *string `pulumi:"aliasName"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Description
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName *string `pulumi:"functionName"`
	// (Available since v1.234.0) Last modification time
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// The version that the alias points
	VersionId *string `pulumi:"versionId"`
}

type V3AliasState struct {
	// Grayscale version
	AdditionalVersionWeight pulumi.Float64MapInput
	// Function Alias
	AliasName pulumi.StringPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringPtrInput
	// (Available since v1.234.0) Last modification time
	LastModifiedTime pulumi.StringPtrInput
	// The version that the alias points
	VersionId pulumi.StringPtrInput
}

func (V3AliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3aliasState)(nil)).Elem()
}

type v3aliasArgs struct {
	// Grayscale version
	AdditionalVersionWeight map[string]float64 `pulumi:"additionalVersionWeight"`
	// Function Alias
	AliasName *string `pulumi:"aliasName"`
	// Description
	Description *string `pulumi:"description"`
	// Function Name
	FunctionName string `pulumi:"functionName"`
	// The version that the alias points
	VersionId *string `pulumi:"versionId"`
}

// The set of arguments for constructing a V3Alias resource.
type V3AliasArgs struct {
	// Grayscale version
	AdditionalVersionWeight pulumi.Float64MapInput
	// Function Alias
	AliasName pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringInput
	// The version that the alias points
	VersionId pulumi.StringPtrInput
}

func (V3AliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3aliasArgs)(nil)).Elem()
}

type V3AliasInput interface {
	pulumi.Input

	ToV3AliasOutput() V3AliasOutput
	ToV3AliasOutputWithContext(ctx context.Context) V3AliasOutput
}

func (*V3Alias) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Alias)(nil)).Elem()
}

func (i *V3Alias) ToV3AliasOutput() V3AliasOutput {
	return i.ToV3AliasOutputWithContext(context.Background())
}

func (i *V3Alias) ToV3AliasOutputWithContext(ctx context.Context) V3AliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3AliasOutput)
}

// V3AliasArrayInput is an input type that accepts V3AliasArray and V3AliasArrayOutput values.
// You can construct a concrete instance of `V3AliasArrayInput` via:
//
//	V3AliasArray{ V3AliasArgs{...} }
type V3AliasArrayInput interface {
	pulumi.Input

	ToV3AliasArrayOutput() V3AliasArrayOutput
	ToV3AliasArrayOutputWithContext(context.Context) V3AliasArrayOutput
}

type V3AliasArray []V3AliasInput

func (V3AliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Alias)(nil)).Elem()
}

func (i V3AliasArray) ToV3AliasArrayOutput() V3AliasArrayOutput {
	return i.ToV3AliasArrayOutputWithContext(context.Background())
}

func (i V3AliasArray) ToV3AliasArrayOutputWithContext(ctx context.Context) V3AliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3AliasArrayOutput)
}

// V3AliasMapInput is an input type that accepts V3AliasMap and V3AliasMapOutput values.
// You can construct a concrete instance of `V3AliasMapInput` via:
//
//	V3AliasMap{ "key": V3AliasArgs{...} }
type V3AliasMapInput interface {
	pulumi.Input

	ToV3AliasMapOutput() V3AliasMapOutput
	ToV3AliasMapOutputWithContext(context.Context) V3AliasMapOutput
}

type V3AliasMap map[string]V3AliasInput

func (V3AliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Alias)(nil)).Elem()
}

func (i V3AliasMap) ToV3AliasMapOutput() V3AliasMapOutput {
	return i.ToV3AliasMapOutputWithContext(context.Background())
}

func (i V3AliasMap) ToV3AliasMapOutputWithContext(ctx context.Context) V3AliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3AliasMapOutput)
}

type V3AliasOutput struct{ *pulumi.OutputState }

func (V3AliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Alias)(nil)).Elem()
}

func (o V3AliasOutput) ToV3AliasOutput() V3AliasOutput {
	return o
}

func (o V3AliasOutput) ToV3AliasOutputWithContext(ctx context.Context) V3AliasOutput {
	return o
}

// Grayscale version
func (o V3AliasOutput) AdditionalVersionWeight() pulumi.Float64MapOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.Float64MapOutput { return v.AdditionalVersionWeight }).(pulumi.Float64MapOutput)
}

// Function Alias
func (o V3AliasOutput) AliasName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringOutput { return v.AliasName }).(pulumi.StringOutput)
}

// The creation time of the resource
func (o V3AliasOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description
func (o V3AliasOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Function Name
func (o V3AliasOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// (Available since v1.234.0) Last modification time
func (o V3AliasOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The version that the alias points
func (o V3AliasOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Alias) pulumi.StringPtrOutput { return v.VersionId }).(pulumi.StringPtrOutput)
}

type V3AliasArrayOutput struct{ *pulumi.OutputState }

func (V3AliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Alias)(nil)).Elem()
}

func (o V3AliasArrayOutput) ToV3AliasArrayOutput() V3AliasArrayOutput {
	return o
}

func (o V3AliasArrayOutput) ToV3AliasArrayOutputWithContext(ctx context.Context) V3AliasArrayOutput {
	return o
}

func (o V3AliasArrayOutput) Index(i pulumi.IntInput) V3AliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3Alias {
		return vs[0].([]*V3Alias)[vs[1].(int)]
	}).(V3AliasOutput)
}

type V3AliasMapOutput struct{ *pulumi.OutputState }

func (V3AliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Alias)(nil)).Elem()
}

func (o V3AliasMapOutput) ToV3AliasMapOutput() V3AliasMapOutput {
	return o
}

func (o V3AliasMapOutput) ToV3AliasMapOutputWithContext(ctx context.Context) V3AliasMapOutput {
	return o
}

func (o V3AliasMapOutput) MapIndex(k pulumi.StringInput) V3AliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3Alias {
		return vs[0].(map[string]*V3Alias)[vs[1].(string)]
	}).(V3AliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3AliasInput)(nil)).Elem(), &V3Alias{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3AliasArrayInput)(nil)).Elem(), V3AliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3AliasMapInput)(nil)).Elem(), V3AliasMap{})
	pulumi.RegisterOutputType(V3AliasOutput{})
	pulumi.RegisterOutputType(V3AliasArrayOutput{})
	pulumi.RegisterOutputType(V3AliasMapOutput{})
}
