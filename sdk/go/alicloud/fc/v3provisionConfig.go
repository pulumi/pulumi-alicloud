// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Provision Config resource.
//
// Function Reservation Configuration.
//
// For information about FCV3 Provision Config and how to use it, see [What is Provision Config](https://www.alibabacloud.com/help/en/functioncompute/fc-3-0/developer-reference/api-fc-2023-03-30-putprovisionconfig).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			defaultProject, err := log.NewProject(ctx, "default", &log.ProjectArgs{
//				ProjectName: pulumi.Sprintf("%v-%v", name, _default.Result),
//				Description: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultStore, err := log.NewStore(ctx, "default", &log.StoreArgs{
//				ProjectName:        defaultProject.Name,
//				LogstoreName:       pulumi.Sprintf("%v-%v", name, _default.Result),
//				ShardCount:         pulumi.Int(3),
//				AutoSplit:          pulumi.Bool(true),
//				MaxSplitShardCount: pulumi.Int(60),
//				AppendMeta:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			wait10Minutes, err := time.NewSleep(ctx, "wait_10_minutes", &time.SleepArgs{
//				CreateDuration: "10m",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultStore,
//			}))
//			if err != nil {
//				return err
//			}
//			function, err := fc.NewV3Function(ctx, "function", &fc.V3FunctionArgs{
//				MemorySize:   pulumi.Int(512),
//				Cpu:          pulumi.Float64(0.5),
//				Handler:      pulumi.String("index.handler"),
//				FunctionName: pulumi.Sprintf("%v-%v", name, _default.Result),
//				Runtime:      pulumi.String("python3.10"),
//				DiskSize:     pulumi.Int(512),
//				Code: &fc.V3FunctionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					EnableInstanceMetrics: pulumi.Bool(true),
//					EnableRequestMetrics:  pulumi.Bool(true),
//					Project:               defaultProject.ProjectName,
//					Logstore:              defaultStore.LogstoreName,
//					LogBeginRule:          pulumi.String("None"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait10Minutes,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3ProvisionConfig(ctx, "default", &fc.V3ProvisionConfigArgs{
//				Target: pulumi.Int(1),
//				TargetTrackingPolicies: fc.V3ProvisionConfigTargetTrackingPolicyArray{
//					&fc.V3ProvisionConfigTargetTrackingPolicyArgs{
//						Name:         pulumi.String("t1"),
//						StartTime:    pulumi.String("2030-10-10T10:10:10Z"),
//						EndTime:      pulumi.String("2035-10-10T10:10:10Z"),
//						MinCapacity:  pulumi.Int(0),
//						MaxCapacity:  pulumi.Int(1),
//						MetricTarget: pulumi.Float64(1),
//						MetricType:   pulumi.String("ProvisionedConcurrencyUtilization"),
//					},
//					&fc.V3ProvisionConfigTargetTrackingPolicyArgs{
//						MetricTarget: pulumi.Float64(1),
//						MetricType:   pulumi.String("ProvisionedConcurrencyUtilization"),
//						Name:         pulumi.String("t2"),
//						StartTime:    pulumi.String("2030-10-10T10:10:10Z"),
//						EndTime:      pulumi.String("2035-10-10T10:10:10Z"),
//						MinCapacity:  pulumi.Int(0),
//						MaxCapacity:  pulumi.Int(1),
//					},
//					&fc.V3ProvisionConfigTargetTrackingPolicyArgs{
//						MetricType:   pulumi.String("ProvisionedConcurrencyUtilization"),
//						TimeZone:     pulumi.String("Asia/Shanghai"),
//						Name:         pulumi.String("t3"),
//						StartTime:    pulumi.String("2030-10-10T10:10:10"),
//						EndTime:      pulumi.String("2035-10-10T10:10:10"),
//						MinCapacity:  pulumi.Int(0),
//						MaxCapacity:  pulumi.Int(1),
//						MetricTarget: pulumi.Float64(1),
//					},
//				},
//				ScheduledActions: fc.V3ProvisionConfigScheduledActionArray{
//					&fc.V3ProvisionConfigScheduledActionArgs{
//						Target:             pulumi.Int(0),
//						Name:               pulumi.String("s1"),
//						StartTime:          pulumi.String("2030-10-10T10:10:10Z"),
//						EndTime:            pulumi.String("2035-10-10T10:10:10Z"),
//						ScheduleExpression: pulumi.String("cron(0 0 4 * * *)"),
//					},
//					&fc.V3ProvisionConfigScheduledActionArgs{
//						Name:               pulumi.String("s2"),
//						StartTime:          pulumi.String("2030-10-10T10:10:10Z"),
//						EndTime:            pulumi.String("2035-10-10T10:10:10Z"),
//						ScheduleExpression: pulumi.String("cron(0 0 6 * * *)"),
//						Target:             pulumi.Int(1),
//					},
//					&fc.V3ProvisionConfigScheduledActionArgs{
//						StartTime:          pulumi.String("2030-10-10T10:10:10"),
//						EndTime:            pulumi.String("2035-10-10T10:10:10"),
//						ScheduleExpression: pulumi.String("cron(0 0 7 * * *)"),
//						Target:             pulumi.Int(0),
//						TimeZone:           pulumi.String("Asia/Shanghai"),
//						Name:               pulumi.String("s3"),
//					},
//				},
//				Qualifier:         pulumi.String("LATEST"),
//				AlwaysAllocateGpu: pulumi.Bool(true),
//				FunctionName:      function.FunctionName,
//				AlwaysAllocateCpu: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Provision Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3ProvisionConfig:V3ProvisionConfig example <id>
// ```
type V3ProvisionConfig struct {
	pulumi.CustomResourceState

	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCpu pulumi.BoolPtrOutput `pulumi:"alwaysAllocateCpu"`
	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu pulumi.BoolPtrOutput `pulumi:"alwaysAllocateGpu"`
	// (Available since v1.234.0) Number of actual resources
	Current pulumi.IntOutput `pulumi:"current"`
	// (Available since v1.234.0) Error message when a Reserved Instance creation fails
	CurrentError pulumi.StringOutput `pulumi:"currentError"`
	// (Available since v1.234.0) Resource Description of the function
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`
	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The function alias or LATEST.
	Qualifier pulumi.StringPtrOutput `pulumi:"qualifier"`
	// Timing policy configuration See `scheduledActions` below.
	ScheduledActions V3ProvisionConfigScheduledActionArrayOutput `pulumi:"scheduledActions"`
	// Number of reserved target resources. The value range is [0,10000].
	Target pulumi.IntPtrOutput `pulumi:"target"`
	// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
	TargetTrackingPolicies V3ProvisionConfigTargetTrackingPolicyArrayOutput `pulumi:"targetTrackingPolicies"`
}

// NewV3ProvisionConfig registers a new resource with the given unique name, arguments, and options.
func NewV3ProvisionConfig(ctx *pulumi.Context,
	name string, args *V3ProvisionConfigArgs, opts ...pulumi.ResourceOption) (*V3ProvisionConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3ProvisionConfig
	err := ctx.RegisterResource("alicloud:fc/v3ProvisionConfig:V3ProvisionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3ProvisionConfig gets an existing V3ProvisionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3ProvisionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3ProvisionConfigState, opts ...pulumi.ResourceOption) (*V3ProvisionConfig, error) {
	var resource V3ProvisionConfig
	err := ctx.ReadResource("alicloud:fc/v3ProvisionConfig:V3ProvisionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3ProvisionConfig resources.
type v3provisionConfigState struct {
	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCpu *bool `pulumi:"alwaysAllocateCpu"`
	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu *bool `pulumi:"alwaysAllocateGpu"`
	// (Available since v1.234.0) Number of actual resources
	Current *int `pulumi:"current"`
	// (Available since v1.234.0) Error message when a Reserved Instance creation fails
	CurrentError *string `pulumi:"currentError"`
	// (Available since v1.234.0) Resource Description of the function
	FunctionArn *string `pulumi:"functionArn"`
	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName *string `pulumi:"functionName"`
	// The function alias or LATEST.
	Qualifier *string `pulumi:"qualifier"`
	// Timing policy configuration See `scheduledActions` below.
	ScheduledActions []V3ProvisionConfigScheduledAction `pulumi:"scheduledActions"`
	// Number of reserved target resources. The value range is [0,10000].
	Target *int `pulumi:"target"`
	// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
	TargetTrackingPolicies []V3ProvisionConfigTargetTrackingPolicy `pulumi:"targetTrackingPolicies"`
}

type V3ProvisionConfigState struct {
	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCpu pulumi.BoolPtrInput
	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu pulumi.BoolPtrInput
	// (Available since v1.234.0) Number of actual resources
	Current pulumi.IntPtrInput
	// (Available since v1.234.0) Error message when a Reserved Instance creation fails
	CurrentError pulumi.StringPtrInput
	// (Available since v1.234.0) Resource Description of the function
	FunctionArn pulumi.StringPtrInput
	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName pulumi.StringPtrInput
	// The function alias or LATEST.
	Qualifier pulumi.StringPtrInput
	// Timing policy configuration See `scheduledActions` below.
	ScheduledActions V3ProvisionConfigScheduledActionArrayInput
	// Number of reserved target resources. The value range is [0,10000].
	Target pulumi.IntPtrInput
	// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
	TargetTrackingPolicies V3ProvisionConfigTargetTrackingPolicyArrayInput
}

func (V3ProvisionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3provisionConfigState)(nil)).Elem()
}

type v3provisionConfigArgs struct {
	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCpu *bool `pulumi:"alwaysAllocateCpu"`
	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu *bool `pulumi:"alwaysAllocateGpu"`
	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName string `pulumi:"functionName"`
	// The function alias or LATEST.
	Qualifier *string `pulumi:"qualifier"`
	// Timing policy configuration See `scheduledActions` below.
	ScheduledActions []V3ProvisionConfigScheduledAction `pulumi:"scheduledActions"`
	// Number of reserved target resources. The value range is [0,10000].
	Target *int `pulumi:"target"`
	// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
	TargetTrackingPolicies []V3ProvisionConfigTargetTrackingPolicy `pulumi:"targetTrackingPolicies"`
}

// The set of arguments for constructing a V3ProvisionConfig resource.
type V3ProvisionConfigArgs struct {
	// Whether the CPU is always allocated. The default value is true.
	AlwaysAllocateCpu pulumi.BoolPtrInput
	// Whether to always assign GPU to function instance
	AlwaysAllocateGpu pulumi.BoolPtrInput
	// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
	FunctionName pulumi.StringInput
	// The function alias or LATEST.
	Qualifier pulumi.StringPtrInput
	// Timing policy configuration See `scheduledActions` below.
	ScheduledActions V3ProvisionConfigScheduledActionArrayInput
	// Number of reserved target resources. The value range is [0,10000].
	Target pulumi.IntPtrInput
	// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
	TargetTrackingPolicies V3ProvisionConfigTargetTrackingPolicyArrayInput
}

func (V3ProvisionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3provisionConfigArgs)(nil)).Elem()
}

type V3ProvisionConfigInput interface {
	pulumi.Input

	ToV3ProvisionConfigOutput() V3ProvisionConfigOutput
	ToV3ProvisionConfigOutputWithContext(ctx context.Context) V3ProvisionConfigOutput
}

func (*V3ProvisionConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V3ProvisionConfig)(nil)).Elem()
}

func (i *V3ProvisionConfig) ToV3ProvisionConfigOutput() V3ProvisionConfigOutput {
	return i.ToV3ProvisionConfigOutputWithContext(context.Background())
}

func (i *V3ProvisionConfig) ToV3ProvisionConfigOutputWithContext(ctx context.Context) V3ProvisionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ProvisionConfigOutput)
}

// V3ProvisionConfigArrayInput is an input type that accepts V3ProvisionConfigArray and V3ProvisionConfigArrayOutput values.
// You can construct a concrete instance of `V3ProvisionConfigArrayInput` via:
//
//	V3ProvisionConfigArray{ V3ProvisionConfigArgs{...} }
type V3ProvisionConfigArrayInput interface {
	pulumi.Input

	ToV3ProvisionConfigArrayOutput() V3ProvisionConfigArrayOutput
	ToV3ProvisionConfigArrayOutputWithContext(context.Context) V3ProvisionConfigArrayOutput
}

type V3ProvisionConfigArray []V3ProvisionConfigInput

func (V3ProvisionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3ProvisionConfig)(nil)).Elem()
}

func (i V3ProvisionConfigArray) ToV3ProvisionConfigArrayOutput() V3ProvisionConfigArrayOutput {
	return i.ToV3ProvisionConfigArrayOutputWithContext(context.Background())
}

func (i V3ProvisionConfigArray) ToV3ProvisionConfigArrayOutputWithContext(ctx context.Context) V3ProvisionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ProvisionConfigArrayOutput)
}

// V3ProvisionConfigMapInput is an input type that accepts V3ProvisionConfigMap and V3ProvisionConfigMapOutput values.
// You can construct a concrete instance of `V3ProvisionConfigMapInput` via:
//
//	V3ProvisionConfigMap{ "key": V3ProvisionConfigArgs{...} }
type V3ProvisionConfigMapInput interface {
	pulumi.Input

	ToV3ProvisionConfigMapOutput() V3ProvisionConfigMapOutput
	ToV3ProvisionConfigMapOutputWithContext(context.Context) V3ProvisionConfigMapOutput
}

type V3ProvisionConfigMap map[string]V3ProvisionConfigInput

func (V3ProvisionConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3ProvisionConfig)(nil)).Elem()
}

func (i V3ProvisionConfigMap) ToV3ProvisionConfigMapOutput() V3ProvisionConfigMapOutput {
	return i.ToV3ProvisionConfigMapOutputWithContext(context.Background())
}

func (i V3ProvisionConfigMap) ToV3ProvisionConfigMapOutputWithContext(ctx context.Context) V3ProvisionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ProvisionConfigMapOutput)
}

type V3ProvisionConfigOutput struct{ *pulumi.OutputState }

func (V3ProvisionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3ProvisionConfig)(nil)).Elem()
}

func (o V3ProvisionConfigOutput) ToV3ProvisionConfigOutput() V3ProvisionConfigOutput {
	return o
}

func (o V3ProvisionConfigOutput) ToV3ProvisionConfigOutputWithContext(ctx context.Context) V3ProvisionConfigOutput {
	return o
}

// Whether the CPU is always allocated. The default value is true.
func (o V3ProvisionConfigOutput) AlwaysAllocateCpu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.BoolPtrOutput { return v.AlwaysAllocateCpu }).(pulumi.BoolPtrOutput)
}

// Whether to always assign GPU to function instance
func (o V3ProvisionConfigOutput) AlwaysAllocateGpu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.BoolPtrOutput { return v.AlwaysAllocateGpu }).(pulumi.BoolPtrOutput)
}

// (Available since v1.234.0) Number of actual resources
func (o V3ProvisionConfigOutput) Current() pulumi.IntOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.IntOutput { return v.Current }).(pulumi.IntOutput)
}

// (Available since v1.234.0) Error message when a Reserved Instance creation fails
func (o V3ProvisionConfigOutput) CurrentError() pulumi.StringOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.StringOutput { return v.CurrentError }).(pulumi.StringOutput)
}

// (Available since v1.234.0) Resource Description of the function
func (o V3ProvisionConfigOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

// The name of the function. If this parameter is not specified, the provisioned configurations of all functions are listed.
func (o V3ProvisionConfigOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The function alias or LATEST.
func (o V3ProvisionConfigOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// Timing policy configuration See `scheduledActions` below.
func (o V3ProvisionConfigOutput) ScheduledActions() V3ProvisionConfigScheduledActionArrayOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) V3ProvisionConfigScheduledActionArrayOutput { return v.ScheduledActions }).(V3ProvisionConfigScheduledActionArrayOutput)
}

// Number of reserved target resources. The value range is [0,10000].
func (o V3ProvisionConfigOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) pulumi.IntPtrOutput { return v.Target }).(pulumi.IntPtrOutput)
}

// Metric tracking scaling policy configuration See `targetTrackingPolicies` below.
func (o V3ProvisionConfigOutput) TargetTrackingPolicies() V3ProvisionConfigTargetTrackingPolicyArrayOutput {
	return o.ApplyT(func(v *V3ProvisionConfig) V3ProvisionConfigTargetTrackingPolicyArrayOutput {
		return v.TargetTrackingPolicies
	}).(V3ProvisionConfigTargetTrackingPolicyArrayOutput)
}

type V3ProvisionConfigArrayOutput struct{ *pulumi.OutputState }

func (V3ProvisionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3ProvisionConfig)(nil)).Elem()
}

func (o V3ProvisionConfigArrayOutput) ToV3ProvisionConfigArrayOutput() V3ProvisionConfigArrayOutput {
	return o
}

func (o V3ProvisionConfigArrayOutput) ToV3ProvisionConfigArrayOutputWithContext(ctx context.Context) V3ProvisionConfigArrayOutput {
	return o
}

func (o V3ProvisionConfigArrayOutput) Index(i pulumi.IntInput) V3ProvisionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3ProvisionConfig {
		return vs[0].([]*V3ProvisionConfig)[vs[1].(int)]
	}).(V3ProvisionConfigOutput)
}

type V3ProvisionConfigMapOutput struct{ *pulumi.OutputState }

func (V3ProvisionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3ProvisionConfig)(nil)).Elem()
}

func (o V3ProvisionConfigMapOutput) ToV3ProvisionConfigMapOutput() V3ProvisionConfigMapOutput {
	return o
}

func (o V3ProvisionConfigMapOutput) ToV3ProvisionConfigMapOutputWithContext(ctx context.Context) V3ProvisionConfigMapOutput {
	return o
}

func (o V3ProvisionConfigMapOutput) MapIndex(k pulumi.StringInput) V3ProvisionConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3ProvisionConfig {
		return vs[0].(map[string]*V3ProvisionConfig)[vs[1].(string)]
	}).(V3ProvisionConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3ProvisionConfigInput)(nil)).Elem(), &V3ProvisionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3ProvisionConfigArrayInput)(nil)).Elem(), V3ProvisionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3ProvisionConfigMapInput)(nil)).Elem(), V3ProvisionConfigMap{})
	pulumi.RegisterOutputType(V3ProvisionConfigOutput{})
	pulumi.RegisterOutputType(V3ProvisionConfigArrayOutput{})
	pulumi.RegisterOutputType(V3ProvisionConfigMapOutput{})
}
