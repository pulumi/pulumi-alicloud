// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Concurrency Config resource.
//
// Function concurrency configuration.
//
// For information about FCV3 Concurrency Config and how to use it, see [What is Concurrency Config](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-putconcurrencyconfig).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			function, err := fc.NewV3Function(ctx, "function", &fc.V3FunctionArgs{
//				MemorySize: pulumi.Int(512),
//				Cpu:        pulumi.Float64(0.5),
//				Handler:    pulumi.String("index.Handler"),
//				Code: &fc.V3FunctionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//				FunctionName: pulumi.String(name),
//				Runtime:      pulumi.String("python3.9"),
//				DiskSize:     pulumi.Int(512),
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3ConcurrencyConfig(ctx, "default", &fc.V3ConcurrencyConfigArgs{
//				FunctionName:        function.FunctionName,
//				ReservedConcurrency: pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Concurrency Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3ConcurrencyConfig:V3ConcurrencyConfig example <id>
// ```
type V3ConcurrencyConfig struct {
	pulumi.CustomResourceState

	// (Available since v1.234.0) Resource identity of the function
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`
	// Function Name
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
	ReservedConcurrency pulumi.IntPtrOutput `pulumi:"reservedConcurrency"`
}

// NewV3ConcurrencyConfig registers a new resource with the given unique name, arguments, and options.
func NewV3ConcurrencyConfig(ctx *pulumi.Context,
	name string, args *V3ConcurrencyConfigArgs, opts ...pulumi.ResourceOption) (*V3ConcurrencyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3ConcurrencyConfig
	err := ctx.RegisterResource("alicloud:fc/v3ConcurrencyConfig:V3ConcurrencyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3ConcurrencyConfig gets an existing V3ConcurrencyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3ConcurrencyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3ConcurrencyConfigState, opts ...pulumi.ResourceOption) (*V3ConcurrencyConfig, error) {
	var resource V3ConcurrencyConfig
	err := ctx.ReadResource("alicloud:fc/v3ConcurrencyConfig:V3ConcurrencyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3ConcurrencyConfig resources.
type v3concurrencyConfigState struct {
	// (Available since v1.234.0) Resource identity of the function
	FunctionArn *string `pulumi:"functionArn"`
	// Function Name
	FunctionName *string `pulumi:"functionName"`
	// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
	ReservedConcurrency *int `pulumi:"reservedConcurrency"`
}

type V3ConcurrencyConfigState struct {
	// (Available since v1.234.0) Resource identity of the function
	FunctionArn pulumi.StringPtrInput
	// Function Name
	FunctionName pulumi.StringPtrInput
	// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
	ReservedConcurrency pulumi.IntPtrInput
}

func (V3ConcurrencyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3concurrencyConfigState)(nil)).Elem()
}

type v3concurrencyConfigArgs struct {
	// Function Name
	FunctionName string `pulumi:"functionName"`
	// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
	ReservedConcurrency *int `pulumi:"reservedConcurrency"`
}

// The set of arguments for constructing a V3ConcurrencyConfig resource.
type V3ConcurrencyConfigArgs struct {
	// Function Name
	FunctionName pulumi.StringInput
	// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
	ReservedConcurrency pulumi.IntPtrInput
}

func (V3ConcurrencyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3concurrencyConfigArgs)(nil)).Elem()
}

type V3ConcurrencyConfigInput interface {
	pulumi.Input

	ToV3ConcurrencyConfigOutput() V3ConcurrencyConfigOutput
	ToV3ConcurrencyConfigOutputWithContext(ctx context.Context) V3ConcurrencyConfigOutput
}

func (*V3ConcurrencyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**V3ConcurrencyConfig)(nil)).Elem()
}

func (i *V3ConcurrencyConfig) ToV3ConcurrencyConfigOutput() V3ConcurrencyConfigOutput {
	return i.ToV3ConcurrencyConfigOutputWithContext(context.Background())
}

func (i *V3ConcurrencyConfig) ToV3ConcurrencyConfigOutputWithContext(ctx context.Context) V3ConcurrencyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ConcurrencyConfigOutput)
}

// V3ConcurrencyConfigArrayInput is an input type that accepts V3ConcurrencyConfigArray and V3ConcurrencyConfigArrayOutput values.
// You can construct a concrete instance of `V3ConcurrencyConfigArrayInput` via:
//
//	V3ConcurrencyConfigArray{ V3ConcurrencyConfigArgs{...} }
type V3ConcurrencyConfigArrayInput interface {
	pulumi.Input

	ToV3ConcurrencyConfigArrayOutput() V3ConcurrencyConfigArrayOutput
	ToV3ConcurrencyConfigArrayOutputWithContext(context.Context) V3ConcurrencyConfigArrayOutput
}

type V3ConcurrencyConfigArray []V3ConcurrencyConfigInput

func (V3ConcurrencyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3ConcurrencyConfig)(nil)).Elem()
}

func (i V3ConcurrencyConfigArray) ToV3ConcurrencyConfigArrayOutput() V3ConcurrencyConfigArrayOutput {
	return i.ToV3ConcurrencyConfigArrayOutputWithContext(context.Background())
}

func (i V3ConcurrencyConfigArray) ToV3ConcurrencyConfigArrayOutputWithContext(ctx context.Context) V3ConcurrencyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ConcurrencyConfigArrayOutput)
}

// V3ConcurrencyConfigMapInput is an input type that accepts V3ConcurrencyConfigMap and V3ConcurrencyConfigMapOutput values.
// You can construct a concrete instance of `V3ConcurrencyConfigMapInput` via:
//
//	V3ConcurrencyConfigMap{ "key": V3ConcurrencyConfigArgs{...} }
type V3ConcurrencyConfigMapInput interface {
	pulumi.Input

	ToV3ConcurrencyConfigMapOutput() V3ConcurrencyConfigMapOutput
	ToV3ConcurrencyConfigMapOutputWithContext(context.Context) V3ConcurrencyConfigMapOutput
}

type V3ConcurrencyConfigMap map[string]V3ConcurrencyConfigInput

func (V3ConcurrencyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3ConcurrencyConfig)(nil)).Elem()
}

func (i V3ConcurrencyConfigMap) ToV3ConcurrencyConfigMapOutput() V3ConcurrencyConfigMapOutput {
	return i.ToV3ConcurrencyConfigMapOutputWithContext(context.Background())
}

func (i V3ConcurrencyConfigMap) ToV3ConcurrencyConfigMapOutputWithContext(ctx context.Context) V3ConcurrencyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3ConcurrencyConfigMapOutput)
}

type V3ConcurrencyConfigOutput struct{ *pulumi.OutputState }

func (V3ConcurrencyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3ConcurrencyConfig)(nil)).Elem()
}

func (o V3ConcurrencyConfigOutput) ToV3ConcurrencyConfigOutput() V3ConcurrencyConfigOutput {
	return o
}

func (o V3ConcurrencyConfigOutput) ToV3ConcurrencyConfigOutputWithContext(ctx context.Context) V3ConcurrencyConfigOutput {
	return o
}

// (Available since v1.234.0) Resource identity of the function
func (o V3ConcurrencyConfigOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V3ConcurrencyConfig) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

// Function Name
func (o V3ConcurrencyConfigOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3ConcurrencyConfig) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// Reserved Concurrency. Functions reserve a part of account concurrency. Other functions cannot use this part of concurrency. Reserved concurrency includes the total concurrency of Reserved Instances and As-You-go instances.
func (o V3ConcurrencyConfigOutput) ReservedConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V3ConcurrencyConfig) pulumi.IntPtrOutput { return v.ReservedConcurrency }).(pulumi.IntPtrOutput)
}

type V3ConcurrencyConfigArrayOutput struct{ *pulumi.OutputState }

func (V3ConcurrencyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3ConcurrencyConfig)(nil)).Elem()
}

func (o V3ConcurrencyConfigArrayOutput) ToV3ConcurrencyConfigArrayOutput() V3ConcurrencyConfigArrayOutput {
	return o
}

func (o V3ConcurrencyConfigArrayOutput) ToV3ConcurrencyConfigArrayOutputWithContext(ctx context.Context) V3ConcurrencyConfigArrayOutput {
	return o
}

func (o V3ConcurrencyConfigArrayOutput) Index(i pulumi.IntInput) V3ConcurrencyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3ConcurrencyConfig {
		return vs[0].([]*V3ConcurrencyConfig)[vs[1].(int)]
	}).(V3ConcurrencyConfigOutput)
}

type V3ConcurrencyConfigMapOutput struct{ *pulumi.OutputState }

func (V3ConcurrencyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3ConcurrencyConfig)(nil)).Elem()
}

func (o V3ConcurrencyConfigMapOutput) ToV3ConcurrencyConfigMapOutput() V3ConcurrencyConfigMapOutput {
	return o
}

func (o V3ConcurrencyConfigMapOutput) ToV3ConcurrencyConfigMapOutputWithContext(ctx context.Context) V3ConcurrencyConfigMapOutput {
	return o
}

func (o V3ConcurrencyConfigMapOutput) MapIndex(k pulumi.StringInput) V3ConcurrencyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3ConcurrencyConfig {
		return vs[0].(map[string]*V3ConcurrencyConfig)[vs[1].(string)]
	}).(V3ConcurrencyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3ConcurrencyConfigInput)(nil)).Elem(), &V3ConcurrencyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3ConcurrencyConfigArrayInput)(nil)).Elem(), V3ConcurrencyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3ConcurrencyConfigMapInput)(nil)).Elem(), V3ConcurrencyConfigMap{})
	pulumi.RegisterOutputType(V3ConcurrencyConfigOutput{})
	pulumi.RegisterOutputType(V3ConcurrencyConfigArrayOutput{})
	pulumi.RegisterOutputType(V3ConcurrencyConfigMapOutput{})
}
