// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Alicloud Function Compute Trigger resource. Based on trigger, execute your code in response to events in Alibaba Cloud.
//
//	For information about Service and how to use it, see [What is Function Compute](https://www.alibabacloud.com/help/en/function-compute/latest/api-doc-fc-open-2021-04-06-api-doc-createtrigger).
//
// > **NOTE:** The resource requires a provider field 'account_id'. See account_id.
//
// > **NOTE:** Available since v1.93.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/log"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultAccount, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRandomInteger, err := random.NewRandomInteger(ctx, "defaultRandomInteger", &random.RandomIntegerArgs{
//				Max: pulumi.Int(99999),
//				Min: pulumi.Int(10000),
//			})
//			if err != nil {
//				return err
//			}
//			defaultProject, err := log.NewProject(ctx, "defaultProject", nil)
//			if err != nil {
//				return err
//			}
//			defaultStore, err := log.NewStore(ctx, "defaultStore", &log.StoreArgs{
//				Project: defaultProject.Name,
//			})
//			if err != nil {
//				return err
//			}
//			sourceStore, err := log.NewStore(ctx, "sourceStore", &log.StoreArgs{
//				Project: defaultProject.Name,
//			})
//			if err != nil {
//				return err
//			}
//			defaultRole, err := ram.NewRole(ctx, "defaultRole", &ram.RoleArgs{
//				Document: pulumi.String(`  {
//	      "Statement": [
//	        {
//	          "Action": "sts:AssumeRole",
//	          "Effect": "Allow",
//	          "Principal": {
//	            "Service": [
//	              "fc.aliyuncs.com"
//	            ]
//	          }
//	        }
//	      ],
//	      "Version": "1"
//	  }
//
// `),
//
//				Description: pulumi.String("this is a example"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewRolePolicyAttachment(ctx, "defaultRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				RoleName:   defaultRole.Name,
//				PolicyName: pulumi.String("AliyunLogFullAccess"),
//				PolicyType: pulumi.String("System"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultService, err := fc.NewService(ctx, "defaultService", &fc.ServiceArgs{
//				Description: pulumi.String("example-value"),
//				Role:        defaultRole.Arn,
//				LogConfig: &fc.ServiceLogConfigArgs{
//					Project:               defaultProject.Name,
//					Logstore:              defaultStore.Name,
//					EnableInstanceMetrics: pulumi.Bool(true),
//					EnableRequestMetrics:  pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "defaultBucket", &oss.BucketArgs{
//				Bucket: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "defaultBucketObject", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.ID(),
//				Key:     pulumi.String("index.py"),
//				Content: pulumi.String("import logging \ndef handler(event, context): \nlogger = logging.getLogger() \nlogger.info('hello world') \nreturn 'hello world'"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultFunction, err := fc.NewFunction(ctx, "defaultFunction", &fc.FunctionArgs{
//				Service:     defaultService.Name,
//				Description: pulumi.String("example"),
//				OssBucket:   defaultBucket.ID(),
//				OssKey:      defaultBucketObject.Key,
//				MemorySize:  pulumi.Int(512),
//				Runtime:     pulumi.String("python2.7"),
//				Handler:     pulumi.String("hello.handler"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "defaultTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Role:     defaultRole.Arn,
//				SourceArn: defaultProject.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("acs:log:%v:%v:project/%v", defaultRegions.Regions[0].Id, defaultAccount.Id, name), nil
//				}).(pulumi.StringOutput),
//				Type: pulumi.String("log"),
//				Config: pulumi.All(defaultProject.Name, sourceStore.Name, defaultProject.Name, defaultStore.Name).ApplyT(func(_args []interface{}) (string, error) {
//					defaultProjectName := _args[0].(string)
//					sourceStoreName := _args[1].(string)
//					defaultProjectName1 := _args[2].(string)
//					defaultStoreName := _args[3].(string)
//					return fmt.Sprintf(`    {
//	        "sourceConfig": {
//	            "project": "%v",
//	            "logstore": "%v"
//	        },
//	        "jobConfig": {
//	            "maxRetryTime": 3,
//	            "triggerInterval": 60
//	        },
//	        "functionParameter": {
//	            "a": "b",
//	            "c": "d"
//	        },
//	        "logConfig": {
//	             "project": "%v",
//	            "logstore": "%v"
//	        },
//	        "enable": true
//	    }
//
// `, defaultProjectName, sourceStoreName, defaultProjectName1, defaultStoreName), nil
//
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// MNS topic trigger:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mns"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultAccount, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRandomInteger, err := random.NewRandomInteger(ctx, "defaultRandomInteger", &random.RandomIntegerArgs{
//				Max: pulumi.Int(99999),
//				Min: pulumi.Int(10000),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTopic, err := mns.NewTopic(ctx, "defaultTopic", nil)
//			if err != nil {
//				return err
//			}
//			defaultRole, err := ram.NewRole(ctx, "defaultRole", &ram.RoleArgs{
//				Document: pulumi.String(`  {
//	      "Statement": [
//	        {
//	          "Action": "sts:AssumeRole",
//	          "Effect": "Allow",
//	          "Principal": {
//	            "Service": [
//	              "mns.aliyuncs.com"
//	            ]
//	          }
//	        }
//	      ],
//	      "Version": "1"
//	  }
//
// `),
//
//				Description: pulumi.String("this is a example"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewRolePolicyAttachment(ctx, "defaultRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				RoleName:   defaultRole.Name,
//				PolicyName: pulumi.String("AliyunMNSNotificationRolePolicy"),
//				PolicyType: pulumi.String("System"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultService, err := fc.NewService(ctx, "defaultService", &fc.ServiceArgs{
//				Description:    pulumi.String("example-value"),
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "defaultBucket", &oss.BucketArgs{
//				Bucket: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "defaultBucketObject", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.ID(),
//				Key:     pulumi.String("index.py"),
//				Content: pulumi.String("import logging \ndef handler(event, context): \nlogger = logging.getLogger() \nlogger.info('hello world') \nreturn 'hello world'"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultFunction, err := fc.NewFunction(ctx, "defaultFunction", &fc.FunctionArgs{
//				Service:     defaultService.Name,
//				Description: pulumi.String("example"),
//				OssBucket:   defaultBucket.ID(),
//				OssKey:      defaultBucketObject.Key,
//				MemorySize:  pulumi.Int(512),
//				Runtime:     pulumi.String("python2.7"),
//				Handler:     pulumi.String("hello.handler"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "defaultTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Role:     defaultRole.Arn,
//				SourceArn: defaultTopic.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("acs:mns:%v:%v:/topics/%v", defaultRegions.Regions[0].Id, defaultAccount.Id, name), nil
//				}).(pulumi.StringOutput),
//				Type: pulumi.String("mns_topic"),
//				ConfigMns: pulumi.String(`  {
//	    "filterTag":"exampleTag",
//	    "notifyContentFormat":"STREAM",
//	    "notifyStrategy":"BACKOFF_RETRY"
//	  }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// CDN events trigger:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cdn"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultAccount, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultRandomInteger, err := random.NewRandomInteger(ctx, "defaultRandomInteger", &random.RandomIntegerArgs{
//				Max: pulumi.Int(99999),
//				Min: pulumi.Int(10000),
//			})
//			if err != nil {
//				return err
//			}
//			defaultDomainNew, err := cdn.NewDomainNew(ctx, "defaultDomainNew", &cdn.DomainNewArgs{
//				DomainName: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("example%v.tf.com", result), nil
//				}).(pulumi.StringOutput),
//				CdnType: pulumi.String("web"),
//				Scope:   pulumi.String("overseas"),
//				Sources: cdn.DomainNewSourceArray{
//					&cdn.DomainNewSourceArgs{
//						Content:  pulumi.String("1.1.1.1"),
//						Type:     pulumi.String("ipaddr"),
//						Priority: pulumi.Int(20),
//						Port:     pulumi.Int(80),
//						Weight:   pulumi.Int(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultService, err := fc.NewService(ctx, "defaultService", &fc.ServiceArgs{
//				Description:    pulumi.String("example-value"),
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRole, err := ram.NewRole(ctx, "defaultRole", &ram.RoleArgs{
//				Document: pulumi.String(`    {
//	      "Statement": [
//	        {
//	          "Action": "sts:AssumeRole",
//	          "Effect": "Allow",
//	          "Principal": {
//	            "Service": [
//	              "cdn.aliyuncs.com"
//	            ]
//	          }
//	        }
//	      ],
//	      "Version": "1"
//	  }
//
// `),
//
//				Description: pulumi.String("this is a example"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultPolicy, err := ram.NewPolicy(ctx, "defaultPolicy", &ram.PolicyArgs{
//				PolicyName: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("fcservicepolicy-%v", result), nil
//				}).(pulumi.StringOutput),
//				PolicyDocument: pulumi.All(defaultService.Name, defaultService.Name).ApplyT(func(_args []interface{}) (string, error) {
//					defaultServiceName := _args[0].(string)
//					defaultServiceName1 := _args[1].(string)
//					return fmt.Sprintf(`    {
//	        "Version": "1",
//	        "Statement": [
//	        {
//	            "Action": [
//	            "fc:InvokeFunction"
//	            ],
//	        "Resource": [
//	            "acs:fc:*:*:services/%v/functions/*",
//	            "acs:fc:*:*:services/%v.*/functions/*"
//	        ],
//	        "Effect": "Allow"
//	        }
//	        ]
//	    }
//
// `, defaultServiceName, defaultServiceName1), nil
//
//				}).(pulumi.StringOutput),
//				Description: pulumi.String("this is a example"),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ram.NewRolePolicyAttachment(ctx, "defaultRolePolicyAttachment", &ram.RolePolicyAttachmentArgs{
//				RoleName:   defaultRole.Name,
//				PolicyName: defaultPolicy.Name,
//				PolicyType: pulumi.String("Custom"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "defaultBucket", &oss.BucketArgs{
//				Bucket: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "defaultBucketObject", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.ID(),
//				Key:     pulumi.String("index.py"),
//				Content: pulumi.String("import logging \ndef handler(event, context): \nlogger = logging.getLogger() \nlogger.info('hello world') \nreturn 'hello world'"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultFunction, err := fc.NewFunction(ctx, "defaultFunction", &fc.FunctionArgs{
//				Service:     defaultService.Name,
//				Description: pulumi.String("example"),
//				OssBucket:   defaultBucket.ID(),
//				OssKey:      defaultBucketObject.Key,
//				MemorySize:  pulumi.Int(512),
//				Runtime:     pulumi.String("python2.7"),
//				Handler:     pulumi.String("hello.handler"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "defaultTrigger", &fc.TriggerArgs{
//				Service:   defaultService.Name,
//				Function:  defaultFunction.Name,
//				Role:      defaultRole.Arn,
//				SourceArn: pulumi.String(fmt.Sprintf("acs:cdn:*:%v", defaultAccount.Id)),
//				Type:      pulumi.String("cdn_events"),
//				Config: defaultDomainNew.DomainName.ApplyT(func(domainName string) (string, error) {
//					return fmt.Sprintf(`      {"eventName":"LogFileCreated",
//	     "eventVersion":"1.0.0",
//	     "notes":"cdn events trigger",
//	     "filter":{
//	        "domain": ["%v"]
//	        }
//	    }
//
// `, domainName), nil
//
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// EventBridge trigger:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/amqp"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eventbridge"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rocketmq"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alicloud.GetAccount(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRandomInteger, err := random.NewRandomInteger(ctx, "defaultRandomInteger", &random.RandomIntegerArgs{
//				Max: pulumi.Int(99999),
//				Min: pulumi.Int(10000),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventbridge.NewServiceLinkedRole(ctx, "serviceLinkedRole", &eventbridge.ServiceLinkedRoleArgs{
//				ProductName: pulumi.String("AliyunServiceRoleForEventBridgeSendToFC"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultService, err := fc.NewService(ctx, "defaultService", &fc.ServiceArgs{
//				Description:    pulumi.String("example-value"),
//				InternetAccess: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "defaultBucket", &oss.BucketArgs{
//				Bucket: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "defaultBucketObject", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.ID(),
//				Key:     pulumi.String("index.py"),
//				Content: pulumi.String("import logging \ndef handler(event, context): \nlogger = logging.getLogger() \nlogger.info('hello world') \nreturn 'hello world'"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultFunction, err := fc.NewFunction(ctx, "defaultFunction", &fc.FunctionArgs{
//				Service:     defaultService.Name,
//				Description: pulumi.String("example"),
//				OssBucket:   defaultBucket.ID(),
//				OssKey:      defaultBucketObject.Key,
//				MemorySize:  pulumi.Int(512),
//				Runtime:     pulumi.String("python2.7"),
//				Handler:     pulumi.String("hello.handler"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "ossTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Type:     pulumi.String("eventbridge"),
//				Config: pulumi.String(`    {
//	        "triggerEnable": false,
//	        "asyncInvocationType": false,
//	        "eventRuleFilterPattern": "{\"source\":[\"acs.oss\"],\"type\":[\"oss:BucketCreated:PutBucket\"]}",
//	        "eventSourceConfig": {
//	            "eventSourceType": "Default"
//	        }
//	    }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "mnsTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Type:     pulumi.String("eventbridge"),
//				Config: pulumi.String(`    {
//	        "triggerEnable": false,
//	        "asyncInvocationType": false,
//	        "eventRuleFilterPattern": "{}",
//	        "eventSourceConfig": {
//	            "eventSourceType": "MNS",
//	            "eventSourceParameters": {
//	                "sourceMNSParameters": {
//	                    "RegionId": "cn-hangzhou",
//	                    "QueueName": "mns-queue",
//	                    "IsBase64Decode": true
//	                }
//	            }
//	        }
//	    }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := rocketmq.NewInstance(ctx, "defaultInstance", &rocketmq.InstanceArgs{
//				InstanceName: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//				Remark: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGroup, err := rocketmq.NewGroup(ctx, "defaultGroup", &rocketmq.GroupArgs{
//				GroupName:  pulumi.String("GID-example"),
//				InstanceId: defaultInstance.ID(),
//				Remark:     pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTopic, err := rocketmq.NewTopic(ctx, "defaultTopic", &rocketmq.TopicArgs{
//				TopicName:   pulumi.String("mytopic"),
//				InstanceId:  defaultInstance.ID(),
//				MessageType: pulumi.Int(0),
//				Remark:      pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "rocketmqTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Type:     pulumi.String("eventbridge"),
//				Config: pulumi.All(defaultInstance.ID(), defaultGroup.GroupName, defaultTopic.TopicName).ApplyT(func(_args []interface{}) (string, error) {
//					id := _args[0].(string)
//					groupName := _args[1].(string)
//					topicName := _args[2].(string)
//					return fmt.Sprintf(`    {
//	        "triggerEnable": false,
//	        "asyncInvocationType": false,
//	        "eventRuleFilterPattern": "{}",
//	        "eventSourceConfig": {
//	            "eventSourceType": "RocketMQ",
//	            "eventSourceParameters": {
//	                "sourceRocketMQParameters": {
//	                    "RegionId": "%v",
//	                    "InstanceId": "%v",
//	                    "GroupID": "%v",
//	                    "Topic": "%v",
//	                    "Timestamp": 1686296162,
//	                    "Tag": "example-tag",
//	                    "Offset": "CONSUME_FROM_LAST_OFFSET"
//	                }
//	            }
//	        }
//	    }
//
// `, defaultRegions.Regions[0].Id, id, groupName, topicName), nil
//
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = amqp.NewInstance(ctx, "defaultAmqp/instanceInstance", &amqp.InstanceArgs{
//				InstanceName: defaultRandomInteger.Result.ApplyT(func(result int) (string, error) {
//					return fmt.Sprintf("terraform-example-%v", result), nil
//				}).(pulumi.StringOutput),
//				InstanceType:  pulumi.String("professional"),
//				MaxTps:        pulumi.String("1000"),
//				QueueCapacity: pulumi.String("50"),
//				SupportEip:    pulumi.Bool(true),
//				MaxEipTps:     pulumi.String("128"),
//				PaymentType:   pulumi.String("Subscription"),
//				Period:        pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			defaultVirtualHost, err := amqp.NewVirtualHost(ctx, "defaultVirtualHost", &amqp.VirtualHostArgs{
//				InstanceId:      defaultAmqp / instanceInstance.Id,
//				VirtualHostName: pulumi.String("example-VirtualHost"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultQueue, err := amqp.NewQueue(ctx, "defaultQueue", &amqp.QueueArgs{
//				InstanceId:      defaultVirtualHost.InstanceId,
//				QueueName:       pulumi.String("example-queue"),
//				VirtualHostName: defaultVirtualHost.VirtualHostName,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewTrigger(ctx, "rabbitmqTrigger", &fc.TriggerArgs{
//				Service:  defaultService.Name,
//				Function: defaultFunction.Name,
//				Type:     pulumi.String("eventbridge"),
//				Config: pulumi.All(defaultVirtualHost.VirtualHostName, defaultQueue.QueueName).ApplyT(func(_args []interface{}) (string, error) {
//					virtualHostName := _args[0].(string)
//					queueName := _args[1].(string)
//					return fmt.Sprintf(`    {
//	        "triggerEnable": false,
//	        "asyncInvocationType": false,
//	        "eventRuleFilterPattern": "{}",
//	        "eventSourceConfig": {
//	            "eventSourceType": "RabbitMQ",
//	            "eventSourceParameters": {
//	                "sourceRabbitMQParameters": {
//	                    "RegionId": "%v",
//	                    "InstanceId": "%v",
//	                    "VirtualHostName": "%v",
//	                    "QueueName": "%v"
//	                }
//	            }
//	        }
//	    }
//
// `, defaultRegions.Regions[0].Id, defaultAmqp/instanceInstance.Id, virtualHostName, queueName), nil
//
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Module Support
//
// You can use to the existing fc module
// to create several triggers quickly.
//
// ## Import
//
// Function Compute trigger can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:fc/trigger:Trigger foo my-fc-service:hello-world:hello-trigger
//
// ```
type Trigger struct {
	pulumi.CustomResourceState

	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrOutput `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrOutput `pulumi:"configMns"`
	// The Function Compute function name.
	Function pulumi.StringOutput `pulumi:"function"`
	// The date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringOutput `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// The Function Compute service name.
	Service pulumi.StringOutput `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrOutput `pulumi:"sourceArn"`
	// The Function Compute trigger ID.
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trigger
	err := ctx.RegisterResource("alicloud:fc/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("alicloud:fc/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config *string `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns *string `pulumi:"configMns"`
	// The Function Compute function name.
	Function *string `pulumi:"function"`
	// The date this resource was last modified.
	LastModified *string `pulumi:"lastModified"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name *string `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix *string `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role *string `pulumi:"role"`
	// The Function Compute service name.
	Service *string `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn *string `pulumi:"sourceArn"`
	// The Function Compute trigger ID.
	TriggerId *string `pulumi:"triggerId"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type *string `pulumi:"type"`
}

type TriggerState struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrInput
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrInput
	// The Function Compute function name.
	Function pulumi.StringPtrInput
	// The date this resource was last modified.
	LastModified pulumi.StringPtrInput
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringPtrInput
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrInput
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrInput
	// The Function Compute service name.
	Service pulumi.StringPtrInput
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrInput
	// The Function Compute trigger ID.
	TriggerId pulumi.StringPtrInput
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringPtrInput
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config *string `pulumi:"config"`
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns *string `pulumi:"configMns"`
	// The Function Compute function name.
	Function string `pulumi:"function"`
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name *string `pulumi:"name"`
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix *string `pulumi:"namePrefix"`
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role *string `pulumi:"role"`
	// The Function Compute service name.
	Service string `pulumi:"service"`
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn *string `pulumi:"sourceArn"`
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
	Config pulumi.StringPtrInput
	// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
	ConfigMns pulumi.StringPtrInput
	// The Function Compute function name.
	Function pulumi.StringInput
	// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
	Name pulumi.StringPtrInput
	// Setting a prefix to get a only trigger name. It is conflict with "name".
	NamePrefix pulumi.StringPtrInput
	// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	Role pulumi.StringPtrInput
	// The Function Compute service name.
	Service pulumi.StringInput
	// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
	SourceArn pulumi.StringPtrInput
	// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
	//
	// > **NOTE:** Config does not support modification when type is mns_topic.
	// **NOTE:** type = cdn_events, available in 1.47.0+.
	// **NOTE:** type = eventbridge, available in 1.173.0+.
	Type pulumi.StringInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

// TriggerArrayInput is an input type that accepts TriggerArray and TriggerArrayOutput values.
// You can construct a concrete instance of `TriggerArrayInput` via:
//
//	TriggerArray{ TriggerArgs{...} }
type TriggerArrayInput interface {
	pulumi.Input

	ToTriggerArrayOutput() TriggerArrayOutput
	ToTriggerArrayOutputWithContext(context.Context) TriggerArrayOutput
}

type TriggerArray []TriggerInput

func (TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (i TriggerArray) ToTriggerArrayOutput() TriggerArrayOutput {
	return i.ToTriggerArrayOutputWithContext(context.Background())
}

func (i TriggerArray) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerArrayOutput)
}

// TriggerMapInput is an input type that accepts TriggerMap and TriggerMapOutput values.
// You can construct a concrete instance of `TriggerMapInput` via:
//
//	TriggerMap{ "key": TriggerArgs{...} }
type TriggerMapInput interface {
	pulumi.Input

	ToTriggerMapOutput() TriggerMapOutput
	ToTriggerMapOutputWithContext(context.Context) TriggerMapOutput
}

type TriggerMap map[string]TriggerInput

func (TriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (i TriggerMap) ToTriggerMapOutput() TriggerMapOutput {
	return i.ToTriggerMapOutputWithContext(context.Background())
}

func (i TriggerMap) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMapOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

// The config of Function Compute trigger.It is valid when `type` is not "mnsTopic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
func (o TriggerOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Config }).(pulumi.StringPtrOutput)
}

// The config of Function Compute trigger when the type is "mnsTopic".It is conflict with `config`.
func (o TriggerOutput) ConfigMns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.ConfigMns }).(pulumi.StringPtrOutput)
}

// The Function Compute function name.
func (o TriggerOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// The date this resource was last modified.
func (o TriggerOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The Function Compute trigger name. It is the only in one service and is conflict with "namePrefix".
func (o TriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Setting a prefix to get a only trigger name. It is conflict with "name".
func (o TriggerOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
func (o TriggerOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// The Function Compute service name.
func (o TriggerOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
func (o TriggerOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// The Function Compute trigger ID.
func (o TriggerOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mnsTopic", "cdnEvents", "eventbridge"].
//
// > **NOTE:** Config does not support modification when type is mns_topic.
// **NOTE:** type = cdn_events, available in 1.47.0+.
// **NOTE:** type = eventbridge, available in 1.173.0+.
func (o TriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TriggerArrayOutput struct{ *pulumi.OutputState }

func (TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (o TriggerArrayOutput) ToTriggerArrayOutput() TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) Index(i pulumi.IntInput) TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].([]*Trigger)[vs[1].(int)]
	}).(TriggerOutput)
}

type TriggerMapOutput struct{ *pulumi.OutputState }

func (TriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (o TriggerMapOutput) ToTriggerMapOutput() TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) MapIndex(k pulumi.StringInput) TriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].(map[string]*Trigger)[vs[1].(string)]
	}).(TriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerArrayInput)(nil)).Elem(), TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMapInput)(nil)).Elem(), TriggerMap{})
	pulumi.RegisterOutputType(TriggerOutput{})
	pulumi.RegisterOutputType(TriggerArrayOutput{})
	pulumi.RegisterOutputType(TriggerMapOutput{})
}
