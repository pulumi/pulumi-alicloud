// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Service struct {
	pulumi.CustomResourceState

	Description    pulumi.StringPtrOutput        `pulumi:"description"`
	InternetAccess pulumi.BoolPtrOutput          `pulumi:"internetAccess"`
	LastModified   pulumi.StringOutput           `pulumi:"lastModified"`
	LogConfig      ServiceLogConfigPtrOutput     `pulumi:"logConfig"`
	Name           pulumi.StringOutput           `pulumi:"name"`
	NamePrefix     pulumi.StringPtrOutput        `pulumi:"namePrefix"`
	NasConfig      ServiceNasConfigPtrOutput     `pulumi:"nasConfig"`
	Publish        pulumi.BoolPtrOutput          `pulumi:"publish"`
	Role           pulumi.StringPtrOutput        `pulumi:"role"`
	ServiceId      pulumi.StringOutput           `pulumi:"serviceId"`
	Tags           pulumi.StringMapOutput        `pulumi:"tags"`
	TracingConfig  ServiceTracingConfigPtrOutput `pulumi:"tracingConfig"`
	Version        pulumi.StringOutput           `pulumi:"version"`
	VpcConfig      ServiceVpcConfigPtrOutput     `pulumi:"vpcConfig"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		args = &ServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("alicloud:fc/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("alicloud:fc/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	Description    *string               `pulumi:"description"`
	InternetAccess *bool                 `pulumi:"internetAccess"`
	LastModified   *string               `pulumi:"lastModified"`
	LogConfig      *ServiceLogConfig     `pulumi:"logConfig"`
	Name           *string               `pulumi:"name"`
	NamePrefix     *string               `pulumi:"namePrefix"`
	NasConfig      *ServiceNasConfig     `pulumi:"nasConfig"`
	Publish        *bool                 `pulumi:"publish"`
	Role           *string               `pulumi:"role"`
	ServiceId      *string               `pulumi:"serviceId"`
	Tags           map[string]string     `pulumi:"tags"`
	TracingConfig  *ServiceTracingConfig `pulumi:"tracingConfig"`
	Version        *string               `pulumi:"version"`
	VpcConfig      *ServiceVpcConfig     `pulumi:"vpcConfig"`
}

type ServiceState struct {
	Description    pulumi.StringPtrInput
	InternetAccess pulumi.BoolPtrInput
	LastModified   pulumi.StringPtrInput
	LogConfig      ServiceLogConfigPtrInput
	Name           pulumi.StringPtrInput
	NamePrefix     pulumi.StringPtrInput
	NasConfig      ServiceNasConfigPtrInput
	Publish        pulumi.BoolPtrInput
	Role           pulumi.StringPtrInput
	ServiceId      pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TracingConfig  ServiceTracingConfigPtrInput
	Version        pulumi.StringPtrInput
	VpcConfig      ServiceVpcConfigPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	Description    *string               `pulumi:"description"`
	InternetAccess *bool                 `pulumi:"internetAccess"`
	LogConfig      *ServiceLogConfig     `pulumi:"logConfig"`
	Name           *string               `pulumi:"name"`
	NamePrefix     *string               `pulumi:"namePrefix"`
	NasConfig      *ServiceNasConfig     `pulumi:"nasConfig"`
	Publish        *bool                 `pulumi:"publish"`
	Role           *string               `pulumi:"role"`
	Tags           map[string]string     `pulumi:"tags"`
	TracingConfig  *ServiceTracingConfig `pulumi:"tracingConfig"`
	VpcConfig      *ServiceVpcConfig     `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	Description    pulumi.StringPtrInput
	InternetAccess pulumi.BoolPtrInput
	LogConfig      ServiceLogConfigPtrInput
	Name           pulumi.StringPtrInput
	NamePrefix     pulumi.StringPtrInput
	NasConfig      ServiceNasConfigPtrInput
	Publish        pulumi.BoolPtrInput
	Role           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TracingConfig  ServiceTracingConfigPtrInput
	VpcConfig      ServiceVpcConfigPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) InternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.InternetAccess }).(pulumi.BoolPtrOutput)
}

func (o ServiceOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

func (o ServiceOutput) LogConfig() ServiceLogConfigPtrOutput {
	return o.ApplyT(func(v *Service) ServiceLogConfigPtrOutput { return v.LogConfig }).(ServiceLogConfigPtrOutput)
}

func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) NasConfig() ServiceNasConfigPtrOutput {
	return o.ApplyT(func(v *Service) ServiceNasConfigPtrOutput { return v.NasConfig }).(ServiceNasConfigPtrOutput)
}

func (o ServiceOutput) Publish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.Publish }).(pulumi.BoolPtrOutput)
}

func (o ServiceOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ServiceOutput) TracingConfig() ServiceTracingConfigPtrOutput {
	return o.ApplyT(func(v *Service) ServiceTracingConfigPtrOutput { return v.TracingConfig }).(ServiceTracingConfigPtrOutput)
}

func (o ServiceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ServiceOutput) VpcConfig() ServiceVpcConfigPtrOutput {
	return o.ApplyT(func(v *Service) ServiceVpcConfigPtrOutput { return v.VpcConfig }).(ServiceVpcConfigPtrOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
