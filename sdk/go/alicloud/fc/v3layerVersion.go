// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Layer Version resource.
//
// Layer provides you with the ability to publish and deploy common dependency libraries, runtime environments, and function extensions.
//
// For information about FCV3 Layer Version and how to use it, see [What is Layer Version](https://www.alibabacloud.com/help/en/functioncompute/api-fc-2023-03-30-createlayerversion).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := fc.NewV3LayerVersion(ctx, "default", &fc.V3LayerVersionArgs{
//				Description: pulumi.String(name),
//				LayerName:   pulumi.String("FC3LayerResouceTest_ZIP_2024SepWed"),
//				License:     pulumi.String("Apache2.0"),
//				Acl:         pulumi.String("0"),
//				Code: &fc.V3LayerVersionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Layer Version can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3LayerVersion:V3LayerVersion example <layer_name>:<version>
// ```
type V3LayerVersion struct {
	pulumi.CustomResourceState

	// The access permission of the layer, 1: public, 0: private, default is private
	Acl pulumi.StringPtrOutput `pulumi:"acl"`
	// Layer code configuration See `code` below.
	Code V3LayerVersionCodePtrOutput `pulumi:"code"`
	// (Available since v1.234.0) The code package size of the layer, in bytes.
	CodeSize pulumi.StringOutput `pulumi:"codeSize"`
	// List of runtime environments supported by the layer
	CompatibleRuntimes pulumi.StringArrayOutput `pulumi:"compatibleRuntimes"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the version
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the layer
	LayerName pulumi.StringOutput `pulumi:"layerName"`
	// (Available since v1.234.0) Layer version ARN. The format is acs:fc:{region }:{ accountID}:layers/{layerName}/versions/{layerVersion}.
	LayerVersionArn pulumi.StringOutput `pulumi:"layerVersionArn"`
	// Layer License Agreement
	License pulumi.StringPtrOutput `pulumi:"license"`
	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public pulumi.StringPtrOutput `pulumi:"public"`
	// The version of the layer
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewV3LayerVersion registers a new resource with the given unique name, arguments, and options.
func NewV3LayerVersion(ctx *pulumi.Context,
	name string, args *V3LayerVersionArgs, opts ...pulumi.ResourceOption) (*V3LayerVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3LayerVersion
	err := ctx.RegisterResource("alicloud:fc/v3LayerVersion:V3LayerVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3LayerVersion gets an existing V3LayerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3LayerVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3LayerVersionState, opts ...pulumi.ResourceOption) (*V3LayerVersion, error) {
	var resource V3LayerVersion
	err := ctx.ReadResource("alicloud:fc/v3LayerVersion:V3LayerVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3LayerVersion resources.
type v3layerVersionState struct {
	// The access permission of the layer, 1: public, 0: private, default is private
	Acl *string `pulumi:"acl"`
	// Layer code configuration See `code` below.
	Code *V3LayerVersionCode `pulumi:"code"`
	// (Available since v1.234.0) The code package size of the layer, in bytes.
	CodeSize *string `pulumi:"codeSize"`
	// List of runtime environments supported by the layer
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Description of the version
	Description *string `pulumi:"description"`
	// Name of the layer
	LayerName *string `pulumi:"layerName"`
	// (Available since v1.234.0) Layer version ARN. The format is acs:fc:{region }:{ accountID}:layers/{layerName}/versions/{layerVersion}.
	LayerVersionArn *string `pulumi:"layerVersionArn"`
	// Layer License Agreement
	License *string `pulumi:"license"`
	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public *string `pulumi:"public"`
	// The version of the layer
	Version *string `pulumi:"version"`
}

type V3LayerVersionState struct {
	// The access permission of the layer, 1: public, 0: private, default is private
	Acl pulumi.StringPtrInput
	// Layer code configuration See `code` below.
	Code V3LayerVersionCodePtrInput
	// (Available since v1.234.0) The code package size of the layer, in bytes.
	CodeSize pulumi.StringPtrInput
	// List of runtime environments supported by the layer
	CompatibleRuntimes pulumi.StringArrayInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Description of the version
	Description pulumi.StringPtrInput
	// Name of the layer
	LayerName pulumi.StringPtrInput
	// (Available since v1.234.0) Layer version ARN. The format is acs:fc:{region }:{ accountID}:layers/{layerName}/versions/{layerVersion}.
	LayerVersionArn pulumi.StringPtrInput
	// Layer License Agreement
	License pulumi.StringPtrInput
	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public pulumi.StringPtrInput
	// The version of the layer
	Version pulumi.StringPtrInput
}

func (V3LayerVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3layerVersionState)(nil)).Elem()
}

type v3layerVersionArgs struct {
	// The access permission of the layer, 1: public, 0: private, default is private
	Acl *string `pulumi:"acl"`
	// Layer code configuration See `code` below.
	Code *V3LayerVersionCode `pulumi:"code"`
	// List of runtime environments supported by the layer
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// Description of the version
	Description *string `pulumi:"description"`
	// Name of the layer
	LayerName string `pulumi:"layerName"`
	// Layer License Agreement
	License *string `pulumi:"license"`
	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public *string `pulumi:"public"`
}

// The set of arguments for constructing a V3LayerVersion resource.
type V3LayerVersionArgs struct {
	// The access permission of the layer, 1: public, 0: private, default is private
	Acl pulumi.StringPtrInput
	// Layer code configuration See `code` below.
	Code V3LayerVersionCodePtrInput
	// List of runtime environments supported by the layer
	CompatibleRuntimes pulumi.StringArrayInput
	// Description of the version
	Description pulumi.StringPtrInput
	// Name of the layer
	LayerName pulumi.StringInput
	// Layer License Agreement
	License pulumi.StringPtrInput
	// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
	Public pulumi.StringPtrInput
}

func (V3LayerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3layerVersionArgs)(nil)).Elem()
}

type V3LayerVersionInput interface {
	pulumi.Input

	ToV3LayerVersionOutput() V3LayerVersionOutput
	ToV3LayerVersionOutputWithContext(ctx context.Context) V3LayerVersionOutput
}

func (*V3LayerVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**V3LayerVersion)(nil)).Elem()
}

func (i *V3LayerVersion) ToV3LayerVersionOutput() V3LayerVersionOutput {
	return i.ToV3LayerVersionOutputWithContext(context.Background())
}

func (i *V3LayerVersion) ToV3LayerVersionOutputWithContext(ctx context.Context) V3LayerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3LayerVersionOutput)
}

// V3LayerVersionArrayInput is an input type that accepts V3LayerVersionArray and V3LayerVersionArrayOutput values.
// You can construct a concrete instance of `V3LayerVersionArrayInput` via:
//
//	V3LayerVersionArray{ V3LayerVersionArgs{...} }
type V3LayerVersionArrayInput interface {
	pulumi.Input

	ToV3LayerVersionArrayOutput() V3LayerVersionArrayOutput
	ToV3LayerVersionArrayOutputWithContext(context.Context) V3LayerVersionArrayOutput
}

type V3LayerVersionArray []V3LayerVersionInput

func (V3LayerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3LayerVersion)(nil)).Elem()
}

func (i V3LayerVersionArray) ToV3LayerVersionArrayOutput() V3LayerVersionArrayOutput {
	return i.ToV3LayerVersionArrayOutputWithContext(context.Background())
}

func (i V3LayerVersionArray) ToV3LayerVersionArrayOutputWithContext(ctx context.Context) V3LayerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3LayerVersionArrayOutput)
}

// V3LayerVersionMapInput is an input type that accepts V3LayerVersionMap and V3LayerVersionMapOutput values.
// You can construct a concrete instance of `V3LayerVersionMapInput` via:
//
//	V3LayerVersionMap{ "key": V3LayerVersionArgs{...} }
type V3LayerVersionMapInput interface {
	pulumi.Input

	ToV3LayerVersionMapOutput() V3LayerVersionMapOutput
	ToV3LayerVersionMapOutputWithContext(context.Context) V3LayerVersionMapOutput
}

type V3LayerVersionMap map[string]V3LayerVersionInput

func (V3LayerVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3LayerVersion)(nil)).Elem()
}

func (i V3LayerVersionMap) ToV3LayerVersionMapOutput() V3LayerVersionMapOutput {
	return i.ToV3LayerVersionMapOutputWithContext(context.Background())
}

func (i V3LayerVersionMap) ToV3LayerVersionMapOutputWithContext(ctx context.Context) V3LayerVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3LayerVersionMapOutput)
}

type V3LayerVersionOutput struct{ *pulumi.OutputState }

func (V3LayerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3LayerVersion)(nil)).Elem()
}

func (o V3LayerVersionOutput) ToV3LayerVersionOutput() V3LayerVersionOutput {
	return o
}

func (o V3LayerVersionOutput) ToV3LayerVersionOutputWithContext(ctx context.Context) V3LayerVersionOutput {
	return o
}

// The access permission of the layer, 1: public, 0: private, default is private
func (o V3LayerVersionOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

// Layer code configuration See `code` below.
func (o V3LayerVersionOutput) Code() V3LayerVersionCodePtrOutput {
	return o.ApplyT(func(v *V3LayerVersion) V3LayerVersionCodePtrOutput { return v.Code }).(V3LayerVersionCodePtrOutput)
}

// (Available since v1.234.0) The code package size of the layer, in bytes.
func (o V3LayerVersionOutput) CodeSize() pulumi.StringOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringOutput { return v.CodeSize }).(pulumi.StringOutput)
}

// List of runtime environments supported by the layer
func (o V3LayerVersionOutput) CompatibleRuntimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringArrayOutput { return v.CompatibleRuntimes }).(pulumi.StringArrayOutput)
}

// The creation time of the resource
func (o V3LayerVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the version
func (o V3LayerVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the layer
func (o V3LayerVersionOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

// (Available since v1.234.0) Layer version ARN. The format is acs:fc:{region }:{ accountID}:layers/{layerName}/versions/{layerVersion}.
func (o V3LayerVersionOutput) LayerVersionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringOutput { return v.LayerVersionArn }).(pulumi.StringOutput)
}

// Layer License Agreement
func (o V3LayerVersionOutput) License() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringPtrOutput { return v.License }).(pulumi.StringPtrOutput)
}

// Whether to expose the layer. Enumeration values: true, false. (Deprecated, please use acl instead)
func (o V3LayerVersionOutput) Public() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringPtrOutput { return v.Public }).(pulumi.StringPtrOutput)
}

// The version of the layer
func (o V3LayerVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *V3LayerVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type V3LayerVersionArrayOutput struct{ *pulumi.OutputState }

func (V3LayerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3LayerVersion)(nil)).Elem()
}

func (o V3LayerVersionArrayOutput) ToV3LayerVersionArrayOutput() V3LayerVersionArrayOutput {
	return o
}

func (o V3LayerVersionArrayOutput) ToV3LayerVersionArrayOutputWithContext(ctx context.Context) V3LayerVersionArrayOutput {
	return o
}

func (o V3LayerVersionArrayOutput) Index(i pulumi.IntInput) V3LayerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3LayerVersion {
		return vs[0].([]*V3LayerVersion)[vs[1].(int)]
	}).(V3LayerVersionOutput)
}

type V3LayerVersionMapOutput struct{ *pulumi.OutputState }

func (V3LayerVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3LayerVersion)(nil)).Elem()
}

func (o V3LayerVersionMapOutput) ToV3LayerVersionMapOutput() V3LayerVersionMapOutput {
	return o
}

func (o V3LayerVersionMapOutput) ToV3LayerVersionMapOutputWithContext(ctx context.Context) V3LayerVersionMapOutput {
	return o
}

func (o V3LayerVersionMapOutput) MapIndex(k pulumi.StringInput) V3LayerVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3LayerVersion {
		return vs[0].(map[string]*V3LayerVersion)[vs[1].(string)]
	}).(V3LayerVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3LayerVersionInput)(nil)).Elem(), &V3LayerVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3LayerVersionArrayInput)(nil)).Elem(), V3LayerVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3LayerVersionMapInput)(nil)).Elem(), V3LayerVersionMap{})
	pulumi.RegisterOutputType(V3LayerVersionOutput{})
	pulumi.RegisterOutputType(V3LayerVersionArrayOutput{})
	pulumi.RegisterOutputType(V3LayerVersionMapOutput{})
}
