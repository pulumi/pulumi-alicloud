// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Vpc Binding resource.
//
// For information about FCV3 Vpc Binding and how to use it, see [What is Vpc Binding](https://www.alibabacloud.com/help/en/functioncompute/fc-3-0/developer-reference/api-fc-2023-03-30-createvpcbinding).
//
// > **NOTE:** Available since v1.230.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("10.0.0.0/8"),
//				VpcName:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			function, err := fc.NewV3Function(ctx, "function", &fc.V3FunctionArgs{
//				MemorySize: pulumi.Int(512),
//				Cpu:        pulumi.Float64(0.5),
//				Handler:    pulumi.String("index.Handler"),
//				Code: &fc.V3FunctionCodeArgs{
//					ZipFile: pulumi.String("UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAaW5kZXgucHmEkEFKxEAQRfd9ig9ZTCJOooIwDMwNXLqXnnQlaalUhU5lRj2KZ/FOXkESGR114bJ/P/7jV4b1xRq1hijtFpM1682cuNgPmgysbRulPT0fRxXnMtwrSPyeCdYRokSLnuMLJTTkbUqEvDMbxm1VdcRD6Tk+T1LW2ldB66knsYdA5iNX17ebm6tN2VnPhcswMPmREPuBacb+CiapLarAj9gT6/H97dVlCNScY3mtYvRkxdZlwDKDEnanPWVLdrdkeXEGlFEazVdfPVHaVeHc3N15CUwppwOJXeK7HshAB8NuOU7J6sP4SRXuH/EvbUfMiqMmDqv5M5FNSfAj/wgAAP//UEsHCPl//NYAAQAArwEAAFBLAQIUABQACAAIAAAAAAD5f/zWAAEAAK8BAAAIAAAAAAAAAAAAAAAAAAAAAABpbmRleC5weVBLBQYAAAAAAQABADYAAAA2AQAAAAA="),
//				},
//				FunctionName: pulumi.String(name),
//				Runtime:      pulumi.String("python3.9"),
//				DiskSize:     pulumi.Int(512),
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3VpcBinding(ctx, "default", &fc.V3VpcBindingArgs{
//				FunctionName: function.FunctionName,
//				VpcId:        vpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Vpc Binding can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3VpcBinding:V3VpcBinding example <function_name>:<vpc_id>
// ```
type V3VpcBinding struct {
	pulumi.CustomResourceState

	// Function Name
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// VPC instance ID
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewV3VpcBinding registers a new resource with the given unique name, arguments, and options.
func NewV3VpcBinding(ctx *pulumi.Context,
	name string, args *V3VpcBindingArgs, opts ...pulumi.ResourceOption) (*V3VpcBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3VpcBinding
	err := ctx.RegisterResource("alicloud:fc/v3VpcBinding:V3VpcBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3VpcBinding gets an existing V3VpcBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3VpcBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3VpcBindingState, opts ...pulumi.ResourceOption) (*V3VpcBinding, error) {
	var resource V3VpcBinding
	err := ctx.ReadResource("alicloud:fc/v3VpcBinding:V3VpcBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3VpcBinding resources.
type v3vpcBindingState struct {
	// Function Name
	FunctionName *string `pulumi:"functionName"`
	// VPC instance ID
	VpcId *string `pulumi:"vpcId"`
}

type V3VpcBindingState struct {
	// Function Name
	FunctionName pulumi.StringPtrInput
	// VPC instance ID
	VpcId pulumi.StringPtrInput
}

func (V3VpcBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3vpcBindingState)(nil)).Elem()
}

type v3vpcBindingArgs struct {
	// Function Name
	FunctionName string `pulumi:"functionName"`
	// VPC instance ID
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a V3VpcBinding resource.
type V3VpcBindingArgs struct {
	// Function Name
	FunctionName pulumi.StringInput
	// VPC instance ID
	VpcId pulumi.StringPtrInput
}

func (V3VpcBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3vpcBindingArgs)(nil)).Elem()
}

type V3VpcBindingInput interface {
	pulumi.Input

	ToV3VpcBindingOutput() V3VpcBindingOutput
	ToV3VpcBindingOutputWithContext(ctx context.Context) V3VpcBindingOutput
}

func (*V3VpcBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**V3VpcBinding)(nil)).Elem()
}

func (i *V3VpcBinding) ToV3VpcBindingOutput() V3VpcBindingOutput {
	return i.ToV3VpcBindingOutputWithContext(context.Background())
}

func (i *V3VpcBinding) ToV3VpcBindingOutputWithContext(ctx context.Context) V3VpcBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3VpcBindingOutput)
}

// V3VpcBindingArrayInput is an input type that accepts V3VpcBindingArray and V3VpcBindingArrayOutput values.
// You can construct a concrete instance of `V3VpcBindingArrayInput` via:
//
//	V3VpcBindingArray{ V3VpcBindingArgs{...} }
type V3VpcBindingArrayInput interface {
	pulumi.Input

	ToV3VpcBindingArrayOutput() V3VpcBindingArrayOutput
	ToV3VpcBindingArrayOutputWithContext(context.Context) V3VpcBindingArrayOutput
}

type V3VpcBindingArray []V3VpcBindingInput

func (V3VpcBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3VpcBinding)(nil)).Elem()
}

func (i V3VpcBindingArray) ToV3VpcBindingArrayOutput() V3VpcBindingArrayOutput {
	return i.ToV3VpcBindingArrayOutputWithContext(context.Background())
}

func (i V3VpcBindingArray) ToV3VpcBindingArrayOutputWithContext(ctx context.Context) V3VpcBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3VpcBindingArrayOutput)
}

// V3VpcBindingMapInput is an input type that accepts V3VpcBindingMap and V3VpcBindingMapOutput values.
// You can construct a concrete instance of `V3VpcBindingMapInput` via:
//
//	V3VpcBindingMap{ "key": V3VpcBindingArgs{...} }
type V3VpcBindingMapInput interface {
	pulumi.Input

	ToV3VpcBindingMapOutput() V3VpcBindingMapOutput
	ToV3VpcBindingMapOutputWithContext(context.Context) V3VpcBindingMapOutput
}

type V3VpcBindingMap map[string]V3VpcBindingInput

func (V3VpcBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3VpcBinding)(nil)).Elem()
}

func (i V3VpcBindingMap) ToV3VpcBindingMapOutput() V3VpcBindingMapOutput {
	return i.ToV3VpcBindingMapOutputWithContext(context.Background())
}

func (i V3VpcBindingMap) ToV3VpcBindingMapOutputWithContext(ctx context.Context) V3VpcBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3VpcBindingMapOutput)
}

type V3VpcBindingOutput struct{ *pulumi.OutputState }

func (V3VpcBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3VpcBinding)(nil)).Elem()
}

func (o V3VpcBindingOutput) ToV3VpcBindingOutput() V3VpcBindingOutput {
	return o
}

func (o V3VpcBindingOutput) ToV3VpcBindingOutputWithContext(ctx context.Context) V3VpcBindingOutput {
	return o
}

// Function Name
func (o V3VpcBindingOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3VpcBinding) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// VPC instance ID
func (o V3VpcBindingOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *V3VpcBinding) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type V3VpcBindingArrayOutput struct{ *pulumi.OutputState }

func (V3VpcBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3VpcBinding)(nil)).Elem()
}

func (o V3VpcBindingArrayOutput) ToV3VpcBindingArrayOutput() V3VpcBindingArrayOutput {
	return o
}

func (o V3VpcBindingArrayOutput) ToV3VpcBindingArrayOutputWithContext(ctx context.Context) V3VpcBindingArrayOutput {
	return o
}

func (o V3VpcBindingArrayOutput) Index(i pulumi.IntInput) V3VpcBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3VpcBinding {
		return vs[0].([]*V3VpcBinding)[vs[1].(int)]
	}).(V3VpcBindingOutput)
}

type V3VpcBindingMapOutput struct{ *pulumi.OutputState }

func (V3VpcBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3VpcBinding)(nil)).Elem()
}

func (o V3VpcBindingMapOutput) ToV3VpcBindingMapOutput() V3VpcBindingMapOutput {
	return o
}

func (o V3VpcBindingMapOutput) ToV3VpcBindingMapOutputWithContext(ctx context.Context) V3VpcBindingMapOutput {
	return o
}

func (o V3VpcBindingMapOutput) MapIndex(k pulumi.StringInput) V3VpcBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3VpcBinding {
		return vs[0].(map[string]*V3VpcBinding)[vs[1].(string)]
	}).(V3VpcBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3VpcBindingInput)(nil)).Elem(), &V3VpcBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3VpcBindingArrayInput)(nil)).Elem(), V3VpcBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3VpcBindingMapInput)(nil)).Elem(), V3VpcBindingMap{})
	pulumi.RegisterOutputType(V3VpcBindingOutput{})
	pulumi.RegisterOutputType(V3VpcBindingArrayOutput{})
	pulumi.RegisterOutputType(V3VpcBindingMapOutput{})
}
