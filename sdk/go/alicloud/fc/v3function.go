// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Function Compute Service V3 (FCV3) Function resource.
//
// The resource scheduling and running of Function Compute is based on functions. The FC function consists of function code and function configuration.
//
// For information about Function Compute Service V3 (FCV3) Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getfunction).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewUuid(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "default", &oss.BucketArgs{
//				Bucket: pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "default", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.Bucket,
//				Key:     pulumi.String("FCV3Py39.zip"),
//				Content: pulumi.String("print('hello')"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3Function(ctx, "default", &fc.V3FunctionArgs{
//				Description: pulumi.String("Create"),
//				MemorySize:  pulumi.Int(512),
//				Layers: pulumi.StringArray{
//					pulumi.String("acs:fc:cn-shanghai:official:layers/Python39-Aliyun-SDK/versions/3"),
//				},
//				Timeout:  pulumi.Int(3),
//				Runtime:  pulumi.String("custom.debian10"),
//				Handler:  pulumi.String("index.handler"),
//				DiskSize: pulumi.Int(512),
//				CustomRuntimeConfig: &fc.V3FunctionCustomRuntimeConfigArgs{
//					Commands: pulumi.StringArray{
//						pulumi.String("python"),
//						pulumi.String("-c"),
//						pulumi.String("example"),
//					},
//					Args: pulumi.StringArray{
//						pulumi.String("app.py"),
//						pulumi.String("xx"),
//						pulumi.String("x"),
//					},
//					Port: pulumi.Int(9000),
//					HealthCheckConfig: &fc.V3FunctionCustomRuntimeConfigHealthCheckConfigArgs{
//						HttpGetUrl:          pulumi.String("/ready"),
//						InitialDelaySeconds: pulumi.Int(1),
//						PeriodSeconds:       pulumi.Int(10),
//						SuccessThreshold:    pulumi.Int(1),
//						TimeoutSeconds:      pulumi.Int(1),
//						FailureThreshold:    pulumi.Int(3),
//					},
//				},
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//				Code: &fc.V3FunctionCodeArgs{
//					OssBucketName: defaultBucket.Bucket,
//					OssObjectName: defaultBucketObject.Key,
//					Checksum:      pulumi.String("4270285996107335518"),
//				},
//				InstanceLifecycleConfig: &fc.V3FunctionInstanceLifecycleConfigArgs{
//					Initializer: &fc.V3FunctionInstanceLifecycleConfigInitializerArgs{
//						Timeout: pulumi.Int(1),
//						Handler: pulumi.String("index.init"),
//					},
//					PreStop: &fc.V3FunctionInstanceLifecycleConfigPreStopArgs{
//						Timeout: pulumi.Int(1),
//						Handler: pulumi.String("index.stop"),
//					},
//				},
//				Cpu:                 pulumi.Float64(0.5),
//				InstanceConcurrency: pulumi.Int(2),
//				FunctionName:        pulumi.Sprintf("%v-%v", name, _default.Result),
//				EnvironmentVariables: pulumi.StringMap{
//					"EnvKey": pulumi.String("EnvVal"),
//				},
//				InternetAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Function Compute Service V3 (FCV3) Function can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3Function:V3Function example <id>
// ```
type V3Function struct {
	pulumi.CustomResourceState

	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrOutput `pulumi:"code"`
	// The code package size of the function returned by the system, in byte Example : 1024
	CodeSize pulumi.IntOutput `pulumi:"codeSize"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64Output `pulumi:"cpu"`
	// The creation time of the function.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrOutput `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrOutput `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrOutput `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// ARN of function
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`
	// The first ID of the resource
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrOutput `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntOutput `pulumi:"instanceConcurrency"`
	// Instance isolation mode
	InstanceIsolationMode pulumi.StringPtrOutput `pulumi:"instanceIsolationMode"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrOutput `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess pulumi.BoolOutput `pulumi:"internetAccess"`
	// Invocation Restriction Detail See `invocationRestriction` below.
	InvocationRestriction V3FunctionInvocationRestrictionPtrOutput `pulumi:"invocationRestriction"`
	// Last time the function was Updated
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
	LastUpdateStatus pulumi.StringOutput `pulumi:"lastUpdateStatus"`
	// The reason that caused the last function to update the Operation State to the current value
	LastUpdateStatusReason pulumi.StringOutput `pulumi:"lastUpdateStatusReason"`
	// Status code of the reason that caused the last function update operation status to the current value
	LastUpdateStatusReasonCode pulumi.StringOutput `pulumi:"lastUpdateStatusReasonCode"`
	// The list of layers.
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrOutput `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntOutput `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigOutput `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigOutput `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Function runtime type
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
	SessionAffinity pulumi.StringPtrOutput `pulumi:"sessionAffinity"`
	// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
	SessionAffinityConfig pulumi.StringPtrOutput `pulumi:"sessionAffinityConfig"`
	// Function Status
	State pulumi.StringOutput `pulumi:"state"`
	// The reason why the function is in the current state
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
	// The status code of the reason the function is in the current state.
	StateReasonCode pulumi.StringOutput `pulumi:"stateReasonCode"`
	// The tag of the resource
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Tracing configuration
	TracingConfig V3FunctionTracingConfigOutput `pulumi:"tracingConfig"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigOutput `pulumi:"vpcConfig"`
}

// NewV3Function registers a new resource with the given unique name, arguments, and options.
func NewV3Function(ctx *pulumi.Context,
	name string, args *V3FunctionArgs, opts ...pulumi.ResourceOption) (*V3Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3Function
	err := ctx.RegisterResource("alicloud:fc/v3Function:V3Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3Function gets an existing V3Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3Function(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3FunctionState, opts ...pulumi.ResourceOption) (*V3Function, error) {
	var resource V3Function
	err := ctx.ReadResource("alicloud:fc/v3Function:V3Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3Function resources.
type v3functionState struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code *V3FunctionCode `pulumi:"code"`
	// The code package size of the function returned by the system, in byte Example : 1024
	CodeSize *int `pulumi:"codeSize"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu *float64 `pulumi:"cpu"`
	// The creation time of the function.
	CreateTime *string `pulumi:"createTime"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig *V3FunctionCustomContainerConfig `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns *V3FunctionCustomDns `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig *V3FunctionCustomRuntimeConfig `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description *string `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize *int `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// ARN of function
	FunctionArn *string `pulumi:"functionArn"`
	// The first ID of the resource
	FunctionId *string `pulumi:"functionId"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
	FunctionName *string `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig *V3FunctionGpuConfig `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler *string `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency *int `pulumi:"instanceConcurrency"`
	// Instance isolation mode
	InstanceIsolationMode *string `pulumi:"instanceIsolationMode"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig *V3FunctionInstanceLifecycleConfig `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess *bool `pulumi:"internetAccess"`
	// Invocation Restriction Detail See `invocationRestriction` below.
	InvocationRestriction *V3FunctionInvocationRestriction `pulumi:"invocationRestriction"`
	// Last time the function was Updated
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
	LastUpdateStatus *string `pulumi:"lastUpdateStatus"`
	// The reason that caused the last function to update the Operation State to the current value
	LastUpdateStatusReason *string `pulumi:"lastUpdateStatusReason"`
	// Status code of the reason that caused the last function update operation status to the current value
	LastUpdateStatusReasonCode *string `pulumi:"lastUpdateStatusReasonCode"`
	// The list of layers.
	Layers []string `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig *V3FunctionLogConfig `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize *int `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig *V3FunctionNasConfig `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig *V3FunctionOssMountConfig `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role *string `pulumi:"role"`
	// Function runtime type
	Runtime *string `pulumi:"runtime"`
	// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
	SessionAffinityConfig *string `pulumi:"sessionAffinityConfig"`
	// Function Status
	State *string `pulumi:"state"`
	// The reason why the function is in the current state
	StateReason *string `pulumi:"stateReason"`
	// The status code of the reason the function is in the current state.
	StateReasonCode *string `pulumi:"stateReasonCode"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// The maximum running time of the function, in seconds.
	Timeout *int `pulumi:"timeout"`
	// Tracing configuration
	TracingConfig *V3FunctionTracingConfig `pulumi:"tracingConfig"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig *V3FunctionVpcConfig `pulumi:"vpcConfig"`
}

type V3FunctionState struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrInput
	// The code package size of the function returned by the system, in byte Example : 1024
	CodeSize pulumi.IntPtrInput
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64PtrInput
	// The creation time of the function.
	CreateTime pulumi.StringPtrInput
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrInput
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrInput
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrInput
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrInput
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntPtrInput
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapInput
	// ARN of function
	FunctionArn pulumi.StringPtrInput
	// The first ID of the resource
	FunctionId pulumi.StringPtrInput
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringPtrInput
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrInput
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringPtrInput
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntPtrInput
	// Instance isolation mode
	InstanceIsolationMode pulumi.StringPtrInput
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrInput
	// Allow function to access public network
	InternetAccess pulumi.BoolPtrInput
	// Invocation Restriction Detail See `invocationRestriction` below.
	InvocationRestriction V3FunctionInvocationRestrictionPtrInput
	// Last time the function was Updated
	LastModifiedTime pulumi.StringPtrInput
	// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
	LastUpdateStatus pulumi.StringPtrInput
	// The reason that caused the last function to update the Operation State to the current value
	LastUpdateStatusReason pulumi.StringPtrInput
	// Status code of the reason that caused the last function update operation status to the current value
	LastUpdateStatusReasonCode pulumi.StringPtrInput
	// The list of layers.
	Layers pulumi.StringArrayInput
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrInput
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntPtrInput
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigPtrInput
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigPtrInput
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrInput
	// Function runtime type
	Runtime pulumi.StringPtrInput
	// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
	SessionAffinity pulumi.StringPtrInput
	// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
	SessionAffinityConfig pulumi.StringPtrInput
	// Function Status
	State pulumi.StringPtrInput
	// The reason why the function is in the current state
	StateReason pulumi.StringPtrInput
	// The status code of the reason the function is in the current state.
	StateReasonCode pulumi.StringPtrInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntPtrInput
	// Tracing configuration
	TracingConfig V3FunctionTracingConfigPtrInput
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigPtrInput
}

func (V3FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionState)(nil)).Elem()
}

type v3functionArgs struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code *V3FunctionCode `pulumi:"code"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu *float64 `pulumi:"cpu"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig *V3FunctionCustomContainerConfig `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns *V3FunctionCustomDns `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig *V3FunctionCustomRuntimeConfig `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description *string `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize *int `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
	FunctionName *string `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig *V3FunctionGpuConfig `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler string `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency *int `pulumi:"instanceConcurrency"`
	// Instance isolation mode
	InstanceIsolationMode *string `pulumi:"instanceIsolationMode"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig *V3FunctionInstanceLifecycleConfig `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess *bool `pulumi:"internetAccess"`
	// Invocation Restriction Detail See `invocationRestriction` below.
	InvocationRestriction *V3FunctionInvocationRestriction `pulumi:"invocationRestriction"`
	// The list of layers.
	Layers []string `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig *V3FunctionLogConfig `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize *int `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig *V3FunctionNasConfig `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig *V3FunctionOssMountConfig `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role *string `pulumi:"role"`
	// Function runtime type
	Runtime string `pulumi:"runtime"`
	// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
	SessionAffinityConfig *string `pulumi:"sessionAffinityConfig"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// The maximum running time of the function, in seconds.
	Timeout *int `pulumi:"timeout"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig *V3FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a V3Function resource.
type V3FunctionArgs struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrInput
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64PtrInput
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrInput
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrInput
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrInput
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrInput
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntPtrInput
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapInput
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringPtrInput
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrInput
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringInput
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntPtrInput
	// Instance isolation mode
	InstanceIsolationMode pulumi.StringPtrInput
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrInput
	// Allow function to access public network
	InternetAccess pulumi.BoolPtrInput
	// Invocation Restriction Detail See `invocationRestriction` below.
	InvocationRestriction V3FunctionInvocationRestrictionPtrInput
	// The list of layers.
	Layers pulumi.StringArrayInput
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrInput
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntPtrInput
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigPtrInput
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigPtrInput
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrInput
	// Function runtime type
	Runtime pulumi.StringInput
	// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
	SessionAffinity pulumi.StringPtrInput
	// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
	SessionAffinityConfig pulumi.StringPtrInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntPtrInput
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigPtrInput
}

func (V3FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionArgs)(nil)).Elem()
}

type V3FunctionInput interface {
	pulumi.Input

	ToV3FunctionOutput() V3FunctionOutput
	ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput
}

func (*V3Function) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Function)(nil)).Elem()
}

func (i *V3Function) ToV3FunctionOutput() V3FunctionOutput {
	return i.ToV3FunctionOutputWithContext(context.Background())
}

func (i *V3Function) ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionOutput)
}

// V3FunctionArrayInput is an input type that accepts V3FunctionArray and V3FunctionArrayOutput values.
// You can construct a concrete instance of `V3FunctionArrayInput` via:
//
//	V3FunctionArray{ V3FunctionArgs{...} }
type V3FunctionArrayInput interface {
	pulumi.Input

	ToV3FunctionArrayOutput() V3FunctionArrayOutput
	ToV3FunctionArrayOutputWithContext(context.Context) V3FunctionArrayOutput
}

type V3FunctionArray []V3FunctionInput

func (V3FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Function)(nil)).Elem()
}

func (i V3FunctionArray) ToV3FunctionArrayOutput() V3FunctionArrayOutput {
	return i.ToV3FunctionArrayOutputWithContext(context.Background())
}

func (i V3FunctionArray) ToV3FunctionArrayOutputWithContext(ctx context.Context) V3FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionArrayOutput)
}

// V3FunctionMapInput is an input type that accepts V3FunctionMap and V3FunctionMapOutput values.
// You can construct a concrete instance of `V3FunctionMapInput` via:
//
//	V3FunctionMap{ "key": V3FunctionArgs{...} }
type V3FunctionMapInput interface {
	pulumi.Input

	ToV3FunctionMapOutput() V3FunctionMapOutput
	ToV3FunctionMapOutputWithContext(context.Context) V3FunctionMapOutput
}

type V3FunctionMap map[string]V3FunctionInput

func (V3FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Function)(nil)).Elem()
}

func (i V3FunctionMap) ToV3FunctionMapOutput() V3FunctionMapOutput {
	return i.ToV3FunctionMapOutputWithContext(context.Background())
}

func (i V3FunctionMap) ToV3FunctionMapOutputWithContext(ctx context.Context) V3FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionMapOutput)
}

type V3FunctionOutput struct{ *pulumi.OutputState }

func (V3FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Function)(nil)).Elem()
}

func (o V3FunctionOutput) ToV3FunctionOutput() V3FunctionOutput {
	return o
}

func (o V3FunctionOutput) ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput {
	return o
}

// Function code ZIP package. code and customContainerConfig. See `code` below.
func (o V3FunctionOutput) Code() V3FunctionCodePtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCodePtrOutput { return v.Code }).(V3FunctionCodePtrOutput)
}

// The code package size of the function returned by the system, in byte Example : 1024
func (o V3FunctionOutput) CodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.CodeSize }).(pulumi.IntOutput)
}

// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
func (o V3FunctionOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v *V3Function) pulumi.Float64Output { return v.Cpu }).(pulumi.Float64Output)
}

// The creation time of the function.
func (o V3FunctionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
func (o V3FunctionOutput) CustomContainerConfig() V3FunctionCustomContainerConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomContainerConfigPtrOutput { return v.CustomContainerConfig }).(V3FunctionCustomContainerConfigPtrOutput)
}

// Function custom DNS configuration See `customDns` below.
func (o V3FunctionOutput) CustomDns() V3FunctionCustomDnsPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomDnsPtrOutput { return v.CustomDns }).(V3FunctionCustomDnsPtrOutput)
}

// Customize the runtime configuration. See `customRuntimeConfig` below.
func (o V3FunctionOutput) CustomRuntimeConfig() V3FunctionCustomRuntimeConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomRuntimeConfigPtrOutput { return v.CustomRuntimeConfig }).(V3FunctionCustomRuntimeConfigPtrOutput)
}

// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
func (o V3FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
func (o V3FunctionOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// The environment variable set for the function, you can get the value of the environment variable in the function.
func (o V3FunctionOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// ARN of function
func (o V3FunctionOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

// The first ID of the resource
func (o V3FunctionOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (_), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (_). Case sensitive. The length is 1~128 characters.
func (o V3FunctionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// Function GPU configuration. See `gpuConfig` below.
func (o V3FunctionOutput) GpuConfig() V3FunctionGpuConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionGpuConfigPtrOutput { return v.GpuConfig }).(V3FunctionGpuConfigPtrOutput)
}

// Function Handler: the call entry for the function compute system to run your function.
func (o V3FunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// Maximum instance concurrency.
func (o V3FunctionOutput) InstanceConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.InstanceConcurrency }).(pulumi.IntOutput)
}

// Instance isolation mode
func (o V3FunctionOutput) InstanceIsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.InstanceIsolationMode }).(pulumi.StringPtrOutput)
}

// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
func (o V3FunctionOutput) InstanceLifecycleConfig() V3FunctionInstanceLifecycleConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionInstanceLifecycleConfigPtrOutput { return v.InstanceLifecycleConfig }).(V3FunctionInstanceLifecycleConfigPtrOutput)
}

// Allow function to access public network
func (o V3FunctionOutput) InternetAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *V3Function) pulumi.BoolOutput { return v.InternetAccess }).(pulumi.BoolOutput)
}

// Invocation Restriction Detail See `invocationRestriction` below.
func (o V3FunctionOutput) InvocationRestriction() V3FunctionInvocationRestrictionPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionInvocationRestrictionPtrOutput { return v.InvocationRestriction }).(V3FunctionInvocationRestrictionPtrOutput)
}

// Last time the function was Updated
func (o V3FunctionOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The status of the last function update operation. When the function is created successfully, the value is Successful. Optional values are Successful, Failed, and InProgress.
func (o V3FunctionOutput) LastUpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.LastUpdateStatus }).(pulumi.StringOutput)
}

// The reason that caused the last function to update the Operation State to the current value
func (o V3FunctionOutput) LastUpdateStatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.LastUpdateStatusReason }).(pulumi.StringOutput)
}

// Status code of the reason that caused the last function update operation status to the current value
func (o V3FunctionOutput) LastUpdateStatusReasonCode() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.LastUpdateStatusReasonCode }).(pulumi.StringOutput)
}

// The list of layers.
func (o V3FunctionOutput) Layers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringArrayOutput { return v.Layers }).(pulumi.StringArrayOutput)
}

// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
func (o V3FunctionOutput) LogConfig() V3FunctionLogConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionLogConfigPtrOutput { return v.LogConfig }).(V3FunctionLogConfigPtrOutput)
}

// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
func (o V3FunctionOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.MemorySize }).(pulumi.IntOutput)
}

// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
func (o V3FunctionOutput) NasConfig() V3FunctionNasConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionNasConfigOutput { return v.NasConfig }).(V3FunctionNasConfigOutput)
}

// OSS mount configuration See `ossMountConfig` below.
func (o V3FunctionOutput) OssMountConfig() V3FunctionOssMountConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionOssMountConfigOutput { return v.OssMountConfig }).(V3FunctionOssMountConfigOutput)
}

// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
func (o V3FunctionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Function runtime type
func (o V3FunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The affinity policy of the function compute call request. To implement the request affinity of the MCP SSE protocol, set it to MCP_SSE. If Cookie affinity is used, it can be set to GENERATED_COOKIE. If Header affinity is used, it can be set to HEADER_FIELD. If it is not set or set to NONE, the affinity effect is not set, and the request is routed according to the default scheduling policy of the function calculation system.
func (o V3FunctionOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// When you set the sessionAffinity affinity type, you need to set the relevant affinity configuration. For example, the MCP_SSE affinity needs to fill in the mcpssessionaffinityconfig configuration. The Cookie affinity needs to be filled with the CookieSessionAffinityConfig configuration, and the Header Field affinity needs to be filled with the HeaderFieldSessionAffinityConfig configuration.
func (o V3FunctionOutput) SessionAffinityConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.SessionAffinityConfig }).(pulumi.StringPtrOutput)
}

// Function Status
func (o V3FunctionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The reason why the function is in the current state
func (o V3FunctionOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

// The status code of the reason the function is in the current state.
func (o V3FunctionOutput) StateReasonCode() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.StateReasonCode }).(pulumi.StringOutput)
}

// The tag of the resource
func (o V3FunctionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The maximum running time of the function, in seconds.
func (o V3FunctionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Tracing configuration
func (o V3FunctionOutput) TracingConfig() V3FunctionTracingConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionTracingConfigOutput { return v.TracingConfig }).(V3FunctionTracingConfigOutput)
}

// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
func (o V3FunctionOutput) VpcConfig() V3FunctionVpcConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionVpcConfigOutput { return v.VpcConfig }).(V3FunctionVpcConfigOutput)
}

type V3FunctionArrayOutput struct{ *pulumi.OutputState }

func (V3FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Function)(nil)).Elem()
}

func (o V3FunctionArrayOutput) ToV3FunctionArrayOutput() V3FunctionArrayOutput {
	return o
}

func (o V3FunctionArrayOutput) ToV3FunctionArrayOutputWithContext(ctx context.Context) V3FunctionArrayOutput {
	return o
}

func (o V3FunctionArrayOutput) Index(i pulumi.IntInput) V3FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3Function {
		return vs[0].([]*V3Function)[vs[1].(int)]
	}).(V3FunctionOutput)
}

type V3FunctionMapOutput struct{ *pulumi.OutputState }

func (V3FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Function)(nil)).Elem()
}

func (o V3FunctionMapOutput) ToV3FunctionMapOutput() V3FunctionMapOutput {
	return o
}

func (o V3FunctionMapOutput) ToV3FunctionMapOutputWithContext(ctx context.Context) V3FunctionMapOutput {
	return o
}

func (o V3FunctionMapOutput) MapIndex(k pulumi.StringInput) V3FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3Function {
		return vs[0].(map[string]*V3Function)[vs[1].(string)]
	}).(V3FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionInput)(nil)).Elem(), &V3Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionArrayInput)(nil)).Elem(), V3FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionMapInput)(nil)).Elem(), V3FunctionMap{})
	pulumi.RegisterOutputType(V3FunctionOutput{})
	pulumi.RegisterOutputType(V3FunctionArrayOutput{})
	pulumi.RegisterOutputType(V3FunctionMapOutput{})
}
