// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a FCV3 Function resource.
//
// The resource scheduling and running of Function Compute is based on functions. The FC function consists of function code and function configuration.
//
// For information about FCV3 Function and how to use it, see [What is Function](https://www.alibabacloud.com/help/en/functioncompute/developer-reference/api-fc-2023-03-30-getfunction).
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/fc"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := random.NewUuid(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			defaultBucket, err := oss.NewBucket(ctx, "default", &oss.BucketArgs{
//				Bucket: pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "default", &oss.BucketObjectArgs{
//				Bucket:  defaultBucket.Bucket,
//				Key:     pulumi.String("FCV3Py39.zip"),
//				Content: pulumi.String("print('hello')"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fc.NewV3Function(ctx, "default", &fc.V3FunctionArgs{
//				Description: pulumi.String("Create"),
//				MemorySize:  pulumi.Int(512),
//				Layers: pulumi.StringArray{
//					pulumi.String("acs:fc:cn-shanghai:official:layers/Python39-Aliyun-SDK/versions/3"),
//				},
//				Timeout:  pulumi.Int(3),
//				Runtime:  pulumi.String("custom.debian10"),
//				Handler:  pulumi.String("index.handler"),
//				DiskSize: pulumi.Int(512),
//				CustomRuntimeConfig: &fc.V3FunctionCustomRuntimeConfigArgs{
//					Commands: pulumi.StringArray{
//						pulumi.String("python"),
//						pulumi.String("-c"),
//						pulumi.String("example"),
//					},
//					Args: pulumi.StringArray{
//						pulumi.String("app.py"),
//						pulumi.String("xx"),
//						pulumi.String("x"),
//					},
//					Port: pulumi.Int(9000),
//					HealthCheckConfig: &fc.V3FunctionCustomRuntimeConfigHealthCheckConfigArgs{
//						HttpGetUrl:          pulumi.String("/ready"),
//						InitialDelaySeconds: pulumi.Int(1),
//						PeriodSeconds:       pulumi.Int(10),
//						SuccessThreshold:    pulumi.Int(1),
//						TimeoutSeconds:      pulumi.Int(1),
//						FailureThreshold:    pulumi.Int(3),
//					},
//				},
//				LogConfig: &fc.V3FunctionLogConfigArgs{
//					LogBeginRule: pulumi.String("None"),
//				},
//				Code: &fc.V3FunctionCodeArgs{
//					OssBucketName: defaultBucket.Bucket,
//					OssObjectName: defaultBucketObject.Key,
//					Checksum:      pulumi.String("4270285996107335518"),
//				},
//				InstanceLifecycleConfig: &fc.V3FunctionInstanceLifecycleConfigArgs{
//					Initializer: &fc.V3FunctionInstanceLifecycleConfigInitializerArgs{
//						Timeout: pulumi.Int(1),
//						Handler: pulumi.String("index.init"),
//					},
//					PreStop: &fc.V3FunctionInstanceLifecycleConfigPreStopArgs{
//						Timeout: pulumi.Int(1),
//						Handler: pulumi.String("index.stop"),
//					},
//				},
//				Cpu:                 pulumi.Float64(0.5),
//				InstanceConcurrency: pulumi.Int(2),
//				FunctionName:        pulumi.Sprintf("%v-%v", name, _default.Result),
//				EnvironmentVariables: pulumi.StringMap{
//					"EnvKey": pulumi.String("EnvVal"),
//				},
//				InternetAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FCV3 Function can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:fc/v3Function:V3Function example <id>
// ```
type V3Function struct {
	pulumi.CustomResourceState

	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrOutput `pulumi:"code"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64Output `pulumi:"cpu"`
	// The creation time of the function.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrOutput `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrOutput `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrOutput `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrOutput `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntOutput `pulumi:"instanceConcurrency"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrOutput `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess pulumi.BoolOutput `pulumi:"internetAccess"`
	// The list of layers.
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrOutput `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntOutput `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigOutput `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigOutput `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Function runtime type
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigOutput `pulumi:"vpcConfig"`
}

// NewV3Function registers a new resource with the given unique name, arguments, and options.
func NewV3Function(ctx *pulumi.Context,
	name string, args *V3FunctionArgs, opts ...pulumi.ResourceOption) (*V3Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	if args.Layers != nil {
		args.Layers = pulumi.ToSecret(args.Layers).(pulumi.StringArrayInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"layers",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V3Function
	err := ctx.RegisterResource("alicloud:fc/v3Function:V3Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV3Function gets an existing V3Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV3Function(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V3FunctionState, opts ...pulumi.ResourceOption) (*V3Function, error) {
	var resource V3Function
	err := ctx.ReadResource("alicloud:fc/v3Function:V3Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V3Function resources.
type v3functionState struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code *V3FunctionCode `pulumi:"code"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu *float64 `pulumi:"cpu"`
	// The creation time of the function.
	CreateTime *string `pulumi:"createTime"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig *V3FunctionCustomContainerConfig `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns *V3FunctionCustomDns `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig *V3FunctionCustomRuntimeConfig `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description *string `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize *int `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
	FunctionName *string `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig *V3FunctionGpuConfig `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler *string `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency *int `pulumi:"instanceConcurrency"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig *V3FunctionInstanceLifecycleConfig `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess *bool `pulumi:"internetAccess"`
	// The list of layers.
	Layers []string `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig *V3FunctionLogConfig `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize *int `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig *V3FunctionNasConfig `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig *V3FunctionOssMountConfig `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role *string `pulumi:"role"`
	// Function runtime type
	Runtime *string `pulumi:"runtime"`
	// The maximum running time of the function, in seconds.
	Timeout *int `pulumi:"timeout"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig *V3FunctionVpcConfig `pulumi:"vpcConfig"`
}

type V3FunctionState struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrInput
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64PtrInput
	// The creation time of the function.
	CreateTime pulumi.StringPtrInput
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrInput
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrInput
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrInput
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrInput
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntPtrInput
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapInput
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringPtrInput
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrInput
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringPtrInput
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntPtrInput
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrInput
	// Allow function to access public network
	InternetAccess pulumi.BoolPtrInput
	// The list of layers.
	Layers pulumi.StringArrayInput
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrInput
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntPtrInput
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigPtrInput
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigPtrInput
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrInput
	// Function runtime type
	Runtime pulumi.StringPtrInput
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntPtrInput
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigPtrInput
}

func (V3FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionState)(nil)).Elem()
}

type v3functionArgs struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code *V3FunctionCode `pulumi:"code"`
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu *float64 `pulumi:"cpu"`
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig *V3FunctionCustomContainerConfig `pulumi:"customContainerConfig"`
	// Function custom DNS configuration See `customDns` below.
	CustomDns *V3FunctionCustomDns `pulumi:"customDns"`
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig *V3FunctionCustomRuntimeConfig `pulumi:"customRuntimeConfig"`
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description *string `pulumi:"description"`
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize *int `pulumi:"diskSize"`
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
	FunctionName *string `pulumi:"functionName"`
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig *V3FunctionGpuConfig `pulumi:"gpuConfig"`
	// Function Handler: the call entry for the function compute system to run your function.
	Handler string `pulumi:"handler"`
	// Maximum instance concurrency.
	InstanceConcurrency *int `pulumi:"instanceConcurrency"`
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig *V3FunctionInstanceLifecycleConfig `pulumi:"instanceLifecycleConfig"`
	// Allow function to access public network
	InternetAccess *bool `pulumi:"internetAccess"`
	// The list of layers.
	Layers []string `pulumi:"layers"`
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig *V3FunctionLogConfig `pulumi:"logConfig"`
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize *int `pulumi:"memorySize"`
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig *V3FunctionNasConfig `pulumi:"nasConfig"`
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig *V3FunctionOssMountConfig `pulumi:"ossMountConfig"`
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role *string `pulumi:"role"`
	// Function runtime type
	Runtime string `pulumi:"runtime"`
	// The maximum running time of the function, in seconds.
	Timeout *int `pulumi:"timeout"`
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig *V3FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a V3Function resource.
type V3FunctionArgs struct {
	// Function code ZIP package. code and customContainerConfig. See `code` below.
	Code V3FunctionCodePtrInput
	// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
	Cpu pulumi.Float64PtrInput
	// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
	CustomContainerConfig V3FunctionCustomContainerConfigPtrInput
	// Function custom DNS configuration See `customDns` below.
	CustomDns V3FunctionCustomDnsPtrInput
	// Customize the runtime configuration. See `customRuntimeConfig` below.
	CustomRuntimeConfig V3FunctionCustomRuntimeConfigPtrInput
	// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
	Description pulumi.StringPtrInput
	// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
	DiskSize pulumi.IntPtrInput
	// The environment variable set for the function, you can get the value of the environment variable in the function.
	EnvironmentVariables pulumi.StringMapInput
	// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
	FunctionName pulumi.StringPtrInput
	// Function GPU configuration. See `gpuConfig` below.
	GpuConfig V3FunctionGpuConfigPtrInput
	// Function Handler: the call entry for the function compute system to run your function.
	Handler pulumi.StringInput
	// Maximum instance concurrency.
	InstanceConcurrency pulumi.IntPtrInput
	// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
	InstanceLifecycleConfig V3FunctionInstanceLifecycleConfigPtrInput
	// Allow function to access public network
	InternetAccess pulumi.BoolPtrInput
	// The list of layers.
	Layers pulumi.StringArrayInput
	// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
	LogConfig V3FunctionLogConfigPtrInput
	// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
	MemorySize pulumi.IntPtrInput
	// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
	NasConfig V3FunctionNasConfigPtrInput
	// OSS mount configuration See `ossMountConfig` below.
	OssMountConfig V3FunctionOssMountConfigPtrInput
	// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
	Role pulumi.StringPtrInput
	// Function runtime type
	Runtime pulumi.StringInput
	// The maximum running time of the function, in seconds.
	Timeout pulumi.IntPtrInput
	// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
	VpcConfig V3FunctionVpcConfigPtrInput
}

func (V3FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v3functionArgs)(nil)).Elem()
}

type V3FunctionInput interface {
	pulumi.Input

	ToV3FunctionOutput() V3FunctionOutput
	ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput
}

func (*V3Function) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Function)(nil)).Elem()
}

func (i *V3Function) ToV3FunctionOutput() V3FunctionOutput {
	return i.ToV3FunctionOutputWithContext(context.Background())
}

func (i *V3Function) ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionOutput)
}

// V3FunctionArrayInput is an input type that accepts V3FunctionArray and V3FunctionArrayOutput values.
// You can construct a concrete instance of `V3FunctionArrayInput` via:
//
//	V3FunctionArray{ V3FunctionArgs{...} }
type V3FunctionArrayInput interface {
	pulumi.Input

	ToV3FunctionArrayOutput() V3FunctionArrayOutput
	ToV3FunctionArrayOutputWithContext(context.Context) V3FunctionArrayOutput
}

type V3FunctionArray []V3FunctionInput

func (V3FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Function)(nil)).Elem()
}

func (i V3FunctionArray) ToV3FunctionArrayOutput() V3FunctionArrayOutput {
	return i.ToV3FunctionArrayOutputWithContext(context.Background())
}

func (i V3FunctionArray) ToV3FunctionArrayOutputWithContext(ctx context.Context) V3FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionArrayOutput)
}

// V3FunctionMapInput is an input type that accepts V3FunctionMap and V3FunctionMapOutput values.
// You can construct a concrete instance of `V3FunctionMapInput` via:
//
//	V3FunctionMap{ "key": V3FunctionArgs{...} }
type V3FunctionMapInput interface {
	pulumi.Input

	ToV3FunctionMapOutput() V3FunctionMapOutput
	ToV3FunctionMapOutputWithContext(context.Context) V3FunctionMapOutput
}

type V3FunctionMap map[string]V3FunctionInput

func (V3FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Function)(nil)).Elem()
}

func (i V3FunctionMap) ToV3FunctionMapOutput() V3FunctionMapOutput {
	return i.ToV3FunctionMapOutputWithContext(context.Background())
}

func (i V3FunctionMap) ToV3FunctionMapOutputWithContext(ctx context.Context) V3FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V3FunctionMapOutput)
}

type V3FunctionOutput struct{ *pulumi.OutputState }

func (V3FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V3Function)(nil)).Elem()
}

func (o V3FunctionOutput) ToV3FunctionOutput() V3FunctionOutput {
	return o
}

func (o V3FunctionOutput) ToV3FunctionOutputWithContext(ctx context.Context) V3FunctionOutput {
	return o
}

// Function code ZIP package. code and customContainerConfig. See `code` below.
func (o V3FunctionOutput) Code() V3FunctionCodePtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCodePtrOutput { return v.Code }).(V3FunctionCodePtrOutput)
}

// The CPU specification of the function. The unit is vCPU, which is a multiple of the 0.05 vCPU.
func (o V3FunctionOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v *V3Function) pulumi.Float64Output { return v.Cpu }).(pulumi.Float64Output)
}

// The creation time of the function.
func (o V3FunctionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The configuration of the custom container runtime. After the configuration is successful, the function can use the custom container image to execute the function. code and customContainerConfig. See `customContainerConfig` below.
func (o V3FunctionOutput) CustomContainerConfig() V3FunctionCustomContainerConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomContainerConfigPtrOutput { return v.CustomContainerConfig }).(V3FunctionCustomContainerConfigPtrOutput)
}

// Function custom DNS configuration See `customDns` below.
func (o V3FunctionOutput) CustomDns() V3FunctionCustomDnsPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomDnsPtrOutput { return v.CustomDns }).(V3FunctionCustomDnsPtrOutput)
}

// Customize the runtime configuration. See `customRuntimeConfig` below.
func (o V3FunctionOutput) CustomRuntimeConfig() V3FunctionCustomRuntimeConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionCustomRuntimeConfigPtrOutput { return v.CustomRuntimeConfig }).(V3FunctionCustomRuntimeConfigPtrOutput)
}

// The description of the function. The function compute system does not use this attribute value, but we recommend that you set a concise and clear description for the function.
func (o V3FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The disk specification of the function, in MB. The optional value is 512 MB or 10240MB.
func (o V3FunctionOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// The environment variable set for the function, you can get the value of the environment variable in the function.
func (o V3FunctionOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The function name. Consists of uppercase and lowercase letters, digits (0 to 9), underscores (*), and dashes (-). It must begin with an English letter (a ~ z), (A ~ Z), or an underscore (*). Case sensitive. The length is 1~128 characters.
func (o V3FunctionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// Function GPU configuration. See `gpuConfig` below.
func (o V3FunctionOutput) GpuConfig() V3FunctionGpuConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionGpuConfigPtrOutput { return v.GpuConfig }).(V3FunctionGpuConfigPtrOutput)
}

// Function Handler: the call entry for the function compute system to run your function.
func (o V3FunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// Maximum instance concurrency.
func (o V3FunctionOutput) InstanceConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.InstanceConcurrency }).(pulumi.IntOutput)
}

// Instance lifecycle callback method configuration. See `instanceLifecycleConfig` below.
func (o V3FunctionOutput) InstanceLifecycleConfig() V3FunctionInstanceLifecycleConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionInstanceLifecycleConfigPtrOutput { return v.InstanceLifecycleConfig }).(V3FunctionInstanceLifecycleConfigPtrOutput)
}

// Allow function to access public network
func (o V3FunctionOutput) InternetAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *V3Function) pulumi.BoolOutput { return v.InternetAccess }).(pulumi.BoolOutput)
}

// The list of layers.
func (o V3FunctionOutput) Layers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringArrayOutput { return v.Layers }).(pulumi.StringArrayOutput)
}

// The logs generated by the function are written to the configured Logstore. See `logConfig` below.
func (o V3FunctionOutput) LogConfig() V3FunctionLogConfigPtrOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionLogConfigPtrOutput { return v.LogConfig }).(V3FunctionLogConfigPtrOutput)
}

// The memory specification of the function. The unit is MB. The memory size is a multiple of 64MB. The minimum value is 128MB and the maximum value is 32GB. At the same time, the ratio of cpu to memorySize (calculated by GB) should be between 1:1 and 1:4.
func (o V3FunctionOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.MemorySize }).(pulumi.IntOutput)
}

// NAS configuration. After this parameter is configured, the function can access the specified NAS resource. See `nasConfig` below.
func (o V3FunctionOutput) NasConfig() V3FunctionNasConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionNasConfigOutput { return v.NasConfig }).(V3FunctionNasConfigOutput)
}

// OSS mount configuration See `ossMountConfig` below.
func (o V3FunctionOutput) OssMountConfig() V3FunctionOssMountConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionOssMountConfigOutput { return v.OssMountConfig }).(V3FunctionOssMountConfigOutput)
}

// The user is authorized to the RAM role of function compute. After the configuration, function compute will assume this role to generate temporary access credentials. In the function, you can use the temporary access credentials of the role to access the specified Alibaba cloud service, such as OSS and OTS
func (o V3FunctionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Function runtime type
func (o V3FunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *V3Function) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The maximum running time of the function, in seconds.
func (o V3FunctionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *V3Function) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// VPC configuration. After this parameter is configured, the function can access the specified VPC resources. See `vpcConfig` below.
func (o V3FunctionOutput) VpcConfig() V3FunctionVpcConfigOutput {
	return o.ApplyT(func(v *V3Function) V3FunctionVpcConfigOutput { return v.VpcConfig }).(V3FunctionVpcConfigOutput)
}

type V3FunctionArrayOutput struct{ *pulumi.OutputState }

func (V3FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V3Function)(nil)).Elem()
}

func (o V3FunctionArrayOutput) ToV3FunctionArrayOutput() V3FunctionArrayOutput {
	return o
}

func (o V3FunctionArrayOutput) ToV3FunctionArrayOutputWithContext(ctx context.Context) V3FunctionArrayOutput {
	return o
}

func (o V3FunctionArrayOutput) Index(i pulumi.IntInput) V3FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V3Function {
		return vs[0].([]*V3Function)[vs[1].(int)]
	}).(V3FunctionOutput)
}

type V3FunctionMapOutput struct{ *pulumi.OutputState }

func (V3FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V3Function)(nil)).Elem()
}

func (o V3FunctionMapOutput) ToV3FunctionMapOutput() V3FunctionMapOutput {
	return o
}

func (o V3FunctionMapOutput) ToV3FunctionMapOutputWithContext(ctx context.Context) V3FunctionMapOutput {
	return o
}

func (o V3FunctionMapOutput) MapIndex(k pulumi.StringInput) V3FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V3Function {
		return vs[0].(map[string]*V3Function)[vs[1].(string)]
	}).(V3FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionInput)(nil)).Elem(), &V3Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionArrayInput)(nil)).Elem(), V3FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V3FunctionMapInput)(nil)).Elem(), V3FunctionMap{})
	pulumi.RegisterOutputType(V3FunctionOutput{})
	pulumi.RegisterOutputType(V3FunctionArrayOutput{})
	pulumi.RegisterOutputType(V3FunctionMapOutput{})
}
