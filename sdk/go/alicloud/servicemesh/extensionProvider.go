// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicemesh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Service Mesh Extension Provider resource.
//
// For information about Service Mesh Extension Provider and how to use it, see [What is Extension Provider](https://help.aliyun.com/document_detail/461549.html).
//
// > **NOTE:** Available in v1.191.0+.
//
// ## Import
//
// Service Mesh Extension Provider can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:servicemesh/extensionProvider:ExtensionProvider example <service_mesh_id>:<type>:<extension_provider_name>
//
// ```
type ExtensionProvider struct {
	pulumi.CustomResourceState

	// The config of the Service Mesh Extension Provider. The `config` format is json.
	Config pulumi.StringOutput `pulumi:"config"`
	// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
	ExtensionProviderName pulumi.StringOutput `pulumi:"extensionProviderName"`
	// The ID of the Service Mesh.
	ServiceMeshId pulumi.StringOutput `pulumi:"serviceMeshId"`
	// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewExtensionProvider registers a new resource with the given unique name, arguments, and options.
func NewExtensionProvider(ctx *pulumi.Context,
	name string, args *ExtensionProviderArgs, opts ...pulumi.ResourceOption) (*ExtensionProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ExtensionProviderName == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionProviderName'")
	}
	if args.ServiceMeshId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceMeshId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ExtensionProvider
	err := ctx.RegisterResource("alicloud:servicemesh/extensionProvider:ExtensionProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtensionProvider gets an existing ExtensionProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtensionProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionProviderState, opts ...pulumi.ResourceOption) (*ExtensionProvider, error) {
	var resource ExtensionProvider
	err := ctx.ReadResource("alicloud:servicemesh/extensionProvider:ExtensionProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtensionProvider resources.
type extensionProviderState struct {
	// The config of the Service Mesh Extension Provider. The `config` format is json.
	Config *string `pulumi:"config"`
	// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
	ExtensionProviderName *string `pulumi:"extensionProviderName"`
	// The ID of the Service Mesh.
	ServiceMeshId *string `pulumi:"serviceMeshId"`
	// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
	Type *string `pulumi:"type"`
}

type ExtensionProviderState struct {
	// The config of the Service Mesh Extension Provider. The `config` format is json.
	Config pulumi.StringPtrInput
	// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
	ExtensionProviderName pulumi.StringPtrInput
	// The ID of the Service Mesh.
	ServiceMeshId pulumi.StringPtrInput
	// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
	Type pulumi.StringPtrInput
}

func (ExtensionProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionProviderState)(nil)).Elem()
}

type extensionProviderArgs struct {
	// The config of the Service Mesh Extension Provider. The `config` format is json.
	Config string `pulumi:"config"`
	// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
	ExtensionProviderName string `pulumi:"extensionProviderName"`
	// The ID of the Service Mesh.
	ServiceMeshId string `pulumi:"serviceMeshId"`
	// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ExtensionProvider resource.
type ExtensionProviderArgs struct {
	// The config of the Service Mesh Extension Provider. The `config` format is json.
	Config pulumi.StringInput
	// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
	ExtensionProviderName pulumi.StringInput
	// The ID of the Service Mesh.
	ServiceMeshId pulumi.StringInput
	// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
	Type pulumi.StringInput
}

func (ExtensionProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionProviderArgs)(nil)).Elem()
}

type ExtensionProviderInput interface {
	pulumi.Input

	ToExtensionProviderOutput() ExtensionProviderOutput
	ToExtensionProviderOutputWithContext(ctx context.Context) ExtensionProviderOutput
}

func (*ExtensionProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionProvider)(nil)).Elem()
}

func (i *ExtensionProvider) ToExtensionProviderOutput() ExtensionProviderOutput {
	return i.ToExtensionProviderOutputWithContext(context.Background())
}

func (i *ExtensionProvider) ToExtensionProviderOutputWithContext(ctx context.Context) ExtensionProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionProviderOutput)
}

// ExtensionProviderArrayInput is an input type that accepts ExtensionProviderArray and ExtensionProviderArrayOutput values.
// You can construct a concrete instance of `ExtensionProviderArrayInput` via:
//
//	ExtensionProviderArray{ ExtensionProviderArgs{...} }
type ExtensionProviderArrayInput interface {
	pulumi.Input

	ToExtensionProviderArrayOutput() ExtensionProviderArrayOutput
	ToExtensionProviderArrayOutputWithContext(context.Context) ExtensionProviderArrayOutput
}

type ExtensionProviderArray []ExtensionProviderInput

func (ExtensionProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtensionProvider)(nil)).Elem()
}

func (i ExtensionProviderArray) ToExtensionProviderArrayOutput() ExtensionProviderArrayOutput {
	return i.ToExtensionProviderArrayOutputWithContext(context.Background())
}

func (i ExtensionProviderArray) ToExtensionProviderArrayOutputWithContext(ctx context.Context) ExtensionProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionProviderArrayOutput)
}

// ExtensionProviderMapInput is an input type that accepts ExtensionProviderMap and ExtensionProviderMapOutput values.
// You can construct a concrete instance of `ExtensionProviderMapInput` via:
//
//	ExtensionProviderMap{ "key": ExtensionProviderArgs{...} }
type ExtensionProviderMapInput interface {
	pulumi.Input

	ToExtensionProviderMapOutput() ExtensionProviderMapOutput
	ToExtensionProviderMapOutputWithContext(context.Context) ExtensionProviderMapOutput
}

type ExtensionProviderMap map[string]ExtensionProviderInput

func (ExtensionProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtensionProvider)(nil)).Elem()
}

func (i ExtensionProviderMap) ToExtensionProviderMapOutput() ExtensionProviderMapOutput {
	return i.ToExtensionProviderMapOutputWithContext(context.Background())
}

func (i ExtensionProviderMap) ToExtensionProviderMapOutputWithContext(ctx context.Context) ExtensionProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionProviderMapOutput)
}

type ExtensionProviderOutput struct{ *pulumi.OutputState }

func (ExtensionProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionProvider)(nil)).Elem()
}

func (o ExtensionProviderOutput) ToExtensionProviderOutput() ExtensionProviderOutput {
	return o
}

func (o ExtensionProviderOutput) ToExtensionProviderOutputWithContext(ctx context.Context) ExtensionProviderOutput {
	return o
}

// The config of the Service Mesh Extension Provider. The `config` format is json.
func (o ExtensionProviderOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionProvider) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The name of the Service Mesh Extension Provider. It must be prefixed with `$type-`, for example `httpextauth-xxx`, `grpcextauth-xxx`.
func (o ExtensionProviderOutput) ExtensionProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionProvider) pulumi.StringOutput { return v.ExtensionProviderName }).(pulumi.StringOutput)
}

// The ID of the Service Mesh.
func (o ExtensionProviderOutput) ServiceMeshId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionProvider) pulumi.StringOutput { return v.ServiceMeshId }).(pulumi.StringOutput)
}

// The type of the Service Mesh Extension Provider. Valid values: `httpextauth`, `grpcextauth`.
func (o ExtensionProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionProvider) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ExtensionProviderArrayOutput struct{ *pulumi.OutputState }

func (ExtensionProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtensionProvider)(nil)).Elem()
}

func (o ExtensionProviderArrayOutput) ToExtensionProviderArrayOutput() ExtensionProviderArrayOutput {
	return o
}

func (o ExtensionProviderArrayOutput) ToExtensionProviderArrayOutputWithContext(ctx context.Context) ExtensionProviderArrayOutput {
	return o
}

func (o ExtensionProviderArrayOutput) Index(i pulumi.IntInput) ExtensionProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtensionProvider {
		return vs[0].([]*ExtensionProvider)[vs[1].(int)]
	}).(ExtensionProviderOutput)
}

type ExtensionProviderMapOutput struct{ *pulumi.OutputState }

func (ExtensionProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtensionProvider)(nil)).Elem()
}

func (o ExtensionProviderMapOutput) ToExtensionProviderMapOutput() ExtensionProviderMapOutput {
	return o
}

func (o ExtensionProviderMapOutput) ToExtensionProviderMapOutputWithContext(ctx context.Context) ExtensionProviderMapOutput {
	return o
}

func (o ExtensionProviderMapOutput) MapIndex(k pulumi.StringInput) ExtensionProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtensionProvider {
		return vs[0].(map[string]*ExtensionProvider)[vs[1].(string)]
	}).(ExtensionProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionProviderInput)(nil)).Elem(), &ExtensionProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionProviderArrayInput)(nil)).Elem(), ExtensionProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionProviderMapInput)(nil)).Elem(), ExtensionProviderMap{})
	pulumi.RegisterOutputType(ExtensionProviderOutput{})
	pulumi.RegisterOutputType(ExtensionProviderArrayOutput{})
	pulumi.RegisterOutputType(ExtensionProviderMapOutput{})
}
