// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bastionhost

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Bastion Host Share Key resource.
//
// For information about Bastion Host Host Share Key and how to use it, see [What is Host Share Key](https://www.alibabacloud.com/help/en/bastion-host/latest/createhostsharekey).
//
// > **NOTE:** Available since v1.165.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/bastionhost"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := bastionhost.GetInstances(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("^default-NODELETING$"),
//				CidrBlock: pulumi.StringRef("10.4.0.0/16"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				CidrBlock: pulumi.StringRef("10.4.0.0/24"),
//				VpcId:     pulumi.StringRef(defaultGetNetworks.Ids[0]),
//				ZoneId:    pulumi.StringRef(defaultGetZones.Zones[0].Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var tmp0 float64
//			if len(_default.Ids) > 0 {
//				tmp0 = 0
//			} else {
//				tmp0 = 1
//			}
//			var defaultSecurityGroup []*ecs.SecurityGroup
//			for index := 0; index < tmp0; index++ {
//				key0 := index
//				_ := index
//				__res, err := ecs.NewSecurityGroup(ctx, fmt.Sprintf("default-%v", key0), &ecs.SecurityGroupArgs{
//					VpcId: pulumi.String(defaultGetNetworks.Ids[0]),
//				})
//				if err != nil {
//					return err
//				}
//				defaultSecurityGroup = append(defaultSecurityGroup, __res)
//			}
//			var tmp1 float64
//			if len(_default.Ids) > 0 {
//				tmp1 = 0
//			} else {
//				tmp1 = 1
//			}
//			var defaultInstance []*bastionhost.Instance
//			for index := 0; index < tmp1; index++ {
//				key0 := index
//				_ := index
//				__res, err := bastionhost.NewInstance(ctx, fmt.Sprintf("default-%v", key0), &bastionhost.InstanceArgs{
//					Description: pulumi.String(name),
//					LicenseCode: pulumi.String("bhah_ent_50_asset"),
//					PlanCode:    pulumi.String("cloudbastion"),
//					Storage:     pulumi.String("5"),
//					Bandwidth:   pulumi.String("5"),
//					Period:      pulumi.Int(1),
//					VswitchId:   pulumi.String(defaultGetSwitches.Ids[0]),
//					SecurityGroupIds: pulumi.StringArray{
//						defaultSecurityGroup[0].ID(),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				defaultInstance = append(defaultInstance, __res)
//			}
//			var tmp2 *string
//			if len(_default.Ids) > 0 {
//				tmp2 = _default.Ids[0]
//			} else {
//				tmp2 = defaultInstance[0].ID()
//			}
//			instanceId := tmp2
//			privateKey := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc25oc29SSVVwVXltSG1FVHJXUGxDbkhMa3c3N0JYTm44ZHcvbDg3eG10SUhjd2syCkRybjFDZk5jZkpJV0tSdkFaYkdKMlZTS1RiRDhPTmcyT3JvUHFGUHBLOHJ5QjJRb1NYQVRsaUVHWFhNeW1tRm8KeDBmem12THFscUxpNGZnOExhcTc5UC85aGxLU1djTWhJU0pYVTNHMS9KdEFBUmEyQXc4cXEzSVQvMkZ5NktrdwowMU9MdDdLN2pGUFRPaHhtdmNoSkZ1SVo1YXI0cW5HUlFHQnpCL2hoRHVIWEMwRlhJZ2ozd0NXMDZ4R2V2WjJyCmNCWWwwN1luL2lvZk95MU0wRjZZN0JrMU95N21vYndzM1JsalUyL2FpZlhLMmNOUlk2Qjl5WXNvd1RBZmQ5OTQKQ2YxSlF3TlhsaUZCeTZueEJLQk1YbDhIU1grS1o3L29PUlIwVXdJREFRQUJBb0lCQVFDbU5JSXR5ckhSY3oxdApJMGo0L0FQc295ZE1EL0owRkJMa2FoSUxKWjFaYW1tbmx4ZHh4WHBQUndXRnVXTEw2OTFVbDI5aUoxb1ptazU1Ci9ka2EvZlhnOUN3OUxXWVN2aExLdVlaMEZOTmhxZ3VoUEVBZy9uLytlR1ZCM2ZYZkxaZVZpK0E0L1VHMG15ZFMKVXVlQ2ZRSElZeWh4VkgvWnc3WER5WmNhVFVZVVdMUWlYcVN0Y2JRbnZFOXpwOGc5TWh5UkhBcWYwbEt2UTRqdwphUnNKTnlob3lhZWcvUXlFeHVYNGdBR1lIc1lTSDRFVmtXOHl5WE1aOHpRdk1OSUNiYXhmUkRuSngybUh6a09rCnFHczVXbFp5L3VrQk5jWTQwd2Y0eTY2bEVJaVpKbiswaFhtSTF4Tk5SdHRwMjZnY3ROOXZWbmVicTdLTnpjTDgKeFQrMXZJaEpBb0dCQU9iMVM1YlE4NVRFWDBoZTRmdXc2R3ExbnhRLzJUSU03emZhK2VhZThPQlh2eVNFV3JpdwpPZzM3RFhVUDFNVU1iTEJRenE0STl1dE5YSVZadEFLR0h6ZDR6WmtQeGxORjZPN0FyWnJEWElDNEdKZHdmSEhxCjJZcDkxUDlWekJlOVhkTVdZVGFCNkMzWVdtYzQwM08vYWdyRCtNb2JnL0hqMSt0d2xZR2hjdlV2QW9HQkFNWFMKT2VnWHc5VUF3VEZabFBtZzZKeDI3TzNXUFBHd1E3QzRnYitFZzZkR1pLRnJVR1ZId2VUUG1HaGtwN1BmYU5ESwplaFVoUWFnNm9XOTF4dkE2YldZZ29SQmczUWkxc01MblRWeTExeVN1UEVFSCtMT2s1N3d2akNLSk5XZnM0SjVyCmg1NGw0QXZ6UVhyWWN0UlZkSmYrNjFacGFnTkdZMVBvWVJMTHJMSWRBb0dBTndydzErRzJtNWJ0YW04S2hwU1QKMzVLbmRnajlkM3N6cStrcE03aGZpZWYvcXZGTU9jWHVJQlRjRVRFVHNWNlRyTFdsZkQ2d3NrVitybDFCbEhSbwpqaXpoT3dCU2NOZ3hlbTA3TXE0cXBwYTViYVltVW5QNUlwTjRwdDNJeFVPaFQ4UitxS0h2TnJYZ1hjZGlSYXl4CjFoejhkeFoxckxselpTNHd3M001MVlzQ2dZRUFpUDEwTEUySXg5Q2wrTTdZWTZZU2I0Zkx1MGhKRy9XOGFuemIKSFExZlBrOTVFRytJVlJyRUl2ZS95MHNvOTE4VzdyL0lteWxVbG5ORHFEUWZkK3grSmVNaXBuenRsRUorRGZxdgprQ3c4dUtJUUI5akZXV0l4T0JpVktyVnB6bll6ZG9Gd2dRd3BneDBKazFDZzlIblpMQWpVWUJyUDEwUy9ORFFRClJUdldjK0VDZ1lBeGRIZWxQNG1RdkJaS1oxMlNKbHlLbFVLeW43aHhzSHVkMkphMVNtS3FWeHBERDNlR0w0Y3QKZXA1QTZ5NkF4eGViZkI0aDdYNEZ0QTBBRURPdkZDR0J1QlRvZ3ZBdUNDVUtqK2JIUG1SNG53UVYzcWZ2M3loRAp0TGkwU2FHVElta2wvbUNCUDhZaW9JUys2N0xjby9kbHphUTNGVDlxTnJieFdFWjJlaS9LVlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="
//			if param := cfg.Get("privateKey"); param != "" {
//				privateKey = param
//			}
//			_, err = bastionhost.NewHostShareKey(ctx, "default", &bastionhost.HostShareKeyArgs{
//				HostShareKeyName: pulumi.String(name),
//				InstanceId:       pulumi.String(instanceId),
//				PrivateKey:       pulumi.String(privateKey),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Bastion Host Share Key can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:bastionhost/hostShareKey:HostShareKey example <instance_id>:<host_share_key_id>
// ```
type HostShareKey struct {
	pulumi.CustomResourceState

	// The first ID of the resource.
	HostShareKeyId pulumi.StringOutput `pulumi:"hostShareKeyId"`
	// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
	HostShareKeyName pulumi.StringOutput `pulumi:"hostShareKeyName"`
	// The ID of the Bastion instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The password of the private key. The value is a Base64-encoded string.
	PassPhrase pulumi.StringPtrOutput `pulumi:"passPhrase"`
	// The private key. The value is a Base64-encoded string.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The fingerprint of the private key.
	PrivateKeyFingerPrint pulumi.StringOutput `pulumi:"privateKeyFingerPrint"`
}

// NewHostShareKey registers a new resource with the given unique name, arguments, and options.
func NewHostShareKey(ctx *pulumi.Context,
	name string, args *HostShareKeyArgs, opts ...pulumi.ResourceOption) (*HostShareKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostShareKeyName == nil {
		return nil, errors.New("invalid value for required argument 'HostShareKeyName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PassPhrase != nil {
		args.PassPhrase = pulumi.ToSecret(args.PassPhrase).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passPhrase",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostShareKey
	err := ctx.RegisterResource("alicloud:bastionhost/hostShareKey:HostShareKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostShareKey gets an existing HostShareKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostShareKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostShareKeyState, opts ...pulumi.ResourceOption) (*HostShareKey, error) {
	var resource HostShareKey
	err := ctx.ReadResource("alicloud:bastionhost/hostShareKey:HostShareKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostShareKey resources.
type hostShareKeyState struct {
	// The first ID of the resource.
	HostShareKeyId *string `pulumi:"hostShareKeyId"`
	// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
	HostShareKeyName *string `pulumi:"hostShareKeyName"`
	// The ID of the Bastion instance.
	InstanceId *string `pulumi:"instanceId"`
	// The password of the private key. The value is a Base64-encoded string.
	PassPhrase *string `pulumi:"passPhrase"`
	// The private key. The value is a Base64-encoded string.
	PrivateKey *string `pulumi:"privateKey"`
	// The fingerprint of the private key.
	PrivateKeyFingerPrint *string `pulumi:"privateKeyFingerPrint"`
}

type HostShareKeyState struct {
	// The first ID of the resource.
	HostShareKeyId pulumi.StringPtrInput
	// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
	HostShareKeyName pulumi.StringPtrInput
	// The ID of the Bastion instance.
	InstanceId pulumi.StringPtrInput
	// The password of the private key. The value is a Base64-encoded string.
	PassPhrase pulumi.StringPtrInput
	// The private key. The value is a Base64-encoded string.
	PrivateKey pulumi.StringPtrInput
	// The fingerprint of the private key.
	PrivateKeyFingerPrint pulumi.StringPtrInput
}

func (HostShareKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostShareKeyState)(nil)).Elem()
}

type hostShareKeyArgs struct {
	// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
	HostShareKeyName string `pulumi:"hostShareKeyName"`
	// The ID of the Bastion instance.
	InstanceId string `pulumi:"instanceId"`
	// The password of the private key. The value is a Base64-encoded string.
	PassPhrase *string `pulumi:"passPhrase"`
	// The private key. The value is a Base64-encoded string.
	PrivateKey string `pulumi:"privateKey"`
}

// The set of arguments for constructing a HostShareKey resource.
type HostShareKeyArgs struct {
	// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
	HostShareKeyName pulumi.StringInput
	// The ID of the Bastion instance.
	InstanceId pulumi.StringInput
	// The password of the private key. The value is a Base64-encoded string.
	PassPhrase pulumi.StringPtrInput
	// The private key. The value is a Base64-encoded string.
	PrivateKey pulumi.StringInput
}

func (HostShareKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostShareKeyArgs)(nil)).Elem()
}

type HostShareKeyInput interface {
	pulumi.Input

	ToHostShareKeyOutput() HostShareKeyOutput
	ToHostShareKeyOutputWithContext(ctx context.Context) HostShareKeyOutput
}

func (*HostShareKey) ElementType() reflect.Type {
	return reflect.TypeOf((**HostShareKey)(nil)).Elem()
}

func (i *HostShareKey) ToHostShareKeyOutput() HostShareKeyOutput {
	return i.ToHostShareKeyOutputWithContext(context.Background())
}

func (i *HostShareKey) ToHostShareKeyOutputWithContext(ctx context.Context) HostShareKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostShareKeyOutput)
}

// HostShareKeyArrayInput is an input type that accepts HostShareKeyArray and HostShareKeyArrayOutput values.
// You can construct a concrete instance of `HostShareKeyArrayInput` via:
//
//	HostShareKeyArray{ HostShareKeyArgs{...} }
type HostShareKeyArrayInput interface {
	pulumi.Input

	ToHostShareKeyArrayOutput() HostShareKeyArrayOutput
	ToHostShareKeyArrayOutputWithContext(context.Context) HostShareKeyArrayOutput
}

type HostShareKeyArray []HostShareKeyInput

func (HostShareKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostShareKey)(nil)).Elem()
}

func (i HostShareKeyArray) ToHostShareKeyArrayOutput() HostShareKeyArrayOutput {
	return i.ToHostShareKeyArrayOutputWithContext(context.Background())
}

func (i HostShareKeyArray) ToHostShareKeyArrayOutputWithContext(ctx context.Context) HostShareKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostShareKeyArrayOutput)
}

// HostShareKeyMapInput is an input type that accepts HostShareKeyMap and HostShareKeyMapOutput values.
// You can construct a concrete instance of `HostShareKeyMapInput` via:
//
//	HostShareKeyMap{ "key": HostShareKeyArgs{...} }
type HostShareKeyMapInput interface {
	pulumi.Input

	ToHostShareKeyMapOutput() HostShareKeyMapOutput
	ToHostShareKeyMapOutputWithContext(context.Context) HostShareKeyMapOutput
}

type HostShareKeyMap map[string]HostShareKeyInput

func (HostShareKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostShareKey)(nil)).Elem()
}

func (i HostShareKeyMap) ToHostShareKeyMapOutput() HostShareKeyMapOutput {
	return i.ToHostShareKeyMapOutputWithContext(context.Background())
}

func (i HostShareKeyMap) ToHostShareKeyMapOutputWithContext(ctx context.Context) HostShareKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostShareKeyMapOutput)
}

type HostShareKeyOutput struct{ *pulumi.OutputState }

func (HostShareKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostShareKey)(nil)).Elem()
}

func (o HostShareKeyOutput) ToHostShareKeyOutput() HostShareKeyOutput {
	return o
}

func (o HostShareKeyOutput) ToHostShareKeyOutputWithContext(ctx context.Context) HostShareKeyOutput {
	return o
}

// The first ID of the resource.
func (o HostShareKeyOutput) HostShareKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringOutput { return v.HostShareKeyId }).(pulumi.StringOutput)
}

// The name of the host shared key to be added. The name can be a maximum of 128 characters in length.
func (o HostShareKeyOutput) HostShareKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringOutput { return v.HostShareKeyName }).(pulumi.StringOutput)
}

// The ID of the Bastion instance.
func (o HostShareKeyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The password of the private key. The value is a Base64-encoded string.
func (o HostShareKeyOutput) PassPhrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringPtrOutput { return v.PassPhrase }).(pulumi.StringPtrOutput)
}

// The private key. The value is a Base64-encoded string.
func (o HostShareKeyOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The fingerprint of the private key.
func (o HostShareKeyOutput) PrivateKeyFingerPrint() pulumi.StringOutput {
	return o.ApplyT(func(v *HostShareKey) pulumi.StringOutput { return v.PrivateKeyFingerPrint }).(pulumi.StringOutput)
}

type HostShareKeyArrayOutput struct{ *pulumi.OutputState }

func (HostShareKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostShareKey)(nil)).Elem()
}

func (o HostShareKeyArrayOutput) ToHostShareKeyArrayOutput() HostShareKeyArrayOutput {
	return o
}

func (o HostShareKeyArrayOutput) ToHostShareKeyArrayOutputWithContext(ctx context.Context) HostShareKeyArrayOutput {
	return o
}

func (o HostShareKeyArrayOutput) Index(i pulumi.IntInput) HostShareKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostShareKey {
		return vs[0].([]*HostShareKey)[vs[1].(int)]
	}).(HostShareKeyOutput)
}

type HostShareKeyMapOutput struct{ *pulumi.OutputState }

func (HostShareKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostShareKey)(nil)).Elem()
}

func (o HostShareKeyMapOutput) ToHostShareKeyMapOutput() HostShareKeyMapOutput {
	return o
}

func (o HostShareKeyMapOutput) ToHostShareKeyMapOutputWithContext(ctx context.Context) HostShareKeyMapOutput {
	return o
}

func (o HostShareKeyMapOutput) MapIndex(k pulumi.StringInput) HostShareKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostShareKey {
		return vs[0].(map[string]*HostShareKey)[vs[1].(string)]
	}).(HostShareKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostShareKeyInput)(nil)).Elem(), &HostShareKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostShareKeyArrayInput)(nil)).Elem(), HostShareKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostShareKeyMapInput)(nil)).Elem(), HostShareKeyMap{})
	pulumi.RegisterOutputType(HostShareKeyOutput{})
	pulumi.RegisterOutputType(HostShareKeyArrayOutput{})
	pulumi.RegisterOutputType(HostShareKeyMapOutput{})
}
