// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package adb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ADB Lake Account resource. Account of the DBClusterLakeVesion.
//
// For information about ADB Lake Account and how to use it, see [What is Lake Account](https://www.alibabacloud.com/help/en/analyticdb-for-mysql/developer-reference/api-adb-2021-12-01-createaccount).
// For information about ADB Lake Account Privileges and how to use it, see [What are Lake Account Privileges](https://www.alibabacloud.com/help/en/analyticdb-for-mysql/developer-reference/api-adb-2021-12-01-modifyaccountprivileges/).
//
// > **NOTE:** Available since v1.214.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/adb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vPCID, err := vpc.NewNetwork(ctx, "vPCID", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			vSWITCHID, err := vpc.NewSwitch(ctx, "vSWITCHID", &vpc.SwitchArgs{
//				VpcId:       vPCID.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-k"),
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			createInstance, err := adb.NewDBClusterLakeVersion(ctx, "createInstance", &adb.DBClusterLakeVersionArgs{
//				StorageResource:      pulumi.String("0ACU"),
//				ZoneId:               pulumi.String("cn-hangzhou-k"),
//				VpcId:                vPCID.ID(),
//				VswitchId:            vSWITCHID.ID(),
//				DbClusterDescription: pulumi.String(name),
//				ComputeResource:      pulumi.String("16ACU"),
//				DbClusterVersion:     pulumi.String("5.0"),
//				PaymentType:          pulumi.String("PayAsYouGo"),
//				SecurityIps:          pulumi.String("127.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = adb.NewLakeAccount(ctx, "defaultLakeAccount", &adb.LakeAccountArgs{
//				DbClusterId:     createInstance.ID(),
//				AccountType:     pulumi.String("Super"),
//				AccountName:     pulumi.String("tfnormal"),
//				AccountPassword: pulumi.String("normal@2023"),
//				AccountPrivileges: adb.LakeAccountAccountPrivilegeArray{
//					&adb.LakeAccountAccountPrivilegeArgs{
//						PrivilegeType: pulumi.String("Database"),
//						PrivilegeObject: &adb.LakeAccountAccountPrivilegePrivilegeObjectArgs{
//							Database: pulumi.String("MYSQL"),
//						},
//						Privileges: pulumi.StringArray{
//							pulumi.String("select"),
//							pulumi.String("update"),
//						},
//					},
//					&adb.LakeAccountAccountPrivilegeArgs{
//						PrivilegeType: pulumi.String("Table"),
//						PrivilegeObject: &adb.LakeAccountAccountPrivilegePrivilegeObjectArgs{
//							Database: pulumi.String("INFORMATION_SCHEMA"),
//							Table:    pulumi.String("ENGINES"),
//						},
//						Privileges: pulumi.StringArray{
//							pulumi.String("update"),
//						},
//					},
//					&adb.LakeAccountAccountPrivilegeArgs{
//						PrivilegeType: pulumi.String("Column"),
//						PrivilegeObject: &adb.LakeAccountAccountPrivilegePrivilegeObjectArgs{
//							Table:    pulumi.String("COLUMNS"),
//							Column:   pulumi.String("PRIVILEGES"),
//							Database: pulumi.String("INFORMATION_SCHEMA"),
//						},
//						Privileges: pulumi.StringArray{
//							pulumi.String("update"),
//						},
//					},
//				},
//				AccountDescription: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ADB Lake Account can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:adb/lakeAccount:LakeAccount example <db_cluster_id>:<account_name>
//
// ```
type LakeAccount struct {
	pulumi.CustomResourceState

	// The description of the account.
	AccountDescription pulumi.StringPtrOutput `pulumi:"accountDescription"`
	// The name of the account.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// AccountPassword.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// List of permissions granted. See `accountPrivileges` below.
	AccountPrivileges LakeAccountAccountPrivilegeArrayOutput `pulumi:"accountPrivileges"`
	// The type of the account.
	AccountType pulumi.StringPtrOutput `pulumi:"accountType"`
	// The DBCluster ID.
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewLakeAccount registers a new resource with the given unique name, arguments, and options.
func NewLakeAccount(ctx *pulumi.Context,
	name string, args *LakeAccountArgs, opts ...pulumi.ResourceOption) (*LakeAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LakeAccount
	err := ctx.RegisterResource("alicloud:adb/lakeAccount:LakeAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLakeAccount gets an existing LakeAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLakeAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeAccountState, opts ...pulumi.ResourceOption) (*LakeAccount, error) {
	var resource LakeAccount
	err := ctx.ReadResource("alicloud:adb/lakeAccount:LakeAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LakeAccount resources.
type lakeAccountState struct {
	// The description of the account.
	AccountDescription *string `pulumi:"accountDescription"`
	// The name of the account.
	AccountName *string `pulumi:"accountName"`
	// AccountPassword.
	AccountPassword *string `pulumi:"accountPassword"`
	// List of permissions granted. See `accountPrivileges` below.
	AccountPrivileges []LakeAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The type of the account.
	AccountType *string `pulumi:"accountType"`
	// The DBCluster ID.
	DbClusterId *string `pulumi:"dbClusterId"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type LakeAccountState struct {
	// The description of the account.
	AccountDescription pulumi.StringPtrInput
	// The name of the account.
	AccountName pulumi.StringPtrInput
	// AccountPassword.
	AccountPassword pulumi.StringPtrInput
	// List of permissions granted. See `accountPrivileges` below.
	AccountPrivileges LakeAccountAccountPrivilegeArrayInput
	// The type of the account.
	AccountType pulumi.StringPtrInput
	// The DBCluster ID.
	DbClusterId pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (LakeAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeAccountState)(nil)).Elem()
}

type lakeAccountArgs struct {
	// The description of the account.
	AccountDescription *string `pulumi:"accountDescription"`
	// The name of the account.
	AccountName string `pulumi:"accountName"`
	// AccountPassword.
	AccountPassword string `pulumi:"accountPassword"`
	// List of permissions granted. See `accountPrivileges` below.
	AccountPrivileges []LakeAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The type of the account.
	AccountType *string `pulumi:"accountType"`
	// The DBCluster ID.
	DbClusterId string `pulumi:"dbClusterId"`
}

// The set of arguments for constructing a LakeAccount resource.
type LakeAccountArgs struct {
	// The description of the account.
	AccountDescription pulumi.StringPtrInput
	// The name of the account.
	AccountName pulumi.StringInput
	// AccountPassword.
	AccountPassword pulumi.StringInput
	// List of permissions granted. See `accountPrivileges` below.
	AccountPrivileges LakeAccountAccountPrivilegeArrayInput
	// The type of the account.
	AccountType pulumi.StringPtrInput
	// The DBCluster ID.
	DbClusterId pulumi.StringInput
}

func (LakeAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeAccountArgs)(nil)).Elem()
}

type LakeAccountInput interface {
	pulumi.Input

	ToLakeAccountOutput() LakeAccountOutput
	ToLakeAccountOutputWithContext(ctx context.Context) LakeAccountOutput
}

func (*LakeAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeAccount)(nil)).Elem()
}

func (i *LakeAccount) ToLakeAccountOutput() LakeAccountOutput {
	return i.ToLakeAccountOutputWithContext(context.Background())
}

func (i *LakeAccount) ToLakeAccountOutputWithContext(ctx context.Context) LakeAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeAccountOutput)
}

// LakeAccountArrayInput is an input type that accepts LakeAccountArray and LakeAccountArrayOutput values.
// You can construct a concrete instance of `LakeAccountArrayInput` via:
//
//	LakeAccountArray{ LakeAccountArgs{...} }
type LakeAccountArrayInput interface {
	pulumi.Input

	ToLakeAccountArrayOutput() LakeAccountArrayOutput
	ToLakeAccountArrayOutputWithContext(context.Context) LakeAccountArrayOutput
}

type LakeAccountArray []LakeAccountInput

func (LakeAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeAccount)(nil)).Elem()
}

func (i LakeAccountArray) ToLakeAccountArrayOutput() LakeAccountArrayOutput {
	return i.ToLakeAccountArrayOutputWithContext(context.Background())
}

func (i LakeAccountArray) ToLakeAccountArrayOutputWithContext(ctx context.Context) LakeAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeAccountArrayOutput)
}

// LakeAccountMapInput is an input type that accepts LakeAccountMap and LakeAccountMapOutput values.
// You can construct a concrete instance of `LakeAccountMapInput` via:
//
//	LakeAccountMap{ "key": LakeAccountArgs{...} }
type LakeAccountMapInput interface {
	pulumi.Input

	ToLakeAccountMapOutput() LakeAccountMapOutput
	ToLakeAccountMapOutputWithContext(context.Context) LakeAccountMapOutput
}

type LakeAccountMap map[string]LakeAccountInput

func (LakeAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeAccount)(nil)).Elem()
}

func (i LakeAccountMap) ToLakeAccountMapOutput() LakeAccountMapOutput {
	return i.ToLakeAccountMapOutputWithContext(context.Background())
}

func (i LakeAccountMap) ToLakeAccountMapOutputWithContext(ctx context.Context) LakeAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeAccountMapOutput)
}

type LakeAccountOutput struct{ *pulumi.OutputState }

func (LakeAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeAccount)(nil)).Elem()
}

func (o LakeAccountOutput) ToLakeAccountOutput() LakeAccountOutput {
	return o
}

func (o LakeAccountOutput) ToLakeAccountOutputWithContext(ctx context.Context) LakeAccountOutput {
	return o
}

// The description of the account.
func (o LakeAccountOutput) AccountDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringPtrOutput { return v.AccountDescription }).(pulumi.StringPtrOutput)
}

// The name of the account.
func (o LakeAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// AccountPassword.
func (o LakeAccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// List of permissions granted. See `accountPrivileges` below.
func (o LakeAccountOutput) AccountPrivileges() LakeAccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v *LakeAccount) LakeAccountAccountPrivilegeArrayOutput { return v.AccountPrivileges }).(LakeAccountAccountPrivilegeArrayOutput)
}

// The type of the account.
func (o LakeAccountOutput) AccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringPtrOutput { return v.AccountType }).(pulumi.StringPtrOutput)
}

// The DBCluster ID.
func (o LakeAccountOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// The status of the resource.
func (o LakeAccountOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAccount) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type LakeAccountArrayOutput struct{ *pulumi.OutputState }

func (LakeAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeAccount)(nil)).Elem()
}

func (o LakeAccountArrayOutput) ToLakeAccountArrayOutput() LakeAccountArrayOutput {
	return o
}

func (o LakeAccountArrayOutput) ToLakeAccountArrayOutputWithContext(ctx context.Context) LakeAccountArrayOutput {
	return o
}

func (o LakeAccountArrayOutput) Index(i pulumi.IntInput) LakeAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LakeAccount {
		return vs[0].([]*LakeAccount)[vs[1].(int)]
	}).(LakeAccountOutput)
}

type LakeAccountMapOutput struct{ *pulumi.OutputState }

func (LakeAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeAccount)(nil)).Elem()
}

func (o LakeAccountMapOutput) ToLakeAccountMapOutput() LakeAccountMapOutput {
	return o
}

func (o LakeAccountMapOutput) ToLakeAccountMapOutputWithContext(ctx context.Context) LakeAccountMapOutput {
	return o
}

func (o LakeAccountMapOutput) MapIndex(k pulumi.StringInput) LakeAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LakeAccount {
		return vs[0].(map[string]*LakeAccount)[vs[1].(string)]
	}).(LakeAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeAccountInput)(nil)).Elem(), &LakeAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeAccountArrayInput)(nil)).Elem(), LakeAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeAccountMapInput)(nil)).Elem(), LakeAccountMap{})
	pulumi.RegisterOutputType(LakeAccountOutput{})
	pulumi.RegisterOutputType(LakeAccountArrayOutput{})
	pulumi.RegisterOutputType(LakeAccountMapOutput{})
}
