// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Schedule struct {
	pulumi.CustomResourceState

	Description          pulumi.StringOutput    `pulumi:"description"`
	DesiredCapacity      pulumi.IntPtrOutput    `pulumi:"desiredCapacity"`
	LaunchExpirationTime pulumi.IntPtrOutput    `pulumi:"launchExpirationTime"`
	LaunchTime           pulumi.StringPtrOutput `pulumi:"launchTime"`
	MaxValue             pulumi.IntPtrOutput    `pulumi:"maxValue"`
	MinValue             pulumi.IntPtrOutput    `pulumi:"minValue"`
	RecurrenceEndTime    pulumi.StringOutput    `pulumi:"recurrenceEndTime"`
	RecurrenceType       pulumi.StringOutput    `pulumi:"recurrenceType"`
	RecurrenceValue      pulumi.StringOutput    `pulumi:"recurrenceValue"`
	ScalingGroupId       pulumi.StringOutput    `pulumi:"scalingGroupId"`
	ScheduledAction      pulumi.StringPtrOutput `pulumi:"scheduledAction"`
	ScheduledTaskName    pulumi.StringPtrOutput `pulumi:"scheduledTaskName"`
	TaskEnabled          pulumi.BoolPtrOutput   `pulumi:"taskEnabled"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		args = &ScheduleArgs{}
	}
	var resource Schedule
	err := ctx.RegisterResource("alicloud:ess/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("alicloud:ess/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	Description          *string `pulumi:"description"`
	DesiredCapacity      *int    `pulumi:"desiredCapacity"`
	LaunchExpirationTime *int    `pulumi:"launchExpirationTime"`
	LaunchTime           *string `pulumi:"launchTime"`
	MaxValue             *int    `pulumi:"maxValue"`
	MinValue             *int    `pulumi:"minValue"`
	RecurrenceEndTime    *string `pulumi:"recurrenceEndTime"`
	RecurrenceType       *string `pulumi:"recurrenceType"`
	RecurrenceValue      *string `pulumi:"recurrenceValue"`
	ScalingGroupId       *string `pulumi:"scalingGroupId"`
	ScheduledAction      *string `pulumi:"scheduledAction"`
	ScheduledTaskName    *string `pulumi:"scheduledTaskName"`
	TaskEnabled          *bool   `pulumi:"taskEnabled"`
}

type ScheduleState struct {
	Description          pulumi.StringPtrInput
	DesiredCapacity      pulumi.IntPtrInput
	LaunchExpirationTime pulumi.IntPtrInput
	LaunchTime           pulumi.StringPtrInput
	MaxValue             pulumi.IntPtrInput
	MinValue             pulumi.IntPtrInput
	RecurrenceEndTime    pulumi.StringPtrInput
	RecurrenceType       pulumi.StringPtrInput
	RecurrenceValue      pulumi.StringPtrInput
	ScalingGroupId       pulumi.StringPtrInput
	ScheduledAction      pulumi.StringPtrInput
	ScheduledTaskName    pulumi.StringPtrInput
	TaskEnabled          pulumi.BoolPtrInput
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	Description          *string `pulumi:"description"`
	DesiredCapacity      *int    `pulumi:"desiredCapacity"`
	LaunchExpirationTime *int    `pulumi:"launchExpirationTime"`
	LaunchTime           *string `pulumi:"launchTime"`
	MaxValue             *int    `pulumi:"maxValue"`
	MinValue             *int    `pulumi:"minValue"`
	RecurrenceEndTime    *string `pulumi:"recurrenceEndTime"`
	RecurrenceType       *string `pulumi:"recurrenceType"`
	RecurrenceValue      *string `pulumi:"recurrenceValue"`
	ScalingGroupId       *string `pulumi:"scalingGroupId"`
	ScheduledAction      *string `pulumi:"scheduledAction"`
	ScheduledTaskName    *string `pulumi:"scheduledTaskName"`
	TaskEnabled          *bool   `pulumi:"taskEnabled"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	Description          pulumi.StringPtrInput
	DesiredCapacity      pulumi.IntPtrInput
	LaunchExpirationTime pulumi.IntPtrInput
	LaunchTime           pulumi.StringPtrInput
	MaxValue             pulumi.IntPtrInput
	MinValue             pulumi.IntPtrInput
	RecurrenceEndTime    pulumi.StringPtrInput
	RecurrenceType       pulumi.StringPtrInput
	RecurrenceValue      pulumi.StringPtrInput
	ScalingGroupId       pulumi.StringPtrInput
	ScheduledAction      pulumi.StringPtrInput
	ScheduledTaskName    pulumi.StringPtrInput
	TaskEnabled          pulumi.BoolPtrInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

type ScheduleOutput struct {
	*pulumi.OutputState
}

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleOutput)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ScheduleOutput{})
}
