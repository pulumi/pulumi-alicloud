// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Attaches/Detaches vserver groups to a specified scaling group.
//
// > **NOTE:** The load balancer of which vserver groups belongs to must be in `active` status.
//
// > **NOTE:** If scaling group's network type is `VPC`, the vserver groups must be in the same `VPC`.
//
// > **NOTE:** A scaling group can have at most 5 vserver groups attached by default.
//
// > **NOTE:** Vserver groups and the default group of loadbalancer share the same backend server quota.
//
// > **NOTE:** When attach vserver groups to scaling group, existing ECS instances will be added to vserver groups; Instead, ECS instances will be removed from vserver group when detach.
//
// > **NOTE:** Detach action will be executed before attach action.
//
// > **NOTE:** Vserver group is defined uniquely by `loadbalancerId`, `vserverGroupId`, `port`.
//
// > **NOTE:** Modifing `weight` attribute means detach vserver group first and then, attach with new weight parameter.
//
// > **NOTE:** Resource `ess.ScalingGroupVServerGroups` is available in 1.53.0+.
//
// ## Block vserverGroup
//
// the vserverGroup supports the following:
//
// * `loadbalancerId` - (Required) Loadbalancer server ID of VServer Group.
// * `vserverAttributes` - (Required) A list of VServer Group attributes. See Block vserverAttribute below for details.
//
// ## Block vserverAttribute
//
// * `vserverGroupId` - (Required) ID of VServer Group.
// * `port` - (Required) - The port will be used for VServer Group backend server.
// * `weight` - (Required) The weight of an ECS instance attached to the VServer Group.
//
// ## Import
//
// ESS vserver groups can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ess/scalingGroupVServerGroups:ScalingGroupVServerGroups example abc123456
// ```
type ScalingGroupVServerGroups struct {
	pulumi.CustomResourceState

	// If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// ID of the scaling group.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// A list of vserver groups attached on scaling group. See Block vserverGroup below for details.
	VserverGroups ScalingGroupVServerGroupsVserverGroupArrayOutput `pulumi:"vserverGroups"`
}

// NewScalingGroupVServerGroups registers a new resource with the given unique name, arguments, and options.
func NewScalingGroupVServerGroups(ctx *pulumi.Context,
	name string, args *ScalingGroupVServerGroupsArgs, opts ...pulumi.ResourceOption) (*ScalingGroupVServerGroups, error) {
	if args == nil || args.ScalingGroupId == nil {
		return nil, errors.New("missing required argument 'ScalingGroupId'")
	}
	if args == nil || args.VserverGroups == nil {
		return nil, errors.New("missing required argument 'VserverGroups'")
	}
	if args == nil {
		args = &ScalingGroupVServerGroupsArgs{}
	}
	var resource ScalingGroupVServerGroups
	err := ctx.RegisterResource("alicloud:ess/scalingGroupVServerGroups:ScalingGroupVServerGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScalingGroupVServerGroups gets an existing ScalingGroupVServerGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScalingGroupVServerGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScalingGroupVServerGroupsState, opts ...pulumi.ResourceOption) (*ScalingGroupVServerGroups, error) {
	var resource ScalingGroupVServerGroups
	err := ctx.ReadResource("alicloud:ess/scalingGroupVServerGroups:ScalingGroupVServerGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScalingGroupVServerGroups resources.
type scalingGroupVServerGroupsState struct {
	// If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.
	Force *bool `pulumi:"force"`
	// ID of the scaling group.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// A list of vserver groups attached on scaling group. See Block vserverGroup below for details.
	VserverGroups []ScalingGroupVServerGroupsVserverGroup `pulumi:"vserverGroups"`
}

type ScalingGroupVServerGroupsState struct {
	// If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.
	Force pulumi.BoolPtrInput
	// ID of the scaling group.
	ScalingGroupId pulumi.StringPtrInput
	// A list of vserver groups attached on scaling group. See Block vserverGroup below for details.
	VserverGroups ScalingGroupVServerGroupsVserverGroupArrayInput
}

func (ScalingGroupVServerGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingGroupVServerGroupsState)(nil)).Elem()
}

type scalingGroupVServerGroupsArgs struct {
	// If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.
	Force *bool `pulumi:"force"`
	// ID of the scaling group.
	ScalingGroupId string `pulumi:"scalingGroupId"`
	// A list of vserver groups attached on scaling group. See Block vserverGroup below for details.
	VserverGroups []ScalingGroupVServerGroupsVserverGroup `pulumi:"vserverGroups"`
}

// The set of arguments for constructing a ScalingGroupVServerGroups resource.
type ScalingGroupVServerGroupsArgs struct {
	// If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.
	Force pulumi.BoolPtrInput
	// ID of the scaling group.
	ScalingGroupId pulumi.StringInput
	// A list of vserver groups attached on scaling group. See Block vserverGroup below for details.
	VserverGroups ScalingGroupVServerGroupsVserverGroupArrayInput
}

func (ScalingGroupVServerGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingGroupVServerGroupsArgs)(nil)).Elem()
}

type ScalingGroupVServerGroupsInput interface {
	pulumi.Input

	ToScalingGroupVServerGroupsOutput() ScalingGroupVServerGroupsOutput
	ToScalingGroupVServerGroupsOutputWithContext(ctx context.Context) ScalingGroupVServerGroupsOutput
}

func (ScalingGroupVServerGroups) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingGroupVServerGroups)(nil)).Elem()
}

func (i ScalingGroupVServerGroups) ToScalingGroupVServerGroupsOutput() ScalingGroupVServerGroupsOutput {
	return i.ToScalingGroupVServerGroupsOutputWithContext(context.Background())
}

func (i ScalingGroupVServerGroups) ToScalingGroupVServerGroupsOutputWithContext(ctx context.Context) ScalingGroupVServerGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingGroupVServerGroupsOutput)
}

type ScalingGroupVServerGroupsOutput struct {
	*pulumi.OutputState
}

func (ScalingGroupVServerGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingGroupVServerGroupsOutput)(nil)).Elem()
}

func (o ScalingGroupVServerGroupsOutput) ToScalingGroupVServerGroupsOutput() ScalingGroupVServerGroupsOutput {
	return o
}

func (o ScalingGroupVServerGroupsOutput) ToScalingGroupVServerGroupsOutputWithContext(ctx context.Context) ScalingGroupVServerGroupsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ScalingGroupVServerGroupsOutput{})
}
