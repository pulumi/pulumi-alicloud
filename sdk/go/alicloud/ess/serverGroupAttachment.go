// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attaches/Detaches server group to a specified scaling group.
//
// For information about  server group attachment, see [AttachServerGroups](https://www.alibabacloud.com/help/en/auto-scaling/developer-reference/api-attachservergroups).
//
// > **NOTE:** If scaling group's network type is `VPC`, the server groups must be in the same `VPC`.
//
// > **NOTE:** server group attachment is defined uniquely by `scalingGroupId`, `serverGroupId`,`type`, `port`.
//
// > **NOTE:** Resource `ess.ServerGroupAttachment` don't support modification.
//
// > **NOTE:** Available since v1.231.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/alb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ess"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			myName := fmt.Sprintf("%v-%v", name, defaultInteger.Result)
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableDiskCategory:     pulumi.StringRef("cloud_efficiency"),
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone: pulumi.StringRef(_default.Zones[0].Id),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.Float64Ref(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				NameRegex:  pulumi.StringRef("^ubuntu_18.*64"),
//				MostRecent: pulumi.BoolRef(true),
//				Owners:     pulumi.StringRef("system"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(myName),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      pulumi.String(_default.Zones[0].Id),
//				VswitchName: pulumi.String(myName),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
//				Name:  pulumi.String(myName),
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultScalingGroup, err := ess.NewScalingGroup(ctx, "default", &ess.ScalingGroupArgs{
//				MinSize:          pulumi.Int(0),
//				MaxSize:          pulumi.Int(2),
//				ScalingGroupName: pulumi.String(myName),
//				DefaultCooldown:  pulumi.Int(200),
//				RemovalPolicies: pulumi.StringArray{
//					pulumi.String("OldestInstance"),
//				},
//				VswitchIds: pulumi.StringArray{
//					defaultSwitch.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultScalingConfiguration, err := ess.NewScalingConfiguration(ctx, "default", &ess.ScalingConfigurationArgs{
//				ScalingGroupId:  defaultScalingGroup.ID(),
//				ImageId:         pulumi.String(defaultGetImages.Images[0].Id),
//				InstanceType:    pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].Id),
//				SecurityGroupId: defaultSecurityGroup.ID(),
//				SystemDiskSize:  pulumi.Int(50),
//				ForceDelete:     pulumi.Bool(true),
//				Active:          pulumi.Bool(true),
//				Enable:          pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerGroup, err := alb.NewServerGroup(ctx, "default", &alb.ServerGroupArgs{
//				ServerGroupName: pulumi.String(myName),
//				VpcId:           defaultNetwork.ID(),
//				HealthCheckConfig: &alb.ServerGroupHealthCheckConfigArgs{
//					HealthCheckEnabled: pulumi.Bool(false),
//				},
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.Bool(true),
//					Cookie:               pulumi.String("tf-example"),
//					StickySessionType:    pulumi.String("Server"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ess.NewServerGroupAttachment(ctx, "default", &ess.ServerGroupAttachmentArgs{
//				ScalingGroupId: defaultScalingConfiguration.ScalingGroupId,
//				ServerGroupId:  defaultServerGroup.ID(),
//				Port:           pulumi.Int(9000),
//				Type:           pulumi.String("ALB"),
//				Weight:         pulumi.Int(50),
//				ForceAttach:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServerGroupAttachment struct {
	pulumi.CustomResourceState

	// If instances of scaling group are attached/removed from backend server when
	// server group from scaling group. Default to false.
	ForceAttach pulumi.BoolPtrOutput `pulumi:"forceAttach"`
	// The port will be used for Server Group backend server.
	Port pulumi.IntOutput `pulumi:"port"`
	// ID of the scaling group.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// ID of Server Group.
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// The type of server group N. Valid values: ALB, NLB.
	Type pulumi.StringOutput `pulumi:"type"`
	// The weight of an ECS instance attached to the Server Group.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewServerGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewServerGroupAttachment(ctx *pulumi.Context,
	name string, args *ServerGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*ServerGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Weight == nil {
		return nil, errors.New("invalid value for required argument 'Weight'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroupAttachment
	err := ctx.RegisterResource("alicloud:ess/serverGroupAttachment:ServerGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroupAttachment gets an existing ServerGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupAttachmentState, opts ...pulumi.ResourceOption) (*ServerGroupAttachment, error) {
	var resource ServerGroupAttachment
	err := ctx.ReadResource("alicloud:ess/serverGroupAttachment:ServerGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroupAttachment resources.
type serverGroupAttachmentState struct {
	// If instances of scaling group are attached/removed from backend server when
	// server group from scaling group. Default to false.
	ForceAttach *bool `pulumi:"forceAttach"`
	// The port will be used for Server Group backend server.
	Port *int `pulumi:"port"`
	// ID of the scaling group.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// ID of Server Group.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// The type of server group N. Valid values: ALB, NLB.
	Type *string `pulumi:"type"`
	// The weight of an ECS instance attached to the Server Group.
	Weight *int `pulumi:"weight"`
}

type ServerGroupAttachmentState struct {
	// If instances of scaling group are attached/removed from backend server when
	// server group from scaling group. Default to false.
	ForceAttach pulumi.BoolPtrInput
	// The port will be used for Server Group backend server.
	Port pulumi.IntPtrInput
	// ID of the scaling group.
	ScalingGroupId pulumi.StringPtrInput
	// ID of Server Group.
	ServerGroupId pulumi.StringPtrInput
	// The type of server group N. Valid values: ALB, NLB.
	Type pulumi.StringPtrInput
	// The weight of an ECS instance attached to the Server Group.
	Weight pulumi.IntPtrInput
}

func (ServerGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupAttachmentState)(nil)).Elem()
}

type serverGroupAttachmentArgs struct {
	// If instances of scaling group are attached/removed from backend server when
	// server group from scaling group. Default to false.
	ForceAttach *bool `pulumi:"forceAttach"`
	// The port will be used for Server Group backend server.
	Port int `pulumi:"port"`
	// ID of the scaling group.
	ScalingGroupId string `pulumi:"scalingGroupId"`
	// ID of Server Group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The type of server group N. Valid values: ALB, NLB.
	Type string `pulumi:"type"`
	// The weight of an ECS instance attached to the Server Group.
	Weight int `pulumi:"weight"`
}

// The set of arguments for constructing a ServerGroupAttachment resource.
type ServerGroupAttachmentArgs struct {
	// If instances of scaling group are attached/removed from backend server when
	// server group from scaling group. Default to false.
	ForceAttach pulumi.BoolPtrInput
	// The port will be used for Server Group backend server.
	Port pulumi.IntInput
	// ID of the scaling group.
	ScalingGroupId pulumi.StringInput
	// ID of Server Group.
	ServerGroupId pulumi.StringInput
	// The type of server group N. Valid values: ALB, NLB.
	Type pulumi.StringInput
	// The weight of an ECS instance attached to the Server Group.
	Weight pulumi.IntInput
}

func (ServerGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupAttachmentArgs)(nil)).Elem()
}

type ServerGroupAttachmentInput interface {
	pulumi.Input

	ToServerGroupAttachmentOutput() ServerGroupAttachmentOutput
	ToServerGroupAttachmentOutputWithContext(ctx context.Context) ServerGroupAttachmentOutput
}

func (*ServerGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupAttachment)(nil)).Elem()
}

func (i *ServerGroupAttachment) ToServerGroupAttachmentOutput() ServerGroupAttachmentOutput {
	return i.ToServerGroupAttachmentOutputWithContext(context.Background())
}

func (i *ServerGroupAttachment) ToServerGroupAttachmentOutputWithContext(ctx context.Context) ServerGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupAttachmentOutput)
}

// ServerGroupAttachmentArrayInput is an input type that accepts ServerGroupAttachmentArray and ServerGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `ServerGroupAttachmentArrayInput` via:
//
//	ServerGroupAttachmentArray{ ServerGroupAttachmentArgs{...} }
type ServerGroupAttachmentArrayInput interface {
	pulumi.Input

	ToServerGroupAttachmentArrayOutput() ServerGroupAttachmentArrayOutput
	ToServerGroupAttachmentArrayOutputWithContext(context.Context) ServerGroupAttachmentArrayOutput
}

type ServerGroupAttachmentArray []ServerGroupAttachmentInput

func (ServerGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroupAttachment)(nil)).Elem()
}

func (i ServerGroupAttachmentArray) ToServerGroupAttachmentArrayOutput() ServerGroupAttachmentArrayOutput {
	return i.ToServerGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i ServerGroupAttachmentArray) ToServerGroupAttachmentArrayOutputWithContext(ctx context.Context) ServerGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupAttachmentArrayOutput)
}

// ServerGroupAttachmentMapInput is an input type that accepts ServerGroupAttachmentMap and ServerGroupAttachmentMapOutput values.
// You can construct a concrete instance of `ServerGroupAttachmentMapInput` via:
//
//	ServerGroupAttachmentMap{ "key": ServerGroupAttachmentArgs{...} }
type ServerGroupAttachmentMapInput interface {
	pulumi.Input

	ToServerGroupAttachmentMapOutput() ServerGroupAttachmentMapOutput
	ToServerGroupAttachmentMapOutputWithContext(context.Context) ServerGroupAttachmentMapOutput
}

type ServerGroupAttachmentMap map[string]ServerGroupAttachmentInput

func (ServerGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroupAttachment)(nil)).Elem()
}

func (i ServerGroupAttachmentMap) ToServerGroupAttachmentMapOutput() ServerGroupAttachmentMapOutput {
	return i.ToServerGroupAttachmentMapOutputWithContext(context.Background())
}

func (i ServerGroupAttachmentMap) ToServerGroupAttachmentMapOutputWithContext(ctx context.Context) ServerGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupAttachmentMapOutput)
}

type ServerGroupAttachmentOutput struct{ *pulumi.OutputState }

func (ServerGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupAttachment)(nil)).Elem()
}

func (o ServerGroupAttachmentOutput) ToServerGroupAttachmentOutput() ServerGroupAttachmentOutput {
	return o
}

func (o ServerGroupAttachmentOutput) ToServerGroupAttachmentOutputWithContext(ctx context.Context) ServerGroupAttachmentOutput {
	return o
}

// If instances of scaling group are attached/removed from backend server when
// server group from scaling group. Default to false.
func (o ServerGroupAttachmentOutput) ForceAttach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.BoolPtrOutput { return v.ForceAttach }).(pulumi.BoolPtrOutput)
}

// The port will be used for Server Group backend server.
func (o ServerGroupAttachmentOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// ID of the scaling group.
func (o ServerGroupAttachmentOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

// ID of Server Group.
func (o ServerGroupAttachmentOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The type of server group N. Valid values: ALB, NLB.
func (o ServerGroupAttachmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The weight of an ECS instance attached to the Server Group.
func (o ServerGroupAttachmentOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerGroupAttachment) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type ServerGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroupAttachment)(nil)).Elem()
}

func (o ServerGroupAttachmentArrayOutput) ToServerGroupAttachmentArrayOutput() ServerGroupAttachmentArrayOutput {
	return o
}

func (o ServerGroupAttachmentArrayOutput) ToServerGroupAttachmentArrayOutputWithContext(ctx context.Context) ServerGroupAttachmentArrayOutput {
	return o
}

func (o ServerGroupAttachmentArrayOutput) Index(i pulumi.IntInput) ServerGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroupAttachment {
		return vs[0].([]*ServerGroupAttachment)[vs[1].(int)]
	}).(ServerGroupAttachmentOutput)
}

type ServerGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (ServerGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroupAttachment)(nil)).Elem()
}

func (o ServerGroupAttachmentMapOutput) ToServerGroupAttachmentMapOutput() ServerGroupAttachmentMapOutput {
	return o
}

func (o ServerGroupAttachmentMapOutput) ToServerGroupAttachmentMapOutputWithContext(ctx context.Context) ServerGroupAttachmentMapOutput {
	return o
}

func (o ServerGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) ServerGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroupAttachment {
		return vs[0].(map[string]*ServerGroupAttachment)[vs[1].(string)]
	}).(ServerGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupAttachmentInput)(nil)).Elem(), &ServerGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupAttachmentArrayInput)(nil)).Elem(), ServerGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupAttachmentMapInput)(nil)).Elem(), ServerGroupAttachmentMap{})
	pulumi.RegisterOutputType(ServerGroupAttachmentOutput{})
	pulumi.RegisterOutputType(ServerGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupAttachmentMapOutput{})
}
