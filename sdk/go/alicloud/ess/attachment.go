// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ess

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Attaches several ECS instances to a specified scaling group or remove them from it.
//
// > **NOTE:** ECS instances can be attached or remove only when the scaling group is active and it has no scaling activity in progress.
//
// > **NOTE:** There are two types ECS instances in a scaling group: "AutoCreated" and "Attached". The total number of them can not larger than the scaling group "MaxSize".
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ess"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		name := "essattachmentconfig"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		opt0 := "cloud_efficiency"
// 		opt1 := "VSwitch"
// 		defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// 			AvailableDiskCategory:     &opt0,
// 			AvailableResourceCreation: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt2 := defaultZones.Zones[0].Id
// 		opt3 := 2
// 		opt4 := 4
// 		defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// 			AvailabilityZone: &opt2,
// 			CpuCoreCount:     &opt3,
// 			MemorySize:       &opt4,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt5 := "^ubuntu_18.*64"
// 		opt6 := true
// 		opt7 := "system"
// 		defaultImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// 			NameRegex:  &opt5,
// 			MostRecent: &opt6,
// 			Owners:     &opt7,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
// 			CidrBlock: pulumi.String("172.16.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
// 			VpcId:            defaultNetwork.ID(),
// 			CidrBlock:        pulumi.String("172.16.0.0/24"),
// 			AvailabilityZone: pulumi.String(defaultZones.Zones[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
// 			VpcId: defaultNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ecs.NewSecurityGroupRule(ctx, "defaultSecurityGroupRule", &ecs.SecurityGroupRuleArgs{
// 			Type:            pulumi.String("ingress"),
// 			IpProtocol:      pulumi.String("tcp"),
// 			NicType:         pulumi.String("intranet"),
// 			Policy:          pulumi.String("accept"),
// 			PortRange:       pulumi.String("22/22"),
// 			Priority:        pulumi.Int(1),
// 			SecurityGroupId: defaultSecurityGroup.ID(),
// 			CidrIp:          pulumi.String("172.16.0.0/24"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultScalingGroup, err := ess.NewScalingGroup(ctx, "defaultScalingGroup", &ess.ScalingGroupArgs{
// 			MinSize:          pulumi.Int(0),
// 			MaxSize:          pulumi.Int(2),
// 			ScalingGroupName: pulumi.String(name),
// 			RemovalPolicies: pulumi.StringArray{
// 				pulumi.String("OldestInstance"),
// 				pulumi.String("NewestInstance"),
// 			},
// 			VswitchIds: pulumi.StringArray{
// 				defaultSwitch.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ess.NewScalingConfiguration(ctx, "defaultScalingConfiguration", &ess.ScalingConfigurationArgs{
// 			ScalingGroupId:  defaultScalingGroup.ID(),
// 			ImageId:         pulumi.String(defaultImages.Images[0].Id),
// 			InstanceType:    pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
// 			SecurityGroupId: defaultSecurityGroup.ID(),
// 			ForceDelete:     pulumi.Bool(true),
// 			Active:          pulumi.Bool(true),
// 			Enable:          pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		var defaultInstance []*ecs.Instance
// 		for key0, _ := range 2 {
// 			__res, err := ecs.NewInstance(ctx, fmt.Sprintf("defaultInstance-%v", key0), &ecs.InstanceArgs{
// 				ImageId:      pulumi.String(defaultImages.Images[0].Id),
// 				InstanceType: pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
// 				SecurityGroups: pulumi.StringArray{
// 					defaultSecurityGroup.ID(),
// 				},
// 				InternetChargeType:      pulumi.String("PayByTraffic"),
// 				InternetMaxBandwidthOut: pulumi.Int(10),
// 				InstanceChargeType:      pulumi.String("PostPaid"),
// 				SystemDiskCategory:      pulumi.String("cloud_efficiency"),
// 				VswitchId:               defaultSwitch.ID(),
// 				InstanceName:            pulumi.String(name),
// 			})
// 			if err != nil {
// 				return err
// 			}
// 			defaultInstance = append(defaultInstance, __res)
// 		}
// 		_, err = ess.NewAttachment(ctx, "defaultAttachment", &ess.AttachmentArgs{
// 			ScalingGroupId: defaultScalingGroup.ID(),
// 			InstanceIds: pulumi.StringArray{
// 				defaultInstance[0].ID(),
// 				defaultInstance[1].ID(),
// 			},
// 			Force: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Attachment struct {
	pulumi.CustomResourceState

	// Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// ID of the scaling group of a scaling configuration.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
}

// NewAttachment registers a new resource with the given unique name, arguments, and options.
func NewAttachment(ctx *pulumi.Context,
	name string, args *AttachmentArgs, opts ...pulumi.ResourceOption) (*Attachment, error) {
	if args == nil || args.InstanceIds == nil {
		return nil, errors.New("missing required argument 'InstanceIds'")
	}
	if args == nil || args.ScalingGroupId == nil {
		return nil, errors.New("missing required argument 'ScalingGroupId'")
	}
	if args == nil {
		args = &AttachmentArgs{}
	}
	var resource Attachment
	err := ctx.RegisterResource("alicloud:ess/attachment:Attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachment gets an existing Attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentState, opts ...pulumi.ResourceOption) (*Attachment, error) {
	var resource Attachment
	err := ctx.ReadResource("alicloud:ess/attachment:Attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attachment resources.
type attachmentState struct {
	// Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.
	Force *bool `pulumi:"force"`
	// ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// ID of the scaling group of a scaling configuration.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
}

type AttachmentState struct {
	// Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.
	Force pulumi.BoolPtrInput
	// ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
	InstanceIds pulumi.StringArrayInput
	// ID of the scaling group of a scaling configuration.
	ScalingGroupId pulumi.StringPtrInput
}

func (AttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentState)(nil)).Elem()
}

type attachmentArgs struct {
	// Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.
	Force *bool `pulumi:"force"`
	// ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// ID of the scaling group of a scaling configuration.
	ScalingGroupId string `pulumi:"scalingGroupId"`
}

// The set of arguments for constructing a Attachment resource.
type AttachmentArgs struct {
	// Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.
	Force pulumi.BoolPtrInput
	// ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
	InstanceIds pulumi.StringArrayInput
	// ID of the scaling group of a scaling configuration.
	ScalingGroupId pulumi.StringInput
}

func (AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentArgs)(nil)).Elem()
}
