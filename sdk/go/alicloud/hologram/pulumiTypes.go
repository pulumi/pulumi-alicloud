// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hologram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type InstanceEndpoint struct {
	// Some old instances have both AnyTunnel and SingleTunnel enabled. When switching from AnyTunnel to SingleTunnel, the endpoints of both are retained. Therefore, one more field is required to store the Endpoint.
	AlternativeEndpoints *string `pulumi:"alternativeEndpoints"`
	// Whether to turn on the network.
	Enabled *bool `pulumi:"enabled"`
	// Domain name.
	Endpoint *string `pulumi:"endpoint"`
	// The network type.
	Type *string `pulumi:"type"`
	// VPC primary key.
	VpcId *string `pulumi:"vpcId"`
	// The vpc instance ID.
	VpcInstanceId *string `pulumi:"vpcInstanceId"`
	// The ID of the virtual switch.
	VswitchId *string `pulumi:"vswitchId"`
}

// InstanceEndpointInput is an input type that accepts InstanceEndpointArgs and InstanceEndpointOutput values.
// You can construct a concrete instance of `InstanceEndpointInput` via:
//
//	InstanceEndpointArgs{...}
type InstanceEndpointInput interface {
	pulumi.Input

	ToInstanceEndpointOutput() InstanceEndpointOutput
	ToInstanceEndpointOutputWithContext(context.Context) InstanceEndpointOutput
}

type InstanceEndpointArgs struct {
	// Some old instances have both AnyTunnel and SingleTunnel enabled. When switching from AnyTunnel to SingleTunnel, the endpoints of both are retained. Therefore, one more field is required to store the Endpoint.
	AlternativeEndpoints pulumi.StringPtrInput `pulumi:"alternativeEndpoints"`
	// Whether to turn on the network.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Domain name.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The network type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// VPC primary key.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
	// The vpc instance ID.
	VpcInstanceId pulumi.StringPtrInput `pulumi:"vpcInstanceId"`
	// The ID of the virtual switch.
	VswitchId pulumi.StringPtrInput `pulumi:"vswitchId"`
}

func (InstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return i.ToInstanceEndpointOutputWithContext(context.Background())
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointOutput)
}

// InstanceEndpointArrayInput is an input type that accepts InstanceEndpointArray and InstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointArrayInput` via:
//
//	InstanceEndpointArray{ InstanceEndpointArgs{...} }
type InstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput
	ToInstanceEndpointArrayOutputWithContext(context.Context) InstanceEndpointArrayOutput
}

type InstanceEndpointArray []InstanceEndpointInput

func (InstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return i.ToInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointArrayOutput)
}

type InstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return o
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return o
}

// Some old instances have both AnyTunnel and SingleTunnel enabled. When switching from AnyTunnel to SingleTunnel, the endpoints of both are retained. Therefore, one more field is required to store the Endpoint.
func (o InstanceEndpointOutput) AlternativeEndpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.AlternativeEndpoints }).(pulumi.StringPtrOutput)
}

// Whether to turn on the network.
func (o InstanceEndpointOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Domain name.
func (o InstanceEndpointOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The network type.
func (o InstanceEndpointOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// VPC primary key.
func (o InstanceEndpointOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The vpc instance ID.
func (o InstanceEndpointOutput) VpcInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.VpcInstanceId }).(pulumi.StringPtrOutput)
}

// The ID of the virtual switch.
func (o InstanceEndpointOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.VswitchId }).(pulumi.StringPtrOutput)
}

type InstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpoint {
		return vs[0].([]InstanceEndpoint)[vs[1].(int)]
	}).(InstanceEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointInput)(nil)).Elem(), InstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointArrayInput)(nil)).Elem(), InstanceEndpointArray{})
	pulumi.RegisterOutputType(InstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstanceEndpointArrayOutput{})
}
