// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scdn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SCDN Domain resource.
//
// For information about SCDN Domain and how to use it, see [What is Domain](https://help.aliyun.com/document_detail/63672.html).
//
// > **NOTE:** Available in v1.131.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/scdn"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scdn.NewDomain(ctx, "example", &scdn.DomainArgs{
// 			DomainName: pulumi.String("my-Domain"),
// 			Sources: scdn.DomainSourceArray{
// 				&scdn.DomainSourceArgs{
// 					Content:  pulumi.String("xxx.aliyuncs.com"),
// 					Enabled:  pulumi.String("online"),
// 					Port:     pulumi.Int(80),
// 					Priority: pulumi.String("20"),
// 					Type:     pulumi.String("oss"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SCDN Domain can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:scdn/domain:Domain example <domain_name>
// ```
type Domain struct {
	pulumi.CustomResourceState

	// from the Business Type Drop-down List. Valid values: `download`, `image`, `scdn`, `video`.
	BizName pulumi.StringPtrOutput `pulumi:"bizName"`
	// Certificate Information. See the following `Block certInfos`.
	CertInfos DomainCertInfoArrayOutput `pulumi:"certInfos"`
	// The health check url.
	CheckUrl pulumi.StringPtrOutput `pulumi:"checkUrl"`
	// The name of domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Whether to set certificate forcibly.
	ForceSet pulumi.StringPtrOutput `pulumi:"forceSet"`
	// The resource group id.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// the Origin Server Information. See the following `Block sources`.
	Sources DomainSourceArrayOutput `pulumi:"sources"`
	// The status of the resource. Valid values: `offline`, `online`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	var resource Domain
	err := ctx.RegisterResource("alicloud:scdn/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("alicloud:scdn/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// from the Business Type Drop-down List. Valid values: `download`, `image`, `scdn`, `video`.
	BizName *string `pulumi:"bizName"`
	// Certificate Information. See the following `Block certInfos`.
	CertInfos []DomainCertInfo `pulumi:"certInfos"`
	// The health check url.
	CheckUrl *string `pulumi:"checkUrl"`
	// The name of domain.
	DomainName *string `pulumi:"domainName"`
	// Whether to set certificate forcibly.
	ForceSet *string `pulumi:"forceSet"`
	// The resource group id.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// the Origin Server Information. See the following `Block sources`.
	Sources []DomainSource `pulumi:"sources"`
	// The status of the resource. Valid values: `offline`, `online`.
	Status *string `pulumi:"status"`
}

type DomainState struct {
	// from the Business Type Drop-down List. Valid values: `download`, `image`, `scdn`, `video`.
	BizName pulumi.StringPtrInput
	// Certificate Information. See the following `Block certInfos`.
	CertInfos DomainCertInfoArrayInput
	// The health check url.
	CheckUrl pulumi.StringPtrInput
	// The name of domain.
	DomainName pulumi.StringPtrInput
	// Whether to set certificate forcibly.
	ForceSet pulumi.StringPtrInput
	// The resource group id.
	ResourceGroupId pulumi.StringPtrInput
	// the Origin Server Information. See the following `Block sources`.
	Sources DomainSourceArrayInput
	// The status of the resource. Valid values: `offline`, `online`.
	Status pulumi.StringPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// from the Business Type Drop-down List. Valid values: `download`, `image`, `scdn`, `video`.
	BizName *string `pulumi:"bizName"`
	// Certificate Information. See the following `Block certInfos`.
	CertInfos []DomainCertInfo `pulumi:"certInfos"`
	// The health check url.
	CheckUrl *string `pulumi:"checkUrl"`
	// The name of domain.
	DomainName string `pulumi:"domainName"`
	// Whether to set certificate forcibly.
	ForceSet *string `pulumi:"forceSet"`
	// The resource group id.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// the Origin Server Information. See the following `Block sources`.
	Sources []DomainSource `pulumi:"sources"`
	// The status of the resource. Valid values: `offline`, `online`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// from the Business Type Drop-down List. Valid values: `download`, `image`, `scdn`, `video`.
	BizName pulumi.StringPtrInput
	// Certificate Information. See the following `Block certInfos`.
	CertInfos DomainCertInfoArrayInput
	// The health check url.
	CheckUrl pulumi.StringPtrInput
	// The name of domain.
	DomainName pulumi.StringInput
	// Whether to set certificate forcibly.
	ForceSet pulumi.StringPtrInput
	// The resource group id.
	ResourceGroupId pulumi.StringPtrInput
	// the Origin Server Information. See the following `Block sources`.
	Sources DomainSourceArrayInput
	// The status of the resource. Valid values: `offline`, `online`.
	Status pulumi.StringPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//          DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//          DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
