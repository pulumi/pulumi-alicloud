// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ddos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Ddos Bgp Ip resource.
//
// For information about Ddos Bgp Ip and how to use it, see [What is Ip](https://www.alibabacloud.com/help/en/ddos-protection/latest/addip).
//
// > **NOTE:** Available in v1.180.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ddos"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultResourceGroups, err := resourcemanager.GetResourceGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultEipAddress, err := ecs.NewEipAddress(ctx, "defaultEipAddress", &ecs.EipAddressArgs{
//				AddressName: pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultDdosBgpInstances, err := ddos.GetDdosBgpInstances(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ddos.NewBgpIp(ctx, "defaultBgpIp", &ddos.BgpIpArgs{
//				InstanceId:      *pulumi.String(defaultDdosBgpInstances.Ids[0]),
//				Ip:              defaultEipAddress.IpAddress,
//				ResourceGroupId: *pulumi.String(defaultResourceGroups.Groups[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Ddos Bgp Ip can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:ddos/bgpIp:BgpIp example <instance_id>:<ip>
//
// ```
type BgpIp struct {
	pulumi.CustomResourceState

	// The ID of the native protection enterprise instance to be operated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrOutput `pulumi:"resourceGroupId"`
	// The current state of the IP address. Valid Value: `normal`, `holeBegin`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBgpIp registers a new resource with the given unique name, arguments, and options.
func NewBgpIp(ctx *pulumi.Context,
	name string, args *BgpIpArgs, opts ...pulumi.ResourceOption) (*BgpIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	var resource BgpIp
	err := ctx.RegisterResource("alicloud:ddos/bgpIp:BgpIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpIp gets an existing BgpIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpIpState, opts ...pulumi.ResourceOption) (*BgpIp, error) {
	var resource BgpIp
	err := ctx.ReadResource("alicloud:ddos/bgpIp:BgpIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpIp resources.
type bgpIpState struct {
	// The ID of the native protection enterprise instance to be operated.
	InstanceId *string `pulumi:"instanceId"`
	// The IP address.
	Ip *string `pulumi:"ip"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The current state of the IP address. Valid Value: `normal`, `holeBegin`.
	Status *string `pulumi:"status"`
}

type BgpIpState struct {
	// The ID of the native protection enterprise instance to be operated.
	InstanceId pulumi.StringPtrInput
	// The IP address.
	Ip pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The current state of the IP address. Valid Value: `normal`, `holeBegin`.
	Status pulumi.StringPtrInput
}

func (BgpIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpIpState)(nil)).Elem()
}

type bgpIpArgs struct {
	// The ID of the native protection enterprise instance to be operated.
	InstanceId string `pulumi:"instanceId"`
	// The IP address.
	Ip string `pulumi:"ip"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
}

// The set of arguments for constructing a BgpIp resource.
type BgpIpArgs struct {
	// The ID of the native protection enterprise instance to be operated.
	InstanceId pulumi.StringInput
	// The IP address.
	Ip pulumi.StringInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
}

func (BgpIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpIpArgs)(nil)).Elem()
}

type BgpIpInput interface {
	pulumi.Input

	ToBgpIpOutput() BgpIpOutput
	ToBgpIpOutputWithContext(ctx context.Context) BgpIpOutput
}

func (*BgpIp) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpIp)(nil)).Elem()
}

func (i *BgpIp) ToBgpIpOutput() BgpIpOutput {
	return i.ToBgpIpOutputWithContext(context.Background())
}

func (i *BgpIp) ToBgpIpOutputWithContext(ctx context.Context) BgpIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpOutput)
}

// BgpIpArrayInput is an input type that accepts BgpIpArray and BgpIpArrayOutput values.
// You can construct a concrete instance of `BgpIpArrayInput` via:
//
//	BgpIpArray{ BgpIpArgs{...} }
type BgpIpArrayInput interface {
	pulumi.Input

	ToBgpIpArrayOutput() BgpIpArrayOutput
	ToBgpIpArrayOutputWithContext(context.Context) BgpIpArrayOutput
}

type BgpIpArray []BgpIpInput

func (BgpIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpIp)(nil)).Elem()
}

func (i BgpIpArray) ToBgpIpArrayOutput() BgpIpArrayOutput {
	return i.ToBgpIpArrayOutputWithContext(context.Background())
}

func (i BgpIpArray) ToBgpIpArrayOutputWithContext(ctx context.Context) BgpIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpArrayOutput)
}

// BgpIpMapInput is an input type that accepts BgpIpMap and BgpIpMapOutput values.
// You can construct a concrete instance of `BgpIpMapInput` via:
//
//	BgpIpMap{ "key": BgpIpArgs{...} }
type BgpIpMapInput interface {
	pulumi.Input

	ToBgpIpMapOutput() BgpIpMapOutput
	ToBgpIpMapOutputWithContext(context.Context) BgpIpMapOutput
}

type BgpIpMap map[string]BgpIpInput

func (BgpIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpIp)(nil)).Elem()
}

func (i BgpIpMap) ToBgpIpMapOutput() BgpIpMapOutput {
	return i.ToBgpIpMapOutputWithContext(context.Background())
}

func (i BgpIpMap) ToBgpIpMapOutputWithContext(ctx context.Context) BgpIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpMapOutput)
}

type BgpIpOutput struct{ *pulumi.OutputState }

func (BgpIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpIp)(nil)).Elem()
}

func (o BgpIpOutput) ToBgpIpOutput() BgpIpOutput {
	return o
}

func (o BgpIpOutput) ToBgpIpOutputWithContext(ctx context.Context) BgpIpOutput {
	return o
}

// The ID of the native protection enterprise instance to be operated.
func (o BgpIpOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpIp) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP address.
func (o BgpIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpIp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o BgpIpOutput) ResourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpIp) pulumi.StringPtrOutput { return v.ResourceGroupId }).(pulumi.StringPtrOutput)
}

// The current state of the IP address. Valid Value: `normal`, `holeBegin`.
func (o BgpIpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpIp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BgpIpArrayOutput struct{ *pulumi.OutputState }

func (BgpIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpIp)(nil)).Elem()
}

func (o BgpIpArrayOutput) ToBgpIpArrayOutput() BgpIpArrayOutput {
	return o
}

func (o BgpIpArrayOutput) ToBgpIpArrayOutputWithContext(ctx context.Context) BgpIpArrayOutput {
	return o
}

func (o BgpIpArrayOutput) Index(i pulumi.IntInput) BgpIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BgpIp {
		return vs[0].([]*BgpIp)[vs[1].(int)]
	}).(BgpIpOutput)
}

type BgpIpMapOutput struct{ *pulumi.OutputState }

func (BgpIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpIp)(nil)).Elem()
}

func (o BgpIpMapOutput) ToBgpIpMapOutput() BgpIpMapOutput {
	return o
}

func (o BgpIpMapOutput) ToBgpIpMapOutputWithContext(ctx context.Context) BgpIpMapOutput {
	return o
}

func (o BgpIpMapOutput) MapIndex(k pulumi.StringInput) BgpIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BgpIp {
		return vs[0].(map[string]*BgpIp)[vs[1].(string)]
	}).(BgpIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpInput)(nil)).Elem(), &BgpIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpArrayInput)(nil)).Elem(), BgpIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpMapInput)(nil)).Elem(), BgpIpMap{})
	pulumi.RegisterOutputType(BgpIpOutput{})
	pulumi.RegisterOutputType(BgpIpArrayOutput{})
	pulumi.RegisterOutputType(BgpIpMapOutput{})
}
