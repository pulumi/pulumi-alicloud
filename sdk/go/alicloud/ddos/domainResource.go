// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ddos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Ddos Coo Domain Resource resource.
//
// For information about Ddos Coo Domain Resource and how to use it, see [What is Domain Resource](https://www.alibabacloud.com/help/en/anti-ddos/anti-ddos-pro-and-premium/developer-reference/api-ddoscoo-2020-01-01-createdomainresource).
//
// > **NOTE:** Available since v1.123.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ddos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			domain := "tf-example.alibaba.com"
//			if param := cfg.Get("domain"); param != "" {
//				domain = param
//			}
//			_default, err := ddos.NewDdosCooInstance(ctx, "default", &ddos.DdosCooInstanceArgs{
//				Name:             pulumi.String(name),
//				Bandwidth:        pulumi.String("30"),
//				BaseBandwidth:    pulumi.String("30"),
//				ServiceBandwidth: pulumi.String("100"),
//				PortCount:        pulumi.String("50"),
//				DomainCount:      pulumi.String("50"),
//				Period:           pulumi.Int(1),
//				ProductType:      pulumi.String("ddoscoo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ddos.NewDomainResource(ctx, "default", &ddos.DomainResourceArgs{
//				Domain: pulumi.String(domain),
//				RsType: pulumi.Int(0),
//				InstanceIds: pulumi.StringArray{
//					_default.ID(),
//				},
//				RealServers: pulumi.StringArray{
//					pulumi.String("177.167.32.11"),
//				},
//				HttpsExt: pulumi.String("{\"Http2\":1,\"Http2https\":0,\"Https2http\":0}"),
//				ProxyTypes: ddos.DomainResourceProxyTypeArray{
//					&ddos.DomainResourceProxyTypeArgs{
//						ProxyPorts: pulumi.IntArray{
//							pulumi.Int(443),
//						},
//						ProxyType: pulumi.String("https"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Ddos Coo Domain Resource can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ddos/domainResource:DomainResource example <id>
// ```
type DomainResource struct {
	pulumi.CustomResourceState

	// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	Cert pulumi.StringPtrOutput `pulumi:"cert"`
	// The name of the certificate.
	//
	// > **NOTE:**   You can specify the name of the certificate that you want to associate.
	CertIdentifier pulumi.StringPtrOutput `pulumi:"certIdentifier"`
	// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	CertName pulumi.StringOutput `pulumi:"certName"`
	// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
	CertRegion pulumi.StringPtrOutput `pulumi:"certRegion"`
	// The CNAME address to query.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// The domain name for which you want to configure the Static Page Caching policy.
	//
	// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
	//
	// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
	//
	// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
	//
	// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
	//
	// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
	//
	// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
	//
	// After you turn on the switch, HTTP/2 is used.
	HttpsExt pulumi.StringOutput `pulumi:"httpsExt"`
	// InstanceIds
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
	//
	// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Specifies whether to enable the OCSP feature. Valid values:
	OcspEnabled pulumi.BoolPtrOutput `pulumi:"ocspEnabled"`
	// Protocol type and port number information. See `proxyTypes` below.
	ProxyTypes DomainResourceProxyTypeArrayOutput `pulumi:"proxyTypes"`
	// Server address information of the source station.
	RealServers pulumi.StringArrayOutput `pulumi:"realServers"`
	// The address type of the origin server. Valid values:
	RsType pulumi.IntOutput `pulumi:"rsType"`
}

// NewDomainResource registers a new resource with the given unique name, arguments, and options.
func NewDomainResource(ctx *pulumi.Context,
	name string, args *DomainResourceArgs, opts ...pulumi.ResourceOption) (*DomainResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.ProxyTypes == nil {
		return nil, errors.New("invalid value for required argument 'ProxyTypes'")
	}
	if args.RealServers == nil {
		return nil, errors.New("invalid value for required argument 'RealServers'")
	}
	if args.RsType == nil {
		return nil, errors.New("invalid value for required argument 'RsType'")
	}
	if args.Cert != nil {
		args.Cert = pulumi.ToSecret(args.Cert).(pulumi.StringPtrInput)
	}
	if args.CertRegion != nil {
		args.CertRegion = pulumi.ToSecret(args.CertRegion).(pulumi.StringPtrInput)
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"cert",
		"certRegion",
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainResource
	err := ctx.RegisterResource("alicloud:ddos/domainResource:DomainResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainResource gets an existing DomainResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainResourceState, opts ...pulumi.ResourceOption) (*DomainResource, error) {
	var resource DomainResource
	err := ctx.ReadResource("alicloud:ddos/domainResource:DomainResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainResource resources.
type domainResourceState struct {
	// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	Cert *string `pulumi:"cert"`
	// The name of the certificate.
	//
	// > **NOTE:**   You can specify the name of the certificate that you want to associate.
	CertIdentifier *string `pulumi:"certIdentifier"`
	// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	CertName *string `pulumi:"certName"`
	// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
	CertRegion *string `pulumi:"certRegion"`
	// The CNAME address to query.
	Cname *string `pulumi:"cname"`
	// The domain name for which you want to configure the Static Page Caching policy.
	//
	// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
	Domain *string `pulumi:"domain"`
	// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
	//
	// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
	//
	// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
	//
	// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
	//
	// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
	//
	// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
	//
	// After you turn on the switch, HTTP/2 is used.
	HttpsExt *string `pulumi:"httpsExt"`
	// InstanceIds
	InstanceIds []string `pulumi:"instanceIds"`
	// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
	//
	// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
	Key *string `pulumi:"key"`
	// Specifies whether to enable the OCSP feature. Valid values:
	OcspEnabled *bool `pulumi:"ocspEnabled"`
	// Protocol type and port number information. See `proxyTypes` below.
	ProxyTypes []DomainResourceProxyType `pulumi:"proxyTypes"`
	// Server address information of the source station.
	RealServers []string `pulumi:"realServers"`
	// The address type of the origin server. Valid values:
	RsType *int `pulumi:"rsType"`
}

type DomainResourceState struct {
	// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	Cert pulumi.StringPtrInput
	// The name of the certificate.
	//
	// > **NOTE:**   You can specify the name of the certificate that you want to associate.
	CertIdentifier pulumi.StringPtrInput
	// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	CertName pulumi.StringPtrInput
	// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
	CertRegion pulumi.StringPtrInput
	// The CNAME address to query.
	Cname pulumi.StringPtrInput
	// The domain name for which you want to configure the Static Page Caching policy.
	//
	// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
	Domain pulumi.StringPtrInput
	// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
	//
	// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
	//
	// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
	//
	// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
	//
	// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
	//
	// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
	//
	// After you turn on the switch, HTTP/2 is used.
	HttpsExt pulumi.StringPtrInput
	// InstanceIds
	InstanceIds pulumi.StringArrayInput
	// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
	//
	// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
	Key pulumi.StringPtrInput
	// Specifies whether to enable the OCSP feature. Valid values:
	OcspEnabled pulumi.BoolPtrInput
	// Protocol type and port number information. See `proxyTypes` below.
	ProxyTypes DomainResourceProxyTypeArrayInput
	// Server address information of the source station.
	RealServers pulumi.StringArrayInput
	// The address type of the origin server. Valid values:
	RsType pulumi.IntPtrInput
}

func (DomainResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainResourceState)(nil)).Elem()
}

type domainResourceArgs struct {
	// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	Cert *string `pulumi:"cert"`
	// The name of the certificate.
	//
	// > **NOTE:**   You can specify the name of the certificate that you want to associate.
	CertIdentifier *string `pulumi:"certIdentifier"`
	// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	CertName *string `pulumi:"certName"`
	// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
	CertRegion *string `pulumi:"certRegion"`
	// The domain name for which you want to configure the Static Page Caching policy.
	//
	// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
	Domain string `pulumi:"domain"`
	// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
	//
	// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
	//
	// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
	//
	// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
	//
	// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
	//
	// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
	//
	// After you turn on the switch, HTTP/2 is used.
	HttpsExt *string `pulumi:"httpsExt"`
	// InstanceIds
	InstanceIds []string `pulumi:"instanceIds"`
	// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
	//
	// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
	Key *string `pulumi:"key"`
	// Specifies whether to enable the OCSP feature. Valid values:
	OcspEnabled *bool `pulumi:"ocspEnabled"`
	// Protocol type and port number information. See `proxyTypes` below.
	ProxyTypes []DomainResourceProxyType `pulumi:"proxyTypes"`
	// Server address information of the source station.
	RealServers []string `pulumi:"realServers"`
	// The address type of the origin server. Valid values:
	RsType int `pulumi:"rsType"`
}

// The set of arguments for constructing a DomainResource resource.
type DomainResourceArgs struct {
	// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	Cert pulumi.StringPtrInput
	// The name of the certificate.
	//
	// > **NOTE:**   You can specify the name of the certificate that you want to associate.
	CertIdentifier pulumi.StringPtrInput
	// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
	//
	// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
	CertName pulumi.StringPtrInput
	// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
	CertRegion pulumi.StringPtrInput
	// The domain name for which you want to configure the Static Page Caching policy.
	//
	// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
	Domain pulumi.StringInput
	// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
	//
	// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
	//
	// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
	//
	// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
	//
	// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
	//
	// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
	//
	// After you turn on the switch, HTTP/2 is used.
	HttpsExt pulumi.StringPtrInput
	// InstanceIds
	InstanceIds pulumi.StringArrayInput
	// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
	//
	// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
	Key pulumi.StringPtrInput
	// Specifies whether to enable the OCSP feature. Valid values:
	OcspEnabled pulumi.BoolPtrInput
	// Protocol type and port number information. See `proxyTypes` below.
	ProxyTypes DomainResourceProxyTypeArrayInput
	// Server address information of the source station.
	RealServers pulumi.StringArrayInput
	// The address type of the origin server. Valid values:
	RsType pulumi.IntInput
}

func (DomainResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainResourceArgs)(nil)).Elem()
}

type DomainResourceInput interface {
	pulumi.Input

	ToDomainResourceOutput() DomainResourceOutput
	ToDomainResourceOutputWithContext(ctx context.Context) DomainResourceOutput
}

func (*DomainResource) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainResource)(nil)).Elem()
}

func (i *DomainResource) ToDomainResourceOutput() DomainResourceOutput {
	return i.ToDomainResourceOutputWithContext(context.Background())
}

func (i *DomainResource) ToDomainResourceOutputWithContext(ctx context.Context) DomainResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainResourceOutput)
}

// DomainResourceArrayInput is an input type that accepts DomainResourceArray and DomainResourceArrayOutput values.
// You can construct a concrete instance of `DomainResourceArrayInput` via:
//
//	DomainResourceArray{ DomainResourceArgs{...} }
type DomainResourceArrayInput interface {
	pulumi.Input

	ToDomainResourceArrayOutput() DomainResourceArrayOutput
	ToDomainResourceArrayOutputWithContext(context.Context) DomainResourceArrayOutput
}

type DomainResourceArray []DomainResourceInput

func (DomainResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainResource)(nil)).Elem()
}

func (i DomainResourceArray) ToDomainResourceArrayOutput() DomainResourceArrayOutput {
	return i.ToDomainResourceArrayOutputWithContext(context.Background())
}

func (i DomainResourceArray) ToDomainResourceArrayOutputWithContext(ctx context.Context) DomainResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainResourceArrayOutput)
}

// DomainResourceMapInput is an input type that accepts DomainResourceMap and DomainResourceMapOutput values.
// You can construct a concrete instance of `DomainResourceMapInput` via:
//
//	DomainResourceMap{ "key": DomainResourceArgs{...} }
type DomainResourceMapInput interface {
	pulumi.Input

	ToDomainResourceMapOutput() DomainResourceMapOutput
	ToDomainResourceMapOutputWithContext(context.Context) DomainResourceMapOutput
}

type DomainResourceMap map[string]DomainResourceInput

func (DomainResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainResource)(nil)).Elem()
}

func (i DomainResourceMap) ToDomainResourceMapOutput() DomainResourceMapOutput {
	return i.ToDomainResourceMapOutputWithContext(context.Background())
}

func (i DomainResourceMap) ToDomainResourceMapOutputWithContext(ctx context.Context) DomainResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainResourceMapOutput)
}

type DomainResourceOutput struct{ *pulumi.OutputState }

func (DomainResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainResource)(nil)).Elem()
}

func (o DomainResourceOutput) ToDomainResourceOutput() DomainResourceOutput {
	return o
}

func (o DomainResourceOutput) ToDomainResourceOutputWithContext(ctx context.Context) DomainResourceOutput {
	return o
}

// The private key of the certificate that you want to associate. This parameter must be used together with the CertName and Cert parameters.
//
// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
func (o DomainResourceOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringPtrOutput { return v.Cert }).(pulumi.StringPtrOutput)
}

// The name of the certificate.
//
// > **NOTE:**   You can specify the name of the certificate that you want to associate.
func (o DomainResourceOutput) CertIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringPtrOutput { return v.CertIdentifier }).(pulumi.StringPtrOutput)
}

// The public key of the certificate that you want to associate. This parameter must be used together with the CertName and Key parameters.
//
// > **NOTE:**   If you specify a value for the CertName, Cert, and Key parameters, you do not need to specify a value for the CertId parameter.
func (o DomainResourceOutput) CertName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringOutput { return v.CertName }).(pulumi.StringOutput)
}

// The region of the certificate. `cn-hangzhou` and `ap-southeast-1` are supported. The default value is `cn-hangzhou`.
func (o DomainResourceOutput) CertRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringPtrOutput { return v.CertRegion }).(pulumi.StringPtrOutput)
}

// The CNAME address to query.
func (o DomainResourceOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// The domain name for which you want to configure the Static Page Caching policy.
//
// > **NOTE:**  You can call the [DescribeDomains](https://www.alibabacloud.com/help/en/doc-detail/91724.html) operation to query all the domain names that are added to Anti-DDoS Pro or Anti-DDoS Premium.
func (o DomainResourceOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The advanced HTTPS settings. This parameter takes effect only when the value of the `ProxyType` parameter includes `https`. The value is a string that consists of a JSON struct. The JSON struct contains the following fields:
//
// - `Http2https`: specifies whether to turn on Enforce HTTPS Routing. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enforce HTTPS Routing is turned off. The value 1 indicates that Enforce HTTPS Routing is turned on. The default value is 0.
//
// If your website supports both HTTP and HTTPS, this feature meets your business requirements. If you enable this feature, all HTTP requests to access the website are redirected to HTTPS requests on the standard port 443.
//
// - `Https2http`: specifies whether to turn on Enable HTTP. This field is optional and must be an integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP is turned off. The value 1 indicates that Enable HTTP is turned on. The default value is 0.
//
// If your website does not support HTTPS, this feature meets your business requirements If this feature is enabled, all HTTPS requests are redirected to HTTP requests and forwarded to origin servers. This feature can redirect WebSockets requests to WebSocket requests. Requests are redirected over the standard port 80.
//
// - `Http2`: specifies whether to turn on Enable HTTP/2. This field is optional. Data type: integer. Valid values: `0` and `1`. The value 0 indicates that Enable HTTP/2 is turned off. The value 1 indicates that Enable HTTP/2 is turned on. The default value is 0.
//
// After you turn on the switch, HTTP/2 is used.
func (o DomainResourceOutput) HttpsExt() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringOutput { return v.HttpsExt }).(pulumi.StringOutput)
}

// InstanceIds
func (o DomainResourceOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The globally unique ID of the certificate. The value is in the "Certificate ID-cn-hangzhou" format. For example, if the ID of the certificate is 123, the value of the CertIdentifier parameter is 123-cn-hangzhou.
//
// > **NOTE:**   You can specify only one of this parameter and the CertId parameter.
func (o DomainResourceOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the OCSP feature. Valid values:
func (o DomainResourceOutput) OcspEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.BoolPtrOutput { return v.OcspEnabled }).(pulumi.BoolPtrOutput)
}

// Protocol type and port number information. See `proxyTypes` below.
func (o DomainResourceOutput) ProxyTypes() DomainResourceProxyTypeArrayOutput {
	return o.ApplyT(func(v *DomainResource) DomainResourceProxyTypeArrayOutput { return v.ProxyTypes }).(DomainResourceProxyTypeArrayOutput)
}

// Server address information of the source station.
func (o DomainResourceOutput) RealServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.StringArrayOutput { return v.RealServers }).(pulumi.StringArrayOutput)
}

// The address type of the origin server. Valid values:
func (o DomainResourceOutput) RsType() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainResource) pulumi.IntOutput { return v.RsType }).(pulumi.IntOutput)
}

type DomainResourceArrayOutput struct{ *pulumi.OutputState }

func (DomainResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainResource)(nil)).Elem()
}

func (o DomainResourceArrayOutput) ToDomainResourceArrayOutput() DomainResourceArrayOutput {
	return o
}

func (o DomainResourceArrayOutput) ToDomainResourceArrayOutputWithContext(ctx context.Context) DomainResourceArrayOutput {
	return o
}

func (o DomainResourceArrayOutput) Index(i pulumi.IntInput) DomainResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainResource {
		return vs[0].([]*DomainResource)[vs[1].(int)]
	}).(DomainResourceOutput)
}

type DomainResourceMapOutput struct{ *pulumi.OutputState }

func (DomainResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainResource)(nil)).Elem()
}

func (o DomainResourceMapOutput) ToDomainResourceMapOutput() DomainResourceMapOutput {
	return o
}

func (o DomainResourceMapOutput) ToDomainResourceMapOutputWithContext(ctx context.Context) DomainResourceMapOutput {
	return o
}

func (o DomainResourceMapOutput) MapIndex(k pulumi.StringInput) DomainResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainResource {
		return vs[0].(map[string]*DomainResource)[vs[1].(string)]
	}).(DomainResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainResourceInput)(nil)).Elem(), &DomainResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainResourceArrayInput)(nil)).Elem(), DomainResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainResourceMapInput)(nil)).Elem(), DomainResourceMap{})
	pulumi.RegisterOutputType(DomainResourceOutput{})
	pulumi.RegisterOutputType(DomainResourceArrayOutput{})
	pulumi.RegisterOutputType(DomainResourceMapOutput{})
}
