// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterApplicationConfig struct {
	// The application name of EMR cluster which has installed.
	ApplicationName string `pulumi:"applicationName"`
	// The configuration description of application installed.
	ConfigDescription *string `pulumi:"configDescription"`
	// The configuration file name of application installed.
	ConfigFileName string `pulumi:"configFileName"`
	// The configuration item key of application installed.
	ConfigItemKey string `pulumi:"configItemKey"`
	// The configuration item value of application installed.
	ConfigItemValue string `pulumi:"configItemValue"`
	// The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
	ConfigScope *string `pulumi:"configScope"`
	// The configuration effected which node group id of emr cluster.
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName *string `pulumi:"nodeGroupName"`
}

// ClusterApplicationConfigInput is an input type that accepts ClusterApplicationConfigArgs and ClusterApplicationConfigOutput values.
// You can construct a concrete instance of `ClusterApplicationConfigInput` via:
//
//	ClusterApplicationConfigArgs{...}
type ClusterApplicationConfigInput interface {
	pulumi.Input

	ToClusterApplicationConfigOutput() ClusterApplicationConfigOutput
	ToClusterApplicationConfigOutputWithContext(context.Context) ClusterApplicationConfigOutput
}

type ClusterApplicationConfigArgs struct {
	// The application name of EMR cluster which has installed.
	ApplicationName pulumi.StringInput `pulumi:"applicationName"`
	// The configuration description of application installed.
	ConfigDescription pulumi.StringPtrInput `pulumi:"configDescription"`
	// The configuration file name of application installed.
	ConfigFileName pulumi.StringInput `pulumi:"configFileName"`
	// The configuration item key of application installed.
	ConfigItemKey pulumi.StringInput `pulumi:"configItemKey"`
	// The configuration item value of application installed.
	ConfigItemValue pulumi.StringInput `pulumi:"configItemValue"`
	// The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
	ConfigScope pulumi.StringPtrInput `pulumi:"configScope"`
	// The configuration effected which node group id of emr cluster.
	NodeGroupId pulumi.StringPtrInput `pulumi:"nodeGroupId"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName pulumi.StringPtrInput `pulumi:"nodeGroupName"`
}

func (ClusterApplicationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterApplicationConfig)(nil)).Elem()
}

func (i ClusterApplicationConfigArgs) ToClusterApplicationConfigOutput() ClusterApplicationConfigOutput {
	return i.ToClusterApplicationConfigOutputWithContext(context.Background())
}

func (i ClusterApplicationConfigArgs) ToClusterApplicationConfigOutputWithContext(ctx context.Context) ClusterApplicationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterApplicationConfigOutput)
}

// ClusterApplicationConfigArrayInput is an input type that accepts ClusterApplicationConfigArray and ClusterApplicationConfigArrayOutput values.
// You can construct a concrete instance of `ClusterApplicationConfigArrayInput` via:
//
//	ClusterApplicationConfigArray{ ClusterApplicationConfigArgs{...} }
type ClusterApplicationConfigArrayInput interface {
	pulumi.Input

	ToClusterApplicationConfigArrayOutput() ClusterApplicationConfigArrayOutput
	ToClusterApplicationConfigArrayOutputWithContext(context.Context) ClusterApplicationConfigArrayOutput
}

type ClusterApplicationConfigArray []ClusterApplicationConfigInput

func (ClusterApplicationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterApplicationConfig)(nil)).Elem()
}

func (i ClusterApplicationConfigArray) ToClusterApplicationConfigArrayOutput() ClusterApplicationConfigArrayOutput {
	return i.ToClusterApplicationConfigArrayOutputWithContext(context.Background())
}

func (i ClusterApplicationConfigArray) ToClusterApplicationConfigArrayOutputWithContext(ctx context.Context) ClusterApplicationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterApplicationConfigArrayOutput)
}

type ClusterApplicationConfigOutput struct{ *pulumi.OutputState }

func (ClusterApplicationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterApplicationConfig)(nil)).Elem()
}

func (o ClusterApplicationConfigOutput) ToClusterApplicationConfigOutput() ClusterApplicationConfigOutput {
	return o
}

func (o ClusterApplicationConfigOutput) ToClusterApplicationConfigOutputWithContext(ctx context.Context) ClusterApplicationConfigOutput {
	return o
}

// The application name of EMR cluster which has installed.
func (o ClusterApplicationConfigOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) string { return v.ApplicationName }).(pulumi.StringOutput)
}

// The configuration description of application installed.
func (o ClusterApplicationConfigOutput) ConfigDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) *string { return v.ConfigDescription }).(pulumi.StringPtrOutput)
}

// The configuration file name of application installed.
func (o ClusterApplicationConfigOutput) ConfigFileName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) string { return v.ConfigFileName }).(pulumi.StringOutput)
}

// The configuration item key of application installed.
func (o ClusterApplicationConfigOutput) ConfigItemKey() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) string { return v.ConfigItemKey }).(pulumi.StringOutput)
}

// The configuration item value of application installed.
func (o ClusterApplicationConfigOutput) ConfigItemValue() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) string { return v.ConfigItemValue }).(pulumi.StringOutput)
}

// The configuration scope of emr cluster. Supported value: CLUSTER or NODEGROUP.
func (o ClusterApplicationConfigOutput) ConfigScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) *string { return v.ConfigScope }).(pulumi.StringPtrOutput)
}

// The configuration effected which node group id of emr cluster.
func (o ClusterApplicationConfigOutput) NodeGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) *string { return v.NodeGroupId }).(pulumi.StringPtrOutput)
}

// The configuration effected which node group name of emr cluster.
func (o ClusterApplicationConfigOutput) NodeGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterApplicationConfig) *string { return v.NodeGroupName }).(pulumi.StringPtrOutput)
}

type ClusterApplicationConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterApplicationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterApplicationConfig)(nil)).Elem()
}

func (o ClusterApplicationConfigArrayOutput) ToClusterApplicationConfigArrayOutput() ClusterApplicationConfigArrayOutput {
	return o
}

func (o ClusterApplicationConfigArrayOutput) ToClusterApplicationConfigArrayOutputWithContext(ctx context.Context) ClusterApplicationConfigArrayOutput {
	return o
}

func (o ClusterApplicationConfigArrayOutput) Index(i pulumi.IntInput) ClusterApplicationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterApplicationConfig {
		return vs[0].([]ClusterApplicationConfig)[vs[1].(int)]
	}).(ClusterApplicationConfigOutput)
}

type ClusterBootstrapScript struct {
	// The bootstrap scripts execution fail strategy, ’FAILED_BLOCKED’ or ‘FAILED_CONTINUE’ .
	ExecutionFailStrategy string `pulumi:"executionFailStrategy"`
	// The bootstrap scripts execution moment, ’BEFORE_INSTALL’ or ‘AFTER_STARTED’ .
	ExecutionMoment string `pulumi:"executionMoment"`
	// The bootstrap scripts execution target.
	NodeSelector ClusterBootstrapScriptNodeSelector `pulumi:"nodeSelector"`
	// The bootstrap scripts priority.
	Priority *int `pulumi:"priority"`
	// The bootstrap script args, e.g. "--a=b".
	ScriptArgs string `pulumi:"scriptArgs"`
	// The bootstrap script name.
	ScriptName string `pulumi:"scriptName"`
	// The bootstrap script path, e.g. "oss://bucket/path".
	ScriptPath string `pulumi:"scriptPath"`
}

// ClusterBootstrapScriptInput is an input type that accepts ClusterBootstrapScriptArgs and ClusterBootstrapScriptOutput values.
// You can construct a concrete instance of `ClusterBootstrapScriptInput` via:
//
//	ClusterBootstrapScriptArgs{...}
type ClusterBootstrapScriptInput interface {
	pulumi.Input

	ToClusterBootstrapScriptOutput() ClusterBootstrapScriptOutput
	ToClusterBootstrapScriptOutputWithContext(context.Context) ClusterBootstrapScriptOutput
}

type ClusterBootstrapScriptArgs struct {
	// The bootstrap scripts execution fail strategy, ’FAILED_BLOCKED’ or ‘FAILED_CONTINUE’ .
	ExecutionFailStrategy pulumi.StringInput `pulumi:"executionFailStrategy"`
	// The bootstrap scripts execution moment, ’BEFORE_INSTALL’ or ‘AFTER_STARTED’ .
	ExecutionMoment pulumi.StringInput `pulumi:"executionMoment"`
	// The bootstrap scripts execution target.
	NodeSelector ClusterBootstrapScriptNodeSelectorInput `pulumi:"nodeSelector"`
	// The bootstrap scripts priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The bootstrap script args, e.g. "--a=b".
	ScriptArgs pulumi.StringInput `pulumi:"scriptArgs"`
	// The bootstrap script name.
	ScriptName pulumi.StringInput `pulumi:"scriptName"`
	// The bootstrap script path, e.g. "oss://bucket/path".
	ScriptPath pulumi.StringInput `pulumi:"scriptPath"`
}

func (ClusterBootstrapScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapScript)(nil)).Elem()
}

func (i ClusterBootstrapScriptArgs) ToClusterBootstrapScriptOutput() ClusterBootstrapScriptOutput {
	return i.ToClusterBootstrapScriptOutputWithContext(context.Background())
}

func (i ClusterBootstrapScriptArgs) ToClusterBootstrapScriptOutputWithContext(ctx context.Context) ClusterBootstrapScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBootstrapScriptOutput)
}

// ClusterBootstrapScriptArrayInput is an input type that accepts ClusterBootstrapScriptArray and ClusterBootstrapScriptArrayOutput values.
// You can construct a concrete instance of `ClusterBootstrapScriptArrayInput` via:
//
//	ClusterBootstrapScriptArray{ ClusterBootstrapScriptArgs{...} }
type ClusterBootstrapScriptArrayInput interface {
	pulumi.Input

	ToClusterBootstrapScriptArrayOutput() ClusterBootstrapScriptArrayOutput
	ToClusterBootstrapScriptArrayOutputWithContext(context.Context) ClusterBootstrapScriptArrayOutput
}

type ClusterBootstrapScriptArray []ClusterBootstrapScriptInput

func (ClusterBootstrapScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterBootstrapScript)(nil)).Elem()
}

func (i ClusterBootstrapScriptArray) ToClusterBootstrapScriptArrayOutput() ClusterBootstrapScriptArrayOutput {
	return i.ToClusterBootstrapScriptArrayOutputWithContext(context.Background())
}

func (i ClusterBootstrapScriptArray) ToClusterBootstrapScriptArrayOutputWithContext(ctx context.Context) ClusterBootstrapScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBootstrapScriptArrayOutput)
}

type ClusterBootstrapScriptOutput struct{ *pulumi.OutputState }

func (ClusterBootstrapScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapScript)(nil)).Elem()
}

func (o ClusterBootstrapScriptOutput) ToClusterBootstrapScriptOutput() ClusterBootstrapScriptOutput {
	return o
}

func (o ClusterBootstrapScriptOutput) ToClusterBootstrapScriptOutputWithContext(ctx context.Context) ClusterBootstrapScriptOutput {
	return o
}

// The bootstrap scripts execution fail strategy, ’FAILED_BLOCKED’ or ‘FAILED_CONTINUE’ .
func (o ClusterBootstrapScriptOutput) ExecutionFailStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) string { return v.ExecutionFailStrategy }).(pulumi.StringOutput)
}

// The bootstrap scripts execution moment, ’BEFORE_INSTALL’ or ‘AFTER_STARTED’ .
func (o ClusterBootstrapScriptOutput) ExecutionMoment() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) string { return v.ExecutionMoment }).(pulumi.StringOutput)
}

// The bootstrap scripts execution target.
func (o ClusterBootstrapScriptOutput) NodeSelector() ClusterBootstrapScriptNodeSelectorOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) ClusterBootstrapScriptNodeSelector { return v.NodeSelector }).(ClusterBootstrapScriptNodeSelectorOutput)
}

// The bootstrap scripts priority.
func (o ClusterBootstrapScriptOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The bootstrap script args, e.g. "--a=b".
func (o ClusterBootstrapScriptOutput) ScriptArgs() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) string { return v.ScriptArgs }).(pulumi.StringOutput)
}

// The bootstrap script name.
func (o ClusterBootstrapScriptOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) string { return v.ScriptName }).(pulumi.StringOutput)
}

// The bootstrap script path, e.g. "oss://bucket/path".
func (o ClusterBootstrapScriptOutput) ScriptPath() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScript) string { return v.ScriptPath }).(pulumi.StringOutput)
}

type ClusterBootstrapScriptArrayOutput struct{ *pulumi.OutputState }

func (ClusterBootstrapScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterBootstrapScript)(nil)).Elem()
}

func (o ClusterBootstrapScriptArrayOutput) ToClusterBootstrapScriptArrayOutput() ClusterBootstrapScriptArrayOutput {
	return o
}

func (o ClusterBootstrapScriptArrayOutput) ToClusterBootstrapScriptArrayOutputWithContext(ctx context.Context) ClusterBootstrapScriptArrayOutput {
	return o
}

func (o ClusterBootstrapScriptArrayOutput) Index(i pulumi.IntInput) ClusterBootstrapScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterBootstrapScript {
		return vs[0].([]ClusterBootstrapScript)[vs[1].(int)]
	}).(ClusterBootstrapScriptOutput)
}

type ClusterBootstrapScriptNodeSelector struct {
	// The configuration effected which node group id of emr cluster.
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName *string `pulumi:"nodeGroupName"`
	// The bootstrap scripts execution target node group types.
	NodeGroupTypes []string `pulumi:"nodeGroupTypes"`
	// The bootstrap scripts execution target node names.
	NodeNames []string `pulumi:"nodeNames"`
	// The bootstrap scripts execution target node select type. Supported value: NODE, NODEGROUP or CLUSTER.
	NodeSelectType string `pulumi:"nodeSelectType"`
}

// ClusterBootstrapScriptNodeSelectorInput is an input type that accepts ClusterBootstrapScriptNodeSelectorArgs and ClusterBootstrapScriptNodeSelectorOutput values.
// You can construct a concrete instance of `ClusterBootstrapScriptNodeSelectorInput` via:
//
//	ClusterBootstrapScriptNodeSelectorArgs{...}
type ClusterBootstrapScriptNodeSelectorInput interface {
	pulumi.Input

	ToClusterBootstrapScriptNodeSelectorOutput() ClusterBootstrapScriptNodeSelectorOutput
	ToClusterBootstrapScriptNodeSelectorOutputWithContext(context.Context) ClusterBootstrapScriptNodeSelectorOutput
}

type ClusterBootstrapScriptNodeSelectorArgs struct {
	// The configuration effected which node group id of emr cluster.
	NodeGroupId pulumi.StringPtrInput `pulumi:"nodeGroupId"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName pulumi.StringPtrInput `pulumi:"nodeGroupName"`
	// The bootstrap scripts execution target node group types.
	NodeGroupTypes pulumi.StringArrayInput `pulumi:"nodeGroupTypes"`
	// The bootstrap scripts execution target node names.
	NodeNames pulumi.StringArrayInput `pulumi:"nodeNames"`
	// The bootstrap scripts execution target node select type. Supported value: NODE, NODEGROUP or CLUSTER.
	NodeSelectType pulumi.StringInput `pulumi:"nodeSelectType"`
}

func (ClusterBootstrapScriptNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapScriptNodeSelector)(nil)).Elem()
}

func (i ClusterBootstrapScriptNodeSelectorArgs) ToClusterBootstrapScriptNodeSelectorOutput() ClusterBootstrapScriptNodeSelectorOutput {
	return i.ToClusterBootstrapScriptNodeSelectorOutputWithContext(context.Background())
}

func (i ClusterBootstrapScriptNodeSelectorArgs) ToClusterBootstrapScriptNodeSelectorOutputWithContext(ctx context.Context) ClusterBootstrapScriptNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBootstrapScriptNodeSelectorOutput)
}

type ClusterBootstrapScriptNodeSelectorOutput struct{ *pulumi.OutputState }

func (ClusterBootstrapScriptNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBootstrapScriptNodeSelector)(nil)).Elem()
}

func (o ClusterBootstrapScriptNodeSelectorOutput) ToClusterBootstrapScriptNodeSelectorOutput() ClusterBootstrapScriptNodeSelectorOutput {
	return o
}

func (o ClusterBootstrapScriptNodeSelectorOutput) ToClusterBootstrapScriptNodeSelectorOutputWithContext(ctx context.Context) ClusterBootstrapScriptNodeSelectorOutput {
	return o
}

// The configuration effected which node group id of emr cluster.
func (o ClusterBootstrapScriptNodeSelectorOutput) NodeGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBootstrapScriptNodeSelector) *string { return v.NodeGroupId }).(pulumi.StringPtrOutput)
}

// The configuration effected which node group name of emr cluster.
func (o ClusterBootstrapScriptNodeSelectorOutput) NodeGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBootstrapScriptNodeSelector) *string { return v.NodeGroupName }).(pulumi.StringPtrOutput)
}

// The bootstrap scripts execution target node group types.
func (o ClusterBootstrapScriptNodeSelectorOutput) NodeGroupTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterBootstrapScriptNodeSelector) []string { return v.NodeGroupTypes }).(pulumi.StringArrayOutput)
}

// The bootstrap scripts execution target node names.
func (o ClusterBootstrapScriptNodeSelectorOutput) NodeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterBootstrapScriptNodeSelector) []string { return v.NodeNames }).(pulumi.StringArrayOutput)
}

// The bootstrap scripts execution target node select type. Supported value: NODE, NODEGROUP or CLUSTER.
func (o ClusterBootstrapScriptNodeSelectorOutput) NodeSelectType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBootstrapScriptNodeSelector) string { return v.NodeSelectType }).(pulumi.StringOutput)
}

type ClusterNodeAttribute struct {
	// Whether to enable data disk encryption.
	DataDiskEncrypted *bool `pulumi:"dataDiskEncrypted"`
	// The kms key id used to encrypt the data disk. It takes effect when dataDiskEncrypted is true.
	DataDiskKmsKeyId *string `pulumi:"dataDiskKmsKeyId"`
	// The name of the key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
	RamRole string `pulumi:"ramRole"`
	// Security Group ID for Cluster.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Used to retrieve instances belong to specified VPC.
	VpcId string `pulumi:"vpcId"`
	// Zone ID, e.g. cn-hangzhou-i
	ZoneId string `pulumi:"zoneId"`
}

// ClusterNodeAttributeInput is an input type that accepts ClusterNodeAttributeArgs and ClusterNodeAttributeOutput values.
// You can construct a concrete instance of `ClusterNodeAttributeInput` via:
//
//	ClusterNodeAttributeArgs{...}
type ClusterNodeAttributeInput interface {
	pulumi.Input

	ToClusterNodeAttributeOutput() ClusterNodeAttributeOutput
	ToClusterNodeAttributeOutputWithContext(context.Context) ClusterNodeAttributeOutput
}

type ClusterNodeAttributeArgs struct {
	// Whether to enable data disk encryption.
	DataDiskEncrypted pulumi.BoolPtrInput `pulumi:"dataDiskEncrypted"`
	// The kms key id used to encrypt the data disk. It takes effect when dataDiskEncrypted is true.
	DataDiskKmsKeyId pulumi.StringPtrInput `pulumi:"dataDiskKmsKeyId"`
	// The name of the key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
	RamRole pulumi.StringInput `pulumi:"ramRole"`
	// Security Group ID for Cluster.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// Used to retrieve instances belong to specified VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Zone ID, e.g. cn-hangzhou-i
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ClusterNodeAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeAttribute)(nil)).Elem()
}

func (i ClusterNodeAttributeArgs) ToClusterNodeAttributeOutput() ClusterNodeAttributeOutput {
	return i.ToClusterNodeAttributeOutputWithContext(context.Background())
}

func (i ClusterNodeAttributeArgs) ToClusterNodeAttributeOutputWithContext(ctx context.Context) ClusterNodeAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeAttributeOutput)
}

// ClusterNodeAttributeArrayInput is an input type that accepts ClusterNodeAttributeArray and ClusterNodeAttributeArrayOutput values.
// You can construct a concrete instance of `ClusterNodeAttributeArrayInput` via:
//
//	ClusterNodeAttributeArray{ ClusterNodeAttributeArgs{...} }
type ClusterNodeAttributeArrayInput interface {
	pulumi.Input

	ToClusterNodeAttributeArrayOutput() ClusterNodeAttributeArrayOutput
	ToClusterNodeAttributeArrayOutputWithContext(context.Context) ClusterNodeAttributeArrayOutput
}

type ClusterNodeAttributeArray []ClusterNodeAttributeInput

func (ClusterNodeAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeAttribute)(nil)).Elem()
}

func (i ClusterNodeAttributeArray) ToClusterNodeAttributeArrayOutput() ClusterNodeAttributeArrayOutput {
	return i.ToClusterNodeAttributeArrayOutputWithContext(context.Background())
}

func (i ClusterNodeAttributeArray) ToClusterNodeAttributeArrayOutputWithContext(ctx context.Context) ClusterNodeAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeAttributeArrayOutput)
}

type ClusterNodeAttributeOutput struct{ *pulumi.OutputState }

func (ClusterNodeAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeAttribute)(nil)).Elem()
}

func (o ClusterNodeAttributeOutput) ToClusterNodeAttributeOutput() ClusterNodeAttributeOutput {
	return o
}

func (o ClusterNodeAttributeOutput) ToClusterNodeAttributeOutputWithContext(ctx context.Context) ClusterNodeAttributeOutput {
	return o
}

// Whether to enable data disk encryption.
func (o ClusterNodeAttributeOutput) DataDiskEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) *bool { return v.DataDiskEncrypted }).(pulumi.BoolPtrOutput)
}

// The kms key id used to encrypt the data disk. It takes effect when dataDiskEncrypted is true.
func (o ClusterNodeAttributeOutput) DataDiskKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) *string { return v.DataDiskKmsKeyId }).(pulumi.StringPtrOutput)
}

// The name of the key pair.
func (o ClusterNodeAttributeOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// Alicloud EMR uses roles to perform actions on your behalf when provisioning cluster resources, running applications, dynamically scaling resources. EMR uses the following roles when interacting with other Alicloud services. Default value is AliyunEmrEcsDefaultRole.
func (o ClusterNodeAttributeOutput) RamRole() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) string { return v.RamRole }).(pulumi.StringOutput)
}

// Security Group ID for Cluster.
func (o ClusterNodeAttributeOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Used to retrieve instances belong to specified VPC.
func (o ClusterNodeAttributeOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) string { return v.VpcId }).(pulumi.StringOutput)
}

// Zone ID, e.g. cn-hangzhou-i
func (o ClusterNodeAttributeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeAttribute) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ClusterNodeAttributeArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeAttribute)(nil)).Elem()
}

func (o ClusterNodeAttributeArrayOutput) ToClusterNodeAttributeArrayOutput() ClusterNodeAttributeArrayOutput {
	return o
}

func (o ClusterNodeAttributeArrayOutput) ToClusterNodeAttributeArrayOutputWithContext(ctx context.Context) ClusterNodeAttributeArrayOutput {
	return o
}

func (o ClusterNodeAttributeArrayOutput) Index(i pulumi.IntInput) ClusterNodeAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeAttribute {
		return vs[0].([]ClusterNodeAttribute)[vs[1].(int)]
	}).(ClusterNodeAttributeOutput)
}

type ClusterNodeGroup struct {
	// Additional security Group IDS for Cluster, you can also specify this key for each node group.
	AdditionalSecurityGroupIds []string `pulumi:"additionalSecurityGroupIds"`
	// The detail cost optimized configuration of emr cluster.
	CostOptimizedConfig *ClusterNodeGroupCostOptimizedConfig `pulumi:"costOptimizedConfig"`
	// Host Ecs data disks information in this node group.
	DataDisks []ClusterNodeGroupDataDisk `pulumi:"dataDisks"`
	// Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
	GracefulShutdown *bool `pulumi:"gracefulShutdown"`
	// Host Ecs instance types.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Host Ecs number in this node group.
	NodeCount int `pulumi:"nodeCount"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName string `pulumi:"nodeGroupName"`
	// The node group type of emr cluster, supported value: MASTER, CORE or TASK.
	NodeGroupType string `pulumi:"nodeGroupType"`
	// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
	PaymentType *string `pulumi:"paymentType"`
	// The spot bid prices of a PayAsYouGo instance.
	SpotBidPrices []ClusterNodeGroupSpotBidPrice `pulumi:"spotBidPrices"`
	// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
	SpotInstanceRemedy *bool `pulumi:"spotInstanceRemedy"`
	// The detail configuration of subscription payment type.
	SubscriptionConfig *ClusterNodeGroupSubscriptionConfig `pulumi:"subscriptionConfig"`
	// Host Ecs system disk information in this node group.
	SystemDisk ClusterNodeGroupSystemDisk `pulumi:"systemDisk"`
	// Global vSwitch ids, you can also specify it in node group.
	VswitchIds []string `pulumi:"vswitchIds"`
	// Whether the node has a public IP address enabled.
	WithPublicIp *bool `pulumi:"withPublicIp"`
}

// ClusterNodeGroupInput is an input type that accepts ClusterNodeGroupArgs and ClusterNodeGroupOutput values.
// You can construct a concrete instance of `ClusterNodeGroupInput` via:
//
//	ClusterNodeGroupArgs{...}
type ClusterNodeGroupInput interface {
	pulumi.Input

	ToClusterNodeGroupOutput() ClusterNodeGroupOutput
	ToClusterNodeGroupOutputWithContext(context.Context) ClusterNodeGroupOutput
}

type ClusterNodeGroupArgs struct {
	// Additional security Group IDS for Cluster, you can also specify this key for each node group.
	AdditionalSecurityGroupIds pulumi.StringArrayInput `pulumi:"additionalSecurityGroupIds"`
	// The detail cost optimized configuration of emr cluster.
	CostOptimizedConfig ClusterNodeGroupCostOptimizedConfigPtrInput `pulumi:"costOptimizedConfig"`
	// Host Ecs data disks information in this node group.
	DataDisks ClusterNodeGroupDataDiskArrayInput `pulumi:"dataDisks"`
	// Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
	GracefulShutdown pulumi.BoolPtrInput `pulumi:"gracefulShutdown"`
	// Host Ecs instance types.
	InstanceTypes pulumi.StringArrayInput `pulumi:"instanceTypes"`
	// Host Ecs number in this node group.
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// The configuration effected which node group name of emr cluster.
	NodeGroupName pulumi.StringInput `pulumi:"nodeGroupName"`
	// The node group type of emr cluster, supported value: MASTER, CORE or TASK.
	NodeGroupType pulumi.StringInput `pulumi:"nodeGroupType"`
	// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
	PaymentType pulumi.StringPtrInput `pulumi:"paymentType"`
	// The spot bid prices of a PayAsYouGo instance.
	SpotBidPrices ClusterNodeGroupSpotBidPriceArrayInput `pulumi:"spotBidPrices"`
	// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
	SpotInstanceRemedy pulumi.BoolPtrInput `pulumi:"spotInstanceRemedy"`
	// The detail configuration of subscription payment type.
	SubscriptionConfig ClusterNodeGroupSubscriptionConfigPtrInput `pulumi:"subscriptionConfig"`
	// Host Ecs system disk information in this node group.
	SystemDisk ClusterNodeGroupSystemDiskInput `pulumi:"systemDisk"`
	// Global vSwitch ids, you can also specify it in node group.
	VswitchIds pulumi.StringArrayInput `pulumi:"vswitchIds"`
	// Whether the node has a public IP address enabled.
	WithPublicIp pulumi.BoolPtrInput `pulumi:"withPublicIp"`
}

func (ClusterNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroup)(nil)).Elem()
}

func (i ClusterNodeGroupArgs) ToClusterNodeGroupOutput() ClusterNodeGroupOutput {
	return i.ToClusterNodeGroupOutputWithContext(context.Background())
}

func (i ClusterNodeGroupArgs) ToClusterNodeGroupOutputWithContext(ctx context.Context) ClusterNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupOutput)
}

// ClusterNodeGroupArrayInput is an input type that accepts ClusterNodeGroupArray and ClusterNodeGroupArrayOutput values.
// You can construct a concrete instance of `ClusterNodeGroupArrayInput` via:
//
//	ClusterNodeGroupArray{ ClusterNodeGroupArgs{...} }
type ClusterNodeGroupArrayInput interface {
	pulumi.Input

	ToClusterNodeGroupArrayOutput() ClusterNodeGroupArrayOutput
	ToClusterNodeGroupArrayOutputWithContext(context.Context) ClusterNodeGroupArrayOutput
}

type ClusterNodeGroupArray []ClusterNodeGroupInput

func (ClusterNodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroup)(nil)).Elem()
}

func (i ClusterNodeGroupArray) ToClusterNodeGroupArrayOutput() ClusterNodeGroupArrayOutput {
	return i.ToClusterNodeGroupArrayOutputWithContext(context.Background())
}

func (i ClusterNodeGroupArray) ToClusterNodeGroupArrayOutputWithContext(ctx context.Context) ClusterNodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupArrayOutput)
}

type ClusterNodeGroupOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroup)(nil)).Elem()
}

func (o ClusterNodeGroupOutput) ToClusterNodeGroupOutput() ClusterNodeGroupOutput {
	return o
}

func (o ClusterNodeGroupOutput) ToClusterNodeGroupOutputWithContext(ctx context.Context) ClusterNodeGroupOutput {
	return o
}

// Additional security Group IDS for Cluster, you can also specify this key for each node group.
func (o ClusterNodeGroupOutput) AdditionalSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterNodeGroup) []string { return v.AdditionalSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The detail cost optimized configuration of emr cluster.
func (o ClusterNodeGroupOutput) CostOptimizedConfig() ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *ClusterNodeGroupCostOptimizedConfig { return v.CostOptimizedConfig }).(ClusterNodeGroupCostOptimizedConfigPtrOutput)
}

// Host Ecs data disks information in this node group.
func (o ClusterNodeGroupOutput) DataDisks() ClusterNodeGroupDataDiskArrayOutput {
	return o.ApplyT(func(v ClusterNodeGroup) []ClusterNodeGroupDataDisk { return v.DataDisks }).(ClusterNodeGroupDataDiskArrayOutput)
}

// Enable emr cluster of task node graceful decommission, ’true’ or ‘false’ .
func (o ClusterNodeGroupOutput) GracefulShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *bool { return v.GracefulShutdown }).(pulumi.BoolPtrOutput)
}

// Host Ecs instance types.
func (o ClusterNodeGroupOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterNodeGroup) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// Host Ecs number in this node group.
func (o ClusterNodeGroupOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroup) int { return v.NodeCount }).(pulumi.IntOutput)
}

// The configuration effected which node group name of emr cluster.
func (o ClusterNodeGroupOutput) NodeGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroup) string { return v.NodeGroupName }).(pulumi.StringOutput)
}

// The node group type of emr cluster, supported value: MASTER, CORE or TASK.
func (o ClusterNodeGroupOutput) NodeGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroup) string { return v.NodeGroupType }).(pulumi.StringOutput)
}

// Payment Type for this cluster. Supported value: PayAsYouGo or Subscription.
func (o ClusterNodeGroupOutput) PaymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *string { return v.PaymentType }).(pulumi.StringPtrOutput)
}

// The spot bid prices of a PayAsYouGo instance.
func (o ClusterNodeGroupOutput) SpotBidPrices() ClusterNodeGroupSpotBidPriceArrayOutput {
	return o.ApplyT(func(v ClusterNodeGroup) []ClusterNodeGroupSpotBidPrice { return v.SpotBidPrices }).(ClusterNodeGroupSpotBidPriceArrayOutput)
}

// Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
func (o ClusterNodeGroupOutput) SpotInstanceRemedy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *bool { return v.SpotInstanceRemedy }).(pulumi.BoolPtrOutput)
}

// The detail configuration of subscription payment type.
func (o ClusterNodeGroupOutput) SubscriptionConfig() ClusterNodeGroupSubscriptionConfigPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *ClusterNodeGroupSubscriptionConfig { return v.SubscriptionConfig }).(ClusterNodeGroupSubscriptionConfigPtrOutput)
}

// Host Ecs system disk information in this node group.
func (o ClusterNodeGroupOutput) SystemDisk() ClusterNodeGroupSystemDiskOutput {
	return o.ApplyT(func(v ClusterNodeGroup) ClusterNodeGroupSystemDisk { return v.SystemDisk }).(ClusterNodeGroupSystemDiskOutput)
}

// Global vSwitch ids, you can also specify it in node group.
func (o ClusterNodeGroupOutput) VswitchIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterNodeGroup) []string { return v.VswitchIds }).(pulumi.StringArrayOutput)
}

// Whether the node has a public IP address enabled.
func (o ClusterNodeGroupOutput) WithPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroup) *bool { return v.WithPublicIp }).(pulumi.BoolPtrOutput)
}

type ClusterNodeGroupArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroup)(nil)).Elem()
}

func (o ClusterNodeGroupArrayOutput) ToClusterNodeGroupArrayOutput() ClusterNodeGroupArrayOutput {
	return o
}

func (o ClusterNodeGroupArrayOutput) ToClusterNodeGroupArrayOutputWithContext(ctx context.Context) ClusterNodeGroupArrayOutput {
	return o
}

func (o ClusterNodeGroupArrayOutput) Index(i pulumi.IntInput) ClusterNodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeGroup {
		return vs[0].([]ClusterNodeGroup)[vs[1].(int)]
	}).(ClusterNodeGroupOutput)
}

type ClusterNodeGroupCostOptimizedConfig struct {
	// The cost optimized configuration which on demand based capacity.
	OnDemandBaseCapacity int `pulumi:"onDemandBaseCapacity"`
	// The cost optimized configuration which on demand percentage above based capacity.
	OnDemandPercentageAboveBaseCapacity int `pulumi:"onDemandPercentageAboveBaseCapacity"`
	// The cost optimized configuration with spot instance pools.
	SpotInstancePools int `pulumi:"spotInstancePools"`
}

// ClusterNodeGroupCostOptimizedConfigInput is an input type that accepts ClusterNodeGroupCostOptimizedConfigArgs and ClusterNodeGroupCostOptimizedConfigOutput values.
// You can construct a concrete instance of `ClusterNodeGroupCostOptimizedConfigInput` via:
//
//	ClusterNodeGroupCostOptimizedConfigArgs{...}
type ClusterNodeGroupCostOptimizedConfigInput interface {
	pulumi.Input

	ToClusterNodeGroupCostOptimizedConfigOutput() ClusterNodeGroupCostOptimizedConfigOutput
	ToClusterNodeGroupCostOptimizedConfigOutputWithContext(context.Context) ClusterNodeGroupCostOptimizedConfigOutput
}

type ClusterNodeGroupCostOptimizedConfigArgs struct {
	// The cost optimized configuration which on demand based capacity.
	OnDemandBaseCapacity pulumi.IntInput `pulumi:"onDemandBaseCapacity"`
	// The cost optimized configuration which on demand percentage above based capacity.
	OnDemandPercentageAboveBaseCapacity pulumi.IntInput `pulumi:"onDemandPercentageAboveBaseCapacity"`
	// The cost optimized configuration with spot instance pools.
	SpotInstancePools pulumi.IntInput `pulumi:"spotInstancePools"`
}

func (ClusterNodeGroupCostOptimizedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupCostOptimizedConfig)(nil)).Elem()
}

func (i ClusterNodeGroupCostOptimizedConfigArgs) ToClusterNodeGroupCostOptimizedConfigOutput() ClusterNodeGroupCostOptimizedConfigOutput {
	return i.ToClusterNodeGroupCostOptimizedConfigOutputWithContext(context.Background())
}

func (i ClusterNodeGroupCostOptimizedConfigArgs) ToClusterNodeGroupCostOptimizedConfigOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupCostOptimizedConfigOutput)
}

func (i ClusterNodeGroupCostOptimizedConfigArgs) ToClusterNodeGroupCostOptimizedConfigPtrOutput() ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return i.ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(context.Background())
}

func (i ClusterNodeGroupCostOptimizedConfigArgs) ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupCostOptimizedConfigOutput).ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(ctx)
}

// ClusterNodeGroupCostOptimizedConfigPtrInput is an input type that accepts ClusterNodeGroupCostOptimizedConfigArgs, ClusterNodeGroupCostOptimizedConfigPtr and ClusterNodeGroupCostOptimizedConfigPtrOutput values.
// You can construct a concrete instance of `ClusterNodeGroupCostOptimizedConfigPtrInput` via:
//
//	        ClusterNodeGroupCostOptimizedConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeGroupCostOptimizedConfigPtrInput interface {
	pulumi.Input

	ToClusterNodeGroupCostOptimizedConfigPtrOutput() ClusterNodeGroupCostOptimizedConfigPtrOutput
	ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(context.Context) ClusterNodeGroupCostOptimizedConfigPtrOutput
}

type clusterNodeGroupCostOptimizedConfigPtrType ClusterNodeGroupCostOptimizedConfigArgs

func ClusterNodeGroupCostOptimizedConfigPtr(v *ClusterNodeGroupCostOptimizedConfigArgs) ClusterNodeGroupCostOptimizedConfigPtrInput {
	return (*clusterNodeGroupCostOptimizedConfigPtrType)(v)
}

func (*clusterNodeGroupCostOptimizedConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeGroupCostOptimizedConfig)(nil)).Elem()
}

func (i *clusterNodeGroupCostOptimizedConfigPtrType) ToClusterNodeGroupCostOptimizedConfigPtrOutput() ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return i.ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(context.Background())
}

func (i *clusterNodeGroupCostOptimizedConfigPtrType) ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupCostOptimizedConfigPtrOutput)
}

type ClusterNodeGroupCostOptimizedConfigOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupCostOptimizedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupCostOptimizedConfig)(nil)).Elem()
}

func (o ClusterNodeGroupCostOptimizedConfigOutput) ToClusterNodeGroupCostOptimizedConfigOutput() ClusterNodeGroupCostOptimizedConfigOutput {
	return o
}

func (o ClusterNodeGroupCostOptimizedConfigOutput) ToClusterNodeGroupCostOptimizedConfigOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigOutput {
	return o
}

func (o ClusterNodeGroupCostOptimizedConfigOutput) ToClusterNodeGroupCostOptimizedConfigPtrOutput() ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return o.ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(context.Background())
}

func (o ClusterNodeGroupCostOptimizedConfigOutput) ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeGroupCostOptimizedConfig) *ClusterNodeGroupCostOptimizedConfig {
		return &v
	}).(ClusterNodeGroupCostOptimizedConfigPtrOutput)
}

// The cost optimized configuration which on demand based capacity.
func (o ClusterNodeGroupCostOptimizedConfigOutput) OnDemandBaseCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupCostOptimizedConfig) int { return v.OnDemandBaseCapacity }).(pulumi.IntOutput)
}

// The cost optimized configuration which on demand percentage above based capacity.
func (o ClusterNodeGroupCostOptimizedConfigOutput) OnDemandPercentageAboveBaseCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupCostOptimizedConfig) int { return v.OnDemandPercentageAboveBaseCapacity }).(pulumi.IntOutput)
}

// The cost optimized configuration with spot instance pools.
func (o ClusterNodeGroupCostOptimizedConfigOutput) SpotInstancePools() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupCostOptimizedConfig) int { return v.SpotInstancePools }).(pulumi.IntOutput)
}

type ClusterNodeGroupCostOptimizedConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupCostOptimizedConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeGroupCostOptimizedConfig)(nil)).Elem()
}

func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) ToClusterNodeGroupCostOptimizedConfigPtrOutput() ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return o
}

func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) ToClusterNodeGroupCostOptimizedConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupCostOptimizedConfigPtrOutput {
	return o
}

func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) Elem() ClusterNodeGroupCostOptimizedConfigOutput {
	return o.ApplyT(func(v *ClusterNodeGroupCostOptimizedConfig) ClusterNodeGroupCostOptimizedConfig {
		if v != nil {
			return *v
		}
		var ret ClusterNodeGroupCostOptimizedConfig
		return ret
	}).(ClusterNodeGroupCostOptimizedConfigOutput)
}

// The cost optimized configuration which on demand based capacity.
func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) OnDemandBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupCostOptimizedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.OnDemandBaseCapacity
	}).(pulumi.IntPtrOutput)
}

// The cost optimized configuration which on demand percentage above based capacity.
func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) OnDemandPercentageAboveBaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupCostOptimizedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.OnDemandPercentageAboveBaseCapacity
	}).(pulumi.IntPtrOutput)
}

// The cost optimized configuration with spot instance pools.
func (o ClusterNodeGroupCostOptimizedConfigPtrOutput) SpotInstancePools() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupCostOptimizedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.SpotInstancePools
	}).(pulumi.IntPtrOutput)
}

type ClusterNodeGroupDataDisk struct {
	// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
	Category string `pulumi:"category"`
	// The count of a data disk.
	Count *int `pulumi:"count"`
	// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
	PerformanceLevel *string `pulumi:"performanceLevel"`
	// The size of a data disk, at least 40. Unit: GiB.
	Size int `pulumi:"size"`
}

// ClusterNodeGroupDataDiskInput is an input type that accepts ClusterNodeGroupDataDiskArgs and ClusterNodeGroupDataDiskOutput values.
// You can construct a concrete instance of `ClusterNodeGroupDataDiskInput` via:
//
//	ClusterNodeGroupDataDiskArgs{...}
type ClusterNodeGroupDataDiskInput interface {
	pulumi.Input

	ToClusterNodeGroupDataDiskOutput() ClusterNodeGroupDataDiskOutput
	ToClusterNodeGroupDataDiskOutputWithContext(context.Context) ClusterNodeGroupDataDiskOutput
}

type ClusterNodeGroupDataDiskArgs struct {
	// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
	Category pulumi.StringInput `pulumi:"category"`
	// The count of a data disk.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
	PerformanceLevel pulumi.StringPtrInput `pulumi:"performanceLevel"`
	// The size of a data disk, at least 40. Unit: GiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (ClusterNodeGroupDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupDataDisk)(nil)).Elem()
}

func (i ClusterNodeGroupDataDiskArgs) ToClusterNodeGroupDataDiskOutput() ClusterNodeGroupDataDiskOutput {
	return i.ToClusterNodeGroupDataDiskOutputWithContext(context.Background())
}

func (i ClusterNodeGroupDataDiskArgs) ToClusterNodeGroupDataDiskOutputWithContext(ctx context.Context) ClusterNodeGroupDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupDataDiskOutput)
}

// ClusterNodeGroupDataDiskArrayInput is an input type that accepts ClusterNodeGroupDataDiskArray and ClusterNodeGroupDataDiskArrayOutput values.
// You can construct a concrete instance of `ClusterNodeGroupDataDiskArrayInput` via:
//
//	ClusterNodeGroupDataDiskArray{ ClusterNodeGroupDataDiskArgs{...} }
type ClusterNodeGroupDataDiskArrayInput interface {
	pulumi.Input

	ToClusterNodeGroupDataDiskArrayOutput() ClusterNodeGroupDataDiskArrayOutput
	ToClusterNodeGroupDataDiskArrayOutputWithContext(context.Context) ClusterNodeGroupDataDiskArrayOutput
}

type ClusterNodeGroupDataDiskArray []ClusterNodeGroupDataDiskInput

func (ClusterNodeGroupDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroupDataDisk)(nil)).Elem()
}

func (i ClusterNodeGroupDataDiskArray) ToClusterNodeGroupDataDiskArrayOutput() ClusterNodeGroupDataDiskArrayOutput {
	return i.ToClusterNodeGroupDataDiskArrayOutputWithContext(context.Background())
}

func (i ClusterNodeGroupDataDiskArray) ToClusterNodeGroupDataDiskArrayOutputWithContext(ctx context.Context) ClusterNodeGroupDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupDataDiskArrayOutput)
}

type ClusterNodeGroupDataDiskOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupDataDisk)(nil)).Elem()
}

func (o ClusterNodeGroupDataDiskOutput) ToClusterNodeGroupDataDiskOutput() ClusterNodeGroupDataDiskOutput {
	return o
}

func (o ClusterNodeGroupDataDiskOutput) ToClusterNodeGroupDataDiskOutputWithContext(ctx context.Context) ClusterNodeGroupDataDiskOutput {
	return o
}

// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
func (o ClusterNodeGroupDataDiskOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroupDataDisk) string { return v.Category }).(pulumi.StringOutput)
}

// The count of a data disk.
func (o ClusterNodeGroupDataDiskOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupDataDisk) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
func (o ClusterNodeGroupDataDiskOutput) PerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupDataDisk) *string { return v.PerformanceLevel }).(pulumi.StringPtrOutput)
}

// The size of a data disk, at least 40. Unit: GiB.
func (o ClusterNodeGroupDataDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupDataDisk) int { return v.Size }).(pulumi.IntOutput)
}

type ClusterNodeGroupDataDiskArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroupDataDisk)(nil)).Elem()
}

func (o ClusterNodeGroupDataDiskArrayOutput) ToClusterNodeGroupDataDiskArrayOutput() ClusterNodeGroupDataDiskArrayOutput {
	return o
}

func (o ClusterNodeGroupDataDiskArrayOutput) ToClusterNodeGroupDataDiskArrayOutputWithContext(ctx context.Context) ClusterNodeGroupDataDiskArrayOutput {
	return o
}

func (o ClusterNodeGroupDataDiskArrayOutput) Index(i pulumi.IntInput) ClusterNodeGroupDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeGroupDataDisk {
		return vs[0].([]ClusterNodeGroupDataDisk)[vs[1].(int)]
	}).(ClusterNodeGroupDataDiskOutput)
}

type ClusterNodeGroupSpotBidPrice struct {
	// The spot bid price of a PayAsYouGo instance.
	BidPrice int `pulumi:"bidPrice"`
	// Host Ecs instance type.
	InstanceType string `pulumi:"instanceType"`
}

// ClusterNodeGroupSpotBidPriceInput is an input type that accepts ClusterNodeGroupSpotBidPriceArgs and ClusterNodeGroupSpotBidPriceOutput values.
// You can construct a concrete instance of `ClusterNodeGroupSpotBidPriceInput` via:
//
//	ClusterNodeGroupSpotBidPriceArgs{...}
type ClusterNodeGroupSpotBidPriceInput interface {
	pulumi.Input

	ToClusterNodeGroupSpotBidPriceOutput() ClusterNodeGroupSpotBidPriceOutput
	ToClusterNodeGroupSpotBidPriceOutputWithContext(context.Context) ClusterNodeGroupSpotBidPriceOutput
}

type ClusterNodeGroupSpotBidPriceArgs struct {
	// The spot bid price of a PayAsYouGo instance.
	BidPrice pulumi.IntInput `pulumi:"bidPrice"`
	// Host Ecs instance type.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
}

func (ClusterNodeGroupSpotBidPriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSpotBidPrice)(nil)).Elem()
}

func (i ClusterNodeGroupSpotBidPriceArgs) ToClusterNodeGroupSpotBidPriceOutput() ClusterNodeGroupSpotBidPriceOutput {
	return i.ToClusterNodeGroupSpotBidPriceOutputWithContext(context.Background())
}

func (i ClusterNodeGroupSpotBidPriceArgs) ToClusterNodeGroupSpotBidPriceOutputWithContext(ctx context.Context) ClusterNodeGroupSpotBidPriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSpotBidPriceOutput)
}

// ClusterNodeGroupSpotBidPriceArrayInput is an input type that accepts ClusterNodeGroupSpotBidPriceArray and ClusterNodeGroupSpotBidPriceArrayOutput values.
// You can construct a concrete instance of `ClusterNodeGroupSpotBidPriceArrayInput` via:
//
//	ClusterNodeGroupSpotBidPriceArray{ ClusterNodeGroupSpotBidPriceArgs{...} }
type ClusterNodeGroupSpotBidPriceArrayInput interface {
	pulumi.Input

	ToClusterNodeGroupSpotBidPriceArrayOutput() ClusterNodeGroupSpotBidPriceArrayOutput
	ToClusterNodeGroupSpotBidPriceArrayOutputWithContext(context.Context) ClusterNodeGroupSpotBidPriceArrayOutput
}

type ClusterNodeGroupSpotBidPriceArray []ClusterNodeGroupSpotBidPriceInput

func (ClusterNodeGroupSpotBidPriceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroupSpotBidPrice)(nil)).Elem()
}

func (i ClusterNodeGroupSpotBidPriceArray) ToClusterNodeGroupSpotBidPriceArrayOutput() ClusterNodeGroupSpotBidPriceArrayOutput {
	return i.ToClusterNodeGroupSpotBidPriceArrayOutputWithContext(context.Background())
}

func (i ClusterNodeGroupSpotBidPriceArray) ToClusterNodeGroupSpotBidPriceArrayOutputWithContext(ctx context.Context) ClusterNodeGroupSpotBidPriceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSpotBidPriceArrayOutput)
}

type ClusterNodeGroupSpotBidPriceOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupSpotBidPriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSpotBidPrice)(nil)).Elem()
}

func (o ClusterNodeGroupSpotBidPriceOutput) ToClusterNodeGroupSpotBidPriceOutput() ClusterNodeGroupSpotBidPriceOutput {
	return o
}

func (o ClusterNodeGroupSpotBidPriceOutput) ToClusterNodeGroupSpotBidPriceOutputWithContext(ctx context.Context) ClusterNodeGroupSpotBidPriceOutput {
	return o
}

// The spot bid price of a PayAsYouGo instance.
func (o ClusterNodeGroupSpotBidPriceOutput) BidPrice() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupSpotBidPrice) int { return v.BidPrice }).(pulumi.IntOutput)
}

// Host Ecs instance type.
func (o ClusterNodeGroupSpotBidPriceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroupSpotBidPrice) string { return v.InstanceType }).(pulumi.StringOutput)
}

type ClusterNodeGroupSpotBidPriceArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupSpotBidPriceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeGroupSpotBidPrice)(nil)).Elem()
}

func (o ClusterNodeGroupSpotBidPriceArrayOutput) ToClusterNodeGroupSpotBidPriceArrayOutput() ClusterNodeGroupSpotBidPriceArrayOutput {
	return o
}

func (o ClusterNodeGroupSpotBidPriceArrayOutput) ToClusterNodeGroupSpotBidPriceArrayOutputWithContext(ctx context.Context) ClusterNodeGroupSpotBidPriceArrayOutput {
	return o
}

func (o ClusterNodeGroupSpotBidPriceArrayOutput) Index(i pulumi.IntInput) ClusterNodeGroupSpotBidPriceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeGroupSpotBidPrice {
		return vs[0].([]ClusterNodeGroupSpotBidPrice)[vs[1].(int)]
	}).(ClusterNodeGroupSpotBidPriceOutput)
}

type ClusterNodeGroupSubscriptionConfig struct {
	// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	AutoRenewDuration *int `pulumi:"autoRenewDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	AutoRenewDurationUnit *string `pulumi:"autoRenewDurationUnit"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	PaymentDuration int `pulumi:"paymentDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	PaymentDurationUnit string `pulumi:"paymentDurationUnit"`
}

// ClusterNodeGroupSubscriptionConfigInput is an input type that accepts ClusterNodeGroupSubscriptionConfigArgs and ClusterNodeGroupSubscriptionConfigOutput values.
// You can construct a concrete instance of `ClusterNodeGroupSubscriptionConfigInput` via:
//
//	ClusterNodeGroupSubscriptionConfigArgs{...}
type ClusterNodeGroupSubscriptionConfigInput interface {
	pulumi.Input

	ToClusterNodeGroupSubscriptionConfigOutput() ClusterNodeGroupSubscriptionConfigOutput
	ToClusterNodeGroupSubscriptionConfigOutputWithContext(context.Context) ClusterNodeGroupSubscriptionConfigOutput
}

type ClusterNodeGroupSubscriptionConfigArgs struct {
	// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	AutoRenewDuration pulumi.IntPtrInput `pulumi:"autoRenewDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	AutoRenewDurationUnit pulumi.StringPtrInput `pulumi:"autoRenewDurationUnit"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	PaymentDuration pulumi.IntInput `pulumi:"paymentDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	PaymentDurationUnit pulumi.StringInput `pulumi:"paymentDurationUnit"`
}

func (ClusterNodeGroupSubscriptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSubscriptionConfig)(nil)).Elem()
}

func (i ClusterNodeGroupSubscriptionConfigArgs) ToClusterNodeGroupSubscriptionConfigOutput() ClusterNodeGroupSubscriptionConfigOutput {
	return i.ToClusterNodeGroupSubscriptionConfigOutputWithContext(context.Background())
}

func (i ClusterNodeGroupSubscriptionConfigArgs) ToClusterNodeGroupSubscriptionConfigOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSubscriptionConfigOutput)
}

func (i ClusterNodeGroupSubscriptionConfigArgs) ToClusterNodeGroupSubscriptionConfigPtrOutput() ClusterNodeGroupSubscriptionConfigPtrOutput {
	return i.ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (i ClusterNodeGroupSubscriptionConfigArgs) ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSubscriptionConfigOutput).ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(ctx)
}

// ClusterNodeGroupSubscriptionConfigPtrInput is an input type that accepts ClusterNodeGroupSubscriptionConfigArgs, ClusterNodeGroupSubscriptionConfigPtr and ClusterNodeGroupSubscriptionConfigPtrOutput values.
// You can construct a concrete instance of `ClusterNodeGroupSubscriptionConfigPtrInput` via:
//
//	        ClusterNodeGroupSubscriptionConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeGroupSubscriptionConfigPtrInput interface {
	pulumi.Input

	ToClusterNodeGroupSubscriptionConfigPtrOutput() ClusterNodeGroupSubscriptionConfigPtrOutput
	ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(context.Context) ClusterNodeGroupSubscriptionConfigPtrOutput
}

type clusterNodeGroupSubscriptionConfigPtrType ClusterNodeGroupSubscriptionConfigArgs

func ClusterNodeGroupSubscriptionConfigPtr(v *ClusterNodeGroupSubscriptionConfigArgs) ClusterNodeGroupSubscriptionConfigPtrInput {
	return (*clusterNodeGroupSubscriptionConfigPtrType)(v)
}

func (*clusterNodeGroupSubscriptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeGroupSubscriptionConfig)(nil)).Elem()
}

func (i *clusterNodeGroupSubscriptionConfigPtrType) ToClusterNodeGroupSubscriptionConfigPtrOutput() ClusterNodeGroupSubscriptionConfigPtrOutput {
	return i.ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (i *clusterNodeGroupSubscriptionConfigPtrType) ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSubscriptionConfigPtrOutput)
}

type ClusterNodeGroupSubscriptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupSubscriptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSubscriptionConfig)(nil)).Elem()
}

func (o ClusterNodeGroupSubscriptionConfigOutput) ToClusterNodeGroupSubscriptionConfigOutput() ClusterNodeGroupSubscriptionConfigOutput {
	return o
}

func (o ClusterNodeGroupSubscriptionConfigOutput) ToClusterNodeGroupSubscriptionConfigOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigOutput {
	return o
}

func (o ClusterNodeGroupSubscriptionConfigOutput) ToClusterNodeGroupSubscriptionConfigPtrOutput() ClusterNodeGroupSubscriptionConfigPtrOutput {
	return o.ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (o ClusterNodeGroupSubscriptionConfigOutput) ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeGroupSubscriptionConfig) *ClusterNodeGroupSubscriptionConfig {
		return &v
	}).(ClusterNodeGroupSubscriptionConfigPtrOutput)
}

// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
func (o ClusterNodeGroupSubscriptionConfigOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupSubscriptionConfig) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterNodeGroupSubscriptionConfigOutput) AutoRenewDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupSubscriptionConfig) *int { return v.AutoRenewDuration }).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterNodeGroupSubscriptionConfigOutput) AutoRenewDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupSubscriptionConfig) *string { return v.AutoRenewDurationUnit }).(pulumi.StringPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterNodeGroupSubscriptionConfigOutput) PaymentDuration() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupSubscriptionConfig) int { return v.PaymentDuration }).(pulumi.IntOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterNodeGroupSubscriptionConfigOutput) PaymentDurationUnit() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroupSubscriptionConfig) string { return v.PaymentDurationUnit }).(pulumi.StringOutput)
}

type ClusterNodeGroupSubscriptionConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupSubscriptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeGroupSubscriptionConfig)(nil)).Elem()
}

func (o ClusterNodeGroupSubscriptionConfigPtrOutput) ToClusterNodeGroupSubscriptionConfigPtrOutput() ClusterNodeGroupSubscriptionConfigPtrOutput {
	return o
}

func (o ClusterNodeGroupSubscriptionConfigPtrOutput) ToClusterNodeGroupSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterNodeGroupSubscriptionConfigPtrOutput {
	return o
}

func (o ClusterNodeGroupSubscriptionConfigPtrOutput) Elem() ClusterNodeGroupSubscriptionConfigOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) ClusterNodeGroupSubscriptionConfig {
		if v != nil {
			return *v
		}
		var ret ClusterNodeGroupSubscriptionConfig
		return ret
	}).(ClusterNodeGroupSubscriptionConfigOutput)
}

// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
func (o ClusterNodeGroupSubscriptionConfigPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterNodeGroupSubscriptionConfigPtrOutput) AutoRenewDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) *int {
		if v == nil {
			return nil
		}
		return v.AutoRenewDuration
	}).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterNodeGroupSubscriptionConfigPtrOutput) AutoRenewDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.AutoRenewDurationUnit
	}).(pulumi.StringPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterNodeGroupSubscriptionConfigPtrOutput) PaymentDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) *int {
		if v == nil {
			return nil
		}
		return &v.PaymentDuration
	}).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterNodeGroupSubscriptionConfigPtrOutput) PaymentDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeGroupSubscriptionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PaymentDurationUnit
	}).(pulumi.StringPtrOutput)
}

type ClusterNodeGroupSystemDisk struct {
	// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
	Category string `pulumi:"category"`
	// The count of a data disk.
	Count *int `pulumi:"count"`
	// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
	PerformanceLevel *string `pulumi:"performanceLevel"`
	// The size of a data disk, at least 40. Unit: GiB.
	Size int `pulumi:"size"`
}

// ClusterNodeGroupSystemDiskInput is an input type that accepts ClusterNodeGroupSystemDiskArgs and ClusterNodeGroupSystemDiskOutput values.
// You can construct a concrete instance of `ClusterNodeGroupSystemDiskInput` via:
//
//	ClusterNodeGroupSystemDiskArgs{...}
type ClusterNodeGroupSystemDiskInput interface {
	pulumi.Input

	ToClusterNodeGroupSystemDiskOutput() ClusterNodeGroupSystemDiskOutput
	ToClusterNodeGroupSystemDiskOutputWithContext(context.Context) ClusterNodeGroupSystemDiskOutput
}

type ClusterNodeGroupSystemDiskArgs struct {
	// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
	Category pulumi.StringInput `pulumi:"category"`
	// The count of a data disk.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
	PerformanceLevel pulumi.StringPtrInput `pulumi:"performanceLevel"`
	// The size of a data disk, at least 40. Unit: GiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (ClusterNodeGroupSystemDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSystemDisk)(nil)).Elem()
}

func (i ClusterNodeGroupSystemDiskArgs) ToClusterNodeGroupSystemDiskOutput() ClusterNodeGroupSystemDiskOutput {
	return i.ToClusterNodeGroupSystemDiskOutputWithContext(context.Background())
}

func (i ClusterNodeGroupSystemDiskArgs) ToClusterNodeGroupSystemDiskOutputWithContext(ctx context.Context) ClusterNodeGroupSystemDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeGroupSystemDiskOutput)
}

type ClusterNodeGroupSystemDiskOutput struct{ *pulumi.OutputState }

func (ClusterNodeGroupSystemDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeGroupSystemDisk)(nil)).Elem()
}

func (o ClusterNodeGroupSystemDiskOutput) ToClusterNodeGroupSystemDiskOutput() ClusterNodeGroupSystemDiskOutput {
	return o
}

func (o ClusterNodeGroupSystemDiskOutput) ToClusterNodeGroupSystemDiskOutputWithContext(ctx context.Context) ClusterNodeGroupSystemDiskOutput {
	return o
}

// The type of the data disk. Valid values: `cloudEfficiency` and `cloudEssd`.
func (o ClusterNodeGroupSystemDiskOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeGroupSystemDisk) string { return v.Category }).(pulumi.StringOutput)
}

// The count of a data disk.
func (o ClusterNodeGroupSystemDiskOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupSystemDisk) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Worker node data disk performance level, when `category` values `cloudEssd`, the optional values are `PL0`, `PL1`, `PL2` or `PL3`, but the specific performance level is related to the disk capacity.
func (o ClusterNodeGroupSystemDiskOutput) PerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeGroupSystemDisk) *string { return v.PerformanceLevel }).(pulumi.StringPtrOutput)
}

// The size of a data disk, at least 40. Unit: GiB.
func (o ClusterNodeGroupSystemDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeGroupSystemDisk) int { return v.Size }).(pulumi.IntOutput)
}

type ClusterSubscriptionConfig struct {
	// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	AutoRenewDuration *int `pulumi:"autoRenewDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	AutoRenewDurationUnit *string `pulumi:"autoRenewDurationUnit"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	PaymentDuration int `pulumi:"paymentDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	PaymentDurationUnit string `pulumi:"paymentDurationUnit"`
}

// ClusterSubscriptionConfigInput is an input type that accepts ClusterSubscriptionConfigArgs and ClusterSubscriptionConfigOutput values.
// You can construct a concrete instance of `ClusterSubscriptionConfigInput` via:
//
//	ClusterSubscriptionConfigArgs{...}
type ClusterSubscriptionConfigInput interface {
	pulumi.Input

	ToClusterSubscriptionConfigOutput() ClusterSubscriptionConfigOutput
	ToClusterSubscriptionConfigOutputWithContext(context.Context) ClusterSubscriptionConfigOutput
}

type ClusterSubscriptionConfigArgs struct {
	// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	AutoRenewDuration pulumi.IntPtrInput `pulumi:"autoRenewDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	AutoRenewDurationUnit pulumi.StringPtrInput `pulumi:"autoRenewDurationUnit"`
	// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
	PaymentDuration pulumi.IntInput `pulumi:"paymentDuration"`
	// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
	PaymentDurationUnit pulumi.StringInput `pulumi:"paymentDurationUnit"`
}

func (ClusterSubscriptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSubscriptionConfig)(nil)).Elem()
}

func (i ClusterSubscriptionConfigArgs) ToClusterSubscriptionConfigOutput() ClusterSubscriptionConfigOutput {
	return i.ToClusterSubscriptionConfigOutputWithContext(context.Background())
}

func (i ClusterSubscriptionConfigArgs) ToClusterSubscriptionConfigOutputWithContext(ctx context.Context) ClusterSubscriptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSubscriptionConfigOutput)
}

func (i ClusterSubscriptionConfigArgs) ToClusterSubscriptionConfigPtrOutput() ClusterSubscriptionConfigPtrOutput {
	return i.ToClusterSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (i ClusterSubscriptionConfigArgs) ToClusterSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterSubscriptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSubscriptionConfigOutput).ToClusterSubscriptionConfigPtrOutputWithContext(ctx)
}

// ClusterSubscriptionConfigPtrInput is an input type that accepts ClusterSubscriptionConfigArgs, ClusterSubscriptionConfigPtr and ClusterSubscriptionConfigPtrOutput values.
// You can construct a concrete instance of `ClusterSubscriptionConfigPtrInput` via:
//
//	        ClusterSubscriptionConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterSubscriptionConfigPtrInput interface {
	pulumi.Input

	ToClusterSubscriptionConfigPtrOutput() ClusterSubscriptionConfigPtrOutput
	ToClusterSubscriptionConfigPtrOutputWithContext(context.Context) ClusterSubscriptionConfigPtrOutput
}

type clusterSubscriptionConfigPtrType ClusterSubscriptionConfigArgs

func ClusterSubscriptionConfigPtr(v *ClusterSubscriptionConfigArgs) ClusterSubscriptionConfigPtrInput {
	return (*clusterSubscriptionConfigPtrType)(v)
}

func (*clusterSubscriptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSubscriptionConfig)(nil)).Elem()
}

func (i *clusterSubscriptionConfigPtrType) ToClusterSubscriptionConfigPtrOutput() ClusterSubscriptionConfigPtrOutput {
	return i.ToClusterSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (i *clusterSubscriptionConfigPtrType) ToClusterSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterSubscriptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSubscriptionConfigPtrOutput)
}

type ClusterSubscriptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterSubscriptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSubscriptionConfig)(nil)).Elem()
}

func (o ClusterSubscriptionConfigOutput) ToClusterSubscriptionConfigOutput() ClusterSubscriptionConfigOutput {
	return o
}

func (o ClusterSubscriptionConfigOutput) ToClusterSubscriptionConfigOutputWithContext(ctx context.Context) ClusterSubscriptionConfigOutput {
	return o
}

func (o ClusterSubscriptionConfigOutput) ToClusterSubscriptionConfigPtrOutput() ClusterSubscriptionConfigPtrOutput {
	return o.ToClusterSubscriptionConfigPtrOutputWithContext(context.Background())
}

func (o ClusterSubscriptionConfigOutput) ToClusterSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterSubscriptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSubscriptionConfig) *ClusterSubscriptionConfig {
		return &v
	}).(ClusterSubscriptionConfigPtrOutput)
}

// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
func (o ClusterSubscriptionConfigOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSubscriptionConfig) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterSubscriptionConfigOutput) AutoRenewDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterSubscriptionConfig) *int { return v.AutoRenewDuration }).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterSubscriptionConfigOutput) AutoRenewDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSubscriptionConfig) *string { return v.AutoRenewDurationUnit }).(pulumi.StringPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterSubscriptionConfigOutput) PaymentDuration() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterSubscriptionConfig) int { return v.PaymentDuration }).(pulumi.IntOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterSubscriptionConfigOutput) PaymentDurationUnit() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSubscriptionConfig) string { return v.PaymentDurationUnit }).(pulumi.StringOutput)
}

type ClusterSubscriptionConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterSubscriptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSubscriptionConfig)(nil)).Elem()
}

func (o ClusterSubscriptionConfigPtrOutput) ToClusterSubscriptionConfigPtrOutput() ClusterSubscriptionConfigPtrOutput {
	return o
}

func (o ClusterSubscriptionConfigPtrOutput) ToClusterSubscriptionConfigPtrOutputWithContext(ctx context.Context) ClusterSubscriptionConfigPtrOutput {
	return o
}

func (o ClusterSubscriptionConfigPtrOutput) Elem() ClusterSubscriptionConfigOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) ClusterSubscriptionConfig {
		if v != nil {
			return *v
		}
		var ret ClusterSubscriptionConfig
		return ret
	}).(ClusterSubscriptionConfigOutput)
}

// Auto renew for prepaid, ’true’ or ‘false’ . Default value: false.
func (o ClusterSubscriptionConfigPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterSubscriptionConfigPtrOutput) AutoRenewDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) *int {
		if v == nil {
			return nil
		}
		return v.AutoRenewDuration
	}).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterSubscriptionConfigPtrOutput) AutoRenewDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.AutoRenewDurationUnit
	}).(pulumi.StringPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: 1、2、3、4、5、6、7、8、9、12、24、36、48.
func (o ClusterSubscriptionConfigPtrOutput) PaymentDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) *int {
		if v == nil {
			return nil
		}
		return &v.PaymentDuration
	}).(pulumi.IntPtrOutput)
}

// If paymentType is Subscription, this should be specified. Supported value: Month or Year.
func (o ClusterSubscriptionConfigPtrOutput) PaymentDurationUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSubscriptionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PaymentDurationUnit
	}).(pulumi.StringPtrOutput)
}

type GetClustersCluster struct {
	// The first ID of the resource.
	ClusterId string `pulumi:"clusterId"`
	// The name of the emr cluster.
	ClusterName string `pulumi:"clusterName"`
	// The state of the emr cluster.
	ClusterState string `pulumi:"clusterState"`
	// The type of the emr cluster.
	ClusterType string `pulumi:"clusterType"`
	// The creation time of the resource.
	CreateTime string `pulumi:"createTime"`
	// The ecs default role belongs to this emr cluster.
	EmrDefaultRole string `pulumi:"emrDefaultRole"`
	// The end time of the resource.
	EndTime string `pulumi:"endTime"`
	// The expire time of the resource.
	ExpireTime string `pulumi:"expireTime"`
	// The payment type of the emr cluster.
	PaymentType string `pulumi:"paymentType"`
	// The ready time of the resource.
	ReadyTime string `pulumi:"readyTime"`
	// The release version of the resource.
	ReleaseVersion string `pulumi:"releaseVersion"`
	// The resource group id of the resource.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The cluster state change reason.
	StateChangeReason map[string]interface{} `pulumi:"stateChangeReason"`
	// A mapping of tags to assign to the resource.
	Tags []GetClustersClusterTag `pulumi:"tags"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	// The first ID of the resource.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the emr cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The state of the emr cluster.
	ClusterState pulumi.StringInput `pulumi:"clusterState"`
	// The type of the emr cluster.
	ClusterType pulumi.StringInput `pulumi:"clusterType"`
	// The creation time of the resource.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ecs default role belongs to this emr cluster.
	EmrDefaultRole pulumi.StringInput `pulumi:"emrDefaultRole"`
	// The end time of the resource.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The expire time of the resource.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The payment type of the emr cluster.
	PaymentType pulumi.StringInput `pulumi:"paymentType"`
	// The ready time of the resource.
	ReadyTime pulumi.StringInput `pulumi:"readyTime"`
	// The release version of the resource.
	ReleaseVersion pulumi.StringInput `pulumi:"releaseVersion"`
	// The resource group id of the resource.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The cluster state change reason.
	StateChangeReason pulumi.MapInput `pulumi:"stateChangeReason"`
	// A mapping of tags to assign to the resource.
	Tags GetClustersClusterTagArrayInput `pulumi:"tags"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

// The first ID of the resource.
func (o GetClustersClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the emr cluster.
func (o GetClustersClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The state of the emr cluster.
func (o GetClustersClusterOutput) ClusterState() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterState }).(pulumi.StringOutput)
}

// The type of the emr cluster.
func (o GetClustersClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterType }).(pulumi.StringOutput)
}

// The creation time of the resource.
func (o GetClustersClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ecs default role belongs to this emr cluster.
func (o GetClustersClusterOutput) EmrDefaultRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EmrDefaultRole }).(pulumi.StringOutput)
}

// The end time of the resource.
func (o GetClustersClusterOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EndTime }).(pulumi.StringOutput)
}

// The expire time of the resource.
func (o GetClustersClusterOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The payment type of the emr cluster.
func (o GetClustersClusterOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.PaymentType }).(pulumi.StringOutput)
}

// The ready time of the resource.
func (o GetClustersClusterOutput) ReadyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ReadyTime }).(pulumi.StringOutput)
}

// The release version of the resource.
func (o GetClustersClusterOutput) ReleaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ReleaseVersion }).(pulumi.StringOutput)
}

// The resource group id of the resource.
func (o GetClustersClusterOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The cluster state change reason.
func (o GetClustersClusterOutput) StateChangeReason() pulumi.MapOutput {
	return o.ApplyT(func(v GetClustersCluster) map[string]interface{} { return v.StateChangeReason }).(pulumi.MapOutput)
}

// A mapping of tags to assign to the resource.
func (o GetClustersClusterOutput) Tags() GetClustersClusterTagArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterTag { return v.Tags }).(GetClustersClusterTagArrayOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetClustersClusterTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetClustersClusterTagInput is an input type that accepts GetClustersClusterTagArgs and GetClustersClusterTagOutput values.
// You can construct a concrete instance of `GetClustersClusterTagInput` via:
//
//	GetClustersClusterTagArgs{...}
type GetClustersClusterTagInput interface {
	pulumi.Input

	ToGetClustersClusterTagOutput() GetClustersClusterTagOutput
	ToGetClustersClusterTagOutputWithContext(context.Context) GetClustersClusterTagOutput
}

type GetClustersClusterTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetClustersClusterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterTag)(nil)).Elem()
}

func (i GetClustersClusterTagArgs) ToGetClustersClusterTagOutput() GetClustersClusterTagOutput {
	return i.ToGetClustersClusterTagOutputWithContext(context.Background())
}

func (i GetClustersClusterTagArgs) ToGetClustersClusterTagOutputWithContext(ctx context.Context) GetClustersClusterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterTagOutput)
}

// GetClustersClusterTagArrayInput is an input type that accepts GetClustersClusterTagArray and GetClustersClusterTagArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterTagArrayInput` via:
//
//	GetClustersClusterTagArray{ GetClustersClusterTagArgs{...} }
type GetClustersClusterTagArrayInput interface {
	pulumi.Input

	ToGetClustersClusterTagArrayOutput() GetClustersClusterTagArrayOutput
	ToGetClustersClusterTagArrayOutputWithContext(context.Context) GetClustersClusterTagArrayOutput
}

type GetClustersClusterTagArray []GetClustersClusterTagInput

func (GetClustersClusterTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterTag)(nil)).Elem()
}

func (i GetClustersClusterTagArray) ToGetClustersClusterTagArrayOutput() GetClustersClusterTagArrayOutput {
	return i.ToGetClustersClusterTagArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterTagArray) ToGetClustersClusterTagArrayOutputWithContext(ctx context.Context) GetClustersClusterTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterTagArrayOutput)
}

type GetClustersClusterTagOutput struct{ *pulumi.OutputState }

func (GetClustersClusterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterTag)(nil)).Elem()
}

func (o GetClustersClusterTagOutput) ToGetClustersClusterTagOutput() GetClustersClusterTagOutput {
	return o
}

func (o GetClustersClusterTagOutput) ToGetClustersClusterTagOutputWithContext(ctx context.Context) GetClustersClusterTagOutput {
	return o
}

func (o GetClustersClusterTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetClustersClusterTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetClustersClusterTagArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterTag)(nil)).Elem()
}

func (o GetClustersClusterTagArrayOutput) ToGetClustersClusterTagArrayOutput() GetClustersClusterTagArrayOutput {
	return o
}

func (o GetClustersClusterTagArrayOutput) ToGetClustersClusterTagArrayOutputWithContext(ctx context.Context) GetClustersClusterTagArrayOutput {
	return o
}

func (o GetClustersClusterTagArrayOutput) Index(i pulumi.IntInput) GetClustersClusterTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterTag {
		return vs[0].([]GetClustersClusterTag)[vs[1].(int)]
	}).(GetClustersClusterTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterApplicationConfigInput)(nil)).Elem(), ClusterApplicationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterApplicationConfigArrayInput)(nil)).Elem(), ClusterApplicationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBootstrapScriptInput)(nil)).Elem(), ClusterBootstrapScriptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBootstrapScriptArrayInput)(nil)).Elem(), ClusterBootstrapScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBootstrapScriptNodeSelectorInput)(nil)).Elem(), ClusterBootstrapScriptNodeSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeAttributeInput)(nil)).Elem(), ClusterNodeAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeAttributeArrayInput)(nil)).Elem(), ClusterNodeAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupInput)(nil)).Elem(), ClusterNodeGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupArrayInput)(nil)).Elem(), ClusterNodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupCostOptimizedConfigInput)(nil)).Elem(), ClusterNodeGroupCostOptimizedConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupCostOptimizedConfigPtrInput)(nil)).Elem(), ClusterNodeGroupCostOptimizedConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupDataDiskInput)(nil)).Elem(), ClusterNodeGroupDataDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupDataDiskArrayInput)(nil)).Elem(), ClusterNodeGroupDataDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupSpotBidPriceInput)(nil)).Elem(), ClusterNodeGroupSpotBidPriceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupSpotBidPriceArrayInput)(nil)).Elem(), ClusterNodeGroupSpotBidPriceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupSubscriptionConfigInput)(nil)).Elem(), ClusterNodeGroupSubscriptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupSubscriptionConfigPtrInput)(nil)).Elem(), ClusterNodeGroupSubscriptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeGroupSystemDiskInput)(nil)).Elem(), ClusterNodeGroupSystemDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSubscriptionConfigInput)(nil)).Elem(), ClusterSubscriptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSubscriptionConfigPtrInput)(nil)).Elem(), ClusterSubscriptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterTagInput)(nil)).Elem(), GetClustersClusterTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterTagArrayInput)(nil)).Elem(), GetClustersClusterTagArray{})
	pulumi.RegisterOutputType(ClusterApplicationConfigOutput{})
	pulumi.RegisterOutputType(ClusterApplicationConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterBootstrapScriptOutput{})
	pulumi.RegisterOutputType(ClusterBootstrapScriptArrayOutput{})
	pulumi.RegisterOutputType(ClusterBootstrapScriptNodeSelectorOutput{})
	pulumi.RegisterOutputType(ClusterNodeAttributeOutput{})
	pulumi.RegisterOutputType(ClusterNodeAttributeArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupCostOptimizedConfigOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupCostOptimizedConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupDataDiskOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupDataDiskArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupSpotBidPriceOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupSpotBidPriceArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupSubscriptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupSubscriptionConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeGroupSystemDiskOutput{})
	pulumi.RegisterOutputType(ClusterSubscriptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterSubscriptionConfigPtrOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterTagOutput{})
	pulumi.RegisterOutputType(GetClustersClusterTagArrayOutput{})
}
