// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Emr Cluster ecs instances of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.243.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/emrv2"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{
//				Status: pulumi.StringRef("OK"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableInstanceType: pulumi.StringRef("ecs.g7.xlarge"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("TF-VPC"),
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/21"),
//				ZoneId:      pulumi.String(defaultGetZones.Zones[0].Id),
//				VswitchName: pulumi.String("TF_VSwitch"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultEcsKeyPair, err := ecs.NewEcsKeyPair(ctx, "default", &ecs.EcsKeyPairArgs{
//				KeyPairName: pulumi.String("terraform-kp"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
//				Name:  pulumi.String("TF_SECURITY_GROUP"),
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRole, err := ram.NewRole(ctx, "default", &ram.RoleArgs{
//				Name: pulumi.String("emrtf"),
//				Document: pulumi.String(`    {
//	        "Statement": [
//	        {
//	            "Action": "sts:AssumeRole",
//	            "Effect": "Allow",
//	            "Principal": {
//	            "Service": [
//	                "emr.aliyuncs.com",
//	                "ecs.aliyuncs.com"
//	            ]
//	            }
//	        }
//	        ],
//	        "Version": "1"
//	    }
//
// `),
//
//				Description: pulumi.String("this is a role test."),
//				Force:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = emrv2.NewCluster(ctx, "default", &emrv2.ClusterArgs{
//				PaymentType:    pulumi.String("PayAsYouGo"),
//				ClusterType:    pulumi.String("DATALAKE"),
//				ReleaseVersion: pulumi.String("EMR-5.10.0"),
//				ClusterName:    pulumi.String("terraform-emr-cluster-v2"),
//				DeployMode:     pulumi.String("NORMAL"),
//				SecurityMode:   pulumi.String("NORMAL"),
//				Applications: pulumi.StringArray{
//					pulumi.String("HADOOP-COMMON"),
//					pulumi.String("HDFS"),
//					pulumi.String("YARN"),
//					pulumi.String("HIVE"),
//					pulumi.String("SPARK3"),
//					pulumi.String("TEZ"),
//				},
//				ApplicationConfigs: emrv2.ClusterApplicationConfigArray{
//					&emrv2.ClusterApplicationConfigArgs{
//						ApplicationName: pulumi.String("HIVE"),
//						ConfigFileName:  pulumi.String("hivemetastore-site.xml"),
//						ConfigItemKey:   pulumi.String("hive.metastore.type"),
//						ConfigItemValue: pulumi.String("DLF"),
//						ConfigScope:     pulumi.String("CLUSTER"),
//					},
//					&emrv2.ClusterApplicationConfigArgs{
//						ApplicationName: pulumi.String("SPARK3"),
//						ConfigFileName:  pulumi.String("hive-site.xml"),
//						ConfigItemKey:   pulumi.String("hive.metastore.type"),
//						ConfigItemValue: pulumi.String("DLF"),
//						ConfigScope:     pulumi.String("CLUSTER"),
//					},
//				},
//				NodeAttributes: emrv2.ClusterNodeAttributeArray{
//					&emrv2.ClusterNodeAttributeArgs{
//						RamRole:         defaultRole.Name,
//						SecurityGroupId: defaultSecurityGroup.ID(),
//						VpcId:           defaultNetwork.ID(),
//						ZoneId:          pulumi.String(defaultGetZones.Zones[0].Id),
//						KeyPairName:     defaultEcsKeyPair.ID(),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"created": pulumi.String("tf"),
//				},
//				NodeGroups: emrv2.ClusterNodeGroupArray{
//					&emrv2.ClusterNodeGroupArgs{
//						NodeGroupType: pulumi.String("MASTER"),
//						NodeGroupName: pulumi.String("emr-master"),
//						PaymentType:   pulumi.String("PayAsYouGo"),
//						VswitchIds: pulumi.StringArray{
//							defaultSwitch.ID(),
//						},
//						WithPublicIp: pulumi.Bool(false),
//						InstanceTypes: pulumi.StringArray{
//							pulumi.String("ecs.g7.xlarge"),
//						},
//						NodeCount: pulumi.Int(1),
//						SystemDisk: &emrv2.ClusterNodeGroupSystemDiskArgs{
//							Category: pulumi.String("cloud_essd"),
//							Size:     pulumi.Int(80),
//							Count:    pulumi.Int(1),
//						},
//						DataDisks: emrv2.ClusterNodeGroupDataDiskArray{
//							&emrv2.ClusterNodeGroupDataDiskArgs{
//								Category: pulumi.String("cloud_essd"),
//								Size:     pulumi.Int(80),
//								Count:    pulumi.Int(3),
//							},
//						},
//					},
//					&emrv2.ClusterNodeGroupArgs{
//						NodeGroupType: pulumi.String("CORE"),
//						NodeGroupName: pulumi.String("emr-core"),
//						PaymentType:   pulumi.String("PayAsYouGo"),
//						VswitchIds: pulumi.StringArray{
//							defaultSwitch.ID(),
//						},
//						WithPublicIp: pulumi.Bool(false),
//						InstanceTypes: pulumi.StringArray{
//							pulumi.String("ecs.g7.xlarge"),
//						},
//						NodeCount: pulumi.Int(3),
//						SystemDisk: &emrv2.ClusterNodeGroupSystemDiskArgs{
//							Category: pulumi.String("cloud_essd"),
//							Size:     pulumi.Int(80),
//							Count:    pulumi.Int(1),
//						},
//						DataDisks: emrv2.ClusterNodeGroupDataDiskArray{
//							&emrv2.ClusterNodeGroupDataDiskArgs{
//								Category: pulumi.String("cloud_essd"),
//								Size:     pulumi.Int(80),
//								Count:    pulumi.Int(3),
//							},
//						},
//					},
//				},
//				ResourceGroupId: pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			ids, err := emrv2.GetClusterInstances(ctx, &emrv2.GetClusterInstancesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("emrv2ClusterInstancesId1", ids.Instances[0].InstanceId)
//			nodeGroupNames, err := emrv2.GetClusterInstances(ctx, &emrv2.GetClusterInstancesArgs{
//				NodeGroupNames: []string{
//					"emr-core",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("emrv2ClusterInstancesId2", nodeGroupNames.Instances[0].InstanceId)
//			return nil
//		})
//	}
//
// ```
func GetClusterInstances(ctx *pulumi.Context, args *GetClusterInstancesArgs, opts ...pulumi.InvokeOption) (*GetClusterInstancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClusterInstancesResult
	err := ctx.Invoke("alicloud:emrv2/getClusterInstances:getClusterInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterInstances.
type GetClusterInstancesArgs struct {
	// The emr cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// A list of Cluster IDs.
	Ids []string `pulumi:"ids"`
	// The cluster ecs instance states.
	InstanceStates []string `pulumi:"instanceStates"`
	// The max results is used to list emr cluster ecs instances for next page.
	MaxResults *int `pulumi:"maxResults"`
	// The next token is used to list emr cluster ecs instances for next page.
	NextToken *string `pulumi:"nextToken"`
	// The cluster node group ids.
	NodeGroupIds []string `pulumi:"nodeGroupIds"`
	// The cluster node group names.
	NodeGroupNames []string `pulumi:"nodeGroupNames"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getClusterInstances.
type GetClusterInstancesResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of Cluster ecs instance IDS.
	Ids            []string `pulumi:"ids"`
	InstanceStates []string `pulumi:"instanceStates"`
	// A list of Emr Cluster ecs instances. Each element contains the following attributes:
	Instances  []GetClusterInstancesInstance `pulumi:"instances"`
	MaxResults *int                          `pulumi:"maxResults"`
	// A list of Cluster ecs instance names.
	Names          []string          `pulumi:"names"`
	NextToken      string            `pulumi:"nextToken"`
	NodeGroupIds   []string          `pulumi:"nodeGroupIds"`
	NodeGroupNames []string          `pulumi:"nodeGroupNames"`
	OutputFile     *string           `pulumi:"outputFile"`
	Tags           map[string]string `pulumi:"tags"`
	// The total count of list emr cluster ecs instances.
	TotalCount int `pulumi:"totalCount"`
}

func GetClusterInstancesOutput(ctx *pulumi.Context, args GetClusterInstancesOutputArgs, opts ...pulumi.InvokeOption) GetClusterInstancesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetClusterInstancesResultOutput, error) {
			args := v.(GetClusterInstancesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:emrv2/getClusterInstances:getClusterInstances", args, GetClusterInstancesResultOutput{}, options).(GetClusterInstancesResultOutput), nil
		}).(GetClusterInstancesResultOutput)
}

// A collection of arguments for invoking getClusterInstances.
type GetClusterInstancesOutputArgs struct {
	// The emr cluster ID.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// A list of Cluster IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The cluster ecs instance states.
	InstanceStates pulumi.StringArrayInput `pulumi:"instanceStates"`
	// The max results is used to list emr cluster ecs instances for next page.
	MaxResults pulumi.IntPtrInput `pulumi:"maxResults"`
	// The next token is used to list emr cluster ecs instances for next page.
	NextToken pulumi.StringPtrInput `pulumi:"nextToken"`
	// The cluster node group ids.
	NodeGroupIds pulumi.StringArrayInput `pulumi:"nodeGroupIds"`
	// The cluster node group names.
	NodeGroupNames pulumi.StringArrayInput `pulumi:"nodeGroupNames"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetClusterInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getClusterInstances.
type GetClusterInstancesResultOutput struct{ *pulumi.OutputState }

func (GetClusterInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterInstancesResult)(nil)).Elem()
}

func (o GetClusterInstancesResultOutput) ToGetClusterInstancesResultOutput() GetClusterInstancesResultOutput {
	return o
}

func (o GetClusterInstancesResultOutput) ToGetClusterInstancesResultOutputWithContext(ctx context.Context) GetClusterInstancesResultOutput {
	return o
}

func (o GetClusterInstancesResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetClusterInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of Cluster ecs instance IDS.
func (o GetClusterInstancesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetClusterInstancesResultOutput) InstanceStates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []string { return v.InstanceStates }).(pulumi.StringArrayOutput)
}

// A list of Emr Cluster ecs instances. Each element contains the following attributes:
func (o GetClusterInstancesResultOutput) Instances() GetClusterInstancesInstanceArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []GetClusterInstancesInstance { return v.Instances }).(GetClusterInstancesInstanceArrayOutput)
}

func (o GetClusterInstancesResultOutput) MaxResults() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) *int { return v.MaxResults }).(pulumi.IntPtrOutput)
}

// A list of Cluster ecs instance names.
func (o GetClusterInstancesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetClusterInstancesResultOutput) NextToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) string { return v.NextToken }).(pulumi.StringOutput)
}

func (o GetClusterInstancesResultOutput) NodeGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []string { return v.NodeGroupIds }).(pulumi.StringArrayOutput)
}

func (o GetClusterInstancesResultOutput) NodeGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) []string { return v.NodeGroupNames }).(pulumi.StringArrayOutput)
}

func (o GetClusterInstancesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetClusterInstancesResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The total count of list emr cluster ecs instances.
func (o GetClusterInstancesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterInstancesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetClusterInstancesResultOutput{})
}
