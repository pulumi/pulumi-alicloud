// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a BGP-line Anti-DDoS Pro(DdosCoo) Instance resource.
//
// For information about BGP-line Anti-DDoS Pro(DdosCoo) Instance and how to use it, see [What is Anti-DDoS Pro Instance](https://www.alibabacloud.com/help/en/ddos-protection/latest/create-an-anti-ddos-pro-or-anti-ddos-premium-instance-by-calling-an-api-operation).
//
// > **NOTE:** Available since v1.37.0.
//
// > **NOTE:** The endpoint of bssopenapi used only support "business.aliyuncs.com" at present.
//
// > **NOTE:** From version 1.214.0, if `productType` is set to `ddoscoo` or `ddoscooIntl`, the provider `region` should be set to `cn-hangzhou`, and if `productType` is set to `ddosDip`, the provider `region` should be set to `ap-southeast-1`.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ddos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := ddos.NewDdosCooInstance(ctx, "default", &ddos.DdosCooInstanceArgs{
//				BaseBandwidth:    pulumi.String("30"),
//				Bandwidth:        pulumi.String("30"),
//				ServiceBandwidth: pulumi.String("100"),
//				PortCount:        pulumi.String("50"),
//				DomainCount:      pulumi.String("50"),
//				ProductType:      pulumi.String("ddoscoo"),
//				Period:           pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DdosCoo instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:dns/ddosCooInstance:DdosCooInstance example ddoscoo-cn-123456
//
// ```
//
// Deprecated: alicloud.dns.DdosCooInstance has been deprecated in favor of alicloud.ddos.DdosCooInstance
type DdosCooInstance struct {
	pulumi.CustomResourceState

	// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	Bandwidth pulumi.StringOutput `pulumi:"bandwidth"`
	// The mitigation plan of the instance. Valid values:
	BandwidthMode pulumi.StringPtrOutput `pulumi:"bandwidthMode"`
	// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	BaseBandwidth pulumi.StringOutput `pulumi:"baseBandwidth"`
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount pulumi.StringOutput `pulumi:"domainCount"`
	// The mitigation plan of the instance. Default value: `coop`. Valid values:
	EditionSale pulumi.StringOutput `pulumi:"editionSale"`
	// The function plan of the instance. Valid values:
	FunctionVersion pulumi.StringOutput `pulumi:"functionVersion"`
	// (Available since v1.212.0) The IP address of the instance.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Name of the instance. This name can have a string of `1` to `64` characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
	NormalBandwidth pulumi.StringOutput `pulumi:"normalBandwidth"`
	// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
	NormalQps pulumi.StringOutput `pulumi:"normalQps"`
	// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount pulumi.StringOutput `pulumi:"portCount"`
	// The mitigation plan of the instance. Valid values:
	ProductPlan pulumi.StringOutput `pulumi:"productPlan"`
	// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
	ProductType pulumi.StringPtrOutput `pulumi:"productType"`
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	ServiceBandwidth pulumi.StringOutput `pulumi:"serviceBandwidth"`
}

// NewDdosCooInstance registers a new resource with the given unique name, arguments, and options.
func NewDdosCooInstance(ctx *pulumi.Context,
	name string, args *DdosCooInstanceArgs, opts ...pulumi.ResourceOption) (*DdosCooInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainCount == nil {
		return nil, errors.New("invalid value for required argument 'DomainCount'")
	}
	if args.PortCount == nil {
		return nil, errors.New("invalid value for required argument 'PortCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DdosCooInstance
	err := ctx.RegisterResource("alicloud:dns/ddosCooInstance:DdosCooInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDdosCooInstance gets an existing DdosCooInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdosCooInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DdosCooInstanceState, opts ...pulumi.ResourceOption) (*DdosCooInstance, error) {
	var resource DdosCooInstance
	err := ctx.ReadResource("alicloud:dns/ddosCooInstance:DdosCooInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DdosCooInstance resources.
type ddosCooInstanceState struct {
	// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	AddressType *string `pulumi:"addressType"`
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	Bandwidth *string `pulumi:"bandwidth"`
	// The mitigation plan of the instance. Valid values:
	BandwidthMode *string `pulumi:"bandwidthMode"`
	// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	BaseBandwidth *string `pulumi:"baseBandwidth"`
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount *string `pulumi:"domainCount"`
	// The mitigation plan of the instance. Default value: `coop`. Valid values:
	EditionSale *string `pulumi:"editionSale"`
	// The function plan of the instance. Valid values:
	FunctionVersion *string `pulumi:"functionVersion"`
	// (Available since v1.212.0) The IP address of the instance.
	Ip *string `pulumi:"ip"`
	// Name of the instance. This name can have a string of `1` to `64` characters.
	Name *string `pulumi:"name"`
	// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
	NormalBandwidth *string `pulumi:"normalBandwidth"`
	// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
	NormalQps *string `pulumi:"normalQps"`
	// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
	Period *int `pulumi:"period"`
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount *string `pulumi:"portCount"`
	// The mitigation plan of the instance. Valid values:
	ProductPlan *string `pulumi:"productPlan"`
	// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
	ProductType *string `pulumi:"productType"`
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	ServiceBandwidth *string `pulumi:"serviceBandwidth"`
}

type DdosCooInstanceState struct {
	// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	AddressType pulumi.StringPtrInput
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	Bandwidth pulumi.StringPtrInput
	// The mitigation plan of the instance. Valid values:
	BandwidthMode pulumi.StringPtrInput
	// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	BaseBandwidth pulumi.StringPtrInput
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount pulumi.StringPtrInput
	// The mitigation plan of the instance. Default value: `coop`. Valid values:
	EditionSale pulumi.StringPtrInput
	// The function plan of the instance. Valid values:
	FunctionVersion pulumi.StringPtrInput
	// (Available since v1.212.0) The IP address of the instance.
	Ip pulumi.StringPtrInput
	// Name of the instance. This name can have a string of `1` to `64` characters.
	Name pulumi.StringPtrInput
	// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
	NormalBandwidth pulumi.StringPtrInput
	// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
	NormalQps pulumi.StringPtrInput
	// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
	Period pulumi.IntPtrInput
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount pulumi.StringPtrInput
	// The mitigation plan of the instance. Valid values:
	ProductPlan pulumi.StringPtrInput
	// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
	ProductType pulumi.StringPtrInput
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	ServiceBandwidth pulumi.StringPtrInput
}

func (DdosCooInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosCooInstanceState)(nil)).Elem()
}

type ddosCooInstanceArgs struct {
	// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	AddressType *string `pulumi:"addressType"`
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	Bandwidth *string `pulumi:"bandwidth"`
	// The mitigation plan of the instance. Valid values:
	BandwidthMode *string `pulumi:"bandwidthMode"`
	// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	BaseBandwidth *string `pulumi:"baseBandwidth"`
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount string `pulumi:"domainCount"`
	// The mitigation plan of the instance. Default value: `coop`. Valid values:
	EditionSale *string `pulumi:"editionSale"`
	// The function plan of the instance. Valid values:
	FunctionVersion *string `pulumi:"functionVersion"`
	// Name of the instance. This name can have a string of `1` to `64` characters.
	Name *string `pulumi:"name"`
	// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
	NormalBandwidth *string `pulumi:"normalBandwidth"`
	// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
	NormalQps *string `pulumi:"normalQps"`
	// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
	Period *int `pulumi:"period"`
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount string `pulumi:"portCount"`
	// The mitigation plan of the instance. Valid values:
	ProductPlan *string `pulumi:"productPlan"`
	// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
	ProductType *string `pulumi:"productType"`
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	ServiceBandwidth *string `pulumi:"serviceBandwidth"`
}

// The set of arguments for constructing a DdosCooInstance resource.
type DdosCooInstanceArgs struct {
	// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	AddressType pulumi.StringPtrInput
	// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	Bandwidth pulumi.StringPtrInput
	// The mitigation plan of the instance. Valid values:
	BandwidthMode pulumi.StringPtrInput
	// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	BaseBandwidth pulumi.StringPtrInput
	// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	DomainCount pulumi.StringInput
	// The mitigation plan of the instance. Default value: `coop`. Valid values:
	EditionSale pulumi.StringPtrInput
	// The function plan of the instance. Valid values:
	FunctionVersion pulumi.StringPtrInput
	// Name of the instance. This name can have a string of `1` to `64` characters.
	Name pulumi.StringPtrInput
	// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
	NormalBandwidth pulumi.StringPtrInput
	// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
	NormalQps pulumi.StringPtrInput
	// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
	Period pulumi.IntPtrInput
	// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
	PortCount pulumi.StringInput
	// The mitigation plan of the instance. Valid values:
	ProductPlan pulumi.StringPtrInput
	// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
	ProductType pulumi.StringPtrInput
	// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
	ServiceBandwidth pulumi.StringPtrInput
}

func (DdosCooInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosCooInstanceArgs)(nil)).Elem()
}

type DdosCooInstanceInput interface {
	pulumi.Input

	ToDdosCooInstanceOutput() DdosCooInstanceOutput
	ToDdosCooInstanceOutputWithContext(ctx context.Context) DdosCooInstanceOutput
}

func (*DdosCooInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosCooInstance)(nil)).Elem()
}

func (i *DdosCooInstance) ToDdosCooInstanceOutput() DdosCooInstanceOutput {
	return i.ToDdosCooInstanceOutputWithContext(context.Background())
}

func (i *DdosCooInstance) ToDdosCooInstanceOutputWithContext(ctx context.Context) DdosCooInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosCooInstanceOutput)
}

// DdosCooInstanceArrayInput is an input type that accepts DdosCooInstanceArray and DdosCooInstanceArrayOutput values.
// You can construct a concrete instance of `DdosCooInstanceArrayInput` via:
//
//	DdosCooInstanceArray{ DdosCooInstanceArgs{...} }
type DdosCooInstanceArrayInput interface {
	pulumi.Input

	ToDdosCooInstanceArrayOutput() DdosCooInstanceArrayOutput
	ToDdosCooInstanceArrayOutputWithContext(context.Context) DdosCooInstanceArrayOutput
}

type DdosCooInstanceArray []DdosCooInstanceInput

func (DdosCooInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosCooInstance)(nil)).Elem()
}

func (i DdosCooInstanceArray) ToDdosCooInstanceArrayOutput() DdosCooInstanceArrayOutput {
	return i.ToDdosCooInstanceArrayOutputWithContext(context.Background())
}

func (i DdosCooInstanceArray) ToDdosCooInstanceArrayOutputWithContext(ctx context.Context) DdosCooInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosCooInstanceArrayOutput)
}

// DdosCooInstanceMapInput is an input type that accepts DdosCooInstanceMap and DdosCooInstanceMapOutput values.
// You can construct a concrete instance of `DdosCooInstanceMapInput` via:
//
//	DdosCooInstanceMap{ "key": DdosCooInstanceArgs{...} }
type DdosCooInstanceMapInput interface {
	pulumi.Input

	ToDdosCooInstanceMapOutput() DdosCooInstanceMapOutput
	ToDdosCooInstanceMapOutputWithContext(context.Context) DdosCooInstanceMapOutput
}

type DdosCooInstanceMap map[string]DdosCooInstanceInput

func (DdosCooInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosCooInstance)(nil)).Elem()
}

func (i DdosCooInstanceMap) ToDdosCooInstanceMapOutput() DdosCooInstanceMapOutput {
	return i.ToDdosCooInstanceMapOutputWithContext(context.Background())
}

func (i DdosCooInstanceMap) ToDdosCooInstanceMapOutputWithContext(ctx context.Context) DdosCooInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosCooInstanceMapOutput)
}

type DdosCooInstanceOutput struct{ *pulumi.OutputState }

func (DdosCooInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosCooInstance)(nil)).Elem()
}

func (o DdosCooInstanceOutput) ToDdosCooInstanceOutput() DdosCooInstanceOutput {
	return o
}

func (o DdosCooInstanceOutput) ToDdosCooInstanceOutputWithContext(ctx context.Context) DdosCooInstanceOutput {
	return o
}

// The IP version of the IP address. Default value: `Ipv4`. Valid values: `Ipv4`, `Ipv6`. **NOTE:** `addressType` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
func (o DdosCooInstanceOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.AddressType }).(pulumi.StringOutput)
}

// Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `bandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
func (o DdosCooInstanceOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

// The mitigation plan of the instance. Valid values:
func (o DdosCooInstanceOutput) BandwidthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringPtrOutput { return v.BandwidthMode }).(pulumi.StringPtrOutput)
}

// Base defend bandwidth of the instance. Valid values: `30`, `60`, `100`, `300`, `400`, `500`, `600`. The unit is Gbps. Only support upgrade. **NOTE:** `baseBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
func (o DdosCooInstanceOutput) BaseBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.BaseBandwidth }).(pulumi.StringOutput)
}

// Domain retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
func (o DdosCooInstanceOutput) DomainCount() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.DomainCount }).(pulumi.StringOutput)
}

// The mitigation plan of the instance. Default value: `coop`. Valid values:
func (o DdosCooInstanceOutput) EditionSale() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.EditionSale }).(pulumi.StringOutput)
}

// The function plan of the instance. Valid values:
func (o DdosCooInstanceOutput) FunctionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.FunctionVersion }).(pulumi.StringOutput)
}

// (Available since v1.212.0) The IP address of the instance.
func (o DdosCooInstanceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Name of the instance. This name can have a string of `1` to `64` characters.
func (o DdosCooInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The clean bandwidth provided by the instance. **NOTE:** `normalBandwidth` is valid only when `productType` is set to `ddosDip`.
func (o DdosCooInstanceOutput) NormalBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.NormalBandwidth }).(pulumi.StringOutput)
}

// The clean QPS provided by the instance. **NOTE:** `normalQps` is valid only when `productType` is set to `ddosDip`.
func (o DdosCooInstanceOutput) NormalQps() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.NormalQps }).(pulumi.StringOutput)
}

// The duration that you will buy DdosCoo instance (in month). Valid values: [1~9], `12`, `24`, `36`. Default value: `1`. At present, the provider does not support modify `period`.
func (o DdosCooInstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Port retransmission rule count of the instance. At least 50. Increase 5 per step, such as 55, 60, 65. Only support upgrade.
func (o DdosCooInstanceOutput) PortCount() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.PortCount }).(pulumi.StringOutput)
}

// The mitigation plan of the instance. Valid values:
func (o DdosCooInstanceOutput) ProductPlan() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.ProductPlan }).(pulumi.StringOutput)
}

// The product type for purchasing DDOSCOO instances used to differ different account type. Default value: `ddoscoo`. Valid values:
func (o DdosCooInstanceOutput) ProductType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringPtrOutput { return v.ProductType }).(pulumi.StringPtrOutput)
}

// Business bandwidth of the instance. At leaset 100. Increased 100 per step, such as 100, 200, 300. The unit is Mbps. Only support upgrade. **NOTE:** `serviceBandwidth` is valid only when `productType` is set to `ddoscoo` or `ddoscooIntl`.
func (o DdosCooInstanceOutput) ServiceBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosCooInstance) pulumi.StringOutput { return v.ServiceBandwidth }).(pulumi.StringOutput)
}

type DdosCooInstanceArrayOutput struct{ *pulumi.OutputState }

func (DdosCooInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosCooInstance)(nil)).Elem()
}

func (o DdosCooInstanceArrayOutput) ToDdosCooInstanceArrayOutput() DdosCooInstanceArrayOutput {
	return o
}

func (o DdosCooInstanceArrayOutput) ToDdosCooInstanceArrayOutputWithContext(ctx context.Context) DdosCooInstanceArrayOutput {
	return o
}

func (o DdosCooInstanceArrayOutput) Index(i pulumi.IntInput) DdosCooInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DdosCooInstance {
		return vs[0].([]*DdosCooInstance)[vs[1].(int)]
	}).(DdosCooInstanceOutput)
}

type DdosCooInstanceMapOutput struct{ *pulumi.OutputState }

func (DdosCooInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosCooInstance)(nil)).Elem()
}

func (o DdosCooInstanceMapOutput) ToDdosCooInstanceMapOutput() DdosCooInstanceMapOutput {
	return o
}

func (o DdosCooInstanceMapOutput) ToDdosCooInstanceMapOutputWithContext(ctx context.Context) DdosCooInstanceMapOutput {
	return o
}

func (o DdosCooInstanceMapOutput) MapIndex(k pulumi.StringInput) DdosCooInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DdosCooInstance {
		return vs[0].(map[string]*DdosCooInstance)[vs[1].(string)]
	}).(DdosCooInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DdosCooInstanceInput)(nil)).Elem(), &DdosCooInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosCooInstanceArrayInput)(nil)).Elem(), DdosCooInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosCooInstanceMapInput)(nil)).Elem(), DdosCooInstanceMap{})
	pulumi.RegisterOutputType(DdosCooInstanceOutput{})
	pulumi.RegisterOutputType(DdosCooInstanceArrayOutput{})
	pulumi.RegisterOutputType(DdosCooInstanceMapOutput{})
}
