// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cassandra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cassandra Backup Plan resource.
//
// For information about Cassandra Backup Plan and how to use it, see [What is Backup Plan](https://www.alibabacloud.com/help/doc-detail/157522.htm).
//
// > **NOTE:** Available in v1.128.0+.
//
// ## Import
//
// Cassandra Backup Plan can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cassandra/backupPlan:BackupPlan example <cluster_id>:<data_center_id>
// ```
type BackupPlan struct {
	pulumi.CustomResourceState

	// Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
	BackupPeriod pulumi.StringOutput `pulumi:"backupPeriod"`
	// The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
	BackupTime pulumi.StringOutput `pulumi:"backupTime"`
	// The ID of the cluster for the backup.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The ID of the data center for the backup in the cluster.
	DataCenterId pulumi.StringOutput `pulumi:"dataCenterId"`
	// The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
	RetentionPeriod pulumi.IntOutput `pulumi:"retentionPeriod"`
}

// NewBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewBackupPlan(ctx *pulumi.Context,
	name string, args *BackupPlanArgs, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupTime == nil {
		return nil, errors.New("invalid value for required argument 'BackupTime'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.DataCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DataCenterId'")
	}
	var resource BackupPlan
	err := ctx.RegisterResource("alicloud:cassandra/backupPlan:BackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlan gets an existing BackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanState, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	var resource BackupPlan
	err := ctx.ReadResource("alicloud:cassandra/backupPlan:BackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlan resources.
type backupPlanState struct {
	// Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
	Active *bool `pulumi:"active"`
	// The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
	BackupPeriod *string `pulumi:"backupPeriod"`
	// The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
	BackupTime *string `pulumi:"backupTime"`
	// The ID of the cluster for the backup.
	ClusterId *string `pulumi:"clusterId"`
	// The ID of the data center for the backup in the cluster.
	DataCenterId *string `pulumi:"dataCenterId"`
	// The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

type BackupPlanState struct {
	// Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
	Active pulumi.BoolPtrInput
	// The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
	BackupPeriod pulumi.StringPtrInput
	// The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
	BackupTime pulumi.StringPtrInput
	// The ID of the cluster for the backup.
	ClusterId pulumi.StringPtrInput
	// The ID of the data center for the backup in the cluster.
	DataCenterId pulumi.StringPtrInput
	// The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
	RetentionPeriod pulumi.IntPtrInput
}

func (BackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanState)(nil)).Elem()
}

type backupPlanArgs struct {
	// Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
	Active *bool `pulumi:"active"`
	// The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
	BackupPeriod *string `pulumi:"backupPeriod"`
	// The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
	BackupTime string `pulumi:"backupTime"`
	// The ID of the cluster for the backup.
	ClusterId string `pulumi:"clusterId"`
	// The ID of the data center for the backup in the cluster.
	DataCenterId string `pulumi:"dataCenterId"`
	// The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// The set of arguments for constructing a BackupPlan resource.
type BackupPlanArgs struct {
	// Specifies whether to activate the backup plan. Valid values: `True`, `False`. Default value: `True`.
	Active pulumi.BoolPtrInput
	// The backup cycle. Valid values: `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday`, `Wednesday`.
	BackupPeriod pulumi.StringPtrInput
	// The start time of the backup task each day. The time is displayed in UTC and denoted by Z.
	BackupTime pulumi.StringInput
	// The ID of the cluster for the backup.
	ClusterId pulumi.StringInput
	// The ID of the data center for the backup in the cluster.
	DataCenterId pulumi.StringInput
	// The duration for which you want to retain the backup. Valid values: 1 to 30. Unit: days. Default value: `30`.
	RetentionPeriod pulumi.IntPtrInput
}

func (BackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanArgs)(nil)).Elem()
}

type BackupPlanInput interface {
	pulumi.Input

	ToBackupPlanOutput() BackupPlanOutput
	ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput
}

func (*BackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (i *BackupPlan) ToBackupPlanOutput() BackupPlanOutput {
	return i.ToBackupPlanOutputWithContext(context.Background())
}

func (i *BackupPlan) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanOutput)
}

// BackupPlanArrayInput is an input type that accepts BackupPlanArray and BackupPlanArrayOutput values.
// You can construct a concrete instance of `BackupPlanArrayInput` via:
//
//          BackupPlanArray{ BackupPlanArgs{...} }
type BackupPlanArrayInput interface {
	pulumi.Input

	ToBackupPlanArrayOutput() BackupPlanArrayOutput
	ToBackupPlanArrayOutputWithContext(context.Context) BackupPlanArrayOutput
}

type BackupPlanArray []BackupPlanInput

func (BackupPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlan)(nil)).Elem()
}

func (i BackupPlanArray) ToBackupPlanArrayOutput() BackupPlanArrayOutput {
	return i.ToBackupPlanArrayOutputWithContext(context.Background())
}

func (i BackupPlanArray) ToBackupPlanArrayOutputWithContext(ctx context.Context) BackupPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanArrayOutput)
}

// BackupPlanMapInput is an input type that accepts BackupPlanMap and BackupPlanMapOutput values.
// You can construct a concrete instance of `BackupPlanMapInput` via:
//
//          BackupPlanMap{ "key": BackupPlanArgs{...} }
type BackupPlanMapInput interface {
	pulumi.Input

	ToBackupPlanMapOutput() BackupPlanMapOutput
	ToBackupPlanMapOutputWithContext(context.Context) BackupPlanMapOutput
}

type BackupPlanMap map[string]BackupPlanInput

func (BackupPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlan)(nil)).Elem()
}

func (i BackupPlanMap) ToBackupPlanMapOutput() BackupPlanMapOutput {
	return i.ToBackupPlanMapOutputWithContext(context.Background())
}

func (i BackupPlanMap) ToBackupPlanMapOutputWithContext(ctx context.Context) BackupPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanMapOutput)
}

type BackupPlanOutput struct{ *pulumi.OutputState }

func (BackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (o BackupPlanOutput) ToBackupPlanOutput() BackupPlanOutput {
	return o
}

func (o BackupPlanOutput) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return o
}

type BackupPlanArrayOutput struct{ *pulumi.OutputState }

func (BackupPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPlan)(nil)).Elem()
}

func (o BackupPlanArrayOutput) ToBackupPlanArrayOutput() BackupPlanArrayOutput {
	return o
}

func (o BackupPlanArrayOutput) ToBackupPlanArrayOutputWithContext(ctx context.Context) BackupPlanArrayOutput {
	return o
}

func (o BackupPlanArrayOutput) Index(i pulumi.IntInput) BackupPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPlan {
		return vs[0].([]*BackupPlan)[vs[1].(int)]
	}).(BackupPlanOutput)
}

type BackupPlanMapOutput struct{ *pulumi.OutputState }

func (BackupPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPlan)(nil)).Elem()
}

func (o BackupPlanMapOutput) ToBackupPlanMapOutput() BackupPlanMapOutput {
	return o
}

func (o BackupPlanMapOutput) ToBackupPlanMapOutputWithContext(ctx context.Context) BackupPlanMapOutput {
	return o
}

func (o BackupPlanMapOutput) MapIndex(k pulumi.StringInput) BackupPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPlan {
		return vs[0].(map[string]*BackupPlan)[vs[1].(string)]
	}).(BackupPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanInput)(nil)).Elem(), &BackupPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanArrayInput)(nil)).Elem(), BackupPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanMapInput)(nil)).Elem(), BackupPlanMap{})
	pulumi.RegisterOutputType(BackupPlanOutput{})
	pulumi.RegisterOutputType(BackupPlanArrayOutput{})
	pulumi.RegisterOutputType(BackupPlanMapOutput{})
}
