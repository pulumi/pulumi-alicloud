// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tag

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Tag Meta Tag resource.
//
// For information about Tag Meta Tag and how to use it,
// see [What is Meta Tag](https://www.alibabacloud.com/help/en/resource-management/latest/createtags).
//
// > **NOTE:** Available since v1.209.0.
//
// > **NOTE:** Meta Tag Only Support `cn-hangzhou` Region
//
// ## Import
//
// Tag Meta Tag can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:tag/metaTag:MetaTag example <regionId>:<key>
//
// ```
type MetaTag struct {
	pulumi.CustomResourceState

	// The key of the tag meta tag. key must be 1 to 128 characters in length.
	Key pulumi.StringOutput `pulumi:"key"`
	// The values of the tag meta tag.
	Values pulumi.StringArrayOutput `pulumi:"values"`
}

// NewMetaTag registers a new resource with the given unique name, arguments, and options.
func NewMetaTag(ctx *pulumi.Context,
	name string, args *MetaTagArgs, opts ...pulumi.ResourceOption) (*MetaTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetaTag
	err := ctx.RegisterResource("alicloud:tag/metaTag:MetaTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetaTag gets an existing MetaTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetaTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetaTagState, opts ...pulumi.ResourceOption) (*MetaTag, error) {
	var resource MetaTag
	err := ctx.ReadResource("alicloud:tag/metaTag:MetaTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetaTag resources.
type metaTagState struct {
	// The key of the tag meta tag. key must be 1 to 128 characters in length.
	Key *string `pulumi:"key"`
	// The values of the tag meta tag.
	Values []string `pulumi:"values"`
}

type MetaTagState struct {
	// The key of the tag meta tag. key must be 1 to 128 characters in length.
	Key pulumi.StringPtrInput
	// The values of the tag meta tag.
	Values pulumi.StringArrayInput
}

func (MetaTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*metaTagState)(nil)).Elem()
}

type metaTagArgs struct {
	// The key of the tag meta tag. key must be 1 to 128 characters in length.
	Key string `pulumi:"key"`
	// The values of the tag meta tag.
	Values []string `pulumi:"values"`
}

// The set of arguments for constructing a MetaTag resource.
type MetaTagArgs struct {
	// The key of the tag meta tag. key must be 1 to 128 characters in length.
	Key pulumi.StringInput
	// The values of the tag meta tag.
	Values pulumi.StringArrayInput
}

func (MetaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metaTagArgs)(nil)).Elem()
}

type MetaTagInput interface {
	pulumi.Input

	ToMetaTagOutput() MetaTagOutput
	ToMetaTagOutputWithContext(ctx context.Context) MetaTagOutput
}

func (*MetaTag) ElementType() reflect.Type {
	return reflect.TypeOf((**MetaTag)(nil)).Elem()
}

func (i *MetaTag) ToMetaTagOutput() MetaTagOutput {
	return i.ToMetaTagOutputWithContext(context.Background())
}

func (i *MetaTag) ToMetaTagOutputWithContext(ctx context.Context) MetaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaTagOutput)
}

func (i *MetaTag) ToOutput(ctx context.Context) pulumix.Output[*MetaTag] {
	return pulumix.Output[*MetaTag]{
		OutputState: i.ToMetaTagOutputWithContext(ctx).OutputState,
	}
}

// MetaTagArrayInput is an input type that accepts MetaTagArray and MetaTagArrayOutput values.
// You can construct a concrete instance of `MetaTagArrayInput` via:
//
//	MetaTagArray{ MetaTagArgs{...} }
type MetaTagArrayInput interface {
	pulumi.Input

	ToMetaTagArrayOutput() MetaTagArrayOutput
	ToMetaTagArrayOutputWithContext(context.Context) MetaTagArrayOutput
}

type MetaTagArray []MetaTagInput

func (MetaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetaTag)(nil)).Elem()
}

func (i MetaTagArray) ToMetaTagArrayOutput() MetaTagArrayOutput {
	return i.ToMetaTagArrayOutputWithContext(context.Background())
}

func (i MetaTagArray) ToMetaTagArrayOutputWithContext(ctx context.Context) MetaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaTagArrayOutput)
}

func (i MetaTagArray) ToOutput(ctx context.Context) pulumix.Output[[]*MetaTag] {
	return pulumix.Output[[]*MetaTag]{
		OutputState: i.ToMetaTagArrayOutputWithContext(ctx).OutputState,
	}
}

// MetaTagMapInput is an input type that accepts MetaTagMap and MetaTagMapOutput values.
// You can construct a concrete instance of `MetaTagMapInput` via:
//
//	MetaTagMap{ "key": MetaTagArgs{...} }
type MetaTagMapInput interface {
	pulumi.Input

	ToMetaTagMapOutput() MetaTagMapOutput
	ToMetaTagMapOutputWithContext(context.Context) MetaTagMapOutput
}

type MetaTagMap map[string]MetaTagInput

func (MetaTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetaTag)(nil)).Elem()
}

func (i MetaTagMap) ToMetaTagMapOutput() MetaTagMapOutput {
	return i.ToMetaTagMapOutputWithContext(context.Background())
}

func (i MetaTagMap) ToMetaTagMapOutputWithContext(ctx context.Context) MetaTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaTagMapOutput)
}

func (i MetaTagMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetaTag] {
	return pulumix.Output[map[string]*MetaTag]{
		OutputState: i.ToMetaTagMapOutputWithContext(ctx).OutputState,
	}
}

type MetaTagOutput struct{ *pulumi.OutputState }

func (MetaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetaTag)(nil)).Elem()
}

func (o MetaTagOutput) ToMetaTagOutput() MetaTagOutput {
	return o
}

func (o MetaTagOutput) ToMetaTagOutputWithContext(ctx context.Context) MetaTagOutput {
	return o
}

func (o MetaTagOutput) ToOutput(ctx context.Context) pulumix.Output[*MetaTag] {
	return pulumix.Output[*MetaTag]{
		OutputState: o.OutputState,
	}
}

// The key of the tag meta tag. key must be 1 to 128 characters in length.
func (o MetaTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *MetaTag) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The values of the tag meta tag.
func (o MetaTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetaTag) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

type MetaTagArrayOutput struct{ *pulumi.OutputState }

func (MetaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetaTag)(nil)).Elem()
}

func (o MetaTagArrayOutput) ToMetaTagArrayOutput() MetaTagArrayOutput {
	return o
}

func (o MetaTagArrayOutput) ToMetaTagArrayOutputWithContext(ctx context.Context) MetaTagArrayOutput {
	return o
}

func (o MetaTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MetaTag] {
	return pulumix.Output[[]*MetaTag]{
		OutputState: o.OutputState,
	}
}

func (o MetaTagArrayOutput) Index(i pulumi.IntInput) MetaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetaTag {
		return vs[0].([]*MetaTag)[vs[1].(int)]
	}).(MetaTagOutput)
}

type MetaTagMapOutput struct{ *pulumi.OutputState }

func (MetaTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetaTag)(nil)).Elem()
}

func (o MetaTagMapOutput) ToMetaTagMapOutput() MetaTagMapOutput {
	return o
}

func (o MetaTagMapOutput) ToMetaTagMapOutputWithContext(ctx context.Context) MetaTagMapOutput {
	return o
}

func (o MetaTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MetaTag] {
	return pulumix.Output[map[string]*MetaTag]{
		OutputState: o.OutputState,
	}
}

func (o MetaTagMapOutput) MapIndex(k pulumi.StringInput) MetaTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetaTag {
		return vs[0].(map[string]*MetaTag)[vs[1].(string)]
	}).(MetaTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetaTagInput)(nil)).Elem(), &MetaTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetaTagArrayInput)(nil)).Elem(), MetaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetaTagMapInput)(nil)).Elem(), MetaTagMap{})
	pulumi.RegisterOutputType(MetaTagOutput{})
	pulumi.RegisterOutputType(MetaTagArrayOutput{})
	pulumi.RegisterOutputType(MetaTagMapOutput{})
}
