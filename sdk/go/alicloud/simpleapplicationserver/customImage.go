// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package simpleapplicationserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Simple Application Server Custom Image resource.
//
// For information about Simple Application Server Custom Image and how to use it, see [What is Custom Image](https://www.alibabacloud.com/help/zh/doc-detail/333535.htm).
//
// > **NOTE:** Available in v1.143.0+.
//
// ## Import
//
// Simple Application Server Custom Image can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:simpleapplicationserver/customImage:CustomImage example <id>
// ```
type CustomImage struct {
	pulumi.CustomResourceState

	// The name of the resource. The name must be `2` to `128` characters in length. It must start with a letter or a number. It can contain letters, digits, colons (:), underscores (_) and hyphens (-).
	CustomImageName pulumi.StringOutput `pulumi:"customImageName"`
	// The description of the Custom Image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The Shared status of the Custom Image. Valid values: `Share`, `UnShare`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The ID of the system snapshot.
	SystemSnapshotId pulumi.StringOutput `pulumi:"systemSnapshotId"`
}

// NewCustomImage registers a new resource with the given unique name, arguments, and options.
func NewCustomImage(ctx *pulumi.Context,
	name string, args *CustomImageArgs, opts ...pulumi.ResourceOption) (*CustomImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomImageName == nil {
		return nil, errors.New("invalid value for required argument 'CustomImageName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.SystemSnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SystemSnapshotId'")
	}
	var resource CustomImage
	err := ctx.RegisterResource("alicloud:simpleapplicationserver/customImage:CustomImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomImage gets an existing CustomImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomImageState, opts ...pulumi.ResourceOption) (*CustomImage, error) {
	var resource CustomImage
	err := ctx.ReadResource("alicloud:simpleapplicationserver/customImage:CustomImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomImage resources.
type customImageState struct {
	// The name of the resource. The name must be `2` to `128` characters in length. It must start with a letter or a number. It can contain letters, digits, colons (:), underscores (_) and hyphens (-).
	CustomImageName *string `pulumi:"customImageName"`
	// The description of the Custom Image.
	Description *string `pulumi:"description"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The Shared status of the Custom Image. Valid values: `Share`, `UnShare`.
	Status *string `pulumi:"status"`
	// The ID of the system snapshot.
	SystemSnapshotId *string `pulumi:"systemSnapshotId"`
}

type CustomImageState struct {
	// The name of the resource. The name must be `2` to `128` characters in length. It must start with a letter or a number. It can contain letters, digits, colons (:), underscores (_) and hyphens (-).
	CustomImageName pulumi.StringPtrInput
	// The description of the Custom Image.
	Description pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// The Shared status of the Custom Image. Valid values: `Share`, `UnShare`.
	Status pulumi.StringPtrInput
	// The ID of the system snapshot.
	SystemSnapshotId pulumi.StringPtrInput
}

func (CustomImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*customImageState)(nil)).Elem()
}

type customImageArgs struct {
	// The name of the resource. The name must be `2` to `128` characters in length. It must start with a letter or a number. It can contain letters, digits, colons (:), underscores (_) and hyphens (-).
	CustomImageName string `pulumi:"customImageName"`
	// The description of the Custom Image.
	Description *string `pulumi:"description"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The Shared status of the Custom Image. Valid values: `Share`, `UnShare`.
	Status *string `pulumi:"status"`
	// The ID of the system snapshot.
	SystemSnapshotId string `pulumi:"systemSnapshotId"`
}

// The set of arguments for constructing a CustomImage resource.
type CustomImageArgs struct {
	// The name of the resource. The name must be `2` to `128` characters in length. It must start with a letter or a number. It can contain letters, digits, colons (:), underscores (_) and hyphens (-).
	CustomImageName pulumi.StringInput
	// The description of the Custom Image.
	Description pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringInput
	// The Shared status of the Custom Image. Valid values: `Share`, `UnShare`.
	Status pulumi.StringPtrInput
	// The ID of the system snapshot.
	SystemSnapshotId pulumi.StringInput
}

func (CustomImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customImageArgs)(nil)).Elem()
}

type CustomImageInput interface {
	pulumi.Input

	ToCustomImageOutput() CustomImageOutput
	ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput
}

func (*CustomImage) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomImage)(nil)).Elem()
}

func (i *CustomImage) ToCustomImageOutput() CustomImageOutput {
	return i.ToCustomImageOutputWithContext(context.Background())
}

func (i *CustomImage) ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomImageOutput)
}

// CustomImageArrayInput is an input type that accepts CustomImageArray and CustomImageArrayOutput values.
// You can construct a concrete instance of `CustomImageArrayInput` via:
//
//          CustomImageArray{ CustomImageArgs{...} }
type CustomImageArrayInput interface {
	pulumi.Input

	ToCustomImageArrayOutput() CustomImageArrayOutput
	ToCustomImageArrayOutputWithContext(context.Context) CustomImageArrayOutput
}

type CustomImageArray []CustomImageInput

func (CustomImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomImage)(nil)).Elem()
}

func (i CustomImageArray) ToCustomImageArrayOutput() CustomImageArrayOutput {
	return i.ToCustomImageArrayOutputWithContext(context.Background())
}

func (i CustomImageArray) ToCustomImageArrayOutputWithContext(ctx context.Context) CustomImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomImageArrayOutput)
}

// CustomImageMapInput is an input type that accepts CustomImageMap and CustomImageMapOutput values.
// You can construct a concrete instance of `CustomImageMapInput` via:
//
//          CustomImageMap{ "key": CustomImageArgs{...} }
type CustomImageMapInput interface {
	pulumi.Input

	ToCustomImageMapOutput() CustomImageMapOutput
	ToCustomImageMapOutputWithContext(context.Context) CustomImageMapOutput
}

type CustomImageMap map[string]CustomImageInput

func (CustomImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomImage)(nil)).Elem()
}

func (i CustomImageMap) ToCustomImageMapOutput() CustomImageMapOutput {
	return i.ToCustomImageMapOutputWithContext(context.Background())
}

func (i CustomImageMap) ToCustomImageMapOutputWithContext(ctx context.Context) CustomImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomImageMapOutput)
}

type CustomImageOutput struct{ *pulumi.OutputState }

func (CustomImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomImage)(nil)).Elem()
}

func (o CustomImageOutput) ToCustomImageOutput() CustomImageOutput {
	return o
}

func (o CustomImageOutput) ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput {
	return o
}

type CustomImageArrayOutput struct{ *pulumi.OutputState }

func (CustomImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomImage)(nil)).Elem()
}

func (o CustomImageArrayOutput) ToCustomImageArrayOutput() CustomImageArrayOutput {
	return o
}

func (o CustomImageArrayOutput) ToCustomImageArrayOutputWithContext(ctx context.Context) CustomImageArrayOutput {
	return o
}

func (o CustomImageArrayOutput) Index(i pulumi.IntInput) CustomImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomImage {
		return vs[0].([]*CustomImage)[vs[1].(int)]
	}).(CustomImageOutput)
}

type CustomImageMapOutput struct{ *pulumi.OutputState }

func (CustomImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomImage)(nil)).Elem()
}

func (o CustomImageMapOutput) ToCustomImageMapOutput() CustomImageMapOutput {
	return o
}

func (o CustomImageMapOutput) ToCustomImageMapOutputWithContext(ctx context.Context) CustomImageMapOutput {
	return o
}

func (o CustomImageMapOutput) MapIndex(k pulumi.StringInput) CustomImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomImage {
		return vs[0].(map[string]*CustomImage)[vs[1].(string)]
	}).(CustomImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomImageInput)(nil)).Elem(), &CustomImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomImageArrayInput)(nil)).Elem(), CustomImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomImageMapInput)(nil)).Elem(), CustomImageMap{})
	pulumi.RegisterOutputType(CustomImageOutput{})
	pulumi.RegisterOutputType(CustomImageArrayOutput{})
	pulumi.RegisterOutputType(CustomImageMapOutput{})
}
