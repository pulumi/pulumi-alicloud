// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quotas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Quotas Template Service can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:quotas/templateService:TemplateService example
// ```
type TemplateService struct {
	pulumi.CustomResourceState

	// Status of the quota template. Valid values:
	// - `-1`: disabled.
	ServiceStatus pulumi.IntOutput `pulumi:"serviceStatus"`
}

// NewTemplateService registers a new resource with the given unique name, arguments, and options.
func NewTemplateService(ctx *pulumi.Context,
	name string, args *TemplateServiceArgs, opts ...pulumi.ResourceOption) (*TemplateService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceStatus == nil {
		return nil, errors.New("invalid value for required argument 'ServiceStatus'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemplateService
	err := ctx.RegisterResource("alicloud:quotas/templateService:TemplateService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateService gets an existing TemplateService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateServiceState, opts ...pulumi.ResourceOption) (*TemplateService, error) {
	var resource TemplateService
	err := ctx.ReadResource("alicloud:quotas/templateService:TemplateService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateService resources.
type templateServiceState struct {
	// Status of the quota template. Valid values:
	// - `-1`: disabled.
	ServiceStatus *int `pulumi:"serviceStatus"`
}

type TemplateServiceState struct {
	// Status of the quota template. Valid values:
	// - `-1`: disabled.
	ServiceStatus pulumi.IntPtrInput
}

func (TemplateServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateServiceState)(nil)).Elem()
}

type templateServiceArgs struct {
	// Status of the quota template. Valid values:
	// - `-1`: disabled.
	ServiceStatus int `pulumi:"serviceStatus"`
}

// The set of arguments for constructing a TemplateService resource.
type TemplateServiceArgs struct {
	// Status of the quota template. Valid values:
	// - `-1`: disabled.
	ServiceStatus pulumi.IntInput
}

func (TemplateServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateServiceArgs)(nil)).Elem()
}

type TemplateServiceInput interface {
	pulumi.Input

	ToTemplateServiceOutput() TemplateServiceOutput
	ToTemplateServiceOutputWithContext(ctx context.Context) TemplateServiceOutput
}

func (*TemplateService) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateService)(nil)).Elem()
}

func (i *TemplateService) ToTemplateServiceOutput() TemplateServiceOutput {
	return i.ToTemplateServiceOutputWithContext(context.Background())
}

func (i *TemplateService) ToTemplateServiceOutputWithContext(ctx context.Context) TemplateServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateServiceOutput)
}

// TemplateServiceArrayInput is an input type that accepts TemplateServiceArray and TemplateServiceArrayOutput values.
// You can construct a concrete instance of `TemplateServiceArrayInput` via:
//
//	TemplateServiceArray{ TemplateServiceArgs{...} }
type TemplateServiceArrayInput interface {
	pulumi.Input

	ToTemplateServiceArrayOutput() TemplateServiceArrayOutput
	ToTemplateServiceArrayOutputWithContext(context.Context) TemplateServiceArrayOutput
}

type TemplateServiceArray []TemplateServiceInput

func (TemplateServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateService)(nil)).Elem()
}

func (i TemplateServiceArray) ToTemplateServiceArrayOutput() TemplateServiceArrayOutput {
	return i.ToTemplateServiceArrayOutputWithContext(context.Background())
}

func (i TemplateServiceArray) ToTemplateServiceArrayOutputWithContext(ctx context.Context) TemplateServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateServiceArrayOutput)
}

// TemplateServiceMapInput is an input type that accepts TemplateServiceMap and TemplateServiceMapOutput values.
// You can construct a concrete instance of `TemplateServiceMapInput` via:
//
//	TemplateServiceMap{ "key": TemplateServiceArgs{...} }
type TemplateServiceMapInput interface {
	pulumi.Input

	ToTemplateServiceMapOutput() TemplateServiceMapOutput
	ToTemplateServiceMapOutputWithContext(context.Context) TemplateServiceMapOutput
}

type TemplateServiceMap map[string]TemplateServiceInput

func (TemplateServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateService)(nil)).Elem()
}

func (i TemplateServiceMap) ToTemplateServiceMapOutput() TemplateServiceMapOutput {
	return i.ToTemplateServiceMapOutputWithContext(context.Background())
}

func (i TemplateServiceMap) ToTemplateServiceMapOutputWithContext(ctx context.Context) TemplateServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateServiceMapOutput)
}

type TemplateServiceOutput struct{ *pulumi.OutputState }

func (TemplateServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateService)(nil)).Elem()
}

func (o TemplateServiceOutput) ToTemplateServiceOutput() TemplateServiceOutput {
	return o
}

func (o TemplateServiceOutput) ToTemplateServiceOutputWithContext(ctx context.Context) TemplateServiceOutput {
	return o
}

// Status of the quota template. Valid values:
// - `-1`: disabled.
func (o TemplateServiceOutput) ServiceStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *TemplateService) pulumi.IntOutput { return v.ServiceStatus }).(pulumi.IntOutput)
}

type TemplateServiceArrayOutput struct{ *pulumi.OutputState }

func (TemplateServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateService)(nil)).Elem()
}

func (o TemplateServiceArrayOutput) ToTemplateServiceArrayOutput() TemplateServiceArrayOutput {
	return o
}

func (o TemplateServiceArrayOutput) ToTemplateServiceArrayOutputWithContext(ctx context.Context) TemplateServiceArrayOutput {
	return o
}

func (o TemplateServiceArrayOutput) Index(i pulumi.IntInput) TemplateServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemplateService {
		return vs[0].([]*TemplateService)[vs[1].(int)]
	}).(TemplateServiceOutput)
}

type TemplateServiceMapOutput struct{ *pulumi.OutputState }

func (TemplateServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateService)(nil)).Elem()
}

func (o TemplateServiceMapOutput) ToTemplateServiceMapOutput() TemplateServiceMapOutput {
	return o
}

func (o TemplateServiceMapOutput) ToTemplateServiceMapOutputWithContext(ctx context.Context) TemplateServiceMapOutput {
	return o
}

func (o TemplateServiceMapOutput) MapIndex(k pulumi.StringInput) TemplateServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemplateService {
		return vs[0].(map[string]*TemplateService)[vs[1].(string)]
	}).(TemplateServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateServiceInput)(nil)).Elem(), &TemplateService{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateServiceArrayInput)(nil)).Elem(), TemplateServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateServiceMapInput)(nil)).Elem(), TemplateServiceMap{})
	pulumi.RegisterOutputType(TemplateServiceOutput{})
	pulumi.RegisterOutputType(TemplateServiceArrayOutput{})
	pulumi.RegisterOutputType(TemplateServiceMapOutput{})
}
