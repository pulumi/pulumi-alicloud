// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the Mse Znodes of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.162.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ids, err := mse.GetZnodes(ctx, &mse.GetZnodesArgs{
//				ClusterId: "example_value",
//				Path:      "/",
//				Ids: []string{
//					"example_value-1",
//					"example_value-2",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("mseZnodeId1", ids.Znodes[0].Id)
//			nameRegex, err := mse.GetZnodes(ctx, &mse.GetZnodesArgs{
//				Path:      "/",
//				ClusterId: "example_value",
//				NameRegex: pulumi.StringRef("^my-Znode"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("mseZnodeId2", nameRegex.Znodes[0].Id)
//			return nil
//		})
//	}
//
// ```
func GetZnodes(ctx *pulumi.Context, args *GetZnodesArgs, opts ...pulumi.InvokeOption) (*GetZnodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetZnodesResult
	err := ctx.Invoke("alicloud:mse/getZnodes:getZnodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZnodes.
type GetZnodesArgs struct {
	// The language type of the returned information. Valid values: `zh` or `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The ID of the Cluster.
	ClusterId string `pulumi:"clusterId"`
	// A list of Znode IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by Znode name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The Node path.
	Path string `pulumi:"path"`
}

// A collection of values returned by getZnodes.
type GetZnodesResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	ClusterId      string  `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id         string           `pulumi:"id"`
	Ids        []string         `pulumi:"ids"`
	NameRegex  *string          `pulumi:"nameRegex"`
	Names      []string         `pulumi:"names"`
	OutputFile *string          `pulumi:"outputFile"`
	Path       string           `pulumi:"path"`
	Znodes     []GetZnodesZnode `pulumi:"znodes"`
}

func GetZnodesOutput(ctx *pulumi.Context, args GetZnodesOutputArgs, opts ...pulumi.InvokeOption) GetZnodesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetZnodesResult, error) {
			args := v.(GetZnodesArgs)
			r, err := GetZnodes(ctx, &args, opts...)
			var s GetZnodesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetZnodesResultOutput)
}

// A collection of arguments for invoking getZnodes.
type GetZnodesOutputArgs struct {
	// The language type of the returned information. Valid values: `zh` or `en`.
	AcceptLanguage pulumi.StringPtrInput `pulumi:"acceptLanguage"`
	// The ID of the Cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// A list of Znode IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by Znode name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The Node path.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetZnodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZnodesArgs)(nil)).Elem()
}

// A collection of values returned by getZnodes.
type GetZnodesResultOutput struct{ *pulumi.OutputState }

func (GetZnodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZnodesResult)(nil)).Elem()
}

func (o GetZnodesResultOutput) ToGetZnodesResultOutput() GetZnodesResultOutput {
	return o
}

func (o GetZnodesResultOutput) ToGetZnodesResultOutputWithContext(ctx context.Context) GetZnodesResultOutput {
	return o
}

func (o GetZnodesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetZnodesResult] {
	return pulumix.Output[GetZnodesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetZnodesResultOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetZnodesResult) *string { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o GetZnodesResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZnodesResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetZnodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZnodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetZnodesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZnodesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetZnodesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetZnodesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetZnodesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZnodesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetZnodesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetZnodesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetZnodesResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetZnodesResult) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetZnodesResultOutput) Znodes() GetZnodesZnodeArrayOutput {
	return o.ApplyT(func(v GetZnodesResult) []GetZnodesZnode { return v.Znodes }).(GetZnodesZnodeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetZnodesResultOutput{})
}
