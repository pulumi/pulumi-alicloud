// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Microservice Engine (MSE) Nacos Config resource.
//
// For information about Microservice Engine (MSE) Nacos Config and how to use it, see [What is Nacos configuration](https://www.alibabacloud.com/help/en/mse/developer-reference/api-mse-2019-05-31-createnacosconfig)
//
// > **NOTE:** Available since v1.233.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mse"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "example", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.17.3.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "example", &vpc.SwitchArgs{
//				VswitchName: pulumi.String("terraform-example"),
//				CidrBlock:   pulumi.String("172.17.3.0/24"),
//				VpcId:       exampleNetwork.ID(),
//				ZoneId:      pulumi.String(example.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := mse.NewCluster(ctx, "example", &mse.ClusterArgs{
//				ConnectionType:       pulumi.String("slb"),
//				NetType:              pulumi.String("privatenet"),
//				VswitchId:            exampleSwitch.ID(),
//				ClusterSpecification: pulumi.String("MSE_SC_1_2_60_c"),
//				ClusterVersion:       pulumi.String("NACOS_2_0_0"),
//				InstanceCount:        pulumi.Int(3),
//				PubNetworkFlow:       pulumi.String("1"),
//				ClusterAliasName:     pulumi.String("example"),
//				MseVersion:           pulumi.String("mse_pro"),
//				ClusterType:          pulumi.String("Nacos-Ans"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEngineNamespace, err := mse.NewEngineNamespace(ctx, "example", &mse.EngineNamespaceArgs{
//				InstanceId:        exampleCluster.ID(),
//				NamespaceShowName: pulumi.String("example"),
//				NamespaceId:       pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mse.NewNacosConfig(ctx, "example", &mse.NacosConfigArgs{
//				InstanceId:  exampleCluster.ID(),
//				DataId:      pulumi.String("example"),
//				Group:       pulumi.String("example"),
//				NamespaceId: exampleEngineNamespace.NamespaceId,
//				Content:     pulumi.String("example"),
//				Type:        pulumi.String("text"),
//				Tags:        pulumi.String("example"),
//				AppName:     pulumi.String("example"),
//				Desc:        pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Microservice Engine (MSE) Nacos Config can be imported using the id, e.g.
//
// **Note**: If instance_id, namespace_id, data_id, and group contain ":", please replace it with "\\\\:", available since v1.243.0
//
// ```sh
// $ pulumi import alicloud:mse/nacosConfig:NacosConfig example <instance_id>:<namespace_id>:<data_id>:<group>
// ```
type NacosConfig struct {
	pulumi.CustomResourceState

	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName pulumi.StringPtrOutput `pulumi:"appName"`
	// The list of IP addresses where the beta release of the configuration is performed.
	BetaIps pulumi.StringOutput `pulumi:"betaIps"`
	// The content of the configuration.
	Content pulumi.StringOutput `pulumi:"content"`
	// The ID of the data.
	DataId pulumi.StringOutput `pulumi:"dataId"`
	// The description of the configuration.
	Desc pulumi.StringPtrOutput `pulumi:"desc"`
	// The encryption key.
	EncryptedDataKey pulumi.StringOutput `pulumi:"encryptedDataKey"`
	// The ID of the group.
	Group pulumi.StringOutput `pulumi:"group"`
	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
	NamespaceId pulumi.StringPtrOutput `pulumi:"namespaceId"`
	// The tags of the configuration.
	Tags pulumi.StringPtrOutput `pulumi:"tags"`
	// The format of the configuration. Supported formats include TEXT, JSON, and XML.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNacosConfig registers a new resource with the given unique name, arguments, and options.
func NewNacosConfig(ctx *pulumi.Context,
	name string, args *NacosConfigArgs, opts ...pulumi.ResourceOption) (*NacosConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.DataId == nil {
		return nil, errors.New("invalid value for required argument 'DataId'")
	}
	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NacosConfig
	err := ctx.RegisterResource("alicloud:mse/nacosConfig:NacosConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNacosConfig gets an existing NacosConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNacosConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NacosConfigState, opts ...pulumi.ResourceOption) (*NacosConfig, error) {
	var resource NacosConfig
	err := ctx.ReadResource("alicloud:mse/nacosConfig:NacosConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NacosConfig resources.
type nacosConfigState struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName *string `pulumi:"appName"`
	// The list of IP addresses where the beta release of the configuration is performed.
	BetaIps *string `pulumi:"betaIps"`
	// The content of the configuration.
	Content *string `pulumi:"content"`
	// The ID of the data.
	DataId *string `pulumi:"dataId"`
	// The description of the configuration.
	Desc *string `pulumi:"desc"`
	// The encryption key.
	EncryptedDataKey *string `pulumi:"encryptedDataKey"`
	// The ID of the group.
	Group *string `pulumi:"group"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
	NamespaceId *string `pulumi:"namespaceId"`
	// The tags of the configuration.
	Tags *string `pulumi:"tags"`
	// The format of the configuration. Supported formats include TEXT, JSON, and XML.
	Type *string `pulumi:"type"`
}

type NacosConfigState struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage pulumi.StringPtrInput
	// The name of the application.
	AppName pulumi.StringPtrInput
	// The list of IP addresses where the beta release of the configuration is performed.
	BetaIps pulumi.StringPtrInput
	// The content of the configuration.
	Content pulumi.StringPtrInput
	// The ID of the data.
	DataId pulumi.StringPtrInput
	// The description of the configuration.
	Desc pulumi.StringPtrInput
	// The encryption key.
	EncryptedDataKey pulumi.StringPtrInput
	// The ID of the group.
	Group pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
	NamespaceId pulumi.StringPtrInput
	// The tags of the configuration.
	Tags pulumi.StringPtrInput
	// The format of the configuration. Supported formats include TEXT, JSON, and XML.
	Type pulumi.StringPtrInput
}

func (NacosConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*nacosConfigState)(nil)).Elem()
}

type nacosConfigArgs struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName *string `pulumi:"appName"`
	// The list of IP addresses where the beta release of the configuration is performed.
	BetaIps *string `pulumi:"betaIps"`
	// The content of the configuration.
	Content string `pulumi:"content"`
	// The ID of the data.
	DataId string `pulumi:"dataId"`
	// The description of the configuration.
	Desc *string `pulumi:"desc"`
	// The ID of the group.
	Group string `pulumi:"group"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
	NamespaceId *string `pulumi:"namespaceId"`
	// The tags of the configuration.
	Tags *string `pulumi:"tags"`
	// The format of the configuration. Supported formats include TEXT, JSON, and XML.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NacosConfig resource.
type NacosConfigArgs struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage pulumi.StringPtrInput
	// The name of the application.
	AppName pulumi.StringPtrInput
	// The list of IP addresses where the beta release of the configuration is performed.
	BetaIps pulumi.StringPtrInput
	// The content of the configuration.
	Content pulumi.StringInput
	// The ID of the data.
	DataId pulumi.StringInput
	// The description of the configuration.
	Desc pulumi.StringPtrInput
	// The ID of the group.
	Group pulumi.StringInput
	// The ID of the instance.
	InstanceId pulumi.StringInput
	// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
	NamespaceId pulumi.StringPtrInput
	// The tags of the configuration.
	Tags pulumi.StringPtrInput
	// The format of the configuration. Supported formats include TEXT, JSON, and XML.
	Type pulumi.StringPtrInput
}

func (NacosConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nacosConfigArgs)(nil)).Elem()
}

type NacosConfigInput interface {
	pulumi.Input

	ToNacosConfigOutput() NacosConfigOutput
	ToNacosConfigOutputWithContext(ctx context.Context) NacosConfigOutput
}

func (*NacosConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**NacosConfig)(nil)).Elem()
}

func (i *NacosConfig) ToNacosConfigOutput() NacosConfigOutput {
	return i.ToNacosConfigOutputWithContext(context.Background())
}

func (i *NacosConfig) ToNacosConfigOutputWithContext(ctx context.Context) NacosConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacosConfigOutput)
}

// NacosConfigArrayInput is an input type that accepts NacosConfigArray and NacosConfigArrayOutput values.
// You can construct a concrete instance of `NacosConfigArrayInput` via:
//
//	NacosConfigArray{ NacosConfigArgs{...} }
type NacosConfigArrayInput interface {
	pulumi.Input

	ToNacosConfigArrayOutput() NacosConfigArrayOutput
	ToNacosConfigArrayOutputWithContext(context.Context) NacosConfigArrayOutput
}

type NacosConfigArray []NacosConfigInput

func (NacosConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NacosConfig)(nil)).Elem()
}

func (i NacosConfigArray) ToNacosConfigArrayOutput() NacosConfigArrayOutput {
	return i.ToNacosConfigArrayOutputWithContext(context.Background())
}

func (i NacosConfigArray) ToNacosConfigArrayOutputWithContext(ctx context.Context) NacosConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacosConfigArrayOutput)
}

// NacosConfigMapInput is an input type that accepts NacosConfigMap and NacosConfigMapOutput values.
// You can construct a concrete instance of `NacosConfigMapInput` via:
//
//	NacosConfigMap{ "key": NacosConfigArgs{...} }
type NacosConfigMapInput interface {
	pulumi.Input

	ToNacosConfigMapOutput() NacosConfigMapOutput
	ToNacosConfigMapOutputWithContext(context.Context) NacosConfigMapOutput
}

type NacosConfigMap map[string]NacosConfigInput

func (NacosConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NacosConfig)(nil)).Elem()
}

func (i NacosConfigMap) ToNacosConfigMapOutput() NacosConfigMapOutput {
	return i.ToNacosConfigMapOutputWithContext(context.Background())
}

func (i NacosConfigMap) ToNacosConfigMapOutputWithContext(ctx context.Context) NacosConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacosConfigMapOutput)
}

type NacosConfigOutput struct{ *pulumi.OutputState }

func (NacosConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NacosConfig)(nil)).Elem()
}

func (o NacosConfigOutput) ToNacosConfigOutput() NacosConfigOutput {
	return o
}

func (o NacosConfigOutput) ToNacosConfigOutputWithContext(ctx context.Context) NacosConfigOutput {
	return o
}

// The language type of the returned information. Valid values: `zh`, `en`.
func (o NacosConfigOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

// The name of the application.
func (o NacosConfigOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringPtrOutput { return v.AppName }).(pulumi.StringPtrOutput)
}

// The list of IP addresses where the beta release of the configuration is performed.
func (o NacosConfigOutput) BetaIps() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.BetaIps }).(pulumi.StringOutput)
}

// The content of the configuration.
func (o NacosConfigOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The ID of the data.
func (o NacosConfigOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.DataId }).(pulumi.StringOutput)
}

// The description of the configuration.
func (o NacosConfigOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

// The encryption key.
func (o NacosConfigOutput) EncryptedDataKey() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.EncryptedDataKey }).(pulumi.StringOutput)
}

// The ID of the group.
func (o NacosConfigOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o NacosConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The id of Namespace. If you want to create a config under the `public` namespace, this parameter can be set to an empty string  *`""`* or just not set this parameter.
func (o NacosConfigOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringPtrOutput { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The tags of the configuration.
func (o NacosConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringPtrOutput { return v.Tags }).(pulumi.StringPtrOutput)
}

// The format of the configuration. Supported formats include TEXT, JSON, and XML.
func (o NacosConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NacosConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NacosConfigArrayOutput struct{ *pulumi.OutputState }

func (NacosConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NacosConfig)(nil)).Elem()
}

func (o NacosConfigArrayOutput) ToNacosConfigArrayOutput() NacosConfigArrayOutput {
	return o
}

func (o NacosConfigArrayOutput) ToNacosConfigArrayOutputWithContext(ctx context.Context) NacosConfigArrayOutput {
	return o
}

func (o NacosConfigArrayOutput) Index(i pulumi.IntInput) NacosConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NacosConfig {
		return vs[0].([]*NacosConfig)[vs[1].(int)]
	}).(NacosConfigOutput)
}

type NacosConfigMapOutput struct{ *pulumi.OutputState }

func (NacosConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NacosConfig)(nil)).Elem()
}

func (o NacosConfigMapOutput) ToNacosConfigMapOutput() NacosConfigMapOutput {
	return o
}

func (o NacosConfigMapOutput) ToNacosConfigMapOutputWithContext(ctx context.Context) NacosConfigMapOutput {
	return o
}

func (o NacosConfigMapOutput) MapIndex(k pulumi.StringInput) NacosConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NacosConfig {
		return vs[0].(map[string]*NacosConfig)[vs[1].(string)]
	}).(NacosConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NacosConfigInput)(nil)).Elem(), &NacosConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacosConfigArrayInput)(nil)).Elem(), NacosConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacosConfigMapInput)(nil)).Elem(), NacosConfigMap{})
	pulumi.RegisterOutputType(NacosConfigOutput{})
	pulumi.RegisterOutputType(NacosConfigArrayOutput{})
	pulumi.RegisterOutputType(NacosConfigMapOutput{})
}
