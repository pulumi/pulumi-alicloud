// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Mse Nacos Configs of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.233.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mse"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "example", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.17.3.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "example", &vpc.SwitchArgs{
//				VswitchName: pulumi.String("terraform-example"),
//				CidrBlock:   pulumi.String("172.17.3.0/24"),
//				VpcId:       exampleNetwork.ID(),
//				ZoneId:      pulumi.String(example.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := mse.NewCluster(ctx, "example", &mse.ClusterArgs{
//				ConnectionType:       pulumi.String("slb"),
//				NetType:              pulumi.String("privatenet"),
//				VswitchId:            exampleSwitch.ID(),
//				ClusterSpecification: pulumi.String("MSE_SC_1_2_60_c"),
//				ClusterVersion:       pulumi.String("NACOS_2_0_0"),
//				InstanceCount:        pulumi.Int(3),
//				PubNetworkFlow:       pulumi.String("1"),
//				ClusterAliasName:     pulumi.String("example"),
//				MseVersion:           pulumi.String("mse_pro"),
//				ClusterType:          pulumi.String("Nacos-Ans"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEngineNamespace, err := mse.NewEngineNamespace(ctx, "example", &mse.EngineNamespaceArgs{
//				InstanceId:        exampleCluster.ID(),
//				NamespaceShowName: pulumi.String("example"),
//				NamespaceId:       pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mse.NewNacosConfig(ctx, "example", &mse.NacosConfigArgs{
//				InstanceId:  exampleCluster.ID(),
//				DataId:      pulumi.String("example"),
//				Group:       pulumi.String("example"),
//				NamespaceId: exampleEngineNamespace.NamespaceId,
//				Content:     pulumi.String("example"),
//				Type:        pulumi.String("text"),
//				Tags:        pulumi.String("example"),
//				AppName:     pulumi.String("example"),
//				Desc:        pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = pulumi.All(exampleCluster.ID(), exampleEngineNamespace.NamespaceId).ApplyT(func(_args []interface{}) (mse.GetNacosConfigsResult, error) {
//				id := _args[0].(string)
//				namespaceId := _args[1].(string)
//				return mse.GetNacosConfigsResult(interface{}(mse.GetNacosConfigsOutput(ctx, mse.GetNacosConfigsOutputArgs{
//					InstanceId:    id,
//					EnableDetails: true,
//					NamespaceId:   namespaceId,
//				}, nil))), nil
//			}).(mse.GetNacosConfigsResultOutput)
//			return nil
//		})
//	}
//
// ```
func GetNacosConfigs(ctx *pulumi.Context, args *GetNacosConfigsArgs, opts ...pulumi.InvokeOption) (*GetNacosConfigsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNacosConfigsResult
	err := ctx.Invoke("alicloud:mse/getNacosConfigs:getNacosConfigs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNacosConfigs.
type GetNacosConfigsArgs struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName *string `pulumi:"appName"`
	// The ID of the data.
	DataId *string `pulumi:"dataId"`
	// Default to `false`. Set it to `true` can output more details about resource attributes.
	EnableDetails *bool `pulumi:"enableDetails"`
	// The ID of the group.
	Group *string `pulumi:"group"`
	// A list of MSE Engine Configs ids. It is formatted to `<instance_id>:<namespace_id>:<data_id>:<group>`.
	Ids []string `pulumi:"ids"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The id of Namespace.
	NamespaceId *string `pulumi:"namespaceId"`
	// File name where to save data source results (after running `pulumi preview`).
	// *
	OutputFile *string `pulumi:"outputFile"`
	// The extended request parameters. The JSON format is supported.
	RequestPars *string `pulumi:"requestPars"`
	// The tags of the configuration.
	Tags *string `pulumi:"tags"`
}

// A collection of values returned by getNacosConfigs.
type GetNacosConfigsResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName *string `pulumi:"appName"`
	// A list of Mse Nacos Configs. Each element contains the following attributes:
	Configs []GetNacosConfigsConfig `pulumi:"configs"`
	// The ID of the data.
	DataId        *string `pulumi:"dataId"`
	EnableDetails *bool   `pulumi:"enableDetails"`
	// The ID of the group.
	Group *string `pulumi:"group"`
	// The provider-assigned unique ID for this managed resource.
	Id          string   `pulumi:"id"`
	Ids         []string `pulumi:"ids"`
	InstanceId  string   `pulumi:"instanceId"`
	NamespaceId *string  `pulumi:"namespaceId"`
	OutputFile  *string  `pulumi:"outputFile"`
	RequestPars *string  `pulumi:"requestPars"`
	// The tags of the configuration.
	Tags *string `pulumi:"tags"`
}

func GetNacosConfigsOutput(ctx *pulumi.Context, args GetNacosConfigsOutputArgs, opts ...pulumi.InvokeOption) GetNacosConfigsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNacosConfigsResultOutput, error) {
			args := v.(GetNacosConfigsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetNacosConfigsResult
			secret, err := ctx.InvokePackageRaw("alicloud:mse/getNacosConfigs:getNacosConfigs", args, &rv, "", opts...)
			if err != nil {
				return GetNacosConfigsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetNacosConfigsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetNacosConfigsResultOutput), nil
			}
			return output, nil
		}).(GetNacosConfigsResultOutput)
}

// A collection of arguments for invoking getNacosConfigs.
type GetNacosConfigsOutputArgs struct {
	// The language type of the returned information. Valid values: `zh`, `en`.
	AcceptLanguage pulumi.StringPtrInput `pulumi:"acceptLanguage"`
	// The name of the application.
	AppName pulumi.StringPtrInput `pulumi:"appName"`
	// The ID of the data.
	DataId pulumi.StringPtrInput `pulumi:"dataId"`
	// Default to `false`. Set it to `true` can output more details about resource attributes.
	EnableDetails pulumi.BoolPtrInput `pulumi:"enableDetails"`
	// The ID of the group.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// A list of MSE Engine Configs ids. It is formatted to `<instance_id>:<namespace_id>:<data_id>:<group>`.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The ID of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The id of Namespace.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// File name where to save data source results (after running `pulumi preview`).
	// *
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The extended request parameters. The JSON format is supported.
	RequestPars pulumi.StringPtrInput `pulumi:"requestPars"`
	// The tags of the configuration.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
}

func (GetNacosConfigsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNacosConfigsArgs)(nil)).Elem()
}

// A collection of values returned by getNacosConfigs.
type GetNacosConfigsResultOutput struct{ *pulumi.OutputState }

func (GetNacosConfigsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNacosConfigsResult)(nil)).Elem()
}

func (o GetNacosConfigsResultOutput) ToGetNacosConfigsResultOutput() GetNacosConfigsResultOutput {
	return o
}

func (o GetNacosConfigsResultOutput) ToGetNacosConfigsResultOutputWithContext(ctx context.Context) GetNacosConfigsResultOutput {
	return o
}

func (o GetNacosConfigsResultOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

// The name of the application.
func (o GetNacosConfigsResultOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.AppName }).(pulumi.StringPtrOutput)
}

// A list of Mse Nacos Configs. Each element contains the following attributes:
func (o GetNacosConfigsResultOutput) Configs() GetNacosConfigsConfigArrayOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) []GetNacosConfigsConfig { return v.Configs }).(GetNacosConfigsConfigArrayOutput)
}

// The ID of the data.
func (o GetNacosConfigsResultOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

func (o GetNacosConfigsResultOutput) EnableDetails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *bool { return v.EnableDetails }).(pulumi.BoolPtrOutput)
}

// The ID of the group.
func (o GetNacosConfigsResultOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNacosConfigsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNacosConfigsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetNacosConfigsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetNacosConfigsResultOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

func (o GetNacosConfigsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetNacosConfigsResultOutput) RequestPars() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.RequestPars }).(pulumi.StringPtrOutput)
}

// The tags of the configuration.
func (o GetNacosConfigsResultOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNacosConfigsResult) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNacosConfigsResultOutput{})
}
