// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainAuthConfig struct {
	// Auth type of the auth config. Valid values are  `noAuth`, `typeA`, `typeB` and `typeC`. Default value is `noAuth`.
	AuthType *string `pulumi:"authType"`
	// Master authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
	MasterKey *string `pulumi:"masterKey"`
	// Slave authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
	SlaveKey *string `pulumi:"slaveKey"`
	// Authentication cache time of the auth config. Default value is `1800`. It's value is valid only when the `authType` is `typeB` or `typeC`.
	Timeout *int `pulumi:"timeout"`
}

// DomainAuthConfigInput is an input type that accepts DomainAuthConfigArgs and DomainAuthConfigOutput values.
// You can construct a concrete instance of `DomainAuthConfigInput` via:
//
//          DomainAuthConfigArgs{...}
type DomainAuthConfigInput interface {
	pulumi.Input

	ToDomainAuthConfigOutput() DomainAuthConfigOutput
	ToDomainAuthConfigOutputWithContext(context.Context) DomainAuthConfigOutput
}

type DomainAuthConfigArgs struct {
	// Auth type of the auth config. Valid values are  `noAuth`, `typeA`, `typeB` and `typeC`. Default value is `noAuth`.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// Master authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
	MasterKey pulumi.StringPtrInput `pulumi:"masterKey"`
	// Slave authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
	SlaveKey pulumi.StringPtrInput `pulumi:"slaveKey"`
	// Authentication cache time of the auth config. Default value is `1800`. It's value is valid only when the `authType` is `typeB` or `typeC`.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (DomainAuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAuthConfig)(nil)).Elem()
}

func (i DomainAuthConfigArgs) ToDomainAuthConfigOutput() DomainAuthConfigOutput {
	return i.ToDomainAuthConfigOutputWithContext(context.Background())
}

func (i DomainAuthConfigArgs) ToDomainAuthConfigOutputWithContext(ctx context.Context) DomainAuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAuthConfigOutput)
}

func (i DomainAuthConfigArgs) ToDomainAuthConfigPtrOutput() DomainAuthConfigPtrOutput {
	return i.ToDomainAuthConfigPtrOutputWithContext(context.Background())
}

func (i DomainAuthConfigArgs) ToDomainAuthConfigPtrOutputWithContext(ctx context.Context) DomainAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAuthConfigOutput).ToDomainAuthConfigPtrOutputWithContext(ctx)
}

// DomainAuthConfigPtrInput is an input type that accepts DomainAuthConfigArgs, DomainAuthConfigPtr and DomainAuthConfigPtrOutput values.
// You can construct a concrete instance of `DomainAuthConfigPtrInput` via:
//
//          DomainAuthConfigArgs{...}
//
//  or:
//
//          nil
type DomainAuthConfigPtrInput interface {
	pulumi.Input

	ToDomainAuthConfigPtrOutput() DomainAuthConfigPtrOutput
	ToDomainAuthConfigPtrOutputWithContext(context.Context) DomainAuthConfigPtrOutput
}

type domainAuthConfigPtrType DomainAuthConfigArgs

func DomainAuthConfigPtr(v *DomainAuthConfigArgs) DomainAuthConfigPtrInput {
	return (*domainAuthConfigPtrType)(v)
}

func (*domainAuthConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAuthConfig)(nil)).Elem()
}

func (i *domainAuthConfigPtrType) ToDomainAuthConfigPtrOutput() DomainAuthConfigPtrOutput {
	return i.ToDomainAuthConfigPtrOutputWithContext(context.Background())
}

func (i *domainAuthConfigPtrType) ToDomainAuthConfigPtrOutputWithContext(ctx context.Context) DomainAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAuthConfigPtrOutput)
}

type DomainAuthConfigOutput struct{ *pulumi.OutputState }

func (DomainAuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAuthConfig)(nil)).Elem()
}

func (o DomainAuthConfigOutput) ToDomainAuthConfigOutput() DomainAuthConfigOutput {
	return o
}

func (o DomainAuthConfigOutput) ToDomainAuthConfigOutputWithContext(ctx context.Context) DomainAuthConfigOutput {
	return o
}

func (o DomainAuthConfigOutput) ToDomainAuthConfigPtrOutput() DomainAuthConfigPtrOutput {
	return o.ToDomainAuthConfigPtrOutputWithContext(context.Background())
}

func (o DomainAuthConfigOutput) ToDomainAuthConfigPtrOutputWithContext(ctx context.Context) DomainAuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainAuthConfig) *DomainAuthConfig {
		return &v
	}).(DomainAuthConfigPtrOutput)
}

// Auth type of the auth config. Valid values are  `noAuth`, `typeA`, `typeB` and `typeC`. Default value is `noAuth`.
func (o DomainAuthConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAuthConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Master authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
func (o DomainAuthConfigOutput) MasterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAuthConfig) *string { return v.MasterKey }).(pulumi.StringPtrOutput)
}

// Slave authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
func (o DomainAuthConfigOutput) SlaveKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainAuthConfig) *string { return v.SlaveKey }).(pulumi.StringPtrOutput)
}

// Authentication cache time of the auth config. Default value is `1800`. It's value is valid only when the `authType` is `typeB` or `typeC`.
func (o DomainAuthConfigOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainAuthConfig) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type DomainAuthConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainAuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAuthConfig)(nil)).Elem()
}

func (o DomainAuthConfigPtrOutput) ToDomainAuthConfigPtrOutput() DomainAuthConfigPtrOutput {
	return o
}

func (o DomainAuthConfigPtrOutput) ToDomainAuthConfigPtrOutputWithContext(ctx context.Context) DomainAuthConfigPtrOutput {
	return o
}

func (o DomainAuthConfigPtrOutput) Elem() DomainAuthConfigOutput {
	return o.ApplyT(func(v *DomainAuthConfig) DomainAuthConfig {
		if v != nil {
			return *v
		}
		var ret DomainAuthConfig
		return ret
	}).(DomainAuthConfigOutput)
}

// Auth type of the auth config. Valid values are  `noAuth`, `typeA`, `typeB` and `typeC`. Default value is `noAuth`.
func (o DomainAuthConfigPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Master authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
func (o DomainAuthConfigPtrOutput) MasterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterKey
	}).(pulumi.StringPtrOutput)
}

// Slave authentication key of the auth config. This parameter can have a string of 6 to 32 characters and must contain only alphanumeric characters.
func (o DomainAuthConfigPtrOutput) SlaveKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.SlaveKey
	}).(pulumi.StringPtrOutput)
}

// Authentication cache time of the auth config. Default value is `1800`. It's value is valid only when the `authType` is `typeB` or `typeC`.
func (o DomainAuthConfigPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainAuthConfig) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type DomainCacheConfig struct {
	// Cache content of the cache config. It's value is a path string when the `cacheType` is `path`. When the `cacheType` is `suffix`, it's value is a string which contains multiple file suffixes separated by commas.
	CacheContent string  `pulumi:"cacheContent"`
	CacheId      *string `pulumi:"cacheId"`
	// Cache type of the cache config. Valid values are `suffix` and `path`.
	CacheType string `pulumi:"cacheType"`
	// Cache time of the cache config.
	Ttl int `pulumi:"ttl"`
	// Weight of the cache config. This parameter's value is between 1 and 99. Default value is `1`. The higher the value, the higher the priority.
	Weight *int `pulumi:"weight"`
}

// DomainCacheConfigInput is an input type that accepts DomainCacheConfigArgs and DomainCacheConfigOutput values.
// You can construct a concrete instance of `DomainCacheConfigInput` via:
//
//          DomainCacheConfigArgs{...}
type DomainCacheConfigInput interface {
	pulumi.Input

	ToDomainCacheConfigOutput() DomainCacheConfigOutput
	ToDomainCacheConfigOutputWithContext(context.Context) DomainCacheConfigOutput
}

type DomainCacheConfigArgs struct {
	// Cache content of the cache config. It's value is a path string when the `cacheType` is `path`. When the `cacheType` is `suffix`, it's value is a string which contains multiple file suffixes separated by commas.
	CacheContent pulumi.StringInput    `pulumi:"cacheContent"`
	CacheId      pulumi.StringPtrInput `pulumi:"cacheId"`
	// Cache type of the cache config. Valid values are `suffix` and `path`.
	CacheType pulumi.StringInput `pulumi:"cacheType"`
	// Cache time of the cache config.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Weight of the cache config. This parameter's value is between 1 and 99. Default value is `1`. The higher the value, the higher the priority.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (DomainCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheConfig)(nil)).Elem()
}

func (i DomainCacheConfigArgs) ToDomainCacheConfigOutput() DomainCacheConfigOutput {
	return i.ToDomainCacheConfigOutputWithContext(context.Background())
}

func (i DomainCacheConfigArgs) ToDomainCacheConfigOutputWithContext(ctx context.Context) DomainCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheConfigOutput)
}

// DomainCacheConfigArrayInput is an input type that accepts DomainCacheConfigArray and DomainCacheConfigArrayOutput values.
// You can construct a concrete instance of `DomainCacheConfigArrayInput` via:
//
//          DomainCacheConfigArray{ DomainCacheConfigArgs{...} }
type DomainCacheConfigArrayInput interface {
	pulumi.Input

	ToDomainCacheConfigArrayOutput() DomainCacheConfigArrayOutput
	ToDomainCacheConfigArrayOutputWithContext(context.Context) DomainCacheConfigArrayOutput
}

type DomainCacheConfigArray []DomainCacheConfigInput

func (DomainCacheConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainCacheConfig)(nil)).Elem()
}

func (i DomainCacheConfigArray) ToDomainCacheConfigArrayOutput() DomainCacheConfigArrayOutput {
	return i.ToDomainCacheConfigArrayOutputWithContext(context.Background())
}

func (i DomainCacheConfigArray) ToDomainCacheConfigArrayOutputWithContext(ctx context.Context) DomainCacheConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCacheConfigArrayOutput)
}

type DomainCacheConfigOutput struct{ *pulumi.OutputState }

func (DomainCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCacheConfig)(nil)).Elem()
}

func (o DomainCacheConfigOutput) ToDomainCacheConfigOutput() DomainCacheConfigOutput {
	return o
}

func (o DomainCacheConfigOutput) ToDomainCacheConfigOutputWithContext(ctx context.Context) DomainCacheConfigOutput {
	return o
}

// Cache content of the cache config. It's value is a path string when the `cacheType` is `path`. When the `cacheType` is `suffix`, it's value is a string which contains multiple file suffixes separated by commas.
func (o DomainCacheConfigOutput) CacheContent() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCacheConfig) string { return v.CacheContent }).(pulumi.StringOutput)
}

func (o DomainCacheConfigOutput) CacheId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainCacheConfig) *string { return v.CacheId }).(pulumi.StringPtrOutput)
}

// Cache type of the cache config. Valid values are `suffix` and `path`.
func (o DomainCacheConfigOutput) CacheType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainCacheConfig) string { return v.CacheType }).(pulumi.StringOutput)
}

// Cache time of the cache config.
func (o DomainCacheConfigOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v DomainCacheConfig) int { return v.Ttl }).(pulumi.IntOutput)
}

// Weight of the cache config. This parameter's value is between 1 and 99. Default value is `1`. The higher the value, the higher the priority.
func (o DomainCacheConfigOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainCacheConfig) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type DomainCacheConfigArrayOutput struct{ *pulumi.OutputState }

func (DomainCacheConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainCacheConfig)(nil)).Elem()
}

func (o DomainCacheConfigArrayOutput) ToDomainCacheConfigArrayOutput() DomainCacheConfigArrayOutput {
	return o
}

func (o DomainCacheConfigArrayOutput) ToDomainCacheConfigArrayOutputWithContext(ctx context.Context) DomainCacheConfigArrayOutput {
	return o
}

func (o DomainCacheConfigArrayOutput) Index(i pulumi.IntInput) DomainCacheConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainCacheConfig {
		return vs[0].([]DomainCacheConfig)[vs[1].(int)]
	}).(DomainCacheConfigOutput)
}

type DomainCertificateConfig struct {
	// The SSL private key. This is required if `serverCertificateStatus` is `on`
	PrivateKey *string `pulumi:"privateKey"`
	// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
	ServerCertificate *string `pulumi:"serverCertificate"`
	// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
	ServerCertificateStatus *string `pulumi:"serverCertificateStatus"`
}

// DomainCertificateConfigInput is an input type that accepts DomainCertificateConfigArgs and DomainCertificateConfigOutput values.
// You can construct a concrete instance of `DomainCertificateConfigInput` via:
//
//          DomainCertificateConfigArgs{...}
type DomainCertificateConfigInput interface {
	pulumi.Input

	ToDomainCertificateConfigOutput() DomainCertificateConfigOutput
	ToDomainCertificateConfigOutputWithContext(context.Context) DomainCertificateConfigOutput
}

type DomainCertificateConfigArgs struct {
	// The SSL private key. This is required if `serverCertificateStatus` is `on`
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
	ServerCertificate pulumi.StringPtrInput `pulumi:"serverCertificate"`
	// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
	ServerCertificateStatus pulumi.StringPtrInput `pulumi:"serverCertificateStatus"`
}

func (DomainCertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCertificateConfig)(nil)).Elem()
}

func (i DomainCertificateConfigArgs) ToDomainCertificateConfigOutput() DomainCertificateConfigOutput {
	return i.ToDomainCertificateConfigOutputWithContext(context.Background())
}

func (i DomainCertificateConfigArgs) ToDomainCertificateConfigOutputWithContext(ctx context.Context) DomainCertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateConfigOutput)
}

func (i DomainCertificateConfigArgs) ToDomainCertificateConfigPtrOutput() DomainCertificateConfigPtrOutput {
	return i.ToDomainCertificateConfigPtrOutputWithContext(context.Background())
}

func (i DomainCertificateConfigArgs) ToDomainCertificateConfigPtrOutputWithContext(ctx context.Context) DomainCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateConfigOutput).ToDomainCertificateConfigPtrOutputWithContext(ctx)
}

// DomainCertificateConfigPtrInput is an input type that accepts DomainCertificateConfigArgs, DomainCertificateConfigPtr and DomainCertificateConfigPtrOutput values.
// You can construct a concrete instance of `DomainCertificateConfigPtrInput` via:
//
//          DomainCertificateConfigArgs{...}
//
//  or:
//
//          nil
type DomainCertificateConfigPtrInput interface {
	pulumi.Input

	ToDomainCertificateConfigPtrOutput() DomainCertificateConfigPtrOutput
	ToDomainCertificateConfigPtrOutputWithContext(context.Context) DomainCertificateConfigPtrOutput
}

type domainCertificateConfigPtrType DomainCertificateConfigArgs

func DomainCertificateConfigPtr(v *DomainCertificateConfigArgs) DomainCertificateConfigPtrInput {
	return (*domainCertificateConfigPtrType)(v)
}

func (*domainCertificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificateConfig)(nil)).Elem()
}

func (i *domainCertificateConfigPtrType) ToDomainCertificateConfigPtrOutput() DomainCertificateConfigPtrOutput {
	return i.ToDomainCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *domainCertificateConfigPtrType) ToDomainCertificateConfigPtrOutputWithContext(ctx context.Context) DomainCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCertificateConfigPtrOutput)
}

type DomainCertificateConfigOutput struct{ *pulumi.OutputState }

func (DomainCertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCertificateConfig)(nil)).Elem()
}

func (o DomainCertificateConfigOutput) ToDomainCertificateConfigOutput() DomainCertificateConfigOutput {
	return o
}

func (o DomainCertificateConfigOutput) ToDomainCertificateConfigOutputWithContext(ctx context.Context) DomainCertificateConfigOutput {
	return o
}

func (o DomainCertificateConfigOutput) ToDomainCertificateConfigPtrOutput() DomainCertificateConfigPtrOutput {
	return o.ToDomainCertificateConfigPtrOutputWithContext(context.Background())
}

func (o DomainCertificateConfigOutput) ToDomainCertificateConfigPtrOutputWithContext(ctx context.Context) DomainCertificateConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainCertificateConfig) *DomainCertificateConfig {
		return &v
	}).(DomainCertificateConfigPtrOutput)
}

// The SSL private key. This is required if `serverCertificateStatus` is `on`
func (o DomainCertificateConfigOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainCertificateConfig) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
func (o DomainCertificateConfigOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainCertificateConfig) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
func (o DomainCertificateConfigOutput) ServerCertificateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainCertificateConfig) *string { return v.ServerCertificateStatus }).(pulumi.StringPtrOutput)
}

type DomainCertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainCertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainCertificateConfig)(nil)).Elem()
}

func (o DomainCertificateConfigPtrOutput) ToDomainCertificateConfigPtrOutput() DomainCertificateConfigPtrOutput {
	return o
}

func (o DomainCertificateConfigPtrOutput) ToDomainCertificateConfigPtrOutputWithContext(ctx context.Context) DomainCertificateConfigPtrOutput {
	return o
}

func (o DomainCertificateConfigPtrOutput) Elem() DomainCertificateConfigOutput {
	return o.ApplyT(func(v *DomainCertificateConfig) DomainCertificateConfig {
		if v != nil {
			return *v
		}
		var ret DomainCertificateConfig
		return ret
	}).(DomainCertificateConfigOutput)
}

// The SSL private key. This is required if `serverCertificateStatus` is `on`
func (o DomainCertificateConfigPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
func (o DomainCertificateConfigPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
func (o DomainCertificateConfigPtrOutput) ServerCertificateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificateStatus
	}).(pulumi.StringPtrOutput)
}

type DomainConfigFunctionArg struct {
	// The name of arg.
	ArgName string `pulumi:"argName"`
	// The value of arg.
	ArgValue string `pulumi:"argValue"`
}

// DomainConfigFunctionArgInput is an input type that accepts DomainConfigFunctionArgArgs and DomainConfigFunctionArgOutput values.
// You can construct a concrete instance of `DomainConfigFunctionArgInput` via:
//
//          DomainConfigFunctionArgArgs{...}
type DomainConfigFunctionArgInput interface {
	pulumi.Input

	ToDomainConfigFunctionArgOutput() DomainConfigFunctionArgOutput
	ToDomainConfigFunctionArgOutputWithContext(context.Context) DomainConfigFunctionArgOutput
}

type DomainConfigFunctionArgArgs struct {
	// The name of arg.
	ArgName pulumi.StringInput `pulumi:"argName"`
	// The value of arg.
	ArgValue pulumi.StringInput `pulumi:"argValue"`
}

func (DomainConfigFunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigFunctionArg)(nil)).Elem()
}

func (i DomainConfigFunctionArgArgs) ToDomainConfigFunctionArgOutput() DomainConfigFunctionArgOutput {
	return i.ToDomainConfigFunctionArgOutputWithContext(context.Background())
}

func (i DomainConfigFunctionArgArgs) ToDomainConfigFunctionArgOutputWithContext(ctx context.Context) DomainConfigFunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigFunctionArgOutput)
}

// DomainConfigFunctionArgArrayInput is an input type that accepts DomainConfigFunctionArgArray and DomainConfigFunctionArgArrayOutput values.
// You can construct a concrete instance of `DomainConfigFunctionArgArrayInput` via:
//
//          DomainConfigFunctionArgArray{ DomainConfigFunctionArgArgs{...} }
type DomainConfigFunctionArgArrayInput interface {
	pulumi.Input

	ToDomainConfigFunctionArgArrayOutput() DomainConfigFunctionArgArrayOutput
	ToDomainConfigFunctionArgArrayOutputWithContext(context.Context) DomainConfigFunctionArgArrayOutput
}

type DomainConfigFunctionArgArray []DomainConfigFunctionArgInput

func (DomainConfigFunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigFunctionArg)(nil)).Elem()
}

func (i DomainConfigFunctionArgArray) ToDomainConfigFunctionArgArrayOutput() DomainConfigFunctionArgArrayOutput {
	return i.ToDomainConfigFunctionArgArrayOutputWithContext(context.Background())
}

func (i DomainConfigFunctionArgArray) ToDomainConfigFunctionArgArrayOutputWithContext(ctx context.Context) DomainConfigFunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigFunctionArgArrayOutput)
}

type DomainConfigFunctionArgOutput struct{ *pulumi.OutputState }

func (DomainConfigFunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfigFunctionArg)(nil)).Elem()
}

func (o DomainConfigFunctionArgOutput) ToDomainConfigFunctionArgOutput() DomainConfigFunctionArgOutput {
	return o
}

func (o DomainConfigFunctionArgOutput) ToDomainConfigFunctionArgOutputWithContext(ctx context.Context) DomainConfigFunctionArgOutput {
	return o
}

// The name of arg.
func (o DomainConfigFunctionArgOutput) ArgName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigFunctionArg) string { return v.ArgName }).(pulumi.StringOutput)
}

// The value of arg.
func (o DomainConfigFunctionArgOutput) ArgValue() pulumi.StringOutput {
	return o.ApplyT(func(v DomainConfigFunctionArg) string { return v.ArgValue }).(pulumi.StringOutput)
}

type DomainConfigFunctionArgArrayOutput struct{ *pulumi.OutputState }

func (DomainConfigFunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainConfigFunctionArg)(nil)).Elem()
}

func (o DomainConfigFunctionArgArrayOutput) ToDomainConfigFunctionArgArrayOutput() DomainConfigFunctionArgArrayOutput {
	return o
}

func (o DomainConfigFunctionArgArrayOutput) ToDomainConfigFunctionArgArrayOutputWithContext(ctx context.Context) DomainConfigFunctionArgArrayOutput {
	return o
}

func (o DomainConfigFunctionArgArrayOutput) Index(i pulumi.IntInput) DomainConfigFunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainConfigFunctionArg {
		return vs[0].([]DomainConfigFunctionArg)[vs[1].(int)]
	}).(DomainConfigFunctionArgOutput)
}

type DomainHttpHeaderConfig struct {
	HeaderId *string `pulumi:"headerId"`
	// Header key of the http header. Valid values are `Content-Type`, `Cache-Control`, `Content-Disposition`, `Content-Language`，`Expires`, `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods` and `Access-Control-Max-Age`.
	HeaderKey string `pulumi:"headerKey"`
	// Header value of the http header.
	HeaderValue string `pulumi:"headerValue"`
}

// DomainHttpHeaderConfigInput is an input type that accepts DomainHttpHeaderConfigArgs and DomainHttpHeaderConfigOutput values.
// You can construct a concrete instance of `DomainHttpHeaderConfigInput` via:
//
//          DomainHttpHeaderConfigArgs{...}
type DomainHttpHeaderConfigInput interface {
	pulumi.Input

	ToDomainHttpHeaderConfigOutput() DomainHttpHeaderConfigOutput
	ToDomainHttpHeaderConfigOutputWithContext(context.Context) DomainHttpHeaderConfigOutput
}

type DomainHttpHeaderConfigArgs struct {
	HeaderId pulumi.StringPtrInput `pulumi:"headerId"`
	// Header key of the http header. Valid values are `Content-Type`, `Cache-Control`, `Content-Disposition`, `Content-Language`，`Expires`, `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods` and `Access-Control-Max-Age`.
	HeaderKey pulumi.StringInput `pulumi:"headerKey"`
	// Header value of the http header.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
}

func (DomainHttpHeaderConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainHttpHeaderConfig)(nil)).Elem()
}

func (i DomainHttpHeaderConfigArgs) ToDomainHttpHeaderConfigOutput() DomainHttpHeaderConfigOutput {
	return i.ToDomainHttpHeaderConfigOutputWithContext(context.Background())
}

func (i DomainHttpHeaderConfigArgs) ToDomainHttpHeaderConfigOutputWithContext(ctx context.Context) DomainHttpHeaderConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainHttpHeaderConfigOutput)
}

// DomainHttpHeaderConfigArrayInput is an input type that accepts DomainHttpHeaderConfigArray and DomainHttpHeaderConfigArrayOutput values.
// You can construct a concrete instance of `DomainHttpHeaderConfigArrayInput` via:
//
//          DomainHttpHeaderConfigArray{ DomainHttpHeaderConfigArgs{...} }
type DomainHttpHeaderConfigArrayInput interface {
	pulumi.Input

	ToDomainHttpHeaderConfigArrayOutput() DomainHttpHeaderConfigArrayOutput
	ToDomainHttpHeaderConfigArrayOutputWithContext(context.Context) DomainHttpHeaderConfigArrayOutput
}

type DomainHttpHeaderConfigArray []DomainHttpHeaderConfigInput

func (DomainHttpHeaderConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainHttpHeaderConfig)(nil)).Elem()
}

func (i DomainHttpHeaderConfigArray) ToDomainHttpHeaderConfigArrayOutput() DomainHttpHeaderConfigArrayOutput {
	return i.ToDomainHttpHeaderConfigArrayOutputWithContext(context.Background())
}

func (i DomainHttpHeaderConfigArray) ToDomainHttpHeaderConfigArrayOutputWithContext(ctx context.Context) DomainHttpHeaderConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainHttpHeaderConfigArrayOutput)
}

type DomainHttpHeaderConfigOutput struct{ *pulumi.OutputState }

func (DomainHttpHeaderConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainHttpHeaderConfig)(nil)).Elem()
}

func (o DomainHttpHeaderConfigOutput) ToDomainHttpHeaderConfigOutput() DomainHttpHeaderConfigOutput {
	return o
}

func (o DomainHttpHeaderConfigOutput) ToDomainHttpHeaderConfigOutputWithContext(ctx context.Context) DomainHttpHeaderConfigOutput {
	return o
}

func (o DomainHttpHeaderConfigOutput) HeaderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainHttpHeaderConfig) *string { return v.HeaderId }).(pulumi.StringPtrOutput)
}

// Header key of the http header. Valid values are `Content-Type`, `Cache-Control`, `Content-Disposition`, `Content-Language`，`Expires`, `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods` and `Access-Control-Max-Age`.
func (o DomainHttpHeaderConfigOutput) HeaderKey() pulumi.StringOutput {
	return o.ApplyT(func(v DomainHttpHeaderConfig) string { return v.HeaderKey }).(pulumi.StringOutput)
}

// Header value of the http header.
func (o DomainHttpHeaderConfigOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v DomainHttpHeaderConfig) string { return v.HeaderValue }).(pulumi.StringOutput)
}

type DomainHttpHeaderConfigArrayOutput struct{ *pulumi.OutputState }

func (DomainHttpHeaderConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainHttpHeaderConfig)(nil)).Elem()
}

func (o DomainHttpHeaderConfigArrayOutput) ToDomainHttpHeaderConfigArrayOutput() DomainHttpHeaderConfigArrayOutput {
	return o
}

func (o DomainHttpHeaderConfigArrayOutput) ToDomainHttpHeaderConfigArrayOutputWithContext(ctx context.Context) DomainHttpHeaderConfigArrayOutput {
	return o
}

func (o DomainHttpHeaderConfigArrayOutput) Index(i pulumi.IntInput) DomainHttpHeaderConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainHttpHeaderConfig {
		return vs[0].([]DomainHttpHeaderConfig)[vs[1].(int)]
	}).(DomainHttpHeaderConfigOutput)
}

type DomainNewCertificateConfig struct {
	// The SSL certificate name.
	CertName *string `pulumi:"certName"`
	// The SSL certificate type, can be "upload", "cas" and "free".
	CertType *string `pulumi:"certType"`
	// Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
	ForceSet *string `pulumi:"forceSet"`
	// The SSL private key. This is required if `serverCertificateStatus` is `on`
	PrivateKey *string `pulumi:"privateKey"`
	// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
	ServerCertificate *string `pulumi:"serverCertificate"`
	// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
	ServerCertificateStatus *string `pulumi:"serverCertificateStatus"`
}

// DomainNewCertificateConfigInput is an input type that accepts DomainNewCertificateConfigArgs and DomainNewCertificateConfigOutput values.
// You can construct a concrete instance of `DomainNewCertificateConfigInput` via:
//
//          DomainNewCertificateConfigArgs{...}
type DomainNewCertificateConfigInput interface {
	pulumi.Input

	ToDomainNewCertificateConfigOutput() DomainNewCertificateConfigOutput
	ToDomainNewCertificateConfigOutputWithContext(context.Context) DomainNewCertificateConfigOutput
}

type DomainNewCertificateConfigArgs struct {
	// The SSL certificate name.
	CertName pulumi.StringPtrInput `pulumi:"certName"`
	// The SSL certificate type, can be "upload", "cas" and "free".
	CertType pulumi.StringPtrInput `pulumi:"certType"`
	// Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
	ForceSet pulumi.StringPtrInput `pulumi:"forceSet"`
	// The SSL private key. This is required if `serverCertificateStatus` is `on`
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
	ServerCertificate pulumi.StringPtrInput `pulumi:"serverCertificate"`
	// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
	ServerCertificateStatus pulumi.StringPtrInput `pulumi:"serverCertificateStatus"`
}

func (DomainNewCertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNewCertificateConfig)(nil)).Elem()
}

func (i DomainNewCertificateConfigArgs) ToDomainNewCertificateConfigOutput() DomainNewCertificateConfigOutput {
	return i.ToDomainNewCertificateConfigOutputWithContext(context.Background())
}

func (i DomainNewCertificateConfigArgs) ToDomainNewCertificateConfigOutputWithContext(ctx context.Context) DomainNewCertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNewCertificateConfigOutput)
}

func (i DomainNewCertificateConfigArgs) ToDomainNewCertificateConfigPtrOutput() DomainNewCertificateConfigPtrOutput {
	return i.ToDomainNewCertificateConfigPtrOutputWithContext(context.Background())
}

func (i DomainNewCertificateConfigArgs) ToDomainNewCertificateConfigPtrOutputWithContext(ctx context.Context) DomainNewCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNewCertificateConfigOutput).ToDomainNewCertificateConfigPtrOutputWithContext(ctx)
}

// DomainNewCertificateConfigPtrInput is an input type that accepts DomainNewCertificateConfigArgs, DomainNewCertificateConfigPtr and DomainNewCertificateConfigPtrOutput values.
// You can construct a concrete instance of `DomainNewCertificateConfigPtrInput` via:
//
//          DomainNewCertificateConfigArgs{...}
//
//  or:
//
//          nil
type DomainNewCertificateConfigPtrInput interface {
	pulumi.Input

	ToDomainNewCertificateConfigPtrOutput() DomainNewCertificateConfigPtrOutput
	ToDomainNewCertificateConfigPtrOutputWithContext(context.Context) DomainNewCertificateConfigPtrOutput
}

type domainNewCertificateConfigPtrType DomainNewCertificateConfigArgs

func DomainNewCertificateConfigPtr(v *DomainNewCertificateConfigArgs) DomainNewCertificateConfigPtrInput {
	return (*domainNewCertificateConfigPtrType)(v)
}

func (*domainNewCertificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNewCertificateConfig)(nil)).Elem()
}

func (i *domainNewCertificateConfigPtrType) ToDomainNewCertificateConfigPtrOutput() DomainNewCertificateConfigPtrOutput {
	return i.ToDomainNewCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *domainNewCertificateConfigPtrType) ToDomainNewCertificateConfigPtrOutputWithContext(ctx context.Context) DomainNewCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNewCertificateConfigPtrOutput)
}

type DomainNewCertificateConfigOutput struct{ *pulumi.OutputState }

func (DomainNewCertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNewCertificateConfig)(nil)).Elem()
}

func (o DomainNewCertificateConfigOutput) ToDomainNewCertificateConfigOutput() DomainNewCertificateConfigOutput {
	return o
}

func (o DomainNewCertificateConfigOutput) ToDomainNewCertificateConfigOutputWithContext(ctx context.Context) DomainNewCertificateConfigOutput {
	return o
}

func (o DomainNewCertificateConfigOutput) ToDomainNewCertificateConfigPtrOutput() DomainNewCertificateConfigPtrOutput {
	return o.ToDomainNewCertificateConfigPtrOutputWithContext(context.Background())
}

func (o DomainNewCertificateConfigOutput) ToDomainNewCertificateConfigPtrOutputWithContext(ctx context.Context) DomainNewCertificateConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainNewCertificateConfig) *DomainNewCertificateConfig {
		return &v
	}).(DomainNewCertificateConfigPtrOutput)
}

// The SSL certificate name.
func (o DomainNewCertificateConfigOutput) CertName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.CertName }).(pulumi.StringPtrOutput)
}

// The SSL certificate type, can be "upload", "cas" and "free".
func (o DomainNewCertificateConfigOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.CertType }).(pulumi.StringPtrOutput)
}

// Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
func (o DomainNewCertificateConfigOutput) ForceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.ForceSet }).(pulumi.StringPtrOutput)
}

// The SSL private key. This is required if `serverCertificateStatus` is `on`
func (o DomainNewCertificateConfigOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
func (o DomainNewCertificateConfigOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
func (o DomainNewCertificateConfigOutput) ServerCertificateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNewCertificateConfig) *string { return v.ServerCertificateStatus }).(pulumi.StringPtrOutput)
}

type DomainNewCertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainNewCertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNewCertificateConfig)(nil)).Elem()
}

func (o DomainNewCertificateConfigPtrOutput) ToDomainNewCertificateConfigPtrOutput() DomainNewCertificateConfigPtrOutput {
	return o
}

func (o DomainNewCertificateConfigPtrOutput) ToDomainNewCertificateConfigPtrOutputWithContext(ctx context.Context) DomainNewCertificateConfigPtrOutput {
	return o
}

func (o DomainNewCertificateConfigPtrOutput) Elem() DomainNewCertificateConfigOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) DomainNewCertificateConfig {
		if v != nil {
			return *v
		}
		var ret DomainNewCertificateConfig
		return ret
	}).(DomainNewCertificateConfigOutput)
}

// The SSL certificate name.
func (o DomainNewCertificateConfigPtrOutput) CertName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertName
	}).(pulumi.StringPtrOutput)
}

// The SSL certificate type, can be "upload", "cas" and "free".
func (o DomainNewCertificateConfigPtrOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertType
	}).(pulumi.StringPtrOutput)
}

// Set `1` to ignore the repeated verification for certificate name, and cover the information of the origin certificate (with the same name). Set `0` to work the verification.
func (o DomainNewCertificateConfigPtrOutput) ForceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.ForceSet
	}).(pulumi.StringPtrOutput)
}

// The SSL private key. This is required if `serverCertificateStatus` is `on`
func (o DomainNewCertificateConfigPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// The SSL server certificate string. This is required if `serverCertificateStatus` is `on`
func (o DomainNewCertificateConfigPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

// This parameter indicates whether or not enable https. Valid values are `on` and `off`. Default value is `on`.
func (o DomainNewCertificateConfigPtrOutput) ServerCertificateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNewCertificateConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificateStatus
	}).(pulumi.StringPtrOutput)
}

type DomainNewSource struct {
	// The address of source. Valid values can be ip or doaminName. Each item's `content` can not be repeated.
	Content string `pulumi:"content"`
	// The port of source. Valid values are `443` and `80`. Default value is `80`.
	Port *int `pulumi:"port"`
	// Priority of the source. Valid values are `0` and `100`. Default value is `20`.
	Priority *int `pulumi:"priority"`
	// The type of the source. Valid values are `ipaddr`, `domain` and `oss`.
	Type string `pulumi:"type"`
	// Weight of the source. Valid values are from `0` to `100`. Default value is `10`, but if type is `ipaddr`, the value can only be `10`.
	Weight *int `pulumi:"weight"`
}

// DomainNewSourceInput is an input type that accepts DomainNewSourceArgs and DomainNewSourceOutput values.
// You can construct a concrete instance of `DomainNewSourceInput` via:
//
//          DomainNewSourceArgs{...}
type DomainNewSourceInput interface {
	pulumi.Input

	ToDomainNewSourceOutput() DomainNewSourceOutput
	ToDomainNewSourceOutputWithContext(context.Context) DomainNewSourceOutput
}

type DomainNewSourceArgs struct {
	// The address of source. Valid values can be ip or doaminName. Each item's `content` can not be repeated.
	Content pulumi.StringInput `pulumi:"content"`
	// The port of source. Valid values are `443` and `80`. Default value is `80`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Priority of the source. Valid values are `0` and `100`. Default value is `20`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The type of the source. Valid values are `ipaddr`, `domain` and `oss`.
	Type pulumi.StringInput `pulumi:"type"`
	// Weight of the source. Valid values are from `0` to `100`. Default value is `10`, but if type is `ipaddr`, the value can only be `10`.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (DomainNewSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNewSource)(nil)).Elem()
}

func (i DomainNewSourceArgs) ToDomainNewSourceOutput() DomainNewSourceOutput {
	return i.ToDomainNewSourceOutputWithContext(context.Background())
}

func (i DomainNewSourceArgs) ToDomainNewSourceOutputWithContext(ctx context.Context) DomainNewSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNewSourceOutput)
}

// DomainNewSourceArrayInput is an input type that accepts DomainNewSourceArray and DomainNewSourceArrayOutput values.
// You can construct a concrete instance of `DomainNewSourceArrayInput` via:
//
//          DomainNewSourceArray{ DomainNewSourceArgs{...} }
type DomainNewSourceArrayInput interface {
	pulumi.Input

	ToDomainNewSourceArrayOutput() DomainNewSourceArrayOutput
	ToDomainNewSourceArrayOutputWithContext(context.Context) DomainNewSourceArrayOutput
}

type DomainNewSourceArray []DomainNewSourceInput

func (DomainNewSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNewSource)(nil)).Elem()
}

func (i DomainNewSourceArray) ToDomainNewSourceArrayOutput() DomainNewSourceArrayOutput {
	return i.ToDomainNewSourceArrayOutputWithContext(context.Background())
}

func (i DomainNewSourceArray) ToDomainNewSourceArrayOutputWithContext(ctx context.Context) DomainNewSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNewSourceArrayOutput)
}

type DomainNewSourceOutput struct{ *pulumi.OutputState }

func (DomainNewSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNewSource)(nil)).Elem()
}

func (o DomainNewSourceOutput) ToDomainNewSourceOutput() DomainNewSourceOutput {
	return o
}

func (o DomainNewSourceOutput) ToDomainNewSourceOutputWithContext(ctx context.Context) DomainNewSourceOutput {
	return o
}

// The address of source. Valid values can be ip or doaminName. Each item's `content` can not be repeated.
func (o DomainNewSourceOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v DomainNewSource) string { return v.Content }).(pulumi.StringOutput)
}

// The port of source. Valid values are `443` and `80`. Default value is `80`.
func (o DomainNewSourceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainNewSource) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Priority of the source. Valid values are `0` and `100`. Default value is `20`.
func (o DomainNewSourceOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainNewSource) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The type of the source. Valid values are `ipaddr`, `domain` and `oss`.
func (o DomainNewSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainNewSource) string { return v.Type }).(pulumi.StringOutput)
}

// Weight of the source. Valid values are from `0` to `100`. Default value is `10`, but if type is `ipaddr`, the value can only be `10`.
func (o DomainNewSourceOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainNewSource) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type DomainNewSourceArrayOutput struct{ *pulumi.OutputState }

func (DomainNewSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNewSource)(nil)).Elem()
}

func (o DomainNewSourceArrayOutput) ToDomainNewSourceArrayOutput() DomainNewSourceArrayOutput {
	return o
}

func (o DomainNewSourceArrayOutput) ToDomainNewSourceArrayOutputWithContext(ctx context.Context) DomainNewSourceArrayOutput {
	return o
}

func (o DomainNewSourceArrayOutput) Index(i pulumi.IntInput) DomainNewSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainNewSource {
		return vs[0].([]DomainNewSource)[vs[1].(int)]
	}).(DomainNewSourceOutput)
}

type DomainPage404Config struct {
	// Custom page url of the error page. It must be the full path under the accelerated domain name. It's value must be `http://promotion.alicdn.com/help/oss/error.html` when `pageType` value is `charity` and It can not be set when `pageType` value is `default`.
	CustomPageUrl *string `pulumi:"customPageUrl"`
	ErrorCode     *string `pulumi:"errorCode"`
	// Page type of the error page. Valid values are `default`, `charity`, `other`. Default value is `default`.
	PageType *string `pulumi:"pageType"`
}

// DomainPage404ConfigInput is an input type that accepts DomainPage404ConfigArgs and DomainPage404ConfigOutput values.
// You can construct a concrete instance of `DomainPage404ConfigInput` via:
//
//          DomainPage404ConfigArgs{...}
type DomainPage404ConfigInput interface {
	pulumi.Input

	ToDomainPage404ConfigOutput() DomainPage404ConfigOutput
	ToDomainPage404ConfigOutputWithContext(context.Context) DomainPage404ConfigOutput
}

type DomainPage404ConfigArgs struct {
	// Custom page url of the error page. It must be the full path under the accelerated domain name. It's value must be `http://promotion.alicdn.com/help/oss/error.html` when `pageType` value is `charity` and It can not be set when `pageType` value is `default`.
	CustomPageUrl pulumi.StringPtrInput `pulumi:"customPageUrl"`
	ErrorCode     pulumi.StringPtrInput `pulumi:"errorCode"`
	// Page type of the error page. Valid values are `default`, `charity`, `other`. Default value is `default`.
	PageType pulumi.StringPtrInput `pulumi:"pageType"`
}

func (DomainPage404ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPage404Config)(nil)).Elem()
}

func (i DomainPage404ConfigArgs) ToDomainPage404ConfigOutput() DomainPage404ConfigOutput {
	return i.ToDomainPage404ConfigOutputWithContext(context.Background())
}

func (i DomainPage404ConfigArgs) ToDomainPage404ConfigOutputWithContext(ctx context.Context) DomainPage404ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPage404ConfigOutput)
}

func (i DomainPage404ConfigArgs) ToDomainPage404ConfigPtrOutput() DomainPage404ConfigPtrOutput {
	return i.ToDomainPage404ConfigPtrOutputWithContext(context.Background())
}

func (i DomainPage404ConfigArgs) ToDomainPage404ConfigPtrOutputWithContext(ctx context.Context) DomainPage404ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPage404ConfigOutput).ToDomainPage404ConfigPtrOutputWithContext(ctx)
}

// DomainPage404ConfigPtrInput is an input type that accepts DomainPage404ConfigArgs, DomainPage404ConfigPtr and DomainPage404ConfigPtrOutput values.
// You can construct a concrete instance of `DomainPage404ConfigPtrInput` via:
//
//          DomainPage404ConfigArgs{...}
//
//  or:
//
//          nil
type DomainPage404ConfigPtrInput interface {
	pulumi.Input

	ToDomainPage404ConfigPtrOutput() DomainPage404ConfigPtrOutput
	ToDomainPage404ConfigPtrOutputWithContext(context.Context) DomainPage404ConfigPtrOutput
}

type domainPage404ConfigPtrType DomainPage404ConfigArgs

func DomainPage404ConfigPtr(v *DomainPage404ConfigArgs) DomainPage404ConfigPtrInput {
	return (*domainPage404ConfigPtrType)(v)
}

func (*domainPage404ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPage404Config)(nil)).Elem()
}

func (i *domainPage404ConfigPtrType) ToDomainPage404ConfigPtrOutput() DomainPage404ConfigPtrOutput {
	return i.ToDomainPage404ConfigPtrOutputWithContext(context.Background())
}

func (i *domainPage404ConfigPtrType) ToDomainPage404ConfigPtrOutputWithContext(ctx context.Context) DomainPage404ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPage404ConfigPtrOutput)
}

type DomainPage404ConfigOutput struct{ *pulumi.OutputState }

func (DomainPage404ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPage404Config)(nil)).Elem()
}

func (o DomainPage404ConfigOutput) ToDomainPage404ConfigOutput() DomainPage404ConfigOutput {
	return o
}

func (o DomainPage404ConfigOutput) ToDomainPage404ConfigOutputWithContext(ctx context.Context) DomainPage404ConfigOutput {
	return o
}

func (o DomainPage404ConfigOutput) ToDomainPage404ConfigPtrOutput() DomainPage404ConfigPtrOutput {
	return o.ToDomainPage404ConfigPtrOutputWithContext(context.Background())
}

func (o DomainPage404ConfigOutput) ToDomainPage404ConfigPtrOutputWithContext(ctx context.Context) DomainPage404ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainPage404Config) *DomainPage404Config {
		return &v
	}).(DomainPage404ConfigPtrOutput)
}

// Custom page url of the error page. It must be the full path under the accelerated domain name. It's value must be `http://promotion.alicdn.com/help/oss/error.html` when `pageType` value is `charity` and It can not be set when `pageType` value is `default`.
func (o DomainPage404ConfigOutput) CustomPageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainPage404Config) *string { return v.CustomPageUrl }).(pulumi.StringPtrOutput)
}

func (o DomainPage404ConfigOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainPage404Config) *string { return v.ErrorCode }).(pulumi.StringPtrOutput)
}

// Page type of the error page. Valid values are `default`, `charity`, `other`. Default value is `default`.
func (o DomainPage404ConfigOutput) PageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainPage404Config) *string { return v.PageType }).(pulumi.StringPtrOutput)
}

type DomainPage404ConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainPage404ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPage404Config)(nil)).Elem()
}

func (o DomainPage404ConfigPtrOutput) ToDomainPage404ConfigPtrOutput() DomainPage404ConfigPtrOutput {
	return o
}

func (o DomainPage404ConfigPtrOutput) ToDomainPage404ConfigPtrOutputWithContext(ctx context.Context) DomainPage404ConfigPtrOutput {
	return o
}

func (o DomainPage404ConfigPtrOutput) Elem() DomainPage404ConfigOutput {
	return o.ApplyT(func(v *DomainPage404Config) DomainPage404Config {
		if v != nil {
			return *v
		}
		var ret DomainPage404Config
		return ret
	}).(DomainPage404ConfigOutput)
}

// Custom page url of the error page. It must be the full path under the accelerated domain name. It's value must be `http://promotion.alicdn.com/help/oss/error.html` when `pageType` value is `charity` and It can not be set when `pageType` value is `default`.
func (o DomainPage404ConfigPtrOutput) CustomPageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPage404Config) *string {
		if v == nil {
			return nil
		}
		return v.CustomPageUrl
	}).(pulumi.StringPtrOutput)
}

func (o DomainPage404ConfigPtrOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPage404Config) *string {
		if v == nil {
			return nil
		}
		return v.ErrorCode
	}).(pulumi.StringPtrOutput)
}

// Page type of the error page. Valid values are `default`, `charity`, `other`. Default value is `default`.
func (o DomainPage404ConfigPtrOutput) PageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPage404Config) *string {
		if v == nil {
			return nil
		}
		return v.PageType
	}).(pulumi.StringPtrOutput)
}

type DomainParameterFilterConfig struct {
	// This parameter indicates whether or not the `parameterFilterConfig` is enable. Valid values are `on` and `off`. Default value is `off`.
	Enable *string `pulumi:"enable"`
	// Reserved parameters of `parameterFilterConfig`. It's a list of string and consists of at most 10 items.
	HashKeyArgs []string `pulumi:"hashKeyArgs"`
}

// DomainParameterFilterConfigInput is an input type that accepts DomainParameterFilterConfigArgs and DomainParameterFilterConfigOutput values.
// You can construct a concrete instance of `DomainParameterFilterConfigInput` via:
//
//          DomainParameterFilterConfigArgs{...}
type DomainParameterFilterConfigInput interface {
	pulumi.Input

	ToDomainParameterFilterConfigOutput() DomainParameterFilterConfigOutput
	ToDomainParameterFilterConfigOutputWithContext(context.Context) DomainParameterFilterConfigOutput
}

type DomainParameterFilterConfigArgs struct {
	// This parameter indicates whether or not the `parameterFilterConfig` is enable. Valid values are `on` and `off`. Default value is `off`.
	Enable pulumi.StringPtrInput `pulumi:"enable"`
	// Reserved parameters of `parameterFilterConfig`. It's a list of string and consists of at most 10 items.
	HashKeyArgs pulumi.StringArrayInput `pulumi:"hashKeyArgs"`
}

func (DomainParameterFilterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainParameterFilterConfig)(nil)).Elem()
}

func (i DomainParameterFilterConfigArgs) ToDomainParameterFilterConfigOutput() DomainParameterFilterConfigOutput {
	return i.ToDomainParameterFilterConfigOutputWithContext(context.Background())
}

func (i DomainParameterFilterConfigArgs) ToDomainParameterFilterConfigOutputWithContext(ctx context.Context) DomainParameterFilterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainParameterFilterConfigOutput)
}

func (i DomainParameterFilterConfigArgs) ToDomainParameterFilterConfigPtrOutput() DomainParameterFilterConfigPtrOutput {
	return i.ToDomainParameterFilterConfigPtrOutputWithContext(context.Background())
}

func (i DomainParameterFilterConfigArgs) ToDomainParameterFilterConfigPtrOutputWithContext(ctx context.Context) DomainParameterFilterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainParameterFilterConfigOutput).ToDomainParameterFilterConfigPtrOutputWithContext(ctx)
}

// DomainParameterFilterConfigPtrInput is an input type that accepts DomainParameterFilterConfigArgs, DomainParameterFilterConfigPtr and DomainParameterFilterConfigPtrOutput values.
// You can construct a concrete instance of `DomainParameterFilterConfigPtrInput` via:
//
//          DomainParameterFilterConfigArgs{...}
//
//  or:
//
//          nil
type DomainParameterFilterConfigPtrInput interface {
	pulumi.Input

	ToDomainParameterFilterConfigPtrOutput() DomainParameterFilterConfigPtrOutput
	ToDomainParameterFilterConfigPtrOutputWithContext(context.Context) DomainParameterFilterConfigPtrOutput
}

type domainParameterFilterConfigPtrType DomainParameterFilterConfigArgs

func DomainParameterFilterConfigPtr(v *DomainParameterFilterConfigArgs) DomainParameterFilterConfigPtrInput {
	return (*domainParameterFilterConfigPtrType)(v)
}

func (*domainParameterFilterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainParameterFilterConfig)(nil)).Elem()
}

func (i *domainParameterFilterConfigPtrType) ToDomainParameterFilterConfigPtrOutput() DomainParameterFilterConfigPtrOutput {
	return i.ToDomainParameterFilterConfigPtrOutputWithContext(context.Background())
}

func (i *domainParameterFilterConfigPtrType) ToDomainParameterFilterConfigPtrOutputWithContext(ctx context.Context) DomainParameterFilterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainParameterFilterConfigPtrOutput)
}

type DomainParameterFilterConfigOutput struct{ *pulumi.OutputState }

func (DomainParameterFilterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainParameterFilterConfig)(nil)).Elem()
}

func (o DomainParameterFilterConfigOutput) ToDomainParameterFilterConfigOutput() DomainParameterFilterConfigOutput {
	return o
}

func (o DomainParameterFilterConfigOutput) ToDomainParameterFilterConfigOutputWithContext(ctx context.Context) DomainParameterFilterConfigOutput {
	return o
}

func (o DomainParameterFilterConfigOutput) ToDomainParameterFilterConfigPtrOutput() DomainParameterFilterConfigPtrOutput {
	return o.ToDomainParameterFilterConfigPtrOutputWithContext(context.Background())
}

func (o DomainParameterFilterConfigOutput) ToDomainParameterFilterConfigPtrOutputWithContext(ctx context.Context) DomainParameterFilterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainParameterFilterConfig) *DomainParameterFilterConfig {
		return &v
	}).(DomainParameterFilterConfigPtrOutput)
}

// This parameter indicates whether or not the `parameterFilterConfig` is enable. Valid values are `on` and `off`. Default value is `off`.
func (o DomainParameterFilterConfigOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainParameterFilterConfig) *string { return v.Enable }).(pulumi.StringPtrOutput)
}

// Reserved parameters of `parameterFilterConfig`. It's a list of string and consists of at most 10 items.
func (o DomainParameterFilterConfigOutput) HashKeyArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainParameterFilterConfig) []string { return v.HashKeyArgs }).(pulumi.StringArrayOutput)
}

type DomainParameterFilterConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainParameterFilterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainParameterFilterConfig)(nil)).Elem()
}

func (o DomainParameterFilterConfigPtrOutput) ToDomainParameterFilterConfigPtrOutput() DomainParameterFilterConfigPtrOutput {
	return o
}

func (o DomainParameterFilterConfigPtrOutput) ToDomainParameterFilterConfigPtrOutputWithContext(ctx context.Context) DomainParameterFilterConfigPtrOutput {
	return o
}

func (o DomainParameterFilterConfigPtrOutput) Elem() DomainParameterFilterConfigOutput {
	return o.ApplyT(func(v *DomainParameterFilterConfig) DomainParameterFilterConfig {
		if v != nil {
			return *v
		}
		var ret DomainParameterFilterConfig
		return ret
	}).(DomainParameterFilterConfigOutput)
}

// This parameter indicates whether or not the `parameterFilterConfig` is enable. Valid values are `on` and `off`. Default value is `off`.
func (o DomainParameterFilterConfigPtrOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainParameterFilterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.StringPtrOutput)
}

// Reserved parameters of `parameterFilterConfig`. It's a list of string and consists of at most 10 items.
func (o DomainParameterFilterConfigPtrOutput) HashKeyArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainParameterFilterConfig) []string {
		if v == nil {
			return nil
		}
		return v.HashKeyArgs
	}).(pulumi.StringArrayOutput)
}

type DomainReferConfig struct {
	// This parameter indicates whether or not to allow empty refer access. Valid values are `on` and `off`. Default value is `on`.
	AllowEmpty *string `pulumi:"allowEmpty"`
	// A list of domain names of the refer config.
	ReferLists []string `pulumi:"referLists"`
	// Refer type of the refer config. Valid values are `block` and `allow`. Default value is `block`.
	ReferType *string `pulumi:"referType"`
}

// DomainReferConfigInput is an input type that accepts DomainReferConfigArgs and DomainReferConfigOutput values.
// You can construct a concrete instance of `DomainReferConfigInput` via:
//
//          DomainReferConfigArgs{...}
type DomainReferConfigInput interface {
	pulumi.Input

	ToDomainReferConfigOutput() DomainReferConfigOutput
	ToDomainReferConfigOutputWithContext(context.Context) DomainReferConfigOutput
}

type DomainReferConfigArgs struct {
	// This parameter indicates whether or not to allow empty refer access. Valid values are `on` and `off`. Default value is `on`.
	AllowEmpty pulumi.StringPtrInput `pulumi:"allowEmpty"`
	// A list of domain names of the refer config.
	ReferLists pulumi.StringArrayInput `pulumi:"referLists"`
	// Refer type of the refer config. Valid values are `block` and `allow`. Default value is `block`.
	ReferType pulumi.StringPtrInput `pulumi:"referType"`
}

func (DomainReferConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReferConfig)(nil)).Elem()
}

func (i DomainReferConfigArgs) ToDomainReferConfigOutput() DomainReferConfigOutput {
	return i.ToDomainReferConfigOutputWithContext(context.Background())
}

func (i DomainReferConfigArgs) ToDomainReferConfigOutputWithContext(ctx context.Context) DomainReferConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReferConfigOutput)
}

func (i DomainReferConfigArgs) ToDomainReferConfigPtrOutput() DomainReferConfigPtrOutput {
	return i.ToDomainReferConfigPtrOutputWithContext(context.Background())
}

func (i DomainReferConfigArgs) ToDomainReferConfigPtrOutputWithContext(ctx context.Context) DomainReferConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReferConfigOutput).ToDomainReferConfigPtrOutputWithContext(ctx)
}

// DomainReferConfigPtrInput is an input type that accepts DomainReferConfigArgs, DomainReferConfigPtr and DomainReferConfigPtrOutput values.
// You can construct a concrete instance of `DomainReferConfigPtrInput` via:
//
//          DomainReferConfigArgs{...}
//
//  or:
//
//          nil
type DomainReferConfigPtrInput interface {
	pulumi.Input

	ToDomainReferConfigPtrOutput() DomainReferConfigPtrOutput
	ToDomainReferConfigPtrOutputWithContext(context.Context) DomainReferConfigPtrOutput
}

type domainReferConfigPtrType DomainReferConfigArgs

func DomainReferConfigPtr(v *DomainReferConfigArgs) DomainReferConfigPtrInput {
	return (*domainReferConfigPtrType)(v)
}

func (*domainReferConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainReferConfig)(nil)).Elem()
}

func (i *domainReferConfigPtrType) ToDomainReferConfigPtrOutput() DomainReferConfigPtrOutput {
	return i.ToDomainReferConfigPtrOutputWithContext(context.Background())
}

func (i *domainReferConfigPtrType) ToDomainReferConfigPtrOutputWithContext(ctx context.Context) DomainReferConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainReferConfigPtrOutput)
}

type DomainReferConfigOutput struct{ *pulumi.OutputState }

func (DomainReferConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainReferConfig)(nil)).Elem()
}

func (o DomainReferConfigOutput) ToDomainReferConfigOutput() DomainReferConfigOutput {
	return o
}

func (o DomainReferConfigOutput) ToDomainReferConfigOutputWithContext(ctx context.Context) DomainReferConfigOutput {
	return o
}

func (o DomainReferConfigOutput) ToDomainReferConfigPtrOutput() DomainReferConfigPtrOutput {
	return o.ToDomainReferConfigPtrOutputWithContext(context.Background())
}

func (o DomainReferConfigOutput) ToDomainReferConfigPtrOutputWithContext(ctx context.Context) DomainReferConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainReferConfig) *DomainReferConfig {
		return &v
	}).(DomainReferConfigPtrOutput)
}

// This parameter indicates whether or not to allow empty refer access. Valid values are `on` and `off`. Default value is `on`.
func (o DomainReferConfigOutput) AllowEmpty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReferConfig) *string { return v.AllowEmpty }).(pulumi.StringPtrOutput)
}

// A list of domain names of the refer config.
func (o DomainReferConfigOutput) ReferLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainReferConfig) []string { return v.ReferLists }).(pulumi.StringArrayOutput)
}

// Refer type of the refer config. Valid values are `block` and `allow`. Default value is `block`.
func (o DomainReferConfigOutput) ReferType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainReferConfig) *string { return v.ReferType }).(pulumi.StringPtrOutput)
}

type DomainReferConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainReferConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainReferConfig)(nil)).Elem()
}

func (o DomainReferConfigPtrOutput) ToDomainReferConfigPtrOutput() DomainReferConfigPtrOutput {
	return o
}

func (o DomainReferConfigPtrOutput) ToDomainReferConfigPtrOutputWithContext(ctx context.Context) DomainReferConfigPtrOutput {
	return o
}

func (o DomainReferConfigPtrOutput) Elem() DomainReferConfigOutput {
	return o.ApplyT(func(v *DomainReferConfig) DomainReferConfig {
		if v != nil {
			return *v
		}
		var ret DomainReferConfig
		return ret
	}).(DomainReferConfigOutput)
}

// This parameter indicates whether or not to allow empty refer access. Valid values are `on` and `off`. Default value is `on`.
func (o DomainReferConfigPtrOutput) AllowEmpty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainReferConfig) *string {
		if v == nil {
			return nil
		}
		return v.AllowEmpty
	}).(pulumi.StringPtrOutput)
}

// A list of domain names of the refer config.
func (o DomainReferConfigPtrOutput) ReferLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainReferConfig) []string {
		if v == nil {
			return nil
		}
		return v.ReferLists
	}).(pulumi.StringArrayOutput)
}

// Refer type of the refer config. Valid values are `block` and `allow`. Default value is `block`.
func (o DomainReferConfigPtrOutput) ReferType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainReferConfig) *string {
		if v == nil {
			return nil
		}
		return v.ReferType
	}).(pulumi.StringPtrOutput)
}

type GetRealTimeLogDeliveriesDelivery struct {
	// Real-Time Log Service Domain.
	Domain string `pulumi:"domain"`
	// The ID of the Real Time Log Delivery.
	Id string `pulumi:"id"`
	// The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
	Logstore string `pulumi:"logstore"`
	// The name of the Log Service project that is used for real-time log delivery.
	Project string `pulumi:"project"`
	// The region where the Log Service project is deployed.
	SlsRegion string `pulumi:"slsRegion"`
	// -The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
	Status string `pulumi:"status"`
}

// GetRealTimeLogDeliveriesDeliveryInput is an input type that accepts GetRealTimeLogDeliveriesDeliveryArgs and GetRealTimeLogDeliveriesDeliveryOutput values.
// You can construct a concrete instance of `GetRealTimeLogDeliveriesDeliveryInput` via:
//
//          GetRealTimeLogDeliveriesDeliveryArgs{...}
type GetRealTimeLogDeliveriesDeliveryInput interface {
	pulumi.Input

	ToGetRealTimeLogDeliveriesDeliveryOutput() GetRealTimeLogDeliveriesDeliveryOutput
	ToGetRealTimeLogDeliveriesDeliveryOutputWithContext(context.Context) GetRealTimeLogDeliveriesDeliveryOutput
}

type GetRealTimeLogDeliveriesDeliveryArgs struct {
	// Real-Time Log Service Domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the Real Time Log Delivery.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
	Logstore pulumi.StringInput `pulumi:"logstore"`
	// The name of the Log Service project that is used for real-time log delivery.
	Project pulumi.StringInput `pulumi:"project"`
	// The region where the Log Service project is deployed.
	SlsRegion pulumi.StringInput `pulumi:"slsRegion"`
	// -The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRealTimeLogDeliveriesDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealTimeLogDeliveriesDelivery)(nil)).Elem()
}

func (i GetRealTimeLogDeliveriesDeliveryArgs) ToGetRealTimeLogDeliveriesDeliveryOutput() GetRealTimeLogDeliveriesDeliveryOutput {
	return i.ToGetRealTimeLogDeliveriesDeliveryOutputWithContext(context.Background())
}

func (i GetRealTimeLogDeliveriesDeliveryArgs) ToGetRealTimeLogDeliveriesDeliveryOutputWithContext(ctx context.Context) GetRealTimeLogDeliveriesDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealTimeLogDeliveriesDeliveryOutput)
}

// GetRealTimeLogDeliveriesDeliveryArrayInput is an input type that accepts GetRealTimeLogDeliveriesDeliveryArray and GetRealTimeLogDeliveriesDeliveryArrayOutput values.
// You can construct a concrete instance of `GetRealTimeLogDeliveriesDeliveryArrayInput` via:
//
//          GetRealTimeLogDeliveriesDeliveryArray{ GetRealTimeLogDeliveriesDeliveryArgs{...} }
type GetRealTimeLogDeliveriesDeliveryArrayInput interface {
	pulumi.Input

	ToGetRealTimeLogDeliveriesDeliveryArrayOutput() GetRealTimeLogDeliveriesDeliveryArrayOutput
	ToGetRealTimeLogDeliveriesDeliveryArrayOutputWithContext(context.Context) GetRealTimeLogDeliveriesDeliveryArrayOutput
}

type GetRealTimeLogDeliveriesDeliveryArray []GetRealTimeLogDeliveriesDeliveryInput

func (GetRealTimeLogDeliveriesDeliveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealTimeLogDeliveriesDelivery)(nil)).Elem()
}

func (i GetRealTimeLogDeliveriesDeliveryArray) ToGetRealTimeLogDeliveriesDeliveryArrayOutput() GetRealTimeLogDeliveriesDeliveryArrayOutput {
	return i.ToGetRealTimeLogDeliveriesDeliveryArrayOutputWithContext(context.Background())
}

func (i GetRealTimeLogDeliveriesDeliveryArray) ToGetRealTimeLogDeliveriesDeliveryArrayOutputWithContext(ctx context.Context) GetRealTimeLogDeliveriesDeliveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealTimeLogDeliveriesDeliveryArrayOutput)
}

type GetRealTimeLogDeliveriesDeliveryOutput struct{ *pulumi.OutputState }

func (GetRealTimeLogDeliveriesDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealTimeLogDeliveriesDelivery)(nil)).Elem()
}

func (o GetRealTimeLogDeliveriesDeliveryOutput) ToGetRealTimeLogDeliveriesDeliveryOutput() GetRealTimeLogDeliveriesDeliveryOutput {
	return o
}

func (o GetRealTimeLogDeliveriesDeliveryOutput) ToGetRealTimeLogDeliveriesDeliveryOutputWithContext(ctx context.Context) GetRealTimeLogDeliveriesDeliveryOutput {
	return o
}

// Real-Time Log Service Domain.
func (o GetRealTimeLogDeliveriesDeliveryOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the Real Time Log Delivery.
func (o GetRealTimeLogDeliveriesDeliveryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.
func (o GetRealTimeLogDeliveriesDeliveryOutput) Logstore() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.Logstore }).(pulumi.StringOutput)
}

// The name of the Log Service project that is used for real-time log delivery.
func (o GetRealTimeLogDeliveriesDeliveryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.Project }).(pulumi.StringOutput)
}

// The region where the Log Service project is deployed.
func (o GetRealTimeLogDeliveriesDeliveryOutput) SlsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.SlsRegion }).(pulumi.StringOutput)
}

// -The status of the real-time log delivery feature. Valid Values: `online` and `offline`.
func (o GetRealTimeLogDeliveriesDeliveryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealTimeLogDeliveriesDelivery) string { return v.Status }).(pulumi.StringOutput)
}

type GetRealTimeLogDeliveriesDeliveryArrayOutput struct{ *pulumi.OutputState }

func (GetRealTimeLogDeliveriesDeliveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealTimeLogDeliveriesDelivery)(nil)).Elem()
}

func (o GetRealTimeLogDeliveriesDeliveryArrayOutput) ToGetRealTimeLogDeliveriesDeliveryArrayOutput() GetRealTimeLogDeliveriesDeliveryArrayOutput {
	return o
}

func (o GetRealTimeLogDeliveriesDeliveryArrayOutput) ToGetRealTimeLogDeliveriesDeliveryArrayOutputWithContext(ctx context.Context) GetRealTimeLogDeliveriesDeliveryArrayOutput {
	return o
}

func (o GetRealTimeLogDeliveriesDeliveryArrayOutput) Index(i pulumi.IntInput) GetRealTimeLogDeliveriesDeliveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealTimeLogDeliveriesDelivery {
		return vs[0].([]GetRealTimeLogDeliveriesDelivery)[vs[1].(int)]
	}).(GetRealTimeLogDeliveriesDeliveryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAuthConfigInput)(nil)).Elem(), DomainAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAuthConfigPtrInput)(nil)).Elem(), DomainAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheConfigInput)(nil)).Elem(), DomainCacheConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCacheConfigArrayInput)(nil)).Elem(), DomainCacheConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateConfigInput)(nil)).Elem(), DomainCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainCertificateConfigPtrInput)(nil)).Elem(), DomainCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigFunctionArgInput)(nil)).Elem(), DomainConfigFunctionArgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigFunctionArgArrayInput)(nil)).Elem(), DomainConfigFunctionArgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainHttpHeaderConfigInput)(nil)).Elem(), DomainHttpHeaderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainHttpHeaderConfigArrayInput)(nil)).Elem(), DomainHttpHeaderConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNewCertificateConfigInput)(nil)).Elem(), DomainNewCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNewCertificateConfigPtrInput)(nil)).Elem(), DomainNewCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNewSourceInput)(nil)).Elem(), DomainNewSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNewSourceArrayInput)(nil)).Elem(), DomainNewSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPage404ConfigInput)(nil)).Elem(), DomainPage404ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPage404ConfigPtrInput)(nil)).Elem(), DomainPage404ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainParameterFilterConfigInput)(nil)).Elem(), DomainParameterFilterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainParameterFilterConfigPtrInput)(nil)).Elem(), DomainParameterFilterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReferConfigInput)(nil)).Elem(), DomainReferConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainReferConfigPtrInput)(nil)).Elem(), DomainReferConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealTimeLogDeliveriesDeliveryInput)(nil)).Elem(), GetRealTimeLogDeliveriesDeliveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealTimeLogDeliveriesDeliveryArrayInput)(nil)).Elem(), GetRealTimeLogDeliveriesDeliveryArray{})
	pulumi.RegisterOutputType(DomainAuthConfigOutput{})
	pulumi.RegisterOutputType(DomainAuthConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainCacheConfigOutput{})
	pulumi.RegisterOutputType(DomainCacheConfigArrayOutput{})
	pulumi.RegisterOutputType(DomainCertificateConfigOutput{})
	pulumi.RegisterOutputType(DomainCertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainConfigFunctionArgOutput{})
	pulumi.RegisterOutputType(DomainConfigFunctionArgArrayOutput{})
	pulumi.RegisterOutputType(DomainHttpHeaderConfigOutput{})
	pulumi.RegisterOutputType(DomainHttpHeaderConfigArrayOutput{})
	pulumi.RegisterOutputType(DomainNewCertificateConfigOutput{})
	pulumi.RegisterOutputType(DomainNewCertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainNewSourceOutput{})
	pulumi.RegisterOutputType(DomainNewSourceArrayOutput{})
	pulumi.RegisterOutputType(DomainPage404ConfigOutput{})
	pulumi.RegisterOutputType(DomainPage404ConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainParameterFilterConfigOutput{})
	pulumi.RegisterOutputType(DomainParameterFilterConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainReferConfigOutput{})
	pulumi.RegisterOutputType(DomainReferConfigPtrOutput{})
	pulumi.RegisterOutputType(GetRealTimeLogDeliveriesDeliveryOutput{})
	pulumi.RegisterOutputType(GetRealTimeLogDeliveriesDeliveryArrayOutput{})
}
