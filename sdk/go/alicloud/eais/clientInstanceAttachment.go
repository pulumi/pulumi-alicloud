// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eais

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// EAIS Client Instance Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eais/clientInstanceAttachment:ClientInstanceAttachment example <instance_id>:<client_instance_id>
// ```
type ClientInstanceAttachment struct {
	pulumi.CustomResourceState

	// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// The ID of the ECS or ECI instance bound to the EAIS instance.
	ClientInstanceId pulumi.StringOutput `pulumi:"clientInstanceId"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The Ei instance specification, which is used to filter matching specifications for updating.
	EiInstanceType pulumi.StringOutput `pulumi:"eiInstanceType"`
	// The EAIS instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region ID of the resource
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewClientInstanceAttachment registers a new resource with the given unique name, arguments, and options.
func NewClientInstanceAttachment(ctx *pulumi.Context,
	name string, args *ClientInstanceAttachmentArgs, opts ...pulumi.ResourceOption) (*ClientInstanceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ClientInstanceId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientInstanceAttachment
	err := ctx.RegisterResource("alicloud:eais/clientInstanceAttachment:ClientInstanceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientInstanceAttachment gets an existing ClientInstanceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientInstanceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientInstanceAttachmentState, opts ...pulumi.ResourceOption) (*ClientInstanceAttachment, error) {
	var resource ClientInstanceAttachment
	err := ctx.ReadResource("alicloud:eais/clientInstanceAttachment:ClientInstanceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientInstanceAttachment resources.
type clientInstanceAttachmentState struct {
	// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
	Category *string `pulumi:"category"`
	// The ID of the ECS or ECI instance bound to the EAIS instance.
	ClientInstanceId *string `pulumi:"clientInstanceId"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// The Ei instance specification, which is used to filter matching specifications for updating.
	EiInstanceType *string `pulumi:"eiInstanceType"`
	// The EAIS instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The region ID of the resource
	RegionId *string `pulumi:"regionId"`
	// The status of the resource
	Status *string `pulumi:"status"`
}

type ClientInstanceAttachmentState struct {
	// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
	Category pulumi.StringPtrInput
	// The ID of the ECS or ECI instance bound to the EAIS instance.
	ClientInstanceId pulumi.StringPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// The Ei instance specification, which is used to filter matching specifications for updating.
	EiInstanceType pulumi.StringPtrInput
	// The EAIS instance ID.
	InstanceId pulumi.StringPtrInput
	// The region ID of the resource
	RegionId pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
}

func (ClientInstanceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientInstanceAttachmentState)(nil)).Elem()
}

type clientInstanceAttachmentArgs struct {
	// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
	Category *string `pulumi:"category"`
	// The ID of the ECS or ECI instance bound to the EAIS instance.
	ClientInstanceId string `pulumi:"clientInstanceId"`
	// The Ei instance specification, which is used to filter matching specifications for updating.
	EiInstanceType *string `pulumi:"eiInstanceType"`
	// The EAIS instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The status of the resource
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a ClientInstanceAttachment resource.
type ClientInstanceAttachmentArgs struct {
	// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
	Category pulumi.StringPtrInput
	// The ID of the ECS or ECI instance bound to the EAIS instance.
	ClientInstanceId pulumi.StringInput
	// The Ei instance specification, which is used to filter matching specifications for updating.
	EiInstanceType pulumi.StringPtrInput
	// The EAIS instance ID.
	InstanceId pulumi.StringInput
	// The status of the resource
	Status pulumi.StringPtrInput
}

func (ClientInstanceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientInstanceAttachmentArgs)(nil)).Elem()
}

type ClientInstanceAttachmentInput interface {
	pulumi.Input

	ToClientInstanceAttachmentOutput() ClientInstanceAttachmentOutput
	ToClientInstanceAttachmentOutputWithContext(ctx context.Context) ClientInstanceAttachmentOutput
}

func (*ClientInstanceAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInstanceAttachment)(nil)).Elem()
}

func (i *ClientInstanceAttachment) ToClientInstanceAttachmentOutput() ClientInstanceAttachmentOutput {
	return i.ToClientInstanceAttachmentOutputWithContext(context.Background())
}

func (i *ClientInstanceAttachment) ToClientInstanceAttachmentOutputWithContext(ctx context.Context) ClientInstanceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInstanceAttachmentOutput)
}

// ClientInstanceAttachmentArrayInput is an input type that accepts ClientInstanceAttachmentArray and ClientInstanceAttachmentArrayOutput values.
// You can construct a concrete instance of `ClientInstanceAttachmentArrayInput` via:
//
//	ClientInstanceAttachmentArray{ ClientInstanceAttachmentArgs{...} }
type ClientInstanceAttachmentArrayInput interface {
	pulumi.Input

	ToClientInstanceAttachmentArrayOutput() ClientInstanceAttachmentArrayOutput
	ToClientInstanceAttachmentArrayOutputWithContext(context.Context) ClientInstanceAttachmentArrayOutput
}

type ClientInstanceAttachmentArray []ClientInstanceAttachmentInput

func (ClientInstanceAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientInstanceAttachment)(nil)).Elem()
}

func (i ClientInstanceAttachmentArray) ToClientInstanceAttachmentArrayOutput() ClientInstanceAttachmentArrayOutput {
	return i.ToClientInstanceAttachmentArrayOutputWithContext(context.Background())
}

func (i ClientInstanceAttachmentArray) ToClientInstanceAttachmentArrayOutputWithContext(ctx context.Context) ClientInstanceAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInstanceAttachmentArrayOutput)
}

// ClientInstanceAttachmentMapInput is an input type that accepts ClientInstanceAttachmentMap and ClientInstanceAttachmentMapOutput values.
// You can construct a concrete instance of `ClientInstanceAttachmentMapInput` via:
//
//	ClientInstanceAttachmentMap{ "key": ClientInstanceAttachmentArgs{...} }
type ClientInstanceAttachmentMapInput interface {
	pulumi.Input

	ToClientInstanceAttachmentMapOutput() ClientInstanceAttachmentMapOutput
	ToClientInstanceAttachmentMapOutputWithContext(context.Context) ClientInstanceAttachmentMapOutput
}

type ClientInstanceAttachmentMap map[string]ClientInstanceAttachmentInput

func (ClientInstanceAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientInstanceAttachment)(nil)).Elem()
}

func (i ClientInstanceAttachmentMap) ToClientInstanceAttachmentMapOutput() ClientInstanceAttachmentMapOutput {
	return i.ToClientInstanceAttachmentMapOutputWithContext(context.Background())
}

func (i ClientInstanceAttachmentMap) ToClientInstanceAttachmentMapOutputWithContext(ctx context.Context) ClientInstanceAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInstanceAttachmentMapOutput)
}

type ClientInstanceAttachmentOutput struct{ *pulumi.OutputState }

func (ClientInstanceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInstanceAttachment)(nil)).Elem()
}

func (o ClientInstanceAttachmentOutput) ToClientInstanceAttachmentOutput() ClientInstanceAttachmentOutput {
	return o
}

func (o ClientInstanceAttachmentOutput) ToClientInstanceAttachmentOutputWithContext(ctx context.Context) ClientInstanceAttachmentOutput {
	return o
}

// EAIS instance category, valid values: `eais`, `ei`, default is `eais`.
func (o ClientInstanceAttachmentOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// The ID of the ECS or ECI instance bound to the EAIS instance.
func (o ClientInstanceAttachmentOutput) ClientInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.ClientInstanceId }).(pulumi.StringOutput)
}

// The creation time of the resource
func (o ClientInstanceAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The Ei instance specification, which is used to filter matching specifications for updating.
func (o ClientInstanceAttachmentOutput) EiInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.EiInstanceType }).(pulumi.StringOutput)
}

// The EAIS instance ID.
func (o ClientInstanceAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region ID of the resource
func (o ClientInstanceAttachmentOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The status of the resource
func (o ClientInstanceAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientInstanceAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ClientInstanceAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ClientInstanceAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientInstanceAttachment)(nil)).Elem()
}

func (o ClientInstanceAttachmentArrayOutput) ToClientInstanceAttachmentArrayOutput() ClientInstanceAttachmentArrayOutput {
	return o
}

func (o ClientInstanceAttachmentArrayOutput) ToClientInstanceAttachmentArrayOutputWithContext(ctx context.Context) ClientInstanceAttachmentArrayOutput {
	return o
}

func (o ClientInstanceAttachmentArrayOutput) Index(i pulumi.IntInput) ClientInstanceAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientInstanceAttachment {
		return vs[0].([]*ClientInstanceAttachment)[vs[1].(int)]
	}).(ClientInstanceAttachmentOutput)
}

type ClientInstanceAttachmentMapOutput struct{ *pulumi.OutputState }

func (ClientInstanceAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientInstanceAttachment)(nil)).Elem()
}

func (o ClientInstanceAttachmentMapOutput) ToClientInstanceAttachmentMapOutput() ClientInstanceAttachmentMapOutput {
	return o
}

func (o ClientInstanceAttachmentMapOutput) ToClientInstanceAttachmentMapOutputWithContext(ctx context.Context) ClientInstanceAttachmentMapOutput {
	return o
}

func (o ClientInstanceAttachmentMapOutput) MapIndex(k pulumi.StringInput) ClientInstanceAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientInstanceAttachment {
		return vs[0].(map[string]*ClientInstanceAttachment)[vs[1].(string)]
	}).(ClientInstanceAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientInstanceAttachmentInput)(nil)).Elem(), &ClientInstanceAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientInstanceAttachmentArrayInput)(nil)).Elem(), ClientInstanceAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientInstanceAttachmentMapInput)(nil)).Elem(), ClientInstanceAttachmentMap{})
	pulumi.RegisterOutputType(ClientInstanceAttachmentOutput{})
	pulumi.RegisterOutputType(ClientInstanceAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ClientInstanceAttachmentMapOutput{})
}
