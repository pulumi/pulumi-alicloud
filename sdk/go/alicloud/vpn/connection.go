// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
//				VpcId:              pulumi.String("vpc-fake-id"),
//				Bandwidth:          pulumi.Int(10),
//				EnableSsl:          pulumi.Bool(true),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				Description:        pulumi.String("test_create_description"),
//			})
//			if err != nil {
//				return err
//			}
//			fooCustomerGateway, err := vpn.NewCustomerGateway(ctx, "fooCustomerGateway", &vpn.CustomerGatewayArgs{
//				IpAddress:   pulumi.String("42.104.22.228"),
//				Description: pulumi.String("testAccVpnCgwDesc"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewConnection(ctx, "fooConnection", &vpn.ConnectionArgs{
//				VpnGatewayId:      fooGateway.ID(),
//				CustomerGatewayId: fooCustomerGateway.ID(),
//				LocalSubnets: pulumi.StringArray{
//					pulumi.String("172.16.0.0/24"),
//					pulumi.String("172.16.1.0/24"),
//				},
//				RemoteSubnets: pulumi.StringArray{
//					pulumi.String("10.0.0.0/24"),
//					pulumi.String("10.0.1.0/24"),
//				},
//				EffectImmediately: pulumi.Bool(true),
//				IkeConfig: &vpn.ConnectionIkeConfigArgs{
//					IkeAuthAlg:  pulumi.String("md5"),
//					IkeEncAlg:   pulumi.String("des"),
//					IkeVersion:  pulumi.String("ikev1"),
//					IkeMode:     pulumi.String("main"),
//					IkeLifetime: pulumi.Int(86400),
//					Psk:         pulumi.String("tf-testvpn2"),
//					IkePfs:      pulumi.String("group1"),
//					IkeRemoteId: pulumi.String("testbob2"),
//					IkeLocalId:  pulumi.String("testalice2"),
//				},
//				IpsecConfig: &vpn.ConnectionIpsecConfigArgs{
//					IpsecPfs:      pulumi.String("group5"),
//					IpsecEncAlg:   pulumi.String("des"),
//					IpsecAuthAlg:  pulumi.String("md5"),
//					IpsecLifetime: pulumi.Int(8640),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN connection can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:vpn/connection:Connection example vco-abc123456
//
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
	BgpConfig ConnectionBgpConfigOutput `pulumi:"bgpConfig"`
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrOutput `pulumi:"effectImmediately"`
	// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
	EnableDpd pulumi.BoolOutput `pulumi:"enableDpd"`
	// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
	EnableNatTraversal pulumi.BoolOutput `pulumi:"enableNatTraversal"`
	// The health check configurations. See the following `Block healthCheckConfig`.
	HealthCheckConfig ConnectionHealthCheckConfigOutput `pulumi:"healthCheckConfig"`
	// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
	IkeConfig ConnectionIkeConfigOutput `pulumi:"ikeConfig"`
	// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
	IpsecConfig ConnectionIpsecConfigOutput `pulumi:"ipsecConfig"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayOutput `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayOutput `pulumi:"remoteSubnets"`
	// The status of VPN connection.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.LocalSubnets == nil {
		return nil, errors.New("invalid value for required argument 'LocalSubnets'")
	}
	if args.RemoteSubnets == nil {
		return nil, errors.New("invalid value for required argument 'RemoteSubnets'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	var resource Connection
	err := ctx.RegisterResource("alicloud:vpn/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("alicloud:vpn/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
	BgpConfig *ConnectionBgpConfig `pulumi:"bgpConfig"`
	// The ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
	EnableDpd *bool `pulumi:"enableDpd"`
	// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
	EnableNatTraversal *bool `pulumi:"enableNatTraversal"`
	// The health check configurations. See the following `Block healthCheckConfig`.
	HealthCheckConfig *ConnectionHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
	IkeConfig *ConnectionIkeConfig `pulumi:"ikeConfig"`
	// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
	IpsecConfig *ConnectionIpsecConfig `pulumi:"ipsecConfig"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name *string `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The status of VPN connection.
	Status *string `pulumi:"status"`
	// The ID of the VPN gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type ConnectionState struct {
	// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
	BgpConfig ConnectionBgpConfigPtrInput
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringPtrInput
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrInput
	// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
	EnableDpd pulumi.BoolPtrInput
	// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
	EnableNatTraversal pulumi.BoolPtrInput
	// The health check configurations. See the following `Block healthCheckConfig`.
	HealthCheckConfig ConnectionHealthCheckConfigPtrInput
	// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
	IkeConfig ConnectionIkeConfigPtrInput
	// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
	IpsecConfig ConnectionIpsecConfigPtrInput
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayInput
	// The name of the IPsec connection.
	Name pulumi.StringPtrInput
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayInput
	// The status of VPN connection.
	Status pulumi.StringPtrInput
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
	BgpConfig *ConnectionBgpConfig `pulumi:"bgpConfig"`
	// The ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
	EnableDpd *bool `pulumi:"enableDpd"`
	// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
	EnableNatTraversal *bool `pulumi:"enableNatTraversal"`
	// The health check configurations. See the following `Block healthCheckConfig`.
	HealthCheckConfig *ConnectionHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
	IkeConfig *ConnectionIkeConfig `pulumi:"ikeConfig"`
	// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
	IpsecConfig *ConnectionIpsecConfig `pulumi:"ipsecConfig"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name *string `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The ID of the VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
	BgpConfig ConnectionBgpConfigPtrInput
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringInput
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrInput
	// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
	EnableDpd pulumi.BoolPtrInput
	// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
	EnableNatTraversal pulumi.BoolPtrInput
	// The health check configurations. See the following `Block healthCheckConfig`.
	HealthCheckConfig ConnectionHealthCheckConfigPtrInput
	// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
	IkeConfig ConnectionIkeConfigPtrInput
	// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
	IpsecConfig ConnectionIpsecConfigPtrInput
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayInput
	// The name of the IPsec connection.
	Name pulumi.StringPtrInput
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayInput
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The configurations of the BGP routing protocol. See the following `Block bgpConfig`.
func (o ConnectionOutput) BgpConfig() ConnectionBgpConfigOutput {
	return o.ApplyT(func(v *Connection) ConnectionBgpConfigOutput { return v.BgpConfig }).(ConnectionBgpConfigOutput)
}

// The ID of the customer gateway.
func (o ConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
func (o ConnectionOutput) EffectImmediately() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.EffectImmediately }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
func (o ConnectionOutput) EnableDpd() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.EnableDpd }).(pulumi.BoolOutput)
}

// Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
func (o ConnectionOutput) EnableNatTraversal() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.EnableNatTraversal }).(pulumi.BoolOutput)
}

// The health check configurations. See the following `Block healthCheckConfig`.
func (o ConnectionOutput) HealthCheckConfig() ConnectionHealthCheckConfigOutput {
	return o.ApplyT(func(v *Connection) ConnectionHealthCheckConfigOutput { return v.HealthCheckConfig }).(ConnectionHealthCheckConfigOutput)
}

// The configurations of phase-one negotiation. See the following `Block ikeConfig`.
func (o ConnectionOutput) IkeConfig() ConnectionIkeConfigOutput {
	return o.ApplyT(func(v *Connection) ConnectionIkeConfigOutput { return v.IkeConfig }).(ConnectionIkeConfigOutput)
}

// The configurations of phase-two negotiation. See the following `Block ipsecConfig`.
func (o ConnectionOutput) IpsecConfig() ConnectionIpsecConfigOutput {
	return o.ApplyT(func(v *Connection) ConnectionIpsecConfigOutput { return v.IpsecConfig }).(ConnectionIpsecConfigOutput)
}

// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
func (o ConnectionOutput) LocalSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringArrayOutput { return v.LocalSubnets }).(pulumi.StringArrayOutput)
}

// The name of the IPsec connection.
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
func (o ConnectionOutput) RemoteSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringArrayOutput { return v.RemoteSubnets }).(pulumi.StringArrayOutput)
}

// The status of VPN connection.
func (o ConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the VPN gateway.
func (o ConnectionOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
