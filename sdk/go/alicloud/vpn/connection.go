// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// VPN connection can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:vpn/connection:Connection example vco-abc123456
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrOutput `pulumi:"effectImmediately"`
	// The configurations of phase-one negotiation.
	IkeConfigs ConnectionIkeConfigArrayOutput `pulumi:"ikeConfigs"`
	// The configurations of phase-two negotiation.
	IpsecConfigs ConnectionIpsecConfigArrayOutput `pulumi:"ipsecConfigs"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayOutput `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayOutput `pulumi:"remoteSubnets"`
	// The status of VPN connection.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil || args.CustomerGatewayId == nil {
		return nil, errors.New("missing required argument 'CustomerGatewayId'")
	}
	if args == nil || args.LocalSubnets == nil {
		return nil, errors.New("missing required argument 'LocalSubnets'")
	}
	if args == nil || args.RemoteSubnets == nil {
		return nil, errors.New("missing required argument 'RemoteSubnets'")
	}
	if args == nil || args.VpnGatewayId == nil {
		return nil, errors.New("missing required argument 'VpnGatewayId'")
	}
	if args == nil {
		args = &ConnectionArgs{}
	}
	var resource Connection
	err := ctx.RegisterResource("alicloud:vpn/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("alicloud:vpn/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// The configurations of phase-one negotiation.
	IkeConfigs []ConnectionIkeConfig `pulumi:"ikeConfigs"`
	// The configurations of phase-two negotiation.
	IpsecConfigs []ConnectionIpsecConfig `pulumi:"ipsecConfigs"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name *string `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The status of VPN connection.
	Status *string `pulumi:"status"`
	// The ID of the VPN gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type ConnectionState struct {
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringPtrInput
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrInput
	// The configurations of phase-one negotiation.
	IkeConfigs ConnectionIkeConfigArrayInput
	// The configurations of phase-two negotiation.
	IpsecConfigs ConnectionIpsecConfigArrayInput
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayInput
	// The name of the IPsec connection.
	Name pulumi.StringPtrInput
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayInput
	// The status of VPN connection.
	Status pulumi.StringPtrInput
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// The configurations of phase-one negotiation.
	IkeConfigs []ConnectionIkeConfig `pulumi:"ikeConfigs"`
	// The configurations of phase-two negotiation.
	IpsecConfigs []ConnectionIpsecConfig `pulumi:"ipsecConfigs"`
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The name of the IPsec connection.
	Name *string `pulumi:"name"`
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The ID of the VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringInput
	// Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
	EffectImmediately pulumi.BoolPtrInput
	// The configurations of phase-one negotiation.
	IkeConfigs ConnectionIkeConfigArrayInput
	// The configurations of phase-two negotiation.
	IpsecConfigs ConnectionIpsecConfigArrayInput
	// The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
	LocalSubnets pulumi.StringArrayInput
	// The name of the IPsec connection.
	Name pulumi.StringPtrInput
	// The CIDR block of the local data center. This parameter is used for phase-two negotiation.
	RemoteSubnets pulumi.StringArrayInput
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (Connection) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (i Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

type ConnectionOutput struct {
	*pulumi.OutputState
}

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionOutput)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConnectionOutput{})
}
