// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the Vpn Gateway Vco Routes of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.183.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultInstance, err := cen.NewInstance(ctx, "defaultInstance", &cen.InstanceArgs{
//				CenInstanceName: pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouter, err := cen.NewTransitRouter(ctx, "defaultTransitRouter", &cen.TransitRouterArgs{
//				CenId:                    defaultInstance.ID(),
//				TransitRouterDescription: pulumi.String("desd"),
//				TransitRouterName:        pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterAvailableResources, err := cen.GetTransitRouterAvailableResources(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultCustomerGateway, err := vpn.NewCustomerGateway(ctx, "defaultCustomerGateway", &vpn.CustomerGatewayArgs{
//				IpAddress:   pulumi.String("42.104.22.210"),
//				Asn:         pulumi.String("45014"),
//				Description: pulumi.String("testAccVpnConnectionDesc"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGatewayVpnAttachment, err := vpn.NewGatewayVpnAttachment(ctx, "defaultGatewayVpnAttachment", &vpn.GatewayVpnAttachmentArgs{
//				CustomerGatewayId: defaultCustomerGateway.ID(),
//				NetworkType:       pulumi.String("public"),
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				RemoteSubnet:      pulumi.String("0.0.0.0/0"),
//				EffectImmediately: pulumi.Bool(false),
//				IkeConfig: &vpn.GatewayVpnAttachmentIkeConfigArgs{
//					IkeAuthAlg:  pulumi.String("md5"),
//					IkeEncAlg:   pulumi.String("des"),
//					IkeVersion:  pulumi.String("ikev2"),
//					IkeMode:     pulumi.String("main"),
//					IkeLifetime: pulumi.Int(86400),
//					Psk:         pulumi.String("tf-testvpn2"),
//					IkePfs:      pulumi.String("group1"),
//					RemoteId:    pulumi.String("testbob2"),
//					LocalId:     pulumi.String("testalice2"),
//				},
//				IpsecConfig: &vpn.GatewayVpnAttachmentIpsecConfigArgs{
//					IpsecPfs:      pulumi.String("group5"),
//					IpsecEncAlg:   pulumi.String("des"),
//					IpsecAuthAlg:  pulumi.String("md5"),
//					IpsecLifetime: pulumi.Int(86400),
//				},
//				BgpConfig: &vpn.GatewayVpnAttachmentBgpConfigArgs{
//					Enable:     pulumi.Bool(true),
//					LocalAsn:   pulumi.Int(45014),
//					TunnelCidr: pulumi.String("169.254.11.0/30"),
//					LocalBgpIp: pulumi.String("169.254.11.1"),
//				},
//				HealthCheckConfig: &vpn.GatewayVpnAttachmentHealthCheckConfigArgs{
//					Enable:   pulumi.Bool(true),
//					Sip:      pulumi.String("192.168.1.1"),
//					Dip:      pulumi.String("10.0.0.1"),
//					Interval: pulumi.Int(10),
//					Retry:    pulumi.Int(10),
//					Policy:   pulumi.String("revoke_route"),
//				},
//				EnableDpd:          pulumi.Bool(true),
//				EnableNatTraversal: pulumi.Bool(true),
//				VpnAttachmentName:  pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTransitRouterVpnAttachment, err := cen.NewTransitRouterVpnAttachment(ctx, "defaultTransitRouterVpnAttachment", &cen.TransitRouterVpnAttachmentArgs{
//				AutoPublishRouteEnabled:            pulumi.Bool(false),
//				TransitRouterAttachmentDescription: pulumi.Any(_var.Name),
//				TransitRouterAttachmentName:        pulumi.Any(_var.Name),
//				CenId:                              defaultTransitRouter.CenId,
//				TransitRouterId:                    defaultTransitRouter.TransitRouterId,
//				VpnId:                              defaultGatewayVpnAttachment.ID(),
//				Zones: cen.TransitRouterVpnAttachmentZoneArray{
//					&cen.TransitRouterVpnAttachmentZoneArgs{
//						ZoneId: *pulumi.String(defaultTransitRouterAvailableResources.Resources[0].MasterZones[0]),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewGatewayVcoRoute(ctx, "defaultGatewayVcoRoute", &vpn.GatewayVcoRouteArgs{
//				RouteDest:       pulumi.String("192.168.12.0/24"),
//				NextHop:         defaultTransitRouterVpnAttachment.VpnId,
//				VpnConnectionId: defaultTransitRouterVpnAttachment.VpnId,
//				Weight:          pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vpn.GetGatewayVcoRoutesOutput(ctx, vpn.GetGatewayVcoRoutesOutputArgs{
//				VpnConnectionId: defaultTransitRouterVpnAttachment.VpnId,
//			}, nil)
//			ctx.Export("vpnGatewayVcoRouteId1", data.Alicloud_vpn_gateway_vco_routes.Ids.Routes[0].Id)
//			return nil
//		})
//	}
//
// ```
func GetGatewayVcoRoutes(ctx *pulumi.Context, args *GetGatewayVcoRoutesArgs, opts ...pulumi.InvokeOption) (*GetGatewayVcoRoutesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGatewayVcoRoutesResult
	err := ctx.Invoke("alicloud:vpn/getGatewayVcoRoutes:getGatewayVcoRoutes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGatewayVcoRoutes.
type GetGatewayVcoRoutesArgs struct {
	// A list of Vco Route IDs.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	PageNumber *int    `pulumi:"pageNumber"`
	PageSize   *int    `pulumi:"pageSize"`
	// The Routing input type. Valid values: `custom`, `bgp`.
	RouteEntryType *string `pulumi:"routeEntryType"`
	// The status of the vpn route entry.
	Status *string `pulumi:"status"`
	// The id of the vpn connection.
	VpnConnectionId string `pulumi:"vpnConnectionId"`
}

// A collection of values returned by getGatewayVcoRoutes.
type GetGatewayVcoRoutesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id              string                     `pulumi:"id"`
	Ids             []string                   `pulumi:"ids"`
	OutputFile      *string                    `pulumi:"outputFile"`
	PageNumber      *int                       `pulumi:"pageNumber"`
	PageSize        *int                       `pulumi:"pageSize"`
	RouteEntryType  *string                    `pulumi:"routeEntryType"`
	Routes          []GetGatewayVcoRoutesRoute `pulumi:"routes"`
	Status          *string                    `pulumi:"status"`
	VpnConnectionId string                     `pulumi:"vpnConnectionId"`
}

func GetGatewayVcoRoutesOutput(ctx *pulumi.Context, args GetGatewayVcoRoutesOutputArgs, opts ...pulumi.InvokeOption) GetGatewayVcoRoutesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGatewayVcoRoutesResult, error) {
			args := v.(GetGatewayVcoRoutesArgs)
			r, err := GetGatewayVcoRoutes(ctx, &args, opts...)
			var s GetGatewayVcoRoutesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetGatewayVcoRoutesResultOutput)
}

// A collection of arguments for invoking getGatewayVcoRoutes.
type GetGatewayVcoRoutesOutputArgs struct {
	// A list of Vco Route IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	PageNumber pulumi.IntPtrInput    `pulumi:"pageNumber"`
	PageSize   pulumi.IntPtrInput    `pulumi:"pageSize"`
	// The Routing input type. Valid values: `custom`, `bgp`.
	RouteEntryType pulumi.StringPtrInput `pulumi:"routeEntryType"`
	// The status of the vpn route entry.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The id of the vpn connection.
	VpnConnectionId pulumi.StringInput `pulumi:"vpnConnectionId"`
}

func (GetGatewayVcoRoutesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayVcoRoutesArgs)(nil)).Elem()
}

// A collection of values returned by getGatewayVcoRoutes.
type GetGatewayVcoRoutesResultOutput struct{ *pulumi.OutputState }

func (GetGatewayVcoRoutesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewayVcoRoutesResult)(nil)).Elem()
}

func (o GetGatewayVcoRoutesResultOutput) ToGetGatewayVcoRoutesResultOutput() GetGatewayVcoRoutesResultOutput {
	return o
}

func (o GetGatewayVcoRoutesResultOutput) ToGetGatewayVcoRoutesResultOutputWithContext(ctx context.Context) GetGatewayVcoRoutesResultOutput {
	return o
}

func (o GetGatewayVcoRoutesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetGatewayVcoRoutesResult] {
	return pulumix.Output[GetGatewayVcoRoutesResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetGatewayVcoRoutesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGatewayVcoRoutesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetGatewayVcoRoutesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetGatewayVcoRoutesResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetGatewayVcoRoutesResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

func (o GetGatewayVcoRoutesResultOutput) RouteEntryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) *string { return v.RouteEntryType }).(pulumi.StringPtrOutput)
}

func (o GetGatewayVcoRoutesResultOutput) Routes() GetGatewayVcoRoutesRouteArrayOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) []GetGatewayVcoRoutesRoute { return v.Routes }).(GetGatewayVcoRoutesRouteArrayOutput)
}

func (o GetGatewayVcoRoutesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o GetGatewayVcoRoutesResultOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewayVcoRoutesResult) string { return v.VpnConnectionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGatewayVcoRoutesResultOutput{})
}
