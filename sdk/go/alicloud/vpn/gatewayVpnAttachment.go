// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VPN Gateway Vpn Attachment resource.
//
// VpnAttachment has been upgraded to dual-tunnel mode. When you create a VpnAttachment in dual tunnel mode, you can configure the following request parameters in addition to the required parameters: vpn_attachment_name, network_type, effectImmediately, tags array, resource_group_id, tunnelOptionsSpecification array, and enable_tunnels_bgp.
//
// For information about VPN Gateway Vpn Attachment and how to use it, see [What is Vpn Attachment](https://www.alibabacloud.com/help/zh/virtual-private-cloud/latest/createvpnattachment).
//
// > **NOTE:** Available since v1.181.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := vpn.NewCustomerGateway(ctx, "default", &vpn.CustomerGatewayArgs{
//				CustomerGatewayName: pulumi.String(name),
//				IpAddress:           pulumi.String("42.104.22.210"),
//				Asn:                 pulumi.String("45014"),
//				Description:         pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewGatewayVpnAttachment(ctx, "default", &vpn.GatewayVpnAttachmentArgs{
//				CustomerGatewayId: _default.ID(),
//				NetworkType:       pulumi.String("public"),
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				RemoteSubnet:      pulumi.String("0.0.0.0/0"),
//				EffectImmediately: pulumi.Bool(false),
//				IkeConfig: &vpn.GatewayVpnAttachmentIkeConfigArgs{
//					IkeAuthAlg:  pulumi.String("md5"),
//					IkeEncAlg:   pulumi.String("des"),
//					IkeVersion:  pulumi.String("ikev2"),
//					IkeMode:     pulumi.String("main"),
//					IkeLifetime: pulumi.Int(86400),
//					Psk:         pulumi.String("tf-testvpn2"),
//					IkePfs:      pulumi.String("group1"),
//					RemoteId:    pulumi.String("testbob2"),
//					LocalId:     pulumi.String("testalice2"),
//				},
//				IpsecConfig: &vpn.GatewayVpnAttachmentIpsecConfigArgs{
//					IpsecPfs:      pulumi.String("group5"),
//					IpsecEncAlg:   pulumi.String("des"),
//					IpsecAuthAlg:  pulumi.String("md5"),
//					IpsecLifetime: pulumi.Int(86400),
//				},
//				BgpConfig: &vpn.GatewayVpnAttachmentBgpConfigArgs{
//					Enable:     pulumi.Bool(true),
//					LocalAsn:   pulumi.Int(45014),
//					TunnelCidr: pulumi.String("169.254.11.0/30"),
//					LocalBgpIp: pulumi.String("169.254.11.1"),
//				},
//				HealthCheckConfig: &vpn.GatewayVpnAttachmentHealthCheckConfigArgs{
//					Enable:   pulumi.Bool(true),
//					Sip:      pulumi.String("192.168.1.1"),
//					Dip:      pulumi.String("10.0.0.1"),
//					Interval: pulumi.Int(10),
//					Retry:    pulumi.Int(10),
//					Policy:   pulumi.String("revoke_route"),
//				},
//				EnableDpd:          pulumi.Bool(true),
//				EnableNatTraversal: pulumi.Bool(true),
//				VpnAttachmentName:  pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Dual Tunnel Mode Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			cgw1, err := vpn.NewCustomerGateway(ctx, "cgw1", &vpn.CustomerGatewayArgs{
//				IpAddress: pulumi.String("2.2.2.2"),
//				Asn:       pulumi.String("1219001"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewCustomerGateway(ctx, "cgw2", &vpn.CustomerGatewayArgs{
//				IpAddress:           pulumi.String("43.43.3.22"),
//				Asn:                 pulumi.String("44331"),
//				CustomerGatewayName: pulumi.String("example_amp"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewGatewayVpnAttachment(ctx, "default", &vpn.GatewayVpnAttachmentArgs{
//				LocalSubnet:       pulumi.String("0.0.0.0/0"),
//				EnableTunnelsBgp:  pulumi.Bool(true),
//				VpnAttachmentName: pulumi.String("tfaccvpngateway25800"),
//				TunnelOptionsSpecifications: vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArray{
//					&vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArgs{
//						TunnelIpsecConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs{
//							IpsecLifetime: pulumi.Int(86200),
//							IpsecPfs:      pulumi.String("group5"),
//							IpsecAuthAlg:  pulumi.String("md5"),
//							IpsecEncAlg:   pulumi.String("aes"),
//						},
//						CustomerGatewayId:  cgw1.ID(),
//						EnableDpd:          pulumi.Bool(true),
//						EnableNatTraversal: pulumi.Bool(true),
//						TunnelIndex:        pulumi.Int(1),
//						TunnelBgpConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs{
//							LocalAsn:   pulumi.Int(1219001),
//							LocalBgpIp: pulumi.String("169.254.10.1"),
//							TunnelCidr: pulumi.String("169.254.10.0/30"),
//						},
//						TunnelIkeConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs{
//							IkeMode:     pulumi.String("main"),
//							IkeVersion:  pulumi.String("ikev1"),
//							Psk:         pulumi.String("12345678"),
//							RemoteId:    pulumi.String("2.2.2.2"),
//							IkeAuthAlg:  pulumi.String("md5"),
//							IkeEncAlg:   pulumi.String("aes"),
//							IkeLifetime: pulumi.Int(86100),
//							IkePfs:      pulumi.String("group2"),
//							LocalId:     pulumi.String("1.1.1.1"),
//						},
//					},
//					&vpn.GatewayVpnAttachmentTunnelOptionsSpecificationArgs{
//						TunnelIpsecConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIpsecConfigArgs{
//							IpsecEncAlg:   pulumi.String("aes"),
//							IpsecLifetime: pulumi.Int(86400),
//							IpsecPfs:      pulumi.String("group5"),
//							IpsecAuthAlg:  pulumi.String("sha256"),
//						},
//						CustomerGatewayId:  cgw1.ID(),
//						EnableDpd:          pulumi.Bool(true),
//						EnableNatTraversal: pulumi.Bool(true),
//						TunnelIndex:        pulumi.Int(2),
//						TunnelBgpConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelBgpConfigArgs{
//							LocalAsn:   pulumi.Int(1219001),
//							LocalBgpIp: pulumi.String("169.254.20.1"),
//							TunnelCidr: pulumi.String("169.254.20.0/30"),
//						},
//						TunnelIkeConfig: &vpn.GatewayVpnAttachmentTunnelOptionsSpecificationTunnelIkeConfigArgs{
//							LocalId:     pulumi.String("4.4.4.4"),
//							RemoteId:    pulumi.String("5.5.5.5"),
//							IkeLifetime: pulumi.Int(86400),
//							IkeMode:     pulumi.String("main"),
//							IkePfs:      pulumi.String("group5"),
//							IkeVersion:  pulumi.String("ikev2"),
//							IkeAuthAlg:  pulumi.String("md5"),
//							IkeEncAlg:   pulumi.String("aes"),
//							Psk:         pulumi.String("32333442"),
//						},
//					},
//				},
//				RemoteSubnet:    pulumi.String("0.0.0.0/0"),
//				NetworkType:     pulumi.String("public"),
//				ResourceGroupId: pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN Gateway Vpn Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment example <id>
// ```
type GatewayVpnAttachment struct {
	pulumi.CustomResourceState

	// Bgp configuration information.
	// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
	BgpConfig GatewayVpnAttachmentBgpConfigOutput `pulumi:"bgpConfig"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Customer gateway ID.
	// - This parameter is required when creating a single-tunnel mode vpn attachment.
	CustomerGatewayId pulumi.StringPtrOutput `pulumi:"customerGatewayId"`
	// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
	EffectImmediately pulumi.BoolOutput `pulumi:"effectImmediately"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Whether to enable the DPD (peer survival detection) function.
	// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
	// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
	EnableDpd pulumi.BoolOutput `pulumi:"enableDpd"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Specifies whether to enable NAT traversal. Valid values:
	// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
	// - false: disables NAT traversal.
	EnableNatTraversal pulumi.BoolOutput `pulumi:"enableNatTraversal"`
	// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
	//
	// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
	EnableTunnelsBgp pulumi.BoolOutput `pulumi:"enableTunnelsBgp"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Health check configuration information. See `healthCheckConfig` below.
	HealthCheckConfig GatewayVpnAttachmentHealthCheckConfigOutput `pulumi:"healthCheckConfig"`
	// The configurations of Phase 1 negotiations.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
	IkeConfig GatewayVpnAttachmentIkeConfigOutput `pulumi:"ikeConfig"`
	// Configuration negotiated in the second stage.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
	IpsecConfig GatewayVpnAttachmentIpsecConfigOutput `pulumi:"ipsecConfig"`
	// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	LocalSubnet pulumi.StringOutput `pulumi:"localSubnet"`
	// network type
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	RemoteSubnet pulumi.StringOutput `pulumi:"remoteSubnet"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The negotiation status of Tunnel.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Configure the tunnel.
	// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
	// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
	TunnelOptionsSpecifications GatewayVpnAttachmentTunnelOptionsSpecificationArrayOutput `pulumi:"tunnelOptionsSpecifications"`
	// vpn attachment name
	VpnAttachmentName pulumi.StringPtrOutput `pulumi:"vpnAttachmentName"`
}

// NewGatewayVpnAttachment registers a new resource with the given unique name, arguments, and options.
func NewGatewayVpnAttachment(ctx *pulumi.Context,
	name string, args *GatewayVpnAttachmentArgs, opts ...pulumi.ResourceOption) (*GatewayVpnAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocalSubnet == nil {
		return nil, errors.New("invalid value for required argument 'LocalSubnet'")
	}
	if args.RemoteSubnet == nil {
		return nil, errors.New("invalid value for required argument 'RemoteSubnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayVpnAttachment
	err := ctx.RegisterResource("alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayVpnAttachment gets an existing GatewayVpnAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayVpnAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayVpnAttachmentState, opts ...pulumi.ResourceOption) (*GatewayVpnAttachment, error) {
	var resource GatewayVpnAttachment
	err := ctx.ReadResource("alicloud:vpn/gatewayVpnAttachment:GatewayVpnAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayVpnAttachment resources.
type gatewayVpnAttachmentState struct {
	// Bgp configuration information.
	// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
	BgpConfig *GatewayVpnAttachmentBgpConfig `pulumi:"bgpConfig"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Customer gateway ID.
	// - This parameter is required when creating a single-tunnel mode vpn attachment.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Whether to enable the DPD (peer survival detection) function.
	// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
	// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
	EnableDpd *bool `pulumi:"enableDpd"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Specifies whether to enable NAT traversal. Valid values:
	// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
	// - false: disables NAT traversal.
	EnableNatTraversal *bool `pulumi:"enableNatTraversal"`
	// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
	//
	// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
	EnableTunnelsBgp *bool `pulumi:"enableTunnelsBgp"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Health check configuration information. See `healthCheckConfig` below.
	HealthCheckConfig *GatewayVpnAttachmentHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The configurations of Phase 1 negotiations.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
	IkeConfig *GatewayVpnAttachmentIkeConfig `pulumi:"ikeConfig"`
	// Configuration negotiated in the second stage.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
	IpsecConfig *GatewayVpnAttachmentIpsecConfig `pulumi:"ipsecConfig"`
	// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	LocalSubnet *string `pulumi:"localSubnet"`
	// network type
	NetworkType *string `pulumi:"networkType"`
	// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	RemoteSubnet *string `pulumi:"remoteSubnet"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The negotiation status of Tunnel.
	Status *string `pulumi:"status"`
	// Tags
	Tags map[string]string `pulumi:"tags"`
	// Configure the tunnel.
	// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
	// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
	TunnelOptionsSpecifications []GatewayVpnAttachmentTunnelOptionsSpecification `pulumi:"tunnelOptionsSpecifications"`
	// vpn attachment name
	VpnAttachmentName *string `pulumi:"vpnAttachmentName"`
}

type GatewayVpnAttachmentState struct {
	// Bgp configuration information.
	// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
	BgpConfig GatewayVpnAttachmentBgpConfigPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Customer gateway ID.
	// - This parameter is required when creating a single-tunnel mode vpn attachment.
	CustomerGatewayId pulumi.StringPtrInput
	// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
	EffectImmediately pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Whether to enable the DPD (peer survival detection) function.
	// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
	// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
	EnableDpd pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Specifies whether to enable NAT traversal. Valid values:
	// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
	// - false: disables NAT traversal.
	EnableNatTraversal pulumi.BoolPtrInput
	// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
	//
	// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
	EnableTunnelsBgp pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Health check configuration information. See `healthCheckConfig` below.
	HealthCheckConfig GatewayVpnAttachmentHealthCheckConfigPtrInput
	// The configurations of Phase 1 negotiations.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
	IkeConfig GatewayVpnAttachmentIkeConfigPtrInput
	// Configuration negotiated in the second stage.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
	IpsecConfig GatewayVpnAttachmentIpsecConfigPtrInput
	// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	LocalSubnet pulumi.StringPtrInput
	// network type
	NetworkType pulumi.StringPtrInput
	// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	RemoteSubnet pulumi.StringPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The negotiation status of Tunnel.
	Status pulumi.StringPtrInput
	// Tags
	Tags pulumi.StringMapInput
	// Configure the tunnel.
	// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
	// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
	TunnelOptionsSpecifications GatewayVpnAttachmentTunnelOptionsSpecificationArrayInput
	// vpn attachment name
	VpnAttachmentName pulumi.StringPtrInput
}

func (GatewayVpnAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayVpnAttachmentState)(nil)).Elem()
}

type gatewayVpnAttachmentArgs struct {
	// Bgp configuration information.
	// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
	BgpConfig *GatewayVpnAttachmentBgpConfig `pulumi:"bgpConfig"`
	// Customer gateway ID.
	// - This parameter is required when creating a single-tunnel mode vpn attachment.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
	EffectImmediately *bool `pulumi:"effectImmediately"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Whether to enable the DPD (peer survival detection) function.
	// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
	// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
	EnableDpd *bool `pulumi:"enableDpd"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Specifies whether to enable NAT traversal. Valid values:
	// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
	// - false: disables NAT traversal.
	EnableNatTraversal *bool `pulumi:"enableNatTraversal"`
	// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
	//
	// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
	EnableTunnelsBgp *bool `pulumi:"enableTunnelsBgp"`
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Health check configuration information. See `healthCheckConfig` below.
	HealthCheckConfig *GatewayVpnAttachmentHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The configurations of Phase 1 negotiations.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
	IkeConfig *GatewayVpnAttachmentIkeConfig `pulumi:"ikeConfig"`
	// Configuration negotiated in the second stage.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
	IpsecConfig *GatewayVpnAttachmentIpsecConfig `pulumi:"ipsecConfig"`
	// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	LocalSubnet string `pulumi:"localSubnet"`
	// network type
	NetworkType *string `pulumi:"networkType"`
	// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	RemoteSubnet string `pulumi:"remoteSubnet"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Tags
	Tags map[string]string `pulumi:"tags"`
	// Configure the tunnel.
	// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
	// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
	TunnelOptionsSpecifications []GatewayVpnAttachmentTunnelOptionsSpecification `pulumi:"tunnelOptionsSpecifications"`
	// vpn attachment name
	VpnAttachmentName *string `pulumi:"vpnAttachmentName"`
}

// The set of arguments for constructing a GatewayVpnAttachment resource.
type GatewayVpnAttachmentArgs struct {
	// Bgp configuration information.
	// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
	BgpConfig GatewayVpnAttachmentBgpConfigPtrInput
	// Customer gateway ID.
	// - This parameter is required when creating a single-tunnel mode vpn attachment.
	CustomerGatewayId pulumi.StringPtrInput
	// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
	EffectImmediately pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Whether to enable the DPD (peer survival detection) function.
	// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
	// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
	EnableDpd pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Specifies whether to enable NAT traversal. Valid values:
	// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
	// - false: disables NAT traversal.
	EnableNatTraversal pulumi.BoolPtrInput
	// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
	//
	// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
	EnableTunnelsBgp pulumi.BoolPtrInput
	// This parameter is supported if you create an vpn attachment in single-tunnel mode.
	// Health check configuration information. See `healthCheckConfig` below.
	HealthCheckConfig GatewayVpnAttachmentHealthCheckConfigPtrInput
	// The configurations of Phase 1 negotiations.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
	IkeConfig GatewayVpnAttachmentIkeConfigPtrInput
	// Configuration negotiated in the second stage.
	// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
	IpsecConfig GatewayVpnAttachmentIpsecConfigPtrInput
	// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	LocalSubnet pulumi.StringInput
	// network type
	NetworkType pulumi.StringPtrInput
	// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
	// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
	// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
	RemoteSubnet pulumi.StringInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// Tags
	Tags pulumi.StringMapInput
	// Configure the tunnel.
	// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
	// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
	TunnelOptionsSpecifications GatewayVpnAttachmentTunnelOptionsSpecificationArrayInput
	// vpn attachment name
	VpnAttachmentName pulumi.StringPtrInput
}

func (GatewayVpnAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayVpnAttachmentArgs)(nil)).Elem()
}

type GatewayVpnAttachmentInput interface {
	pulumi.Input

	ToGatewayVpnAttachmentOutput() GatewayVpnAttachmentOutput
	ToGatewayVpnAttachmentOutputWithContext(ctx context.Context) GatewayVpnAttachmentOutput
}

func (*GatewayVpnAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayVpnAttachment)(nil)).Elem()
}

func (i *GatewayVpnAttachment) ToGatewayVpnAttachmentOutput() GatewayVpnAttachmentOutput {
	return i.ToGatewayVpnAttachmentOutputWithContext(context.Background())
}

func (i *GatewayVpnAttachment) ToGatewayVpnAttachmentOutputWithContext(ctx context.Context) GatewayVpnAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayVpnAttachmentOutput)
}

// GatewayVpnAttachmentArrayInput is an input type that accepts GatewayVpnAttachmentArray and GatewayVpnAttachmentArrayOutput values.
// You can construct a concrete instance of `GatewayVpnAttachmentArrayInput` via:
//
//	GatewayVpnAttachmentArray{ GatewayVpnAttachmentArgs{...} }
type GatewayVpnAttachmentArrayInput interface {
	pulumi.Input

	ToGatewayVpnAttachmentArrayOutput() GatewayVpnAttachmentArrayOutput
	ToGatewayVpnAttachmentArrayOutputWithContext(context.Context) GatewayVpnAttachmentArrayOutput
}

type GatewayVpnAttachmentArray []GatewayVpnAttachmentInput

func (GatewayVpnAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayVpnAttachment)(nil)).Elem()
}

func (i GatewayVpnAttachmentArray) ToGatewayVpnAttachmentArrayOutput() GatewayVpnAttachmentArrayOutput {
	return i.ToGatewayVpnAttachmentArrayOutputWithContext(context.Background())
}

func (i GatewayVpnAttachmentArray) ToGatewayVpnAttachmentArrayOutputWithContext(ctx context.Context) GatewayVpnAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayVpnAttachmentArrayOutput)
}

// GatewayVpnAttachmentMapInput is an input type that accepts GatewayVpnAttachmentMap and GatewayVpnAttachmentMapOutput values.
// You can construct a concrete instance of `GatewayVpnAttachmentMapInput` via:
//
//	GatewayVpnAttachmentMap{ "key": GatewayVpnAttachmentArgs{...} }
type GatewayVpnAttachmentMapInput interface {
	pulumi.Input

	ToGatewayVpnAttachmentMapOutput() GatewayVpnAttachmentMapOutput
	ToGatewayVpnAttachmentMapOutputWithContext(context.Context) GatewayVpnAttachmentMapOutput
}

type GatewayVpnAttachmentMap map[string]GatewayVpnAttachmentInput

func (GatewayVpnAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayVpnAttachment)(nil)).Elem()
}

func (i GatewayVpnAttachmentMap) ToGatewayVpnAttachmentMapOutput() GatewayVpnAttachmentMapOutput {
	return i.ToGatewayVpnAttachmentMapOutputWithContext(context.Background())
}

func (i GatewayVpnAttachmentMap) ToGatewayVpnAttachmentMapOutputWithContext(ctx context.Context) GatewayVpnAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayVpnAttachmentMapOutput)
}

type GatewayVpnAttachmentOutput struct{ *pulumi.OutputState }

func (GatewayVpnAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayVpnAttachment)(nil)).Elem()
}

func (o GatewayVpnAttachmentOutput) ToGatewayVpnAttachmentOutput() GatewayVpnAttachmentOutput {
	return o
}

func (o GatewayVpnAttachmentOutput) ToGatewayVpnAttachmentOutputWithContext(ctx context.Context) GatewayVpnAttachmentOutput {
	return o
}

// Bgp configuration information.
// - This parameter is supported when you create an vpn attachment in single-tunnel mode. See `bgpConfig` below.
func (o GatewayVpnAttachmentOutput) BgpConfig() GatewayVpnAttachmentBgpConfigOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) GatewayVpnAttachmentBgpConfigOutput { return v.BgpConfig }).(GatewayVpnAttachmentBgpConfigOutput)
}

// The creation time of the resource
func (o GatewayVpnAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Customer gateway ID.
// - This parameter is required when creating a single-tunnel mode vpn attachment.
func (o GatewayVpnAttachmentOutput) CustomerGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringPtrOutput { return v.CustomerGatewayId }).(pulumi.StringPtrOutput)
}

// Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:
func (o GatewayVpnAttachmentOutput) EffectImmediately() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.BoolOutput { return v.EffectImmediately }).(pulumi.BoolOutput)
}

// This parameter is supported if you create an vpn attachment in single-tunnel mode.
// Whether to enable the DPD (peer survival detection) function.
// - true (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted along with the security tunnel.
// - false: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.
func (o GatewayVpnAttachmentOutput) EnableDpd() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.BoolOutput { return v.EnableDpd }).(pulumi.BoolOutput)
}

// This parameter is supported if you create an vpn attachment in single-tunnel mode.
// Specifies whether to enable NAT traversal. Valid values:
// - true (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the vpn attachment tunnel.
// - false: disables NAT traversal.
func (o GatewayVpnAttachmentOutput) EnableNatTraversal() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.BoolOutput { return v.EnableNatTraversal }).(pulumi.BoolOutput)
}

// You can configure this parameter when you create a vpn attachment in dual-tunnel mode.Whether to enable the BGP function for the tunnel. Value: `true` or `false` (default).
//
// > **NOTE:**  before adding BGP configuration, we recommend that you understand the working mechanism and usage restrictions of the BGP dynamic routing function.
func (o GatewayVpnAttachmentOutput) EnableTunnelsBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.BoolOutput { return v.EnableTunnelsBgp }).(pulumi.BoolOutput)
}

// This parameter is supported if you create an vpn attachment in single-tunnel mode.
// Health check configuration information. See `healthCheckConfig` below.
func (o GatewayVpnAttachmentOutput) HealthCheckConfig() GatewayVpnAttachmentHealthCheckConfigOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) GatewayVpnAttachmentHealthCheckConfigOutput { return v.HealthCheckConfig }).(GatewayVpnAttachmentHealthCheckConfigOutput)
}

// The configurations of Phase 1 negotiations.
// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ikeConfig` below.
func (o GatewayVpnAttachmentOutput) IkeConfig() GatewayVpnAttachmentIkeConfigOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) GatewayVpnAttachmentIkeConfigOutput { return v.IkeConfig }).(GatewayVpnAttachmentIkeConfigOutput)
}

// Configuration negotiated in the second stage.
// - This parameter is supported if you create an vpn attachment in single-tunnel mode. See `ipsecConfig` below.
func (o GatewayVpnAttachmentOutput) IpsecConfig() GatewayVpnAttachmentIpsecConfigOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) GatewayVpnAttachmentIpsecConfigOutput { return v.IpsecConfig }).(GatewayVpnAttachmentIpsecConfigOutput)
}

// The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.The following routing modes are supported:
// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
func (o GatewayVpnAttachmentOutput) LocalSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.LocalSubnet }).(pulumi.StringOutput)
}

// network type
func (o GatewayVpnAttachmentOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.The following routing modes are supported:
// - If you set LocalSubnet and RemoteSubnet to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
// - If you set LocalSubnet and RemoteSubnet to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.
func (o GatewayVpnAttachmentOutput) RemoteSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.RemoteSubnet }).(pulumi.StringOutput)
}

// The ID of the resource group
func (o GatewayVpnAttachmentOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The negotiation status of Tunnel.
func (o GatewayVpnAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags
func (o GatewayVpnAttachmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Configure the tunnel.
// - You can configure parameters in the `tunnelOptionsSpecification` array when you create a vpn attachment in dual-tunnel mode.
// - When creating a vpn attachment in dual-tunnel mode, you must add both tunnels for the vpn attachment to ensure that the vpn attachment has link redundancy. Only two tunnels can be added to a vpn attachment. See `tunnelOptionsSpecification` below.
func (o GatewayVpnAttachmentOutput) TunnelOptionsSpecifications() GatewayVpnAttachmentTunnelOptionsSpecificationArrayOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) GatewayVpnAttachmentTunnelOptionsSpecificationArrayOutput {
		return v.TunnelOptionsSpecifications
	}).(GatewayVpnAttachmentTunnelOptionsSpecificationArrayOutput)
}

// vpn attachment name
func (o GatewayVpnAttachmentOutput) VpnAttachmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayVpnAttachment) pulumi.StringPtrOutput { return v.VpnAttachmentName }).(pulumi.StringPtrOutput)
}

type GatewayVpnAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GatewayVpnAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayVpnAttachment)(nil)).Elem()
}

func (o GatewayVpnAttachmentArrayOutput) ToGatewayVpnAttachmentArrayOutput() GatewayVpnAttachmentArrayOutput {
	return o
}

func (o GatewayVpnAttachmentArrayOutput) ToGatewayVpnAttachmentArrayOutputWithContext(ctx context.Context) GatewayVpnAttachmentArrayOutput {
	return o
}

func (o GatewayVpnAttachmentArrayOutput) Index(i pulumi.IntInput) GatewayVpnAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayVpnAttachment {
		return vs[0].([]*GatewayVpnAttachment)[vs[1].(int)]
	}).(GatewayVpnAttachmentOutput)
}

type GatewayVpnAttachmentMapOutput struct{ *pulumi.OutputState }

func (GatewayVpnAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayVpnAttachment)(nil)).Elem()
}

func (o GatewayVpnAttachmentMapOutput) ToGatewayVpnAttachmentMapOutput() GatewayVpnAttachmentMapOutput {
	return o
}

func (o GatewayVpnAttachmentMapOutput) ToGatewayVpnAttachmentMapOutputWithContext(ctx context.Context) GatewayVpnAttachmentMapOutput {
	return o
}

func (o GatewayVpnAttachmentMapOutput) MapIndex(k pulumi.StringInput) GatewayVpnAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayVpnAttachment {
		return vs[0].(map[string]*GatewayVpnAttachment)[vs[1].(string)]
	}).(GatewayVpnAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayVpnAttachmentInput)(nil)).Elem(), &GatewayVpnAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayVpnAttachmentArrayInput)(nil)).Elem(), GatewayVpnAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayVpnAttachmentMapInput)(nil)).Elem(), GatewayVpnAttachmentMap{})
	pulumi.RegisterOutputType(GatewayVpnAttachmentOutput{})
	pulumi.RegisterOutputType(GatewayVpnAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GatewayVpnAttachmentMapOutput{})
}
