// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OSS Bucket Cname Token can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketCnameToken:BucketCnameToken example <bucket>:<domain>
// ```
type BucketCnameToken struct {
	pulumi.CustomResourceState

	// The name of the bucket
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The custom domain
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Token used to verify domain ownership
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewBucketCnameToken registers a new resource with the given unique name, arguments, and options.
func NewBucketCnameToken(ctx *pulumi.Context,
	name string, args *BucketCnameTokenArgs, opts ...pulumi.ResourceOption) (*BucketCnameToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketCnameToken
	err := ctx.RegisterResource("alicloud:oss/bucketCnameToken:BucketCnameToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketCnameToken gets an existing BucketCnameToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketCnameToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketCnameTokenState, opts ...pulumi.ResourceOption) (*BucketCnameToken, error) {
	var resource BucketCnameToken
	err := ctx.ReadResource("alicloud:oss/bucketCnameToken:BucketCnameToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketCnameToken resources.
type bucketCnameTokenState struct {
	// The name of the bucket
	Bucket *string `pulumi:"bucket"`
	// The custom domain
	Domain *string `pulumi:"domain"`
	// Token used to verify domain ownership
	Token *string `pulumi:"token"`
}

type BucketCnameTokenState struct {
	// The name of the bucket
	Bucket pulumi.StringPtrInput
	// The custom domain
	Domain pulumi.StringPtrInput
	// Token used to verify domain ownership
	Token pulumi.StringPtrInput
}

func (BucketCnameTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCnameTokenState)(nil)).Elem()
}

type bucketCnameTokenArgs struct {
	// The name of the bucket
	Bucket string `pulumi:"bucket"`
	// The custom domain
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a BucketCnameToken resource.
type BucketCnameTokenArgs struct {
	// The name of the bucket
	Bucket pulumi.StringInput
	// The custom domain
	Domain pulumi.StringInput
}

func (BucketCnameTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCnameTokenArgs)(nil)).Elem()
}

type BucketCnameTokenInput interface {
	pulumi.Input

	ToBucketCnameTokenOutput() BucketCnameTokenOutput
	ToBucketCnameTokenOutputWithContext(ctx context.Context) BucketCnameTokenOutput
}

func (*BucketCnameToken) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCnameToken)(nil)).Elem()
}

func (i *BucketCnameToken) ToBucketCnameTokenOutput() BucketCnameTokenOutput {
	return i.ToBucketCnameTokenOutputWithContext(context.Background())
}

func (i *BucketCnameToken) ToBucketCnameTokenOutputWithContext(ctx context.Context) BucketCnameTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameTokenOutput)
}

// BucketCnameTokenArrayInput is an input type that accepts BucketCnameTokenArray and BucketCnameTokenArrayOutput values.
// You can construct a concrete instance of `BucketCnameTokenArrayInput` via:
//
//	BucketCnameTokenArray{ BucketCnameTokenArgs{...} }
type BucketCnameTokenArrayInput interface {
	pulumi.Input

	ToBucketCnameTokenArrayOutput() BucketCnameTokenArrayOutput
	ToBucketCnameTokenArrayOutputWithContext(context.Context) BucketCnameTokenArrayOutput
}

type BucketCnameTokenArray []BucketCnameTokenInput

func (BucketCnameTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCnameToken)(nil)).Elem()
}

func (i BucketCnameTokenArray) ToBucketCnameTokenArrayOutput() BucketCnameTokenArrayOutput {
	return i.ToBucketCnameTokenArrayOutputWithContext(context.Background())
}

func (i BucketCnameTokenArray) ToBucketCnameTokenArrayOutputWithContext(ctx context.Context) BucketCnameTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameTokenArrayOutput)
}

// BucketCnameTokenMapInput is an input type that accepts BucketCnameTokenMap and BucketCnameTokenMapOutput values.
// You can construct a concrete instance of `BucketCnameTokenMapInput` via:
//
//	BucketCnameTokenMap{ "key": BucketCnameTokenArgs{...} }
type BucketCnameTokenMapInput interface {
	pulumi.Input

	ToBucketCnameTokenMapOutput() BucketCnameTokenMapOutput
	ToBucketCnameTokenMapOutputWithContext(context.Context) BucketCnameTokenMapOutput
}

type BucketCnameTokenMap map[string]BucketCnameTokenInput

func (BucketCnameTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCnameToken)(nil)).Elem()
}

func (i BucketCnameTokenMap) ToBucketCnameTokenMapOutput() BucketCnameTokenMapOutput {
	return i.ToBucketCnameTokenMapOutputWithContext(context.Background())
}

func (i BucketCnameTokenMap) ToBucketCnameTokenMapOutputWithContext(ctx context.Context) BucketCnameTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameTokenMapOutput)
}

type BucketCnameTokenOutput struct{ *pulumi.OutputState }

func (BucketCnameTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCnameToken)(nil)).Elem()
}

func (o BucketCnameTokenOutput) ToBucketCnameTokenOutput() BucketCnameTokenOutput {
	return o
}

func (o BucketCnameTokenOutput) ToBucketCnameTokenOutputWithContext(ctx context.Context) BucketCnameTokenOutput {
	return o
}

// The name of the bucket
func (o BucketCnameTokenOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCnameToken) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The custom domain
func (o BucketCnameTokenOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCnameToken) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Token used to verify domain ownership
func (o BucketCnameTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCnameToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type BucketCnameTokenArrayOutput struct{ *pulumi.OutputState }

func (BucketCnameTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCnameToken)(nil)).Elem()
}

func (o BucketCnameTokenArrayOutput) ToBucketCnameTokenArrayOutput() BucketCnameTokenArrayOutput {
	return o
}

func (o BucketCnameTokenArrayOutput) ToBucketCnameTokenArrayOutputWithContext(ctx context.Context) BucketCnameTokenArrayOutput {
	return o
}

func (o BucketCnameTokenArrayOutput) Index(i pulumi.IntInput) BucketCnameTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketCnameToken {
		return vs[0].([]*BucketCnameToken)[vs[1].(int)]
	}).(BucketCnameTokenOutput)
}

type BucketCnameTokenMapOutput struct{ *pulumi.OutputState }

func (BucketCnameTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCnameToken)(nil)).Elem()
}

func (o BucketCnameTokenMapOutput) ToBucketCnameTokenMapOutput() BucketCnameTokenMapOutput {
	return o
}

func (o BucketCnameTokenMapOutput) ToBucketCnameTokenMapOutputWithContext(ctx context.Context) BucketCnameTokenMapOutput {
	return o
}

func (o BucketCnameTokenMapOutput) MapIndex(k pulumi.StringInput) BucketCnameTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketCnameToken {
		return vs[0].(map[string]*BucketCnameToken)[vs[1].(string)]
	}).(BucketCnameTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameTokenInput)(nil)).Elem(), &BucketCnameToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameTokenArrayInput)(nil)).Elem(), BucketCnameTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameTokenMapInput)(nil)).Elem(), BucketCnameTokenMap{})
	pulumi.RegisterOutputType(BucketCnameTokenOutput{})
	pulumi.RegisterOutputType(BucketCnameTokenArrayOutput{})
	pulumi.RegisterOutputType(BucketCnameTokenMapOutput{})
}
