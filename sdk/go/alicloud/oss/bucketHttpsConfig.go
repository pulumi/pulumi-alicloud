// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OSS Bucket Https Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketHttpsConfig:BucketHttpsConfig example <id>
// ```
type BucketHttpsConfig struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// Specifies the TLS versions allowed to access this buckets.
	TlsVersions pulumi.StringArrayOutput `pulumi:"tlsVersions"`
}

// NewBucketHttpsConfig registers a new resource with the given unique name, arguments, and options.
func NewBucketHttpsConfig(ctx *pulumi.Context,
	name string, args *BucketHttpsConfigArgs, opts ...pulumi.ResourceOption) (*BucketHttpsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketHttpsConfig
	err := ctx.RegisterResource("alicloud:oss/bucketHttpsConfig:BucketHttpsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketHttpsConfig gets an existing BucketHttpsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketHttpsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketHttpsConfigState, opts ...pulumi.ResourceOption) (*BucketHttpsConfig, error) {
	var resource BucketHttpsConfig
	err := ctx.ReadResource("alicloud:oss/bucketHttpsConfig:BucketHttpsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketHttpsConfig resources.
type bucketHttpsConfigState struct {
	// The name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
	Enable *bool `pulumi:"enable"`
	// Specifies the TLS versions allowed to access this buckets.
	TlsVersions []string `pulumi:"tlsVersions"`
}

type BucketHttpsConfigState struct {
	// The name of the bucket.
	Bucket pulumi.StringPtrInput
	// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
	Enable pulumi.BoolPtrInput
	// Specifies the TLS versions allowed to access this buckets.
	TlsVersions pulumi.StringArrayInput
}

func (BucketHttpsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketHttpsConfigState)(nil)).Elem()
}

type bucketHttpsConfigArgs struct {
	// The name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
	Enable bool `pulumi:"enable"`
	// Specifies the TLS versions allowed to access this buckets.
	TlsVersions []string `pulumi:"tlsVersions"`
}

// The set of arguments for constructing a BucketHttpsConfig resource.
type BucketHttpsConfigArgs struct {
	// The name of the bucket.
	Bucket pulumi.StringInput
	// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
	Enable pulumi.BoolInput
	// Specifies the TLS versions allowed to access this buckets.
	TlsVersions pulumi.StringArrayInput
}

func (BucketHttpsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketHttpsConfigArgs)(nil)).Elem()
}

type BucketHttpsConfigInput interface {
	pulumi.Input

	ToBucketHttpsConfigOutput() BucketHttpsConfigOutput
	ToBucketHttpsConfigOutputWithContext(ctx context.Context) BucketHttpsConfigOutput
}

func (*BucketHttpsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketHttpsConfig)(nil)).Elem()
}

func (i *BucketHttpsConfig) ToBucketHttpsConfigOutput() BucketHttpsConfigOutput {
	return i.ToBucketHttpsConfigOutputWithContext(context.Background())
}

func (i *BucketHttpsConfig) ToBucketHttpsConfigOutputWithContext(ctx context.Context) BucketHttpsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketHttpsConfigOutput)
}

// BucketHttpsConfigArrayInput is an input type that accepts BucketHttpsConfigArray and BucketHttpsConfigArrayOutput values.
// You can construct a concrete instance of `BucketHttpsConfigArrayInput` via:
//
//	BucketHttpsConfigArray{ BucketHttpsConfigArgs{...} }
type BucketHttpsConfigArrayInput interface {
	pulumi.Input

	ToBucketHttpsConfigArrayOutput() BucketHttpsConfigArrayOutput
	ToBucketHttpsConfigArrayOutputWithContext(context.Context) BucketHttpsConfigArrayOutput
}

type BucketHttpsConfigArray []BucketHttpsConfigInput

func (BucketHttpsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketHttpsConfig)(nil)).Elem()
}

func (i BucketHttpsConfigArray) ToBucketHttpsConfigArrayOutput() BucketHttpsConfigArrayOutput {
	return i.ToBucketHttpsConfigArrayOutputWithContext(context.Background())
}

func (i BucketHttpsConfigArray) ToBucketHttpsConfigArrayOutputWithContext(ctx context.Context) BucketHttpsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketHttpsConfigArrayOutput)
}

// BucketHttpsConfigMapInput is an input type that accepts BucketHttpsConfigMap and BucketHttpsConfigMapOutput values.
// You can construct a concrete instance of `BucketHttpsConfigMapInput` via:
//
//	BucketHttpsConfigMap{ "key": BucketHttpsConfigArgs{...} }
type BucketHttpsConfigMapInput interface {
	pulumi.Input

	ToBucketHttpsConfigMapOutput() BucketHttpsConfigMapOutput
	ToBucketHttpsConfigMapOutputWithContext(context.Context) BucketHttpsConfigMapOutput
}

type BucketHttpsConfigMap map[string]BucketHttpsConfigInput

func (BucketHttpsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketHttpsConfig)(nil)).Elem()
}

func (i BucketHttpsConfigMap) ToBucketHttpsConfigMapOutput() BucketHttpsConfigMapOutput {
	return i.ToBucketHttpsConfigMapOutputWithContext(context.Background())
}

func (i BucketHttpsConfigMap) ToBucketHttpsConfigMapOutputWithContext(ctx context.Context) BucketHttpsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketHttpsConfigMapOutput)
}

type BucketHttpsConfigOutput struct{ *pulumi.OutputState }

func (BucketHttpsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketHttpsConfig)(nil)).Elem()
}

func (o BucketHttpsConfigOutput) ToBucketHttpsConfigOutput() BucketHttpsConfigOutput {
	return o
}

func (o BucketHttpsConfigOutput) ToBucketHttpsConfigOutputWithContext(ctx context.Context) BucketHttpsConfigOutput {
	return o
}

// The name of the bucket.
func (o BucketHttpsConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketHttpsConfig) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies whether to enable TLS version management for the bucket. Valid values: true, false.
func (o BucketHttpsConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *BucketHttpsConfig) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// Specifies the TLS versions allowed to access this buckets.
func (o BucketHttpsConfigOutput) TlsVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BucketHttpsConfig) pulumi.StringArrayOutput { return v.TlsVersions }).(pulumi.StringArrayOutput)
}

type BucketHttpsConfigArrayOutput struct{ *pulumi.OutputState }

func (BucketHttpsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketHttpsConfig)(nil)).Elem()
}

func (o BucketHttpsConfigArrayOutput) ToBucketHttpsConfigArrayOutput() BucketHttpsConfigArrayOutput {
	return o
}

func (o BucketHttpsConfigArrayOutput) ToBucketHttpsConfigArrayOutputWithContext(ctx context.Context) BucketHttpsConfigArrayOutput {
	return o
}

func (o BucketHttpsConfigArrayOutput) Index(i pulumi.IntInput) BucketHttpsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketHttpsConfig {
		return vs[0].([]*BucketHttpsConfig)[vs[1].(int)]
	}).(BucketHttpsConfigOutput)
}

type BucketHttpsConfigMapOutput struct{ *pulumi.OutputState }

func (BucketHttpsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketHttpsConfig)(nil)).Elem()
}

func (o BucketHttpsConfigMapOutput) ToBucketHttpsConfigMapOutput() BucketHttpsConfigMapOutput {
	return o
}

func (o BucketHttpsConfigMapOutput) ToBucketHttpsConfigMapOutputWithContext(ctx context.Context) BucketHttpsConfigMapOutput {
	return o
}

func (o BucketHttpsConfigMapOutput) MapIndex(k pulumi.StringInput) BucketHttpsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketHttpsConfig {
		return vs[0].(map[string]*BucketHttpsConfig)[vs[1].(string)]
	}).(BucketHttpsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketHttpsConfigInput)(nil)).Elem(), &BucketHttpsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketHttpsConfigArrayInput)(nil)).Elem(), BucketHttpsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketHttpsConfigMapInput)(nil)).Elem(), BucketHttpsConfigMap{})
	pulumi.RegisterOutputType(BucketHttpsConfigOutput{})
	pulumi.RegisterOutputType(BucketHttpsConfigArrayOutput{})
	pulumi.RegisterOutputType(BucketHttpsConfigMapOutput{})
}
