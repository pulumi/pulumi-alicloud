// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a OSS Bucket Meta Query resource. Enables the metadata management feature for a bucket.
//
// For information about OSS Bucket Meta Query and how to use it, see [What is Bucket Meta Query](https://www.alibabacloud.com/help/en/oss/developer-reference/openmetaquery).
//
// > **NOTE:** Available since v1.224.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			createBucket, err := oss.NewBucket(ctx, "CreateBucket", &oss.BucketArgs{
//				StorageClass: pulumi.String("Standard"),
//				Bucket:       pulumi.String(fmt.Sprintf("%v-%v", name, _default.Result)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewBucketMetaQuery(ctx, "default", &oss.BucketMetaQueryArgs{
//				Bucket: createBucket.Bucket,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OSS Bucket Meta Query can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketMetaQuery:BucketMetaQuery example <id>
// ```
type BucketMetaQuery struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBucketMetaQuery registers a new resource with the given unique name, arguments, and options.
func NewBucketMetaQuery(ctx *pulumi.Context,
	name string, args *BucketMetaQueryArgs, opts ...pulumi.ResourceOption) (*BucketMetaQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketMetaQuery
	err := ctx.RegisterResource("alicloud:oss/bucketMetaQuery:BucketMetaQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketMetaQuery gets an existing BucketMetaQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketMetaQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketMetaQueryState, opts ...pulumi.ResourceOption) (*BucketMetaQuery, error) {
	var resource BucketMetaQuery
	err := ctx.ReadResource("alicloud:oss/bucketMetaQuery:BucketMetaQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketMetaQuery resources.
type bucketMetaQueryState struct {
	// The name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
	CreateTime *string `pulumi:"createTime"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type BucketMetaQueryState struct {
	// The name of the bucket.
	Bucket pulumi.StringPtrInput
	// The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
	CreateTime pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (BucketMetaQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetaQueryState)(nil)).Elem()
}

type bucketMetaQueryArgs struct {
	// The name of the bucket.
	Bucket string `pulumi:"bucket"`
}

// The set of arguments for constructing a BucketMetaQuery resource.
type BucketMetaQueryArgs struct {
	// The name of the bucket.
	Bucket pulumi.StringInput
}

func (BucketMetaQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetaQueryArgs)(nil)).Elem()
}

type BucketMetaQueryInput interface {
	pulumi.Input

	ToBucketMetaQueryOutput() BucketMetaQueryOutput
	ToBucketMetaQueryOutputWithContext(ctx context.Context) BucketMetaQueryOutput
}

func (*BucketMetaQuery) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketMetaQuery)(nil)).Elem()
}

func (i *BucketMetaQuery) ToBucketMetaQueryOutput() BucketMetaQueryOutput {
	return i.ToBucketMetaQueryOutputWithContext(context.Background())
}

func (i *BucketMetaQuery) ToBucketMetaQueryOutputWithContext(ctx context.Context) BucketMetaQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMetaQueryOutput)
}

// BucketMetaQueryArrayInput is an input type that accepts BucketMetaQueryArray and BucketMetaQueryArrayOutput values.
// You can construct a concrete instance of `BucketMetaQueryArrayInput` via:
//
//	BucketMetaQueryArray{ BucketMetaQueryArgs{...} }
type BucketMetaQueryArrayInput interface {
	pulumi.Input

	ToBucketMetaQueryArrayOutput() BucketMetaQueryArrayOutput
	ToBucketMetaQueryArrayOutputWithContext(context.Context) BucketMetaQueryArrayOutput
}

type BucketMetaQueryArray []BucketMetaQueryInput

func (BucketMetaQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketMetaQuery)(nil)).Elem()
}

func (i BucketMetaQueryArray) ToBucketMetaQueryArrayOutput() BucketMetaQueryArrayOutput {
	return i.ToBucketMetaQueryArrayOutputWithContext(context.Background())
}

func (i BucketMetaQueryArray) ToBucketMetaQueryArrayOutputWithContext(ctx context.Context) BucketMetaQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMetaQueryArrayOutput)
}

// BucketMetaQueryMapInput is an input type that accepts BucketMetaQueryMap and BucketMetaQueryMapOutput values.
// You can construct a concrete instance of `BucketMetaQueryMapInput` via:
//
//	BucketMetaQueryMap{ "key": BucketMetaQueryArgs{...} }
type BucketMetaQueryMapInput interface {
	pulumi.Input

	ToBucketMetaQueryMapOutput() BucketMetaQueryMapOutput
	ToBucketMetaQueryMapOutputWithContext(context.Context) BucketMetaQueryMapOutput
}

type BucketMetaQueryMap map[string]BucketMetaQueryInput

func (BucketMetaQueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketMetaQuery)(nil)).Elem()
}

func (i BucketMetaQueryMap) ToBucketMetaQueryMapOutput() BucketMetaQueryMapOutput {
	return i.ToBucketMetaQueryMapOutputWithContext(context.Background())
}

func (i BucketMetaQueryMap) ToBucketMetaQueryMapOutputWithContext(ctx context.Context) BucketMetaQueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMetaQueryMapOutput)
}

type BucketMetaQueryOutput struct{ *pulumi.OutputState }

func (BucketMetaQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketMetaQuery)(nil)).Elem()
}

func (o BucketMetaQueryOutput) ToBucketMetaQueryOutput() BucketMetaQueryOutput {
	return o
}

func (o BucketMetaQueryOutput) ToBucketMetaQueryOutputWithContext(ctx context.Context) BucketMetaQueryOutput {
	return o
}

// The name of the bucket.
func (o BucketMetaQueryOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketMetaQuery) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The creation time of the metadata index database. The format is mm:ss + TIMEZONE in the YYYY-MM-DDTHH format of RFC 3339. Where YYYY-MM-DD indicates the year, month and day, T indicates the beginning of the time element, HH:mm:ss indicates the hour, minute and second, and TIMEZONE indicates the time zone.
func (o BucketMetaQueryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketMetaQuery) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The status of the resource.
func (o BucketMetaQueryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketMetaQuery) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BucketMetaQueryArrayOutput struct{ *pulumi.OutputState }

func (BucketMetaQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketMetaQuery)(nil)).Elem()
}

func (o BucketMetaQueryArrayOutput) ToBucketMetaQueryArrayOutput() BucketMetaQueryArrayOutput {
	return o
}

func (o BucketMetaQueryArrayOutput) ToBucketMetaQueryArrayOutputWithContext(ctx context.Context) BucketMetaQueryArrayOutput {
	return o
}

func (o BucketMetaQueryArrayOutput) Index(i pulumi.IntInput) BucketMetaQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketMetaQuery {
		return vs[0].([]*BucketMetaQuery)[vs[1].(int)]
	}).(BucketMetaQueryOutput)
}

type BucketMetaQueryMapOutput struct{ *pulumi.OutputState }

func (BucketMetaQueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketMetaQuery)(nil)).Elem()
}

func (o BucketMetaQueryMapOutput) ToBucketMetaQueryMapOutput() BucketMetaQueryMapOutput {
	return o
}

func (o BucketMetaQueryMapOutput) ToBucketMetaQueryMapOutputWithContext(ctx context.Context) BucketMetaQueryMapOutput {
	return o
}

func (o BucketMetaQueryMapOutput) MapIndex(k pulumi.StringInput) BucketMetaQueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketMetaQuery {
		return vs[0].(map[string]*BucketMetaQuery)[vs[1].(string)]
	}).(BucketMetaQueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMetaQueryInput)(nil)).Elem(), &BucketMetaQuery{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMetaQueryArrayInput)(nil)).Elem(), BucketMetaQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMetaQueryMapInput)(nil)).Elem(), BucketMetaQueryMap{})
	pulumi.RegisterOutputType(BucketMetaQueryOutput{})
	pulumi.RegisterOutputType(BucketMetaQueryArrayOutput{})
	pulumi.RegisterOutputType(BucketMetaQueryMapOutput{})
}
