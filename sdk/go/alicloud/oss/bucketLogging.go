// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a OSS Bucket Logging resource. After you enable and configure logging for a bucket, Object Storage Service (OSS) generates log objects based on a predefined naming convention. This way, access logs are generated and stored in the specified bucket on an hourly basis.
//
// For information about OSS Bucket Logging and how to use it, see [What is Bucket Logging](https://www.alibabacloud.com/help/en/oss/developer-reference/putbucketlogging).
//
// > **NOTE:** Available since v1.222.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			createBucket, err := oss.NewBucket(ctx, "CreateBucket", &oss.BucketArgs{
//				StorageClass: pulumi.String("Standard"),
//				Bucket:       pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewBucketLogging(ctx, "default", &oss.BucketLoggingArgs{
//				Bucket:       createBucket.Bucket,
//				TargetBucket: createBucket.Bucket,
//				TargetPrefix: pulumi.String("log/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OSS Bucket Logging can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketLogging:BucketLogging example <id>
// ```
type BucketLogging struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The bucket that stores access logs.
	TargetBucket pulumi.StringOutput `pulumi:"targetBucket"`
	// The prefix of the saved log objects. This element can be left empty.
	TargetPrefix pulumi.StringPtrOutput `pulumi:"targetPrefix"`
}

// NewBucketLogging registers a new resource with the given unique name, arguments, and options.
func NewBucketLogging(ctx *pulumi.Context,
	name string, args *BucketLoggingArgs, opts ...pulumi.ResourceOption) (*BucketLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.TargetBucket == nil {
		return nil, errors.New("invalid value for required argument 'TargetBucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLogging
	err := ctx.RegisterResource("alicloud:oss/bucketLogging:BucketLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLogging gets an existing BucketLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLoggingState, opts ...pulumi.ResourceOption) (*BucketLogging, error) {
	var resource BucketLogging
	err := ctx.ReadResource("alicloud:oss/bucketLogging:BucketLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLogging resources.
type bucketLoggingState struct {
	// The name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// The bucket that stores access logs.
	TargetBucket *string `pulumi:"targetBucket"`
	// The prefix of the saved log objects. This element can be left empty.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type BucketLoggingState struct {
	// The name of the bucket.
	Bucket pulumi.StringPtrInput
	// The bucket that stores access logs.
	TargetBucket pulumi.StringPtrInput
	// The prefix of the saved log objects. This element can be left empty.
	TargetPrefix pulumi.StringPtrInput
}

func (BucketLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingState)(nil)).Elem()
}

type bucketLoggingArgs struct {
	// The name of the bucket.
	Bucket string `pulumi:"bucket"`
	// The bucket that stores access logs.
	TargetBucket string `pulumi:"targetBucket"`
	// The prefix of the saved log objects. This element can be left empty.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

// The set of arguments for constructing a BucketLogging resource.
type BucketLoggingArgs struct {
	// The name of the bucket.
	Bucket pulumi.StringInput
	// The bucket that stores access logs.
	TargetBucket pulumi.StringInput
	// The prefix of the saved log objects. This element can be left empty.
	TargetPrefix pulumi.StringPtrInput
}

func (BucketLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingArgs)(nil)).Elem()
}

type BucketLoggingInput interface {
	pulumi.Input

	ToBucketLoggingOutput() BucketLoggingOutput
	ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput
}

func (*BucketLogging) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLogging)(nil)).Elem()
}

func (i *BucketLogging) ToBucketLoggingOutput() BucketLoggingOutput {
	return i.ToBucketLoggingOutputWithContext(context.Background())
}

func (i *BucketLogging) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingOutput)
}

// BucketLoggingArrayInput is an input type that accepts BucketLoggingArray and BucketLoggingArrayOutput values.
// You can construct a concrete instance of `BucketLoggingArrayInput` via:
//
//	BucketLoggingArray{ BucketLoggingArgs{...} }
type BucketLoggingArrayInput interface {
	pulumi.Input

	ToBucketLoggingArrayOutput() BucketLoggingArrayOutput
	ToBucketLoggingArrayOutputWithContext(context.Context) BucketLoggingArrayOutput
}

type BucketLoggingArray []BucketLoggingInput

func (BucketLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLogging)(nil)).Elem()
}

func (i BucketLoggingArray) ToBucketLoggingArrayOutput() BucketLoggingArrayOutput {
	return i.ToBucketLoggingArrayOutputWithContext(context.Background())
}

func (i BucketLoggingArray) ToBucketLoggingArrayOutputWithContext(ctx context.Context) BucketLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingArrayOutput)
}

// BucketLoggingMapInput is an input type that accepts BucketLoggingMap and BucketLoggingMapOutput values.
// You can construct a concrete instance of `BucketLoggingMapInput` via:
//
//	BucketLoggingMap{ "key": BucketLoggingArgs{...} }
type BucketLoggingMapInput interface {
	pulumi.Input

	ToBucketLoggingMapOutput() BucketLoggingMapOutput
	ToBucketLoggingMapOutputWithContext(context.Context) BucketLoggingMapOutput
}

type BucketLoggingMap map[string]BucketLoggingInput

func (BucketLoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLogging)(nil)).Elem()
}

func (i BucketLoggingMap) ToBucketLoggingMapOutput() BucketLoggingMapOutput {
	return i.ToBucketLoggingMapOutputWithContext(context.Background())
}

func (i BucketLoggingMap) ToBucketLoggingMapOutputWithContext(ctx context.Context) BucketLoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingMapOutput)
}

type BucketLoggingOutput struct{ *pulumi.OutputState }

func (BucketLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLogging)(nil)).Elem()
}

func (o BucketLoggingOutput) ToBucketLoggingOutput() BucketLoggingOutput {
	return o
}

func (o BucketLoggingOutput) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return o
}

// The name of the bucket.
func (o BucketLoggingOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The bucket that stores access logs.
func (o BucketLoggingOutput) TargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringOutput { return v.TargetBucket }).(pulumi.StringOutput)
}

// The prefix of the saved log objects. This element can be left empty.
func (o BucketLoggingOutput) TargetPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringPtrOutput { return v.TargetPrefix }).(pulumi.StringPtrOutput)
}

type BucketLoggingArrayOutput struct{ *pulumi.OutputState }

func (BucketLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLogging)(nil)).Elem()
}

func (o BucketLoggingArrayOutput) ToBucketLoggingArrayOutput() BucketLoggingArrayOutput {
	return o
}

func (o BucketLoggingArrayOutput) ToBucketLoggingArrayOutputWithContext(ctx context.Context) BucketLoggingArrayOutput {
	return o
}

func (o BucketLoggingArrayOutput) Index(i pulumi.IntInput) BucketLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLogging {
		return vs[0].([]*BucketLogging)[vs[1].(int)]
	}).(BucketLoggingOutput)
}

type BucketLoggingMapOutput struct{ *pulumi.OutputState }

func (BucketLoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLogging)(nil)).Elem()
}

func (o BucketLoggingMapOutput) ToBucketLoggingMapOutput() BucketLoggingMapOutput {
	return o
}

func (o BucketLoggingMapOutput) ToBucketLoggingMapOutputWithContext(ctx context.Context) BucketLoggingMapOutput {
	return o
}

func (o BucketLoggingMapOutput) MapIndex(k pulumi.StringInput) BucketLoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLogging {
		return vs[0].(map[string]*BucketLogging)[vs[1].(string)]
	}).(BucketLoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingInput)(nil)).Elem(), &BucketLogging{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingArrayInput)(nil)).Elem(), BucketLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingMapInput)(nil)).Elem(), BucketLoggingMap{})
	pulumi.RegisterOutputType(BucketLoggingOutput{})
	pulumi.RegisterOutputType(BucketLoggingArrayOutput{})
	pulumi.RegisterOutputType(BucketLoggingMapOutput{})
}
