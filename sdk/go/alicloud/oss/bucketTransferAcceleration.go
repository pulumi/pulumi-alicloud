// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OSS Bucket Transfer Acceleration can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketTransferAcceleration:BucketTransferAcceleration example <id>
// ```
type BucketTransferAcceleration struct {
	pulumi.CustomResourceState

	// The name of the Bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
}

// NewBucketTransferAcceleration registers a new resource with the given unique name, arguments, and options.
func NewBucketTransferAcceleration(ctx *pulumi.Context,
	name string, args *BucketTransferAccelerationArgs, opts ...pulumi.ResourceOption) (*BucketTransferAcceleration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketTransferAcceleration
	err := ctx.RegisterResource("alicloud:oss/bucketTransferAcceleration:BucketTransferAcceleration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketTransferAcceleration gets an existing BucketTransferAcceleration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketTransferAcceleration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketTransferAccelerationState, opts ...pulumi.ResourceOption) (*BucketTransferAcceleration, error) {
	var resource BucketTransferAcceleration
	err := ctx.ReadResource("alicloud:oss/bucketTransferAcceleration:BucketTransferAcceleration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketTransferAcceleration resources.
type bucketTransferAccelerationState struct {
	// The name of the Bucket.
	Bucket *string `pulumi:"bucket"`
	// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
	Enabled *bool `pulumi:"enabled"`
}

type BucketTransferAccelerationState struct {
	// The name of the Bucket.
	Bucket pulumi.StringPtrInput
	// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
	Enabled pulumi.BoolPtrInput
}

func (BucketTransferAccelerationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketTransferAccelerationState)(nil)).Elem()
}

type bucketTransferAccelerationArgs struct {
	// The name of the Bucket.
	Bucket string `pulumi:"bucket"`
	// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
	Enabled *bool `pulumi:"enabled"`
}

// The set of arguments for constructing a BucketTransferAcceleration resource.
type BucketTransferAccelerationArgs struct {
	// The name of the Bucket.
	Bucket pulumi.StringInput
	// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
	Enabled pulumi.BoolPtrInput
}

func (BucketTransferAccelerationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketTransferAccelerationArgs)(nil)).Elem()
}

type BucketTransferAccelerationInput interface {
	pulumi.Input

	ToBucketTransferAccelerationOutput() BucketTransferAccelerationOutput
	ToBucketTransferAccelerationOutputWithContext(ctx context.Context) BucketTransferAccelerationOutput
}

func (*BucketTransferAcceleration) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketTransferAcceleration)(nil)).Elem()
}

func (i *BucketTransferAcceleration) ToBucketTransferAccelerationOutput() BucketTransferAccelerationOutput {
	return i.ToBucketTransferAccelerationOutputWithContext(context.Background())
}

func (i *BucketTransferAcceleration) ToBucketTransferAccelerationOutputWithContext(ctx context.Context) BucketTransferAccelerationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTransferAccelerationOutput)
}

// BucketTransferAccelerationArrayInput is an input type that accepts BucketTransferAccelerationArray and BucketTransferAccelerationArrayOutput values.
// You can construct a concrete instance of `BucketTransferAccelerationArrayInput` via:
//
//	BucketTransferAccelerationArray{ BucketTransferAccelerationArgs{...} }
type BucketTransferAccelerationArrayInput interface {
	pulumi.Input

	ToBucketTransferAccelerationArrayOutput() BucketTransferAccelerationArrayOutput
	ToBucketTransferAccelerationArrayOutputWithContext(context.Context) BucketTransferAccelerationArrayOutput
}

type BucketTransferAccelerationArray []BucketTransferAccelerationInput

func (BucketTransferAccelerationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketTransferAcceleration)(nil)).Elem()
}

func (i BucketTransferAccelerationArray) ToBucketTransferAccelerationArrayOutput() BucketTransferAccelerationArrayOutput {
	return i.ToBucketTransferAccelerationArrayOutputWithContext(context.Background())
}

func (i BucketTransferAccelerationArray) ToBucketTransferAccelerationArrayOutputWithContext(ctx context.Context) BucketTransferAccelerationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTransferAccelerationArrayOutput)
}

// BucketTransferAccelerationMapInput is an input type that accepts BucketTransferAccelerationMap and BucketTransferAccelerationMapOutput values.
// You can construct a concrete instance of `BucketTransferAccelerationMapInput` via:
//
//	BucketTransferAccelerationMap{ "key": BucketTransferAccelerationArgs{...} }
type BucketTransferAccelerationMapInput interface {
	pulumi.Input

	ToBucketTransferAccelerationMapOutput() BucketTransferAccelerationMapOutput
	ToBucketTransferAccelerationMapOutputWithContext(context.Context) BucketTransferAccelerationMapOutput
}

type BucketTransferAccelerationMap map[string]BucketTransferAccelerationInput

func (BucketTransferAccelerationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketTransferAcceleration)(nil)).Elem()
}

func (i BucketTransferAccelerationMap) ToBucketTransferAccelerationMapOutput() BucketTransferAccelerationMapOutput {
	return i.ToBucketTransferAccelerationMapOutputWithContext(context.Background())
}

func (i BucketTransferAccelerationMap) ToBucketTransferAccelerationMapOutputWithContext(ctx context.Context) BucketTransferAccelerationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTransferAccelerationMapOutput)
}

type BucketTransferAccelerationOutput struct{ *pulumi.OutputState }

func (BucketTransferAccelerationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketTransferAcceleration)(nil)).Elem()
}

func (o BucketTransferAccelerationOutput) ToBucketTransferAccelerationOutput() BucketTransferAccelerationOutput {
	return o
}

func (o BucketTransferAccelerationOutput) ToBucketTransferAccelerationOutputWithContext(ctx context.Context) BucketTransferAccelerationOutput {
	return o
}

// The name of the Bucket.
func (o BucketTransferAccelerationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketTransferAcceleration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies whether to enable transfer acceleration for the bucket. Valid values: true: transfer acceleration for the bucket is enabled. false: transfer acceleration for the bucket is disabled.
func (o BucketTransferAccelerationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketTransferAcceleration) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BucketTransferAccelerationArrayOutput struct{ *pulumi.OutputState }

func (BucketTransferAccelerationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketTransferAcceleration)(nil)).Elem()
}

func (o BucketTransferAccelerationArrayOutput) ToBucketTransferAccelerationArrayOutput() BucketTransferAccelerationArrayOutput {
	return o
}

func (o BucketTransferAccelerationArrayOutput) ToBucketTransferAccelerationArrayOutputWithContext(ctx context.Context) BucketTransferAccelerationArrayOutput {
	return o
}

func (o BucketTransferAccelerationArrayOutput) Index(i pulumi.IntInput) BucketTransferAccelerationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketTransferAcceleration {
		return vs[0].([]*BucketTransferAcceleration)[vs[1].(int)]
	}).(BucketTransferAccelerationOutput)
}

type BucketTransferAccelerationMapOutput struct{ *pulumi.OutputState }

func (BucketTransferAccelerationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketTransferAcceleration)(nil)).Elem()
}

func (o BucketTransferAccelerationMapOutput) ToBucketTransferAccelerationMapOutput() BucketTransferAccelerationMapOutput {
	return o
}

func (o BucketTransferAccelerationMapOutput) ToBucketTransferAccelerationMapOutputWithContext(ctx context.Context) BucketTransferAccelerationMapOutput {
	return o
}

func (o BucketTransferAccelerationMapOutput) MapIndex(k pulumi.StringInput) BucketTransferAccelerationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketTransferAcceleration {
		return vs[0].(map[string]*BucketTransferAcceleration)[vs[1].(string)]
	}).(BucketTransferAccelerationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTransferAccelerationInput)(nil)).Elem(), &BucketTransferAcceleration{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTransferAccelerationArrayInput)(nil)).Elem(), BucketTransferAccelerationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTransferAccelerationMapInput)(nil)).Elem(), BucketTransferAccelerationMap{})
	pulumi.RegisterOutputType(BucketTransferAccelerationOutput{})
	pulumi.RegisterOutputType(BucketTransferAccelerationArrayOutput{})
	pulumi.RegisterOutputType(BucketTransferAccelerationMapOutput{})
}
