// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a OSS Bucket Style resource.
//
// Image styles that contain single or multiple image processing parameters.
//
// For information about OSS Bucket Style and how to use it, see [What is Bucket Style](https://next.api.alibabacloud.com/document/Oss/2019-05-17/PutStyle).
//
// > **NOTE:** Available since v1.245.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			createBucket, err := oss.NewBucket(ctx, "CreateBucket", &oss.BucketArgs{
//				StorageClass: pulumi.String("Standard"),
//				Bucket:       pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewBucketStyle(ctx, "default", &oss.BucketStyleArgs{
//				Bucket:    createBucket.ID(),
//				StyleName: pulumi.String("style-933"),
//				Content:   pulumi.String("image/resize,p_75,w_75"),
//				Category:  pulumi.String("document"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OSS Bucket Style can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketStyle:BucketStyle example <bucket>:<style_name>
// ```
type BucketStyle struct {
	pulumi.CustomResourceState

	// Storage space to which the picture style belongs
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Style category, valid values: image, document, video.
	Category pulumi.StringOutput `pulumi:"category"`
	// The Image style content can contain single or multiple image processing parameters.
	Content pulumi.StringOutput `pulumi:"content"`
	// Image Style Creation Time
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Image Style Name
	StyleName pulumi.StringOutput `pulumi:"styleName"`
}

// NewBucketStyle registers a new resource with the given unique name, arguments, and options.
func NewBucketStyle(ctx *pulumi.Context,
	name string, args *BucketStyleArgs, opts ...pulumi.ResourceOption) (*BucketStyle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.StyleName == nil {
		return nil, errors.New("invalid value for required argument 'StyleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketStyle
	err := ctx.RegisterResource("alicloud:oss/bucketStyle:BucketStyle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketStyle gets an existing BucketStyle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketStyle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketStyleState, opts ...pulumi.ResourceOption) (*BucketStyle, error) {
	var resource BucketStyle
	err := ctx.ReadResource("alicloud:oss/bucketStyle:BucketStyle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketStyle resources.
type bucketStyleState struct {
	// Storage space to which the picture style belongs
	Bucket *string `pulumi:"bucket"`
	// Style category, valid values: image, document, video.
	Category *string `pulumi:"category"`
	// The Image style content can contain single or multiple image processing parameters.
	Content *string `pulumi:"content"`
	// Image Style Creation Time
	CreateTime *string `pulumi:"createTime"`
	// Image Style Name
	StyleName *string `pulumi:"styleName"`
}

type BucketStyleState struct {
	// Storage space to which the picture style belongs
	Bucket pulumi.StringPtrInput
	// Style category, valid values: image, document, video.
	Category pulumi.StringPtrInput
	// The Image style content can contain single or multiple image processing parameters.
	Content pulumi.StringPtrInput
	// Image Style Creation Time
	CreateTime pulumi.StringPtrInput
	// Image Style Name
	StyleName pulumi.StringPtrInput
}

func (BucketStyleState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketStyleState)(nil)).Elem()
}

type bucketStyleArgs struct {
	// Storage space to which the picture style belongs
	Bucket string `pulumi:"bucket"`
	// Style category, valid values: image, document, video.
	Category *string `pulumi:"category"`
	// The Image style content can contain single or multiple image processing parameters.
	Content string `pulumi:"content"`
	// Image Style Name
	StyleName string `pulumi:"styleName"`
}

// The set of arguments for constructing a BucketStyle resource.
type BucketStyleArgs struct {
	// Storage space to which the picture style belongs
	Bucket pulumi.StringInput
	// Style category, valid values: image, document, video.
	Category pulumi.StringPtrInput
	// The Image style content can contain single or multiple image processing parameters.
	Content pulumi.StringInput
	// Image Style Name
	StyleName pulumi.StringInput
}

func (BucketStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketStyleArgs)(nil)).Elem()
}

type BucketStyleInput interface {
	pulumi.Input

	ToBucketStyleOutput() BucketStyleOutput
	ToBucketStyleOutputWithContext(ctx context.Context) BucketStyleOutput
}

func (*BucketStyle) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStyle)(nil)).Elem()
}

func (i *BucketStyle) ToBucketStyleOutput() BucketStyleOutput {
	return i.ToBucketStyleOutputWithContext(context.Background())
}

func (i *BucketStyle) ToBucketStyleOutputWithContext(ctx context.Context) BucketStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStyleOutput)
}

// BucketStyleArrayInput is an input type that accepts BucketStyleArray and BucketStyleArrayOutput values.
// You can construct a concrete instance of `BucketStyleArrayInput` via:
//
//	BucketStyleArray{ BucketStyleArgs{...} }
type BucketStyleArrayInput interface {
	pulumi.Input

	ToBucketStyleArrayOutput() BucketStyleArrayOutput
	ToBucketStyleArrayOutputWithContext(context.Context) BucketStyleArrayOutput
}

type BucketStyleArray []BucketStyleInput

func (BucketStyleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketStyle)(nil)).Elem()
}

func (i BucketStyleArray) ToBucketStyleArrayOutput() BucketStyleArrayOutput {
	return i.ToBucketStyleArrayOutputWithContext(context.Background())
}

func (i BucketStyleArray) ToBucketStyleArrayOutputWithContext(ctx context.Context) BucketStyleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStyleArrayOutput)
}

// BucketStyleMapInput is an input type that accepts BucketStyleMap and BucketStyleMapOutput values.
// You can construct a concrete instance of `BucketStyleMapInput` via:
//
//	BucketStyleMap{ "key": BucketStyleArgs{...} }
type BucketStyleMapInput interface {
	pulumi.Input

	ToBucketStyleMapOutput() BucketStyleMapOutput
	ToBucketStyleMapOutputWithContext(context.Context) BucketStyleMapOutput
}

type BucketStyleMap map[string]BucketStyleInput

func (BucketStyleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketStyle)(nil)).Elem()
}

func (i BucketStyleMap) ToBucketStyleMapOutput() BucketStyleMapOutput {
	return i.ToBucketStyleMapOutputWithContext(context.Background())
}

func (i BucketStyleMap) ToBucketStyleMapOutputWithContext(ctx context.Context) BucketStyleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStyleMapOutput)
}

type BucketStyleOutput struct{ *pulumi.OutputState }

func (BucketStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStyle)(nil)).Elem()
}

func (o BucketStyleOutput) ToBucketStyleOutput() BucketStyleOutput {
	return o
}

func (o BucketStyleOutput) ToBucketStyleOutputWithContext(ctx context.Context) BucketStyleOutput {
	return o
}

// Storage space to which the picture style belongs
func (o BucketStyleOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketStyle) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Style category, valid values: image, document, video.
func (o BucketStyleOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketStyle) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// The Image style content can contain single or multiple image processing parameters.
func (o BucketStyleOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketStyle) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Image Style Creation Time
func (o BucketStyleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketStyle) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Image Style Name
func (o BucketStyleOutput) StyleName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketStyle) pulumi.StringOutput { return v.StyleName }).(pulumi.StringOutput)
}

type BucketStyleArrayOutput struct{ *pulumi.OutputState }

func (BucketStyleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketStyle)(nil)).Elem()
}

func (o BucketStyleArrayOutput) ToBucketStyleArrayOutput() BucketStyleArrayOutput {
	return o
}

func (o BucketStyleArrayOutput) ToBucketStyleArrayOutputWithContext(ctx context.Context) BucketStyleArrayOutput {
	return o
}

func (o BucketStyleArrayOutput) Index(i pulumi.IntInput) BucketStyleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketStyle {
		return vs[0].([]*BucketStyle)[vs[1].(int)]
	}).(BucketStyleOutput)
}

type BucketStyleMapOutput struct{ *pulumi.OutputState }

func (BucketStyleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketStyle)(nil)).Elem()
}

func (o BucketStyleMapOutput) ToBucketStyleMapOutput() BucketStyleMapOutput {
	return o
}

func (o BucketStyleMapOutput) ToBucketStyleMapOutputWithContext(ctx context.Context) BucketStyleMapOutput {
	return o
}

func (o BucketStyleMapOutput) MapIndex(k pulumi.StringInput) BucketStyleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketStyle {
		return vs[0].(map[string]*BucketStyle)[vs[1].(string)]
	}).(BucketStyleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStyleInput)(nil)).Elem(), &BucketStyle{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStyleArrayInput)(nil)).Elem(), BucketStyleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStyleMapInput)(nil)).Elem(), BucketStyleMap{})
	pulumi.RegisterOutputType(BucketStyleOutput{})
	pulumi.RegisterOutputType(BucketStyleArrayOutput{})
	pulumi.RegisterOutputType(BucketStyleMapOutput{})
}
