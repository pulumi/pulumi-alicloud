// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OSS Bucket Acl can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketAcl:BucketAcl example <id>
// ```
type BucketAcl struct {
	pulumi.CustomResourceState

	// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
	Acl pulumi.StringOutput `pulumi:"acl"`
	// The name of the bucket to which the current ACL configuration belongs.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
}

// NewBucketAcl registers a new resource with the given unique name, arguments, and options.
func NewBucketAcl(ctx *pulumi.Context,
	name string, args *BucketAclArgs, opts ...pulumi.ResourceOption) (*BucketAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Acl == nil {
		return nil, errors.New("invalid value for required argument 'Acl'")
	}
	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketAcl
	err := ctx.RegisterResource("alicloud:oss/bucketAcl:BucketAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketAcl gets an existing BucketAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketAclState, opts ...pulumi.ResourceOption) (*BucketAcl, error) {
	var resource BucketAcl
	err := ctx.ReadResource("alicloud:oss/bucketAcl:BucketAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketAcl resources.
type bucketAclState struct {
	// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
	Acl *string `pulumi:"acl"`
	// The name of the bucket to which the current ACL configuration belongs.
	Bucket *string `pulumi:"bucket"`
}

type BucketAclState struct {
	// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
	Acl pulumi.StringPtrInput
	// The name of the bucket to which the current ACL configuration belongs.
	Bucket pulumi.StringPtrInput
}

func (BucketAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAclState)(nil)).Elem()
}

type bucketAclArgs struct {
	// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
	Acl string `pulumi:"acl"`
	// The name of the bucket to which the current ACL configuration belongs.
	Bucket string `pulumi:"bucket"`
}

// The set of arguments for constructing a BucketAcl resource.
type BucketAclArgs struct {
	// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
	Acl pulumi.StringInput
	// The name of the bucket to which the current ACL configuration belongs.
	Bucket pulumi.StringInput
}

func (BucketAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAclArgs)(nil)).Elem()
}

type BucketAclInput interface {
	pulumi.Input

	ToBucketAclOutput() BucketAclOutput
	ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput
}

func (*BucketAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAcl)(nil)).Elem()
}

func (i *BucketAcl) ToBucketAclOutput() BucketAclOutput {
	return i.ToBucketAclOutputWithContext(context.Background())
}

func (i *BucketAcl) ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclOutput)
}

// BucketAclArrayInput is an input type that accepts BucketAclArray and BucketAclArrayOutput values.
// You can construct a concrete instance of `BucketAclArrayInput` via:
//
//	BucketAclArray{ BucketAclArgs{...} }
type BucketAclArrayInput interface {
	pulumi.Input

	ToBucketAclArrayOutput() BucketAclArrayOutput
	ToBucketAclArrayOutputWithContext(context.Context) BucketAclArrayOutput
}

type BucketAclArray []BucketAclInput

func (BucketAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAcl)(nil)).Elem()
}

func (i BucketAclArray) ToBucketAclArrayOutput() BucketAclArrayOutput {
	return i.ToBucketAclArrayOutputWithContext(context.Background())
}

func (i BucketAclArray) ToBucketAclArrayOutputWithContext(ctx context.Context) BucketAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclArrayOutput)
}

// BucketAclMapInput is an input type that accepts BucketAclMap and BucketAclMapOutput values.
// You can construct a concrete instance of `BucketAclMapInput` via:
//
//	BucketAclMap{ "key": BucketAclArgs{...} }
type BucketAclMapInput interface {
	pulumi.Input

	ToBucketAclMapOutput() BucketAclMapOutput
	ToBucketAclMapOutputWithContext(context.Context) BucketAclMapOutput
}

type BucketAclMap map[string]BucketAclInput

func (BucketAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAcl)(nil)).Elem()
}

func (i BucketAclMap) ToBucketAclMapOutput() BucketAclMapOutput {
	return i.ToBucketAclMapOutputWithContext(context.Background())
}

func (i BucketAclMap) ToBucketAclMapOutputWithContext(ctx context.Context) BucketAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclMapOutput)
}

type BucketAclOutput struct{ *pulumi.OutputState }

func (BucketAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAcl)(nil)).Elem()
}

func (o BucketAclOutput) ToBucketAclOutput() BucketAclOutput {
	return o
}

func (o BucketAclOutput) ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput {
	return o
}

// Bucket-level Access Control List (ACL)，Valid values: `private`, `public-read`, `public-read-write`.
func (o BucketAclOutput) Acl() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringOutput { return v.Acl }).(pulumi.StringOutput)
}

// The name of the bucket to which the current ACL configuration belongs.
func (o BucketAclOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

type BucketAclArrayOutput struct{ *pulumi.OutputState }

func (BucketAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAcl)(nil)).Elem()
}

func (o BucketAclArrayOutput) ToBucketAclArrayOutput() BucketAclArrayOutput {
	return o
}

func (o BucketAclArrayOutput) ToBucketAclArrayOutputWithContext(ctx context.Context) BucketAclArrayOutput {
	return o
}

func (o BucketAclArrayOutput) Index(i pulumi.IntInput) BucketAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketAcl {
		return vs[0].([]*BucketAcl)[vs[1].(int)]
	}).(BucketAclOutput)
}

type BucketAclMapOutput struct{ *pulumi.OutputState }

func (BucketAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAcl)(nil)).Elem()
}

func (o BucketAclMapOutput) ToBucketAclMapOutput() BucketAclMapOutput {
	return o
}

func (o BucketAclMapOutput) ToBucketAclMapOutputWithContext(ctx context.Context) BucketAclMapOutput {
	return o
}

func (o BucketAclMapOutput) MapIndex(k pulumi.StringInput) BucketAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketAcl {
		return vs[0].(map[string]*BucketAcl)[vs[1].(string)]
	}).(BucketAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclInput)(nil)).Elem(), &BucketAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclArrayInput)(nil)).Elem(), BucketAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclMapInput)(nil)).Elem(), BucketAclMap{})
	pulumi.RegisterOutputType(BucketAclOutput{})
	pulumi.RegisterOutputType(BucketAclArrayOutput{})
	pulumi.RegisterOutputType(BucketAclMapOutput{})
}
