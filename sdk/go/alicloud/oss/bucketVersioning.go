// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OSS Bucket Versioning can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketVersioning:BucketVersioning example <id>
// ```
type BucketVersioning struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBucketVersioning registers a new resource with the given unique name, arguments, and options.
func NewBucketVersioning(ctx *pulumi.Context,
	name string, args *BucketVersioningArgs, opts ...pulumi.ResourceOption) (*BucketVersioning, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketVersioning
	err := ctx.RegisterResource("alicloud:oss/bucketVersioning:BucketVersioning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketVersioning gets an existing BucketVersioning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketVersioning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketVersioningState, opts ...pulumi.ResourceOption) (*BucketVersioning, error) {
	var resource BucketVersioning
	err := ctx.ReadResource("alicloud:oss/bucketVersioning:BucketVersioning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketVersioning resources.
type bucketVersioningState struct {
	// The name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
	Status *string `pulumi:"status"`
}

type BucketVersioningState struct {
	// The name of the bucket.
	Bucket pulumi.StringPtrInput
	// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
	Status pulumi.StringPtrInput
}

func (BucketVersioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersioningState)(nil)).Elem()
}

type bucketVersioningArgs struct {
	// The name of the bucket.
	Bucket string `pulumi:"bucket"`
	// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a BucketVersioning resource.
type BucketVersioningArgs struct {
	// The name of the bucket.
	Bucket pulumi.StringInput
	// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
	Status pulumi.StringPtrInput
}

func (BucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersioningArgs)(nil)).Elem()
}

type BucketVersioningInput interface {
	pulumi.Input

	ToBucketVersioningOutput() BucketVersioningOutput
	ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput
}

func (*BucketVersioning) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersioning)(nil)).Elem()
}

func (i *BucketVersioning) ToBucketVersioningOutput() BucketVersioningOutput {
	return i.ToBucketVersioningOutputWithContext(context.Background())
}

func (i *BucketVersioning) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningOutput)
}

// BucketVersioningArrayInput is an input type that accepts BucketVersioningArray and BucketVersioningArrayOutput values.
// You can construct a concrete instance of `BucketVersioningArrayInput` via:
//
//	BucketVersioningArray{ BucketVersioningArgs{...} }
type BucketVersioningArrayInput interface {
	pulumi.Input

	ToBucketVersioningArrayOutput() BucketVersioningArrayOutput
	ToBucketVersioningArrayOutputWithContext(context.Context) BucketVersioningArrayOutput
}

type BucketVersioningArray []BucketVersioningInput

func (BucketVersioningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersioning)(nil)).Elem()
}

func (i BucketVersioningArray) ToBucketVersioningArrayOutput() BucketVersioningArrayOutput {
	return i.ToBucketVersioningArrayOutputWithContext(context.Background())
}

func (i BucketVersioningArray) ToBucketVersioningArrayOutputWithContext(ctx context.Context) BucketVersioningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningArrayOutput)
}

// BucketVersioningMapInput is an input type that accepts BucketVersioningMap and BucketVersioningMapOutput values.
// You can construct a concrete instance of `BucketVersioningMapInput` via:
//
//	BucketVersioningMap{ "key": BucketVersioningArgs{...} }
type BucketVersioningMapInput interface {
	pulumi.Input

	ToBucketVersioningMapOutput() BucketVersioningMapOutput
	ToBucketVersioningMapOutputWithContext(context.Context) BucketVersioningMapOutput
}

type BucketVersioningMap map[string]BucketVersioningInput

func (BucketVersioningMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersioning)(nil)).Elem()
}

func (i BucketVersioningMap) ToBucketVersioningMapOutput() BucketVersioningMapOutput {
	return i.ToBucketVersioningMapOutputWithContext(context.Background())
}

func (i BucketVersioningMap) ToBucketVersioningMapOutputWithContext(ctx context.Context) BucketVersioningMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningMapOutput)
}

type BucketVersioningOutput struct{ *pulumi.OutputState }

func (BucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningOutput) ToBucketVersioningOutput() BucketVersioningOutput {
	return o
}

func (o BucketVersioningOutput) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return o
}

// The name of the bucket.
func (o BucketVersioningOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketVersioning) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// A bucket can be in one of the following versioning states: disabled, enabled, or suspended. By default, versioning is disabled for a bucket. Updating the value from Enabled or Suspended to Disabled will result in errors, because OSS does not support returning buckets to an unversioned state. .
func (o BucketVersioningOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketVersioning) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BucketVersioningArrayOutput struct{ *pulumi.OutputState }

func (BucketVersioningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningArrayOutput) ToBucketVersioningArrayOutput() BucketVersioningArrayOutput {
	return o
}

func (o BucketVersioningArrayOutput) ToBucketVersioningArrayOutputWithContext(ctx context.Context) BucketVersioningArrayOutput {
	return o
}

func (o BucketVersioningArrayOutput) Index(i pulumi.IntInput) BucketVersioningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketVersioning {
		return vs[0].([]*BucketVersioning)[vs[1].(int)]
	}).(BucketVersioningOutput)
}

type BucketVersioningMapOutput struct{ *pulumi.OutputState }

func (BucketVersioningMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningMapOutput) ToBucketVersioningMapOutput() BucketVersioningMapOutput {
	return o
}

func (o BucketVersioningMapOutput) ToBucketVersioningMapOutputWithContext(ctx context.Context) BucketVersioningMapOutput {
	return o
}

func (o BucketVersioningMapOutput) MapIndex(k pulumi.StringInput) BucketVersioningOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketVersioning {
		return vs[0].(map[string]*BucketVersioning)[vs[1].(string)]
	}).(BucketVersioningOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningInput)(nil)).Elem(), &BucketVersioning{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningArrayInput)(nil)).Elem(), BucketVersioningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningMapInput)(nil)).Elem(), BucketVersioningMap{})
	pulumi.RegisterOutputType(BucketVersioningOutput{})
	pulumi.RegisterOutputType(BucketVersioningArrayOutput{})
	pulumi.RegisterOutputType(BucketVersioningMapOutput{})
}
