// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a OSS Bucket Cname resource.
//
// Customizing Bucket domains.
//
// For information about OSS Bucket Cname and how to use it, see [What is Bucket Cname](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.233.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dns"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			createBucket, err := oss.NewBucket(ctx, "CreateBucket", &oss.BucketArgs{
//				Bucket:       pulumi.String(name),
//				StorageClass: pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultZaWJfG, err := oss.NewBucketCnameToken(ctx, "defaultZaWJfG", &oss.BucketCnameTokenArgs{
//				Bucket: createBucket.Bucket,
//				Domain: pulumi.String("tftestacc.com"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultnHqm5p, err := dns.NewAlidnsRecord(ctx, "defaultnHqm5p", &dns.AlidnsRecordArgs{
//				Status:     pulumi.String("ENABLE"),
//				Line:       pulumi.String("default"),
//				Rr:         pulumi.String("_dnsauth"),
//				Type:       pulumi.String("TXT"),
//				DomainName: pulumi.String("tftestacc.com"),
//				Priority:   pulumi.Int(1),
//				Value:      defaultZaWJfG.Token,
//				Ttl:        pulumi.Int(600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewBucketCname(ctx, "default", &oss.BucketCnameArgs{
//				Bucket: createBucket.Bucket,
//				Domain: defaultnHqm5p.DomainName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OSS Bucket Cname can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:oss/bucketCname:BucketCname example <bucket>:<domain>
// ```
type BucketCname struct {
	pulumi.CustomResourceState

	// The bucket to which the custom domain name belongs
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The container for the certificate configuration. See `certificate` below.
	Certificate BucketCnameCertificatePtrOutput `pulumi:"certificate"`
	// Whether to delete the certificate.
	DeleteCertificate pulumi.BoolPtrOutput `pulumi:"deleteCertificate"`
	// User-defined domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Whether to force overwrite certificate.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertId pulumi.StringPtrOutput `pulumi:"previousCertId"`
	// Cname status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBucketCname registers a new resource with the given unique name, arguments, and options.
func NewBucketCname(ctx *pulumi.Context,
	name string, args *BucketCnameArgs, opts ...pulumi.ResourceOption) (*BucketCname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketCname
	err := ctx.RegisterResource("alicloud:oss/bucketCname:BucketCname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketCname gets an existing BucketCname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketCname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketCnameState, opts ...pulumi.ResourceOption) (*BucketCname, error) {
	var resource BucketCname
	err := ctx.ReadResource("alicloud:oss/bucketCname:BucketCname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketCname resources.
type bucketCnameState struct {
	// The bucket to which the custom domain name belongs
	Bucket *string `pulumi:"bucket"`
	// The container for the certificate configuration. See `certificate` below.
	Certificate *BucketCnameCertificate `pulumi:"certificate"`
	// Whether to delete the certificate.
	DeleteCertificate *bool `pulumi:"deleteCertificate"`
	// User-defined domain name
	Domain *string `pulumi:"domain"`
	// Whether to force overwrite certificate.
	Force *bool `pulumi:"force"`
	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertId *string `pulumi:"previousCertId"`
	// Cname status
	Status *string `pulumi:"status"`
}

type BucketCnameState struct {
	// The bucket to which the custom domain name belongs
	Bucket pulumi.StringPtrInput
	// The container for the certificate configuration. See `certificate` below.
	Certificate BucketCnameCertificatePtrInput
	// Whether to delete the certificate.
	DeleteCertificate pulumi.BoolPtrInput
	// User-defined domain name
	Domain pulumi.StringPtrInput
	// Whether to force overwrite certificate.
	Force pulumi.BoolPtrInput
	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertId pulumi.StringPtrInput
	// Cname status
	Status pulumi.StringPtrInput
}

func (BucketCnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCnameState)(nil)).Elem()
}

type bucketCnameArgs struct {
	// The bucket to which the custom domain name belongs
	Bucket string `pulumi:"bucket"`
	// The container for the certificate configuration. See `certificate` below.
	Certificate *BucketCnameCertificate `pulumi:"certificate"`
	// Whether to delete the certificate.
	DeleteCertificate *bool `pulumi:"deleteCertificate"`
	// User-defined domain name
	Domain string `pulumi:"domain"`
	// Whether to force overwrite certificate.
	Force *bool `pulumi:"force"`
	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertId *string `pulumi:"previousCertId"`
}

// The set of arguments for constructing a BucketCname resource.
type BucketCnameArgs struct {
	// The bucket to which the custom domain name belongs
	Bucket pulumi.StringInput
	// The container for the certificate configuration. See `certificate` below.
	Certificate BucketCnameCertificatePtrInput
	// Whether to delete the certificate.
	DeleteCertificate pulumi.BoolPtrInput
	// User-defined domain name
	Domain pulumi.StringInput
	// Whether to force overwrite certificate.
	Force pulumi.BoolPtrInput
	// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
	PreviousCertId pulumi.StringPtrInput
}

func (BucketCnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCnameArgs)(nil)).Elem()
}

type BucketCnameInput interface {
	pulumi.Input

	ToBucketCnameOutput() BucketCnameOutput
	ToBucketCnameOutputWithContext(ctx context.Context) BucketCnameOutput
}

func (*BucketCname) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCname)(nil)).Elem()
}

func (i *BucketCname) ToBucketCnameOutput() BucketCnameOutput {
	return i.ToBucketCnameOutputWithContext(context.Background())
}

func (i *BucketCname) ToBucketCnameOutputWithContext(ctx context.Context) BucketCnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameOutput)
}

// BucketCnameArrayInput is an input type that accepts BucketCnameArray and BucketCnameArrayOutput values.
// You can construct a concrete instance of `BucketCnameArrayInput` via:
//
//	BucketCnameArray{ BucketCnameArgs{...} }
type BucketCnameArrayInput interface {
	pulumi.Input

	ToBucketCnameArrayOutput() BucketCnameArrayOutput
	ToBucketCnameArrayOutputWithContext(context.Context) BucketCnameArrayOutput
}

type BucketCnameArray []BucketCnameInput

func (BucketCnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCname)(nil)).Elem()
}

func (i BucketCnameArray) ToBucketCnameArrayOutput() BucketCnameArrayOutput {
	return i.ToBucketCnameArrayOutputWithContext(context.Background())
}

func (i BucketCnameArray) ToBucketCnameArrayOutputWithContext(ctx context.Context) BucketCnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameArrayOutput)
}

// BucketCnameMapInput is an input type that accepts BucketCnameMap and BucketCnameMapOutput values.
// You can construct a concrete instance of `BucketCnameMapInput` via:
//
//	BucketCnameMap{ "key": BucketCnameArgs{...} }
type BucketCnameMapInput interface {
	pulumi.Input

	ToBucketCnameMapOutput() BucketCnameMapOutput
	ToBucketCnameMapOutputWithContext(context.Context) BucketCnameMapOutput
}

type BucketCnameMap map[string]BucketCnameInput

func (BucketCnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCname)(nil)).Elem()
}

func (i BucketCnameMap) ToBucketCnameMapOutput() BucketCnameMapOutput {
	return i.ToBucketCnameMapOutputWithContext(context.Background())
}

func (i BucketCnameMap) ToBucketCnameMapOutputWithContext(ctx context.Context) BucketCnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCnameMapOutput)
}

type BucketCnameOutput struct{ *pulumi.OutputState }

func (BucketCnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCname)(nil)).Elem()
}

func (o BucketCnameOutput) ToBucketCnameOutput() BucketCnameOutput {
	return o
}

func (o BucketCnameOutput) ToBucketCnameOutputWithContext(ctx context.Context) BucketCnameOutput {
	return o
}

// The bucket to which the custom domain name belongs
func (o BucketCnameOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The container for the certificate configuration. See `certificate` below.
func (o BucketCnameOutput) Certificate() BucketCnameCertificatePtrOutput {
	return o.ApplyT(func(v *BucketCname) BucketCnameCertificatePtrOutput { return v.Certificate }).(BucketCnameCertificatePtrOutput)
}

// Whether to delete the certificate.
func (o BucketCnameOutput) DeleteCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.BoolPtrOutput { return v.DeleteCertificate }).(pulumi.BoolPtrOutput)
}

// User-defined domain name
func (o BucketCnameOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Whether to force overwrite certificate.
func (o BucketCnameOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// The current certificate ID. If the Force value is not true, the OSS Server checks whether the value matches the current certificate ID. If the value does not match, an error is reported.
func (o BucketCnameOutput) PreviousCertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.StringPtrOutput { return v.PreviousCertId }).(pulumi.StringPtrOutput)
}

// Cname status
func (o BucketCnameOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCname) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BucketCnameArrayOutput struct{ *pulumi.OutputState }

func (BucketCnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCname)(nil)).Elem()
}

func (o BucketCnameArrayOutput) ToBucketCnameArrayOutput() BucketCnameArrayOutput {
	return o
}

func (o BucketCnameArrayOutput) ToBucketCnameArrayOutputWithContext(ctx context.Context) BucketCnameArrayOutput {
	return o
}

func (o BucketCnameArrayOutput) Index(i pulumi.IntInput) BucketCnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketCname {
		return vs[0].([]*BucketCname)[vs[1].(int)]
	}).(BucketCnameOutput)
}

type BucketCnameMapOutput struct{ *pulumi.OutputState }

func (BucketCnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCname)(nil)).Elem()
}

func (o BucketCnameMapOutput) ToBucketCnameMapOutput() BucketCnameMapOutput {
	return o
}

func (o BucketCnameMapOutput) ToBucketCnameMapOutputWithContext(ctx context.Context) BucketCnameMapOutput {
	return o
}

func (o BucketCnameMapOutput) MapIndex(k pulumi.StringInput) BucketCnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketCname {
		return vs[0].(map[string]*BucketCname)[vs[1].(string)]
	}).(BucketCnameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameInput)(nil)).Elem(), &BucketCname{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameArrayInput)(nil)).Elem(), BucketCnameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCnameMapInput)(nil)).Elem(), BucketCnameMap{})
	pulumi.RegisterOutputType(BucketCnameOutput{})
	pulumi.RegisterOutputType(BucketCnameArrayOutput{})
	pulumi.RegisterOutputType(BucketCnameMapOutput{})
}
