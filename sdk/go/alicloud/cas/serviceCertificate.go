// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SSL Certificates Certificate resource.
//
// For information about SSL Certificates Certificate and how to use it, see [What is Certificate](https://www.alibabacloud.com/help/product/28533.html).
//
// > **NOTE:** Available in v1.129.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cas.NewServiceCertificate(ctx, "example", &cas.ServiceCertificateArgs{
//				CertificateName: pulumi.String("test"),
//				Cert:            readFileOrPanic(fmt.Sprintf("%v/test.crt", path.Module)),
//				Key:             readFileOrPanic(fmt.Sprintf("%v/test.key", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SSL Certificates Certificate can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:cas/serviceCertificate:ServiceCertificate example <id>
//
// ```
type ServiceCertificate struct {
	pulumi.CustomResourceState

	// Cert of the Certificate in which the Certificate will add.
	Cert pulumi.StringOutput `pulumi:"cert"`
	// Name of the Certificate.
	// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
	// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
	// Suffix .sh and .tel are not supported.
	// **NOTE:** One of `certificateName` and `name` must be specified.
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// Key of the Certificate in which the Certificate will add.
	Key pulumi.StringOutput `pulumi:"key"`
	// The lang.
	Lang pulumi.StringPtrOutput `pulumi:"lang"`
	// It has been deprecated from version 1.129.0 and using `certificateName` instead.
	//
	// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewServiceCertificate registers a new resource with the given unique name, arguments, and options.
func NewServiceCertificate(ctx *pulumi.Context,
	name string, args *ServiceCertificateArgs, opts ...pulumi.ResourceOption) (*ServiceCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	var resource ServiceCertificate
	err := ctx.RegisterResource("alicloud:cas/serviceCertificate:ServiceCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCertificate gets an existing ServiceCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceCertificateState, opts ...pulumi.ResourceOption) (*ServiceCertificate, error) {
	var resource ServiceCertificate
	err := ctx.ReadResource("alicloud:cas/serviceCertificate:ServiceCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCertificate resources.
type serviceCertificateState struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert *string `pulumi:"cert"`
	// Name of the Certificate.
	// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
	// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
	// Suffix .sh and .tel are not supported.
	// **NOTE:** One of `certificateName` and `name` must be specified.
	CertificateName *string `pulumi:"certificateName"`
	// Key of the Certificate in which the Certificate will add.
	Key *string `pulumi:"key"`
	// The lang.
	Lang *string `pulumi:"lang"`
	// It has been deprecated from version 1.129.0 and using `certificateName` instead.
	//
	// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
	Name *string `pulumi:"name"`
}

type ServiceCertificateState struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert pulumi.StringPtrInput
	// Name of the Certificate.
	// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
	// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
	// Suffix .sh and .tel are not supported.
	// **NOTE:** One of `certificateName` and `name` must be specified.
	CertificateName pulumi.StringPtrInput
	// Key of the Certificate in which the Certificate will add.
	Key pulumi.StringPtrInput
	// The lang.
	Lang pulumi.StringPtrInput
	// It has been deprecated from version 1.129.0 and using `certificateName` instead.
	//
	// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
	Name pulumi.StringPtrInput
}

func (ServiceCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCertificateState)(nil)).Elem()
}

type serviceCertificateArgs struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert string `pulumi:"cert"`
	// Name of the Certificate.
	// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
	// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
	// Suffix .sh and .tel are not supported.
	// **NOTE:** One of `certificateName` and `name` must be specified.
	CertificateName *string `pulumi:"certificateName"`
	// Key of the Certificate in which the Certificate will add.
	Key string `pulumi:"key"`
	// The lang.
	Lang *string `pulumi:"lang"`
	// It has been deprecated from version 1.129.0 and using `certificateName` instead.
	//
	// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ServiceCertificate resource.
type ServiceCertificateArgs struct {
	// Cert of the Certificate in which the Certificate will add.
	Cert pulumi.StringInput
	// Name of the Certificate.
	// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
	// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
	// Suffix .sh and .tel are not supported.
	// **NOTE:** One of `certificateName` and `name` must be specified.
	CertificateName pulumi.StringPtrInput
	// Key of the Certificate in which the Certificate will add.
	Key pulumi.StringInput
	// The lang.
	Lang pulumi.StringPtrInput
	// It has been deprecated from version 1.129.0 and using `certificateName` instead.
	//
	// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
	Name pulumi.StringPtrInput
}

func (ServiceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCertificateArgs)(nil)).Elem()
}

type ServiceCertificateInput interface {
	pulumi.Input

	ToServiceCertificateOutput() ServiceCertificateOutput
	ToServiceCertificateOutputWithContext(ctx context.Context) ServiceCertificateOutput
}

func (*ServiceCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCertificate)(nil)).Elem()
}

func (i *ServiceCertificate) ToServiceCertificateOutput() ServiceCertificateOutput {
	return i.ToServiceCertificateOutputWithContext(context.Background())
}

func (i *ServiceCertificate) ToServiceCertificateOutputWithContext(ctx context.Context) ServiceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCertificateOutput)
}

// ServiceCertificateArrayInput is an input type that accepts ServiceCertificateArray and ServiceCertificateArrayOutput values.
// You can construct a concrete instance of `ServiceCertificateArrayInput` via:
//
//	ServiceCertificateArray{ ServiceCertificateArgs{...} }
type ServiceCertificateArrayInput interface {
	pulumi.Input

	ToServiceCertificateArrayOutput() ServiceCertificateArrayOutput
	ToServiceCertificateArrayOutputWithContext(context.Context) ServiceCertificateArrayOutput
}

type ServiceCertificateArray []ServiceCertificateInput

func (ServiceCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCertificate)(nil)).Elem()
}

func (i ServiceCertificateArray) ToServiceCertificateArrayOutput() ServiceCertificateArrayOutput {
	return i.ToServiceCertificateArrayOutputWithContext(context.Background())
}

func (i ServiceCertificateArray) ToServiceCertificateArrayOutputWithContext(ctx context.Context) ServiceCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCertificateArrayOutput)
}

// ServiceCertificateMapInput is an input type that accepts ServiceCertificateMap and ServiceCertificateMapOutput values.
// You can construct a concrete instance of `ServiceCertificateMapInput` via:
//
//	ServiceCertificateMap{ "key": ServiceCertificateArgs{...} }
type ServiceCertificateMapInput interface {
	pulumi.Input

	ToServiceCertificateMapOutput() ServiceCertificateMapOutput
	ToServiceCertificateMapOutputWithContext(context.Context) ServiceCertificateMapOutput
}

type ServiceCertificateMap map[string]ServiceCertificateInput

func (ServiceCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCertificate)(nil)).Elem()
}

func (i ServiceCertificateMap) ToServiceCertificateMapOutput() ServiceCertificateMapOutput {
	return i.ToServiceCertificateMapOutputWithContext(context.Background())
}

func (i ServiceCertificateMap) ToServiceCertificateMapOutputWithContext(ctx context.Context) ServiceCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCertificateMapOutput)
}

type ServiceCertificateOutput struct{ *pulumi.OutputState }

func (ServiceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCertificate)(nil)).Elem()
}

func (o ServiceCertificateOutput) ToServiceCertificateOutput() ServiceCertificateOutput {
	return o
}

func (o ServiceCertificateOutput) ToServiceCertificateOutputWithContext(ctx context.Context) ServiceCertificateOutput {
	return o
}

// Cert of the Certificate in which the Certificate will add.
func (o ServiceCertificateOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCertificate) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// Name of the Certificate.
// This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-",
// and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time.
// Suffix .sh and .tel are not supported.
// **NOTE:** One of `certificateName` and `name` must be specified.
func (o ServiceCertificateOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCertificate) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// Key of the Certificate in which the Certificate will add.
func (o ServiceCertificateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCertificate) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The lang.
func (o ServiceCertificateOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceCertificate) pulumi.StringPtrOutput { return v.Lang }).(pulumi.StringPtrOutput)
}

// It has been deprecated from version 1.129.0 and using `certificateName` instead.
//
// Deprecated: attribute 'name' has been deprecated from provider version 1.129.0 and it will be remove in the future version. Please use the new attribute 'certificate_name' instead.
func (o ServiceCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ServiceCertificateArrayOutput struct{ *pulumi.OutputState }

func (ServiceCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCertificate)(nil)).Elem()
}

func (o ServiceCertificateArrayOutput) ToServiceCertificateArrayOutput() ServiceCertificateArrayOutput {
	return o
}

func (o ServiceCertificateArrayOutput) ToServiceCertificateArrayOutputWithContext(ctx context.Context) ServiceCertificateArrayOutput {
	return o
}

func (o ServiceCertificateArrayOutput) Index(i pulumi.IntInput) ServiceCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceCertificate {
		return vs[0].([]*ServiceCertificate)[vs[1].(int)]
	}).(ServiceCertificateOutput)
}

type ServiceCertificateMapOutput struct{ *pulumi.OutputState }

func (ServiceCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCertificate)(nil)).Elem()
}

func (o ServiceCertificateMapOutput) ToServiceCertificateMapOutput() ServiceCertificateMapOutput {
	return o
}

func (o ServiceCertificateMapOutput) ToServiceCertificateMapOutputWithContext(ctx context.Context) ServiceCertificateMapOutput {
	return o
}

func (o ServiceCertificateMapOutput) MapIndex(k pulumi.StringInput) ServiceCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceCertificate {
		return vs[0].(map[string]*ServiceCertificate)[vs[1].(string)]
	}).(ServiceCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCertificateInput)(nil)).Elem(), &ServiceCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCertificateArrayInput)(nil)).Elem(), ServiceCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCertificateMapInput)(nil)).Elem(), ServiceCertificateMap{})
	pulumi.RegisterOutputType(ServiceCertificateOutput{})
	pulumi.RegisterOutputType(ServiceCertificateArrayOutput{})
	pulumi.RegisterOutputType(ServiceCertificateMapOutput{})
}
