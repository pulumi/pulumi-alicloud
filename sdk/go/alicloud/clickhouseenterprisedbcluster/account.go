// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouseenterprisedbcluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Click House Enterprise Db Cluster Account resource.
//
// Clickhouse enterprise instance account.
//
// For information about Click House Enterprise Db Cluster Account and how to use it, see [What is Enterprise Db Cluster Account](https://next.api.alibabacloud.com/document/clickhouse/2023-05-22/CreateAccount).
//
// > **NOTE:** Available since v1.247.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/clickhouseenterprisedbcluster"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			regionId := "cn-beijing"
//			if param := cfg.Get("regionId"); param != "" {
//				regionId = param
//			}
//			vswIpRangeI := "172.16.1.0/24"
//			if param := cfg.Get("vswIpRangeI"); param != "" {
//				vswIpRangeI = param
//			}
//			vpcIpRange := "172.16.0.0/12"
//			if param := cfg.Get("vpcIpRange"); param != "" {
//				vpcIpRange = param
//			}
//			zoneIdI := "cn-beijing-i"
//			if param := cfg.Get("zoneIdI"); param != "" {
//				zoneIdI = param
//			}
//			defaultktKLuM, err := vpc.NewNetwork(ctx, "defaultktKLuM", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String(vpcIpRange),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTQWN3k, err := vpc.NewSwitch(ctx, "defaultTQWN3k", &vpc.SwitchArgs{
//				VpcId:     defaultktKLuM.ID(),
//				ZoneId:    pulumi.String(zoneIdI),
//				CidrBlock: pulumi.String(vswIpRangeI),
//			})
//			if err != nil {
//				return err
//			}
//			defaultWrovOd, err := clickhouseenterprisedbcluster.NewClickHouseEnterpriseDbCluster(ctx, "defaultWrovOd", &clickhouseenterprisedbcluster.ClickHouseEnterpriseDbClusterArgs{
//				ZoneId:    pulumi.String(zoneIdI),
//				VpcId:     defaultktKLuM.ID(),
//				ScaleMin:  pulumi.String("8"),
//				ScaleMax:  pulumi.String("16"),
//				VswitchId: defaultTQWN3k.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = clickhouseenterprisedbcluster.NewAccount(ctx, "default", &clickhouseenterprisedbcluster.AccountArgs{
//				Account:      pulumi.String("abc"),
//				Description:  pulumi.String("example_desc"),
//				DbInstanceId: defaultWrovOd.ID(),
//				AccountType:  pulumi.String("NormalAccount"),
//				Password:     pulumi.String("abc123456!"),
//				DmlAuthSetting: &clickhouseenterprisedbcluster.AccountDmlAuthSettingArgs{
//					DmlAuthority: pulumi.Int(0),
//					DdlAuthority: pulumi.Bool(true),
//					AllowDictionaries: pulumi.StringArray{
//						pulumi.String("*"),
//					},
//					AllowDatabases: pulumi.StringArray{
//						pulumi.String("*"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Click House Enterprise Db Cluster Account can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:clickhouseenterprisedbcluster/account:Account example <db_instance_id>:<account>
// ```
type Account struct {
	pulumi.CustomResourceState

	// The name of the database account.
	Account pulumi.StringOutput `pulumi:"account"`
	// The type of the database account. Valid values:
	// - `NormalAccount`: Normal account number.
	// - `SuperAccount`: The privileged account.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// The cluster ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// Note information.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Authorization information. See `dmlAuthSetting` below.
	DmlAuthSetting AccountDmlAuthSettingPtrOutput `pulumi:"dmlAuthSetting"`
	// Database account password. Set the following rules.
	// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
	// - Oh-! @#$%^& *()_+-= is a special character.
	// - Length is 8~32 characters.
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.AccountType == nil {
		return nil, errors.New("invalid value for required argument 'AccountType'")
	}
	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("alicloud:clickhouseenterprisedbcluster/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("alicloud:clickhouseenterprisedbcluster/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// The name of the database account.
	Account *string `pulumi:"account"`
	// The type of the database account. Valid values:
	// - `NormalAccount`: Normal account number.
	// - `SuperAccount`: The privileged account.
	AccountType *string `pulumi:"accountType"`
	// The cluster ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// Note information.
	Description *string `pulumi:"description"`
	// Authorization information. See `dmlAuthSetting` below.
	DmlAuthSetting *AccountDmlAuthSetting `pulumi:"dmlAuthSetting"`
	// Database account password. Set the following rules.
	// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
	// - Oh-! @#$%^& *()_+-= is a special character.
	// - Length is 8~32 characters.
	Password *string `pulumi:"password"`
}

type AccountState struct {
	// The name of the database account.
	Account pulumi.StringPtrInput
	// The type of the database account. Valid values:
	// - `NormalAccount`: Normal account number.
	// - `SuperAccount`: The privileged account.
	AccountType pulumi.StringPtrInput
	// The cluster ID.
	DbInstanceId pulumi.StringPtrInput
	// Note information.
	Description pulumi.StringPtrInput
	// Authorization information. See `dmlAuthSetting` below.
	DmlAuthSetting AccountDmlAuthSettingPtrInput
	// Database account password. Set the following rules.
	// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
	// - Oh-! @#$%^& *()_+-= is a special character.
	// - Length is 8~32 characters.
	Password pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// The name of the database account.
	Account string `pulumi:"account"`
	// The type of the database account. Valid values:
	// - `NormalAccount`: Normal account number.
	// - `SuperAccount`: The privileged account.
	AccountType string `pulumi:"accountType"`
	// The cluster ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// Note information.
	Description *string `pulumi:"description"`
	// Authorization information. See `dmlAuthSetting` below.
	DmlAuthSetting *AccountDmlAuthSetting `pulumi:"dmlAuthSetting"`
	// Database account password. Set the following rules.
	// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
	// - Oh-! @#$%^& *()_+-= is a special character.
	// - Length is 8~32 characters.
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The name of the database account.
	Account pulumi.StringInput
	// The type of the database account. Valid values:
	// - `NormalAccount`: Normal account number.
	// - `SuperAccount`: The privileged account.
	AccountType pulumi.StringInput
	// The cluster ID.
	DbInstanceId pulumi.StringInput
	// Note information.
	Description pulumi.StringPtrInput
	// Authorization information. See `dmlAuthSetting` below.
	DmlAuthSetting AccountDmlAuthSettingPtrInput
	// Database account password. Set the following rules.
	// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
	// - Oh-! @#$%^& *()_+-= is a special character.
	// - Length is 8~32 characters.
	Password pulumi.StringInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The name of the database account.
func (o AccountOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

// The type of the database account. Valid values:
// - `NormalAccount`: Normal account number.
// - `SuperAccount`: The privileged account.
func (o AccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// The cluster ID.
func (o AccountOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// Note information.
func (o AccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Authorization information. See `dmlAuthSetting` below.
func (o AccountOutput) DmlAuthSetting() AccountDmlAuthSettingPtrOutput {
	return o.ApplyT(func(v *Account) AccountDmlAuthSettingPtrOutput { return v.DmlAuthSetting }).(AccountDmlAuthSettingPtrOutput)
}

// Database account password. Set the following rules.
// - Consists of at least three of uppercase letters, lowercase letters, numbers, and special characters.
// - Oh-! @#$%^& *()_+-= is a special character.
// - Length is 8~32 characters.
func (o AccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
