// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouseenterprisedbcluster

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Click House Enterprise Db Cluster Security I P resource.
//
// Enterprise Clickhouse instance Security IP.
//
// For information about Click House Enterprise Db Cluster Security I P and how to use it, see [What is Enterprise Db Cluster Security I P](https://next.api.alibabacloud.com/document/clickhouse/2023-05-22/ModifySecurityIPList).
//
// > **NOTE:** Available since v1.247.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/clickhouseenterprisedbcluster"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			regionId := "cn-beijing"
//			if param := cfg.Get("regionId"); param != "" {
//				regionId = param
//			}
//			vswIpRangeI := "172.16.1.0/24"
//			if param := cfg.Get("vswIpRangeI"); param != "" {
//				vswIpRangeI = param
//			}
//			vpcIpRange := "172.16.0.0/12"
//			if param := cfg.Get("vpcIpRange"); param != "" {
//				vpcIpRange = param
//			}
//			zoneIdI := "cn-beijing-i"
//			if param := cfg.Get("zoneIdI"); param != "" {
//				zoneIdI = param
//			}
//			defaultktKLuM, err := vpc.NewNetwork(ctx, "defaultktKLuM", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String(vpcIpRange),
//			})
//			if err != nil {
//				return err
//			}
//			defaultTQWN3k, err := vpc.NewSwitch(ctx, "defaultTQWN3k", &vpc.SwitchArgs{
//				VpcId:     defaultktKLuM.ID(),
//				ZoneId:    pulumi.String(zoneIdI),
//				CidrBlock: pulumi.String(vswIpRangeI),
//			})
//			if err != nil {
//				return err
//			}
//			defaultn0nVrN, err := clickhouseenterprisedbcluster.NewClickHouseEnterpriseDbCluster(ctx, "defaultn0nVrN", &clickhouseenterprisedbcluster.ClickHouseEnterpriseDbClusterArgs{
//				ZoneId:    pulumi.String(zoneIdI),
//				VpcId:     defaultktKLuM.ID(),
//				ScaleMin:  pulumi.String("8"),
//				ScaleMax:  pulumi.String("16"),
//				VswitchId: defaultTQWN3k.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = clickhouseenterprisedbcluster.NewSecurityIp(ctx, "default", &clickhouseenterprisedbcluster.SecurityIpArgs{
//				GroupName:      pulumi.String("example_group"),
//				SecurityIpList: pulumi.String("127.0.0.2"),
//				DbInstanceId:   defaultn0nVrN.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Click House Enterprise Db Cluster Security I P can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:clickhouseenterprisedbcluster/securityIp:SecurityIp example <db_instance_id>:<group_name>
// ```
type SecurityIp struct {
	pulumi.CustomResourceState

	// The cluster ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// The whitelist name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// The IP address list under the whitelist group.
	SecurityIpList pulumi.StringOutput `pulumi:"securityIpList"`
}

// NewSecurityIp registers a new resource with the given unique name, arguments, and options.
func NewSecurityIp(ctx *pulumi.Context,
	name string, args *SecurityIpArgs, opts ...pulumi.ResourceOption) (*SecurityIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.SecurityIpList == nil {
		return nil, errors.New("invalid value for required argument 'SecurityIpList'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityIp
	err := ctx.RegisterResource("alicloud:clickhouseenterprisedbcluster/securityIp:SecurityIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityIp gets an existing SecurityIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityIpState, opts ...pulumi.ResourceOption) (*SecurityIp, error) {
	var resource SecurityIp
	err := ctx.ReadResource("alicloud:clickhouseenterprisedbcluster/securityIp:SecurityIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityIp resources.
type securityIpState struct {
	// The cluster ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// The whitelist name.
	GroupName *string `pulumi:"groupName"`
	// The IP address list under the whitelist group.
	SecurityIpList *string `pulumi:"securityIpList"`
}

type SecurityIpState struct {
	// The cluster ID.
	DbInstanceId pulumi.StringPtrInput
	// The whitelist name.
	GroupName pulumi.StringPtrInput
	// The IP address list under the whitelist group.
	SecurityIpList pulumi.StringPtrInput
}

func (SecurityIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityIpState)(nil)).Elem()
}

type securityIpArgs struct {
	// The cluster ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// The whitelist name.
	GroupName string `pulumi:"groupName"`
	// The IP address list under the whitelist group.
	SecurityIpList string `pulumi:"securityIpList"`
}

// The set of arguments for constructing a SecurityIp resource.
type SecurityIpArgs struct {
	// The cluster ID.
	DbInstanceId pulumi.StringInput
	// The whitelist name.
	GroupName pulumi.StringInput
	// The IP address list under the whitelist group.
	SecurityIpList pulumi.StringInput
}

func (SecurityIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityIpArgs)(nil)).Elem()
}

type SecurityIpInput interface {
	pulumi.Input

	ToSecurityIpOutput() SecurityIpOutput
	ToSecurityIpOutputWithContext(ctx context.Context) SecurityIpOutput
}

func (*SecurityIp) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityIp)(nil)).Elem()
}

func (i *SecurityIp) ToSecurityIpOutput() SecurityIpOutput {
	return i.ToSecurityIpOutputWithContext(context.Background())
}

func (i *SecurityIp) ToSecurityIpOutputWithContext(ctx context.Context) SecurityIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityIpOutput)
}

// SecurityIpArrayInput is an input type that accepts SecurityIpArray and SecurityIpArrayOutput values.
// You can construct a concrete instance of `SecurityIpArrayInput` via:
//
//	SecurityIpArray{ SecurityIpArgs{...} }
type SecurityIpArrayInput interface {
	pulumi.Input

	ToSecurityIpArrayOutput() SecurityIpArrayOutput
	ToSecurityIpArrayOutputWithContext(context.Context) SecurityIpArrayOutput
}

type SecurityIpArray []SecurityIpInput

func (SecurityIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityIp)(nil)).Elem()
}

func (i SecurityIpArray) ToSecurityIpArrayOutput() SecurityIpArrayOutput {
	return i.ToSecurityIpArrayOutputWithContext(context.Background())
}

func (i SecurityIpArray) ToSecurityIpArrayOutputWithContext(ctx context.Context) SecurityIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityIpArrayOutput)
}

// SecurityIpMapInput is an input type that accepts SecurityIpMap and SecurityIpMapOutput values.
// You can construct a concrete instance of `SecurityIpMapInput` via:
//
//	SecurityIpMap{ "key": SecurityIpArgs{...} }
type SecurityIpMapInput interface {
	pulumi.Input

	ToSecurityIpMapOutput() SecurityIpMapOutput
	ToSecurityIpMapOutputWithContext(context.Context) SecurityIpMapOutput
}

type SecurityIpMap map[string]SecurityIpInput

func (SecurityIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityIp)(nil)).Elem()
}

func (i SecurityIpMap) ToSecurityIpMapOutput() SecurityIpMapOutput {
	return i.ToSecurityIpMapOutputWithContext(context.Background())
}

func (i SecurityIpMap) ToSecurityIpMapOutputWithContext(ctx context.Context) SecurityIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityIpMapOutput)
}

type SecurityIpOutput struct{ *pulumi.OutputState }

func (SecurityIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityIp)(nil)).Elem()
}

func (o SecurityIpOutput) ToSecurityIpOutput() SecurityIpOutput {
	return o
}

func (o SecurityIpOutput) ToSecurityIpOutputWithContext(ctx context.Context) SecurityIpOutput {
	return o
}

// The cluster ID.
func (o SecurityIpOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityIp) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// The whitelist name.
func (o SecurityIpOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityIp) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// The IP address list under the whitelist group.
func (o SecurityIpOutput) SecurityIpList() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityIp) pulumi.StringOutput { return v.SecurityIpList }).(pulumi.StringOutput)
}

type SecurityIpArrayOutput struct{ *pulumi.OutputState }

func (SecurityIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityIp)(nil)).Elem()
}

func (o SecurityIpArrayOutput) ToSecurityIpArrayOutput() SecurityIpArrayOutput {
	return o
}

func (o SecurityIpArrayOutput) ToSecurityIpArrayOutputWithContext(ctx context.Context) SecurityIpArrayOutput {
	return o
}

func (o SecurityIpArrayOutput) Index(i pulumi.IntInput) SecurityIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityIp {
		return vs[0].([]*SecurityIp)[vs[1].(int)]
	}).(SecurityIpOutput)
}

type SecurityIpMapOutput struct{ *pulumi.OutputState }

func (SecurityIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityIp)(nil)).Elem()
}

func (o SecurityIpMapOutput) ToSecurityIpMapOutput() SecurityIpMapOutput {
	return o
}

func (o SecurityIpMapOutput) ToSecurityIpMapOutputWithContext(ctx context.Context) SecurityIpMapOutput {
	return o
}

func (o SecurityIpMapOutput) MapIndex(k pulumi.StringInput) SecurityIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityIp {
		return vs[0].(map[string]*SecurityIp)[vs[1].(string)]
	}).(SecurityIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityIpInput)(nil)).Elem(), &SecurityIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityIpArrayInput)(nil)).Elem(), SecurityIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityIpMapInput)(nil)).Elem(), SecurityIpMap{})
	pulumi.RegisterOutputType(SecurityIpOutput{})
	pulumi.RegisterOutputType(SecurityIpArrayOutput{})
	pulumi.RegisterOutputType(SecurityIpMapOutput{})
}
