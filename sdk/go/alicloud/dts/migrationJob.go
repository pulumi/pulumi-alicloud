// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DTS Migration Job resource.
//
// For information about DTS Migration Job and how to use it, see [What is Migration Job](https://www.alibabacloud.com/help/en/doc-detail/208399.html).
//
// > **NOTE:** Available since v1.157.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dts"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rds"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			example, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetZones, err := rds.GetZones(ctx, &rds.GetZonesArgs{
//				Engine:                pulumi.StringRef("MySQL"),
//				EngineVersion:         pulumi.StringRef("8.0"),
//				InstanceChargeType:    pulumi.StringRef("PostPaid"),
//				Category:              pulumi.StringRef("Basic"),
//				DbInstanceStorageType: pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetInstanceClasses, err := rds.GetInstanceClasses(ctx, &rds.GetInstanceClassesArgs{
//				ZoneId:                pulumi.StringRef(exampleGetZones.Zones[0].Id),
//				Engine:                pulumi.StringRef("MySQL"),
//				EngineVersion:         pulumi.StringRef("8.0"),
//				InstanceChargeType:    pulumi.StringRef("PostPaid"),
//				Category:              pulumi.StringRef("Basic"),
//				DbInstanceStorageType: pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "example", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "example", &vpc.SwitchArgs{
//				VpcId:       exampleNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      pulumi.String(exampleGetZones.Zones[0].Id),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecurityGroup, err := ecs.NewSecurityGroup(ctx, "example", &ecs.SecurityGroupArgs{
//				Name:  pulumi.String(name),
//				VpcId: exampleNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleInstance []*rds.Instance
//			for index := 0; index < 2; index++ {
//				key0 := index
//				_ := index
//				__res, err := rds.NewInstance(ctx, fmt.Sprintf("example-%v", key0), &rds.InstanceArgs{
//					Engine:                pulumi.String("MySQL"),
//					EngineVersion:         pulumi.String("8.0"),
//					InstanceType:          pulumi.String(exampleGetInstanceClasses.InstanceClasses[0].InstanceClass),
//					InstanceStorage:       pulumi.String(exampleGetInstanceClasses.InstanceClasses[0].StorageRange.Min),
//					InstanceChargeType:    pulumi.String("Postpaid"),
//					InstanceName:          pulumi.String(invokeFormat.Result),
//					VswitchId:             exampleSwitch.ID(),
//					MonitoringPeriod:      pulumi.Int(60),
//					DbInstanceStorageType: pulumi.String("cloud_essd"),
//					SecurityGroupIds: pulumi.StringArray{
//						exampleSecurityGroup.ID(),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleInstance = append(exampleInstance, __res)
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: "example_name_%d",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFormat2, err := std.Format(ctx, &std.FormatArgs{
//				Input: "example_password_%d",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleRdsAccount []*rds.RdsAccount
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewRdsAccount(ctx, fmt.Sprintf("example-%v", key0), &rds.RdsAccountArgs{
//					DbInstanceId:    exampleInstance[val0].ID(),
//					AccountName:     pulumi.String(invokeFormat1.Result),
//					AccountPassword: pulumi.String(invokeFormat2.Result),
//				})
//				if err != nil {
//					return err
//				}
//				exampleRdsAccount = append(exampleRdsAccount, __res)
//			}
//			invokeFormat3, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleDatabase []*rds.Database
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewDatabase(ctx, fmt.Sprintf("example-%v", key0), &rds.DatabaseArgs{
//					InstanceId: exampleInstance[val0].ID(),
//					Name:       pulumi.String(invokeFormat3.Result),
//				})
//				if err != nil {
//					return err
//				}
//				exampleDatabase = append(exampleDatabase, __res)
//			}
//			var exampleAccountPrivilege []*rds.AccountPrivilege
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewAccountPrivilege(ctx, fmt.Sprintf("example-%v", key0), &rds.AccountPrivilegeArgs{
//					InstanceId:  exampleInstance[val0].ID(),
//					AccountName: exampleRdsAccount[val0].Name,
//					Privilege:   pulumi.String("ReadWrite"),
//					DbNames: pulumi.StringArray{
//						exampleDatabase[val0].Name,
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleAccountPrivilege = append(exampleAccountPrivilege, __res)
//			}
//			exampleMigrationInstance, err := dts.NewMigrationInstance(ctx, "example", &dts.MigrationInstanceArgs{
//				PaymentType:                   pulumi.String("PayAsYouGo"),
//				SourceEndpointEngineName:      pulumi.String("MySQL"),
//				SourceEndpointRegion:          pulumi.String(example.Regions[0].Id),
//				DestinationEndpointEngineName: pulumi.String("MySQL"),
//				DestinationEndpointRegion:     pulumi.String(example.Regions[0].Id),
//				InstanceClass:                 pulumi.String("small"),
//				SyncArchitecture:              pulumi.String("oneway"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dts.NewMigrationJob(ctx, "example", &dts.MigrationJobArgs{
//				DtsInstanceId:                   exampleMigrationInstance.ID(),
//				DtsJobName:                      pulumi.String(name),
//				SourceEndpointInstanceType:      pulumi.String("RDS"),
//				SourceEndpointInstanceId:        exampleAccountPrivilege[0].InstanceId,
//				SourceEndpointEngineName:        pulumi.String("MySQL"),
//				SourceEndpointRegion:            pulumi.String(example.Regions[0].Id),
//				SourceEndpointUserName:          exampleRdsAccount[0].AccountName,
//				SourceEndpointPassword:          exampleRdsAccount[0].AccountPassword,
//				DestinationEndpointInstanceType: pulumi.String("RDS"),
//				DestinationEndpointInstanceId:   exampleAccountPrivilege[1].InstanceId,
//				DestinationEndpointEngineName:   pulumi.String("MySQL"),
//				DestinationEndpointRegion:       pulumi.String(example.Regions[0].Id),
//				DestinationEndpointUserName:     exampleRdsAccount[1].AccountName,
//				DestinationEndpointPassword:     exampleRdsAccount[1].AccountPassword,
//				DbList: pulumi.All(exampleDatabase[0].Name, exampleDatabase[1].Name).ApplyT(func(_args []interface{}) (string, error) {
//					exampleDatabaseName := _args[0].(string)
//					exampleDatabaseName1 := _args[1].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]map[string]interface{}{
//						exampleDatabaseName: map[string]interface{}{
//							"name": exampleDatabaseName1,
//							"all":  true,
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//				StructureInitialization: pulumi.Bool(true),
//				DataInitialization:      pulumi.Bool(true),
//				DataSynchronization:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Notice
//
// 1. The expiration time cannot be changed after the work of the annual and monthly subscription suspended;
// 2. After the pay-as-you-go type job suspended, your job configuration fee will still be charged;
// 3. If the task suspended for more than 6 hours, the task will not start successfully.
// 4. Suspending the task will only stop writing to the target library, but will still continue to obtain the incremental log of the source, so that the task can be quickly resumed after the suspension is canceled. Therefore, some resources of the source library, such as bandwidth resources, will continue to be occupied during the period.
// 5. Charges will continue during the task suspension period. If you need to stop charging, please release the instance
// 6. When a DTS instance suspended for more than 7 days, the instance cannot be resumed, and the status will change from suspended to failed.
//
// ## Import
//
// DTS Migration Job can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dts/migrationJob:MigrationJob example <id>
// ```
type MigrationJob struct {
	pulumi.CustomResourceState

	// Start time in Unix timestamp format.
	Checkpoint pulumi.StringOutput `pulumi:"checkpoint"`
	// Whether to execute DTS supports schema migration.
	DataInitialization pulumi.BoolOutput `pulumi:"dataInitialization"`
	// Whether to perform incremental data migration.
	DataSynchronization pulumi.BoolOutput `pulumi:"dataSynchronization"`
	// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
	DbList pulumi.StringOutput `pulumi:"dbList"`
	// The name of migrate the database.
	DestinationEndpointDatabaseName pulumi.StringPtrOutput `pulumi:"destinationEndpointDatabaseName"`
	// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
	DestinationEndpointEngineName pulumi.StringOutput `pulumi:"destinationEndpointEngineName"`
	// The ID of destination instance.
	DestinationEndpointInstanceId pulumi.StringPtrOutput `pulumi:"destinationEndpointInstanceId"`
	// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	DestinationEndpointInstanceType pulumi.StringOutput `pulumi:"destinationEndpointInstanceType"`
	// The ip of source endpoint.
	DestinationEndpointIp pulumi.StringPtrOutput `pulumi:"destinationEndpointIp"`
	// The SID of Oracle database.
	DestinationEndpointOracleSid pulumi.StringPtrOutput `pulumi:"destinationEndpointOracleSid"`
	// The password of database account.
	DestinationEndpointPassword pulumi.StringPtrOutput `pulumi:"destinationEndpointPassword"`
	// The port of source endpoint.
	DestinationEndpointPort pulumi.StringPtrOutput `pulumi:"destinationEndpointPort"`
	// The region of destination instance.
	DestinationEndpointRegion pulumi.StringPtrOutput `pulumi:"destinationEndpointRegion"`
	// The username of database account.
	DestinationEndpointUserName pulumi.StringPtrOutput `pulumi:"destinationEndpointUserName"`
	// The Migration instance ID. The ID of `dts.MigrationInstance`.
	DtsInstanceId pulumi.StringOutput `pulumi:"dtsInstanceId"`
	// The name of migration job.
	DtsJobName pulumi.StringOutput `pulumi:"dtsJobName"`
	// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
	InstanceClass pulumi.StringOutput `pulumi:"instanceClass"`
	// The name of migrate the database.
	SourceEndpointDatabaseName pulumi.StringPtrOutput `pulumi:"sourceEndpointDatabaseName"`
	// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
	SourceEndpointEngineName pulumi.StringOutput `pulumi:"sourceEndpointEngineName"`
	// The ID of source instance.
	SourceEndpointInstanceId pulumi.StringPtrOutput `pulumi:"sourceEndpointInstanceId"`
	// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	SourceEndpointInstanceType pulumi.StringOutput `pulumi:"sourceEndpointInstanceType"`
	// The ip of source endpoint.
	SourceEndpointIp pulumi.StringPtrOutput `pulumi:"sourceEndpointIp"`
	// The SID of Oracle database.
	SourceEndpointOracleSid pulumi.StringPtrOutput `pulumi:"sourceEndpointOracleSid"`
	// The Alibaba Cloud account ID to which the source instance belongs.
	SourceEndpointOwnerId pulumi.StringPtrOutput `pulumi:"sourceEndpointOwnerId"`
	// The password of database account.
	SourceEndpointPassword pulumi.StringPtrOutput `pulumi:"sourceEndpointPassword"`
	// The port of source endpoint.
	SourceEndpointPort pulumi.StringPtrOutput `pulumi:"sourceEndpointPort"`
	// The region of source instance.
	SourceEndpointRegion pulumi.StringPtrOutput `pulumi:"sourceEndpointRegion"`
	// The name of the role configured for the cloud account to which the source instance belongs.
	SourceEndpointRole pulumi.StringPtrOutput `pulumi:"sourceEndpointRole"`
	// The username of database account.
	SourceEndpointUserName pulumi.StringPtrOutput `pulumi:"sourceEndpointUserName"`
	// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Whether to perform a database table structure to migrate.
	StructureInitialization pulumi.BoolOutput `pulumi:"structureInitialization"`
}

// NewMigrationJob registers a new resource with the given unique name, arguments, and options.
func NewMigrationJob(ctx *pulumi.Context,
	name string, args *MigrationJobArgs, opts ...pulumi.ResourceOption) (*MigrationJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataInitialization == nil {
		return nil, errors.New("invalid value for required argument 'DataInitialization'")
	}
	if args.DataSynchronization == nil {
		return nil, errors.New("invalid value for required argument 'DataSynchronization'")
	}
	if args.DbList == nil {
		return nil, errors.New("invalid value for required argument 'DbList'")
	}
	if args.DestinationEndpointEngineName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationEndpointEngineName'")
	}
	if args.DestinationEndpointInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'DestinationEndpointInstanceType'")
	}
	if args.DtsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DtsInstanceId'")
	}
	if args.SourceEndpointEngineName == nil {
		return nil, errors.New("invalid value for required argument 'SourceEndpointEngineName'")
	}
	if args.SourceEndpointInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceEndpointInstanceType'")
	}
	if args.StructureInitialization == nil {
		return nil, errors.New("invalid value for required argument 'StructureInitialization'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MigrationJob
	err := ctx.RegisterResource("alicloud:dts/migrationJob:MigrationJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigrationJob gets an existing MigrationJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigrationJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrationJobState, opts ...pulumi.ResourceOption) (*MigrationJob, error) {
	var resource MigrationJob
	err := ctx.ReadResource("alicloud:dts/migrationJob:MigrationJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigrationJob resources.
type migrationJobState struct {
	// Start time in Unix timestamp format.
	Checkpoint *string `pulumi:"checkpoint"`
	// Whether to execute DTS supports schema migration.
	DataInitialization *bool `pulumi:"dataInitialization"`
	// Whether to perform incremental data migration.
	DataSynchronization *bool `pulumi:"dataSynchronization"`
	// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
	DbList *string `pulumi:"dbList"`
	// The name of migrate the database.
	DestinationEndpointDatabaseName *string `pulumi:"destinationEndpointDatabaseName"`
	// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
	DestinationEndpointEngineName *string `pulumi:"destinationEndpointEngineName"`
	// The ID of destination instance.
	DestinationEndpointInstanceId *string `pulumi:"destinationEndpointInstanceId"`
	// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	DestinationEndpointInstanceType *string `pulumi:"destinationEndpointInstanceType"`
	// The ip of source endpoint.
	DestinationEndpointIp *string `pulumi:"destinationEndpointIp"`
	// The SID of Oracle database.
	DestinationEndpointOracleSid *string `pulumi:"destinationEndpointOracleSid"`
	// The password of database account.
	DestinationEndpointPassword *string `pulumi:"destinationEndpointPassword"`
	// The port of source endpoint.
	DestinationEndpointPort *string `pulumi:"destinationEndpointPort"`
	// The region of destination instance.
	DestinationEndpointRegion *string `pulumi:"destinationEndpointRegion"`
	// The username of database account.
	DestinationEndpointUserName *string `pulumi:"destinationEndpointUserName"`
	// The Migration instance ID. The ID of `dts.MigrationInstance`.
	DtsInstanceId *string `pulumi:"dtsInstanceId"`
	// The name of migration job.
	DtsJobName *string `pulumi:"dtsJobName"`
	// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
	InstanceClass *string `pulumi:"instanceClass"`
	// The name of migrate the database.
	SourceEndpointDatabaseName *string `pulumi:"sourceEndpointDatabaseName"`
	// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
	SourceEndpointEngineName *string `pulumi:"sourceEndpointEngineName"`
	// The ID of source instance.
	SourceEndpointInstanceId *string `pulumi:"sourceEndpointInstanceId"`
	// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	SourceEndpointInstanceType *string `pulumi:"sourceEndpointInstanceType"`
	// The ip of source endpoint.
	SourceEndpointIp *string `pulumi:"sourceEndpointIp"`
	// The SID of Oracle database.
	SourceEndpointOracleSid *string `pulumi:"sourceEndpointOracleSid"`
	// The Alibaba Cloud account ID to which the source instance belongs.
	SourceEndpointOwnerId *string `pulumi:"sourceEndpointOwnerId"`
	// The password of database account.
	SourceEndpointPassword *string `pulumi:"sourceEndpointPassword"`
	// The port of source endpoint.
	SourceEndpointPort *string `pulumi:"sourceEndpointPort"`
	// The region of source instance.
	SourceEndpointRegion *string `pulumi:"sourceEndpointRegion"`
	// The name of the role configured for the cloud account to which the source instance belongs.
	SourceEndpointRole *string `pulumi:"sourceEndpointRole"`
	// The username of database account.
	SourceEndpointUserName *string `pulumi:"sourceEndpointUserName"`
	// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
	Status *string `pulumi:"status"`
	// Whether to perform a database table structure to migrate.
	StructureInitialization *bool `pulumi:"structureInitialization"`
}

type MigrationJobState struct {
	// Start time in Unix timestamp format.
	Checkpoint pulumi.StringPtrInput
	// Whether to execute DTS supports schema migration.
	DataInitialization pulumi.BoolPtrInput
	// Whether to perform incremental data migration.
	DataSynchronization pulumi.BoolPtrInput
	// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
	DbList pulumi.StringPtrInput
	// The name of migrate the database.
	DestinationEndpointDatabaseName pulumi.StringPtrInput
	// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
	DestinationEndpointEngineName pulumi.StringPtrInput
	// The ID of destination instance.
	DestinationEndpointInstanceId pulumi.StringPtrInput
	// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	DestinationEndpointInstanceType pulumi.StringPtrInput
	// The ip of source endpoint.
	DestinationEndpointIp pulumi.StringPtrInput
	// The SID of Oracle database.
	DestinationEndpointOracleSid pulumi.StringPtrInput
	// The password of database account.
	DestinationEndpointPassword pulumi.StringPtrInput
	// The port of source endpoint.
	DestinationEndpointPort pulumi.StringPtrInput
	// The region of destination instance.
	DestinationEndpointRegion pulumi.StringPtrInput
	// The username of database account.
	DestinationEndpointUserName pulumi.StringPtrInput
	// The Migration instance ID. The ID of `dts.MigrationInstance`.
	DtsInstanceId pulumi.StringPtrInput
	// The name of migration job.
	DtsJobName pulumi.StringPtrInput
	// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
	InstanceClass pulumi.StringPtrInput
	// The name of migrate the database.
	SourceEndpointDatabaseName pulumi.StringPtrInput
	// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
	SourceEndpointEngineName pulumi.StringPtrInput
	// The ID of source instance.
	SourceEndpointInstanceId pulumi.StringPtrInput
	// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	SourceEndpointInstanceType pulumi.StringPtrInput
	// The ip of source endpoint.
	SourceEndpointIp pulumi.StringPtrInput
	// The SID of Oracle database.
	SourceEndpointOracleSid pulumi.StringPtrInput
	// The Alibaba Cloud account ID to which the source instance belongs.
	SourceEndpointOwnerId pulumi.StringPtrInput
	// The password of database account.
	SourceEndpointPassword pulumi.StringPtrInput
	// The port of source endpoint.
	SourceEndpointPort pulumi.StringPtrInput
	// The region of source instance.
	SourceEndpointRegion pulumi.StringPtrInput
	// The name of the role configured for the cloud account to which the source instance belongs.
	SourceEndpointRole pulumi.StringPtrInput
	// The username of database account.
	SourceEndpointUserName pulumi.StringPtrInput
	// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
	Status pulumi.StringPtrInput
	// Whether to perform a database table structure to migrate.
	StructureInitialization pulumi.BoolPtrInput
}

func (MigrationJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationJobState)(nil)).Elem()
}

type migrationJobArgs struct {
	// Start time in Unix timestamp format.
	Checkpoint *string `pulumi:"checkpoint"`
	// Whether to execute DTS supports schema migration.
	DataInitialization bool `pulumi:"dataInitialization"`
	// Whether to perform incremental data migration.
	DataSynchronization bool `pulumi:"dataSynchronization"`
	// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
	DbList string `pulumi:"dbList"`
	// The name of migrate the database.
	DestinationEndpointDatabaseName *string `pulumi:"destinationEndpointDatabaseName"`
	// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
	DestinationEndpointEngineName string `pulumi:"destinationEndpointEngineName"`
	// The ID of destination instance.
	DestinationEndpointInstanceId *string `pulumi:"destinationEndpointInstanceId"`
	// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	DestinationEndpointInstanceType string `pulumi:"destinationEndpointInstanceType"`
	// The ip of source endpoint.
	DestinationEndpointIp *string `pulumi:"destinationEndpointIp"`
	// The SID of Oracle database.
	DestinationEndpointOracleSid *string `pulumi:"destinationEndpointOracleSid"`
	// The password of database account.
	DestinationEndpointPassword *string `pulumi:"destinationEndpointPassword"`
	// The port of source endpoint.
	DestinationEndpointPort *string `pulumi:"destinationEndpointPort"`
	// The region of destination instance.
	DestinationEndpointRegion *string `pulumi:"destinationEndpointRegion"`
	// The username of database account.
	DestinationEndpointUserName *string `pulumi:"destinationEndpointUserName"`
	// The Migration instance ID. The ID of `dts.MigrationInstance`.
	DtsInstanceId string `pulumi:"dtsInstanceId"`
	// The name of migration job.
	DtsJobName *string `pulumi:"dtsJobName"`
	// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
	InstanceClass *string `pulumi:"instanceClass"`
	// The name of migrate the database.
	SourceEndpointDatabaseName *string `pulumi:"sourceEndpointDatabaseName"`
	// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
	SourceEndpointEngineName string `pulumi:"sourceEndpointEngineName"`
	// The ID of source instance.
	SourceEndpointInstanceId *string `pulumi:"sourceEndpointInstanceId"`
	// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	SourceEndpointInstanceType string `pulumi:"sourceEndpointInstanceType"`
	// The ip of source endpoint.
	SourceEndpointIp *string `pulumi:"sourceEndpointIp"`
	// The SID of Oracle database.
	SourceEndpointOracleSid *string `pulumi:"sourceEndpointOracleSid"`
	// The Alibaba Cloud account ID to which the source instance belongs.
	SourceEndpointOwnerId *string `pulumi:"sourceEndpointOwnerId"`
	// The password of database account.
	SourceEndpointPassword *string `pulumi:"sourceEndpointPassword"`
	// The port of source endpoint.
	SourceEndpointPort *string `pulumi:"sourceEndpointPort"`
	// The region of source instance.
	SourceEndpointRegion *string `pulumi:"sourceEndpointRegion"`
	// The name of the role configured for the cloud account to which the source instance belongs.
	SourceEndpointRole *string `pulumi:"sourceEndpointRole"`
	// The username of database account.
	SourceEndpointUserName *string `pulumi:"sourceEndpointUserName"`
	// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
	Status *string `pulumi:"status"`
	// Whether to perform a database table structure to migrate.
	StructureInitialization bool `pulumi:"structureInitialization"`
}

// The set of arguments for constructing a MigrationJob resource.
type MigrationJobArgs struct {
	// Start time in Unix timestamp format.
	Checkpoint pulumi.StringPtrInput
	// Whether to execute DTS supports schema migration.
	DataInitialization pulumi.BoolInput
	// Whether to perform incremental data migration.
	DataSynchronization pulumi.BoolInput
	// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
	DbList pulumi.StringInput
	// The name of migrate the database.
	DestinationEndpointDatabaseName pulumi.StringPtrInput
	// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
	DestinationEndpointEngineName pulumi.StringInput
	// The ID of destination instance.
	DestinationEndpointInstanceId pulumi.StringPtrInput
	// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	DestinationEndpointInstanceType pulumi.StringInput
	// The ip of source endpoint.
	DestinationEndpointIp pulumi.StringPtrInput
	// The SID of Oracle database.
	DestinationEndpointOracleSid pulumi.StringPtrInput
	// The password of database account.
	DestinationEndpointPassword pulumi.StringPtrInput
	// The port of source endpoint.
	DestinationEndpointPort pulumi.StringPtrInput
	// The region of destination instance.
	DestinationEndpointRegion pulumi.StringPtrInput
	// The username of database account.
	DestinationEndpointUserName pulumi.StringPtrInput
	// The Migration instance ID. The ID of `dts.MigrationInstance`.
	DtsInstanceId pulumi.StringInput
	// The name of migration job.
	DtsJobName pulumi.StringPtrInput
	// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
	InstanceClass pulumi.StringPtrInput
	// The name of migrate the database.
	SourceEndpointDatabaseName pulumi.StringPtrInput
	// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
	SourceEndpointEngineName pulumi.StringInput
	// The ID of source instance.
	SourceEndpointInstanceId pulumi.StringPtrInput
	// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
	SourceEndpointInstanceType pulumi.StringInput
	// The ip of source endpoint.
	SourceEndpointIp pulumi.StringPtrInput
	// The SID of Oracle database.
	SourceEndpointOracleSid pulumi.StringPtrInput
	// The Alibaba Cloud account ID to which the source instance belongs.
	SourceEndpointOwnerId pulumi.StringPtrInput
	// The password of database account.
	SourceEndpointPassword pulumi.StringPtrInput
	// The port of source endpoint.
	SourceEndpointPort pulumi.StringPtrInput
	// The region of source instance.
	SourceEndpointRegion pulumi.StringPtrInput
	// The name of the role configured for the cloud account to which the source instance belongs.
	SourceEndpointRole pulumi.StringPtrInput
	// The username of database account.
	SourceEndpointUserName pulumi.StringPtrInput
	// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
	Status pulumi.StringPtrInput
	// Whether to perform a database table structure to migrate.
	StructureInitialization pulumi.BoolInput
}

func (MigrationJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationJobArgs)(nil)).Elem()
}

type MigrationJobInput interface {
	pulumi.Input

	ToMigrationJobOutput() MigrationJobOutput
	ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput
}

func (*MigrationJob) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationJob)(nil)).Elem()
}

func (i *MigrationJob) ToMigrationJobOutput() MigrationJobOutput {
	return i.ToMigrationJobOutputWithContext(context.Background())
}

func (i *MigrationJob) ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobOutput)
}

// MigrationJobArrayInput is an input type that accepts MigrationJobArray and MigrationJobArrayOutput values.
// You can construct a concrete instance of `MigrationJobArrayInput` via:
//
//	MigrationJobArray{ MigrationJobArgs{...} }
type MigrationJobArrayInput interface {
	pulumi.Input

	ToMigrationJobArrayOutput() MigrationJobArrayOutput
	ToMigrationJobArrayOutputWithContext(context.Context) MigrationJobArrayOutput
}

type MigrationJobArray []MigrationJobInput

func (MigrationJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrationJob)(nil)).Elem()
}

func (i MigrationJobArray) ToMigrationJobArrayOutput() MigrationJobArrayOutput {
	return i.ToMigrationJobArrayOutputWithContext(context.Background())
}

func (i MigrationJobArray) ToMigrationJobArrayOutputWithContext(ctx context.Context) MigrationJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobArrayOutput)
}

// MigrationJobMapInput is an input type that accepts MigrationJobMap and MigrationJobMapOutput values.
// You can construct a concrete instance of `MigrationJobMapInput` via:
//
//	MigrationJobMap{ "key": MigrationJobArgs{...} }
type MigrationJobMapInput interface {
	pulumi.Input

	ToMigrationJobMapOutput() MigrationJobMapOutput
	ToMigrationJobMapOutputWithContext(context.Context) MigrationJobMapOutput
}

type MigrationJobMap map[string]MigrationJobInput

func (MigrationJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrationJob)(nil)).Elem()
}

func (i MigrationJobMap) ToMigrationJobMapOutput() MigrationJobMapOutput {
	return i.ToMigrationJobMapOutputWithContext(context.Background())
}

func (i MigrationJobMap) ToMigrationJobMapOutputWithContext(ctx context.Context) MigrationJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationJobMapOutput)
}

type MigrationJobOutput struct{ *pulumi.OutputState }

func (MigrationJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationJob)(nil)).Elem()
}

func (o MigrationJobOutput) ToMigrationJobOutput() MigrationJobOutput {
	return o
}

func (o MigrationJobOutput) ToMigrationJobOutputWithContext(ctx context.Context) MigrationJobOutput {
	return o
}

// Start time in Unix timestamp format.
func (o MigrationJobOutput) Checkpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Checkpoint }).(pulumi.StringOutput)
}

// Whether to execute DTS supports schema migration.
func (o MigrationJobOutput) DataInitialization() pulumi.BoolOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.BoolOutput { return v.DataInitialization }).(pulumi.BoolOutput)
}

// Whether to perform incremental data migration.
func (o MigrationJobOutput) DataSynchronization() pulumi.BoolOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.BoolOutput { return v.DataSynchronization }).(pulumi.BoolOutput)
}

// Migration object, in the format of JSON strings. For detailed definition instructions, please refer to [the description of migration, migration or subscription objects](https://help.aliyun.com/document_detail/209545.html).
func (o MigrationJobOutput) DbList() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.DbList }).(pulumi.StringOutput)
}

// The name of migrate the database.
func (o MigrationJobOutput) DestinationEndpointDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointDatabaseName }).(pulumi.StringPtrOutput)
}

// The type of destination database. Valid values: `ADS`, `ADB30`, `AS400`, `DATAHUB`, `DB2`, `GREENPLUM`, `KAFKA`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `PostgreSQL`.
func (o MigrationJobOutput) DestinationEndpointEngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.DestinationEndpointEngineName }).(pulumi.StringOutput)
}

// The ID of destination instance.
func (o MigrationJobOutput) DestinationEndpointInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointInstanceId }).(pulumi.StringPtrOutput)
}

// The type of destination instance. Valid values: `ADS`, `CEN`, `DATAHUB`, `DG`, `ECS`, `EXPRESS`, `GREENPLUM`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
func (o MigrationJobOutput) DestinationEndpointInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.DestinationEndpointInstanceType }).(pulumi.StringOutput)
}

// The ip of source endpoint.
func (o MigrationJobOutput) DestinationEndpointIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointIp }).(pulumi.StringPtrOutput)
}

// The SID of Oracle database.
func (o MigrationJobOutput) DestinationEndpointOracleSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointOracleSid }).(pulumi.StringPtrOutput)
}

// The password of database account.
func (o MigrationJobOutput) DestinationEndpointPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointPassword }).(pulumi.StringPtrOutput)
}

// The port of source endpoint.
func (o MigrationJobOutput) DestinationEndpointPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointPort }).(pulumi.StringPtrOutput)
}

// The region of destination instance.
func (o MigrationJobOutput) DestinationEndpointRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointRegion }).(pulumi.StringPtrOutput)
}

// The username of database account.
func (o MigrationJobOutput) DestinationEndpointUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.DestinationEndpointUserName }).(pulumi.StringPtrOutput)
}

// The Migration instance ID. The ID of `dts.MigrationInstance`.
func (o MigrationJobOutput) DtsInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.DtsInstanceId }).(pulumi.StringOutput)
}

// The name of migration job.
func (o MigrationJobOutput) DtsJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.DtsJobName }).(pulumi.StringOutput)
}

// The instance class. Valid values: `large`, `medium`, `micro`, `small`, `xlarge`, `xxlarge`.
func (o MigrationJobOutput) InstanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.InstanceClass }).(pulumi.StringOutput)
}

// The name of migrate the database.
func (o MigrationJobOutput) SourceEndpointDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointDatabaseName }).(pulumi.StringPtrOutput)
}

// The type of source database. Valid values: `AS400`, `DB2`, `DMSPOLARDB`, `HBASE`, `MONGODB`, `MSSQL`, `MySQL`, `ORACLE`, `PolarDB`, `POLARDBX20`, `POLARDB_O`, `POSTGRESQL`, `TERADATA`.
func (o MigrationJobOutput) SourceEndpointEngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.SourceEndpointEngineName }).(pulumi.StringOutput)
}

// The ID of source instance.
func (o MigrationJobOutput) SourceEndpointInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointInstanceId }).(pulumi.StringPtrOutput)
}

// The type of source instance. Valid values: `CEN`, `DG`, `DISTRIBUTED_DMSLOGICDB`, `ECS`, `EXPRESS`, `MONGODB`, `OTHER`, `PolarDB`, `POLARDBX20`, `RDS`.
func (o MigrationJobOutput) SourceEndpointInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.SourceEndpointInstanceType }).(pulumi.StringOutput)
}

// The ip of source endpoint.
func (o MigrationJobOutput) SourceEndpointIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointIp }).(pulumi.StringPtrOutput)
}

// The SID of Oracle database.
func (o MigrationJobOutput) SourceEndpointOracleSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointOracleSid }).(pulumi.StringPtrOutput)
}

// The Alibaba Cloud account ID to which the source instance belongs.
func (o MigrationJobOutput) SourceEndpointOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointOwnerId }).(pulumi.StringPtrOutput)
}

// The password of database account.
func (o MigrationJobOutput) SourceEndpointPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointPassword }).(pulumi.StringPtrOutput)
}

// The port of source endpoint.
func (o MigrationJobOutput) SourceEndpointPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointPort }).(pulumi.StringPtrOutput)
}

// The region of source instance.
func (o MigrationJobOutput) SourceEndpointRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointRegion }).(pulumi.StringPtrOutput)
}

// The name of the role configured for the cloud account to which the source instance belongs.
func (o MigrationJobOutput) SourceEndpointRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointRole }).(pulumi.StringPtrOutput)
}

// The username of database account.
func (o MigrationJobOutput) SourceEndpointUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringPtrOutput { return v.SourceEndpointUserName }).(pulumi.StringPtrOutput)
}

// The status of the resource. Valid values: `Migrating`, `Suspending`. You can suspend the task by specifying `Suspending` and start the task by specifying `Migrating`.
func (o MigrationJobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Whether to perform a database table structure to migrate.
func (o MigrationJobOutput) StructureInitialization() pulumi.BoolOutput {
	return o.ApplyT(func(v *MigrationJob) pulumi.BoolOutput { return v.StructureInitialization }).(pulumi.BoolOutput)
}

type MigrationJobArrayOutput struct{ *pulumi.OutputState }

func (MigrationJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrationJob)(nil)).Elem()
}

func (o MigrationJobArrayOutput) ToMigrationJobArrayOutput() MigrationJobArrayOutput {
	return o
}

func (o MigrationJobArrayOutput) ToMigrationJobArrayOutputWithContext(ctx context.Context) MigrationJobArrayOutput {
	return o
}

func (o MigrationJobArrayOutput) Index(i pulumi.IntInput) MigrationJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MigrationJob {
		return vs[0].([]*MigrationJob)[vs[1].(int)]
	}).(MigrationJobOutput)
}

type MigrationJobMapOutput struct{ *pulumi.OutputState }

func (MigrationJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrationJob)(nil)).Elem()
}

func (o MigrationJobMapOutput) ToMigrationJobMapOutput() MigrationJobMapOutput {
	return o
}

func (o MigrationJobMapOutput) ToMigrationJobMapOutputWithContext(ctx context.Context) MigrationJobMapOutput {
	return o
}

func (o MigrationJobMapOutput) MapIndex(k pulumi.StringInput) MigrationJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MigrationJob {
		return vs[0].(map[string]*MigrationJob)[vs[1].(string)]
	}).(MigrationJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobInput)(nil)).Elem(), &MigrationJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobArrayInput)(nil)).Elem(), MigrationJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationJobMapInput)(nil)).Elem(), MigrationJobMap{})
	pulumi.RegisterOutputType(MigrationJobOutput{})
	pulumi.RegisterOutputType(MigrationJobArrayOutput{})
	pulumi.RegisterOutputType(MigrationJobMapOutput{})
}
