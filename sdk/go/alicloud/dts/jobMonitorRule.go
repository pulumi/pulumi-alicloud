// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DTS Job Monitor Rule resource.
//
// For information about DTS Job Monitor Rule and how to use it, see [What is Job Monitor Rule](https://www.aliyun.com/product/dts).
//
// > **NOTE:** Available in v1.134.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dts"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dts.NewJobMonitorRule(ctx, "example", &dts.JobMonitorRuleArgs{
// 			DtsJobId: pulumi.String("example_value"),
// 			Type:     pulumi.String("delay"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DTS Job Monitor Rule can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:dts/jobMonitorRule:JobMonitorRule example <dts_job_id>
// ```
type JobMonitorRule struct {
	pulumi.CustomResourceState

	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringOutput `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringOutput `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringOutput `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringOutput `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJobMonitorRule registers a new resource with the given unique name, arguments, and options.
func NewJobMonitorRule(ctx *pulumi.Context,
	name string, args *JobMonitorRuleArgs, opts ...pulumi.ResourceOption) (*JobMonitorRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DtsJobId == nil {
		return nil, errors.New("invalid value for required argument 'DtsJobId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource JobMonitorRule
	err := ctx.RegisterResource("alicloud:dts/jobMonitorRule:JobMonitorRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobMonitorRule gets an existing JobMonitorRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobMonitorRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobMonitorRuleState, opts ...pulumi.ResourceOption) (*JobMonitorRule, error) {
	var resource JobMonitorRule
	err := ctx.ReadResource("alicloud:dts/jobMonitorRule:JobMonitorRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobMonitorRule resources.
type jobMonitorRuleState struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime *string `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId *string `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone *string `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State *string `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type *string `pulumi:"type"`
}

type JobMonitorRuleState struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringPtrInput
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringPtrInput
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringPtrInput
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringPtrInput
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringPtrInput
}

func (JobMonitorRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobMonitorRuleState)(nil)).Elem()
}

type jobMonitorRuleArgs struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime *string `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId string `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone *string `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State *string `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a JobMonitorRule resource.
type JobMonitorRuleArgs struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringPtrInput
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringInput
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringPtrInput
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringPtrInput
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringInput
}

func (JobMonitorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobMonitorRuleArgs)(nil)).Elem()
}

type JobMonitorRuleInput interface {
	pulumi.Input

	ToJobMonitorRuleOutput() JobMonitorRuleOutput
	ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput
}

func (*JobMonitorRule) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMonitorRule)(nil)).Elem()
}

func (i *JobMonitorRule) ToJobMonitorRuleOutput() JobMonitorRuleOutput {
	return i.ToJobMonitorRuleOutputWithContext(context.Background())
}

func (i *JobMonitorRule) ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleOutput)
}

// JobMonitorRuleArrayInput is an input type that accepts JobMonitorRuleArray and JobMonitorRuleArrayOutput values.
// You can construct a concrete instance of `JobMonitorRuleArrayInput` via:
//
//          JobMonitorRuleArray{ JobMonitorRuleArgs{...} }
type JobMonitorRuleArrayInput interface {
	pulumi.Input

	ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput
	ToJobMonitorRuleArrayOutputWithContext(context.Context) JobMonitorRuleArrayOutput
}

type JobMonitorRuleArray []JobMonitorRuleInput

func (JobMonitorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobMonitorRule)(nil)).Elem()
}

func (i JobMonitorRuleArray) ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput {
	return i.ToJobMonitorRuleArrayOutputWithContext(context.Background())
}

func (i JobMonitorRuleArray) ToJobMonitorRuleArrayOutputWithContext(ctx context.Context) JobMonitorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleArrayOutput)
}

// JobMonitorRuleMapInput is an input type that accepts JobMonitorRuleMap and JobMonitorRuleMapOutput values.
// You can construct a concrete instance of `JobMonitorRuleMapInput` via:
//
//          JobMonitorRuleMap{ "key": JobMonitorRuleArgs{...} }
type JobMonitorRuleMapInput interface {
	pulumi.Input

	ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput
	ToJobMonitorRuleMapOutputWithContext(context.Context) JobMonitorRuleMapOutput
}

type JobMonitorRuleMap map[string]JobMonitorRuleInput

func (JobMonitorRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobMonitorRule)(nil)).Elem()
}

func (i JobMonitorRuleMap) ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput {
	return i.ToJobMonitorRuleMapOutputWithContext(context.Background())
}

func (i JobMonitorRuleMap) ToJobMonitorRuleMapOutputWithContext(ctx context.Context) JobMonitorRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleMapOutput)
}

type JobMonitorRuleOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleOutput) ToJobMonitorRuleOutput() JobMonitorRuleOutput {
	return o
}

func (o JobMonitorRuleOutput) ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput {
	return o
}

type JobMonitorRuleArrayOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleArrayOutput) ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput {
	return o
}

func (o JobMonitorRuleArrayOutput) ToJobMonitorRuleArrayOutputWithContext(ctx context.Context) JobMonitorRuleArrayOutput {
	return o
}

func (o JobMonitorRuleArrayOutput) Index(i pulumi.IntInput) JobMonitorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobMonitorRule {
		return vs[0].([]*JobMonitorRule)[vs[1].(int)]
	}).(JobMonitorRuleOutput)
}

type JobMonitorRuleMapOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleMapOutput) ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput {
	return o
}

func (o JobMonitorRuleMapOutput) ToJobMonitorRuleMapOutputWithContext(ctx context.Context) JobMonitorRuleMapOutput {
	return o
}

func (o JobMonitorRuleMapOutput) MapIndex(k pulumi.StringInput) JobMonitorRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobMonitorRule {
		return vs[0].(map[string]*JobMonitorRule)[vs[1].(string)]
	}).(JobMonitorRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleInput)(nil)).Elem(), &JobMonitorRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleArrayInput)(nil)).Elem(), JobMonitorRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleMapInput)(nil)).Elem(), JobMonitorRuleMap{})
	pulumi.RegisterOutputType(JobMonitorRuleOutput{})
	pulumi.RegisterOutputType(JobMonitorRuleArrayOutput{})
	pulumi.RegisterOutputType(JobMonitorRuleMapOutput{})
}
