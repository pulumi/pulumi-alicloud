// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DTS Job Monitor Rule resource.
//
// For information about DTS Job Monitor Rule and how to use it, see [What is Job Monitor Rule](https://www.alibabacloud.com/help/en/dts/developer-reference/api-createjobmonitorrule).
//
// > **NOTE:** Available since v1.134.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dts"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rds"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			example, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetZones, err := rds.GetZones(ctx, &rds.GetZonesArgs{
//				Engine:                pulumi.StringRef("MySQL"),
//				EngineVersion:         pulumi.StringRef("8.0"),
//				InstanceChargeType:    pulumi.StringRef("PostPaid"),
//				Category:              pulumi.StringRef("Basic"),
//				DbInstanceStorageType: pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetInstanceClasses, err := rds.GetInstanceClasses(ctx, &rds.GetInstanceClassesArgs{
//				ZoneId:                pulumi.StringRef(exampleGetZones.Zones[0].Id),
//				Engine:                pulumi.StringRef("MySQL"),
//				EngineVersion:         pulumi.StringRef("8.0"),
//				InstanceChargeType:    pulumi.StringRef("PostPaid"),
//				Category:              pulumi.StringRef("Basic"),
//				DbInstanceStorageType: pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "example", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "example", &vpc.SwitchArgs{
//				VpcId:       exampleNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      pulumi.String(exampleGetZones.Zones[0].Id),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecurityGroup, err := ecs.NewSecurityGroup(ctx, "example", &ecs.SecurityGroupArgs{
//				Name:  pulumi.String(name),
//				VpcId: exampleNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleInstance []*rds.Instance
//			for index := 0; index < 2; index++ {
//				key0 := index
//				_ := index
//				__res, err := rds.NewInstance(ctx, fmt.Sprintf("example-%v", key0), &rds.InstanceArgs{
//					Engine:                pulumi.String("MySQL"),
//					EngineVersion:         pulumi.String("8.0"),
//					InstanceType:          pulumi.String(exampleGetInstanceClasses.InstanceClasses[0].InstanceClass),
//					InstanceStorage:       pulumi.String(exampleGetInstanceClasses.InstanceClasses[0].StorageRange.Min),
//					InstanceChargeType:    pulumi.String("Postpaid"),
//					InstanceName:          pulumi.String(invokeFormat.Result),
//					VswitchId:             exampleSwitch.ID(),
//					MonitoringPeriod:      pulumi.Int(60),
//					DbInstanceStorageType: pulumi.String("cloud_essd"),
//					SecurityGroupIds: pulumi.StringArray{
//						exampleSecurityGroup.ID(),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleInstance = append(exampleInstance, __res)
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: "example_name_%d",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFormat2, err := std.Format(ctx, &std.FormatArgs{
//				Input: "example_password_%d",
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleRdsAccount []*rds.RdsAccount
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewRdsAccount(ctx, fmt.Sprintf("example-%v", key0), &rds.RdsAccountArgs{
//					DbInstanceId:    exampleInstance[val0].ID(),
//					AccountName:     pulumi.String(invokeFormat1.Result),
//					AccountPassword: pulumi.String(invokeFormat2.Result),
//				})
//				if err != nil {
//					return err
//				}
//				exampleRdsAccount = append(exampleRdsAccount, __res)
//			}
//			invokeFormat3, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "_%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleDatabase []*rds.Database
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewDatabase(ctx, fmt.Sprintf("example-%v", key0), &rds.DatabaseArgs{
//					InstanceId: exampleInstance[val0].ID(),
//					Name:       pulumi.String(invokeFormat3.Result),
//				})
//				if err != nil {
//					return err
//				}
//				exampleDatabase = append(exampleDatabase, __res)
//			}
//			var exampleAccountPrivilege []*rds.AccountPrivilege
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := rds.NewAccountPrivilege(ctx, fmt.Sprintf("example-%v", key0), &rds.AccountPrivilegeArgs{
//					InstanceId:  exampleInstance[val0].ID(),
//					AccountName: exampleRdsAccount[val0].Name,
//					Privilege:   pulumi.String("ReadWrite"),
//					DbNames: pulumi.StringArray{
//						exampleDatabase[val0].Name,
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleAccountPrivilege = append(exampleAccountPrivilege, __res)
//			}
//			exampleMigrationInstance, err := dts.NewMigrationInstance(ctx, "example", &dts.MigrationInstanceArgs{
//				PaymentType:                   pulumi.String("PayAsYouGo"),
//				SourceEndpointEngineName:      pulumi.String("MySQL"),
//				SourceEndpointRegion:          pulumi.String(example.Regions[0].Id),
//				DestinationEndpointEngineName: pulumi.String("MySQL"),
//				DestinationEndpointRegion:     pulumi.String(example.Regions[0].Id),
//				InstanceClass:                 pulumi.String("small"),
//				SyncArchitecture:              pulumi.String("oneway"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMigrationJob, err := dts.NewMigrationJob(ctx, "example", &dts.MigrationJobArgs{
//				DtsInstanceId:                   exampleMigrationInstance.ID(),
//				DtsJobName:                      pulumi.String(name),
//				SourceEndpointInstanceType:      pulumi.String("RDS"),
//				SourceEndpointInstanceId:        exampleAccountPrivilege[0].InstanceId,
//				SourceEndpointEngineName:        pulumi.String("MySQL"),
//				SourceEndpointRegion:            pulumi.String(example.Regions[0].Id),
//				SourceEndpointUserName:          exampleRdsAccount[0].AccountName,
//				SourceEndpointPassword:          exampleRdsAccount[0].AccountPassword,
//				DestinationEndpointInstanceType: pulumi.String("RDS"),
//				DestinationEndpointInstanceId:   exampleAccountPrivilege[1].InstanceId,
//				DestinationEndpointEngineName:   pulumi.String("MySQL"),
//				DestinationEndpointRegion:       pulumi.String(example.Regions[0].Id),
//				DestinationEndpointUserName:     exampleRdsAccount[1].AccountName,
//				DestinationEndpointPassword:     exampleRdsAccount[1].AccountPassword,
//				DbList: pulumi.All(exampleDatabase[0].Name, exampleDatabase[1].Name).ApplyT(func(_args []interface{}) (string, error) {
//					exampleDatabaseName := _args[0].(string)
//					exampleDatabaseName1 := _args[1].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]map[string]interface{}{
//						exampleDatabaseName: map[string]interface{}{
//							"name": exampleDatabaseName1,
//							"all":  true,
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//				StructureInitialization: pulumi.Bool(true),
//				DataInitialization:      pulumi.Bool(true),
//				DataSynchronization:     pulumi.Bool(true),
//				Status:                  pulumi.String("Migrating"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dts.NewJobMonitorRule(ctx, "example", &dts.JobMonitorRuleArgs{
//				DtsJobId: exampleMigrationJob.ID(),
//				Type:     pulumi.String("delay"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DTS Job Monitor Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dts/jobMonitorRule:JobMonitorRule example <dts_job_id>
// ```
type JobMonitorRule struct {
	pulumi.CustomResourceState

	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringOutput `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringOutput `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringPtrOutput `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringOutput `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJobMonitorRule registers a new resource with the given unique name, arguments, and options.
func NewJobMonitorRule(ctx *pulumi.Context,
	name string, args *JobMonitorRuleArgs, opts ...pulumi.ResourceOption) (*JobMonitorRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DtsJobId == nil {
		return nil, errors.New("invalid value for required argument 'DtsJobId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobMonitorRule
	err := ctx.RegisterResource("alicloud:dts/jobMonitorRule:JobMonitorRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobMonitorRule gets an existing JobMonitorRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobMonitorRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobMonitorRuleState, opts ...pulumi.ResourceOption) (*JobMonitorRule, error) {
	var resource JobMonitorRule
	err := ctx.ReadResource("alicloud:dts/jobMonitorRule:JobMonitorRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobMonitorRule resources.
type jobMonitorRuleState struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime *string `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId *string `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone *string `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State *string `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type *string `pulumi:"type"`
}

type JobMonitorRuleState struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringPtrInput
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringPtrInput
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringPtrInput
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringPtrInput
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringPtrInput
}

func (JobMonitorRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobMonitorRuleState)(nil)).Elem()
}

type jobMonitorRuleArgs struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime *string `pulumi:"delayRuleTime"`
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId string `pulumi:"dtsJobId"`
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone *string `pulumi:"phone"`
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State *string `pulumi:"state"`
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a JobMonitorRule resource.
type JobMonitorRuleArgs struct {
	// Trigger delay alarm threshold, which is measured in seconds.
	DelayRuleTime pulumi.StringPtrInput
	// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
	DtsJobId pulumi.StringInput
	// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
	Phone pulumi.StringPtrInput
	// Whether to enable monitoring rules, valid values: `Y`, `N`.
	State pulumi.StringPtrInput
	// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
	Type pulumi.StringInput
}

func (JobMonitorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobMonitorRuleArgs)(nil)).Elem()
}

type JobMonitorRuleInput interface {
	pulumi.Input

	ToJobMonitorRuleOutput() JobMonitorRuleOutput
	ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput
}

func (*JobMonitorRule) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMonitorRule)(nil)).Elem()
}

func (i *JobMonitorRule) ToJobMonitorRuleOutput() JobMonitorRuleOutput {
	return i.ToJobMonitorRuleOutputWithContext(context.Background())
}

func (i *JobMonitorRule) ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleOutput)
}

// JobMonitorRuleArrayInput is an input type that accepts JobMonitorRuleArray and JobMonitorRuleArrayOutput values.
// You can construct a concrete instance of `JobMonitorRuleArrayInput` via:
//
//	JobMonitorRuleArray{ JobMonitorRuleArgs{...} }
type JobMonitorRuleArrayInput interface {
	pulumi.Input

	ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput
	ToJobMonitorRuleArrayOutputWithContext(context.Context) JobMonitorRuleArrayOutput
}

type JobMonitorRuleArray []JobMonitorRuleInput

func (JobMonitorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobMonitorRule)(nil)).Elem()
}

func (i JobMonitorRuleArray) ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput {
	return i.ToJobMonitorRuleArrayOutputWithContext(context.Background())
}

func (i JobMonitorRuleArray) ToJobMonitorRuleArrayOutputWithContext(ctx context.Context) JobMonitorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleArrayOutput)
}

// JobMonitorRuleMapInput is an input type that accepts JobMonitorRuleMap and JobMonitorRuleMapOutput values.
// You can construct a concrete instance of `JobMonitorRuleMapInput` via:
//
//	JobMonitorRuleMap{ "key": JobMonitorRuleArgs{...} }
type JobMonitorRuleMapInput interface {
	pulumi.Input

	ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput
	ToJobMonitorRuleMapOutputWithContext(context.Context) JobMonitorRuleMapOutput
}

type JobMonitorRuleMap map[string]JobMonitorRuleInput

func (JobMonitorRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobMonitorRule)(nil)).Elem()
}

func (i JobMonitorRuleMap) ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput {
	return i.ToJobMonitorRuleMapOutputWithContext(context.Background())
}

func (i JobMonitorRuleMap) ToJobMonitorRuleMapOutputWithContext(ctx context.Context) JobMonitorRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMonitorRuleMapOutput)
}

type JobMonitorRuleOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleOutput) ToJobMonitorRuleOutput() JobMonitorRuleOutput {
	return o
}

func (o JobMonitorRuleOutput) ToJobMonitorRuleOutputWithContext(ctx context.Context) JobMonitorRuleOutput {
	return o
}

// Trigger delay alarm threshold, which is measured in seconds.
func (o JobMonitorRuleOutput) DelayRuleTime() pulumi.StringOutput {
	return o.ApplyT(func(v *JobMonitorRule) pulumi.StringOutput { return v.DelayRuleTime }).(pulumi.StringOutput)
}

// Migration, synchronization or subscription task ID can be by calling the [DescribeDtsJobs] get.
func (o JobMonitorRuleOutput) DtsJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobMonitorRule) pulumi.StringOutput { return v.DtsJobId }).(pulumi.StringOutput)
}

// The alarm is triggered after notification of the contact phone number, A plurality of phone numbers between them with a comma (,) to separate.
func (o JobMonitorRuleOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobMonitorRule) pulumi.StringPtrOutput { return v.Phone }).(pulumi.StringPtrOutput)
}

// Whether to enable monitoring rules, valid values: `Y`, `N`.
func (o JobMonitorRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *JobMonitorRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Monitoring rules of type, valid values: `delay`, `error`. **delay**: delay alarm. **error**: abnormal alarm.
func (o JobMonitorRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *JobMonitorRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type JobMonitorRuleArrayOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleArrayOutput) ToJobMonitorRuleArrayOutput() JobMonitorRuleArrayOutput {
	return o
}

func (o JobMonitorRuleArrayOutput) ToJobMonitorRuleArrayOutputWithContext(ctx context.Context) JobMonitorRuleArrayOutput {
	return o
}

func (o JobMonitorRuleArrayOutput) Index(i pulumi.IntInput) JobMonitorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobMonitorRule {
		return vs[0].([]*JobMonitorRule)[vs[1].(int)]
	}).(JobMonitorRuleOutput)
}

type JobMonitorRuleMapOutput struct{ *pulumi.OutputState }

func (JobMonitorRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobMonitorRule)(nil)).Elem()
}

func (o JobMonitorRuleMapOutput) ToJobMonitorRuleMapOutput() JobMonitorRuleMapOutput {
	return o
}

func (o JobMonitorRuleMapOutput) ToJobMonitorRuleMapOutputWithContext(ctx context.Context) JobMonitorRuleMapOutput {
	return o
}

func (o JobMonitorRuleMapOutput) MapIndex(k pulumi.StringInput) JobMonitorRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobMonitorRule {
		return vs[0].(map[string]*JobMonitorRule)[vs[1].(string)]
	}).(JobMonitorRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleInput)(nil)).Elem(), &JobMonitorRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleArrayInput)(nil)).Elem(), JobMonitorRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMonitorRuleMapInput)(nil)).Elem(), JobMonitorRuleMap{})
	pulumi.RegisterOutputType(JobMonitorRuleOutput{})
	pulumi.RegisterOutputType(JobMonitorRuleArrayOutput{})
	pulumi.RegisterOutputType(JobMonitorRuleMapOutput{})
}
