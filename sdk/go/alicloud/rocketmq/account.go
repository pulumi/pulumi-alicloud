// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a RocketMQ Account resource.
//
// For information about RocketMQ Account and how to use it, see [What is Account](https://www.alibabacloud.com/help/en/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/developer-reference/api-rocketmq-2022-08-01-createinstanceaccount).
//
// > **NOTE:** Available since v1.245.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rocketmq"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultg6ZXs2, err := vpc.NewNetwork(ctx, "defaultg6ZXs2", &vpc.NetworkArgs{
//				Description: pulumi.String("111"),
//				CidrBlock:   pulumi.String("192.168.0.0/16"),
//				VpcName:     pulumi.String("pop-example-vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultvMQbCy, err := vpc.NewSwitch(ctx, "defaultvMQbCy", &vpc.SwitchArgs{
//				VpcId:       defaultg6ZXs2.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-j"),
//				CidrBlock:   pulumi.String("192.168.0.0/24"),
//				VswitchName: pulumi.String("pop-example-vswitch"),
//			})
//			if err != nil {
//				return err
//			}
//			default9hAb83, err := rocketmq.NewRocketMQInstance(ctx, "default9hAb83", &rocketmq.RocketMQInstanceArgs{
//				ProductInfo: &rocketmq.RocketMQInstanceProductInfoArgs{
//					MsgProcessSpec:       pulumi.String("rmq.p2.4xlarge"),
//					SendReceiveRatio:     pulumi.Float64(0.3),
//					MessageRetentionTime: pulumi.Int(70),
//				},
//				ServiceCode:   pulumi.String("rmq"),
//				SeriesCode:    pulumi.String("professional"),
//				PaymentType:   pulumi.String("PayAsYouGo"),
//				InstanceName:  pulumi.String(name),
//				SubSeriesCode: pulumi.String("cluster_ha"),
//				Remark:        pulumi.String("example"),
//				Software: &rocketmq.RocketMQInstanceSoftwareArgs{
//					MaintainTime: pulumi.String("02:00-06:00"),
//				},
//				Tags: pulumi.StringMap{
//					"Created": pulumi.String("TF"),
//					"For":     pulumi.String("example"),
//				},
//				NetworkInfo: &rocketmq.RocketMQInstanceNetworkInfoArgs{
//					VpcInfo: &rocketmq.RocketMQInstanceNetworkInfoVpcInfoArgs{
//						VpcId: defaultg6ZXs2.ID(),
//						Vswitches: rocketmq.RocketMQInstanceNetworkInfoVpcInfoVswitchArray{
//							&rocketmq.RocketMQInstanceNetworkInfoVpcInfoVswitchArgs{
//								VswitchId: defaultvMQbCy.ID(),
//							},
//						},
//					},
//					InternetInfo: &rocketmq.RocketMQInstanceNetworkInfoInternetInfoArgs{
//						InternetSpec:     pulumi.String("enable"),
//						FlowOutType:      pulumi.String("payByBandwidth"),
//						FlowOutBandwidth: pulumi.Int(30),
//					},
//				},
//				AclInfo: &rocketmq.RocketMQInstanceAclInfoArgs{
//					DefaultVpcAuthFree: pulumi.Bool(false),
//					AclTypes: pulumi.StringArray{
//						pulumi.String("default"),
//						pulumi.String("apache_acl"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewAccount(ctx, "default", &rocketmq.AccountArgs{
//				AccountStatus: pulumi.String("ENABLE"),
//				InstanceId:    default9hAb83.ID(),
//				Username:      pulumi.String("tfexample"),
//				Password:      pulumi.String("1741835136"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketMQ Account can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:rocketmq/account:Account example <instance_id>:<username>
// ```
type Account struct {
	pulumi.CustomResourceState

	// The status of the account. Valid values: `DISABLE`, `ENABLE`.
	AccountStatus pulumi.StringOutput `pulumi:"accountStatus"`
	// The instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The password of the account.
	Password pulumi.StringOutput `pulumi:"password"`
	// The username of the account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("alicloud:rocketmq/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("alicloud:rocketmq/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// The status of the account. Valid values: `DISABLE`, `ENABLE`.
	AccountStatus *string `pulumi:"accountStatus"`
	// The instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The password of the account.
	Password *string `pulumi:"password"`
	// The username of the account.
	Username *string `pulumi:"username"`
}

type AccountState struct {
	// The status of the account. Valid values: `DISABLE`, `ENABLE`.
	AccountStatus pulumi.StringPtrInput
	// The instance ID.
	InstanceId pulumi.StringPtrInput
	// The password of the account.
	Password pulumi.StringPtrInput
	// The username of the account.
	Username pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// The status of the account. Valid values: `DISABLE`, `ENABLE`.
	AccountStatus *string `pulumi:"accountStatus"`
	// The instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The password of the account.
	Password string `pulumi:"password"`
	// The username of the account.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The status of the account. Valid values: `DISABLE`, `ENABLE`.
	AccountStatus pulumi.StringPtrInput
	// The instance ID.
	InstanceId pulumi.StringInput
	// The password of the account.
	Password pulumi.StringInput
	// The username of the account.
	Username pulumi.StringInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The status of the account. Valid values: `DISABLE`, `ENABLE`.
func (o AccountOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountStatus }).(pulumi.StringOutput)
}

// The instance ID.
func (o AccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The password of the account.
func (o AccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The username of the account.
func (o AccountOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
