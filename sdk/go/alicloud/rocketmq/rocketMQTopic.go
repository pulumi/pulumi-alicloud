// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a RocketMQ Topic resource.
//
// For information about RocketMQ Topic and how to use it, see [What is Topic](https://www.alibabacloud.com/help/en/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/developer-reference/api-rocketmq-2022-08-01-createtopic).
//
// > **NOTE:** Available since v1.211.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rocketmq"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			createVpc, err := vpc.NewNetwork(ctx, "createVpc", &vpc.NetworkArgs{
//				Description: pulumi.String("example"),
//				CidrBlock:   pulumi.String("172.16.0.0/12"),
//				VpcName:     pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			createVswitch, err := vpc.NewSwitch(ctx, "createVswitch", &vpc.SwitchArgs{
//				Description: pulumi.String("example"),
//				VpcId:       createVpc.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			createInstance, err := rocketmq.NewRocketMQInstance(ctx, "createInstance", &rocketmq.RocketMQInstanceArgs{
//				AutoRenewPeriod: pulumi.Int(1),
//				ProductInfo: &rocketmq.RocketMQInstanceProductInfoArgs{
//					MsgProcessSpec:       pulumi.String("rmq.p2.4xlarge"),
//					SendReceiveRatio:     pulumi.Float64(0.3),
//					MessageRetentionTime: pulumi.Int(70),
//				},
//				NetworkInfo: &rocketmq.RocketMQInstanceNetworkInfoArgs{
//					VpcInfo: &rocketmq.RocketMQInstanceNetworkInfoVpcInfoArgs{
//						VpcId:     createVpc.ID(),
//						VswitchId: createVswitch.ID(),
//					},
//					InternetInfo: &rocketmq.RocketMQInstanceNetworkInfoInternetInfoArgs{
//						InternetSpec:     pulumi.String("enable"),
//						FlowOutType:      pulumi.String("payByBandwidth"),
//						FlowOutBandwidth: pulumi.Int(30),
//					},
//				},
//				Period:        pulumi.Int(1),
//				SubSeriesCode: pulumi.String("cluster_ha"),
//				Remark:        pulumi.String("example"),
//				InstanceName:  pulumi.String(name),
//				ServiceCode:   pulumi.String("rmq"),
//				SeriesCode:    pulumi.String("professional"),
//				PaymentType:   pulumi.String("PayAsYouGo"),
//				PeriodUnit:    pulumi.String("Month"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQTopic(ctx, "defaultRocketMQTopic", &rocketmq.RocketMQTopicArgs{
//				Remark:      pulumi.String("example"),
//				InstanceId:  createInstance.ID(),
//				MessageType: pulumi.String("NORMAL"),
//				TopicName:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketMQ Topic can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:rocketmq/rocketMQTopic:RocketMQTopic example <instance_id>:<topic_name>
// ```
type RocketMQTopic struct {
	pulumi.CustomResourceState

	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Message type.
	MessageType pulumi.StringPtrOutput `pulumi:"messageType"`
	// Custom remarks.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// Topic name and identification.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewRocketMQTopic registers a new resource with the given unique name, arguments, and options.
func NewRocketMQTopic(ctx *pulumi.Context,
	name string, args *RocketMQTopicArgs, opts ...pulumi.ResourceOption) (*RocketMQTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQTopic
	err := ctx.RegisterResource("alicloud:rocketmq/rocketMQTopic:RocketMQTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQTopic gets an existing RocketMQTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQTopicState, opts ...pulumi.ResourceOption) (*RocketMQTopic, error) {
	var resource RocketMQTopic
	err := ctx.ReadResource("alicloud:rocketmq/rocketMQTopic:RocketMQTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQTopic resources.
type rocketMQTopicState struct {
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Message type.
	MessageType *string `pulumi:"messageType"`
	// Custom remarks.
	Remark *string `pulumi:"remark"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// Topic name and identification.
	TopicName *string `pulumi:"topicName"`
}

type RocketMQTopicState struct {
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Message type.
	MessageType pulumi.StringPtrInput
	// Custom remarks.
	Remark pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// Topic name and identification.
	TopicName pulumi.StringPtrInput
}

func (RocketMQTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQTopicState)(nil)).Elem()
}

type rocketMQTopicArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Message type.
	MessageType *string `pulumi:"messageType"`
	// Custom remarks.
	Remark *string `pulumi:"remark"`
	// Topic name and identification.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a RocketMQTopic resource.
type RocketMQTopicArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// Message type.
	MessageType pulumi.StringPtrInput
	// Custom remarks.
	Remark pulumi.StringPtrInput
	// Topic name and identification.
	TopicName pulumi.StringInput
}

func (RocketMQTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQTopicArgs)(nil)).Elem()
}

type RocketMQTopicInput interface {
	pulumi.Input

	ToRocketMQTopicOutput() RocketMQTopicOutput
	ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput
}

func (*RocketMQTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQTopic)(nil)).Elem()
}

func (i *RocketMQTopic) ToRocketMQTopicOutput() RocketMQTopicOutput {
	return i.ToRocketMQTopicOutputWithContext(context.Background())
}

func (i *RocketMQTopic) ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicOutput)
}

// RocketMQTopicArrayInput is an input type that accepts RocketMQTopicArray and RocketMQTopicArrayOutput values.
// You can construct a concrete instance of `RocketMQTopicArrayInput` via:
//
//	RocketMQTopicArray{ RocketMQTopicArgs{...} }
type RocketMQTopicArrayInput interface {
	pulumi.Input

	ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput
	ToRocketMQTopicArrayOutputWithContext(context.Context) RocketMQTopicArrayOutput
}

type RocketMQTopicArray []RocketMQTopicInput

func (RocketMQTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQTopic)(nil)).Elem()
}

func (i RocketMQTopicArray) ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput {
	return i.ToRocketMQTopicArrayOutputWithContext(context.Background())
}

func (i RocketMQTopicArray) ToRocketMQTopicArrayOutputWithContext(ctx context.Context) RocketMQTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicArrayOutput)
}

// RocketMQTopicMapInput is an input type that accepts RocketMQTopicMap and RocketMQTopicMapOutput values.
// You can construct a concrete instance of `RocketMQTopicMapInput` via:
//
//	RocketMQTopicMap{ "key": RocketMQTopicArgs{...} }
type RocketMQTopicMapInput interface {
	pulumi.Input

	ToRocketMQTopicMapOutput() RocketMQTopicMapOutput
	ToRocketMQTopicMapOutputWithContext(context.Context) RocketMQTopicMapOutput
}

type RocketMQTopicMap map[string]RocketMQTopicInput

func (RocketMQTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQTopic)(nil)).Elem()
}

func (i RocketMQTopicMap) ToRocketMQTopicMapOutput() RocketMQTopicMapOutput {
	return i.ToRocketMQTopicMapOutputWithContext(context.Background())
}

func (i RocketMQTopicMap) ToRocketMQTopicMapOutputWithContext(ctx context.Context) RocketMQTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicMapOutput)
}

type RocketMQTopicOutput struct{ *pulumi.OutputState }

func (RocketMQTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicOutput) ToRocketMQTopicOutput() RocketMQTopicOutput {
	return o
}

func (o RocketMQTopicOutput) ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput {
	return o
}

// The creation time of the resource.
func (o RocketMQTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Instance ID.
func (o RocketMQTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Message type.
func (o RocketMQTopicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringPtrOutput { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Custom remarks.
func (o RocketMQTopicOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// The status of the resource.
func (o RocketMQTopicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Topic name and identification.
func (o RocketMQTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type RocketMQTopicArrayOutput struct{ *pulumi.OutputState }

func (RocketMQTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicArrayOutput) ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput {
	return o
}

func (o RocketMQTopicArrayOutput) ToRocketMQTopicArrayOutputWithContext(ctx context.Context) RocketMQTopicArrayOutput {
	return o
}

func (o RocketMQTopicArrayOutput) Index(i pulumi.IntInput) RocketMQTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQTopic {
		return vs[0].([]*RocketMQTopic)[vs[1].(int)]
	}).(RocketMQTopicOutput)
}

type RocketMQTopicMapOutput struct{ *pulumi.OutputState }

func (RocketMQTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicMapOutput) ToRocketMQTopicMapOutput() RocketMQTopicMapOutput {
	return o
}

func (o RocketMQTopicMapOutput) ToRocketMQTopicMapOutputWithContext(ctx context.Context) RocketMQTopicMapOutput {
	return o
}

func (o RocketMQTopicMapOutput) MapIndex(k pulumi.StringInput) RocketMQTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQTopic {
		return vs[0].(map[string]*RocketMQTopic)[vs[1].(string)]
	}).(RocketMQTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicInput)(nil)).Elem(), &RocketMQTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicArrayInput)(nil)).Elem(), RocketMQTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicMapInput)(nil)).Elem(), RocketMQTopicMap{})
	pulumi.RegisterOutputType(RocketMQTopicOutput{})
	pulumi.RegisterOutputType(RocketMQTopicArrayOutput{})
	pulumi.RegisterOutputType(RocketMQTopicMapOutput{})
}
