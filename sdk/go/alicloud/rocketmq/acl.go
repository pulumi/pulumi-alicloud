// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a RocketMQ Acl resource.
//
// For information about RocketMQ Acl and how to use it, see [What is Acl](https://www.alibabacloud.com/help/en/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/developer-reference/api-rocketmq-2022-08-01-createinstanceacl).
//
// > **NOTE:** Available since v1.245.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rocketmq"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultrqDtGm, err := vpc.NewNetwork(ctx, "defaultrqDtGm", &vpc.NetworkArgs{
//				Description: pulumi.String("1111"),
//				CidrBlock:   pulumi.String("192.168.0.0/16"),
//				VpcName:     pulumi.String("pop-example-vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultjUrTYm, err := vpc.NewSwitch(ctx, "defaultjUrTYm", &vpc.SwitchArgs{
//				VpcId:       defaultrqDtGm.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-j"),
//				CidrBlock:   pulumi.String("192.168.0.0/24"),
//				VswitchName: pulumi.String("pop-example-vswitch"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultKJZNVM, err := rocketmq.NewRocketMQInstance(ctx, "defaultKJZNVM", &rocketmq.RocketMQInstanceArgs{
//				ProductInfo: &rocketmq.RocketMQInstanceProductInfoArgs{
//					MsgProcessSpec:       pulumi.String("rmq.p2.4xlarge"),
//					SendReceiveRatio:     pulumi.Float64(0.3),
//					MessageRetentionTime: pulumi.Int(70),
//				},
//				ServiceCode:   pulumi.String("rmq"),
//				SeriesCode:    pulumi.String("professional"),
//				PaymentType:   pulumi.String("PayAsYouGo"),
//				InstanceName:  pulumi.String(name),
//				SubSeriesCode: pulumi.String("cluster_ha"),
//				Remark:        pulumi.String("example"),
//				NetworkInfo: &rocketmq.RocketMQInstanceNetworkInfoArgs{
//					VpcInfo: &rocketmq.RocketMQInstanceNetworkInfoVpcInfoArgs{
//						VpcId: defaultrqDtGm.ID(),
//						Vswitches: rocketmq.RocketMQInstanceNetworkInfoVpcInfoVswitchArray{
//							&rocketmq.RocketMQInstanceNetworkInfoVpcInfoVswitchArgs{
//								VswitchId: defaultjUrTYm.ID(),
//							},
//						},
//					},
//					InternetInfo: &rocketmq.RocketMQInstanceNetworkInfoInternetInfoArgs{
//						InternetSpec:     pulumi.String("enable"),
//						FlowOutType:      pulumi.String("payByBandwidth"),
//						FlowOutBandwidth: pulumi.Int(5),
//					},
//				},
//				AclInfo: &rocketmq.RocketMQInstanceAclInfoArgs{
//					DefaultVpcAuthFree: pulumi.Bool(false),
//					AclTypes: pulumi.StringArray{
//						pulumi.String("default"),
//						pulumi.String("apache_acl"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultMeNlxe, err := rocketmq.NewAccount(ctx, "defaultMeNlxe", &rocketmq.AccountArgs{
//				AccountStatus: pulumi.String("ENABLE"),
//				InstanceId:    defaultKJZNVM.ID(),
//				Username:      pulumi.String("tfexample"),
//				Password:      pulumi.String("123456"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultVA0zog, err := rocketmq.NewRocketMQTopic(ctx, "defaultVA0zog", &rocketmq.RocketMQTopicArgs{
//				InstanceId:  defaultKJZNVM.ID(),
//				MessageType: pulumi.String("NORMAL"),
//				TopicName:   pulumi.String("tfexample"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewAcl(ctx, "default", &rocketmq.AclArgs{
//				Actions: pulumi.StringArray{
//					pulumi.String("Pub"),
//					pulumi.String("Sub"),
//				},
//				InstanceId:   defaultKJZNVM.ID(),
//				Username:     defaultMeNlxe.Username,
//				ResourceName: defaultVA0zog.TopicName,
//				ResourceType: pulumi.String("Topic"),
//				Decision:     pulumi.String("Deny"),
//				IpWhitelists: pulumi.StringArray{
//					pulumi.String("192.168.5.5"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketMQ Acl can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:rocketmq/acl:Acl example <instance_id>:<username>:<resource_type>:<resource_name>
// ```
type Acl struct {
	pulumi.CustomResourceState

	// The type of operations that can be performed on the resource. Valid values:
	// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
	// - If `resourceType` is set to `Group`. Valid values: `Sub`.
	Actions pulumi.StringArrayOutput `pulumi:"actions"`
	// The decision result of the authorization. Valid values: `Deny`, `Allow`.
	Decision pulumi.StringOutput `pulumi:"decision"`
	// The instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IP address whitelists.
	IpWhitelists pulumi.StringArrayOutput `pulumi:"ipWhitelists"`
	// The name of the resource on which you want to grant permissions.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The username of the account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Decision == nil {
		return nil, errors.New("invalid value for required argument 'Decision'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("alicloud:rocketmq/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("alicloud:rocketmq/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// The type of operations that can be performed on the resource. Valid values:
	// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
	// - If `resourceType` is set to `Group`. Valid values: `Sub`.
	Actions []string `pulumi:"actions"`
	// The decision result of the authorization. Valid values: `Deny`, `Allow`.
	Decision *string `pulumi:"decision"`
	// The instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The IP address whitelists.
	IpWhitelists []string `pulumi:"ipWhitelists"`
	// The name of the resource on which you want to grant permissions.
	ResourceName *string `pulumi:"resourceName"`
	// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
	ResourceType *string `pulumi:"resourceType"`
	// The username of the account.
	Username *string `pulumi:"username"`
}

type AclState struct {
	// The type of operations that can be performed on the resource. Valid values:
	// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
	// - If `resourceType` is set to `Group`. Valid values: `Sub`.
	Actions pulumi.StringArrayInput
	// The decision result of the authorization. Valid values: `Deny`, `Allow`.
	Decision pulumi.StringPtrInput
	// The instance ID.
	InstanceId pulumi.StringPtrInput
	// The IP address whitelists.
	IpWhitelists pulumi.StringArrayInput
	// The name of the resource on which you want to grant permissions.
	ResourceName pulumi.StringPtrInput
	// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
	ResourceType pulumi.StringPtrInput
	// The username of the account.
	Username pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// The type of operations that can be performed on the resource. Valid values:
	// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
	// - If `resourceType` is set to `Group`. Valid values: `Sub`.
	Actions []string `pulumi:"actions"`
	// The decision result of the authorization. Valid values: `Deny`, `Allow`.
	Decision string `pulumi:"decision"`
	// The instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The IP address whitelists.
	IpWhitelists []string `pulumi:"ipWhitelists"`
	// The name of the resource on which you want to grant permissions.
	ResourceName string `pulumi:"resourceName"`
	// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
	ResourceType string `pulumi:"resourceType"`
	// The username of the account.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// The type of operations that can be performed on the resource. Valid values:
	// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
	// - If `resourceType` is set to `Group`. Valid values: `Sub`.
	Actions pulumi.StringArrayInput
	// The decision result of the authorization. Valid values: `Deny`, `Allow`.
	Decision pulumi.StringInput
	// The instance ID.
	InstanceId pulumi.StringInput
	// The IP address whitelists.
	IpWhitelists pulumi.StringArrayInput
	// The name of the resource on which you want to grant permissions.
	ResourceName pulumi.StringInput
	// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
	ResourceType pulumi.StringInput
	// The username of the account.
	Username pulumi.StringInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// The type of operations that can be performed on the resource. Valid values:
// - If `resourceType` is set to `Topic`. Valid values: `Pub`, `Sub`.
// - If `resourceType` is set to `Group`. Valid values: `Sub`.
func (o AclOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.Actions }).(pulumi.StringArrayOutput)
}

// The decision result of the authorization. Valid values: `Deny`, `Allow`.
func (o AclOutput) Decision() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Decision }).(pulumi.StringOutput)
}

// The instance ID.
func (o AclOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP address whitelists.
func (o AclOutput) IpWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.IpWhitelists }).(pulumi.StringArrayOutput)
}

// The name of the resource on which you want to grant permissions.
func (o AclOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// The type of the resource on which you want to grant permissions. Valid values: `Group`, `Topic`.
func (o AclOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The username of the account.
func (o AclOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}
