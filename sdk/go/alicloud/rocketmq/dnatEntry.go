// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sag DnatEntry resource. This topic describes how to add a DNAT entry to a Smart Access Gateway (SAG) instance to enable the DNAT function. By using the DNAT function, you can forward requests received by public IP addresses to Alibaba Cloud instances according to custom mapping rules.
//
// For information about Sag DnatEntry and how to use it, see [What is Sag DnatEntry](https://www.alibabacloud.com/help/doc-detail/124312.htm).
//
// > **NOTE:** Available in 1.63.0+
//
// > **NOTE:** Only the following regions suppor. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/rocketmq"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rocketmq.NewDnatEntry(ctx, "default", &rocketmq.DnatEntryArgs{
// 			ExternalIp:   pulumi.String("1.0.0.2"),
// 			ExternalPort: pulumi.String("1"),
// 			InternalIp:   pulumi.String("10.0.0.2"),
// 			InternalPort: pulumi.String("20"),
// 			IpProtocol:   pulumi.String("tcp"),
// 			SagId:        pulumi.String("sag-3rb1t3iagy3w0zgwy9"),
// 			Type:         pulumi.String("Intranet"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// The Sag DnatEntry can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:rocketmq/dnatEntry:DnatEntry example sag-abc123456:dnat-abc123456
// ```
type DnatEntry struct {
	pulumi.CustomResourceState

	// The external public IP address.when "type" is "Internet",automatically identify the external ip.
	ExternalIp pulumi.StringPtrOutput `pulumi:"externalIp"`
	// The public port.Value range: 1 to 65535 or "any".
	ExternalPort pulumi.StringOutput `pulumi:"externalPort"`
	// The destination private IP address.
	InternalIp pulumi.StringOutput `pulumi:"internalIp"`
	// The destination private port.Value range: 1 to 65535 or "any".
	InternalPort pulumi.StringOutput `pulumi:"internalPort"`
	// The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
	IpProtocol pulumi.StringOutput `pulumi:"ipProtocol"`
	// The ID of the SAG instance.
	SagId pulumi.StringOutput `pulumi:"sagId"`
	// The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDnatEntry registers a new resource with the given unique name, arguments, and options.
func NewDnatEntry(ctx *pulumi.Context,
	name string, args *DnatEntryArgs, opts ...pulumi.ResourceOption) (*DnatEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalPort == nil {
		return nil, errors.New("invalid value for required argument 'ExternalPort'")
	}
	if args.InternalIp == nil {
		return nil, errors.New("invalid value for required argument 'InternalIp'")
	}
	if args.InternalPort == nil {
		return nil, errors.New("invalid value for required argument 'InternalPort'")
	}
	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	if args.SagId == nil {
		return nil, errors.New("invalid value for required argument 'SagId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DnatEntry
	err := ctx.RegisterResource("alicloud:rocketmq/dnatEntry:DnatEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnatEntry gets an existing DnatEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnatEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnatEntryState, opts ...pulumi.ResourceOption) (*DnatEntry, error) {
	var resource DnatEntry
	err := ctx.ReadResource("alicloud:rocketmq/dnatEntry:DnatEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnatEntry resources.
type dnatEntryState struct {
	// The external public IP address.when "type" is "Internet",automatically identify the external ip.
	ExternalIp *string `pulumi:"externalIp"`
	// The public port.Value range: 1 to 65535 or "any".
	ExternalPort *string `pulumi:"externalPort"`
	// The destination private IP address.
	InternalIp *string `pulumi:"internalIp"`
	// The destination private port.Value range: 1 to 65535 or "any".
	InternalPort *string `pulumi:"internalPort"`
	// The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
	IpProtocol *string `pulumi:"ipProtocol"`
	// The ID of the SAG instance.
	SagId *string `pulumi:"sagId"`
	// The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
	Type *string `pulumi:"type"`
}

type DnatEntryState struct {
	// The external public IP address.when "type" is "Internet",automatically identify the external ip.
	ExternalIp pulumi.StringPtrInput
	// The public port.Value range: 1 to 65535 or "any".
	ExternalPort pulumi.StringPtrInput
	// The destination private IP address.
	InternalIp pulumi.StringPtrInput
	// The destination private port.Value range: 1 to 65535 or "any".
	InternalPort pulumi.StringPtrInput
	// The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
	IpProtocol pulumi.StringPtrInput
	// The ID of the SAG instance.
	SagId pulumi.StringPtrInput
	// The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
	Type pulumi.StringPtrInput
}

func (DnatEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatEntryState)(nil)).Elem()
}

type dnatEntryArgs struct {
	// The external public IP address.when "type" is "Internet",automatically identify the external ip.
	ExternalIp *string `pulumi:"externalIp"`
	// The public port.Value range: 1 to 65535 or "any".
	ExternalPort string `pulumi:"externalPort"`
	// The destination private IP address.
	InternalIp string `pulumi:"internalIp"`
	// The destination private port.Value range: 1 to 65535 or "any".
	InternalPort string `pulumi:"internalPort"`
	// The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
	IpProtocol string `pulumi:"ipProtocol"`
	// The ID of the SAG instance.
	SagId string `pulumi:"sagId"`
	// The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DnatEntry resource.
type DnatEntryArgs struct {
	// The external public IP address.when "type" is "Internet",automatically identify the external ip.
	ExternalIp pulumi.StringPtrInput
	// The public port.Value range: 1 to 65535 or "any".
	ExternalPort pulumi.StringInput
	// The destination private IP address.
	InternalIp pulumi.StringInput
	// The destination private port.Value range: 1 to 65535 or "any".
	InternalPort pulumi.StringInput
	// The protocol type. Valid values: TCP: Forwards packets of the TCP protocol. UDP: Forwards packets of the UDP protocol. Any: Forwards packets of all protocols.
	IpProtocol pulumi.StringInput
	// The ID of the SAG instance.
	SagId pulumi.StringInput
	// The DNAT type. Valid values: Intranet: DNAT of private IP addresses. Internet: DNAT of public IP addresses
	Type pulumi.StringInput
}

func (DnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatEntryArgs)(nil)).Elem()
}

type DnatEntryInput interface {
	pulumi.Input

	ToDnatEntryOutput() DnatEntryOutput
	ToDnatEntryOutputWithContext(ctx context.Context) DnatEntryOutput
}

func (*DnatEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**DnatEntry)(nil)).Elem()
}

func (i *DnatEntry) ToDnatEntryOutput() DnatEntryOutput {
	return i.ToDnatEntryOutputWithContext(context.Background())
}

func (i *DnatEntry) ToDnatEntryOutputWithContext(ctx context.Context) DnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatEntryOutput)
}

// DnatEntryArrayInput is an input type that accepts DnatEntryArray and DnatEntryArrayOutput values.
// You can construct a concrete instance of `DnatEntryArrayInput` via:
//
//          DnatEntryArray{ DnatEntryArgs{...} }
type DnatEntryArrayInput interface {
	pulumi.Input

	ToDnatEntryArrayOutput() DnatEntryArrayOutput
	ToDnatEntryArrayOutputWithContext(context.Context) DnatEntryArrayOutput
}

type DnatEntryArray []DnatEntryInput

func (DnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnatEntry)(nil)).Elem()
}

func (i DnatEntryArray) ToDnatEntryArrayOutput() DnatEntryArrayOutput {
	return i.ToDnatEntryArrayOutputWithContext(context.Background())
}

func (i DnatEntryArray) ToDnatEntryArrayOutputWithContext(ctx context.Context) DnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatEntryArrayOutput)
}

// DnatEntryMapInput is an input type that accepts DnatEntryMap and DnatEntryMapOutput values.
// You can construct a concrete instance of `DnatEntryMapInput` via:
//
//          DnatEntryMap{ "key": DnatEntryArgs{...} }
type DnatEntryMapInput interface {
	pulumi.Input

	ToDnatEntryMapOutput() DnatEntryMapOutput
	ToDnatEntryMapOutputWithContext(context.Context) DnatEntryMapOutput
}

type DnatEntryMap map[string]DnatEntryInput

func (DnatEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnatEntry)(nil)).Elem()
}

func (i DnatEntryMap) ToDnatEntryMapOutput() DnatEntryMapOutput {
	return i.ToDnatEntryMapOutputWithContext(context.Background())
}

func (i DnatEntryMap) ToDnatEntryMapOutputWithContext(ctx context.Context) DnatEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatEntryMapOutput)
}

type DnatEntryOutput struct{ *pulumi.OutputState }

func (DnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnatEntry)(nil)).Elem()
}

func (o DnatEntryOutput) ToDnatEntryOutput() DnatEntryOutput {
	return o
}

func (o DnatEntryOutput) ToDnatEntryOutputWithContext(ctx context.Context) DnatEntryOutput {
	return o
}

type DnatEntryArrayOutput struct{ *pulumi.OutputState }

func (DnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnatEntry)(nil)).Elem()
}

func (o DnatEntryArrayOutput) ToDnatEntryArrayOutput() DnatEntryArrayOutput {
	return o
}

func (o DnatEntryArrayOutput) ToDnatEntryArrayOutputWithContext(ctx context.Context) DnatEntryArrayOutput {
	return o
}

func (o DnatEntryArrayOutput) Index(i pulumi.IntInput) DnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnatEntry {
		return vs[0].([]*DnatEntry)[vs[1].(int)]
	}).(DnatEntryOutput)
}

type DnatEntryMapOutput struct{ *pulumi.OutputState }

func (DnatEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnatEntry)(nil)).Elem()
}

func (o DnatEntryMapOutput) ToDnatEntryMapOutput() DnatEntryMapOutput {
	return o
}

func (o DnatEntryMapOutput) ToDnatEntryMapOutputWithContext(ctx context.Context) DnatEntryMapOutput {
	return o
}

func (o DnatEntryMapOutput) MapIndex(k pulumi.StringInput) DnatEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnatEntry {
		return vs[0].(map[string]*DnatEntry)[vs[1].(string)]
	}).(DnatEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnatEntryInput)(nil)).Elem(), &DnatEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatEntryArrayInput)(nil)).Elem(), DnatEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatEntryMapInput)(nil)).Elem(), DnatEntryMap{})
	pulumi.RegisterOutputType(DnatEntryOutput{})
	pulumi.RegisterOutputType(DnatEntryArrayOutput{})
	pulumi.RegisterOutputType(DnatEntryMapOutput{})
}
