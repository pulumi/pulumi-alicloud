// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Sag Qos resource. Smart Access Gateway (SAG) supports quintuple-based QoS functions to differentiate traffic of different services and ensure high-priority traffic bandwidth.
//
// For information about Sag Qos and how to use it, see [What is Qos](https://www.alibabacloud.com/help/doc-detail/131306.htm).
//
// > **NOTE:** Available in 1.60.0+
//
// > **NOTE:** Only the following regions support. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/rocketmq"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rocketmq.NewQos(ctx, "_default", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// The Sag Qos can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:rocketmq/qos:Qos example qos-abc123456
// ```
type Qos struct {
	pulumi.CustomResourceState

	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewQos registers a new resource with the given unique name, arguments, and options.
func NewQos(ctx *pulumi.Context,
	name string, args *QosArgs, opts ...pulumi.ResourceOption) (*Qos, error) {
	if args == nil {
		args = &QosArgs{}
	}
	var resource Qos
	err := ctx.RegisterResource("alicloud:rocketmq/qos:Qos", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQos gets an existing Qos resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQos(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QosState, opts ...pulumi.ResourceOption) (*Qos, error) {
	var resource Qos
	err := ctx.ReadResource("alicloud:rocketmq/qos:Qos", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Qos resources.
type qosState struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name *string `pulumi:"name"`
}

type QosState struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name pulumi.StringPtrInput
}

func (QosState) ElementType() reflect.Type {
	return reflect.TypeOf((*qosState)(nil)).Elem()
}

type qosArgs struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Qos resource.
type QosArgs struct {
	// The name of the QoS policy to be created. The name can contain 2 to 128 characters including a-z, A-Z, 0-9, periods, underlines, and hyphens. The name must start with an English letter, but cannot start with http:// or https://.
	Name pulumi.StringPtrInput
}

func (QosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qosArgs)(nil)).Elem()
}

type QosInput interface {
	pulumi.Input

	ToQosOutput() QosOutput
	ToQosOutputWithContext(ctx context.Context) QosOutput
}

func (Qos) ElementType() reflect.Type {
	return reflect.TypeOf((*Qos)(nil)).Elem()
}

func (i Qos) ToQosOutput() QosOutput {
	return i.ToQosOutputWithContext(context.Background())
}

func (i Qos) ToQosOutputWithContext(ctx context.Context) QosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosOutput)
}

type QosOutput struct {
	*pulumi.OutputState
}

func (QosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosOutput)(nil)).Elem()
}

func (o QosOutput) ToQosOutput() QosOutput {
	return o
}

func (o QosOutput) ToQosOutputWithContext(ctx context.Context) QosOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QosOutput{})
}
