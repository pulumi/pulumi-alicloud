// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Click House DBCluster resource.
//
// For information about Click House DBCluster and how to use it, see [What is DBCluster](https://www.alibabacloud.com/product/clickhouse).
//
// > **NOTE:** Available in v1.134.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/clickhouse"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultRegions, err := clickhouse.GetRegions(ctx, &clickhouse.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("default-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId:  pulumi.StringRef(defaultNetworks.Ids[0]),
//				ZoneId: pulumi.StringRef(defaultRegions.Regions[0].ZoneIds[0].ZoneId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = clickhouse.NewDbCluster(ctx, "defaultDbCluster", &clickhouse.DbClusterArgs{
//				DbClusterVersion:     pulumi.String("20.3.10.75"),
//				Category:             pulumi.String("Basic"),
//				DbClusterClass:       pulumi.String("S8"),
//				DbClusterNetworkType: pulumi.String("vpc"),
//				DbNodeGroupCount:     pulumi.Int(1),
//				PaymentType:          pulumi.String("PayAsYouGo"),
//				DbNodeStorage:        pulumi.String("500"),
//				StorageType:          pulumi.String("cloud_essd"),
//				VswitchId:            *pulumi.String(defaultSwitches.Ids[0]),
//				DbClusterAccessWhiteLists: clickhouse.DbClusterDbClusterAccessWhiteListArray{
//					&clickhouse.DbClusterDbClusterAccessWhiteListArgs{
//						DbClusterIpArrayAttribute: pulumi.String("test"),
//						DbClusterIpArrayName:      pulumi.String("test"),
//						SecurityIpList:            pulumi.String("192.168.0.1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Click House DBCluster can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:clickhouse/dbCluster:DbCluster example <id>
//
// ```
type DbCluster struct {
	pulumi.CustomResourceState

	// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
	Category pulumi.StringOutput `pulumi:"category"`
	// (Available in 1.196.0+) - The connection string of the cluster.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The db cluster access white list.
	DbClusterAccessWhiteLists DbClusterDbClusterAccessWhiteListArrayOutput `pulumi:"dbClusterAccessWhiteLists"`
	// The DBCluster class. According to the category, dbClusterClass has two value ranges:
	// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
	// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
	DbClusterClass pulumi.StringOutput `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription pulumi.StringOutput `pulumi:"dbClusterDescription"`
	// The DBCluster network type. Valid values: `vpc`.
	DbClusterNetworkType pulumi.StringOutput `pulumi:"dbClusterNetworkType"`
	// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
	DbClusterVersion pulumi.StringOutput `pulumi:"dbClusterVersion"`
	// The db node group count. The number should between 1 and 48.
	DbNodeGroupCount pulumi.IntOutput `pulumi:"dbNodeGroupCount"`
	// The db node storage.
	DbNodeStorage pulumi.StringOutput `pulumi:"dbNodeStorage"`
	// Key management service KMS key ID.
	EncryptionKey pulumi.StringPtrOutput `pulumi:"encryptionKey"`
	// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
	EncryptionType pulumi.StringPtrOutput `pulumi:"encryptionType"`
	// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
	MaintainTime pulumi.StringOutput `pulumi:"maintainTime"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringOutput `pulumi:"paymentType"`
	// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
	Period pulumi.StringPtrOutput `pulumi:"period"`
	// (Available in 1.196.0+) The connection port of the cluster.
	Port pulumi.StringOutput `pulumi:"port"`
	// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// The used time of DBCluster.
	UsedTime pulumi.StringPtrOutput `pulumi:"usedTime"`
	// The id of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The vswitch id of DBCluster.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
	// The zone ID of the instance.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDbCluster registers a new resource with the given unique name, arguments, and options.
func NewDbCluster(ctx *pulumi.Context,
	name string, args *DbClusterArgs, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.DbClusterClass == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterClass'")
	}
	if args.DbClusterNetworkType == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterNetworkType'")
	}
	if args.DbClusterVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterVersion'")
	}
	if args.DbNodeGroupCount == nil {
		return nil, errors.New("invalid value for required argument 'DbNodeGroupCount'")
	}
	if args.DbNodeStorage == nil {
		return nil, errors.New("invalid value for required argument 'DbNodeStorage'")
	}
	if args.PaymentType == nil {
		return nil, errors.New("invalid value for required argument 'PaymentType'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	var resource DbCluster
	err := ctx.RegisterResource("alicloud:clickhouse/dbCluster:DbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbCluster gets an existing DbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbClusterState, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	var resource DbCluster
	err := ctx.ReadResource("alicloud:clickhouse/dbCluster:DbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbCluster resources.
type dbClusterState struct {
	// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
	Category *string `pulumi:"category"`
	// (Available in 1.196.0+) - The connection string of the cluster.
	ConnectionString *string `pulumi:"connectionString"`
	// The db cluster access white list.
	DbClusterAccessWhiteLists []DbClusterDbClusterAccessWhiteList `pulumi:"dbClusterAccessWhiteLists"`
	// The DBCluster class. According to the category, dbClusterClass has two value ranges:
	// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
	// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
	DbClusterClass *string `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription *string `pulumi:"dbClusterDescription"`
	// The DBCluster network type. Valid values: `vpc`.
	DbClusterNetworkType *string `pulumi:"dbClusterNetworkType"`
	// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
	DbClusterVersion *string `pulumi:"dbClusterVersion"`
	// The db node group count. The number should between 1 and 48.
	DbNodeGroupCount *int `pulumi:"dbNodeGroupCount"`
	// The db node storage.
	DbNodeStorage *string `pulumi:"dbNodeStorage"`
	// Key management service KMS key ID.
	EncryptionKey *string `pulumi:"encryptionKey"`
	// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
	EncryptionType *string `pulumi:"encryptionType"`
	// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
	MaintainTime *string `pulumi:"maintainTime"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType *string `pulumi:"paymentType"`
	// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
	Period *string `pulumi:"period"`
	// (Available in 1.196.0+) The connection port of the cluster.
	Port *string `pulumi:"port"`
	// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
	Status *string `pulumi:"status"`
	// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
	StorageType *string `pulumi:"storageType"`
	// The used time of DBCluster.
	UsedTime *string `pulumi:"usedTime"`
	// The id of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// The vswitch id of DBCluster.
	VswitchId *string `pulumi:"vswitchId"`
	// The zone ID of the instance.
	ZoneId *string `pulumi:"zoneId"`
}

type DbClusterState struct {
	// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
	Category pulumi.StringPtrInput
	// (Available in 1.196.0+) - The connection string of the cluster.
	ConnectionString pulumi.StringPtrInput
	// The db cluster access white list.
	DbClusterAccessWhiteLists DbClusterDbClusterAccessWhiteListArrayInput
	// The DBCluster class. According to the category, dbClusterClass has two value ranges:
	// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
	// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
	DbClusterClass pulumi.StringPtrInput
	// The DBCluster description.
	DbClusterDescription pulumi.StringPtrInput
	// The DBCluster network type. Valid values: `vpc`.
	DbClusterNetworkType pulumi.StringPtrInput
	// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
	DbClusterVersion pulumi.StringPtrInput
	// The db node group count. The number should between 1 and 48.
	DbNodeGroupCount pulumi.IntPtrInput
	// The db node storage.
	DbNodeStorage pulumi.StringPtrInput
	// Key management service KMS key ID.
	EncryptionKey pulumi.StringPtrInput
	// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
	EncryptionType pulumi.StringPtrInput
	// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
	MaintainTime pulumi.StringPtrInput
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringPtrInput
	// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
	Period pulumi.StringPtrInput
	// (Available in 1.196.0+) The connection port of the cluster.
	Port pulumi.StringPtrInput
	// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
	Status pulumi.StringPtrInput
	// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
	StorageType pulumi.StringPtrInput
	// The used time of DBCluster.
	UsedTime pulumi.StringPtrInput
	// The id of the VPC.
	VpcId pulumi.StringPtrInput
	// The vswitch id of DBCluster.
	VswitchId pulumi.StringPtrInput
	// The zone ID of the instance.
	ZoneId pulumi.StringPtrInput
}

func (DbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterState)(nil)).Elem()
}

type dbClusterArgs struct {
	// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
	Category string `pulumi:"category"`
	// The db cluster access white list.
	DbClusterAccessWhiteLists []DbClusterDbClusterAccessWhiteList `pulumi:"dbClusterAccessWhiteLists"`
	// The DBCluster class. According to the category, dbClusterClass has two value ranges:
	// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
	// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
	DbClusterClass string `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription *string `pulumi:"dbClusterDescription"`
	// The DBCluster network type. Valid values: `vpc`.
	DbClusterNetworkType string `pulumi:"dbClusterNetworkType"`
	// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
	DbClusterVersion string `pulumi:"dbClusterVersion"`
	// The db node group count. The number should between 1 and 48.
	DbNodeGroupCount int `pulumi:"dbNodeGroupCount"`
	// The db node storage.
	DbNodeStorage string `pulumi:"dbNodeStorage"`
	// Key management service KMS key ID.
	EncryptionKey *string `pulumi:"encryptionKey"`
	// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
	EncryptionType *string `pulumi:"encryptionType"`
	// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
	MaintainTime *string `pulumi:"maintainTime"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType string `pulumi:"paymentType"`
	// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
	Period *string `pulumi:"period"`
	// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
	Status *string `pulumi:"status"`
	// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
	StorageType string `pulumi:"storageType"`
	// The used time of DBCluster.
	UsedTime *string `pulumi:"usedTime"`
	// The id of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// The vswitch id of DBCluster.
	VswitchId *string `pulumi:"vswitchId"`
	// The zone ID of the instance.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DbCluster resource.
type DbClusterArgs struct {
	// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
	Category pulumi.StringInput
	// The db cluster access white list.
	DbClusterAccessWhiteLists DbClusterDbClusterAccessWhiteListArrayInput
	// The DBCluster class. According to the category, dbClusterClass has two value ranges:
	// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
	// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
	DbClusterClass pulumi.StringInput
	// The DBCluster description.
	DbClusterDescription pulumi.StringPtrInput
	// The DBCluster network type. Valid values: `vpc`.
	DbClusterNetworkType pulumi.StringInput
	// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
	DbClusterVersion pulumi.StringInput
	// The db node group count. The number should between 1 and 48.
	DbNodeGroupCount pulumi.IntInput
	// The db node storage.
	DbNodeStorage pulumi.StringInput
	// Key management service KMS key ID.
	EncryptionKey pulumi.StringPtrInput
	// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
	EncryptionType pulumi.StringPtrInput
	// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
	MaintainTime pulumi.StringPtrInput
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringInput
	// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
	Period pulumi.StringPtrInput
	// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
	Status pulumi.StringPtrInput
	// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
	StorageType pulumi.StringInput
	// The used time of DBCluster.
	UsedTime pulumi.StringPtrInput
	// The id of the VPC.
	VpcId pulumi.StringPtrInput
	// The vswitch id of DBCluster.
	VswitchId pulumi.StringPtrInput
	// The zone ID of the instance.
	ZoneId pulumi.StringPtrInput
}

func (DbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterArgs)(nil)).Elem()
}

type DbClusterInput interface {
	pulumi.Input

	ToDbClusterOutput() DbClusterOutput
	ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput
}

func (*DbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (i *DbCluster) ToDbClusterOutput() DbClusterOutput {
	return i.ToDbClusterOutputWithContext(context.Background())
}

func (i *DbCluster) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterOutput)
}

// DbClusterArrayInput is an input type that accepts DbClusterArray and DbClusterArrayOutput values.
// You can construct a concrete instance of `DbClusterArrayInput` via:
//
//	DbClusterArray{ DbClusterArgs{...} }
type DbClusterArrayInput interface {
	pulumi.Input

	ToDbClusterArrayOutput() DbClusterArrayOutput
	ToDbClusterArrayOutputWithContext(context.Context) DbClusterArrayOutput
}

type DbClusterArray []DbClusterInput

func (DbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (i DbClusterArray) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return i.ToDbClusterArrayOutputWithContext(context.Background())
}

func (i DbClusterArray) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterArrayOutput)
}

// DbClusterMapInput is an input type that accepts DbClusterMap and DbClusterMapOutput values.
// You can construct a concrete instance of `DbClusterMapInput` via:
//
//	DbClusterMap{ "key": DbClusterArgs{...} }
type DbClusterMapInput interface {
	pulumi.Input

	ToDbClusterMapOutput() DbClusterMapOutput
	ToDbClusterMapOutputWithContext(context.Context) DbClusterMapOutput
}

type DbClusterMap map[string]DbClusterInput

func (DbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (i DbClusterMap) ToDbClusterMapOutput() DbClusterMapOutput {
	return i.ToDbClusterMapOutputWithContext(context.Background())
}

func (i DbClusterMap) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterMapOutput)
}

type DbClusterOutput struct{ *pulumi.OutputState }

func (DbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (o DbClusterOutput) ToDbClusterOutput() DbClusterOutput {
	return o
}

func (o DbClusterOutput) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return o
}

// The Category of DBCluster. Valid values: `Basic`,`HighAvailability`.
func (o DbClusterOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// (Available in 1.196.0+) - The connection string of the cluster.
func (o DbClusterOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The db cluster access white list.
func (o DbClusterOutput) DbClusterAccessWhiteLists() DbClusterDbClusterAccessWhiteListArrayOutput {
	return o.ApplyT(func(v *DbCluster) DbClusterDbClusterAccessWhiteListArrayOutput { return v.DbClusterAccessWhiteLists }).(DbClusterDbClusterAccessWhiteListArrayOutput)
}

// The DBCluster class. According to the category, dbClusterClass has two value ranges:
// * Under the condition that the category is the `Basic`, Valid values: `LS20`, `LS40`, `LS80`,`S8`, `S16`, `S32`, `S64`,`S80`, `S104`.
// * Under the condition that the category is the `HighAvailability`, Valid values: `LC20`, `LC40`, `LC80`,`C8`, `C16`, `C32`, `C64`, `C80`, `C104`.
func (o DbClusterOutput) DbClusterClass() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterClass }).(pulumi.StringOutput)
}

// The DBCluster description.
func (o DbClusterOutput) DbClusterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterDescription }).(pulumi.StringOutput)
}

// The DBCluster network type. Valid values: `vpc`.
func (o DbClusterOutput) DbClusterNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterNetworkType }).(pulumi.StringOutput)
}

// The DBCluster version. Valid values: `20.3.10.75`, `20.8.7.15`, `21.8.10.19`, `22.8.5.29`. **NOTE:** `19.15.2.2` is no longer supported. From version 1.191.0, `dbClusterVersion` can be set to `22.8.5.29`.
func (o DbClusterOutput) DbClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterVersion }).(pulumi.StringOutput)
}

// The db node group count. The number should between 1 and 48.
func (o DbClusterOutput) DbNodeGroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.DbNodeGroupCount }).(pulumi.IntOutput)
}

// The db node storage.
func (o DbClusterOutput) DbNodeStorage() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbNodeStorage }).(pulumi.StringOutput)
}

// Key management service KMS key ID.
func (o DbClusterOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

// Currently only supports ECS disk encryption, with a value of CloudDisk, not encrypted when empty.
func (o DbClusterOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// The maintenance window of DBCluster. Valid format: `hh:mmZ-hh:mm Z`.
func (o DbClusterOutput) MaintainTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.MaintainTime }).(pulumi.StringOutput)
}

// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
func (o DbClusterOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.PaymentType }).(pulumi.StringOutput)
}

// Pre-paid cluster of the pay-as-you-go cycle. Valid values: `Month`, `Year`.
func (o DbClusterOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.Period }).(pulumi.StringPtrOutput)
}

// (Available in 1.196.0+) The connection port of the cluster.
func (o DbClusterOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// The status of the resource. Valid values: `Running`,`Creating`,`Deleting`,`Restarting`,`Preparing`.
func (o DbClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Storage type of DBCluster. Valid values: `cloudEssd`, `cloudEfficiency`, `cloudEssdPl2`, `cloudEssdPl3`.
func (o DbClusterOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// The used time of DBCluster.
func (o DbClusterOutput) UsedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.UsedTime }).(pulumi.StringPtrOutput)
}

// The id of the VPC.
func (o DbClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The vswitch id of DBCluster.
func (o DbClusterOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

// The zone ID of the instance.
func (o DbClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DbClusterArrayOutput struct{ *pulumi.OutputState }

func (DbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) Index(i pulumi.IntInput) DbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].([]*DbCluster)[vs[1].(int)]
	}).(DbClusterOutput)
}

type DbClusterMapOutput struct{ *pulumi.OutputState }

func (DbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (o DbClusterMapOutput) ToDbClusterMapOutput() DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) MapIndex(k pulumi.StringInput) DbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].(map[string]*DbCluster)[vs[1].(string)]
	}).(DbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterInput)(nil)).Elem(), &DbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterArrayInput)(nil)).Elem(), DbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterMapInput)(nil)).Elem(), DbClusterMap{})
	pulumi.RegisterOutputType(DbClusterOutput{})
	pulumi.RegisterOutputType(DbClusterArrayOutput{})
	pulumi.RegisterOutputType(DbClusterMapOutput{})
}
