// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Nas Access Rule resource.
//
// When NAS is activated, the Default VPC Permission Group is automatically generated. It allows all IP addresses in a VPC to access the mount point with full permissions. Full permissions include Read/Write permission with no restriction on root users.
//
// > **NOTE:** Available in v1.34.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/nas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooAccessGroup, err := nas.NewAccessGroup(ctx, "fooAccessGroup", &nas.AccessGroupArgs{
// 			Type:        pulumi.String("Vpc"),
// 			Description: pulumi.String("tf-testAccNasConfig"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = nas.NewAccessRule(ctx, "fooAccessRule", &nas.AccessRuleArgs{
// 			AccessGroupName: fooAccessGroup.ID(),
// 			SourceCidrIp:    pulumi.String("168.1.1.0/16"),
// 			RwAccessType:    pulumi.String("RDWR"),
// 			UserAccessType:  pulumi.String("no_squash"),
// 			Priority:        pulumi.Int(2),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Nas Access Rule can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:nas/accessRule:AccessRule foo tf-testAccNasConfigName:1
// ```
type AccessRule struct {
	pulumi.CustomResourceState

	// Permission group name.
	AccessGroupName pulumi.StringOutput `pulumi:"accessGroupName"`
	// The nas access rule ID.
	AccessRuleId pulumi.StringOutput `pulumi:"accessRuleId"`
	// Priority level. Range: 1-100. Default value: 1.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType pulumi.StringPtrOutput `pulumi:"rwAccessType"`
	// Address or address segment.
	SourceCidrIp pulumi.StringOutput `pulumi:"sourceCidrIp"`
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType pulumi.StringPtrOutput `pulumi:"userAccessType"`
}

// NewAccessRule registers a new resource with the given unique name, arguments, and options.
func NewAccessRule(ctx *pulumi.Context,
	name string, args *AccessRuleArgs, opts ...pulumi.ResourceOption) (*AccessRule, error) {
	if args == nil || args.AccessGroupName == nil {
		return nil, errors.New("missing required argument 'AccessGroupName'")
	}
	if args == nil || args.SourceCidrIp == nil {
		return nil, errors.New("missing required argument 'SourceCidrIp'")
	}
	if args == nil {
		args = &AccessRuleArgs{}
	}
	var resource AccessRule
	err := ctx.RegisterResource("alicloud:nas/accessRule:AccessRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessRule gets an existing AccessRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessRuleState, opts ...pulumi.ResourceOption) (*AccessRule, error) {
	var resource AccessRule
	err := ctx.ReadResource("alicloud:nas/accessRule:AccessRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessRule resources.
type accessRuleState struct {
	// Permission group name.
	AccessGroupName *string `pulumi:"accessGroupName"`
	// The nas access rule ID.
	AccessRuleId *string `pulumi:"accessRuleId"`
	// Priority level. Range: 1-100. Default value: 1.
	Priority *int `pulumi:"priority"`
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType *string `pulumi:"rwAccessType"`
	// Address or address segment.
	SourceCidrIp *string `pulumi:"sourceCidrIp"`
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType *string `pulumi:"userAccessType"`
}

type AccessRuleState struct {
	// Permission group name.
	AccessGroupName pulumi.StringPtrInput
	// The nas access rule ID.
	AccessRuleId pulumi.StringPtrInput
	// Priority level. Range: 1-100. Default value: 1.
	Priority pulumi.IntPtrInput
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType pulumi.StringPtrInput
	// Address or address segment.
	SourceCidrIp pulumi.StringPtrInput
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType pulumi.StringPtrInput
}

func (AccessRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessRuleState)(nil)).Elem()
}

type accessRuleArgs struct {
	// Permission group name.
	AccessGroupName string `pulumi:"accessGroupName"`
	// Priority level. Range: 1-100. Default value: 1.
	Priority *int `pulumi:"priority"`
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType *string `pulumi:"rwAccessType"`
	// Address or address segment.
	SourceCidrIp string `pulumi:"sourceCidrIp"`
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType *string `pulumi:"userAccessType"`
}

// The set of arguments for constructing a AccessRule resource.
type AccessRuleArgs struct {
	// Permission group name.
	AccessGroupName pulumi.StringInput
	// Priority level. Range: 1-100. Default value: 1.
	Priority pulumi.IntPtrInput
	// Read-write permission type: RDWR (default), RDONLY.
	RwAccessType pulumi.StringPtrInput
	// Address or address segment.
	SourceCidrIp pulumi.StringInput
	// User permission type: noSquash (default), root_squash, all_squash.
	UserAccessType pulumi.StringPtrInput
}

func (AccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessRuleArgs)(nil)).Elem()
}

type AccessRuleInput interface {
	pulumi.Input

	ToAccessRuleOutput() AccessRuleOutput
	ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput
}

func (AccessRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRule)(nil)).Elem()
}

func (i AccessRule) ToAccessRuleOutput() AccessRuleOutput {
	return i.ToAccessRuleOutputWithContext(context.Background())
}

func (i AccessRule) ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRuleOutput)
}

type AccessRuleOutput struct {
	*pulumi.OutputState
}

func (AccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRuleOutput)(nil)).Elem()
}

func (o AccessRuleOutput) ToAccessRuleOutput() AccessRuleOutput {
	return o
}

func (o AccessRuleOutput) ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AccessRuleOutput{})
}
