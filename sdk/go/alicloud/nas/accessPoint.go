// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a NAS Access Point resource.
//
// For information about NAS Access Point and how to use it, see [What is Access Point](https://www.alibabacloud.com/help/zh/nas/developer-reference/api-nas-2017-06-26-createaccesspoint).
//
// > **NOTE:** Available since v1.224.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			regionId := "cn-hangzhou"
//			if param := cfg.Get("regionId"); param != "" {
//				regionId = param
//			}
//			azone := "cn-hangzhou-g"
//			if param := cfg.Get("azone"); param != "" {
//				azone = param
//			}
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultkyVC70, err := vpc.NewNetwork(ctx, "defaultkyVC70", &vpc.NetworkArgs{
//				CidrBlock:   pulumi.String("172.16.0.0/12"),
//				Description: pulumi.String("接入点测试noRootDirectory"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultoZAPmO, err := vpc.NewSwitch(ctx, "defaultoZAPmO", &vpc.SwitchArgs{
//				VpcId:     defaultkyVC70.ID(),
//				ZoneId:    pulumi.String(_default.Zones[0].Id),
//				CidrBlock: pulumi.String("172.16.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			defaultBbc7ev, err := nas.NewAccessGroup(ctx, "defaultBbc7ev", &nas.AccessGroupArgs{
//				AccessGroupType: pulumi.String("Vpc"),
//				AccessGroupName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
//				FileSystemType:  pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultVtUpDh, err := nas.NewFileSystem(ctx, "defaultVtUpDh", &nas.FileSystemArgs{
//				StorageType:    pulumi.String("Performance"),
//				ZoneId:         pulumi.String(azone),
//				EncryptType:    pulumi.Int(0),
//				ProtocolType:   pulumi.String("NFS"),
//				FileSystemType: pulumi.String("standard"),
//				Description:    pulumi.String("AccessPointnoRootDirectory"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewAccessPoint(ctx, "default", &nas.AccessPointArgs{
//				VpcId:           defaultkyVC70.ID(),
//				AccessGroup:     defaultBbc7ev.AccessGroupName,
//				VswitchId:       defaultoZAPmO.ID(),
//				FileSystemId:    defaultVtUpDh.ID(),
//				AccessPointName: pulumi.String(name),
//				PosixUser: &nas.AccessPointPosixUserArgs{
//					PosixGroupId: pulumi.Int(123),
//					PosixUserId:  pulumi.Int(123),
//				},
//				RootPathPermission: &nas.AccessPointRootPathPermissionArgs{
//					OwnerGroupId: pulumi.Int(1),
//					OwnerUserId:  pulumi.Int(1),
//					Permission:   pulumi.String("0777"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NAS Access Point can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:nas/accessPoint:AccessPoint example <file_system_id>:<access_point_id>
// ```
type AccessPoint struct {
	pulumi.CustomResourceState

	// The permission group name.
	AccessGroup pulumi.StringOutput `pulumi:"accessGroup"`
	// Access point ID.
	AccessPointId pulumi.StringOutput `pulumi:"accessPointId"`
	// The Access Point Name.
	AccessPointName pulumi.StringPtrOutput `pulumi:"accessPointName"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether to enable the RAM policy.
	EnabledRam pulumi.BoolPtrOutput `pulumi:"enabledRam"`
	// The ID of the file system.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// The Posix user. See `posixUser` below.
	PosixUser AccessPointPosixUserOutput `pulumi:"posixUser"`
	// The root directory.
	RootPath pulumi.StringOutput `pulumi:"rootPath"`
	// Root permissions. See `rootPathPermission` below.
	RootPathPermission AccessPointRootPathPermissionOutput `pulumi:"rootPathPermission"`
	// Current access point state.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The vSwitch ID.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewAccessPoint(ctx *pulumi.Context,
	name string, args *AccessPointArgs, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessGroup == nil {
		return nil, errors.New("invalid value for required argument 'AccessGroup'")
	}
	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPoint
	err := ctx.RegisterResource("alicloud:nas/accessPoint:AccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPoint gets an existing AccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointState, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	var resource AccessPoint
	err := ctx.ReadResource("alicloud:nas/accessPoint:AccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPoint resources.
type accessPointState struct {
	// The permission group name.
	AccessGroup *string `pulumi:"accessGroup"`
	// Access point ID.
	AccessPointId *string `pulumi:"accessPointId"`
	// The Access Point Name.
	AccessPointName *string `pulumi:"accessPointName"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// Whether to enable the RAM policy.
	EnabledRam *bool `pulumi:"enabledRam"`
	// The ID of the file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The Posix user. See `posixUser` below.
	PosixUser *AccessPointPosixUser `pulumi:"posixUser"`
	// The root directory.
	RootPath *string `pulumi:"rootPath"`
	// Root permissions. See `rootPathPermission` below.
	RootPathPermission *AccessPointRootPathPermission `pulumi:"rootPathPermission"`
	// Current access point state.
	Status *string `pulumi:"status"`
	// The ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// The vSwitch ID.
	VswitchId *string `pulumi:"vswitchId"`
}

type AccessPointState struct {
	// The permission group name.
	AccessGroup pulumi.StringPtrInput
	// Access point ID.
	AccessPointId pulumi.StringPtrInput
	// The Access Point Name.
	AccessPointName pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// Whether to enable the RAM policy.
	EnabledRam pulumi.BoolPtrInput
	// The ID of the file system.
	FileSystemId pulumi.StringPtrInput
	// The Posix user. See `posixUser` below.
	PosixUser AccessPointPosixUserPtrInput
	// The root directory.
	RootPath pulumi.StringPtrInput
	// Root permissions. See `rootPathPermission` below.
	RootPathPermission AccessPointRootPathPermissionPtrInput
	// Current access point state.
	Status pulumi.StringPtrInput
	// The ID of the VPC.
	VpcId pulumi.StringPtrInput
	// The vSwitch ID.
	VswitchId pulumi.StringPtrInput
}

func (AccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointState)(nil)).Elem()
}

type accessPointArgs struct {
	// The permission group name.
	AccessGroup string `pulumi:"accessGroup"`
	// The Access Point Name.
	AccessPointName *string `pulumi:"accessPointName"`
	// Whether to enable the RAM policy.
	EnabledRam *bool `pulumi:"enabledRam"`
	// The ID of the file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The Posix user. See `posixUser` below.
	PosixUser *AccessPointPosixUser `pulumi:"posixUser"`
	// The root directory.
	RootPath *string `pulumi:"rootPath"`
	// Root permissions. See `rootPathPermission` below.
	RootPathPermission *AccessPointRootPathPermission `pulumi:"rootPathPermission"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The vSwitch ID.
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a AccessPoint resource.
type AccessPointArgs struct {
	// The permission group name.
	AccessGroup pulumi.StringInput
	// The Access Point Name.
	AccessPointName pulumi.StringPtrInput
	// Whether to enable the RAM policy.
	EnabledRam pulumi.BoolPtrInput
	// The ID of the file system.
	FileSystemId pulumi.StringInput
	// The Posix user. See `posixUser` below.
	PosixUser AccessPointPosixUserPtrInput
	// The root directory.
	RootPath pulumi.StringPtrInput
	// Root permissions. See `rootPathPermission` below.
	RootPathPermission AccessPointRootPathPermissionPtrInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
	// The vSwitch ID.
	VswitchId pulumi.StringInput
}

func (AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointArgs)(nil)).Elem()
}

type AccessPointInput interface {
	pulumi.Input

	ToAccessPointOutput() AccessPointOutput
	ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput
}

func (*AccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPoint)(nil)).Elem()
}

func (i *AccessPoint) ToAccessPointOutput() AccessPointOutput {
	return i.ToAccessPointOutputWithContext(context.Background())
}

func (i *AccessPoint) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointOutput)
}

// AccessPointArrayInput is an input type that accepts AccessPointArray and AccessPointArrayOutput values.
// You can construct a concrete instance of `AccessPointArrayInput` via:
//
//	AccessPointArray{ AccessPointArgs{...} }
type AccessPointArrayInput interface {
	pulumi.Input

	ToAccessPointArrayOutput() AccessPointArrayOutput
	ToAccessPointArrayOutputWithContext(context.Context) AccessPointArrayOutput
}

type AccessPointArray []AccessPointInput

func (AccessPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPoint)(nil)).Elem()
}

func (i AccessPointArray) ToAccessPointArrayOutput() AccessPointArrayOutput {
	return i.ToAccessPointArrayOutputWithContext(context.Background())
}

func (i AccessPointArray) ToAccessPointArrayOutputWithContext(ctx context.Context) AccessPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointArrayOutput)
}

// AccessPointMapInput is an input type that accepts AccessPointMap and AccessPointMapOutput values.
// You can construct a concrete instance of `AccessPointMapInput` via:
//
//	AccessPointMap{ "key": AccessPointArgs{...} }
type AccessPointMapInput interface {
	pulumi.Input

	ToAccessPointMapOutput() AccessPointMapOutput
	ToAccessPointMapOutputWithContext(context.Context) AccessPointMapOutput
}

type AccessPointMap map[string]AccessPointInput

func (AccessPointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPoint)(nil)).Elem()
}

func (i AccessPointMap) ToAccessPointMapOutput() AccessPointMapOutput {
	return i.ToAccessPointMapOutputWithContext(context.Background())
}

func (i AccessPointMap) ToAccessPointMapOutputWithContext(ctx context.Context) AccessPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointMapOutput)
}

type AccessPointOutput struct{ *pulumi.OutputState }

func (AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPoint)(nil)).Elem()
}

func (o AccessPointOutput) ToAccessPointOutput() AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return o
}

// The permission group name.
func (o AccessPointOutput) AccessGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.AccessGroup }).(pulumi.StringOutput)
}

// Access point ID.
func (o AccessPointOutput) AccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.AccessPointId }).(pulumi.StringOutput)
}

// The Access Point Name.
func (o AccessPointOutput) AccessPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringPtrOutput { return v.AccessPointName }).(pulumi.StringPtrOutput)
}

// Creation time.
func (o AccessPointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether to enable the RAM policy.
func (o AccessPointOutput) EnabledRam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.BoolPtrOutput { return v.EnabledRam }).(pulumi.BoolPtrOutput)
}

// The ID of the file system.
func (o AccessPointOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The Posix user. See `posixUser` below.
func (o AccessPointOutput) PosixUser() AccessPointPosixUserOutput {
	return o.ApplyT(func(v *AccessPoint) AccessPointPosixUserOutput { return v.PosixUser }).(AccessPointPosixUserOutput)
}

// The root directory.
func (o AccessPointOutput) RootPath() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.RootPath }).(pulumi.StringOutput)
}

// Root permissions. See `rootPathPermission` below.
func (o AccessPointOutput) RootPathPermission() AccessPointRootPathPermissionOutput {
	return o.ApplyT(func(v *AccessPoint) AccessPointRootPathPermissionOutput { return v.RootPathPermission }).(AccessPointRootPathPermissionOutput)
}

// Current access point state.
func (o AccessPointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the VPC.
func (o AccessPointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The vSwitch ID.
func (o AccessPointOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

type AccessPointArrayOutput struct{ *pulumi.OutputState }

func (AccessPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPoint)(nil)).Elem()
}

func (o AccessPointArrayOutput) ToAccessPointArrayOutput() AccessPointArrayOutput {
	return o
}

func (o AccessPointArrayOutput) ToAccessPointArrayOutputWithContext(ctx context.Context) AccessPointArrayOutput {
	return o
}

func (o AccessPointArrayOutput) Index(i pulumi.IntInput) AccessPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPoint {
		return vs[0].([]*AccessPoint)[vs[1].(int)]
	}).(AccessPointOutput)
}

type AccessPointMapOutput struct{ *pulumi.OutputState }

func (AccessPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPoint)(nil)).Elem()
}

func (o AccessPointMapOutput) ToAccessPointMapOutput() AccessPointMapOutput {
	return o
}

func (o AccessPointMapOutput) ToAccessPointMapOutputWithContext(ctx context.Context) AccessPointMapOutput {
	return o
}

func (o AccessPointMapOutput) MapIndex(k pulumi.StringInput) AccessPointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPoint {
		return vs[0].(map[string]*AccessPoint)[vs[1].(string)]
	}).(AccessPointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointInput)(nil)).Elem(), &AccessPoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointArrayInput)(nil)).Elem(), AccessPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointMapInput)(nil)).Elem(), AccessPointMap{})
	pulumi.RegisterOutputType(AccessPointOutput{})
	pulumi.RegisterOutputType(AccessPointArrayOutput{})
	pulumi.RegisterOutputType(AccessPointMapOutput{})
}
