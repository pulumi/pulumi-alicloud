// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a File Storage (NAS) File System resource.
//
// File System Instance.
//
// For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).
//
// > **NOTE:** Available since v1.33.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := nas.GetZones(ctx, &nas.GetZonesArgs{
//				FileSystemType: pulumi.StringRef("standard"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "default", &nas.FileSystemArgs{
//				ProtocolType:   pulumi.String("NFS"),
//				StorageType:    pulumi.String("Capacity"),
//				Description:    pulumi.String(name),
//				EncryptType:    pulumi.Int(1),
//				FileSystemType: pulumi.String("standard"),
//				RecycleBin: &nas.FileSystemRecycleBinArgs{
//					Status:       pulumi.String("Enable"),
//					ReservedDays: pulumi.Int(10),
//				},
//				NfsAcl: &nas.FileSystemNfsAclArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				ZoneId: pulumi.String(_default.Zones[0].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// File Storage (NAS) File System can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:nas/fileSystem:FileSystem example <id>
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// File system capacity.
	//
	// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
	//
	// For optional values, please refer to the actual specifications on the purchase page:
	// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
	// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
	// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
	// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// CreateTime
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// File system description.
	//
	// Restrictions:
	// - 2~128 English or Chinese characters in length.
	// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
	// - Can contain numbers, colons (:), underscores (_), or dashes (-).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the file system is encrypted.
	//
	// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
	//
	// Value:
	// - 0 (default): not encrypted.
	// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
	// - 2: User management key. You can manage keys only when FileSystemType = extreme.
	EncryptType pulumi.IntOutput `pulumi:"encryptType"`
	// File system type.
	//
	// Value:
	// - standard (default): Universal NAS
	// - extreme: extreme NAS
	// - cpfs: file storage CPFS
	FileSystemType pulumi.StringOutput `pulumi:"fileSystemType"`
	// String of keytab file content encrypted by base64
	Keytab pulumi.StringPtrOutput `pulumi:"keytab"`
	// String of the keytab file content encrypted by MD5
	KeytabMd5 pulumi.StringPtrOutput `pulumi:"keytabMd5"`
	// The ID of the KMS key.
	// This parameter is required only when EncryptType = 2.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// NFS ACL See `nfsAcl` below.
	NfsAcl FileSystemNfsAclOutput `pulumi:"nfsAcl"`
	// Option. See `options` below.
	Options FileSystemOptionsOutput `pulumi:"options"`
	// File transfer protocol type.
	// - When FileSystemType = standard, the values are NFS and SMB.
	// - When FileSystemType = extreme, the value is NFS.
	// - When FileSystemType = cpfs, the value is cpfs.
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// Recycle Bin See `recycleBin` below.
	RecycleBin FileSystemRecycleBinOutput `pulumi:"recycleBin"`
	// RegionId
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// SMB ACL See `smbAcl` below.
	SmbAcl FileSystemSmbAclOutput `pulumi:"smbAcl"`
	// Only extreme NAS is supported.
	//
	// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// File system status. Includes:(such as creating a mount point) can only be performed when the file system is in the Running state.
	Status pulumi.StringOutput `pulumi:"status"`
	// The storage type.
	// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
	// - When FileSystemType = extreme, the value is standard or advance.
	// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// Label information collection.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the VPC network.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// The ID of the switch.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
	// The zone ID.
	//
	// The usable area refers to the physical area where power and network are independent of each other in the same area.
	//
	// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
	//
	// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
	//
	// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("alicloud:nas/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("alicloud:nas/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// File system capacity.
	//
	// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
	//
	// For optional values, please refer to the actual specifications on the purchase page:
	// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
	// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
	// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
	// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
	Capacity *int `pulumi:"capacity"`
	// CreateTime
	CreateTime *string `pulumi:"createTime"`
	// File system description.
	//
	// Restrictions:
	// - 2~128 English or Chinese characters in length.
	// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
	// - Can contain numbers, colons (:), underscores (_), or dashes (-).
	Description *string `pulumi:"description"`
	// Whether the file system is encrypted.
	//
	// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
	//
	// Value:
	// - 0 (default): not encrypted.
	// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
	// - 2: User management key. You can manage keys only when FileSystemType = extreme.
	EncryptType *int `pulumi:"encryptType"`
	// File system type.
	//
	// Value:
	// - standard (default): Universal NAS
	// - extreme: extreme NAS
	// - cpfs: file storage CPFS
	FileSystemType *string `pulumi:"fileSystemType"`
	// String of keytab file content encrypted by base64
	Keytab *string `pulumi:"keytab"`
	// String of the keytab file content encrypted by MD5
	KeytabMd5 *string `pulumi:"keytabMd5"`
	// The ID of the KMS key.
	// This parameter is required only when EncryptType = 2.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// NFS ACL See `nfsAcl` below.
	NfsAcl *FileSystemNfsAcl `pulumi:"nfsAcl"`
	// Option. See `options` below.
	Options *FileSystemOptions `pulumi:"options"`
	// File transfer protocol type.
	// - When FileSystemType = standard, the values are NFS and SMB.
	// - When FileSystemType = extreme, the value is NFS.
	// - When FileSystemType = cpfs, the value is cpfs.
	ProtocolType *string `pulumi:"protocolType"`
	// Recycle Bin See `recycleBin` below.
	RecycleBin *FileSystemRecycleBin `pulumi:"recycleBin"`
	// RegionId
	RegionId *string `pulumi:"regionId"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// SMB ACL See `smbAcl` below.
	SmbAcl *FileSystemSmbAcl `pulumi:"smbAcl"`
	// Only extreme NAS is supported.
	//
	// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
	SnapshotId *string `pulumi:"snapshotId"`
	// File system status. Includes:(such as creating a mount point) can only be performed when the file system is in the Running state.
	Status *string `pulumi:"status"`
	// The storage type.
	// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
	// - When FileSystemType = extreme, the value is standard or advance.
	// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
	StorageType *string `pulumi:"storageType"`
	// Label information collection.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPC network.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the switch.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VswitchId *string `pulumi:"vswitchId"`
	// The zone ID.
	//
	// The usable area refers to the physical area where power and network are independent of each other in the same area.
	//
	// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
	//
	// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
	//
	// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
	ZoneId *string `pulumi:"zoneId"`
}

type FileSystemState struct {
	// File system capacity.
	//
	// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
	//
	// For optional values, please refer to the actual specifications on the purchase page:
	// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
	// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
	// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
	// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
	Capacity pulumi.IntPtrInput
	// CreateTime
	CreateTime pulumi.StringPtrInput
	// File system description.
	//
	// Restrictions:
	// - 2~128 English or Chinese characters in length.
	// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
	// - Can contain numbers, colons (:), underscores (_), or dashes (-).
	Description pulumi.StringPtrInput
	// Whether the file system is encrypted.
	//
	// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
	//
	// Value:
	// - 0 (default): not encrypted.
	// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
	// - 2: User management key. You can manage keys only when FileSystemType = extreme.
	EncryptType pulumi.IntPtrInput
	// File system type.
	//
	// Value:
	// - standard (default): Universal NAS
	// - extreme: extreme NAS
	// - cpfs: file storage CPFS
	FileSystemType pulumi.StringPtrInput
	// String of keytab file content encrypted by base64
	Keytab pulumi.StringPtrInput
	// String of the keytab file content encrypted by MD5
	KeytabMd5 pulumi.StringPtrInput
	// The ID of the KMS key.
	// This parameter is required only when EncryptType = 2.
	KmsKeyId pulumi.StringPtrInput
	// NFS ACL See `nfsAcl` below.
	NfsAcl FileSystemNfsAclPtrInput
	// Option. See `options` below.
	Options FileSystemOptionsPtrInput
	// File transfer protocol type.
	// - When FileSystemType = standard, the values are NFS and SMB.
	// - When FileSystemType = extreme, the value is NFS.
	// - When FileSystemType = cpfs, the value is cpfs.
	ProtocolType pulumi.StringPtrInput
	// Recycle Bin See `recycleBin` below.
	RecycleBin FileSystemRecycleBinPtrInput
	// RegionId
	RegionId pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// SMB ACL See `smbAcl` below.
	SmbAcl FileSystemSmbAclPtrInput
	// Only extreme NAS is supported.
	//
	// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
	SnapshotId pulumi.StringPtrInput
	// File system status. Includes:(such as creating a mount point) can only be performed when the file system is in the Running state.
	Status pulumi.StringPtrInput
	// The storage type.
	// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
	// - When FileSystemType = extreme, the value is standard or advance.
	// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
	StorageType pulumi.StringPtrInput
	// Label information collection.
	Tags pulumi.StringMapInput
	// The ID of the VPC network.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VpcId pulumi.StringPtrInput
	// The ID of the switch.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VswitchId pulumi.StringPtrInput
	// The zone ID.
	//
	// The usable area refers to the physical area where power and network are independent of each other in the same area.
	//
	// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
	//
	// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
	//
	// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// File system capacity.
	//
	// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
	//
	// For optional values, please refer to the actual specifications on the purchase page:
	// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
	// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
	// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
	// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
	Capacity *int `pulumi:"capacity"`
	// File system description.
	//
	// Restrictions:
	// - 2~128 English or Chinese characters in length.
	// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
	// - Can contain numbers, colons (:), underscores (_), or dashes (-).
	Description *string `pulumi:"description"`
	// Whether the file system is encrypted.
	//
	// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
	//
	// Value:
	// - 0 (default): not encrypted.
	// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
	// - 2: User management key. You can manage keys only when FileSystemType = extreme.
	EncryptType *int `pulumi:"encryptType"`
	// File system type.
	//
	// Value:
	// - standard (default): Universal NAS
	// - extreme: extreme NAS
	// - cpfs: file storage CPFS
	FileSystemType *string `pulumi:"fileSystemType"`
	// String of keytab file content encrypted by base64
	Keytab *string `pulumi:"keytab"`
	// String of the keytab file content encrypted by MD5
	KeytabMd5 *string `pulumi:"keytabMd5"`
	// The ID of the KMS key.
	// This parameter is required only when EncryptType = 2.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// NFS ACL See `nfsAcl` below.
	NfsAcl *FileSystemNfsAcl `pulumi:"nfsAcl"`
	// Option. See `options` below.
	Options *FileSystemOptions `pulumi:"options"`
	// File transfer protocol type.
	// - When FileSystemType = standard, the values are NFS and SMB.
	// - When FileSystemType = extreme, the value is NFS.
	// - When FileSystemType = cpfs, the value is cpfs.
	ProtocolType string `pulumi:"protocolType"`
	// Recycle Bin See `recycleBin` below.
	RecycleBin *FileSystemRecycleBin `pulumi:"recycleBin"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// SMB ACL See `smbAcl` below.
	SmbAcl *FileSystemSmbAcl `pulumi:"smbAcl"`
	// Only extreme NAS is supported.
	//
	// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
	SnapshotId *string `pulumi:"snapshotId"`
	// The storage type.
	// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
	// - When FileSystemType = extreme, the value is standard or advance.
	// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
	StorageType string `pulumi:"storageType"`
	// Label information collection.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPC network.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the switch.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VswitchId *string `pulumi:"vswitchId"`
	// The zone ID.
	//
	// The usable area refers to the physical area where power and network are independent of each other in the same area.
	//
	// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
	//
	// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
	//
	// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// File system capacity.
	//
	// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
	//
	// For optional values, please refer to the actual specifications on the purchase page:
	// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
	// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
	// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
	// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
	Capacity pulumi.IntPtrInput
	// File system description.
	//
	// Restrictions:
	// - 2~128 English or Chinese characters in length.
	// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
	// - Can contain numbers, colons (:), underscores (_), or dashes (-).
	Description pulumi.StringPtrInput
	// Whether the file system is encrypted.
	//
	// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
	//
	// Value:
	// - 0 (default): not encrypted.
	// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
	// - 2: User management key. You can manage keys only when FileSystemType = extreme.
	EncryptType pulumi.IntPtrInput
	// File system type.
	//
	// Value:
	// - standard (default): Universal NAS
	// - extreme: extreme NAS
	// - cpfs: file storage CPFS
	FileSystemType pulumi.StringPtrInput
	// String of keytab file content encrypted by base64
	Keytab pulumi.StringPtrInput
	// String of the keytab file content encrypted by MD5
	KeytabMd5 pulumi.StringPtrInput
	// The ID of the KMS key.
	// This parameter is required only when EncryptType = 2.
	KmsKeyId pulumi.StringPtrInput
	// NFS ACL See `nfsAcl` below.
	NfsAcl FileSystemNfsAclPtrInput
	// Option. See `options` below.
	Options FileSystemOptionsPtrInput
	// File transfer protocol type.
	// - When FileSystemType = standard, the values are NFS and SMB.
	// - When FileSystemType = extreme, the value is NFS.
	// - When FileSystemType = cpfs, the value is cpfs.
	ProtocolType pulumi.StringInput
	// Recycle Bin See `recycleBin` below.
	RecycleBin FileSystemRecycleBinPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// SMB ACL See `smbAcl` below.
	SmbAcl FileSystemSmbAclPtrInput
	// Only extreme NAS is supported.
	//
	// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
	SnapshotId pulumi.StringPtrInput
	// The storage type.
	// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
	// - When FileSystemType = extreme, the value is standard or advance.
	// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
	StorageType pulumi.StringInput
	// Label information collection.
	Tags pulumi.StringMapInput
	// The ID of the VPC network.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VpcId pulumi.StringPtrInput
	// The ID of the switch.
	// This parameter must be configured when FileSystemType = cpfs.
	// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
	VswitchId pulumi.StringPtrInput
	// The zone ID.
	//
	// The usable area refers to the physical area where power and network are independent of each other in the same area.
	//
	// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
	//
	// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
	//
	// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// File system capacity.
//
// Unit: GiB, required and valid when FileSystemType = extreme or cpfs.
//
// For optional values, please refer to the actual specifications on the purchase page:
// -[Fast NAS Pay-As-You-Go Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme_post#/buy)
// -[Fast NAS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_extreme#/buy)
// -[Parallel File System CPFS Pay-As-You-Go Purchase Page](https://common-buy.aliyun.com/? commodityCode=nas_cpfs_post#/buy)
// -[Parallel File System CPFS Package Monthly Purchase Page](https://common-buy.aliyun.com/? commodityCode=cpfs#/buy)
func (o FileSystemOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// CreateTime
func (o FileSystemOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// File system description.
//
// Restrictions:
// - 2~128 English or Chinese characters in length.
// - Must start with upper and lower case letters or Chinese, and cannot start with'http: // 'and'https.
// - Can contain numbers, colons (:), underscores (_), or dashes (-).
func (o FileSystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the file system is encrypted.
//
// Use the KMS service hosting key to encrypt and store the file system disk data. When reading and writing encrypted data, there is no need to decrypt it.
//
// Value:
// - 0 (default): not encrypted.
// - 1:NAS managed key. NAS managed keys are supported when FileSystemType = standard or extreme.
// - 2: User management key. You can manage keys only when FileSystemType = extreme.
func (o FileSystemOutput) EncryptType() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.EncryptType }).(pulumi.IntOutput)
}

// File system type.
//
// Value:
// - standard (default): Universal NAS
// - extreme: extreme NAS
// - cpfs: file storage CPFS
func (o FileSystemOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemType }).(pulumi.StringOutput)
}

// String of keytab file content encrypted by base64
func (o FileSystemOutput) Keytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.Keytab }).(pulumi.StringPtrOutput)
}

// String of the keytab file content encrypted by MD5
func (o FileSystemOutput) KeytabMd5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.KeytabMd5 }).(pulumi.StringPtrOutput)
}

// The ID of the KMS key.
// This parameter is required only when EncryptType = 2.
func (o FileSystemOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// NFS ACL See `nfsAcl` below.
func (o FileSystemOutput) NfsAcl() FileSystemNfsAclOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemNfsAclOutput { return v.NfsAcl }).(FileSystemNfsAclOutput)
}

// Option. See `options` below.
func (o FileSystemOutput) Options() FileSystemOptionsOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemOptionsOutput { return v.Options }).(FileSystemOptionsOutput)
}

// File transfer protocol type.
// - When FileSystemType = standard, the values are NFS and SMB.
// - When FileSystemType = extreme, the value is NFS.
// - When FileSystemType = cpfs, the value is cpfs.
func (o FileSystemOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// Recycle Bin See `recycleBin` below.
func (o FileSystemOutput) RecycleBin() FileSystemRecycleBinOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemRecycleBinOutput { return v.RecycleBin }).(FileSystemRecycleBinOutput)
}

// RegionId
func (o FileSystemOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o FileSystemOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// SMB ACL See `smbAcl` below.
func (o FileSystemOutput) SmbAcl() FileSystemSmbAclOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemSmbAclOutput { return v.SmbAcl }).(FileSystemSmbAclOutput)
}

// Only extreme NAS is supported.
//
// > **NOTE:** A file system is created from a snapshot. The version of the created file system is the same as that of the snapshot source file system. For example, if the source file system version of the snapshot is 1 and you need to create A file system of version 2, you can first create A file system A from the snapshot, then create A file system B that meets the configuration of version 2, copy the data in file system A to file system B, and migrate the business to file system B after the copy is completed.
func (o FileSystemOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// File system status. Includes:(such as creating a mount point) can only be performed when the file system is in the Running state.
func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The storage type.
// - When FileSystemType = standard, the values are Performance, Capacity, and Premium.
// - When FileSystemType = extreme, the value is standard or advance.
// - When FileSystemType = cpfs, the values are advance_100(100MB/s/TiB baseline) and advance_200(200MB/s/TiB baseline).
func (o FileSystemOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// Label information collection.
func (o FileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the VPC network.
// This parameter must be configured when FileSystemType = cpfs.
// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
func (o FileSystemOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The ID of the switch.
// This parameter must be configured when FileSystemType = cpfs.
// When the FileSystemType is standard or extreme, this parameter is reserved for the interface and has not taken effect yet. You do not need to configure it.
func (o FileSystemOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

// The zone ID.
//
// The usable area refers to the physical area where power and network are independent of each other in the same area.
//
// When the FileSystemType is set to standard, this parameter is optional. By default, a zone that meets the conditions is randomly selected based on the ProtocolType and StorageType configurations. This parameter is required when FileSystemType = extreme or FileSystemType = cpfs.
//
// > **NOTE:** - file systems in different zones in the same region communicate with ECS cloud servers.
//
// > **NOTE:** - We recommend that the file system and the ECS instance belong to the same zone to avoid cross-zone latency.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
