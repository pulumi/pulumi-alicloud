// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nas File System resource.
//
// After activating NAS, you can create a file system and purchase a storage package for it in the NAS console. The NAS console also enables you to view the file system details and remove unnecessary file systems.
//
// For information about NAS file system and how to use it, see [Manage file systems](https://www.alibabacloud.com/help/doc-detail/27530.htm)
//
// > **NOTE:** Available in v1.33.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nas.NewFileSystem(ctx, "foo", &nas.FileSystemArgs{
//				Description:  pulumi.String("tf-testAccNasConfig"),
//				EncryptType:  pulumi.Int(1),
//				ProtocolType: pulumi.String("NFS"),
//				StorageType:  pulumi.String("Performance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nas.NewFileSystem(ctx, "foo", &nas.FileSystemArgs{
//				Capacity:       pulumi.Int(100),
//				Description:    pulumi.String("tf-testAccNasConfig"),
//				FileSystemType: pulumi.String("extreme"),
//				ProtocolType:   pulumi.String("NFS"),
//				StorageType:    pulumi.String("standard"),
//				ZoneId:         pulumi.String("cn-hangzhou-f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultZones, err := nas.GetZones(ctx, &nas.GetZonesArgs{
//				FileSystemType: pulumi.StringRef("cpfs"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("default-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId:  pulumi.StringRef(defaultNetworks.Ids[0]),
//				ZoneId: pulumi.StringRef(defaultZones.Zones[0].ZoneId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "foo", &nas.FileSystemArgs{
//				ProtocolType:   pulumi.String("cpfs"),
//				StorageType:    pulumi.String("advance_200"),
//				FileSystemType: pulumi.String("cpfs"),
//				Capacity:       pulumi.Int(3600),
//				Description:    pulumi.String("tf-testacc"),
//				ZoneId:         *pulumi.String(defaultZones.Zones[0].ZoneId),
//				VpcId:          *pulumi.String(defaultNetworks.Ids[0]),
//				VswitchId:      *pulumi.String(defaultSwitches.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Nas File System can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:nas/fileSystem:FileSystem foo 1337849c59
//
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
	// Unit: gib; **Note**: The minimum value is 100.
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// The File System description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
	// * Valid values:
	EncryptType pulumi.IntPtrOutput `pulumi:"encryptType"`
	// the type of the file system.
	// Valid values:
	// `standard` (Default),
	// `extreme`,
	// `cpfs`.
	FileSystemType pulumi.StringPtrOutput `pulumi:"fileSystemType"`
	// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The protocol type of the file system.
	// Valid values:
	// `NFS`,
	// `SMB` (Available when the `fileSystemType` is `standard`),
	// `cpfs` (Available when the `fileSystemType` is `cpfs`).
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// The storage type of the file System.
	// * Valid values:
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
	// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	var resource FileSystem
	err := ctx.RegisterResource("alicloud:nas/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("alicloud:nas/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
	// Unit: gib; **Note**: The minimum value is 100.
	Capacity *int `pulumi:"capacity"`
	// The File System description.
	Description *string `pulumi:"description"`
	// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
	// * Valid values:
	EncryptType *int `pulumi:"encryptType"`
	// the type of the file system.
	// Valid values:
	// `standard` (Default),
	// `extreme`,
	// `cpfs`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The protocol type of the file system.
	// Valid values:
	// `NFS`,
	// `SMB` (Available when the `fileSystemType` is `standard`),
	// `cpfs` (Available when the `fileSystemType` is `cpfs`).
	ProtocolType *string `pulumi:"protocolType"`
	// The storage type of the file System.
	// * Valid values:
	StorageType *string `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
	VpcId *string `pulumi:"vpcId"`
	// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
	VswitchId *string `pulumi:"vswitchId"`
	// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
	ZoneId *string `pulumi:"zoneId"`
}

type FileSystemState struct {
	// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
	// Unit: gib; **Note**: The minimum value is 100.
	Capacity pulumi.IntPtrInput
	// The File System description.
	Description pulumi.StringPtrInput
	// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
	// * Valid values:
	EncryptType pulumi.IntPtrInput
	// the type of the file system.
	// Valid values:
	// `standard` (Default),
	// `extreme`,
	// `cpfs`.
	FileSystemType pulumi.StringPtrInput
	// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
	KmsKeyId pulumi.StringPtrInput
	// The protocol type of the file system.
	// Valid values:
	// `NFS`,
	// `SMB` (Available when the `fileSystemType` is `standard`),
	// `cpfs` (Available when the `fileSystemType` is `cpfs`).
	ProtocolType pulumi.StringPtrInput
	// The storage type of the file System.
	// * Valid values:
	StorageType pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
	VpcId pulumi.StringPtrInput
	// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
	VswitchId pulumi.StringPtrInput
	// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
	// Unit: gib; **Note**: The minimum value is 100.
	Capacity *int `pulumi:"capacity"`
	// The File System description.
	Description *string `pulumi:"description"`
	// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
	// * Valid values:
	EncryptType *int `pulumi:"encryptType"`
	// the type of the file system.
	// Valid values:
	// `standard` (Default),
	// `extreme`,
	// `cpfs`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The protocol type of the file system.
	// Valid values:
	// `NFS`,
	// `SMB` (Available when the `fileSystemType` is `standard`),
	// `cpfs` (Available when the `fileSystemType` is `cpfs`).
	ProtocolType string `pulumi:"protocolType"`
	// The storage type of the file System.
	// * Valid values:
	StorageType string `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
	VpcId *string `pulumi:"vpcId"`
	// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
	VswitchId *string `pulumi:"vswitchId"`
	// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
	// Unit: gib; **Note**: The minimum value is 100.
	Capacity pulumi.IntPtrInput
	// The File System description.
	Description pulumi.StringPtrInput
	// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
	// * Valid values:
	EncryptType pulumi.IntPtrInput
	// the type of the file system.
	// Valid values:
	// `standard` (Default),
	// `extreme`,
	// `cpfs`.
	FileSystemType pulumi.StringPtrInput
	// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
	KmsKeyId pulumi.StringPtrInput
	// The protocol type of the file system.
	// Valid values:
	// `NFS`,
	// `SMB` (Available when the `fileSystemType` is `standard`),
	// `cpfs` (Available when the `fileSystemType` is `cpfs`).
	ProtocolType pulumi.StringInput
	// The storage type of the file System.
	// * Valid values:
	StorageType pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
	VpcId pulumi.StringPtrInput
	// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
	VswitchId pulumi.StringPtrInput
	// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// The capacity of the file system. The `capacity` is required when the `fileSystemType` is `extreme`.
// Unit: gib; **Note**: The minimum value is 100.
func (o FileSystemOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// The File System description.
func (o FileSystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the file system is encrypted. Using kms service escrow key to encrypt and store the file system data. When reading and writing encrypted data, there is no need to decrypt.
// * Valid values:
func (o FileSystemOutput) EncryptType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.EncryptType }).(pulumi.IntPtrOutput)
}

// the type of the file system.
// Valid values:
// `standard` (Default),
// `extreme`,
// `cpfs`.
func (o FileSystemOutput) FileSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.FileSystemType }).(pulumi.StringPtrOutput)
}

// The id of the KMS key. The `kmsKeyId` is required when the `encryptType` is `2`.
func (o FileSystemOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The protocol type of the file system.
// Valid values:
// `NFS`,
// `SMB` (Available when the `fileSystemType` is `standard`),
// `cpfs` (Available when the `fileSystemType` is `cpfs`).
func (o FileSystemOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// The storage type of the file System.
// * Valid values:
func (o FileSystemOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o FileSystemOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The id of the VPC. The `vpcId` is required when the `fileSystemType` is `cpfs`.
func (o FileSystemOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The id of the vSwitch. The `vswitchId` is required when the `fileSystemType` is `cpfs`.
func (o FileSystemOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

// The available zones information that supports nas.When FileSystemType=standard, this parameter is not required. **Note:** By default, a qualified availability zone is randomly selected according to the `protocolType` and `storageType` configuration.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
