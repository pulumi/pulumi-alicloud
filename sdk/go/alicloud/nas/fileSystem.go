// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a File Storage (NAS) File System resource.
//
// For information about File Storage (NAS) File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/en/nas/developer-reference/api-nas-2017-06-26-createfilesystem).
//
// > **NOTE:** Available since v1.33.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := nas.GetZones(ctx, &nas.GetZonesArgs{
//				FileSystemType: pulumi.StringRef("standard"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "default", &nas.FileSystemArgs{
//				ProtocolType:   pulumi.String("NFS"),
//				StorageType:    pulumi.String("Capacity"),
//				Description:    pulumi.String(name),
//				EncryptType:    pulumi.Int(1),
//				FileSystemType: pulumi.String("standard"),
//				RecycleBin: &nas.FileSystemRecycleBinArgs{
//					Status:       pulumi.String("Enable"),
//					ReservedDays: pulumi.Int(10),
//				},
//				NfsAcl: &nas.FileSystemNfsAclArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				ZoneId: pulumi.String(_default.Zones[0].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := nas.GetZones(ctx, &nas.GetZonesArgs{
//				FileSystemType: pulumi.StringRef("extreme"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "default", &nas.FileSystemArgs{
//				ProtocolType:   pulumi.String("NFS"),
//				StorageType:    pulumi.String("standard"),
//				Capacity:       pulumi.Int(100),
//				Description:    pulumi.String(name),
//				EncryptType:    pulumi.Int(1),
//				FileSystemType: pulumi.String("extreme"),
//				ZoneId:         pulumi.String(_default.Zones[0].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := nas.GetZones(ctx, &nas.GetZonesArgs{
//				FileSystemType: pulumi.StringRef("cpfs"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.17.3.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("172.17.3.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      pulumi.String(_default.Zones[1].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "default", &nas.FileSystemArgs{
//				ProtocolType:   pulumi.String("cpfs"),
//				StorageType:    pulumi.String("advance_100"),
//				Capacity:       pulumi.Int(5000),
//				Description:    pulumi.String(name),
//				FileSystemType: pulumi.String("cpfs"),
//				VswitchId:      defaultSwitch.ID(),
//				VpcId:          defaultNetwork.ID(),
//				ZoneId:         pulumi.String(_default.Zones[1].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// File Storage (NAS) File System can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:nas/fileSystem:FileSystem example <id>
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// (Available since v1.236.0) The time when the file system was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the file system.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
	EncryptType pulumi.IntPtrOutput `pulumi:"encryptType"`
	// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
	FileSystemType pulumi.StringOutput `pulumi:"fileSystemType"`
	// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The NFS ACL feature of the file system. See `nfsAcl` below.
	// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
	NfsAcl FileSystemNfsAclOutput `pulumi:"nfsAcl"`
	// The protocol type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// The recycle bin feature of the file system. See `recycleBin` below.
	// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
	RecycleBin FileSystemRecycleBinOutput `pulumi:"recycleBin"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// (Available since v1.236.0) The status of the File System.
	Status pulumi.StringOutput `pulumi:"status"`
	// The storage type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
	// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
	// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("alicloud:nas/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("alicloud:nas/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
	Capacity *int `pulumi:"capacity"`
	// (Available since v1.236.0) The time when the file system was created.
	CreateTime *string `pulumi:"createTime"`
	// The description of the file system.
	Description *string `pulumi:"description"`
	// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
	EncryptType *int `pulumi:"encryptType"`
	// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The NFS ACL feature of the file system. See `nfsAcl` below.
	// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
	NfsAcl *FileSystemNfsAcl `pulumi:"nfsAcl"`
	// The protocol type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
	ProtocolType *string `pulumi:"protocolType"`
	// The recycle bin feature of the file system. See `recycleBin` below.
	// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
	RecycleBin *FileSystemRecycleBin `pulumi:"recycleBin"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
	SnapshotId *string `pulumi:"snapshotId"`
	// (Available since v1.236.0) The status of the File System.
	Status *string `pulumi:"status"`
	// The storage type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
	// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
	StorageType *string `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
	VswitchId *string `pulumi:"vswitchId"`
	// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
	ZoneId *string `pulumi:"zoneId"`
}

type FileSystemState struct {
	// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
	Capacity pulumi.IntPtrInput
	// (Available since v1.236.0) The time when the file system was created.
	CreateTime pulumi.StringPtrInput
	// The description of the file system.
	Description pulumi.StringPtrInput
	// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
	EncryptType pulumi.IntPtrInput
	// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
	FileSystemType pulumi.StringPtrInput
	// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
	KmsKeyId pulumi.StringPtrInput
	// The NFS ACL feature of the file system. See `nfsAcl` below.
	// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
	NfsAcl FileSystemNfsAclPtrInput
	// The protocol type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
	ProtocolType pulumi.StringPtrInput
	// The recycle bin feature of the file system. See `recycleBin` below.
	// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
	RecycleBin FileSystemRecycleBinPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
	SnapshotId pulumi.StringPtrInput
	// (Available since v1.236.0) The status of the File System.
	Status pulumi.StringPtrInput
	// The storage type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
	// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
	StorageType pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
	VpcId pulumi.StringPtrInput
	// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
	VswitchId pulumi.StringPtrInput
	// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
	Capacity *int `pulumi:"capacity"`
	// The description of the file system.
	Description *string `pulumi:"description"`
	// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
	EncryptType *int `pulumi:"encryptType"`
	// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The NFS ACL feature of the file system. See `nfsAcl` below.
	// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
	NfsAcl *FileSystemNfsAcl `pulumi:"nfsAcl"`
	// The protocol type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
	ProtocolType string `pulumi:"protocolType"`
	// The recycle bin feature of the file system. See `recycleBin` below.
	// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
	RecycleBin *FileSystemRecycleBin `pulumi:"recycleBin"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
	SnapshotId *string `pulumi:"snapshotId"`
	// The storage type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
	// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
	StorageType string `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
	VswitchId *string `pulumi:"vswitchId"`
	// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
	Capacity pulumi.IntPtrInput
	// The description of the file system.
	Description pulumi.StringPtrInput
	// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
	EncryptType pulumi.IntPtrInput
	// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
	FileSystemType pulumi.StringPtrInput
	// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
	KmsKeyId pulumi.StringPtrInput
	// The NFS ACL feature of the file system. See `nfsAcl` below.
	// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
	NfsAcl FileSystemNfsAclPtrInput
	// The protocol type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
	ProtocolType pulumi.StringInput
	// The recycle bin feature of the file system. See `recycleBin` below.
	// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
	RecycleBin FileSystemRecycleBinPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
	SnapshotId pulumi.StringPtrInput
	// The storage type of the file system. Valid values:
	// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
	// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
	// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
	// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
	StorageType pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
	VpcId pulumi.StringPtrInput
	// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
	VswitchId pulumi.StringPtrInput
	// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// The capacity of the file system. Unit: GiB. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `capacity` must be set.
func (o FileSystemOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// (Available since v1.236.0) The time when the file system was created.
func (o FileSystemOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the file system.
func (o FileSystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether to encrypt data in the file system. Default value: `0`. Valid values:
func (o FileSystemOutput) EncryptType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.EncryptType }).(pulumi.IntPtrOutput)
}

// The type of the file system. Default value: `standard`. Valid values: `standard`, `extreme`, `cpfs`.
func (o FileSystemOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemType }).(pulumi.StringOutput)
}

// The ID of the KMS-managed key. **Note:** If `encryptType` is set to `2`, `kmsKeyId` must be set.
func (o FileSystemOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The NFS ACL feature of the file system. See `nfsAcl` below.
// > **NOTE:** `nfsAcl` takes effect only if `fileSystemType` is set to `standard`.
func (o FileSystemOutput) NfsAcl() FileSystemNfsAclOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemNfsAclOutput { return v.NfsAcl }).(FileSystemNfsAclOutput)
}

// The protocol type of the file system. Valid values:
// - If `fileSystemType` is set to `standard`. Valid values: `NFS`, `SMB`.
// - If `fileSystemType` is set to `extreme`. Valid values: `NFS`.
// - If `fileSystemType` is set to `cpfs`. Valid values: `cpfs`.
func (o FileSystemOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// The recycle bin feature of the file system. See `recycleBin` below.
// > **NOTE:** `recycleBin` takes effect only if `fileSystemType` is set to `standard`.
func (o FileSystemOutput) RecycleBin() FileSystemRecycleBinOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemRecycleBinOutput { return v.RecycleBin }).(FileSystemRecycleBinOutput)
}

// The ID of the resource group.
func (o FileSystemOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The ID of the snapshot. **NOTE:** `snapshotId` takes effect only if `fileSystemType` is set to `extreme`.
func (o FileSystemOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// (Available since v1.236.0) The status of the File System.
func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The storage type of the file system. Valid values:
// - If `fileSystemType` is set to `standard`. Valid values: `Performance`, `Capacity`, `Premium`.
// - If `fileSystemType` is set to `extreme`. Valid values: `standard`, `advance`.
// - If `fileSystemType` is set to `cpfs`. Valid values: `advance100`, `advance200`.
// > **NOTE:** From version 1.140.0, `storageType` can be set to `standard`, `advance`. From version 1.153.0, `storageType` can be set to `advance100`, `advance200`. From version 1.236.0, `storageType` can be set to `Premium`.
func (o FileSystemOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o FileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the VPC. **NOTE:** `vpcId` takes effect only if `fileSystemType` is set to `cpfs`.
func (o FileSystemOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The ID of the vSwitch. **NOTE:** `vswitchId` takes effect only if `fileSystemType` is set to `cpfs`.
func (o FileSystemOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

// The ID of the zone. **Note:** If `fileSystemType` is set to `extreme` or `cpfs`, `zoneId` must be set.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
