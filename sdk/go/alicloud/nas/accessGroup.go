// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a NAS Access Group resource.
//
// In NAS, the permission group acts as a whitelist that allows you to restrict file system access. You can allow specified IP addresses or CIDR blocks to access the file system, and assign different levels of access permission to different IP addresses or CIDR blocks by adding rules to the permission group.
// For information about NAS Access Group and how to use it, see [What is NAS Access Group](https://www.alibabacloud.com/help/en/doc-detail/27534)
//
// > **NOTE:** Available in v1.33.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/nas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nas.NewAccessGroup(ctx, "foo", &nas.AccessGroupArgs{
// 			Description: pulumi.String("test_AccessG"),
// 			Type:        pulumi.String("Classic"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Example after v1.92.0
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/nas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nas.NewAccessGroup(ctx, "foo", &nas.AccessGroupArgs{
// 			AccessGroupName: pulumi.String("CreateAccessGroup"),
// 			AccessGroupType: pulumi.String("Vpc"),
// 			Description:     pulumi.String("test_AccessG"),
// 			FileSystemType:  pulumi.String("extreme"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// NAS Access Group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:nas/accessGroup:AccessGroup foo tf_testAccNasConfig:standard
// ```
type AccessGroup struct {
	pulumi.CustomResourceState

	// A Name of one Access Group.
	AccessGroupName pulumi.StringOutput `pulumi:"accessGroupName"`
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	AccessGroupType pulumi.StringOutput `pulumi:"accessGroupType"`
	// The Access Group description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The type of file system. Valid values: `standard` and `extreme`. Default to `standard`. Note that the extreme only support Vpc Network.
	FileSystemType pulumi.StringPtrOutput `pulumi:"fileSystemType"`
	// Replaced by `accessGroupName` after version 1.92.0.
	Name pulumi.StringOutput `pulumi:"name"`
	// Replaced by `accessGroupType` after version 1.92.0.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	if args == nil {
		args = &AccessGroupArgs{}
	}
	var resource AccessGroup
	err := ctx.RegisterResource("alicloud:nas/accessGroup:AccessGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGroupState, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	var resource AccessGroup
	err := ctx.ReadResource("alicloud:nas/accessGroup:AccessGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGroup resources.
type accessGroupState struct {
	// A Name of one Access Group.
	AccessGroupName *string `pulumi:"accessGroupName"`
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	AccessGroupType *string `pulumi:"accessGroupType"`
	// The Access Group description.
	Description *string `pulumi:"description"`
	// The type of file system. Valid values: `standard` and `extreme`. Default to `standard`. Note that the extreme only support Vpc Network.
	FileSystemType *string `pulumi:"fileSystemType"`
	// Replaced by `accessGroupName` after version 1.92.0.
	Name *string `pulumi:"name"`
	// Replaced by `accessGroupType` after version 1.92.0.
	Type *string `pulumi:"type"`
}

type AccessGroupState struct {
	// A Name of one Access Group.
	AccessGroupName pulumi.StringPtrInput
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	AccessGroupType pulumi.StringPtrInput
	// The Access Group description.
	Description pulumi.StringPtrInput
	// The type of file system. Valid values: `standard` and `extreme`. Default to `standard`. Note that the extreme only support Vpc Network.
	FileSystemType pulumi.StringPtrInput
	// Replaced by `accessGroupName` after version 1.92.0.
	Name pulumi.StringPtrInput
	// Replaced by `accessGroupType` after version 1.92.0.
	Type pulumi.StringPtrInput
}

func (AccessGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupState)(nil)).Elem()
}

type accessGroupArgs struct {
	// A Name of one Access Group.
	AccessGroupName *string `pulumi:"accessGroupName"`
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	AccessGroupType *string `pulumi:"accessGroupType"`
	// The Access Group description.
	Description *string `pulumi:"description"`
	// The type of file system. Valid values: `standard` and `extreme`. Default to `standard`. Note that the extreme only support Vpc Network.
	FileSystemType *string `pulumi:"fileSystemType"`
	// Replaced by `accessGroupName` after version 1.92.0.
	Name *string `pulumi:"name"`
	// Replaced by `accessGroupType` after version 1.92.0.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// A Name of one Access Group.
	AccessGroupName pulumi.StringPtrInput
	// A Type of one Access Group. Valid values: `Vpc` and `Classic`.
	AccessGroupType pulumi.StringPtrInput
	// The Access Group description.
	Description pulumi.StringPtrInput
	// The type of file system. Valid values: `standard` and `extreme`. Default to `standard`. Note that the extreme only support Vpc Network.
	FileSystemType pulumi.StringPtrInput
	// Replaced by `accessGroupName` after version 1.92.0.
	Name pulumi.StringPtrInput
	// Replaced by `accessGroupType` after version 1.92.0.
	Type pulumi.StringPtrInput
}

func (AccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupArgs)(nil)).Elem()
}

type AccessGroupInput interface {
	pulumi.Input

	ToAccessGroupOutput() AccessGroupOutput
	ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput
}

func (AccessGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessGroup)(nil)).Elem()
}

func (i AccessGroup) ToAccessGroupOutput() AccessGroupOutput {
	return i.ToAccessGroupOutputWithContext(context.Background())
}

func (i AccessGroup) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupOutput)
}

type AccessGroupOutput struct {
	*pulumi.OutputState
}

func (AccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessGroupOutput)(nil)).Elem()
}

func (o AccessGroupOutput) ToAccessGroupOutput() AccessGroupOutput {
	return o
}

func (o AccessGroupOutput) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AccessGroupOutput{})
}
