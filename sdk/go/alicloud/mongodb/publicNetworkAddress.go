// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Alicloud MongoDB public network address resource.
//
// For information about MongoDB public network address and how to use it, see [Allocate Public Network Address for MongoDB](https://www.alibabacloud.com/help/en/mongodb/getting-started/apply-for-a-public-endpoint-for-an-apsaradb-for-mongodb-instance-optional).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mongodb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := mongodb.GetZones(ctx, &mongodb.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			index := len(_default.Zones).ApplyT(func(length int) (float64, error) {
//				return length - 1, nil
//			}).(pulumi.Float64Output)
//			zoneId := _default.Zones[index].Id
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("10.0.0.0/8"),
//				VpcName:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VpcId:     defaultNetwork.ID(),
//				ZoneId:    pulumi.String(zoneId),
//				CidrBlock: pulumi.String("10.0.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := mongodb.NewInstance(ctx, "default", &mongodb.InstanceArgs{
//				EngineVersion:     pulumi.String("4.4"),
//				StorageType:       pulumi.String("cloud_essd1"),
//				VswitchId:         defaultSwitch.ID(),
//				DbInstanceStorage: pulumi.Int(20),
//				VpcId:             defaultNetwork.ID(),
//				DbInstanceClass:   pulumi.String("mdb.shard.4x.large.d"),
//				StorageEngine:     pulumi.String("WiredTiger"),
//				NetworkType:       pulumi.String("VPC"),
//				ZoneId:            pulumi.String(zoneId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewPublicNetworkAddress(ctx, "default", &mongodb.PublicNetworkAddressArgs{
//				DbInstanceId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB public network address can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:mongodb/publicNetworkAddress:PublicNetworkAddress example <id>
// ```
type PublicNetworkAddress struct {
	pulumi.CustomResourceState

	// The instance ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// Replica set instance information.
	ReplicaSets PublicNetworkAddressReplicaSetArrayOutput `pulumi:"replicaSets"`
}

// NewPublicNetworkAddress registers a new resource with the given unique name, arguments, and options.
func NewPublicNetworkAddress(ctx *pulumi.Context,
	name string, args *PublicNetworkAddressArgs, opts ...pulumi.ResourceOption) (*PublicNetworkAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicNetworkAddress
	err := ctx.RegisterResource("alicloud:mongodb/publicNetworkAddress:PublicNetworkAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicNetworkAddress gets an existing PublicNetworkAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicNetworkAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicNetworkAddressState, opts ...pulumi.ResourceOption) (*PublicNetworkAddress, error) {
	var resource PublicNetworkAddress
	err := ctx.ReadResource("alicloud:mongodb/publicNetworkAddress:PublicNetworkAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicNetworkAddress resources.
type publicNetworkAddressState struct {
	// The instance ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// Replica set instance information.
	ReplicaSets []PublicNetworkAddressReplicaSet `pulumi:"replicaSets"`
}

type PublicNetworkAddressState struct {
	// The instance ID.
	DbInstanceId pulumi.StringPtrInput
	// Replica set instance information.
	ReplicaSets PublicNetworkAddressReplicaSetArrayInput
}

func (PublicNetworkAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicNetworkAddressState)(nil)).Elem()
}

type publicNetworkAddressArgs struct {
	// The instance ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
}

// The set of arguments for constructing a PublicNetworkAddress resource.
type PublicNetworkAddressArgs struct {
	// The instance ID.
	DbInstanceId pulumi.StringInput
}

func (PublicNetworkAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicNetworkAddressArgs)(nil)).Elem()
}

type PublicNetworkAddressInput interface {
	pulumi.Input

	ToPublicNetworkAddressOutput() PublicNetworkAddressOutput
	ToPublicNetworkAddressOutputWithContext(ctx context.Context) PublicNetworkAddressOutput
}

func (*PublicNetworkAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkAddress)(nil)).Elem()
}

func (i *PublicNetworkAddress) ToPublicNetworkAddressOutput() PublicNetworkAddressOutput {
	return i.ToPublicNetworkAddressOutputWithContext(context.Background())
}

func (i *PublicNetworkAddress) ToPublicNetworkAddressOutputWithContext(ctx context.Context) PublicNetworkAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkAddressOutput)
}

// PublicNetworkAddressArrayInput is an input type that accepts PublicNetworkAddressArray and PublicNetworkAddressArrayOutput values.
// You can construct a concrete instance of `PublicNetworkAddressArrayInput` via:
//
//	PublicNetworkAddressArray{ PublicNetworkAddressArgs{...} }
type PublicNetworkAddressArrayInput interface {
	pulumi.Input

	ToPublicNetworkAddressArrayOutput() PublicNetworkAddressArrayOutput
	ToPublicNetworkAddressArrayOutputWithContext(context.Context) PublicNetworkAddressArrayOutput
}

type PublicNetworkAddressArray []PublicNetworkAddressInput

func (PublicNetworkAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicNetworkAddress)(nil)).Elem()
}

func (i PublicNetworkAddressArray) ToPublicNetworkAddressArrayOutput() PublicNetworkAddressArrayOutput {
	return i.ToPublicNetworkAddressArrayOutputWithContext(context.Background())
}

func (i PublicNetworkAddressArray) ToPublicNetworkAddressArrayOutputWithContext(ctx context.Context) PublicNetworkAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkAddressArrayOutput)
}

// PublicNetworkAddressMapInput is an input type that accepts PublicNetworkAddressMap and PublicNetworkAddressMapOutput values.
// You can construct a concrete instance of `PublicNetworkAddressMapInput` via:
//
//	PublicNetworkAddressMap{ "key": PublicNetworkAddressArgs{...} }
type PublicNetworkAddressMapInput interface {
	pulumi.Input

	ToPublicNetworkAddressMapOutput() PublicNetworkAddressMapOutput
	ToPublicNetworkAddressMapOutputWithContext(context.Context) PublicNetworkAddressMapOutput
}

type PublicNetworkAddressMap map[string]PublicNetworkAddressInput

func (PublicNetworkAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicNetworkAddress)(nil)).Elem()
}

func (i PublicNetworkAddressMap) ToPublicNetworkAddressMapOutput() PublicNetworkAddressMapOutput {
	return i.ToPublicNetworkAddressMapOutputWithContext(context.Background())
}

func (i PublicNetworkAddressMap) ToPublicNetworkAddressMapOutputWithContext(ctx context.Context) PublicNetworkAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkAddressMapOutput)
}

type PublicNetworkAddressOutput struct{ *pulumi.OutputState }

func (PublicNetworkAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkAddress)(nil)).Elem()
}

func (o PublicNetworkAddressOutput) ToPublicNetworkAddressOutput() PublicNetworkAddressOutput {
	return o
}

func (o PublicNetworkAddressOutput) ToPublicNetworkAddressOutputWithContext(ctx context.Context) PublicNetworkAddressOutput {
	return o
}

// The instance ID.
func (o PublicNetworkAddressOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicNetworkAddress) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// Replica set instance information.
func (o PublicNetworkAddressOutput) ReplicaSets() PublicNetworkAddressReplicaSetArrayOutput {
	return o.ApplyT(func(v *PublicNetworkAddress) PublicNetworkAddressReplicaSetArrayOutput { return v.ReplicaSets }).(PublicNetworkAddressReplicaSetArrayOutput)
}

type PublicNetworkAddressArrayOutput struct{ *pulumi.OutputState }

func (PublicNetworkAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicNetworkAddress)(nil)).Elem()
}

func (o PublicNetworkAddressArrayOutput) ToPublicNetworkAddressArrayOutput() PublicNetworkAddressArrayOutput {
	return o
}

func (o PublicNetworkAddressArrayOutput) ToPublicNetworkAddressArrayOutputWithContext(ctx context.Context) PublicNetworkAddressArrayOutput {
	return o
}

func (o PublicNetworkAddressArrayOutput) Index(i pulumi.IntInput) PublicNetworkAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicNetworkAddress {
		return vs[0].([]*PublicNetworkAddress)[vs[1].(int)]
	}).(PublicNetworkAddressOutput)
}

type PublicNetworkAddressMapOutput struct{ *pulumi.OutputState }

func (PublicNetworkAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicNetworkAddress)(nil)).Elem()
}

func (o PublicNetworkAddressMapOutput) ToPublicNetworkAddressMapOutput() PublicNetworkAddressMapOutput {
	return o
}

func (o PublicNetworkAddressMapOutput) ToPublicNetworkAddressMapOutputWithContext(ctx context.Context) PublicNetworkAddressMapOutput {
	return o
}

func (o PublicNetworkAddressMapOutput) MapIndex(k pulumi.StringInput) PublicNetworkAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicNetworkAddress {
		return vs[0].(map[string]*PublicNetworkAddress)[vs[1].(string)]
	}).(PublicNetworkAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicNetworkAddressInput)(nil)).Elem(), &PublicNetworkAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicNetworkAddressArrayInput)(nil)).Elem(), PublicNetworkAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicNetworkAddressMapInput)(nil)).Elem(), PublicNetworkAddressMap{})
	pulumi.RegisterOutputType(PublicNetworkAddressOutput{})
	pulumi.RegisterOutputType(PublicNetworkAddressArrayOutput{})
	pulumi.RegisterOutputType(PublicNetworkAddressMapOutput{})
}
