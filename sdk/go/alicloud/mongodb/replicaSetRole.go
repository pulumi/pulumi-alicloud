// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Alicloud MongoDB replica set role resource to modify the connection string of the replica set.
//
// For information about how to modify connection string of MongoDB, see [Modify Connection String](https://alibabacloud.com/help/en/mongodb/user-guide/change-the-endpoint-and-port-of-an-instance).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mongodb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := mongodb.GetZones(ctx, &mongodb.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			index := len(_default.Zones).ApplyT(func(length int) (float64, error) {
//				return length - 1, nil
//			}).(pulumi.Float64Output)
//			zoneId := _default.Zones[index].Id
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("10.0.0.0/8"),
//				VpcName:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VpcId:     defaultNetwork.ID(),
//				ZoneId:    pulumi.String(zoneId),
//				CidrBlock: pulumi.String("10.0.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := mongodb.NewInstance(ctx, "default", &mongodb.InstanceArgs{
//				EngineVersion:     pulumi.String("4.4"),
//				StorageType:       pulumi.String("cloud_essd1"),
//				VswitchId:         defaultSwitch.ID(),
//				DbInstanceStorage: pulumi.Int(20),
//				VpcId:             defaultNetwork.ID(),
//				DbInstanceClass:   pulumi.String("mdb.shard.4x.large.d"),
//				StorageEngine:     pulumi.String("WiredTiger"),
//				NetworkType:       pulumi.String("VPC"),
//				ZoneId:            pulumi.String(zoneId),
//			})
//			if err != nil {
//				return err
//			}
//			defaultPublicNetworkAddress, err := mongodb.NewPublicNetworkAddress(ctx, "default", &mongodb.PublicNetworkAddressArgs{
//				DbInstanceId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// modify private network address.
//			_, err = mongodb.NewReplicaSetRole(ctx, "private", &mongodb.ReplicaSetRoleArgs{
//				DbInstanceId: defaultInstance.ID(),
//				RoleId: pulumi.String(defaultInstance.ReplicaSets.ApplyT(func(replicaSets []mongodb.InstanceReplicaSet) (*string, error) {
//					return &replicaSets[0].RoleId, nil
//				}).(pulumi.StringPtrOutput)),
//				ConnectionPrefix: pulumi.String("test-tf-private-change"),
//				ConnectionPort:   pulumi.Int(3718),
//				NetworkType:      pulumi.String("VPC"),
//			})
//			if err != nil {
//				return err
//			}
//			// modify public network address.
//			_, err = mongodb.NewReplicaSetRole(ctx, "public", &mongodb.ReplicaSetRoleArgs{
//				DbInstanceId: defaultInstance.ID(),
//				RoleId: pulumi.String(defaultPublicNetworkAddress.ReplicaSets.ApplyT(func(replicaSets []mongodb.PublicNetworkAddressReplicaSet) (*string, error) {
//					return &replicaSets[0].RoleId, nil
//				}).(pulumi.StringPtrOutput)),
//				ConnectionPrefix: pulumi.String("test-tf-public-0"),
//				ConnectionPort:   pulumi.Int(3719),
//				NetworkType:      pulumi.String("Public"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB replica set role can be imported using the id, e.g. Composed of instance ID, network type and role ID with format `<db_instance_id>:<network_type>:<role_id>`.
//
// ```sh
// $ pulumi import alicloud:mongodb/replicaSetRole:ReplicaSetRole example <id>
// ```
type ReplicaSetRole struct {
	pulumi.CustomResourceState

	// The connection address of the role.
	ConnectionDomain pulumi.StringOutput `pulumi:"connectionDomain"`
	// The port of the connection string, will be computed if not specified.`
	ConnectionPort pulumi.IntOutput `pulumi:"connectionPort"`
	// The prefix of the connection string, will be computed if not specified.
	ConnectionPrefix pulumi.StringOutput `pulumi:"connectionPrefix"`
	// The instance ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// The network type of the connection string. Valid values:
	// - `VPC`: private network address.
	// - `Public`: public network address.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The role of the related connection string.
	ReplicaSetRole pulumi.StringOutput `pulumi:"replicaSetRole"`
	// The role ID in the replica set.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewReplicaSetRole registers a new resource with the given unique name, arguments, and options.
func NewReplicaSetRole(ctx *pulumi.Context,
	name string, args *ReplicaSetRoleArgs, opts ...pulumi.ResourceOption) (*ReplicaSetRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicaSetRole
	err := ctx.RegisterResource("alicloud:mongodb/replicaSetRole:ReplicaSetRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSetRole gets an existing ReplicaSetRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaSetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaSetRoleState, opts ...pulumi.ResourceOption) (*ReplicaSetRole, error) {
	var resource ReplicaSetRole
	err := ctx.ReadResource("alicloud:mongodb/replicaSetRole:ReplicaSetRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaSetRole resources.
type replicaSetRoleState struct {
	// The connection address of the role.
	ConnectionDomain *string `pulumi:"connectionDomain"`
	// The port of the connection string, will be computed if not specified.`
	ConnectionPort *int `pulumi:"connectionPort"`
	// The prefix of the connection string, will be computed if not specified.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// The instance ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// The network type of the connection string. Valid values:
	// - `VPC`: private network address.
	// - `Public`: public network address.
	NetworkType *string `pulumi:"networkType"`
	// The role of the related connection string.
	ReplicaSetRole *string `pulumi:"replicaSetRole"`
	// The role ID in the replica set.
	RoleId *string `pulumi:"roleId"`
}

type ReplicaSetRoleState struct {
	// The connection address of the role.
	ConnectionDomain pulumi.StringPtrInput
	// The port of the connection string, will be computed if not specified.`
	ConnectionPort pulumi.IntPtrInput
	// The prefix of the connection string, will be computed if not specified.
	ConnectionPrefix pulumi.StringPtrInput
	// The instance ID.
	DbInstanceId pulumi.StringPtrInput
	// The network type of the connection string. Valid values:
	// - `VPC`: private network address.
	// - `Public`: public network address.
	NetworkType pulumi.StringPtrInput
	// The role of the related connection string.
	ReplicaSetRole pulumi.StringPtrInput
	// The role ID in the replica set.
	RoleId pulumi.StringPtrInput
}

func (ReplicaSetRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetRoleState)(nil)).Elem()
}

type replicaSetRoleArgs struct {
	// The port of the connection string, will be computed if not specified.`
	ConnectionPort *int `pulumi:"connectionPort"`
	// The prefix of the connection string, will be computed if not specified.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// The instance ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// The network type of the connection string. Valid values:
	// - `VPC`: private network address.
	// - `Public`: public network address.
	NetworkType string `pulumi:"networkType"`
	// The role ID in the replica set.
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a ReplicaSetRole resource.
type ReplicaSetRoleArgs struct {
	// The port of the connection string, will be computed if not specified.`
	ConnectionPort pulumi.IntPtrInput
	// The prefix of the connection string, will be computed if not specified.
	ConnectionPrefix pulumi.StringPtrInput
	// The instance ID.
	DbInstanceId pulumi.StringInput
	// The network type of the connection string. Valid values:
	// - `VPC`: private network address.
	// - `Public`: public network address.
	NetworkType pulumi.StringInput
	// The role ID in the replica set.
	RoleId pulumi.StringInput
}

func (ReplicaSetRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetRoleArgs)(nil)).Elem()
}

type ReplicaSetRoleInput interface {
	pulumi.Input

	ToReplicaSetRoleOutput() ReplicaSetRoleOutput
	ToReplicaSetRoleOutputWithContext(ctx context.Context) ReplicaSetRoleOutput
}

func (*ReplicaSetRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetRole)(nil)).Elem()
}

func (i *ReplicaSetRole) ToReplicaSetRoleOutput() ReplicaSetRoleOutput {
	return i.ToReplicaSetRoleOutputWithContext(context.Background())
}

func (i *ReplicaSetRole) ToReplicaSetRoleOutputWithContext(ctx context.Context) ReplicaSetRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetRoleOutput)
}

// ReplicaSetRoleArrayInput is an input type that accepts ReplicaSetRoleArray and ReplicaSetRoleArrayOutput values.
// You can construct a concrete instance of `ReplicaSetRoleArrayInput` via:
//
//	ReplicaSetRoleArray{ ReplicaSetRoleArgs{...} }
type ReplicaSetRoleArrayInput interface {
	pulumi.Input

	ToReplicaSetRoleArrayOutput() ReplicaSetRoleArrayOutput
	ToReplicaSetRoleArrayOutputWithContext(context.Context) ReplicaSetRoleArrayOutput
}

type ReplicaSetRoleArray []ReplicaSetRoleInput

func (ReplicaSetRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSetRole)(nil)).Elem()
}

func (i ReplicaSetRoleArray) ToReplicaSetRoleArrayOutput() ReplicaSetRoleArrayOutput {
	return i.ToReplicaSetRoleArrayOutputWithContext(context.Background())
}

func (i ReplicaSetRoleArray) ToReplicaSetRoleArrayOutputWithContext(ctx context.Context) ReplicaSetRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetRoleArrayOutput)
}

// ReplicaSetRoleMapInput is an input type that accepts ReplicaSetRoleMap and ReplicaSetRoleMapOutput values.
// You can construct a concrete instance of `ReplicaSetRoleMapInput` via:
//
//	ReplicaSetRoleMap{ "key": ReplicaSetRoleArgs{...} }
type ReplicaSetRoleMapInput interface {
	pulumi.Input

	ToReplicaSetRoleMapOutput() ReplicaSetRoleMapOutput
	ToReplicaSetRoleMapOutputWithContext(context.Context) ReplicaSetRoleMapOutput
}

type ReplicaSetRoleMap map[string]ReplicaSetRoleInput

func (ReplicaSetRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSetRole)(nil)).Elem()
}

func (i ReplicaSetRoleMap) ToReplicaSetRoleMapOutput() ReplicaSetRoleMapOutput {
	return i.ToReplicaSetRoleMapOutputWithContext(context.Background())
}

func (i ReplicaSetRoleMap) ToReplicaSetRoleMapOutputWithContext(ctx context.Context) ReplicaSetRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetRoleMapOutput)
}

type ReplicaSetRoleOutput struct{ *pulumi.OutputState }

func (ReplicaSetRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSetRole)(nil)).Elem()
}

func (o ReplicaSetRoleOutput) ToReplicaSetRoleOutput() ReplicaSetRoleOutput {
	return o
}

func (o ReplicaSetRoleOutput) ToReplicaSetRoleOutputWithContext(ctx context.Context) ReplicaSetRoleOutput {
	return o
}

// The connection address of the role.
func (o ReplicaSetRoleOutput) ConnectionDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.ConnectionDomain }).(pulumi.StringOutput)
}

// The port of the connection string, will be computed if not specified.`
func (o ReplicaSetRoleOutput) ConnectionPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.IntOutput { return v.ConnectionPort }).(pulumi.IntOutput)
}

// The prefix of the connection string, will be computed if not specified.
func (o ReplicaSetRoleOutput) ConnectionPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.ConnectionPrefix }).(pulumi.StringOutput)
}

// The instance ID.
func (o ReplicaSetRoleOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// The network type of the connection string. Valid values:
// - `VPC`: private network address.
// - `Public`: public network address.
func (o ReplicaSetRoleOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The role of the related connection string.
func (o ReplicaSetRoleOutput) ReplicaSetRole() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.ReplicaSetRole }).(pulumi.StringOutput)
}

// The role ID in the replica set.
func (o ReplicaSetRoleOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSetRole) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type ReplicaSetRoleArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSetRole)(nil)).Elem()
}

func (o ReplicaSetRoleArrayOutput) ToReplicaSetRoleArrayOutput() ReplicaSetRoleArrayOutput {
	return o
}

func (o ReplicaSetRoleArrayOutput) ToReplicaSetRoleArrayOutputWithContext(ctx context.Context) ReplicaSetRoleArrayOutput {
	return o
}

func (o ReplicaSetRoleArrayOutput) Index(i pulumi.IntInput) ReplicaSetRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicaSetRole {
		return vs[0].([]*ReplicaSetRole)[vs[1].(int)]
	}).(ReplicaSetRoleOutput)
}

type ReplicaSetRoleMapOutput struct{ *pulumi.OutputState }

func (ReplicaSetRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSetRole)(nil)).Elem()
}

func (o ReplicaSetRoleMapOutput) ToReplicaSetRoleMapOutput() ReplicaSetRoleMapOutput {
	return o
}

func (o ReplicaSetRoleMapOutput) ToReplicaSetRoleMapOutputWithContext(ctx context.Context) ReplicaSetRoleMapOutput {
	return o
}

func (o ReplicaSetRoleMapOutput) MapIndex(k pulumi.StringInput) ReplicaSetRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicaSetRole {
		return vs[0].(map[string]*ReplicaSetRole)[vs[1].(string)]
	}).(ReplicaSetRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetRoleInput)(nil)).Elem(), &ReplicaSetRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetRoleArrayInput)(nil)).Elem(), ReplicaSetRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetRoleMapInput)(nil)).Elem(), ReplicaSetRoleMap{})
	pulumi.RegisterOutputType(ReplicaSetRoleOutput{})
	pulumi.RegisterOutputType(ReplicaSetRoleArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetRoleMapOutput{})
}
