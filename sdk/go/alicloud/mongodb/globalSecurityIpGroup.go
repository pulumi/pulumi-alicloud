// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Mongodb Global Security IP Group resource.
//
// Whitelist Template Resources.
//
// For information about Mongodb Global Security IP Group and how to use it, see [What is Global Security IP Group](https://next.api.alibabacloud.com/document/Dds/2015-12-01/CreateGlobalSecurityIPGroup).
//
// > **NOTE:** Available since v1.257.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/mongodb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraformexample"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := mongodb.NewGlobalSecurityIpGroup(ctx, "default", &mongodb.GlobalSecurityIpGroupArgs{
//				GlobalIgName:         pulumi.String(name),
//				GlobalSecurityIpList: pulumi.String("192.168.1.1,192.168.1.2,192.168.1.3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mongodb Global Security IP Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:mongodb/globalSecurityIpGroup:GlobalSecurityIpGroup example <id>
// ```
type GlobalSecurityIpGroup struct {
	pulumi.CustomResourceState

	// The name of the IP whitelist template.
	GlobalIgName pulumi.StringOutput `pulumi:"globalIgName"`
	// The IP address in the whitelist template.
	//
	// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
	GlobalSecurityIpList pulumi.StringOutput `pulumi:"globalSecurityIpList"`
	// The region ID of the resource
	RegionId pulumi.StringOutput `pulumi:"regionId"`
}

// NewGlobalSecurityIpGroup registers a new resource with the given unique name, arguments, and options.
func NewGlobalSecurityIpGroup(ctx *pulumi.Context,
	name string, args *GlobalSecurityIpGroupArgs, opts ...pulumi.ResourceOption) (*GlobalSecurityIpGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalIgName == nil {
		return nil, errors.New("invalid value for required argument 'GlobalIgName'")
	}
	if args.GlobalSecurityIpList == nil {
		return nil, errors.New("invalid value for required argument 'GlobalSecurityIpList'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalSecurityIpGroup
	err := ctx.RegisterResource("alicloud:mongodb/globalSecurityIpGroup:GlobalSecurityIpGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalSecurityIpGroup gets an existing GlobalSecurityIpGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalSecurityIpGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalSecurityIpGroupState, opts ...pulumi.ResourceOption) (*GlobalSecurityIpGroup, error) {
	var resource GlobalSecurityIpGroup
	err := ctx.ReadResource("alicloud:mongodb/globalSecurityIpGroup:GlobalSecurityIpGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalSecurityIpGroup resources.
type globalSecurityIpGroupState struct {
	// The name of the IP whitelist template.
	GlobalIgName *string `pulumi:"globalIgName"`
	// The IP address in the whitelist template.
	//
	// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
	GlobalSecurityIpList *string `pulumi:"globalSecurityIpList"`
	// The region ID of the resource
	RegionId *string `pulumi:"regionId"`
}

type GlobalSecurityIpGroupState struct {
	// The name of the IP whitelist template.
	GlobalIgName pulumi.StringPtrInput
	// The IP address in the whitelist template.
	//
	// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
	GlobalSecurityIpList pulumi.StringPtrInput
	// The region ID of the resource
	RegionId pulumi.StringPtrInput
}

func (GlobalSecurityIpGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalSecurityIpGroupState)(nil)).Elem()
}

type globalSecurityIpGroupArgs struct {
	// The name of the IP whitelist template.
	GlobalIgName string `pulumi:"globalIgName"`
	// The IP address in the whitelist template.
	//
	// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
	GlobalSecurityIpList string `pulumi:"globalSecurityIpList"`
}

// The set of arguments for constructing a GlobalSecurityIpGroup resource.
type GlobalSecurityIpGroupArgs struct {
	// The name of the IP whitelist template.
	GlobalIgName pulumi.StringInput
	// The IP address in the whitelist template.
	//
	// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
	GlobalSecurityIpList pulumi.StringInput
}

func (GlobalSecurityIpGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalSecurityIpGroupArgs)(nil)).Elem()
}

type GlobalSecurityIpGroupInput interface {
	pulumi.Input

	ToGlobalSecurityIpGroupOutput() GlobalSecurityIpGroupOutput
	ToGlobalSecurityIpGroupOutputWithContext(ctx context.Context) GlobalSecurityIpGroupOutput
}

func (*GlobalSecurityIpGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalSecurityIpGroup)(nil)).Elem()
}

func (i *GlobalSecurityIpGroup) ToGlobalSecurityIpGroupOutput() GlobalSecurityIpGroupOutput {
	return i.ToGlobalSecurityIpGroupOutputWithContext(context.Background())
}

func (i *GlobalSecurityIpGroup) ToGlobalSecurityIpGroupOutputWithContext(ctx context.Context) GlobalSecurityIpGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalSecurityIpGroupOutput)
}

// GlobalSecurityIpGroupArrayInput is an input type that accepts GlobalSecurityIpGroupArray and GlobalSecurityIpGroupArrayOutput values.
// You can construct a concrete instance of `GlobalSecurityIpGroupArrayInput` via:
//
//	GlobalSecurityIpGroupArray{ GlobalSecurityIpGroupArgs{...} }
type GlobalSecurityIpGroupArrayInput interface {
	pulumi.Input

	ToGlobalSecurityIpGroupArrayOutput() GlobalSecurityIpGroupArrayOutput
	ToGlobalSecurityIpGroupArrayOutputWithContext(context.Context) GlobalSecurityIpGroupArrayOutput
}

type GlobalSecurityIpGroupArray []GlobalSecurityIpGroupInput

func (GlobalSecurityIpGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalSecurityIpGroup)(nil)).Elem()
}

func (i GlobalSecurityIpGroupArray) ToGlobalSecurityIpGroupArrayOutput() GlobalSecurityIpGroupArrayOutput {
	return i.ToGlobalSecurityIpGroupArrayOutputWithContext(context.Background())
}

func (i GlobalSecurityIpGroupArray) ToGlobalSecurityIpGroupArrayOutputWithContext(ctx context.Context) GlobalSecurityIpGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalSecurityIpGroupArrayOutput)
}

// GlobalSecurityIpGroupMapInput is an input type that accepts GlobalSecurityIpGroupMap and GlobalSecurityIpGroupMapOutput values.
// You can construct a concrete instance of `GlobalSecurityIpGroupMapInput` via:
//
//	GlobalSecurityIpGroupMap{ "key": GlobalSecurityIpGroupArgs{...} }
type GlobalSecurityIpGroupMapInput interface {
	pulumi.Input

	ToGlobalSecurityIpGroupMapOutput() GlobalSecurityIpGroupMapOutput
	ToGlobalSecurityIpGroupMapOutputWithContext(context.Context) GlobalSecurityIpGroupMapOutput
}

type GlobalSecurityIpGroupMap map[string]GlobalSecurityIpGroupInput

func (GlobalSecurityIpGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalSecurityIpGroup)(nil)).Elem()
}

func (i GlobalSecurityIpGroupMap) ToGlobalSecurityIpGroupMapOutput() GlobalSecurityIpGroupMapOutput {
	return i.ToGlobalSecurityIpGroupMapOutputWithContext(context.Background())
}

func (i GlobalSecurityIpGroupMap) ToGlobalSecurityIpGroupMapOutputWithContext(ctx context.Context) GlobalSecurityIpGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalSecurityIpGroupMapOutput)
}

type GlobalSecurityIpGroupOutput struct{ *pulumi.OutputState }

func (GlobalSecurityIpGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalSecurityIpGroup)(nil)).Elem()
}

func (o GlobalSecurityIpGroupOutput) ToGlobalSecurityIpGroupOutput() GlobalSecurityIpGroupOutput {
	return o
}

func (o GlobalSecurityIpGroupOutput) ToGlobalSecurityIpGroupOutputWithContext(ctx context.Context) GlobalSecurityIpGroupOutput {
	return o
}

// The name of the IP whitelist template.
func (o GlobalSecurityIpGroupOutput) GlobalIgName() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalSecurityIpGroup) pulumi.StringOutput { return v.GlobalIgName }).(pulumi.StringOutput)
}

// The IP address in the whitelist template.
//
// > **NOTE:** Separate multiple IP addresses with commas (,). You can create up to 1000 IP addresses or CIDR blocks for all IP address whitelists.
func (o GlobalSecurityIpGroupOutput) GlobalSecurityIpList() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalSecurityIpGroup) pulumi.StringOutput { return v.GlobalSecurityIpList }).(pulumi.StringOutput)
}

// The region ID of the resource
func (o GlobalSecurityIpGroupOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalSecurityIpGroup) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

type GlobalSecurityIpGroupArrayOutput struct{ *pulumi.OutputState }

func (GlobalSecurityIpGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalSecurityIpGroup)(nil)).Elem()
}

func (o GlobalSecurityIpGroupArrayOutput) ToGlobalSecurityIpGroupArrayOutput() GlobalSecurityIpGroupArrayOutput {
	return o
}

func (o GlobalSecurityIpGroupArrayOutput) ToGlobalSecurityIpGroupArrayOutputWithContext(ctx context.Context) GlobalSecurityIpGroupArrayOutput {
	return o
}

func (o GlobalSecurityIpGroupArrayOutput) Index(i pulumi.IntInput) GlobalSecurityIpGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalSecurityIpGroup {
		return vs[0].([]*GlobalSecurityIpGroup)[vs[1].(int)]
	}).(GlobalSecurityIpGroupOutput)
}

type GlobalSecurityIpGroupMapOutput struct{ *pulumi.OutputState }

func (GlobalSecurityIpGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalSecurityIpGroup)(nil)).Elem()
}

func (o GlobalSecurityIpGroupMapOutput) ToGlobalSecurityIpGroupMapOutput() GlobalSecurityIpGroupMapOutput {
	return o
}

func (o GlobalSecurityIpGroupMapOutput) ToGlobalSecurityIpGroupMapOutputWithContext(ctx context.Context) GlobalSecurityIpGroupMapOutput {
	return o
}

func (o GlobalSecurityIpGroupMapOutput) MapIndex(k pulumi.StringInput) GlobalSecurityIpGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalSecurityIpGroup {
		return vs[0].(map[string]*GlobalSecurityIpGroup)[vs[1].(string)]
	}).(GlobalSecurityIpGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalSecurityIpGroupInput)(nil)).Elem(), &GlobalSecurityIpGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalSecurityIpGroupArrayInput)(nil)).Elem(), GlobalSecurityIpGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalSecurityIpGroupMapInput)(nil)).Elem(), GlobalSecurityIpGroupMap{})
	pulumi.RegisterOutputType(GlobalSecurityIpGroupOutput{})
	pulumi.RegisterOutputType(GlobalSecurityIpGroupArrayOutput{})
	pulumi.RegisterOutputType(GlobalSecurityIpGroupMapOutput{})
}
