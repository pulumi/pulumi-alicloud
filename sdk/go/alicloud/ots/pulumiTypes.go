// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ots

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SearchIndexSchema struct {
	// A list of field schemas. Each field schema contains the following parameters:
	FieldSchemas []SearchIndexSchemaFieldSchema `pulumi:"fieldSchemas"`
	// The settings of the search index, including routingFields.
	IndexSettings []SearchIndexSchemaIndexSetting `pulumi:"indexSettings"`
	// The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default.
	IndexSorts []SearchIndexSchemaIndexSort `pulumi:"indexSorts"`
}

// SearchIndexSchemaInput is an input type that accepts SearchIndexSchemaArgs and SearchIndexSchemaOutput values.
// You can construct a concrete instance of `SearchIndexSchemaInput` via:
//
//	SearchIndexSchemaArgs{...}
type SearchIndexSchemaInput interface {
	pulumi.Input

	ToSearchIndexSchemaOutput() SearchIndexSchemaOutput
	ToSearchIndexSchemaOutputWithContext(context.Context) SearchIndexSchemaOutput
}

type SearchIndexSchemaArgs struct {
	// A list of field schemas. Each field schema contains the following parameters:
	FieldSchemas SearchIndexSchemaFieldSchemaArrayInput `pulumi:"fieldSchemas"`
	// The settings of the search index, including routingFields.
	IndexSettings SearchIndexSchemaIndexSettingArrayInput `pulumi:"indexSettings"`
	// The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default.
	IndexSorts SearchIndexSchemaIndexSortArrayInput `pulumi:"indexSorts"`
}

func (SearchIndexSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchema)(nil)).Elem()
}

func (i SearchIndexSchemaArgs) ToSearchIndexSchemaOutput() SearchIndexSchemaOutput {
	return i.ToSearchIndexSchemaOutputWithContext(context.Background())
}

func (i SearchIndexSchemaArgs) ToSearchIndexSchemaOutputWithContext(ctx context.Context) SearchIndexSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaOutput)
}

// SearchIndexSchemaArrayInput is an input type that accepts SearchIndexSchemaArray and SearchIndexSchemaArrayOutput values.
// You can construct a concrete instance of `SearchIndexSchemaArrayInput` via:
//
//	SearchIndexSchemaArray{ SearchIndexSchemaArgs{...} }
type SearchIndexSchemaArrayInput interface {
	pulumi.Input

	ToSearchIndexSchemaArrayOutput() SearchIndexSchemaArrayOutput
	ToSearchIndexSchemaArrayOutputWithContext(context.Context) SearchIndexSchemaArrayOutput
}

type SearchIndexSchemaArray []SearchIndexSchemaInput

func (SearchIndexSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchema)(nil)).Elem()
}

func (i SearchIndexSchemaArray) ToSearchIndexSchemaArrayOutput() SearchIndexSchemaArrayOutput {
	return i.ToSearchIndexSchemaArrayOutputWithContext(context.Background())
}

func (i SearchIndexSchemaArray) ToSearchIndexSchemaArrayOutputWithContext(ctx context.Context) SearchIndexSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaArrayOutput)
}

type SearchIndexSchemaOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchema)(nil)).Elem()
}

func (o SearchIndexSchemaOutput) ToSearchIndexSchemaOutput() SearchIndexSchemaOutput {
	return o
}

func (o SearchIndexSchemaOutput) ToSearchIndexSchemaOutputWithContext(ctx context.Context) SearchIndexSchemaOutput {
	return o
}

// A list of field schemas. Each field schema contains the following parameters:
func (o SearchIndexSchemaOutput) FieldSchemas() SearchIndexSchemaFieldSchemaArrayOutput {
	return o.ApplyT(func(v SearchIndexSchema) []SearchIndexSchemaFieldSchema { return v.FieldSchemas }).(SearchIndexSchemaFieldSchemaArrayOutput)
}

// The settings of the search index, including routingFields.
func (o SearchIndexSchemaOutput) IndexSettings() SearchIndexSchemaIndexSettingArrayOutput {
	return o.ApplyT(func(v SearchIndexSchema) []SearchIndexSchemaIndexSetting { return v.IndexSettings }).(SearchIndexSchemaIndexSettingArrayOutput)
}

// The presorting settings of the search index, including sorters. If no value is specified for the indexSort parameter, field values are sorted by primary key by default.
func (o SearchIndexSchemaOutput) IndexSorts() SearchIndexSchemaIndexSortArrayOutput {
	return o.ApplyT(func(v SearchIndexSchema) []SearchIndexSchemaIndexSort { return v.IndexSorts }).(SearchIndexSchemaIndexSortArrayOutput)
}

type SearchIndexSchemaArrayOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchema)(nil)).Elem()
}

func (o SearchIndexSchemaArrayOutput) ToSearchIndexSchemaArrayOutput() SearchIndexSchemaArrayOutput {
	return o
}

func (o SearchIndexSchemaArrayOutput) ToSearchIndexSchemaArrayOutputWithContext(ctx context.Context) SearchIndexSchemaArrayOutput {
	return o
}

func (o SearchIndexSchemaArrayOutput) Index(i pulumi.IntInput) SearchIndexSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SearchIndexSchema {
		return vs[0].([]SearchIndexSchema)[vs[1].(int)]
	}).(SearchIndexSchemaOutput)
}

type SearchIndexSchemaFieldSchema struct {
	// Specifies the type of the analyzer that you want to use. If fieldType is set to Text, you can configure this parameter. Otherwise, the default analyzer type single-word tokenization is used.
	Analyzer *string `pulumi:"analyzer"`
	// Specifies whether to enable sorting and aggregation. Type: Boolean. Sorting can be enabled only for fields for which enableSortAndAgg is set to true.
	EnableSortAndAgg *bool `pulumi:"enableSortAndAgg"`
	// The name of the field that is used to sort data. only required if sorterType is FieldSort.
	FieldName string `pulumi:"fieldName"`
	// Specifies the type of the field. Use FieldType.XXX to set the type.
	FieldType string `pulumi:"fieldType"`
	// Specifies whether to enable indexing for the column. Type: Boolean.
	Index *bool `pulumi:"index"`
	// Specifies whether the value is an array. Type: Boolean.
	IsArray *bool `pulumi:"isArray"`
	// Specifies whether to store the value of the field in the search index. Type: Boolean. If you set store to true, you can read the value of the field from the search index without querying the data table. This improves query performance.
	Store *bool `pulumi:"store"`
}

// SearchIndexSchemaFieldSchemaInput is an input type that accepts SearchIndexSchemaFieldSchemaArgs and SearchIndexSchemaFieldSchemaOutput values.
// You can construct a concrete instance of `SearchIndexSchemaFieldSchemaInput` via:
//
//	SearchIndexSchemaFieldSchemaArgs{...}
type SearchIndexSchemaFieldSchemaInput interface {
	pulumi.Input

	ToSearchIndexSchemaFieldSchemaOutput() SearchIndexSchemaFieldSchemaOutput
	ToSearchIndexSchemaFieldSchemaOutputWithContext(context.Context) SearchIndexSchemaFieldSchemaOutput
}

type SearchIndexSchemaFieldSchemaArgs struct {
	// Specifies the type of the analyzer that you want to use. If fieldType is set to Text, you can configure this parameter. Otherwise, the default analyzer type single-word tokenization is used.
	Analyzer pulumi.StringPtrInput `pulumi:"analyzer"`
	// Specifies whether to enable sorting and aggregation. Type: Boolean. Sorting can be enabled only for fields for which enableSortAndAgg is set to true.
	EnableSortAndAgg pulumi.BoolPtrInput `pulumi:"enableSortAndAgg"`
	// The name of the field that is used to sort data. only required if sorterType is FieldSort.
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	// Specifies the type of the field. Use FieldType.XXX to set the type.
	FieldType pulumi.StringInput `pulumi:"fieldType"`
	// Specifies whether to enable indexing for the column. Type: Boolean.
	Index pulumi.BoolPtrInput `pulumi:"index"`
	// Specifies whether the value is an array. Type: Boolean.
	IsArray pulumi.BoolPtrInput `pulumi:"isArray"`
	// Specifies whether to store the value of the field in the search index. Type: Boolean. If you set store to true, you can read the value of the field from the search index without querying the data table. This improves query performance.
	Store pulumi.BoolPtrInput `pulumi:"store"`
}

func (SearchIndexSchemaFieldSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaFieldSchema)(nil)).Elem()
}

func (i SearchIndexSchemaFieldSchemaArgs) ToSearchIndexSchemaFieldSchemaOutput() SearchIndexSchemaFieldSchemaOutput {
	return i.ToSearchIndexSchemaFieldSchemaOutputWithContext(context.Background())
}

func (i SearchIndexSchemaFieldSchemaArgs) ToSearchIndexSchemaFieldSchemaOutputWithContext(ctx context.Context) SearchIndexSchemaFieldSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaFieldSchemaOutput)
}

// SearchIndexSchemaFieldSchemaArrayInput is an input type that accepts SearchIndexSchemaFieldSchemaArray and SearchIndexSchemaFieldSchemaArrayOutput values.
// You can construct a concrete instance of `SearchIndexSchemaFieldSchemaArrayInput` via:
//
//	SearchIndexSchemaFieldSchemaArray{ SearchIndexSchemaFieldSchemaArgs{...} }
type SearchIndexSchemaFieldSchemaArrayInput interface {
	pulumi.Input

	ToSearchIndexSchemaFieldSchemaArrayOutput() SearchIndexSchemaFieldSchemaArrayOutput
	ToSearchIndexSchemaFieldSchemaArrayOutputWithContext(context.Context) SearchIndexSchemaFieldSchemaArrayOutput
}

type SearchIndexSchemaFieldSchemaArray []SearchIndexSchemaFieldSchemaInput

func (SearchIndexSchemaFieldSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaFieldSchema)(nil)).Elem()
}

func (i SearchIndexSchemaFieldSchemaArray) ToSearchIndexSchemaFieldSchemaArrayOutput() SearchIndexSchemaFieldSchemaArrayOutput {
	return i.ToSearchIndexSchemaFieldSchemaArrayOutputWithContext(context.Background())
}

func (i SearchIndexSchemaFieldSchemaArray) ToSearchIndexSchemaFieldSchemaArrayOutputWithContext(ctx context.Context) SearchIndexSchemaFieldSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaFieldSchemaArrayOutput)
}

type SearchIndexSchemaFieldSchemaOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaFieldSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaFieldSchema)(nil)).Elem()
}

func (o SearchIndexSchemaFieldSchemaOutput) ToSearchIndexSchemaFieldSchemaOutput() SearchIndexSchemaFieldSchemaOutput {
	return o
}

func (o SearchIndexSchemaFieldSchemaOutput) ToSearchIndexSchemaFieldSchemaOutputWithContext(ctx context.Context) SearchIndexSchemaFieldSchemaOutput {
	return o
}

// Specifies the type of the analyzer that you want to use. If fieldType is set to Text, you can configure this parameter. Otherwise, the default analyzer type single-word tokenization is used.
func (o SearchIndexSchemaFieldSchemaOutput) Analyzer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) *string { return v.Analyzer }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable sorting and aggregation. Type: Boolean. Sorting can be enabled only for fields for which enableSortAndAgg is set to true.
func (o SearchIndexSchemaFieldSchemaOutput) EnableSortAndAgg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) *bool { return v.EnableSortAndAgg }).(pulumi.BoolPtrOutput)
}

// The name of the field that is used to sort data. only required if sorterType is FieldSort.
func (o SearchIndexSchemaFieldSchemaOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) string { return v.FieldName }).(pulumi.StringOutput)
}

// Specifies the type of the field. Use FieldType.XXX to set the type.
func (o SearchIndexSchemaFieldSchemaOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) string { return v.FieldType }).(pulumi.StringOutput)
}

// Specifies whether to enable indexing for the column. Type: Boolean.
func (o SearchIndexSchemaFieldSchemaOutput) Index() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) *bool { return v.Index }).(pulumi.BoolPtrOutput)
}

// Specifies whether the value is an array. Type: Boolean.
func (o SearchIndexSchemaFieldSchemaOutput) IsArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) *bool { return v.IsArray }).(pulumi.BoolPtrOutput)
}

// Specifies whether to store the value of the field in the search index. Type: Boolean. If you set store to true, you can read the value of the field from the search index without querying the data table. This improves query performance.
func (o SearchIndexSchemaFieldSchemaOutput) Store() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaFieldSchema) *bool { return v.Store }).(pulumi.BoolPtrOutput)
}

type SearchIndexSchemaFieldSchemaArrayOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaFieldSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaFieldSchema)(nil)).Elem()
}

func (o SearchIndexSchemaFieldSchemaArrayOutput) ToSearchIndexSchemaFieldSchemaArrayOutput() SearchIndexSchemaFieldSchemaArrayOutput {
	return o
}

func (o SearchIndexSchemaFieldSchemaArrayOutput) ToSearchIndexSchemaFieldSchemaArrayOutputWithContext(ctx context.Context) SearchIndexSchemaFieldSchemaArrayOutput {
	return o
}

func (o SearchIndexSchemaFieldSchemaArrayOutput) Index(i pulumi.IntInput) SearchIndexSchemaFieldSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SearchIndexSchemaFieldSchema {
		return vs[0].([]SearchIndexSchemaFieldSchema)[vs[1].(int)]
	}).(SearchIndexSchemaFieldSchemaOutput)
}

type SearchIndexSchemaIndexSetting struct {
	// Specifies custom routing fields. You can specify some primary key columns as routing fields. Tablestore distributes data that is written to a search index across different partitions based on the specified routing fields. The data whose routing field values are the same is distributed to the same partition.
	RoutingFields []string `pulumi:"routingFields"`
}

// SearchIndexSchemaIndexSettingInput is an input type that accepts SearchIndexSchemaIndexSettingArgs and SearchIndexSchemaIndexSettingOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSettingInput` via:
//
//	SearchIndexSchemaIndexSettingArgs{...}
type SearchIndexSchemaIndexSettingInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSettingOutput() SearchIndexSchemaIndexSettingOutput
	ToSearchIndexSchemaIndexSettingOutputWithContext(context.Context) SearchIndexSchemaIndexSettingOutput
}

type SearchIndexSchemaIndexSettingArgs struct {
	// Specifies custom routing fields. You can specify some primary key columns as routing fields. Tablestore distributes data that is written to a search index across different partitions based on the specified routing fields. The data whose routing field values are the same is distributed to the same partition.
	RoutingFields pulumi.StringArrayInput `pulumi:"routingFields"`
}

func (SearchIndexSchemaIndexSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSetting)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSettingArgs) ToSearchIndexSchemaIndexSettingOutput() SearchIndexSchemaIndexSettingOutput {
	return i.ToSearchIndexSchemaIndexSettingOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSettingArgs) ToSearchIndexSchemaIndexSettingOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSettingOutput)
}

// SearchIndexSchemaIndexSettingArrayInput is an input type that accepts SearchIndexSchemaIndexSettingArray and SearchIndexSchemaIndexSettingArrayOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSettingArrayInput` via:
//
//	SearchIndexSchemaIndexSettingArray{ SearchIndexSchemaIndexSettingArgs{...} }
type SearchIndexSchemaIndexSettingArrayInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSettingArrayOutput() SearchIndexSchemaIndexSettingArrayOutput
	ToSearchIndexSchemaIndexSettingArrayOutputWithContext(context.Context) SearchIndexSchemaIndexSettingArrayOutput
}

type SearchIndexSchemaIndexSettingArray []SearchIndexSchemaIndexSettingInput

func (SearchIndexSchemaIndexSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSetting)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSettingArray) ToSearchIndexSchemaIndexSettingArrayOutput() SearchIndexSchemaIndexSettingArrayOutput {
	return i.ToSearchIndexSchemaIndexSettingArrayOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSettingArray) ToSearchIndexSchemaIndexSettingArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSettingArrayOutput)
}

type SearchIndexSchemaIndexSettingOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSetting)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSettingOutput) ToSearchIndexSchemaIndexSettingOutput() SearchIndexSchemaIndexSettingOutput {
	return o
}

func (o SearchIndexSchemaIndexSettingOutput) ToSearchIndexSchemaIndexSettingOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSettingOutput {
	return o
}

// Specifies custom routing fields. You can specify some primary key columns as routing fields. Tablestore distributes data that is written to a search index across different partitions based on the specified routing fields. The data whose routing field values are the same is distributed to the same partition.
func (o SearchIndexSchemaIndexSettingOutput) RoutingFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSetting) []string { return v.RoutingFields }).(pulumi.StringArrayOutput)
}

type SearchIndexSchemaIndexSettingArrayOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSetting)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSettingArrayOutput) ToSearchIndexSchemaIndexSettingArrayOutput() SearchIndexSchemaIndexSettingArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSettingArrayOutput) ToSearchIndexSchemaIndexSettingArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSettingArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSettingArrayOutput) Index(i pulumi.IntInput) SearchIndexSchemaIndexSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SearchIndexSchemaIndexSetting {
		return vs[0].([]SearchIndexSchemaIndexSetting)[vs[1].(int)]
	}).(SearchIndexSchemaIndexSettingOutput)
}

type SearchIndexSchemaIndexSort struct {
	// Specifies the presorting method for the search index. PrimaryKeySort and FieldSort are supported.
	Sorters []SearchIndexSchemaIndexSortSorter `pulumi:"sorters"`
}

// SearchIndexSchemaIndexSortInput is an input type that accepts SearchIndexSchemaIndexSortArgs and SearchIndexSchemaIndexSortOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSortInput` via:
//
//	SearchIndexSchemaIndexSortArgs{...}
type SearchIndexSchemaIndexSortInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSortOutput() SearchIndexSchemaIndexSortOutput
	ToSearchIndexSchemaIndexSortOutputWithContext(context.Context) SearchIndexSchemaIndexSortOutput
}

type SearchIndexSchemaIndexSortArgs struct {
	// Specifies the presorting method for the search index. PrimaryKeySort and FieldSort are supported.
	Sorters SearchIndexSchemaIndexSortSorterArrayInput `pulumi:"sorters"`
}

func (SearchIndexSchemaIndexSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSort)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSortArgs) ToSearchIndexSchemaIndexSortOutput() SearchIndexSchemaIndexSortOutput {
	return i.ToSearchIndexSchemaIndexSortOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSortArgs) ToSearchIndexSchemaIndexSortOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSortOutput)
}

// SearchIndexSchemaIndexSortArrayInput is an input type that accepts SearchIndexSchemaIndexSortArray and SearchIndexSchemaIndexSortArrayOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSortArrayInput` via:
//
//	SearchIndexSchemaIndexSortArray{ SearchIndexSchemaIndexSortArgs{...} }
type SearchIndexSchemaIndexSortArrayInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSortArrayOutput() SearchIndexSchemaIndexSortArrayOutput
	ToSearchIndexSchemaIndexSortArrayOutputWithContext(context.Context) SearchIndexSchemaIndexSortArrayOutput
}

type SearchIndexSchemaIndexSortArray []SearchIndexSchemaIndexSortInput

func (SearchIndexSchemaIndexSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSort)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSortArray) ToSearchIndexSchemaIndexSortArrayOutput() SearchIndexSchemaIndexSortArrayOutput {
	return i.ToSearchIndexSchemaIndexSortArrayOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSortArray) ToSearchIndexSchemaIndexSortArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSortArrayOutput)
}

type SearchIndexSchemaIndexSortOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSort)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSortOutput) ToSearchIndexSchemaIndexSortOutput() SearchIndexSchemaIndexSortOutput {
	return o
}

func (o SearchIndexSchemaIndexSortOutput) ToSearchIndexSchemaIndexSortOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortOutput {
	return o
}

// Specifies the presorting method for the search index. PrimaryKeySort and FieldSort are supported.
func (o SearchIndexSchemaIndexSortOutput) Sorters() SearchIndexSchemaIndexSortSorterArrayOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSort) []SearchIndexSchemaIndexSortSorter { return v.Sorters }).(SearchIndexSchemaIndexSortSorterArrayOutput)
}

type SearchIndexSchemaIndexSortArrayOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSort)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSortArrayOutput) ToSearchIndexSchemaIndexSortArrayOutput() SearchIndexSchemaIndexSortArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSortArrayOutput) ToSearchIndexSchemaIndexSortArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSortArrayOutput) Index(i pulumi.IntInput) SearchIndexSchemaIndexSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SearchIndexSchemaIndexSort {
		return vs[0].([]SearchIndexSchemaIndexSort)[vs[1].(int)]
	}).(SearchIndexSchemaIndexSortOutput)
}

type SearchIndexSchemaIndexSortSorter struct {
	// The name of the field that is used to sort data. only required if sorterType is FieldSort.
	FieldName *string `pulumi:"fieldName"`
	// The sorting method that is used when the field contains multiple values. valid values: `Min`, `Max`, `Avg`. only required if sorterType is FieldSort.
	Mode *string `pulumi:"mode"`
	// The sort order. Data can be sorted in ascending(`Asc`) or descending(`Desc`) order. Default value: `Asc`.
	Order *string `pulumi:"order"`
	// Data is sorted by Which fields or keys. valid values: `PrimaryKeySort`, `FieldSort`.
	SorterType *string `pulumi:"sorterType"`
}

// SearchIndexSchemaIndexSortSorterInput is an input type that accepts SearchIndexSchemaIndexSortSorterArgs and SearchIndexSchemaIndexSortSorterOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSortSorterInput` via:
//
//	SearchIndexSchemaIndexSortSorterArgs{...}
type SearchIndexSchemaIndexSortSorterInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSortSorterOutput() SearchIndexSchemaIndexSortSorterOutput
	ToSearchIndexSchemaIndexSortSorterOutputWithContext(context.Context) SearchIndexSchemaIndexSortSorterOutput
}

type SearchIndexSchemaIndexSortSorterArgs struct {
	// The name of the field that is used to sort data. only required if sorterType is FieldSort.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// The sorting method that is used when the field contains multiple values. valid values: `Min`, `Max`, `Avg`. only required if sorterType is FieldSort.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The sort order. Data can be sorted in ascending(`Asc`) or descending(`Desc`) order. Default value: `Asc`.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Data is sorted by Which fields or keys. valid values: `PrimaryKeySort`, `FieldSort`.
	SorterType pulumi.StringPtrInput `pulumi:"sorterType"`
}

func (SearchIndexSchemaIndexSortSorterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSortSorter)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSortSorterArgs) ToSearchIndexSchemaIndexSortSorterOutput() SearchIndexSchemaIndexSortSorterOutput {
	return i.ToSearchIndexSchemaIndexSortSorterOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSortSorterArgs) ToSearchIndexSchemaIndexSortSorterOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortSorterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSortSorterOutput)
}

// SearchIndexSchemaIndexSortSorterArrayInput is an input type that accepts SearchIndexSchemaIndexSortSorterArray and SearchIndexSchemaIndexSortSorterArrayOutput values.
// You can construct a concrete instance of `SearchIndexSchemaIndexSortSorterArrayInput` via:
//
//	SearchIndexSchemaIndexSortSorterArray{ SearchIndexSchemaIndexSortSorterArgs{...} }
type SearchIndexSchemaIndexSortSorterArrayInput interface {
	pulumi.Input

	ToSearchIndexSchemaIndexSortSorterArrayOutput() SearchIndexSchemaIndexSortSorterArrayOutput
	ToSearchIndexSchemaIndexSortSorterArrayOutputWithContext(context.Context) SearchIndexSchemaIndexSortSorterArrayOutput
}

type SearchIndexSchemaIndexSortSorterArray []SearchIndexSchemaIndexSortSorterInput

func (SearchIndexSchemaIndexSortSorterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSortSorter)(nil)).Elem()
}

func (i SearchIndexSchemaIndexSortSorterArray) ToSearchIndexSchemaIndexSortSorterArrayOutput() SearchIndexSchemaIndexSortSorterArrayOutput {
	return i.ToSearchIndexSchemaIndexSortSorterArrayOutputWithContext(context.Background())
}

func (i SearchIndexSchemaIndexSortSorterArray) ToSearchIndexSchemaIndexSortSorterArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortSorterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchIndexSchemaIndexSortSorterArrayOutput)
}

type SearchIndexSchemaIndexSortSorterOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSortSorterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchIndexSchemaIndexSortSorter)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSortSorterOutput) ToSearchIndexSchemaIndexSortSorterOutput() SearchIndexSchemaIndexSortSorterOutput {
	return o
}

func (o SearchIndexSchemaIndexSortSorterOutput) ToSearchIndexSchemaIndexSortSorterOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortSorterOutput {
	return o
}

// The name of the field that is used to sort data. only required if sorterType is FieldSort.
func (o SearchIndexSchemaIndexSortSorterOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSortSorter) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// The sorting method that is used when the field contains multiple values. valid values: `Min`, `Max`, `Avg`. only required if sorterType is FieldSort.
func (o SearchIndexSchemaIndexSortSorterOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSortSorter) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The sort order. Data can be sorted in ascending(`Asc`) or descending(`Desc`) order. Default value: `Asc`.
func (o SearchIndexSchemaIndexSortSorterOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSortSorter) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// Data is sorted by Which fields or keys. valid values: `PrimaryKeySort`, `FieldSort`.
func (o SearchIndexSchemaIndexSortSorterOutput) SorterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchIndexSchemaIndexSortSorter) *string { return v.SorterType }).(pulumi.StringPtrOutput)
}

type SearchIndexSchemaIndexSortSorterArrayOutput struct{ *pulumi.OutputState }

func (SearchIndexSchemaIndexSortSorterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SearchIndexSchemaIndexSortSorter)(nil)).Elem()
}

func (o SearchIndexSchemaIndexSortSorterArrayOutput) ToSearchIndexSchemaIndexSortSorterArrayOutput() SearchIndexSchemaIndexSortSorterArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSortSorterArrayOutput) ToSearchIndexSchemaIndexSortSorterArrayOutputWithContext(ctx context.Context) SearchIndexSchemaIndexSortSorterArrayOutput {
	return o
}

func (o SearchIndexSchemaIndexSortSorterArrayOutput) Index(i pulumi.IntInput) SearchIndexSchemaIndexSortSorterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SearchIndexSchemaIndexSortSorter {
		return vs[0].([]SearchIndexSchemaIndexSortSorter)[vs[1].(int)]
	}).(SearchIndexSchemaIndexSortSorterOutput)
}

type TableDefinedColumn struct {
	// Name for defined column.
	Name string `pulumi:"name"`
	// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
	Type string `pulumi:"type"`
}

// TableDefinedColumnInput is an input type that accepts TableDefinedColumnArgs and TableDefinedColumnOutput values.
// You can construct a concrete instance of `TableDefinedColumnInput` via:
//
//	TableDefinedColumnArgs{...}
type TableDefinedColumnInput interface {
	pulumi.Input

	ToTableDefinedColumnOutput() TableDefinedColumnOutput
	ToTableDefinedColumnOutputWithContext(context.Context) TableDefinedColumnOutput
}

type TableDefinedColumnArgs struct {
	// Name for defined column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableDefinedColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableDefinedColumn)(nil)).Elem()
}

func (i TableDefinedColumnArgs) ToTableDefinedColumnOutput() TableDefinedColumnOutput {
	return i.ToTableDefinedColumnOutputWithContext(context.Background())
}

func (i TableDefinedColumnArgs) ToTableDefinedColumnOutputWithContext(ctx context.Context) TableDefinedColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableDefinedColumnOutput)
}

// TableDefinedColumnArrayInput is an input type that accepts TableDefinedColumnArray and TableDefinedColumnArrayOutput values.
// You can construct a concrete instance of `TableDefinedColumnArrayInput` via:
//
//	TableDefinedColumnArray{ TableDefinedColumnArgs{...} }
type TableDefinedColumnArrayInput interface {
	pulumi.Input

	ToTableDefinedColumnArrayOutput() TableDefinedColumnArrayOutput
	ToTableDefinedColumnArrayOutputWithContext(context.Context) TableDefinedColumnArrayOutput
}

type TableDefinedColumnArray []TableDefinedColumnInput

func (TableDefinedColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableDefinedColumn)(nil)).Elem()
}

func (i TableDefinedColumnArray) ToTableDefinedColumnArrayOutput() TableDefinedColumnArrayOutput {
	return i.ToTableDefinedColumnArrayOutputWithContext(context.Background())
}

func (i TableDefinedColumnArray) ToTableDefinedColumnArrayOutputWithContext(ctx context.Context) TableDefinedColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableDefinedColumnArrayOutput)
}

type TableDefinedColumnOutput struct{ *pulumi.OutputState }

func (TableDefinedColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableDefinedColumn)(nil)).Elem()
}

func (o TableDefinedColumnOutput) ToTableDefinedColumnOutput() TableDefinedColumnOutput {
	return o
}

func (o TableDefinedColumnOutput) ToTableDefinedColumnOutputWithContext(ctx context.Context) TableDefinedColumnOutput {
	return o
}

// Name for defined column.
func (o TableDefinedColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableDefinedColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
func (o TableDefinedColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableDefinedColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableDefinedColumnArrayOutput struct{ *pulumi.OutputState }

func (TableDefinedColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableDefinedColumn)(nil)).Elem()
}

func (o TableDefinedColumnArrayOutput) ToTableDefinedColumnArrayOutput() TableDefinedColumnArrayOutput {
	return o
}

func (o TableDefinedColumnArrayOutput) ToTableDefinedColumnArrayOutputWithContext(ctx context.Context) TableDefinedColumnArrayOutput {
	return o
}

func (o TableDefinedColumnArrayOutput) Index(i pulumi.IntInput) TableDefinedColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableDefinedColumn {
		return vs[0].([]TableDefinedColumn)[vs[1].(int)]
	}).(TableDefinedColumnOutput)
}

type TablePrimaryKey struct {
	// Name for defined column.
	Name string `pulumi:"name"`
	// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
	Type string `pulumi:"type"`
}

// TablePrimaryKeyInput is an input type that accepts TablePrimaryKeyArgs and TablePrimaryKeyOutput values.
// You can construct a concrete instance of `TablePrimaryKeyInput` via:
//
//	TablePrimaryKeyArgs{...}
type TablePrimaryKeyInput interface {
	pulumi.Input

	ToTablePrimaryKeyOutput() TablePrimaryKeyOutput
	ToTablePrimaryKeyOutputWithContext(context.Context) TablePrimaryKeyOutput
}

type TablePrimaryKeyArgs struct {
	// Name for defined column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return i.ToTablePrimaryKeyOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput)
}

// TablePrimaryKeyArrayInput is an input type that accepts TablePrimaryKeyArray and TablePrimaryKeyArrayOutput values.
// You can construct a concrete instance of `TablePrimaryKeyArrayInput` via:
//
//	TablePrimaryKeyArray{ TablePrimaryKeyArgs{...} }
type TablePrimaryKeyArrayInput interface {
	pulumi.Input

	ToTablePrimaryKeyArrayOutput() TablePrimaryKeyArrayOutput
	ToTablePrimaryKeyArrayOutputWithContext(context.Context) TablePrimaryKeyArrayOutput
}

type TablePrimaryKeyArray []TablePrimaryKeyInput

func (TablePrimaryKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TablePrimaryKey)(nil)).Elem()
}

func (i TablePrimaryKeyArray) ToTablePrimaryKeyArrayOutput() TablePrimaryKeyArrayOutput {
	return i.ToTablePrimaryKeyArrayOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArray) ToTablePrimaryKeyArrayOutputWithContext(ctx context.Context) TablePrimaryKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyArrayOutput)
}

type TablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return o
}

// Name for defined column.
func (o TablePrimaryKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TablePrimaryKey) string { return v.Name }).(pulumi.StringOutput)
}

// Type for defined column. `Integer`, `String`, `Binary`, `Double`, `Boolean` is allowed.
func (o TablePrimaryKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TablePrimaryKey) string { return v.Type }).(pulumi.StringOutput)
}

type TablePrimaryKeyArrayOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyArrayOutput) ToTablePrimaryKeyArrayOutput() TablePrimaryKeyArrayOutput {
	return o
}

func (o TablePrimaryKeyArrayOutput) ToTablePrimaryKeyArrayOutputWithContext(ctx context.Context) TablePrimaryKeyArrayOutput {
	return o
}

func (o TablePrimaryKeyArrayOutput) Index(i pulumi.IntInput) TablePrimaryKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TablePrimaryKey {
		return vs[0].([]TablePrimaryKey)[vs[1].(int)]
	}).(TablePrimaryKeyOutput)
}

type TunnelChannel struct {
	// The id of the channel.
	ChannelId *string `pulumi:"channelId"`
	// The latest consumption time of the channel, unix time in nanosecond.
	ChannelRpo *int `pulumi:"channelRpo"`
	// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
	ChannelStatus *string `pulumi:"channelStatus"`
	// The type of the channel, valid values: `BaseData`, `Stream`.
	ChannelType *string `pulumi:"channelType"`
	// The client id of the channel.
	ClientId *string `pulumi:"clientId"`
}

// TunnelChannelInput is an input type that accepts TunnelChannelArgs and TunnelChannelOutput values.
// You can construct a concrete instance of `TunnelChannelInput` via:
//
//	TunnelChannelArgs{...}
type TunnelChannelInput interface {
	pulumi.Input

	ToTunnelChannelOutput() TunnelChannelOutput
	ToTunnelChannelOutputWithContext(context.Context) TunnelChannelOutput
}

type TunnelChannelArgs struct {
	// The id of the channel.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// The latest consumption time of the channel, unix time in nanosecond.
	ChannelRpo pulumi.IntPtrInput `pulumi:"channelRpo"`
	// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
	ChannelStatus pulumi.StringPtrInput `pulumi:"channelStatus"`
	// The type of the channel, valid values: `BaseData`, `Stream`.
	ChannelType pulumi.StringPtrInput `pulumi:"channelType"`
	// The client id of the channel.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
}

func (TunnelChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelChannel)(nil)).Elem()
}

func (i TunnelChannelArgs) ToTunnelChannelOutput() TunnelChannelOutput {
	return i.ToTunnelChannelOutputWithContext(context.Background())
}

func (i TunnelChannelArgs) ToTunnelChannelOutputWithContext(ctx context.Context) TunnelChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelChannelOutput)
}

// TunnelChannelArrayInput is an input type that accepts TunnelChannelArray and TunnelChannelArrayOutput values.
// You can construct a concrete instance of `TunnelChannelArrayInput` via:
//
//	TunnelChannelArray{ TunnelChannelArgs{...} }
type TunnelChannelArrayInput interface {
	pulumi.Input

	ToTunnelChannelArrayOutput() TunnelChannelArrayOutput
	ToTunnelChannelArrayOutputWithContext(context.Context) TunnelChannelArrayOutput
}

type TunnelChannelArray []TunnelChannelInput

func (TunnelChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TunnelChannel)(nil)).Elem()
}

func (i TunnelChannelArray) ToTunnelChannelArrayOutput() TunnelChannelArrayOutput {
	return i.ToTunnelChannelArrayOutputWithContext(context.Background())
}

func (i TunnelChannelArray) ToTunnelChannelArrayOutputWithContext(ctx context.Context) TunnelChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelChannelArrayOutput)
}

type TunnelChannelOutput struct{ *pulumi.OutputState }

func (TunnelChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TunnelChannel)(nil)).Elem()
}

func (o TunnelChannelOutput) ToTunnelChannelOutput() TunnelChannelOutput {
	return o
}

func (o TunnelChannelOutput) ToTunnelChannelOutputWithContext(ctx context.Context) TunnelChannelOutput {
	return o
}

// The id of the channel.
func (o TunnelChannelOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelChannel) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// The latest consumption time of the channel, unix time in nanosecond.
func (o TunnelChannelOutput) ChannelRpo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TunnelChannel) *int { return v.ChannelRpo }).(pulumi.IntPtrOutput)
}

// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
func (o TunnelChannelOutput) ChannelStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelChannel) *string { return v.ChannelStatus }).(pulumi.StringPtrOutput)
}

// The type of the channel, valid values: `BaseData`, `Stream`.
func (o TunnelChannelOutput) ChannelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelChannel) *string { return v.ChannelType }).(pulumi.StringPtrOutput)
}

// The client id of the channel.
func (o TunnelChannelOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TunnelChannel) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type TunnelChannelArrayOutput struct{ *pulumi.OutputState }

func (TunnelChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TunnelChannel)(nil)).Elem()
}

func (o TunnelChannelArrayOutput) ToTunnelChannelArrayOutput() TunnelChannelArrayOutput {
	return o
}

func (o TunnelChannelArrayOutput) ToTunnelChannelArrayOutputWithContext(ctx context.Context) TunnelChannelArrayOutput {
	return o
}

func (o TunnelChannelArrayOutput) Index(i pulumi.IntInput) TunnelChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TunnelChannel {
		return vs[0].([]TunnelChannel)[vs[1].(int)]
	}).(TunnelChannelOutput)
}

type GetInstanceAttachmentsAttachment struct {
	// The domain of the instance attachment.
	Domain string `pulumi:"domain"`
	// The access endpoint of the instance attachment.
	Endpoint string `pulumi:"endpoint"`
	// The resource ID, the value is same as "instanceName".
	Id string `pulumi:"id"`
	// The name of OTS instance.
	InstanceName string `pulumi:"instanceName"`
	// The region of the instance attachment.
	Region string `pulumi:"region"`
	// The ID of attaching VPC to instance.
	VpcId string `pulumi:"vpcId"`
	// The name of attaching VPC to instance.
	VpcName string `pulumi:"vpcName"`
}

// GetInstanceAttachmentsAttachmentInput is an input type that accepts GetInstanceAttachmentsAttachmentArgs and GetInstanceAttachmentsAttachmentOutput values.
// You can construct a concrete instance of `GetInstanceAttachmentsAttachmentInput` via:
//
//	GetInstanceAttachmentsAttachmentArgs{...}
type GetInstanceAttachmentsAttachmentInput interface {
	pulumi.Input

	ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput
	ToGetInstanceAttachmentsAttachmentOutputWithContext(context.Context) GetInstanceAttachmentsAttachmentOutput
}

type GetInstanceAttachmentsAttachmentArgs struct {
	// The domain of the instance attachment.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The access endpoint of the instance attachment.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The resource ID, the value is same as "instanceName".
	Id pulumi.StringInput `pulumi:"id"`
	// The name of OTS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The region of the instance attachment.
	Region pulumi.StringInput `pulumi:"region"`
	// The ID of attaching VPC to instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The name of attaching VPC to instance.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (GetInstanceAttachmentsAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (i GetInstanceAttachmentsAttachmentArgs) ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput {
	return i.ToGetInstanceAttachmentsAttachmentOutputWithContext(context.Background())
}

func (i GetInstanceAttachmentsAttachmentArgs) ToGetInstanceAttachmentsAttachmentOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachmentsAttachmentOutput)
}

// GetInstanceAttachmentsAttachmentArrayInput is an input type that accepts GetInstanceAttachmentsAttachmentArray and GetInstanceAttachmentsAttachmentArrayOutput values.
// You can construct a concrete instance of `GetInstanceAttachmentsAttachmentArrayInput` via:
//
//	GetInstanceAttachmentsAttachmentArray{ GetInstanceAttachmentsAttachmentArgs{...} }
type GetInstanceAttachmentsAttachmentArrayInput interface {
	pulumi.Input

	ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput
	ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(context.Context) GetInstanceAttachmentsAttachmentArrayOutput
}

type GetInstanceAttachmentsAttachmentArray []GetInstanceAttachmentsAttachmentInput

func (GetInstanceAttachmentsAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (i GetInstanceAttachmentsAttachmentArray) ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput {
	return i.ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(context.Background())
}

func (i GetInstanceAttachmentsAttachmentArray) ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachmentsAttachmentArrayOutput)
}

type GetInstanceAttachmentsAttachmentOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachmentsAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (o GetInstanceAttachmentsAttachmentOutput) ToGetInstanceAttachmentsAttachmentOutput() GetInstanceAttachmentsAttachmentOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentOutput) ToGetInstanceAttachmentsAttachmentOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentOutput {
	return o
}

// The domain of the instance attachment.
func (o GetInstanceAttachmentsAttachmentOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Domain }).(pulumi.StringOutput)
}

// The access endpoint of the instance attachment.
func (o GetInstanceAttachmentsAttachmentOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The resource ID, the value is same as "instanceName".
func (o GetInstanceAttachmentsAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// The name of OTS instance.
func (o GetInstanceAttachmentsAttachmentOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The region of the instance attachment.
func (o GetInstanceAttachmentsAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.Region }).(pulumi.StringOutput)
}

// The ID of attaching VPC to instance.
func (o GetInstanceAttachmentsAttachmentOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.VpcId }).(pulumi.StringOutput)
}

// The name of attaching VPC to instance.
func (o GetInstanceAttachmentsAttachmentOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachmentsAttachment) string { return v.VpcName }).(pulumi.StringOutput)
}

type GetInstanceAttachmentsAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachmentsAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachmentsAttachment)(nil)).Elem()
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) ToGetInstanceAttachmentsAttachmentArrayOutput() GetInstanceAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) ToGetInstanceAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetInstanceAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetInstanceAttachmentsAttachmentArrayOutput) Index(i pulumi.IntInput) GetInstanceAttachmentsAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceAttachmentsAttachment {
		return vs[0].([]GetInstanceAttachmentsAttachment)[vs[1].(int)]
	}).(GetInstanceAttachmentsAttachmentOutput)
}

type GetInstancesInstance struct {
	// The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
	ClusterType string `pulumi:"clusterType"`
	// The create time of the instance.
	CreateTime string `pulumi:"createTime"`
	// The description of the instance.
	Description string `pulumi:"description"`
	// The instance quota which indicating the maximum number of tables.
	EntityQuota int `pulumi:"entityQuota"`
	// ID of the instance.
	Id string `pulumi:"id"`
	// Instance name.
	Name string `pulumi:"name"`
	// The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
	Network string `pulumi:"network"`
	// The maximum adjustable read capacity unit of the instance.
	ReadCapacity int `pulumi:"readCapacity"`
	// Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
	Status string `pulumi:"status"`
	// A map of tags assigned to the instance. It must be in the format:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ots"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := ots.GetInstances(ctx, &ots.GetInstancesArgs{
	// 			Tags: map[string]interface{}{
	// 				"tagKey1": "tagValue1",
	// 				"tagKey2": "tagValue2",
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Tags map[string]interface{} `pulumi:"tags"`
	// The user id of the instance.
	UserId string `pulumi:"userId"`
	// The maximum adjustable write capacity unit of the instance.
	WriteCapacity int `pulumi:"writeCapacity"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
	ClusterType pulumi.StringInput `pulumi:"clusterType"`
	// The create time of the instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The instance quota which indicating the maximum number of tables.
	EntityQuota pulumi.IntInput `pulumi:"entityQuota"`
	// ID of the instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Instance name.
	Name pulumi.StringInput `pulumi:"name"`
	// The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
	Network pulumi.StringInput `pulumi:"network"`
	// The maximum adjustable read capacity unit of the instance.
	ReadCapacity pulumi.IntInput `pulumi:"readCapacity"`
	// Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
	Status pulumi.StringInput `pulumi:"status"`
	// A map of tags assigned to the instance. It must be in the format:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ots"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := ots.GetInstances(ctx, &ots.GetInstancesArgs{
	// 			Tags: map[string]interface{}{
	// 				"tagKey1": "tagValue1",
	// 				"tagKey2": "tagValue2",
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Tags pulumi.MapInput `pulumi:"tags"`
	// The user id of the instance.
	UserId pulumi.StringInput `pulumi:"userId"`
	// The maximum adjustable write capacity unit of the instance.
	WriteCapacity pulumi.IntInput `pulumi:"writeCapacity"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The cluster type of the instance. Possible values: `SSD`, `HYBRID`.
func (o GetInstancesInstanceOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ClusterType }).(pulumi.StringOutput)
}

// The create time of the instance.
func (o GetInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the instance.
func (o GetInstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// The instance quota which indicating the maximum number of tables.
func (o GetInstancesInstanceOutput) EntityQuota() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.EntityQuota }).(pulumi.IntOutput)
}

// ID of the instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// Instance name.
func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// The network type of the instance. Possible values: `NORMAL`, `VPC`, `VPC_CONSOLE`.
func (o GetInstancesInstanceOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Network }).(pulumi.StringOutput)
}

// The maximum adjustable read capacity unit of the instance.
func (o GetInstancesInstanceOutput) ReadCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.ReadCapacity }).(pulumi.IntOutput)
}

// Instance status. Possible values: `Running`, `Disabled`, `Deleting`.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// A map of tags assigned to the instance. It must be in the format:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ots"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ots.GetInstances(ctx, &ots.GetInstancesArgs{
//				Tags: map[string]interface{}{
//					"tagKey1": "tagValue1",
//					"tagKey2": "tagValue2",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetInstancesInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The user id of the instance.
func (o GetInstancesInstanceOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.UserId }).(pulumi.StringOutput)
}

// The maximum adjustable write capacity unit of the instance.
func (o GetInstancesInstanceOutput) WriteCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.WriteCapacity }).(pulumi.IntOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetSearchIndexesIndex struct {
	// The creation time of the index.
	CreateTime int `pulumi:"createTime"`
	// Timestamp for sync phase.
	CurrentSyncTimestamp int `pulumi:"currentSyncTimestamp"`
	// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
	Id string `pulumi:"id"`
	// The index name of the OTS Table which could not be changed.
	IndexName string `pulumi:"indexName"`
	// The name of OTS instance.
	InstanceName string `pulumi:"instanceName"`
	// Last update time for metering data..
	MeteringLastUpdateTime int `pulumi:"meteringLastUpdateTime"`
	// Reserve related resources for the index.
	ReservedReadCu int `pulumi:"reservedReadCu"`
	// The number of rows of data for index.
	RowCount int `pulumi:"rowCount"`
	// JSON representation of the schema of index.
	Schema string `pulumi:"schema"`
	// Storage space occupied by index.
	StorageSize int `pulumi:"storageSize"`
	// The synchronization state of the index.
	SyncPhase string `pulumi:"syncPhase"`
	// The name of OTS table.
	TableName string `pulumi:"tableName"`
	// TTL of index.
	TimeToLive int `pulumi:"timeToLive"`
}

// GetSearchIndexesIndexInput is an input type that accepts GetSearchIndexesIndexArgs and GetSearchIndexesIndexOutput values.
// You can construct a concrete instance of `GetSearchIndexesIndexInput` via:
//
//	GetSearchIndexesIndexArgs{...}
type GetSearchIndexesIndexInput interface {
	pulumi.Input

	ToGetSearchIndexesIndexOutput() GetSearchIndexesIndexOutput
	ToGetSearchIndexesIndexOutputWithContext(context.Context) GetSearchIndexesIndexOutput
}

type GetSearchIndexesIndexArgs struct {
	// The creation time of the index.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// Timestamp for sync phase.
	CurrentSyncTimestamp pulumi.IntInput `pulumi:"currentSyncTimestamp"`
	// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The index name of the OTS Table which could not be changed.
	IndexName pulumi.StringInput `pulumi:"indexName"`
	// The name of OTS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// Last update time for metering data..
	MeteringLastUpdateTime pulumi.IntInput `pulumi:"meteringLastUpdateTime"`
	// Reserve related resources for the index.
	ReservedReadCu pulumi.IntInput `pulumi:"reservedReadCu"`
	// The number of rows of data for index.
	RowCount pulumi.IntInput `pulumi:"rowCount"`
	// JSON representation of the schema of index.
	Schema pulumi.StringInput `pulumi:"schema"`
	// Storage space occupied by index.
	StorageSize pulumi.IntInput `pulumi:"storageSize"`
	// The synchronization state of the index.
	SyncPhase pulumi.StringInput `pulumi:"syncPhase"`
	// The name of OTS table.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// TTL of index.
	TimeToLive pulumi.IntInput `pulumi:"timeToLive"`
}

func (GetSearchIndexesIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchIndexesIndex)(nil)).Elem()
}

func (i GetSearchIndexesIndexArgs) ToGetSearchIndexesIndexOutput() GetSearchIndexesIndexOutput {
	return i.ToGetSearchIndexesIndexOutputWithContext(context.Background())
}

func (i GetSearchIndexesIndexArgs) ToGetSearchIndexesIndexOutputWithContext(ctx context.Context) GetSearchIndexesIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchIndexesIndexOutput)
}

// GetSearchIndexesIndexArrayInput is an input type that accepts GetSearchIndexesIndexArray and GetSearchIndexesIndexArrayOutput values.
// You can construct a concrete instance of `GetSearchIndexesIndexArrayInput` via:
//
//	GetSearchIndexesIndexArray{ GetSearchIndexesIndexArgs{...} }
type GetSearchIndexesIndexArrayInput interface {
	pulumi.Input

	ToGetSearchIndexesIndexArrayOutput() GetSearchIndexesIndexArrayOutput
	ToGetSearchIndexesIndexArrayOutputWithContext(context.Context) GetSearchIndexesIndexArrayOutput
}

type GetSearchIndexesIndexArray []GetSearchIndexesIndexInput

func (GetSearchIndexesIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchIndexesIndex)(nil)).Elem()
}

func (i GetSearchIndexesIndexArray) ToGetSearchIndexesIndexArrayOutput() GetSearchIndexesIndexArrayOutput {
	return i.ToGetSearchIndexesIndexArrayOutputWithContext(context.Background())
}

func (i GetSearchIndexesIndexArray) ToGetSearchIndexesIndexArrayOutputWithContext(ctx context.Context) GetSearchIndexesIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchIndexesIndexArrayOutput)
}

type GetSearchIndexesIndexOutput struct{ *pulumi.OutputState }

func (GetSearchIndexesIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchIndexesIndex)(nil)).Elem()
}

func (o GetSearchIndexesIndexOutput) ToGetSearchIndexesIndexOutput() GetSearchIndexesIndexOutput {
	return o
}

func (o GetSearchIndexesIndexOutput) ToGetSearchIndexesIndexOutputWithContext(ctx context.Context) GetSearchIndexesIndexOutput {
	return o
}

// The creation time of the index.
func (o GetSearchIndexesIndexOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.CreateTime }).(pulumi.IntOutput)
}

// Timestamp for sync phase.
func (o GetSearchIndexesIndexOutput) CurrentSyncTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.CurrentSyncTimestamp }).(pulumi.IntOutput)
}

// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
func (o GetSearchIndexesIndexOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.Id }).(pulumi.StringOutput)
}

// The index name of the OTS Table which could not be changed.
func (o GetSearchIndexesIndexOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.IndexName }).(pulumi.StringOutput)
}

// The name of OTS instance.
func (o GetSearchIndexesIndexOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.InstanceName }).(pulumi.StringOutput)
}

// Last update time for metering data..
func (o GetSearchIndexesIndexOutput) MeteringLastUpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.MeteringLastUpdateTime }).(pulumi.IntOutput)
}

// Reserve related resources for the index.
func (o GetSearchIndexesIndexOutput) ReservedReadCu() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.ReservedReadCu }).(pulumi.IntOutput)
}

// The number of rows of data for index.
func (o GetSearchIndexesIndexOutput) RowCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.RowCount }).(pulumi.IntOutput)
}

// JSON representation of the schema of index.
func (o GetSearchIndexesIndexOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.Schema }).(pulumi.StringOutput)
}

// Storage space occupied by index.
func (o GetSearchIndexesIndexOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.StorageSize }).(pulumi.IntOutput)
}

// The synchronization state of the index.
func (o GetSearchIndexesIndexOutput) SyncPhase() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.SyncPhase }).(pulumi.StringOutput)
}

// The name of OTS table.
func (o GetSearchIndexesIndexOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) string { return v.TableName }).(pulumi.StringOutput)
}

// TTL of index.
func (o GetSearchIndexesIndexOutput) TimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v GetSearchIndexesIndex) int { return v.TimeToLive }).(pulumi.IntOutput)
}

type GetSearchIndexesIndexArrayOutput struct{ *pulumi.OutputState }

func (GetSearchIndexesIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchIndexesIndex)(nil)).Elem()
}

func (o GetSearchIndexesIndexArrayOutput) ToGetSearchIndexesIndexArrayOutput() GetSearchIndexesIndexArrayOutput {
	return o
}

func (o GetSearchIndexesIndexArrayOutput) ToGetSearchIndexesIndexArrayOutputWithContext(ctx context.Context) GetSearchIndexesIndexArrayOutput {
	return o
}

func (o GetSearchIndexesIndexArrayOutput) Index(i pulumi.IntInput) GetSearchIndexesIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSearchIndexesIndex {
		return vs[0].([]GetSearchIndexesIndex)[vs[1].(int)]
	}).(GetSearchIndexesIndexOutput)
}

type GetSecondaryIndexesIndex struct {
	// A list of defined column for index, referenced from Table's primary keys or predefined columns.
	DefinedColumns []string `pulumi:"definedColumns"`
	// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
	Id string `pulumi:"id"`
	// The index name of the OTS Table which could not be changed.
	IndexName string `pulumi:"indexName"`
	// The index type of the OTS Table which could not be changed.
	IndexType string `pulumi:"indexType"`
	// The name of OTS instance.
	InstanceName string `pulumi:"instanceName"`
	// A list of primary keys for index, referenced from Table's primary keys or predefined columns.
	PrimaryKeys []string `pulumi:"primaryKeys"`
	// The name of OTS table.
	TableName string `pulumi:"tableName"`
}

// GetSecondaryIndexesIndexInput is an input type that accepts GetSecondaryIndexesIndexArgs and GetSecondaryIndexesIndexOutput values.
// You can construct a concrete instance of `GetSecondaryIndexesIndexInput` via:
//
//	GetSecondaryIndexesIndexArgs{...}
type GetSecondaryIndexesIndexInput interface {
	pulumi.Input

	ToGetSecondaryIndexesIndexOutput() GetSecondaryIndexesIndexOutput
	ToGetSecondaryIndexesIndexOutputWithContext(context.Context) GetSecondaryIndexesIndexOutput
}

type GetSecondaryIndexesIndexArgs struct {
	// A list of defined column for index, referenced from Table's primary keys or predefined columns.
	DefinedColumns pulumi.StringArrayInput `pulumi:"definedColumns"`
	// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The index name of the OTS Table which could not be changed.
	IndexName pulumi.StringInput `pulumi:"indexName"`
	// The index type of the OTS Table which could not be changed.
	IndexType pulumi.StringInput `pulumi:"indexType"`
	// The name of OTS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// A list of primary keys for index, referenced from Table's primary keys or predefined columns.
	PrimaryKeys pulumi.StringArrayInput `pulumi:"primaryKeys"`
	// The name of OTS table.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (GetSecondaryIndexesIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecondaryIndexesIndex)(nil)).Elem()
}

func (i GetSecondaryIndexesIndexArgs) ToGetSecondaryIndexesIndexOutput() GetSecondaryIndexesIndexOutput {
	return i.ToGetSecondaryIndexesIndexOutputWithContext(context.Background())
}

func (i GetSecondaryIndexesIndexArgs) ToGetSecondaryIndexesIndexOutputWithContext(ctx context.Context) GetSecondaryIndexesIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecondaryIndexesIndexOutput)
}

// GetSecondaryIndexesIndexArrayInput is an input type that accepts GetSecondaryIndexesIndexArray and GetSecondaryIndexesIndexArrayOutput values.
// You can construct a concrete instance of `GetSecondaryIndexesIndexArrayInput` via:
//
//	GetSecondaryIndexesIndexArray{ GetSecondaryIndexesIndexArgs{...} }
type GetSecondaryIndexesIndexArrayInput interface {
	pulumi.Input

	ToGetSecondaryIndexesIndexArrayOutput() GetSecondaryIndexesIndexArrayOutput
	ToGetSecondaryIndexesIndexArrayOutputWithContext(context.Context) GetSecondaryIndexesIndexArrayOutput
}

type GetSecondaryIndexesIndexArray []GetSecondaryIndexesIndexInput

func (GetSecondaryIndexesIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecondaryIndexesIndex)(nil)).Elem()
}

func (i GetSecondaryIndexesIndexArray) ToGetSecondaryIndexesIndexArrayOutput() GetSecondaryIndexesIndexArrayOutput {
	return i.ToGetSecondaryIndexesIndexArrayOutputWithContext(context.Background())
}

func (i GetSecondaryIndexesIndexArray) ToGetSecondaryIndexesIndexArrayOutputWithContext(ctx context.Context) GetSecondaryIndexesIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecondaryIndexesIndexArrayOutput)
}

type GetSecondaryIndexesIndexOutput struct{ *pulumi.OutputState }

func (GetSecondaryIndexesIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecondaryIndexesIndex)(nil)).Elem()
}

func (o GetSecondaryIndexesIndexOutput) ToGetSecondaryIndexesIndexOutput() GetSecondaryIndexesIndexOutput {
	return o
}

func (o GetSecondaryIndexesIndexOutput) ToGetSecondaryIndexesIndexOutputWithContext(ctx context.Context) GetSecondaryIndexesIndexOutput {
	return o
}

// A list of defined column for index, referenced from Table's primary keys or predefined columns.
func (o GetSecondaryIndexesIndexOutput) DefinedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) []string { return v.DefinedColumns }).(pulumi.StringArrayOutput)
}

// The resource ID. The value is `<instance_name>:<table_name>:<indexName>:<indexType>`.
func (o GetSecondaryIndexesIndexOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) string { return v.Id }).(pulumi.StringOutput)
}

// The index name of the OTS Table which could not be changed.
func (o GetSecondaryIndexesIndexOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) string { return v.IndexName }).(pulumi.StringOutput)
}

// The index type of the OTS Table which could not be changed.
func (o GetSecondaryIndexesIndexOutput) IndexType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) string { return v.IndexType }).(pulumi.StringOutput)
}

// The name of OTS instance.
func (o GetSecondaryIndexesIndexOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) string { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of primary keys for index, referenced from Table's primary keys or predefined columns.
func (o GetSecondaryIndexesIndexOutput) PrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) []string { return v.PrimaryKeys }).(pulumi.StringArrayOutput)
}

// The name of OTS table.
func (o GetSecondaryIndexesIndexOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecondaryIndexesIndex) string { return v.TableName }).(pulumi.StringOutput)
}

type GetSecondaryIndexesIndexArrayOutput struct{ *pulumi.OutputState }

func (GetSecondaryIndexesIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecondaryIndexesIndex)(nil)).Elem()
}

func (o GetSecondaryIndexesIndexArrayOutput) ToGetSecondaryIndexesIndexArrayOutput() GetSecondaryIndexesIndexArrayOutput {
	return o
}

func (o GetSecondaryIndexesIndexArrayOutput) ToGetSecondaryIndexesIndexArrayOutputWithContext(ctx context.Context) GetSecondaryIndexesIndexArrayOutput {
	return o
}

func (o GetSecondaryIndexesIndexArrayOutput) Index(i pulumi.IntInput) GetSecondaryIndexesIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecondaryIndexesIndex {
		return vs[0].([]GetSecondaryIndexesIndex)[vs[1].(int)]
	}).(GetSecondaryIndexesIndexOutput)
}

type GetTablesTable struct {
	DefinedColumns []GetTablesTableDefinedColumn `pulumi:"definedColumns"`
	// ID of the table. The value is `<instance_name>:<table_name>`.
	Id string `pulumi:"id"`
	// The name of OTS instance.
	InstanceName string `pulumi:"instanceName"`
	// The maximum number of versions stored in this table.
	MaxVersion int `pulumi:"maxVersion"`
	// The property of `TableMeta` which indicates the structure information of a table.
	PrimaryKeys []GetTablesTablePrimaryKey `pulumi:"primaryKeys"`
	// The table name of the OTS which could not be changed.
	TableName string `pulumi:"tableName"`
	// The retention time of data stored in this table.
	TimeToLive int `pulumi:"timeToLive"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//	GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	DefinedColumns GetTablesTableDefinedColumnArrayInput `pulumi:"definedColumns"`
	// ID of the table. The value is `<instance_name>:<table_name>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of OTS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The maximum number of versions stored in this table.
	MaxVersion pulumi.IntInput `pulumi:"maxVersion"`
	// The property of `TableMeta` which indicates the structure information of a table.
	PrimaryKeys GetTablesTablePrimaryKeyArrayInput `pulumi:"primaryKeys"`
	// The table name of the OTS which could not be changed.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// The retention time of data stored in this table.
	TimeToLive pulumi.IntInput `pulumi:"timeToLive"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//	GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) DefinedColumns() GetTablesTableDefinedColumnArrayOutput {
	return o.ApplyT(func(v GetTablesTable) []GetTablesTableDefinedColumn { return v.DefinedColumns }).(GetTablesTableDefinedColumnArrayOutput)
}

// ID of the table. The value is `<instance_name>:<table_name>`.
func (o GetTablesTableOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Id }).(pulumi.StringOutput)
}

// The name of OTS instance.
func (o GetTablesTableOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The maximum number of versions stored in this table.
func (o GetTablesTableOutput) MaxVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTable) int { return v.MaxVersion }).(pulumi.IntOutput)
}

// The property of `TableMeta` which indicates the structure information of a table.
func (o GetTablesTableOutput) PrimaryKeys() GetTablesTablePrimaryKeyArrayOutput {
	return o.ApplyT(func(v GetTablesTable) []GetTablesTablePrimaryKey { return v.PrimaryKeys }).(GetTablesTablePrimaryKeyArrayOutput)
}

// The table name of the OTS which could not be changed.
func (o GetTablesTableOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.TableName }).(pulumi.StringOutput)
}

// The retention time of data stored in this table.
func (o GetTablesTableOutput) TimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTable) int { return v.TimeToLive }).(pulumi.IntOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

type GetTablesTableDefinedColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetTablesTableDefinedColumnInput is an input type that accepts GetTablesTableDefinedColumnArgs and GetTablesTableDefinedColumnOutput values.
// You can construct a concrete instance of `GetTablesTableDefinedColumnInput` via:
//
//	GetTablesTableDefinedColumnArgs{...}
type GetTablesTableDefinedColumnInput interface {
	pulumi.Input

	ToGetTablesTableDefinedColumnOutput() GetTablesTableDefinedColumnOutput
	ToGetTablesTableDefinedColumnOutputWithContext(context.Context) GetTablesTableDefinedColumnOutput
}

type GetTablesTableDefinedColumnArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTablesTableDefinedColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableDefinedColumn)(nil)).Elem()
}

func (i GetTablesTableDefinedColumnArgs) ToGetTablesTableDefinedColumnOutput() GetTablesTableDefinedColumnOutput {
	return i.ToGetTablesTableDefinedColumnOutputWithContext(context.Background())
}

func (i GetTablesTableDefinedColumnArgs) ToGetTablesTableDefinedColumnOutputWithContext(ctx context.Context) GetTablesTableDefinedColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableDefinedColumnOutput)
}

// GetTablesTableDefinedColumnArrayInput is an input type that accepts GetTablesTableDefinedColumnArray and GetTablesTableDefinedColumnArrayOutput values.
// You can construct a concrete instance of `GetTablesTableDefinedColumnArrayInput` via:
//
//	GetTablesTableDefinedColumnArray{ GetTablesTableDefinedColumnArgs{...} }
type GetTablesTableDefinedColumnArrayInput interface {
	pulumi.Input

	ToGetTablesTableDefinedColumnArrayOutput() GetTablesTableDefinedColumnArrayOutput
	ToGetTablesTableDefinedColumnArrayOutputWithContext(context.Context) GetTablesTableDefinedColumnArrayOutput
}

type GetTablesTableDefinedColumnArray []GetTablesTableDefinedColumnInput

func (GetTablesTableDefinedColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableDefinedColumn)(nil)).Elem()
}

func (i GetTablesTableDefinedColumnArray) ToGetTablesTableDefinedColumnArrayOutput() GetTablesTableDefinedColumnArrayOutput {
	return i.ToGetTablesTableDefinedColumnArrayOutputWithContext(context.Background())
}

func (i GetTablesTableDefinedColumnArray) ToGetTablesTableDefinedColumnArrayOutputWithContext(ctx context.Context) GetTablesTableDefinedColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableDefinedColumnArrayOutput)
}

type GetTablesTableDefinedColumnOutput struct{ *pulumi.OutputState }

func (GetTablesTableDefinedColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableDefinedColumn)(nil)).Elem()
}

func (o GetTablesTableDefinedColumnOutput) ToGetTablesTableDefinedColumnOutput() GetTablesTableDefinedColumnOutput {
	return o
}

func (o GetTablesTableDefinedColumnOutput) ToGetTablesTableDefinedColumnOutputWithContext(ctx context.Context) GetTablesTableDefinedColumnOutput {
	return o
}

func (o GetTablesTableDefinedColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableDefinedColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesTableDefinedColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableDefinedColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetTablesTableDefinedColumnArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableDefinedColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableDefinedColumn)(nil)).Elem()
}

func (o GetTablesTableDefinedColumnArrayOutput) ToGetTablesTableDefinedColumnArrayOutput() GetTablesTableDefinedColumnArrayOutput {
	return o
}

func (o GetTablesTableDefinedColumnArrayOutput) ToGetTablesTableDefinedColumnArrayOutputWithContext(ctx context.Context) GetTablesTableDefinedColumnArrayOutput {
	return o
}

func (o GetTablesTableDefinedColumnArrayOutput) Index(i pulumi.IntInput) GetTablesTableDefinedColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableDefinedColumn {
		return vs[0].([]GetTablesTableDefinedColumn)[vs[1].(int)]
	}).(GetTablesTableDefinedColumnOutput)
}

type GetTablesTablePrimaryKey struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetTablesTablePrimaryKeyInput is an input type that accepts GetTablesTablePrimaryKeyArgs and GetTablesTablePrimaryKeyOutput values.
// You can construct a concrete instance of `GetTablesTablePrimaryKeyInput` via:
//
//	GetTablesTablePrimaryKeyArgs{...}
type GetTablesTablePrimaryKeyInput interface {
	pulumi.Input

	ToGetTablesTablePrimaryKeyOutput() GetTablesTablePrimaryKeyOutput
	ToGetTablesTablePrimaryKeyOutputWithContext(context.Context) GetTablesTablePrimaryKeyOutput
}

type GetTablesTablePrimaryKeyArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTablesTablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTablePrimaryKey)(nil)).Elem()
}

func (i GetTablesTablePrimaryKeyArgs) ToGetTablesTablePrimaryKeyOutput() GetTablesTablePrimaryKeyOutput {
	return i.ToGetTablesTablePrimaryKeyOutputWithContext(context.Background())
}

func (i GetTablesTablePrimaryKeyArgs) ToGetTablesTablePrimaryKeyOutputWithContext(ctx context.Context) GetTablesTablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTablePrimaryKeyOutput)
}

// GetTablesTablePrimaryKeyArrayInput is an input type that accepts GetTablesTablePrimaryKeyArray and GetTablesTablePrimaryKeyArrayOutput values.
// You can construct a concrete instance of `GetTablesTablePrimaryKeyArrayInput` via:
//
//	GetTablesTablePrimaryKeyArray{ GetTablesTablePrimaryKeyArgs{...} }
type GetTablesTablePrimaryKeyArrayInput interface {
	pulumi.Input

	ToGetTablesTablePrimaryKeyArrayOutput() GetTablesTablePrimaryKeyArrayOutput
	ToGetTablesTablePrimaryKeyArrayOutputWithContext(context.Context) GetTablesTablePrimaryKeyArrayOutput
}

type GetTablesTablePrimaryKeyArray []GetTablesTablePrimaryKeyInput

func (GetTablesTablePrimaryKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTablePrimaryKey)(nil)).Elem()
}

func (i GetTablesTablePrimaryKeyArray) ToGetTablesTablePrimaryKeyArrayOutput() GetTablesTablePrimaryKeyArrayOutput {
	return i.ToGetTablesTablePrimaryKeyArrayOutputWithContext(context.Background())
}

func (i GetTablesTablePrimaryKeyArray) ToGetTablesTablePrimaryKeyArrayOutputWithContext(ctx context.Context) GetTablesTablePrimaryKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTablePrimaryKeyArrayOutput)
}

type GetTablesTablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (GetTablesTablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTablePrimaryKey)(nil)).Elem()
}

func (o GetTablesTablePrimaryKeyOutput) ToGetTablesTablePrimaryKeyOutput() GetTablesTablePrimaryKeyOutput {
	return o
}

func (o GetTablesTablePrimaryKeyOutput) ToGetTablesTablePrimaryKeyOutputWithContext(ctx context.Context) GetTablesTablePrimaryKeyOutput {
	return o
}

func (o GetTablesTablePrimaryKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTablePrimaryKey) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesTablePrimaryKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTablePrimaryKey) string { return v.Type }).(pulumi.StringOutput)
}

type GetTablesTablePrimaryKeyArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTablePrimaryKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTablePrimaryKey)(nil)).Elem()
}

func (o GetTablesTablePrimaryKeyArrayOutput) ToGetTablesTablePrimaryKeyArrayOutput() GetTablesTablePrimaryKeyArrayOutput {
	return o
}

func (o GetTablesTablePrimaryKeyArrayOutput) ToGetTablesTablePrimaryKeyArrayOutputWithContext(ctx context.Context) GetTablesTablePrimaryKeyArrayOutput {
	return o
}

func (o GetTablesTablePrimaryKeyArrayOutput) Index(i pulumi.IntInput) GetTablesTablePrimaryKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTablePrimaryKey {
		return vs[0].([]GetTablesTablePrimaryKey)[vs[1].(int)]
	}).(GetTablesTablePrimaryKeyOutput)
}

type GetTunnelsTunnel struct {
	// The channels of OTS tunnel. Each element contains the following attributes:
	Channels []GetTunnelsTunnelChannel `pulumi:"channels"`
	// The creation time of the Tunnel.
	CreateTime int `pulumi:"createTime"`
	// Whether the tunnel has expired.
	Expired bool `pulumi:"expired"`
	// The resource ID. The value is `<instance_name>:<table_name>:<tunnel_name>`.
	Id string `pulumi:"id"`
	// The name of OTS instance.
	InstanceName string `pulumi:"instanceName"`
	// The name of OTS table.
	TableName string `pulumi:"tableName"`
	// The tunnel id of the OTS which could not be changed.
	TunnelId string `pulumi:"tunnelId"`
	// The tunnel name of the OTS which could not be changed.
	TunnelName string `pulumi:"tunnelName"`
	// The latest consumption time of the tunnel, unix time in nanosecond.
	TunnelRpo int `pulumi:"tunnelRpo"`
	// The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
	TunnelStage string `pulumi:"tunnelStage"`
	// The type of the OTS tunnel, valid values: `BaseAndStream`, `BaseData`, `Stream`.
	TunnelType string `pulumi:"tunnelType"`
}

// GetTunnelsTunnelInput is an input type that accepts GetTunnelsTunnelArgs and GetTunnelsTunnelOutput values.
// You can construct a concrete instance of `GetTunnelsTunnelInput` via:
//
//	GetTunnelsTunnelArgs{...}
type GetTunnelsTunnelInput interface {
	pulumi.Input

	ToGetTunnelsTunnelOutput() GetTunnelsTunnelOutput
	ToGetTunnelsTunnelOutputWithContext(context.Context) GetTunnelsTunnelOutput
}

type GetTunnelsTunnelArgs struct {
	// The channels of OTS tunnel. Each element contains the following attributes:
	Channels GetTunnelsTunnelChannelArrayInput `pulumi:"channels"`
	// The creation time of the Tunnel.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// Whether the tunnel has expired.
	Expired pulumi.BoolInput `pulumi:"expired"`
	// The resource ID. The value is `<instance_name>:<table_name>:<tunnel_name>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of OTS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The name of OTS table.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// The tunnel id of the OTS which could not be changed.
	TunnelId pulumi.StringInput `pulumi:"tunnelId"`
	// The tunnel name of the OTS which could not be changed.
	TunnelName pulumi.StringInput `pulumi:"tunnelName"`
	// The latest consumption time of the tunnel, unix time in nanosecond.
	TunnelRpo pulumi.IntInput `pulumi:"tunnelRpo"`
	// The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
	TunnelStage pulumi.StringInput `pulumi:"tunnelStage"`
	// The type of the OTS tunnel, valid values: `BaseAndStream`, `BaseData`, `Stream`.
	TunnelType pulumi.StringInput `pulumi:"tunnelType"`
}

func (GetTunnelsTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTunnelsTunnel)(nil)).Elem()
}

func (i GetTunnelsTunnelArgs) ToGetTunnelsTunnelOutput() GetTunnelsTunnelOutput {
	return i.ToGetTunnelsTunnelOutputWithContext(context.Background())
}

func (i GetTunnelsTunnelArgs) ToGetTunnelsTunnelOutputWithContext(ctx context.Context) GetTunnelsTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTunnelsTunnelOutput)
}

// GetTunnelsTunnelArrayInput is an input type that accepts GetTunnelsTunnelArray and GetTunnelsTunnelArrayOutput values.
// You can construct a concrete instance of `GetTunnelsTunnelArrayInput` via:
//
//	GetTunnelsTunnelArray{ GetTunnelsTunnelArgs{...} }
type GetTunnelsTunnelArrayInput interface {
	pulumi.Input

	ToGetTunnelsTunnelArrayOutput() GetTunnelsTunnelArrayOutput
	ToGetTunnelsTunnelArrayOutputWithContext(context.Context) GetTunnelsTunnelArrayOutput
}

type GetTunnelsTunnelArray []GetTunnelsTunnelInput

func (GetTunnelsTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTunnelsTunnel)(nil)).Elem()
}

func (i GetTunnelsTunnelArray) ToGetTunnelsTunnelArrayOutput() GetTunnelsTunnelArrayOutput {
	return i.ToGetTunnelsTunnelArrayOutputWithContext(context.Background())
}

func (i GetTunnelsTunnelArray) ToGetTunnelsTunnelArrayOutputWithContext(ctx context.Context) GetTunnelsTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTunnelsTunnelArrayOutput)
}

type GetTunnelsTunnelOutput struct{ *pulumi.OutputState }

func (GetTunnelsTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTunnelsTunnel)(nil)).Elem()
}

func (o GetTunnelsTunnelOutput) ToGetTunnelsTunnelOutput() GetTunnelsTunnelOutput {
	return o
}

func (o GetTunnelsTunnelOutput) ToGetTunnelsTunnelOutputWithContext(ctx context.Context) GetTunnelsTunnelOutput {
	return o
}

// The channels of OTS tunnel. Each element contains the following attributes:
func (o GetTunnelsTunnelOutput) Channels() GetTunnelsTunnelChannelArrayOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) []GetTunnelsTunnelChannel { return v.Channels }).(GetTunnelsTunnelChannelArrayOutput)
}

// The creation time of the Tunnel.
func (o GetTunnelsTunnelOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) int { return v.CreateTime }).(pulumi.IntOutput)
}

// Whether the tunnel has expired.
func (o GetTunnelsTunnelOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) bool { return v.Expired }).(pulumi.BoolOutput)
}

// The resource ID. The value is `<instance_name>:<table_name>:<tunnel_name>`.
func (o GetTunnelsTunnelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.Id }).(pulumi.StringOutput)
}

// The name of OTS instance.
func (o GetTunnelsTunnelOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of OTS table.
func (o GetTunnelsTunnelOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.TableName }).(pulumi.StringOutput)
}

// The tunnel id of the OTS which could not be changed.
func (o GetTunnelsTunnelOutput) TunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.TunnelId }).(pulumi.StringOutput)
}

// The tunnel name of the OTS which could not be changed.
func (o GetTunnelsTunnelOutput) TunnelName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.TunnelName }).(pulumi.StringOutput)
}

// The latest consumption time of the tunnel, unix time in nanosecond.
func (o GetTunnelsTunnelOutput) TunnelRpo() pulumi.IntOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) int { return v.TunnelRpo }).(pulumi.IntOutput)
}

// The stage of OTS tunnel, valid values: `InitBaseDataAndStreamShard`, `ProcessBaseData`, `ProcessStream`.
func (o GetTunnelsTunnelOutput) TunnelStage() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.TunnelStage }).(pulumi.StringOutput)
}

// The type of the OTS tunnel, valid values: `BaseAndStream`, `BaseData`, `Stream`.
func (o GetTunnelsTunnelOutput) TunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnel) string { return v.TunnelType }).(pulumi.StringOutput)
}

type GetTunnelsTunnelArrayOutput struct{ *pulumi.OutputState }

func (GetTunnelsTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTunnelsTunnel)(nil)).Elem()
}

func (o GetTunnelsTunnelArrayOutput) ToGetTunnelsTunnelArrayOutput() GetTunnelsTunnelArrayOutput {
	return o
}

func (o GetTunnelsTunnelArrayOutput) ToGetTunnelsTunnelArrayOutputWithContext(ctx context.Context) GetTunnelsTunnelArrayOutput {
	return o
}

func (o GetTunnelsTunnelArrayOutput) Index(i pulumi.IntInput) GetTunnelsTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTunnelsTunnel {
		return vs[0].([]GetTunnelsTunnel)[vs[1].(int)]
	}).(GetTunnelsTunnelOutput)
}

type GetTunnelsTunnelChannel struct {
	// The id of the channel.
	ChannelId string `pulumi:"channelId"`
	// The latest consumption time of the channel, unix time in nanosecond
	ChannelRpo int `pulumi:"channelRpo"`
	// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
	ChannelStatus string `pulumi:"channelStatus"`
	// The type of the channel, valid values: `BaseData`, `Stream`.
	ChannelType string `pulumi:"channelType"`
	// The client id of the channel.
	ClientId string `pulumi:"clientId"`
}

// GetTunnelsTunnelChannelInput is an input type that accepts GetTunnelsTunnelChannelArgs and GetTunnelsTunnelChannelOutput values.
// You can construct a concrete instance of `GetTunnelsTunnelChannelInput` via:
//
//	GetTunnelsTunnelChannelArgs{...}
type GetTunnelsTunnelChannelInput interface {
	pulumi.Input

	ToGetTunnelsTunnelChannelOutput() GetTunnelsTunnelChannelOutput
	ToGetTunnelsTunnelChannelOutputWithContext(context.Context) GetTunnelsTunnelChannelOutput
}

type GetTunnelsTunnelChannelArgs struct {
	// The id of the channel.
	ChannelId pulumi.StringInput `pulumi:"channelId"`
	// The latest consumption time of the channel, unix time in nanosecond
	ChannelRpo pulumi.IntInput `pulumi:"channelRpo"`
	// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
	ChannelStatus pulumi.StringInput `pulumi:"channelStatus"`
	// The type of the channel, valid values: `BaseData`, `Stream`.
	ChannelType pulumi.StringInput `pulumi:"channelType"`
	// The client id of the channel.
	ClientId pulumi.StringInput `pulumi:"clientId"`
}

func (GetTunnelsTunnelChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTunnelsTunnelChannel)(nil)).Elem()
}

func (i GetTunnelsTunnelChannelArgs) ToGetTunnelsTunnelChannelOutput() GetTunnelsTunnelChannelOutput {
	return i.ToGetTunnelsTunnelChannelOutputWithContext(context.Background())
}

func (i GetTunnelsTunnelChannelArgs) ToGetTunnelsTunnelChannelOutputWithContext(ctx context.Context) GetTunnelsTunnelChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTunnelsTunnelChannelOutput)
}

// GetTunnelsTunnelChannelArrayInput is an input type that accepts GetTunnelsTunnelChannelArray and GetTunnelsTunnelChannelArrayOutput values.
// You can construct a concrete instance of `GetTunnelsTunnelChannelArrayInput` via:
//
//	GetTunnelsTunnelChannelArray{ GetTunnelsTunnelChannelArgs{...} }
type GetTunnelsTunnelChannelArrayInput interface {
	pulumi.Input

	ToGetTunnelsTunnelChannelArrayOutput() GetTunnelsTunnelChannelArrayOutput
	ToGetTunnelsTunnelChannelArrayOutputWithContext(context.Context) GetTunnelsTunnelChannelArrayOutput
}

type GetTunnelsTunnelChannelArray []GetTunnelsTunnelChannelInput

func (GetTunnelsTunnelChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTunnelsTunnelChannel)(nil)).Elem()
}

func (i GetTunnelsTunnelChannelArray) ToGetTunnelsTunnelChannelArrayOutput() GetTunnelsTunnelChannelArrayOutput {
	return i.ToGetTunnelsTunnelChannelArrayOutputWithContext(context.Background())
}

func (i GetTunnelsTunnelChannelArray) ToGetTunnelsTunnelChannelArrayOutputWithContext(ctx context.Context) GetTunnelsTunnelChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTunnelsTunnelChannelArrayOutput)
}

type GetTunnelsTunnelChannelOutput struct{ *pulumi.OutputState }

func (GetTunnelsTunnelChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTunnelsTunnelChannel)(nil)).Elem()
}

func (o GetTunnelsTunnelChannelOutput) ToGetTunnelsTunnelChannelOutput() GetTunnelsTunnelChannelOutput {
	return o
}

func (o GetTunnelsTunnelChannelOutput) ToGetTunnelsTunnelChannelOutputWithContext(ctx context.Context) GetTunnelsTunnelChannelOutput {
	return o
}

// The id of the channel.
func (o GetTunnelsTunnelChannelOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnelChannel) string { return v.ChannelId }).(pulumi.StringOutput)
}

// The latest consumption time of the channel, unix time in nanosecond
func (o GetTunnelsTunnelChannelOutput) ChannelRpo() pulumi.IntOutput {
	return o.ApplyT(func(v GetTunnelsTunnelChannel) int { return v.ChannelRpo }).(pulumi.IntOutput)
}

// The status of the channel, valid values: `WAIT`, `OPEN`, `CLOSING`, `CLOSE`, `TERMINATED`.
func (o GetTunnelsTunnelChannelOutput) ChannelStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnelChannel) string { return v.ChannelStatus }).(pulumi.StringOutput)
}

// The type of the channel, valid values: `BaseData`, `Stream`.
func (o GetTunnelsTunnelChannelOutput) ChannelType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnelChannel) string { return v.ChannelType }).(pulumi.StringOutput)
}

// The client id of the channel.
func (o GetTunnelsTunnelChannelOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTunnelsTunnelChannel) string { return v.ClientId }).(pulumi.StringOutput)
}

type GetTunnelsTunnelChannelArrayOutput struct{ *pulumi.OutputState }

func (GetTunnelsTunnelChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTunnelsTunnelChannel)(nil)).Elem()
}

func (o GetTunnelsTunnelChannelArrayOutput) ToGetTunnelsTunnelChannelArrayOutput() GetTunnelsTunnelChannelArrayOutput {
	return o
}

func (o GetTunnelsTunnelChannelArrayOutput) ToGetTunnelsTunnelChannelArrayOutputWithContext(ctx context.Context) GetTunnelsTunnelChannelArrayOutput {
	return o
}

func (o GetTunnelsTunnelChannelArrayOutput) Index(i pulumi.IntInput) GetTunnelsTunnelChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTunnelsTunnelChannel {
		return vs[0].([]GetTunnelsTunnelChannel)[vs[1].(int)]
	}).(GetTunnelsTunnelChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaInput)(nil)).Elem(), SearchIndexSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaArrayInput)(nil)).Elem(), SearchIndexSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaFieldSchemaInput)(nil)).Elem(), SearchIndexSchemaFieldSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaFieldSchemaArrayInput)(nil)).Elem(), SearchIndexSchemaFieldSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSettingInput)(nil)).Elem(), SearchIndexSchemaIndexSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSettingArrayInput)(nil)).Elem(), SearchIndexSchemaIndexSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSortInput)(nil)).Elem(), SearchIndexSchemaIndexSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSortArrayInput)(nil)).Elem(), SearchIndexSchemaIndexSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSortSorterInput)(nil)).Elem(), SearchIndexSchemaIndexSortSorterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SearchIndexSchemaIndexSortSorterArrayInput)(nil)).Elem(), SearchIndexSchemaIndexSortSorterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableDefinedColumnInput)(nil)).Elem(), TableDefinedColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableDefinedColumnArrayInput)(nil)).Elem(), TableDefinedColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyInput)(nil)).Elem(), TablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePrimaryKeyArrayInput)(nil)).Elem(), TablePrimaryKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelChannelInput)(nil)).Elem(), TunnelChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelChannelArrayInput)(nil)).Elem(), TunnelChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceAttachmentsAttachmentInput)(nil)).Elem(), GetInstanceAttachmentsAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceAttachmentsAttachmentArrayInput)(nil)).Elem(), GetInstanceAttachmentsAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchIndexesIndexInput)(nil)).Elem(), GetSearchIndexesIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchIndexesIndexArrayInput)(nil)).Elem(), GetSearchIndexesIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecondaryIndexesIndexInput)(nil)).Elem(), GetSecondaryIndexesIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecondaryIndexesIndexArrayInput)(nil)).Elem(), GetSecondaryIndexesIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableInput)(nil)).Elem(), GetTablesTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableArrayInput)(nil)).Elem(), GetTablesTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableDefinedColumnInput)(nil)).Elem(), GetTablesTableDefinedColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableDefinedColumnArrayInput)(nil)).Elem(), GetTablesTableDefinedColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTablePrimaryKeyInput)(nil)).Elem(), GetTablesTablePrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTablePrimaryKeyArrayInput)(nil)).Elem(), GetTablesTablePrimaryKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTunnelsTunnelInput)(nil)).Elem(), GetTunnelsTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTunnelsTunnelArrayInput)(nil)).Elem(), GetTunnelsTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTunnelsTunnelChannelInput)(nil)).Elem(), GetTunnelsTunnelChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTunnelsTunnelChannelArrayInput)(nil)).Elem(), GetTunnelsTunnelChannelArray{})
	pulumi.RegisterOutputType(SearchIndexSchemaOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaArrayOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaFieldSchemaOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaFieldSchemaArrayOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSettingOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSettingArrayOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSortOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSortArrayOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSortSorterOutput{})
	pulumi.RegisterOutputType(SearchIndexSchemaIndexSortSorterArrayOutput{})
	pulumi.RegisterOutputType(TableDefinedColumnOutput{})
	pulumi.RegisterOutputType(TableDefinedColumnArrayOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyArrayOutput{})
	pulumi.RegisterOutputType(TunnelChannelOutput{})
	pulumi.RegisterOutputType(TunnelChannelArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachmentsAttachmentOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachmentsAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetSearchIndexesIndexOutput{})
	pulumi.RegisterOutputType(GetSearchIndexesIndexArrayOutput{})
	pulumi.RegisterOutputType(GetSecondaryIndexesIndexOutput{})
	pulumi.RegisterOutputType(GetSecondaryIndexesIndexArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableDefinedColumnOutput{})
	pulumi.RegisterOutputType(GetTablesTableDefinedColumnArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(GetTablesTablePrimaryKeyArrayOutput{})
	pulumi.RegisterOutputType(GetTunnelsTunnelOutput{})
	pulumi.RegisterOutputType(GetTunnelsTunnelArrayOutput{})
	pulumi.RegisterOutputType(GetTunnelsTunnelChannelOutput{})
	pulumi.RegisterOutputType(GetTunnelsTunnelChannelArrayOutput{})
}
