// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudstoragegateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Storage Gateway Gateway Cache Disk resource.
//
// For information about Cloud Storage Gateway Gateway Cache Disk and how to use it, see [What is Gateway Cache Disk](https://www.alibabacloud.com/help/en/cloud-storage-gateway/latest/creategatewaycachedisk).
//
// > **NOTE:** Available since v1.144.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cloudstoragegateway"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultUuid, err := random.NewUuid(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			invokeSubstr, err := std.Substr(ctx, &std.SubstrArgs{
//				Input: fmt.Sprintf("tf-example-%v", std.Replace(ctx, &std.ReplaceArgs{
//					Text:    defaultUuid.Result,
//					Search:  "-",
//					Replace: "",
//				}, nil).Result),
//				Offset: 0,
//				Length: 16,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultStorageBundle, err := cloudstoragegateway.NewStorageBundle(ctx, "default", &cloudstoragegateway.StorageBundleArgs{
//				StorageBundleName: pulumi.String(invokeSubstr.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := cloudstoragegateway.GetStocks(ctx, &cloudstoragegateway.GetStocksArgs{
//				GatewayClass: pulumi.StringRef("Standard"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/21"),
//				ZoneId:      pulumi.String(_default.Stocks[0].ZoneId),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultGateway, err := cloudstoragegateway.NewGateway(ctx, "default", &cloudstoragegateway.GatewayArgs{
//				GatewayName:            pulumi.String(name),
//				Description:            pulumi.String(name),
//				GatewayClass:           pulumi.String("Standard"),
//				Type:                   pulumi.String("File"),
//				PaymentType:            pulumi.String("PayAsYouGo"),
//				VswitchId:              defaultSwitch.ID(),
//				ReleaseAfterExpiration: pulumi.Bool(true),
//				PublicNetworkBandwidth: pulumi.Int(40),
//				StorageBundleId:        defaultStorageBundle.ID(),
//				Location:               pulumi.String("Cloud"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudstoragegateway.NewGatewayCacheDisk(ctx, "default", &cloudstoragegateway.GatewayCacheDiskArgs{
//				CacheDiskCategory: pulumi.String("cloud_efficiency"),
//				GatewayId:         defaultGateway.ID(),
//				CacheDiskSizeInGb: pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Storage Gateway Gateway Cache Disk can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cloudstoragegateway/gatewayCacheDisk:GatewayCacheDisk example <gateway_id>:<cache_id>:<local_file_path>
// ```
type GatewayCacheDisk struct {
	pulumi.CustomResourceState

	// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
	CacheDiskCategory pulumi.StringOutput `pulumi:"cacheDiskCategory"`
	// The capacity of the cache disk.
	CacheDiskSizeInGb pulumi.IntOutput `pulumi:"cacheDiskSizeInGb"`
	// The ID of the cache disk.
	CacheId pulumi.StringOutput `pulumi:"cacheId"`
	// The ID of the gateway.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// The path of the cache disk.
	LocalFilePath pulumi.StringOutput `pulumi:"localFilePath"`
	// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
	PerformanceLevel pulumi.StringPtrOutput `pulumi:"performanceLevel"`
	// The status of the Gateway Cache Disk.
	Status pulumi.IntOutput `pulumi:"status"`
}

// NewGatewayCacheDisk registers a new resource with the given unique name, arguments, and options.
func NewGatewayCacheDisk(ctx *pulumi.Context,
	name string, args *GatewayCacheDiskArgs, opts ...pulumi.ResourceOption) (*GatewayCacheDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CacheDiskSizeInGb == nil {
		return nil, errors.New("invalid value for required argument 'CacheDiskSizeInGb'")
	}
	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayCacheDisk
	err := ctx.RegisterResource("alicloud:cloudstoragegateway/gatewayCacheDisk:GatewayCacheDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayCacheDisk gets an existing GatewayCacheDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayCacheDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayCacheDiskState, opts ...pulumi.ResourceOption) (*GatewayCacheDisk, error) {
	var resource GatewayCacheDisk
	err := ctx.ReadResource("alicloud:cloudstoragegateway/gatewayCacheDisk:GatewayCacheDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayCacheDisk resources.
type gatewayCacheDiskState struct {
	// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
	CacheDiskCategory *string `pulumi:"cacheDiskCategory"`
	// The capacity of the cache disk.
	CacheDiskSizeInGb *int `pulumi:"cacheDiskSizeInGb"`
	// The ID of the cache disk.
	CacheId *string `pulumi:"cacheId"`
	// The ID of the gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// The path of the cache disk.
	LocalFilePath *string `pulumi:"localFilePath"`
	// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
	PerformanceLevel *string `pulumi:"performanceLevel"`
	// The status of the Gateway Cache Disk.
	Status *int `pulumi:"status"`
}

type GatewayCacheDiskState struct {
	// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
	CacheDiskCategory pulumi.StringPtrInput
	// The capacity of the cache disk.
	CacheDiskSizeInGb pulumi.IntPtrInput
	// The ID of the cache disk.
	CacheId pulumi.StringPtrInput
	// The ID of the gateway.
	GatewayId pulumi.StringPtrInput
	// The path of the cache disk.
	LocalFilePath pulumi.StringPtrInput
	// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
	PerformanceLevel pulumi.StringPtrInput
	// The status of the Gateway Cache Disk.
	Status pulumi.IntPtrInput
}

func (GatewayCacheDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCacheDiskState)(nil)).Elem()
}

type gatewayCacheDiskArgs struct {
	// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
	CacheDiskCategory *string `pulumi:"cacheDiskCategory"`
	// The capacity of the cache disk.
	CacheDiskSizeInGb int `pulumi:"cacheDiskSizeInGb"`
	// The ID of the gateway.
	GatewayId string `pulumi:"gatewayId"`
	// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
	PerformanceLevel *string `pulumi:"performanceLevel"`
}

// The set of arguments for constructing a GatewayCacheDisk resource.
type GatewayCacheDiskArgs struct {
	// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
	CacheDiskCategory pulumi.StringPtrInput
	// The capacity of the cache disk.
	CacheDiskSizeInGb pulumi.IntInput
	// The ID of the gateway.
	GatewayId pulumi.StringInput
	// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
	PerformanceLevel pulumi.StringPtrInput
}

func (GatewayCacheDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCacheDiskArgs)(nil)).Elem()
}

type GatewayCacheDiskInput interface {
	pulumi.Input

	ToGatewayCacheDiskOutput() GatewayCacheDiskOutput
	ToGatewayCacheDiskOutputWithContext(ctx context.Context) GatewayCacheDiskOutput
}

func (*GatewayCacheDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCacheDisk)(nil)).Elem()
}

func (i *GatewayCacheDisk) ToGatewayCacheDiskOutput() GatewayCacheDiskOutput {
	return i.ToGatewayCacheDiskOutputWithContext(context.Background())
}

func (i *GatewayCacheDisk) ToGatewayCacheDiskOutputWithContext(ctx context.Context) GatewayCacheDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCacheDiskOutput)
}

// GatewayCacheDiskArrayInput is an input type that accepts GatewayCacheDiskArray and GatewayCacheDiskArrayOutput values.
// You can construct a concrete instance of `GatewayCacheDiskArrayInput` via:
//
//	GatewayCacheDiskArray{ GatewayCacheDiskArgs{...} }
type GatewayCacheDiskArrayInput interface {
	pulumi.Input

	ToGatewayCacheDiskArrayOutput() GatewayCacheDiskArrayOutput
	ToGatewayCacheDiskArrayOutputWithContext(context.Context) GatewayCacheDiskArrayOutput
}

type GatewayCacheDiskArray []GatewayCacheDiskInput

func (GatewayCacheDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCacheDisk)(nil)).Elem()
}

func (i GatewayCacheDiskArray) ToGatewayCacheDiskArrayOutput() GatewayCacheDiskArrayOutput {
	return i.ToGatewayCacheDiskArrayOutputWithContext(context.Background())
}

func (i GatewayCacheDiskArray) ToGatewayCacheDiskArrayOutputWithContext(ctx context.Context) GatewayCacheDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCacheDiskArrayOutput)
}

// GatewayCacheDiskMapInput is an input type that accepts GatewayCacheDiskMap and GatewayCacheDiskMapOutput values.
// You can construct a concrete instance of `GatewayCacheDiskMapInput` via:
//
//	GatewayCacheDiskMap{ "key": GatewayCacheDiskArgs{...} }
type GatewayCacheDiskMapInput interface {
	pulumi.Input

	ToGatewayCacheDiskMapOutput() GatewayCacheDiskMapOutput
	ToGatewayCacheDiskMapOutputWithContext(context.Context) GatewayCacheDiskMapOutput
}

type GatewayCacheDiskMap map[string]GatewayCacheDiskInput

func (GatewayCacheDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCacheDisk)(nil)).Elem()
}

func (i GatewayCacheDiskMap) ToGatewayCacheDiskMapOutput() GatewayCacheDiskMapOutput {
	return i.ToGatewayCacheDiskMapOutputWithContext(context.Background())
}

func (i GatewayCacheDiskMap) ToGatewayCacheDiskMapOutputWithContext(ctx context.Context) GatewayCacheDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCacheDiskMapOutput)
}

type GatewayCacheDiskOutput struct{ *pulumi.OutputState }

func (GatewayCacheDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCacheDisk)(nil)).Elem()
}

func (o GatewayCacheDiskOutput) ToGatewayCacheDiskOutput() GatewayCacheDiskOutput {
	return o
}

func (o GatewayCacheDiskOutput) ToGatewayCacheDiskOutputWithContext(ctx context.Context) GatewayCacheDiskOutput {
	return o
}

// The type of the cache disk. Valid values: `cloudEfficiency`, `cloudSsd`, `cloudEssd`. **NOTE:** From version 1.227.0, `cacheDiskCategory` can be set to `cloudEssd`.
func (o GatewayCacheDiskOutput) CacheDiskCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.StringOutput { return v.CacheDiskCategory }).(pulumi.StringOutput)
}

// The capacity of the cache disk.
func (o GatewayCacheDiskOutput) CacheDiskSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.IntOutput { return v.CacheDiskSizeInGb }).(pulumi.IntOutput)
}

// The ID of the cache disk.
func (o GatewayCacheDiskOutput) CacheId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.StringOutput { return v.CacheId }).(pulumi.StringOutput)
}

// The ID of the gateway.
func (o GatewayCacheDiskOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// The path of the cache disk.
func (o GatewayCacheDiskOutput) LocalFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.StringOutput { return v.LocalFilePath }).(pulumi.StringOutput)
}

// The performance level (PL) of the Enterprise SSD (ESSD). Valid values: `PL1`, `PL2`, `PL3`. **NOTE:** If `cacheDiskCategory` is set to `cloudEssd`, `performanceLevel` is required.
func (o GatewayCacheDiskOutput) PerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.StringPtrOutput { return v.PerformanceLevel }).(pulumi.StringPtrOutput)
}

// The status of the Gateway Cache Disk.
func (o GatewayCacheDiskOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayCacheDisk) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

type GatewayCacheDiskArrayOutput struct{ *pulumi.OutputState }

func (GatewayCacheDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCacheDisk)(nil)).Elem()
}

func (o GatewayCacheDiskArrayOutput) ToGatewayCacheDiskArrayOutput() GatewayCacheDiskArrayOutput {
	return o
}

func (o GatewayCacheDiskArrayOutput) ToGatewayCacheDiskArrayOutputWithContext(ctx context.Context) GatewayCacheDiskArrayOutput {
	return o
}

func (o GatewayCacheDiskArrayOutput) Index(i pulumi.IntInput) GatewayCacheDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayCacheDisk {
		return vs[0].([]*GatewayCacheDisk)[vs[1].(int)]
	}).(GatewayCacheDiskOutput)
}

type GatewayCacheDiskMapOutput struct{ *pulumi.OutputState }

func (GatewayCacheDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCacheDisk)(nil)).Elem()
}

func (o GatewayCacheDiskMapOutput) ToGatewayCacheDiskMapOutput() GatewayCacheDiskMapOutput {
	return o
}

func (o GatewayCacheDiskMapOutput) ToGatewayCacheDiskMapOutputWithContext(ctx context.Context) GatewayCacheDiskMapOutput {
	return o
}

func (o GatewayCacheDiskMapOutput) MapIndex(k pulumi.StringInput) GatewayCacheDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayCacheDisk {
		return vs[0].(map[string]*GatewayCacheDisk)[vs[1].(string)]
	}).(GatewayCacheDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCacheDiskInput)(nil)).Elem(), &GatewayCacheDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCacheDiskArrayInput)(nil)).Elem(), GatewayCacheDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCacheDiskMapInput)(nil)).Elem(), GatewayCacheDiskMap{})
	pulumi.RegisterOutputType(GatewayCacheDiskOutput{})
	pulumi.RegisterOutputType(GatewayCacheDiskArrayOutput{})
	pulumi.RegisterOutputType(GatewayCacheDiskMapOutput{})
}
