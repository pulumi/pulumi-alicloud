// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatelink

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Private Link Vpc Endpoint Service resource.
//
// For information about Private Link Vpc Endpoint Service and how to use it, see [What is Vpc Endpoint Service](https://www.alibabacloud.com/help/en/privatelink/latest/api-privatelink-2020-04-15-createvpcendpointservice).
//
// > **NOTE:** Available since v1.109.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/privatelink"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := privatelink.NewVpcEndpointService(ctx, "example", &privatelink.VpcEndpointServiceArgs{
//				ServiceDescription:   pulumi.String(name),
//				ConnectBandwidth:     pulumi.Int(103),
//				AutoAcceptConnection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private Link Vpc Endpoint Service can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:privatelink/vpcEndpointService:VpcEndpointService example <id>
// ```
type VpcEndpointService struct {
	pulumi.CustomResourceState

	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// - **true**
	// - **false**.
	AutoAcceptConnection pulumi.BoolPtrOutput `pulumi:"autoAcceptConnection"`
	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth pulumi.IntOutput `pulumi:"connectBandwidth"`
	// The time when the endpoint service was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
	// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The payer of the endpoint service. Valid values:
	// - **Endpoint**: the service consumer.
	// - **EndpointService**: the service provider.
	Payer pulumi.StringOutput `pulumi:"payer"`
	// The resource group ID.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The service state of the endpoint service.
	ServiceBusinessStatus pulumi.StringOutput `pulumi:"serviceBusinessStatus"`
	// The description of the endpoint service.
	ServiceDescription pulumi.StringPtrOutput `pulumi:"serviceDescription"`
	// The domain name of the endpoint service.
	ServiceDomain pulumi.StringOutput `pulumi:"serviceDomain"`
	// Service resource type, value:
	// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
	// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
	// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
	ServiceResourceType pulumi.StringOutput `pulumi:"serviceResourceType"`
	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ServiceSupportIpv6 pulumi.BoolOutput `pulumi:"serviceSupportIpv6"`
	// The state of the endpoint service.
	Status pulumi.StringOutput `pulumi:"status"`
	// The list of tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The name of the endpoint service.
	VpcEndpointServiceName pulumi.StringOutput `pulumi:"vpcEndpointServiceName"`
	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ZoneAffinityEnabled pulumi.BoolOutput `pulumi:"zoneAffinityEnabled"`
}

// NewVpcEndpointService registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointService(ctx *pulumi.Context,
	name string, args *VpcEndpointServiceArgs, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	if args == nil {
		args = &VpcEndpointServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpointService
	err := ctx.RegisterResource("alicloud:privatelink/vpcEndpointService:VpcEndpointService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointService gets an existing VpcEndpointService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointServiceState, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	var resource VpcEndpointService
	err := ctx.ReadResource("alicloud:privatelink/vpcEndpointService:VpcEndpointService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointService resources.
type vpcEndpointServiceState struct {
	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// - **true**
	// - **false**.
	AutoAcceptConnection *bool `pulumi:"autoAcceptConnection"`
	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth *int `pulumi:"connectBandwidth"`
	// The time when the endpoint service was created.
	CreateTime *string `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
	// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
	DryRun *bool `pulumi:"dryRun"`
	// The payer of the endpoint service. Valid values:
	// - **Endpoint**: the service consumer.
	// - **EndpointService**: the service provider.
	Payer *string `pulumi:"payer"`
	// The resource group ID.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The service state of the endpoint service.
	ServiceBusinessStatus *string `pulumi:"serviceBusinessStatus"`
	// The description of the endpoint service.
	ServiceDescription *string `pulumi:"serviceDescription"`
	// The domain name of the endpoint service.
	ServiceDomain *string `pulumi:"serviceDomain"`
	// Service resource type, value:
	// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
	// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
	// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
	ServiceResourceType *string `pulumi:"serviceResourceType"`
	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ServiceSupportIpv6 *bool `pulumi:"serviceSupportIpv6"`
	// The state of the endpoint service.
	Status *string `pulumi:"status"`
	// The list of tags.
	Tags map[string]interface{} `pulumi:"tags"`
	// The name of the endpoint service.
	VpcEndpointServiceName *string `pulumi:"vpcEndpointServiceName"`
	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ZoneAffinityEnabled *bool `pulumi:"zoneAffinityEnabled"`
}

type VpcEndpointServiceState struct {
	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// - **true**
	// - **false**.
	AutoAcceptConnection pulumi.BoolPtrInput
	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth pulumi.IntPtrInput
	// The time when the endpoint service was created.
	CreateTime pulumi.StringPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request.
	// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
	// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
	DryRun pulumi.BoolPtrInput
	// The payer of the endpoint service. Valid values:
	// - **Endpoint**: the service consumer.
	// - **EndpointService**: the service provider.
	Payer pulumi.StringPtrInput
	// The resource group ID.
	ResourceGroupId pulumi.StringPtrInput
	// The service state of the endpoint service.
	ServiceBusinessStatus pulumi.StringPtrInput
	// The description of the endpoint service.
	ServiceDescription pulumi.StringPtrInput
	// The domain name of the endpoint service.
	ServiceDomain pulumi.StringPtrInput
	// Service resource type, value:
	// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
	// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
	// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
	ServiceResourceType pulumi.StringPtrInput
	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ServiceSupportIpv6 pulumi.BoolPtrInput
	// The state of the endpoint service.
	Status pulumi.StringPtrInput
	// The list of tags.
	Tags pulumi.MapInput
	// The name of the endpoint service.
	VpcEndpointServiceName pulumi.StringPtrInput
	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ZoneAffinityEnabled pulumi.BoolPtrInput
}

func (VpcEndpointServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceState)(nil)).Elem()
}

type vpcEndpointServiceArgs struct {
	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// - **true**
	// - **false**.
	AutoAcceptConnection *bool `pulumi:"autoAcceptConnection"`
	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth *int `pulumi:"connectBandwidth"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
	// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
	DryRun *bool `pulumi:"dryRun"`
	// The payer of the endpoint service. Valid values:
	// - **Endpoint**: the service consumer.
	// - **EndpointService**: the service provider.
	Payer *string `pulumi:"payer"`
	// The resource group ID.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The description of the endpoint service.
	ServiceDescription *string `pulumi:"serviceDescription"`
	// Service resource type, value:
	// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
	// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
	// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
	ServiceResourceType *string `pulumi:"serviceResourceType"`
	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ServiceSupportIpv6 *bool `pulumi:"serviceSupportIpv6"`
	// The list of tags.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ZoneAffinityEnabled *bool `pulumi:"zoneAffinityEnabled"`
}

// The set of arguments for constructing a VpcEndpointService resource.
type VpcEndpointServiceArgs struct {
	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// - **true**
	// - **false**.
	AutoAcceptConnection pulumi.BoolPtrInput
	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth pulumi.IntPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request.
	// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
	// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
	DryRun pulumi.BoolPtrInput
	// The payer of the endpoint service. Valid values:
	// - **Endpoint**: the service consumer.
	// - **EndpointService**: the service provider.
	Payer pulumi.StringPtrInput
	// The resource group ID.
	ResourceGroupId pulumi.StringPtrInput
	// The description of the endpoint service.
	ServiceDescription pulumi.StringPtrInput
	// Service resource type, value:
	// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
	// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
	// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
	ServiceResourceType pulumi.StringPtrInput
	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ServiceSupportIpv6 pulumi.BoolPtrInput
	// The list of tags.
	Tags pulumi.MapInput
	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// - **true**
	// - **false (default)**.
	ZoneAffinityEnabled pulumi.BoolPtrInput
}

func (VpcEndpointServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceArgs)(nil)).Elem()
}

type VpcEndpointServiceInput interface {
	pulumi.Input

	ToVpcEndpointServiceOutput() VpcEndpointServiceOutput
	ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput
}

func (*VpcEndpointService) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcEndpointService)(nil)).Elem()
}

func (i *VpcEndpointService) ToVpcEndpointServiceOutput() VpcEndpointServiceOutput {
	return i.ToVpcEndpointServiceOutputWithContext(context.Background())
}

func (i *VpcEndpointService) ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointServiceOutput)
}

// VpcEndpointServiceArrayInput is an input type that accepts VpcEndpointServiceArray and VpcEndpointServiceArrayOutput values.
// You can construct a concrete instance of `VpcEndpointServiceArrayInput` via:
//
//	VpcEndpointServiceArray{ VpcEndpointServiceArgs{...} }
type VpcEndpointServiceArrayInput interface {
	pulumi.Input

	ToVpcEndpointServiceArrayOutput() VpcEndpointServiceArrayOutput
	ToVpcEndpointServiceArrayOutputWithContext(context.Context) VpcEndpointServiceArrayOutput
}

type VpcEndpointServiceArray []VpcEndpointServiceInput

func (VpcEndpointServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcEndpointService)(nil)).Elem()
}

func (i VpcEndpointServiceArray) ToVpcEndpointServiceArrayOutput() VpcEndpointServiceArrayOutput {
	return i.ToVpcEndpointServiceArrayOutputWithContext(context.Background())
}

func (i VpcEndpointServiceArray) ToVpcEndpointServiceArrayOutputWithContext(ctx context.Context) VpcEndpointServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointServiceArrayOutput)
}

// VpcEndpointServiceMapInput is an input type that accepts VpcEndpointServiceMap and VpcEndpointServiceMapOutput values.
// You can construct a concrete instance of `VpcEndpointServiceMapInput` via:
//
//	VpcEndpointServiceMap{ "key": VpcEndpointServiceArgs{...} }
type VpcEndpointServiceMapInput interface {
	pulumi.Input

	ToVpcEndpointServiceMapOutput() VpcEndpointServiceMapOutput
	ToVpcEndpointServiceMapOutputWithContext(context.Context) VpcEndpointServiceMapOutput
}

type VpcEndpointServiceMap map[string]VpcEndpointServiceInput

func (VpcEndpointServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcEndpointService)(nil)).Elem()
}

func (i VpcEndpointServiceMap) ToVpcEndpointServiceMapOutput() VpcEndpointServiceMapOutput {
	return i.ToVpcEndpointServiceMapOutputWithContext(context.Background())
}

func (i VpcEndpointServiceMap) ToVpcEndpointServiceMapOutputWithContext(ctx context.Context) VpcEndpointServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointServiceMapOutput)
}

type VpcEndpointServiceOutput struct{ *pulumi.OutputState }

func (VpcEndpointServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcEndpointService)(nil)).Elem()
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutput() VpcEndpointServiceOutput {
	return o
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput {
	return o
}

// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
// - **true**
// - **false**.
func (o VpcEndpointServiceOutput) AutoAcceptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.BoolPtrOutput { return v.AutoAcceptConnection }).(pulumi.BoolPtrOutput)
}

// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
func (o VpcEndpointServiceOutput) ConnectBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.IntOutput { return v.ConnectBandwidth }).(pulumi.IntOutput)
}

// The time when the endpoint service was created.
func (o VpcEndpointServiceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies whether to perform only a dry run, without performing the actual request.
// - **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
// - **false (default)**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.
func (o VpcEndpointServiceOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The payer of the endpoint service. Valid values:
// - **Endpoint**: the service consumer.
// - **EndpointService**: the service provider.
func (o VpcEndpointServiceOutput) Payer() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.Payer }).(pulumi.StringOutput)
}

// The resource group ID.
func (o VpcEndpointServiceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The service state of the endpoint service.
func (o VpcEndpointServiceOutput) ServiceBusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.ServiceBusinessStatus }).(pulumi.StringOutput)
}

// The description of the endpoint service.
func (o VpcEndpointServiceOutput) ServiceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringPtrOutput { return v.ServiceDescription }).(pulumi.StringPtrOutput)
}

// The domain name of the endpoint service.
func (o VpcEndpointServiceOutput) ServiceDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.ServiceDomain }).(pulumi.StringOutput)
}

// Service resource type, value:
// - **slb**: indicates that the service resource type is Classic Load Balancer (CLB).
// - **alb**: indicates that the service resource type is Application Load Balancer (ALB).
// - **nlb**: indicates that the service resource type is Network Load Balancer (NLB).
func (o VpcEndpointServiceOutput) ServiceResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.ServiceResourceType }).(pulumi.StringOutput)
}

// Specifies whether to enable IPv6 for the endpoint service. Valid values:
// - **true**
// - **false (default)**.
func (o VpcEndpointServiceOutput) ServiceSupportIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.BoolOutput { return v.ServiceSupportIpv6 }).(pulumi.BoolOutput)
}

// The state of the endpoint service.
func (o VpcEndpointServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The list of tags.
func (o VpcEndpointServiceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The name of the endpoint service.
func (o VpcEndpointServiceOutput) VpcEndpointServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.StringOutput { return v.VpcEndpointServiceName }).(pulumi.StringOutput)
}

// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
// - **true**
// - **false (default)**.
func (o VpcEndpointServiceOutput) ZoneAffinityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpcEndpointService) pulumi.BoolOutput { return v.ZoneAffinityEnabled }).(pulumi.BoolOutput)
}

type VpcEndpointServiceArrayOutput struct{ *pulumi.OutputState }

func (VpcEndpointServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcEndpointService)(nil)).Elem()
}

func (o VpcEndpointServiceArrayOutput) ToVpcEndpointServiceArrayOutput() VpcEndpointServiceArrayOutput {
	return o
}

func (o VpcEndpointServiceArrayOutput) ToVpcEndpointServiceArrayOutputWithContext(ctx context.Context) VpcEndpointServiceArrayOutput {
	return o
}

func (o VpcEndpointServiceArrayOutput) Index(i pulumi.IntInput) VpcEndpointServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcEndpointService {
		return vs[0].([]*VpcEndpointService)[vs[1].(int)]
	}).(VpcEndpointServiceOutput)
}

type VpcEndpointServiceMapOutput struct{ *pulumi.OutputState }

func (VpcEndpointServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcEndpointService)(nil)).Elem()
}

func (o VpcEndpointServiceMapOutput) ToVpcEndpointServiceMapOutput() VpcEndpointServiceMapOutput {
	return o
}

func (o VpcEndpointServiceMapOutput) ToVpcEndpointServiceMapOutputWithContext(ctx context.Context) VpcEndpointServiceMapOutput {
	return o
}

func (o VpcEndpointServiceMapOutput) MapIndex(k pulumi.StringInput) VpcEndpointServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcEndpointService {
		return vs[0].(map[string]*VpcEndpointService)[vs[1].(string)]
	}).(VpcEndpointServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointServiceInput)(nil)).Elem(), &VpcEndpointService{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointServiceArrayInput)(nil)).Elem(), VpcEndpointServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointServiceMapInput)(nil)).Elem(), VpcEndpointServiceMap{})
	pulumi.RegisterOutputType(VpcEndpointServiceOutput{})
	pulumi.RegisterOutputType(VpcEndpointServiceArrayOutput{})
	pulumi.RegisterOutputType(VpcEndpointServiceMapOutput{})
}
