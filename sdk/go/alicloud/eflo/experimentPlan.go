// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Experiment Plan resource.
//
// For information about Eflo Experiment Plan and how to use it, see [What is Experiment Plan](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-cnp-2023-08-28-createexperimentplan).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			defaultpSZN7t, err := eflo.NewExperimentPlanTemplate(ctx, "defaultpSZN7t", &eflo.ExperimentPlanTemplateArgs{
//				TemplatePipelines: eflo.ExperimentPlanTemplateTemplatePipelineArray{
//					&eflo.ExperimentPlanTemplateTemplatePipelineArgs{
//						WorkloadId:   pulumi.Int(2),
//						WorkloadName: pulumi.String("MatMul"),
//						EnvParams: &eflo.ExperimentPlanTemplateTemplatePipelineEnvParamsArgs{
//							CpuPerWorker:     pulumi.Int(90),
//							GpuPerWorker:     pulumi.Int(8),
//							MemoryPerWorker:  pulumi.Int(500),
//							ShareMemory:      pulumi.Int(500),
//							WorkerNum:        pulumi.Int(1),
//							PyTorchVersion:   pulumi.String("1"),
//							GpuDriverVersion: pulumi.String("1"),
//							CudaVersion:      pulumi.String("1"),
//							NcclVersion:      pulumi.String("1"),
//						},
//						PipelineOrder: pulumi.Int(1),
//						Scene:         pulumi.String("baseline"),
//					},
//				},
//				PrivacyLevel:        pulumi.String("private"),
//				TemplateName:        pulumi.String(name),
//				TemplateDescription: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultResource, err := eflo.NewResource(ctx, "default", &eflo.ResourceArgs{
//				UserAccessParam: &eflo.ResourceUserAccessParamArgs{
//					AccessId:    pulumi.String("your_access_id"),
//					AccessKey:   pulumi.String("your_access_key"),
//					WorkspaceId: pulumi.String("your_workspace_id"),
//					Endpoint:    pulumi.String("your_endpoint"),
//				},
//				ClusterId: pulumi.Sprintf("terraform-%v", _default.Result),
//				MachineTypes: &eflo.ResourceMachineTypesArgs{
//					MemoryInfo:  pulumi.String("32x 64GB DDR4 4800 Memory"),
//					Type:        pulumi.String("Private"),
//					BondNum:     pulumi.Int(5),
//					NodeCount:   pulumi.Int(1),
//					CpuInfo:     pulumi.String("2x Intel Saphhire Rapid 8469C 48C CPU"),
//					NetworkInfo: pulumi.String("1x 200Gbps Dual Port BF3 DPU for VPC 4x 200Gbps Dual Port EIC"),
//					GpuInfo:     pulumi.String("8x OAM 810 GPU"),
//					DiskInfo:    pulumi.String("2x 480GB SATA SSD 4x 3.84TB NVMe SSD"),
//					NetworkMode: pulumi.String("net"),
//					Name:        pulumi.String("lingjun"),
//				},
//				ClusterName: pulumi.String(name),
//				ClusterDesc: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eflo.NewExperimentPlan(ctx, "default", &eflo.ExperimentPlanArgs{
//				ResourceId: defaultResource.ResourceId,
//				PlanName:   pulumi.String(name),
//				TemplateId: defaultpSZN7t.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Experiment Plan can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/experimentPlan:ExperimentPlan example <id>
// ```
type ExperimentPlan struct {
	pulumi.CustomResourceState

	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Additional operating parameters. You can include information about the specified node.
	ExternalParams pulumi.StringMapOutput `pulumi:"externalParams"`
	// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId pulumi.IntOutput `pulumi:"resourceId"`
	// The tag of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the template.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
}

// NewExperimentPlan registers a new resource with the given unique name, arguments, and options.
func NewExperimentPlan(ctx *pulumi.Context,
	name string, args *ExperimentPlanArgs, opts ...pulumi.ResourceOption) (*ExperimentPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExperimentPlan
	err := ctx.RegisterResource("alicloud:eflo/experimentPlan:ExperimentPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentPlan gets an existing ExperimentPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentPlanState, opts ...pulumi.ResourceOption) (*ExperimentPlan, error) {
	var resource ExperimentPlan
	err := ctx.ReadResource("alicloud:eflo/experimentPlan:ExperimentPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentPlan resources.
type experimentPlanState struct {
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// Additional operating parameters. You can include information about the specified node.
	ExternalParams map[string]string `pulumi:"externalParams"`
	// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
	PlanName *string `pulumi:"planName"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId *int `pulumi:"resourceId"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the template.
	TemplateId *int `pulumi:"templateId"`
}

type ExperimentPlanState struct {
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// Additional operating parameters. You can include information about the specified node.
	ExternalParams pulumi.StringMapInput
	// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
	PlanName pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the resource.
	ResourceId pulumi.IntPtrInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
	// The ID of the template.
	TemplateId pulumi.IntPtrInput
}

func (ExperimentPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPlanState)(nil)).Elem()
}

type experimentPlanArgs struct {
	// Additional operating parameters. You can include information about the specified node.
	ExternalParams map[string]string `pulumi:"externalParams"`
	// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
	PlanName *string `pulumi:"planName"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId int `pulumi:"resourceId"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the template.
	TemplateId int `pulumi:"templateId"`
}

// The set of arguments for constructing a ExperimentPlan resource.
type ExperimentPlanArgs struct {
	// Additional operating parameters. You can include information about the specified node.
	ExternalParams pulumi.StringMapInput
	// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
	PlanName pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the resource.
	ResourceId pulumi.IntInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
	// The ID of the template.
	TemplateId pulumi.IntInput
}

func (ExperimentPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPlanArgs)(nil)).Elem()
}

type ExperimentPlanInput interface {
	pulumi.Input

	ToExperimentPlanOutput() ExperimentPlanOutput
	ToExperimentPlanOutputWithContext(ctx context.Context) ExperimentPlanOutput
}

func (*ExperimentPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPlan)(nil)).Elem()
}

func (i *ExperimentPlan) ToExperimentPlanOutput() ExperimentPlanOutput {
	return i.ToExperimentPlanOutputWithContext(context.Background())
}

func (i *ExperimentPlan) ToExperimentPlanOutputWithContext(ctx context.Context) ExperimentPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanOutput)
}

// ExperimentPlanArrayInput is an input type that accepts ExperimentPlanArray and ExperimentPlanArrayOutput values.
// You can construct a concrete instance of `ExperimentPlanArrayInput` via:
//
//	ExperimentPlanArray{ ExperimentPlanArgs{...} }
type ExperimentPlanArrayInput interface {
	pulumi.Input

	ToExperimentPlanArrayOutput() ExperimentPlanArrayOutput
	ToExperimentPlanArrayOutputWithContext(context.Context) ExperimentPlanArrayOutput
}

type ExperimentPlanArray []ExperimentPlanInput

func (ExperimentPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPlan)(nil)).Elem()
}

func (i ExperimentPlanArray) ToExperimentPlanArrayOutput() ExperimentPlanArrayOutput {
	return i.ToExperimentPlanArrayOutputWithContext(context.Background())
}

func (i ExperimentPlanArray) ToExperimentPlanArrayOutputWithContext(ctx context.Context) ExperimentPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanArrayOutput)
}

// ExperimentPlanMapInput is an input type that accepts ExperimentPlanMap and ExperimentPlanMapOutput values.
// You can construct a concrete instance of `ExperimentPlanMapInput` via:
//
//	ExperimentPlanMap{ "key": ExperimentPlanArgs{...} }
type ExperimentPlanMapInput interface {
	pulumi.Input

	ToExperimentPlanMapOutput() ExperimentPlanMapOutput
	ToExperimentPlanMapOutputWithContext(context.Context) ExperimentPlanMapOutput
}

type ExperimentPlanMap map[string]ExperimentPlanInput

func (ExperimentPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPlan)(nil)).Elem()
}

func (i ExperimentPlanMap) ToExperimentPlanMapOutput() ExperimentPlanMapOutput {
	return i.ToExperimentPlanMapOutputWithContext(context.Background())
}

func (i ExperimentPlanMap) ToExperimentPlanMapOutputWithContext(ctx context.Context) ExperimentPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanMapOutput)
}

type ExperimentPlanOutput struct{ *pulumi.OutputState }

func (ExperimentPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPlan)(nil)).Elem()
}

func (o ExperimentPlanOutput) ToExperimentPlanOutput() ExperimentPlanOutput {
	return o
}

func (o ExperimentPlanOutput) ToExperimentPlanOutputWithContext(ctx context.Context) ExperimentPlanOutput {
	return o
}

// The creation time of the resource.
func (o ExperimentPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Additional operating parameters. You can include information about the specified node.
func (o ExperimentPlanOutput) ExternalParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.StringMapOutput { return v.ExternalParams }).(pulumi.StringMapOutput)
}

// Indicates the name of the experiment plan, which is used to distinguish different experiment plans.
func (o ExperimentPlanOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o ExperimentPlanOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o ExperimentPlanOutput) ResourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.IntOutput { return v.ResourceId }).(pulumi.IntOutput)
}

// The tag of the resource.
func (o ExperimentPlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the template.
func (o ExperimentPlanOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *ExperimentPlan) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

type ExperimentPlanArrayOutput struct{ *pulumi.OutputState }

func (ExperimentPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPlan)(nil)).Elem()
}

func (o ExperimentPlanArrayOutput) ToExperimentPlanArrayOutput() ExperimentPlanArrayOutput {
	return o
}

func (o ExperimentPlanArrayOutput) ToExperimentPlanArrayOutputWithContext(ctx context.Context) ExperimentPlanArrayOutput {
	return o
}

func (o ExperimentPlanArrayOutput) Index(i pulumi.IntInput) ExperimentPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExperimentPlan {
		return vs[0].([]*ExperimentPlan)[vs[1].(int)]
	}).(ExperimentPlanOutput)
}

type ExperimentPlanMapOutput struct{ *pulumi.OutputState }

func (ExperimentPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPlan)(nil)).Elem()
}

func (o ExperimentPlanMapOutput) ToExperimentPlanMapOutput() ExperimentPlanMapOutput {
	return o
}

func (o ExperimentPlanMapOutput) ToExperimentPlanMapOutputWithContext(ctx context.Context) ExperimentPlanMapOutput {
	return o
}

func (o ExperimentPlanMapOutput) MapIndex(k pulumi.StringInput) ExperimentPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExperimentPlan {
		return vs[0].(map[string]*ExperimentPlan)[vs[1].(string)]
	}).(ExperimentPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanInput)(nil)).Elem(), &ExperimentPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanArrayInput)(nil)).Elem(), ExperimentPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanMapInput)(nil)).Elem(), ExperimentPlanMap{})
	pulumi.RegisterOutputType(ExperimentPlanOutput{})
	pulumi.RegisterOutputType(ExperimentPlanArrayOutput{})
	pulumi.RegisterOutputType(ExperimentPlanMapOutput{})
}
