// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Vsc resource.
//
// Virtual Storage Channel.
//
// For information about Eflo Vsc and how to use it, see [What is Vsc](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-controller-2022-12-15-createvsc).
//
// > **NOTE:** Available since v1.250.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := eflo.NewVsc(ctx, "default", &eflo.VscArgs{
//				VscType: pulumi.String("primary"),
//				NodeId:  pulumi.String("e01-cn-9me49omda01"),
//				VscName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Vsc can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/vsc:Vsc example <id>
// ```
type Vsc struct {
	pulumi.CustomResourceState

	// The ID of the Node.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The status of the Vsc.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The name of the Vsc.
	VscName pulumi.StringPtrOutput `pulumi:"vscName"`
	// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
	VscType pulumi.StringOutput `pulumi:"vscType"`
}

// NewVsc registers a new resource with the given unique name, arguments, and options.
func NewVsc(ctx *pulumi.Context,
	name string, args *VscArgs, opts ...pulumi.ResourceOption) (*Vsc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeId == nil {
		return nil, errors.New("invalid value for required argument 'NodeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vsc
	err := ctx.RegisterResource("alicloud:eflo/vsc:Vsc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVsc gets an existing Vsc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVsc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VscState, opts ...pulumi.ResourceOption) (*Vsc, error) {
	var resource Vsc
	err := ctx.ReadResource("alicloud:eflo/vsc:Vsc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vsc resources.
type vscState struct {
	// The ID of the Node.
	NodeId *string `pulumi:"nodeId"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The status of the Vsc.
	Status *string `pulumi:"status"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The name of the Vsc.
	VscName *string `pulumi:"vscName"`
	// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
	VscType *string `pulumi:"vscType"`
}

type VscState struct {
	// The ID of the Node.
	NodeId pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The status of the Vsc.
	Status pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
	// The name of the Vsc.
	VscName pulumi.StringPtrInput
	// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
	VscType pulumi.StringPtrInput
}

func (VscState) ElementType() reflect.Type {
	return reflect.TypeOf((*vscState)(nil)).Elem()
}

type vscArgs struct {
	// The ID of the Node.
	NodeId string `pulumi:"nodeId"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The name of the Vsc.
	VscName *string `pulumi:"vscName"`
	// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
	VscType *string `pulumi:"vscType"`
}

// The set of arguments for constructing a Vsc resource.
type VscArgs struct {
	// The ID of the Node.
	NodeId pulumi.StringInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
	// The name of the Vsc.
	VscName pulumi.StringPtrInput
	// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
	VscType pulumi.StringPtrInput
}

func (VscArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vscArgs)(nil)).Elem()
}

type VscInput interface {
	pulumi.Input

	ToVscOutput() VscOutput
	ToVscOutputWithContext(ctx context.Context) VscOutput
}

func (*Vsc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vsc)(nil)).Elem()
}

func (i *Vsc) ToVscOutput() VscOutput {
	return i.ToVscOutputWithContext(context.Background())
}

func (i *Vsc) ToVscOutputWithContext(ctx context.Context) VscOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VscOutput)
}

// VscArrayInput is an input type that accepts VscArray and VscArrayOutput values.
// You can construct a concrete instance of `VscArrayInput` via:
//
//	VscArray{ VscArgs{...} }
type VscArrayInput interface {
	pulumi.Input

	ToVscArrayOutput() VscArrayOutput
	ToVscArrayOutputWithContext(context.Context) VscArrayOutput
}

type VscArray []VscInput

func (VscArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vsc)(nil)).Elem()
}

func (i VscArray) ToVscArrayOutput() VscArrayOutput {
	return i.ToVscArrayOutputWithContext(context.Background())
}

func (i VscArray) ToVscArrayOutputWithContext(ctx context.Context) VscArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VscArrayOutput)
}

// VscMapInput is an input type that accepts VscMap and VscMapOutput values.
// You can construct a concrete instance of `VscMapInput` via:
//
//	VscMap{ "key": VscArgs{...} }
type VscMapInput interface {
	pulumi.Input

	ToVscMapOutput() VscMapOutput
	ToVscMapOutputWithContext(context.Context) VscMapOutput
}

type VscMap map[string]VscInput

func (VscMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vsc)(nil)).Elem()
}

func (i VscMap) ToVscMapOutput() VscMapOutput {
	return i.ToVscMapOutputWithContext(context.Background())
}

func (i VscMap) ToVscMapOutputWithContext(ctx context.Context) VscMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VscMapOutput)
}

type VscOutput struct{ *pulumi.OutputState }

func (VscOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vsc)(nil)).Elem()
}

func (o VscOutput) ToVscOutput() VscOutput {
	return o
}

func (o VscOutput) ToVscOutputWithContext(ctx context.Context) VscOutput {
	return o
}

// The ID of the Node.
func (o VscOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o VscOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The status of the Vsc.
func (o VscOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag of the resource.
func (o VscOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The name of the Vsc.
func (o VscOutput) VscName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringPtrOutput { return v.VscName }).(pulumi.StringPtrOutput)
}

// The type of the Vsc. Default value: `primary`. Valid values: `primary`.
func (o VscOutput) VscType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vsc) pulumi.StringOutput { return v.VscType }).(pulumi.StringOutput)
}

type VscArrayOutput struct{ *pulumi.OutputState }

func (VscArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vsc)(nil)).Elem()
}

func (o VscArrayOutput) ToVscArrayOutput() VscArrayOutput {
	return o
}

func (o VscArrayOutput) ToVscArrayOutputWithContext(ctx context.Context) VscArrayOutput {
	return o
}

func (o VscArrayOutput) Index(i pulumi.IntInput) VscOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vsc {
		return vs[0].([]*Vsc)[vs[1].(int)]
	}).(VscOutput)
}

type VscMapOutput struct{ *pulumi.OutputState }

func (VscMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vsc)(nil)).Elem()
}

func (o VscMapOutput) ToVscMapOutput() VscMapOutput {
	return o
}

func (o VscMapOutput) ToVscMapOutputWithContext(ctx context.Context) VscMapOutput {
	return o
}

func (o VscMapOutput) MapIndex(k pulumi.StringInput) VscOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vsc {
		return vs[0].(map[string]*Vsc)[vs[1].(string)]
	}).(VscOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VscInput)(nil)).Elem(), &Vsc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VscArrayInput)(nil)).Elem(), VscArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VscMapInput)(nil)).Elem(), VscMap{})
	pulumi.RegisterOutputType(VscOutput{})
	pulumi.RegisterOutputType(VscArrayOutput{})
	pulumi.RegisterOutputType(VscMapOutput{})
}
