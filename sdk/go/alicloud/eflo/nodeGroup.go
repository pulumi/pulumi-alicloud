// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Node Group resource.
//
// Node group. Divide a cluster into multiple node groups, each containing multiple nodes.
//
// For information about Eflo Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateNodeGroup).
//
// > **NOTE:** Available since v1.246.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			createVpc, err := vpc.NewNetwork(ctx, "create_vpc", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("192.168.0.0/16"),
//				VpcName:   pulumi.String("cluster-resoure-example"),
//			})
//			if err != nil {
//				return err
//			}
//			createVswitch, err := vpc.NewSwitch(ctx, "create_vswitch", &vpc.SwitchArgs{
//				VpcId:       createVpc.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-b"),
//				CidrBlock:   pulumi.String("192.168.0.0/24"),
//				VswitchName: pulumi.String("cluster-resoure-example"),
//			})
//			if err != nil {
//				return err
//			}
//			createSecurityGroup, err := ecs.NewSecurityGroup(ctx, "create_security_group", &ecs.SecurityGroupArgs{
//				Description:       pulumi.String("sg"),
//				SecurityGroupName: pulumi.String("cluster-resoure-example"),
//				SecurityGroupType: pulumi.String("normal"),
//				VpcId:             createVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := eflo.NewCluster(ctx, "default", &eflo.ClusterArgs{
//				ClusterDescription: pulumi.String("cluster-resource-example"),
//				OpenEniJumboFrame:  pulumi.Bool(false),
//				HpnZone:            pulumi.String("B1"),
//				NimizVswitches: pulumi.StringArray{
//					pulumi.String("1111"),
//				},
//				IgnoreFailedNodeTasks: pulumi.Bool(true),
//				ResourceGroupId:       pulumi.String(_default.Ids[1]),
//				NodeGroups: eflo.ClusterNodeGroupArray{
//					&eflo.ClusterNodeGroupArgs{
//						ImageId:              pulumi.String("i198448731735114628708"),
//						ZoneId:               pulumi.String("cn-hangzhou-b"),
//						NodeGroupName:        pulumi.String("cluster-resource-example"),
//						NodeGroupDescription: pulumi.String("cluster-resource-example"),
//						MachineType:          pulumi.String("efg2.C48cA3sen"),
//					},
//				},
//				Networks: &eflo.ClusterNetworksArgs{
//					TailIpVersion: pulumi.String("ipv4"),
//					NewVpdInfo: &eflo.ClusterNetworksNewVpdInfoArgs{
//						MonitorVpcId:     createVpc.ID(),
//						MonitorVswitchId: createVswitch.ID(),
//						CenId:            pulumi.String("11111"),
//						CloudLinkId:      pulumi.String("1111"),
//						VpdCidr:          pulumi.String("111"),
//						VpdSubnets: eflo.ClusterNetworksNewVpdInfoVpdSubnetArray{
//							&eflo.ClusterNetworksNewVpdInfoVpdSubnetArgs{
//								ZoneId:     pulumi.String("1111"),
//								SubnetCidr: pulumi.String("111"),
//								SubnetType: pulumi.String("111"),
//							},
//						},
//						CloudLinkCidr: pulumi.String("169.254.128.0/23"),
//					},
//					SecurityGroupId: createSecurityGroup.ID(),
//					VswitchZoneId:   pulumi.String("cn-hangzhou-b"),
//					VpcId:           createVpc.ID(),
//					VswitchId:       createVswitch.ID(),
//					VpdInfo: &eflo.ClusterNetworksVpdInfoArgs{
//						VpdId: pulumi.String("111"),
//						VpdSubnets: pulumi.StringArray{
//							pulumi.String("111"),
//						},
//					},
//					IpAllocationPolicies: eflo.ClusterNetworksIpAllocationPolicyArray{
//						&eflo.ClusterNetworksIpAllocationPolicyArgs{
//							BondPolicy: &eflo.ClusterNetworksIpAllocationPolicyBondPolicyArgs{
//								BondDefaultSubnet: pulumi.String("111"),
//								Bonds: eflo.ClusterNetworksIpAllocationPolicyBondPolicyBondArray{
//									&eflo.ClusterNetworksIpAllocationPolicyBondPolicyBondArgs{
//										Name:   pulumi.String("111"),
//										Subnet: pulumi.String("111"),
//									},
//								},
//							},
//							MachineTypePolicies: eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyArray{
//								&eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs{
//									Bonds: eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArray{
//										&eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs{
//											Name:   pulumi.String("111"),
//											Subnet: pulumi.String("111"),
//										},
//									},
//									MachineType: pulumi.String("111"),
//								},
//							},
//							NodePolicies: eflo.ClusterNetworksIpAllocationPolicyNodePolicyArray{
//								&eflo.ClusterNetworksIpAllocationPolicyNodePolicyArgs{
//									Bonds: eflo.ClusterNetworksIpAllocationPolicyNodePolicyBondArray{
//										&eflo.ClusterNetworksIpAllocationPolicyNodePolicyBondArgs{
//											Name:   pulumi.String("111"),
//											Subnet: pulumi.String("111"),
//										},
//									},
//									NodeId: pulumi.String("111"),
//								},
//							},
//						},
//					},
//				},
//				ClusterName: pulumi.String("tfacceflo7165"),
//				ClusterType: pulumi.String("Lite"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultNode, err := eflo.NewNode(ctx, "default", &eflo.NodeArgs{
//				Period:          pulumi.Int(36),
//				DiscountLevel:   pulumi.String("36"),
//				BillingCycle:    pulumi.String("1month"),
//				Classify:        pulumi.String("gpuserver"),
//				Zone:            pulumi.String("cn-hangzhou-b"),
//				ProductForm:     pulumi.String("instance"),
//				PaymentRatio:    pulumi.String("0"),
//				HpnZone:         pulumi.String("B1"),
//				ServerArch:      pulumi.String("bmserver"),
//				ComputingServer: pulumi.String("efg1.nvga1n"),
//				StageNum:        pulumi.String("36"),
//				RenewalStatus:   pulumi.String("AutoRenewal"),
//				RenewPeriod:     pulumi.Int(36),
//				Status:          pulumi.String("Unused"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eflo.NewNodeGroup(ctx, "default", &eflo.NodeGroupArgs{
//				Nodes: eflo.NodeGroupNodeArray{
//					&eflo.NodeGroupNodeArgs{
//						NodeId:        defaultNode.ID(),
//						VpcId:         createVpc.ID(),
//						VswitchId:     createVswitch.ID(),
//						Hostname:      pulumi.String("jxyhostname"),
//						LoginPassword: pulumi.String("Alibaba@2025"),
//					},
//				},
//				IgnoreFailedNodeTasks: pulumi.Bool(true),
//				ClusterId:             defaultCluster.ID(),
//				ImageId:               pulumi.String("i195048661660874208657"),
//				ZoneId:                pulumi.String("cn-hangzhou-b"),
//				VpdSubnets: pulumi.StringArray{
//					pulumi.String("example"),
//				},
//				UserData:      pulumi.String("YWxpLGFsaSxhbGliYWJh"),
//				VswitchZoneId: pulumi.String("cn-hangzhou-b"),
//				IpAllocationPolicies: eflo.NodeGroupIpAllocationPolicyArray{
//					&eflo.NodeGroupIpAllocationPolicyArgs{
//						BondPolicy: &eflo.NodeGroupIpAllocationPolicyBondPolicyArgs{
//							BondDefaultSubnet: pulumi.String("example"),
//							Bonds: eflo.NodeGroupIpAllocationPolicyBondPolicyBondArray{
//								&eflo.NodeGroupIpAllocationPolicyBondPolicyBondArgs{
//									Name:   pulumi.String("example"),
//									Subnet: pulumi.String("example"),
//								},
//							},
//						},
//						MachineTypePolicies: eflo.NodeGroupIpAllocationPolicyMachineTypePolicyArray{
//							&eflo.NodeGroupIpAllocationPolicyMachineTypePolicyArgs{
//								Bonds: eflo.NodeGroupIpAllocationPolicyMachineTypePolicyBondArray{
//									&eflo.NodeGroupIpAllocationPolicyMachineTypePolicyBondArgs{
//										Name:   pulumi.String("example"),
//										Subnet: pulumi.String("example"),
//									},
//								},
//								MachineType: pulumi.String("example"),
//							},
//						},
//						NodePolicies: eflo.NodeGroupIpAllocationPolicyNodePolicyArray{
//							&eflo.NodeGroupIpAllocationPolicyNodePolicyArgs{
//								NodeId: defaultNode.ID(),
//								Bonds: eflo.NodeGroupIpAllocationPolicyNodePolicyBondArray{
//									&eflo.NodeGroupIpAllocationPolicyNodePolicyBondArgs{
//										Name:   pulumi.String("example"),
//										Subnet: pulumi.String("example"),
//									},
//								},
//							},
//						},
//					},
//				},
//				MachineType:          pulumi.String("efg1.nvga1"),
//				Az:                   pulumi.String("cn-hangzhou-b"),
//				NodeGroupDescription: pulumi.String("resource-example1"),
//				NodeGroupName:        pulumi.String("tfacceflo63657_update"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Node Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/nodeGroup:NodeGroup example <cluster_id>:<node_group_id>
// ```
type NodeGroup struct {
	pulumi.CustomResourceState

	// Az
	Az pulumi.StringOutput `pulumi:"az"`
	// Cluster ID
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Create time
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrOutput `pulumi:"ignoreFailedNodeTasks"`
	// Image ID
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
	IpAllocationPolicies NodeGroupIpAllocationPolicyArrayOutput `pulumi:"ipAllocationPolicies"`
	// Machine type
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// NodeGroupDescription
	NodeGroupDescription pulumi.StringPtrOutput `pulumi:"nodeGroupDescription"`
	// The first ID of the resource
	NodeGroupId pulumi.StringOutput `pulumi:"nodeGroupId"`
	// The name of the resource
	NodeGroupName pulumi.StringOutput `pulumi:"nodeGroupName"`
	// Node List See `nodes` below.
	Nodes NodeGroupNodeArrayOutput `pulumi:"nodes"`
	// Custom Data
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// Cluster subnet list
	VpdSubnets pulumi.StringArrayOutput `pulumi:"vpdSubnets"`
	// Zone ID of the switch
	VswitchZoneId pulumi.StringPtrOutput `pulumi:"vswitchZoneId"`
	// Zone ID
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewNodeGroup(ctx *pulumi.Context,
	name string, args *NodeGroupArgs, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Az == nil {
		return nil, errors.New("invalid value for required argument 'Az'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.NodeGroupName == nil {
		return nil, errors.New("invalid value for required argument 'NodeGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeGroup
	err := ctx.RegisterResource("alicloud:eflo/nodeGroup:NodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeGroup gets an existing NodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeGroupState, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	var resource NodeGroup
	err := ctx.ReadResource("alicloud:eflo/nodeGroup:NodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeGroup resources.
type nodeGroupState struct {
	// Az
	Az *string `pulumi:"az"`
	// Cluster ID
	ClusterId *string `pulumi:"clusterId"`
	// Create time
	CreateTime *string `pulumi:"createTime"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks *bool `pulumi:"ignoreFailedNodeTasks"`
	// Image ID
	ImageId *string `pulumi:"imageId"`
	// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
	IpAllocationPolicies []NodeGroupIpAllocationPolicy `pulumi:"ipAllocationPolicies"`
	// Machine type
	MachineType *string `pulumi:"machineType"`
	// NodeGroupDescription
	NodeGroupDescription *string `pulumi:"nodeGroupDescription"`
	// The first ID of the resource
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// The name of the resource
	NodeGroupName *string `pulumi:"nodeGroupName"`
	// Node List See `nodes` below.
	Nodes []NodeGroupNode `pulumi:"nodes"`
	// Custom Data
	UserData *string `pulumi:"userData"`
	// Cluster subnet list
	VpdSubnets []string `pulumi:"vpdSubnets"`
	// Zone ID of the switch
	VswitchZoneId *string `pulumi:"vswitchZoneId"`
	// Zone ID
	ZoneId *string `pulumi:"zoneId"`
}

type NodeGroupState struct {
	// Az
	Az pulumi.StringPtrInput
	// Cluster ID
	ClusterId pulumi.StringPtrInput
	// Create time
	CreateTime pulumi.StringPtrInput
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrInput
	// Image ID
	ImageId pulumi.StringPtrInput
	// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
	IpAllocationPolicies NodeGroupIpAllocationPolicyArrayInput
	// Machine type
	MachineType pulumi.StringPtrInput
	// NodeGroupDescription
	NodeGroupDescription pulumi.StringPtrInput
	// The first ID of the resource
	NodeGroupId pulumi.StringPtrInput
	// The name of the resource
	NodeGroupName pulumi.StringPtrInput
	// Node List See `nodes` below.
	Nodes NodeGroupNodeArrayInput
	// Custom Data
	UserData pulumi.StringPtrInput
	// Cluster subnet list
	VpdSubnets pulumi.StringArrayInput
	// Zone ID of the switch
	VswitchZoneId pulumi.StringPtrInput
	// Zone ID
	ZoneId pulumi.StringPtrInput
}

func (NodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupState)(nil)).Elem()
}

type nodeGroupArgs struct {
	// Az
	Az string `pulumi:"az"`
	// Cluster ID
	ClusterId string `pulumi:"clusterId"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks *bool `pulumi:"ignoreFailedNodeTasks"`
	// Image ID
	ImageId string `pulumi:"imageId"`
	// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
	IpAllocationPolicies []NodeGroupIpAllocationPolicy `pulumi:"ipAllocationPolicies"`
	// Machine type
	MachineType string `pulumi:"machineType"`
	// NodeGroupDescription
	NodeGroupDescription *string `pulumi:"nodeGroupDescription"`
	// The name of the resource
	NodeGroupName string `pulumi:"nodeGroupName"`
	// Node List See `nodes` below.
	Nodes []NodeGroupNode `pulumi:"nodes"`
	// Custom Data
	UserData *string `pulumi:"userData"`
	// Cluster subnet list
	VpdSubnets []string `pulumi:"vpdSubnets"`
	// Zone ID of the switch
	VswitchZoneId *string `pulumi:"vswitchZoneId"`
	// Zone ID
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a NodeGroup resource.
type NodeGroupArgs struct {
	// Az
	Az pulumi.StringInput
	// Cluster ID
	ClusterId pulumi.StringInput
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrInput
	// Image ID
	ImageId pulumi.StringInput
	// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
	IpAllocationPolicies NodeGroupIpAllocationPolicyArrayInput
	// Machine type
	MachineType pulumi.StringInput
	// NodeGroupDescription
	NodeGroupDescription pulumi.StringPtrInput
	// The name of the resource
	NodeGroupName pulumi.StringInput
	// Node List See `nodes` below.
	Nodes NodeGroupNodeArrayInput
	// Custom Data
	UserData pulumi.StringPtrInput
	// Cluster subnet list
	VpdSubnets pulumi.StringArrayInput
	// Zone ID of the switch
	VswitchZoneId pulumi.StringPtrInput
	// Zone ID
	ZoneId pulumi.StringPtrInput
}

func (NodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupArgs)(nil)).Elem()
}

type NodeGroupInput interface {
	pulumi.Input

	ToNodeGroupOutput() NodeGroupOutput
	ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput
}

func (*NodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (i *NodeGroup) ToNodeGroupOutput() NodeGroupOutput {
	return i.ToNodeGroupOutputWithContext(context.Background())
}

func (i *NodeGroup) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupOutput)
}

// NodeGroupArrayInput is an input type that accepts NodeGroupArray and NodeGroupArrayOutput values.
// You can construct a concrete instance of `NodeGroupArrayInput` via:
//
//	NodeGroupArray{ NodeGroupArgs{...} }
type NodeGroupArrayInput interface {
	pulumi.Input

	ToNodeGroupArrayOutput() NodeGroupArrayOutput
	ToNodeGroupArrayOutputWithContext(context.Context) NodeGroupArrayOutput
}

type NodeGroupArray []NodeGroupInput

func (NodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupArray) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return i.ToNodeGroupArrayOutputWithContext(context.Background())
}

func (i NodeGroupArray) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupArrayOutput)
}

// NodeGroupMapInput is an input type that accepts NodeGroupMap and NodeGroupMapOutput values.
// You can construct a concrete instance of `NodeGroupMapInput` via:
//
//	NodeGroupMap{ "key": NodeGroupArgs{...} }
type NodeGroupMapInput interface {
	pulumi.Input

	ToNodeGroupMapOutput() NodeGroupMapOutput
	ToNodeGroupMapOutputWithContext(context.Context) NodeGroupMapOutput
}

type NodeGroupMap map[string]NodeGroupInput

func (NodeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupMap) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return i.ToNodeGroupMapOutputWithContext(context.Background())
}

func (i NodeGroupMap) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMapOutput)
}

type NodeGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (o NodeGroupOutput) ToNodeGroupOutput() NodeGroupOutput {
	return o
}

func (o NodeGroupOutput) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return o
}

// Az
func (o NodeGroupOutput) Az() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.Az }).(pulumi.StringOutput)
}

// Cluster ID
func (o NodeGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Create time
func (o NodeGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether to allow skipping failed nodes. Default value: False
func (o NodeGroupOutput) IgnoreFailedNodeTasks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.BoolPtrOutput { return v.IgnoreFailedNodeTasks }).(pulumi.BoolPtrOutput)
}

// Image ID
func (o NodeGroupOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// IP address combination policy: only one policy type can be selected for each policy, and multiple policies can be combined. See `ipAllocationPolicy` below.
func (o NodeGroupOutput) IpAllocationPolicies() NodeGroupIpAllocationPolicyArrayOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupIpAllocationPolicyArrayOutput { return v.IpAllocationPolicies }).(NodeGroupIpAllocationPolicyArrayOutput)
}

// Machine type
func (o NodeGroupOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// NodeGroupDescription
func (o NodeGroupOutput) NodeGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.NodeGroupDescription }).(pulumi.StringPtrOutput)
}

// The first ID of the resource
func (o NodeGroupOutput) NodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeGroupId }).(pulumi.StringOutput)
}

// The name of the resource
func (o NodeGroupOutput) NodeGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeGroupName }).(pulumi.StringOutput)
}

// Node List See `nodes` below.
func (o NodeGroupOutput) Nodes() NodeGroupNodeArrayOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupNodeArrayOutput { return v.Nodes }).(NodeGroupNodeArrayOutput)
}

// Custom Data
func (o NodeGroupOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// Cluster subnet list
func (o NodeGroupOutput) VpdSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringArrayOutput { return v.VpdSubnets }).(pulumi.StringArrayOutput)
}

// Zone ID of the switch
func (o NodeGroupOutput) VswitchZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.VswitchZoneId }).(pulumi.StringPtrOutput)
}

// Zone ID
func (o NodeGroupOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type NodeGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) Index(i pulumi.IntInput) NodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].([]*NodeGroup)[vs[1].(int)]
	}).(NodeGroupOutput)
}

type NodeGroupMapOutput struct{ *pulumi.OutputState }

func (NodeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) MapIndex(k pulumi.StringInput) NodeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].(map[string]*NodeGroup)[vs[1].(string)]
	}).(NodeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupInput)(nil)).Elem(), &NodeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupArrayInput)(nil)).Elem(), NodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupMapInput)(nil)).Elem(), NodeGroupMap{})
	pulumi.RegisterOutputType(NodeGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupMapOutput{})
}
