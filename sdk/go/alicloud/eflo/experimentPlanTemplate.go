// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Experiment Plan Template resource.
//
// For information about Eflo Experiment Plan Template and how to use it, see [What is Experiment Plan Template](https://www.alibabacloud.com/help/en/pai/developer-reference/api-eflo-cnp-2023-08-28-createexperimentplantemplate).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := eflo.NewExperimentPlanTemplate(ctx, "default", &eflo.ExperimentPlanTemplateArgs{
//				TemplatePipelines: eflo.ExperimentPlanTemplateTemplatePipelineArray{
//					&eflo.ExperimentPlanTemplateTemplatePipelineArgs{
//						WorkloadId:   pulumi.Int(2),
//						WorkloadName: pulumi.String("MatMul"),
//						EnvParams: &eflo.ExperimentPlanTemplateTemplatePipelineEnvParamsArgs{
//							CpuPerWorker:     pulumi.Int(90),
//							GpuPerWorker:     pulumi.Int(8),
//							MemoryPerWorker:  pulumi.Int(500),
//							ShareMemory:      pulumi.Int(500),
//							WorkerNum:        pulumi.Int(1),
//							PyTorchVersion:   pulumi.String("1"),
//							GpuDriverVersion: pulumi.String("1"),
//							CudaVersion:      pulumi.String("1"),
//							NcclVersion:      pulumi.String("1"),
//						},
//						PipelineOrder: pulumi.Int(1),
//						Scene:         pulumi.String("baseline"),
//					},
//				},
//				PrivacyLevel:        pulumi.String("private"),
//				TemplateName:        pulumi.String(name),
//				TemplateDescription: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Experiment Plan Template can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/experimentPlanTemplate:ExperimentPlanTemplate example <id>
// ```
type ExperimentPlanTemplate struct {
	pulumi.CustomResourceState

	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
	// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
	// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
	PrivacyLevel pulumi.StringOutput `pulumi:"privacyLevel"`
	// Describe the purpose of this template.
	TemplateDescription pulumi.StringPtrOutput `pulumi:"templateDescription"`
	// The ID of the template.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// Help users identify and select specific templates.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
	// Representative Template Pipeline. See `templatePipeline` below.
	TemplatePipelines ExperimentPlanTemplateTemplatePipelineArrayOutput `pulumi:"templatePipelines"`
}

// NewExperimentPlanTemplate registers a new resource with the given unique name, arguments, and options.
func NewExperimentPlanTemplate(ctx *pulumi.Context,
	name string, args *ExperimentPlanTemplateArgs, opts ...pulumi.ResourceOption) (*ExperimentPlanTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivacyLevel == nil {
		return nil, errors.New("invalid value for required argument 'PrivacyLevel'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	if args.TemplatePipelines == nil {
		return nil, errors.New("invalid value for required argument 'TemplatePipelines'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExperimentPlanTemplate
	err := ctx.RegisterResource("alicloud:eflo/experimentPlanTemplate:ExperimentPlanTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentPlanTemplate gets an existing ExperimentPlanTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentPlanTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentPlanTemplateState, opts ...pulumi.ResourceOption) (*ExperimentPlanTemplate, error) {
	var resource ExperimentPlanTemplate
	err := ctx.ReadResource("alicloud:eflo/experimentPlanTemplate:ExperimentPlanTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentPlanTemplate resources.
type experimentPlanTemplateState struct {
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
	// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
	// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
	PrivacyLevel *string `pulumi:"privacyLevel"`
	// Describe the purpose of this template.
	TemplateDescription *string `pulumi:"templateDescription"`
	// The ID of the template.
	TemplateId *string `pulumi:"templateId"`
	// Help users identify and select specific templates.
	TemplateName *string `pulumi:"templateName"`
	// Representative Template Pipeline. See `templatePipeline` below.
	TemplatePipelines []ExperimentPlanTemplateTemplatePipeline `pulumi:"templatePipelines"`
}

type ExperimentPlanTemplateState struct {
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
	// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
	// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
	PrivacyLevel pulumi.StringPtrInput
	// Describe the purpose of this template.
	TemplateDescription pulumi.StringPtrInput
	// The ID of the template.
	TemplateId pulumi.StringPtrInput
	// Help users identify and select specific templates.
	TemplateName pulumi.StringPtrInput
	// Representative Template Pipeline. See `templatePipeline` below.
	TemplatePipelines ExperimentPlanTemplateTemplatePipelineArrayInput
}

func (ExperimentPlanTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPlanTemplateState)(nil)).Elem()
}

type experimentPlanTemplateArgs struct {
	// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
	// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
	// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
	PrivacyLevel string `pulumi:"privacyLevel"`
	// Describe the purpose of this template.
	TemplateDescription *string `pulumi:"templateDescription"`
	// Help users identify and select specific templates.
	TemplateName string `pulumi:"templateName"`
	// Representative Template Pipeline. See `templatePipeline` below.
	TemplatePipelines []ExperimentPlanTemplateTemplatePipeline `pulumi:"templatePipelines"`
}

// The set of arguments for constructing a ExperimentPlanTemplate resource.
type ExperimentPlanTemplateArgs struct {
	// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
	// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
	// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
	PrivacyLevel pulumi.StringInput
	// Describe the purpose of this template.
	TemplateDescription pulumi.StringPtrInput
	// Help users identify and select specific templates.
	TemplateName pulumi.StringInput
	// Representative Template Pipeline. See `templatePipeline` below.
	TemplatePipelines ExperimentPlanTemplateTemplatePipelineArrayInput
}

func (ExperimentPlanTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPlanTemplateArgs)(nil)).Elem()
}

type ExperimentPlanTemplateInput interface {
	pulumi.Input

	ToExperimentPlanTemplateOutput() ExperimentPlanTemplateOutput
	ToExperimentPlanTemplateOutputWithContext(ctx context.Context) ExperimentPlanTemplateOutput
}

func (*ExperimentPlanTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPlanTemplate)(nil)).Elem()
}

func (i *ExperimentPlanTemplate) ToExperimentPlanTemplateOutput() ExperimentPlanTemplateOutput {
	return i.ToExperimentPlanTemplateOutputWithContext(context.Background())
}

func (i *ExperimentPlanTemplate) ToExperimentPlanTemplateOutputWithContext(ctx context.Context) ExperimentPlanTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanTemplateOutput)
}

// ExperimentPlanTemplateArrayInput is an input type that accepts ExperimentPlanTemplateArray and ExperimentPlanTemplateArrayOutput values.
// You can construct a concrete instance of `ExperimentPlanTemplateArrayInput` via:
//
//	ExperimentPlanTemplateArray{ ExperimentPlanTemplateArgs{...} }
type ExperimentPlanTemplateArrayInput interface {
	pulumi.Input

	ToExperimentPlanTemplateArrayOutput() ExperimentPlanTemplateArrayOutput
	ToExperimentPlanTemplateArrayOutputWithContext(context.Context) ExperimentPlanTemplateArrayOutput
}

type ExperimentPlanTemplateArray []ExperimentPlanTemplateInput

func (ExperimentPlanTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPlanTemplate)(nil)).Elem()
}

func (i ExperimentPlanTemplateArray) ToExperimentPlanTemplateArrayOutput() ExperimentPlanTemplateArrayOutput {
	return i.ToExperimentPlanTemplateArrayOutputWithContext(context.Background())
}

func (i ExperimentPlanTemplateArray) ToExperimentPlanTemplateArrayOutputWithContext(ctx context.Context) ExperimentPlanTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanTemplateArrayOutput)
}

// ExperimentPlanTemplateMapInput is an input type that accepts ExperimentPlanTemplateMap and ExperimentPlanTemplateMapOutput values.
// You can construct a concrete instance of `ExperimentPlanTemplateMapInput` via:
//
//	ExperimentPlanTemplateMap{ "key": ExperimentPlanTemplateArgs{...} }
type ExperimentPlanTemplateMapInput interface {
	pulumi.Input

	ToExperimentPlanTemplateMapOutput() ExperimentPlanTemplateMapOutput
	ToExperimentPlanTemplateMapOutputWithContext(context.Context) ExperimentPlanTemplateMapOutput
}

type ExperimentPlanTemplateMap map[string]ExperimentPlanTemplateInput

func (ExperimentPlanTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPlanTemplate)(nil)).Elem()
}

func (i ExperimentPlanTemplateMap) ToExperimentPlanTemplateMapOutput() ExperimentPlanTemplateMapOutput {
	return i.ToExperimentPlanTemplateMapOutputWithContext(context.Background())
}

func (i ExperimentPlanTemplateMap) ToExperimentPlanTemplateMapOutputWithContext(ctx context.Context) ExperimentPlanTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPlanTemplateMapOutput)
}

type ExperimentPlanTemplateOutput struct{ *pulumi.OutputState }

func (ExperimentPlanTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPlanTemplate)(nil)).Elem()
}

func (o ExperimentPlanTemplateOutput) ToExperimentPlanTemplateOutput() ExperimentPlanTemplateOutput {
	return o
}

func (o ExperimentPlanTemplateOutput) ToExperimentPlanTemplateOutputWithContext(ctx context.Context) ExperimentPlanTemplateOutput {
	return o
}

// The creation time of the resource.
func (o ExperimentPlanTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Used to indicate the privacy level of the content or information. It can have the following optional parameters:
// - private: Indicates that the content is private and restricted to specific users or permission groups. Private content is usually not publicly displayed, and only authorized users can view or edit it.
// - public: Indicates that the content is public and can be accessed by anyone. Public content is usually viewable by all users and is suitable for sharing information or resources
func (o ExperimentPlanTemplateOutput) PrivacyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) pulumi.StringOutput { return v.PrivacyLevel }).(pulumi.StringOutput)
}

// Describe the purpose of this template.
func (o ExperimentPlanTemplateOutput) TemplateDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) pulumi.StringPtrOutput { return v.TemplateDescription }).(pulumi.StringPtrOutput)
}

// The ID of the template.
func (o ExperimentPlanTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// Help users identify and select specific templates.
func (o ExperimentPlanTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

// Representative Template Pipeline. See `templatePipeline` below.
func (o ExperimentPlanTemplateOutput) TemplatePipelines() ExperimentPlanTemplateTemplatePipelineArrayOutput {
	return o.ApplyT(func(v *ExperimentPlanTemplate) ExperimentPlanTemplateTemplatePipelineArrayOutput {
		return v.TemplatePipelines
	}).(ExperimentPlanTemplateTemplatePipelineArrayOutput)
}

type ExperimentPlanTemplateArrayOutput struct{ *pulumi.OutputState }

func (ExperimentPlanTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPlanTemplate)(nil)).Elem()
}

func (o ExperimentPlanTemplateArrayOutput) ToExperimentPlanTemplateArrayOutput() ExperimentPlanTemplateArrayOutput {
	return o
}

func (o ExperimentPlanTemplateArrayOutput) ToExperimentPlanTemplateArrayOutputWithContext(ctx context.Context) ExperimentPlanTemplateArrayOutput {
	return o
}

func (o ExperimentPlanTemplateArrayOutput) Index(i pulumi.IntInput) ExperimentPlanTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExperimentPlanTemplate {
		return vs[0].([]*ExperimentPlanTemplate)[vs[1].(int)]
	}).(ExperimentPlanTemplateOutput)
}

type ExperimentPlanTemplateMapOutput struct{ *pulumi.OutputState }

func (ExperimentPlanTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPlanTemplate)(nil)).Elem()
}

func (o ExperimentPlanTemplateMapOutput) ToExperimentPlanTemplateMapOutput() ExperimentPlanTemplateMapOutput {
	return o
}

func (o ExperimentPlanTemplateMapOutput) ToExperimentPlanTemplateMapOutputWithContext(ctx context.Context) ExperimentPlanTemplateMapOutput {
	return o
}

func (o ExperimentPlanTemplateMapOutput) MapIndex(k pulumi.StringInput) ExperimentPlanTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExperimentPlanTemplate {
		return vs[0].(map[string]*ExperimentPlanTemplate)[vs[1].(string)]
	}).(ExperimentPlanTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanTemplateInput)(nil)).Elem(), &ExperimentPlanTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanTemplateArrayInput)(nil)).Elem(), ExperimentPlanTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPlanTemplateMapInput)(nil)).Elem(), ExperimentPlanTemplateMap{})
	pulumi.RegisterOutputType(ExperimentPlanTemplateOutput{})
	pulumi.RegisterOutputType(ExperimentPlanTemplateArrayOutput{})
	pulumi.RegisterOutputType(ExperimentPlanTemplateMapOutput{})
}
