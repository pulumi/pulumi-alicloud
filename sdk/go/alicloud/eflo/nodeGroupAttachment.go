// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Node Group Attachment resource.
//
// Node Association Node Group Resources.
//
// For information about Eflo Node Group Attachment and how to use it, see [What is Node Group Attachment](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/ExtendCluster).
//
// > **NOTE:** Available since v1.255.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := eflo.NewNodeGroupAttachment(ctx, "default", &eflo.NodeGroupAttachmentArgs{
//				VswitchId:     pulumi.String("vsw-uf63gbmvwgreao66opmie"),
//				Hostname:      pulumi.String("attachment-example-e01-cn-smw4d1bzd0a"),
//				LoginPassword: pulumi.String("G7f$2kL9@vQx3Zp5*"),
//				ClusterId:     pulumi.String("i118976621753269898628"),
//				NodeGroupId:   pulumi.String("i127582271753269898630"),
//				NodeId:        pulumi.String("e01-cn-smw4d1bzd0a"),
//				VpcId:         pulumi.String("vpc-uf6t73bb01dfprb2qvpqa"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Node Group Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment example <cluster_id>:<node_group_id>:<node_id>
// ```
type NodeGroupAttachment struct {
	pulumi.CustomResourceState

	// Cluster ID
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
	DataDisks NodeGroupAttachmentDataDiskArrayOutput `pulumi:"dataDisks"`
	// Node hostname
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Node login password
	LoginPassword pulumi.StringPtrOutput `pulumi:"loginPassword"`
	// Node group ID
	NodeGroupId pulumi.StringOutput `pulumi:"nodeGroupId"`
	// Node ID
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// User-defined data
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// Vpc id
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// vswitch id
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewNodeGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewNodeGroupAttachment(ctx *pulumi.Context,
	name string, args *NodeGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*NodeGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeGroupAttachment
	err := ctx.RegisterResource("alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeGroupAttachment gets an existing NodeGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeGroupAttachmentState, opts ...pulumi.ResourceOption) (*NodeGroupAttachment, error) {
	var resource NodeGroupAttachment
	err := ctx.ReadResource("alicloud:eflo/nodeGroupAttachment:NodeGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeGroupAttachment resources.
type nodeGroupAttachmentState struct {
	// Cluster ID
	ClusterId *string `pulumi:"clusterId"`
	// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
	DataDisks []NodeGroupAttachmentDataDisk `pulumi:"dataDisks"`
	// Node hostname
	Hostname *string `pulumi:"hostname"`
	// Node login password
	LoginPassword *string `pulumi:"loginPassword"`
	// Node group ID
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// Node ID
	NodeId *string `pulumi:"nodeId"`
	// User-defined data
	UserData *string `pulumi:"userData"`
	// Vpc id
	VpcId *string `pulumi:"vpcId"`
	// vswitch id
	VswitchId *string `pulumi:"vswitchId"`
}

type NodeGroupAttachmentState struct {
	// Cluster ID
	ClusterId pulumi.StringPtrInput
	// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
	DataDisks NodeGroupAttachmentDataDiskArrayInput
	// Node hostname
	Hostname pulumi.StringPtrInput
	// Node login password
	LoginPassword pulumi.StringPtrInput
	// Node group ID
	NodeGroupId pulumi.StringPtrInput
	// Node ID
	NodeId pulumi.StringPtrInput
	// User-defined data
	UserData pulumi.StringPtrInput
	// Vpc id
	VpcId pulumi.StringPtrInput
	// vswitch id
	VswitchId pulumi.StringPtrInput
}

func (NodeGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupAttachmentState)(nil)).Elem()
}

type nodeGroupAttachmentArgs struct {
	// Cluster ID
	ClusterId *string `pulumi:"clusterId"`
	// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
	DataDisks []NodeGroupAttachmentDataDisk `pulumi:"dataDisks"`
	// Node hostname
	Hostname string `pulumi:"hostname"`
	// Node login password
	LoginPassword *string `pulumi:"loginPassword"`
	// Node group ID
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// Node ID
	NodeId *string `pulumi:"nodeId"`
	// User-defined data
	UserData *string `pulumi:"userData"`
	// Vpc id
	VpcId string `pulumi:"vpcId"`
	// vswitch id
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a NodeGroupAttachment resource.
type NodeGroupAttachmentArgs struct {
	// Cluster ID
	ClusterId pulumi.StringPtrInput
	// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
	DataDisks NodeGroupAttachmentDataDiskArrayInput
	// Node hostname
	Hostname pulumi.StringInput
	// Node login password
	LoginPassword pulumi.StringPtrInput
	// Node group ID
	NodeGroupId pulumi.StringPtrInput
	// Node ID
	NodeId pulumi.StringPtrInput
	// User-defined data
	UserData pulumi.StringPtrInput
	// Vpc id
	VpcId pulumi.StringInput
	// vswitch id
	VswitchId pulumi.StringInput
}

func (NodeGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupAttachmentArgs)(nil)).Elem()
}

type NodeGroupAttachmentInput interface {
	pulumi.Input

	ToNodeGroupAttachmentOutput() NodeGroupAttachmentOutput
	ToNodeGroupAttachmentOutputWithContext(ctx context.Context) NodeGroupAttachmentOutput
}

func (*NodeGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAttachment)(nil)).Elem()
}

func (i *NodeGroupAttachment) ToNodeGroupAttachmentOutput() NodeGroupAttachmentOutput {
	return i.ToNodeGroupAttachmentOutputWithContext(context.Background())
}

func (i *NodeGroupAttachment) ToNodeGroupAttachmentOutputWithContext(ctx context.Context) NodeGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAttachmentOutput)
}

// NodeGroupAttachmentArrayInput is an input type that accepts NodeGroupAttachmentArray and NodeGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `NodeGroupAttachmentArrayInput` via:
//
//	NodeGroupAttachmentArray{ NodeGroupAttachmentArgs{...} }
type NodeGroupAttachmentArrayInput interface {
	pulumi.Input

	ToNodeGroupAttachmentArrayOutput() NodeGroupAttachmentArrayOutput
	ToNodeGroupAttachmentArrayOutputWithContext(context.Context) NodeGroupAttachmentArrayOutput
}

type NodeGroupAttachmentArray []NodeGroupAttachmentInput

func (NodeGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroupAttachment)(nil)).Elem()
}

func (i NodeGroupAttachmentArray) ToNodeGroupAttachmentArrayOutput() NodeGroupAttachmentArrayOutput {
	return i.ToNodeGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i NodeGroupAttachmentArray) ToNodeGroupAttachmentArrayOutputWithContext(ctx context.Context) NodeGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAttachmentArrayOutput)
}

// NodeGroupAttachmentMapInput is an input type that accepts NodeGroupAttachmentMap and NodeGroupAttachmentMapOutput values.
// You can construct a concrete instance of `NodeGroupAttachmentMapInput` via:
//
//	NodeGroupAttachmentMap{ "key": NodeGroupAttachmentArgs{...} }
type NodeGroupAttachmentMapInput interface {
	pulumi.Input

	ToNodeGroupAttachmentMapOutput() NodeGroupAttachmentMapOutput
	ToNodeGroupAttachmentMapOutputWithContext(context.Context) NodeGroupAttachmentMapOutput
}

type NodeGroupAttachmentMap map[string]NodeGroupAttachmentInput

func (NodeGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroupAttachment)(nil)).Elem()
}

func (i NodeGroupAttachmentMap) ToNodeGroupAttachmentMapOutput() NodeGroupAttachmentMapOutput {
	return i.ToNodeGroupAttachmentMapOutputWithContext(context.Background())
}

func (i NodeGroupAttachmentMap) ToNodeGroupAttachmentMapOutputWithContext(ctx context.Context) NodeGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAttachmentMapOutput)
}

type NodeGroupAttachmentOutput struct{ *pulumi.OutputState }

func (NodeGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAttachment)(nil)).Elem()
}

func (o NodeGroupAttachmentOutput) ToNodeGroupAttachmentOutput() NodeGroupAttachmentOutput {
	return o
}

func (o NodeGroupAttachmentOutput) ToNodeGroupAttachmentOutputWithContext(ctx context.Context) NodeGroupAttachmentOutput {
	return o
}

// Cluster ID
func (o NodeGroupAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The data disk of the cloud disk to be attached to the node. See `dataDisk` below.
func (o NodeGroupAttachmentOutput) DataDisks() NodeGroupAttachmentDataDiskArrayOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) NodeGroupAttachmentDataDiskArrayOutput { return v.DataDisks }).(NodeGroupAttachmentDataDiskArrayOutput)
}

// Node hostname
func (o NodeGroupAttachmentOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Node login password
func (o NodeGroupAttachmentOutput) LoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringPtrOutput { return v.LoginPassword }).(pulumi.StringPtrOutput)
}

// Node group ID
func (o NodeGroupAttachmentOutput) NodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.NodeGroupId }).(pulumi.StringOutput)
}

// Node ID
func (o NodeGroupAttachmentOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// User-defined data
func (o NodeGroupAttachmentOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// Vpc id
func (o NodeGroupAttachmentOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// vswitch id
func (o NodeGroupAttachmentOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroupAttachment) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

type NodeGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroupAttachment)(nil)).Elem()
}

func (o NodeGroupAttachmentArrayOutput) ToNodeGroupAttachmentArrayOutput() NodeGroupAttachmentArrayOutput {
	return o
}

func (o NodeGroupAttachmentArrayOutput) ToNodeGroupAttachmentArrayOutputWithContext(ctx context.Context) NodeGroupAttachmentArrayOutput {
	return o
}

func (o NodeGroupAttachmentArrayOutput) Index(i pulumi.IntInput) NodeGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeGroupAttachment {
		return vs[0].([]*NodeGroupAttachment)[vs[1].(int)]
	}).(NodeGroupAttachmentOutput)
}

type NodeGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (NodeGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroupAttachment)(nil)).Elem()
}

func (o NodeGroupAttachmentMapOutput) ToNodeGroupAttachmentMapOutput() NodeGroupAttachmentMapOutput {
	return o
}

func (o NodeGroupAttachmentMapOutput) ToNodeGroupAttachmentMapOutputWithContext(ctx context.Context) NodeGroupAttachmentMapOutput {
	return o
}

func (o NodeGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) NodeGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeGroupAttachment {
		return vs[0].(map[string]*NodeGroupAttachment)[vs[1].(string)]
	}).(NodeGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupAttachmentInput)(nil)).Elem(), &NodeGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupAttachmentArrayInput)(nil)).Elem(), NodeGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupAttachmentMapInput)(nil)).Elem(), NodeGroupAttachmentMap{})
	pulumi.RegisterOutputType(NodeGroupAttachmentOutput{})
	pulumi.RegisterOutputType(NodeGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupAttachmentMapOutput{})
}
