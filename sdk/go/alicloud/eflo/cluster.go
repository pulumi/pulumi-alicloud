// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eflo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Eflo Cluster resource.
//
// Large computing cluster.
//
// For information about Eflo Cluster and how to use it, see [What is Cluster](https://next.api.alibabacloud.com/document/eflo-controller/2022-12-15/CreateCluster).
//
// > **NOTE:** Available since v1.246.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eflo"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			createVpc, err := vpc.NewNetwork(ctx, "create_vpc", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("192.168.0.0/16"),
//				VpcName:   pulumi.String("cluster-resoure-example"),
//			})
//			if err != nil {
//				return err
//			}
//			createVswitch, err := vpc.NewSwitch(ctx, "create_vswitch", &vpc.SwitchArgs{
//				VpcId:       createVpc.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-b"),
//				CidrBlock:   pulumi.String("192.168.0.0/24"),
//				VswitchName: pulumi.String("cluster-resoure-example"),
//			})
//			if err != nil {
//				return err
//			}
//			createSecurityGroup, err := ecs.NewSecurityGroup(ctx, "create_security_group", &ecs.SecurityGroupArgs{
//				Description:       pulumi.String("sg"),
//				SecurityGroupName: pulumi.String("cluster-resoure-example"),
//				SecurityGroupType: pulumi.String("normal"),
//				VpcId:             createVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eflo.NewCluster(ctx, "default", &eflo.ClusterArgs{
//				ClusterDescription: pulumi.String("cluster-resource-example"),
//				OpenEniJumboFrame:  pulumi.Bool(false),
//				HpnZone:            pulumi.String("B1"),
//				NimizVswitches: pulumi.StringArray{
//					pulumi.String("1111"),
//				},
//				IgnoreFailedNodeTasks: pulumi.Bool(true),
//				ResourceGroupId:       pulumi.String(_default.Ids[1]),
//				NodeGroups: eflo.ClusterNodeGroupArray{
//					&eflo.ClusterNodeGroupArgs{
//						ImageId:              pulumi.String("i198448731735114628708"),
//						ZoneId:               pulumi.String("cn-hangzhou-b"),
//						NodeGroupName:        pulumi.String("cluster-resource-example"),
//						NodeGroupDescription: pulumi.String("cluster-resource-example"),
//						MachineType:          pulumi.String("efg2.C48cA3sen"),
//					},
//				},
//				Networks: &eflo.ClusterNetworksArgs{
//					TailIpVersion: pulumi.String("ipv4"),
//					NewVpdInfo: &eflo.ClusterNetworksNewVpdInfoArgs{
//						MonitorVpcId:     createVpc.ID(),
//						MonitorVswitchId: createVswitch.ID(),
//						CenId:            pulumi.String("11111"),
//						CloudLinkId:      pulumi.String("1111"),
//						VpdCidr:          pulumi.String("111"),
//						VpdSubnets: eflo.ClusterNetworksNewVpdInfoVpdSubnetArray{
//							&eflo.ClusterNetworksNewVpdInfoVpdSubnetArgs{
//								ZoneId:     pulumi.String("1111"),
//								SubnetCidr: pulumi.String("111"),
//								SubnetType: pulumi.String("111"),
//							},
//						},
//						CloudLinkCidr: pulumi.String("169.254.128.0/23"),
//					},
//					SecurityGroupId: createSecurityGroup.ID(),
//					VswitchZoneId:   pulumi.String("cn-hangzhou-b"),
//					VpcId:           createVpc.ID(),
//					VswitchId:       createVswitch.ID(),
//					VpdInfo: &eflo.ClusterNetworksVpdInfoArgs{
//						VpdId: pulumi.String("111"),
//						VpdSubnets: pulumi.StringArray{
//							pulumi.String("111"),
//						},
//					},
//					IpAllocationPolicies: eflo.ClusterNetworksIpAllocationPolicyArray{
//						&eflo.ClusterNetworksIpAllocationPolicyArgs{
//							BondPolicy: &eflo.ClusterNetworksIpAllocationPolicyBondPolicyArgs{
//								BondDefaultSubnet: pulumi.String("111"),
//								Bonds: eflo.ClusterNetworksIpAllocationPolicyBondPolicyBondArray{
//									&eflo.ClusterNetworksIpAllocationPolicyBondPolicyBondArgs{
//										Name:   pulumi.String("111"),
//										Subnet: pulumi.String("111"),
//									},
//								},
//							},
//							MachineTypePolicies: eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyArray{
//								&eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyArgs{
//									Bonds: eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArray{
//										&eflo.ClusterNetworksIpAllocationPolicyMachineTypePolicyBondArgs{
//											Name:   pulumi.String("111"),
//											Subnet: pulumi.String("111"),
//										},
//									},
//									MachineType: pulumi.String("111"),
//								},
//							},
//							NodePolicies: eflo.ClusterNetworksIpAllocationPolicyNodePolicyArray{
//								&eflo.ClusterNetworksIpAllocationPolicyNodePolicyArgs{
//									Bonds: eflo.ClusterNetworksIpAllocationPolicyNodePolicyBondArray{
//										&eflo.ClusterNetworksIpAllocationPolicyNodePolicyBondArgs{
//											Name:   pulumi.String("111"),
//											Subnet: pulumi.String("111"),
//										},
//									},
//									NodeId: pulumi.String("111"),
//								},
//							},
//						},
//					},
//				},
//				ClusterName: pulumi.String("tfacceflo7165"),
//				ClusterType: pulumi.String("Lite"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Eflo Cluster can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eflo/cluster:Cluster example <id>
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// cluster description
	ClusterDescription pulumi.StringPtrOutput `pulumi:"clusterDescription"`
	// ClusterName
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// cluster type
	ClusterType pulumi.StringPtrOutput `pulumi:"clusterType"`
	// Component (software instance) See `components` below.
	Components ClusterComponentArrayOutput `pulumi:"components"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Cluster Number
	HpnZone pulumi.StringPtrOutput `pulumi:"hpnZone"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrOutput `pulumi:"ignoreFailedNodeTasks"`
	// Network Information See `networks` below.
	Networks ClusterNetworksPtrOutput `pulumi:"networks"`
	// Node virtual switch
	NimizVswitches pulumi.StringArrayOutput `pulumi:"nimizVswitches"`
	// Node Group List See `nodeGroups` below.
	NodeGroups ClusterNodeGroupArrayOutput `pulumi:"nodeGroups"`
	// Whether the network interface supports jumbo frames
	OpenEniJumboFrame pulumi.BoolPtrOutput `pulumi:"openEniJumboFrame"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// tag
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("alicloud:eflo/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("alicloud:eflo/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// cluster description
	ClusterDescription *string `pulumi:"clusterDescription"`
	// ClusterName
	ClusterName *string `pulumi:"clusterName"`
	// cluster type
	ClusterType *string `pulumi:"clusterType"`
	// Component (software instance) See `components` below.
	Components []ClusterComponent `pulumi:"components"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Cluster Number
	HpnZone *string `pulumi:"hpnZone"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks *bool `pulumi:"ignoreFailedNodeTasks"`
	// Network Information See `networks` below.
	Networks *ClusterNetworks `pulumi:"networks"`
	// Node virtual switch
	NimizVswitches []string `pulumi:"nimizVswitches"`
	// Node Group List See `nodeGroups` below.
	NodeGroups []ClusterNodeGroup `pulumi:"nodeGroups"`
	// Whether the network interface supports jumbo frames
	OpenEniJumboFrame *bool `pulumi:"openEniJumboFrame"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// tag
	Tags map[string]string `pulumi:"tags"`
}

type ClusterState struct {
	// cluster description
	ClusterDescription pulumi.StringPtrInput
	// ClusterName
	ClusterName pulumi.StringPtrInput
	// cluster type
	ClusterType pulumi.StringPtrInput
	// Component (software instance) See `components` below.
	Components ClusterComponentArrayInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Cluster Number
	HpnZone pulumi.StringPtrInput
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrInput
	// Network Information See `networks` below.
	Networks ClusterNetworksPtrInput
	// Node virtual switch
	NimizVswitches pulumi.StringArrayInput
	// Node Group List See `nodeGroups` below.
	NodeGroups ClusterNodeGroupArrayInput
	// Whether the network interface supports jumbo frames
	OpenEniJumboFrame pulumi.BoolPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// tag
	Tags pulumi.StringMapInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// cluster description
	ClusterDescription *string `pulumi:"clusterDescription"`
	// ClusterName
	ClusterName *string `pulumi:"clusterName"`
	// cluster type
	ClusterType *string `pulumi:"clusterType"`
	// Component (software instance) See `components` below.
	Components []ClusterComponent `pulumi:"components"`
	// Cluster Number
	HpnZone *string `pulumi:"hpnZone"`
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks *bool `pulumi:"ignoreFailedNodeTasks"`
	// Network Information See `networks` below.
	Networks *ClusterNetworks `pulumi:"networks"`
	// Node virtual switch
	NimizVswitches []string `pulumi:"nimizVswitches"`
	// Node Group List See `nodeGroups` below.
	NodeGroups []ClusterNodeGroup `pulumi:"nodeGroups"`
	// Whether the network interface supports jumbo frames
	OpenEniJumboFrame *bool `pulumi:"openEniJumboFrame"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// tag
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// cluster description
	ClusterDescription pulumi.StringPtrInput
	// ClusterName
	ClusterName pulumi.StringPtrInput
	// cluster type
	ClusterType pulumi.StringPtrInput
	// Component (software instance) See `components` below.
	Components ClusterComponentArrayInput
	// Cluster Number
	HpnZone pulumi.StringPtrInput
	// Whether to allow skipping failed nodes. Default value: False
	IgnoreFailedNodeTasks pulumi.BoolPtrInput
	// Network Information See `networks` below.
	Networks ClusterNetworksPtrInput
	// Node virtual switch
	NimizVswitches pulumi.StringArrayInput
	// Node Group List See `nodeGroups` below.
	NodeGroups ClusterNodeGroupArrayInput
	// Whether the network interface supports jumbo frames
	OpenEniJumboFrame pulumi.BoolPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// tag
	Tags pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// cluster description
func (o ClusterOutput) ClusterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterDescription }).(pulumi.StringPtrOutput)
}

// ClusterName
func (o ClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// cluster type
func (o ClusterOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterType }).(pulumi.StringPtrOutput)
}

// Component (software instance) See `components` below.
func (o ClusterOutput) Components() ClusterComponentArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterComponentArrayOutput { return v.Components }).(ClusterComponentArrayOutput)
}

// The creation time of the resource
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Cluster Number
func (o ClusterOutput) HpnZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.HpnZone }).(pulumi.StringPtrOutput)
}

// Whether to allow skipping failed nodes. Default value: False
func (o ClusterOutput) IgnoreFailedNodeTasks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.IgnoreFailedNodeTasks }).(pulumi.BoolPtrOutput)
}

// Network Information See `networks` below.
func (o ClusterOutput) Networks() ClusterNetworksPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworksPtrOutput { return v.Networks }).(ClusterNetworksPtrOutput)
}

// Node virtual switch
func (o ClusterOutput) NimizVswitches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.NimizVswitches }).(pulumi.StringArrayOutput)
}

// Node Group List See `nodeGroups` below.
func (o ClusterOutput) NodeGroups() ClusterNodeGroupArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeGroupArrayOutput { return v.NodeGroups }).(ClusterNodeGroupArrayOutput)
}

// Whether the network interface supports jumbo frames
func (o ClusterOutput) OpenEniJumboFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.OpenEniJumboFrame }).(pulumi.BoolPtrOutput)
}

// The ID of the resource group
func (o ClusterOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The status of the resource
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// tag
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
