// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ga

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Global Accelerator (GA) Basic Accelerate IP resource.
//
// For information about Global Accelerator (GA) Basic Accelerate IP and how to use it, see [What is Basic Accelerate IP](https://help.aliyun.com/document_detail/466833.html).
//
// > **NOTE:** Available in v1.194.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ga"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ga.NewBasicAccelerateIp(ctx, "default", &ga.BasicAccelerateIpArgs{
//				AcceleratorId: pulumi.String("your_accelerator_id"),
//				IpSetId:       pulumi.String("your_ip_set_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Global Accelerator (GA) Basic Accelerate IP can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:ga/basicAccelerateIp:BasicAccelerateIp example <id>
//
// ```
type BasicAccelerateIp struct {
	pulumi.CustomResourceState

	// The address of the Basic Accelerate IP.
	AccelerateIpAddress pulumi.StringOutput `pulumi:"accelerateIpAddress"`
	// The ID of the Basic GA instance.
	AcceleratorId pulumi.StringOutput `pulumi:"acceleratorId"`
	// The ID of the Basic Ip Set.
	IpSetId pulumi.StringOutput `pulumi:"ipSetId"`
	// The status of the Basic Accelerate IP instance.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBasicAccelerateIp registers a new resource with the given unique name, arguments, and options.
func NewBasicAccelerateIp(ctx *pulumi.Context,
	name string, args *BasicAccelerateIpArgs, opts ...pulumi.ResourceOption) (*BasicAccelerateIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceleratorId == nil {
		return nil, errors.New("invalid value for required argument 'AcceleratorId'")
	}
	if args.IpSetId == nil {
		return nil, errors.New("invalid value for required argument 'IpSetId'")
	}
	var resource BasicAccelerateIp
	err := ctx.RegisterResource("alicloud:ga/basicAccelerateIp:BasicAccelerateIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasicAccelerateIp gets an existing BasicAccelerateIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasicAccelerateIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BasicAccelerateIpState, opts ...pulumi.ResourceOption) (*BasicAccelerateIp, error) {
	var resource BasicAccelerateIp
	err := ctx.ReadResource("alicloud:ga/basicAccelerateIp:BasicAccelerateIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BasicAccelerateIp resources.
type basicAccelerateIpState struct {
	// The address of the Basic Accelerate IP.
	AccelerateIpAddress *string `pulumi:"accelerateIpAddress"`
	// The ID of the Basic GA instance.
	AcceleratorId *string `pulumi:"acceleratorId"`
	// The ID of the Basic Ip Set.
	IpSetId *string `pulumi:"ipSetId"`
	// The status of the Basic Accelerate IP instance.
	Status *string `pulumi:"status"`
}

type BasicAccelerateIpState struct {
	// The address of the Basic Accelerate IP.
	AccelerateIpAddress pulumi.StringPtrInput
	// The ID of the Basic GA instance.
	AcceleratorId pulumi.StringPtrInput
	// The ID of the Basic Ip Set.
	IpSetId pulumi.StringPtrInput
	// The status of the Basic Accelerate IP instance.
	Status pulumi.StringPtrInput
}

func (BasicAccelerateIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*basicAccelerateIpState)(nil)).Elem()
}

type basicAccelerateIpArgs struct {
	// The ID of the Basic GA instance.
	AcceleratorId string `pulumi:"acceleratorId"`
	// The ID of the Basic Ip Set.
	IpSetId string `pulumi:"ipSetId"`
}

// The set of arguments for constructing a BasicAccelerateIp resource.
type BasicAccelerateIpArgs struct {
	// The ID of the Basic GA instance.
	AcceleratorId pulumi.StringInput
	// The ID of the Basic Ip Set.
	IpSetId pulumi.StringInput
}

func (BasicAccelerateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basicAccelerateIpArgs)(nil)).Elem()
}

type BasicAccelerateIpInput interface {
	pulumi.Input

	ToBasicAccelerateIpOutput() BasicAccelerateIpOutput
	ToBasicAccelerateIpOutputWithContext(ctx context.Context) BasicAccelerateIpOutput
}

func (*BasicAccelerateIp) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicAccelerateIp)(nil)).Elem()
}

func (i *BasicAccelerateIp) ToBasicAccelerateIpOutput() BasicAccelerateIpOutput {
	return i.ToBasicAccelerateIpOutputWithContext(context.Background())
}

func (i *BasicAccelerateIp) ToBasicAccelerateIpOutputWithContext(ctx context.Context) BasicAccelerateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicAccelerateIpOutput)
}

// BasicAccelerateIpArrayInput is an input type that accepts BasicAccelerateIpArray and BasicAccelerateIpArrayOutput values.
// You can construct a concrete instance of `BasicAccelerateIpArrayInput` via:
//
//	BasicAccelerateIpArray{ BasicAccelerateIpArgs{...} }
type BasicAccelerateIpArrayInput interface {
	pulumi.Input

	ToBasicAccelerateIpArrayOutput() BasicAccelerateIpArrayOutput
	ToBasicAccelerateIpArrayOutputWithContext(context.Context) BasicAccelerateIpArrayOutput
}

type BasicAccelerateIpArray []BasicAccelerateIpInput

func (BasicAccelerateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicAccelerateIp)(nil)).Elem()
}

func (i BasicAccelerateIpArray) ToBasicAccelerateIpArrayOutput() BasicAccelerateIpArrayOutput {
	return i.ToBasicAccelerateIpArrayOutputWithContext(context.Background())
}

func (i BasicAccelerateIpArray) ToBasicAccelerateIpArrayOutputWithContext(ctx context.Context) BasicAccelerateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicAccelerateIpArrayOutput)
}

// BasicAccelerateIpMapInput is an input type that accepts BasicAccelerateIpMap and BasicAccelerateIpMapOutput values.
// You can construct a concrete instance of `BasicAccelerateIpMapInput` via:
//
//	BasicAccelerateIpMap{ "key": BasicAccelerateIpArgs{...} }
type BasicAccelerateIpMapInput interface {
	pulumi.Input

	ToBasicAccelerateIpMapOutput() BasicAccelerateIpMapOutput
	ToBasicAccelerateIpMapOutputWithContext(context.Context) BasicAccelerateIpMapOutput
}

type BasicAccelerateIpMap map[string]BasicAccelerateIpInput

func (BasicAccelerateIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicAccelerateIp)(nil)).Elem()
}

func (i BasicAccelerateIpMap) ToBasicAccelerateIpMapOutput() BasicAccelerateIpMapOutput {
	return i.ToBasicAccelerateIpMapOutputWithContext(context.Background())
}

func (i BasicAccelerateIpMap) ToBasicAccelerateIpMapOutputWithContext(ctx context.Context) BasicAccelerateIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicAccelerateIpMapOutput)
}

type BasicAccelerateIpOutput struct{ *pulumi.OutputState }

func (BasicAccelerateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicAccelerateIp)(nil)).Elem()
}

func (o BasicAccelerateIpOutput) ToBasicAccelerateIpOutput() BasicAccelerateIpOutput {
	return o
}

func (o BasicAccelerateIpOutput) ToBasicAccelerateIpOutputWithContext(ctx context.Context) BasicAccelerateIpOutput {
	return o
}

// The address of the Basic Accelerate IP.
func (o BasicAccelerateIpOutput) AccelerateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicAccelerateIp) pulumi.StringOutput { return v.AccelerateIpAddress }).(pulumi.StringOutput)
}

// The ID of the Basic GA instance.
func (o BasicAccelerateIpOutput) AcceleratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicAccelerateIp) pulumi.StringOutput { return v.AcceleratorId }).(pulumi.StringOutput)
}

// The ID of the Basic Ip Set.
func (o BasicAccelerateIpOutput) IpSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicAccelerateIp) pulumi.StringOutput { return v.IpSetId }).(pulumi.StringOutput)
}

// The status of the Basic Accelerate IP instance.
func (o BasicAccelerateIpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicAccelerateIp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BasicAccelerateIpArrayOutput struct{ *pulumi.OutputState }

func (BasicAccelerateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicAccelerateIp)(nil)).Elem()
}

func (o BasicAccelerateIpArrayOutput) ToBasicAccelerateIpArrayOutput() BasicAccelerateIpArrayOutput {
	return o
}

func (o BasicAccelerateIpArrayOutput) ToBasicAccelerateIpArrayOutputWithContext(ctx context.Context) BasicAccelerateIpArrayOutput {
	return o
}

func (o BasicAccelerateIpArrayOutput) Index(i pulumi.IntInput) BasicAccelerateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BasicAccelerateIp {
		return vs[0].([]*BasicAccelerateIp)[vs[1].(int)]
	}).(BasicAccelerateIpOutput)
}

type BasicAccelerateIpMapOutput struct{ *pulumi.OutputState }

func (BasicAccelerateIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicAccelerateIp)(nil)).Elem()
}

func (o BasicAccelerateIpMapOutput) ToBasicAccelerateIpMapOutput() BasicAccelerateIpMapOutput {
	return o
}

func (o BasicAccelerateIpMapOutput) ToBasicAccelerateIpMapOutputWithContext(ctx context.Context) BasicAccelerateIpMapOutput {
	return o
}

func (o BasicAccelerateIpMapOutput) MapIndex(k pulumi.StringInput) BasicAccelerateIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BasicAccelerateIp {
		return vs[0].(map[string]*BasicAccelerateIp)[vs[1].(string)]
	}).(BasicAccelerateIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicAccelerateIpInput)(nil)).Elem(), &BasicAccelerateIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicAccelerateIpArrayInput)(nil)).Elem(), BasicAccelerateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicAccelerateIpMapInput)(nil)).Elem(), BasicAccelerateIpMap{})
	pulumi.RegisterOutputType(BasicAccelerateIpOutput{})
	pulumi.RegisterOutputType(BasicAccelerateIpArrayOutput{})
	pulumi.RegisterOutputType(BasicAccelerateIpMapOutput{})
}
