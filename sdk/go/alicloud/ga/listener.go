// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ga

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Global Accelerator (GA) Listener resource.
//
// For information about Global Accelerator (GA) Listener and how to use it, see [What is Listener](https://help.aliyun.com/document_detail/153253.html).
//
// > **NOTE:** Available in v1.111.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ga"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleAccelerator, err := ga.NewAccelerator(ctx, "exampleAccelerator", &ga.AcceleratorArgs{
// 			Duration:      pulumi.Int(1),
// 			AutoUseCoupon: pulumi.Bool(true),
// 			Spec:          pulumi.String("1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		deBandwidthPackage, err := ga.NewBandwidthPackage(ctx, "deBandwidthPackage", &ga.BandwidthPackageArgs{
// 			Bandwidth:     pulumi.Int(100),
// 			Type:          pulumi.String("Basic"),
// 			BandwidthType: pulumi.String("Basic"),
// 			PaymentType:   pulumi.String("PayAsYouGo"),
// 			BillingType:   pulumi.String("PayBy95"),
// 			Ratio:         pulumi.Int(30),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		deBandwidthPackageAttachment, err := ga.NewBandwidthPackageAttachment(ctx, "deBandwidthPackageAttachment", &ga.BandwidthPackageAttachmentArgs{
// 			AcceleratorId:      exampleAccelerator.ID(),
// 			BandwidthPackageId: deBandwidthPackage.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ga.NewListener(ctx, "exampleListener", &ga.ListenerArgs{
// 			AcceleratorId: exampleAccelerator.ID(),
// 			PortRanges: ga.ListenerPortRangeArray{
// 				&ga.ListenerPortRangeArgs{
// 					FromPort: pulumi.Int(60),
// 					ToPort:   pulumi.Int(70),
// 				},
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			deBandwidthPackageAttachment,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Ga Listener can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ga/listener:Listener example <id>
// ```
type Listener struct {
	pulumi.CustomResourceState

	// The accelerator id.
	AcceleratorId pulumi.StringOutput `pulumi:"acceleratorId"`
	// The certificates of the listener.
	Certificates ListenerCertificateArrayOutput `pulumi:"certificates"`
	// The clientAffinity of the listener. Default value is `NONE`. Valid values:
	// `NONE`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
	// `SOURCE_IP`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
	ClientAffinity pulumi.StringPtrOutput `pulumi:"clientAffinity"`
	// The description of the listener.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
	Name pulumi.StringOutput `pulumi:"name"`
	// The portRanges of the listener.
	PortRanges ListenerPortRangeArrayOutput `pulumi:"portRanges"`
	// Type of network transport protocol monitored. Default value is `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The proxy protocol of the listener. Default value is `false`. Valid value:
	// `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client.
	// `false`: keep client source IP function is not turned on.
	ProxyProtocol pulumi.BoolPtrOutput `pulumi:"proxyProtocol"`
	// The status of the listener.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceleratorId == nil {
		return nil, errors.New("invalid value for required argument 'AcceleratorId'")
	}
	if args.PortRanges == nil {
		return nil, errors.New("invalid value for required argument 'PortRanges'")
	}
	var resource Listener
	err := ctx.RegisterResource("alicloud:ga/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("alicloud:ga/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// The accelerator id.
	AcceleratorId *string `pulumi:"acceleratorId"`
	// The certificates of the listener.
	Certificates []ListenerCertificate `pulumi:"certificates"`
	// The clientAffinity of the listener. Default value is `NONE`. Valid values:
	// `NONE`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
	// `SOURCE_IP`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
	ClientAffinity *string `pulumi:"clientAffinity"`
	// The description of the listener.
	Description *string `pulumi:"description"`
	// The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
	Name *string `pulumi:"name"`
	// The portRanges of the listener.
	PortRanges []ListenerPortRange `pulumi:"portRanges"`
	// Type of network transport protocol monitored. Default value is `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The proxy protocol of the listener. Default value is `false`. Valid value:
	// `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client.
	// `false`: keep client source IP function is not turned on.
	ProxyProtocol *bool `pulumi:"proxyProtocol"`
	// The status of the listener.
	Status *string `pulumi:"status"`
}

type ListenerState struct {
	// The accelerator id.
	AcceleratorId pulumi.StringPtrInput
	// The certificates of the listener.
	Certificates ListenerCertificateArrayInput
	// The clientAffinity of the listener. Default value is `NONE`. Valid values:
	// `NONE`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
	// `SOURCE_IP`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
	ClientAffinity pulumi.StringPtrInput
	// The description of the listener.
	Description pulumi.StringPtrInput
	// The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
	Name pulumi.StringPtrInput
	// The portRanges of the listener.
	PortRanges ListenerPortRangeArrayInput
	// Type of network transport protocol monitored. Default value is `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
	Protocol pulumi.StringPtrInput
	// The proxy protocol of the listener. Default value is `false`. Valid value:
	// `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client.
	// `false`: keep client source IP function is not turned on.
	ProxyProtocol pulumi.BoolPtrInput
	// The status of the listener.
	Status pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// The accelerator id.
	AcceleratorId string `pulumi:"acceleratorId"`
	// The certificates of the listener.
	Certificates []ListenerCertificate `pulumi:"certificates"`
	// The clientAffinity of the listener. Default value is `NONE`. Valid values:
	// `NONE`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
	// `SOURCE_IP`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
	ClientAffinity *string `pulumi:"clientAffinity"`
	// The description of the listener.
	Description *string `pulumi:"description"`
	// The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
	Name *string `pulumi:"name"`
	// The portRanges of the listener.
	PortRanges []ListenerPortRange `pulumi:"portRanges"`
	// Type of network transport protocol monitored. Default value is `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The proxy protocol of the listener. Default value is `false`. Valid value:
	// `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client.
	// `false`: keep client source IP function is not turned on.
	ProxyProtocol *bool `pulumi:"proxyProtocol"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// The accelerator id.
	AcceleratorId pulumi.StringInput
	// The certificates of the listener.
	Certificates ListenerCertificateArrayInput
	// The clientAffinity of the listener. Default value is `NONE`. Valid values:
	// `NONE`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
	// `SOURCE_IP`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
	ClientAffinity pulumi.StringPtrInput
	// The description of the listener.
	Description pulumi.StringPtrInput
	// The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
	Name pulumi.StringPtrInput
	// The portRanges of the listener.
	PortRanges ListenerPortRangeArrayInput
	// Type of network transport protocol monitored. Default value is `TCP`. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`.
	Protocol pulumi.StringPtrInput
	// The proxy protocol of the listener. Default value is `false`. Valid value:
	// `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client.
	// `false`: keep client source IP function is not turned on.
	ProxyProtocol pulumi.BoolPtrInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//          ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//          ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
