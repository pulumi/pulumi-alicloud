// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ga

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Global Accelerator (GA) Additional Certificate resource.
//
// For information about Global Accelerator (GA) Additional Certificate and how to use it, see [What is Additional Certificate](https://www.alibabacloud.com/help/en/global-accelerator/latest/api-ga-2019-11-20-associateadditionalcertificateswithlistener).
//
// > **NOTE:** Available since v1.150.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ga"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			region := "cn-hangzhou"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := ga.GetAccelerators(ctx, &ga.GetAcceleratorsArgs{
//				Status: pulumi.StringRef("active"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultBandwidthPackage, err := ga.NewBandwidthPackage(ctx, "default", &ga.BandwidthPackageArgs{
//				Bandwidth:            pulumi.Int(100),
//				Type:                 pulumi.String("Basic"),
//				BandwidthType:        pulumi.String("Basic"),
//				PaymentType:          pulumi.String("PayAsYouGo"),
//				BillingType:          pulumi.String("PayBy95"),
//				Ratio:                pulumi.Int(30),
//				BandwidthPackageName: pulumi.String(name),
//				AutoPay:              pulumi.Bool(true),
//				AutoUseCoupon:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBandwidthPackageAttachment, err := ga.NewBandwidthPackageAttachment(ctx, "default", &ga.BandwidthPackageAttachmentArgs{
//				AcceleratorId:      pulumi.String(_default.Ids[0]),
//				BandwidthPackageId: defaultBandwidthPackage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			invokeJoin, err := std.Join(ctx, &std.JoinArgs{
//				Separator: "-",
//				Input: []interface{}{
//					name,
//					val0,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var defaultServiceCertificate []*cas.ServiceCertificate
//			for index := 0; index < 2; index++ {
//				key0 := index
//				_ := index
//				__res, err := cas.NewServiceCertificate(ctx, fmt.Sprintf("default-%v", key0), &cas.ServiceCertificateArgs{
//					CertificateName: pulumi.String(invokeJoin.Result),
//					Cert: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIID7zCCAtegAwIBAgIRAKi2/Fx1cUTyhV839x42ockwDQYJKoZIhvcNAQELBQAw
// XjELMAkGA1UEBhMCQ04xDjAMBgNVBAoTBU15U1NMMSswKQYDVQQLEyJNeVNTTCBU
// ZXN0IFJTQSAtIEZvciB0ZXN0IHVzZSBvbmx5MRIwEAYDVQQDEwlNeVNTTC5jb20w
// HhcNMjMwODA5MDQ1NDU3WhcNMjYwODA4MDQ1NDU3WjAsMQswCQYDVQQGEwJDTjEd
// MBsGA1UEAxMUYWxpY2xvdWQtcHJvdmlkZXIuY24wggEiMA0GCSqGSIb3DQEBAQUA
// A4IBDwAwggEKAoIBAQDdkot9e0pMCTPAtA29Sz5sF+aPT/l9+3sOnQeJ1kKLNkqK
// iQgwADexoAqlmTaZM03gh/GnkqPw9gxN/fJHWdVzxE03Fs8bKgMdS6cf0v/xArrQ
// zm6N4vmsbuE8SX2eu303PAsyBMqPByTODZ5i+5LkZcrxMFQsbA3xnBouzS5e+T+a
// 7YTyyVv5WDy871/sdRAYTfnUttdnqkKGeMKgQgRlJ2pDk5/k2iwmQmSh/wbk465+
// 1U5w2npPYGPvGAkzl7RRc4/VckqlV8P0cmgguqIRyllJwFEnvcpqpOHTxBOBq9iZ
// 4b/h7ynrfB/GbAw574eSEl0gzLBW60bT9YedbTeXAgMBAAGjgdkwgdYwDgYDVR0P
// AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSME
// GDAWgBQogSYF0TQaP8FzD7uTzxUcPwO/fzBjBggrBgEFBQcBAQRXMFUwIQYIKwYB
// BQUHMAGGFWh0dHA6Ly9vY3NwLm15c3NsLmNvbTAwBggrBgEFBQcwAoYkaHR0cDov
// L2NhLm15c3NsLmNvbS9teXNzbHRlc3Ryc2EuY3J0MB8GA1UdEQQYMBaCFGFsaWNs
// b3VkLXByb3ZpZGVyLmNuMA0GCSqGSIb3DQEBCwUAA4IBAQCwUBeznv6cAjcTLCDb
// SSvgkM9HFcbWnuGS8Nf5P4YfmSs52VuHZyjzwphjAU6B/danI/nMdZe52PXyvjVV
// 02Y8ld/tMpqPV5SpaOadLtdg6TGBNJieOAt9doM8WNEgq/JycAL9ivIOjChUetZf
// ZEV7HDIgiHSpqAPWMZYL71MS/p5zYkyOnPqmGyLNdi1neotwVCQopQXRNC2iLlVV
// yQONfXH5iijqr1iTWkB0ESK/xBt1PB655PlTjzFQUOovE1SyoQS8K3u7TP6+BqtD
// G9TYNTNZvxl5I/iU/KdWVip+qJbxRA8Skc8gHkkzeIEStw3l5cjnrp9h7EhnhkOh
// ltGN
// -----END CERTIFICATE-----
// `),
//
//	Key: pulumi.String(`-----BEGIN RSA PRIVATE KEY-----
//
// MIIEpQIBAAKCAQEA3ZKLfXtKTAkzwLQNvUs+bBfmj0/5fft7Dp0HidZCizZKiokI
// MAA3saAKpZk2mTNN4Ifxp5Kj8PYMTf3yR1nVc8RNNxbPGyoDHUunH9L/8QK60M5u
// jeL5rG7hPEl9nrt9NzwLMgTKjwckzg2eYvuS5GXK8TBULGwN8ZwaLs0uXvk/mu2E
// 8slb+Vg8vO9f7HUQGE351LbXZ6pChnjCoEIEZSdqQ5Of5NosJkJkof8G5OOuftVO
// cNp6T2Bj7xgJM5e0UXOP1XJKpVfD9HJoILqiEcpZScBRJ73KaqTh08QTgavYmeG/
// 4e8p63wfxmwMOe+HkhJdIMywVutG0/WHnW03lwIDAQABAoIBAQCe5rHS09B8pzzO
// PlJ8JrIlox5eOOScTPX7jPITD+25GL5si8mrYvyODlCUYkSdqgV3uQa9PpUEAfDh
// HfXa5boGxAj8MQdmW8LQB6lbUV7r4SFJDkKKzvRvjTVKnwnQBHXQXudIf9ckq+Lh
// QzMLmY/G7JmWTyqOkQ+O7nx4g/11bcU7uQrQdvWPfc0+IiT1TYQdyLQ/Chlj3RF/
// iwF8ZL2sfKF+Z5O49+Q6cXvUcQOvqtkIXbQijayyVNBMJwDB7aOZRA7JBNj9/ib6
// N0iTo81dJVz/nnpbWRaFTVinIsDF1heDfQ1qDx06T/Mpi6pjoWjRUcyIHEbZJTel
// 0nXDJD1BAoGBAPZB/PN8MP+o9gkf2jnoU9LzctDJrQwD1J2XElq4RomimPIMqDQP
// 5TRAJThf0O0X4Mv2n9EzV457OpJL+fz9htRWEYogWl9bkbzZ1AoX4K/acuGeawTT
// YEhPjJ2ZETsBsCeDkDDuHHzYwRQv+EfoXH36z9PBDxG1ZDb7kWwAILXdAoGBAOZW
// jXG7m4I7cxUtXGtjwydh4K7nwH/5QoH2m928HM2AT48eQCl3CMQ089+qeJGgfHQv
// GyVOO/FGhcFsFi10FMQ7IlwWgZODg64qnrNhi4zbV1M2wKem1T2dlEpkd82EFdnS
// GYRIEkFORMxEDyzx3Th2TajpWC8YKKG3Tnm0bQ4DAoGBAIZTEEswHvoVi78GZN7Z
// X3/d028X0xCOtlcPpK9ffPpuesbtKILdeMS7iJHrkecB81jOOfa+7q+FgDl0v/PD
// xtvj5sVVSHZjWGeO2h53T9QccDWpV+7V7dsDqUv9xmxNS20CUpCeEWP4R7lfQSrY
// EDuXp+11jWa3buae6n/iwfTxAoGABEYW2cVhXUk9GWd+D4AKXvCx+ozSRY2abk7l
// FXgoEKgQ0db92ccboohY/g1rr0gLBxzYpBiPhCqK0MvwnWdJ+1odiRfhz5rhFpoz
// 16A3tqVbOXAKoxG1Yy9JURgMIQQSY7hCQPIVZKDPJfsdTPgv4pxPVJL/z9/i4R1F
// l3yBiYECgYEA0+vpzL24nHZYdwgBF4qbmYhv8baRi07/BNgV1+d6vESuO/MwwoE/
// 2UZ9Drf5yoX2Bvi5/vVMbyc7cSluO7icPBkl0D8F7E3x0v5mzwPxtpR8BTRoJKOL
// /rMdLscMz2VQsL5DJd/9OZg60fHRaRtWtV0afXzL5zUxnfDLot24IG4=
// -----END RSA PRIVATE KEY-----
// `),
//
//				})
//				if err != nil {
//					return err
//				}
//				defaultServiceCertificate = append(defaultServiceCertificate, __res)
//			}
//			defaultListener, err := ga.NewListener(ctx, "default", &ga.ListenerArgs{
//				AcceleratorId: defaultBandwidthPackageAttachment.AcceleratorId,
//				Name:          pulumi.String(name),
//				Protocol:      pulumi.String("HTTPS"),
//				PortRanges: ga.ListenerPortRangeArray{
//					&ga.ListenerPortRangeArgs{
//						FromPort: pulumi.Int(8080),
//						ToPort:   pulumi.Int(8080),
//					},
//				},
//				Certificates: ga.ListenerCertificateArray{
//					&ga.ListenerCertificateArgs{
//						Id: std.JoinOutput(ctx, std.JoinOutputArgs{
//							Separator: pulumi.String("-"),
//							Input: pulumi.StringArray{
//								defaultServiceCertificate[1].ID(),
//								pulumi.String(region),
//							},
//						}, nil).ApplyT(func(invoke std.JoinResult) (*string, error) {
//							return invoke.Result, nil
//						}).(pulumi.StringPtrOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			domain := "alicloud-provider.cn"
//			_, err = ga.NewAdditionalCertificate(ctx, "default", &ga.AdditionalCertificateArgs{
//				CertificateId: pulumi.String(std.JoinOutput(ctx, std.JoinOutputArgs{
//					Separator: pulumi.String("-"),
//					Input: pulumi.StringArray{
//						defaultServiceCertificate[1].ID(),
//						pulumi.String(region),
//					},
//				}, nil).ApplyT(func(invoke std.JoinResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				Domain:        pulumi.String(domain),
//				AcceleratorId: defaultListener.AcceleratorId,
//				ListenerId:    defaultListener.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Global Accelerator (GA) Additional Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ga/additionalCertificate:AdditionalCertificate example <accelerator_id>:<listener_id>:<domain>
// ```
type AdditionalCertificate struct {
	pulumi.CustomResourceState

	// The ID of the GA instance.
	AcceleratorId pulumi.StringOutput `pulumi:"acceleratorId"`
	// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
}

// NewAdditionalCertificate registers a new resource with the given unique name, arguments, and options.
func NewAdditionalCertificate(ctx *pulumi.Context,
	name string, args *AdditionalCertificateArgs, opts ...pulumi.ResourceOption) (*AdditionalCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceleratorId == nil {
		return nil, errors.New("invalid value for required argument 'AcceleratorId'")
	}
	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdditionalCertificate
	err := ctx.RegisterResource("alicloud:ga/additionalCertificate:AdditionalCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdditionalCertificate gets an existing AdditionalCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdditionalCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdditionalCertificateState, opts ...pulumi.ResourceOption) (*AdditionalCertificate, error) {
	var resource AdditionalCertificate
	err := ctx.ReadResource("alicloud:ga/additionalCertificate:AdditionalCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdditionalCertificate resources.
type additionalCertificateState struct {
	// The ID of the GA instance.
	AcceleratorId *string `pulumi:"acceleratorId"`
	// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
	CertificateId *string `pulumi:"certificateId"`
	// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
	Domain *string `pulumi:"domain"`
	// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
	ListenerId *string `pulumi:"listenerId"`
}

type AdditionalCertificateState struct {
	// The ID of the GA instance.
	AcceleratorId pulumi.StringPtrInput
	// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
	CertificateId pulumi.StringPtrInput
	// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
	Domain pulumi.StringPtrInput
	// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
	ListenerId pulumi.StringPtrInput
}

func (AdditionalCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*additionalCertificateState)(nil)).Elem()
}

type additionalCertificateArgs struct {
	// The ID of the GA instance.
	AcceleratorId string `pulumi:"acceleratorId"`
	// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
	CertificateId string `pulumi:"certificateId"`
	// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
	Domain string `pulumi:"domain"`
	// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
	ListenerId string `pulumi:"listenerId"`
}

// The set of arguments for constructing a AdditionalCertificate resource.
type AdditionalCertificateArgs struct {
	// The ID of the GA instance.
	AcceleratorId pulumi.StringInput
	// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
	CertificateId pulumi.StringInput
	// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
	Domain pulumi.StringInput
	// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
	ListenerId pulumi.StringInput
}

func (AdditionalCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*additionalCertificateArgs)(nil)).Elem()
}

type AdditionalCertificateInput interface {
	pulumi.Input

	ToAdditionalCertificateOutput() AdditionalCertificateOutput
	ToAdditionalCertificateOutputWithContext(ctx context.Context) AdditionalCertificateOutput
}

func (*AdditionalCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCertificate)(nil)).Elem()
}

func (i *AdditionalCertificate) ToAdditionalCertificateOutput() AdditionalCertificateOutput {
	return i.ToAdditionalCertificateOutputWithContext(context.Background())
}

func (i *AdditionalCertificate) ToAdditionalCertificateOutputWithContext(ctx context.Context) AdditionalCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCertificateOutput)
}

// AdditionalCertificateArrayInput is an input type that accepts AdditionalCertificateArray and AdditionalCertificateArrayOutput values.
// You can construct a concrete instance of `AdditionalCertificateArrayInput` via:
//
//	AdditionalCertificateArray{ AdditionalCertificateArgs{...} }
type AdditionalCertificateArrayInput interface {
	pulumi.Input

	ToAdditionalCertificateArrayOutput() AdditionalCertificateArrayOutput
	ToAdditionalCertificateArrayOutputWithContext(context.Context) AdditionalCertificateArrayOutput
}

type AdditionalCertificateArray []AdditionalCertificateInput

func (AdditionalCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdditionalCertificate)(nil)).Elem()
}

func (i AdditionalCertificateArray) ToAdditionalCertificateArrayOutput() AdditionalCertificateArrayOutput {
	return i.ToAdditionalCertificateArrayOutputWithContext(context.Background())
}

func (i AdditionalCertificateArray) ToAdditionalCertificateArrayOutputWithContext(ctx context.Context) AdditionalCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCertificateArrayOutput)
}

// AdditionalCertificateMapInput is an input type that accepts AdditionalCertificateMap and AdditionalCertificateMapOutput values.
// You can construct a concrete instance of `AdditionalCertificateMapInput` via:
//
//	AdditionalCertificateMap{ "key": AdditionalCertificateArgs{...} }
type AdditionalCertificateMapInput interface {
	pulumi.Input

	ToAdditionalCertificateMapOutput() AdditionalCertificateMapOutput
	ToAdditionalCertificateMapOutputWithContext(context.Context) AdditionalCertificateMapOutput
}

type AdditionalCertificateMap map[string]AdditionalCertificateInput

func (AdditionalCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdditionalCertificate)(nil)).Elem()
}

func (i AdditionalCertificateMap) ToAdditionalCertificateMapOutput() AdditionalCertificateMapOutput {
	return i.ToAdditionalCertificateMapOutputWithContext(context.Background())
}

func (i AdditionalCertificateMap) ToAdditionalCertificateMapOutputWithContext(ctx context.Context) AdditionalCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCertificateMapOutput)
}

type AdditionalCertificateOutput struct{ *pulumi.OutputState }

func (AdditionalCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCertificate)(nil)).Elem()
}

func (o AdditionalCertificateOutput) ToAdditionalCertificateOutput() AdditionalCertificateOutput {
	return o
}

func (o AdditionalCertificateOutput) ToAdditionalCertificateOutputWithContext(ctx context.Context) AdditionalCertificateOutput {
	return o
}

// The ID of the GA instance.
func (o AdditionalCertificateOutput) AcceleratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdditionalCertificate) pulumi.StringOutput { return v.AcceleratorId }).(pulumi.StringOutput)
}

// The Certificate ID. **NOTE:** From version 1.209.1, `certificateId` can be modified.
func (o AdditionalCertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdditionalCertificate) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The domain name specified by the certificate. **NOTE:** You can associate each domain name with only one additional certificate.
func (o AdditionalCertificateOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *AdditionalCertificate) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the listener. **NOTE:** Only HTTPS listeners support this parameter.
func (o AdditionalCertificateOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdditionalCertificate) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

type AdditionalCertificateArrayOutput struct{ *pulumi.OutputState }

func (AdditionalCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdditionalCertificate)(nil)).Elem()
}

func (o AdditionalCertificateArrayOutput) ToAdditionalCertificateArrayOutput() AdditionalCertificateArrayOutput {
	return o
}

func (o AdditionalCertificateArrayOutput) ToAdditionalCertificateArrayOutputWithContext(ctx context.Context) AdditionalCertificateArrayOutput {
	return o
}

func (o AdditionalCertificateArrayOutput) Index(i pulumi.IntInput) AdditionalCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdditionalCertificate {
		return vs[0].([]*AdditionalCertificate)[vs[1].(int)]
	}).(AdditionalCertificateOutput)
}

type AdditionalCertificateMapOutput struct{ *pulumi.OutputState }

func (AdditionalCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdditionalCertificate)(nil)).Elem()
}

func (o AdditionalCertificateMapOutput) ToAdditionalCertificateMapOutput() AdditionalCertificateMapOutput {
	return o
}

func (o AdditionalCertificateMapOutput) ToAdditionalCertificateMapOutputWithContext(ctx context.Context) AdditionalCertificateMapOutput {
	return o
}

func (o AdditionalCertificateMapOutput) MapIndex(k pulumi.StringInput) AdditionalCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdditionalCertificate {
		return vs[0].(map[string]*AdditionalCertificate)[vs[1].(string)]
	}).(AdditionalCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalCertificateInput)(nil)).Elem(), &AdditionalCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalCertificateArrayInput)(nil)).Elem(), AdditionalCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalCertificateMapInput)(nil)).Elem(), AdditionalCertificateMap{})
	pulumi.RegisterOutputType(AdditionalCertificateOutput{})
	pulumi.RegisterOutputType(AdditionalCertificateArrayOutput{})
	pulumi.RegisterOutputType(AdditionalCertificateMapOutput{})
}
