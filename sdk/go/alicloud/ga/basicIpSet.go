// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ga

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Global Accelerator (GA) Basic Ip Set resource.
//
// For information about Global Accelerator (GA) Basic Ip Set and how to use it, see [What is Basic Ip Set](https://www.alibabacloud.com/help/en/global-accelerator/latest/createbasicipset).
//
// > **NOTE:** Available in v1.194.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ga"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultBasicAccelerator, err := ga.NewBasicAccelerator(ctx, "defaultBasicAccelerator", &ga.BasicAcceleratorArgs{
//				Duration:             pulumi.Int(1),
//				PricingCycle:         pulumi.String("Month"),
//				BandwidthBillingType: pulumi.String("CDT"),
//				AutoPay:              pulumi.Bool(true),
//				AutoUseCoupon:        pulumi.String("true"),
//				AutoRenew:            pulumi.Bool(false),
//				AutoRenewDuration:    pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ga.NewBasicIpSet(ctx, "defaultBasicIpSet", &ga.BasicIpSetArgs{
//				AcceleratorId:      defaultBasicAccelerator.ID(),
//				AccelerateRegionId: pulumi.String("cn-hangzhou"),
//				IspType:            pulumi.String("BGP"),
//				Bandwidth:          pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Global Accelerator (GA) Basic Ip Set can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:ga/basicIpSet:BasicIpSet example <id>
//
// ```
type BasicIpSet struct {
	pulumi.CustomResourceState

	// The ID of the acceleration region.
	AccelerateRegionId pulumi.StringOutput `pulumi:"accelerateRegionId"`
	// The ID of the basic GA instance.
	AcceleratorId pulumi.StringOutput `pulumi:"acceleratorId"`
	// The bandwidth of the acceleration region. Unit: Mbit/s.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
	IspType pulumi.StringOutput `pulumi:"ispType"`
	// The status of the Basic Ip Set instance.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBasicIpSet registers a new resource with the given unique name, arguments, and options.
func NewBasicIpSet(ctx *pulumi.Context,
	name string, args *BasicIpSetArgs, opts ...pulumi.ResourceOption) (*BasicIpSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccelerateRegionId == nil {
		return nil, errors.New("invalid value for required argument 'AccelerateRegionId'")
	}
	if args.AcceleratorId == nil {
		return nil, errors.New("invalid value for required argument 'AcceleratorId'")
	}
	var resource BasicIpSet
	err := ctx.RegisterResource("alicloud:ga/basicIpSet:BasicIpSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasicIpSet gets an existing BasicIpSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasicIpSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BasicIpSetState, opts ...pulumi.ResourceOption) (*BasicIpSet, error) {
	var resource BasicIpSet
	err := ctx.ReadResource("alicloud:ga/basicIpSet:BasicIpSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BasicIpSet resources.
type basicIpSetState struct {
	// The ID of the acceleration region.
	AccelerateRegionId *string `pulumi:"accelerateRegionId"`
	// The ID of the basic GA instance.
	AcceleratorId *string `pulumi:"acceleratorId"`
	// The bandwidth of the acceleration region. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
	IspType *string `pulumi:"ispType"`
	// The status of the Basic Ip Set instance.
	Status *string `pulumi:"status"`
}

type BasicIpSetState struct {
	// The ID of the acceleration region.
	AccelerateRegionId pulumi.StringPtrInput
	// The ID of the basic GA instance.
	AcceleratorId pulumi.StringPtrInput
	// The bandwidth of the acceleration region. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
	IspType pulumi.StringPtrInput
	// The status of the Basic Ip Set instance.
	Status pulumi.StringPtrInput
}

func (BasicIpSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*basicIpSetState)(nil)).Elem()
}

type basicIpSetArgs struct {
	// The ID of the acceleration region.
	AccelerateRegionId string `pulumi:"accelerateRegionId"`
	// The ID of the basic GA instance.
	AcceleratorId string `pulumi:"acceleratorId"`
	// The bandwidth of the acceleration region. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
	IspType *string `pulumi:"ispType"`
}

// The set of arguments for constructing a BasicIpSet resource.
type BasicIpSetArgs struct {
	// The ID of the acceleration region.
	AccelerateRegionId pulumi.StringInput
	// The ID of the basic GA instance.
	AcceleratorId pulumi.StringInput
	// The bandwidth of the acceleration region. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
	IspType pulumi.StringPtrInput
}

func (BasicIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basicIpSetArgs)(nil)).Elem()
}

type BasicIpSetInput interface {
	pulumi.Input

	ToBasicIpSetOutput() BasicIpSetOutput
	ToBasicIpSetOutputWithContext(ctx context.Context) BasicIpSetOutput
}

func (*BasicIpSet) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicIpSet)(nil)).Elem()
}

func (i *BasicIpSet) ToBasicIpSetOutput() BasicIpSetOutput {
	return i.ToBasicIpSetOutputWithContext(context.Background())
}

func (i *BasicIpSet) ToBasicIpSetOutputWithContext(ctx context.Context) BasicIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicIpSetOutput)
}

// BasicIpSetArrayInput is an input type that accepts BasicIpSetArray and BasicIpSetArrayOutput values.
// You can construct a concrete instance of `BasicIpSetArrayInput` via:
//
//	BasicIpSetArray{ BasicIpSetArgs{...} }
type BasicIpSetArrayInput interface {
	pulumi.Input

	ToBasicIpSetArrayOutput() BasicIpSetArrayOutput
	ToBasicIpSetArrayOutputWithContext(context.Context) BasicIpSetArrayOutput
}

type BasicIpSetArray []BasicIpSetInput

func (BasicIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicIpSet)(nil)).Elem()
}

func (i BasicIpSetArray) ToBasicIpSetArrayOutput() BasicIpSetArrayOutput {
	return i.ToBasicIpSetArrayOutputWithContext(context.Background())
}

func (i BasicIpSetArray) ToBasicIpSetArrayOutputWithContext(ctx context.Context) BasicIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicIpSetArrayOutput)
}

// BasicIpSetMapInput is an input type that accepts BasicIpSetMap and BasicIpSetMapOutput values.
// You can construct a concrete instance of `BasicIpSetMapInput` via:
//
//	BasicIpSetMap{ "key": BasicIpSetArgs{...} }
type BasicIpSetMapInput interface {
	pulumi.Input

	ToBasicIpSetMapOutput() BasicIpSetMapOutput
	ToBasicIpSetMapOutputWithContext(context.Context) BasicIpSetMapOutput
}

type BasicIpSetMap map[string]BasicIpSetInput

func (BasicIpSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicIpSet)(nil)).Elem()
}

func (i BasicIpSetMap) ToBasicIpSetMapOutput() BasicIpSetMapOutput {
	return i.ToBasicIpSetMapOutputWithContext(context.Background())
}

func (i BasicIpSetMap) ToBasicIpSetMapOutputWithContext(ctx context.Context) BasicIpSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicIpSetMapOutput)
}

type BasicIpSetOutput struct{ *pulumi.OutputState }

func (BasicIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicIpSet)(nil)).Elem()
}

func (o BasicIpSetOutput) ToBasicIpSetOutput() BasicIpSetOutput {
	return o
}

func (o BasicIpSetOutput) ToBasicIpSetOutputWithContext(ctx context.Context) BasicIpSetOutput {
	return o
}

// The ID of the acceleration region.
func (o BasicIpSetOutput) AccelerateRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicIpSet) pulumi.StringOutput { return v.AccelerateRegionId }).(pulumi.StringOutput)
}

// The ID of the basic GA instance.
func (o BasicIpSetOutput) AcceleratorId() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicIpSet) pulumi.StringOutput { return v.AcceleratorId }).(pulumi.StringOutput)
}

// The bandwidth of the acceleration region. Unit: Mbit/s.
func (o BasicIpSetOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *BasicIpSet) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The line type of the elastic IP address (EIP) in the acceleration region. Default value: `BGP`. Valid values: `BGP`, `BGP_PRO`, `ChinaTelecom`, `ChinaUnicom`, `ChinaMobile`, `ChinaTelecom_L2`, `ChinaUnicom_L2`, `ChinaMobile_L2`.
func (o BasicIpSetOutput) IspType() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicIpSet) pulumi.StringOutput { return v.IspType }).(pulumi.StringOutput)
}

// The status of the Basic Ip Set instance.
func (o BasicIpSetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BasicIpSet) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BasicIpSetArrayOutput struct{ *pulumi.OutputState }

func (BasicIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasicIpSet)(nil)).Elem()
}

func (o BasicIpSetArrayOutput) ToBasicIpSetArrayOutput() BasicIpSetArrayOutput {
	return o
}

func (o BasicIpSetArrayOutput) ToBasicIpSetArrayOutputWithContext(ctx context.Context) BasicIpSetArrayOutput {
	return o
}

func (o BasicIpSetArrayOutput) Index(i pulumi.IntInput) BasicIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BasicIpSet {
		return vs[0].([]*BasicIpSet)[vs[1].(int)]
	}).(BasicIpSetOutput)
}

type BasicIpSetMapOutput struct{ *pulumi.OutputState }

func (BasicIpSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasicIpSet)(nil)).Elem()
}

func (o BasicIpSetMapOutput) ToBasicIpSetMapOutput() BasicIpSetMapOutput {
	return o
}

func (o BasicIpSetMapOutput) ToBasicIpSetMapOutputWithContext(ctx context.Context) BasicIpSetMapOutput {
	return o
}

func (o BasicIpSetMapOutput) MapIndex(k pulumi.StringInput) BasicIpSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BasicIpSet {
		return vs[0].(map[string]*BasicIpSet)[vs[1].(string)]
	}).(BasicIpSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicIpSetInput)(nil)).Elem(), &BasicIpSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicIpSetArrayInput)(nil)).Elem(), BasicIpSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicIpSetMapInput)(nil)).Elem(), BasicIpSetMap{})
	pulumi.RegisterOutputType(BasicIpSetOutput{})
	pulumi.RegisterOutputType(BasicIpSetArrayOutput{})
	pulumi.RegisterOutputType(BasicIpSetMapOutput{})
}
