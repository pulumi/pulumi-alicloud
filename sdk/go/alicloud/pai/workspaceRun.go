// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PAI Workspace Run resource.
//
// For information about PAI Workspace Run and how to use it, see [What is Run](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.236.0.
//
// ## Import
//
// PAI Workspace Run can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pai/workspaceRun:WorkspaceRun example <id>
// ```
type WorkspaceRun struct {
	pulumi.CustomResourceState

	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Resource attribute field of the experiment ID to which Run belongs
	ExperimentId pulumi.StringOutput `pulumi:"experimentId"`
	// The name of the resource
	RunName pulumi.StringPtrOutput `pulumi:"runName"`
	// Attribute Resource field representing the source task ID
	SourceId pulumi.StringPtrOutput `pulumi:"sourceId"`
	// Resource attribute fields representing the source type
	SourceType pulumi.StringPtrOutput `pulumi:"sourceType"`
}

// NewWorkspaceRun registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceRun(ctx *pulumi.Context,
	name string, args *WorkspaceRunArgs, opts ...pulumi.ResourceOption) (*WorkspaceRun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExperimentId == nil {
		return nil, errors.New("invalid value for required argument 'ExperimentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceRun
	err := ctx.RegisterResource("alicloud:pai/workspaceRun:WorkspaceRun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceRun gets an existing WorkspaceRun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceRun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceRunState, opts ...pulumi.ResourceOption) (*WorkspaceRun, error) {
	var resource WorkspaceRun
	err := ctx.ReadResource("alicloud:pai/workspaceRun:WorkspaceRun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceRun resources.
type workspaceRunState struct {
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Resource attribute field of the experiment ID to which Run belongs
	ExperimentId *string `pulumi:"experimentId"`
	// The name of the resource
	RunName *string `pulumi:"runName"`
	// Attribute Resource field representing the source task ID
	SourceId *string `pulumi:"sourceId"`
	// Resource attribute fields representing the source type
	SourceType *string `pulumi:"sourceType"`
}

type WorkspaceRunState struct {
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Resource attribute field of the experiment ID to which Run belongs
	ExperimentId pulumi.StringPtrInput
	// The name of the resource
	RunName pulumi.StringPtrInput
	// Attribute Resource field representing the source task ID
	SourceId pulumi.StringPtrInput
	// Resource attribute fields representing the source type
	SourceType pulumi.StringPtrInput
}

func (WorkspaceRunState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceRunState)(nil)).Elem()
}

type workspaceRunArgs struct {
	// Resource attribute field of the experiment ID to which Run belongs
	ExperimentId string `pulumi:"experimentId"`
	// The name of the resource
	RunName *string `pulumi:"runName"`
	// Attribute Resource field representing the source task ID
	SourceId *string `pulumi:"sourceId"`
	// Resource attribute fields representing the source type
	SourceType *string `pulumi:"sourceType"`
}

// The set of arguments for constructing a WorkspaceRun resource.
type WorkspaceRunArgs struct {
	// Resource attribute field of the experiment ID to which Run belongs
	ExperimentId pulumi.StringInput
	// The name of the resource
	RunName pulumi.StringPtrInput
	// Attribute Resource field representing the source task ID
	SourceId pulumi.StringPtrInput
	// Resource attribute fields representing the source type
	SourceType pulumi.StringPtrInput
}

func (WorkspaceRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceRunArgs)(nil)).Elem()
}

type WorkspaceRunInput interface {
	pulumi.Input

	ToWorkspaceRunOutput() WorkspaceRunOutput
	ToWorkspaceRunOutputWithContext(ctx context.Context) WorkspaceRunOutput
}

func (*WorkspaceRun) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceRun)(nil)).Elem()
}

func (i *WorkspaceRun) ToWorkspaceRunOutput() WorkspaceRunOutput {
	return i.ToWorkspaceRunOutputWithContext(context.Background())
}

func (i *WorkspaceRun) ToWorkspaceRunOutputWithContext(ctx context.Context) WorkspaceRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceRunOutput)
}

// WorkspaceRunArrayInput is an input type that accepts WorkspaceRunArray and WorkspaceRunArrayOutput values.
// You can construct a concrete instance of `WorkspaceRunArrayInput` via:
//
//	WorkspaceRunArray{ WorkspaceRunArgs{...} }
type WorkspaceRunArrayInput interface {
	pulumi.Input

	ToWorkspaceRunArrayOutput() WorkspaceRunArrayOutput
	ToWorkspaceRunArrayOutputWithContext(context.Context) WorkspaceRunArrayOutput
}

type WorkspaceRunArray []WorkspaceRunInput

func (WorkspaceRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceRun)(nil)).Elem()
}

func (i WorkspaceRunArray) ToWorkspaceRunArrayOutput() WorkspaceRunArrayOutput {
	return i.ToWorkspaceRunArrayOutputWithContext(context.Background())
}

func (i WorkspaceRunArray) ToWorkspaceRunArrayOutputWithContext(ctx context.Context) WorkspaceRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceRunArrayOutput)
}

// WorkspaceRunMapInput is an input type that accepts WorkspaceRunMap and WorkspaceRunMapOutput values.
// You can construct a concrete instance of `WorkspaceRunMapInput` via:
//
//	WorkspaceRunMap{ "key": WorkspaceRunArgs{...} }
type WorkspaceRunMapInput interface {
	pulumi.Input

	ToWorkspaceRunMapOutput() WorkspaceRunMapOutput
	ToWorkspaceRunMapOutputWithContext(context.Context) WorkspaceRunMapOutput
}

type WorkspaceRunMap map[string]WorkspaceRunInput

func (WorkspaceRunMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceRun)(nil)).Elem()
}

func (i WorkspaceRunMap) ToWorkspaceRunMapOutput() WorkspaceRunMapOutput {
	return i.ToWorkspaceRunMapOutputWithContext(context.Background())
}

func (i WorkspaceRunMap) ToWorkspaceRunMapOutputWithContext(ctx context.Context) WorkspaceRunMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceRunMapOutput)
}

type WorkspaceRunOutput struct{ *pulumi.OutputState }

func (WorkspaceRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceRun)(nil)).Elem()
}

func (o WorkspaceRunOutput) ToWorkspaceRunOutput() WorkspaceRunOutput {
	return o
}

func (o WorkspaceRunOutput) ToWorkspaceRunOutputWithContext(ctx context.Context) WorkspaceRunOutput {
	return o
}

// The creation time of the resource
func (o WorkspaceRunOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceRun) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource attribute field of the experiment ID to which Run belongs
func (o WorkspaceRunOutput) ExperimentId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceRun) pulumi.StringOutput { return v.ExperimentId }).(pulumi.StringOutput)
}

// The name of the resource
func (o WorkspaceRunOutput) RunName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceRun) pulumi.StringPtrOutput { return v.RunName }).(pulumi.StringPtrOutput)
}

// Attribute Resource field representing the source task ID
func (o WorkspaceRunOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceRun) pulumi.StringPtrOutput { return v.SourceId }).(pulumi.StringPtrOutput)
}

// Resource attribute fields representing the source type
func (o WorkspaceRunOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceRun) pulumi.StringPtrOutput { return v.SourceType }).(pulumi.StringPtrOutput)
}

type WorkspaceRunArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceRun)(nil)).Elem()
}

func (o WorkspaceRunArrayOutput) ToWorkspaceRunArrayOutput() WorkspaceRunArrayOutput {
	return o
}

func (o WorkspaceRunArrayOutput) ToWorkspaceRunArrayOutputWithContext(ctx context.Context) WorkspaceRunArrayOutput {
	return o
}

func (o WorkspaceRunArrayOutput) Index(i pulumi.IntInput) WorkspaceRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceRun {
		return vs[0].([]*WorkspaceRun)[vs[1].(int)]
	}).(WorkspaceRunOutput)
}

type WorkspaceRunMapOutput struct{ *pulumi.OutputState }

func (WorkspaceRunMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceRun)(nil)).Elem()
}

func (o WorkspaceRunMapOutput) ToWorkspaceRunMapOutput() WorkspaceRunMapOutput {
	return o
}

func (o WorkspaceRunMapOutput) ToWorkspaceRunMapOutputWithContext(ctx context.Context) WorkspaceRunMapOutput {
	return o
}

func (o WorkspaceRunMapOutput) MapIndex(k pulumi.StringInput) WorkspaceRunOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceRun {
		return vs[0].(map[string]*WorkspaceRun)[vs[1].(string)]
	}).(WorkspaceRunOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceRunInput)(nil)).Elem(), &WorkspaceRun{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceRunArrayInput)(nil)).Elem(), WorkspaceRunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceRunMapInput)(nil)).Elem(), WorkspaceRunMap{})
	pulumi.RegisterOutputType(WorkspaceRunOutput{})
	pulumi.RegisterOutputType(WorkspaceRunArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceRunMapOutput{})
}
