// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PAI Workspace Model resource.
//
// For information about PAI Workspace Model and how to use it, see [What is Model](https://www.alibabacloud.com/help/en/pai/developer-reference/api-aiworkspace-2021-02-04-createmodel).
//
// > **NOTE:** Available since v1.249.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/pai"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			defaultENuC6u, err := pai.NewWorkspaceWorkspace(ctx, "defaultENuC6u", &pai.WorkspaceWorkspaceArgs{
//				Description:   pulumi.String("156"),
//				DisplayName:   pulumi.String(name),
//				WorkspaceName: pulumi.Sprintf("%v_%v", name, _default.Result),
//				EnvTypes: pulumi.StringArray{
//					pulumi.String("prod"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pai.NewWorkspaceModel(ctx, "default", &pai.WorkspaceModelArgs{
//				Origin:        pulumi.String("Civitai"),
//				Task:          pulumi.String("text-to-image-synthesis"),
//				ModelName:     pulumi.String(name),
//				Accessibility: pulumi.String("PRIVATE"),
//				WorkspaceId:   defaultENuC6u.ID(),
//				ModelType:     pulumi.String("Checkpoint"),
//				Labels: pai.WorkspaceModelLabelArray{
//					&pai.WorkspaceModelLabelArgs{
//						Key:   pulumi.String("base_model"),
//						Value: pulumi.String("SD 1.5"),
//					},
//				},
//				OrderNumber: pulumi.Int(1),
//				ExtraInfo: pulumi.StringMap{
//					"test": pulumi.String("15"),
//				},
//				ModelDescription: pulumi.String("ModelDescription."),
//				ModelDoc:         pulumi.String("https://eas-***.oss-cn-hangzhou.aliyuncs.com/s**.safetensors"),
//				Domain:           pulumi.String("aigc"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PAI Workspace Model can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pai/workspaceModel:WorkspaceModel example <id>
// ```
type WorkspaceModel struct {
	pulumi.CustomResourceState

	// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
	// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
	// - `PUBLIC`: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringOutput `pulumi:"accessibility"`
	// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Other information about the model.
	ExtraInfo pulumi.StringMapOutput `pulumi:"extraInfo"`
	// A list of tags. See `labels` below.
	Labels WorkspaceModelLabelArrayOutput `pulumi:"labels"`
	// The model description, used to distinguish different models.
	ModelDescription pulumi.StringPtrOutput `pulumi:"modelDescription"`
	// The documentation of the model.
	ModelDoc pulumi.StringPtrOutput `pulumi:"modelDoc"`
	// The name of the model. The name must be 1 to 127 characters in length.
	ModelName pulumi.StringOutput `pulumi:"modelName"`
	// The model type. Example: Checkpoint or LoRA.
	ModelType pulumi.StringPtrOutput `pulumi:"modelType"`
	// The sequence number of the model. Can be used for custom sorting.
	OrderNumber pulumi.IntPtrOutput `pulumi:"orderNumber"`
	// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
	Origin pulumi.StringPtrOutput `pulumi:"origin"`
	// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
	Task pulumi.StringPtrOutput `pulumi:"task"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceModel registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceModel(ctx *pulumi.Context,
	name string, args *WorkspaceModelArgs, opts ...pulumi.ResourceOption) (*WorkspaceModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelName == nil {
		return nil, errors.New("invalid value for required argument 'ModelName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceModel
	err := ctx.RegisterResource("alicloud:pai/workspaceModel:WorkspaceModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceModel gets an existing WorkspaceModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceModelState, opts ...pulumi.ResourceOption) (*WorkspaceModel, error) {
	var resource WorkspaceModel
	err := ctx.ReadResource("alicloud:pai/workspaceModel:WorkspaceModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceModel resources.
type workspaceModelState struct {
	// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
	// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
	// - `PUBLIC`: In this workspace, it is visible to everyone.
	Accessibility *string `pulumi:"accessibility"`
	// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
	Domain *string `pulumi:"domain"`
	// Other information about the model.
	ExtraInfo map[string]string `pulumi:"extraInfo"`
	// A list of tags. See `labels` below.
	Labels []WorkspaceModelLabel `pulumi:"labels"`
	// The model description, used to distinguish different models.
	ModelDescription *string `pulumi:"modelDescription"`
	// The documentation of the model.
	ModelDoc *string `pulumi:"modelDoc"`
	// The name of the model. The name must be 1 to 127 characters in length.
	ModelName *string `pulumi:"modelName"`
	// The model type. Example: Checkpoint or LoRA.
	ModelType *string `pulumi:"modelType"`
	// The sequence number of the model. Can be used for custom sorting.
	OrderNumber *int `pulumi:"orderNumber"`
	// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
	Origin *string `pulumi:"origin"`
	// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
	Task *string `pulumi:"task"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceModelState struct {
	// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
	// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
	// - `PUBLIC`: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringPtrInput
	// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
	Domain pulumi.StringPtrInput
	// Other information about the model.
	ExtraInfo pulumi.StringMapInput
	// A list of tags. See `labels` below.
	Labels WorkspaceModelLabelArrayInput
	// The model description, used to distinguish different models.
	ModelDescription pulumi.StringPtrInput
	// The documentation of the model.
	ModelDoc pulumi.StringPtrInput
	// The name of the model. The name must be 1 to 127 characters in length.
	ModelName pulumi.StringPtrInput
	// The model type. Example: Checkpoint or LoRA.
	ModelType pulumi.StringPtrInput
	// The sequence number of the model. Can be used for custom sorting.
	OrderNumber pulumi.IntPtrInput
	// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
	Origin pulumi.StringPtrInput
	// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
	Task pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceModelState)(nil)).Elem()
}

type workspaceModelArgs struct {
	// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
	// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
	// - `PUBLIC`: In this workspace, it is visible to everyone.
	Accessibility *string `pulumi:"accessibility"`
	// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
	Domain *string `pulumi:"domain"`
	// Other information about the model.
	ExtraInfo map[string]string `pulumi:"extraInfo"`
	// A list of tags. See `labels` below.
	Labels []WorkspaceModelLabel `pulumi:"labels"`
	// The model description, used to distinguish different models.
	ModelDescription *string `pulumi:"modelDescription"`
	// The documentation of the model.
	ModelDoc *string `pulumi:"modelDoc"`
	// The name of the model. The name must be 1 to 127 characters in length.
	ModelName string `pulumi:"modelName"`
	// The model type. Example: Checkpoint or LoRA.
	ModelType *string `pulumi:"modelType"`
	// The sequence number of the model. Can be used for custom sorting.
	OrderNumber *int `pulumi:"orderNumber"`
	// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
	Origin *string `pulumi:"origin"`
	// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
	Task *string `pulumi:"task"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceModel resource.
type WorkspaceModelArgs struct {
	// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
	// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
	// - `PUBLIC`: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringPtrInput
	// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
	Domain pulumi.StringPtrInput
	// Other information about the model.
	ExtraInfo pulumi.StringMapInput
	// A list of tags. See `labels` below.
	Labels WorkspaceModelLabelArrayInput
	// The model description, used to distinguish different models.
	ModelDescription pulumi.StringPtrInput
	// The documentation of the model.
	ModelDoc pulumi.StringPtrInput
	// The name of the model. The name must be 1 to 127 characters in length.
	ModelName pulumi.StringInput
	// The model type. Example: Checkpoint or LoRA.
	ModelType pulumi.StringPtrInput
	// The sequence number of the model. Can be used for custom sorting.
	OrderNumber pulumi.IntPtrInput
	// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
	Origin pulumi.StringPtrInput
	// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
	Task pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceModelArgs)(nil)).Elem()
}

type WorkspaceModelInput interface {
	pulumi.Input

	ToWorkspaceModelOutput() WorkspaceModelOutput
	ToWorkspaceModelOutputWithContext(ctx context.Context) WorkspaceModelOutput
}

func (*WorkspaceModel) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceModel)(nil)).Elem()
}

func (i *WorkspaceModel) ToWorkspaceModelOutput() WorkspaceModelOutput {
	return i.ToWorkspaceModelOutputWithContext(context.Background())
}

func (i *WorkspaceModel) ToWorkspaceModelOutputWithContext(ctx context.Context) WorkspaceModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceModelOutput)
}

// WorkspaceModelArrayInput is an input type that accepts WorkspaceModelArray and WorkspaceModelArrayOutput values.
// You can construct a concrete instance of `WorkspaceModelArrayInput` via:
//
//	WorkspaceModelArray{ WorkspaceModelArgs{...} }
type WorkspaceModelArrayInput interface {
	pulumi.Input

	ToWorkspaceModelArrayOutput() WorkspaceModelArrayOutput
	ToWorkspaceModelArrayOutputWithContext(context.Context) WorkspaceModelArrayOutput
}

type WorkspaceModelArray []WorkspaceModelInput

func (WorkspaceModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceModel)(nil)).Elem()
}

func (i WorkspaceModelArray) ToWorkspaceModelArrayOutput() WorkspaceModelArrayOutput {
	return i.ToWorkspaceModelArrayOutputWithContext(context.Background())
}

func (i WorkspaceModelArray) ToWorkspaceModelArrayOutputWithContext(ctx context.Context) WorkspaceModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceModelArrayOutput)
}

// WorkspaceModelMapInput is an input type that accepts WorkspaceModelMap and WorkspaceModelMapOutput values.
// You can construct a concrete instance of `WorkspaceModelMapInput` via:
//
//	WorkspaceModelMap{ "key": WorkspaceModelArgs{...} }
type WorkspaceModelMapInput interface {
	pulumi.Input

	ToWorkspaceModelMapOutput() WorkspaceModelMapOutput
	ToWorkspaceModelMapOutputWithContext(context.Context) WorkspaceModelMapOutput
}

type WorkspaceModelMap map[string]WorkspaceModelInput

func (WorkspaceModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceModel)(nil)).Elem()
}

func (i WorkspaceModelMap) ToWorkspaceModelMapOutput() WorkspaceModelMapOutput {
	return i.ToWorkspaceModelMapOutputWithContext(context.Background())
}

func (i WorkspaceModelMap) ToWorkspaceModelMapOutputWithContext(ctx context.Context) WorkspaceModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceModelMapOutput)
}

type WorkspaceModelOutput struct{ *pulumi.OutputState }

func (WorkspaceModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceModel)(nil)).Elem()
}

func (o WorkspaceModelOutput) ToWorkspaceModelOutput() WorkspaceModelOutput {
	return o
}

func (o WorkspaceModelOutput) ToWorkspaceModelOutputWithContext(ctx context.Context) WorkspaceModelOutput {
	return o
}

// The visibility of the model in the workspace. Default value: `PRIVATE`. Valid values:
// - `PRIVATE`: In this workspace, it is only visible to you and the administrator.
// - `PUBLIC`: In this workspace, it is visible to everyone.
func (o WorkspaceModelOutput) Accessibility() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringOutput { return v.Accessibility }).(pulumi.StringOutput)
}

// The domain of the model. Describe the domain in which the model solves the problem. For example: nlp (natural language processing), cv (computer vision), etc.
func (o WorkspaceModelOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// Other information about the model.
func (o WorkspaceModelOutput) ExtraInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringMapOutput { return v.ExtraInfo }).(pulumi.StringMapOutput)
}

// A list of tags. See `labels` below.
func (o WorkspaceModelOutput) Labels() WorkspaceModelLabelArrayOutput {
	return o.ApplyT(func(v *WorkspaceModel) WorkspaceModelLabelArrayOutput { return v.Labels }).(WorkspaceModelLabelArrayOutput)
}

// The model description, used to distinguish different models.
func (o WorkspaceModelOutput) ModelDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.ModelDescription }).(pulumi.StringPtrOutput)
}

// The documentation of the model.
func (o WorkspaceModelOutput) ModelDoc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.ModelDoc }).(pulumi.StringPtrOutput)
}

// The name of the model. The name must be 1 to 127 characters in length.
func (o WorkspaceModelOutput) ModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringOutput { return v.ModelName }).(pulumi.StringOutput)
}

// The model type. Example: Checkpoint or LoRA.
func (o WorkspaceModelOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The sequence number of the model. Can be used for custom sorting.
func (o WorkspaceModelOutput) OrderNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.IntPtrOutput { return v.OrderNumber }).(pulumi.IntPtrOutput)
}

// The source of the model. The community or organization to which the source model belongs, such as ModelScope or HuggingFace.
func (o WorkspaceModelOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.Origin }).(pulumi.StringPtrOutput)
}

// The task of the model. Describes the specific problem that the model solves. Example: text-classification.
func (o WorkspaceModelOutput) Task() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringPtrOutput { return v.Task }).(pulumi.StringPtrOutput)
}

// The ID of the workspace.
func (o WorkspaceModelOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceModel) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceModelArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceModel)(nil)).Elem()
}

func (o WorkspaceModelArrayOutput) ToWorkspaceModelArrayOutput() WorkspaceModelArrayOutput {
	return o
}

func (o WorkspaceModelArrayOutput) ToWorkspaceModelArrayOutputWithContext(ctx context.Context) WorkspaceModelArrayOutput {
	return o
}

func (o WorkspaceModelArrayOutput) Index(i pulumi.IntInput) WorkspaceModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceModel {
		return vs[0].([]*WorkspaceModel)[vs[1].(int)]
	}).(WorkspaceModelOutput)
}

type WorkspaceModelMapOutput struct{ *pulumi.OutputState }

func (WorkspaceModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceModel)(nil)).Elem()
}

func (o WorkspaceModelMapOutput) ToWorkspaceModelMapOutput() WorkspaceModelMapOutput {
	return o
}

func (o WorkspaceModelMapOutput) ToWorkspaceModelMapOutputWithContext(ctx context.Context) WorkspaceModelMapOutput {
	return o
}

func (o WorkspaceModelMapOutput) MapIndex(k pulumi.StringInput) WorkspaceModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceModel {
		return vs[0].(map[string]*WorkspaceModel)[vs[1].(string)]
	}).(WorkspaceModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceModelInput)(nil)).Elem(), &WorkspaceModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceModelArrayInput)(nil)).Elem(), WorkspaceModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceModelMapInput)(nil)).Elem(), WorkspaceModelMap{})
	pulumi.RegisterOutputType(WorkspaceModelOutput{})
	pulumi.RegisterOutputType(WorkspaceModelArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceModelMapOutput{})
}
