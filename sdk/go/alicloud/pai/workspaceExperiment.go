// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PAI Workspace Experiment resource.
//
// For information about PAI Workspace Experiment and how to use it, see [What is Experiment](https://next.api.alibabacloud.com/document/AIWorkSpace/2021-02-04/CreateExperiment).
//
// > **NOTE:** Available since v1.236.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/pai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultDI9fsL, err := pai.NewWorkspaceWorkspace(ctx, "defaultDI9fsL", &pai.WorkspaceWorkspaceArgs{
//				Description:   pulumi.String(name),
//				DisplayName:   pulumi.String(name),
//				WorkspaceName: pulumi.String(name),
//				EnvTypes: pulumi.StringArray{
//					pulumi.String("prod"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pai.NewWorkspaceExperiment(ctx, "default", &pai.WorkspaceExperimentArgs{
//				Accessibility:  pulumi.String("PRIVATE"),
//				ArtifactUri:    pulumi.String("oss://yyt-409262.oss-cn-hangzhou.aliyuncs.com/example/"),
//				ExperimentName: pulumi.String(name),
//				WorkspaceId:    defaultDI9fsL.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PAI Workspace Experiment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pai/workspaceExperiment:WorkspaceExperiment example <id>
// ```
type WorkspaceExperiment struct {
	pulumi.CustomResourceState

	// Experimental Visibility
	Accessibility pulumi.StringOutput `pulumi:"accessibility"`
	// ArtifactUri is default OSS storage path of the output of trials in the experiment
	ArtifactUri pulumi.StringOutput `pulumi:"artifactUri"`
	// GmtCreateTime is time when this entity is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Name is the name of the experiment, unique in a namespace
	ExperimentName pulumi.StringOutput `pulumi:"experimentName"`
	// WorkspaceId is the workspace id which contains the experiment
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceExperiment registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceExperiment(ctx *pulumi.Context,
	name string, args *WorkspaceExperimentArgs, opts ...pulumi.ResourceOption) (*WorkspaceExperiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactUri == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactUri'")
	}
	if args.ExperimentName == nil {
		return nil, errors.New("invalid value for required argument 'ExperimentName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceExperiment
	err := ctx.RegisterResource("alicloud:pai/workspaceExperiment:WorkspaceExperiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceExperiment gets an existing WorkspaceExperiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceExperimentState, opts ...pulumi.ResourceOption) (*WorkspaceExperiment, error) {
	var resource WorkspaceExperiment
	err := ctx.ReadResource("alicloud:pai/workspaceExperiment:WorkspaceExperiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceExperiment resources.
type workspaceExperimentState struct {
	// Experimental Visibility
	Accessibility *string `pulumi:"accessibility"`
	// ArtifactUri is default OSS storage path of the output of trials in the experiment
	ArtifactUri *string `pulumi:"artifactUri"`
	// GmtCreateTime is time when this entity is created.
	CreateTime *string `pulumi:"createTime"`
	// Name is the name of the experiment, unique in a namespace
	ExperimentName *string `pulumi:"experimentName"`
	// WorkspaceId is the workspace id which contains the experiment
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceExperimentState struct {
	// Experimental Visibility
	Accessibility pulumi.StringPtrInput
	// ArtifactUri is default OSS storage path of the output of trials in the experiment
	ArtifactUri pulumi.StringPtrInput
	// GmtCreateTime is time when this entity is created.
	CreateTime pulumi.StringPtrInput
	// Name is the name of the experiment, unique in a namespace
	ExperimentName pulumi.StringPtrInput
	// WorkspaceId is the workspace id which contains the experiment
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceExperimentState)(nil)).Elem()
}

type workspaceExperimentArgs struct {
	// Experimental Visibility
	Accessibility *string `pulumi:"accessibility"`
	// ArtifactUri is default OSS storage path of the output of trials in the experiment
	ArtifactUri string `pulumi:"artifactUri"`
	// Name is the name of the experiment, unique in a namespace
	ExperimentName string `pulumi:"experimentName"`
	// WorkspaceId is the workspace id which contains the experiment
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceExperiment resource.
type WorkspaceExperimentArgs struct {
	// Experimental Visibility
	Accessibility pulumi.StringPtrInput
	// ArtifactUri is default OSS storage path of the output of trials in the experiment
	ArtifactUri pulumi.StringInput
	// Name is the name of the experiment, unique in a namespace
	ExperimentName pulumi.StringInput
	// WorkspaceId is the workspace id which contains the experiment
	WorkspaceId pulumi.StringInput
}

func (WorkspaceExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceExperimentArgs)(nil)).Elem()
}

type WorkspaceExperimentInput interface {
	pulumi.Input

	ToWorkspaceExperimentOutput() WorkspaceExperimentOutput
	ToWorkspaceExperimentOutputWithContext(ctx context.Context) WorkspaceExperimentOutput
}

func (*WorkspaceExperiment) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceExperiment)(nil)).Elem()
}

func (i *WorkspaceExperiment) ToWorkspaceExperimentOutput() WorkspaceExperimentOutput {
	return i.ToWorkspaceExperimentOutputWithContext(context.Background())
}

func (i *WorkspaceExperiment) ToWorkspaceExperimentOutputWithContext(ctx context.Context) WorkspaceExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceExperimentOutput)
}

// WorkspaceExperimentArrayInput is an input type that accepts WorkspaceExperimentArray and WorkspaceExperimentArrayOutput values.
// You can construct a concrete instance of `WorkspaceExperimentArrayInput` via:
//
//	WorkspaceExperimentArray{ WorkspaceExperimentArgs{...} }
type WorkspaceExperimentArrayInput interface {
	pulumi.Input

	ToWorkspaceExperimentArrayOutput() WorkspaceExperimentArrayOutput
	ToWorkspaceExperimentArrayOutputWithContext(context.Context) WorkspaceExperimentArrayOutput
}

type WorkspaceExperimentArray []WorkspaceExperimentInput

func (WorkspaceExperimentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceExperiment)(nil)).Elem()
}

func (i WorkspaceExperimentArray) ToWorkspaceExperimentArrayOutput() WorkspaceExperimentArrayOutput {
	return i.ToWorkspaceExperimentArrayOutputWithContext(context.Background())
}

func (i WorkspaceExperimentArray) ToWorkspaceExperimentArrayOutputWithContext(ctx context.Context) WorkspaceExperimentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceExperimentArrayOutput)
}

// WorkspaceExperimentMapInput is an input type that accepts WorkspaceExperimentMap and WorkspaceExperimentMapOutput values.
// You can construct a concrete instance of `WorkspaceExperimentMapInput` via:
//
//	WorkspaceExperimentMap{ "key": WorkspaceExperimentArgs{...} }
type WorkspaceExperimentMapInput interface {
	pulumi.Input

	ToWorkspaceExperimentMapOutput() WorkspaceExperimentMapOutput
	ToWorkspaceExperimentMapOutputWithContext(context.Context) WorkspaceExperimentMapOutput
}

type WorkspaceExperimentMap map[string]WorkspaceExperimentInput

func (WorkspaceExperimentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceExperiment)(nil)).Elem()
}

func (i WorkspaceExperimentMap) ToWorkspaceExperimentMapOutput() WorkspaceExperimentMapOutput {
	return i.ToWorkspaceExperimentMapOutputWithContext(context.Background())
}

func (i WorkspaceExperimentMap) ToWorkspaceExperimentMapOutputWithContext(ctx context.Context) WorkspaceExperimentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceExperimentMapOutput)
}

type WorkspaceExperimentOutput struct{ *pulumi.OutputState }

func (WorkspaceExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceExperiment)(nil)).Elem()
}

func (o WorkspaceExperimentOutput) ToWorkspaceExperimentOutput() WorkspaceExperimentOutput {
	return o
}

func (o WorkspaceExperimentOutput) ToWorkspaceExperimentOutputWithContext(ctx context.Context) WorkspaceExperimentOutput {
	return o
}

// Experimental Visibility
func (o WorkspaceExperimentOutput) Accessibility() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceExperiment) pulumi.StringOutput { return v.Accessibility }).(pulumi.StringOutput)
}

// ArtifactUri is default OSS storage path of the output of trials in the experiment
func (o WorkspaceExperimentOutput) ArtifactUri() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceExperiment) pulumi.StringOutput { return v.ArtifactUri }).(pulumi.StringOutput)
}

// GmtCreateTime is time when this entity is created.
func (o WorkspaceExperimentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceExperiment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Name is the name of the experiment, unique in a namespace
func (o WorkspaceExperimentOutput) ExperimentName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceExperiment) pulumi.StringOutput { return v.ExperimentName }).(pulumi.StringOutput)
}

// WorkspaceId is the workspace id which contains the experiment
func (o WorkspaceExperimentOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceExperiment) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceExperimentArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceExperimentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceExperiment)(nil)).Elem()
}

func (o WorkspaceExperimentArrayOutput) ToWorkspaceExperimentArrayOutput() WorkspaceExperimentArrayOutput {
	return o
}

func (o WorkspaceExperimentArrayOutput) ToWorkspaceExperimentArrayOutputWithContext(ctx context.Context) WorkspaceExperimentArrayOutput {
	return o
}

func (o WorkspaceExperimentArrayOutput) Index(i pulumi.IntInput) WorkspaceExperimentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceExperiment {
		return vs[0].([]*WorkspaceExperiment)[vs[1].(int)]
	}).(WorkspaceExperimentOutput)
}

type WorkspaceExperimentMapOutput struct{ *pulumi.OutputState }

func (WorkspaceExperimentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceExperiment)(nil)).Elem()
}

func (o WorkspaceExperimentMapOutput) ToWorkspaceExperimentMapOutput() WorkspaceExperimentMapOutput {
	return o
}

func (o WorkspaceExperimentMapOutput) ToWorkspaceExperimentMapOutputWithContext(ctx context.Context) WorkspaceExperimentMapOutput {
	return o
}

func (o WorkspaceExperimentMapOutput) MapIndex(k pulumi.StringInput) WorkspaceExperimentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceExperiment {
		return vs[0].(map[string]*WorkspaceExperiment)[vs[1].(string)]
	}).(WorkspaceExperimentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceExperimentInput)(nil)).Elem(), &WorkspaceExperiment{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceExperimentArrayInput)(nil)).Elem(), WorkspaceExperimentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceExperimentMapInput)(nil)).Elem(), WorkspaceExperimentMap{})
	pulumi.RegisterOutputType(WorkspaceExperimentOutput{})
	pulumi.RegisterOutputType(WorkspaceExperimentArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceExperimentMapOutput{})
}
