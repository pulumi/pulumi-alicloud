// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PAI Workspace Workspace resource.
//
// For information about PAI Workspace Workspace and how to use it, see [What is Workspace](https://next.api.alibabacloud.com/document/AIWorkSpace/2021-02-04/CreateWorkspace).
//
// > **NOTE:** Available since v1.233.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/pai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := pai.NewWorkspaceWorkspace(ctx, "default", &pai.WorkspaceWorkspaceArgs{
//				Description:   pulumi.String(name),
//				WorkspaceName: pulumi.String(name),
//				DisplayName:   pulumi.String(name),
//				EnvTypes: pulumi.StringArray{
//					pulumi.String("prod"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PAI Workspace Workspace can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pai/workspaceWorkspace:WorkspaceWorkspace example <id>
// ```
type WorkspaceWorkspace struct {
	pulumi.CustomResourceState

	// The UTC time when the workspace is created. The time format is ISO8601.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Workspace description, no more than 80 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Environments contained in the workspace:
	// - Simple mode only production environment (prod).
	// - Standard mode includes development environment (dev) and production environment (prod).
	EnvTypes pulumi.StringArrayOutput `pulumi:"envTypes"`
	// Workspace state, possible values:
	Status pulumi.StringOutput `pulumi:"status"`
	// The workspace name. The format is as follows:
	// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
	// - Must start with a large or small letter.
	// - Unique in the current region.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`
}

// NewWorkspaceWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceWorkspaceArgs, opts ...pulumi.ResourceOption) (*WorkspaceWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.EnvTypes == nil {
		return nil, errors.New("invalid value for required argument 'EnvTypes'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceWorkspace
	err := ctx.RegisterResource("alicloud:pai/workspaceWorkspace:WorkspaceWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceWorkspace gets an existing WorkspaceWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceWorkspaceState, opts ...pulumi.ResourceOption) (*WorkspaceWorkspace, error) {
	var resource WorkspaceWorkspace
	err := ctx.ReadResource("alicloud:pai/workspaceWorkspace:WorkspaceWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceWorkspace resources.
type workspaceWorkspaceState struct {
	// The UTC time when the workspace is created. The time format is ISO8601.
	CreateTime *string `pulumi:"createTime"`
	// Workspace description, no more than 80 characters.
	Description *string `pulumi:"description"`
	// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
	DisplayName *string `pulumi:"displayName"`
	// Environments contained in the workspace:
	// - Simple mode only production environment (prod).
	// - Standard mode includes development environment (dev) and production environment (prod).
	EnvTypes []string `pulumi:"envTypes"`
	// Workspace state, possible values:
	Status *string `pulumi:"status"`
	// The workspace name. The format is as follows:
	// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
	// - Must start with a large or small letter.
	// - Unique in the current region.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type WorkspaceWorkspaceState struct {
	// The UTC time when the workspace is created. The time format is ISO8601.
	CreateTime pulumi.StringPtrInput
	// Workspace description, no more than 80 characters.
	Description pulumi.StringPtrInput
	// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
	DisplayName pulumi.StringPtrInput
	// Environments contained in the workspace:
	// - Simple mode only production environment (prod).
	// - Standard mode includes development environment (dev) and production environment (prod).
	EnvTypes pulumi.StringArrayInput
	// Workspace state, possible values:
	Status pulumi.StringPtrInput
	// The workspace name. The format is as follows:
	// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
	// - Must start with a large or small letter.
	// - Unique in the current region.
	WorkspaceName pulumi.StringPtrInput
}

func (WorkspaceWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceWorkspaceState)(nil)).Elem()
}

type workspaceWorkspaceArgs struct {
	// Workspace description, no more than 80 characters.
	Description string `pulumi:"description"`
	// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
	DisplayName *string `pulumi:"displayName"`
	// Environments contained in the workspace:
	// - Simple mode only production environment (prod).
	// - Standard mode includes development environment (dev) and production environment (prod).
	EnvTypes []string `pulumi:"envTypes"`
	// The workspace name. The format is as follows:
	// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
	// - Must start with a large or small letter.
	// - Unique in the current region.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a WorkspaceWorkspace resource.
type WorkspaceWorkspaceArgs struct {
	// Workspace description, no more than 80 characters.
	Description pulumi.StringInput
	// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
	DisplayName pulumi.StringPtrInput
	// Environments contained in the workspace:
	// - Simple mode only production environment (prod).
	// - Standard mode includes development environment (dev) and production environment (prod).
	EnvTypes pulumi.StringArrayInput
	// The workspace name. The format is as follows:
	// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
	// - Must start with a large or small letter.
	// - Unique in the current region.
	WorkspaceName pulumi.StringInput
}

func (WorkspaceWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceWorkspaceArgs)(nil)).Elem()
}

type WorkspaceWorkspaceInput interface {
	pulumi.Input

	ToWorkspaceWorkspaceOutput() WorkspaceWorkspaceOutput
	ToWorkspaceWorkspaceOutputWithContext(ctx context.Context) WorkspaceWorkspaceOutput
}

func (*WorkspaceWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceWorkspace)(nil)).Elem()
}

func (i *WorkspaceWorkspace) ToWorkspaceWorkspaceOutput() WorkspaceWorkspaceOutput {
	return i.ToWorkspaceWorkspaceOutputWithContext(context.Background())
}

func (i *WorkspaceWorkspace) ToWorkspaceWorkspaceOutputWithContext(ctx context.Context) WorkspaceWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceWorkspaceOutput)
}

// WorkspaceWorkspaceArrayInput is an input type that accepts WorkspaceWorkspaceArray and WorkspaceWorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceWorkspaceArrayInput` via:
//
//	WorkspaceWorkspaceArray{ WorkspaceWorkspaceArgs{...} }
type WorkspaceWorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceWorkspaceArrayOutput() WorkspaceWorkspaceArrayOutput
	ToWorkspaceWorkspaceArrayOutputWithContext(context.Context) WorkspaceWorkspaceArrayOutput
}

type WorkspaceWorkspaceArray []WorkspaceWorkspaceInput

func (WorkspaceWorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceWorkspace)(nil)).Elem()
}

func (i WorkspaceWorkspaceArray) ToWorkspaceWorkspaceArrayOutput() WorkspaceWorkspaceArrayOutput {
	return i.ToWorkspaceWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceWorkspaceArray) ToWorkspaceWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceWorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceWorkspaceArrayOutput)
}

// WorkspaceWorkspaceMapInput is an input type that accepts WorkspaceWorkspaceMap and WorkspaceWorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceWorkspaceMapInput` via:
//
//	WorkspaceWorkspaceMap{ "key": WorkspaceWorkspaceArgs{...} }
type WorkspaceWorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceWorkspaceMapOutput() WorkspaceWorkspaceMapOutput
	ToWorkspaceWorkspaceMapOutputWithContext(context.Context) WorkspaceWorkspaceMapOutput
}

type WorkspaceWorkspaceMap map[string]WorkspaceWorkspaceInput

func (WorkspaceWorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceWorkspace)(nil)).Elem()
}

func (i WorkspaceWorkspaceMap) ToWorkspaceWorkspaceMapOutput() WorkspaceWorkspaceMapOutput {
	return i.ToWorkspaceWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceWorkspaceMap) ToWorkspaceWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceWorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceWorkspaceMapOutput)
}

type WorkspaceWorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceWorkspace)(nil)).Elem()
}

func (o WorkspaceWorkspaceOutput) ToWorkspaceWorkspaceOutput() WorkspaceWorkspaceOutput {
	return o
}

func (o WorkspaceWorkspaceOutput) ToWorkspaceWorkspaceOutputWithContext(ctx context.Context) WorkspaceWorkspaceOutput {
	return o
}

// The UTC time when the workspace is created. The time format is ISO8601.
func (o WorkspaceWorkspaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Workspace description, no more than 80 characters.
func (o WorkspaceWorkspaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// It is recommended that you name the workspace based on the business attribute to identify the purpose of the workspace. If not configured, the default value is the workspace name.
func (o WorkspaceWorkspaceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Environments contained in the workspace:
// - Simple mode only production environment (prod).
// - Standard mode includes development environment (dev) and production environment (prod).
func (o WorkspaceWorkspaceOutput) EnvTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringArrayOutput { return v.EnvTypes }).(pulumi.StringArrayOutput)
}

// Workspace state, possible values:
func (o WorkspaceWorkspaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The workspace name. The format is as follows:
// - 3 to 23 characters in length and can contain letters, underscores, or numbers.
// - Must start with a large or small letter.
// - Unique in the current region.
func (o WorkspaceWorkspaceOutput) WorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceWorkspace) pulumi.StringOutput { return v.WorkspaceName }).(pulumi.StringOutput)
}

type WorkspaceWorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceWorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceWorkspace)(nil)).Elem()
}

func (o WorkspaceWorkspaceArrayOutput) ToWorkspaceWorkspaceArrayOutput() WorkspaceWorkspaceArrayOutput {
	return o
}

func (o WorkspaceWorkspaceArrayOutput) ToWorkspaceWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceWorkspaceArrayOutput {
	return o
}

func (o WorkspaceWorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceWorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceWorkspace {
		return vs[0].([]*WorkspaceWorkspace)[vs[1].(int)]
	}).(WorkspaceWorkspaceOutput)
}

type WorkspaceWorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceWorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceWorkspace)(nil)).Elem()
}

func (o WorkspaceWorkspaceMapOutput) ToWorkspaceWorkspaceMapOutput() WorkspaceWorkspaceMapOutput {
	return o
}

func (o WorkspaceWorkspaceMapOutput) ToWorkspaceWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceWorkspaceMapOutput {
	return o
}

func (o WorkspaceWorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceWorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceWorkspace {
		return vs[0].(map[string]*WorkspaceWorkspace)[vs[1].(string)]
	}).(WorkspaceWorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceWorkspaceInput)(nil)).Elem(), &WorkspaceWorkspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceWorkspaceArrayInput)(nil)).Elem(), WorkspaceWorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceWorkspaceMapInput)(nil)).Elem(), WorkspaceWorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceWorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceWorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceWorkspaceMapOutput{})
}
