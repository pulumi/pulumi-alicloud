// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PAI Workspace Code Source resource.
//
// For information about PAI Workspace Code Source and how to use it, see [What is Code Source](https://next.api.alibabacloud.com/document/AIWorkSpace/2021-02-04/CreateCodeSource).
//
// > **NOTE:** Available since v1.236.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/pai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultgklBnM, err := pai.NewWorkspaceWorkspace(ctx, "defaultgklBnM", &pai.WorkspaceWorkspaceArgs{
//				Description:   pulumi.String("for-pop-example"),
//				DisplayName:   pulumi.String("CodeSourceTest_1732796227"),
//				WorkspaceName: pulumi.String(name),
//				EnvTypes: pulumi.StringArray{
//					pulumi.String("prod"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pai.NewWorkspaceCodeSource(ctx, "default", &pai.WorkspaceCodeSourceArgs{
//				MountPath:           pulumi.String("/mnt/code/dir_01/"),
//				CodeRepo:            pulumi.String("https://github.com/mattn/go-sqlite3.git"),
//				Description:         pulumi.String("desc-01"),
//				CodeRepoAccessToken: pulumi.String("token-01"),
//				Accessibility:       pulumi.String("PRIVATE"),
//				DisplayName:         pulumi.String("codesource-example-01"),
//				WorkspaceId:         defaultgklBnM.ID(),
//				CodeBranch:          pulumi.String("master"),
//				CodeRepoUserName:    pulumi.String("user-01"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PAI Workspace Code Source can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pai/workspaceCodeSource:WorkspaceCodeSource example <id>
// ```
type WorkspaceCodeSource struct {
	pulumi.CustomResourceState

	// Visibility of the code configuration, possible values:
	// - PRIVATE: In this workspace, it is only visible to you and the administrator.
	// - PUBLIC: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringOutput `pulumi:"accessibility"`
	// Code repository branch.
	CodeBranch pulumi.StringPtrOutput `pulumi:"codeBranch"`
	// The code CommitId.
	CodeCommit pulumi.StringPtrOutput `pulumi:"codeCommit"`
	// Code repository address.
	CodeRepo pulumi.StringOutput `pulumi:"codeRepo"`
	// The Token used to access the code repository.
	CodeRepoAccessToken pulumi.StringPtrOutput `pulumi:"codeRepoAccessToken"`
	// The user name of the code repository.
	CodeRepoUserName pulumi.StringPtrOutput `pulumi:"codeRepoUserName"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A detailed description of the code configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Code source configuration name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The local Mount Directory of the code.
	MountPath pulumi.StringOutput `pulumi:"mountPath"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceCodeSource registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceCodeSource(ctx *pulumi.Context,
	name string, args *WorkspaceCodeSourceArgs, opts ...pulumi.ResourceOption) (*WorkspaceCodeSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accessibility == nil {
		return nil, errors.New("invalid value for required argument 'Accessibility'")
	}
	if args.CodeRepo == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepo'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MountPath == nil {
		return nil, errors.New("invalid value for required argument 'MountPath'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceCodeSource
	err := ctx.RegisterResource("alicloud:pai/workspaceCodeSource:WorkspaceCodeSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceCodeSource gets an existing WorkspaceCodeSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceCodeSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceCodeSourceState, opts ...pulumi.ResourceOption) (*WorkspaceCodeSource, error) {
	var resource WorkspaceCodeSource
	err := ctx.ReadResource("alicloud:pai/workspaceCodeSource:WorkspaceCodeSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceCodeSource resources.
type workspaceCodeSourceState struct {
	// Visibility of the code configuration, possible values:
	// - PRIVATE: In this workspace, it is only visible to you and the administrator.
	// - PUBLIC: In this workspace, it is visible to everyone.
	Accessibility *string `pulumi:"accessibility"`
	// Code repository branch.
	CodeBranch *string `pulumi:"codeBranch"`
	// The code CommitId.
	CodeCommit *string `pulumi:"codeCommit"`
	// Code repository address.
	CodeRepo *string `pulumi:"codeRepo"`
	// The Token used to access the code repository.
	CodeRepoAccessToken *string `pulumi:"codeRepoAccessToken"`
	// The user name of the code repository.
	CodeRepoUserName *string `pulumi:"codeRepoUserName"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// A detailed description of the code configuration.
	Description *string `pulumi:"description"`
	// Code source configuration name.
	DisplayName *string `pulumi:"displayName"`
	// The local Mount Directory of the code.
	MountPath *string `pulumi:"mountPath"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceCodeSourceState struct {
	// Visibility of the code configuration, possible values:
	// - PRIVATE: In this workspace, it is only visible to you and the administrator.
	// - PUBLIC: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringPtrInput
	// Code repository branch.
	CodeBranch pulumi.StringPtrInput
	// The code CommitId.
	CodeCommit pulumi.StringPtrInput
	// Code repository address.
	CodeRepo pulumi.StringPtrInput
	// The Token used to access the code repository.
	CodeRepoAccessToken pulumi.StringPtrInput
	// The user name of the code repository.
	CodeRepoUserName pulumi.StringPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// A detailed description of the code configuration.
	Description pulumi.StringPtrInput
	// Code source configuration name.
	DisplayName pulumi.StringPtrInput
	// The local Mount Directory of the code.
	MountPath pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceCodeSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCodeSourceState)(nil)).Elem()
}

type workspaceCodeSourceArgs struct {
	// Visibility of the code configuration, possible values:
	// - PRIVATE: In this workspace, it is only visible to you and the administrator.
	// - PUBLIC: In this workspace, it is visible to everyone.
	Accessibility string `pulumi:"accessibility"`
	// Code repository branch.
	CodeBranch *string `pulumi:"codeBranch"`
	// The code CommitId.
	CodeCommit *string `pulumi:"codeCommit"`
	// Code repository address.
	CodeRepo string `pulumi:"codeRepo"`
	// The Token used to access the code repository.
	CodeRepoAccessToken *string `pulumi:"codeRepoAccessToken"`
	// The user name of the code repository.
	CodeRepoUserName *string `pulumi:"codeRepoUserName"`
	// A detailed description of the code configuration.
	Description *string `pulumi:"description"`
	// Code source configuration name.
	DisplayName string `pulumi:"displayName"`
	// The local Mount Directory of the code.
	MountPath string `pulumi:"mountPath"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceCodeSource resource.
type WorkspaceCodeSourceArgs struct {
	// Visibility of the code configuration, possible values:
	// - PRIVATE: In this workspace, it is only visible to you and the administrator.
	// - PUBLIC: In this workspace, it is visible to everyone.
	Accessibility pulumi.StringInput
	// Code repository branch.
	CodeBranch pulumi.StringPtrInput
	// The code CommitId.
	CodeCommit pulumi.StringPtrInput
	// Code repository address.
	CodeRepo pulumi.StringInput
	// The Token used to access the code repository.
	CodeRepoAccessToken pulumi.StringPtrInput
	// The user name of the code repository.
	CodeRepoUserName pulumi.StringPtrInput
	// A detailed description of the code configuration.
	Description pulumi.StringPtrInput
	// Code source configuration name.
	DisplayName pulumi.StringInput
	// The local Mount Directory of the code.
	MountPath pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceCodeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCodeSourceArgs)(nil)).Elem()
}

type WorkspaceCodeSourceInput interface {
	pulumi.Input

	ToWorkspaceCodeSourceOutput() WorkspaceCodeSourceOutput
	ToWorkspaceCodeSourceOutputWithContext(ctx context.Context) WorkspaceCodeSourceOutput
}

func (*WorkspaceCodeSource) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCodeSource)(nil)).Elem()
}

func (i *WorkspaceCodeSource) ToWorkspaceCodeSourceOutput() WorkspaceCodeSourceOutput {
	return i.ToWorkspaceCodeSourceOutputWithContext(context.Background())
}

func (i *WorkspaceCodeSource) ToWorkspaceCodeSourceOutputWithContext(ctx context.Context) WorkspaceCodeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceCodeSourceOutput)
}

// WorkspaceCodeSourceArrayInput is an input type that accepts WorkspaceCodeSourceArray and WorkspaceCodeSourceArrayOutput values.
// You can construct a concrete instance of `WorkspaceCodeSourceArrayInput` via:
//
//	WorkspaceCodeSourceArray{ WorkspaceCodeSourceArgs{...} }
type WorkspaceCodeSourceArrayInput interface {
	pulumi.Input

	ToWorkspaceCodeSourceArrayOutput() WorkspaceCodeSourceArrayOutput
	ToWorkspaceCodeSourceArrayOutputWithContext(context.Context) WorkspaceCodeSourceArrayOutput
}

type WorkspaceCodeSourceArray []WorkspaceCodeSourceInput

func (WorkspaceCodeSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceCodeSource)(nil)).Elem()
}

func (i WorkspaceCodeSourceArray) ToWorkspaceCodeSourceArrayOutput() WorkspaceCodeSourceArrayOutput {
	return i.ToWorkspaceCodeSourceArrayOutputWithContext(context.Background())
}

func (i WorkspaceCodeSourceArray) ToWorkspaceCodeSourceArrayOutputWithContext(ctx context.Context) WorkspaceCodeSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceCodeSourceArrayOutput)
}

// WorkspaceCodeSourceMapInput is an input type that accepts WorkspaceCodeSourceMap and WorkspaceCodeSourceMapOutput values.
// You can construct a concrete instance of `WorkspaceCodeSourceMapInput` via:
//
//	WorkspaceCodeSourceMap{ "key": WorkspaceCodeSourceArgs{...} }
type WorkspaceCodeSourceMapInput interface {
	pulumi.Input

	ToWorkspaceCodeSourceMapOutput() WorkspaceCodeSourceMapOutput
	ToWorkspaceCodeSourceMapOutputWithContext(context.Context) WorkspaceCodeSourceMapOutput
}

type WorkspaceCodeSourceMap map[string]WorkspaceCodeSourceInput

func (WorkspaceCodeSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceCodeSource)(nil)).Elem()
}

func (i WorkspaceCodeSourceMap) ToWorkspaceCodeSourceMapOutput() WorkspaceCodeSourceMapOutput {
	return i.ToWorkspaceCodeSourceMapOutputWithContext(context.Background())
}

func (i WorkspaceCodeSourceMap) ToWorkspaceCodeSourceMapOutputWithContext(ctx context.Context) WorkspaceCodeSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceCodeSourceMapOutput)
}

type WorkspaceCodeSourceOutput struct{ *pulumi.OutputState }

func (WorkspaceCodeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCodeSource)(nil)).Elem()
}

func (o WorkspaceCodeSourceOutput) ToWorkspaceCodeSourceOutput() WorkspaceCodeSourceOutput {
	return o
}

func (o WorkspaceCodeSourceOutput) ToWorkspaceCodeSourceOutputWithContext(ctx context.Context) WorkspaceCodeSourceOutput {
	return o
}

// Visibility of the code configuration, possible values:
// - PRIVATE: In this workspace, it is only visible to you and the administrator.
// - PUBLIC: In this workspace, it is visible to everyone.
func (o WorkspaceCodeSourceOutput) Accessibility() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.Accessibility }).(pulumi.StringOutput)
}

// Code repository branch.
func (o WorkspaceCodeSourceOutput) CodeBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringPtrOutput { return v.CodeBranch }).(pulumi.StringPtrOutput)
}

// The code CommitId.
func (o WorkspaceCodeSourceOutput) CodeCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringPtrOutput { return v.CodeCommit }).(pulumi.StringPtrOutput)
}

// Code repository address.
func (o WorkspaceCodeSourceOutput) CodeRepo() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.CodeRepo }).(pulumi.StringOutput)
}

// The Token used to access the code repository.
func (o WorkspaceCodeSourceOutput) CodeRepoAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringPtrOutput { return v.CodeRepoAccessToken }).(pulumi.StringPtrOutput)
}

// The user name of the code repository.
func (o WorkspaceCodeSourceOutput) CodeRepoUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringPtrOutput { return v.CodeRepoUserName }).(pulumi.StringPtrOutput)
}

// The creation time of the resource
func (o WorkspaceCodeSourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A detailed description of the code configuration.
func (o WorkspaceCodeSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Code source configuration name.
func (o WorkspaceCodeSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The local Mount Directory of the code.
func (o WorkspaceCodeSourceOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.MountPath }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o WorkspaceCodeSourceOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCodeSource) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceCodeSourceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceCodeSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceCodeSource)(nil)).Elem()
}

func (o WorkspaceCodeSourceArrayOutput) ToWorkspaceCodeSourceArrayOutput() WorkspaceCodeSourceArrayOutput {
	return o
}

func (o WorkspaceCodeSourceArrayOutput) ToWorkspaceCodeSourceArrayOutputWithContext(ctx context.Context) WorkspaceCodeSourceArrayOutput {
	return o
}

func (o WorkspaceCodeSourceArrayOutput) Index(i pulumi.IntInput) WorkspaceCodeSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceCodeSource {
		return vs[0].([]*WorkspaceCodeSource)[vs[1].(int)]
	}).(WorkspaceCodeSourceOutput)
}

type WorkspaceCodeSourceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceCodeSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceCodeSource)(nil)).Elem()
}

func (o WorkspaceCodeSourceMapOutput) ToWorkspaceCodeSourceMapOutput() WorkspaceCodeSourceMapOutput {
	return o
}

func (o WorkspaceCodeSourceMapOutput) ToWorkspaceCodeSourceMapOutputWithContext(ctx context.Context) WorkspaceCodeSourceMapOutput {
	return o
}

func (o WorkspaceCodeSourceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceCodeSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceCodeSource {
		return vs[0].(map[string]*WorkspaceCodeSource)[vs[1].(string)]
	}).(WorkspaceCodeSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceCodeSourceInput)(nil)).Elem(), &WorkspaceCodeSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceCodeSourceArrayInput)(nil)).Elem(), WorkspaceCodeSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceCodeSourceMapInput)(nil)).Elem(), WorkspaceCodeSourceMap{})
	pulumi.RegisterOutputType(WorkspaceCodeSourceOutput{})
	pulumi.RegisterOutputType(WorkspaceCodeSourceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceCodeSourceMapOutput{})
}
