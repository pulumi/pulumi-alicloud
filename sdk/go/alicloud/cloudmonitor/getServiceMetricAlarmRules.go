// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudmonitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Cloud Monitor Service Metric Alarm Rules of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.256.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cloudmonitor"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := ecs.GetInstances(ctx, &ecs.GetInstancesArgs{
//				Status: pulumi.StringRef("Running"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultAlarmContactGroup, err := cms.NewAlarmContactGroup(ctx, "default", &cms.AlarmContactGroupArgs{
//				AlarmContactGroupName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultAlarm, err := cms.NewAlarm(ctx, "default", &cms.AlarmArgs{
//				Name:        pulumi.String(name),
//				Project:     pulumi.String("acs_ecs_dashboard"),
//				Metric:      pulumi.String("disk_writebytes"),
//				Period:      pulumi.Int(900),
//				SilenceTime: pulumi.Int(300),
//				Webhook:     pulumi.String("https://www.aliyun.com"),
//				Enabled:     pulumi.Bool(true),
//				ContactGroups: pulumi.StringArray{
//					defaultAlarmContactGroup.AlarmContactGroupName,
//				},
//				EffectiveInterval: pulumi.String("06:00-20:00"),
//				MetricDimensions: pulumi.Sprintf(`  [
//	    {
//	      \"instanceId\": \"%v\",
//	      \"device\": \"/dev/vda1\"
//	    }
//	  ]
//
// `, _default.Ids[0]),
//
//				EscalationsCritical: &cms.AlarmEscalationsCriticalArgs{
//					Statistics:         pulumi.String("Average"),
//					ComparisonOperator: pulumi.String("<="),
//					Threshold:          pulumi.String("90"),
//					Times:              pulumi.Int(1),
//				},
//				EscalationsInfo: &cms.AlarmEscalationsInfoArgs{
//					Statistics:         pulumi.String("Minimum"),
//					ComparisonOperator: pulumi.String("!="),
//					Threshold:          pulumi.String("20"),
//					Times:              pulumi.Int(3),
//				},
//				EscalationsWarn: &cms.AlarmEscalationsWarnArgs{
//					Statistics:         pulumi.String("Average"),
//					ComparisonOperator: pulumi.String("=="),
//					Threshold:          pulumi.String("30"),
//					Times:              pulumi.Int(5),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ids := cloudmonitor.GetServiceMetricAlarmRulesOutput(ctx, cloudmonitor.GetServiceMetricAlarmRulesOutputArgs{
//				Ids: pulumi.StringArray{
//					defaultAlarm.ID(),
//				},
//			}, nil)
//			ctx.Export("cloudMonitorServiceMetricAlarmRulesId0", ids.ApplyT(func(ids cloudmonitor.GetServiceMetricAlarmRulesResult) (*string, error) {
//				return &ids.Rules[0].Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetServiceMetricAlarmRules(ctx *pulumi.Context, args *GetServiceMetricAlarmRulesArgs, opts ...pulumi.InvokeOption) (*GetServiceMetricAlarmRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServiceMetricAlarmRulesResult
	err := ctx.Invoke("alicloud:cloudmonitor/getServiceMetricAlarmRules:getServiceMetricAlarmRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceMetricAlarmRules.
type GetServiceMetricAlarmRulesArgs struct {
	// The monitoring dimensions of the specified resource.
	Dimensions *string `pulumi:"dimensions"`
	// A list of Metric Alarm Rule IDs.
	Ids []string `pulumi:"ids"`
	// The name of the metric.
	MetricName *string `pulumi:"metricName"`
	// The namespace of the cloud service.
	Namespace *string `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The name of the alert rule.
	RuleName *string `pulumi:"ruleName"`
	// Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
	Status *bool `pulumi:"status"`
}

// A collection of values returned by getServiceMetricAlarmRules.
type GetServiceMetricAlarmRulesResult struct {
	// The dimensions of the alert rule.
	Dimensions *string `pulumi:"dimensions"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The metric that is used to monitor the cloud service.
	MetricName *string `pulumi:"metricName"`
	// The namespace of the cloud service.
	Namespace  *string `pulumi:"namespace"`
	OutputFile *string `pulumi:"outputFile"`
	// The name of the alert rule.
	RuleName *string `pulumi:"ruleName"`
	// A list of Hybrid Double Writes. Each element contains the following attributes:
	Rules []GetServiceMetricAlarmRulesRule `pulumi:"rules"`
	// Indicates whether the alert rule is enabled.
	Status *bool `pulumi:"status"`
}

func GetServiceMetricAlarmRulesOutput(ctx *pulumi.Context, args GetServiceMetricAlarmRulesOutputArgs, opts ...pulumi.InvokeOption) GetServiceMetricAlarmRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServiceMetricAlarmRulesResultOutput, error) {
			args := v.(GetServiceMetricAlarmRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:cloudmonitor/getServiceMetricAlarmRules:getServiceMetricAlarmRules", args, GetServiceMetricAlarmRulesResultOutput{}, options).(GetServiceMetricAlarmRulesResultOutput), nil
		}).(GetServiceMetricAlarmRulesResultOutput)
}

// A collection of arguments for invoking getServiceMetricAlarmRules.
type GetServiceMetricAlarmRulesOutputArgs struct {
	// The monitoring dimensions of the specified resource.
	Dimensions pulumi.StringPtrInput `pulumi:"dimensions"`
	// A list of Metric Alarm Rule IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of the metric.
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
	// The namespace of the cloud service.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the alert rule.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
	// Specifies whether to query enabled or disabled alert rules. Valid values: `true`, `false`.
	Status pulumi.BoolPtrInput `pulumi:"status"`
}

func (GetServiceMetricAlarmRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMetricAlarmRulesArgs)(nil)).Elem()
}

// A collection of values returned by getServiceMetricAlarmRules.
type GetServiceMetricAlarmRulesResultOutput struct{ *pulumi.OutputState }

func (GetServiceMetricAlarmRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMetricAlarmRulesResult)(nil)).Elem()
}

func (o GetServiceMetricAlarmRulesResultOutput) ToGetServiceMetricAlarmRulesResultOutput() GetServiceMetricAlarmRulesResultOutput {
	return o
}

func (o GetServiceMetricAlarmRulesResultOutput) ToGetServiceMetricAlarmRulesResultOutputWithContext(ctx context.Context) GetServiceMetricAlarmRulesResultOutput {
	return o
}

// The dimensions of the alert rule.
func (o GetServiceMetricAlarmRulesResultOutput) Dimensions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *string { return v.Dimensions }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServiceMetricAlarmRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServiceMetricAlarmRulesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The metric that is used to monitor the cloud service.
func (o GetServiceMetricAlarmRulesResultOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The namespace of the cloud service.
func (o GetServiceMetricAlarmRulesResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetServiceMetricAlarmRulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of the alert rule.
func (o GetServiceMetricAlarmRulesResultOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// A list of Hybrid Double Writes. Each element contains the following attributes:
func (o GetServiceMetricAlarmRulesResultOutput) Rules() GetServiceMetricAlarmRulesRuleArrayOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) []GetServiceMetricAlarmRulesRule { return v.Rules }).(GetServiceMetricAlarmRulesRuleArrayOutput)
}

// Indicates whether the alert rule is enabled.
func (o GetServiceMetricAlarmRulesResultOutput) Status() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetServiceMetricAlarmRulesResult) *bool { return v.Status }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceMetricAlarmRulesResultOutput{})
}
