// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventbridge

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Slr struct {
	pulumi.CustomResourceState

	ProductName pulumi.StringOutput `pulumi:"productName"`
}

// NewSlr registers a new resource with the given unique name, arguments, and options.
func NewSlr(ctx *pulumi.Context,
	name string, args *SlrArgs, opts ...pulumi.ResourceOption) (*Slr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductName == nil {
		return nil, errors.New("invalid value for required argument 'ProductName'")
	}
	var resource Slr
	err := ctx.RegisterResource("alicloud:eventbridge/slr:Slr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlr gets an existing Slr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlrState, opts ...pulumi.ResourceOption) (*Slr, error) {
	var resource Slr
	err := ctx.ReadResource("alicloud:eventbridge/slr:Slr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Slr resources.
type slrState struct {
	ProductName *string `pulumi:"productName"`
}

type SlrState struct {
	ProductName pulumi.StringPtrInput
}

func (SlrState) ElementType() reflect.Type {
	return reflect.TypeOf((*slrState)(nil)).Elem()
}

type slrArgs struct {
	ProductName string `pulumi:"productName"`
}

// The set of arguments for constructing a Slr resource.
type SlrArgs struct {
	ProductName pulumi.StringInput
}

func (SlrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slrArgs)(nil)).Elem()
}

type SlrInput interface {
	pulumi.Input

	ToSlrOutput() SlrOutput
	ToSlrOutputWithContext(ctx context.Context) SlrOutput
}

func (*Slr) ElementType() reflect.Type {
	return reflect.TypeOf((**Slr)(nil)).Elem()
}

func (i *Slr) ToSlrOutput() SlrOutput {
	return i.ToSlrOutputWithContext(context.Background())
}

func (i *Slr) ToSlrOutputWithContext(ctx context.Context) SlrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlrOutput)
}

// SlrArrayInput is an input type that accepts SlrArray and SlrArrayOutput values.
// You can construct a concrete instance of `SlrArrayInput` via:
//
//          SlrArray{ SlrArgs{...} }
type SlrArrayInput interface {
	pulumi.Input

	ToSlrArrayOutput() SlrArrayOutput
	ToSlrArrayOutputWithContext(context.Context) SlrArrayOutput
}

type SlrArray []SlrInput

func (SlrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slr)(nil)).Elem()
}

func (i SlrArray) ToSlrArrayOutput() SlrArrayOutput {
	return i.ToSlrArrayOutputWithContext(context.Background())
}

func (i SlrArray) ToSlrArrayOutputWithContext(ctx context.Context) SlrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlrArrayOutput)
}

// SlrMapInput is an input type that accepts SlrMap and SlrMapOutput values.
// You can construct a concrete instance of `SlrMapInput` via:
//
//          SlrMap{ "key": SlrArgs{...} }
type SlrMapInput interface {
	pulumi.Input

	ToSlrMapOutput() SlrMapOutput
	ToSlrMapOutputWithContext(context.Context) SlrMapOutput
}

type SlrMap map[string]SlrInput

func (SlrMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slr)(nil)).Elem()
}

func (i SlrMap) ToSlrMapOutput() SlrMapOutput {
	return i.ToSlrMapOutputWithContext(context.Background())
}

func (i SlrMap) ToSlrMapOutputWithContext(ctx context.Context) SlrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlrMapOutput)
}

type SlrOutput struct{ *pulumi.OutputState }

func (SlrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Slr)(nil)).Elem()
}

func (o SlrOutput) ToSlrOutput() SlrOutput {
	return o
}

func (o SlrOutput) ToSlrOutputWithContext(ctx context.Context) SlrOutput {
	return o
}

type SlrArrayOutput struct{ *pulumi.OutputState }

func (SlrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Slr)(nil)).Elem()
}

func (o SlrArrayOutput) ToSlrArrayOutput() SlrArrayOutput {
	return o
}

func (o SlrArrayOutput) ToSlrArrayOutputWithContext(ctx context.Context) SlrArrayOutput {
	return o
}

func (o SlrArrayOutput) Index(i pulumi.IntInput) SlrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Slr {
		return vs[0].([]*Slr)[vs[1].(int)]
	}).(SlrOutput)
}

type SlrMapOutput struct{ *pulumi.OutputState }

func (SlrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Slr)(nil)).Elem()
}

func (o SlrMapOutput) ToSlrMapOutput() SlrMapOutput {
	return o
}

func (o SlrMapOutput) ToSlrMapOutputWithContext(ctx context.Context) SlrMapOutput {
	return o
}

func (o SlrMapOutput) MapIndex(k pulumi.StringInput) SlrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Slr {
		return vs[0].(map[string]*Slr)[vs[1].(string)]
	}).(SlrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlrInput)(nil)).Elem(), &Slr{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlrArrayInput)(nil)).Elem(), SlrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlrMapInput)(nil)).Elem(), SlrMap{})
	pulumi.RegisterOutputType(SlrOutput{})
	pulumi.RegisterOutputType(SlrArrayOutput{})
	pulumi.RegisterOutputType(SlrMapOutput{})
}
