// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventbridge

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Event Bridge Connection resource.
//
// For information about Event Bridge Connection and how to use it, see [What is Connection](https://www.alibabacloud.com/help/en/eventbridge/latest/api-eventbridge-2020-04-01-createconnection).
//
// > **NOTE:** Available since v1.210.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/eventbridge"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			region := "cn-chengdu"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultZones, err := alicloud.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: defaultSwitch.VpcId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventbridge.NewConnection(ctx, "defaultConnection", &eventbridge.ConnectionArgs{
//				ConnectionName: pulumi.String(name),
//				Description:    pulumi.String("test-connection-basic-pre"),
//				NetworkParameters: &eventbridge.ConnectionNetworkParametersArgs{
//					NetworkType:     pulumi.String("PublicNetwork"),
//					VpcId:           defaultNetwork.ID(),
//					VswitcheId:      defaultSwitch.ID(),
//					SecurityGroupId: defaultSecurityGroup.ID(),
//				},
//				AuthParameters: &eventbridge.ConnectionAuthParametersArgs{
//					AuthorizationType: pulumi.String("BASIC_AUTH"),
//					ApiKeyAuthParameters: &eventbridge.ConnectionAuthParametersApiKeyAuthParametersArgs{
//						ApiKeyName:  pulumi.String("Token"),
//						ApiKeyValue: pulumi.String("Token-value"),
//					},
//					BasicAuthParameters: &eventbridge.ConnectionAuthParametersBasicAuthParametersArgs{
//						Username: pulumi.String("admin"),
//						Password: pulumi.String("admin"),
//					},
//					OauthParameters: &eventbridge.ConnectionAuthParametersOauthParametersArgs{
//						AuthorizationEndpoint: pulumi.String("http://127.0.0.1:8080"),
//						HttpMethod:            pulumi.String("POST"),
//						ClientParameters: &eventbridge.ConnectionAuthParametersOauthParametersClientParametersArgs{
//							ClientId:     pulumi.String("ClientId"),
//							ClientSecret: pulumi.String("ClientSecret"),
//						},
//						OauthHttpParameters: &eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersArgs{
//							HeaderParameters: eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArray{
//								&eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersHeaderParameterArgs{
//									Key:           pulumi.String("name"),
//									Value:         pulumi.String("name"),
//									IsValueSecret: pulumi.String("true"),
//								},
//							},
//							BodyParameters: eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArray{
//								&eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersBodyParameterArgs{
//									Key:           pulumi.String("name"),
//									Value:         pulumi.String("name"),
//									IsValueSecret: pulumi.String("true"),
//								},
//							},
//							QueryStringParameters: eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArray{
//								&eventbridge.ConnectionAuthParametersOauthParametersOauthHttpParametersQueryStringParameterArgs{
//									Key:           pulumi.String("name"),
//									Value:         pulumi.String("name"),
//									IsValueSecret: pulumi.String("true"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Event Bridge Connection can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:eventbridge/connection:Connection example <id>
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The parameters that are configured for authentication. See `authParameters` below.
	AuthParameters ConnectionAuthParametersPtrOutput `pulumi:"authParameters"`
	// The name of the connection.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// The creation time of the Connection.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The parameters that are configured for the network. See `networkParameters` below.
	NetworkParameters ConnectionNetworkParametersOutput `pulumi:"networkParameters"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.NetworkParameters == nil {
		return nil, errors.New("invalid value for required argument 'NetworkParameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("alicloud:eventbridge/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("alicloud:eventbridge/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The parameters that are configured for authentication. See `authParameters` below.
	AuthParameters *ConnectionAuthParameters `pulumi:"authParameters"`
	// The name of the connection.
	ConnectionName *string `pulumi:"connectionName"`
	// The creation time of the Connection.
	CreateTime *string `pulumi:"createTime"`
	// The description of the connection.
	Description *string `pulumi:"description"`
	// The parameters that are configured for the network. See `networkParameters` below.
	NetworkParameters *ConnectionNetworkParameters `pulumi:"networkParameters"`
}

type ConnectionState struct {
	// The parameters that are configured for authentication. See `authParameters` below.
	AuthParameters ConnectionAuthParametersPtrInput
	// The name of the connection.
	ConnectionName pulumi.StringPtrInput
	// The creation time of the Connection.
	CreateTime pulumi.StringPtrInput
	// The description of the connection.
	Description pulumi.StringPtrInput
	// The parameters that are configured for the network. See `networkParameters` below.
	NetworkParameters ConnectionNetworkParametersPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The parameters that are configured for authentication. See `authParameters` below.
	AuthParameters *ConnectionAuthParameters `pulumi:"authParameters"`
	// The name of the connection.
	ConnectionName string `pulumi:"connectionName"`
	// The description of the connection.
	Description *string `pulumi:"description"`
	// The parameters that are configured for the network. See `networkParameters` below.
	NetworkParameters ConnectionNetworkParameters `pulumi:"networkParameters"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The parameters that are configured for authentication. See `authParameters` below.
	AuthParameters ConnectionAuthParametersPtrInput
	// The name of the connection.
	ConnectionName pulumi.StringInput
	// The description of the connection.
	Description pulumi.StringPtrInput
	// The parameters that are configured for the network. See `networkParameters` below.
	NetworkParameters ConnectionNetworkParametersInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The parameters that are configured for authentication. See `authParameters` below.
func (o ConnectionOutput) AuthParameters() ConnectionAuthParametersPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthParametersPtrOutput { return v.AuthParameters }).(ConnectionAuthParametersPtrOutput)
}

// The name of the connection.
func (o ConnectionOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// The creation time of the Connection.
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the connection.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The parameters that are configured for the network. See `networkParameters` below.
func (o ConnectionOutput) NetworkParameters() ConnectionNetworkParametersOutput {
	return o.ApplyT(func(v *Connection) ConnectionNetworkParametersOutput { return v.NetworkParameters }).(ConnectionNetworkParametersOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
