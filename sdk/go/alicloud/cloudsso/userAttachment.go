// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudsso

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud SSO User Attachment resource.
//
// For information about Cloud SSO User Attachment and how to use it, see [What is User Attachment](https://www.alibabacloud.com/help/en/cloudsso/latest/api-cloudsso-2021-05-15-addusertogroup).
//
// > **NOTE:** Available since v1.141.0.
//
// > **NOTE:** Cloud SSO Only Support `cn-shanghai` And `us-west-1` Region
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cloudsso"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// _default, err := cloudsso.GetDirectories(ctx, &cloudsso.GetDirectoriesArgs{
// }, nil);
// if err != nil {
// return err
// }
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Min: 10000,
// Max: 99999,
// })
// if err != nil {
// return err
// }
// var tmp0 float64
// if length > 0 {
// tmp0 = 0
// } else {
// tmp0 = 1
// }
// var defaultDirectory []*cloudsso.Directory
// for index := 0; index < float64(len(_default.Ids).ApplyT(func(length int) (float64, error) {
// return tmp0, nil
//
//	}).(pulumi.Float64Output)); index++ {
//	    key0 := index
//	    _ := index
//
// __res, err := cloudsso.NewDirectory(ctx, fmt.Sprintf("default-%v", key0), &cloudsso.DirectoryArgs{
// DirectoryName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// defaultDirectory = append(defaultDirectory, __res)
// }
// var tmp1 *interface{}
// if length > 0 {
// tmp1 = _default.Ids[0]
// } else {
// tmp1 = std.Concat(ctx, &std.ConcatArgs{
// Input: pulumi.StringArrayArray{
// %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:40,12-34),
// []string{
// "",
// },
// },
// }, nil).Result[0]
// }
// directoryId := len(_default.Ids).ApplyT(func(length int) (*interface{}, error) {
// return &tmp1, nil
// }).(pulumi.Interface{}PtrOutput)
// defaultUser, err := cloudsso.NewUser(ctx, "default", &cloudsso.UserArgs{
// DirectoryId: pulumi.Any(directoryId),
// UserName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// defaultGroup, err := cloudsso.NewGroup(ctx, "default", &cloudsso.GroupArgs{
// DirectoryId: pulumi.Any(directoryId),
// GroupName: pulumi.String(name),
// Description: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// _, err = cloudsso.NewUserAttachment(ctx, "default", &cloudsso.UserAttachmentArgs{
// DirectoryId: pulumi.Any(directoryId),
// UserId: defaultUser.UserId,
// GroupId: defaultGroup.GroupId,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Cloud SSO User Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cloudsso/userAttachment:UserAttachment example <directory_id>:<group_id>:<user_id>
// ```
type UserAttachment struct {
	pulumi.CustomResourceState

	// The ID of the directory.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// The ID of the group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The ID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserAttachment registers a new resource with the given unique name, arguments, and options.
func NewUserAttachment(ctx *pulumi.Context,
	name string, args *UserAttachmentArgs, opts ...pulumi.ResourceOption) (*UserAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAttachment
	err := ctx.RegisterResource("alicloud:cloudsso/userAttachment:UserAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAttachment gets an existing UserAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAttachmentState, opts ...pulumi.ResourceOption) (*UserAttachment, error) {
	var resource UserAttachment
	err := ctx.ReadResource("alicloud:cloudsso/userAttachment:UserAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAttachment resources.
type userAttachmentState struct {
	// The ID of the directory.
	DirectoryId *string `pulumi:"directoryId"`
	// The ID of the group.
	GroupId *string `pulumi:"groupId"`
	// The ID of the user.
	UserId *string `pulumi:"userId"`
}

type UserAttachmentState struct {
	// The ID of the directory.
	DirectoryId pulumi.StringPtrInput
	// The ID of the group.
	GroupId pulumi.StringPtrInput
	// The ID of the user.
	UserId pulumi.StringPtrInput
}

func (UserAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttachmentState)(nil)).Elem()
}

type userAttachmentArgs struct {
	// The ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// The ID of the group.
	GroupId string `pulumi:"groupId"`
	// The ID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserAttachment resource.
type UserAttachmentArgs struct {
	// The ID of the directory.
	DirectoryId pulumi.StringInput
	// The ID of the group.
	GroupId pulumi.StringInput
	// The ID of the user.
	UserId pulumi.StringInput
}

func (UserAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttachmentArgs)(nil)).Elem()
}

type UserAttachmentInput interface {
	pulumi.Input

	ToUserAttachmentOutput() UserAttachmentOutput
	ToUserAttachmentOutputWithContext(ctx context.Context) UserAttachmentOutput
}

func (*UserAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAttachment)(nil)).Elem()
}

func (i *UserAttachment) ToUserAttachmentOutput() UserAttachmentOutput {
	return i.ToUserAttachmentOutputWithContext(context.Background())
}

func (i *UserAttachment) ToUserAttachmentOutputWithContext(ctx context.Context) UserAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttachmentOutput)
}

// UserAttachmentArrayInput is an input type that accepts UserAttachmentArray and UserAttachmentArrayOutput values.
// You can construct a concrete instance of `UserAttachmentArrayInput` via:
//
//	UserAttachmentArray{ UserAttachmentArgs{...} }
type UserAttachmentArrayInput interface {
	pulumi.Input

	ToUserAttachmentArrayOutput() UserAttachmentArrayOutput
	ToUserAttachmentArrayOutputWithContext(context.Context) UserAttachmentArrayOutput
}

type UserAttachmentArray []UserAttachmentInput

func (UserAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAttachment)(nil)).Elem()
}

func (i UserAttachmentArray) ToUserAttachmentArrayOutput() UserAttachmentArrayOutput {
	return i.ToUserAttachmentArrayOutputWithContext(context.Background())
}

func (i UserAttachmentArray) ToUserAttachmentArrayOutputWithContext(ctx context.Context) UserAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttachmentArrayOutput)
}

// UserAttachmentMapInput is an input type that accepts UserAttachmentMap and UserAttachmentMapOutput values.
// You can construct a concrete instance of `UserAttachmentMapInput` via:
//
//	UserAttachmentMap{ "key": UserAttachmentArgs{...} }
type UserAttachmentMapInput interface {
	pulumi.Input

	ToUserAttachmentMapOutput() UserAttachmentMapOutput
	ToUserAttachmentMapOutputWithContext(context.Context) UserAttachmentMapOutput
}

type UserAttachmentMap map[string]UserAttachmentInput

func (UserAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAttachment)(nil)).Elem()
}

func (i UserAttachmentMap) ToUserAttachmentMapOutput() UserAttachmentMapOutput {
	return i.ToUserAttachmentMapOutputWithContext(context.Background())
}

func (i UserAttachmentMap) ToUserAttachmentMapOutputWithContext(ctx context.Context) UserAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttachmentMapOutput)
}

type UserAttachmentOutput struct{ *pulumi.OutputState }

func (UserAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAttachment)(nil)).Elem()
}

func (o UserAttachmentOutput) ToUserAttachmentOutput() UserAttachmentOutput {
	return o
}

func (o UserAttachmentOutput) ToUserAttachmentOutputWithContext(ctx context.Context) UserAttachmentOutput {
	return o
}

// The ID of the directory.
func (o UserAttachmentOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAttachment) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// The ID of the group.
func (o UserAttachmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAttachment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The ID of the user.
func (o UserAttachmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAttachment) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserAttachmentArrayOutput struct{ *pulumi.OutputState }

func (UserAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAttachment)(nil)).Elem()
}

func (o UserAttachmentArrayOutput) ToUserAttachmentArrayOutput() UserAttachmentArrayOutput {
	return o
}

func (o UserAttachmentArrayOutput) ToUserAttachmentArrayOutputWithContext(ctx context.Context) UserAttachmentArrayOutput {
	return o
}

func (o UserAttachmentArrayOutput) Index(i pulumi.IntInput) UserAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAttachment {
		return vs[0].([]*UserAttachment)[vs[1].(int)]
	}).(UserAttachmentOutput)
}

type UserAttachmentMapOutput struct{ *pulumi.OutputState }

func (UserAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAttachment)(nil)).Elem()
}

func (o UserAttachmentMapOutput) ToUserAttachmentMapOutput() UserAttachmentMapOutput {
	return o
}

func (o UserAttachmentMapOutput) ToUserAttachmentMapOutputWithContext(ctx context.Context) UserAttachmentMapOutput {
	return o
}

func (o UserAttachmentMapOutput) MapIndex(k pulumi.StringInput) UserAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAttachment {
		return vs[0].(map[string]*UserAttachment)[vs[1].(string)]
	}).(UserAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttachmentInput)(nil)).Elem(), &UserAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttachmentArrayInput)(nil)).Elem(), UserAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttachmentMapInput)(nil)).Elem(), UserAttachmentMap{})
	pulumi.RegisterOutputType(UserAttachmentOutput{})
	pulumi.RegisterOutputType(UserAttachmentArrayOutput{})
	pulumi.RegisterOutputType(UserAttachmentMapOutput{})
}
