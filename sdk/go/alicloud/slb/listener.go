// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Application Load Balancer Listener resource.
//
// For information about slb and how to use it, see [What is Server Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
//
// For information about listener and how to use it, to see the following:
//
// * [Configure a HTTP Listener](https://www.alibabacloud.com/help/doc-detail/27592.htm).
// * [Configure a HTTPS Listener](https://www.alibabacloud.com/help/doc-detail/27593.htm).
// * [Configure a TCP Listener](https://www.alibabacloud.com/help/doc-detail/27594.htm).
// * [Configure a UDP Listener](https://www.alibabacloud.com/help/doc-detail/27595.htm).
//
// ## Listener fields and protocol mapping
//
// load balance support 4 protocol to listen on, they are `http`,`https`,`tcp`,`udp`, the every listener support which portocal following:
//
// listener parameter | support protocol | value range |
// ------------- | ------------- | ------------- |
// backendPort | http & https & tcp & udp | 1-65535 |
// frontendPort | http & https & tcp & udp | 1-65535 |
// protocol | http & https & tcp & udp |
// bandwidth | http & https & tcp & udp | -1 / 1-1000 |
// scheduler | http & https & tcp & udp | wrr, rr, wlc, tch, qch |
// stickySession | http & https | on or off |
// stickySessionType | http & https | insert or server |
// cookieTimeout | http & https | 1-86400  |
// cookie | http & https |   |
// persistenceTimeout | tcp & udp | 0-3600 |
// healthCheck | http & https | on or off |
// healthCheckType | tcp | tcp or http |
// healthCheckDomain | http & https & tcp |
// healthCheckMethod | http & https & tcp |
// healthCheckUri | http & https & tcp |  |
// healthCheckConnectPort | http & https & tcp & udp | 1-65535 or -520 |
// healthyThreshold | http & https & tcp & udp | 1-10 |
// unhealthyThreshold | http & https & tcp & udp | 1-10 |
// healthCheckTimeout | http & https & tcp & udp | 1-300 |
// healthCheckInterval | http & https & tcp & udp | 1-50 |
// healthCheckHttpCode | http & https & tcp | http_2xx,http_3xx,http_4xx,http_5xx |
// serverCertificateId | https |  |
// gzip | http & https | true or false  |
// xForwardedFor | http & https |  |
// aclStatus | http & https & tcp & udp | on or off |
// aclType   | http & https & tcp & udp | white or black |
// aclId     | http & https & tcp & udp | the id of resource alicloud_slb_acl|
// establishedTimeout | tcp       | 10-900|
// idleTimeout |http & https      | 1-60  |
// requestTimeout |http & https   | 1-180 |
// enableHttp2    |https          | on or off |
// tlsCipherPolicy |https        |  tls_cipher_policy_1_0, tls_cipher_policy_1_1, tls_cipher_policy_1_2, tlsCipherPolicy12Strict |
// serverGroupId    | http & https & tcp & udp | the id of resource slb.ServerGroup |
//
// The listener mapping supports the following:
//
// ## Import
//
// Load balancer listener can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:slb/listener:Listener example "lb-abc123456:tcp:22"
// ```
type Listener struct {
	pulumi.CustomResourceState

	// the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored.
	AclId pulumi.StringPtrOutput `pulumi:"aclId"`
	// Whether to enable "acl(access control list)", the acl is specified by `aclId`. Valid values are `on` and `off`. Default to `off`.
	AclStatus pulumi.StringPtrOutput `pulumi:"aclStatus"`
	// Mode for handling the acl specified by acl_id. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
	AclType pulumi.StringPtrOutput `pulumi:"aclType"`
	// Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
	BackendPort pulumi.IntPtrOutput `pulumi:"backendPort"`
	// Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
	Bandwidth pulumi.IntPtrOutput `pulumi:"bandwidth"`
	// SLB CA certificate ID. Only when `protocol` is `https` can be specified.
	CaCertificateId pulumi.StringPtrOutput `pulumi:"caCertificateId"`
	// The cookie configured on the server. It is mandatory when `stickySession` is "on" and `stickySessionType` is "server". Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
	Cookie pulumi.StringPtrOutput `pulumi:"cookie"`
	// Cookie timeout. It is mandatory when `stickySession` is "on" and `stickySessionType` is "insert". Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
	CookieTimeout pulumi.IntPtrOutput `pulumi:"cookieTimeout"`
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrOutput `pulumi:"deleteProtectionValidation"`
	// The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
	EnableHttp2 pulumi.StringPtrOutput `pulumi:"enableHttp2"`
	// Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
	EstablishedTimeout pulumi.IntPtrOutput `pulumi:"establishedTimeout"`
	// The port that http redirect to https.
	ForwardPort pulumi.IntPtrOutput `pulumi:"forwardPort"`
	// Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
	FrontendPort pulumi.IntOutput `pulumi:"frontendPort"`
	// Whether to enable "Gzip Compression". If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available in v1.13.0+.
	Gzip pulumi.BoolPtrOutput `pulumi:"gzip"`
	// Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener's HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
	HealthCheck pulumi.StringPtrOutput `pulumi:"healthCheck"`
	// Port used for health check. Valid value range: [1-65535]. Default to "None" means the backend server port is used.
	HealthCheckConnectPort pulumi.IntOutput `pulumi:"healthCheckConnectPort"`
	// Domain name used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
	HealthCheckDomain pulumi.StringPtrOutput `pulumi:"healthCheckDomain"`
	// Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `healthCheck` is on. Default to `http2xx`.  Valid values are: `http2xx`,  `http3xx`, `http4xx` and `http5xx`.
	HealthCheckHttpCode pulumi.StringOutput `pulumi:"healthCheckHttpCode"`
	// Time interval of health checks. It is required when `healthCheck` is on. Valid value range: [1-50] in seconds. Default to 2.
	HealthCheckInterval pulumi.IntPtrOutput `pulumi:"healthCheckInterval"`
	// The method of health check. Valid values: ["head", "get"].
	HealthCheckMethod pulumi.StringOutput `pulumi:"healthCheckMethod"`
	// Maximum timeout of each health check response. It is required when `healthCheck` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `healthCheckTimeout` < `healthCheckInterval`, its will be replaced by `healthCheckInterval`.
	HealthCheckTimeout pulumi.IntPtrOutput `pulumi:"healthCheckTimeout"`
	// Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// URI used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&’ are allowed.
	HealthCheckUri pulumi.StringPtrOutput `pulumi:"healthCheckUri"`
	// Threshold determining the result of the health check is success. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	HealthyThreshold pulumi.IntPtrOutput `pulumi:"healthyThreshold"`
	// Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
	IdleTimeout pulumi.IntPtrOutput `pulumi:"idleTimeout"`
	// Deprecated: Field 'instance_port' has been deprecated, and using 'backend_port' to replace.
	InstancePort pulumi.IntPtrOutput `pulumi:"instancePort"`
	// Deprecated: Field 'lb_port' has been deprecated, and using 'frontend_port' to replace.
	LbPort pulumi.IntPtrOutput `pulumi:"lbPort"`
	// Deprecated: Field 'lb_protocol' has been deprecated, and using 'protocol' to replace.
	LbProtocol pulumi.StringPtrOutput `pulumi:"lbProtocol"`
	// Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
	ListenerForward pulumi.StringOutput `pulumi:"listenerForward"`
	// The Load Balancer ID which is used to launch a new listener.
	LoadBalancerId           pulumi.StringOutput    `pulumi:"loadBalancerId"`
	MasterSlaveServerGroupId pulumi.StringPtrOutput `pulumi:"masterSlaveServerGroupId"`
	// Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
	PersistenceTimeout pulumi.IntPtrOutput `pulumi:"persistenceTimeout"`
	// The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
	RequestTimeout pulumi.IntPtrOutput `pulumi:"requestTimeout"`
	// Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
	// Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
	Scheduler pulumi.StringPtrOutput `pulumi:"scheduler"`
	// SLB Server certificate ID. It is required when `protocol` is `https`. The `serverCertificateId` is also required when the value of the `sslCertificateId`  is Empty.
	ServerCertificateId pulumi.StringOutput `pulumi:"serverCertificateId"`
	// the id of server group to be apply on the listener, is the id of resource `slb.ServerGroup`.
	ServerGroupId pulumi.StringPtrOutput `pulumi:"serverGroupId"`
	// SLB Server certificate ID. It has been deprecated from 1.59.0 and using `serverCertificateId` instead.
	//
	// Deprecated: Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
	SslCertificateId pulumi.StringOutput `pulumi:"sslCertificateId"`
	// Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
	StickySession pulumi.StringPtrOutput `pulumi:"stickySession"`
	// Mode for handling the cookie. If `stickySession` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
	StickySessionType pulumi.StringPtrOutput `pulumi:"stickySessionType"`
	// Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`. Currently the `tlsCipherPolicy` can not be updated when load balancer instance is "Shared-Performance".
	TlsCipherPolicy pulumi.StringPtrOutput `pulumi:"tlsCipherPolicy"`
	// Threshold determining the result of the health check is fail. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	UnhealthyThreshold pulumi.IntPtrOutput `pulumi:"unhealthyThreshold"`
	// Whether to set additional HTTP Header field "X-Forwarded-For" (documented below). Available in v1.13.0+.
	XForwardedFor ListenerXForwardedForOutput `pulumi:"xForwardedFor"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FrontendPort == nil {
		return nil, errors.New("invalid value for required argument 'FrontendPort'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	var resource Listener
	err := ctx.RegisterResource("alicloud:slb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("alicloud:slb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored.
	AclId *string `pulumi:"aclId"`
	// Whether to enable "acl(access control list)", the acl is specified by `aclId`. Valid values are `on` and `off`. Default to `off`.
	AclStatus *string `pulumi:"aclStatus"`
	// Mode for handling the acl specified by acl_id. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
	AclType *string `pulumi:"aclType"`
	// Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
	BackendPort *int `pulumi:"backendPort"`
	// Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
	Bandwidth *int `pulumi:"bandwidth"`
	// SLB CA certificate ID. Only when `protocol` is `https` can be specified.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// The cookie configured on the server. It is mandatory when `stickySession` is "on" and `stickySessionType` is "server". Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
	Cookie *string `pulumi:"cookie"`
	// Cookie timeout. It is mandatory when `stickySession` is "on" and `stickySessionType` is "insert". Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
	CookieTimeout *int `pulumi:"cookieTimeout"`
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
	Description *string `pulumi:"description"`
	// Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
	EstablishedTimeout *int `pulumi:"establishedTimeout"`
	// The port that http redirect to https.
	ForwardPort *int `pulumi:"forwardPort"`
	// Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
	FrontendPort *int `pulumi:"frontendPort"`
	// Whether to enable "Gzip Compression". If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available in v1.13.0+.
	Gzip *bool `pulumi:"gzip"`
	// Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener's HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
	HealthCheck *string `pulumi:"healthCheck"`
	// Port used for health check. Valid value range: [1-65535]. Default to "None" means the backend server port is used.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// Domain name used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
	HealthCheckDomain *string `pulumi:"healthCheckDomain"`
	// Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `healthCheck` is on. Default to `http2xx`.  Valid values are: `http2xx`,  `http3xx`, `http4xx` and `http5xx`.
	HealthCheckHttpCode *string `pulumi:"healthCheckHttpCode"`
	// Time interval of health checks. It is required when `healthCheck` is on. Valid value range: [1-50] in seconds. Default to 2.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The method of health check. Valid values: ["head", "get"].
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// Maximum timeout of each health check response. It is required when `healthCheck` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `healthCheckTimeout` < `healthCheckInterval`, its will be replaced by `healthCheckInterval`.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// URI used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&’ are allowed.
	HealthCheckUri *string `pulumi:"healthCheckUri"`
	// Threshold determining the result of the health check is success. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Deprecated: Field 'instance_port' has been deprecated, and using 'backend_port' to replace.
	InstancePort *int `pulumi:"instancePort"`
	// Deprecated: Field 'lb_port' has been deprecated, and using 'frontend_port' to replace.
	LbPort *int `pulumi:"lbPort"`
	// Deprecated: Field 'lb_protocol' has been deprecated, and using 'protocol' to replace.
	LbProtocol *string `pulumi:"lbProtocol"`
	// Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
	ListenerForward *string `pulumi:"listenerForward"`
	// The Load Balancer ID which is used to launch a new listener.
	LoadBalancerId           *string `pulumi:"loadBalancerId"`
	MasterSlaveServerGroupId *string `pulumi:"masterSlaveServerGroupId"`
	// Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
	PersistenceTimeout *int `pulumi:"persistenceTimeout"`
	// The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
	Protocol *string `pulumi:"protocol"`
	// Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
	// Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
	Scheduler *string `pulumi:"scheduler"`
	// SLB Server certificate ID. It is required when `protocol` is `https`. The `serverCertificateId` is also required when the value of the `sslCertificateId`  is Empty.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
	// the id of server group to be apply on the listener, is the id of resource `slb.ServerGroup`.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// SLB Server certificate ID. It has been deprecated from 1.59.0 and using `serverCertificateId` instead.
	//
	// Deprecated: Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
	SslCertificateId *string `pulumi:"sslCertificateId"`
	// Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
	StickySession *string `pulumi:"stickySession"`
	// Mode for handling the cookie. If `stickySession` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
	StickySessionType *string `pulumi:"stickySessionType"`
	// Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`. Currently the `tlsCipherPolicy` can not be updated when load balancer instance is "Shared-Performance".
	TlsCipherPolicy *string `pulumi:"tlsCipherPolicy"`
	// Threshold determining the result of the health check is fail. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
	// Whether to set additional HTTP Header field "X-Forwarded-For" (documented below). Available in v1.13.0+.
	XForwardedFor *ListenerXForwardedFor `pulumi:"xForwardedFor"`
}

type ListenerState struct {
	// the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored.
	AclId pulumi.StringPtrInput
	// Whether to enable "acl(access control list)", the acl is specified by `aclId`. Valid values are `on` and `off`. Default to `off`.
	AclStatus pulumi.StringPtrInput
	// Mode for handling the acl specified by acl_id. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
	AclType pulumi.StringPtrInput
	// Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
	BackendPort pulumi.IntPtrInput
	// Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
	Bandwidth pulumi.IntPtrInput
	// SLB CA certificate ID. Only when `protocol` is `https` can be specified.
	CaCertificateId pulumi.StringPtrInput
	// The cookie configured on the server. It is mandatory when `stickySession` is "on" and `stickySessionType` is "server". Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
	Cookie pulumi.StringPtrInput
	// Cookie timeout. It is mandatory when `stickySession` is "on" and `stickySessionType` is "insert". Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
	CookieTimeout pulumi.IntPtrInput
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
	Description pulumi.StringPtrInput
	// Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
	EnableHttp2 pulumi.StringPtrInput
	// Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
	EstablishedTimeout pulumi.IntPtrInput
	// The port that http redirect to https.
	ForwardPort pulumi.IntPtrInput
	// Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
	FrontendPort pulumi.IntPtrInput
	// Whether to enable "Gzip Compression". If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available in v1.13.0+.
	Gzip pulumi.BoolPtrInput
	// Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener's HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
	HealthCheck pulumi.StringPtrInput
	// Port used for health check. Valid value range: [1-65535]. Default to "None" means the backend server port is used.
	HealthCheckConnectPort pulumi.IntPtrInput
	// Domain name used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
	HealthCheckDomain pulumi.StringPtrInput
	// Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `healthCheck` is on. Default to `http2xx`.  Valid values are: `http2xx`,  `http3xx`, `http4xx` and `http5xx`.
	HealthCheckHttpCode pulumi.StringPtrInput
	// Time interval of health checks. It is required when `healthCheck` is on. Valid value range: [1-50] in seconds. Default to 2.
	HealthCheckInterval pulumi.IntPtrInput
	// The method of health check. Valid values: ["head", "get"].
	HealthCheckMethod pulumi.StringPtrInput
	// Maximum timeout of each health check response. It is required when `healthCheck` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `healthCheckTimeout` < `healthCheckInterval`, its will be replaced by `healthCheckInterval`.
	HealthCheckTimeout pulumi.IntPtrInput
	// Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
	HealthCheckType pulumi.StringPtrInput
	// URI used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&’ are allowed.
	HealthCheckUri pulumi.StringPtrInput
	// Threshold determining the result of the health check is success. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	HealthyThreshold pulumi.IntPtrInput
	// Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
	IdleTimeout pulumi.IntPtrInput
	// Deprecated: Field 'instance_port' has been deprecated, and using 'backend_port' to replace.
	InstancePort pulumi.IntPtrInput
	// Deprecated: Field 'lb_port' has been deprecated, and using 'frontend_port' to replace.
	LbPort pulumi.IntPtrInput
	// Deprecated: Field 'lb_protocol' has been deprecated, and using 'protocol' to replace.
	LbProtocol pulumi.StringPtrInput
	// Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
	ListenerForward pulumi.StringPtrInput
	// The Load Balancer ID which is used to launch a new listener.
	LoadBalancerId           pulumi.StringPtrInput
	MasterSlaveServerGroupId pulumi.StringPtrInput
	// Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
	PersistenceTimeout pulumi.IntPtrInput
	// The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
	Protocol pulumi.StringPtrInput
	// Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
	RequestTimeout pulumi.IntPtrInput
	// Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
	// Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
	Scheduler pulumi.StringPtrInput
	// SLB Server certificate ID. It is required when `protocol` is `https`. The `serverCertificateId` is also required when the value of the `sslCertificateId`  is Empty.
	ServerCertificateId pulumi.StringPtrInput
	// the id of server group to be apply on the listener, is the id of resource `slb.ServerGroup`.
	ServerGroupId pulumi.StringPtrInput
	// SLB Server certificate ID. It has been deprecated from 1.59.0 and using `serverCertificateId` instead.
	//
	// Deprecated: Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
	SslCertificateId pulumi.StringPtrInput
	// Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
	StickySession pulumi.StringPtrInput
	// Mode for handling the cookie. If `stickySession` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
	StickySessionType pulumi.StringPtrInput
	// Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`. Currently the `tlsCipherPolicy` can not be updated when load balancer instance is "Shared-Performance".
	TlsCipherPolicy pulumi.StringPtrInput
	// Threshold determining the result of the health check is fail. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	UnhealthyThreshold pulumi.IntPtrInput
	// Whether to set additional HTTP Header field "X-Forwarded-For" (documented below). Available in v1.13.0+.
	XForwardedFor ListenerXForwardedForPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored.
	AclId *string `pulumi:"aclId"`
	// Whether to enable "acl(access control list)", the acl is specified by `aclId`. Valid values are `on` and `off`. Default to `off`.
	AclStatus *string `pulumi:"aclStatus"`
	// Mode for handling the acl specified by acl_id. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
	AclType *string `pulumi:"aclType"`
	// Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
	BackendPort *int `pulumi:"backendPort"`
	// Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
	Bandwidth *int `pulumi:"bandwidth"`
	// SLB CA certificate ID. Only when `protocol` is `https` can be specified.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// The cookie configured on the server. It is mandatory when `stickySession` is "on" and `stickySessionType` is "server". Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
	Cookie *string `pulumi:"cookie"`
	// Cookie timeout. It is mandatory when `stickySession` is "on" and `stickySessionType` is "insert". Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
	CookieTimeout *int `pulumi:"cookieTimeout"`
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
	Description *string `pulumi:"description"`
	// Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
	EstablishedTimeout *int `pulumi:"establishedTimeout"`
	// The port that http redirect to https.
	ForwardPort *int `pulumi:"forwardPort"`
	// Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
	FrontendPort int `pulumi:"frontendPort"`
	// Whether to enable "Gzip Compression". If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available in v1.13.0+.
	Gzip *bool `pulumi:"gzip"`
	// Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener's HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
	HealthCheck *string `pulumi:"healthCheck"`
	// Port used for health check. Valid value range: [1-65535]. Default to "None" means the backend server port is used.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// Domain name used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
	HealthCheckDomain *string `pulumi:"healthCheckDomain"`
	// Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `healthCheck` is on. Default to `http2xx`.  Valid values are: `http2xx`,  `http3xx`, `http4xx` and `http5xx`.
	HealthCheckHttpCode *string `pulumi:"healthCheckHttpCode"`
	// Time interval of health checks. It is required when `healthCheck` is on. Valid value range: [1-50] in seconds. Default to 2.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The method of health check. Valid values: ["head", "get"].
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// Maximum timeout of each health check response. It is required when `healthCheck` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `healthCheckTimeout` < `healthCheckInterval`, its will be replaced by `healthCheckInterval`.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// URI used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&’ are allowed.
	HealthCheckUri *string `pulumi:"healthCheckUri"`
	// Threshold determining the result of the health check is success. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Deprecated: Field 'instance_port' has been deprecated, and using 'backend_port' to replace.
	InstancePort *int `pulumi:"instancePort"`
	// Deprecated: Field 'lb_port' has been deprecated, and using 'frontend_port' to replace.
	LbPort *int `pulumi:"lbPort"`
	// Deprecated: Field 'lb_protocol' has been deprecated, and using 'protocol' to replace.
	LbProtocol *string `pulumi:"lbProtocol"`
	// Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
	ListenerForward *string `pulumi:"listenerForward"`
	// The Load Balancer ID which is used to launch a new listener.
	LoadBalancerId           string  `pulumi:"loadBalancerId"`
	MasterSlaveServerGroupId *string `pulumi:"masterSlaveServerGroupId"`
	// Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
	PersistenceTimeout *int `pulumi:"persistenceTimeout"`
	// The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
	Protocol string `pulumi:"protocol"`
	// Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
	// Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
	Scheduler *string `pulumi:"scheduler"`
	// SLB Server certificate ID. It is required when `protocol` is `https`. The `serverCertificateId` is also required when the value of the `sslCertificateId`  is Empty.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
	// the id of server group to be apply on the listener, is the id of resource `slb.ServerGroup`.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// SLB Server certificate ID. It has been deprecated from 1.59.0 and using `serverCertificateId` instead.
	//
	// Deprecated: Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
	SslCertificateId *string `pulumi:"sslCertificateId"`
	// Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
	StickySession *string `pulumi:"stickySession"`
	// Mode for handling the cookie. If `stickySession` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
	StickySessionType *string `pulumi:"stickySessionType"`
	// Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`. Currently the `tlsCipherPolicy` can not be updated when load balancer instance is "Shared-Performance".
	TlsCipherPolicy *string `pulumi:"tlsCipherPolicy"`
	// Threshold determining the result of the health check is fail. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
	// Whether to set additional HTTP Header field "X-Forwarded-For" (documented below). Available in v1.13.0+.
	XForwardedFor *ListenerXForwardedFor `pulumi:"xForwardedFor"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// the id of access control list to be apply on the listener, is the id of resource alicloud_slb_acl. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored.
	AclId pulumi.StringPtrInput
	// Whether to enable "acl(access control list)", the acl is specified by `aclId`. Valid values are `on` and `off`. Default to `off`.
	AclStatus pulumi.StringPtrInput
	// Mode for handling the acl specified by acl_id. If `aclStatus` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `white` and `black`. `white` means the Listener can only be accessed by client ip belongs to the acl; `black` means the Listener can not be accessed by client ip belongs to the acl.
	AclType pulumi.StringPtrInput
	// Port used by the Server Load Balancer instance backend. Valid value range: [1-65535].
	BackendPort pulumi.IntPtrInput
	// Bandwidth peak of Listener. For the public network instance charged per traffic consumed, the Bandwidth on Listener can be set to -1, indicating the bandwidth peak is unlimited. Valid values are [-1, 1-1000] in Mbps.
	Bandwidth pulumi.IntPtrInput
	// SLB CA certificate ID. Only when `protocol` is `https` can be specified.
	CaCertificateId pulumi.StringPtrInput
	// The cookie configured on the server. It is mandatory when `stickySession` is "on" and `stickySessionType` is "server". Otherwise, it will be ignored. Valid value：String in line with RFC 2965, with length being 1- 200. It only contains characters such as ASCII codes, English letters and digits instead of the comma, semicolon or spacing, and it cannot start with $.
	Cookie pulumi.StringPtrInput
	// Cookie timeout. It is mandatory when `stickySession` is "on" and `stickySessionType` is "insert". Otherwise, it will be ignored. Valid value range: [1-86400] in seconds.
	CookieTimeout pulumi.IntPtrInput
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The description of slb listener. This description can have a string of 1 to 80 characters. Default value: null.
	Description pulumi.StringPtrInput
	// Whether to enable https listener support http2 or not. Valid values are `on` and `off`. Default to `on`.
	EnableHttp2 pulumi.StringPtrInput
	// Timeout of tcp listener established connection idle timeout. Valid value range: [10-900] in seconds. Default to 900.
	EstablishedTimeout pulumi.IntPtrInput
	// The port that http redirect to https.
	ForwardPort pulumi.IntPtrInput
	// Port used by the Server Load Balancer instance frontend. Valid value range: [1-65535].
	FrontendPort pulumi.IntInput
	// Whether to enable "Gzip Compression". If enabled, files of specific file types will be compressed, otherwise, no files will be compressed. Default to true. Available in v1.13.0+.
	Gzip pulumi.BoolPtrInput
	// Whether to enable health check. Valid values are`on` and `off`. TCP and UDP listener's HealthCheck is always on, so it will be ignore when launching TCP or UDP listener.
	HealthCheck pulumi.StringPtrInput
	// Port used for health check. Valid value range: [1-65535]. Default to "None" means the backend server port is used.
	HealthCheckConnectPort pulumi.IntPtrInput
	// Domain name used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and only characters such as letters, digits, ‘-‘ and ‘.’ are allowed. When it is not set or empty,  Server Load Balancer uses the private network IP address of each backend server as Domain used for health check.
	HealthCheckDomain pulumi.StringPtrInput
	// Regular health check HTTP status code. Multiple codes are segmented by “,”. It is required when `healthCheck` is on. Default to `http2xx`.  Valid values are: `http2xx`,  `http3xx`, `http4xx` and `http5xx`.
	HealthCheckHttpCode pulumi.StringPtrInput
	// Time interval of health checks. It is required when `healthCheck` is on. Valid value range: [1-50] in seconds. Default to 2.
	HealthCheckInterval pulumi.IntPtrInput
	// The method of health check. Valid values: ["head", "get"].
	HealthCheckMethod pulumi.StringPtrInput
	// Maximum timeout of each health check response. It is required when `healthCheck` is on. Valid value range: [1-300] in seconds. Default to 5. Note: If `healthCheckTimeout` < `healthCheckInterval`, its will be replaced by `healthCheckInterval`.
	HealthCheckTimeout pulumi.IntPtrInput
	// Type of health check. Valid values are: `tcp` and `http`. Default to `tcp` . TCP supports TCP and HTTP health check mode, you can select the particular mode depending on your application.
	HealthCheckType pulumi.StringPtrInput
	// URI used for health check. When it used to launch TCP listener, `healthCheckType` must be "http". Its length is limited to 1-80 and it must start with /. Only characters such as letters, digits, ‘-’, ‘/’, ‘.’, ‘%’, ‘?’, #’ and ‘&’ are allowed.
	HealthCheckUri pulumi.StringPtrInput
	// Threshold determining the result of the health check is success. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	HealthyThreshold pulumi.IntPtrInput
	// Timeout of http or https listener established connection idle timeout. Valid value range: [1-60] in seconds. Default to 15.
	IdleTimeout pulumi.IntPtrInput
	// Deprecated: Field 'instance_port' has been deprecated, and using 'backend_port' to replace.
	InstancePort pulumi.IntPtrInput
	// Deprecated: Field 'lb_port' has been deprecated, and using 'frontend_port' to replace.
	LbPort pulumi.IntPtrInput
	// Deprecated: Field 'lb_protocol' has been deprecated, and using 'protocol' to replace.
	LbProtocol pulumi.StringPtrInput
	// Whether to enable http redirect to https, Valid values are `on` and `off`. Default to `off`.
	ListenerForward pulumi.StringPtrInput
	// The Load Balancer ID which is used to launch a new listener.
	LoadBalancerId           pulumi.StringInput
	MasterSlaveServerGroupId pulumi.StringPtrInput
	// Timeout of connection persistence. Valid value range: [0-3600] in seconds. Default to 0 and means closing it.
	PersistenceTimeout pulumi.IntPtrInput
	// The protocol to listen on. Valid values are [`http`, `https`, `tcp`, `udp`].
	Protocol pulumi.StringInput
	// Timeout of http or https listener request (which does not get response from backend) timeout. Valid value range: [1-180] in seconds. Default to 60.
	RequestTimeout pulumi.IntPtrInput
	// Scheduling algorithm,  Valid values: `wrr`, `rr`, `wlc`, `sch`, `tcp`, `qch`. Default to `wrr`.
	// Only when `protocol` is `tcp` or `udp`, `scheduler` can be set to `sch`. Only when instance is guaranteed-performance instance and `protocol` is `tcp` or `udp`, `scheduler` can be set to `tch`. Only when instance is guaranteed-performance instance and `protocol` is `udp`, `scheduler` can be set to `qch`.
	Scheduler pulumi.StringPtrInput
	// SLB Server certificate ID. It is required when `protocol` is `https`. The `serverCertificateId` is also required when the value of the `sslCertificateId`  is Empty.
	ServerCertificateId pulumi.StringPtrInput
	// the id of server group to be apply on the listener, is the id of resource `slb.ServerGroup`.
	ServerGroupId pulumi.StringPtrInput
	// SLB Server certificate ID. It has been deprecated from 1.59.0 and using `serverCertificateId` instead.
	//
	// Deprecated: Field 'ssl_certificate_id' has been deprecated from 1.59.0 and using 'server_certificate_id' instead.
	SslCertificateId pulumi.StringPtrInput
	// Whether to enable session persistence, Valid values are `on` and `off`. Default to `off`.
	StickySession pulumi.StringPtrInput
	// Mode for handling the cookie. If `stickySession` is "on", it is mandatory. Otherwise, it will be ignored. Valid values are `insert` and `server`. `insert` means it is inserted from Server Load Balancer; `server` means the Server Load Balancer learns from the backend server.
	StickySessionType pulumi.StringPtrInput
	// Https listener TLS cipher policy. Valid values are `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`. Default to `tlsCipherPolicy10`. Currently the `tlsCipherPolicy` can not be updated when load balancer instance is "Shared-Performance".
	TlsCipherPolicy pulumi.StringPtrInput
	// Threshold determining the result of the health check is fail. It is required when `healthCheck` is on. Valid value range: [1-10] in seconds. Default to 3.
	UnhealthyThreshold pulumi.IntPtrInput
	// Whether to set additional HTTP Header field "X-Forwarded-For" (documented below). Available in v1.13.0+.
	XForwardedFor ListenerXForwardedForPtrInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//          ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//          ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
