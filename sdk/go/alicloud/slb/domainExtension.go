// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HTTPS listeners of guaranteed-performance SLB support configuring multiple certificates, allowing you to forward requests with different domain names to different backend servers.
// Please refer to the [documentation](https://www.alibabacloud.com/help/doc-detail/85956.htm?spm=a2c63.p38356.b99.40.1c881563Co8p6w) for details.
//
// > **NOTE:** Available in 1.60.0+
//
// > **NOTE:** The instance with shared loadBalancerSpec doesn't support domainExtension.
//
// ## Import
//
// Load balancer domain_extension can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:slb/domainExtension:DomainExtension example de-abc123456
// ```
type DomainExtension struct {
	pulumi.CustomResourceState

	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrOutput `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntOutput `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringOutput `pulumi:"serverCertificateId"`
}

// NewDomainExtension registers a new resource with the given unique name, arguments, and options.
func NewDomainExtension(ctx *pulumi.Context,
	name string, args *DomainExtensionArgs, opts ...pulumi.ResourceOption) (*DomainExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.FrontendPort == nil {
		return nil, errors.New("invalid value for required argument 'FrontendPort'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.ServerCertificateId == nil {
		return nil, errors.New("invalid value for required argument 'ServerCertificateId'")
	}
	var resource DomainExtension
	err := ctx.RegisterResource("alicloud:slb/domainExtension:DomainExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainExtension gets an existing DomainExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainExtensionState, opts ...pulumi.ResourceOption) (*DomainExtension, error) {
	var resource DomainExtension
	err := ctx.ReadResource("alicloud:slb/domainExtension:DomainExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainExtension resources.
type domainExtensionState struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain *string `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort *int `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
}

type DomainExtensionState struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The domain name,
	Domain pulumi.StringPtrInput
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntPtrInput
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringPtrInput
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringPtrInput
}

func (DomainExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainExtensionState)(nil)).Elem()
}

type domainExtensionArgs struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation *bool `pulumi:"deleteProtectionValidation"`
	// The domain name,
	Domain string `pulumi:"domain"`
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort int `pulumi:"frontendPort"`
	// The ID of the SLB instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The ID of the certificate used by the domain name.
	ServerCertificateId string `pulumi:"serverCertificateId"`
}

// The set of arguments for constructing a DomainExtension resource.
type DomainExtensionArgs struct {
	// Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.
	DeleteProtectionValidation pulumi.BoolPtrInput
	// The domain name,
	Domain pulumi.StringInput
	// The frontend port used by the HTTPS listener of the SLB instance. Valid values: 1–65535.
	FrontendPort pulumi.IntInput
	// The ID of the SLB instance.
	LoadBalancerId pulumi.StringInput
	// The ID of the certificate used by the domain name.
	ServerCertificateId pulumi.StringInput
}

func (DomainExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainExtensionArgs)(nil)).Elem()
}

type DomainExtensionInput interface {
	pulumi.Input

	ToDomainExtensionOutput() DomainExtensionOutput
	ToDomainExtensionOutputWithContext(ctx context.Context) DomainExtensionOutput
}

func (*DomainExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainExtension)(nil)).Elem()
}

func (i *DomainExtension) ToDomainExtensionOutput() DomainExtensionOutput {
	return i.ToDomainExtensionOutputWithContext(context.Background())
}

func (i *DomainExtension) ToDomainExtensionOutputWithContext(ctx context.Context) DomainExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExtensionOutput)
}

// DomainExtensionArrayInput is an input type that accepts DomainExtensionArray and DomainExtensionArrayOutput values.
// You can construct a concrete instance of `DomainExtensionArrayInput` via:
//
//          DomainExtensionArray{ DomainExtensionArgs{...} }
type DomainExtensionArrayInput interface {
	pulumi.Input

	ToDomainExtensionArrayOutput() DomainExtensionArrayOutput
	ToDomainExtensionArrayOutputWithContext(context.Context) DomainExtensionArrayOutput
}

type DomainExtensionArray []DomainExtensionInput

func (DomainExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainExtension)(nil)).Elem()
}

func (i DomainExtensionArray) ToDomainExtensionArrayOutput() DomainExtensionArrayOutput {
	return i.ToDomainExtensionArrayOutputWithContext(context.Background())
}

func (i DomainExtensionArray) ToDomainExtensionArrayOutputWithContext(ctx context.Context) DomainExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExtensionArrayOutput)
}

// DomainExtensionMapInput is an input type that accepts DomainExtensionMap and DomainExtensionMapOutput values.
// You can construct a concrete instance of `DomainExtensionMapInput` via:
//
//          DomainExtensionMap{ "key": DomainExtensionArgs{...} }
type DomainExtensionMapInput interface {
	pulumi.Input

	ToDomainExtensionMapOutput() DomainExtensionMapOutput
	ToDomainExtensionMapOutputWithContext(context.Context) DomainExtensionMapOutput
}

type DomainExtensionMap map[string]DomainExtensionInput

func (DomainExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainExtension)(nil)).Elem()
}

func (i DomainExtensionMap) ToDomainExtensionMapOutput() DomainExtensionMapOutput {
	return i.ToDomainExtensionMapOutputWithContext(context.Background())
}

func (i DomainExtensionMap) ToDomainExtensionMapOutputWithContext(ctx context.Context) DomainExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExtensionMapOutput)
}

type DomainExtensionOutput struct{ *pulumi.OutputState }

func (DomainExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainExtension)(nil)).Elem()
}

func (o DomainExtensionOutput) ToDomainExtensionOutput() DomainExtensionOutput {
	return o
}

func (o DomainExtensionOutput) ToDomainExtensionOutputWithContext(ctx context.Context) DomainExtensionOutput {
	return o
}

type DomainExtensionArrayOutput struct{ *pulumi.OutputState }

func (DomainExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainExtension)(nil)).Elem()
}

func (o DomainExtensionArrayOutput) ToDomainExtensionArrayOutput() DomainExtensionArrayOutput {
	return o
}

func (o DomainExtensionArrayOutput) ToDomainExtensionArrayOutputWithContext(ctx context.Context) DomainExtensionArrayOutput {
	return o
}

func (o DomainExtensionArrayOutput) Index(i pulumi.IntInput) DomainExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainExtension {
		return vs[0].([]*DomainExtension)[vs[1].(int)]
	}).(DomainExtensionOutput)
}

type DomainExtensionMapOutput struct{ *pulumi.OutputState }

func (DomainExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainExtension)(nil)).Elem()
}

func (o DomainExtensionMapOutput) ToDomainExtensionMapOutput() DomainExtensionMapOutput {
	return o
}

func (o DomainExtensionMapOutput) ToDomainExtensionMapOutputWithContext(ctx context.Context) DomainExtensionMapOutput {
	return o
}

func (o DomainExtensionMapOutput) MapIndex(k pulumi.StringInput) DomainExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainExtension {
		return vs[0].(map[string]*DomainExtension)[vs[1].(string)]
	}).(DomainExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainExtensionInput)(nil)).Elem(), &DomainExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainExtensionArrayInput)(nil)).Elem(), DomainExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainExtensionMapInput)(nil)).Elem(), DomainExtensionMap{})
	pulumi.RegisterOutputType(DomainExtensionOutput{})
	pulumi.RegisterOutputType(DomainExtensionArrayOutput{})
	pulumi.RegisterOutputType(DomainExtensionMapOutput{})
}
