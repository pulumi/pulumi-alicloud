// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Load Balancer CA Certificate is used by the listener of the protocol https.
//
// For information about slb and how to use it, see [What is Server Load Balancer](https://www.alibabacloud.com/help/doc-detail/27539.htm).
//
// For information about CA Certificate and how to use it, see [Configure CA Certificate](https://www.alibabacloud.com/help/doc-detail/85968.htm).
//
// ## Import
//
// Server Load balancer CA Certificate can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:slb/caCertificate:CaCertificate example abc123456
// ```
type CaCertificate struct {
	pulumi.CustomResourceState

	// the content of the CA certificate.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// Name of the CA Certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewCaCertificate(ctx *pulumi.Context,
	name string, args *CaCertificateArgs, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	if args == nil || args.CaCertificate == nil {
		return nil, errors.New("missing required argument 'CaCertificate'")
	}
	if args == nil {
		args = &CaCertificateArgs{}
	}
	var resource CaCertificate
	err := ctx.RegisterResource("alicloud:slb/caCertificate:CaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaCertificate gets an existing CaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaCertificateState, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	var resource CaCertificate
	err := ctx.ReadResource("alicloud:slb/caCertificate:CaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaCertificate resources.
type caCertificateState struct {
	// the content of the CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Name of the CA Certificate.
	Name *string `pulumi:"name"`
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

type CaCertificateState struct {
	// the content of the CA certificate.
	CaCertificate pulumi.StringPtrInput
	// Name of the CA Certificate.
	Name pulumi.StringPtrInput
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
}

func (CaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateState)(nil)).Elem()
}

type caCertificateArgs struct {
	// the content of the CA certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// Name of the CA Certificate.
	Name *string `pulumi:"name"`
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a CaCertificate resource.
type CaCertificateArgs struct {
	// the content of the CA certificate.
	CaCertificate pulumi.StringInput
	// Name of the CA Certificate.
	Name pulumi.StringPtrInput
	// The Id of resource group which the slbCa certificate belongs.
	ResourceGroupId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
}

func (CaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateArgs)(nil)).Elem()
}

type CaCertificateInput interface {
	pulumi.Input

	ToCaCertificateOutput() CaCertificateOutput
	ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput
}

func (CaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*CaCertificate)(nil)).Elem()
}

func (i CaCertificate) ToCaCertificateOutput() CaCertificateOutput {
	return i.ToCaCertificateOutputWithContext(context.Background())
}

func (i CaCertificate) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateOutput)
}

type CaCertificateOutput struct {
	*pulumi.OutputState
}

func (CaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaCertificateOutput)(nil)).Elem()
}

func (o CaCertificateOutput) ToCaCertificateOutput() CaCertificateOutput {
	return o
}

func (o CaCertificateOutput) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CaCertificateOutput{})
}
