// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ackone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Ack One Membership Attachment resource. Fleet Manager Membership Attachment.
//
// For information about Ack One Membership Attachment and how to use it, see [How to attach cluster tp hub](https://www.alibabacloud.com/help/en/ack/distributed-cloud-container-platform-for-kubernetes/developer-reference/api-adcp-2022-01-01-attachclustertohub).
//
// > **NOTE:** Available since v1.243.0.
//
// ## Import
//
// Ack One Membership Attachment can be imported using the id, which consists of cluster_id and sub_cluster_id, e.g.
//
// ```sh
// $ pulumi import alicloud:ackone/membershipAttachment:MembershipAttachment example <cluster_id>:<sub_cluster_id>
// ```
type MembershipAttachment struct {
	pulumi.CustomResourceState

	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringOutput `pulumi:"subClusterId"`
}

// NewMembershipAttachment registers a new resource with the given unique name, arguments, and options.
func NewMembershipAttachment(ctx *pulumi.Context,
	name string, args *MembershipAttachmentArgs, opts ...pulumi.ResourceOption) (*MembershipAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.SubClusterId == nil {
		return nil, errors.New("invalid value for required argument 'SubClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MembershipAttachment
	err := ctx.RegisterResource("alicloud:ackone/membershipAttachment:MembershipAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembershipAttachment gets an existing MembershipAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembershipAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipAttachmentState, opts ...pulumi.ResourceOption) (*MembershipAttachment, error) {
	var resource MembershipAttachment
	err := ctx.ReadResource("alicloud:ackone/membershipAttachment:MembershipAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MembershipAttachment resources.
type membershipAttachmentState struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId *string `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId *string `pulumi:"subClusterId"`
}

type MembershipAttachmentState struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringPtrInput
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringPtrInput
}

func (MembershipAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipAttachmentState)(nil)).Elem()
}

type membershipAttachmentArgs struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId string `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId string `pulumi:"subClusterId"`
}

// The set of arguments for constructing a MembershipAttachment resource.
type MembershipAttachmentArgs struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringInput
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringInput
}

func (MembershipAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipAttachmentArgs)(nil)).Elem()
}

type MembershipAttachmentInput interface {
	pulumi.Input

	ToMembershipAttachmentOutput() MembershipAttachmentOutput
	ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput
}

func (*MembershipAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipAttachment)(nil)).Elem()
}

func (i *MembershipAttachment) ToMembershipAttachmentOutput() MembershipAttachmentOutput {
	return i.ToMembershipAttachmentOutputWithContext(context.Background())
}

func (i *MembershipAttachment) ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentOutput)
}

// MembershipAttachmentArrayInput is an input type that accepts MembershipAttachmentArray and MembershipAttachmentArrayOutput values.
// You can construct a concrete instance of `MembershipAttachmentArrayInput` via:
//
//	MembershipAttachmentArray{ MembershipAttachmentArgs{...} }
type MembershipAttachmentArrayInput interface {
	pulumi.Input

	ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput
	ToMembershipAttachmentArrayOutputWithContext(context.Context) MembershipAttachmentArrayOutput
}

type MembershipAttachmentArray []MembershipAttachmentInput

func (MembershipAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipAttachment)(nil)).Elem()
}

func (i MembershipAttachmentArray) ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput {
	return i.ToMembershipAttachmentArrayOutputWithContext(context.Background())
}

func (i MembershipAttachmentArray) ToMembershipAttachmentArrayOutputWithContext(ctx context.Context) MembershipAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentArrayOutput)
}

// MembershipAttachmentMapInput is an input type that accepts MembershipAttachmentMap and MembershipAttachmentMapOutput values.
// You can construct a concrete instance of `MembershipAttachmentMapInput` via:
//
//	MembershipAttachmentMap{ "key": MembershipAttachmentArgs{...} }
type MembershipAttachmentMapInput interface {
	pulumi.Input

	ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput
	ToMembershipAttachmentMapOutputWithContext(context.Context) MembershipAttachmentMapOutput
}

type MembershipAttachmentMap map[string]MembershipAttachmentInput

func (MembershipAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipAttachment)(nil)).Elem()
}

func (i MembershipAttachmentMap) ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput {
	return i.ToMembershipAttachmentMapOutputWithContext(context.Background())
}

func (i MembershipAttachmentMap) ToMembershipAttachmentMapOutputWithContext(ctx context.Context) MembershipAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentMapOutput)
}

type MembershipAttachmentOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentOutput) ToMembershipAttachmentOutput() MembershipAttachmentOutput {
	return o
}

func (o MembershipAttachmentOutput) ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput {
	return o
}

// The ID of the cluster to which the membership is being attached.
func (o MembershipAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The ID of the member being attached to the cluster.
func (o MembershipAttachmentOutput) SubClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipAttachment) pulumi.StringOutput { return v.SubClusterId }).(pulumi.StringOutput)
}

type MembershipAttachmentArrayOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentArrayOutput) ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput {
	return o
}

func (o MembershipAttachmentArrayOutput) ToMembershipAttachmentArrayOutputWithContext(ctx context.Context) MembershipAttachmentArrayOutput {
	return o
}

func (o MembershipAttachmentArrayOutput) Index(i pulumi.IntInput) MembershipAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MembershipAttachment {
		return vs[0].([]*MembershipAttachment)[vs[1].(int)]
	}).(MembershipAttachmentOutput)
}

type MembershipAttachmentMapOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentMapOutput) ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput {
	return o
}

func (o MembershipAttachmentMapOutput) ToMembershipAttachmentMapOutputWithContext(ctx context.Context) MembershipAttachmentMapOutput {
	return o
}

func (o MembershipAttachmentMapOutput) MapIndex(k pulumi.StringInput) MembershipAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MembershipAttachment {
		return vs[0].(map[string]*MembershipAttachment)[vs[1].(string)]
	}).(MembershipAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentInput)(nil)).Elem(), &MembershipAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentArrayInput)(nil)).Elem(), MembershipAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentMapInput)(nil)).Elem(), MembershipAttachmentMap{})
	pulumi.RegisterOutputType(MembershipAttachmentOutput{})
	pulumi.RegisterOutputType(MembershipAttachmentArrayOutput{})
	pulumi.RegisterOutputType(MembershipAttachmentMapOutput{})
}
