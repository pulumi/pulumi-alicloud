// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ackone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Ack One Membership Attachment resource. Fleet Manager Membership Attachment.
//
// For information about Ack One Membership Attachment and how to use it, see [How to attach cluster tp hub](https://www.alibabacloud.com/help/en/ack/distributed-cloud-container-platform-for-kubernetes/developer-reference/api-adcp-2022-01-01-attachclustertohub).
//
// > **NOTE:** Available since v1.243.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ackone"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			keyName := "%s"
//			if param := cfg.Get("keyName"); param != "" {
//				keyName = param
//			}
//			enhanced, err := vpc.GetEnhancedNatAvailableZones(ctx, &vpc.GetEnhancedNatAvailableZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			cloudEfficiency, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone:   pulumi.StringRef(enhanced.Zones[0].ZoneId),
//				CpuCoreCount:       pulumi.IntRef(4),
//				MemorySize:         pulumi.Float64Ref(8),
//				KubernetesNodeRole: pulumi.StringRef("Worker"),
//				SystemDiskCategory: pulumi.StringRef("cloud_efficiency"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_default, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
//				CidrBlock: pulumi.String("10.4.0.0/24"),
//				VpcId:     _default.ID(),
//				ZoneId:    pulumi.String(enhanced.Zones[0].ZoneId),
//			})
//			if err != nil {
//				return err
//			}
//			invokeCidrsubnet, err := std.Cidrsubnet(ctx, &std.CidrsubnetArgs{
//				Input:   "10.0.0.0/8",
//				Newbits: 8,
//				Netnum:  36,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeCidrsubnet1, err := std.Cidrsubnet(ctx, &std.CidrsubnetArgs{
//				Input:   "172.16.0.0/16",
//				Newbits: 4,
//				Netnum:  7,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultManagedKubernetes, err := cs.NewManagedKubernetes(ctx, "default", &cs.ManagedKubernetesArgs{
//				ClusterSpec: pulumi.String("ack.pro.small"),
//				VswitchIds: pulumi.StringArray{
//					defaultSwitch.ID(),
//				},
//				NewNatGateway:             pulumi.Bool(true),
//				PodCidr:                   pulumi.String(invokeCidrsubnet.Result),
//				ServiceCidr:               pulumi.String(invokeCidrsubnet1.Result),
//				SlbInternetEnabled:        pulumi.Bool(true),
//				IsEnterpriseSecurityGroup: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultKeyPair, err := ecs.NewKeyPair(ctx, "default", &ecs.KeyPairArgs{
//				KeyPairName: pulumi.String(keyName),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
//				NodePoolName: pulumi.String(name),
//				ClusterId:    defaultManagedKubernetes.ID(),
//				VswitchIds: pulumi.StringArray{
//					defaultSwitch.ID(),
//				},
//				InstanceTypes: pulumi.StringArray{
//					pulumi.String(cloudEfficiency.InstanceTypes[0].Id),
//				},
//				SystemDiskCategory: pulumi.String("cloud_efficiency"),
//				SystemDiskSize:     pulumi.Int(40),
//				KeyName:            defaultKeyPair.KeyPairName,
//				DesiredSize:        pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := ackone.NewCluster(ctx, "default", &ackone.ClusterArgs{
//				Network: &ackone.ClusterNetworkArgs{
//					VpcId: _default.ID(),
//					Vswitches: pulumi.StringArray{
//						defaultSwitch.ID(),
//					},
//				},
//				ArgocdEnabled: pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				defaultManagedKubernetes,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = ackone.NewMembershipAttachment(ctx, "default", &ackone.MembershipAttachmentArgs{
//				ClusterId:    defaultCluster.ID(),
//				SubClusterId: defaultManagedKubernetes.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Ack One Membership Attachment can be imported using the id, which consists of cluster_id and sub_cluster_id, e.g.
//
// ```sh
// $ pulumi import alicloud:ackone/membershipAttachment:MembershipAttachment example <cluster_id>:<sub_cluster_id>
// ```
type MembershipAttachment struct {
	pulumi.CustomResourceState

	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringOutput `pulumi:"subClusterId"`
}

// NewMembershipAttachment registers a new resource with the given unique name, arguments, and options.
func NewMembershipAttachment(ctx *pulumi.Context,
	name string, args *MembershipAttachmentArgs, opts ...pulumi.ResourceOption) (*MembershipAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.SubClusterId == nil {
		return nil, errors.New("invalid value for required argument 'SubClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MembershipAttachment
	err := ctx.RegisterResource("alicloud:ackone/membershipAttachment:MembershipAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembershipAttachment gets an existing MembershipAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembershipAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipAttachmentState, opts ...pulumi.ResourceOption) (*MembershipAttachment, error) {
	var resource MembershipAttachment
	err := ctx.ReadResource("alicloud:ackone/membershipAttachment:MembershipAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MembershipAttachment resources.
type membershipAttachmentState struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId *string `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId *string `pulumi:"subClusterId"`
}

type MembershipAttachmentState struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringPtrInput
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringPtrInput
}

func (MembershipAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipAttachmentState)(nil)).Elem()
}

type membershipAttachmentArgs struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId string `pulumi:"clusterId"`
	// The ID of the member being attached to the cluster.
	SubClusterId string `pulumi:"subClusterId"`
}

// The set of arguments for constructing a MembershipAttachment resource.
type MembershipAttachmentArgs struct {
	// The ID of the cluster to which the membership is being attached.
	ClusterId pulumi.StringInput
	// The ID of the member being attached to the cluster.
	SubClusterId pulumi.StringInput
}

func (MembershipAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipAttachmentArgs)(nil)).Elem()
}

type MembershipAttachmentInput interface {
	pulumi.Input

	ToMembershipAttachmentOutput() MembershipAttachmentOutput
	ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput
}

func (*MembershipAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipAttachment)(nil)).Elem()
}

func (i *MembershipAttachment) ToMembershipAttachmentOutput() MembershipAttachmentOutput {
	return i.ToMembershipAttachmentOutputWithContext(context.Background())
}

func (i *MembershipAttachment) ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentOutput)
}

// MembershipAttachmentArrayInput is an input type that accepts MembershipAttachmentArray and MembershipAttachmentArrayOutput values.
// You can construct a concrete instance of `MembershipAttachmentArrayInput` via:
//
//	MembershipAttachmentArray{ MembershipAttachmentArgs{...} }
type MembershipAttachmentArrayInput interface {
	pulumi.Input

	ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput
	ToMembershipAttachmentArrayOutputWithContext(context.Context) MembershipAttachmentArrayOutput
}

type MembershipAttachmentArray []MembershipAttachmentInput

func (MembershipAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipAttachment)(nil)).Elem()
}

func (i MembershipAttachmentArray) ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput {
	return i.ToMembershipAttachmentArrayOutputWithContext(context.Background())
}

func (i MembershipAttachmentArray) ToMembershipAttachmentArrayOutputWithContext(ctx context.Context) MembershipAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentArrayOutput)
}

// MembershipAttachmentMapInput is an input type that accepts MembershipAttachmentMap and MembershipAttachmentMapOutput values.
// You can construct a concrete instance of `MembershipAttachmentMapInput` via:
//
//	MembershipAttachmentMap{ "key": MembershipAttachmentArgs{...} }
type MembershipAttachmentMapInput interface {
	pulumi.Input

	ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput
	ToMembershipAttachmentMapOutputWithContext(context.Context) MembershipAttachmentMapOutput
}

type MembershipAttachmentMap map[string]MembershipAttachmentInput

func (MembershipAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipAttachment)(nil)).Elem()
}

func (i MembershipAttachmentMap) ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput {
	return i.ToMembershipAttachmentMapOutputWithContext(context.Background())
}

func (i MembershipAttachmentMap) ToMembershipAttachmentMapOutputWithContext(ctx context.Context) MembershipAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipAttachmentMapOutput)
}

type MembershipAttachmentOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentOutput) ToMembershipAttachmentOutput() MembershipAttachmentOutput {
	return o
}

func (o MembershipAttachmentOutput) ToMembershipAttachmentOutputWithContext(ctx context.Context) MembershipAttachmentOutput {
	return o
}

// The ID of the cluster to which the membership is being attached.
func (o MembershipAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The ID of the member being attached to the cluster.
func (o MembershipAttachmentOutput) SubClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipAttachment) pulumi.StringOutput { return v.SubClusterId }).(pulumi.StringOutput)
}

type MembershipAttachmentArrayOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentArrayOutput) ToMembershipAttachmentArrayOutput() MembershipAttachmentArrayOutput {
	return o
}

func (o MembershipAttachmentArrayOutput) ToMembershipAttachmentArrayOutputWithContext(ctx context.Context) MembershipAttachmentArrayOutput {
	return o
}

func (o MembershipAttachmentArrayOutput) Index(i pulumi.IntInput) MembershipAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MembershipAttachment {
		return vs[0].([]*MembershipAttachment)[vs[1].(int)]
	}).(MembershipAttachmentOutput)
}

type MembershipAttachmentMapOutput struct{ *pulumi.OutputState }

func (MembershipAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MembershipAttachment)(nil)).Elem()
}

func (o MembershipAttachmentMapOutput) ToMembershipAttachmentMapOutput() MembershipAttachmentMapOutput {
	return o
}

func (o MembershipAttachmentMapOutput) ToMembershipAttachmentMapOutputWithContext(ctx context.Context) MembershipAttachmentMapOutput {
	return o
}

func (o MembershipAttachmentMapOutput) MapIndex(k pulumi.StringInput) MembershipAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MembershipAttachment {
		return vs[0].(map[string]*MembershipAttachment)[vs[1].(string)]
	}).(MembershipAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentInput)(nil)).Elem(), &MembershipAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentArrayInput)(nil)).Elem(), MembershipAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipAttachmentMapInput)(nil)).Elem(), MembershipAttachmentMap{})
	pulumi.RegisterOutputType(MembershipAttachmentOutput{})
	pulumi.RegisterOutputType(MembershipAttachmentArrayOutput{})
	pulumi.RegisterOutputType(MembershipAttachmentMapOutput{})
}
