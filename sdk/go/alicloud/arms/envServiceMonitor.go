// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Env Service Monitor resource. ServiceMonitor for the arms environment.
//
// For information about ARMS Env Service Monitor and how to use it, see [What is Env Service Monitor](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-createenvservicemonitor).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Max: 99999,
// Min: 10000,
// })
// if err != nil {
// return err
// }
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// enhanced, err := vpc.GetEnhancedNatAvailableZones(ctx, &vpc.GetEnhancedNatAvailableZonesArgs{
// }, nil);
// if err != nil {
// return err
// }
// vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
// Description: pulumi.String(name),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// VpcName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// vswitch, err := vpc.NewSwitch(ctx, "vswitch", &vpc.SwitchArgs{
// Description: pulumi.String(name),
// VpcId: vpc.ID(),
// VswitchName: pulumi.String(name),
// ZoneId: pulumi.String(enhanced.Zones[0].ZoneId),
// CidrBlock: pulumi.String(vpc.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
// return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
// Input: cidrBlock,
// Newbits: 8,
// Netnum: 8,
// }, nil))), nil
// }).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
// return invoke.Result, nil
// }).(pulumi.StringPtrOutput)),
// })
// if err != nil {
// return err
// }
// _, err = ecs.NewSnapshotPolicy(ctx, "default", &ecs.SnapshotPolicyArgs{
// Name: pulumi.String(name),
// RepeatWeekdays: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("2"),
// pulumi.String("3"),
// },
// RetentionDays: pulumi.Int(-1),
// TimePoints: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("22"),
// pulumi.String("23"),
// },
// })
// if err != nil {
// return err
// }
// _default := vswitch.ZoneId.ApplyT(func(zoneId string) (ecs.GetInstanceTypesResult, error) {
// return ecs.GetInstanceTypesResult(interface{}(ecs.GetInstanceTypesOutput(ctx, ecs.GetInstanceTypesOutputArgs{
// AvailabilityZone: zoneId,
// CpuCoreCount: 2,
// MemorySize: 4,
// KubernetesNodeRole: "Worker",
// InstanceTypeFamily: "ecs.n1",
// }, nil))), nil
// }).(ecs.GetInstanceTypesResultOutput)
// defaultManagedKubernetes, err := cs.NewManagedKubernetes(ctx, "default", &cs.ManagedKubernetesArgs{
// Name: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// ClusterSpec: pulumi.String("ack.pro.small"),
// Version: pulumi.String("1.24.6-aliyun.1"),
// NewNatGateway: pulumi.Bool(true),
// NodeCidrMask: pulumi.Int(26),
// ProxyMode: pulumi.String("ipvs"),
// ServiceCidr: pulumi.String("172.23.0.0/16"),
// PodCidr: pulumi.String("10.95.0.0/16"),
// WorkerVswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// })
// if err != nil {
// return err
// }
// defaultKeyPair, err := ecs.NewKeyPair(ctx, "default", &ecs.KeyPairArgs{
// KeyPairName: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// defaultNodePool, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// NodePoolName: pulumi.String("desired_size"),
// ClusterId: defaultManagedKubernetes.ID(),
// VswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// InstanceTypes: pulumi.StringArray{
// pulumi.String(_default.ApplyT(func(_default ecs.GetInstanceTypesResult) (*string, error) {
// return &default.InstanceTypes[0].Id, nil
// }).(pulumi.StringPtrOutput)),
// },
// SystemDiskCategory: pulumi.String("cloud_efficiency"),
// SystemDiskSize: pulumi.Int(40),
// KeyName: defaultKeyPair.KeyPairName,
// DesiredSize: pulumi.String("2"),
// })
// if err != nil {
// return err
// }
// defaultEnvironment, err := arms.NewEnvironment(ctx, "default", &arms.EnvironmentArgs{
// BindResourceId: defaultNodePool.ClusterId,
// EnvironmentSubType: pulumi.String("ManagedKubernetes"),
// EnvironmentType: pulumi.String("CS"),
// EnvironmentName: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// _, err = arms.NewEnvServiceMonitor(ctx, "default", &arms.EnvServiceMonitorArgs{
// EnvironmentId: defaultEnvironment.ID(),
// ConfigYaml: pulumi.String(`apiVersion: monitoring.coreos.com/v1
// kind: ServiceMonitor
// metadata:
//
//	name: arms-admin1
//	namespace: arms-prom
//	annotations:
//	  arms.prometheus.io/discovery: 'true'
//	  o11y.aliyun.com/addon-name: mysql
//	  o11y.aliyun.com/addon-version: 1.0.1
//	  o11y.aliyun.com/release-name: mysql1
//
// spec:
//
//	endpoints:
//	- interval: 30s
//	  port: operator
//	  path: /metrics
//	- interval: 10s
//	  port: operator1
//	  path: /metrics
//	namespaceSelector:
//	  any: true
//	selector:
//	  matchLabels:
//	   app: arms-prometheus-ack-arms-prometheus
//
// `),
// AliyunLang: pulumi.String("zh"),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// ARMS Env Service Monitor can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/envServiceMonitor:EnvServiceMonitor example <environment_id>:<namespace>:<env_service_monitor_name>
// ```
type EnvServiceMonitor struct {
	pulumi.CustomResourceState

	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrOutput `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml pulumi.StringOutput `pulumi:"configYaml"`
	// The name of the resource.
	EnvServiceMonitorName pulumi.StringOutput `pulumi:"envServiceMonitorName"`
	// Environment id.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The namespace where the resource is located.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Status: run, stop.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEnvServiceMonitor registers a new resource with the given unique name, arguments, and options.
func NewEnvServiceMonitor(ctx *pulumi.Context,
	name string, args *EnvServiceMonitorArgs, opts ...pulumi.ResourceOption) (*EnvServiceMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigYaml == nil {
		return nil, errors.New("invalid value for required argument 'ConfigYaml'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvServiceMonitor
	err := ctx.RegisterResource("alicloud:arms/envServiceMonitor:EnvServiceMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvServiceMonitor gets an existing EnvServiceMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvServiceMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvServiceMonitorState, opts ...pulumi.ResourceOption) (*EnvServiceMonitor, error) {
	var resource EnvServiceMonitor
	err := ctx.ReadResource("alicloud:arms/envServiceMonitor:EnvServiceMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvServiceMonitor resources.
type envServiceMonitorState struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml *string `pulumi:"configYaml"`
	// The name of the resource.
	EnvServiceMonitorName *string `pulumi:"envServiceMonitorName"`
	// Environment id.
	EnvironmentId *string `pulumi:"environmentId"`
	// The namespace where the resource is located.
	Namespace *string `pulumi:"namespace"`
	// Status: run, stop.
	Status *string `pulumi:"status"`
}

type EnvServiceMonitorState struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// Yaml configuration string.
	ConfigYaml pulumi.StringPtrInput
	// The name of the resource.
	EnvServiceMonitorName pulumi.StringPtrInput
	// Environment id.
	EnvironmentId pulumi.StringPtrInput
	// The namespace where the resource is located.
	Namespace pulumi.StringPtrInput
	// Status: run, stop.
	Status pulumi.StringPtrInput
}

func (EnvServiceMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*envServiceMonitorState)(nil)).Elem()
}

type envServiceMonitorArgs struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml string `pulumi:"configYaml"`
	// Environment id.
	EnvironmentId string `pulumi:"environmentId"`
}

// The set of arguments for constructing a EnvServiceMonitor resource.
type EnvServiceMonitorArgs struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// Yaml configuration string.
	ConfigYaml pulumi.StringInput
	// Environment id.
	EnvironmentId pulumi.StringInput
}

func (EnvServiceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envServiceMonitorArgs)(nil)).Elem()
}

type EnvServiceMonitorInput interface {
	pulumi.Input

	ToEnvServiceMonitorOutput() EnvServiceMonitorOutput
	ToEnvServiceMonitorOutputWithContext(ctx context.Context) EnvServiceMonitorOutput
}

func (*EnvServiceMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvServiceMonitor)(nil)).Elem()
}

func (i *EnvServiceMonitor) ToEnvServiceMonitorOutput() EnvServiceMonitorOutput {
	return i.ToEnvServiceMonitorOutputWithContext(context.Background())
}

func (i *EnvServiceMonitor) ToEnvServiceMonitorOutputWithContext(ctx context.Context) EnvServiceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvServiceMonitorOutput)
}

// EnvServiceMonitorArrayInput is an input type that accepts EnvServiceMonitorArray and EnvServiceMonitorArrayOutput values.
// You can construct a concrete instance of `EnvServiceMonitorArrayInput` via:
//
//	EnvServiceMonitorArray{ EnvServiceMonitorArgs{...} }
type EnvServiceMonitorArrayInput interface {
	pulumi.Input

	ToEnvServiceMonitorArrayOutput() EnvServiceMonitorArrayOutput
	ToEnvServiceMonitorArrayOutputWithContext(context.Context) EnvServiceMonitorArrayOutput
}

type EnvServiceMonitorArray []EnvServiceMonitorInput

func (EnvServiceMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvServiceMonitor)(nil)).Elem()
}

func (i EnvServiceMonitorArray) ToEnvServiceMonitorArrayOutput() EnvServiceMonitorArrayOutput {
	return i.ToEnvServiceMonitorArrayOutputWithContext(context.Background())
}

func (i EnvServiceMonitorArray) ToEnvServiceMonitorArrayOutputWithContext(ctx context.Context) EnvServiceMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvServiceMonitorArrayOutput)
}

// EnvServiceMonitorMapInput is an input type that accepts EnvServiceMonitorMap and EnvServiceMonitorMapOutput values.
// You can construct a concrete instance of `EnvServiceMonitorMapInput` via:
//
//	EnvServiceMonitorMap{ "key": EnvServiceMonitorArgs{...} }
type EnvServiceMonitorMapInput interface {
	pulumi.Input

	ToEnvServiceMonitorMapOutput() EnvServiceMonitorMapOutput
	ToEnvServiceMonitorMapOutputWithContext(context.Context) EnvServiceMonitorMapOutput
}

type EnvServiceMonitorMap map[string]EnvServiceMonitorInput

func (EnvServiceMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvServiceMonitor)(nil)).Elem()
}

func (i EnvServiceMonitorMap) ToEnvServiceMonitorMapOutput() EnvServiceMonitorMapOutput {
	return i.ToEnvServiceMonitorMapOutputWithContext(context.Background())
}

func (i EnvServiceMonitorMap) ToEnvServiceMonitorMapOutputWithContext(ctx context.Context) EnvServiceMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvServiceMonitorMapOutput)
}

type EnvServiceMonitorOutput struct{ *pulumi.OutputState }

func (EnvServiceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvServiceMonitor)(nil)).Elem()
}

func (o EnvServiceMonitorOutput) ToEnvServiceMonitorOutput() EnvServiceMonitorOutput {
	return o
}

func (o EnvServiceMonitorOutput) ToEnvServiceMonitorOutputWithContext(ctx context.Context) EnvServiceMonitorOutput {
	return o
}

// Language environment, default is Chinese zh | en.
func (o EnvServiceMonitorOutput) AliyunLang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringPtrOutput { return v.AliyunLang }).(pulumi.StringPtrOutput)
}

// Yaml configuration string.
func (o EnvServiceMonitorOutput) ConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringOutput { return v.ConfigYaml }).(pulumi.StringOutput)
}

// The name of the resource.
func (o EnvServiceMonitorOutput) EnvServiceMonitorName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringOutput { return v.EnvServiceMonitorName }).(pulumi.StringOutput)
}

// Environment id.
func (o EnvServiceMonitorOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The namespace where the resource is located.
func (o EnvServiceMonitorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Status: run, stop.
func (o EnvServiceMonitorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvServiceMonitor) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EnvServiceMonitorArrayOutput struct{ *pulumi.OutputState }

func (EnvServiceMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvServiceMonitor)(nil)).Elem()
}

func (o EnvServiceMonitorArrayOutput) ToEnvServiceMonitorArrayOutput() EnvServiceMonitorArrayOutput {
	return o
}

func (o EnvServiceMonitorArrayOutput) ToEnvServiceMonitorArrayOutputWithContext(ctx context.Context) EnvServiceMonitorArrayOutput {
	return o
}

func (o EnvServiceMonitorArrayOutput) Index(i pulumi.IntInput) EnvServiceMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvServiceMonitor {
		return vs[0].([]*EnvServiceMonitor)[vs[1].(int)]
	}).(EnvServiceMonitorOutput)
}

type EnvServiceMonitorMapOutput struct{ *pulumi.OutputState }

func (EnvServiceMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvServiceMonitor)(nil)).Elem()
}

func (o EnvServiceMonitorMapOutput) ToEnvServiceMonitorMapOutput() EnvServiceMonitorMapOutput {
	return o
}

func (o EnvServiceMonitorMapOutput) ToEnvServiceMonitorMapOutputWithContext(ctx context.Context) EnvServiceMonitorMapOutput {
	return o
}

func (o EnvServiceMonitorMapOutput) MapIndex(k pulumi.StringInput) EnvServiceMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvServiceMonitor {
		return vs[0].(map[string]*EnvServiceMonitor)[vs[1].(string)]
	}).(EnvServiceMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvServiceMonitorInput)(nil)).Elem(), &EnvServiceMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvServiceMonitorArrayInput)(nil)).Elem(), EnvServiceMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvServiceMonitorMapInput)(nil)).Elem(), EnvServiceMonitorMap{})
	pulumi.RegisterOutputType(EnvServiceMonitorOutput{})
	pulumi.RegisterOutputType(EnvServiceMonitorArrayOutput{})
	pulumi.RegisterOutputType(EnvServiceMonitorMapOutput{})
}
