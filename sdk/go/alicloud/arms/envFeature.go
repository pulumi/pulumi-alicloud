// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Env Feature resource. Feature of the arms environment.
//
// For information about ARMS Env Feature and how to use it, see [What is Env Feature](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-installenvironmentfeature).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Max: 99999,
// Min: 10000,
// })
// if err != nil {
// return err
// }
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// enhanced, err := vpc.GetEnhancedNatAvailableZones(ctx, &vpc.GetEnhancedNatAvailableZonesArgs{
// }, nil);
// if err != nil {
// return err
// }
// vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
// Description: pulumi.String(name),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// VpcName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// vswitch, err := vpc.NewSwitch(ctx, "vswitch", &vpc.SwitchArgs{
// Description: pulumi.String(name),
// VpcId: vpc.ID(),
// VswitchName: pulumi.String(name),
// ZoneId: pulumi.String(enhanced.Zones[0].ZoneId),
// CidrBlock: pulumi.String(vpc.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
// return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
// Input: cidrBlock,
// Newbits: 8,
// Netnum: 8,
// }, nil))), nil
// }).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
// return invoke.Result, nil
// }).(pulumi.StringPtrOutput)),
// })
// if err != nil {
// return err
// }
// _, err = ecs.NewSnapshotPolicy(ctx, "default", &ecs.SnapshotPolicyArgs{
// Name: pulumi.String(name),
// RepeatWeekdays: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("2"),
// pulumi.String("3"),
// },
// RetentionDays: pulumi.Int(-1),
// TimePoints: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("22"),
// pulumi.String("23"),
// },
// })
// if err != nil {
// return err
// }
// _default := vswitch.ZoneId.ApplyT(func(zoneId string) (ecs.GetInstanceTypesResult, error) {
// return ecs.GetInstanceTypesResult(interface{}(ecs.GetInstanceTypesOutput(ctx, ecs.GetInstanceTypesOutputArgs{
// AvailabilityZone: zoneId,
// CpuCoreCount: 2,
// MemorySize: 4,
// KubernetesNodeRole: "Worker",
// InstanceTypeFamily: "ecs.sn1ne",
// }, nil))), nil
// }).(ecs.GetInstanceTypesResultOutput)
// defaultManagedKubernetes, err := cs.NewManagedKubernetes(ctx, "default", &cs.ManagedKubernetesArgs{
// Name: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// ClusterSpec: pulumi.String("ack.pro.small"),
// Version: pulumi.String("1.24.6-aliyun.1"),
// NewNatGateway: pulumi.Bool(true),
// NodeCidrMask: pulumi.Int(26),
// ProxyMode: pulumi.String("ipvs"),
// ServiceCidr: pulumi.String("172.23.0.0/16"),
// PodCidr: pulumi.String("10.95.0.0/16"),
// WorkerVswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// })
// if err != nil {
// return err
// }
// defaultKeyPair, err := ecs.NewKeyPair(ctx, "default", &ecs.KeyPairArgs{
// KeyPairName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// defaultNodePool, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// NodePoolName: pulumi.String("desired_size"),
// ClusterId: defaultManagedKubernetes.ID(),
// VswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// InstanceTypes: pulumi.StringArray{
// pulumi.String(_default.ApplyT(func(_default ecs.GetInstanceTypesResult) (*string, error) {
// return &default.InstanceTypes[0].Id, nil
// }).(pulumi.StringPtrOutput)),
// },
// SystemDiskCategory: pulumi.String("cloud_efficiency"),
// SystemDiskSize: pulumi.Int(40),
// KeyName: defaultKeyPair.KeyPairName,
// DesiredSize: pulumi.String("2"),
// })
// if err != nil {
// return err
// }
// defaultEnvironment, err := arms.NewEnvironment(ctx, "default", &arms.EnvironmentArgs{
// BindResourceId: defaultNodePool.ClusterId,
// EnvironmentSubType: pulumi.String("ManagedKubernetes"),
// EnvironmentType: pulumi.String("CS"),
// EnvironmentName: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// _, err = arms.NewEnvFeature(ctx, "default", &arms.EnvFeatureArgs{
// EnvFeatureName: pulumi.String("metric-agent"),
// EnvironmentId: defaultEnvironment.ID(),
// FeatureVersion: pulumi.String("1.1.17"),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// ARMS Env Feature can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/envFeature:EnvFeature example <environment_id>:<env_feature_name>
// ```
type EnvFeature struct {
	pulumi.CustomResourceState

	// The name of the resource.
	EnvFeatureName pulumi.StringOutput `pulumi:"envFeatureName"`
	// The first ID of the resource.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
	FeatureVersion pulumi.StringOutput `pulumi:"featureVersion"`
	// Namespace.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEnvFeature registers a new resource with the given unique name, arguments, and options.
func NewEnvFeature(ctx *pulumi.Context,
	name string, args *EnvFeatureArgs, opts ...pulumi.ResourceOption) (*EnvFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvFeatureName == nil {
		return nil, errors.New("invalid value for required argument 'EnvFeatureName'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.FeatureVersion == nil {
		return nil, errors.New("invalid value for required argument 'FeatureVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvFeature
	err := ctx.RegisterResource("alicloud:arms/envFeature:EnvFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvFeature gets an existing EnvFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvFeatureState, opts ...pulumi.ResourceOption) (*EnvFeature, error) {
	var resource EnvFeature
	err := ctx.ReadResource("alicloud:arms/envFeature:EnvFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvFeature resources.
type envFeatureState struct {
	// The name of the resource.
	EnvFeatureName *string `pulumi:"envFeatureName"`
	// The first ID of the resource.
	EnvironmentId *string `pulumi:"environmentId"`
	// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
	FeatureVersion *string `pulumi:"featureVersion"`
	// Namespace.
	Namespace *string `pulumi:"namespace"`
	// Status.
	Status *string `pulumi:"status"`
}

type EnvFeatureState struct {
	// The name of the resource.
	EnvFeatureName pulumi.StringPtrInput
	// The first ID of the resource.
	EnvironmentId pulumi.StringPtrInput
	// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
	FeatureVersion pulumi.StringPtrInput
	// Namespace.
	Namespace pulumi.StringPtrInput
	// Status.
	Status pulumi.StringPtrInput
}

func (EnvFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*envFeatureState)(nil)).Elem()
}

type envFeatureArgs struct {
	// The name of the resource.
	EnvFeatureName string `pulumi:"envFeatureName"`
	// The first ID of the resource.
	EnvironmentId string `pulumi:"environmentId"`
	// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
	FeatureVersion string `pulumi:"featureVersion"`
}

// The set of arguments for constructing a EnvFeature resource.
type EnvFeatureArgs struct {
	// The name of the resource.
	EnvFeatureName pulumi.StringInput
	// The first ID of the resource.
	EnvironmentId pulumi.StringInput
	// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
	FeatureVersion pulumi.StringInput
}

func (EnvFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envFeatureArgs)(nil)).Elem()
}

type EnvFeatureInput interface {
	pulumi.Input

	ToEnvFeatureOutput() EnvFeatureOutput
	ToEnvFeatureOutputWithContext(ctx context.Context) EnvFeatureOutput
}

func (*EnvFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvFeature)(nil)).Elem()
}

func (i *EnvFeature) ToEnvFeatureOutput() EnvFeatureOutput {
	return i.ToEnvFeatureOutputWithContext(context.Background())
}

func (i *EnvFeature) ToEnvFeatureOutputWithContext(ctx context.Context) EnvFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFeatureOutput)
}

// EnvFeatureArrayInput is an input type that accepts EnvFeatureArray and EnvFeatureArrayOutput values.
// You can construct a concrete instance of `EnvFeatureArrayInput` via:
//
//	EnvFeatureArray{ EnvFeatureArgs{...} }
type EnvFeatureArrayInput interface {
	pulumi.Input

	ToEnvFeatureArrayOutput() EnvFeatureArrayOutput
	ToEnvFeatureArrayOutputWithContext(context.Context) EnvFeatureArrayOutput
}

type EnvFeatureArray []EnvFeatureInput

func (EnvFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvFeature)(nil)).Elem()
}

func (i EnvFeatureArray) ToEnvFeatureArrayOutput() EnvFeatureArrayOutput {
	return i.ToEnvFeatureArrayOutputWithContext(context.Background())
}

func (i EnvFeatureArray) ToEnvFeatureArrayOutputWithContext(ctx context.Context) EnvFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFeatureArrayOutput)
}

// EnvFeatureMapInput is an input type that accepts EnvFeatureMap and EnvFeatureMapOutput values.
// You can construct a concrete instance of `EnvFeatureMapInput` via:
//
//	EnvFeatureMap{ "key": EnvFeatureArgs{...} }
type EnvFeatureMapInput interface {
	pulumi.Input

	ToEnvFeatureMapOutput() EnvFeatureMapOutput
	ToEnvFeatureMapOutputWithContext(context.Context) EnvFeatureMapOutput
}

type EnvFeatureMap map[string]EnvFeatureInput

func (EnvFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvFeature)(nil)).Elem()
}

func (i EnvFeatureMap) ToEnvFeatureMapOutput() EnvFeatureMapOutput {
	return i.ToEnvFeatureMapOutputWithContext(context.Background())
}

func (i EnvFeatureMap) ToEnvFeatureMapOutputWithContext(ctx context.Context) EnvFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFeatureMapOutput)
}

type EnvFeatureOutput struct{ *pulumi.OutputState }

func (EnvFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvFeature)(nil)).Elem()
}

func (o EnvFeatureOutput) ToEnvFeatureOutput() EnvFeatureOutput {
	return o
}

func (o EnvFeatureOutput) ToEnvFeatureOutputWithContext(ctx context.Context) EnvFeatureOutput {
	return o
}

// The name of the resource.
func (o EnvFeatureOutput) EnvFeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvFeature) pulumi.StringOutput { return v.EnvFeatureName }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o EnvFeatureOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvFeature) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Version information of the Feature. You can query Feature information by using ListEnvironmentFeatures.
func (o EnvFeatureOutput) FeatureVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvFeature) pulumi.StringOutput { return v.FeatureVersion }).(pulumi.StringOutput)
}

// Namespace.
func (o EnvFeatureOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvFeature) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Status.
func (o EnvFeatureOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvFeature) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EnvFeatureArrayOutput struct{ *pulumi.OutputState }

func (EnvFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvFeature)(nil)).Elem()
}

func (o EnvFeatureArrayOutput) ToEnvFeatureArrayOutput() EnvFeatureArrayOutput {
	return o
}

func (o EnvFeatureArrayOutput) ToEnvFeatureArrayOutputWithContext(ctx context.Context) EnvFeatureArrayOutput {
	return o
}

func (o EnvFeatureArrayOutput) Index(i pulumi.IntInput) EnvFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvFeature {
		return vs[0].([]*EnvFeature)[vs[1].(int)]
	}).(EnvFeatureOutput)
}

type EnvFeatureMapOutput struct{ *pulumi.OutputState }

func (EnvFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvFeature)(nil)).Elem()
}

func (o EnvFeatureMapOutput) ToEnvFeatureMapOutput() EnvFeatureMapOutput {
	return o
}

func (o EnvFeatureMapOutput) ToEnvFeatureMapOutputWithContext(ctx context.Context) EnvFeatureMapOutput {
	return o
}

func (o EnvFeatureMapOutput) MapIndex(k pulumi.StringInput) EnvFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvFeature {
		return vs[0].(map[string]*EnvFeature)[vs[1].(string)]
	}).(EnvFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFeatureInput)(nil)).Elem(), &EnvFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFeatureArrayInput)(nil)).Elem(), EnvFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFeatureMapInput)(nil)).Elem(), EnvFeatureMap{})
	pulumi.RegisterOutputType(EnvFeatureOutput{})
	pulumi.RegisterOutputType(EnvFeatureArrayOutput{})
	pulumi.RegisterOutputType(EnvFeatureMapOutput{})
}
