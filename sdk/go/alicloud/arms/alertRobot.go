// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Application Real-Time Monitoring Service (ARMS) Alert Robot resource.
//
// For information about Application Real-Time Monitoring Service (ARMS) Alert Robot and how to use it, see [What is Alert Robot](https://next.api.alibabacloud.com/document/ARMS/2019-08-08/CreateOrUpdateIMRobot).
//
// > **NOTE:** Available since v1.237.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := arms.NewAlertRobot(ctx, "wechat", &arms.AlertRobotArgs{
//				AlertRobotName: pulumi.String("example_wechat"),
//				RobotType:      pulumi.String("wechat"),
//				RobotAddr:      pulumi.String("https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=1c704e23"),
//				DailyNoc:       pulumi.Bool(true),
//				DailyNocTime:   pulumi.String("09:30,17:00"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = arms.NewAlertRobot(ctx, "dingding", &arms.AlertRobotArgs{
//				AlertRobotName: pulumi.String("example_dingding"),
//				RobotType:      pulumi.String("dingding"),
//				RobotAddr:      pulumi.String("https://oapi.dingtalk.com/robot/send?access_token=1c704e23"),
//				DailyNoc:       pulumi.Bool(true),
//				DailyNocTime:   pulumi.String("09:30,17:00"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = arms.NewAlertRobot(ctx, "feishu", &arms.AlertRobotArgs{
//				AlertRobotName: pulumi.String("example_feishu"),
//				RobotType:      pulumi.String("feishu"),
//				RobotAddr:      pulumi.String("https://open.feishu.cn/open-apis/bot/v2/hook/a48efa01"),
//				DailyNoc:       pulumi.Bool(true),
//				DailyNocTime:   pulumi.String("09:30,17:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Real-Time Monitoring Service (ARMS) Alert Robot can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/alertRobot:AlertRobot example <id>
// ```
type AlertRobot struct {
	pulumi.CustomResourceState

	// The name of the resource.
	AlertRobotName pulumi.StringOutput `pulumi:"alertRobotName"`
	// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
	DailyNoc pulumi.BoolPtrOutput `pulumi:"dailyNoc"`
	// The time of the daily notification.
	DailyNocTime pulumi.StringPtrOutput `pulumi:"dailyNocTime"`
	// The webhook url of the robot.
	RobotAddr pulumi.StringOutput `pulumi:"robotAddr"`
	// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
	RobotType pulumi.StringOutput `pulumi:"robotType"`
}

// NewAlertRobot registers a new resource with the given unique name, arguments, and options.
func NewAlertRobot(ctx *pulumi.Context,
	name string, args *AlertRobotArgs, opts ...pulumi.ResourceOption) (*AlertRobot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertRobotName == nil {
		return nil, errors.New("invalid value for required argument 'AlertRobotName'")
	}
	if args.RobotAddr == nil {
		return nil, errors.New("invalid value for required argument 'RobotAddr'")
	}
	if args.RobotType == nil {
		return nil, errors.New("invalid value for required argument 'RobotType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertRobot
	err := ctx.RegisterResource("alicloud:arms/alertRobot:AlertRobot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertRobot gets an existing AlertRobot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertRobot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertRobotState, opts ...pulumi.ResourceOption) (*AlertRobot, error) {
	var resource AlertRobot
	err := ctx.ReadResource("alicloud:arms/alertRobot:AlertRobot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertRobot resources.
type alertRobotState struct {
	// The name of the resource.
	AlertRobotName *string `pulumi:"alertRobotName"`
	// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
	DailyNoc *bool `pulumi:"dailyNoc"`
	// The time of the daily notification.
	DailyNocTime *string `pulumi:"dailyNocTime"`
	// The webhook url of the robot.
	RobotAddr *string `pulumi:"robotAddr"`
	// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
	RobotType *string `pulumi:"robotType"`
}

type AlertRobotState struct {
	// The name of the resource.
	AlertRobotName pulumi.StringPtrInput
	// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
	DailyNoc pulumi.BoolPtrInput
	// The time of the daily notification.
	DailyNocTime pulumi.StringPtrInput
	// The webhook url of the robot.
	RobotAddr pulumi.StringPtrInput
	// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
	RobotType pulumi.StringPtrInput
}

func (AlertRobotState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertRobotState)(nil)).Elem()
}

type alertRobotArgs struct {
	// The name of the resource.
	AlertRobotName string `pulumi:"alertRobotName"`
	// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
	DailyNoc *bool `pulumi:"dailyNoc"`
	// The time of the daily notification.
	DailyNocTime *string `pulumi:"dailyNocTime"`
	// The webhook url of the robot.
	RobotAddr string `pulumi:"robotAddr"`
	// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
	RobotType string `pulumi:"robotType"`
}

// The set of arguments for constructing a AlertRobot resource.
type AlertRobotArgs struct {
	// The name of the resource.
	AlertRobotName pulumi.StringInput
	// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
	DailyNoc pulumi.BoolPtrInput
	// The time of the daily notification.
	DailyNocTime pulumi.StringPtrInput
	// The webhook url of the robot.
	RobotAddr pulumi.StringInput
	// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
	RobotType pulumi.StringInput
}

func (AlertRobotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertRobotArgs)(nil)).Elem()
}

type AlertRobotInput interface {
	pulumi.Input

	ToAlertRobotOutput() AlertRobotOutput
	ToAlertRobotOutputWithContext(ctx context.Context) AlertRobotOutput
}

func (*AlertRobot) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRobot)(nil)).Elem()
}

func (i *AlertRobot) ToAlertRobotOutput() AlertRobotOutput {
	return i.ToAlertRobotOutputWithContext(context.Background())
}

func (i *AlertRobot) ToAlertRobotOutputWithContext(ctx context.Context) AlertRobotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRobotOutput)
}

// AlertRobotArrayInput is an input type that accepts AlertRobotArray and AlertRobotArrayOutput values.
// You can construct a concrete instance of `AlertRobotArrayInput` via:
//
//	AlertRobotArray{ AlertRobotArgs{...} }
type AlertRobotArrayInput interface {
	pulumi.Input

	ToAlertRobotArrayOutput() AlertRobotArrayOutput
	ToAlertRobotArrayOutputWithContext(context.Context) AlertRobotArrayOutput
}

type AlertRobotArray []AlertRobotInput

func (AlertRobotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertRobot)(nil)).Elem()
}

func (i AlertRobotArray) ToAlertRobotArrayOutput() AlertRobotArrayOutput {
	return i.ToAlertRobotArrayOutputWithContext(context.Background())
}

func (i AlertRobotArray) ToAlertRobotArrayOutputWithContext(ctx context.Context) AlertRobotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRobotArrayOutput)
}

// AlertRobotMapInput is an input type that accepts AlertRobotMap and AlertRobotMapOutput values.
// You can construct a concrete instance of `AlertRobotMapInput` via:
//
//	AlertRobotMap{ "key": AlertRobotArgs{...} }
type AlertRobotMapInput interface {
	pulumi.Input

	ToAlertRobotMapOutput() AlertRobotMapOutput
	ToAlertRobotMapOutputWithContext(context.Context) AlertRobotMapOutput
}

type AlertRobotMap map[string]AlertRobotInput

func (AlertRobotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertRobot)(nil)).Elem()
}

func (i AlertRobotMap) ToAlertRobotMapOutput() AlertRobotMapOutput {
	return i.ToAlertRobotMapOutputWithContext(context.Background())
}

func (i AlertRobotMap) ToAlertRobotMapOutputWithContext(ctx context.Context) AlertRobotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRobotMapOutput)
}

type AlertRobotOutput struct{ *pulumi.OutputState }

func (AlertRobotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRobot)(nil)).Elem()
}

func (o AlertRobotOutput) ToAlertRobotOutput() AlertRobotOutput {
	return o
}

func (o AlertRobotOutput) ToAlertRobotOutputWithContext(ctx context.Context) AlertRobotOutput {
	return o
}

// The name of the resource.
func (o AlertRobotOutput) AlertRobotName() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertRobot) pulumi.StringOutput { return v.AlertRobotName }).(pulumi.StringOutput)
}

// Specifies whether the alert robot receives daily notifications. Valid values: `true`: receives daily notifications. `false`: does not receive daily notifications, default to `false`.
func (o AlertRobotOutput) DailyNoc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertRobot) pulumi.BoolPtrOutput { return v.DailyNoc }).(pulumi.BoolPtrOutput)
}

// The time of the daily notification.
func (o AlertRobotOutput) DailyNocTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRobot) pulumi.StringPtrOutput { return v.DailyNocTime }).(pulumi.StringPtrOutput)
}

// The webhook url of the robot.
func (o AlertRobotOutput) RobotAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertRobot) pulumi.StringOutput { return v.RobotAddr }).(pulumi.StringOutput)
}

// The type of the robot, Valid values: `wechat`, `dingding`, `feishu`.
func (o AlertRobotOutput) RobotType() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertRobot) pulumi.StringOutput { return v.RobotType }).(pulumi.StringOutput)
}

type AlertRobotArrayOutput struct{ *pulumi.OutputState }

func (AlertRobotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertRobot)(nil)).Elem()
}

func (o AlertRobotArrayOutput) ToAlertRobotArrayOutput() AlertRobotArrayOutput {
	return o
}

func (o AlertRobotArrayOutput) ToAlertRobotArrayOutputWithContext(ctx context.Context) AlertRobotArrayOutput {
	return o
}

func (o AlertRobotArrayOutput) Index(i pulumi.IntInput) AlertRobotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertRobot {
		return vs[0].([]*AlertRobot)[vs[1].(int)]
	}).(AlertRobotOutput)
}

type AlertRobotMapOutput struct{ *pulumi.OutputState }

func (AlertRobotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertRobot)(nil)).Elem()
}

func (o AlertRobotMapOutput) ToAlertRobotMapOutput() AlertRobotMapOutput {
	return o
}

func (o AlertRobotMapOutput) ToAlertRobotMapOutputWithContext(ctx context.Context) AlertRobotMapOutput {
	return o
}

func (o AlertRobotMapOutput) MapIndex(k pulumi.StringInput) AlertRobotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertRobot {
		return vs[0].(map[string]*AlertRobot)[vs[1].(string)]
	}).(AlertRobotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertRobotInput)(nil)).Elem(), &AlertRobot{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertRobotArrayInput)(nil)).Elem(), AlertRobotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertRobotMapInput)(nil)).Elem(), AlertRobotMap{})
	pulumi.RegisterOutputType(AlertRobotOutput{})
	pulumi.RegisterOutputType(AlertRobotArrayOutput{})
	pulumi.RegisterOutputType(AlertRobotMapOutput{})
}
