// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Synthetic Task resource. Cloud Synthetic task resources.
//
// For information about ARMS Synthetic Task and how to use it, see [What is Synthetic Task](https://next.api.alibabacloud.com/document/ARMS/2019-08-08/CreateTimingSyntheticTask).
//
// > **NOTE:** Available since v1.215.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultResourceGroups, err := resourcemanager.GetResourceGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = arms.NewSyntheticTask(ctx, "defaultSyntheticTask", &arms.SyntheticTaskArgs{
//				Monitors: arms.SyntheticTaskMonitorArray{
//					&arms.SyntheticTaskMonitorArgs{
//						CityCode:     pulumi.String("1200101"),
//						OperatorCode: pulumi.String("246"),
//						ClientType:   pulumi.Int(4),
//					},
//				},
//				SyntheticTaskName: pulumi.String(name),
//				CustomPeriod: &arms.SyntheticTaskCustomPeriodArgs{
//					EndHour:   pulumi.Int(12),
//					StartHour: pulumi.Int(11),
//				},
//				AvailableAssertions: arms.SyntheticTaskAvailableAssertionArray{
//					&arms.SyntheticTaskAvailableAssertionArgs{
//						Type:     pulumi.String("IcmpPackLoss"),
//						Operator: pulumi.String("neq"),
//						Expect:   pulumi.String("200"),
//						Target:   pulumi.String("example"),
//					},
//					&arms.SyntheticTaskAvailableAssertionArgs{
//						Type:     pulumi.String("IcmpPackAvgLatency"),
//						Operator: pulumi.String("lte"),
//						Expect:   pulumi.String("1000"),
//					},
//					&arms.SyntheticTaskAvailableAssertionArgs{
//						Type:     pulumi.String("IcmpPackMaxLatency"),
//						Operator: pulumi.String("lte"),
//						Expect:   pulumi.String("10000"),
//					},
//				},
//				Tags: pulumi.Map{
//					"Created": pulumi.Any("TF"),
//					"For":     pulumi.Any("example"),
//				},
//				Status: pulumi.String("RUNNING"),
//				MonitorConf: &arms.SyntheticTaskMonitorConfArgs{
//					NetTcp: &arms.SyntheticTaskMonitorConfNetTcpArgs{
//						TracertTimeout: pulumi.Int(1050),
//						TargetUrl:      pulumi.String("www.aliyun.com"),
//						ConnectTimes:   pulumi.Int(6),
//						Interval:       pulumi.Int(300),
//						Timeout:        pulumi.Int(3000),
//						TracertNumMax:  pulumi.Int(2),
//					},
//					NetDns: &arms.SyntheticTaskMonitorConfNetDnsArgs{
//						QueryMethod:     pulumi.Int(1),
//						Timeout:         pulumi.Int(5050),
//						TargetUrl:       pulumi.String("www.aliyun.com"),
//						DnsServerIpType: pulumi.Int(1),
//						NsServer:        pulumi.String("61.128.114.167"),
//					},
//					ApiHttp: &arms.SyntheticTaskMonitorConfApiHttpArgs{
//						Timeout:   pulumi.Int(10050),
//						TargetUrl: pulumi.String("https://www.aliyun.com"),
//						Method:    pulumi.String("POST"),
//						RequestHeaders: pulumi.Map{
//							"key1": pulumi.Any("value1"),
//						},
//						RequestBody: &arms.SyntheticTaskMonitorConfApiHttpRequestBodyArgs{
//							Content: pulumi.String("example2"),
//							Type:    pulumi.String("text/html"),
//						},
//						ConnectTimeout: pulumi.Int(6000),
//					},
//					Website: &arms.SyntheticTaskMonitorConfWebsiteArgs{
//						SlowElementThreshold:   pulumi.Int(5005),
//						VerifyStringBlacklist:  pulumi.String("Failed"),
//						ElementBlacklist:       pulumi.String("a.jpg"),
//						DisableCompression:     pulumi.Int(1),
//						IgnoreCertificateError: pulumi.Int(0),
//						MonitorTimeout:         pulumi.Int(20000),
//						Redirection:            pulumi.Int(0),
//						DnsHijackWhitelist:     pulumi.String("www.aliyun.com:203.0.3.55"),
//						PageTamper:             pulumi.String("www.aliyun.com:|/cc/bb/a.gif"),
//						FlowHijackJumpTimes:    pulumi.Int(10),
//						CustomHeader:           pulumi.Int(1),
//						DisableCache:           pulumi.Int(1),
//						VerifyStringWhitelist:  pulumi.String("Senyuan"),
//						TargetUrl:              pulumi.String("http://www.aliyun.com"),
//						AutomaticScrolling:     pulumi.Int(1),
//						WaitCompletionTime:     pulumi.Int(5005),
//						FlowHijackLogo:         pulumi.String("senyuan1"),
//						CustomHeaderContent: pulumi.Map{
//							"key1": pulumi.Any("value1"),
//						},
//						FilterInvalidIp: pulumi.Int(0),
//					},
//					FileDownload: &arms.SyntheticTaskMonitorConfFileDownloadArgs{
//						WhiteList:                           pulumi.String("www.aliyun.com:203.0.3.55"),
//						MonitorTimeout:                      pulumi.Int(1050),
//						IgnoreCertificateUntrustworthyError: pulumi.Int(0),
//						Redirection:                         pulumi.Int(0),
//						IgnoreCertificateCanceledError:      pulumi.Int(0),
//						IgnoreCertificateAuthError:          pulumi.Int(0),
//						IgnoreCertificateOutOfDateError:     pulumi.Int(0),
//						IgnoreCertificateUsingError:         pulumi.Int(0),
//						ConnectionTimeout:                   pulumi.Int(6090),
//						IgnoreInvalidHostError:              pulumi.Int(0),
//						VerifyWay:                           pulumi.Int(0),
//						CustomHeaderContent: pulumi.Map{
//							"key1": pulumi.Any("value1"),
//						},
//						TargetUrl:                    pulumi.String("https://www.aliyun.com"),
//						DownloadKernel:               pulumi.Int(0),
//						QuickProtocol:                pulumi.Int(2),
//						IgnoreCertificateStatusError: pulumi.Int(1),
//						TransmissionSize:             pulumi.Int(128),
//						ValidateKeywords:             pulumi.String("senyuan1"),
//					},
//					Stream: &arms.SyntheticTaskMonitorConfStreamArgs{
//						StreamMonitorTimeout: pulumi.Int(10),
//						StreamAddressType:    pulumi.Int(0),
//						PlayerType:           pulumi.Int(2),
//						CustomHeaderContent: pulumi.Map{
//							"key1": pulumi.Any("value1"),
//						},
//						WhiteList:  pulumi.String("www.aliyun.com:203.0.3.55"),
//						TargetUrl:  pulumi.String("https://acd-assets.alicdn.com:443/2021productweek/week1_s.mp4"),
//						StreamType: pulumi.Int(1),
//					},
//					NetIcmp: &arms.SyntheticTaskMonitorConfNetIcmpArgs{
//						TargetUrl:      pulumi.String("www.aliyun.com"),
//						Interval:       pulumi.Int(200),
//						PackageNum:     pulumi.Int(36),
//						PackageSize:    pulumi.Int(512),
//						Timeout:        pulumi.Int(1000),
//						TracertEnable:  pulumi.Bool(true),
//						TracertNumMax:  pulumi.Int(1),
//						TracertTimeout: pulumi.Int(1200),
//					},
//				},
//				TaskType:        pulumi.Int(1),
//				Frequency:       pulumi.String("1h"),
//				MonitorCategory: pulumi.Int(1),
//				CommonSetting: &arms.SyntheticTaskCommonSettingArgs{
//					XtraceRegion: pulumi.String("cn-beijing"),
//					CustomHost: &arms.SyntheticTaskCommonSettingCustomHostArgs{
//						Hosts: arms.SyntheticTaskCommonSettingCustomHostHostArray{
//							&arms.SyntheticTaskCommonSettingCustomHostHostArgs{
//								Domain: pulumi.String("www.a.aliyun.com"),
//								Ips: pulumi.StringArray{
//									pulumi.String("153.3.238.102"),
//								},
//								IpType: pulumi.Int(0),
//							},
//							&arms.SyntheticTaskCommonSettingCustomHostHostArgs{
//								Domain: pulumi.String("www.shifen.com"),
//								Ips: pulumi.StringArray{
//									pulumi.String("153.3.238.110"),
//									pulumi.String("114.114.114.114"),
//									pulumi.String("127.0.0.1"),
//								},
//								IpType: pulumi.Int(1),
//							},
//							&arms.SyntheticTaskCommonSettingCustomHostHostArgs{
//								Domain: pulumi.String("www.aliyun.com"),
//								Ips: pulumi.StringArray{
//									pulumi.String("153.3.238.110"),
//									pulumi.String("180.101.50.242"),
//									pulumi.String("180.101.50.188"),
//								},
//								IpType: pulumi.Int(0),
//							},
//						},
//						SelectType: pulumi.Int(1),
//					},
//					MonitorSamples:  pulumi.Int(1),
//					IpType:          pulumi.Int(1),
//					IsOpenTrace:     pulumi.Bool(true),
//					TraceClientType: pulumi.Int(1),
//				},
//				ResourceGroupId: *pulumi.String(defaultResourceGroups.Ids[1]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ARMS Synthetic Task can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/syntheticTask:SyntheticTask example <id>
// ```
type SyntheticTask struct {
	pulumi.CustomResourceState

	// Assertion List. See `availableAssertions` below.
	AvailableAssertions SyntheticTaskAvailableAssertionArrayOutput `pulumi:"availableAssertions"`
	// Common settings. See `commonSetting` below.
	CommonSetting SyntheticTaskCommonSettingOutput `pulumi:"commonSetting"`
	// Custom Cycle. See `customPeriod` below.
	CustomPeriod SyntheticTaskCustomPeriodPtrOutput `pulumi:"customPeriod"`
	// Frequency.
	Frequency pulumi.StringOutput `pulumi:"frequency"`
	// Classification of selected monitors.
	MonitorCategory pulumi.IntOutput `pulumi:"monitorCategory"`
	// Monitoring configuration. See `monitorConf` below.
	MonitorConf SyntheticTaskMonitorConfOutput `pulumi:"monitorConf"`
	// List of selected monitors. See `monitors` below.
	Monitors SyntheticTaskMonitorArrayOutput `pulumi:"monitors"`
	// Describes which resource group the resource belongs.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// task status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of synthetic task.
	SyntheticTaskName pulumi.StringOutput `pulumi:"syntheticTaskName"`
	// The list of tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The type of synthetic task.
	TaskType pulumi.IntOutput `pulumi:"taskType"`
}

// NewSyntheticTask registers a new resource with the given unique name, arguments, and options.
func NewSyntheticTask(ctx *pulumi.Context,
	name string, args *SyntheticTaskArgs, opts ...pulumi.ResourceOption) (*SyntheticTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.MonitorCategory == nil {
		return nil, errors.New("invalid value for required argument 'MonitorCategory'")
	}
	if args.MonitorConf == nil {
		return nil, errors.New("invalid value for required argument 'MonitorConf'")
	}
	if args.Monitors == nil {
		return nil, errors.New("invalid value for required argument 'Monitors'")
	}
	if args.SyntheticTaskName == nil {
		return nil, errors.New("invalid value for required argument 'SyntheticTaskName'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticTask
	err := ctx.RegisterResource("alicloud:arms/syntheticTask:SyntheticTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticTask gets an existing SyntheticTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticTaskState, opts ...pulumi.ResourceOption) (*SyntheticTask, error) {
	var resource SyntheticTask
	err := ctx.ReadResource("alicloud:arms/syntheticTask:SyntheticTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticTask resources.
type syntheticTaskState struct {
	// Assertion List. See `availableAssertions` below.
	AvailableAssertions []SyntheticTaskAvailableAssertion `pulumi:"availableAssertions"`
	// Common settings. See `commonSetting` below.
	CommonSetting *SyntheticTaskCommonSetting `pulumi:"commonSetting"`
	// Custom Cycle. See `customPeriod` below.
	CustomPeriod *SyntheticTaskCustomPeriod `pulumi:"customPeriod"`
	// Frequency.
	Frequency *string `pulumi:"frequency"`
	// Classification of selected monitors.
	MonitorCategory *int `pulumi:"monitorCategory"`
	// Monitoring configuration. See `monitorConf` below.
	MonitorConf *SyntheticTaskMonitorConf `pulumi:"monitorConf"`
	// List of selected monitors. See `monitors` below.
	Monitors []SyntheticTaskMonitor `pulumi:"monitors"`
	// Describes which resource group the resource belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// task status.
	Status *string `pulumi:"status"`
	// The name of synthetic task.
	SyntheticTaskName *string `pulumi:"syntheticTaskName"`
	// The list of tags.
	Tags map[string]interface{} `pulumi:"tags"`
	// The type of synthetic task.
	TaskType *int `pulumi:"taskType"`
}

type SyntheticTaskState struct {
	// Assertion List. See `availableAssertions` below.
	AvailableAssertions SyntheticTaskAvailableAssertionArrayInput
	// Common settings. See `commonSetting` below.
	CommonSetting SyntheticTaskCommonSettingPtrInput
	// Custom Cycle. See `customPeriod` below.
	CustomPeriod SyntheticTaskCustomPeriodPtrInput
	// Frequency.
	Frequency pulumi.StringPtrInput
	// Classification of selected monitors.
	MonitorCategory pulumi.IntPtrInput
	// Monitoring configuration. See `monitorConf` below.
	MonitorConf SyntheticTaskMonitorConfPtrInput
	// List of selected monitors. See `monitors` below.
	Monitors SyntheticTaskMonitorArrayInput
	// Describes which resource group the resource belongs.
	ResourceGroupId pulumi.StringPtrInput
	// task status.
	Status pulumi.StringPtrInput
	// The name of synthetic task.
	SyntheticTaskName pulumi.StringPtrInput
	// The list of tags.
	Tags pulumi.MapInput
	// The type of synthetic task.
	TaskType pulumi.IntPtrInput
}

func (SyntheticTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticTaskState)(nil)).Elem()
}

type syntheticTaskArgs struct {
	// Assertion List. See `availableAssertions` below.
	AvailableAssertions []SyntheticTaskAvailableAssertion `pulumi:"availableAssertions"`
	// Common settings. See `commonSetting` below.
	CommonSetting *SyntheticTaskCommonSetting `pulumi:"commonSetting"`
	// Custom Cycle. See `customPeriod` below.
	CustomPeriod *SyntheticTaskCustomPeriod `pulumi:"customPeriod"`
	// Frequency.
	Frequency string `pulumi:"frequency"`
	// Classification of selected monitors.
	MonitorCategory int `pulumi:"monitorCategory"`
	// Monitoring configuration. See `monitorConf` below.
	MonitorConf SyntheticTaskMonitorConf `pulumi:"monitorConf"`
	// List of selected monitors. See `monitors` below.
	Monitors []SyntheticTaskMonitor `pulumi:"monitors"`
	// Describes which resource group the resource belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// task status.
	Status *string `pulumi:"status"`
	// The name of synthetic task.
	SyntheticTaskName string `pulumi:"syntheticTaskName"`
	// The list of tags.
	Tags map[string]interface{} `pulumi:"tags"`
	// The type of synthetic task.
	TaskType int `pulumi:"taskType"`
}

// The set of arguments for constructing a SyntheticTask resource.
type SyntheticTaskArgs struct {
	// Assertion List. See `availableAssertions` below.
	AvailableAssertions SyntheticTaskAvailableAssertionArrayInput
	// Common settings. See `commonSetting` below.
	CommonSetting SyntheticTaskCommonSettingPtrInput
	// Custom Cycle. See `customPeriod` below.
	CustomPeriod SyntheticTaskCustomPeriodPtrInput
	// Frequency.
	Frequency pulumi.StringInput
	// Classification of selected monitors.
	MonitorCategory pulumi.IntInput
	// Monitoring configuration. See `monitorConf` below.
	MonitorConf SyntheticTaskMonitorConfInput
	// List of selected monitors. See `monitors` below.
	Monitors SyntheticTaskMonitorArrayInput
	// Describes which resource group the resource belongs.
	ResourceGroupId pulumi.StringPtrInput
	// task status.
	Status pulumi.StringPtrInput
	// The name of synthetic task.
	SyntheticTaskName pulumi.StringInput
	// The list of tags.
	Tags pulumi.MapInput
	// The type of synthetic task.
	TaskType pulumi.IntInput
}

func (SyntheticTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticTaskArgs)(nil)).Elem()
}

type SyntheticTaskInput interface {
	pulumi.Input

	ToSyntheticTaskOutput() SyntheticTaskOutput
	ToSyntheticTaskOutputWithContext(ctx context.Context) SyntheticTaskOutput
}

func (*SyntheticTask) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTask)(nil)).Elem()
}

func (i *SyntheticTask) ToSyntheticTaskOutput() SyntheticTaskOutput {
	return i.ToSyntheticTaskOutputWithContext(context.Background())
}

func (i *SyntheticTask) ToSyntheticTaskOutputWithContext(ctx context.Context) SyntheticTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskOutput)
}

// SyntheticTaskArrayInput is an input type that accepts SyntheticTaskArray and SyntheticTaskArrayOutput values.
// You can construct a concrete instance of `SyntheticTaskArrayInput` via:
//
//	SyntheticTaskArray{ SyntheticTaskArgs{...} }
type SyntheticTaskArrayInput interface {
	pulumi.Input

	ToSyntheticTaskArrayOutput() SyntheticTaskArrayOutput
	ToSyntheticTaskArrayOutputWithContext(context.Context) SyntheticTaskArrayOutput
}

type SyntheticTaskArray []SyntheticTaskInput

func (SyntheticTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticTask)(nil)).Elem()
}

func (i SyntheticTaskArray) ToSyntheticTaskArrayOutput() SyntheticTaskArrayOutput {
	return i.ToSyntheticTaskArrayOutputWithContext(context.Background())
}

func (i SyntheticTaskArray) ToSyntheticTaskArrayOutputWithContext(ctx context.Context) SyntheticTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskArrayOutput)
}

// SyntheticTaskMapInput is an input type that accepts SyntheticTaskMap and SyntheticTaskMapOutput values.
// You can construct a concrete instance of `SyntheticTaskMapInput` via:
//
//	SyntheticTaskMap{ "key": SyntheticTaskArgs{...} }
type SyntheticTaskMapInput interface {
	pulumi.Input

	ToSyntheticTaskMapOutput() SyntheticTaskMapOutput
	ToSyntheticTaskMapOutputWithContext(context.Context) SyntheticTaskMapOutput
}

type SyntheticTaskMap map[string]SyntheticTaskInput

func (SyntheticTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticTask)(nil)).Elem()
}

func (i SyntheticTaskMap) ToSyntheticTaskMapOutput() SyntheticTaskMapOutput {
	return i.ToSyntheticTaskMapOutputWithContext(context.Background())
}

func (i SyntheticTaskMap) ToSyntheticTaskMapOutputWithContext(ctx context.Context) SyntheticTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMapOutput)
}

type SyntheticTaskOutput struct{ *pulumi.OutputState }

func (SyntheticTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTask)(nil)).Elem()
}

func (o SyntheticTaskOutput) ToSyntheticTaskOutput() SyntheticTaskOutput {
	return o
}

func (o SyntheticTaskOutput) ToSyntheticTaskOutputWithContext(ctx context.Context) SyntheticTaskOutput {
	return o
}

// Assertion List. See `availableAssertions` below.
func (o SyntheticTaskOutput) AvailableAssertions() SyntheticTaskAvailableAssertionArrayOutput {
	return o.ApplyT(func(v *SyntheticTask) SyntheticTaskAvailableAssertionArrayOutput { return v.AvailableAssertions }).(SyntheticTaskAvailableAssertionArrayOutput)
}

// Common settings. See `commonSetting` below.
func (o SyntheticTaskOutput) CommonSetting() SyntheticTaskCommonSettingOutput {
	return o.ApplyT(func(v *SyntheticTask) SyntheticTaskCommonSettingOutput { return v.CommonSetting }).(SyntheticTaskCommonSettingOutput)
}

// Custom Cycle. See `customPeriod` below.
func (o SyntheticTaskOutput) CustomPeriod() SyntheticTaskCustomPeriodPtrOutput {
	return o.ApplyT(func(v *SyntheticTask) SyntheticTaskCustomPeriodPtrOutput { return v.CustomPeriod }).(SyntheticTaskCustomPeriodPtrOutput)
}

// Frequency.
func (o SyntheticTaskOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

// Classification of selected monitors.
func (o SyntheticTaskOutput) MonitorCategory() pulumi.IntOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.IntOutput { return v.MonitorCategory }).(pulumi.IntOutput)
}

// Monitoring configuration. See `monitorConf` below.
func (o SyntheticTaskOutput) MonitorConf() SyntheticTaskMonitorConfOutput {
	return o.ApplyT(func(v *SyntheticTask) SyntheticTaskMonitorConfOutput { return v.MonitorConf }).(SyntheticTaskMonitorConfOutput)
}

// List of selected monitors. See `monitors` below.
func (o SyntheticTaskOutput) Monitors() SyntheticTaskMonitorArrayOutput {
	return o.ApplyT(func(v *SyntheticTask) SyntheticTaskMonitorArrayOutput { return v.Monitors }).(SyntheticTaskMonitorArrayOutput)
}

// Describes which resource group the resource belongs.
func (o SyntheticTaskOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// task status.
func (o SyntheticTaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of synthetic task.
func (o SyntheticTaskOutput) SyntheticTaskName() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.StringOutput { return v.SyntheticTaskName }).(pulumi.StringOutput)
}

// The list of tags.
func (o SyntheticTaskOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The type of synthetic task.
func (o SyntheticTaskOutput) TaskType() pulumi.IntOutput {
	return o.ApplyT(func(v *SyntheticTask) pulumi.IntOutput { return v.TaskType }).(pulumi.IntOutput)
}

type SyntheticTaskArrayOutput struct{ *pulumi.OutputState }

func (SyntheticTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticTask)(nil)).Elem()
}

func (o SyntheticTaskArrayOutput) ToSyntheticTaskArrayOutput() SyntheticTaskArrayOutput {
	return o
}

func (o SyntheticTaskArrayOutput) ToSyntheticTaskArrayOutputWithContext(ctx context.Context) SyntheticTaskArrayOutput {
	return o
}

func (o SyntheticTaskArrayOutput) Index(i pulumi.IntInput) SyntheticTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticTask {
		return vs[0].([]*SyntheticTask)[vs[1].(int)]
	}).(SyntheticTaskOutput)
}

type SyntheticTaskMapOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticTask)(nil)).Elem()
}

func (o SyntheticTaskMapOutput) ToSyntheticTaskMapOutput() SyntheticTaskMapOutput {
	return o
}

func (o SyntheticTaskMapOutput) ToSyntheticTaskMapOutputWithContext(ctx context.Context) SyntheticTaskMapOutput {
	return o
}

func (o SyntheticTaskMapOutput) MapIndex(k pulumi.StringInput) SyntheticTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticTask {
		return vs[0].(map[string]*SyntheticTask)[vs[1].(string)]
	}).(SyntheticTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskInput)(nil)).Elem(), &SyntheticTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskArrayInput)(nil)).Elem(), SyntheticTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMapInput)(nil)).Elem(), SyntheticTaskMap{})
	pulumi.RegisterOutputType(SyntheticTaskOutput{})
	pulumi.RegisterOutputType(SyntheticTaskArrayOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMapOutput{})
}
