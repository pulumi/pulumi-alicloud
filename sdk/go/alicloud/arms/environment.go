// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Environment resource. The arms environment.
//
// For information about ARMS Environment and how to use it, see [What is Environment](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-createenvironment).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Import
//
// ARMS Environment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/environment:Environment example <id>
// ```
type Environment struct {
	pulumi.CustomResourceState

	// The locale. The default is Chinese zh | en.
	AliyunLang pulumi.StringPtrOutput `pulumi:"aliyunLang"`
	// The id or vpcId of the bound container instance.
	BindResourceId pulumi.StringPtrOutput `pulumi:"bindResourceId"`
	// The first ID of the resource.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The name of the resource.
	EnvironmentName pulumi.StringPtrOutput `pulumi:"environmentName"`
	// Subtype of environment:
	// - Type of CS: ACK is currently supported.
	// - Type of ECS: currently supports ECS.
	// - Type of Cloud: currently supports Cloud.
	EnvironmentSubType pulumi.StringOutput `pulumi:"environmentSubType"`
	// Type of environment.
	EnvironmentType pulumi.StringOutput `pulumi:"environmentType"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The tag of the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentSubType == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentSubType'")
	}
	if args.EnvironmentType == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("alicloud:arms/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("alicloud:arms/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// The locale. The default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// The id or vpcId of the bound container instance.
	BindResourceId *string `pulumi:"bindResourceId"`
	// The first ID of the resource.
	EnvironmentId *string `pulumi:"environmentId"`
	// The name of the resource.
	EnvironmentName *string `pulumi:"environmentName"`
	// Subtype of environment:
	// - Type of CS: ACK is currently supported.
	// - Type of ECS: currently supports ECS.
	// - Type of Cloud: currently supports Cloud.
	EnvironmentSubType *string `pulumi:"environmentSubType"`
	// Type of environment.
	EnvironmentType *string `pulumi:"environmentType"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

type EnvironmentState struct {
	// The locale. The default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// The id or vpcId of the bound container instance.
	BindResourceId pulumi.StringPtrInput
	// The first ID of the resource.
	EnvironmentId pulumi.StringPtrInput
	// The name of the resource.
	EnvironmentName pulumi.StringPtrInput
	// Subtype of environment:
	// - Type of CS: ACK is currently supported.
	// - Type of ECS: currently supports ECS.
	// - Type of Cloud: currently supports Cloud.
	EnvironmentSubType pulumi.StringPtrInput
	// Type of environment.
	EnvironmentType pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.MapInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// The locale. The default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// The id or vpcId of the bound container instance.
	BindResourceId *string `pulumi:"bindResourceId"`
	// The name of the resource.
	EnvironmentName *string `pulumi:"environmentName"`
	// Subtype of environment:
	// - Type of CS: ACK is currently supported.
	// - Type of ECS: currently supports ECS.
	// - Type of Cloud: currently supports Cloud.
	EnvironmentSubType string `pulumi:"environmentSubType"`
	// Type of environment.
	EnvironmentType string `pulumi:"environmentType"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// The locale. The default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// The id or vpcId of the bound container instance.
	BindResourceId pulumi.StringPtrInput
	// The name of the resource.
	EnvironmentName pulumi.StringPtrInput
	// Subtype of environment:
	// - Type of CS: ACK is currently supported.
	// - Type of ECS: currently supports ECS.
	// - Type of Cloud: currently supports Cloud.
	EnvironmentSubType pulumi.StringInput
	// Type of environment.
	EnvironmentType pulumi.StringInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.MapInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//	EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//	EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

// The locale. The default is Chinese zh | en.
func (o EnvironmentOutput) AliyunLang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.AliyunLang }).(pulumi.StringPtrOutput)
}

// The id or vpcId of the bound container instance.
func (o EnvironmentOutput) BindResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.BindResourceId }).(pulumi.StringPtrOutput)
}

// The first ID of the resource.
func (o EnvironmentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o EnvironmentOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// Subtype of environment:
// - Type of CS: ACK is currently supported.
// - Type of ECS: currently supports ECS.
// - Type of Cloud: currently supports Cloud.
func (o EnvironmentOutput) EnvironmentSubType() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentSubType }).(pulumi.StringOutput)
}

// Type of environment.
func (o EnvironmentOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentType }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o EnvironmentOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The tag of the resource.
func (o EnvironmentOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Environment) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].([]*Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].(map[string]*Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentArrayInput)(nil)).Elem(), EnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMapInput)(nil)).Elem(), EnvironmentMap{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}
