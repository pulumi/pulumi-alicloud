// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DispatchRuleGroupRule struct {
	// The ID of the group rule.
	GroupId *int `pulumi:"groupId"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupInterval int `pulumi:"groupInterval"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupWaitTime int `pulumi:"groupWaitTime"`
	// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	GroupingFields []string `pulumi:"groupingFields"`
	// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
	RepeatInterval *int `pulumi:"repeatInterval"`
}

// DispatchRuleGroupRuleInput is an input type that accepts DispatchRuleGroupRuleArgs and DispatchRuleGroupRuleOutput values.
// You can construct a concrete instance of `DispatchRuleGroupRuleInput` via:
//
//	DispatchRuleGroupRuleArgs{...}
type DispatchRuleGroupRuleInput interface {
	pulumi.Input

	ToDispatchRuleGroupRuleOutput() DispatchRuleGroupRuleOutput
	ToDispatchRuleGroupRuleOutputWithContext(context.Context) DispatchRuleGroupRuleOutput
}

type DispatchRuleGroupRuleArgs struct {
	// The ID of the group rule.
	GroupId pulumi.IntPtrInput `pulumi:"groupId"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupInterval pulumi.IntInput `pulumi:"groupInterval"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupWaitTime pulumi.IntInput `pulumi:"groupWaitTime"`
	// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	GroupingFields pulumi.StringArrayInput `pulumi:"groupingFields"`
	// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
	RepeatInterval pulumi.IntPtrInput `pulumi:"repeatInterval"`
}

func (DispatchRuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleGroupRule)(nil)).Elem()
}

func (i DispatchRuleGroupRuleArgs) ToDispatchRuleGroupRuleOutput() DispatchRuleGroupRuleOutput {
	return i.ToDispatchRuleGroupRuleOutputWithContext(context.Background())
}

func (i DispatchRuleGroupRuleArgs) ToDispatchRuleGroupRuleOutputWithContext(ctx context.Context) DispatchRuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleGroupRuleOutput)
}

// DispatchRuleGroupRuleArrayInput is an input type that accepts DispatchRuleGroupRuleArray and DispatchRuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `DispatchRuleGroupRuleArrayInput` via:
//
//	DispatchRuleGroupRuleArray{ DispatchRuleGroupRuleArgs{...} }
type DispatchRuleGroupRuleArrayInput interface {
	pulumi.Input

	ToDispatchRuleGroupRuleArrayOutput() DispatchRuleGroupRuleArrayOutput
	ToDispatchRuleGroupRuleArrayOutputWithContext(context.Context) DispatchRuleGroupRuleArrayOutput
}

type DispatchRuleGroupRuleArray []DispatchRuleGroupRuleInput

func (DispatchRuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleGroupRule)(nil)).Elem()
}

func (i DispatchRuleGroupRuleArray) ToDispatchRuleGroupRuleArrayOutput() DispatchRuleGroupRuleArrayOutput {
	return i.ToDispatchRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i DispatchRuleGroupRuleArray) ToDispatchRuleGroupRuleArrayOutputWithContext(ctx context.Context) DispatchRuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleGroupRuleArrayOutput)
}

type DispatchRuleGroupRuleOutput struct{ *pulumi.OutputState }

func (DispatchRuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleGroupRule)(nil)).Elem()
}

func (o DispatchRuleGroupRuleOutput) ToDispatchRuleGroupRuleOutput() DispatchRuleGroupRuleOutput {
	return o
}

func (o DispatchRuleGroupRuleOutput) ToDispatchRuleGroupRuleOutputWithContext(ctx context.Context) DispatchRuleGroupRuleOutput {
	return o
}

// The ID of the group rule.
func (o DispatchRuleGroupRuleOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DispatchRuleGroupRule) *int { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
func (o DispatchRuleGroupRuleOutput) GroupInterval() pulumi.IntOutput {
	return o.ApplyT(func(v DispatchRuleGroupRule) int { return v.GroupInterval }).(pulumi.IntOutput)
}

// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
func (o DispatchRuleGroupRuleOutput) GroupWaitTime() pulumi.IntOutput {
	return o.ApplyT(func(v DispatchRuleGroupRule) int { return v.GroupWaitTime }).(pulumi.IntOutput)
}

// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
func (o DispatchRuleGroupRuleOutput) GroupingFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DispatchRuleGroupRule) []string { return v.GroupingFields }).(pulumi.StringArrayOutput)
}

// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
func (o DispatchRuleGroupRuleOutput) RepeatInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DispatchRuleGroupRule) *int { return v.RepeatInterval }).(pulumi.IntPtrOutput)
}

type DispatchRuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleGroupRule)(nil)).Elem()
}

func (o DispatchRuleGroupRuleArrayOutput) ToDispatchRuleGroupRuleArrayOutput() DispatchRuleGroupRuleArrayOutput {
	return o
}

func (o DispatchRuleGroupRuleArrayOutput) ToDispatchRuleGroupRuleArrayOutputWithContext(ctx context.Context) DispatchRuleGroupRuleArrayOutput {
	return o
}

func (o DispatchRuleGroupRuleArrayOutput) Index(i pulumi.IntInput) DispatchRuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleGroupRule {
		return vs[0].([]DispatchRuleGroupRule)[vs[1].(int)]
	}).(DispatchRuleGroupRuleOutput)
}

type DispatchRuleLabelMatchExpressionGrid struct {
	// Sets the dispatch rule. See `labelMatchExpressionGroups` below.
	LabelMatchExpressionGroups []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup `pulumi:"labelMatchExpressionGroups"`
}

// DispatchRuleLabelMatchExpressionGridInput is an input type that accepts DispatchRuleLabelMatchExpressionGridArgs and DispatchRuleLabelMatchExpressionGridOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridInput` via:
//
//	DispatchRuleLabelMatchExpressionGridArgs{...}
type DispatchRuleLabelMatchExpressionGridInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridOutput() DispatchRuleLabelMatchExpressionGridOutput
	ToDispatchRuleLabelMatchExpressionGridOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridOutput
}

type DispatchRuleLabelMatchExpressionGridArgs struct {
	// Sets the dispatch rule. See `labelMatchExpressionGroups` below.
	LabelMatchExpressionGroups DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput `pulumi:"labelMatchExpressionGroups"`
}

func (DispatchRuleLabelMatchExpressionGridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridArgs) ToDispatchRuleLabelMatchExpressionGridOutput() DispatchRuleLabelMatchExpressionGridOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridArgs) ToDispatchRuleLabelMatchExpressionGridOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridOutput)
}

// DispatchRuleLabelMatchExpressionGridArrayInput is an input type that accepts DispatchRuleLabelMatchExpressionGridArray and DispatchRuleLabelMatchExpressionGridArrayOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridArrayInput` via:
//
//	DispatchRuleLabelMatchExpressionGridArray{ DispatchRuleLabelMatchExpressionGridArgs{...} }
type DispatchRuleLabelMatchExpressionGridArrayInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridArrayOutput() DispatchRuleLabelMatchExpressionGridArrayOutput
	ToDispatchRuleLabelMatchExpressionGridArrayOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridArrayOutput
}

type DispatchRuleLabelMatchExpressionGridArray []DispatchRuleLabelMatchExpressionGridInput

func (DispatchRuleLabelMatchExpressionGridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridArray) ToDispatchRuleLabelMatchExpressionGridArrayOutput() DispatchRuleLabelMatchExpressionGridArrayOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridArrayOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridArray) ToDispatchRuleLabelMatchExpressionGridArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridArrayOutput)
}

type DispatchRuleLabelMatchExpressionGridOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridOutput) ToDispatchRuleLabelMatchExpressionGridOutput() DispatchRuleLabelMatchExpressionGridOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridOutput) ToDispatchRuleLabelMatchExpressionGridOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridOutput {
	return o
}

// Sets the dispatch rule. See `labelMatchExpressionGroups` below.
func (o DispatchRuleLabelMatchExpressionGridOutput) LabelMatchExpressionGroups() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o.ApplyT(func(v DispatchRuleLabelMatchExpressionGrid) []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup {
		return v.LabelMatchExpressionGroups
	}).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput)
}

type DispatchRuleLabelMatchExpressionGridArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridArrayOutput) ToDispatchRuleLabelMatchExpressionGridArrayOutput() DispatchRuleLabelMatchExpressionGridArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridArrayOutput) ToDispatchRuleLabelMatchExpressionGridArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridArrayOutput) Index(i pulumi.IntInput) DispatchRuleLabelMatchExpressionGridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleLabelMatchExpressionGrid {
		return vs[0].([]DispatchRuleLabelMatchExpressionGrid)[vs[1].(int)]
	}).(DispatchRuleLabelMatchExpressionGridOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup struct {
	// Sets the dispatch rule. See `labelMatchExpressions` below.
	LabelMatchExpressions []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression `pulumi:"labelMatchExpressions"`
}

// DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput is an input type that accepts DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs and DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput` via:
//
//	DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{...}
type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput
	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs struct {
	// Sets the dispatch rule. See `labelMatchExpressions` below.
	LabelMatchExpressions DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput `pulumi:"labelMatchExpressions"`
}

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput)
}

// DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput is an input type that accepts DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray and DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput` via:
//
//	DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray{ DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{...} }
type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput
	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return o
}

// Sets the dispatch rule. See `labelMatchExpressions` below.
func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) LabelMatchExpressions() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o.ApplyT(func(v DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup) []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression {
		return v.LabelMatchExpressions
	}).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) Index(i pulumi.IntInput) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup {
		return vs[0].([]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroup)[vs[1].(int)]
	}).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression struct {
	// The key of the tag of the dispatch rule. Valid values:
	// * _aliyun_arms_userid: user ID
	// * _aliyun_arms_involvedObject_kind: type of the associated object
	// * _aliyun_arms_involvedObject_id: ID of the associated object
	// * _aliyun_arms_involvedObject_name: name of the associated object
	// * _aliyun_arms_alert_name: alert name
	// * _aliyun_arms_alert_rule_id: alert rule ID
	// * _aliyun_arms_alert_type: alert type
	// * _aliyun_arms_alert_level: alert severity
	Key string `pulumi:"key"`
	// The operator used in the dispatch rule. Valid values:
	// * eq: equals to.
	// * re: matches a regular expression.
	Operator string `pulumi:"operator"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput is an input type that accepts DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs and DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput` via:
//
//	DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{...}
type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput
	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs struct {
	// The key of the tag of the dispatch rule. Valid values:
	// * _aliyun_arms_userid: user ID
	// * _aliyun_arms_involvedObject_kind: type of the associated object
	// * _aliyun_arms_involvedObject_id: ID of the associated object
	// * _aliyun_arms_involvedObject_name: name of the associated object
	// * _aliyun_arms_alert_name: alert name
	// * _aliyun_arms_alert_rule_id: alert rule ID
	// * _aliyun_arms_alert_type: alert type
	// * _aliyun_arms_alert_level: alert severity
	Key pulumi.StringInput `pulumi:"key"`
	// The operator used in the dispatch rule. Valid values:
	// * eq: equals to.
	// * re: matches a regular expression.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput)
}

// DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput is an input type that accepts DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray and DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput values.
// You can construct a concrete instance of `DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput` via:
//
//	DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray{ DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{...} }
type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput interface {
	pulumi.Input

	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput
	ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray []DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return i.ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(context.Background())
}

func (i DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return o
}

// The key of the tag of the dispatch rule. Valid values:
// * _aliyun_arms_userid: user ID
// * _aliyun_arms_involvedObject_kind: type of the associated object
// * _aliyun_arms_involvedObject_id: ID of the associated object
// * _aliyun_arms_involvedObject_name: name of the associated object
// * _aliyun_arms_alert_name: alert name
// * _aliyun_arms_alert_rule_id: alert rule ID
// * _aliyun_arms_alert_type: alert type
// * _aliyun_arms_alert_level: alert severity
func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// The operator used in the dispatch rule. Valid values:
// * eq: equals to.
// * re: matches a regular expression.
func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// The value of the tag.
func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ToDispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(ctx context.Context) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o
}

func (o DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) Index(i pulumi.IntInput) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression {
		return vs[0].([]DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)[vs[1].(int)]
	}).(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput)
}

type DispatchRuleNotifyRule struct {
	// The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
	NotifyChannels []string `pulumi:"notifyChannels"`
	// Sets the notification object. See `notifyObjects` below.
	NotifyObjects []DispatchRuleNotifyRuleNotifyObject `pulumi:"notifyObjects"`
}

// DispatchRuleNotifyRuleInput is an input type that accepts DispatchRuleNotifyRuleArgs and DispatchRuleNotifyRuleOutput values.
// You can construct a concrete instance of `DispatchRuleNotifyRuleInput` via:
//
//	DispatchRuleNotifyRuleArgs{...}
type DispatchRuleNotifyRuleInput interface {
	pulumi.Input

	ToDispatchRuleNotifyRuleOutput() DispatchRuleNotifyRuleOutput
	ToDispatchRuleNotifyRuleOutputWithContext(context.Context) DispatchRuleNotifyRuleOutput
}

type DispatchRuleNotifyRuleArgs struct {
	// The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
	NotifyChannels pulumi.StringArrayInput `pulumi:"notifyChannels"`
	// Sets the notification object. See `notifyObjects` below.
	NotifyObjects DispatchRuleNotifyRuleNotifyObjectArrayInput `pulumi:"notifyObjects"`
}

func (DispatchRuleNotifyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleNotifyRule)(nil)).Elem()
}

func (i DispatchRuleNotifyRuleArgs) ToDispatchRuleNotifyRuleOutput() DispatchRuleNotifyRuleOutput {
	return i.ToDispatchRuleNotifyRuleOutputWithContext(context.Background())
}

func (i DispatchRuleNotifyRuleArgs) ToDispatchRuleNotifyRuleOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleNotifyRuleOutput)
}

// DispatchRuleNotifyRuleArrayInput is an input type that accepts DispatchRuleNotifyRuleArray and DispatchRuleNotifyRuleArrayOutput values.
// You can construct a concrete instance of `DispatchRuleNotifyRuleArrayInput` via:
//
//	DispatchRuleNotifyRuleArray{ DispatchRuleNotifyRuleArgs{...} }
type DispatchRuleNotifyRuleArrayInput interface {
	pulumi.Input

	ToDispatchRuleNotifyRuleArrayOutput() DispatchRuleNotifyRuleArrayOutput
	ToDispatchRuleNotifyRuleArrayOutputWithContext(context.Context) DispatchRuleNotifyRuleArrayOutput
}

type DispatchRuleNotifyRuleArray []DispatchRuleNotifyRuleInput

func (DispatchRuleNotifyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleNotifyRule)(nil)).Elem()
}

func (i DispatchRuleNotifyRuleArray) ToDispatchRuleNotifyRuleArrayOutput() DispatchRuleNotifyRuleArrayOutput {
	return i.ToDispatchRuleNotifyRuleArrayOutputWithContext(context.Background())
}

func (i DispatchRuleNotifyRuleArray) ToDispatchRuleNotifyRuleArrayOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleNotifyRuleArrayOutput)
}

type DispatchRuleNotifyRuleOutput struct{ *pulumi.OutputState }

func (DispatchRuleNotifyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleNotifyRule)(nil)).Elem()
}

func (o DispatchRuleNotifyRuleOutput) ToDispatchRuleNotifyRuleOutput() DispatchRuleNotifyRuleOutput {
	return o
}

func (o DispatchRuleNotifyRuleOutput) ToDispatchRuleNotifyRuleOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleOutput {
	return o
}

// The notification method. Valid values: dingTalk, sms, webhook, email, and wechat.
func (o DispatchRuleNotifyRuleOutput) NotifyChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DispatchRuleNotifyRule) []string { return v.NotifyChannels }).(pulumi.StringArrayOutput)
}

// Sets the notification object. See `notifyObjects` below.
func (o DispatchRuleNotifyRuleOutput) NotifyObjects() DispatchRuleNotifyRuleNotifyObjectArrayOutput {
	return o.ApplyT(func(v DispatchRuleNotifyRule) []DispatchRuleNotifyRuleNotifyObject { return v.NotifyObjects }).(DispatchRuleNotifyRuleNotifyObjectArrayOutput)
}

type DispatchRuleNotifyRuleArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleNotifyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleNotifyRule)(nil)).Elem()
}

func (o DispatchRuleNotifyRuleArrayOutput) ToDispatchRuleNotifyRuleArrayOutput() DispatchRuleNotifyRuleArrayOutput {
	return o
}

func (o DispatchRuleNotifyRuleArrayOutput) ToDispatchRuleNotifyRuleArrayOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleArrayOutput {
	return o
}

func (o DispatchRuleNotifyRuleArrayOutput) Index(i pulumi.IntInput) DispatchRuleNotifyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleNotifyRule {
		return vs[0].([]DispatchRuleNotifyRule)[vs[1].(int)]
	}).(DispatchRuleNotifyRuleOutput)
}

type DispatchRuleNotifyRuleNotifyObject struct {
	// The name of the contact or contact group.
	Name string `pulumi:"name"`
	// The ID of the contact or contact group.
	NotifyObjectId string `pulumi:"notifyObjectId"`
	// The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
	NotifyType string `pulumi:"notifyType"`
}

// DispatchRuleNotifyRuleNotifyObjectInput is an input type that accepts DispatchRuleNotifyRuleNotifyObjectArgs and DispatchRuleNotifyRuleNotifyObjectOutput values.
// You can construct a concrete instance of `DispatchRuleNotifyRuleNotifyObjectInput` via:
//
//	DispatchRuleNotifyRuleNotifyObjectArgs{...}
type DispatchRuleNotifyRuleNotifyObjectInput interface {
	pulumi.Input

	ToDispatchRuleNotifyRuleNotifyObjectOutput() DispatchRuleNotifyRuleNotifyObjectOutput
	ToDispatchRuleNotifyRuleNotifyObjectOutputWithContext(context.Context) DispatchRuleNotifyRuleNotifyObjectOutput
}

type DispatchRuleNotifyRuleNotifyObjectArgs struct {
	// The name of the contact or contact group.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the contact or contact group.
	NotifyObjectId pulumi.StringInput `pulumi:"notifyObjectId"`
	// The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
	NotifyType pulumi.StringInput `pulumi:"notifyType"`
}

func (DispatchRuleNotifyRuleNotifyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (i DispatchRuleNotifyRuleNotifyObjectArgs) ToDispatchRuleNotifyRuleNotifyObjectOutput() DispatchRuleNotifyRuleNotifyObjectOutput {
	return i.ToDispatchRuleNotifyRuleNotifyObjectOutputWithContext(context.Background())
}

func (i DispatchRuleNotifyRuleNotifyObjectArgs) ToDispatchRuleNotifyRuleNotifyObjectOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleNotifyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleNotifyRuleNotifyObjectOutput)
}

// DispatchRuleNotifyRuleNotifyObjectArrayInput is an input type that accepts DispatchRuleNotifyRuleNotifyObjectArray and DispatchRuleNotifyRuleNotifyObjectArrayOutput values.
// You can construct a concrete instance of `DispatchRuleNotifyRuleNotifyObjectArrayInput` via:
//
//	DispatchRuleNotifyRuleNotifyObjectArray{ DispatchRuleNotifyRuleNotifyObjectArgs{...} }
type DispatchRuleNotifyRuleNotifyObjectArrayInput interface {
	pulumi.Input

	ToDispatchRuleNotifyRuleNotifyObjectArrayOutput() DispatchRuleNotifyRuleNotifyObjectArrayOutput
	ToDispatchRuleNotifyRuleNotifyObjectArrayOutputWithContext(context.Context) DispatchRuleNotifyRuleNotifyObjectArrayOutput
}

type DispatchRuleNotifyRuleNotifyObjectArray []DispatchRuleNotifyRuleNotifyObjectInput

func (DispatchRuleNotifyRuleNotifyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (i DispatchRuleNotifyRuleNotifyObjectArray) ToDispatchRuleNotifyRuleNotifyObjectArrayOutput() DispatchRuleNotifyRuleNotifyObjectArrayOutput {
	return i.ToDispatchRuleNotifyRuleNotifyObjectArrayOutputWithContext(context.Background())
}

func (i DispatchRuleNotifyRuleNotifyObjectArray) ToDispatchRuleNotifyRuleNotifyObjectArrayOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleNotifyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DispatchRuleNotifyRuleNotifyObjectArrayOutput)
}

type DispatchRuleNotifyRuleNotifyObjectOutput struct{ *pulumi.OutputState }

func (DispatchRuleNotifyRuleNotifyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DispatchRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (o DispatchRuleNotifyRuleNotifyObjectOutput) ToDispatchRuleNotifyRuleNotifyObjectOutput() DispatchRuleNotifyRuleNotifyObjectOutput {
	return o
}

func (o DispatchRuleNotifyRuleNotifyObjectOutput) ToDispatchRuleNotifyRuleNotifyObjectOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleNotifyObjectOutput {
	return o
}

// The name of the contact or contact group.
func (o DispatchRuleNotifyRuleNotifyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleNotifyRuleNotifyObject) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the contact or contact group.
func (o DispatchRuleNotifyRuleNotifyObjectOutput) NotifyObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleNotifyRuleNotifyObject) string { return v.NotifyObjectId }).(pulumi.StringOutput)
}

// The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group.
func (o DispatchRuleNotifyRuleNotifyObjectOutput) NotifyType() pulumi.StringOutput {
	return o.ApplyT(func(v DispatchRuleNotifyRuleNotifyObject) string { return v.NotifyType }).(pulumi.StringOutput)
}

type DispatchRuleNotifyRuleNotifyObjectArrayOutput struct{ *pulumi.OutputState }

func (DispatchRuleNotifyRuleNotifyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DispatchRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (o DispatchRuleNotifyRuleNotifyObjectArrayOutput) ToDispatchRuleNotifyRuleNotifyObjectArrayOutput() DispatchRuleNotifyRuleNotifyObjectArrayOutput {
	return o
}

func (o DispatchRuleNotifyRuleNotifyObjectArrayOutput) ToDispatchRuleNotifyRuleNotifyObjectArrayOutputWithContext(ctx context.Context) DispatchRuleNotifyRuleNotifyObjectArrayOutput {
	return o
}

func (o DispatchRuleNotifyRuleNotifyObjectArrayOutput) Index(i pulumi.IntInput) DispatchRuleNotifyRuleNotifyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DispatchRuleNotifyRuleNotifyObject {
		return vs[0].([]DispatchRuleNotifyRuleNotifyObject)[vs[1].(int)]
	}).(DispatchRuleNotifyRuleNotifyObjectOutput)
}

type PrometheusAlertRuleAnnotation struct {
	// The name of the annotation.
	Name *string `pulumi:"name"`
	// The value of the annotation.
	Value *string `pulumi:"value"`
}

// PrometheusAlertRuleAnnotationInput is an input type that accepts PrometheusAlertRuleAnnotationArgs and PrometheusAlertRuleAnnotationOutput values.
// You can construct a concrete instance of `PrometheusAlertRuleAnnotationInput` via:
//
//	PrometheusAlertRuleAnnotationArgs{...}
type PrometheusAlertRuleAnnotationInput interface {
	pulumi.Input

	ToPrometheusAlertRuleAnnotationOutput() PrometheusAlertRuleAnnotationOutput
	ToPrometheusAlertRuleAnnotationOutputWithContext(context.Context) PrometheusAlertRuleAnnotationOutput
}

type PrometheusAlertRuleAnnotationArgs struct {
	// The name of the annotation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the annotation.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PrometheusAlertRuleAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusAlertRuleAnnotation)(nil)).Elem()
}

func (i PrometheusAlertRuleAnnotationArgs) ToPrometheusAlertRuleAnnotationOutput() PrometheusAlertRuleAnnotationOutput {
	return i.ToPrometheusAlertRuleAnnotationOutputWithContext(context.Background())
}

func (i PrometheusAlertRuleAnnotationArgs) ToPrometheusAlertRuleAnnotationOutputWithContext(ctx context.Context) PrometheusAlertRuleAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusAlertRuleAnnotationOutput)
}

// PrometheusAlertRuleAnnotationArrayInput is an input type that accepts PrometheusAlertRuleAnnotationArray and PrometheusAlertRuleAnnotationArrayOutput values.
// You can construct a concrete instance of `PrometheusAlertRuleAnnotationArrayInput` via:
//
//	PrometheusAlertRuleAnnotationArray{ PrometheusAlertRuleAnnotationArgs{...} }
type PrometheusAlertRuleAnnotationArrayInput interface {
	pulumi.Input

	ToPrometheusAlertRuleAnnotationArrayOutput() PrometheusAlertRuleAnnotationArrayOutput
	ToPrometheusAlertRuleAnnotationArrayOutputWithContext(context.Context) PrometheusAlertRuleAnnotationArrayOutput
}

type PrometheusAlertRuleAnnotationArray []PrometheusAlertRuleAnnotationInput

func (PrometheusAlertRuleAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusAlertRuleAnnotation)(nil)).Elem()
}

func (i PrometheusAlertRuleAnnotationArray) ToPrometheusAlertRuleAnnotationArrayOutput() PrometheusAlertRuleAnnotationArrayOutput {
	return i.ToPrometheusAlertRuleAnnotationArrayOutputWithContext(context.Background())
}

func (i PrometheusAlertRuleAnnotationArray) ToPrometheusAlertRuleAnnotationArrayOutputWithContext(ctx context.Context) PrometheusAlertRuleAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusAlertRuleAnnotationArrayOutput)
}

type PrometheusAlertRuleAnnotationOutput struct{ *pulumi.OutputState }

func (PrometheusAlertRuleAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusAlertRuleAnnotation)(nil)).Elem()
}

func (o PrometheusAlertRuleAnnotationOutput) ToPrometheusAlertRuleAnnotationOutput() PrometheusAlertRuleAnnotationOutput {
	return o
}

func (o PrometheusAlertRuleAnnotationOutput) ToPrometheusAlertRuleAnnotationOutputWithContext(ctx context.Context) PrometheusAlertRuleAnnotationOutput {
	return o
}

// The name of the annotation.
func (o PrometheusAlertRuleAnnotationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusAlertRuleAnnotation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the annotation.
func (o PrometheusAlertRuleAnnotationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusAlertRuleAnnotation) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PrometheusAlertRuleAnnotationArrayOutput struct{ *pulumi.OutputState }

func (PrometheusAlertRuleAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusAlertRuleAnnotation)(nil)).Elem()
}

func (o PrometheusAlertRuleAnnotationArrayOutput) ToPrometheusAlertRuleAnnotationArrayOutput() PrometheusAlertRuleAnnotationArrayOutput {
	return o
}

func (o PrometheusAlertRuleAnnotationArrayOutput) ToPrometheusAlertRuleAnnotationArrayOutputWithContext(ctx context.Context) PrometheusAlertRuleAnnotationArrayOutput {
	return o
}

func (o PrometheusAlertRuleAnnotationArrayOutput) Index(i pulumi.IntInput) PrometheusAlertRuleAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusAlertRuleAnnotation {
		return vs[0].([]PrometheusAlertRuleAnnotation)[vs[1].(int)]
	}).(PrometheusAlertRuleAnnotationOutput)
}

type PrometheusAlertRuleLabel struct {
	// The name of the label.
	Name *string `pulumi:"name"`
	// The value of the label.
	Value *string `pulumi:"value"`
}

// PrometheusAlertRuleLabelInput is an input type that accepts PrometheusAlertRuleLabelArgs and PrometheusAlertRuleLabelOutput values.
// You can construct a concrete instance of `PrometheusAlertRuleLabelInput` via:
//
//	PrometheusAlertRuleLabelArgs{...}
type PrometheusAlertRuleLabelInput interface {
	pulumi.Input

	ToPrometheusAlertRuleLabelOutput() PrometheusAlertRuleLabelOutput
	ToPrometheusAlertRuleLabelOutputWithContext(context.Context) PrometheusAlertRuleLabelOutput
}

type PrometheusAlertRuleLabelArgs struct {
	// The name of the label.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the label.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PrometheusAlertRuleLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusAlertRuleLabel)(nil)).Elem()
}

func (i PrometheusAlertRuleLabelArgs) ToPrometheusAlertRuleLabelOutput() PrometheusAlertRuleLabelOutput {
	return i.ToPrometheusAlertRuleLabelOutputWithContext(context.Background())
}

func (i PrometheusAlertRuleLabelArgs) ToPrometheusAlertRuleLabelOutputWithContext(ctx context.Context) PrometheusAlertRuleLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusAlertRuleLabelOutput)
}

// PrometheusAlertRuleLabelArrayInput is an input type that accepts PrometheusAlertRuleLabelArray and PrometheusAlertRuleLabelArrayOutput values.
// You can construct a concrete instance of `PrometheusAlertRuleLabelArrayInput` via:
//
//	PrometheusAlertRuleLabelArray{ PrometheusAlertRuleLabelArgs{...} }
type PrometheusAlertRuleLabelArrayInput interface {
	pulumi.Input

	ToPrometheusAlertRuleLabelArrayOutput() PrometheusAlertRuleLabelArrayOutput
	ToPrometheusAlertRuleLabelArrayOutputWithContext(context.Context) PrometheusAlertRuleLabelArrayOutput
}

type PrometheusAlertRuleLabelArray []PrometheusAlertRuleLabelInput

func (PrometheusAlertRuleLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusAlertRuleLabel)(nil)).Elem()
}

func (i PrometheusAlertRuleLabelArray) ToPrometheusAlertRuleLabelArrayOutput() PrometheusAlertRuleLabelArrayOutput {
	return i.ToPrometheusAlertRuleLabelArrayOutputWithContext(context.Background())
}

func (i PrometheusAlertRuleLabelArray) ToPrometheusAlertRuleLabelArrayOutputWithContext(ctx context.Context) PrometheusAlertRuleLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusAlertRuleLabelArrayOutput)
}

type PrometheusAlertRuleLabelOutput struct{ *pulumi.OutputState }

func (PrometheusAlertRuleLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusAlertRuleLabel)(nil)).Elem()
}

func (o PrometheusAlertRuleLabelOutput) ToPrometheusAlertRuleLabelOutput() PrometheusAlertRuleLabelOutput {
	return o
}

func (o PrometheusAlertRuleLabelOutput) ToPrometheusAlertRuleLabelOutputWithContext(ctx context.Context) PrometheusAlertRuleLabelOutput {
	return o
}

// The name of the label.
func (o PrometheusAlertRuleLabelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusAlertRuleLabel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the label.
func (o PrometheusAlertRuleLabelOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusAlertRuleLabel) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PrometheusAlertRuleLabelArrayOutput struct{ *pulumi.OutputState }

func (PrometheusAlertRuleLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusAlertRuleLabel)(nil)).Elem()
}

func (o PrometheusAlertRuleLabelArrayOutput) ToPrometheusAlertRuleLabelArrayOutput() PrometheusAlertRuleLabelArrayOutput {
	return o
}

func (o PrometheusAlertRuleLabelArrayOutput) ToPrometheusAlertRuleLabelArrayOutputWithContext(ctx context.Context) PrometheusAlertRuleLabelArrayOutput {
	return o
}

func (o PrometheusAlertRuleLabelArrayOutput) Index(i pulumi.IntInput) PrometheusAlertRuleLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusAlertRuleLabel {
		return vs[0].([]PrometheusAlertRuleLabel)[vs[1].(int)]
	}).(PrometheusAlertRuleLabelOutput)
}

type SyntheticTaskAvailableAssertion struct {
	// Expected value.
	Expect string `pulumi:"expect"`
	// Condition: gt: greater than; gte: greater than or equal to; lt: less than; te: less than or equal to; eq: equal to; neq: not equal to; ctn: contains; nctn: does not contain; exist: exists; n_exist: does not exist; belong: belongs to; reg_match: regular matching.
	Operator string `pulumi:"operator"`
	// Check the target. If the target is HttpResCode, HttpResBody, or httpressetime, you do not need to specify the target. If the target is HttpResHead, you need to specify the key in the header. If the target is HttpResHead, you need to use jsonPath.
	Target *string `pulumi:"target"`
	// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
	Type string `pulumi:"type"`
}

// SyntheticTaskAvailableAssertionInput is an input type that accepts SyntheticTaskAvailableAssertionArgs and SyntheticTaskAvailableAssertionOutput values.
// You can construct a concrete instance of `SyntheticTaskAvailableAssertionInput` via:
//
//	SyntheticTaskAvailableAssertionArgs{...}
type SyntheticTaskAvailableAssertionInput interface {
	pulumi.Input

	ToSyntheticTaskAvailableAssertionOutput() SyntheticTaskAvailableAssertionOutput
	ToSyntheticTaskAvailableAssertionOutputWithContext(context.Context) SyntheticTaskAvailableAssertionOutput
}

type SyntheticTaskAvailableAssertionArgs struct {
	// Expected value.
	Expect pulumi.StringInput `pulumi:"expect"`
	// Condition: gt: greater than; gte: greater than or equal to; lt: less than; te: less than or equal to; eq: equal to; neq: not equal to; ctn: contains; nctn: does not contain; exist: exists; n_exist: does not exist; belong: belongs to; reg_match: regular matching.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Check the target. If the target is HttpResCode, HttpResBody, or httpressetime, you do not need to specify the target. If the target is HttpResHead, you need to specify the key in the header. If the target is HttpResHead, you need to use jsonPath.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticTaskAvailableAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskAvailableAssertion)(nil)).Elem()
}

func (i SyntheticTaskAvailableAssertionArgs) ToSyntheticTaskAvailableAssertionOutput() SyntheticTaskAvailableAssertionOutput {
	return i.ToSyntheticTaskAvailableAssertionOutputWithContext(context.Background())
}

func (i SyntheticTaskAvailableAssertionArgs) ToSyntheticTaskAvailableAssertionOutputWithContext(ctx context.Context) SyntheticTaskAvailableAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskAvailableAssertionOutput)
}

// SyntheticTaskAvailableAssertionArrayInput is an input type that accepts SyntheticTaskAvailableAssertionArray and SyntheticTaskAvailableAssertionArrayOutput values.
// You can construct a concrete instance of `SyntheticTaskAvailableAssertionArrayInput` via:
//
//	SyntheticTaskAvailableAssertionArray{ SyntheticTaskAvailableAssertionArgs{...} }
type SyntheticTaskAvailableAssertionArrayInput interface {
	pulumi.Input

	ToSyntheticTaskAvailableAssertionArrayOutput() SyntheticTaskAvailableAssertionArrayOutput
	ToSyntheticTaskAvailableAssertionArrayOutputWithContext(context.Context) SyntheticTaskAvailableAssertionArrayOutput
}

type SyntheticTaskAvailableAssertionArray []SyntheticTaskAvailableAssertionInput

func (SyntheticTaskAvailableAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskAvailableAssertion)(nil)).Elem()
}

func (i SyntheticTaskAvailableAssertionArray) ToSyntheticTaskAvailableAssertionArrayOutput() SyntheticTaskAvailableAssertionArrayOutput {
	return i.ToSyntheticTaskAvailableAssertionArrayOutputWithContext(context.Background())
}

func (i SyntheticTaskAvailableAssertionArray) ToSyntheticTaskAvailableAssertionArrayOutputWithContext(ctx context.Context) SyntheticTaskAvailableAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskAvailableAssertionArrayOutput)
}

type SyntheticTaskAvailableAssertionOutput struct{ *pulumi.OutputState }

func (SyntheticTaskAvailableAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskAvailableAssertion)(nil)).Elem()
}

func (o SyntheticTaskAvailableAssertionOutput) ToSyntheticTaskAvailableAssertionOutput() SyntheticTaskAvailableAssertionOutput {
	return o
}

func (o SyntheticTaskAvailableAssertionOutput) ToSyntheticTaskAvailableAssertionOutputWithContext(ctx context.Context) SyntheticTaskAvailableAssertionOutput {
	return o
}

// Expected value.
func (o SyntheticTaskAvailableAssertionOutput) Expect() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskAvailableAssertion) string { return v.Expect }).(pulumi.StringOutput)
}

// Condition: gt: greater than; gte: greater than or equal to; lt: less than; te: less than or equal to; eq: equal to; neq: not equal to; ctn: contains; nctn: does not contain; exist: exists; n_exist: does not exist; belong: belongs to; reg_match: regular matching.
func (o SyntheticTaskAvailableAssertionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskAvailableAssertion) string { return v.Operator }).(pulumi.StringOutput)
}

// Check the target. If the target is HttpResCode, HttpResBody, or httpressetime, you do not need to specify the target. If the target is HttpResHead, you need to specify the key in the header. If the target is HttpResHead, you need to use jsonPath.
func (o SyntheticTaskAvailableAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskAvailableAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
func (o SyntheticTaskAvailableAssertionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskAvailableAssertion) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticTaskAvailableAssertionArrayOutput struct{ *pulumi.OutputState }

func (SyntheticTaskAvailableAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskAvailableAssertion)(nil)).Elem()
}

func (o SyntheticTaskAvailableAssertionArrayOutput) ToSyntheticTaskAvailableAssertionArrayOutput() SyntheticTaskAvailableAssertionArrayOutput {
	return o
}

func (o SyntheticTaskAvailableAssertionArrayOutput) ToSyntheticTaskAvailableAssertionArrayOutputWithContext(ctx context.Context) SyntheticTaskAvailableAssertionArrayOutput {
	return o
}

func (o SyntheticTaskAvailableAssertionArrayOutput) Index(i pulumi.IntInput) SyntheticTaskAvailableAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticTaskAvailableAssertion {
		return vs[0].([]SyntheticTaskAvailableAssertion)[vs[1].(int)]
	}).(SyntheticTaskAvailableAssertionOutput)
}

type SyntheticTaskCommonSetting struct {
	// Custom host. See `customHost` below.
	CustomHost *SyntheticTaskCommonSettingCustomHost `pulumi:"customHost"`
	// IpType.
	IpType *int `pulumi:"ipType"`
	// Whether to enable link tracking.
	IsOpenTrace *bool `pulumi:"isOpenTrace"`
	// Whether the monitoring samples are evenly distributed:
	// - 0: No
	//   1: Yes.
	MonitorSamples *int `pulumi:"monitorSamples"`
	// Link trace client type:
	// - 0:ARMS Agent
	// - 1:OpenTelemetry
	// - 2:Jaeger.
	TraceClientType *int `pulumi:"traceClientType"`
	// The link data is reported to the region.
	XtraceRegion *string `pulumi:"xtraceRegion"`
}

// SyntheticTaskCommonSettingInput is an input type that accepts SyntheticTaskCommonSettingArgs and SyntheticTaskCommonSettingOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingInput` via:
//
//	SyntheticTaskCommonSettingArgs{...}
type SyntheticTaskCommonSettingInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingOutput() SyntheticTaskCommonSettingOutput
	ToSyntheticTaskCommonSettingOutputWithContext(context.Context) SyntheticTaskCommonSettingOutput
}

type SyntheticTaskCommonSettingArgs struct {
	// Custom host. See `customHost` below.
	CustomHost SyntheticTaskCommonSettingCustomHostPtrInput `pulumi:"customHost"`
	// IpType.
	IpType pulumi.IntPtrInput `pulumi:"ipType"`
	// Whether to enable link tracking.
	IsOpenTrace pulumi.BoolPtrInput `pulumi:"isOpenTrace"`
	// Whether the monitoring samples are evenly distributed:
	// - 0: No
	//   1: Yes.
	MonitorSamples pulumi.IntPtrInput `pulumi:"monitorSamples"`
	// Link trace client type:
	// - 0:ARMS Agent
	// - 1:OpenTelemetry
	// - 2:Jaeger.
	TraceClientType pulumi.IntPtrInput `pulumi:"traceClientType"`
	// The link data is reported to the region.
	XtraceRegion pulumi.StringPtrInput `pulumi:"xtraceRegion"`
}

func (SyntheticTaskCommonSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSetting)(nil)).Elem()
}

func (i SyntheticTaskCommonSettingArgs) ToSyntheticTaskCommonSettingOutput() SyntheticTaskCommonSettingOutput {
	return i.ToSyntheticTaskCommonSettingOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingArgs) ToSyntheticTaskCommonSettingOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingOutput)
}

func (i SyntheticTaskCommonSettingArgs) ToSyntheticTaskCommonSettingPtrOutput() SyntheticTaskCommonSettingPtrOutput {
	return i.ToSyntheticTaskCommonSettingPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingArgs) ToSyntheticTaskCommonSettingPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingOutput).ToSyntheticTaskCommonSettingPtrOutputWithContext(ctx)
}

// SyntheticTaskCommonSettingPtrInput is an input type that accepts SyntheticTaskCommonSettingArgs, SyntheticTaskCommonSettingPtr and SyntheticTaskCommonSettingPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingPtrInput` via:
//
//	        SyntheticTaskCommonSettingArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskCommonSettingPtrInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingPtrOutput() SyntheticTaskCommonSettingPtrOutput
	ToSyntheticTaskCommonSettingPtrOutputWithContext(context.Context) SyntheticTaskCommonSettingPtrOutput
}

type syntheticTaskCommonSettingPtrType SyntheticTaskCommonSettingArgs

func SyntheticTaskCommonSettingPtr(v *SyntheticTaskCommonSettingArgs) SyntheticTaskCommonSettingPtrInput {
	return (*syntheticTaskCommonSettingPtrType)(v)
}

func (*syntheticTaskCommonSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCommonSetting)(nil)).Elem()
}

func (i *syntheticTaskCommonSettingPtrType) ToSyntheticTaskCommonSettingPtrOutput() SyntheticTaskCommonSettingPtrOutput {
	return i.ToSyntheticTaskCommonSettingPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskCommonSettingPtrType) ToSyntheticTaskCommonSettingPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingPtrOutput)
}

type SyntheticTaskCommonSettingOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSetting)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingOutput) ToSyntheticTaskCommonSettingOutput() SyntheticTaskCommonSettingOutput {
	return o
}

func (o SyntheticTaskCommonSettingOutput) ToSyntheticTaskCommonSettingOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingOutput {
	return o
}

func (o SyntheticTaskCommonSettingOutput) ToSyntheticTaskCommonSettingPtrOutput() SyntheticTaskCommonSettingPtrOutput {
	return o.ToSyntheticTaskCommonSettingPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskCommonSettingOutput) ToSyntheticTaskCommonSettingPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskCommonSetting) *SyntheticTaskCommonSetting {
		return &v
	}).(SyntheticTaskCommonSettingPtrOutput)
}

// Custom host. See `customHost` below.
func (o SyntheticTaskCommonSettingOutput) CustomHost() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *SyntheticTaskCommonSettingCustomHost { return v.CustomHost }).(SyntheticTaskCommonSettingCustomHostPtrOutput)
}

// IpType.
func (o SyntheticTaskCommonSettingOutput) IpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *int { return v.IpType }).(pulumi.IntPtrOutput)
}

// Whether to enable link tracking.
func (o SyntheticTaskCommonSettingOutput) IsOpenTrace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *bool { return v.IsOpenTrace }).(pulumi.BoolPtrOutput)
}

// Whether the monitoring samples are evenly distributed:
//   - 0: No
//     1: Yes.
func (o SyntheticTaskCommonSettingOutput) MonitorSamples() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *int { return v.MonitorSamples }).(pulumi.IntPtrOutput)
}

// Link trace client type:
// - 0:ARMS Agent
// - 1:OpenTelemetry
// - 2:Jaeger.
func (o SyntheticTaskCommonSettingOutput) TraceClientType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *int { return v.TraceClientType }).(pulumi.IntPtrOutput)
}

// The link data is reported to the region.
func (o SyntheticTaskCommonSettingOutput) XtraceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSetting) *string { return v.XtraceRegion }).(pulumi.StringPtrOutput)
}

type SyntheticTaskCommonSettingPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCommonSetting)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingPtrOutput) ToSyntheticTaskCommonSettingPtrOutput() SyntheticTaskCommonSettingPtrOutput {
	return o
}

func (o SyntheticTaskCommonSettingPtrOutput) ToSyntheticTaskCommonSettingPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingPtrOutput {
	return o
}

func (o SyntheticTaskCommonSettingPtrOutput) Elem() SyntheticTaskCommonSettingOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) SyntheticTaskCommonSetting {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskCommonSetting
		return ret
	}).(SyntheticTaskCommonSettingOutput)
}

// Custom host. See `customHost` below.
func (o SyntheticTaskCommonSettingPtrOutput) CustomHost() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *SyntheticTaskCommonSettingCustomHost {
		if v == nil {
			return nil
		}
		return v.CustomHost
	}).(SyntheticTaskCommonSettingCustomHostPtrOutput)
}

// IpType.
func (o SyntheticTaskCommonSettingPtrOutput) IpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *int {
		if v == nil {
			return nil
		}
		return v.IpType
	}).(pulumi.IntPtrOutput)
}

// Whether to enable link tracking.
func (o SyntheticTaskCommonSettingPtrOutput) IsOpenTrace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *bool {
		if v == nil {
			return nil
		}
		return v.IsOpenTrace
	}).(pulumi.BoolPtrOutput)
}

// Whether the monitoring samples are evenly distributed:
//   - 0: No
//     1: Yes.
func (o SyntheticTaskCommonSettingPtrOutput) MonitorSamples() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *int {
		if v == nil {
			return nil
		}
		return v.MonitorSamples
	}).(pulumi.IntPtrOutput)
}

// Link trace client type:
// - 0:ARMS Agent
// - 1:OpenTelemetry
// - 2:Jaeger.
func (o SyntheticTaskCommonSettingPtrOutput) TraceClientType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *int {
		if v == nil {
			return nil
		}
		return v.TraceClientType
	}).(pulumi.IntPtrOutput)
}

// The link data is reported to the region.
func (o SyntheticTaskCommonSettingPtrOutput) XtraceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSetting) *string {
		if v == nil {
			return nil
		}
		return v.XtraceRegion
	}).(pulumi.StringPtrOutput)
}

type SyntheticTaskCommonSettingCustomHost struct {
	// The host list. See `hosts` below.
	Hosts []SyntheticTaskCommonSettingCustomHostHost `pulumi:"hosts"`
	// Selection method:
	// - 0: Random
	// - 1: Polling.
	SelectType int `pulumi:"selectType"`
}

// SyntheticTaskCommonSettingCustomHostInput is an input type that accepts SyntheticTaskCommonSettingCustomHostArgs and SyntheticTaskCommonSettingCustomHostOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingCustomHostInput` via:
//
//	SyntheticTaskCommonSettingCustomHostArgs{...}
type SyntheticTaskCommonSettingCustomHostInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingCustomHostOutput() SyntheticTaskCommonSettingCustomHostOutput
	ToSyntheticTaskCommonSettingCustomHostOutputWithContext(context.Context) SyntheticTaskCommonSettingCustomHostOutput
}

type SyntheticTaskCommonSettingCustomHostArgs struct {
	// The host list. See `hosts` below.
	Hosts SyntheticTaskCommonSettingCustomHostHostArrayInput `pulumi:"hosts"`
	// Selection method:
	// - 0: Random
	// - 1: Polling.
	SelectType pulumi.IntInput `pulumi:"selectType"`
}

func (SyntheticTaskCommonSettingCustomHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSettingCustomHost)(nil)).Elem()
}

func (i SyntheticTaskCommonSettingCustomHostArgs) ToSyntheticTaskCommonSettingCustomHostOutput() SyntheticTaskCommonSettingCustomHostOutput {
	return i.ToSyntheticTaskCommonSettingCustomHostOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingCustomHostArgs) ToSyntheticTaskCommonSettingCustomHostOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingCustomHostOutput)
}

func (i SyntheticTaskCommonSettingCustomHostArgs) ToSyntheticTaskCommonSettingCustomHostPtrOutput() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return i.ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingCustomHostArgs) ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingCustomHostOutput).ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(ctx)
}

// SyntheticTaskCommonSettingCustomHostPtrInput is an input type that accepts SyntheticTaskCommonSettingCustomHostArgs, SyntheticTaskCommonSettingCustomHostPtr and SyntheticTaskCommonSettingCustomHostPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingCustomHostPtrInput` via:
//
//	        SyntheticTaskCommonSettingCustomHostArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskCommonSettingCustomHostPtrInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingCustomHostPtrOutput() SyntheticTaskCommonSettingCustomHostPtrOutput
	ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(context.Context) SyntheticTaskCommonSettingCustomHostPtrOutput
}

type syntheticTaskCommonSettingCustomHostPtrType SyntheticTaskCommonSettingCustomHostArgs

func SyntheticTaskCommonSettingCustomHostPtr(v *SyntheticTaskCommonSettingCustomHostArgs) SyntheticTaskCommonSettingCustomHostPtrInput {
	return (*syntheticTaskCommonSettingCustomHostPtrType)(v)
}

func (*syntheticTaskCommonSettingCustomHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCommonSettingCustomHost)(nil)).Elem()
}

func (i *syntheticTaskCommonSettingCustomHostPtrType) ToSyntheticTaskCommonSettingCustomHostPtrOutput() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return i.ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskCommonSettingCustomHostPtrType) ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingCustomHostPtrOutput)
}

type SyntheticTaskCommonSettingCustomHostOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingCustomHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSettingCustomHost)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingCustomHostOutput) ToSyntheticTaskCommonSettingCustomHostOutput() SyntheticTaskCommonSettingCustomHostOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostOutput) ToSyntheticTaskCommonSettingCustomHostOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostOutput) ToSyntheticTaskCommonSettingCustomHostPtrOutput() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o.ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskCommonSettingCustomHostOutput) ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskCommonSettingCustomHost) *SyntheticTaskCommonSettingCustomHost {
		return &v
	}).(SyntheticTaskCommonSettingCustomHostPtrOutput)
}

// The host list. See `hosts` below.
func (o SyntheticTaskCommonSettingCustomHostOutput) Hosts() SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSettingCustomHost) []SyntheticTaskCommonSettingCustomHostHost {
		return v.Hosts
	}).(SyntheticTaskCommonSettingCustomHostHostArrayOutput)
}

// Selection method:
// - 0: Random
// - 1: Polling.
func (o SyntheticTaskCommonSettingCustomHostOutput) SelectType() pulumi.IntOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSettingCustomHost) int { return v.SelectType }).(pulumi.IntOutput)
}

type SyntheticTaskCommonSettingCustomHostPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingCustomHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCommonSettingCustomHost)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingCustomHostPtrOutput) ToSyntheticTaskCommonSettingCustomHostPtrOutput() SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostPtrOutput) ToSyntheticTaskCommonSettingCustomHostPtrOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostPtrOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostPtrOutput) Elem() SyntheticTaskCommonSettingCustomHostOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSettingCustomHost) SyntheticTaskCommonSettingCustomHost {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskCommonSettingCustomHost
		return ret
	}).(SyntheticTaskCommonSettingCustomHostOutput)
}

// The host list. See `hosts` below.
func (o SyntheticTaskCommonSettingCustomHostPtrOutput) Hosts() SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSettingCustomHost) []SyntheticTaskCommonSettingCustomHostHost {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(SyntheticTaskCommonSettingCustomHostHostArrayOutput)
}

// Selection method:
// - 0: Random
// - 1: Polling.
func (o SyntheticTaskCommonSettingCustomHostPtrOutput) SelectType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCommonSettingCustomHost) *int {
		if v == nil {
			return nil
		}
		return &v.SelectType
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskCommonSettingCustomHostHost struct {
	// Domain Name.
	Domain string `pulumi:"domain"`
	// IpType.
	IpType int `pulumi:"ipType"`
	// The IP list.
	Ips []string `pulumi:"ips"`
}

// SyntheticTaskCommonSettingCustomHostHostInput is an input type that accepts SyntheticTaskCommonSettingCustomHostHostArgs and SyntheticTaskCommonSettingCustomHostHostOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingCustomHostHostInput` via:
//
//	SyntheticTaskCommonSettingCustomHostHostArgs{...}
type SyntheticTaskCommonSettingCustomHostHostInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingCustomHostHostOutput() SyntheticTaskCommonSettingCustomHostHostOutput
	ToSyntheticTaskCommonSettingCustomHostHostOutputWithContext(context.Context) SyntheticTaskCommonSettingCustomHostHostOutput
}

type SyntheticTaskCommonSettingCustomHostHostArgs struct {
	// Domain Name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// IpType.
	IpType pulumi.IntInput `pulumi:"ipType"`
	// The IP list.
	Ips pulumi.StringArrayInput `pulumi:"ips"`
}

func (SyntheticTaskCommonSettingCustomHostHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostHost)(nil)).Elem()
}

func (i SyntheticTaskCommonSettingCustomHostHostArgs) ToSyntheticTaskCommonSettingCustomHostHostOutput() SyntheticTaskCommonSettingCustomHostHostOutput {
	return i.ToSyntheticTaskCommonSettingCustomHostHostOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingCustomHostHostArgs) ToSyntheticTaskCommonSettingCustomHostHostOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingCustomHostHostOutput)
}

// SyntheticTaskCommonSettingCustomHostHostArrayInput is an input type that accepts SyntheticTaskCommonSettingCustomHostHostArray and SyntheticTaskCommonSettingCustomHostHostArrayOutput values.
// You can construct a concrete instance of `SyntheticTaskCommonSettingCustomHostHostArrayInput` via:
//
//	SyntheticTaskCommonSettingCustomHostHostArray{ SyntheticTaskCommonSettingCustomHostHostArgs{...} }
type SyntheticTaskCommonSettingCustomHostHostArrayInput interface {
	pulumi.Input

	ToSyntheticTaskCommonSettingCustomHostHostArrayOutput() SyntheticTaskCommonSettingCustomHostHostArrayOutput
	ToSyntheticTaskCommonSettingCustomHostHostArrayOutputWithContext(context.Context) SyntheticTaskCommonSettingCustomHostHostArrayOutput
}

type SyntheticTaskCommonSettingCustomHostHostArray []SyntheticTaskCommonSettingCustomHostHostInput

func (SyntheticTaskCommonSettingCustomHostHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskCommonSettingCustomHostHost)(nil)).Elem()
}

func (i SyntheticTaskCommonSettingCustomHostHostArray) ToSyntheticTaskCommonSettingCustomHostHostArrayOutput() SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return i.ToSyntheticTaskCommonSettingCustomHostHostArrayOutputWithContext(context.Background())
}

func (i SyntheticTaskCommonSettingCustomHostHostArray) ToSyntheticTaskCommonSettingCustomHostHostArrayOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCommonSettingCustomHostHostArrayOutput)
}

type SyntheticTaskCommonSettingCustomHostHostOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingCustomHostHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostHost)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingCustomHostHostOutput) ToSyntheticTaskCommonSettingCustomHostHostOutput() SyntheticTaskCommonSettingCustomHostHostOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostHostOutput) ToSyntheticTaskCommonSettingCustomHostHostOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostHostOutput {
	return o
}

// Domain Name.
func (o SyntheticTaskCommonSettingCustomHostHostOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSettingCustomHostHost) string { return v.Domain }).(pulumi.StringOutput)
}

// IpType.
func (o SyntheticTaskCommonSettingCustomHostHostOutput) IpType() pulumi.IntOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSettingCustomHostHost) int { return v.IpType }).(pulumi.IntOutput)
}

// The IP list.
func (o SyntheticTaskCommonSettingCustomHostHostOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticTaskCommonSettingCustomHostHost) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

type SyntheticTaskCommonSettingCustomHostHostArrayOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCommonSettingCustomHostHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskCommonSettingCustomHostHost)(nil)).Elem()
}

func (o SyntheticTaskCommonSettingCustomHostHostArrayOutput) ToSyntheticTaskCommonSettingCustomHostHostArrayOutput() SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostHostArrayOutput) ToSyntheticTaskCommonSettingCustomHostHostArrayOutputWithContext(ctx context.Context) SyntheticTaskCommonSettingCustomHostHostArrayOutput {
	return o
}

func (o SyntheticTaskCommonSettingCustomHostHostArrayOutput) Index(i pulumi.IntInput) SyntheticTaskCommonSettingCustomHostHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticTaskCommonSettingCustomHostHost {
		return vs[0].([]SyntheticTaskCommonSettingCustomHostHost)[vs[1].(int)]
	}).(SyntheticTaskCommonSettingCustomHostHostOutput)
}

type SyntheticTaskCustomPeriod struct {
	// End hours, 0-24.
	EndHour *int `pulumi:"endHour"`
	// Starting hours, 0-24.
	StartHour *int `pulumi:"startHour"`
}

// SyntheticTaskCustomPeriodInput is an input type that accepts SyntheticTaskCustomPeriodArgs and SyntheticTaskCustomPeriodOutput values.
// You can construct a concrete instance of `SyntheticTaskCustomPeriodInput` via:
//
//	SyntheticTaskCustomPeriodArgs{...}
type SyntheticTaskCustomPeriodInput interface {
	pulumi.Input

	ToSyntheticTaskCustomPeriodOutput() SyntheticTaskCustomPeriodOutput
	ToSyntheticTaskCustomPeriodOutputWithContext(context.Context) SyntheticTaskCustomPeriodOutput
}

type SyntheticTaskCustomPeriodArgs struct {
	// End hours, 0-24.
	EndHour pulumi.IntPtrInput `pulumi:"endHour"`
	// Starting hours, 0-24.
	StartHour pulumi.IntPtrInput `pulumi:"startHour"`
}

func (SyntheticTaskCustomPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCustomPeriod)(nil)).Elem()
}

func (i SyntheticTaskCustomPeriodArgs) ToSyntheticTaskCustomPeriodOutput() SyntheticTaskCustomPeriodOutput {
	return i.ToSyntheticTaskCustomPeriodOutputWithContext(context.Background())
}

func (i SyntheticTaskCustomPeriodArgs) ToSyntheticTaskCustomPeriodOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCustomPeriodOutput)
}

func (i SyntheticTaskCustomPeriodArgs) ToSyntheticTaskCustomPeriodPtrOutput() SyntheticTaskCustomPeriodPtrOutput {
	return i.ToSyntheticTaskCustomPeriodPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskCustomPeriodArgs) ToSyntheticTaskCustomPeriodPtrOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCustomPeriodOutput).ToSyntheticTaskCustomPeriodPtrOutputWithContext(ctx)
}

// SyntheticTaskCustomPeriodPtrInput is an input type that accepts SyntheticTaskCustomPeriodArgs, SyntheticTaskCustomPeriodPtr and SyntheticTaskCustomPeriodPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskCustomPeriodPtrInput` via:
//
//	        SyntheticTaskCustomPeriodArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskCustomPeriodPtrInput interface {
	pulumi.Input

	ToSyntheticTaskCustomPeriodPtrOutput() SyntheticTaskCustomPeriodPtrOutput
	ToSyntheticTaskCustomPeriodPtrOutputWithContext(context.Context) SyntheticTaskCustomPeriodPtrOutput
}

type syntheticTaskCustomPeriodPtrType SyntheticTaskCustomPeriodArgs

func SyntheticTaskCustomPeriodPtr(v *SyntheticTaskCustomPeriodArgs) SyntheticTaskCustomPeriodPtrInput {
	return (*syntheticTaskCustomPeriodPtrType)(v)
}

func (*syntheticTaskCustomPeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCustomPeriod)(nil)).Elem()
}

func (i *syntheticTaskCustomPeriodPtrType) ToSyntheticTaskCustomPeriodPtrOutput() SyntheticTaskCustomPeriodPtrOutput {
	return i.ToSyntheticTaskCustomPeriodPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskCustomPeriodPtrType) ToSyntheticTaskCustomPeriodPtrOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskCustomPeriodPtrOutput)
}

type SyntheticTaskCustomPeriodOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCustomPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskCustomPeriod)(nil)).Elem()
}

func (o SyntheticTaskCustomPeriodOutput) ToSyntheticTaskCustomPeriodOutput() SyntheticTaskCustomPeriodOutput {
	return o
}

func (o SyntheticTaskCustomPeriodOutput) ToSyntheticTaskCustomPeriodOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodOutput {
	return o
}

func (o SyntheticTaskCustomPeriodOutput) ToSyntheticTaskCustomPeriodPtrOutput() SyntheticTaskCustomPeriodPtrOutput {
	return o.ToSyntheticTaskCustomPeriodPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskCustomPeriodOutput) ToSyntheticTaskCustomPeriodPtrOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskCustomPeriod) *SyntheticTaskCustomPeriod {
		return &v
	}).(SyntheticTaskCustomPeriodPtrOutput)
}

// End hours, 0-24.
func (o SyntheticTaskCustomPeriodOutput) EndHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCustomPeriod) *int { return v.EndHour }).(pulumi.IntPtrOutput)
}

// Starting hours, 0-24.
func (o SyntheticTaskCustomPeriodOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskCustomPeriod) *int { return v.StartHour }).(pulumi.IntPtrOutput)
}

type SyntheticTaskCustomPeriodPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskCustomPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskCustomPeriod)(nil)).Elem()
}

func (o SyntheticTaskCustomPeriodPtrOutput) ToSyntheticTaskCustomPeriodPtrOutput() SyntheticTaskCustomPeriodPtrOutput {
	return o
}

func (o SyntheticTaskCustomPeriodPtrOutput) ToSyntheticTaskCustomPeriodPtrOutputWithContext(ctx context.Context) SyntheticTaskCustomPeriodPtrOutput {
	return o
}

func (o SyntheticTaskCustomPeriodPtrOutput) Elem() SyntheticTaskCustomPeriodOutput {
	return o.ApplyT(func(v *SyntheticTaskCustomPeriod) SyntheticTaskCustomPeriod {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskCustomPeriod
		return ret
	}).(SyntheticTaskCustomPeriodOutput)
}

// End hours, 0-24.
func (o SyntheticTaskCustomPeriodPtrOutput) EndHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCustomPeriod) *int {
		if v == nil {
			return nil
		}
		return v.EndHour
	}).(pulumi.IntPtrOutput)
}

// Starting hours, 0-24.
func (o SyntheticTaskCustomPeriodPtrOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskCustomPeriod) *int {
		if v == nil {
			return nil
		}
		return v.StartHour
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitor struct {
	// The city code of monitor.
	CityCode string `pulumi:"cityCode"`
	// The type of monitor.
	ClientType int `pulumi:"clientType"`
	// The operator code of monitor.
	OperatorCode string `pulumi:"operatorCode"`
}

// SyntheticTaskMonitorInput is an input type that accepts SyntheticTaskMonitorArgs and SyntheticTaskMonitorOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorInput` via:
//
//	SyntheticTaskMonitorArgs{...}
type SyntheticTaskMonitorInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorOutput() SyntheticTaskMonitorOutput
	ToSyntheticTaskMonitorOutputWithContext(context.Context) SyntheticTaskMonitorOutput
}

type SyntheticTaskMonitorArgs struct {
	// The city code of monitor.
	CityCode pulumi.StringInput `pulumi:"cityCode"`
	// The type of monitor.
	ClientType pulumi.IntInput `pulumi:"clientType"`
	// The operator code of monitor.
	OperatorCode pulumi.StringInput `pulumi:"operatorCode"`
}

func (SyntheticTaskMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitor)(nil)).Elem()
}

func (i SyntheticTaskMonitorArgs) ToSyntheticTaskMonitorOutput() SyntheticTaskMonitorOutput {
	return i.ToSyntheticTaskMonitorOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorArgs) ToSyntheticTaskMonitorOutputWithContext(ctx context.Context) SyntheticTaskMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorOutput)
}

// SyntheticTaskMonitorArrayInput is an input type that accepts SyntheticTaskMonitorArray and SyntheticTaskMonitorArrayOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorArrayInput` via:
//
//	SyntheticTaskMonitorArray{ SyntheticTaskMonitorArgs{...} }
type SyntheticTaskMonitorArrayInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorArrayOutput() SyntheticTaskMonitorArrayOutput
	ToSyntheticTaskMonitorArrayOutputWithContext(context.Context) SyntheticTaskMonitorArrayOutput
}

type SyntheticTaskMonitorArray []SyntheticTaskMonitorInput

func (SyntheticTaskMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskMonitor)(nil)).Elem()
}

func (i SyntheticTaskMonitorArray) ToSyntheticTaskMonitorArrayOutput() SyntheticTaskMonitorArrayOutput {
	return i.ToSyntheticTaskMonitorArrayOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorArray) ToSyntheticTaskMonitorArrayOutputWithContext(ctx context.Context) SyntheticTaskMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorArrayOutput)
}

type SyntheticTaskMonitorOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitor)(nil)).Elem()
}

func (o SyntheticTaskMonitorOutput) ToSyntheticTaskMonitorOutput() SyntheticTaskMonitorOutput {
	return o
}

func (o SyntheticTaskMonitorOutput) ToSyntheticTaskMonitorOutputWithContext(ctx context.Context) SyntheticTaskMonitorOutput {
	return o
}

// The city code of monitor.
func (o SyntheticTaskMonitorOutput) CityCode() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitor) string { return v.CityCode }).(pulumi.StringOutput)
}

// The type of monitor.
func (o SyntheticTaskMonitorOutput) ClientType() pulumi.IntOutput {
	return o.ApplyT(func(v SyntheticTaskMonitor) int { return v.ClientType }).(pulumi.IntOutput)
}

// The operator code of monitor.
func (o SyntheticTaskMonitorOutput) OperatorCode() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitor) string { return v.OperatorCode }).(pulumi.StringOutput)
}

type SyntheticTaskMonitorArrayOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticTaskMonitor)(nil)).Elem()
}

func (o SyntheticTaskMonitorArrayOutput) ToSyntheticTaskMonitorArrayOutput() SyntheticTaskMonitorArrayOutput {
	return o
}

func (o SyntheticTaskMonitorArrayOutput) ToSyntheticTaskMonitorArrayOutputWithContext(ctx context.Context) SyntheticTaskMonitorArrayOutput {
	return o
}

func (o SyntheticTaskMonitorArrayOutput) Index(i pulumi.IntInput) SyntheticTaskMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticTaskMonitor {
		return vs[0].([]SyntheticTaskMonitor)[vs[1].(int)]
	}).(SyntheticTaskMonitorOutput)
}

type SyntheticTaskMonitorConf struct {
	// HTTP(S) task configuration information. See `apiHttp` below.
	ApiHttp *SyntheticTaskMonitorConfApiHttp `pulumi:"apiHttp"`
	// File download type task configuration. See `fileDownload` below.
	FileDownload *SyntheticTaskMonitorConfFileDownload `pulumi:"fileDownload"`
	// The configuration parameters of the DNS dial test. Required when TaskType is 3. See `netDns` below.
	NetDns *SyntheticTaskMonitorConfNetDns `pulumi:"netDns"`
	// ICMP dialing configuration parameters. Required when TaskType is 1. See `netIcmp` below.
	NetIcmp *SyntheticTaskMonitorConfNetIcmp `pulumi:"netIcmp"`
	// The configuration parameters of TCP dial test. Required when TaskType is 2. See `netTcp` below.
	NetTcp *SyntheticTaskMonitorConfNetTcp `pulumi:"netTcp"`
	// Streaming Media Dial Test Configuration. See `stream` below.
	Stream *SyntheticTaskMonitorConfStream `pulumi:"stream"`
	// Website speed measurement type task configuration. See `website` below.
	Website *SyntheticTaskMonitorConfWebsite `pulumi:"website"`
}

// SyntheticTaskMonitorConfInput is an input type that accepts SyntheticTaskMonitorConfArgs and SyntheticTaskMonitorConfOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfInput` via:
//
//	SyntheticTaskMonitorConfArgs{...}
type SyntheticTaskMonitorConfInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfOutput() SyntheticTaskMonitorConfOutput
	ToSyntheticTaskMonitorConfOutputWithContext(context.Context) SyntheticTaskMonitorConfOutput
}

type SyntheticTaskMonitorConfArgs struct {
	// HTTP(S) task configuration information. See `apiHttp` below.
	ApiHttp SyntheticTaskMonitorConfApiHttpPtrInput `pulumi:"apiHttp"`
	// File download type task configuration. See `fileDownload` below.
	FileDownload SyntheticTaskMonitorConfFileDownloadPtrInput `pulumi:"fileDownload"`
	// The configuration parameters of the DNS dial test. Required when TaskType is 3. See `netDns` below.
	NetDns SyntheticTaskMonitorConfNetDnsPtrInput `pulumi:"netDns"`
	// ICMP dialing configuration parameters. Required when TaskType is 1. See `netIcmp` below.
	NetIcmp SyntheticTaskMonitorConfNetIcmpPtrInput `pulumi:"netIcmp"`
	// The configuration parameters of TCP dial test. Required when TaskType is 2. See `netTcp` below.
	NetTcp SyntheticTaskMonitorConfNetTcpPtrInput `pulumi:"netTcp"`
	// Streaming Media Dial Test Configuration. See `stream` below.
	Stream SyntheticTaskMonitorConfStreamPtrInput `pulumi:"stream"`
	// Website speed measurement type task configuration. See `website` below.
	Website SyntheticTaskMonitorConfWebsitePtrInput `pulumi:"website"`
}

func (SyntheticTaskMonitorConfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConf)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfArgs) ToSyntheticTaskMonitorConfOutput() SyntheticTaskMonitorConfOutput {
	return i.ToSyntheticTaskMonitorConfOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfArgs) ToSyntheticTaskMonitorConfOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfOutput)
}

func (i SyntheticTaskMonitorConfArgs) ToSyntheticTaskMonitorConfPtrOutput() SyntheticTaskMonitorConfPtrOutput {
	return i.ToSyntheticTaskMonitorConfPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfArgs) ToSyntheticTaskMonitorConfPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfOutput).ToSyntheticTaskMonitorConfPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfPtrInput is an input type that accepts SyntheticTaskMonitorConfArgs, SyntheticTaskMonitorConfPtr and SyntheticTaskMonitorConfPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfPtrInput` via:
//
//	        SyntheticTaskMonitorConfArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfPtrOutput() SyntheticTaskMonitorConfPtrOutput
	ToSyntheticTaskMonitorConfPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfPtrOutput
}

type syntheticTaskMonitorConfPtrType SyntheticTaskMonitorConfArgs

func SyntheticTaskMonitorConfPtr(v *SyntheticTaskMonitorConfArgs) SyntheticTaskMonitorConfPtrInput {
	return (*syntheticTaskMonitorConfPtrType)(v)
}

func (*syntheticTaskMonitorConfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConf)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfPtrType) ToSyntheticTaskMonitorConfPtrOutput() SyntheticTaskMonitorConfPtrOutput {
	return i.ToSyntheticTaskMonitorConfPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfPtrType) ToSyntheticTaskMonitorConfPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfPtrOutput)
}

type SyntheticTaskMonitorConfOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConf)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfOutput) ToSyntheticTaskMonitorConfOutput() SyntheticTaskMonitorConfOutput {
	return o
}

func (o SyntheticTaskMonitorConfOutput) ToSyntheticTaskMonitorConfOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfOutput {
	return o
}

func (o SyntheticTaskMonitorConfOutput) ToSyntheticTaskMonitorConfPtrOutput() SyntheticTaskMonitorConfPtrOutput {
	return o.ToSyntheticTaskMonitorConfPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfOutput) ToSyntheticTaskMonitorConfPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConf {
		return &v
	}).(SyntheticTaskMonitorConfPtrOutput)
}

// HTTP(S) task configuration information. See `apiHttp` below.
func (o SyntheticTaskMonitorConfOutput) ApiHttp() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfApiHttp { return v.ApiHttp }).(SyntheticTaskMonitorConfApiHttpPtrOutput)
}

// File download type task configuration. See `fileDownload` below.
func (o SyntheticTaskMonitorConfOutput) FileDownload() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfFileDownload { return v.FileDownload }).(SyntheticTaskMonitorConfFileDownloadPtrOutput)
}

// The configuration parameters of the DNS dial test. Required when TaskType is 3. See `netDns` below.
func (o SyntheticTaskMonitorConfOutput) NetDns() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetDns { return v.NetDns }).(SyntheticTaskMonitorConfNetDnsPtrOutput)
}

// ICMP dialing configuration parameters. Required when TaskType is 1. See `netIcmp` below.
func (o SyntheticTaskMonitorConfOutput) NetIcmp() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetIcmp { return v.NetIcmp }).(SyntheticTaskMonitorConfNetIcmpPtrOutput)
}

// The configuration parameters of TCP dial test. Required when TaskType is 2. See `netTcp` below.
func (o SyntheticTaskMonitorConfOutput) NetTcp() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetTcp { return v.NetTcp }).(SyntheticTaskMonitorConfNetTcpPtrOutput)
}

// Streaming Media Dial Test Configuration. See `stream` below.
func (o SyntheticTaskMonitorConfOutput) Stream() SyntheticTaskMonitorConfStreamPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfStream { return v.Stream }).(SyntheticTaskMonitorConfStreamPtrOutput)
}

// Website speed measurement type task configuration. See `website` below.
func (o SyntheticTaskMonitorConfOutput) Website() SyntheticTaskMonitorConfWebsitePtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfWebsite { return v.Website }).(SyntheticTaskMonitorConfWebsitePtrOutput)
}

type SyntheticTaskMonitorConfPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConf)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfPtrOutput) ToSyntheticTaskMonitorConfPtrOutput() SyntheticTaskMonitorConfPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfPtrOutput) ToSyntheticTaskMonitorConfPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfPtrOutput) Elem() SyntheticTaskMonitorConfOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) SyntheticTaskMonitorConf {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConf
		return ret
	}).(SyntheticTaskMonitorConfOutput)
}

// HTTP(S) task configuration information. See `apiHttp` below.
func (o SyntheticTaskMonitorConfPtrOutput) ApiHttp() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfApiHttp {
		if v == nil {
			return nil
		}
		return v.ApiHttp
	}).(SyntheticTaskMonitorConfApiHttpPtrOutput)
}

// File download type task configuration. See `fileDownload` below.
func (o SyntheticTaskMonitorConfPtrOutput) FileDownload() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfFileDownload {
		if v == nil {
			return nil
		}
		return v.FileDownload
	}).(SyntheticTaskMonitorConfFileDownloadPtrOutput)
}

// The configuration parameters of the DNS dial test. Required when TaskType is 3. See `netDns` below.
func (o SyntheticTaskMonitorConfPtrOutput) NetDns() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetDns {
		if v == nil {
			return nil
		}
		return v.NetDns
	}).(SyntheticTaskMonitorConfNetDnsPtrOutput)
}

// ICMP dialing configuration parameters. Required when TaskType is 1. See `netIcmp` below.
func (o SyntheticTaskMonitorConfPtrOutput) NetIcmp() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetIcmp {
		if v == nil {
			return nil
		}
		return v.NetIcmp
	}).(SyntheticTaskMonitorConfNetIcmpPtrOutput)
}

// The configuration parameters of TCP dial test. Required when TaskType is 2. See `netTcp` below.
func (o SyntheticTaskMonitorConfPtrOutput) NetTcp() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfNetTcp {
		if v == nil {
			return nil
		}
		return v.NetTcp
	}).(SyntheticTaskMonitorConfNetTcpPtrOutput)
}

// Streaming Media Dial Test Configuration. See `stream` below.
func (o SyntheticTaskMonitorConfPtrOutput) Stream() SyntheticTaskMonitorConfStreamPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfStream {
		if v == nil {
			return nil
		}
		return v.Stream
	}).(SyntheticTaskMonitorConfStreamPtrOutput)
}

// Website speed measurement type task configuration. See `website` below.
func (o SyntheticTaskMonitorConfPtrOutput) Website() SyntheticTaskMonitorConfWebsitePtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConf) *SyntheticTaskMonitorConfWebsite {
		if v == nil {
			return nil
		}
		return v.Website
	}).(SyntheticTaskMonitorConfWebsitePtrOutput)
}

type SyntheticTaskMonitorConfApiHttp struct {
	// Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// HTTP method, GET or POST.
	Method *string `pulumi:"method"`
	// HTTP request body. See `requestBody` below.
	RequestBody *SyntheticTaskMonitorConfApiHttpRequestBody `pulumi:"requestBody"`
	// HTTP request header.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout *int `pulumi:"timeout"`
}

// SyntheticTaskMonitorConfApiHttpInput is an input type that accepts SyntheticTaskMonitorConfApiHttpArgs and SyntheticTaskMonitorConfApiHttpOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfApiHttpInput` via:
//
//	SyntheticTaskMonitorConfApiHttpArgs{...}
type SyntheticTaskMonitorConfApiHttpInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfApiHttpOutput() SyntheticTaskMonitorConfApiHttpOutput
	ToSyntheticTaskMonitorConfApiHttpOutputWithContext(context.Context) SyntheticTaskMonitorConfApiHttpOutput
}

type SyntheticTaskMonitorConfApiHttpArgs struct {
	// Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// HTTP method, GET or POST.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// HTTP request body. See `requestBody` below.
	RequestBody SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput `pulumi:"requestBody"`
	// HTTP request header.
	RequestHeaders pulumi.MapInput `pulumi:"requestHeaders"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (SyntheticTaskMonitorConfApiHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfApiHttp)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfApiHttpArgs) ToSyntheticTaskMonitorConfApiHttpOutput() SyntheticTaskMonitorConfApiHttpOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfApiHttpArgs) ToSyntheticTaskMonitorConfApiHttpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpOutput)
}

func (i SyntheticTaskMonitorConfApiHttpArgs) ToSyntheticTaskMonitorConfApiHttpPtrOutput() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfApiHttpArgs) ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpOutput).ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfApiHttpPtrInput is an input type that accepts SyntheticTaskMonitorConfApiHttpArgs, SyntheticTaskMonitorConfApiHttpPtr and SyntheticTaskMonitorConfApiHttpPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfApiHttpPtrInput` via:
//
//	        SyntheticTaskMonitorConfApiHttpArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfApiHttpPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfApiHttpPtrOutput() SyntheticTaskMonitorConfApiHttpPtrOutput
	ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfApiHttpPtrOutput
}

type syntheticTaskMonitorConfApiHttpPtrType SyntheticTaskMonitorConfApiHttpArgs

func SyntheticTaskMonitorConfApiHttpPtr(v *SyntheticTaskMonitorConfApiHttpArgs) SyntheticTaskMonitorConfApiHttpPtrInput {
	return (*syntheticTaskMonitorConfApiHttpPtrType)(v)
}

func (*syntheticTaskMonitorConfApiHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfApiHttp)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfApiHttpPtrType) ToSyntheticTaskMonitorConfApiHttpPtrOutput() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfApiHttpPtrType) ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpPtrOutput)
}

type SyntheticTaskMonitorConfApiHttpOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfApiHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfApiHttp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfApiHttpOutput) ToSyntheticTaskMonitorConfApiHttpOutput() SyntheticTaskMonitorConfApiHttpOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpOutput) ToSyntheticTaskMonitorConfApiHttpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpOutput) ToSyntheticTaskMonitorConfApiHttpPtrOutput() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o.ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfApiHttpOutput) ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfApiHttp) *SyntheticTaskMonitorConfApiHttp {
		return &v
	}).(SyntheticTaskMonitorConfApiHttpPtrOutput)
}

// Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
func (o SyntheticTaskMonitorConfApiHttpOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// HTTP method, GET or POST.
func (o SyntheticTaskMonitorConfApiHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// HTTP request body. See `requestBody` below.
func (o SyntheticTaskMonitorConfApiHttpOutput) RequestBody() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) *SyntheticTaskMonitorConfApiHttpRequestBody {
		return v.RequestBody
	}).(SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput)
}

// HTTP request header.
func (o SyntheticTaskMonitorConfApiHttpOutput) RequestHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) map[string]interface{} { return v.RequestHeaders }).(pulumi.MapOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfApiHttpOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfApiHttpOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttp) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfApiHttpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfApiHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfApiHttp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfApiHttpPtrOutput) ToSyntheticTaskMonitorConfApiHttpPtrOutput() SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpPtrOutput) ToSyntheticTaskMonitorConfApiHttpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpPtrOutput) Elem() SyntheticTaskMonitorConfApiHttpOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) SyntheticTaskMonitorConfApiHttp {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfApiHttp
		return ret
	}).(SyntheticTaskMonitorConfApiHttpOutput)
}

// Connection timeout, in ms. Default 5000. Optional range: 1000-300000ms.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// HTTP method, GET or POST.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// HTTP request body. See `requestBody` below.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) RequestBody() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) *SyntheticTaskMonitorConfApiHttpRequestBody {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput)
}

// HTTP request header.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) RequestHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(pulumi.MapOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfApiHttpPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttp) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfApiHttpRequestBody struct {
	// The request body content, in JSON string format. When the type is text/plain,application/json,application/xml,text/html, the content can be converted to a JSON string.
	Content *string `pulumi:"content"`
	// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
	Type *string `pulumi:"type"`
}

// SyntheticTaskMonitorConfApiHttpRequestBodyInput is an input type that accepts SyntheticTaskMonitorConfApiHttpRequestBodyArgs and SyntheticTaskMonitorConfApiHttpRequestBodyOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfApiHttpRequestBodyInput` via:
//
//	SyntheticTaskMonitorConfApiHttpRequestBodyArgs{...}
type SyntheticTaskMonitorConfApiHttpRequestBodyInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfApiHttpRequestBodyOutput() SyntheticTaskMonitorConfApiHttpRequestBodyOutput
	ToSyntheticTaskMonitorConfApiHttpRequestBodyOutputWithContext(context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyOutput
}

type SyntheticTaskMonitorConfApiHttpRequestBodyArgs struct {
	// The request body content, in JSON string format. When the type is text/plain,application/json,application/xml,text/html, the content can be converted to a JSON string.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SyntheticTaskMonitorConfApiHttpRequestBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpRequestBody)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfApiHttpRequestBodyArgs) ToSyntheticTaskMonitorConfApiHttpRequestBodyOutput() SyntheticTaskMonitorConfApiHttpRequestBodyOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpRequestBodyOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfApiHttpRequestBodyArgs) ToSyntheticTaskMonitorConfApiHttpRequestBodyOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpRequestBodyOutput)
}

func (i SyntheticTaskMonitorConfApiHttpRequestBodyArgs) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfApiHttpRequestBodyArgs) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpRequestBodyOutput).ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput is an input type that accepts SyntheticTaskMonitorConfApiHttpRequestBodyArgs, SyntheticTaskMonitorConfApiHttpRequestBodyPtr and SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput` via:
//
//	        SyntheticTaskMonitorConfApiHttpRequestBodyArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput
	ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput
}

type syntheticTaskMonitorConfApiHttpRequestBodyPtrType SyntheticTaskMonitorConfApiHttpRequestBodyArgs

func SyntheticTaskMonitorConfApiHttpRequestBodyPtr(v *SyntheticTaskMonitorConfApiHttpRequestBodyArgs) SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput {
	return (*syntheticTaskMonitorConfApiHttpRequestBodyPtrType)(v)
}

func (*syntheticTaskMonitorConfApiHttpRequestBodyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfApiHttpRequestBody)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfApiHttpRequestBodyPtrType) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return i.ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfApiHttpRequestBodyPtrType) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput)
}

type SyntheticTaskMonitorConfApiHttpRequestBodyOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfApiHttpRequestBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpRequestBody)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyOutput() SyntheticTaskMonitorConfApiHttpRequestBodyOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o.ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfApiHttpRequestBody) *SyntheticTaskMonitorConfApiHttpRequestBody {
		return &v
	}).(SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput)
}

// The request body content, in JSON string format. When the type is text/plain,application/json,application/xml,text/html, the content can be converted to a JSON string.
func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttpRequestBody) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
func (o SyntheticTaskMonitorConfApiHttpRequestBodyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfApiHttpRequestBody) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfApiHttpRequestBody)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput() SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) ToSyntheticTaskMonitorConfApiHttpRequestBodyPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) Elem() SyntheticTaskMonitorConfApiHttpRequestBodyOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttpRequestBody) SyntheticTaskMonitorConfApiHttpRequestBody {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfApiHttpRequestBody
		return ret
	}).(SyntheticTaskMonitorConfApiHttpRequestBodyOutput)
}

// The request body content, in JSON string format. When the type is text/plain,application/json,application/xml,text/html, the content can be converted to a JSON string.
func (o SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttpRequestBody) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// Assertion type, including: httpresead, httpresead, HttpResBody, HttpResBodyJson, httpressetime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet delay ms), icmppackwebscreen, fmppackavglatency (average delay rendering), TraceRouteHops (number of hops), dnsarecname, websiteOnload (full load time), see the supplement below for specific use.
func (o SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfApiHttpRequestBody) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfFileDownload struct {
	// Connection timeout time, in ms. Default 5000. Optional range: 1000-120000ms.
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// Custom header, in JSON Map format.
	CustomHeaderContent map[string]interface{} `pulumi:"customHeaderContent"`
	// Download the kernel.
	// - 1:curl
	// - 0:WinInet
	//   Default 1.
	DownloadKernel *int `pulumi:"downloadKernel"`
	// Ignore CA Certificate authorization error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateAuthError *int `pulumi:"ignoreCertificateAuthError"`
	// Ignore certificate revocation error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateCanceledError *int `pulumi:"ignoreCertificateCanceledError"`
	// Ignore certificate expiration error 0: not ignored, 1: Ignored, default 1.
	IgnoreCertificateOutOfDateError *int `pulumi:"ignoreCertificateOutOfDateError"`
	// The certificate status error is ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
	IgnoreCertificateStatusError *int `pulumi:"ignoreCertificateStatusError"`
	// The certificate cannot be trusted and ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
	IgnoreCertificateUntrustworthyError *int `pulumi:"ignoreCertificateUntrustworthyError"`
	// Ignore certificate usage error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateUsingError *int `pulumi:"ignoreCertificateUsingError"`
	// Invalid host error ignored, 0: not ignored, 1: Ignored, default 1.
	IgnoreInvalidHostError *int `pulumi:"ignoreInvalidHostError"`
	// Monitoring timeout, in ms. Not required, 20000 by default.
	MonitorTimeout *int `pulumi:"monitorTimeout"`
	// Quick agreement
	// - 1:http1
	// - 2:http2
	// - 3:http3
	//   Default 1.
	QuickProtocol *int `pulumi:"quickProtocol"`
	// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
	Redirection *int `pulumi:"redirection"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// The transmission size, in KB. The default value is 2048KB. The transmission size of the downloaded file must be between 1 and 20480KB.
	TransmissionSize *int `pulumi:"transmissionSize"`
	// Verify keywords.
	ValidateKeywords *string `pulumi:"validateKeywords"`
	// The verification method.
	// - 0: Do not validate
	// - 1: Validation string
	// - 2:MD5 validation.
	VerifyWay *int `pulumi:"verifyWay"`
	// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	WhiteList *string `pulumi:"whiteList"`
}

// SyntheticTaskMonitorConfFileDownloadInput is an input type that accepts SyntheticTaskMonitorConfFileDownloadArgs and SyntheticTaskMonitorConfFileDownloadOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfFileDownloadInput` via:
//
//	SyntheticTaskMonitorConfFileDownloadArgs{...}
type SyntheticTaskMonitorConfFileDownloadInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfFileDownloadOutput() SyntheticTaskMonitorConfFileDownloadOutput
	ToSyntheticTaskMonitorConfFileDownloadOutputWithContext(context.Context) SyntheticTaskMonitorConfFileDownloadOutput
}

type SyntheticTaskMonitorConfFileDownloadArgs struct {
	// Connection timeout time, in ms. Default 5000. Optional range: 1000-120000ms.
	ConnectionTimeout pulumi.IntPtrInput `pulumi:"connectionTimeout"`
	// Custom header, in JSON Map format.
	CustomHeaderContent pulumi.MapInput `pulumi:"customHeaderContent"`
	// Download the kernel.
	// - 1:curl
	// - 0:WinInet
	//   Default 1.
	DownloadKernel pulumi.IntPtrInput `pulumi:"downloadKernel"`
	// Ignore CA Certificate authorization error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateAuthError pulumi.IntPtrInput `pulumi:"ignoreCertificateAuthError"`
	// Ignore certificate revocation error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateCanceledError pulumi.IntPtrInput `pulumi:"ignoreCertificateCanceledError"`
	// Ignore certificate expiration error 0: not ignored, 1: Ignored, default 1.
	IgnoreCertificateOutOfDateError pulumi.IntPtrInput `pulumi:"ignoreCertificateOutOfDateError"`
	// The certificate status error is ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
	IgnoreCertificateStatusError pulumi.IntPtrInput `pulumi:"ignoreCertificateStatusError"`
	// The certificate cannot be trusted and ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
	IgnoreCertificateUntrustworthyError pulumi.IntPtrInput `pulumi:"ignoreCertificateUntrustworthyError"`
	// Ignore certificate usage error 0: Do not ignore, 1: ignore, default 1.
	IgnoreCertificateUsingError pulumi.IntPtrInput `pulumi:"ignoreCertificateUsingError"`
	// Invalid host error ignored, 0: not ignored, 1: Ignored, default 1.
	IgnoreInvalidHostError pulumi.IntPtrInput `pulumi:"ignoreInvalidHostError"`
	// Monitoring timeout, in ms. Not required, 20000 by default.
	MonitorTimeout pulumi.IntPtrInput `pulumi:"monitorTimeout"`
	// Quick agreement
	// - 1:http1
	// - 2:http2
	// - 3:http3
	//   Default 1.
	QuickProtocol pulumi.IntPtrInput `pulumi:"quickProtocol"`
	// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
	Redirection pulumi.IntPtrInput `pulumi:"redirection"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// The transmission size, in KB. The default value is 2048KB. The transmission size of the downloaded file must be between 1 and 20480KB.
	TransmissionSize pulumi.IntPtrInput `pulumi:"transmissionSize"`
	// Verify keywords.
	ValidateKeywords pulumi.StringPtrInput `pulumi:"validateKeywords"`
	// The verification method.
	// - 0: Do not validate
	// - 1: Validation string
	// - 2:MD5 validation.
	VerifyWay pulumi.IntPtrInput `pulumi:"verifyWay"`
	// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	WhiteList pulumi.StringPtrInput `pulumi:"whiteList"`
}

func (SyntheticTaskMonitorConfFileDownloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfFileDownload)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfFileDownloadArgs) ToSyntheticTaskMonitorConfFileDownloadOutput() SyntheticTaskMonitorConfFileDownloadOutput {
	return i.ToSyntheticTaskMonitorConfFileDownloadOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfFileDownloadArgs) ToSyntheticTaskMonitorConfFileDownloadOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfFileDownloadOutput)
}

func (i SyntheticTaskMonitorConfFileDownloadArgs) ToSyntheticTaskMonitorConfFileDownloadPtrOutput() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return i.ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfFileDownloadArgs) ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfFileDownloadOutput).ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfFileDownloadPtrInput is an input type that accepts SyntheticTaskMonitorConfFileDownloadArgs, SyntheticTaskMonitorConfFileDownloadPtr and SyntheticTaskMonitorConfFileDownloadPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfFileDownloadPtrInput` via:
//
//	        SyntheticTaskMonitorConfFileDownloadArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfFileDownloadPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfFileDownloadPtrOutput() SyntheticTaskMonitorConfFileDownloadPtrOutput
	ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfFileDownloadPtrOutput
}

type syntheticTaskMonitorConfFileDownloadPtrType SyntheticTaskMonitorConfFileDownloadArgs

func SyntheticTaskMonitorConfFileDownloadPtr(v *SyntheticTaskMonitorConfFileDownloadArgs) SyntheticTaskMonitorConfFileDownloadPtrInput {
	return (*syntheticTaskMonitorConfFileDownloadPtrType)(v)
}

func (*syntheticTaskMonitorConfFileDownloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfFileDownload)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfFileDownloadPtrType) ToSyntheticTaskMonitorConfFileDownloadPtrOutput() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return i.ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfFileDownloadPtrType) ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfFileDownloadPtrOutput)
}

type SyntheticTaskMonitorConfFileDownloadOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfFileDownloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfFileDownload)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfFileDownloadOutput) ToSyntheticTaskMonitorConfFileDownloadOutput() SyntheticTaskMonitorConfFileDownloadOutput {
	return o
}

func (o SyntheticTaskMonitorConfFileDownloadOutput) ToSyntheticTaskMonitorConfFileDownloadOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadOutput {
	return o
}

func (o SyntheticTaskMonitorConfFileDownloadOutput) ToSyntheticTaskMonitorConfFileDownloadPtrOutput() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o.ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfFileDownloadOutput) ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfFileDownload) *SyntheticTaskMonitorConfFileDownload {
		return &v
	}).(SyntheticTaskMonitorConfFileDownloadPtrOutput)
}

// Connection timeout time, in ms. Default 5000. Optional range: 1000-120000ms.
func (o SyntheticTaskMonitorConfFileDownloadOutput) ConnectionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.ConnectionTimeout }).(pulumi.IntPtrOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfFileDownloadOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) map[string]interface{} { return v.CustomHeaderContent }).(pulumi.MapOutput)
}

// Download the kernel.
//   - 1:curl
//   - 0:WinInet
//     Default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) DownloadKernel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.DownloadKernel }).(pulumi.IntPtrOutput)
}

// Ignore CA Certificate authorization error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateAuthError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateAuthError }).(pulumi.IntPtrOutput)
}

// Ignore certificate revocation error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateCanceledError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateCanceledError }).(pulumi.IntPtrOutput)
}

// Ignore certificate expiration error 0: not ignored, 1: Ignored, default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateOutOfDateError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateOutOfDateError }).(pulumi.IntPtrOutput)
}

// The certificate status error is ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateStatusError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateStatusError }).(pulumi.IntPtrOutput)
}

// The certificate cannot be trusted and ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateUntrustworthyError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateUntrustworthyError }).(pulumi.IntPtrOutput)
}

// Ignore certificate usage error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreCertificateUsingError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreCertificateUsingError }).(pulumi.IntPtrOutput)
}

// Invalid host error ignored, 0: not ignored, 1: Ignored, default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) IgnoreInvalidHostError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.IgnoreInvalidHostError }).(pulumi.IntPtrOutput)
}

// Monitoring timeout, in ms. Not required, 20000 by default.
func (o SyntheticTaskMonitorConfFileDownloadOutput) MonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.MonitorTimeout }).(pulumi.IntPtrOutput)
}

// Quick agreement
//   - 1:http1
//   - 2:http2
//   - 3:http3
//     Default 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) QuickProtocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.QuickProtocol }).(pulumi.IntPtrOutput)
}

// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
func (o SyntheticTaskMonitorConfFileDownloadOutput) Redirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.Redirection }).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfFileDownloadOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// The transmission size, in KB. The default value is 2048KB. The transmission size of the downloaded file must be between 1 and 20480KB.
func (o SyntheticTaskMonitorConfFileDownloadOutput) TransmissionSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.TransmissionSize }).(pulumi.IntPtrOutput)
}

// Verify keywords.
func (o SyntheticTaskMonitorConfFileDownloadOutput) ValidateKeywords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *string { return v.ValidateKeywords }).(pulumi.StringPtrOutput)
}

// The verification method.
// - 0: Do not validate
// - 1: Validation string
// - 2:MD5 validation.
func (o SyntheticTaskMonitorConfFileDownloadOutput) VerifyWay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *int { return v.VerifyWay }).(pulumi.IntPtrOutput)
}

// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfFileDownloadOutput) WhiteList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfFileDownload) *string { return v.WhiteList }).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfFileDownloadPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfFileDownloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfFileDownload)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) ToSyntheticTaskMonitorConfFileDownloadPtrOutput() SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) ToSyntheticTaskMonitorConfFileDownloadPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfFileDownloadPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) Elem() SyntheticTaskMonitorConfFileDownloadOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) SyntheticTaskMonitorConfFileDownload {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfFileDownload
		return ret
	}).(SyntheticTaskMonitorConfFileDownloadOutput)
}

// Connection timeout time, in ms. Default 5000. Optional range: 1000-120000ms.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) ConnectionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.ConnectionTimeout
	}).(pulumi.IntPtrOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomHeaderContent
	}).(pulumi.MapOutput)
}

// Download the kernel.
//   - 1:curl
//   - 0:WinInet
//     Default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) DownloadKernel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.DownloadKernel
	}).(pulumi.IntPtrOutput)
}

// Ignore CA Certificate authorization error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateAuthError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateAuthError
	}).(pulumi.IntPtrOutput)
}

// Ignore certificate revocation error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateCanceledError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateCanceledError
	}).(pulumi.IntPtrOutput)
}

// Ignore certificate expiration error 0: not ignored, 1: Ignored, default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateOutOfDateError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateOutOfDateError
	}).(pulumi.IntPtrOutput)
}

// The certificate status error is ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateStatusError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateStatusError
	}).(pulumi.IntPtrOutput)
}

// The certificate cannot be trusted and ignored. 0: Do not ignore, 1: IGNORE. The default value is 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateUntrustworthyError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateUntrustworthyError
	}).(pulumi.IntPtrOutput)
}

// Ignore certificate usage error 0: Do not ignore, 1: ignore, default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreCertificateUsingError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateUsingError
	}).(pulumi.IntPtrOutput)
}

// Invalid host error ignored, 0: not ignored, 1: Ignored, default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) IgnoreInvalidHostError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreInvalidHostError
	}).(pulumi.IntPtrOutput)
}

// Monitoring timeout, in ms. Not required, 20000 by default.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) MonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.MonitorTimeout
	}).(pulumi.IntPtrOutput)
}

// Quick agreement
//   - 1:http1
//   - 2:http2
//   - 3:http3
//     Default 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) QuickProtocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.QuickProtocol
	}).(pulumi.IntPtrOutput)
}

// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) Redirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.Redirection
	}).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// The transmission size, in KB. The default value is 2048KB. The transmission size of the downloaded file must be between 1 and 20480KB.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) TransmissionSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.TransmissionSize
	}).(pulumi.IntPtrOutput)
}

// Verify keywords.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) ValidateKeywords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *string {
		if v == nil {
			return nil
		}
		return v.ValidateKeywords
	}).(pulumi.StringPtrOutput)
}

// The verification method.
// - 0: Do not validate
// - 1: Validation string
// - 2:MD5 validation.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) VerifyWay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *int {
		if v == nil {
			return nil
		}
		return v.VerifyWay
	}).(pulumi.IntPtrOutput)
}

// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfFileDownloadPtrOutput) WhiteList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfFileDownload) *string {
		if v == nil {
			return nil
		}
		return v.WhiteList
	}).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfNetDns struct {
	// The IP address type of the DNS server.
	// - 0 (default):ipv4
	// - 1:ipv6
	//   2: Automatic.
	DnsServerIpType *int `pulumi:"dnsServerIpType"`
	// The IP address of the NS server. The default value is 114.114.114.114.
	NsServer *string `pulumi:"nsServer"`
	// DNS query method.
	// - 0 (default): Recursive
	// - 1: Iteration.
	QueryMethod *int `pulumi:"queryMethod"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout *int `pulumi:"timeout"`
}

// SyntheticTaskMonitorConfNetDnsInput is an input type that accepts SyntheticTaskMonitorConfNetDnsArgs and SyntheticTaskMonitorConfNetDnsOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetDnsInput` via:
//
//	SyntheticTaskMonitorConfNetDnsArgs{...}
type SyntheticTaskMonitorConfNetDnsInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetDnsOutput() SyntheticTaskMonitorConfNetDnsOutput
	ToSyntheticTaskMonitorConfNetDnsOutputWithContext(context.Context) SyntheticTaskMonitorConfNetDnsOutput
}

type SyntheticTaskMonitorConfNetDnsArgs struct {
	// The IP address type of the DNS server.
	// - 0 (default):ipv4
	// - 1:ipv6
	//   2: Automatic.
	DnsServerIpType pulumi.IntPtrInput `pulumi:"dnsServerIpType"`
	// The IP address of the NS server. The default value is 114.114.114.114.
	NsServer pulumi.StringPtrInput `pulumi:"nsServer"`
	// DNS query method.
	// - 0 (default): Recursive
	// - 1: Iteration.
	QueryMethod pulumi.IntPtrInput `pulumi:"queryMethod"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (SyntheticTaskMonitorConfNetDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetDns)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfNetDnsArgs) ToSyntheticTaskMonitorConfNetDnsOutput() SyntheticTaskMonitorConfNetDnsOutput {
	return i.ToSyntheticTaskMonitorConfNetDnsOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetDnsArgs) ToSyntheticTaskMonitorConfNetDnsOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetDnsOutput)
}

func (i SyntheticTaskMonitorConfNetDnsArgs) ToSyntheticTaskMonitorConfNetDnsPtrOutput() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetDnsArgs) ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetDnsOutput).ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfNetDnsPtrInput is an input type that accepts SyntheticTaskMonitorConfNetDnsArgs, SyntheticTaskMonitorConfNetDnsPtr and SyntheticTaskMonitorConfNetDnsPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetDnsPtrInput` via:
//
//	        SyntheticTaskMonitorConfNetDnsArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfNetDnsPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetDnsPtrOutput() SyntheticTaskMonitorConfNetDnsPtrOutput
	ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfNetDnsPtrOutput
}

type syntheticTaskMonitorConfNetDnsPtrType SyntheticTaskMonitorConfNetDnsArgs

func SyntheticTaskMonitorConfNetDnsPtr(v *SyntheticTaskMonitorConfNetDnsArgs) SyntheticTaskMonitorConfNetDnsPtrInput {
	return (*syntheticTaskMonitorConfNetDnsPtrType)(v)
}

func (*syntheticTaskMonitorConfNetDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetDns)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfNetDnsPtrType) ToSyntheticTaskMonitorConfNetDnsPtrOutput() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfNetDnsPtrType) ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetDnsPtrOutput)
}

type SyntheticTaskMonitorConfNetDnsOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetDns)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetDnsOutput) ToSyntheticTaskMonitorConfNetDnsOutput() SyntheticTaskMonitorConfNetDnsOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetDnsOutput) ToSyntheticTaskMonitorConfNetDnsOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetDnsOutput) ToSyntheticTaskMonitorConfNetDnsPtrOutput() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o.ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfNetDnsOutput) ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfNetDns) *SyntheticTaskMonitorConfNetDns {
		return &v
	}).(SyntheticTaskMonitorConfNetDnsPtrOutput)
}

// The IP address type of the DNS server.
//   - 0 (default):ipv4
//   - 1:ipv6
//     2: Automatic.
func (o SyntheticTaskMonitorConfNetDnsOutput) DnsServerIpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetDns) *int { return v.DnsServerIpType }).(pulumi.IntPtrOutput)
}

// The IP address of the NS server. The default value is 114.114.114.114.
func (o SyntheticTaskMonitorConfNetDnsOutput) NsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetDns) *string { return v.NsServer }).(pulumi.StringPtrOutput)
}

// DNS query method.
// - 0 (default): Recursive
// - 1: Iteration.
func (o SyntheticTaskMonitorConfNetDnsOutput) QueryMethod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetDns) *int { return v.QueryMethod }).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetDnsOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetDns) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetDnsOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetDns) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfNetDnsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetDns)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetDnsPtrOutput) ToSyntheticTaskMonitorConfNetDnsPtrOutput() SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetDnsPtrOutput) ToSyntheticTaskMonitorConfNetDnsPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetDnsPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetDnsPtrOutput) Elem() SyntheticTaskMonitorConfNetDnsOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) SyntheticTaskMonitorConfNetDns {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfNetDns
		return ret
	}).(SyntheticTaskMonitorConfNetDnsOutput)
}

// The IP address type of the DNS server.
//   - 0 (default):ipv4
//   - 1:ipv6
//     2: Automatic.
func (o SyntheticTaskMonitorConfNetDnsPtrOutput) DnsServerIpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) *int {
		if v == nil {
			return nil
		}
		return v.DnsServerIpType
	}).(pulumi.IntPtrOutput)
}

// The IP address of the NS server. The default value is 114.114.114.114.
func (o SyntheticTaskMonitorConfNetDnsPtrOutput) NsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) *string {
		if v == nil {
			return nil
		}
		return v.NsServer
	}).(pulumi.StringPtrOutput)
}

// DNS query method.
// - 0 (default): Recursive
// - 1: Iteration.
func (o SyntheticTaskMonitorConfNetDnsPtrOutput) QueryMethod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) *int {
		if v == nil {
			return nil
		}
		return v.QueryMethod
	}).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetDnsPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetDnsPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetDns) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfNetIcmp struct {
	// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
	Interval *int `pulumi:"interval"`
	// Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
	PackageNum *int `pulumi:"packageNum"`
	// The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
	PackageSize *int `pulumi:"packageSize"`
	// Whether to split ICMP(Ping) packets. The default is true.
	SplitPackage *bool `pulumi:"splitPackage"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout *int `pulumi:"timeout"`
	// Whether to enable tracert. The default is true.
	TracertEnable *bool `pulumi:"tracertEnable"`
	// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
	TracertNumMax *int `pulumi:"tracertNumMax"`
	// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
	TracertTimeout *int `pulumi:"tracertTimeout"`
}

// SyntheticTaskMonitorConfNetIcmpInput is an input type that accepts SyntheticTaskMonitorConfNetIcmpArgs and SyntheticTaskMonitorConfNetIcmpOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetIcmpInput` via:
//
//	SyntheticTaskMonitorConfNetIcmpArgs{...}
type SyntheticTaskMonitorConfNetIcmpInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetIcmpOutput() SyntheticTaskMonitorConfNetIcmpOutput
	ToSyntheticTaskMonitorConfNetIcmpOutputWithContext(context.Context) SyntheticTaskMonitorConfNetIcmpOutput
}

type SyntheticTaskMonitorConfNetIcmpArgs struct {
	// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
	PackageNum pulumi.IntPtrInput `pulumi:"packageNum"`
	// The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
	PackageSize pulumi.IntPtrInput `pulumi:"packageSize"`
	// Whether to split ICMP(Ping) packets. The default is true.
	SplitPackage pulumi.BoolPtrInput `pulumi:"splitPackage"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Whether to enable tracert. The default is true.
	TracertEnable pulumi.BoolPtrInput `pulumi:"tracertEnable"`
	// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
	TracertNumMax pulumi.IntPtrInput `pulumi:"tracertNumMax"`
	// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
	TracertTimeout pulumi.IntPtrInput `pulumi:"tracertTimeout"`
}

func (SyntheticTaskMonitorConfNetIcmpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetIcmp)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfNetIcmpArgs) ToSyntheticTaskMonitorConfNetIcmpOutput() SyntheticTaskMonitorConfNetIcmpOutput {
	return i.ToSyntheticTaskMonitorConfNetIcmpOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetIcmpArgs) ToSyntheticTaskMonitorConfNetIcmpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetIcmpOutput)
}

func (i SyntheticTaskMonitorConfNetIcmpArgs) ToSyntheticTaskMonitorConfNetIcmpPtrOutput() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetIcmpArgs) ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetIcmpOutput).ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfNetIcmpPtrInput is an input type that accepts SyntheticTaskMonitorConfNetIcmpArgs, SyntheticTaskMonitorConfNetIcmpPtr and SyntheticTaskMonitorConfNetIcmpPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetIcmpPtrInput` via:
//
//	        SyntheticTaskMonitorConfNetIcmpArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfNetIcmpPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetIcmpPtrOutput() SyntheticTaskMonitorConfNetIcmpPtrOutput
	ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfNetIcmpPtrOutput
}

type syntheticTaskMonitorConfNetIcmpPtrType SyntheticTaskMonitorConfNetIcmpArgs

func SyntheticTaskMonitorConfNetIcmpPtr(v *SyntheticTaskMonitorConfNetIcmpArgs) SyntheticTaskMonitorConfNetIcmpPtrInput {
	return (*syntheticTaskMonitorConfNetIcmpPtrType)(v)
}

func (*syntheticTaskMonitorConfNetIcmpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetIcmp)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfNetIcmpPtrType) ToSyntheticTaskMonitorConfNetIcmpPtrOutput() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfNetIcmpPtrType) ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetIcmpPtrOutput)
}

type SyntheticTaskMonitorConfNetIcmpOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetIcmpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetIcmp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetIcmpOutput) ToSyntheticTaskMonitorConfNetIcmpOutput() SyntheticTaskMonitorConfNetIcmpOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetIcmpOutput) ToSyntheticTaskMonitorConfNetIcmpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetIcmpOutput) ToSyntheticTaskMonitorConfNetIcmpPtrOutput() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o.ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfNetIcmpOutput) ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfNetIcmp) *SyntheticTaskMonitorConfNetIcmp {
		return &v
	}).(SyntheticTaskMonitorConfNetIcmpPtrOutput)
}

// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
func (o SyntheticTaskMonitorConfNetIcmpOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
func (o SyntheticTaskMonitorConfNetIcmpOutput) PackageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.PackageNum }).(pulumi.IntPtrOutput)
}

// The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
func (o SyntheticTaskMonitorConfNetIcmpOutput) PackageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.PackageSize }).(pulumi.IntPtrOutput)
}

// Whether to split ICMP(Ping) packets. The default is true.
func (o SyntheticTaskMonitorConfNetIcmpOutput) SplitPackage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *bool { return v.SplitPackage }).(pulumi.BoolPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetIcmpOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetIcmpOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Whether to enable tracert. The default is true.
func (o SyntheticTaskMonitorConfNetIcmpOutput) TracertEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *bool { return v.TracertEnable }).(pulumi.BoolPtrOutput)
}

// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
func (o SyntheticTaskMonitorConfNetIcmpOutput) TracertNumMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.TracertNumMax }).(pulumi.IntPtrOutput)
}

// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
func (o SyntheticTaskMonitorConfNetIcmpOutput) TracertTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetIcmp) *int { return v.TracertTimeout }).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfNetIcmpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetIcmpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetIcmp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) ToSyntheticTaskMonitorConfNetIcmpPtrOutput() SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) ToSyntheticTaskMonitorConfNetIcmpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetIcmpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) Elem() SyntheticTaskMonitorConfNetIcmpOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) SyntheticTaskMonitorConfNetIcmp {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfNetIcmp
		return ret
	}).(SyntheticTaskMonitorConfNetIcmpOutput)
}

// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// Number of ICMP(Ping) packets sent. The minimum value is 1, the maximum value is 50, and the default is 4.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) PackageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.PackageNum
	}).(pulumi.IntPtrOutput)
}

// The size of the sent ICMP(Ping) packet. The unit is byte. The ICMP(PING) packet size is limited to 32, 64, 128, 256, 512, 1024, 1080, and 1450.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) PackageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.PackageSize
	}).(pulumi.IntPtrOutput)
}

// Whether to split ICMP(Ping) packets. The default is true.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) SplitPackage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *bool {
		if v == nil {
			return nil
		}
		return v.SplitPackage
	}).(pulumi.BoolPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Whether to enable tracert. The default is true.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) TracertEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *bool {
		if v == nil {
			return nil
		}
		return v.TracertEnable
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) TracertNumMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.TracertNumMax
	}).(pulumi.IntPtrOutput)
}

// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
func (o SyntheticTaskMonitorConfNetIcmpPtrOutput) TracertTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetIcmp) *int {
		if v == nil {
			return nil
		}
		return v.TracertTimeout
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfNetTcp struct {
	// The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
	ConnectTimes *int `pulumi:"connectTimes"`
	// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
	Interval *int `pulumi:"interval"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout *int `pulumi:"timeout"`
	// Whether to enable tracert. The default is true.
	TracertEnable *bool `pulumi:"tracertEnable"`
	// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
	TracertNumMax *int `pulumi:"tracertNumMax"`
	// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
	TracertTimeout *int `pulumi:"tracertTimeout"`
}

// SyntheticTaskMonitorConfNetTcpInput is an input type that accepts SyntheticTaskMonitorConfNetTcpArgs and SyntheticTaskMonitorConfNetTcpOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetTcpInput` via:
//
//	SyntheticTaskMonitorConfNetTcpArgs{...}
type SyntheticTaskMonitorConfNetTcpInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetTcpOutput() SyntheticTaskMonitorConfNetTcpOutput
	ToSyntheticTaskMonitorConfNetTcpOutputWithContext(context.Context) SyntheticTaskMonitorConfNetTcpOutput
}

type SyntheticTaskMonitorConfNetTcpArgs struct {
	// The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
	ConnectTimes pulumi.IntPtrInput `pulumi:"connectTimes"`
	// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Whether to enable tracert. The default is true.
	TracertEnable pulumi.BoolPtrInput `pulumi:"tracertEnable"`
	// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
	TracertNumMax pulumi.IntPtrInput `pulumi:"tracertNumMax"`
	// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
	TracertTimeout pulumi.IntPtrInput `pulumi:"tracertTimeout"`
}

func (SyntheticTaskMonitorConfNetTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetTcp)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfNetTcpArgs) ToSyntheticTaskMonitorConfNetTcpOutput() SyntheticTaskMonitorConfNetTcpOutput {
	return i.ToSyntheticTaskMonitorConfNetTcpOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetTcpArgs) ToSyntheticTaskMonitorConfNetTcpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetTcpOutput)
}

func (i SyntheticTaskMonitorConfNetTcpArgs) ToSyntheticTaskMonitorConfNetTcpPtrOutput() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfNetTcpArgs) ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetTcpOutput).ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfNetTcpPtrInput is an input type that accepts SyntheticTaskMonitorConfNetTcpArgs, SyntheticTaskMonitorConfNetTcpPtr and SyntheticTaskMonitorConfNetTcpPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfNetTcpPtrInput` via:
//
//	        SyntheticTaskMonitorConfNetTcpArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfNetTcpPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfNetTcpPtrOutput() SyntheticTaskMonitorConfNetTcpPtrOutput
	ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfNetTcpPtrOutput
}

type syntheticTaskMonitorConfNetTcpPtrType SyntheticTaskMonitorConfNetTcpArgs

func SyntheticTaskMonitorConfNetTcpPtr(v *SyntheticTaskMonitorConfNetTcpArgs) SyntheticTaskMonitorConfNetTcpPtrInput {
	return (*syntheticTaskMonitorConfNetTcpPtrType)(v)
}

func (*syntheticTaskMonitorConfNetTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetTcp)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfNetTcpPtrType) ToSyntheticTaskMonitorConfNetTcpPtrOutput() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return i.ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfNetTcpPtrType) ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfNetTcpPtrOutput)
}

type SyntheticTaskMonitorConfNetTcpOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfNetTcp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetTcpOutput) ToSyntheticTaskMonitorConfNetTcpOutput() SyntheticTaskMonitorConfNetTcpOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetTcpOutput) ToSyntheticTaskMonitorConfNetTcpOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetTcpOutput) ToSyntheticTaskMonitorConfNetTcpPtrOutput() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o.ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfNetTcpOutput) ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfNetTcp) *SyntheticTaskMonitorConfNetTcp {
		return &v
	}).(SyntheticTaskMonitorConfNetTcpPtrOutput)
}

// The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
func (o SyntheticTaskMonitorConfNetTcpOutput) ConnectTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *int { return v.ConnectTimes }).(pulumi.IntPtrOutput)
}

// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
func (o SyntheticTaskMonitorConfNetTcpOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetTcpOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetTcpOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Whether to enable tracert. The default is true.
func (o SyntheticTaskMonitorConfNetTcpOutput) TracertEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *bool { return v.TracertEnable }).(pulumi.BoolPtrOutput)
}

// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
func (o SyntheticTaskMonitorConfNetTcpOutput) TracertNumMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *int { return v.TracertNumMax }).(pulumi.IntPtrOutput)
}

// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
func (o SyntheticTaskMonitorConfNetTcpOutput) TracertTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfNetTcp) *int { return v.TracertTimeout }).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfNetTcpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfNetTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfNetTcp)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfNetTcpPtrOutput) ToSyntheticTaskMonitorConfNetTcpPtrOutput() SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetTcpPtrOutput) ToSyntheticTaskMonitorConfNetTcpPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfNetTcpPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfNetTcpPtrOutput) Elem() SyntheticTaskMonitorConfNetTcpOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) SyntheticTaskMonitorConfNetTcp {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfNetTcp
		return ret
	}).(SyntheticTaskMonitorConfNetTcpOutput)
}

// The number of TCP connections established. The minimum value is 1, the maximum value is 16, and the default is 4.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) ConnectTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimes
	}).(pulumi.IntPtrOutput)
}

// The interval between TCP connections. The unit is milliseconds (ms), the minimum value is 200, the maximum value is 10000, and the default value is 200.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// TCP dial test timeout. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 20000.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Whether to enable tracert. The default is true.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) TracertEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *bool {
		if v == nil {
			return nil
		}
		return v.TracertEnable
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of hops for tracert. The minimum value is 1, the maximum value is 128, and the default value is 20.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) TracertNumMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *int {
		if v == nil {
			return nil
		}
		return v.TracertNumMax
	}).(pulumi.IntPtrOutput)
}

// The time-out of tracert. The unit is milliseconds (ms), the minimum value is 1000, the maximum value is 300000, and the default value is 60000.
func (o SyntheticTaskMonitorConfNetTcpPtrOutput) TracertTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfNetTcp) *int {
		if v == nil {
			return nil
		}
		return v.TracertTimeout
	}).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfStream struct {
	// Custom header, in JSON Map format.
	CustomHeaderContent map[string]interface{} `pulumi:"customHeaderContent"`
	// Player, do not pass the default 12.
	// - 12:VLC
	// - 2:FlashPlayer.
	PlayerType *int `pulumi:"playerType"`
	// Resource address type:
	// - 1: Resource address.
	// - 0: page address, not 0 by default.
	StreamAddressType *int `pulumi:"streamAddressType"`
	// Monitoring duration, in seconds, up to 60s, not 60 by default.
	StreamMonitorTimeout *int `pulumi:"streamMonitorTimeout"`
	// Audio and video flags: 0-video, 1-audio.
	StreamType *int `pulumi:"streamType"`
	// The target URL.
	TargetUrl *string `pulumi:"targetUrl"`
	// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	WhiteList *string `pulumi:"whiteList"`
}

// SyntheticTaskMonitorConfStreamInput is an input type that accepts SyntheticTaskMonitorConfStreamArgs and SyntheticTaskMonitorConfStreamOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfStreamInput` via:
//
//	SyntheticTaskMonitorConfStreamArgs{...}
type SyntheticTaskMonitorConfStreamInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfStreamOutput() SyntheticTaskMonitorConfStreamOutput
	ToSyntheticTaskMonitorConfStreamOutputWithContext(context.Context) SyntheticTaskMonitorConfStreamOutput
}

type SyntheticTaskMonitorConfStreamArgs struct {
	// Custom header, in JSON Map format.
	CustomHeaderContent pulumi.MapInput `pulumi:"customHeaderContent"`
	// Player, do not pass the default 12.
	// - 12:VLC
	// - 2:FlashPlayer.
	PlayerType pulumi.IntPtrInput `pulumi:"playerType"`
	// Resource address type:
	// - 1: Resource address.
	// - 0: page address, not 0 by default.
	StreamAddressType pulumi.IntPtrInput `pulumi:"streamAddressType"`
	// Monitoring duration, in seconds, up to 60s, not 60 by default.
	StreamMonitorTimeout pulumi.IntPtrInput `pulumi:"streamMonitorTimeout"`
	// Audio and video flags: 0-video, 1-audio.
	StreamType pulumi.IntPtrInput `pulumi:"streamType"`
	// The target URL.
	TargetUrl pulumi.StringPtrInput `pulumi:"targetUrl"`
	// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	WhiteList pulumi.StringPtrInput `pulumi:"whiteList"`
}

func (SyntheticTaskMonitorConfStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfStream)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfStreamArgs) ToSyntheticTaskMonitorConfStreamOutput() SyntheticTaskMonitorConfStreamOutput {
	return i.ToSyntheticTaskMonitorConfStreamOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfStreamArgs) ToSyntheticTaskMonitorConfStreamOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfStreamOutput)
}

func (i SyntheticTaskMonitorConfStreamArgs) ToSyntheticTaskMonitorConfStreamPtrOutput() SyntheticTaskMonitorConfStreamPtrOutput {
	return i.ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfStreamArgs) ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfStreamOutput).ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfStreamPtrInput is an input type that accepts SyntheticTaskMonitorConfStreamArgs, SyntheticTaskMonitorConfStreamPtr and SyntheticTaskMonitorConfStreamPtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfStreamPtrInput` via:
//
//	        SyntheticTaskMonitorConfStreamArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfStreamPtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfStreamPtrOutput() SyntheticTaskMonitorConfStreamPtrOutput
	ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(context.Context) SyntheticTaskMonitorConfStreamPtrOutput
}

type syntheticTaskMonitorConfStreamPtrType SyntheticTaskMonitorConfStreamArgs

func SyntheticTaskMonitorConfStreamPtr(v *SyntheticTaskMonitorConfStreamArgs) SyntheticTaskMonitorConfStreamPtrInput {
	return (*syntheticTaskMonitorConfStreamPtrType)(v)
}

func (*syntheticTaskMonitorConfStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfStream)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfStreamPtrType) ToSyntheticTaskMonitorConfStreamPtrOutput() SyntheticTaskMonitorConfStreamPtrOutput {
	return i.ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfStreamPtrType) ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfStreamPtrOutput)
}

type SyntheticTaskMonitorConfStreamOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfStream)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfStreamOutput) ToSyntheticTaskMonitorConfStreamOutput() SyntheticTaskMonitorConfStreamOutput {
	return o
}

func (o SyntheticTaskMonitorConfStreamOutput) ToSyntheticTaskMonitorConfStreamOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamOutput {
	return o
}

func (o SyntheticTaskMonitorConfStreamOutput) ToSyntheticTaskMonitorConfStreamPtrOutput() SyntheticTaskMonitorConfStreamPtrOutput {
	return o.ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfStreamOutput) ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfStream) *SyntheticTaskMonitorConfStream {
		return &v
	}).(SyntheticTaskMonitorConfStreamPtrOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfStreamOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) map[string]interface{} { return v.CustomHeaderContent }).(pulumi.MapOutput)
}

// Player, do not pass the default 12.
// - 12:VLC
// - 2:FlashPlayer.
func (o SyntheticTaskMonitorConfStreamOutput) PlayerType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *int { return v.PlayerType }).(pulumi.IntPtrOutput)
}

// Resource address type:
// - 1: Resource address.
// - 0: page address, not 0 by default.
func (o SyntheticTaskMonitorConfStreamOutput) StreamAddressType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *int { return v.StreamAddressType }).(pulumi.IntPtrOutput)
}

// Monitoring duration, in seconds, up to 60s, not 60 by default.
func (o SyntheticTaskMonitorConfStreamOutput) StreamMonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *int { return v.StreamMonitorTimeout }).(pulumi.IntPtrOutput)
}

// Audio and video flags: 0-video, 1-audio.
func (o SyntheticTaskMonitorConfStreamOutput) StreamType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *int { return v.StreamType }).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfStreamOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *string { return v.TargetUrl }).(pulumi.StringPtrOutput)
}

// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfStreamOutput) WhiteList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfStream) *string { return v.WhiteList }).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfStreamPtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfStream)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfStreamPtrOutput) ToSyntheticTaskMonitorConfStreamPtrOutput() SyntheticTaskMonitorConfStreamPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfStreamPtrOutput) ToSyntheticTaskMonitorConfStreamPtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfStreamPtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfStreamPtrOutput) Elem() SyntheticTaskMonitorConfStreamOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) SyntheticTaskMonitorConfStream {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfStream
		return ret
	}).(SyntheticTaskMonitorConfStreamOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfStreamPtrOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomHeaderContent
	}).(pulumi.MapOutput)
}

// Player, do not pass the default 12.
// - 12:VLC
// - 2:FlashPlayer.
func (o SyntheticTaskMonitorConfStreamPtrOutput) PlayerType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *int {
		if v == nil {
			return nil
		}
		return v.PlayerType
	}).(pulumi.IntPtrOutput)
}

// Resource address type:
// - 1: Resource address.
// - 0: page address, not 0 by default.
func (o SyntheticTaskMonitorConfStreamPtrOutput) StreamAddressType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *int {
		if v == nil {
			return nil
		}
		return v.StreamAddressType
	}).(pulumi.IntPtrOutput)
}

// Monitoring duration, in seconds, up to 60s, not 60 by default.
func (o SyntheticTaskMonitorConfStreamPtrOutput) StreamMonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *int {
		if v == nil {
			return nil
		}
		return v.StreamMonitorTimeout
	}).(pulumi.IntPtrOutput)
}

// Audio and video flags: 0-video, 1-audio.
func (o SyntheticTaskMonitorConfStreamPtrOutput) StreamType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *int {
		if v == nil {
			return nil
		}
		return v.StreamType
	}).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfStreamPtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *string {
		if v == nil {
			return nil
		}
		return v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// DNS hijack whitelist. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfStreamPtrOutput) WhiteList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfStream) *string {
		if v == nil {
			return nil
		}
		return v.WhiteList
	}).(pulumi.StringPtrOutput)
}

type SyntheticTaskMonitorConfWebsite struct {
	// Whether to support automatic scrolling screen, loading page.
	// - 0 (default): No
	//   1: Yes.
	AutomaticScrolling *int `pulumi:"automaticScrolling"`
	// Custom header.
	// - 0 (default): Off
	// - 1: Modify the first package
	// - 2: Modify all packages.
	CustomHeader *int `pulumi:"customHeader"`
	// Custom header, in JSON Map format.
	CustomHeaderContent map[string]interface{} `pulumi:"customHeaderContent"`
	// Whether to disable caching.
	// - 0: not disabled
	// - 1 (default): Disabled.
	DisableCache *int `pulumi:"disableCache"`
	// The Accept-Encoding field is used to determine whether to Accept compressed files. 0-do not disable, 1-disable, the default is 0.
	DisableCompression *int `pulumi:"disableCompression"`
	// When a domain name (such as www.aliyun.com) is resolved, if the resolved IP address or CNAME is not in the DNS hijacking white list, the user will fail to access or return a target IP address that is not Aliyun. If the IP or CNAME in the resolution result is in the DNS white list, it will be determined that DNS hijacking has not occurred.  Fill in the format: Domain name: matching rules. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	DnsHijackWhitelist *string `pulumi:"dnsHijackWhitelist"`
	// If an element configured in the element blacklist appears during page loading, the element is not requested to be loaded.
	ElementBlacklist *string `pulumi:"elementBlacklist"`
	// Whether to filter invalid IP parameters. 0: filter, 1: do not filter. The default value is 0.
	FilterInvalidIp *int `pulumi:"filterInvalidIp"`
	// Identify elements: Set the total number of elements on the Browse page.
	FlowHijackJumpTimes *int `pulumi:"flowHijackJumpTimes"`
	// Hijacking ID: Set the matching key information. Enter the hijacking keyword or key element, with an asterisk (*) allowed.
	FlowHijackLogo *string `pulumi:"flowHijackLogo"`
	// Whether to ignore certificate errors during certificate verification in SSL Handshake and continue browsing. 0-do not ignore, 1-ignore. The default value is 1.
	IgnoreCertificateError *int `pulumi:"ignoreCertificateError"`
	// Monitoring timeout, in ms. Not required, 20000 by default.
	MonitorTimeout *int `pulumi:"monitorTimeout"`
	// Monitoring the page appears to be tampered with elements other than the domain settings that belong to the page. Common manifestations are pop-up advertisements, floating advertisements, jumps, etc.  Fill in the format: Domain name: Element. You can fill multiple elements separated by a vertical bar (|). For example, www.aliyun.com:|/cc/bb/a.gif |/vv/bb/cc.jpg indicates that all the other elements of the www.aliyun.com domain name except the basic document,/cc/bb/a.gif, and/vv/bb/cc.jpg are tampered.
	PageTamper *string `pulumi:"pageTamper"`
	// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
	Redirection *int `pulumi:"redirection"`
	// The slow element threshold, in ms, is 5000 by default and can be selected from 1 to 300000ms.
	SlowElementThreshold *int `pulumi:"slowElementThreshold"`
	// The target URL.
	TargetUrl string `pulumi:"targetUrl"`
	// The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any of the blacklisted strings, 650 error is returned. Multiple strings are separated by a vertical bar (|).
	VerifyStringBlacklist *string `pulumi:"verifyStringBlacklist"`
	// The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist. Otherwise, 650 error is returned. Multiple strings are separated by a vertical bar (|).
	VerifyStringWhitelist *string `pulumi:"verifyStringWhitelist"`
	// The maximum waiting time, in ms, is 5000 by default and can be selected from 5000 ms to 300000ms.
	WaitCompletionTime *int `pulumi:"waitCompletionTime"`
}

// SyntheticTaskMonitorConfWebsiteInput is an input type that accepts SyntheticTaskMonitorConfWebsiteArgs and SyntheticTaskMonitorConfWebsiteOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfWebsiteInput` via:
//
//	SyntheticTaskMonitorConfWebsiteArgs{...}
type SyntheticTaskMonitorConfWebsiteInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfWebsiteOutput() SyntheticTaskMonitorConfWebsiteOutput
	ToSyntheticTaskMonitorConfWebsiteOutputWithContext(context.Context) SyntheticTaskMonitorConfWebsiteOutput
}

type SyntheticTaskMonitorConfWebsiteArgs struct {
	// Whether to support automatic scrolling screen, loading page.
	// - 0 (default): No
	//   1: Yes.
	AutomaticScrolling pulumi.IntPtrInput `pulumi:"automaticScrolling"`
	// Custom header.
	// - 0 (default): Off
	// - 1: Modify the first package
	// - 2: Modify all packages.
	CustomHeader pulumi.IntPtrInput `pulumi:"customHeader"`
	// Custom header, in JSON Map format.
	CustomHeaderContent pulumi.MapInput `pulumi:"customHeaderContent"`
	// Whether to disable caching.
	// - 0: not disabled
	// - 1 (default): Disabled.
	DisableCache pulumi.IntPtrInput `pulumi:"disableCache"`
	// The Accept-Encoding field is used to determine whether to Accept compressed files. 0-do not disable, 1-disable, the default is 0.
	DisableCompression pulumi.IntPtrInput `pulumi:"disableCompression"`
	// When a domain name (such as www.aliyun.com) is resolved, if the resolved IP address or CNAME is not in the DNS hijacking white list, the user will fail to access or return a target IP address that is not Aliyun. If the IP or CNAME in the resolution result is in the DNS white list, it will be determined that DNS hijacking has not occurred.  Fill in the format: Domain name: matching rules. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
	DnsHijackWhitelist pulumi.StringPtrInput `pulumi:"dnsHijackWhitelist"`
	// If an element configured in the element blacklist appears during page loading, the element is not requested to be loaded.
	ElementBlacklist pulumi.StringPtrInput `pulumi:"elementBlacklist"`
	// Whether to filter invalid IP parameters. 0: filter, 1: do not filter. The default value is 0.
	FilterInvalidIp pulumi.IntPtrInput `pulumi:"filterInvalidIp"`
	// Identify elements: Set the total number of elements on the Browse page.
	FlowHijackJumpTimes pulumi.IntPtrInput `pulumi:"flowHijackJumpTimes"`
	// Hijacking ID: Set the matching key information. Enter the hijacking keyword or key element, with an asterisk (*) allowed.
	FlowHijackLogo pulumi.StringPtrInput `pulumi:"flowHijackLogo"`
	// Whether to ignore certificate errors during certificate verification in SSL Handshake and continue browsing. 0-do not ignore, 1-ignore. The default value is 1.
	IgnoreCertificateError pulumi.IntPtrInput `pulumi:"ignoreCertificateError"`
	// Monitoring timeout, in ms. Not required, 20000 by default.
	MonitorTimeout pulumi.IntPtrInput `pulumi:"monitorTimeout"`
	// Monitoring the page appears to be tampered with elements other than the domain settings that belong to the page. Common manifestations are pop-up advertisements, floating advertisements, jumps, etc.  Fill in the format: Domain name: Element. You can fill multiple elements separated by a vertical bar (|). For example, www.aliyun.com:|/cc/bb/a.gif |/vv/bb/cc.jpg indicates that all the other elements of the www.aliyun.com domain name except the basic document,/cc/bb/a.gif, and/vv/bb/cc.jpg are tampered.
	PageTamper pulumi.StringPtrInput `pulumi:"pageTamper"`
	// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
	Redirection pulumi.IntPtrInput `pulumi:"redirection"`
	// The slow element threshold, in ms, is 5000 by default and can be selected from 1 to 300000ms.
	SlowElementThreshold pulumi.IntPtrInput `pulumi:"slowElementThreshold"`
	// The target URL.
	TargetUrl pulumi.StringInput `pulumi:"targetUrl"`
	// The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any of the blacklisted strings, 650 error is returned. Multiple strings are separated by a vertical bar (|).
	VerifyStringBlacklist pulumi.StringPtrInput `pulumi:"verifyStringBlacklist"`
	// The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist. Otherwise, 650 error is returned. Multiple strings are separated by a vertical bar (|).
	VerifyStringWhitelist pulumi.StringPtrInput `pulumi:"verifyStringWhitelist"`
	// The maximum waiting time, in ms, is 5000 by default and can be selected from 5000 ms to 300000ms.
	WaitCompletionTime pulumi.IntPtrInput `pulumi:"waitCompletionTime"`
}

func (SyntheticTaskMonitorConfWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfWebsite)(nil)).Elem()
}

func (i SyntheticTaskMonitorConfWebsiteArgs) ToSyntheticTaskMonitorConfWebsiteOutput() SyntheticTaskMonitorConfWebsiteOutput {
	return i.ToSyntheticTaskMonitorConfWebsiteOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfWebsiteArgs) ToSyntheticTaskMonitorConfWebsiteOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfWebsiteOutput)
}

func (i SyntheticTaskMonitorConfWebsiteArgs) ToSyntheticTaskMonitorConfWebsitePtrOutput() SyntheticTaskMonitorConfWebsitePtrOutput {
	return i.ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(context.Background())
}

func (i SyntheticTaskMonitorConfWebsiteArgs) ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfWebsiteOutput).ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(ctx)
}

// SyntheticTaskMonitorConfWebsitePtrInput is an input type that accepts SyntheticTaskMonitorConfWebsiteArgs, SyntheticTaskMonitorConfWebsitePtr and SyntheticTaskMonitorConfWebsitePtrOutput values.
// You can construct a concrete instance of `SyntheticTaskMonitorConfWebsitePtrInput` via:
//
//	        SyntheticTaskMonitorConfWebsiteArgs{...}
//
//	or:
//
//	        nil
type SyntheticTaskMonitorConfWebsitePtrInput interface {
	pulumi.Input

	ToSyntheticTaskMonitorConfWebsitePtrOutput() SyntheticTaskMonitorConfWebsitePtrOutput
	ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(context.Context) SyntheticTaskMonitorConfWebsitePtrOutput
}

type syntheticTaskMonitorConfWebsitePtrType SyntheticTaskMonitorConfWebsiteArgs

func SyntheticTaskMonitorConfWebsitePtr(v *SyntheticTaskMonitorConfWebsiteArgs) SyntheticTaskMonitorConfWebsitePtrInput {
	return (*syntheticTaskMonitorConfWebsitePtrType)(v)
}

func (*syntheticTaskMonitorConfWebsitePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfWebsite)(nil)).Elem()
}

func (i *syntheticTaskMonitorConfWebsitePtrType) ToSyntheticTaskMonitorConfWebsitePtrOutput() SyntheticTaskMonitorConfWebsitePtrOutput {
	return i.ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(context.Background())
}

func (i *syntheticTaskMonitorConfWebsitePtrType) ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticTaskMonitorConfWebsitePtrOutput)
}

type SyntheticTaskMonitorConfWebsiteOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticTaskMonitorConfWebsite)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfWebsiteOutput) ToSyntheticTaskMonitorConfWebsiteOutput() SyntheticTaskMonitorConfWebsiteOutput {
	return o
}

func (o SyntheticTaskMonitorConfWebsiteOutput) ToSyntheticTaskMonitorConfWebsiteOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsiteOutput {
	return o
}

func (o SyntheticTaskMonitorConfWebsiteOutput) ToSyntheticTaskMonitorConfWebsitePtrOutput() SyntheticTaskMonitorConfWebsitePtrOutput {
	return o.ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(context.Background())
}

func (o SyntheticTaskMonitorConfWebsiteOutput) ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsitePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticTaskMonitorConfWebsite) *SyntheticTaskMonitorConfWebsite {
		return &v
	}).(SyntheticTaskMonitorConfWebsitePtrOutput)
}

// Whether to support automatic scrolling screen, loading page.
//   - 0 (default): No
//     1: Yes.
func (o SyntheticTaskMonitorConfWebsiteOutput) AutomaticScrolling() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.AutomaticScrolling }).(pulumi.IntPtrOutput)
}

// Custom header.
// - 0 (default): Off
// - 1: Modify the first package
// - 2: Modify all packages.
func (o SyntheticTaskMonitorConfWebsiteOutput) CustomHeader() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.CustomHeader }).(pulumi.IntPtrOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfWebsiteOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) map[string]interface{} { return v.CustomHeaderContent }).(pulumi.MapOutput)
}

// Whether to disable caching.
// - 0: not disabled
// - 1 (default): Disabled.
func (o SyntheticTaskMonitorConfWebsiteOutput) DisableCache() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.DisableCache }).(pulumi.IntPtrOutput)
}

// The Accept-Encoding field is used to determine whether to Accept compressed files. 0-do not disable, 1-disable, the default is 0.
func (o SyntheticTaskMonitorConfWebsiteOutput) DisableCompression() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.DisableCompression }).(pulumi.IntPtrOutput)
}

// When a domain name (such as www.aliyun.com) is resolved, if the resolved IP address or CNAME is not in the DNS hijacking white list, the user will fail to access or return a target IP address that is not Aliyun. If the IP or CNAME in the resolution result is in the DNS white list, it will be determined that DNS hijacking has not occurred.  Fill in the format: Domain name: matching rules. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfWebsiteOutput) DnsHijackWhitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.DnsHijackWhitelist }).(pulumi.StringPtrOutput)
}

// If an element configured in the element blacklist appears during page loading, the element is not requested to be loaded.
func (o SyntheticTaskMonitorConfWebsiteOutput) ElementBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.ElementBlacklist }).(pulumi.StringPtrOutput)
}

// Whether to filter invalid IP parameters. 0: filter, 1: do not filter. The default value is 0.
func (o SyntheticTaskMonitorConfWebsiteOutput) FilterInvalidIp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.FilterInvalidIp }).(pulumi.IntPtrOutput)
}

// Identify elements: Set the total number of elements on the Browse page.
func (o SyntheticTaskMonitorConfWebsiteOutput) FlowHijackJumpTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.FlowHijackJumpTimes }).(pulumi.IntPtrOutput)
}

// Hijacking ID: Set the matching key information. Enter the hijacking keyword or key element, with an asterisk (*) allowed.
func (o SyntheticTaskMonitorConfWebsiteOutput) FlowHijackLogo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.FlowHijackLogo }).(pulumi.StringPtrOutput)
}

// Whether to ignore certificate errors during certificate verification in SSL Handshake and continue browsing. 0-do not ignore, 1-ignore. The default value is 1.
func (o SyntheticTaskMonitorConfWebsiteOutput) IgnoreCertificateError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.IgnoreCertificateError }).(pulumi.IntPtrOutput)
}

// Monitoring timeout, in ms. Not required, 20000 by default.
func (o SyntheticTaskMonitorConfWebsiteOutput) MonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.MonitorTimeout }).(pulumi.IntPtrOutput)
}

// Monitoring the page appears to be tampered with elements other than the domain settings that belong to the page. Common manifestations are pop-up advertisements, floating advertisements, jumps, etc.  Fill in the format: Domain name: Element. You can fill multiple elements separated by a vertical bar (|). For example, www.aliyun.com:|/cc/bb/a.gif |/vv/bb/cc.jpg indicates that all the other elements of the www.aliyun.com domain name except the basic document,/cc/bb/a.gif, and/vv/bb/cc.jpg are tampered.
func (o SyntheticTaskMonitorConfWebsiteOutput) PageTamper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.PageTamper }).(pulumi.StringPtrOutput)
}

// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
func (o SyntheticTaskMonitorConfWebsiteOutput) Redirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.Redirection }).(pulumi.IntPtrOutput)
}

// The slow element threshold, in ms, is 5000 by default and can be selected from 1 to 300000ms.
func (o SyntheticTaskMonitorConfWebsiteOutput) SlowElementThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.SlowElementThreshold }).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfWebsiteOutput) TargetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) string { return v.TargetUrl }).(pulumi.StringOutput)
}

// The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any of the blacklisted strings, 650 error is returned. Multiple strings are separated by a vertical bar (|).
func (o SyntheticTaskMonitorConfWebsiteOutput) VerifyStringBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.VerifyStringBlacklist }).(pulumi.StringPtrOutput)
}

// The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist. Otherwise, 650 error is returned. Multiple strings are separated by a vertical bar (|).
func (o SyntheticTaskMonitorConfWebsiteOutput) VerifyStringWhitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *string { return v.VerifyStringWhitelist }).(pulumi.StringPtrOutput)
}

// The maximum waiting time, in ms, is 5000 by default and can be selected from 5000 ms to 300000ms.
func (o SyntheticTaskMonitorConfWebsiteOutput) WaitCompletionTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticTaskMonitorConfWebsite) *int { return v.WaitCompletionTime }).(pulumi.IntPtrOutput)
}

type SyntheticTaskMonitorConfWebsitePtrOutput struct{ *pulumi.OutputState }

func (SyntheticTaskMonitorConfWebsitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticTaskMonitorConfWebsite)(nil)).Elem()
}

func (o SyntheticTaskMonitorConfWebsitePtrOutput) ToSyntheticTaskMonitorConfWebsitePtrOutput() SyntheticTaskMonitorConfWebsitePtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfWebsitePtrOutput) ToSyntheticTaskMonitorConfWebsitePtrOutputWithContext(ctx context.Context) SyntheticTaskMonitorConfWebsitePtrOutput {
	return o
}

func (o SyntheticTaskMonitorConfWebsitePtrOutput) Elem() SyntheticTaskMonitorConfWebsiteOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) SyntheticTaskMonitorConfWebsite {
		if v != nil {
			return *v
		}
		var ret SyntheticTaskMonitorConfWebsite
		return ret
	}).(SyntheticTaskMonitorConfWebsiteOutput)
}

// Whether to support automatic scrolling screen, loading page.
//   - 0 (default): No
//     1: Yes.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) AutomaticScrolling() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.AutomaticScrolling
	}).(pulumi.IntPtrOutput)
}

// Custom header.
// - 0 (default): Off
// - 1: Modify the first package
// - 2: Modify all packages.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) CustomHeader() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.CustomHeader
	}).(pulumi.IntPtrOutput)
}

// Custom header, in JSON Map format.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) CustomHeaderContent() pulumi.MapOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CustomHeaderContent
	}).(pulumi.MapOutput)
}

// Whether to disable caching.
// - 0: not disabled
// - 1 (default): Disabled.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) DisableCache() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.DisableCache
	}).(pulumi.IntPtrOutput)
}

// The Accept-Encoding field is used to determine whether to Accept compressed files. 0-do not disable, 1-disable, the default is 0.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) DisableCompression() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.DisableCompression
	}).(pulumi.IntPtrOutput)
}

// When a domain name (such as www.aliyun.com) is resolved, if the resolved IP address or CNAME is not in the DNS hijacking white list, the user will fail to access or return a target IP address that is not Aliyun. If the IP or CNAME in the resolution result is in the DNS white list, it will be determined that DNS hijacking has not occurred.  Fill in the format: Domain name: matching rules. Match rules support IP, IP wildcard, subnet mask, and CNAME. Multiple match rules can be filled in. Multiple match rules are separated by vertical bars (|). For example, www.aliyun.com:203.0.3.55 | 203.3.44.67 indicates that all other IP addresses under the www.aliyun.com domain except 203.0.3.55 and 203.3.44.67 are hijacked.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) DnsHijackWhitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.DnsHijackWhitelist
	}).(pulumi.StringPtrOutput)
}

// If an element configured in the element blacklist appears during page loading, the element is not requested to be loaded.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) ElementBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.ElementBlacklist
	}).(pulumi.StringPtrOutput)
}

// Whether to filter invalid IP parameters. 0: filter, 1: do not filter. The default value is 0.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) FilterInvalidIp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.FilterInvalidIp
	}).(pulumi.IntPtrOutput)
}

// Identify elements: Set the total number of elements on the Browse page.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) FlowHijackJumpTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.FlowHijackJumpTimes
	}).(pulumi.IntPtrOutput)
}

// Hijacking ID: Set the matching key information. Enter the hijacking keyword or key element, with an asterisk (*) allowed.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) FlowHijackLogo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.FlowHijackLogo
	}).(pulumi.StringPtrOutput)
}

// Whether to ignore certificate errors during certificate verification in SSL Handshake and continue browsing. 0-do not ignore, 1-ignore. The default value is 1.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) IgnoreCertificateError() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateError
	}).(pulumi.IntPtrOutput)
}

// Monitoring timeout, in ms. Not required, 20000 by default.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) MonitorTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.MonitorTimeout
	}).(pulumi.IntPtrOutput)
}

// Monitoring the page appears to be tampered with elements other than the domain settings that belong to the page. Common manifestations are pop-up advertisements, floating advertisements, jumps, etc.  Fill in the format: Domain name: Element. You can fill multiple elements separated by a vertical bar (|). For example, www.aliyun.com:|/cc/bb/a.gif |/vv/bb/cc.jpg indicates that all the other elements of the www.aliyun.com domain name except the basic document,/cc/bb/a.gif, and/vv/bb/cc.jpg are tampered.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) PageTamper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.PageTamper
	}).(pulumi.StringPtrOutput)
}

// When redirection occurs, whether to continue browsing, 0-No, 1-Yes, the default is 1.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) Redirection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.Redirection
	}).(pulumi.IntPtrOutput)
}

// The slow element threshold, in ms, is 5000 by default and can be selected from 1 to 300000ms.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) SlowElementThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.SlowElementThreshold
	}).(pulumi.IntPtrOutput)
}

// The target URL.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) TargetUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUrl
	}).(pulumi.StringPtrOutput)
}

// The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any of the blacklisted strings, 650 error is returned. Multiple strings are separated by a vertical bar (|).
func (o SyntheticTaskMonitorConfWebsitePtrOutput) VerifyStringBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.VerifyStringBlacklist
	}).(pulumi.StringPtrOutput)
}

// The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist. Otherwise, 650 error is returned. Multiple strings are separated by a vertical bar (|).
func (o SyntheticTaskMonitorConfWebsitePtrOutput) VerifyStringWhitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *string {
		if v == nil {
			return nil
		}
		return v.VerifyStringWhitelist
	}).(pulumi.StringPtrOutput)
}

// The maximum waiting time, in ms, is 5000 by default and can be selected from 5000 ms to 300000ms.
func (o SyntheticTaskMonitorConfWebsitePtrOutput) WaitCompletionTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticTaskMonitorConfWebsite) *int {
		if v == nil {
			return nil
		}
		return v.WaitCompletionTime
	}).(pulumi.IntPtrOutput)
}

type GetAlertContactGroupsGroup struct {
	// The first ID of the resource.
	AlertContactGroupId string `pulumi:"alertContactGroupId"`
	// The name of the resource.
	AlertContactGroupName string `pulumi:"alertContactGroupName"`
	// contact ids.
	ContactIds []string `pulumi:"contactIds"`
	// The creation time of the resource.
	CreateTime string `pulumi:"createTime"`
	// The ID of the Alert Contact Group.
	Id string `pulumi:"id"`
}

// GetAlertContactGroupsGroupInput is an input type that accepts GetAlertContactGroupsGroupArgs and GetAlertContactGroupsGroupOutput values.
// You can construct a concrete instance of `GetAlertContactGroupsGroupInput` via:
//
//	GetAlertContactGroupsGroupArgs{...}
type GetAlertContactGroupsGroupInput interface {
	pulumi.Input

	ToGetAlertContactGroupsGroupOutput() GetAlertContactGroupsGroupOutput
	ToGetAlertContactGroupsGroupOutputWithContext(context.Context) GetAlertContactGroupsGroupOutput
}

type GetAlertContactGroupsGroupArgs struct {
	// The first ID of the resource.
	AlertContactGroupId pulumi.StringInput `pulumi:"alertContactGroupId"`
	// The name of the resource.
	AlertContactGroupName pulumi.StringInput `pulumi:"alertContactGroupName"`
	// contact ids.
	ContactIds pulumi.StringArrayInput `pulumi:"contactIds"`
	// The creation time of the resource.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the Alert Contact Group.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetAlertContactGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertContactGroupsGroup)(nil)).Elem()
}

func (i GetAlertContactGroupsGroupArgs) ToGetAlertContactGroupsGroupOutput() GetAlertContactGroupsGroupOutput {
	return i.ToGetAlertContactGroupsGroupOutputWithContext(context.Background())
}

func (i GetAlertContactGroupsGroupArgs) ToGetAlertContactGroupsGroupOutputWithContext(ctx context.Context) GetAlertContactGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertContactGroupsGroupOutput)
}

// GetAlertContactGroupsGroupArrayInput is an input type that accepts GetAlertContactGroupsGroupArray and GetAlertContactGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetAlertContactGroupsGroupArrayInput` via:
//
//	GetAlertContactGroupsGroupArray{ GetAlertContactGroupsGroupArgs{...} }
type GetAlertContactGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetAlertContactGroupsGroupArrayOutput() GetAlertContactGroupsGroupArrayOutput
	ToGetAlertContactGroupsGroupArrayOutputWithContext(context.Context) GetAlertContactGroupsGroupArrayOutput
}

type GetAlertContactGroupsGroupArray []GetAlertContactGroupsGroupInput

func (GetAlertContactGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertContactGroupsGroup)(nil)).Elem()
}

func (i GetAlertContactGroupsGroupArray) ToGetAlertContactGroupsGroupArrayOutput() GetAlertContactGroupsGroupArrayOutput {
	return i.ToGetAlertContactGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetAlertContactGroupsGroupArray) ToGetAlertContactGroupsGroupArrayOutputWithContext(ctx context.Context) GetAlertContactGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertContactGroupsGroupArrayOutput)
}

type GetAlertContactGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetAlertContactGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertContactGroupsGroup)(nil)).Elem()
}

func (o GetAlertContactGroupsGroupOutput) ToGetAlertContactGroupsGroupOutput() GetAlertContactGroupsGroupOutput {
	return o
}

func (o GetAlertContactGroupsGroupOutput) ToGetAlertContactGroupsGroupOutputWithContext(ctx context.Context) GetAlertContactGroupsGroupOutput {
	return o
}

// The first ID of the resource.
func (o GetAlertContactGroupsGroupOutput) AlertContactGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactGroupsGroup) string { return v.AlertContactGroupId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetAlertContactGroupsGroupOutput) AlertContactGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactGroupsGroup) string { return v.AlertContactGroupName }).(pulumi.StringOutput)
}

// contact ids.
func (o GetAlertContactGroupsGroupOutput) ContactIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlertContactGroupsGroup) []string { return v.ContactIds }).(pulumi.StringArrayOutput)
}

// The creation time of the resource.
func (o GetAlertContactGroupsGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactGroupsGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the Alert Contact Group.
func (o GetAlertContactGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

type GetAlertContactGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetAlertContactGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertContactGroupsGroup)(nil)).Elem()
}

func (o GetAlertContactGroupsGroupArrayOutput) ToGetAlertContactGroupsGroupArrayOutput() GetAlertContactGroupsGroupArrayOutput {
	return o
}

func (o GetAlertContactGroupsGroupArrayOutput) ToGetAlertContactGroupsGroupArrayOutputWithContext(ctx context.Context) GetAlertContactGroupsGroupArrayOutput {
	return o
}

func (o GetAlertContactGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetAlertContactGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAlertContactGroupsGroup {
		return vs[0].([]GetAlertContactGroupsGroup)[vs[1].(int)]
	}).(GetAlertContactGroupsGroupOutput)
}

type GetAlertContactsContact struct {
	// Contact ID.
	AlertContactId string `pulumi:"alertContactId"`
	// The name of the alert contact.
	AlertContactName string `pulumi:"alertContactName"`
	// The Creation Time Timestamp.
	CreateTime string `pulumi:"createTime"`
	// The webhook URL of the DingTalk chatbot.
	DingRobotWebhookUrl string `pulumi:"dingRobotWebhookUrl"`
	// The email address of the alert contact.
	Email string `pulumi:"email"`
	// The ID of the Alert Contact.
	Id string `pulumi:"id"`
	// The mobile number of the alert contact.
	PhoneNum string `pulumi:"phoneNum"`
	// Specifies whether the alert contact receives system notifications.
	SystemNoc bool `pulumi:"systemNoc"`
	// Webhook Information.
	Webhook string `pulumi:"webhook"`
}

// GetAlertContactsContactInput is an input type that accepts GetAlertContactsContactArgs and GetAlertContactsContactOutput values.
// You can construct a concrete instance of `GetAlertContactsContactInput` via:
//
//	GetAlertContactsContactArgs{...}
type GetAlertContactsContactInput interface {
	pulumi.Input

	ToGetAlertContactsContactOutput() GetAlertContactsContactOutput
	ToGetAlertContactsContactOutputWithContext(context.Context) GetAlertContactsContactOutput
}

type GetAlertContactsContactArgs struct {
	// Contact ID.
	AlertContactId pulumi.StringInput `pulumi:"alertContactId"`
	// The name of the alert contact.
	AlertContactName pulumi.StringInput `pulumi:"alertContactName"`
	// The Creation Time Timestamp.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The webhook URL of the DingTalk chatbot.
	DingRobotWebhookUrl pulumi.StringInput `pulumi:"dingRobotWebhookUrl"`
	// The email address of the alert contact.
	Email pulumi.StringInput `pulumi:"email"`
	// The ID of the Alert Contact.
	Id pulumi.StringInput `pulumi:"id"`
	// The mobile number of the alert contact.
	PhoneNum pulumi.StringInput `pulumi:"phoneNum"`
	// Specifies whether the alert contact receives system notifications.
	SystemNoc pulumi.BoolInput `pulumi:"systemNoc"`
	// Webhook Information.
	Webhook pulumi.StringInput `pulumi:"webhook"`
}

func (GetAlertContactsContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertContactsContact)(nil)).Elem()
}

func (i GetAlertContactsContactArgs) ToGetAlertContactsContactOutput() GetAlertContactsContactOutput {
	return i.ToGetAlertContactsContactOutputWithContext(context.Background())
}

func (i GetAlertContactsContactArgs) ToGetAlertContactsContactOutputWithContext(ctx context.Context) GetAlertContactsContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertContactsContactOutput)
}

// GetAlertContactsContactArrayInput is an input type that accepts GetAlertContactsContactArray and GetAlertContactsContactArrayOutput values.
// You can construct a concrete instance of `GetAlertContactsContactArrayInput` via:
//
//	GetAlertContactsContactArray{ GetAlertContactsContactArgs{...} }
type GetAlertContactsContactArrayInput interface {
	pulumi.Input

	ToGetAlertContactsContactArrayOutput() GetAlertContactsContactArrayOutput
	ToGetAlertContactsContactArrayOutputWithContext(context.Context) GetAlertContactsContactArrayOutput
}

type GetAlertContactsContactArray []GetAlertContactsContactInput

func (GetAlertContactsContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertContactsContact)(nil)).Elem()
}

func (i GetAlertContactsContactArray) ToGetAlertContactsContactArrayOutput() GetAlertContactsContactArrayOutput {
	return i.ToGetAlertContactsContactArrayOutputWithContext(context.Background())
}

func (i GetAlertContactsContactArray) ToGetAlertContactsContactArrayOutputWithContext(ctx context.Context) GetAlertContactsContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertContactsContactArrayOutput)
}

type GetAlertContactsContactOutput struct{ *pulumi.OutputState }

func (GetAlertContactsContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertContactsContact)(nil)).Elem()
}

func (o GetAlertContactsContactOutput) ToGetAlertContactsContactOutput() GetAlertContactsContactOutput {
	return o
}

func (o GetAlertContactsContactOutput) ToGetAlertContactsContactOutputWithContext(ctx context.Context) GetAlertContactsContactOutput {
	return o
}

// Contact ID.
func (o GetAlertContactsContactOutput) AlertContactId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.AlertContactId }).(pulumi.StringOutput)
}

// The name of the alert contact.
func (o GetAlertContactsContactOutput) AlertContactName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.AlertContactName }).(pulumi.StringOutput)
}

// The Creation Time Timestamp.
func (o GetAlertContactsContactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The webhook URL of the DingTalk chatbot.
func (o GetAlertContactsContactOutput) DingRobotWebhookUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.DingRobotWebhookUrl }).(pulumi.StringOutput)
}

// The email address of the alert contact.
func (o GetAlertContactsContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.Email }).(pulumi.StringOutput)
}

// The ID of the Alert Contact.
func (o GetAlertContactsContactOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.Id }).(pulumi.StringOutput)
}

// The mobile number of the alert contact.
func (o GetAlertContactsContactOutput) PhoneNum() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.PhoneNum }).(pulumi.StringOutput)
}

// Specifies whether the alert contact receives system notifications.
func (o GetAlertContactsContactOutput) SystemNoc() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAlertContactsContact) bool { return v.SystemNoc }).(pulumi.BoolOutput)
}

// Webhook Information.
func (o GetAlertContactsContactOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertContactsContact) string { return v.Webhook }).(pulumi.StringOutput)
}

type GetAlertContactsContactArrayOutput struct{ *pulumi.OutputState }

func (GetAlertContactsContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAlertContactsContact)(nil)).Elem()
}

func (o GetAlertContactsContactArrayOutput) ToGetAlertContactsContactArrayOutput() GetAlertContactsContactArrayOutput {
	return o
}

func (o GetAlertContactsContactArrayOutput) ToGetAlertContactsContactArrayOutputWithContext(ctx context.Context) GetAlertContactsContactArrayOutput {
	return o
}

func (o GetAlertContactsContactArrayOutput) Index(i pulumi.IntInput) GetAlertContactsContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAlertContactsContact {
		return vs[0].([]GetAlertContactsContact)[vs[1].(int)]
	}).(GetAlertContactsContactOutput)
}

type GetDispatchRulesRule struct {
	// Dispatch rule ID.
	DispatchRuleId string `pulumi:"dispatchRuleId"`
	// The name of the dispatch rule.
	DispatchRuleName string `pulumi:"dispatchRuleName"`
	DispatchType     string `pulumi:"dispatchType"`
	// Sets the event group.
	GroupRules []GetDispatchRulesRuleGroupRule `pulumi:"groupRules"`
	// The ID of the Dispatch Rule.
	Id string `pulumi:"id"`
	// Sets the dispatch rule.
	LabelMatchExpressionGrids []GetDispatchRulesRuleLabelMatchExpressionGrid `pulumi:"labelMatchExpressionGrids"`
	// Sets the notification rule.
	NotifyRules []GetDispatchRulesRuleNotifyRule `pulumi:"notifyRules"`
	// The resource status of Alert Dispatch Rule.
	Status string `pulumi:"status"`
}

// GetDispatchRulesRuleInput is an input type that accepts GetDispatchRulesRuleArgs and GetDispatchRulesRuleOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleInput` via:
//
//	GetDispatchRulesRuleArgs{...}
type GetDispatchRulesRuleInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleOutput() GetDispatchRulesRuleOutput
	ToGetDispatchRulesRuleOutputWithContext(context.Context) GetDispatchRulesRuleOutput
}

type GetDispatchRulesRuleArgs struct {
	// Dispatch rule ID.
	DispatchRuleId pulumi.StringInput `pulumi:"dispatchRuleId"`
	// The name of the dispatch rule.
	DispatchRuleName pulumi.StringInput `pulumi:"dispatchRuleName"`
	DispatchType     pulumi.StringInput `pulumi:"dispatchType"`
	// Sets the event group.
	GroupRules GetDispatchRulesRuleGroupRuleArrayInput `pulumi:"groupRules"`
	// The ID of the Dispatch Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// Sets the dispatch rule.
	LabelMatchExpressionGrids GetDispatchRulesRuleLabelMatchExpressionGridArrayInput `pulumi:"labelMatchExpressionGrids"`
	// Sets the notification rule.
	NotifyRules GetDispatchRulesRuleNotifyRuleArrayInput `pulumi:"notifyRules"`
	// The resource status of Alert Dispatch Rule.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetDispatchRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleArgs) ToGetDispatchRulesRuleOutput() GetDispatchRulesRuleOutput {
	return i.ToGetDispatchRulesRuleOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleArgs) ToGetDispatchRulesRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleOutput)
}

// GetDispatchRulesRuleArrayInput is an input type that accepts GetDispatchRulesRuleArray and GetDispatchRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleArrayInput` via:
//
//	GetDispatchRulesRuleArray{ GetDispatchRulesRuleArgs{...} }
type GetDispatchRulesRuleArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleArrayOutput() GetDispatchRulesRuleArrayOutput
	ToGetDispatchRulesRuleArrayOutputWithContext(context.Context) GetDispatchRulesRuleArrayOutput
}

type GetDispatchRulesRuleArray []GetDispatchRulesRuleInput

func (GetDispatchRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleArray) ToGetDispatchRulesRuleArrayOutput() GetDispatchRulesRuleArrayOutput {
	return i.ToGetDispatchRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleArray) ToGetDispatchRulesRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleArrayOutput)
}

type GetDispatchRulesRuleOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleOutput) ToGetDispatchRulesRuleOutput() GetDispatchRulesRuleOutput {
	return o
}

func (o GetDispatchRulesRuleOutput) ToGetDispatchRulesRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleOutput {
	return o
}

// Dispatch rule ID.
func (o GetDispatchRulesRuleOutput) DispatchRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) string { return v.DispatchRuleId }).(pulumi.StringOutput)
}

// The name of the dispatch rule.
func (o GetDispatchRulesRuleOutput) DispatchRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) string { return v.DispatchRuleName }).(pulumi.StringOutput)
}

func (o GetDispatchRulesRuleOutput) DispatchType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) string { return v.DispatchType }).(pulumi.StringOutput)
}

// Sets the event group.
func (o GetDispatchRulesRuleOutput) GroupRules() GetDispatchRulesRuleGroupRuleArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) []GetDispatchRulesRuleGroupRule { return v.GroupRules }).(GetDispatchRulesRuleGroupRuleArrayOutput)
}

// The ID of the Dispatch Rule.
func (o GetDispatchRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// Sets the dispatch rule.
func (o GetDispatchRulesRuleOutput) LabelMatchExpressionGrids() GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) []GetDispatchRulesRuleLabelMatchExpressionGrid {
		return v.LabelMatchExpressionGrids
	}).(GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput)
}

// Sets the notification rule.
func (o GetDispatchRulesRuleOutput) NotifyRules() GetDispatchRulesRuleNotifyRuleArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) []GetDispatchRulesRuleNotifyRule { return v.NotifyRules }).(GetDispatchRulesRuleNotifyRuleArrayOutput)
}

// The resource status of Alert Dispatch Rule.
func (o GetDispatchRulesRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRule) string { return v.Status }).(pulumi.StringOutput)
}

type GetDispatchRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleArrayOutput) ToGetDispatchRulesRuleArrayOutput() GetDispatchRulesRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleArrayOutput) ToGetDispatchRulesRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRule {
		return vs[0].([]GetDispatchRulesRule)[vs[1].(int)]
	}).(GetDispatchRulesRuleOutput)
}

type GetDispatchRulesRuleGroupRule struct {
	GroupId int `pulumi:"groupId"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupInterval int `pulumi:"groupInterval"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupWaitTime int `pulumi:"groupWaitTime"`
	// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	GroupingFields []string `pulumi:"groupingFields"`
	// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
	RepeatInterval int `pulumi:"repeatInterval"`
}

// GetDispatchRulesRuleGroupRuleInput is an input type that accepts GetDispatchRulesRuleGroupRuleArgs and GetDispatchRulesRuleGroupRuleOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleGroupRuleInput` via:
//
//	GetDispatchRulesRuleGroupRuleArgs{...}
type GetDispatchRulesRuleGroupRuleInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleGroupRuleOutput() GetDispatchRulesRuleGroupRuleOutput
	ToGetDispatchRulesRuleGroupRuleOutputWithContext(context.Context) GetDispatchRulesRuleGroupRuleOutput
}

type GetDispatchRulesRuleGroupRuleArgs struct {
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupInterval pulumi.IntInput `pulumi:"groupInterval"`
	// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
	GroupWaitTime pulumi.IntInput `pulumi:"groupWaitTime"`
	// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
	GroupingFields pulumi.StringArrayInput `pulumi:"groupingFields"`
	// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
	RepeatInterval pulumi.IntInput `pulumi:"repeatInterval"`
}

func (GetDispatchRulesRuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleGroupRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleGroupRuleArgs) ToGetDispatchRulesRuleGroupRuleOutput() GetDispatchRulesRuleGroupRuleOutput {
	return i.ToGetDispatchRulesRuleGroupRuleOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleGroupRuleArgs) ToGetDispatchRulesRuleGroupRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleGroupRuleOutput)
}

// GetDispatchRulesRuleGroupRuleArrayInput is an input type that accepts GetDispatchRulesRuleGroupRuleArray and GetDispatchRulesRuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleGroupRuleArrayInput` via:
//
//	GetDispatchRulesRuleGroupRuleArray{ GetDispatchRulesRuleGroupRuleArgs{...} }
type GetDispatchRulesRuleGroupRuleArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleGroupRuleArrayOutput() GetDispatchRulesRuleGroupRuleArrayOutput
	ToGetDispatchRulesRuleGroupRuleArrayOutputWithContext(context.Context) GetDispatchRulesRuleGroupRuleArrayOutput
}

type GetDispatchRulesRuleGroupRuleArray []GetDispatchRulesRuleGroupRuleInput

func (GetDispatchRulesRuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleGroupRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleGroupRuleArray) ToGetDispatchRulesRuleGroupRuleArrayOutput() GetDispatchRulesRuleGroupRuleArrayOutput {
	return i.ToGetDispatchRulesRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleGroupRuleArray) ToGetDispatchRulesRuleGroupRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleGroupRuleArrayOutput)
}

type GetDispatchRulesRuleGroupRuleOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleGroupRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleGroupRuleOutput) ToGetDispatchRulesRuleGroupRuleOutput() GetDispatchRulesRuleGroupRuleOutput {
	return o
}

func (o GetDispatchRulesRuleGroupRuleOutput) ToGetDispatchRulesRuleGroupRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleGroupRuleOutput {
	return o
}

func (o GetDispatchRulesRuleGroupRuleOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleGroupRule) int { return v.GroupId }).(pulumi.IntOutput)
}

// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
func (o GetDispatchRulesRuleGroupRuleOutput) GroupInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleGroupRule) int { return v.GroupInterval }).(pulumi.IntOutput)
}

// The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler.
func (o GetDispatchRulesRuleGroupRuleOutput) GroupWaitTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleGroupRule) int { return v.GroupWaitTime }).(pulumi.IntOutput)
}

// The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications.
func (o GetDispatchRulesRuleGroupRuleOutput) GroupingFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleGroupRule) []string { return v.GroupingFields }).(pulumi.StringArrayOutput)
}

// The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. The minimum value is 61. Default to 600.
func (o GetDispatchRulesRuleGroupRuleOutput) RepeatInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleGroupRule) int { return v.RepeatInterval }).(pulumi.IntOutput)
}

type GetDispatchRulesRuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleGroupRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleGroupRuleArrayOutput) ToGetDispatchRulesRuleGroupRuleArrayOutput() GetDispatchRulesRuleGroupRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleGroupRuleArrayOutput) ToGetDispatchRulesRuleGroupRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleGroupRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleGroupRuleArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleGroupRule {
		return vs[0].([]GetDispatchRulesRuleGroupRule)[vs[1].(int)]
	}).(GetDispatchRulesRuleGroupRuleOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGrid struct {
	// Sets the dispatch rule.
	LabelMatchExpressionGroups []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup `pulumi:"labelMatchExpressionGroups"`
}

// GetDispatchRulesRuleLabelMatchExpressionGridInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridArgs and GetDispatchRulesRuleLabelMatchExpressionGridOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridArgs{...}
type GetDispatchRulesRuleLabelMatchExpressionGridInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridOutput() GetDispatchRulesRuleLabelMatchExpressionGridOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridArgs struct {
	// Sets the dispatch rule.
	LabelMatchExpressionGroups GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput `pulumi:"labelMatchExpressionGroups"`
}

func (GetDispatchRulesRuleLabelMatchExpressionGridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridOutput() GetDispatchRulesRuleLabelMatchExpressionGridOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridOutput)
}

// GetDispatchRulesRuleLabelMatchExpressionGridArrayInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridArray and GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridArrayInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridArray{ GetDispatchRulesRuleLabelMatchExpressionGridArgs{...} }
type GetDispatchRulesRuleLabelMatchExpressionGridArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridArray []GetDispatchRulesRuleLabelMatchExpressionGridInput

func (GetDispatchRulesRuleLabelMatchExpressionGridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridArray) ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridArray) ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridOutput() GetDispatchRulesRuleLabelMatchExpressionGridOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridOutput {
	return o
}

// Sets the dispatch rule.
func (o GetDispatchRulesRuleLabelMatchExpressionGridOutput) LabelMatchExpressionGroups() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleLabelMatchExpressionGrid) []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup {
		return v.LabelMatchExpressionGroups
	}).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGrid)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleLabelMatchExpressionGridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleLabelMatchExpressionGrid {
		return vs[0].([]GetDispatchRulesRuleLabelMatchExpressionGrid)[vs[1].(int)]
	}).(GetDispatchRulesRuleLabelMatchExpressionGridOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup struct {
	// Sets the dispatch rule.
	LabelMatchExpressions []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression `pulumi:"labelMatchExpressions"`
}

// GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs and GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{...}
type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs struct {
	// Sets the dispatch rule.
	LabelMatchExpressions GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput `pulumi:"labelMatchExpressions"`
}

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput)
}

// GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray and GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray{ GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{...} }
type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return o
}

// Sets the dispatch rule.
func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput) LabelMatchExpressions() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup) []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression {
		return v.LabelMatchExpressions
	}).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup {
		return vs[0].([]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroup)[vs[1].(int)]
	}).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression struct {
	// The key of the tag of the dispatch rule.
	Key string `pulumi:"key"`
	// The operator used in the dispatch rule.
	Operator string `pulumi:"operator"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs and GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{...}
type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs struct {
	// The key of the tag of the dispatch rule.
	Key pulumi.StringInput `pulumi:"key"`
	// The operator used in the dispatch rule.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput)
}

// GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput is an input type that accepts GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray and GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput` via:
//
//	GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray{ GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{...} }
type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput
	ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray []GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return i.ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return o
}

// The key of the tag of the dispatch rule.
func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// The operator used in the dispatch rule.
func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// The value of the tag.
func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)(nil)).Elem()
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput() GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) ToGetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput {
	return o
}

func (o GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression {
		return vs[0].([]GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpression)[vs[1].(int)]
	}).(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput)
}

type GetDispatchRulesRuleNotifyRule struct {
	// The notification method.
	NotifyChannels []string `pulumi:"notifyChannels"`
	// Sets the notification object.
	NotifyObjects []GetDispatchRulesRuleNotifyRuleNotifyObject `pulumi:"notifyObjects"`
}

// GetDispatchRulesRuleNotifyRuleInput is an input type that accepts GetDispatchRulesRuleNotifyRuleArgs and GetDispatchRulesRuleNotifyRuleOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleNotifyRuleInput` via:
//
//	GetDispatchRulesRuleNotifyRuleArgs{...}
type GetDispatchRulesRuleNotifyRuleInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleNotifyRuleOutput() GetDispatchRulesRuleNotifyRuleOutput
	ToGetDispatchRulesRuleNotifyRuleOutputWithContext(context.Context) GetDispatchRulesRuleNotifyRuleOutput
}

type GetDispatchRulesRuleNotifyRuleArgs struct {
	// The notification method.
	NotifyChannels pulumi.StringArrayInput `pulumi:"notifyChannels"`
	// Sets the notification object.
	NotifyObjects GetDispatchRulesRuleNotifyRuleNotifyObjectArrayInput `pulumi:"notifyObjects"`
}

func (GetDispatchRulesRuleNotifyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleNotifyRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleNotifyRuleArgs) ToGetDispatchRulesRuleNotifyRuleOutput() GetDispatchRulesRuleNotifyRuleOutput {
	return i.ToGetDispatchRulesRuleNotifyRuleOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleNotifyRuleArgs) ToGetDispatchRulesRuleNotifyRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleNotifyRuleOutput)
}

// GetDispatchRulesRuleNotifyRuleArrayInput is an input type that accepts GetDispatchRulesRuleNotifyRuleArray and GetDispatchRulesRuleNotifyRuleArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleNotifyRuleArrayInput` via:
//
//	GetDispatchRulesRuleNotifyRuleArray{ GetDispatchRulesRuleNotifyRuleArgs{...} }
type GetDispatchRulesRuleNotifyRuleArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleNotifyRuleArrayOutput() GetDispatchRulesRuleNotifyRuleArrayOutput
	ToGetDispatchRulesRuleNotifyRuleArrayOutputWithContext(context.Context) GetDispatchRulesRuleNotifyRuleArrayOutput
}

type GetDispatchRulesRuleNotifyRuleArray []GetDispatchRulesRuleNotifyRuleInput

func (GetDispatchRulesRuleNotifyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleNotifyRule)(nil)).Elem()
}

func (i GetDispatchRulesRuleNotifyRuleArray) ToGetDispatchRulesRuleNotifyRuleArrayOutput() GetDispatchRulesRuleNotifyRuleArrayOutput {
	return i.ToGetDispatchRulesRuleNotifyRuleArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleNotifyRuleArray) ToGetDispatchRulesRuleNotifyRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleNotifyRuleArrayOutput)
}

type GetDispatchRulesRuleNotifyRuleOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleNotifyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleNotifyRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleNotifyRuleOutput) ToGetDispatchRulesRuleNotifyRuleOutput() GetDispatchRulesRuleNotifyRuleOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleOutput) ToGetDispatchRulesRuleNotifyRuleOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleOutput {
	return o
}

// The notification method.
func (o GetDispatchRulesRuleNotifyRuleOutput) NotifyChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleNotifyRule) []string { return v.NotifyChannels }).(pulumi.StringArrayOutput)
}

// Sets the notification object.
func (o GetDispatchRulesRuleNotifyRuleOutput) NotifyObjects() GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleNotifyRule) []GetDispatchRulesRuleNotifyRuleNotifyObject {
		return v.NotifyObjects
	}).(GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput)
}

type GetDispatchRulesRuleNotifyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleNotifyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleNotifyRule)(nil)).Elem()
}

func (o GetDispatchRulesRuleNotifyRuleArrayOutput) ToGetDispatchRulesRuleNotifyRuleArrayOutput() GetDispatchRulesRuleNotifyRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleArrayOutput) ToGetDispatchRulesRuleNotifyRuleArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleArrayOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleNotifyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleNotifyRule {
		return vs[0].([]GetDispatchRulesRuleNotifyRule)[vs[1].(int)]
	}).(GetDispatchRulesRuleNotifyRuleOutput)
}

type GetDispatchRulesRuleNotifyRuleNotifyObject struct {
	// The name of the contact or contact group.
	Name string `pulumi:"name"`
	// The ID of the contact or contact group.
	NotifyObjectId string `pulumi:"notifyObjectId"`
	// The type of the alert contact.
	NotifyType string `pulumi:"notifyType"`
}

// GetDispatchRulesRuleNotifyRuleNotifyObjectInput is an input type that accepts GetDispatchRulesRuleNotifyRuleNotifyObjectArgs and GetDispatchRulesRuleNotifyRuleNotifyObjectOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleNotifyRuleNotifyObjectInput` via:
//
//	GetDispatchRulesRuleNotifyRuleNotifyObjectArgs{...}
type GetDispatchRulesRuleNotifyRuleNotifyObjectInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectOutput
	ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutputWithContext(context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectOutput
}

type GetDispatchRulesRuleNotifyRuleNotifyObjectArgs struct {
	// The name of the contact or contact group.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the contact or contact group.
	NotifyObjectId pulumi.StringInput `pulumi:"notifyObjectId"`
	// The type of the alert contact.
	NotifyType pulumi.StringInput `pulumi:"notifyType"`
}

func (GetDispatchRulesRuleNotifyRuleNotifyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (i GetDispatchRulesRuleNotifyRuleNotifyObjectArgs) ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectOutput {
	return i.ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleNotifyRuleNotifyObjectArgs) ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleNotifyRuleNotifyObjectOutput)
}

// GetDispatchRulesRuleNotifyRuleNotifyObjectArrayInput is an input type that accepts GetDispatchRulesRuleNotifyRuleNotifyObjectArray and GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput values.
// You can construct a concrete instance of `GetDispatchRulesRuleNotifyRuleNotifyObjectArrayInput` via:
//
//	GetDispatchRulesRuleNotifyRuleNotifyObjectArray{ GetDispatchRulesRuleNotifyRuleNotifyObjectArgs{...} }
type GetDispatchRulesRuleNotifyRuleNotifyObjectArrayInput interface {
	pulumi.Input

	ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput
	ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutputWithContext(context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput
}

type GetDispatchRulesRuleNotifyRuleNotifyObjectArray []GetDispatchRulesRuleNotifyRuleNotifyObjectInput

func (GetDispatchRulesRuleNotifyRuleNotifyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (i GetDispatchRulesRuleNotifyRuleNotifyObjectArray) ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput {
	return i.ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutputWithContext(context.Background())
}

func (i GetDispatchRulesRuleNotifyRuleNotifyObjectArray) ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput)
}

type GetDispatchRulesRuleNotifyRuleNotifyObjectOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (o GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) ToGetDispatchRulesRuleNotifyRuleNotifyObjectOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectOutput {
	return o
}

// The name of the contact or contact group.
func (o GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleNotifyRuleNotifyObject) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the contact or contact group.
func (o GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) NotifyObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleNotifyRuleNotifyObject) string { return v.NotifyObjectId }).(pulumi.StringOutput)
}

// The type of the alert contact.
func (o GetDispatchRulesRuleNotifyRuleNotifyObjectOutput) NotifyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDispatchRulesRuleNotifyRuleNotifyObject) string { return v.NotifyType }).(pulumi.StringOutput)
}

type GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput struct{ *pulumi.OutputState }

func (GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDispatchRulesRuleNotifyRuleNotifyObject)(nil)).Elem()
}

func (o GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput) ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput() GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput) ToGetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutputWithContext(ctx context.Context) GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput {
	return o
}

func (o GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput) Index(i pulumi.IntInput) GetDispatchRulesRuleNotifyRuleNotifyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDispatchRulesRuleNotifyRuleNotifyObject {
		return vs[0].([]GetDispatchRulesRuleNotifyRuleNotifyObject)[vs[1].(int)]
	}).(GetDispatchRulesRuleNotifyRuleNotifyObjectOutput)
}

type GetIntegrationExportersIntegrationExporter struct {
	// The ID of the Prometheus instance.
	ClusterId string `pulumi:"clusterId"`
	// Integration Exporter Type.
	ExporterType string `pulumi:"exporterType"`
	// The ID of the Integration Exporter. It formats as `<cluster_id>:<integration_type>:<instance_id>`.
	Id string `pulumi:"id"`
	// The ID of the Integration Exporter instance.
	InstanceId int `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// The type of prometheus integration.
	IntegrationType string `pulumi:"integrationType"`
	// Exporter configuration parameter json string.
	Param string `pulumi:"param"`
	// Monitor the target address.
	Target string `pulumi:"target"`
	// The version information.
	Version string `pulumi:"version"`
}

// GetIntegrationExportersIntegrationExporterInput is an input type that accepts GetIntegrationExportersIntegrationExporterArgs and GetIntegrationExportersIntegrationExporterOutput values.
// You can construct a concrete instance of `GetIntegrationExportersIntegrationExporterInput` via:
//
//	GetIntegrationExportersIntegrationExporterArgs{...}
type GetIntegrationExportersIntegrationExporterInput interface {
	pulumi.Input

	ToGetIntegrationExportersIntegrationExporterOutput() GetIntegrationExportersIntegrationExporterOutput
	ToGetIntegrationExportersIntegrationExporterOutputWithContext(context.Context) GetIntegrationExportersIntegrationExporterOutput
}

type GetIntegrationExportersIntegrationExporterArgs struct {
	// The ID of the Prometheus instance.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Integration Exporter Type.
	ExporterType pulumi.StringInput `pulumi:"exporterType"`
	// The ID of the Integration Exporter. It formats as `<cluster_id>:<integration_type>:<instance_id>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the Integration Exporter instance.
	InstanceId pulumi.IntInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The type of prometheus integration.
	IntegrationType pulumi.StringInput `pulumi:"integrationType"`
	// Exporter configuration parameter json string.
	Param pulumi.StringInput `pulumi:"param"`
	// Monitor the target address.
	Target pulumi.StringInput `pulumi:"target"`
	// The version information.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetIntegrationExportersIntegrationExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIntegrationExportersIntegrationExporter)(nil)).Elem()
}

func (i GetIntegrationExportersIntegrationExporterArgs) ToGetIntegrationExportersIntegrationExporterOutput() GetIntegrationExportersIntegrationExporterOutput {
	return i.ToGetIntegrationExportersIntegrationExporterOutputWithContext(context.Background())
}

func (i GetIntegrationExportersIntegrationExporterArgs) ToGetIntegrationExportersIntegrationExporterOutputWithContext(ctx context.Context) GetIntegrationExportersIntegrationExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIntegrationExportersIntegrationExporterOutput)
}

// GetIntegrationExportersIntegrationExporterArrayInput is an input type that accepts GetIntegrationExportersIntegrationExporterArray and GetIntegrationExportersIntegrationExporterArrayOutput values.
// You can construct a concrete instance of `GetIntegrationExportersIntegrationExporterArrayInput` via:
//
//	GetIntegrationExportersIntegrationExporterArray{ GetIntegrationExportersIntegrationExporterArgs{...} }
type GetIntegrationExportersIntegrationExporterArrayInput interface {
	pulumi.Input

	ToGetIntegrationExportersIntegrationExporterArrayOutput() GetIntegrationExportersIntegrationExporterArrayOutput
	ToGetIntegrationExportersIntegrationExporterArrayOutputWithContext(context.Context) GetIntegrationExportersIntegrationExporterArrayOutput
}

type GetIntegrationExportersIntegrationExporterArray []GetIntegrationExportersIntegrationExporterInput

func (GetIntegrationExportersIntegrationExporterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIntegrationExportersIntegrationExporter)(nil)).Elem()
}

func (i GetIntegrationExportersIntegrationExporterArray) ToGetIntegrationExportersIntegrationExporterArrayOutput() GetIntegrationExportersIntegrationExporterArrayOutput {
	return i.ToGetIntegrationExportersIntegrationExporterArrayOutputWithContext(context.Background())
}

func (i GetIntegrationExportersIntegrationExporterArray) ToGetIntegrationExportersIntegrationExporterArrayOutputWithContext(ctx context.Context) GetIntegrationExportersIntegrationExporterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIntegrationExportersIntegrationExporterArrayOutput)
}

type GetIntegrationExportersIntegrationExporterOutput struct{ *pulumi.OutputState }

func (GetIntegrationExportersIntegrationExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIntegrationExportersIntegrationExporter)(nil)).Elem()
}

func (o GetIntegrationExportersIntegrationExporterOutput) ToGetIntegrationExportersIntegrationExporterOutput() GetIntegrationExportersIntegrationExporterOutput {
	return o
}

func (o GetIntegrationExportersIntegrationExporterOutput) ToGetIntegrationExportersIntegrationExporterOutputWithContext(ctx context.Context) GetIntegrationExportersIntegrationExporterOutput {
	return o
}

// The ID of the Prometheus instance.
func (o GetIntegrationExportersIntegrationExporterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Integration Exporter Type.
func (o GetIntegrationExportersIntegrationExporterOutput) ExporterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.ExporterType }).(pulumi.StringOutput)
}

// The ID of the Integration Exporter. It formats as `<cluster_id>:<integration_type>:<instance_id>`.
func (o GetIntegrationExportersIntegrationExporterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Integration Exporter instance.
func (o GetIntegrationExportersIntegrationExporterOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) int { return v.InstanceId }).(pulumi.IntOutput)
}

// The name of the instance.
func (o GetIntegrationExportersIntegrationExporterOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The type of prometheus integration.
func (o GetIntegrationExportersIntegrationExporterOutput) IntegrationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.IntegrationType }).(pulumi.StringOutput)
}

// Exporter configuration parameter json string.
func (o GetIntegrationExportersIntegrationExporterOutput) Param() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.Param }).(pulumi.StringOutput)
}

// Monitor the target address.
func (o GetIntegrationExportersIntegrationExporterOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.Target }).(pulumi.StringOutput)
}

// The version information.
func (o GetIntegrationExportersIntegrationExporterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetIntegrationExportersIntegrationExporter) string { return v.Version }).(pulumi.StringOutput)
}

type GetIntegrationExportersIntegrationExporterArrayOutput struct{ *pulumi.OutputState }

func (GetIntegrationExportersIntegrationExporterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIntegrationExportersIntegrationExporter)(nil)).Elem()
}

func (o GetIntegrationExportersIntegrationExporterArrayOutput) ToGetIntegrationExportersIntegrationExporterArrayOutput() GetIntegrationExportersIntegrationExporterArrayOutput {
	return o
}

func (o GetIntegrationExportersIntegrationExporterArrayOutput) ToGetIntegrationExportersIntegrationExporterArrayOutputWithContext(ctx context.Context) GetIntegrationExportersIntegrationExporterArrayOutput {
	return o
}

func (o GetIntegrationExportersIntegrationExporterArrayOutput) Index(i pulumi.IntInput) GetIntegrationExportersIntegrationExporterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIntegrationExportersIntegrationExporter {
		return vs[0].([]GetIntegrationExportersIntegrationExporter)[vs[1].(int)]
	}).(GetIntegrationExportersIntegrationExporterOutput)
}

type GetPrometheisPromethei struct {
	// The token used to access the data source.
	AuthToken string `pulumi:"authToken"`
	// The ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// The type of the cluster.
	ClusterType string `pulumi:"clusterType"`
	// The ID of the Grafana workspace.
	GrafanaInstanceId string `pulumi:"grafanaInstanceId"`
	// Http api public network address.
	HttpApiInterUrl string `pulumi:"httpApiInterUrl"`
	// Http api intranet address.
	HttpApiIntraUrl string `pulumi:"httpApiIntraUrl"`
	// The ID of the Prometheus.
	Id string `pulumi:"id"`
	// PushGateway public network Url.
	PushGateWayInterUrl string `pulumi:"pushGateWayInterUrl"`
	// PushGateway intranet Url.
	PushGateWayIntraUrl string `pulumi:"pushGateWayIntraUrl"`
	// Public Url of remoteRead.
	RemoteReadInterUrl string `pulumi:"remoteReadInterUrl"`
	// RemoteRead intranet Url.
	RemoteReadIntraUrl string `pulumi:"remoteReadIntraUrl"`
	// RemoteWrite public Url.
	RemoteWriteInterUrl string `pulumi:"remoteWriteInterUrl"`
	// RemoteWrite Intranet Url.
	RemoteWriteIntraUrl string `pulumi:"remoteWriteIntraUrl"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The ID of the security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The child instance json string of the globalView instance.
	SubClustersJson string `pulumi:"subClustersJson"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The ID of the VSwitch.
	VswitchId string `pulumi:"vswitchId"`
}

// GetPrometheisPrometheiInput is an input type that accepts GetPrometheisPrometheiArgs and GetPrometheisPrometheiOutput values.
// You can construct a concrete instance of `GetPrometheisPrometheiInput` via:
//
//	GetPrometheisPrometheiArgs{...}
type GetPrometheisPrometheiInput interface {
	pulumi.Input

	ToGetPrometheisPrometheiOutput() GetPrometheisPrometheiOutput
	ToGetPrometheisPrometheiOutputWithContext(context.Context) GetPrometheisPrometheiOutput
}

type GetPrometheisPrometheiArgs struct {
	// The token used to access the data source.
	AuthToken pulumi.StringInput `pulumi:"authToken"`
	// The ID of the cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The type of the cluster.
	ClusterType pulumi.StringInput `pulumi:"clusterType"`
	// The ID of the Grafana workspace.
	GrafanaInstanceId pulumi.StringInput `pulumi:"grafanaInstanceId"`
	// Http api public network address.
	HttpApiInterUrl pulumi.StringInput `pulumi:"httpApiInterUrl"`
	// Http api intranet address.
	HttpApiIntraUrl pulumi.StringInput `pulumi:"httpApiIntraUrl"`
	// The ID of the Prometheus.
	Id pulumi.StringInput `pulumi:"id"`
	// PushGateway public network Url.
	PushGateWayInterUrl pulumi.StringInput `pulumi:"pushGateWayInterUrl"`
	// PushGateway intranet Url.
	PushGateWayIntraUrl pulumi.StringInput `pulumi:"pushGateWayIntraUrl"`
	// Public Url of remoteRead.
	RemoteReadInterUrl pulumi.StringInput `pulumi:"remoteReadInterUrl"`
	// RemoteRead intranet Url.
	RemoteReadIntraUrl pulumi.StringInput `pulumi:"remoteReadIntraUrl"`
	// RemoteWrite public Url.
	RemoteWriteInterUrl pulumi.StringInput `pulumi:"remoteWriteInterUrl"`
	// RemoteWrite Intranet Url.
	RemoteWriteIntraUrl pulumi.StringInput `pulumi:"remoteWriteIntraUrl"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The ID of the security group.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The child instance json string of the globalView instance.
	SubClustersJson pulumi.StringInput `pulumi:"subClustersJson"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The ID of the VSwitch.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
}

func (GetPrometheisPrometheiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheisPromethei)(nil)).Elem()
}

func (i GetPrometheisPrometheiArgs) ToGetPrometheisPrometheiOutput() GetPrometheisPrometheiOutput {
	return i.ToGetPrometheisPrometheiOutputWithContext(context.Background())
}

func (i GetPrometheisPrometheiArgs) ToGetPrometheisPrometheiOutputWithContext(ctx context.Context) GetPrometheisPrometheiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheisPrometheiOutput)
}

// GetPrometheisPrometheiArrayInput is an input type that accepts GetPrometheisPrometheiArray and GetPrometheisPrometheiArrayOutput values.
// You can construct a concrete instance of `GetPrometheisPrometheiArrayInput` via:
//
//	GetPrometheisPrometheiArray{ GetPrometheisPrometheiArgs{...} }
type GetPrometheisPrometheiArrayInput interface {
	pulumi.Input

	ToGetPrometheisPrometheiArrayOutput() GetPrometheisPrometheiArrayOutput
	ToGetPrometheisPrometheiArrayOutputWithContext(context.Context) GetPrometheisPrometheiArrayOutput
}

type GetPrometheisPrometheiArray []GetPrometheisPrometheiInput

func (GetPrometheisPrometheiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheisPromethei)(nil)).Elem()
}

func (i GetPrometheisPrometheiArray) ToGetPrometheisPrometheiArrayOutput() GetPrometheisPrometheiArrayOutput {
	return i.ToGetPrometheisPrometheiArrayOutputWithContext(context.Background())
}

func (i GetPrometheisPrometheiArray) ToGetPrometheisPrometheiArrayOutputWithContext(ctx context.Context) GetPrometheisPrometheiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheisPrometheiArrayOutput)
}

type GetPrometheisPrometheiOutput struct{ *pulumi.OutputState }

func (GetPrometheisPrometheiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheisPromethei)(nil)).Elem()
}

func (o GetPrometheisPrometheiOutput) ToGetPrometheisPrometheiOutput() GetPrometheisPrometheiOutput {
	return o
}

func (o GetPrometheisPrometheiOutput) ToGetPrometheisPrometheiOutputWithContext(ctx context.Context) GetPrometheisPrometheiOutput {
	return o
}

// The token used to access the data source.
func (o GetPrometheisPrometheiOutput) AuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.AuthToken }).(pulumi.StringOutput)
}

// The ID of the cluster.
func (o GetPrometheisPrometheiOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the cluster.
func (o GetPrometheisPrometheiOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The type of the cluster.
func (o GetPrometheisPrometheiOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.ClusterType }).(pulumi.StringOutput)
}

// The ID of the Grafana workspace.
func (o GetPrometheisPrometheiOutput) GrafanaInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.GrafanaInstanceId }).(pulumi.StringOutput)
}

// Http api public network address.
func (o GetPrometheisPrometheiOutput) HttpApiInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.HttpApiInterUrl }).(pulumi.StringOutput)
}

// Http api intranet address.
func (o GetPrometheisPrometheiOutput) HttpApiIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.HttpApiIntraUrl }).(pulumi.StringOutput)
}

// The ID of the Prometheus.
func (o GetPrometheisPrometheiOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.Id }).(pulumi.StringOutput)
}

// PushGateway public network Url.
func (o GetPrometheisPrometheiOutput) PushGateWayInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.PushGateWayInterUrl }).(pulumi.StringOutput)
}

// PushGateway intranet Url.
func (o GetPrometheisPrometheiOutput) PushGateWayIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.PushGateWayIntraUrl }).(pulumi.StringOutput)
}

// Public Url of remoteRead.
func (o GetPrometheisPrometheiOutput) RemoteReadInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.RemoteReadInterUrl }).(pulumi.StringOutput)
}

// RemoteRead intranet Url.
func (o GetPrometheisPrometheiOutput) RemoteReadIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.RemoteReadIntraUrl }).(pulumi.StringOutput)
}

// RemoteWrite public Url.
func (o GetPrometheisPrometheiOutput) RemoteWriteInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.RemoteWriteInterUrl }).(pulumi.StringOutput)
}

// RemoteWrite Intranet Url.
func (o GetPrometheisPrometheiOutput) RemoteWriteIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.RemoteWriteIntraUrl }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o GetPrometheisPrometheiOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The ID of the security group.
func (o GetPrometheisPrometheiOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The child instance json string of the globalView instance.
func (o GetPrometheisPrometheiOutput) SubClustersJson() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.SubClustersJson }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetPrometheisPrometheiOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The ID of the VPC.
func (o GetPrometheisPrometheiOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of the VSwitch.
func (o GetPrometheisPrometheiOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheisPromethei) string { return v.VswitchId }).(pulumi.StringOutput)
}

type GetPrometheisPrometheiArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheisPrometheiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheisPromethei)(nil)).Elem()
}

func (o GetPrometheisPrometheiArrayOutput) ToGetPrometheisPrometheiArrayOutput() GetPrometheisPrometheiArrayOutput {
	return o
}

func (o GetPrometheisPrometheiArrayOutput) ToGetPrometheisPrometheiArrayOutputWithContext(ctx context.Context) GetPrometheisPrometheiArrayOutput {
	return o
}

func (o GetPrometheisPrometheiArrayOutput) Index(i pulumi.IntInput) GetPrometheisPrometheiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheisPromethei {
		return vs[0].([]GetPrometheisPromethei)[vs[1].(int)]
	}).(GetPrometheisPrometheiOutput)
}

type GetPrometheusAlertRulesRule struct {
	// The annotations of the alert rule.
	Annotations []GetPrometheusAlertRulesRuleAnnotation `pulumi:"annotations"`
	// The ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
	DispatchRuleId string `pulumi:"dispatchRuleId"`
	// The duration of the alert.
	Duration string `pulumi:"duration"`
	// The alert rule expression that follows the PromQL syntax..
	Expression string `pulumi:"expression"`
	// The ID of the Prometheus Alert Rule.
	Id string `pulumi:"id"`
	// The labels of the resource.
	Labels []GetPrometheusAlertRulesRuleLabel `pulumi:"labels"`
	// The message of the alert notification.
	Message string `pulumi:"message"`
	// The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
	NotifyType string `pulumi:"notifyType"`
	// The first ID of the resource.
	PrometheusAlertRuleId string `pulumi:"prometheusAlertRuleId"`
	// The name of the resource.
	PrometheusAlertRuleName string `pulumi:"prometheusAlertRuleName"`
	// The status of the resource. Valid values: `0`, `1`.
	Status int `pulumi:"status"`
	// The type of the alert rule.
	Type string `pulumi:"type"`
}

// GetPrometheusAlertRulesRuleInput is an input type that accepts GetPrometheusAlertRulesRuleArgs and GetPrometheusAlertRulesRuleOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleInput` via:
//
//	GetPrometheusAlertRulesRuleArgs{...}
type GetPrometheusAlertRulesRuleInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleOutput() GetPrometheusAlertRulesRuleOutput
	ToGetPrometheusAlertRulesRuleOutputWithContext(context.Context) GetPrometheusAlertRulesRuleOutput
}

type GetPrometheusAlertRulesRuleArgs struct {
	// The annotations of the alert rule.
	Annotations GetPrometheusAlertRulesRuleAnnotationArrayInput `pulumi:"annotations"`
	// The ID of the cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
	DispatchRuleId pulumi.StringInput `pulumi:"dispatchRuleId"`
	// The duration of the alert.
	Duration pulumi.StringInput `pulumi:"duration"`
	// The alert rule expression that follows the PromQL syntax..
	Expression pulumi.StringInput `pulumi:"expression"`
	// The ID of the Prometheus Alert Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The labels of the resource.
	Labels GetPrometheusAlertRulesRuleLabelArrayInput `pulumi:"labels"`
	// The message of the alert notification.
	Message pulumi.StringInput `pulumi:"message"`
	// The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
	NotifyType pulumi.StringInput `pulumi:"notifyType"`
	// The first ID of the resource.
	PrometheusAlertRuleId pulumi.StringInput `pulumi:"prometheusAlertRuleId"`
	// The name of the resource.
	PrometheusAlertRuleName pulumi.StringInput `pulumi:"prometheusAlertRuleName"`
	// The status of the resource. Valid values: `0`, `1`.
	Status pulumi.IntInput `pulumi:"status"`
	// The type of the alert rule.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPrometheusAlertRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRule)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleArgs) ToGetPrometheusAlertRulesRuleOutput() GetPrometheusAlertRulesRuleOutput {
	return i.ToGetPrometheusAlertRulesRuleOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleArgs) ToGetPrometheusAlertRulesRuleOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleOutput)
}

// GetPrometheusAlertRulesRuleArrayInput is an input type that accepts GetPrometheusAlertRulesRuleArray and GetPrometheusAlertRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleArrayInput` via:
//
//	GetPrometheusAlertRulesRuleArray{ GetPrometheusAlertRulesRuleArgs{...} }
type GetPrometheusAlertRulesRuleArrayInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleArrayOutput() GetPrometheusAlertRulesRuleArrayOutput
	ToGetPrometheusAlertRulesRuleArrayOutputWithContext(context.Context) GetPrometheusAlertRulesRuleArrayOutput
}

type GetPrometheusAlertRulesRuleArray []GetPrometheusAlertRulesRuleInput

func (GetPrometheusAlertRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRule)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleArray) ToGetPrometheusAlertRulesRuleArrayOutput() GetPrometheusAlertRulesRuleArrayOutput {
	return i.ToGetPrometheusAlertRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleArray) ToGetPrometheusAlertRulesRuleArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleArrayOutput)
}

type GetPrometheusAlertRulesRuleOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRule)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleOutput) ToGetPrometheusAlertRulesRuleOutput() GetPrometheusAlertRulesRuleOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleOutput) ToGetPrometheusAlertRulesRuleOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleOutput {
	return o
}

// The annotations of the alert rule.
func (o GetPrometheusAlertRulesRuleOutput) Annotations() GetPrometheusAlertRulesRuleAnnotationArrayOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) []GetPrometheusAlertRulesRuleAnnotation { return v.Annotations }).(GetPrometheusAlertRulesRuleAnnotationArrayOutput)
}

// The ID of the cluster.
func (o GetPrometheusAlertRulesRuleOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The ID of the notification policy. This parameter is required when the `notifyType` parameter is set to `DISPATCH_RULE`.
func (o GetPrometheusAlertRulesRuleOutput) DispatchRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.DispatchRuleId }).(pulumi.StringOutput)
}

// The duration of the alert.
func (o GetPrometheusAlertRulesRuleOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.Duration }).(pulumi.StringOutput)
}

// The alert rule expression that follows the PromQL syntax..
func (o GetPrometheusAlertRulesRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.Expression }).(pulumi.StringOutput)
}

// The ID of the Prometheus Alert Rule.
func (o GetPrometheusAlertRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The labels of the resource.
func (o GetPrometheusAlertRulesRuleOutput) Labels() GetPrometheusAlertRulesRuleLabelArrayOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) []GetPrometheusAlertRulesRuleLabel { return v.Labels }).(GetPrometheusAlertRulesRuleLabelArrayOutput)
}

// The message of the alert notification.
func (o GetPrometheusAlertRulesRuleOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.Message }).(pulumi.StringOutput)
}

// The method of sending the alert notification. Valid values: `ALERT_MANAGER`, `DISPATCH_RULE`.
func (o GetPrometheusAlertRulesRuleOutput) NotifyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.NotifyType }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetPrometheusAlertRulesRuleOutput) PrometheusAlertRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.PrometheusAlertRuleId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetPrometheusAlertRulesRuleOutput) PrometheusAlertRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.PrometheusAlertRuleName }).(pulumi.StringOutput)
}

// The status of the resource. Valid values: `0`, `1`.
func (o GetPrometheusAlertRulesRuleOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) int { return v.Status }).(pulumi.IntOutput)
}

// The type of the alert rule.
func (o GetPrometheusAlertRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetPrometheusAlertRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRule)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleArrayOutput) ToGetPrometheusAlertRulesRuleArrayOutput() GetPrometheusAlertRulesRuleArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleArrayOutput) ToGetPrometheusAlertRulesRuleArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleArrayOutput) Index(i pulumi.IntInput) GetPrometheusAlertRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheusAlertRulesRule {
		return vs[0].([]GetPrometheusAlertRulesRule)[vs[1].(int)]
	}).(GetPrometheusAlertRulesRuleOutput)
}

type GetPrometheusAlertRulesRuleAnnotation struct {
	// The name of the label.
	Name string `pulumi:"name"`
	// The value of the label.
	Value string `pulumi:"value"`
}

// GetPrometheusAlertRulesRuleAnnotationInput is an input type that accepts GetPrometheusAlertRulesRuleAnnotationArgs and GetPrometheusAlertRulesRuleAnnotationOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleAnnotationInput` via:
//
//	GetPrometheusAlertRulesRuleAnnotationArgs{...}
type GetPrometheusAlertRulesRuleAnnotationInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleAnnotationOutput() GetPrometheusAlertRulesRuleAnnotationOutput
	ToGetPrometheusAlertRulesRuleAnnotationOutputWithContext(context.Context) GetPrometheusAlertRulesRuleAnnotationOutput
}

type GetPrometheusAlertRulesRuleAnnotationArgs struct {
	// The name of the label.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetPrometheusAlertRulesRuleAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRuleAnnotation)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleAnnotationArgs) ToGetPrometheusAlertRulesRuleAnnotationOutput() GetPrometheusAlertRulesRuleAnnotationOutput {
	return i.ToGetPrometheusAlertRulesRuleAnnotationOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleAnnotationArgs) ToGetPrometheusAlertRulesRuleAnnotationOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleAnnotationOutput)
}

// GetPrometheusAlertRulesRuleAnnotationArrayInput is an input type that accepts GetPrometheusAlertRulesRuleAnnotationArray and GetPrometheusAlertRulesRuleAnnotationArrayOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleAnnotationArrayInput` via:
//
//	GetPrometheusAlertRulesRuleAnnotationArray{ GetPrometheusAlertRulesRuleAnnotationArgs{...} }
type GetPrometheusAlertRulesRuleAnnotationArrayInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleAnnotationArrayOutput() GetPrometheusAlertRulesRuleAnnotationArrayOutput
	ToGetPrometheusAlertRulesRuleAnnotationArrayOutputWithContext(context.Context) GetPrometheusAlertRulesRuleAnnotationArrayOutput
}

type GetPrometheusAlertRulesRuleAnnotationArray []GetPrometheusAlertRulesRuleAnnotationInput

func (GetPrometheusAlertRulesRuleAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRuleAnnotation)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleAnnotationArray) ToGetPrometheusAlertRulesRuleAnnotationArrayOutput() GetPrometheusAlertRulesRuleAnnotationArrayOutput {
	return i.ToGetPrometheusAlertRulesRuleAnnotationArrayOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleAnnotationArray) ToGetPrometheusAlertRulesRuleAnnotationArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleAnnotationArrayOutput)
}

type GetPrometheusAlertRulesRuleAnnotationOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRuleAnnotation)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleAnnotationOutput) ToGetPrometheusAlertRulesRuleAnnotationOutput() GetPrometheusAlertRulesRuleAnnotationOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleAnnotationOutput) ToGetPrometheusAlertRulesRuleAnnotationOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleAnnotationOutput {
	return o
}

// The name of the label.
func (o GetPrometheusAlertRulesRuleAnnotationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRuleAnnotation) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the label.
func (o GetPrometheusAlertRulesRuleAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRuleAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetPrometheusAlertRulesRuleAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRuleAnnotation)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleAnnotationArrayOutput) ToGetPrometheusAlertRulesRuleAnnotationArrayOutput() GetPrometheusAlertRulesRuleAnnotationArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleAnnotationArrayOutput) ToGetPrometheusAlertRulesRuleAnnotationArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleAnnotationArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleAnnotationArrayOutput) Index(i pulumi.IntInput) GetPrometheusAlertRulesRuleAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheusAlertRulesRuleAnnotation {
		return vs[0].([]GetPrometheusAlertRulesRuleAnnotation)[vs[1].(int)]
	}).(GetPrometheusAlertRulesRuleAnnotationOutput)
}

type GetPrometheusAlertRulesRuleLabel struct {
	// The name of the label.
	Name string `pulumi:"name"`
	// The value of the label.
	Value string `pulumi:"value"`
}

// GetPrometheusAlertRulesRuleLabelInput is an input type that accepts GetPrometheusAlertRulesRuleLabelArgs and GetPrometheusAlertRulesRuleLabelOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleLabelInput` via:
//
//	GetPrometheusAlertRulesRuleLabelArgs{...}
type GetPrometheusAlertRulesRuleLabelInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleLabelOutput() GetPrometheusAlertRulesRuleLabelOutput
	ToGetPrometheusAlertRulesRuleLabelOutputWithContext(context.Context) GetPrometheusAlertRulesRuleLabelOutput
}

type GetPrometheusAlertRulesRuleLabelArgs struct {
	// The name of the label.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetPrometheusAlertRulesRuleLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRuleLabel)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleLabelArgs) ToGetPrometheusAlertRulesRuleLabelOutput() GetPrometheusAlertRulesRuleLabelOutput {
	return i.ToGetPrometheusAlertRulesRuleLabelOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleLabelArgs) ToGetPrometheusAlertRulesRuleLabelOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleLabelOutput)
}

// GetPrometheusAlertRulesRuleLabelArrayInput is an input type that accepts GetPrometheusAlertRulesRuleLabelArray and GetPrometheusAlertRulesRuleLabelArrayOutput values.
// You can construct a concrete instance of `GetPrometheusAlertRulesRuleLabelArrayInput` via:
//
//	GetPrometheusAlertRulesRuleLabelArray{ GetPrometheusAlertRulesRuleLabelArgs{...} }
type GetPrometheusAlertRulesRuleLabelArrayInput interface {
	pulumi.Input

	ToGetPrometheusAlertRulesRuleLabelArrayOutput() GetPrometheusAlertRulesRuleLabelArrayOutput
	ToGetPrometheusAlertRulesRuleLabelArrayOutputWithContext(context.Context) GetPrometheusAlertRulesRuleLabelArrayOutput
}

type GetPrometheusAlertRulesRuleLabelArray []GetPrometheusAlertRulesRuleLabelInput

func (GetPrometheusAlertRulesRuleLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRuleLabel)(nil)).Elem()
}

func (i GetPrometheusAlertRulesRuleLabelArray) ToGetPrometheusAlertRulesRuleLabelArrayOutput() GetPrometheusAlertRulesRuleLabelArrayOutput {
	return i.ToGetPrometheusAlertRulesRuleLabelArrayOutputWithContext(context.Background())
}

func (i GetPrometheusAlertRulesRuleLabelArray) ToGetPrometheusAlertRulesRuleLabelArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusAlertRulesRuleLabelArrayOutput)
}

type GetPrometheusAlertRulesRuleLabelOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusAlertRulesRuleLabel)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleLabelOutput) ToGetPrometheusAlertRulesRuleLabelOutput() GetPrometheusAlertRulesRuleLabelOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleLabelOutput) ToGetPrometheusAlertRulesRuleLabelOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleLabelOutput {
	return o
}

// The name of the label.
func (o GetPrometheusAlertRulesRuleLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRuleLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the label.
func (o GetPrometheusAlertRulesRuleLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusAlertRulesRuleLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetPrometheusAlertRulesRuleLabelArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheusAlertRulesRuleLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusAlertRulesRuleLabel)(nil)).Elem()
}

func (o GetPrometheusAlertRulesRuleLabelArrayOutput) ToGetPrometheusAlertRulesRuleLabelArrayOutput() GetPrometheusAlertRulesRuleLabelArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleLabelArrayOutput) ToGetPrometheusAlertRulesRuleLabelArrayOutputWithContext(ctx context.Context) GetPrometheusAlertRulesRuleLabelArrayOutput {
	return o
}

func (o GetPrometheusAlertRulesRuleLabelArrayOutput) Index(i pulumi.IntInput) GetPrometheusAlertRulesRuleLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheusAlertRulesRuleLabel {
		return vs[0].([]GetPrometheusAlertRulesRuleLabel)[vs[1].(int)]
	}).(GetPrometheusAlertRulesRuleLabelOutput)
}

type GetPrometheusMonitoringsPrometheusMonitoring struct {
	// The ID of the Prometheus instance.
	ClusterId string `pulumi:"clusterId"`
	// The monitoring configuration. The value is a YAML string.
	ConfigYaml string `pulumi:"configYaml"`
	// The ID of the Prometheus Monitoring. It formats as `<cluster_id>:<monitoring_name>:<type>`.
	Id string `pulumi:"id"`
	// The name of the monitoring configuration.
	MonitoringName string `pulumi:"monitoringName"`
	// The status of the monitoring configuration. Valid values: `run`, `stop`.
	Status string `pulumi:"status"`
	// The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
	Type string `pulumi:"type"`
}

// GetPrometheusMonitoringsPrometheusMonitoringInput is an input type that accepts GetPrometheusMonitoringsPrometheusMonitoringArgs and GetPrometheusMonitoringsPrometheusMonitoringOutput values.
// You can construct a concrete instance of `GetPrometheusMonitoringsPrometheusMonitoringInput` via:
//
//	GetPrometheusMonitoringsPrometheusMonitoringArgs{...}
type GetPrometheusMonitoringsPrometheusMonitoringInput interface {
	pulumi.Input

	ToGetPrometheusMonitoringsPrometheusMonitoringOutput() GetPrometheusMonitoringsPrometheusMonitoringOutput
	ToGetPrometheusMonitoringsPrometheusMonitoringOutputWithContext(context.Context) GetPrometheusMonitoringsPrometheusMonitoringOutput
}

type GetPrometheusMonitoringsPrometheusMonitoringArgs struct {
	// The ID of the Prometheus instance.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The monitoring configuration. The value is a YAML string.
	ConfigYaml pulumi.StringInput `pulumi:"configYaml"`
	// The ID of the Prometheus Monitoring. It formats as `<cluster_id>:<monitoring_name>:<type>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the monitoring configuration.
	MonitoringName pulumi.StringInput `pulumi:"monitoringName"`
	// The status of the monitoring configuration. Valid values: `run`, `stop`.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPrometheusMonitoringsPrometheusMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusMonitoringsPrometheusMonitoring)(nil)).Elem()
}

func (i GetPrometheusMonitoringsPrometheusMonitoringArgs) ToGetPrometheusMonitoringsPrometheusMonitoringOutput() GetPrometheusMonitoringsPrometheusMonitoringOutput {
	return i.ToGetPrometheusMonitoringsPrometheusMonitoringOutputWithContext(context.Background())
}

func (i GetPrometheusMonitoringsPrometheusMonitoringArgs) ToGetPrometheusMonitoringsPrometheusMonitoringOutputWithContext(ctx context.Context) GetPrometheusMonitoringsPrometheusMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusMonitoringsPrometheusMonitoringOutput)
}

// GetPrometheusMonitoringsPrometheusMonitoringArrayInput is an input type that accepts GetPrometheusMonitoringsPrometheusMonitoringArray and GetPrometheusMonitoringsPrometheusMonitoringArrayOutput values.
// You can construct a concrete instance of `GetPrometheusMonitoringsPrometheusMonitoringArrayInput` via:
//
//	GetPrometheusMonitoringsPrometheusMonitoringArray{ GetPrometheusMonitoringsPrometheusMonitoringArgs{...} }
type GetPrometheusMonitoringsPrometheusMonitoringArrayInput interface {
	pulumi.Input

	ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutput() GetPrometheusMonitoringsPrometheusMonitoringArrayOutput
	ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutputWithContext(context.Context) GetPrometheusMonitoringsPrometheusMonitoringArrayOutput
}

type GetPrometheusMonitoringsPrometheusMonitoringArray []GetPrometheusMonitoringsPrometheusMonitoringInput

func (GetPrometheusMonitoringsPrometheusMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusMonitoringsPrometheusMonitoring)(nil)).Elem()
}

func (i GetPrometheusMonitoringsPrometheusMonitoringArray) ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutput() GetPrometheusMonitoringsPrometheusMonitoringArrayOutput {
	return i.ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutputWithContext(context.Background())
}

func (i GetPrometheusMonitoringsPrometheusMonitoringArray) ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutputWithContext(ctx context.Context) GetPrometheusMonitoringsPrometheusMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusMonitoringsPrometheusMonitoringArrayOutput)
}

type GetPrometheusMonitoringsPrometheusMonitoringOutput struct{ *pulumi.OutputState }

func (GetPrometheusMonitoringsPrometheusMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusMonitoringsPrometheusMonitoring)(nil)).Elem()
}

func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) ToGetPrometheusMonitoringsPrometheusMonitoringOutput() GetPrometheusMonitoringsPrometheusMonitoringOutput {
	return o
}

func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) ToGetPrometheusMonitoringsPrometheusMonitoringOutputWithContext(ctx context.Context) GetPrometheusMonitoringsPrometheusMonitoringOutput {
	return o
}

// The ID of the Prometheus instance.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The monitoring configuration. The value is a YAML string.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) ConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.ConfigYaml }).(pulumi.StringOutput)
}

// The ID of the Prometheus Monitoring. It formats as `<cluster_id>:<monitoring_name>:<type>`.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the monitoring configuration.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) MonitoringName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.MonitoringName }).(pulumi.StringOutput)
}

// The status of the monitoring configuration. Valid values: `run`, `stop`.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the monitoring configuration. Valid values: `serviceMonitor`, `podMonitor`, `customJob`, `probe`.
func (o GetPrometheusMonitoringsPrometheusMonitoringOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusMonitoringsPrometheusMonitoring) string { return v.Type }).(pulumi.StringOutput)
}

type GetPrometheusMonitoringsPrometheusMonitoringArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheusMonitoringsPrometheusMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusMonitoringsPrometheusMonitoring)(nil)).Elem()
}

func (o GetPrometheusMonitoringsPrometheusMonitoringArrayOutput) ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutput() GetPrometheusMonitoringsPrometheusMonitoringArrayOutput {
	return o
}

func (o GetPrometheusMonitoringsPrometheusMonitoringArrayOutput) ToGetPrometheusMonitoringsPrometheusMonitoringArrayOutputWithContext(ctx context.Context) GetPrometheusMonitoringsPrometheusMonitoringArrayOutput {
	return o
}

func (o GetPrometheusMonitoringsPrometheusMonitoringArrayOutput) Index(i pulumi.IntInput) GetPrometheusMonitoringsPrometheusMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheusMonitoringsPrometheusMonitoring {
		return vs[0].([]GetPrometheusMonitoringsPrometheusMonitoring)[vs[1].(int)]
	}).(GetPrometheusMonitoringsPrometheusMonitoringOutput)
}

type GetPrometheusPromethei struct {
	// The token used to access the data source.
	AuthToken string `pulumi:"authToken"`
	// The ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// The type of the cluster.
	ClusterType string `pulumi:"clusterType"`
	// The ID of the Grafana workspace.
	GrafanaInstanceId string `pulumi:"grafanaInstanceId"`
	// Http api public network address.
	HttpApiInterUrl string `pulumi:"httpApiInterUrl"`
	// Http api intranet address.
	HttpApiIntraUrl string `pulumi:"httpApiIntraUrl"`
	// The ID of the Prometheus.
	Id string `pulumi:"id"`
	// PushGateway public network Url.
	PushGateWayInterUrl string `pulumi:"pushGateWayInterUrl"`
	// PushGateway intranet Url.
	PushGateWayIntraUrl string `pulumi:"pushGateWayIntraUrl"`
	// Public Url of remoteRead.
	RemoteReadInterUrl string `pulumi:"remoteReadInterUrl"`
	// RemoteRead intranet Url.
	RemoteReadIntraUrl string `pulumi:"remoteReadIntraUrl"`
	// RemoteWrite public Url.
	RemoteWriteInterUrl string `pulumi:"remoteWriteInterUrl"`
	// RemoteWrite Intranet Url.
	RemoteWriteIntraUrl string `pulumi:"remoteWriteIntraUrl"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The ID of the security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The child instance json string of the globalView instance.
	SubClustersJson string `pulumi:"subClustersJson"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The ID of the VSwitch.
	VswitchId string `pulumi:"vswitchId"`
}

// GetPrometheusPrometheiInput is an input type that accepts GetPrometheusPrometheiArgs and GetPrometheusPrometheiOutput values.
// You can construct a concrete instance of `GetPrometheusPrometheiInput` via:
//
//	GetPrometheusPrometheiArgs{...}
type GetPrometheusPrometheiInput interface {
	pulumi.Input

	ToGetPrometheusPrometheiOutput() GetPrometheusPrometheiOutput
	ToGetPrometheusPrometheiOutputWithContext(context.Context) GetPrometheusPrometheiOutput
}

type GetPrometheusPrometheiArgs struct {
	// The token used to access the data source.
	AuthToken pulumi.StringInput `pulumi:"authToken"`
	// The ID of the cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The type of the cluster.
	ClusterType pulumi.StringInput `pulumi:"clusterType"`
	// The ID of the Grafana workspace.
	GrafanaInstanceId pulumi.StringInput `pulumi:"grafanaInstanceId"`
	// Http api public network address.
	HttpApiInterUrl pulumi.StringInput `pulumi:"httpApiInterUrl"`
	// Http api intranet address.
	HttpApiIntraUrl pulumi.StringInput `pulumi:"httpApiIntraUrl"`
	// The ID of the Prometheus.
	Id pulumi.StringInput `pulumi:"id"`
	// PushGateway public network Url.
	PushGateWayInterUrl pulumi.StringInput `pulumi:"pushGateWayInterUrl"`
	// PushGateway intranet Url.
	PushGateWayIntraUrl pulumi.StringInput `pulumi:"pushGateWayIntraUrl"`
	// Public Url of remoteRead.
	RemoteReadInterUrl pulumi.StringInput `pulumi:"remoteReadInterUrl"`
	// RemoteRead intranet Url.
	RemoteReadIntraUrl pulumi.StringInput `pulumi:"remoteReadIntraUrl"`
	// RemoteWrite public Url.
	RemoteWriteInterUrl pulumi.StringInput `pulumi:"remoteWriteInterUrl"`
	// RemoteWrite Intranet Url.
	RemoteWriteIntraUrl pulumi.StringInput `pulumi:"remoteWriteIntraUrl"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The ID of the security group.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The child instance json string of the globalView instance.
	SubClustersJson pulumi.StringInput `pulumi:"subClustersJson"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The ID of the VSwitch.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
}

func (GetPrometheusPrometheiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusPromethei)(nil)).Elem()
}

func (i GetPrometheusPrometheiArgs) ToGetPrometheusPrometheiOutput() GetPrometheusPrometheiOutput {
	return i.ToGetPrometheusPrometheiOutputWithContext(context.Background())
}

func (i GetPrometheusPrometheiArgs) ToGetPrometheusPrometheiOutputWithContext(ctx context.Context) GetPrometheusPrometheiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusPrometheiOutput)
}

// GetPrometheusPrometheiArrayInput is an input type that accepts GetPrometheusPrometheiArray and GetPrometheusPrometheiArrayOutput values.
// You can construct a concrete instance of `GetPrometheusPrometheiArrayInput` via:
//
//	GetPrometheusPrometheiArray{ GetPrometheusPrometheiArgs{...} }
type GetPrometheusPrometheiArrayInput interface {
	pulumi.Input

	ToGetPrometheusPrometheiArrayOutput() GetPrometheusPrometheiArrayOutput
	ToGetPrometheusPrometheiArrayOutputWithContext(context.Context) GetPrometheusPrometheiArrayOutput
}

type GetPrometheusPrometheiArray []GetPrometheusPrometheiInput

func (GetPrometheusPrometheiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusPromethei)(nil)).Elem()
}

func (i GetPrometheusPrometheiArray) ToGetPrometheusPrometheiArrayOutput() GetPrometheusPrometheiArrayOutput {
	return i.ToGetPrometheusPrometheiArrayOutputWithContext(context.Background())
}

func (i GetPrometheusPrometheiArray) ToGetPrometheusPrometheiArrayOutputWithContext(ctx context.Context) GetPrometheusPrometheiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrometheusPrometheiArrayOutput)
}

type GetPrometheusPrometheiOutput struct{ *pulumi.OutputState }

func (GetPrometheusPrometheiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrometheusPromethei)(nil)).Elem()
}

func (o GetPrometheusPrometheiOutput) ToGetPrometheusPrometheiOutput() GetPrometheusPrometheiOutput {
	return o
}

func (o GetPrometheusPrometheiOutput) ToGetPrometheusPrometheiOutputWithContext(ctx context.Context) GetPrometheusPrometheiOutput {
	return o
}

// The token used to access the data source.
func (o GetPrometheusPrometheiOutput) AuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.AuthToken }).(pulumi.StringOutput)
}

// The ID of the cluster.
func (o GetPrometheusPrometheiOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the cluster.
func (o GetPrometheusPrometheiOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The type of the cluster.
func (o GetPrometheusPrometheiOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.ClusterType }).(pulumi.StringOutput)
}

// The ID of the Grafana workspace.
func (o GetPrometheusPrometheiOutput) GrafanaInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.GrafanaInstanceId }).(pulumi.StringOutput)
}

// Http api public network address.
func (o GetPrometheusPrometheiOutput) HttpApiInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.HttpApiInterUrl }).(pulumi.StringOutput)
}

// Http api intranet address.
func (o GetPrometheusPrometheiOutput) HttpApiIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.HttpApiIntraUrl }).(pulumi.StringOutput)
}

// The ID of the Prometheus.
func (o GetPrometheusPrometheiOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.Id }).(pulumi.StringOutput)
}

// PushGateway public network Url.
func (o GetPrometheusPrometheiOutput) PushGateWayInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.PushGateWayInterUrl }).(pulumi.StringOutput)
}

// PushGateway intranet Url.
func (o GetPrometheusPrometheiOutput) PushGateWayIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.PushGateWayIntraUrl }).(pulumi.StringOutput)
}

// Public Url of remoteRead.
func (o GetPrometheusPrometheiOutput) RemoteReadInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.RemoteReadInterUrl }).(pulumi.StringOutput)
}

// RemoteRead intranet Url.
func (o GetPrometheusPrometheiOutput) RemoteReadIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.RemoteReadIntraUrl }).(pulumi.StringOutput)
}

// RemoteWrite public Url.
func (o GetPrometheusPrometheiOutput) RemoteWriteInterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.RemoteWriteInterUrl }).(pulumi.StringOutput)
}

// RemoteWrite Intranet Url.
func (o GetPrometheusPrometheiOutput) RemoteWriteIntraUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.RemoteWriteIntraUrl }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o GetPrometheusPrometheiOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The ID of the security group.
func (o GetPrometheusPrometheiOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The child instance json string of the globalView instance.
func (o GetPrometheusPrometheiOutput) SubClustersJson() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.SubClustersJson }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetPrometheusPrometheiOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The ID of the VPC.
func (o GetPrometheusPrometheiOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of the VSwitch.
func (o GetPrometheusPrometheiOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrometheusPromethei) string { return v.VswitchId }).(pulumi.StringOutput)
}

type GetPrometheusPrometheiArrayOutput struct{ *pulumi.OutputState }

func (GetPrometheusPrometheiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrometheusPromethei)(nil)).Elem()
}

func (o GetPrometheusPrometheiArrayOutput) ToGetPrometheusPrometheiArrayOutput() GetPrometheusPrometheiArrayOutput {
	return o
}

func (o GetPrometheusPrometheiArrayOutput) ToGetPrometheusPrometheiArrayOutputWithContext(ctx context.Context) GetPrometheusPrometheiArrayOutput {
	return o
}

func (o GetPrometheusPrometheiArrayOutput) Index(i pulumi.IntInput) GetPrometheusPrometheiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrometheusPromethei {
		return vs[0].([]GetPrometheusPromethei)[vs[1].(int)]
	}).(GetPrometheusPrometheiOutput)
}

type GetRemoteWritesRemoteWrite struct {
	// The ID of the Prometheus instance.
	ClusterId string `pulumi:"clusterId"`
	// The ID of the Remote Write. It formats as `<cluster_id>:<remote_write_name>`.
	Id string `pulumi:"id"`
	// The name of the Remote Write configuration item.
	RemoteWriteName string `pulumi:"remoteWriteName"`
	// The details of the Remote Write configuration item. The value is in the YAML format.
	RemoteWriteYaml string `pulumi:"remoteWriteYaml"`
}

// GetRemoteWritesRemoteWriteInput is an input type that accepts GetRemoteWritesRemoteWriteArgs and GetRemoteWritesRemoteWriteOutput values.
// You can construct a concrete instance of `GetRemoteWritesRemoteWriteInput` via:
//
//	GetRemoteWritesRemoteWriteArgs{...}
type GetRemoteWritesRemoteWriteInput interface {
	pulumi.Input

	ToGetRemoteWritesRemoteWriteOutput() GetRemoteWritesRemoteWriteOutput
	ToGetRemoteWritesRemoteWriteOutputWithContext(context.Context) GetRemoteWritesRemoteWriteOutput
}

type GetRemoteWritesRemoteWriteArgs struct {
	// The ID of the Prometheus instance.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The ID of the Remote Write. It formats as `<cluster_id>:<remote_write_name>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the Remote Write configuration item.
	RemoteWriteName pulumi.StringInput `pulumi:"remoteWriteName"`
	// The details of the Remote Write configuration item. The value is in the YAML format.
	RemoteWriteYaml pulumi.StringInput `pulumi:"remoteWriteYaml"`
}

func (GetRemoteWritesRemoteWriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteWritesRemoteWrite)(nil)).Elem()
}

func (i GetRemoteWritesRemoteWriteArgs) ToGetRemoteWritesRemoteWriteOutput() GetRemoteWritesRemoteWriteOutput {
	return i.ToGetRemoteWritesRemoteWriteOutputWithContext(context.Background())
}

func (i GetRemoteWritesRemoteWriteArgs) ToGetRemoteWritesRemoteWriteOutputWithContext(ctx context.Context) GetRemoteWritesRemoteWriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteWritesRemoteWriteOutput)
}

// GetRemoteWritesRemoteWriteArrayInput is an input type that accepts GetRemoteWritesRemoteWriteArray and GetRemoteWritesRemoteWriteArrayOutput values.
// You can construct a concrete instance of `GetRemoteWritesRemoteWriteArrayInput` via:
//
//	GetRemoteWritesRemoteWriteArray{ GetRemoteWritesRemoteWriteArgs{...} }
type GetRemoteWritesRemoteWriteArrayInput interface {
	pulumi.Input

	ToGetRemoteWritesRemoteWriteArrayOutput() GetRemoteWritesRemoteWriteArrayOutput
	ToGetRemoteWritesRemoteWriteArrayOutputWithContext(context.Context) GetRemoteWritesRemoteWriteArrayOutput
}

type GetRemoteWritesRemoteWriteArray []GetRemoteWritesRemoteWriteInput

func (GetRemoteWritesRemoteWriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteWritesRemoteWrite)(nil)).Elem()
}

func (i GetRemoteWritesRemoteWriteArray) ToGetRemoteWritesRemoteWriteArrayOutput() GetRemoteWritesRemoteWriteArrayOutput {
	return i.ToGetRemoteWritesRemoteWriteArrayOutputWithContext(context.Background())
}

func (i GetRemoteWritesRemoteWriteArray) ToGetRemoteWritesRemoteWriteArrayOutputWithContext(ctx context.Context) GetRemoteWritesRemoteWriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteWritesRemoteWriteArrayOutput)
}

type GetRemoteWritesRemoteWriteOutput struct{ *pulumi.OutputState }

func (GetRemoteWritesRemoteWriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteWritesRemoteWrite)(nil)).Elem()
}

func (o GetRemoteWritesRemoteWriteOutput) ToGetRemoteWritesRemoteWriteOutput() GetRemoteWritesRemoteWriteOutput {
	return o
}

func (o GetRemoteWritesRemoteWriteOutput) ToGetRemoteWritesRemoteWriteOutputWithContext(ctx context.Context) GetRemoteWritesRemoteWriteOutput {
	return o
}

// The ID of the Prometheus instance.
func (o GetRemoteWritesRemoteWriteOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRemoteWritesRemoteWrite) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The ID of the Remote Write. It formats as `<cluster_id>:<remote_write_name>`.
func (o GetRemoteWritesRemoteWriteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRemoteWritesRemoteWrite) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Remote Write configuration item.
func (o GetRemoteWritesRemoteWriteOutput) RemoteWriteName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRemoteWritesRemoteWrite) string { return v.RemoteWriteName }).(pulumi.StringOutput)
}

// The details of the Remote Write configuration item. The value is in the YAML format.
func (o GetRemoteWritesRemoteWriteOutput) RemoteWriteYaml() pulumi.StringOutput {
	return o.ApplyT(func(v GetRemoteWritesRemoteWrite) string { return v.RemoteWriteYaml }).(pulumi.StringOutput)
}

type GetRemoteWritesRemoteWriteArrayOutput struct{ *pulumi.OutputState }

func (GetRemoteWritesRemoteWriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteWritesRemoteWrite)(nil)).Elem()
}

func (o GetRemoteWritesRemoteWriteArrayOutput) ToGetRemoteWritesRemoteWriteArrayOutput() GetRemoteWritesRemoteWriteArrayOutput {
	return o
}

func (o GetRemoteWritesRemoteWriteArrayOutput) ToGetRemoteWritesRemoteWriteArrayOutputWithContext(ctx context.Context) GetRemoteWritesRemoteWriteArrayOutput {
	return o
}

func (o GetRemoteWritesRemoteWriteArrayOutput) Index(i pulumi.IntInput) GetRemoteWritesRemoteWriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRemoteWritesRemoteWrite {
		return vs[0].([]GetRemoteWritesRemoteWrite)[vs[1].(int)]
	}).(GetRemoteWritesRemoteWriteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleGroupRuleInput)(nil)).Elem(), DispatchRuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleGroupRuleArrayInput)(nil)).Elem(), DispatchRuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridArrayInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput)(nil)).Elem(), DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleNotifyRuleInput)(nil)).Elem(), DispatchRuleNotifyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleNotifyRuleArrayInput)(nil)).Elem(), DispatchRuleNotifyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleNotifyRuleNotifyObjectInput)(nil)).Elem(), DispatchRuleNotifyRuleNotifyObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DispatchRuleNotifyRuleNotifyObjectArrayInput)(nil)).Elem(), DispatchRuleNotifyRuleNotifyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusAlertRuleAnnotationInput)(nil)).Elem(), PrometheusAlertRuleAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusAlertRuleAnnotationArrayInput)(nil)).Elem(), PrometheusAlertRuleAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusAlertRuleLabelInput)(nil)).Elem(), PrometheusAlertRuleLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusAlertRuleLabelArrayInput)(nil)).Elem(), PrometheusAlertRuleLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskAvailableAssertionInput)(nil)).Elem(), SyntheticTaskAvailableAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskAvailableAssertionArrayInput)(nil)).Elem(), SyntheticTaskAvailableAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingInput)(nil)).Elem(), SyntheticTaskCommonSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingPtrInput)(nil)).Elem(), SyntheticTaskCommonSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostInput)(nil)).Elem(), SyntheticTaskCommonSettingCustomHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostPtrInput)(nil)).Elem(), SyntheticTaskCommonSettingCustomHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostHostInput)(nil)).Elem(), SyntheticTaskCommonSettingCustomHostHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCommonSettingCustomHostHostArrayInput)(nil)).Elem(), SyntheticTaskCommonSettingCustomHostHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCustomPeriodInput)(nil)).Elem(), SyntheticTaskCustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskCustomPeriodPtrInput)(nil)).Elem(), SyntheticTaskCustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorInput)(nil)).Elem(), SyntheticTaskMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorArrayInput)(nil)).Elem(), SyntheticTaskMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfInput)(nil)).Elem(), SyntheticTaskMonitorConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpInput)(nil)).Elem(), SyntheticTaskMonitorConfApiHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfApiHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpRequestBodyInput)(nil)).Elem(), SyntheticTaskMonitorConfApiHttpRequestBodyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfApiHttpRequestBodyPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfApiHttpRequestBodyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfFileDownloadInput)(nil)).Elem(), SyntheticTaskMonitorConfFileDownloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfFileDownloadPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfFileDownloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetDnsInput)(nil)).Elem(), SyntheticTaskMonitorConfNetDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetDnsPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfNetDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetIcmpInput)(nil)).Elem(), SyntheticTaskMonitorConfNetIcmpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetIcmpPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfNetIcmpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetTcpInput)(nil)).Elem(), SyntheticTaskMonitorConfNetTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfNetTcpPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfNetTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfStreamInput)(nil)).Elem(), SyntheticTaskMonitorConfStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfStreamPtrInput)(nil)).Elem(), SyntheticTaskMonitorConfStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfWebsiteInput)(nil)).Elem(), SyntheticTaskMonitorConfWebsiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticTaskMonitorConfWebsitePtrInput)(nil)).Elem(), SyntheticTaskMonitorConfWebsiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertContactGroupsGroupInput)(nil)).Elem(), GetAlertContactGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertContactGroupsGroupArrayInput)(nil)).Elem(), GetAlertContactGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertContactsContactInput)(nil)).Elem(), GetAlertContactsContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAlertContactsContactArrayInput)(nil)).Elem(), GetAlertContactsContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleInput)(nil)).Elem(), GetDispatchRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleArrayInput)(nil)).Elem(), GetDispatchRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleGroupRuleInput)(nil)).Elem(), GetDispatchRulesRuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleGroupRuleArrayInput)(nil)).Elem(), GetDispatchRulesRuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridArrayInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayInput)(nil)).Elem(), GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleInput)(nil)).Elem(), GetDispatchRulesRuleNotifyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleArrayInput)(nil)).Elem(), GetDispatchRulesRuleNotifyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleNotifyObjectInput)(nil)).Elem(), GetDispatchRulesRuleNotifyRuleNotifyObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDispatchRulesRuleNotifyRuleNotifyObjectArrayInput)(nil)).Elem(), GetDispatchRulesRuleNotifyRuleNotifyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIntegrationExportersIntegrationExporterInput)(nil)).Elem(), GetIntegrationExportersIntegrationExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIntegrationExportersIntegrationExporterArrayInput)(nil)).Elem(), GetIntegrationExportersIntegrationExporterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheisPrometheiInput)(nil)).Elem(), GetPrometheisPrometheiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheisPrometheiArrayInput)(nil)).Elem(), GetPrometheisPrometheiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleInput)(nil)).Elem(), GetPrometheusAlertRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleArrayInput)(nil)).Elem(), GetPrometheusAlertRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleAnnotationInput)(nil)).Elem(), GetPrometheusAlertRulesRuleAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleAnnotationArrayInput)(nil)).Elem(), GetPrometheusAlertRulesRuleAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleLabelInput)(nil)).Elem(), GetPrometheusAlertRulesRuleLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusAlertRulesRuleLabelArrayInput)(nil)).Elem(), GetPrometheusAlertRulesRuleLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusMonitoringsPrometheusMonitoringInput)(nil)).Elem(), GetPrometheusMonitoringsPrometheusMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusMonitoringsPrometheusMonitoringArrayInput)(nil)).Elem(), GetPrometheusMonitoringsPrometheusMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusPrometheiInput)(nil)).Elem(), GetPrometheusPrometheiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrometheusPrometheiArrayInput)(nil)).Elem(), GetPrometheusPrometheiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteWritesRemoteWriteInput)(nil)).Elem(), GetRemoteWritesRemoteWriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteWritesRemoteWriteArrayInput)(nil)).Elem(), GetRemoteWritesRemoteWriteArray{})
	pulumi.RegisterOutputType(DispatchRuleGroupRuleOutput{})
	pulumi.RegisterOutputType(DispatchRuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridArrayOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput{})
	pulumi.RegisterOutputType(DispatchRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput{})
	pulumi.RegisterOutputType(DispatchRuleNotifyRuleOutput{})
	pulumi.RegisterOutputType(DispatchRuleNotifyRuleArrayOutput{})
	pulumi.RegisterOutputType(DispatchRuleNotifyRuleNotifyObjectOutput{})
	pulumi.RegisterOutputType(DispatchRuleNotifyRuleNotifyObjectArrayOutput{})
	pulumi.RegisterOutputType(PrometheusAlertRuleAnnotationOutput{})
	pulumi.RegisterOutputType(PrometheusAlertRuleAnnotationArrayOutput{})
	pulumi.RegisterOutputType(PrometheusAlertRuleLabelOutput{})
	pulumi.RegisterOutputType(PrometheusAlertRuleLabelArrayOutput{})
	pulumi.RegisterOutputType(SyntheticTaskAvailableAssertionOutput{})
	pulumi.RegisterOutputType(SyntheticTaskAvailableAssertionArrayOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingCustomHostOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingCustomHostPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingCustomHostHostOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCommonSettingCustomHostHostArrayOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCustomPeriodOutput{})
	pulumi.RegisterOutputType(SyntheticTaskCustomPeriodPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorArrayOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfApiHttpOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfApiHttpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfApiHttpRequestBodyOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfApiHttpRequestBodyPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfFileDownloadOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfFileDownloadPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetDnsOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetDnsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetIcmpOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetIcmpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetTcpOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfNetTcpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfStreamOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfStreamPtrOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfWebsiteOutput{})
	pulumi.RegisterOutputType(SyntheticTaskMonitorConfWebsitePtrOutput{})
	pulumi.RegisterOutputType(GetAlertContactGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetAlertContactGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetAlertContactsContactOutput{})
	pulumi.RegisterOutputType(GetAlertContactsContactArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleGroupRuleOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleLabelMatchExpressionGridLabelMatchExpressionGroupLabelMatchExpressionArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleNotifyRuleOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleNotifyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleNotifyRuleNotifyObjectOutput{})
	pulumi.RegisterOutputType(GetDispatchRulesRuleNotifyRuleNotifyObjectArrayOutput{})
	pulumi.RegisterOutputType(GetIntegrationExportersIntegrationExporterOutput{})
	pulumi.RegisterOutputType(GetIntegrationExportersIntegrationExporterArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheisPrometheiOutput{})
	pulumi.RegisterOutputType(GetPrometheisPrometheiArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleAnnotationOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleLabelOutput{})
	pulumi.RegisterOutputType(GetPrometheusAlertRulesRuleLabelArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheusMonitoringsPrometheusMonitoringOutput{})
	pulumi.RegisterOutputType(GetPrometheusMonitoringsPrometheusMonitoringArrayOutput{})
	pulumi.RegisterOutputType(GetPrometheusPrometheiOutput{})
	pulumi.RegisterOutputType(GetPrometheusPrometheiArrayOutput{})
	pulumi.RegisterOutputType(GetRemoteWritesRemoteWriteOutput{})
	pulumi.RegisterOutputType(GetRemoteWritesRemoteWriteArrayOutput{})
}
