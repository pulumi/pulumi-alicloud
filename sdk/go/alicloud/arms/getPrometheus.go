// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Arms Prometheus of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.214.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("default-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId: pulumi.StringRef(defaultNetworks.Ids[0]),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultResourceGroups, err := resourcemanager.GetResourceGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: *pulumi.String(defaultNetworks.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			defaultPrometheus, err := arms.NewPrometheus(ctx, "defaultPrometheus", &arms.PrometheusArgs{
//				ClusterType:       pulumi.String("ecs"),
//				GrafanaInstanceId: pulumi.String("free"),
//				VpcId:             *pulumi.String(defaultNetworks.Ids[0]),
//				VswitchId:         *pulumi.String(defaultSwitches.Ids[0]),
//				SecurityGroupId:   defaultSecurityGroup.ID(),
//				ClusterName:       pulumi.String(fmt.Sprintf("%v-%v", name, defaultNetworks.Ids[0])),
//				ResourceGroupId:   *pulumi.String(defaultResourceGroups.Groups[1].Id),
//				Tags: pulumi.Map{
//					"Created": pulumi.Any("TF"),
//					"For":     pulumi.Any("Prometheus"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			nameRegex := arms.LookupPrometheusOutput(ctx, arms.GetPrometheusOutputArgs{
//				NameRegex: defaultPrometheus.ClusterName,
//			}, nil)
//			ctx.Export("armsPrometheusId", nameRegex.ApplyT(func(nameRegex arms.GetPrometheusResult) (*string, error) {
//				return &nameRegex.Prometheis[0].Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func LookupPrometheus(ctx *pulumi.Context, args *LookupPrometheusArgs, opts ...pulumi.InvokeOption) (*LookupPrometheusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPrometheusResult
	err := ctx.Invoke("alicloud:arms/getPrometheus:getPrometheus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrometheus.
type LookupPrometheusArgs struct {
	// Whether to query details about the instance.
	EnableDetails *bool `pulumi:"enableDetails"`
	// A list of Prometheus IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by Prometheus name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// A collection of values returned by getPrometheus.
type LookupPrometheusResult struct {
	EnableDetails *bool `pulumi:"enableDetails"`
	// The provider-assigned unique ID for this managed resource.
	Id        string   `pulumi:"id"`
	Ids       []string `pulumi:"ids"`
	NameRegex *string  `pulumi:"nameRegex"`
	// A list of Prometheus names.
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	// A list of Prometheus. Each element contains the following attributes:
	Prometheis []GetPrometheusPromethei `pulumi:"prometheis"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the Prometheus.
	Tags map[string]interface{} `pulumi:"tags"`
}

func LookupPrometheusOutput(ctx *pulumi.Context, args LookupPrometheusOutputArgs, opts ...pulumi.InvokeOption) LookupPrometheusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPrometheusResult, error) {
			args := v.(LookupPrometheusArgs)
			r, err := LookupPrometheus(ctx, &args, opts...)
			var s LookupPrometheusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPrometheusResultOutput)
}

// A collection of arguments for invoking getPrometheus.
type LookupPrometheusOutputArgs struct {
	// Whether to query details about the instance.
	EnableDetails pulumi.BoolPtrInput `pulumi:"enableDetails"`
	// A list of Prometheus IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by Prometheus name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput `pulumi:"resourceGroupId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (LookupPrometheusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrometheusArgs)(nil)).Elem()
}

// A collection of values returned by getPrometheus.
type LookupPrometheusResultOutput struct{ *pulumi.OutputState }

func (LookupPrometheusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrometheusResult)(nil)).Elem()
}

func (o LookupPrometheusResultOutput) ToLookupPrometheusResultOutput() LookupPrometheusResultOutput {
	return o
}

func (o LookupPrometheusResultOutput) ToLookupPrometheusResultOutputWithContext(ctx context.Context) LookupPrometheusResultOutput {
	return o
}

func (o LookupPrometheusResultOutput) EnableDetails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPrometheusResult) *bool { return v.EnableDetails }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPrometheusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPrometheusResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPrometheusResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPrometheusResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o LookupPrometheusResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of Prometheus names.
func (o LookupPrometheusResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPrometheusResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o LookupPrometheusResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// A list of Prometheus. Each element contains the following attributes:
func (o LookupPrometheusResultOutput) Prometheis() GetPrometheusPrometheiArrayOutput {
	return o.ApplyT(func(v LookupPrometheusResult) []GetPrometheusPromethei { return v.Prometheis }).(GetPrometheusPrometheiArrayOutput)
}

// The ID of the resource group.
func (o LookupPrometheusResultOutput) ResourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrometheusResult) *string { return v.ResourceGroupId }).(pulumi.StringPtrOutput)
}

// The tag of the Prometheus.
func (o LookupPrometheusResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupPrometheusResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrometheusResultOutput{})
}
