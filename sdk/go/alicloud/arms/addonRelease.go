// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Addon Release resource. Release package of observability addon.
//
// For information about ARMS Addon Release and how to use it, see [What is Addon Release](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-installaddon).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/arms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Max: 99999,
// Min: 10000,
// })
// if err != nil {
// return err
// }
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// enhanced, err := vpc.GetEnhancedNatAvailableZones(ctx, &vpc.GetEnhancedNatAvailableZonesArgs{
// }, nil);
// if err != nil {
// return err
// }
// vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
// Description: pulumi.String(name),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// VpcName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// vswitch, err := vpc.NewSwitch(ctx, "vswitch", &vpc.SwitchArgs{
// Description: pulumi.String(name),
// VpcId: vpc.ID(),
// VswitchName: pulumi.String(name),
// ZoneId: pulumi.String(enhanced.Zones[0].ZoneId),
// CidrBlock: pulumi.String(vpc.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
// return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
// Input: cidrBlock,
// Newbits: 8,
// Netnum: 8,
// }, nil))), nil
// }).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
// return invoke.Result, nil
// }).(pulumi.StringPtrOutput)),
// })
// if err != nil {
// return err
// }
// _, err = ecs.NewSnapshotPolicy(ctx, "default", &ecs.SnapshotPolicyArgs{
// Name: pulumi.String(name),
// RepeatWeekdays: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("2"),
// pulumi.String("3"),
// },
// RetentionDays: pulumi.Int(-1),
// TimePoints: pulumi.StringArray{
// pulumi.String("1"),
// pulumi.String("22"),
// pulumi.String("23"),
// },
// })
// if err != nil {
// return err
// }
// _default := vswitch.ZoneId.ApplyT(func(zoneId string) (ecs.GetInstanceTypesResult, error) {
// return ecs.GetInstanceTypesResult(interface{}(ecs.GetInstanceTypesOutput(ctx, ecs.GetInstanceTypesOutputArgs{
// AvailabilityZone: zoneId,
// CpuCoreCount: 2,
// MemorySize: 4,
// KubernetesNodeRole: "Worker",
// InstanceTypeFamily: "ecs.sn1ne",
// }, nil))), nil
// }).(ecs.GetInstanceTypesResultOutput)
// defaultManagedKubernetes, err := cs.NewManagedKubernetes(ctx, "default", &cs.ManagedKubernetesArgs{
// Name: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// ClusterSpec: pulumi.String("ack.pro.small"),
// Version: pulumi.String("1.24.6-aliyun.1"),
// NewNatGateway: pulumi.Bool(true),
// NodeCidrMask: pulumi.Int(26),
// ProxyMode: pulumi.String("ipvs"),
// ServiceCidr: pulumi.String("172.23.0.0/16"),
// PodCidr: pulumi.String("10.95.0.0/16"),
// WorkerVswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// })
// if err != nil {
// return err
// }
// defaultKeyPair, err := ecs.NewKeyPair(ctx, "default", &ecs.KeyPairArgs{
// KeyPairName: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// defaultNodePool, err := cs.NewNodePool(ctx, "default", &cs.NodePoolArgs{
// NodePoolName: pulumi.String("desired_size"),
// ClusterId: defaultManagedKubernetes.ID(),
// VswitchIds: pulumi.StringArray{
// vswitch.ID(),
// },
// InstanceTypes: pulumi.StringArray{
// pulumi.String(_default.ApplyT(func(_default ecs.GetInstanceTypesResult) (*string, error) {
// return &default.InstanceTypes[0].Id, nil
// }).(pulumi.StringPtrOutput)),
// },
// SystemDiskCategory: pulumi.String("cloud_efficiency"),
// SystemDiskSize: pulumi.Int(40),
// KeyName: defaultKeyPair.KeyPairName,
// DesiredSize: pulumi.String("2"),
// })
// if err != nil {
// return err
// }
// defaultEnvironment, err := arms.NewEnvironment(ctx, "default", &arms.EnvironmentArgs{
// BindResourceId: defaultNodePool.ClusterId,
// EnvironmentSubType: pulumi.String("ManagedKubernetes"),
// EnvironmentType: pulumi.String("CS"),
// EnvironmentName: pulumi.Sprintf("terraform-example-%v", defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// tmpJSON0, err := json.Marshal(map[string]interface{}{
// "host": "mysql-service.default",
// "password": "roots",
// "port": 3306,
// "username": "root",
// })
// if err != nil {
// return err
// }
// json0 := string(tmpJSON0)
// _, err = arms.NewAddonRelease(ctx, "default", &arms.AddonReleaseArgs{
// AliyunLang: pulumi.String("zh"),
// AddonName: pulumi.String("mysql"),
// EnvironmentId: defaultEnvironment.ID(),
// AddonVersion: pulumi.String("0.0.1"),
// Values: pulumi.String(json0),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// ARMS Addon Release can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:arms/addonRelease:AddonRelease example <environment_id>:<addon_release_name>
// ```
type AddonRelease struct {
	pulumi.CustomResourceState

	// Addon Name.
	AddonName pulumi.StringOutput `pulumi:"addonName"`
	// The name of the resource.
	AddonReleaseName pulumi.StringOutput `pulumi:"addonReleaseName"`
	// Version number of Addon. Addon information can be obtained through ListAddons.
	AddonVersion pulumi.StringOutput `pulumi:"addonVersion"`
	// The installed locale.
	AliyunLang pulumi.StringOutput `pulumi:"aliyunLang"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Environment id.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
	Values pulumi.StringPtrOutput `pulumi:"values"`
}

// NewAddonRelease registers a new resource with the given unique name, arguments, and options.
func NewAddonRelease(ctx *pulumi.Context,
	name string, args *AddonReleaseArgs, opts ...pulumi.ResourceOption) (*AddonRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddonName == nil {
		return nil, errors.New("invalid value for required argument 'AddonName'")
	}
	if args.AddonVersion == nil {
		return nil, errors.New("invalid value for required argument 'AddonVersion'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AddonRelease
	err := ctx.RegisterResource("alicloud:arms/addonRelease:AddonRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddonRelease gets an existing AddonRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddonRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddonReleaseState, opts ...pulumi.ResourceOption) (*AddonRelease, error) {
	var resource AddonRelease
	err := ctx.ReadResource("alicloud:arms/addonRelease:AddonRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AddonRelease resources.
type addonReleaseState struct {
	// Addon Name.
	AddonName *string `pulumi:"addonName"`
	// The name of the resource.
	AddonReleaseName *string `pulumi:"addonReleaseName"`
	// Version number of Addon. Addon information can be obtained through ListAddons.
	AddonVersion *string `pulumi:"addonVersion"`
	// The installed locale.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// Environment id.
	EnvironmentId *string `pulumi:"environmentId"`
	// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
	Values *string `pulumi:"values"`
}

type AddonReleaseState struct {
	// Addon Name.
	AddonName pulumi.StringPtrInput
	// The name of the resource.
	AddonReleaseName pulumi.StringPtrInput
	// Version number of Addon. Addon information can be obtained through ListAddons.
	AddonVersion pulumi.StringPtrInput
	// The installed locale.
	AliyunLang pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// Environment id.
	EnvironmentId pulumi.StringPtrInput
	// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
	Values pulumi.StringPtrInput
}

func (AddonReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*addonReleaseState)(nil)).Elem()
}

type addonReleaseArgs struct {
	// Addon Name.
	AddonName string `pulumi:"addonName"`
	// The name of the resource.
	AddonReleaseName *string `pulumi:"addonReleaseName"`
	// Version number of Addon. Addon information can be obtained through ListAddons.
	AddonVersion string `pulumi:"addonVersion"`
	// The installed locale.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Environment id.
	EnvironmentId string `pulumi:"environmentId"`
	// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
	Values *string `pulumi:"values"`
}

// The set of arguments for constructing a AddonRelease resource.
type AddonReleaseArgs struct {
	// Addon Name.
	AddonName pulumi.StringInput
	// The name of the resource.
	AddonReleaseName pulumi.StringPtrInput
	// Version number of Addon. Addon information can be obtained through ListAddons.
	AddonVersion pulumi.StringInput
	// The installed locale.
	AliyunLang pulumi.StringPtrInput
	// Environment id.
	EnvironmentId pulumi.StringInput
	// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
	Values pulumi.StringPtrInput
}

func (AddonReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addonReleaseArgs)(nil)).Elem()
}

type AddonReleaseInput interface {
	pulumi.Input

	ToAddonReleaseOutput() AddonReleaseOutput
	ToAddonReleaseOutputWithContext(ctx context.Context) AddonReleaseOutput
}

func (*AddonRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonRelease)(nil)).Elem()
}

func (i *AddonRelease) ToAddonReleaseOutput() AddonReleaseOutput {
	return i.ToAddonReleaseOutputWithContext(context.Background())
}

func (i *AddonRelease) ToAddonReleaseOutputWithContext(ctx context.Context) AddonReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonReleaseOutput)
}

// AddonReleaseArrayInput is an input type that accepts AddonReleaseArray and AddonReleaseArrayOutput values.
// You can construct a concrete instance of `AddonReleaseArrayInput` via:
//
//	AddonReleaseArray{ AddonReleaseArgs{...} }
type AddonReleaseArrayInput interface {
	pulumi.Input

	ToAddonReleaseArrayOutput() AddonReleaseArrayOutput
	ToAddonReleaseArrayOutputWithContext(context.Context) AddonReleaseArrayOutput
}

type AddonReleaseArray []AddonReleaseInput

func (AddonReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonRelease)(nil)).Elem()
}

func (i AddonReleaseArray) ToAddonReleaseArrayOutput() AddonReleaseArrayOutput {
	return i.ToAddonReleaseArrayOutputWithContext(context.Background())
}

func (i AddonReleaseArray) ToAddonReleaseArrayOutputWithContext(ctx context.Context) AddonReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonReleaseArrayOutput)
}

// AddonReleaseMapInput is an input type that accepts AddonReleaseMap and AddonReleaseMapOutput values.
// You can construct a concrete instance of `AddonReleaseMapInput` via:
//
//	AddonReleaseMap{ "key": AddonReleaseArgs{...} }
type AddonReleaseMapInput interface {
	pulumi.Input

	ToAddonReleaseMapOutput() AddonReleaseMapOutput
	ToAddonReleaseMapOutputWithContext(context.Context) AddonReleaseMapOutput
}

type AddonReleaseMap map[string]AddonReleaseInput

func (AddonReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonRelease)(nil)).Elem()
}

func (i AddonReleaseMap) ToAddonReleaseMapOutput() AddonReleaseMapOutput {
	return i.ToAddonReleaseMapOutputWithContext(context.Background())
}

func (i AddonReleaseMap) ToAddonReleaseMapOutputWithContext(ctx context.Context) AddonReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonReleaseMapOutput)
}

type AddonReleaseOutput struct{ *pulumi.OutputState }

func (AddonReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonRelease)(nil)).Elem()
}

func (o AddonReleaseOutput) ToAddonReleaseOutput() AddonReleaseOutput {
	return o
}

func (o AddonReleaseOutput) ToAddonReleaseOutputWithContext(ctx context.Context) AddonReleaseOutput {
	return o
}

// Addon Name.
func (o AddonReleaseOutput) AddonName() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.AddonName }).(pulumi.StringOutput)
}

// The name of the resource.
func (o AddonReleaseOutput) AddonReleaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.AddonReleaseName }).(pulumi.StringOutput)
}

// Version number of Addon. Addon information can be obtained through ListAddons.
func (o AddonReleaseOutput) AddonVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.AddonVersion }).(pulumi.StringOutput)
}

// The installed locale.
func (o AddonReleaseOutput) AliyunLang() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.AliyunLang }).(pulumi.StringOutput)
}

// Creation time.
func (o AddonReleaseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Environment id.
func (o AddonReleaseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Configuration information for installing Addon. Obtain the configuration template from ListAddonSchema, for example, {"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}.
func (o AddonReleaseOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonRelease) pulumi.StringPtrOutput { return v.Values }).(pulumi.StringPtrOutput)
}

type AddonReleaseArrayOutput struct{ *pulumi.OutputState }

func (AddonReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonRelease)(nil)).Elem()
}

func (o AddonReleaseArrayOutput) ToAddonReleaseArrayOutput() AddonReleaseArrayOutput {
	return o
}

func (o AddonReleaseArrayOutput) ToAddonReleaseArrayOutputWithContext(ctx context.Context) AddonReleaseArrayOutput {
	return o
}

func (o AddonReleaseArrayOutput) Index(i pulumi.IntInput) AddonReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AddonRelease {
		return vs[0].([]*AddonRelease)[vs[1].(int)]
	}).(AddonReleaseOutput)
}

type AddonReleaseMapOutput struct{ *pulumi.OutputState }

func (AddonReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonRelease)(nil)).Elem()
}

func (o AddonReleaseMapOutput) ToAddonReleaseMapOutput() AddonReleaseMapOutput {
	return o
}

func (o AddonReleaseMapOutput) ToAddonReleaseMapOutputWithContext(ctx context.Context) AddonReleaseMapOutput {
	return o
}

func (o AddonReleaseMapOutput) MapIndex(k pulumi.StringInput) AddonReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AddonRelease {
		return vs[0].(map[string]*AddonRelease)[vs[1].(string)]
	}).(AddonReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonReleaseInput)(nil)).Elem(), &AddonRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonReleaseArrayInput)(nil)).Elem(), AddonReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonReleaseMapInput)(nil)).Elem(), AddonReleaseMap{})
	pulumi.RegisterOutputType(AddonReleaseOutput{})
	pulumi.RegisterOutputType(AddonReleaseArrayOutput{})
	pulumi.RegisterOutputType(AddonReleaseMapOutput{})
}
