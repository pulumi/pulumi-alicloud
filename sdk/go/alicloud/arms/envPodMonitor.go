// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ARMS Env Pod Monitor resource. PodMonitor for the arms environment.
//
// For information about ARMS Env Pod Monitor and how to use it, see [What is Env Pod Monitor](https://www.alibabacloud.com/help/en/arms/developer-reference/api-arms-2019-08-08-createenvpodmonitor).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Import
//
// ARMS Env Pod Monitor can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:arms/envPodMonitor:EnvPodMonitor example <environment_id>:<namespace>:<env_pod_monitor_name>
//
// ```
type EnvPodMonitor struct {
	pulumi.CustomResourceState

	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrOutput `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml pulumi.StringOutput `pulumi:"configYaml"`
	// The name of the resource.
	EnvPodMonitorName pulumi.StringOutput `pulumi:"envPodMonitorName"`
	// Environment id.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Resource namespace.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// PodMonitor status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEnvPodMonitor registers a new resource with the given unique name, arguments, and options.
func NewEnvPodMonitor(ctx *pulumi.Context,
	name string, args *EnvPodMonitorArgs, opts ...pulumi.ResourceOption) (*EnvPodMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigYaml == nil {
		return nil, errors.New("invalid value for required argument 'ConfigYaml'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvPodMonitor
	err := ctx.RegisterResource("alicloud:arms/envPodMonitor:EnvPodMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvPodMonitor gets an existing EnvPodMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvPodMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvPodMonitorState, opts ...pulumi.ResourceOption) (*EnvPodMonitor, error) {
	var resource EnvPodMonitor
	err := ctx.ReadResource("alicloud:arms/envPodMonitor:EnvPodMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvPodMonitor resources.
type envPodMonitorState struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml *string `pulumi:"configYaml"`
	// The name of the resource.
	EnvPodMonitorName *string `pulumi:"envPodMonitorName"`
	// Environment id.
	EnvironmentId *string `pulumi:"environmentId"`
	// Resource namespace.
	Namespace *string `pulumi:"namespace"`
	// PodMonitor status.
	Status *string `pulumi:"status"`
}

type EnvPodMonitorState struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// Yaml configuration string.
	ConfigYaml pulumi.StringPtrInput
	// The name of the resource.
	EnvPodMonitorName pulumi.StringPtrInput
	// Environment id.
	EnvironmentId pulumi.StringPtrInput
	// Resource namespace.
	Namespace pulumi.StringPtrInput
	// PodMonitor status.
	Status pulumi.StringPtrInput
}

func (EnvPodMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*envPodMonitorState)(nil)).Elem()
}

type envPodMonitorArgs struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang *string `pulumi:"aliyunLang"`
	// Yaml configuration string.
	ConfigYaml string `pulumi:"configYaml"`
	// Environment id.
	EnvironmentId string `pulumi:"environmentId"`
}

// The set of arguments for constructing a EnvPodMonitor resource.
type EnvPodMonitorArgs struct {
	// Language environment, default is Chinese zh | en.
	AliyunLang pulumi.StringPtrInput
	// Yaml configuration string.
	ConfigYaml pulumi.StringInput
	// Environment id.
	EnvironmentId pulumi.StringInput
}

func (EnvPodMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envPodMonitorArgs)(nil)).Elem()
}

type EnvPodMonitorInput interface {
	pulumi.Input

	ToEnvPodMonitorOutput() EnvPodMonitorOutput
	ToEnvPodMonitorOutputWithContext(ctx context.Context) EnvPodMonitorOutput
}

func (*EnvPodMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvPodMonitor)(nil)).Elem()
}

func (i *EnvPodMonitor) ToEnvPodMonitorOutput() EnvPodMonitorOutput {
	return i.ToEnvPodMonitorOutputWithContext(context.Background())
}

func (i *EnvPodMonitor) ToEnvPodMonitorOutputWithContext(ctx context.Context) EnvPodMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvPodMonitorOutput)
}

// EnvPodMonitorArrayInput is an input type that accepts EnvPodMonitorArray and EnvPodMonitorArrayOutput values.
// You can construct a concrete instance of `EnvPodMonitorArrayInput` via:
//
//	EnvPodMonitorArray{ EnvPodMonitorArgs{...} }
type EnvPodMonitorArrayInput interface {
	pulumi.Input

	ToEnvPodMonitorArrayOutput() EnvPodMonitorArrayOutput
	ToEnvPodMonitorArrayOutputWithContext(context.Context) EnvPodMonitorArrayOutput
}

type EnvPodMonitorArray []EnvPodMonitorInput

func (EnvPodMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvPodMonitor)(nil)).Elem()
}

func (i EnvPodMonitorArray) ToEnvPodMonitorArrayOutput() EnvPodMonitorArrayOutput {
	return i.ToEnvPodMonitorArrayOutputWithContext(context.Background())
}

func (i EnvPodMonitorArray) ToEnvPodMonitorArrayOutputWithContext(ctx context.Context) EnvPodMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvPodMonitorArrayOutput)
}

// EnvPodMonitorMapInput is an input type that accepts EnvPodMonitorMap and EnvPodMonitorMapOutput values.
// You can construct a concrete instance of `EnvPodMonitorMapInput` via:
//
//	EnvPodMonitorMap{ "key": EnvPodMonitorArgs{...} }
type EnvPodMonitorMapInput interface {
	pulumi.Input

	ToEnvPodMonitorMapOutput() EnvPodMonitorMapOutput
	ToEnvPodMonitorMapOutputWithContext(context.Context) EnvPodMonitorMapOutput
}

type EnvPodMonitorMap map[string]EnvPodMonitorInput

func (EnvPodMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvPodMonitor)(nil)).Elem()
}

func (i EnvPodMonitorMap) ToEnvPodMonitorMapOutput() EnvPodMonitorMapOutput {
	return i.ToEnvPodMonitorMapOutputWithContext(context.Background())
}

func (i EnvPodMonitorMap) ToEnvPodMonitorMapOutputWithContext(ctx context.Context) EnvPodMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvPodMonitorMapOutput)
}

type EnvPodMonitorOutput struct{ *pulumi.OutputState }

func (EnvPodMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvPodMonitor)(nil)).Elem()
}

func (o EnvPodMonitorOutput) ToEnvPodMonitorOutput() EnvPodMonitorOutput {
	return o
}

func (o EnvPodMonitorOutput) ToEnvPodMonitorOutputWithContext(ctx context.Context) EnvPodMonitorOutput {
	return o
}

// Language environment, default is Chinese zh | en.
func (o EnvPodMonitorOutput) AliyunLang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringPtrOutput { return v.AliyunLang }).(pulumi.StringPtrOutput)
}

// Yaml configuration string.
func (o EnvPodMonitorOutput) ConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringOutput { return v.ConfigYaml }).(pulumi.StringOutput)
}

// The name of the resource.
func (o EnvPodMonitorOutput) EnvPodMonitorName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringOutput { return v.EnvPodMonitorName }).(pulumi.StringOutput)
}

// Environment id.
func (o EnvPodMonitorOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Resource namespace.
func (o EnvPodMonitorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// PodMonitor status.
func (o EnvPodMonitorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvPodMonitor) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EnvPodMonitorArrayOutput struct{ *pulumi.OutputState }

func (EnvPodMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvPodMonitor)(nil)).Elem()
}

func (o EnvPodMonitorArrayOutput) ToEnvPodMonitorArrayOutput() EnvPodMonitorArrayOutput {
	return o
}

func (o EnvPodMonitorArrayOutput) ToEnvPodMonitorArrayOutputWithContext(ctx context.Context) EnvPodMonitorArrayOutput {
	return o
}

func (o EnvPodMonitorArrayOutput) Index(i pulumi.IntInput) EnvPodMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvPodMonitor {
		return vs[0].([]*EnvPodMonitor)[vs[1].(int)]
	}).(EnvPodMonitorOutput)
}

type EnvPodMonitorMapOutput struct{ *pulumi.OutputState }

func (EnvPodMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvPodMonitor)(nil)).Elem()
}

func (o EnvPodMonitorMapOutput) ToEnvPodMonitorMapOutput() EnvPodMonitorMapOutput {
	return o
}

func (o EnvPodMonitorMapOutput) ToEnvPodMonitorMapOutputWithContext(ctx context.Context) EnvPodMonitorMapOutput {
	return o
}

func (o EnvPodMonitorMapOutput) MapIndex(k pulumi.StringInput) EnvPodMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvPodMonitor {
		return vs[0].(map[string]*EnvPodMonitor)[vs[1].(string)]
	}).(EnvPodMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvPodMonitorInput)(nil)).Elem(), &EnvPodMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvPodMonitorArrayInput)(nil)).Elem(), EnvPodMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvPodMonitorMapInput)(nil)).Elem(), EnvPodMonitorMap{})
	pulumi.RegisterOutputType(EnvPodMonitorOutput{})
	pulumi.RegisterOutputType(EnvPodMonitorArrayOutput{})
	pulumi.RegisterOutputType(EnvPodMonitorMapOutput{})
}
