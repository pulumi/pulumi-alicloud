// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a RabbitMQ (AMQP) Exchange resource.
//
// For information about RabbitMQ (AMQP) Exchange and how to use it, see [What is Exchange](https://www.alibabacloud.com/help/en/message-queue-for-rabbitmq/latest/createexchange).
//
// > **NOTE:** Available since v1.128.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/amqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			virtualHostName := "/"
//			if param := cfg.Get("virtualHostName"); param != "" {
//				virtualHostName = param
//			}
//			createInstance, err := amqp.NewInstance(ctx, "CreateInstance", &amqp.InstanceArgs{
//				RenewalDuration:     pulumi.Int(1),
//				MaxTps:              pulumi.String("3000"),
//				PeriodCycle:         pulumi.String("Month"),
//				MaxConnections:      pulumi.Int(2000),
//				SupportEip:          pulumi.Bool(true),
//				AutoRenew:           pulumi.Bool(false),
//				RenewalStatus:       pulumi.String("AutoRenewal"),
//				Period:              pulumi.Int(12),
//				InstanceName:        pulumi.String(name),
//				SupportTracing:      pulumi.Bool(false),
//				PaymentType:         pulumi.String("Subscription"),
//				RenewalDurationUnit: pulumi.String("Month"),
//				InstanceType:        pulumi.String("enterprise"),
//				QueueCapacity:       pulumi.String("200"),
//				MaxEipTps:           pulumi.String("128"),
//				StorageSize:         pulumi.String("0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = amqp.NewExchange(ctx, "default", &amqp.ExchangeArgs{
//				VirtualHostName:   pulumi.String(virtualHostName),
//				InstanceId:        createInstance.ID(),
//				Internal:          pulumi.Bool(true),
//				AutoDeleteState:   pulumi.Bool(false),
//				ExchangeName:      pulumi.String(name),
//				ExchangeType:      pulumi.String("X_CONSISTENT_HASH"),
//				AlternateExchange: pulumi.String("bakExchange"),
//				XDelayedType:      pulumi.String("DIRECT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RabbitMQ (AMQP) Exchange can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:amqp/exchange:Exchange example <instance_id>:<virtual_host_name>:<exchange_name>
// ```
type Exchange struct {
	pulumi.CustomResourceState

	// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
	AlternateExchange pulumi.StringPtrOutput `pulumi:"alternateExchange"`
	// Specifies whether to automatically delete the exchange. Valid values:
	AutoDeleteState pulumi.BoolOutput `pulumi:"autoDeleteState"`
	// CreateTime
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// The name of the exchange that you want to create. The exchange name must meet the following conventions:
	//
	// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
	// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
	ExchangeName pulumi.StringOutput `pulumi:"exchangeName"`
	// The Exchange type. Value:
	// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
	// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
	// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
	// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
	// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
	// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
	ExchangeType pulumi.StringOutput `pulumi:"exchangeType"`
	// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether the exchange is an internal exchange. Valid values:
	Internal pulumi.BoolOutput `pulumi:"internal"`
	// The name of the vhost to which the exchange that you want to create belongs.
	VirtualHostName pulumi.StringOutput `pulumi:"virtualHostName"`
	// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
	XDelayedType pulumi.StringPtrOutput `pulumi:"xDelayedType"`
}

// NewExchange registers a new resource with the given unique name, arguments, and options.
func NewExchange(ctx *pulumi.Context,
	name string, args *ExchangeArgs, opts ...pulumi.ResourceOption) (*Exchange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoDeleteState == nil {
		return nil, errors.New("invalid value for required argument 'AutoDeleteState'")
	}
	if args.ExchangeName == nil {
		return nil, errors.New("invalid value for required argument 'ExchangeName'")
	}
	if args.ExchangeType == nil {
		return nil, errors.New("invalid value for required argument 'ExchangeType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Internal == nil {
		return nil, errors.New("invalid value for required argument 'Internal'")
	}
	if args.VirtualHostName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualHostName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Exchange
	err := ctx.RegisterResource("alicloud:amqp/exchange:Exchange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchange gets an existing Exchange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangeState, opts ...pulumi.ResourceOption) (*Exchange, error) {
	var resource Exchange
	err := ctx.ReadResource("alicloud:amqp/exchange:Exchange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Exchange resources.
type exchangeState struct {
	// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
	AlternateExchange *string `pulumi:"alternateExchange"`
	// Specifies whether to automatically delete the exchange. Valid values:
	AutoDeleteState *bool `pulumi:"autoDeleteState"`
	// CreateTime
	CreateTime *int `pulumi:"createTime"`
	// The name of the exchange that you want to create. The exchange name must meet the following conventions:
	//
	// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
	// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
	ExchangeName *string `pulumi:"exchangeName"`
	// The Exchange type. Value:
	// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
	// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
	// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
	// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
	// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
	// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
	ExchangeType *string `pulumi:"exchangeType"`
	// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether the exchange is an internal exchange. Valid values:
	Internal *bool `pulumi:"internal"`
	// The name of the vhost to which the exchange that you want to create belongs.
	VirtualHostName *string `pulumi:"virtualHostName"`
	// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
	XDelayedType *string `pulumi:"xDelayedType"`
}

type ExchangeState struct {
	// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
	AlternateExchange pulumi.StringPtrInput
	// Specifies whether to automatically delete the exchange. Valid values:
	AutoDeleteState pulumi.BoolPtrInput
	// CreateTime
	CreateTime pulumi.IntPtrInput
	// The name of the exchange that you want to create. The exchange name must meet the following conventions:
	//
	// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
	// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
	ExchangeName pulumi.StringPtrInput
	// The Exchange type. Value:
	// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
	// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
	// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
	// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
	// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
	// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
	ExchangeType pulumi.StringPtrInput
	// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
	InstanceId pulumi.StringPtrInput
	// Specifies whether the exchange is an internal exchange. Valid values:
	Internal pulumi.BoolPtrInput
	// The name of the vhost to which the exchange that you want to create belongs.
	VirtualHostName pulumi.StringPtrInput
	// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
	XDelayedType pulumi.StringPtrInput
}

func (ExchangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeState)(nil)).Elem()
}

type exchangeArgs struct {
	// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
	AlternateExchange *string `pulumi:"alternateExchange"`
	// Specifies whether to automatically delete the exchange. Valid values:
	AutoDeleteState bool `pulumi:"autoDeleteState"`
	// The name of the exchange that you want to create. The exchange name must meet the following conventions:
	//
	// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
	// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
	ExchangeName string `pulumi:"exchangeName"`
	// The Exchange type. Value:
	// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
	// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
	// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
	// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
	// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
	// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
	ExchangeType string `pulumi:"exchangeType"`
	// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether the exchange is an internal exchange. Valid values:
	Internal bool `pulumi:"internal"`
	// The name of the vhost to which the exchange that you want to create belongs.
	VirtualHostName string `pulumi:"virtualHostName"`
	// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
	XDelayedType *string `pulumi:"xDelayedType"`
}

// The set of arguments for constructing a Exchange resource.
type ExchangeArgs struct {
	// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
	AlternateExchange pulumi.StringPtrInput
	// Specifies whether to automatically delete the exchange. Valid values:
	AutoDeleteState pulumi.BoolInput
	// The name of the exchange that you want to create. The exchange name must meet the following conventions:
	//
	// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
	// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
	ExchangeName pulumi.StringInput
	// The Exchange type. Value:
	// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
	// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
	// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
	// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
	// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
	// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
	ExchangeType pulumi.StringInput
	// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
	InstanceId pulumi.StringInput
	// Specifies whether the exchange is an internal exchange. Valid values:
	Internal pulumi.BoolInput
	// The name of the vhost to which the exchange that you want to create belongs.
	VirtualHostName pulumi.StringInput
	// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
	XDelayedType pulumi.StringPtrInput
}

func (ExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeArgs)(nil)).Elem()
}

type ExchangeInput interface {
	pulumi.Input

	ToExchangeOutput() ExchangeOutput
	ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput
}

func (*Exchange) ElementType() reflect.Type {
	return reflect.TypeOf((**Exchange)(nil)).Elem()
}

func (i *Exchange) ToExchangeOutput() ExchangeOutput {
	return i.ToExchangeOutputWithContext(context.Background())
}

func (i *Exchange) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeOutput)
}

// ExchangeArrayInput is an input type that accepts ExchangeArray and ExchangeArrayOutput values.
// You can construct a concrete instance of `ExchangeArrayInput` via:
//
//	ExchangeArray{ ExchangeArgs{...} }
type ExchangeArrayInput interface {
	pulumi.Input

	ToExchangeArrayOutput() ExchangeArrayOutput
	ToExchangeArrayOutputWithContext(context.Context) ExchangeArrayOutput
}

type ExchangeArray []ExchangeInput

func (ExchangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exchange)(nil)).Elem()
}

func (i ExchangeArray) ToExchangeArrayOutput() ExchangeArrayOutput {
	return i.ToExchangeArrayOutputWithContext(context.Background())
}

func (i ExchangeArray) ToExchangeArrayOutputWithContext(ctx context.Context) ExchangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeArrayOutput)
}

// ExchangeMapInput is an input type that accepts ExchangeMap and ExchangeMapOutput values.
// You can construct a concrete instance of `ExchangeMapInput` via:
//
//	ExchangeMap{ "key": ExchangeArgs{...} }
type ExchangeMapInput interface {
	pulumi.Input

	ToExchangeMapOutput() ExchangeMapOutput
	ToExchangeMapOutputWithContext(context.Context) ExchangeMapOutput
}

type ExchangeMap map[string]ExchangeInput

func (ExchangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exchange)(nil)).Elem()
}

func (i ExchangeMap) ToExchangeMapOutput() ExchangeMapOutput {
	return i.ToExchangeMapOutputWithContext(context.Background())
}

func (i ExchangeMap) ToExchangeMapOutputWithContext(ctx context.Context) ExchangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeMapOutput)
}

type ExchangeOutput struct{ *pulumi.OutputState }

func (ExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Exchange)(nil)).Elem()
}

func (o ExchangeOutput) ToExchangeOutput() ExchangeOutput {
	return o
}

func (o ExchangeOutput) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return o
}

// The alternate exchange. An alternate exchange is used to receive messages that fail to be routed to queues from the current exchange.
func (o ExchangeOutput) AlternateExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringPtrOutput { return v.AlternateExchange }).(pulumi.StringPtrOutput)
}

// Specifies whether to automatically delete the exchange. Valid values:
func (o ExchangeOutput) AutoDeleteState() pulumi.BoolOutput {
	return o.ApplyT(func(v *Exchange) pulumi.BoolOutput { return v.AutoDeleteState }).(pulumi.BoolOutput)
}

// CreateTime
func (o ExchangeOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Exchange) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// The name of the exchange that you want to create. The exchange name must meet the following conventions:
//
// - The name must be 1 to 255 characters in length, and can contain only letters, digits, hyphens (-), underscores (\_), periods (.), number signs (#), forward slashes (/), and at signs (@).
// - After the exchange is created, you cannot change its name. If you want to change its name, delete the exchange and create another exchange.
func (o ExchangeOutput) ExchangeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.ExchangeName }).(pulumi.StringOutput)
}

// The Exchange type. Value:
// - `DIRECT`: This type of Routing rule routes messages to a Queue whose Binding Key matches the Routing Key.
// - `TOPIC`: This type is similar to the DIRECT type. It uses Routing Key pattern matching and string comparison to route messages to the bound Queue.
// - `FANOUT`: This type of routing rule is very simple. It routes all messages sent to the Exchange to all queues bound to it, which is equivalent to the broadcast function.
// - `HEADERS`: This type is similar to the DIRECT type. Headers Exchange uses the Headers attribute instead of Routing Key for route matching. When binding Headers Exchange and Queue, the Key-value pair of the bound attribute is set. When sending a message to Headers Exchange, the Headers attribute Key-value pair of the message is set, and the message is routed to the bound Queue by comparing the Headers attribute Key-value pair with the bound attribute Key-value pair.
// - `X_delayed_message`: By declaring this type of Exchange, you can customize the Header attribute x-delay of the message to specify the delivery delay time period, in milliseconds. Messages will be delivered to the corresponding Queue after the time period defined in the x-delay according to the routing rules. The routing rule depends on the Exchange route type specified in the x-delayed-type.
// - `X_CONSISTENT_HASH`: The x-consistent-hash Exchange allows you to Hash the Routing Key or Header value and use the consistent hashing algorithm to route messages to different queues.
func (o ExchangeOutput) ExchangeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.ExchangeType }).(pulumi.StringOutput)
}

// The ID of the ApsaraMQ for RabbitMQ instance whose exchange you want to delete.
func (o ExchangeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether the exchange is an internal exchange. Valid values:
func (o ExchangeOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v *Exchange) pulumi.BoolOutput { return v.Internal }).(pulumi.BoolOutput)
}

// The name of the vhost to which the exchange that you want to create belongs.
func (o ExchangeOutput) VirtualHostName() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.VirtualHostName }).(pulumi.StringOutput)
}

// RabbitMQ supports the x-delayed-message Exchange. By declaring this type of Exchange, you can customize the x-delay header attribute to specify the delay period for message delivery, measured in milliseconds. The message will be delivered to the corresponding Queue after the period defined in x-delay. The routing rules are determined by the type of Exchange specified in x-delayed-type.
func (o ExchangeOutput) XDelayedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringPtrOutput { return v.XDelayedType }).(pulumi.StringPtrOutput)
}

type ExchangeArrayOutput struct{ *pulumi.OutputState }

func (ExchangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exchange)(nil)).Elem()
}

func (o ExchangeArrayOutput) ToExchangeArrayOutput() ExchangeArrayOutput {
	return o
}

func (o ExchangeArrayOutput) ToExchangeArrayOutputWithContext(ctx context.Context) ExchangeArrayOutput {
	return o
}

func (o ExchangeArrayOutput) Index(i pulumi.IntInput) ExchangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Exchange {
		return vs[0].([]*Exchange)[vs[1].(int)]
	}).(ExchangeOutput)
}

type ExchangeMapOutput struct{ *pulumi.OutputState }

func (ExchangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exchange)(nil)).Elem()
}

func (o ExchangeMapOutput) ToExchangeMapOutput() ExchangeMapOutput {
	return o
}

func (o ExchangeMapOutput) ToExchangeMapOutputWithContext(ctx context.Context) ExchangeMapOutput {
	return o
}

func (o ExchangeMapOutput) MapIndex(k pulumi.StringInput) ExchangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Exchange {
		return vs[0].(map[string]*Exchange)[vs[1].(string)]
	}).(ExchangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeInput)(nil)).Elem(), &Exchange{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeArrayInput)(nil)).Elem(), ExchangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeMapInput)(nil)).Elem(), ExchangeMap{})
	pulumi.RegisterOutputType(ExchangeOutput{})
	pulumi.RegisterOutputType(ExchangeArrayOutput{})
	pulumi.RegisterOutputType(ExchangeMapOutput{})
}
