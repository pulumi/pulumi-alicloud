// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Threat Detection Log Meta can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/logMeta:LogMeta example <id>
// ```
type LogMeta struct {
	pulumi.CustomResourceState

	// The name of the exclusive Logstore where logs are stored. Value:
	// - aegis-log-client: client event log
	// - aegis-log-crack: Brute Force log
	// - aegis-log-dns-query:DNS request log
	// - aegis-log-login: login log
	// - aegis-log-network: network connection log
	// - aegis-log-process: process startup log
	// - aegis-snapshot-host: account snapshot log
	// - aegis-snapshot-port: port snapshot log
	// - aegis-snapshot-process: process snapshot log
	// - local-dns: local DNS log
	// - sas-log-dns:DNS resolution log
	// - sas-log-http:WEB access log
	// - sas-log-session: Web session log
	// - sas-security-log: alarm log
	// - sas-vul-log: Vulnerability log
	// - sas-cspm-log: Cloud platform configuration check log
	// - sas-hc-log: baseline log
	// - sas-rasp-log: Application Protection Log
	// - sas-filedetect-log: file detection log
	// - sas-net-block: Network Defense Log
	LogMetaName pulumi.StringOutput `pulumi:"logMetaName"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewLogMeta registers a new resource with the given unique name, arguments, and options.
func NewLogMeta(ctx *pulumi.Context,
	name string, args *LogMetaArgs, opts ...pulumi.ResourceOption) (*LogMeta, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogMetaName == nil {
		return nil, errors.New("invalid value for required argument 'LogMetaName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogMeta
	err := ctx.RegisterResource("alicloud:threatdetection/logMeta:LogMeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogMeta gets an existing LogMeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogMeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogMetaState, opts ...pulumi.ResourceOption) (*LogMeta, error) {
	var resource LogMeta
	err := ctx.ReadResource("alicloud:threatdetection/logMeta:LogMeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogMeta resources.
type logMetaState struct {
	// The name of the exclusive Logstore where logs are stored. Value:
	// - aegis-log-client: client event log
	// - aegis-log-crack: Brute Force log
	// - aegis-log-dns-query:DNS request log
	// - aegis-log-login: login log
	// - aegis-log-network: network connection log
	// - aegis-log-process: process startup log
	// - aegis-snapshot-host: account snapshot log
	// - aegis-snapshot-port: port snapshot log
	// - aegis-snapshot-process: process snapshot log
	// - local-dns: local DNS log
	// - sas-log-dns:DNS resolution log
	// - sas-log-http:WEB access log
	// - sas-log-session: Web session log
	// - sas-security-log: alarm log
	// - sas-vul-log: Vulnerability log
	// - sas-cspm-log: Cloud platform configuration check log
	// - sas-hc-log: baseline log
	// - sas-rasp-log: Application Protection Log
	// - sas-filedetect-log: file detection log
	// - sas-net-block: Network Defense Log
	LogMetaName *string `pulumi:"logMetaName"`
	// The status of the resource
	Status *string `pulumi:"status"`
}

type LogMetaState struct {
	// The name of the exclusive Logstore where logs are stored. Value:
	// - aegis-log-client: client event log
	// - aegis-log-crack: Brute Force log
	// - aegis-log-dns-query:DNS request log
	// - aegis-log-login: login log
	// - aegis-log-network: network connection log
	// - aegis-log-process: process startup log
	// - aegis-snapshot-host: account snapshot log
	// - aegis-snapshot-port: port snapshot log
	// - aegis-snapshot-process: process snapshot log
	// - local-dns: local DNS log
	// - sas-log-dns:DNS resolution log
	// - sas-log-http:WEB access log
	// - sas-log-session: Web session log
	// - sas-security-log: alarm log
	// - sas-vul-log: Vulnerability log
	// - sas-cspm-log: Cloud platform configuration check log
	// - sas-hc-log: baseline log
	// - sas-rasp-log: Application Protection Log
	// - sas-filedetect-log: file detection log
	// - sas-net-block: Network Defense Log
	LogMetaName pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
}

func (LogMetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetaState)(nil)).Elem()
}

type logMetaArgs struct {
	// The name of the exclusive Logstore where logs are stored. Value:
	// - aegis-log-client: client event log
	// - aegis-log-crack: Brute Force log
	// - aegis-log-dns-query:DNS request log
	// - aegis-log-login: login log
	// - aegis-log-network: network connection log
	// - aegis-log-process: process startup log
	// - aegis-snapshot-host: account snapshot log
	// - aegis-snapshot-port: port snapshot log
	// - aegis-snapshot-process: process snapshot log
	// - local-dns: local DNS log
	// - sas-log-dns:DNS resolution log
	// - sas-log-http:WEB access log
	// - sas-log-session: Web session log
	// - sas-security-log: alarm log
	// - sas-vul-log: Vulnerability log
	// - sas-cspm-log: Cloud platform configuration check log
	// - sas-hc-log: baseline log
	// - sas-rasp-log: Application Protection Log
	// - sas-filedetect-log: file detection log
	// - sas-net-block: Network Defense Log
	LogMetaName string `pulumi:"logMetaName"`
	// The status of the resource
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a LogMeta resource.
type LogMetaArgs struct {
	// The name of the exclusive Logstore where logs are stored. Value:
	// - aegis-log-client: client event log
	// - aegis-log-crack: Brute Force log
	// - aegis-log-dns-query:DNS request log
	// - aegis-log-login: login log
	// - aegis-log-network: network connection log
	// - aegis-log-process: process startup log
	// - aegis-snapshot-host: account snapshot log
	// - aegis-snapshot-port: port snapshot log
	// - aegis-snapshot-process: process snapshot log
	// - local-dns: local DNS log
	// - sas-log-dns:DNS resolution log
	// - sas-log-http:WEB access log
	// - sas-log-session: Web session log
	// - sas-security-log: alarm log
	// - sas-vul-log: Vulnerability log
	// - sas-cspm-log: Cloud platform configuration check log
	// - sas-hc-log: baseline log
	// - sas-rasp-log: Application Protection Log
	// - sas-filedetect-log: file detection log
	// - sas-net-block: Network Defense Log
	LogMetaName pulumi.StringInput
	// The status of the resource
	Status pulumi.StringInput
}

func (LogMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetaArgs)(nil)).Elem()
}

type LogMetaInput interface {
	pulumi.Input

	ToLogMetaOutput() LogMetaOutput
	ToLogMetaOutputWithContext(ctx context.Context) LogMetaOutput
}

func (*LogMeta) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMeta)(nil)).Elem()
}

func (i *LogMeta) ToLogMetaOutput() LogMetaOutput {
	return i.ToLogMetaOutputWithContext(context.Background())
}

func (i *LogMeta) ToLogMetaOutputWithContext(ctx context.Context) LogMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetaOutput)
}

// LogMetaArrayInput is an input type that accepts LogMetaArray and LogMetaArrayOutput values.
// You can construct a concrete instance of `LogMetaArrayInput` via:
//
//	LogMetaArray{ LogMetaArgs{...} }
type LogMetaArrayInput interface {
	pulumi.Input

	ToLogMetaArrayOutput() LogMetaArrayOutput
	ToLogMetaArrayOutputWithContext(context.Context) LogMetaArrayOutput
}

type LogMetaArray []LogMetaInput

func (LogMetaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogMeta)(nil)).Elem()
}

func (i LogMetaArray) ToLogMetaArrayOutput() LogMetaArrayOutput {
	return i.ToLogMetaArrayOutputWithContext(context.Background())
}

func (i LogMetaArray) ToLogMetaArrayOutputWithContext(ctx context.Context) LogMetaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetaArrayOutput)
}

// LogMetaMapInput is an input type that accepts LogMetaMap and LogMetaMapOutput values.
// You can construct a concrete instance of `LogMetaMapInput` via:
//
//	LogMetaMap{ "key": LogMetaArgs{...} }
type LogMetaMapInput interface {
	pulumi.Input

	ToLogMetaMapOutput() LogMetaMapOutput
	ToLogMetaMapOutputWithContext(context.Context) LogMetaMapOutput
}

type LogMetaMap map[string]LogMetaInput

func (LogMetaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogMeta)(nil)).Elem()
}

func (i LogMetaMap) ToLogMetaMapOutput() LogMetaMapOutput {
	return i.ToLogMetaMapOutputWithContext(context.Background())
}

func (i LogMetaMap) ToLogMetaMapOutputWithContext(ctx context.Context) LogMetaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetaMapOutput)
}

type LogMetaOutput struct{ *pulumi.OutputState }

func (LogMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMeta)(nil)).Elem()
}

func (o LogMetaOutput) ToLogMetaOutput() LogMetaOutput {
	return o
}

func (o LogMetaOutput) ToLogMetaOutputWithContext(ctx context.Context) LogMetaOutput {
	return o
}

// The name of the exclusive Logstore where logs are stored. Value:
// - aegis-log-client: client event log
// - aegis-log-crack: Brute Force log
// - aegis-log-dns-query:DNS request log
// - aegis-log-login: login log
// - aegis-log-network: network connection log
// - aegis-log-process: process startup log
// - aegis-snapshot-host: account snapshot log
// - aegis-snapshot-port: port snapshot log
// - aegis-snapshot-process: process snapshot log
// - local-dns: local DNS log
// - sas-log-dns:DNS resolution log
// - sas-log-http:WEB access log
// - sas-log-session: Web session log
// - sas-security-log: alarm log
// - sas-vul-log: Vulnerability log
// - sas-cspm-log: Cloud platform configuration check log
// - sas-hc-log: baseline log
// - sas-rasp-log: Application Protection Log
// - sas-filedetect-log: file detection log
// - sas-net-block: Network Defense Log
func (o LogMetaOutput) LogMetaName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogMeta) pulumi.StringOutput { return v.LogMetaName }).(pulumi.StringOutput)
}

// The status of the resource
func (o LogMetaOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LogMeta) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type LogMetaArrayOutput struct{ *pulumi.OutputState }

func (LogMetaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogMeta)(nil)).Elem()
}

func (o LogMetaArrayOutput) ToLogMetaArrayOutput() LogMetaArrayOutput {
	return o
}

func (o LogMetaArrayOutput) ToLogMetaArrayOutputWithContext(ctx context.Context) LogMetaArrayOutput {
	return o
}

func (o LogMetaArrayOutput) Index(i pulumi.IntInput) LogMetaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogMeta {
		return vs[0].([]*LogMeta)[vs[1].(int)]
	}).(LogMetaOutput)
}

type LogMetaMapOutput struct{ *pulumi.OutputState }

func (LogMetaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogMeta)(nil)).Elem()
}

func (o LogMetaMapOutput) ToLogMetaMapOutput() LogMetaMapOutput {
	return o
}

func (o LogMetaMapOutput) ToLogMetaMapOutputWithContext(ctx context.Context) LogMetaMapOutput {
	return o
}

func (o LogMetaMapOutput) MapIndex(k pulumi.StringInput) LogMetaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogMeta {
		return vs[0].(map[string]*LogMeta)[vs[1].(string)]
	}).(LogMetaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetaInput)(nil)).Elem(), &LogMeta{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetaArrayInput)(nil)).Elem(), LogMetaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetaMapInput)(nil)).Elem(), LogMetaMap{})
	pulumi.RegisterOutputType(LogMetaOutput{})
	pulumi.RegisterOutputType(LogMetaArrayOutput{})
	pulumi.RegisterOutputType(LogMetaMapOutput{})
}
