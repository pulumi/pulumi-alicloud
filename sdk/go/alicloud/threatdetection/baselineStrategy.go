// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Baseline Strategy resource.
//
// For information about Threat Detection Baseline Strategy and how to use it, see [What is Baseline Strategy](https://www.alibabacloud.com/help/zh/security-center/latest/api-doc-sas-2018-12-03-api-doc-modifystrategy).
//
// > **NOTE:** Available in v1.195.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := threatdetection.NewBaselineStrategy(ctx, "default", &threatdetection.BaselineStrategyArgs{
//				BaselineStrategyName: pulumi.String("apispec"),
//				CustomType:           pulumi.String("custom"),
//				CycleDays:            pulumi.Int(3),
//				EndTime:              pulumi.String("08:00:00"),
//				RiskSubTypeName:      pulumi.String("hc_exploit_redis"),
//				StartTime:            pulumi.String("05:00:00"),
//				TargetType:           pulumi.String("groupId"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Baseline Strategy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:threatdetection/baselineStrategy:BaselineStrategy example <id>
//
// ```
type BaselineStrategy struct {
	pulumi.CustomResourceState

	// The ID of the baseline check policy.
	BaselineStrategyId pulumi.StringOutput `pulumi:"baselineStrategyId"`
	// Policy name.
	BaselineStrategyName pulumi.StringOutput `pulumi:"baselineStrategyName"`
	// The type of policy. Value:
	// * **common**: standard policy
	// * **custom**: custom policy
	CustomType pulumi.StringOutput `pulumi:"customType"`
	// The detection period of the policy.
	CycleDays pulumi.IntOutput `pulumi:"cycleDays"`
	// The detection period of the policy. Value:
	// * **0**: 0:00~06:00
	// * **6**: 6:00~12:00
	// * **12**: 12:00~18:00
	// * **18**: 18:00~24:00
	CycleStartTime pulumi.IntOutput `pulumi:"cycleStartTime"`
	// The baseline check policy execution end time.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Detection item subtype.
	RiskSubTypeName pulumi.StringOutput `pulumi:"riskSubTypeName"`
	// The baseline check policy start time.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The method of adding assets that take effect from the policy. Value:
	// * **groupId**: Added by asset group.
	// * **uuid**: Add by single asset.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewBaselineStrategy registers a new resource with the given unique name, arguments, and options.
func NewBaselineStrategy(ctx *pulumi.Context,
	name string, args *BaselineStrategyArgs, opts ...pulumi.ResourceOption) (*BaselineStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineStrategyName == nil {
		return nil, errors.New("invalid value for required argument 'BaselineStrategyName'")
	}
	if args.CustomType == nil {
		return nil, errors.New("invalid value for required argument 'CustomType'")
	}
	if args.CycleDays == nil {
		return nil, errors.New("invalid value for required argument 'CycleDays'")
	}
	if args.EndTime == nil {
		return nil, errors.New("invalid value for required argument 'EndTime'")
	}
	if args.RiskSubTypeName == nil {
		return nil, errors.New("invalid value for required argument 'RiskSubTypeName'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	var resource BaselineStrategy
	err := ctx.RegisterResource("alicloud:threatdetection/baselineStrategy:BaselineStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBaselineStrategy gets an existing BaselineStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBaselineStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaselineStrategyState, opts ...pulumi.ResourceOption) (*BaselineStrategy, error) {
	var resource BaselineStrategy
	err := ctx.ReadResource("alicloud:threatdetection/baselineStrategy:BaselineStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BaselineStrategy resources.
type baselineStrategyState struct {
	// The ID of the baseline check policy.
	BaselineStrategyId *string `pulumi:"baselineStrategyId"`
	// Policy name.
	BaselineStrategyName *string `pulumi:"baselineStrategyName"`
	// The type of policy. Value:
	// * **common**: standard policy
	// * **custom**: custom policy
	CustomType *string `pulumi:"customType"`
	// The detection period of the policy.
	CycleDays *int `pulumi:"cycleDays"`
	// The detection period of the policy. Value:
	// * **0**: 0:00~06:00
	// * **6**: 6:00~12:00
	// * **12**: 12:00~18:00
	// * **18**: 18:00~24:00
	CycleStartTime *int `pulumi:"cycleStartTime"`
	// The baseline check policy execution end time.
	EndTime *string `pulumi:"endTime"`
	// Detection item subtype.
	RiskSubTypeName *string `pulumi:"riskSubTypeName"`
	// The baseline check policy start time.
	StartTime *string `pulumi:"startTime"`
	// The method of adding assets that take effect from the policy. Value:
	// * **groupId**: Added by asset group.
	// * **uuid**: Add by single asset.
	TargetType *string `pulumi:"targetType"`
}

type BaselineStrategyState struct {
	// The ID of the baseline check policy.
	BaselineStrategyId pulumi.StringPtrInput
	// Policy name.
	BaselineStrategyName pulumi.StringPtrInput
	// The type of policy. Value:
	// * **common**: standard policy
	// * **custom**: custom policy
	CustomType pulumi.StringPtrInput
	// The detection period of the policy.
	CycleDays pulumi.IntPtrInput
	// The detection period of the policy. Value:
	// * **0**: 0:00~06:00
	// * **6**: 6:00~12:00
	// * **12**: 12:00~18:00
	// * **18**: 18:00~24:00
	CycleStartTime pulumi.IntPtrInput
	// The baseline check policy execution end time.
	EndTime pulumi.StringPtrInput
	// Detection item subtype.
	RiskSubTypeName pulumi.StringPtrInput
	// The baseline check policy start time.
	StartTime pulumi.StringPtrInput
	// The method of adding assets that take effect from the policy. Value:
	// * **groupId**: Added by asset group.
	// * **uuid**: Add by single asset.
	TargetType pulumi.StringPtrInput
}

func (BaselineStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*baselineStrategyState)(nil)).Elem()
}

type baselineStrategyArgs struct {
	// Policy name.
	BaselineStrategyName string `pulumi:"baselineStrategyName"`
	// The type of policy. Value:
	// * **common**: standard policy
	// * **custom**: custom policy
	CustomType string `pulumi:"customType"`
	// The detection period of the policy.
	CycleDays int `pulumi:"cycleDays"`
	// The detection period of the policy. Value:
	// * **0**: 0:00~06:00
	// * **6**: 6:00~12:00
	// * **12**: 12:00~18:00
	// * **18**: 18:00~24:00
	CycleStartTime *int `pulumi:"cycleStartTime"`
	// The baseline check policy execution end time.
	EndTime string `pulumi:"endTime"`
	// Detection item subtype.
	RiskSubTypeName string `pulumi:"riskSubTypeName"`
	// The baseline check policy start time.
	StartTime string `pulumi:"startTime"`
	// The method of adding assets that take effect from the policy. Value:
	// * **groupId**: Added by asset group.
	// * **uuid**: Add by single asset.
	TargetType string `pulumi:"targetType"`
}

// The set of arguments for constructing a BaselineStrategy resource.
type BaselineStrategyArgs struct {
	// Policy name.
	BaselineStrategyName pulumi.StringInput
	// The type of policy. Value:
	// * **common**: standard policy
	// * **custom**: custom policy
	CustomType pulumi.StringInput
	// The detection period of the policy.
	CycleDays pulumi.IntInput
	// The detection period of the policy. Value:
	// * **0**: 0:00~06:00
	// * **6**: 6:00~12:00
	// * **12**: 12:00~18:00
	// * **18**: 18:00~24:00
	CycleStartTime pulumi.IntPtrInput
	// The baseline check policy execution end time.
	EndTime pulumi.StringInput
	// Detection item subtype.
	RiskSubTypeName pulumi.StringInput
	// The baseline check policy start time.
	StartTime pulumi.StringInput
	// The method of adding assets that take effect from the policy. Value:
	// * **groupId**: Added by asset group.
	// * **uuid**: Add by single asset.
	TargetType pulumi.StringInput
}

func (BaselineStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baselineStrategyArgs)(nil)).Elem()
}

type BaselineStrategyInput interface {
	pulumi.Input

	ToBaselineStrategyOutput() BaselineStrategyOutput
	ToBaselineStrategyOutputWithContext(ctx context.Context) BaselineStrategyOutput
}

func (*BaselineStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**BaselineStrategy)(nil)).Elem()
}

func (i *BaselineStrategy) ToBaselineStrategyOutput() BaselineStrategyOutput {
	return i.ToBaselineStrategyOutputWithContext(context.Background())
}

func (i *BaselineStrategy) ToBaselineStrategyOutputWithContext(ctx context.Context) BaselineStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaselineStrategyOutput)
}

// BaselineStrategyArrayInput is an input type that accepts BaselineStrategyArray and BaselineStrategyArrayOutput values.
// You can construct a concrete instance of `BaselineStrategyArrayInput` via:
//
//	BaselineStrategyArray{ BaselineStrategyArgs{...} }
type BaselineStrategyArrayInput interface {
	pulumi.Input

	ToBaselineStrategyArrayOutput() BaselineStrategyArrayOutput
	ToBaselineStrategyArrayOutputWithContext(context.Context) BaselineStrategyArrayOutput
}

type BaselineStrategyArray []BaselineStrategyInput

func (BaselineStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BaselineStrategy)(nil)).Elem()
}

func (i BaselineStrategyArray) ToBaselineStrategyArrayOutput() BaselineStrategyArrayOutput {
	return i.ToBaselineStrategyArrayOutputWithContext(context.Background())
}

func (i BaselineStrategyArray) ToBaselineStrategyArrayOutputWithContext(ctx context.Context) BaselineStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaselineStrategyArrayOutput)
}

// BaselineStrategyMapInput is an input type that accepts BaselineStrategyMap and BaselineStrategyMapOutput values.
// You can construct a concrete instance of `BaselineStrategyMapInput` via:
//
//	BaselineStrategyMap{ "key": BaselineStrategyArgs{...} }
type BaselineStrategyMapInput interface {
	pulumi.Input

	ToBaselineStrategyMapOutput() BaselineStrategyMapOutput
	ToBaselineStrategyMapOutputWithContext(context.Context) BaselineStrategyMapOutput
}

type BaselineStrategyMap map[string]BaselineStrategyInput

func (BaselineStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BaselineStrategy)(nil)).Elem()
}

func (i BaselineStrategyMap) ToBaselineStrategyMapOutput() BaselineStrategyMapOutput {
	return i.ToBaselineStrategyMapOutputWithContext(context.Background())
}

func (i BaselineStrategyMap) ToBaselineStrategyMapOutputWithContext(ctx context.Context) BaselineStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaselineStrategyMapOutput)
}

type BaselineStrategyOutput struct{ *pulumi.OutputState }

func (BaselineStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaselineStrategy)(nil)).Elem()
}

func (o BaselineStrategyOutput) ToBaselineStrategyOutput() BaselineStrategyOutput {
	return o
}

func (o BaselineStrategyOutput) ToBaselineStrategyOutputWithContext(ctx context.Context) BaselineStrategyOutput {
	return o
}

// The ID of the baseline check policy.
func (o BaselineStrategyOutput) BaselineStrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.BaselineStrategyId }).(pulumi.StringOutput)
}

// Policy name.
func (o BaselineStrategyOutput) BaselineStrategyName() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.BaselineStrategyName }).(pulumi.StringOutput)
}

// The type of policy. Value:
// * **common**: standard policy
// * **custom**: custom policy
func (o BaselineStrategyOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.CustomType }).(pulumi.StringOutput)
}

// The detection period of the policy.
func (o BaselineStrategyOutput) CycleDays() pulumi.IntOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.IntOutput { return v.CycleDays }).(pulumi.IntOutput)
}

// The detection period of the policy. Value:
// * **0**: 0:00~06:00
// * **6**: 6:00~12:00
// * **12**: 12:00~18:00
// * **18**: 18:00~24:00
func (o BaselineStrategyOutput) CycleStartTime() pulumi.IntOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.IntOutput { return v.CycleStartTime }).(pulumi.IntOutput)
}

// The baseline check policy execution end time.
func (o BaselineStrategyOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Detection item subtype.
func (o BaselineStrategyOutput) RiskSubTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.RiskSubTypeName }).(pulumi.StringOutput)
}

// The baseline check policy start time.
func (o BaselineStrategyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The method of adding assets that take effect from the policy. Value:
// * **groupId**: Added by asset group.
// * **uuid**: Add by single asset.
func (o BaselineStrategyOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *BaselineStrategy) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

type BaselineStrategyArrayOutput struct{ *pulumi.OutputState }

func (BaselineStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BaselineStrategy)(nil)).Elem()
}

func (o BaselineStrategyArrayOutput) ToBaselineStrategyArrayOutput() BaselineStrategyArrayOutput {
	return o
}

func (o BaselineStrategyArrayOutput) ToBaselineStrategyArrayOutputWithContext(ctx context.Context) BaselineStrategyArrayOutput {
	return o
}

func (o BaselineStrategyArrayOutput) Index(i pulumi.IntInput) BaselineStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BaselineStrategy {
		return vs[0].([]*BaselineStrategy)[vs[1].(int)]
	}).(BaselineStrategyOutput)
}

type BaselineStrategyMapOutput struct{ *pulumi.OutputState }

func (BaselineStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BaselineStrategy)(nil)).Elem()
}

func (o BaselineStrategyMapOutput) ToBaselineStrategyMapOutput() BaselineStrategyMapOutput {
	return o
}

func (o BaselineStrategyMapOutput) ToBaselineStrategyMapOutputWithContext(ctx context.Context) BaselineStrategyMapOutput {
	return o
}

func (o BaselineStrategyMapOutput) MapIndex(k pulumi.StringInput) BaselineStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BaselineStrategy {
		return vs[0].(map[string]*BaselineStrategy)[vs[1].(string)]
	}).(BaselineStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BaselineStrategyInput)(nil)).Elem(), &BaselineStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaselineStrategyArrayInput)(nil)).Elem(), BaselineStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaselineStrategyMapInput)(nil)).Elem(), BaselineStrategyMap{})
	pulumi.RegisterOutputType(BaselineStrategyOutput{})
	pulumi.RegisterOutputType(BaselineStrategyArrayOutput{})
	pulumi.RegisterOutputType(BaselineStrategyMapOutput{})
}
