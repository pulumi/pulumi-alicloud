// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Threat Detection Asset Selection Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/assetSelectionConfig:AssetSelectionConfig example <id>
// ```
type AssetSelectionConfig struct {
	pulumi.CustomResourceState

	// The first ID of the resource
	BusinessType pulumi.StringOutput `pulumi:"businessType"`
	// The operating system type.
	Platform pulumi.StringPtrOutput `pulumi:"platform"`
	// Target object type.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewAssetSelectionConfig registers a new resource with the given unique name, arguments, and options.
func NewAssetSelectionConfig(ctx *pulumi.Context,
	name string, args *AssetSelectionConfigArgs, opts ...pulumi.ResourceOption) (*AssetSelectionConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessType == nil {
		return nil, errors.New("invalid value for required argument 'BusinessType'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssetSelectionConfig
	err := ctx.RegisterResource("alicloud:threatdetection/assetSelectionConfig:AssetSelectionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetSelectionConfig gets an existing AssetSelectionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetSelectionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetSelectionConfigState, opts ...pulumi.ResourceOption) (*AssetSelectionConfig, error) {
	var resource AssetSelectionConfig
	err := ctx.ReadResource("alicloud:threatdetection/assetSelectionConfig:AssetSelectionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetSelectionConfig resources.
type assetSelectionConfigState struct {
	// The first ID of the resource
	BusinessType *string `pulumi:"businessType"`
	// The operating system type.
	Platform *string `pulumi:"platform"`
	// Target object type.
	TargetType *string `pulumi:"targetType"`
}

type AssetSelectionConfigState struct {
	// The first ID of the resource
	BusinessType pulumi.StringPtrInput
	// The operating system type.
	Platform pulumi.StringPtrInput
	// Target object type.
	TargetType pulumi.StringPtrInput
}

func (AssetSelectionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetSelectionConfigState)(nil)).Elem()
}

type assetSelectionConfigArgs struct {
	// The first ID of the resource
	BusinessType string `pulumi:"businessType"`
	// The operating system type.
	Platform *string `pulumi:"platform"`
	// Target object type.
	TargetType string `pulumi:"targetType"`
}

// The set of arguments for constructing a AssetSelectionConfig resource.
type AssetSelectionConfigArgs struct {
	// The first ID of the resource
	BusinessType pulumi.StringInput
	// The operating system type.
	Platform pulumi.StringPtrInput
	// Target object type.
	TargetType pulumi.StringInput
}

func (AssetSelectionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetSelectionConfigArgs)(nil)).Elem()
}

type AssetSelectionConfigInput interface {
	pulumi.Input

	ToAssetSelectionConfigOutput() AssetSelectionConfigOutput
	ToAssetSelectionConfigOutputWithContext(ctx context.Context) AssetSelectionConfigOutput
}

func (*AssetSelectionConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetSelectionConfig)(nil)).Elem()
}

func (i *AssetSelectionConfig) ToAssetSelectionConfigOutput() AssetSelectionConfigOutput {
	return i.ToAssetSelectionConfigOutputWithContext(context.Background())
}

func (i *AssetSelectionConfig) ToAssetSelectionConfigOutputWithContext(ctx context.Context) AssetSelectionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetSelectionConfigOutput)
}

// AssetSelectionConfigArrayInput is an input type that accepts AssetSelectionConfigArray and AssetSelectionConfigArrayOutput values.
// You can construct a concrete instance of `AssetSelectionConfigArrayInput` via:
//
//	AssetSelectionConfigArray{ AssetSelectionConfigArgs{...} }
type AssetSelectionConfigArrayInput interface {
	pulumi.Input

	ToAssetSelectionConfigArrayOutput() AssetSelectionConfigArrayOutput
	ToAssetSelectionConfigArrayOutputWithContext(context.Context) AssetSelectionConfigArrayOutput
}

type AssetSelectionConfigArray []AssetSelectionConfigInput

func (AssetSelectionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetSelectionConfig)(nil)).Elem()
}

func (i AssetSelectionConfigArray) ToAssetSelectionConfigArrayOutput() AssetSelectionConfigArrayOutput {
	return i.ToAssetSelectionConfigArrayOutputWithContext(context.Background())
}

func (i AssetSelectionConfigArray) ToAssetSelectionConfigArrayOutputWithContext(ctx context.Context) AssetSelectionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetSelectionConfigArrayOutput)
}

// AssetSelectionConfigMapInput is an input type that accepts AssetSelectionConfigMap and AssetSelectionConfigMapOutput values.
// You can construct a concrete instance of `AssetSelectionConfigMapInput` via:
//
//	AssetSelectionConfigMap{ "key": AssetSelectionConfigArgs{...} }
type AssetSelectionConfigMapInput interface {
	pulumi.Input

	ToAssetSelectionConfigMapOutput() AssetSelectionConfigMapOutput
	ToAssetSelectionConfigMapOutputWithContext(context.Context) AssetSelectionConfigMapOutput
}

type AssetSelectionConfigMap map[string]AssetSelectionConfigInput

func (AssetSelectionConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetSelectionConfig)(nil)).Elem()
}

func (i AssetSelectionConfigMap) ToAssetSelectionConfigMapOutput() AssetSelectionConfigMapOutput {
	return i.ToAssetSelectionConfigMapOutputWithContext(context.Background())
}

func (i AssetSelectionConfigMap) ToAssetSelectionConfigMapOutputWithContext(ctx context.Context) AssetSelectionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetSelectionConfigMapOutput)
}

type AssetSelectionConfigOutput struct{ *pulumi.OutputState }

func (AssetSelectionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetSelectionConfig)(nil)).Elem()
}

func (o AssetSelectionConfigOutput) ToAssetSelectionConfigOutput() AssetSelectionConfigOutput {
	return o
}

func (o AssetSelectionConfigOutput) ToAssetSelectionConfigOutputWithContext(ctx context.Context) AssetSelectionConfigOutput {
	return o
}

// The first ID of the resource
func (o AssetSelectionConfigOutput) BusinessType() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetSelectionConfig) pulumi.StringOutput { return v.BusinessType }).(pulumi.StringOutput)
}

// The operating system type.
func (o AssetSelectionConfigOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetSelectionConfig) pulumi.StringPtrOutput { return v.Platform }).(pulumi.StringPtrOutput)
}

// Target object type.
func (o AssetSelectionConfigOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetSelectionConfig) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

type AssetSelectionConfigArrayOutput struct{ *pulumi.OutputState }

func (AssetSelectionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetSelectionConfig)(nil)).Elem()
}

func (o AssetSelectionConfigArrayOutput) ToAssetSelectionConfigArrayOutput() AssetSelectionConfigArrayOutput {
	return o
}

func (o AssetSelectionConfigArrayOutput) ToAssetSelectionConfigArrayOutputWithContext(ctx context.Context) AssetSelectionConfigArrayOutput {
	return o
}

func (o AssetSelectionConfigArrayOutput) Index(i pulumi.IntInput) AssetSelectionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetSelectionConfig {
		return vs[0].([]*AssetSelectionConfig)[vs[1].(int)]
	}).(AssetSelectionConfigOutput)
}

type AssetSelectionConfigMapOutput struct{ *pulumi.OutputState }

func (AssetSelectionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetSelectionConfig)(nil)).Elem()
}

func (o AssetSelectionConfigMapOutput) ToAssetSelectionConfigMapOutput() AssetSelectionConfigMapOutput {
	return o
}

func (o AssetSelectionConfigMapOutput) ToAssetSelectionConfigMapOutputWithContext(ctx context.Context) AssetSelectionConfigMapOutput {
	return o
}

func (o AssetSelectionConfigMapOutput) MapIndex(k pulumi.StringInput) AssetSelectionConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetSelectionConfig {
		return vs[0].(map[string]*AssetSelectionConfig)[vs[1].(string)]
	}).(AssetSelectionConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetSelectionConfigInput)(nil)).Elem(), &AssetSelectionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetSelectionConfigArrayInput)(nil)).Elem(), AssetSelectionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetSelectionConfigMapInput)(nil)).Elem(), AssetSelectionConfigMap{})
	pulumi.RegisterOutputType(AssetSelectionConfigOutput{})
	pulumi.RegisterOutputType(AssetSelectionConfigArrayOutput{})
	pulumi.RegisterOutputType(AssetSelectionConfigMapOutput{})
}
