// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Threat Detection Asset Bind can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/assetBind:AssetBind example <id>
// ```
type AssetBind struct {
	pulumi.CustomResourceState

	// Bind version.
	AuthVersion pulumi.IntPtrOutput `pulumi:"authVersion"`
	// The first ID of the resource
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewAssetBind registers a new resource with the given unique name, arguments, and options.
func NewAssetBind(ctx *pulumi.Context,
	name string, args *AssetBindArgs, opts ...pulumi.ResourceOption) (*AssetBind, error) {
	if args == nil {
		args = &AssetBindArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssetBind
	err := ctx.RegisterResource("alicloud:threatdetection/assetBind:AssetBind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetBind gets an existing AssetBind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetBind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetBindState, opts ...pulumi.ResourceOption) (*AssetBind, error) {
	var resource AssetBind
	err := ctx.ReadResource("alicloud:threatdetection/assetBind:AssetBind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetBind resources.
type assetBindState struct {
	// Bind version.
	AuthVersion *int `pulumi:"authVersion"`
	// The first ID of the resource
	Uuid *string `pulumi:"uuid"`
}

type AssetBindState struct {
	// Bind version.
	AuthVersion pulumi.IntPtrInput
	// The first ID of the resource
	Uuid pulumi.StringPtrInput
}

func (AssetBindState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetBindState)(nil)).Elem()
}

type assetBindArgs struct {
	// Bind version.
	AuthVersion *int `pulumi:"authVersion"`
	// The first ID of the resource
	Uuid *string `pulumi:"uuid"`
}

// The set of arguments for constructing a AssetBind resource.
type AssetBindArgs struct {
	// Bind version.
	AuthVersion pulumi.IntPtrInput
	// The first ID of the resource
	Uuid pulumi.StringPtrInput
}

func (AssetBindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetBindArgs)(nil)).Elem()
}

type AssetBindInput interface {
	pulumi.Input

	ToAssetBindOutput() AssetBindOutput
	ToAssetBindOutputWithContext(ctx context.Context) AssetBindOutput
}

func (*AssetBind) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetBind)(nil)).Elem()
}

func (i *AssetBind) ToAssetBindOutput() AssetBindOutput {
	return i.ToAssetBindOutputWithContext(context.Background())
}

func (i *AssetBind) ToAssetBindOutputWithContext(ctx context.Context) AssetBindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetBindOutput)
}

// AssetBindArrayInput is an input type that accepts AssetBindArray and AssetBindArrayOutput values.
// You can construct a concrete instance of `AssetBindArrayInput` via:
//
//	AssetBindArray{ AssetBindArgs{...} }
type AssetBindArrayInput interface {
	pulumi.Input

	ToAssetBindArrayOutput() AssetBindArrayOutput
	ToAssetBindArrayOutputWithContext(context.Context) AssetBindArrayOutput
}

type AssetBindArray []AssetBindInput

func (AssetBindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetBind)(nil)).Elem()
}

func (i AssetBindArray) ToAssetBindArrayOutput() AssetBindArrayOutput {
	return i.ToAssetBindArrayOutputWithContext(context.Background())
}

func (i AssetBindArray) ToAssetBindArrayOutputWithContext(ctx context.Context) AssetBindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetBindArrayOutput)
}

// AssetBindMapInput is an input type that accepts AssetBindMap and AssetBindMapOutput values.
// You can construct a concrete instance of `AssetBindMapInput` via:
//
//	AssetBindMap{ "key": AssetBindArgs{...} }
type AssetBindMapInput interface {
	pulumi.Input

	ToAssetBindMapOutput() AssetBindMapOutput
	ToAssetBindMapOutputWithContext(context.Context) AssetBindMapOutput
}

type AssetBindMap map[string]AssetBindInput

func (AssetBindMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetBind)(nil)).Elem()
}

func (i AssetBindMap) ToAssetBindMapOutput() AssetBindMapOutput {
	return i.ToAssetBindMapOutputWithContext(context.Background())
}

func (i AssetBindMap) ToAssetBindMapOutputWithContext(ctx context.Context) AssetBindMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetBindMapOutput)
}

type AssetBindOutput struct{ *pulumi.OutputState }

func (AssetBindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetBind)(nil)).Elem()
}

func (o AssetBindOutput) ToAssetBindOutput() AssetBindOutput {
	return o
}

func (o AssetBindOutput) ToAssetBindOutputWithContext(ctx context.Context) AssetBindOutput {
	return o
}

// Bind version.
func (o AssetBindOutput) AuthVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetBind) pulumi.IntPtrOutput { return v.AuthVersion }).(pulumi.IntPtrOutput)
}

// The first ID of the resource
func (o AssetBindOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetBind) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type AssetBindArrayOutput struct{ *pulumi.OutputState }

func (AssetBindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetBind)(nil)).Elem()
}

func (o AssetBindArrayOutput) ToAssetBindArrayOutput() AssetBindArrayOutput {
	return o
}

func (o AssetBindArrayOutput) ToAssetBindArrayOutputWithContext(ctx context.Context) AssetBindArrayOutput {
	return o
}

func (o AssetBindArrayOutput) Index(i pulumi.IntInput) AssetBindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetBind {
		return vs[0].([]*AssetBind)[vs[1].(int)]
	}).(AssetBindOutput)
}

type AssetBindMapOutput struct{ *pulumi.OutputState }

func (AssetBindMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetBind)(nil)).Elem()
}

func (o AssetBindMapOutput) ToAssetBindMapOutput() AssetBindMapOutput {
	return o
}

func (o AssetBindMapOutput) ToAssetBindMapOutputWithContext(ctx context.Context) AssetBindMapOutput {
	return o
}

func (o AssetBindMapOutput) MapIndex(k pulumi.StringInput) AssetBindOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetBind {
		return vs[0].(map[string]*AssetBind)[vs[1].(string)]
	}).(AssetBindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetBindInput)(nil)).Elem(), &AssetBind{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetBindArrayInput)(nil)).Elem(), AssetBindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetBindMapInput)(nil)).Elem(), AssetBindMap{})
	pulumi.RegisterOutputType(AssetBindOutput{})
	pulumi.RegisterOutputType(AssetBindArrayOutput{})
	pulumi.RegisterOutputType(AssetBindMapOutput{})
}
