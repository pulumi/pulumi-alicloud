// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Honey Pot resource.
//
// For information about Threat Detection Honey Pot and how to use it, see [What is Honey Pot](https://www.alibabacloud.com/help/en/security-center/latest/api-doc-sas-2018-12-03-api-doc-createhoneypot).
//
// > **NOTE:** Available in v1.195.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := threatdetection.NewHoneyPot(ctx, "default", &threatdetection.HoneyPotArgs{
//				HoneypotImageId:   pulumi.String("sha256:007095d6de9c7a343e9fc1f74a7efc9c5de9d5454789d2fa505a1b3fc623730c"),
//				HoneypotImageName: pulumi.String("ruoyi"),
//				HoneypotName:      pulumi.String("huangtiong-test"),
//				NodeId:            pulumi.String("a44e1ab3-6945-444c-889d-5bacee7056e8"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Honey Pot can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:threatdetection/honeyPot:HoneyPot example <id>
//
// ```
type HoneyPot struct {
	pulumi.CustomResourceState

	// Honeypot ID.
	HoneypotId pulumi.StringOutput `pulumi:"honeypotId"`
	// The image ID of the honeypot.
	HoneypotImageId pulumi.StringOutput `pulumi:"honeypotImageId"`
	// Honeypot mirror name.
	HoneypotImageName pulumi.StringOutput `pulumi:"honeypotImageName"`
	// Honeypot custom name.
	HoneypotName pulumi.StringOutput `pulumi:"honeypotName"`
	// The ID of the honeypot management node.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// The custom parameter ID of honeypot.
	PresetId pulumi.StringOutput `pulumi:"presetId"`
	// Honeypot status.
	States pulumi.StringArrayOutput `pulumi:"states"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewHoneyPot registers a new resource with the given unique name, arguments, and options.
func NewHoneyPot(ctx *pulumi.Context,
	name string, args *HoneyPotArgs, opts ...pulumi.ResourceOption) (*HoneyPot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HoneypotImageId == nil {
		return nil, errors.New("invalid value for required argument 'HoneypotImageId'")
	}
	if args.HoneypotImageName == nil {
		return nil, errors.New("invalid value for required argument 'HoneypotImageName'")
	}
	if args.HoneypotName == nil {
		return nil, errors.New("invalid value for required argument 'HoneypotName'")
	}
	if args.NodeId == nil {
		return nil, errors.New("invalid value for required argument 'NodeId'")
	}
	var resource HoneyPot
	err := ctx.RegisterResource("alicloud:threatdetection/honeyPot:HoneyPot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHoneyPot gets an existing HoneyPot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHoneyPot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HoneyPotState, opts ...pulumi.ResourceOption) (*HoneyPot, error) {
	var resource HoneyPot
	err := ctx.ReadResource("alicloud:threatdetection/honeyPot:HoneyPot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HoneyPot resources.
type honeyPotState struct {
	// Honeypot ID.
	HoneypotId *string `pulumi:"honeypotId"`
	// The image ID of the honeypot.
	HoneypotImageId *string `pulumi:"honeypotImageId"`
	// Honeypot mirror name.
	HoneypotImageName *string `pulumi:"honeypotImageName"`
	// Honeypot custom name.
	HoneypotName *string `pulumi:"honeypotName"`
	// The ID of the honeypot management node.
	NodeId *string `pulumi:"nodeId"`
	// The custom parameter ID of honeypot.
	PresetId *string `pulumi:"presetId"`
	// Honeypot status.
	States []string `pulumi:"states"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type HoneyPotState struct {
	// Honeypot ID.
	HoneypotId pulumi.StringPtrInput
	// The image ID of the honeypot.
	HoneypotImageId pulumi.StringPtrInput
	// Honeypot mirror name.
	HoneypotImageName pulumi.StringPtrInput
	// Honeypot custom name.
	HoneypotName pulumi.StringPtrInput
	// The ID of the honeypot management node.
	NodeId pulumi.StringPtrInput
	// The custom parameter ID of honeypot.
	PresetId pulumi.StringPtrInput
	// Honeypot status.
	States pulumi.StringArrayInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (HoneyPotState) ElementType() reflect.Type {
	return reflect.TypeOf((*honeyPotState)(nil)).Elem()
}

type honeyPotArgs struct {
	// The image ID of the honeypot.
	HoneypotImageId string `pulumi:"honeypotImageId"`
	// Honeypot mirror name.
	HoneypotImageName string `pulumi:"honeypotImageName"`
	// Honeypot custom name.
	HoneypotName string `pulumi:"honeypotName"`
	// The ID of the honeypot management node.
	NodeId string `pulumi:"nodeId"`
}

// The set of arguments for constructing a HoneyPot resource.
type HoneyPotArgs struct {
	// The image ID of the honeypot.
	HoneypotImageId pulumi.StringInput
	// Honeypot mirror name.
	HoneypotImageName pulumi.StringInput
	// Honeypot custom name.
	HoneypotName pulumi.StringInput
	// The ID of the honeypot management node.
	NodeId pulumi.StringInput
}

func (HoneyPotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*honeyPotArgs)(nil)).Elem()
}

type HoneyPotInput interface {
	pulumi.Input

	ToHoneyPotOutput() HoneyPotOutput
	ToHoneyPotOutputWithContext(ctx context.Context) HoneyPotOutput
}

func (*HoneyPot) ElementType() reflect.Type {
	return reflect.TypeOf((**HoneyPot)(nil)).Elem()
}

func (i *HoneyPot) ToHoneyPotOutput() HoneyPotOutput {
	return i.ToHoneyPotOutputWithContext(context.Background())
}

func (i *HoneyPot) ToHoneyPotOutputWithContext(ctx context.Context) HoneyPotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneyPotOutput)
}

// HoneyPotArrayInput is an input type that accepts HoneyPotArray and HoneyPotArrayOutput values.
// You can construct a concrete instance of `HoneyPotArrayInput` via:
//
//	HoneyPotArray{ HoneyPotArgs{...} }
type HoneyPotArrayInput interface {
	pulumi.Input

	ToHoneyPotArrayOutput() HoneyPotArrayOutput
	ToHoneyPotArrayOutputWithContext(context.Context) HoneyPotArrayOutput
}

type HoneyPotArray []HoneyPotInput

func (HoneyPotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoneyPot)(nil)).Elem()
}

func (i HoneyPotArray) ToHoneyPotArrayOutput() HoneyPotArrayOutput {
	return i.ToHoneyPotArrayOutputWithContext(context.Background())
}

func (i HoneyPotArray) ToHoneyPotArrayOutputWithContext(ctx context.Context) HoneyPotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneyPotArrayOutput)
}

// HoneyPotMapInput is an input type that accepts HoneyPotMap and HoneyPotMapOutput values.
// You can construct a concrete instance of `HoneyPotMapInput` via:
//
//	HoneyPotMap{ "key": HoneyPotArgs{...} }
type HoneyPotMapInput interface {
	pulumi.Input

	ToHoneyPotMapOutput() HoneyPotMapOutput
	ToHoneyPotMapOutputWithContext(context.Context) HoneyPotMapOutput
}

type HoneyPotMap map[string]HoneyPotInput

func (HoneyPotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoneyPot)(nil)).Elem()
}

func (i HoneyPotMap) ToHoneyPotMapOutput() HoneyPotMapOutput {
	return i.ToHoneyPotMapOutputWithContext(context.Background())
}

func (i HoneyPotMap) ToHoneyPotMapOutputWithContext(ctx context.Context) HoneyPotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneyPotMapOutput)
}

type HoneyPotOutput struct{ *pulumi.OutputState }

func (HoneyPotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HoneyPot)(nil)).Elem()
}

func (o HoneyPotOutput) ToHoneyPotOutput() HoneyPotOutput {
	return o
}

func (o HoneyPotOutput) ToHoneyPotOutputWithContext(ctx context.Context) HoneyPotOutput {
	return o
}

// Honeypot ID.
func (o HoneyPotOutput) HoneypotId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.HoneypotId }).(pulumi.StringOutput)
}

// The image ID of the honeypot.
func (o HoneyPotOutput) HoneypotImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.HoneypotImageId }).(pulumi.StringOutput)
}

// Honeypot mirror name.
func (o HoneyPotOutput) HoneypotImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.HoneypotImageName }).(pulumi.StringOutput)
}

// Honeypot custom name.
func (o HoneyPotOutput) HoneypotName() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.HoneypotName }).(pulumi.StringOutput)
}

// The ID of the honeypot management node.
func (o HoneyPotOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// The custom parameter ID of honeypot.
func (o HoneyPotOutput) PresetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.PresetId }).(pulumi.StringOutput)
}

// Honeypot status.
func (o HoneyPotOutput) States() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringArrayOutput { return v.States }).(pulumi.StringArrayOutput)
}

// The status of the resource.
func (o HoneyPotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneyPot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type HoneyPotArrayOutput struct{ *pulumi.OutputState }

func (HoneyPotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoneyPot)(nil)).Elem()
}

func (o HoneyPotArrayOutput) ToHoneyPotArrayOutput() HoneyPotArrayOutput {
	return o
}

func (o HoneyPotArrayOutput) ToHoneyPotArrayOutputWithContext(ctx context.Context) HoneyPotArrayOutput {
	return o
}

func (o HoneyPotArrayOutput) Index(i pulumi.IntInput) HoneyPotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HoneyPot {
		return vs[0].([]*HoneyPot)[vs[1].(int)]
	}).(HoneyPotOutput)
}

type HoneyPotMapOutput struct{ *pulumi.OutputState }

func (HoneyPotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoneyPot)(nil)).Elem()
}

func (o HoneyPotMapOutput) ToHoneyPotMapOutput() HoneyPotMapOutput {
	return o
}

func (o HoneyPotMapOutput) ToHoneyPotMapOutputWithContext(ctx context.Context) HoneyPotMapOutput {
	return o
}

func (o HoneyPotMapOutput) MapIndex(k pulumi.StringInput) HoneyPotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HoneyPot {
		return vs[0].(map[string]*HoneyPot)[vs[1].(string)]
	}).(HoneyPotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HoneyPotInput)(nil)).Elem(), &HoneyPot{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoneyPotArrayInput)(nil)).Elem(), HoneyPotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoneyPotMapInput)(nil)).Elem(), HoneyPotMap{})
	pulumi.RegisterOutputType(HoneyPotOutput{})
	pulumi.RegisterOutputType(HoneyPotArrayOutput{})
	pulumi.RegisterOutputType(HoneyPotMapOutput{})
}
