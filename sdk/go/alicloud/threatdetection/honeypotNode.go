// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Honeypot Node resource.
//
// For information about Threat Detection Honeypot Node and how to use it, see [What is Honeypot Node](https://www.alibabacloud.com/help/en/security-center/latest/api-doc-sas-2018-12-03-api-doc-createhoneypotnode).
//
// > **NOTE:** Available in v1.195.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := threatdetection.NewHoneypotNode(ctx, "default", &threatdetection.HoneypotNodeArgs{
//				AvailableProbeNum: pulumi.Int(20),
//				NodeName:          pulumi.String("apispec_test"),
//				SecurityGroupProbeIpLists: pulumi.StringArray{
//					pulumi.String("0.0.0.0/0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Honeypot Node can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:threatdetection/honeypotNode:HoneypotNode example <id>
//
// ```
type HoneypotNode struct {
	pulumi.CustomResourceState

	// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
	AllowHoneypotAccessInternet pulumi.BoolPtrOutput `pulumi:"allowHoneypotAccessInternet"`
	// Number of probes available.
	AvailableProbeNum pulumi.IntOutput `pulumi:"availableProbeNum"`
	// The creation time of the resource
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Management node name.
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// Release the collection of network segments.
	SecurityGroupProbeIpLists pulumi.StringArrayOutput `pulumi:"securityGroupProbeIpLists"`
	// The status of the resource
	Status pulumi.IntOutput `pulumi:"status"`
}

// NewHoneypotNode registers a new resource with the given unique name, arguments, and options.
func NewHoneypotNode(ctx *pulumi.Context,
	name string, args *HoneypotNodeArgs, opts ...pulumi.ResourceOption) (*HoneypotNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailableProbeNum == nil {
		return nil, errors.New("invalid value for required argument 'AvailableProbeNum'")
	}
	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	var resource HoneypotNode
	err := ctx.RegisterResource("alicloud:threatdetection/honeypotNode:HoneypotNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHoneypotNode gets an existing HoneypotNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHoneypotNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HoneypotNodeState, opts ...pulumi.ResourceOption) (*HoneypotNode, error) {
	var resource HoneypotNode
	err := ctx.ReadResource("alicloud:threatdetection/honeypotNode:HoneypotNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HoneypotNode resources.
type honeypotNodeState struct {
	// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
	AllowHoneypotAccessInternet *bool `pulumi:"allowHoneypotAccessInternet"`
	// Number of probes available.
	AvailableProbeNum *int `pulumi:"availableProbeNum"`
	// The creation time of the resource
	CreateTime *string `pulumi:"createTime"`
	// Management node name.
	NodeName *string `pulumi:"nodeName"`
	// Release the collection of network segments.
	SecurityGroupProbeIpLists []string `pulumi:"securityGroupProbeIpLists"`
	// The status of the resource
	Status *int `pulumi:"status"`
}

type HoneypotNodeState struct {
	// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
	AllowHoneypotAccessInternet pulumi.BoolPtrInput
	// Number of probes available.
	AvailableProbeNum pulumi.IntPtrInput
	// The creation time of the resource
	CreateTime pulumi.StringPtrInput
	// Management node name.
	NodeName pulumi.StringPtrInput
	// Release the collection of network segments.
	SecurityGroupProbeIpLists pulumi.StringArrayInput
	// The status of the resource
	Status pulumi.IntPtrInput
}

func (HoneypotNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*honeypotNodeState)(nil)).Elem()
}

type honeypotNodeArgs struct {
	// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
	AllowHoneypotAccessInternet *bool `pulumi:"allowHoneypotAccessInternet"`
	// Number of probes available.
	AvailableProbeNum int `pulumi:"availableProbeNum"`
	// Management node name.
	NodeName string `pulumi:"nodeName"`
	// Release the collection of network segments.
	SecurityGroupProbeIpLists []string `pulumi:"securityGroupProbeIpLists"`
}

// The set of arguments for constructing a HoneypotNode resource.
type HoneypotNodeArgs struct {
	// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
	AllowHoneypotAccessInternet pulumi.BoolPtrInput
	// Number of probes available.
	AvailableProbeNum pulumi.IntInput
	// Management node name.
	NodeName pulumi.StringInput
	// Release the collection of network segments.
	SecurityGroupProbeIpLists pulumi.StringArrayInput
}

func (HoneypotNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*honeypotNodeArgs)(nil)).Elem()
}

type HoneypotNodeInput interface {
	pulumi.Input

	ToHoneypotNodeOutput() HoneypotNodeOutput
	ToHoneypotNodeOutputWithContext(ctx context.Context) HoneypotNodeOutput
}

func (*HoneypotNode) ElementType() reflect.Type {
	return reflect.TypeOf((**HoneypotNode)(nil)).Elem()
}

func (i *HoneypotNode) ToHoneypotNodeOutput() HoneypotNodeOutput {
	return i.ToHoneypotNodeOutputWithContext(context.Background())
}

func (i *HoneypotNode) ToHoneypotNodeOutputWithContext(ctx context.Context) HoneypotNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneypotNodeOutput)
}

// HoneypotNodeArrayInput is an input type that accepts HoneypotNodeArray and HoneypotNodeArrayOutput values.
// You can construct a concrete instance of `HoneypotNodeArrayInput` via:
//
//	HoneypotNodeArray{ HoneypotNodeArgs{...} }
type HoneypotNodeArrayInput interface {
	pulumi.Input

	ToHoneypotNodeArrayOutput() HoneypotNodeArrayOutput
	ToHoneypotNodeArrayOutputWithContext(context.Context) HoneypotNodeArrayOutput
}

type HoneypotNodeArray []HoneypotNodeInput

func (HoneypotNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoneypotNode)(nil)).Elem()
}

func (i HoneypotNodeArray) ToHoneypotNodeArrayOutput() HoneypotNodeArrayOutput {
	return i.ToHoneypotNodeArrayOutputWithContext(context.Background())
}

func (i HoneypotNodeArray) ToHoneypotNodeArrayOutputWithContext(ctx context.Context) HoneypotNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneypotNodeArrayOutput)
}

// HoneypotNodeMapInput is an input type that accepts HoneypotNodeMap and HoneypotNodeMapOutput values.
// You can construct a concrete instance of `HoneypotNodeMapInput` via:
//
//	HoneypotNodeMap{ "key": HoneypotNodeArgs{...} }
type HoneypotNodeMapInput interface {
	pulumi.Input

	ToHoneypotNodeMapOutput() HoneypotNodeMapOutput
	ToHoneypotNodeMapOutputWithContext(context.Context) HoneypotNodeMapOutput
}

type HoneypotNodeMap map[string]HoneypotNodeInput

func (HoneypotNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoneypotNode)(nil)).Elem()
}

func (i HoneypotNodeMap) ToHoneypotNodeMapOutput() HoneypotNodeMapOutput {
	return i.ToHoneypotNodeMapOutputWithContext(context.Background())
}

func (i HoneypotNodeMap) ToHoneypotNodeMapOutputWithContext(ctx context.Context) HoneypotNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoneypotNodeMapOutput)
}

type HoneypotNodeOutput struct{ *pulumi.OutputState }

func (HoneypotNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HoneypotNode)(nil)).Elem()
}

func (o HoneypotNodeOutput) ToHoneypotNodeOutput() HoneypotNodeOutput {
	return o
}

func (o HoneypotNodeOutput) ToHoneypotNodeOutputWithContext(ctx context.Context) HoneypotNodeOutput {
	return o
}

// Whether to allow honeypot access to the external network. Value:-**true**: Allow-**false**: Disabled
func (o HoneypotNodeOutput) AllowHoneypotAccessInternet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.BoolPtrOutput { return v.AllowHoneypotAccessInternet }).(pulumi.BoolPtrOutput)
}

// Number of probes available.
func (o HoneypotNodeOutput) AvailableProbeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.IntOutput { return v.AvailableProbeNum }).(pulumi.IntOutput)
}

// The creation time of the resource
func (o HoneypotNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Management node name.
func (o HoneypotNodeOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

// Release the collection of network segments.
func (o HoneypotNodeOutput) SecurityGroupProbeIpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.StringArrayOutput { return v.SecurityGroupProbeIpLists }).(pulumi.StringArrayOutput)
}

// The status of the resource
func (o HoneypotNodeOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *HoneypotNode) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

type HoneypotNodeArrayOutput struct{ *pulumi.OutputState }

func (HoneypotNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoneypotNode)(nil)).Elem()
}

func (o HoneypotNodeArrayOutput) ToHoneypotNodeArrayOutput() HoneypotNodeArrayOutput {
	return o
}

func (o HoneypotNodeArrayOutput) ToHoneypotNodeArrayOutputWithContext(ctx context.Context) HoneypotNodeArrayOutput {
	return o
}

func (o HoneypotNodeArrayOutput) Index(i pulumi.IntInput) HoneypotNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HoneypotNode {
		return vs[0].([]*HoneypotNode)[vs[1].(int)]
	}).(HoneypotNodeOutput)
}

type HoneypotNodeMapOutput struct{ *pulumi.OutputState }

func (HoneypotNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoneypotNode)(nil)).Elem()
}

func (o HoneypotNodeMapOutput) ToHoneypotNodeMapOutput() HoneypotNodeMapOutput {
	return o
}

func (o HoneypotNodeMapOutput) ToHoneypotNodeMapOutputWithContext(ctx context.Context) HoneypotNodeMapOutput {
	return o
}

func (o HoneypotNodeMapOutput) MapIndex(k pulumi.StringInput) HoneypotNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HoneypotNode {
		return vs[0].(map[string]*HoneypotNode)[vs[1].(string)]
	}).(HoneypotNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HoneypotNodeInput)(nil)).Elem(), &HoneypotNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoneypotNodeArrayInput)(nil)).Elem(), HoneypotNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoneypotNodeMapInput)(nil)).Elem(), HoneypotNodeMap{})
	pulumi.RegisterOutputType(HoneypotNodeOutput{})
	pulumi.RegisterOutputType(HoneypotNodeArrayOutput{})
	pulumi.RegisterOutputType(HoneypotNodeMapOutput{})
}
