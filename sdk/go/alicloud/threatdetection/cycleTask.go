// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Cycle Task resource.
//
// Configure periodic tasks in Security Center.
//
// For information about Threat Detection Cycle Task and how to use it, see [What is Cycle Task](https://next.api.alibabacloud.com/document/Sas/2018-12-03/CreateCycleTask).
//
// > **NOTE:** Available since v1.253.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"targetInfo": []map[string]interface{}{
//					map[string]interface{}{
//						"type":   "groupId",
//						"name":   "TI HOST",
//						"target": 10597,
//					},
//					map[string]interface{}{
//						"type":   "groupId",
//						"name":   "expense HOST",
//						"target": 10597,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = threatdetection.NewCycleTask(ctx, "default", &threatdetection.CycleTaskArgs{
//				TargetEndTime:   pulumi.Int(6),
//				TaskType:        pulumi.String("VIRUS_VUL_SCHEDULE_SCAN"),
//				TargetStartTime: pulumi.Int(0),
//				Source:          pulumi.String("console_batch"),
//				TaskName:        pulumi.String("VIRUS_VUL_SCHEDULE_SCAN"),
//				FirstDateStr:    pulumi.Int(1650556800000),
//				PeriodUnit:      pulumi.String("day"),
//				IntervalPeriod:  pulumi.Int(7),
//				Param:           pulumi.String(json0),
//				Enable:          pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Cycle Task can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/cycleTask:CycleTask example <id>
// ```
type CycleTask struct {
	pulumi.CustomResourceState

	// Whether to enable. Value:
	Enable pulumi.IntOutput `pulumi:"enable"`
	// First execution time.
	FirstDateStr pulumi.IntOutput `pulumi:"firstDateStr"`
	// Interval period.
	IntervalPeriod pulumi.IntOutput `pulumi:"intervalPeriod"`
	// Extended information field.
	Param pulumi.StringPtrOutput `pulumi:"param"`
	// Unit of scan cycle, value:
	PeriodUnit pulumi.StringOutput `pulumi:"periodUnit"`
	// Added the source of the task.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// Task end time (hours).
	TargetEndTime pulumi.IntOutput `pulumi:"targetEndTime"`
	// Task start time (hours).
	TargetStartTime pulumi.IntOutput `pulumi:"targetStartTime"`
	// The task name.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskName pulumi.StringOutput `pulumi:"taskName"`
	// The task type.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskType pulumi.StringOutput `pulumi:"taskType"`
}

// NewCycleTask registers a new resource with the given unique name, arguments, and options.
func NewCycleTask(ctx *pulumi.Context,
	name string, args *CycleTaskArgs, opts ...pulumi.ResourceOption) (*CycleTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.FirstDateStr == nil {
		return nil, errors.New("invalid value for required argument 'FirstDateStr'")
	}
	if args.IntervalPeriod == nil {
		return nil, errors.New("invalid value for required argument 'IntervalPeriod'")
	}
	if args.PeriodUnit == nil {
		return nil, errors.New("invalid value for required argument 'PeriodUnit'")
	}
	if args.TargetEndTime == nil {
		return nil, errors.New("invalid value for required argument 'TargetEndTime'")
	}
	if args.TargetStartTime == nil {
		return nil, errors.New("invalid value for required argument 'TargetStartTime'")
	}
	if args.TaskName == nil {
		return nil, errors.New("invalid value for required argument 'TaskName'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CycleTask
	err := ctx.RegisterResource("alicloud:threatdetection/cycleTask:CycleTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCycleTask gets an existing CycleTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCycleTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CycleTaskState, opts ...pulumi.ResourceOption) (*CycleTask, error) {
	var resource CycleTask
	err := ctx.ReadResource("alicloud:threatdetection/cycleTask:CycleTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CycleTask resources.
type cycleTaskState struct {
	// Whether to enable. Value:
	Enable *int `pulumi:"enable"`
	// First execution time.
	FirstDateStr *int `pulumi:"firstDateStr"`
	// Interval period.
	IntervalPeriod *int `pulumi:"intervalPeriod"`
	// Extended information field.
	Param *string `pulumi:"param"`
	// Unit of scan cycle, value:
	PeriodUnit *string `pulumi:"periodUnit"`
	// Added the source of the task.
	Source *string `pulumi:"source"`
	// Task end time (hours).
	TargetEndTime *int `pulumi:"targetEndTime"`
	// Task start time (hours).
	TargetStartTime *int `pulumi:"targetStartTime"`
	// The task name.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskName *string `pulumi:"taskName"`
	// The task type.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskType *string `pulumi:"taskType"`
}

type CycleTaskState struct {
	// Whether to enable. Value:
	Enable pulumi.IntPtrInput
	// First execution time.
	FirstDateStr pulumi.IntPtrInput
	// Interval period.
	IntervalPeriod pulumi.IntPtrInput
	// Extended information field.
	Param pulumi.StringPtrInput
	// Unit of scan cycle, value:
	PeriodUnit pulumi.StringPtrInput
	// Added the source of the task.
	Source pulumi.StringPtrInput
	// Task end time (hours).
	TargetEndTime pulumi.IntPtrInput
	// Task start time (hours).
	TargetStartTime pulumi.IntPtrInput
	// The task name.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskName pulumi.StringPtrInput
	// The task type.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskType pulumi.StringPtrInput
}

func (CycleTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*cycleTaskState)(nil)).Elem()
}

type cycleTaskArgs struct {
	// Whether to enable. Value:
	Enable int `pulumi:"enable"`
	// First execution time.
	FirstDateStr int `pulumi:"firstDateStr"`
	// Interval period.
	IntervalPeriod int `pulumi:"intervalPeriod"`
	// Extended information field.
	Param *string `pulumi:"param"`
	// Unit of scan cycle, value:
	PeriodUnit string `pulumi:"periodUnit"`
	// Added the source of the task.
	Source *string `pulumi:"source"`
	// Task end time (hours).
	TargetEndTime int `pulumi:"targetEndTime"`
	// Task start time (hours).
	TargetStartTime int `pulumi:"targetStartTime"`
	// The task name.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskName string `pulumi:"taskName"`
	// The task type.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskType string `pulumi:"taskType"`
}

// The set of arguments for constructing a CycleTask resource.
type CycleTaskArgs struct {
	// Whether to enable. Value:
	Enable pulumi.IntInput
	// First execution time.
	FirstDateStr pulumi.IntInput
	// Interval period.
	IntervalPeriod pulumi.IntInput
	// Extended information field.
	Param pulumi.StringPtrInput
	// Unit of scan cycle, value:
	PeriodUnit pulumi.StringInput
	// Added the source of the task.
	Source pulumi.StringPtrInput
	// Task end time (hours).
	TargetEndTime pulumi.IntInput
	// Task start time (hours).
	TargetStartTime pulumi.IntInput
	// The task name.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskName pulumi.StringInput
	// The task type.
	// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
	// - **IMAGE_SCAN**: Image scan.
	// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
	TaskType pulumi.StringInput
}

func (CycleTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cycleTaskArgs)(nil)).Elem()
}

type CycleTaskInput interface {
	pulumi.Input

	ToCycleTaskOutput() CycleTaskOutput
	ToCycleTaskOutputWithContext(ctx context.Context) CycleTaskOutput
}

func (*CycleTask) ElementType() reflect.Type {
	return reflect.TypeOf((**CycleTask)(nil)).Elem()
}

func (i *CycleTask) ToCycleTaskOutput() CycleTaskOutput {
	return i.ToCycleTaskOutputWithContext(context.Background())
}

func (i *CycleTask) ToCycleTaskOutputWithContext(ctx context.Context) CycleTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CycleTaskOutput)
}

// CycleTaskArrayInput is an input type that accepts CycleTaskArray and CycleTaskArrayOutput values.
// You can construct a concrete instance of `CycleTaskArrayInput` via:
//
//	CycleTaskArray{ CycleTaskArgs{...} }
type CycleTaskArrayInput interface {
	pulumi.Input

	ToCycleTaskArrayOutput() CycleTaskArrayOutput
	ToCycleTaskArrayOutputWithContext(context.Context) CycleTaskArrayOutput
}

type CycleTaskArray []CycleTaskInput

func (CycleTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CycleTask)(nil)).Elem()
}

func (i CycleTaskArray) ToCycleTaskArrayOutput() CycleTaskArrayOutput {
	return i.ToCycleTaskArrayOutputWithContext(context.Background())
}

func (i CycleTaskArray) ToCycleTaskArrayOutputWithContext(ctx context.Context) CycleTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CycleTaskArrayOutput)
}

// CycleTaskMapInput is an input type that accepts CycleTaskMap and CycleTaskMapOutput values.
// You can construct a concrete instance of `CycleTaskMapInput` via:
//
//	CycleTaskMap{ "key": CycleTaskArgs{...} }
type CycleTaskMapInput interface {
	pulumi.Input

	ToCycleTaskMapOutput() CycleTaskMapOutput
	ToCycleTaskMapOutputWithContext(context.Context) CycleTaskMapOutput
}

type CycleTaskMap map[string]CycleTaskInput

func (CycleTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CycleTask)(nil)).Elem()
}

func (i CycleTaskMap) ToCycleTaskMapOutput() CycleTaskMapOutput {
	return i.ToCycleTaskMapOutputWithContext(context.Background())
}

func (i CycleTaskMap) ToCycleTaskMapOutputWithContext(ctx context.Context) CycleTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CycleTaskMapOutput)
}

type CycleTaskOutput struct{ *pulumi.OutputState }

func (CycleTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CycleTask)(nil)).Elem()
}

func (o CycleTaskOutput) ToCycleTaskOutput() CycleTaskOutput {
	return o
}

func (o CycleTaskOutput) ToCycleTaskOutputWithContext(ctx context.Context) CycleTaskOutput {
	return o
}

// Whether to enable. Value:
func (o CycleTaskOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// First execution time.
func (o CycleTaskOutput) FirstDateStr() pulumi.IntOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.IntOutput { return v.FirstDateStr }).(pulumi.IntOutput)
}

// Interval period.
func (o CycleTaskOutput) IntervalPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.IntOutput { return v.IntervalPeriod }).(pulumi.IntOutput)
}

// Extended information field.
func (o CycleTaskOutput) Param() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.StringPtrOutput { return v.Param }).(pulumi.StringPtrOutput)
}

// Unit of scan cycle, value:
func (o CycleTaskOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.StringOutput { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Added the source of the task.
func (o CycleTaskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

// Task end time (hours).
func (o CycleTaskOutput) TargetEndTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.IntOutput { return v.TargetEndTime }).(pulumi.IntOutput)
}

// Task start time (hours).
func (o CycleTaskOutput) TargetStartTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.IntOutput { return v.TargetStartTime }).(pulumi.IntOutput)
}

// The task name.
// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
// - **IMAGE_SCAN**: Image scan.
// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
func (o CycleTaskOutput) TaskName() pulumi.StringOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.StringOutput { return v.TaskName }).(pulumi.StringOutput)
}

// The task type.
// - **VIRUS_VUL_SCHEDULE_SCAN**: scans for viruses.
// - **IMAGE_SCAN**: Image scan.
// - **EMG_VUL_SCHEDULE_SCAN**: Emergency vulnerability scanning.
func (o CycleTaskOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v *CycleTask) pulumi.StringOutput { return v.TaskType }).(pulumi.StringOutput)
}

type CycleTaskArrayOutput struct{ *pulumi.OutputState }

func (CycleTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CycleTask)(nil)).Elem()
}

func (o CycleTaskArrayOutput) ToCycleTaskArrayOutput() CycleTaskArrayOutput {
	return o
}

func (o CycleTaskArrayOutput) ToCycleTaskArrayOutputWithContext(ctx context.Context) CycleTaskArrayOutput {
	return o
}

func (o CycleTaskArrayOutput) Index(i pulumi.IntInput) CycleTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CycleTask {
		return vs[0].([]*CycleTask)[vs[1].(int)]
	}).(CycleTaskOutput)
}

type CycleTaskMapOutput struct{ *pulumi.OutputState }

func (CycleTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CycleTask)(nil)).Elem()
}

func (o CycleTaskMapOutput) ToCycleTaskMapOutput() CycleTaskMapOutput {
	return o
}

func (o CycleTaskMapOutput) ToCycleTaskMapOutputWithContext(ctx context.Context) CycleTaskMapOutput {
	return o
}

func (o CycleTaskMapOutput) MapIndex(k pulumi.StringInput) CycleTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CycleTask {
		return vs[0].(map[string]*CycleTask)[vs[1].(string)]
	}).(CycleTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CycleTaskInput)(nil)).Elem(), &CycleTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*CycleTaskArrayInput)(nil)).Elem(), CycleTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CycleTaskMapInput)(nil)).Elem(), CycleTaskMap{})
	pulumi.RegisterOutputType(CycleTaskOutput{})
	pulumi.RegisterOutputType(CycleTaskArrayOutput{})
	pulumi.RegisterOutputType(CycleTaskMapOutput{})
}
