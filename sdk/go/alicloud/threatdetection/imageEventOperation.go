// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Image Event Operation resource.
//
// Image Event Operation.
//
// For information about Threat Detection Image Event Operation and how to use it, see [What is Image Event Operation](https://www.alibabacloud.com/help/zh/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation).
//
// > **NOTE:** Available since v1.212.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := threatdetection.NewImageEventOperation(ctx, "default", &threatdetection.ImageEventOperationArgs{
//				EventType:     pulumi.String("maliciousFile"),
//				OperationCode: pulumi.String("whitelist"),
//				EventKey:      pulumi.String("alibabacloud_ak"),
//				Scenarios:     pulumi.String("{\n  \\\"type\\\":\\\"default\\\",\n  \\\"value\\\":\\\"\\\"\n}\n"),
//				EventName:     pulumi.String("阿里云AK"),
//				Conditions: pulumi.String(`[
//	  {
//	      \"condition\":\"MD5\",
//	      \"type\":\"equals\",
//	      \"value\":\"0083a31cc0083a31ccf7c10367a6e783e\"
//	  }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Image Event Operation can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/imageEventOperation:ImageEventOperation example <id>
// ```
type ImageEventOperation struct {
	pulumi.CustomResourceState

	// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
	Conditions pulumi.StringOutput `pulumi:"conditions"`
	// The keyword of the alert item.
	EventKey pulumi.StringPtrOutput `pulumi:"eventKey"`
	// The name of the alert item.
	EventName pulumi.StringPtrOutput `pulumi:"eventName"`
	// The alert type.
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// The remarks.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// The operation code.
	OperationCode pulumi.StringOutput `pulumi:"operationCode"`
	// The application scope of the rule.
	Scenarios pulumi.StringOutput `pulumi:"scenarios"`
	// The source of the whitelist. Valid values:
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewImageEventOperation registers a new resource with the given unique name, arguments, and options.
func NewImageEventOperation(ctx *pulumi.Context,
	name string, args *ImageEventOperationArgs, opts ...pulumi.ResourceOption) (*ImageEventOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.EventType == nil {
		return nil, errors.New("invalid value for required argument 'EventType'")
	}
	if args.OperationCode == nil {
		return nil, errors.New("invalid value for required argument 'OperationCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageEventOperation
	err := ctx.RegisterResource("alicloud:threatdetection/imageEventOperation:ImageEventOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageEventOperation gets an existing ImageEventOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageEventOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageEventOperationState, opts ...pulumi.ResourceOption) (*ImageEventOperation, error) {
	var resource ImageEventOperation
	err := ctx.ReadResource("alicloud:threatdetection/imageEventOperation:ImageEventOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageEventOperation resources.
type imageEventOperationState struct {
	// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
	Conditions *string `pulumi:"conditions"`
	// The keyword of the alert item.
	EventKey *string `pulumi:"eventKey"`
	// The name of the alert item.
	EventName *string `pulumi:"eventName"`
	// The alert type.
	EventType *string `pulumi:"eventType"`
	// The remarks.
	Note *string `pulumi:"note"`
	// The operation code.
	OperationCode *string `pulumi:"operationCode"`
	// The application scope of the rule.
	Scenarios *string `pulumi:"scenarios"`
	// The source of the whitelist. Valid values:
	Source *string `pulumi:"source"`
}

type ImageEventOperationState struct {
	// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
	Conditions pulumi.StringPtrInput
	// The keyword of the alert item.
	EventKey pulumi.StringPtrInput
	// The name of the alert item.
	EventName pulumi.StringPtrInput
	// The alert type.
	EventType pulumi.StringPtrInput
	// The remarks.
	Note pulumi.StringPtrInput
	// The operation code.
	OperationCode pulumi.StringPtrInput
	// The application scope of the rule.
	Scenarios pulumi.StringPtrInput
	// The source of the whitelist. Valid values:
	Source pulumi.StringPtrInput
}

func (ImageEventOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageEventOperationState)(nil)).Elem()
}

type imageEventOperationArgs struct {
	// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
	Conditions string `pulumi:"conditions"`
	// The keyword of the alert item.
	EventKey *string `pulumi:"eventKey"`
	// The name of the alert item.
	EventName *string `pulumi:"eventName"`
	// The alert type.
	EventType string `pulumi:"eventType"`
	// The remarks.
	Note *string `pulumi:"note"`
	// The operation code.
	OperationCode string `pulumi:"operationCode"`
	// The application scope of the rule.
	Scenarios *string `pulumi:"scenarios"`
	// The source of the whitelist. Valid values:
	Source *string `pulumi:"source"`
}

// The set of arguments for constructing a ImageEventOperation resource.
type ImageEventOperationArgs struct {
	// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
	Conditions pulumi.StringInput
	// The keyword of the alert item.
	EventKey pulumi.StringPtrInput
	// The name of the alert item.
	EventName pulumi.StringPtrInput
	// The alert type.
	EventType pulumi.StringInput
	// The remarks.
	Note pulumi.StringPtrInput
	// The operation code.
	OperationCode pulumi.StringInput
	// The application scope of the rule.
	Scenarios pulumi.StringPtrInput
	// The source of the whitelist. Valid values:
	Source pulumi.StringPtrInput
}

func (ImageEventOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageEventOperationArgs)(nil)).Elem()
}

type ImageEventOperationInput interface {
	pulumi.Input

	ToImageEventOperationOutput() ImageEventOperationOutput
	ToImageEventOperationOutputWithContext(ctx context.Context) ImageEventOperationOutput
}

func (*ImageEventOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageEventOperation)(nil)).Elem()
}

func (i *ImageEventOperation) ToImageEventOperationOutput() ImageEventOperationOutput {
	return i.ToImageEventOperationOutputWithContext(context.Background())
}

func (i *ImageEventOperation) ToImageEventOperationOutputWithContext(ctx context.Context) ImageEventOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEventOperationOutput)
}

// ImageEventOperationArrayInput is an input type that accepts ImageEventOperationArray and ImageEventOperationArrayOutput values.
// You can construct a concrete instance of `ImageEventOperationArrayInput` via:
//
//	ImageEventOperationArray{ ImageEventOperationArgs{...} }
type ImageEventOperationArrayInput interface {
	pulumi.Input

	ToImageEventOperationArrayOutput() ImageEventOperationArrayOutput
	ToImageEventOperationArrayOutputWithContext(context.Context) ImageEventOperationArrayOutput
}

type ImageEventOperationArray []ImageEventOperationInput

func (ImageEventOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageEventOperation)(nil)).Elem()
}

func (i ImageEventOperationArray) ToImageEventOperationArrayOutput() ImageEventOperationArrayOutput {
	return i.ToImageEventOperationArrayOutputWithContext(context.Background())
}

func (i ImageEventOperationArray) ToImageEventOperationArrayOutputWithContext(ctx context.Context) ImageEventOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEventOperationArrayOutput)
}

// ImageEventOperationMapInput is an input type that accepts ImageEventOperationMap and ImageEventOperationMapOutput values.
// You can construct a concrete instance of `ImageEventOperationMapInput` via:
//
//	ImageEventOperationMap{ "key": ImageEventOperationArgs{...} }
type ImageEventOperationMapInput interface {
	pulumi.Input

	ToImageEventOperationMapOutput() ImageEventOperationMapOutput
	ToImageEventOperationMapOutputWithContext(context.Context) ImageEventOperationMapOutput
}

type ImageEventOperationMap map[string]ImageEventOperationInput

func (ImageEventOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageEventOperation)(nil)).Elem()
}

func (i ImageEventOperationMap) ToImageEventOperationMapOutput() ImageEventOperationMapOutput {
	return i.ToImageEventOperationMapOutputWithContext(context.Background())
}

func (i ImageEventOperationMap) ToImageEventOperationMapOutputWithContext(ctx context.Context) ImageEventOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEventOperationMapOutput)
}

type ImageEventOperationOutput struct{ *pulumi.OutputState }

func (ImageEventOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageEventOperation)(nil)).Elem()
}

func (o ImageEventOperationOutput) ToImageEventOperationOutput() ImageEventOperationOutput {
	return o
}

func (o ImageEventOperationOutput) ToImageEventOperationOutputWithContext(ctx context.Context) ImageEventOperationOutput {
	return o
}

// The rule conditions. The value is in the JSON format. For more information, see [How to use it](https://www.alibabacloud.com/help/en/security-center/developer-reference/api-sas-2018-12-03-addimageeventoperation). **NOTE:** From version 1.255.0, `conditions` can be modified.
func (o ImageEventOperationOutput) Conditions() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringOutput { return v.Conditions }).(pulumi.StringOutput)
}

// The keyword of the alert item.
func (o ImageEventOperationOutput) EventKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringPtrOutput { return v.EventKey }).(pulumi.StringPtrOutput)
}

// The name of the alert item.
func (o ImageEventOperationOutput) EventName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringPtrOutput { return v.EventName }).(pulumi.StringPtrOutput)
}

// The alert type.
func (o ImageEventOperationOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

// The remarks.
func (o ImageEventOperationOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// The operation code.
func (o ImageEventOperationOutput) OperationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringOutput { return v.OperationCode }).(pulumi.StringOutput)
}

// The application scope of the rule.
func (o ImageEventOperationOutput) Scenarios() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringOutput { return v.Scenarios }).(pulumi.StringOutput)
}

// The source of the whitelist. Valid values:
func (o ImageEventOperationOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageEventOperation) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type ImageEventOperationArrayOutput struct{ *pulumi.OutputState }

func (ImageEventOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageEventOperation)(nil)).Elem()
}

func (o ImageEventOperationArrayOutput) ToImageEventOperationArrayOutput() ImageEventOperationArrayOutput {
	return o
}

func (o ImageEventOperationArrayOutput) ToImageEventOperationArrayOutputWithContext(ctx context.Context) ImageEventOperationArrayOutput {
	return o
}

func (o ImageEventOperationArrayOutput) Index(i pulumi.IntInput) ImageEventOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageEventOperation {
		return vs[0].([]*ImageEventOperation)[vs[1].(int)]
	}).(ImageEventOperationOutput)
}

type ImageEventOperationMapOutput struct{ *pulumi.OutputState }

func (ImageEventOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageEventOperation)(nil)).Elem()
}

func (o ImageEventOperationMapOutput) ToImageEventOperationMapOutput() ImageEventOperationMapOutput {
	return o
}

func (o ImageEventOperationMapOutput) ToImageEventOperationMapOutputWithContext(ctx context.Context) ImageEventOperationMapOutput {
	return o
}

func (o ImageEventOperationMapOutput) MapIndex(k pulumi.StringInput) ImageEventOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageEventOperation {
		return vs[0].(map[string]*ImageEventOperation)[vs[1].(string)]
	}).(ImageEventOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageEventOperationInput)(nil)).Elem(), &ImageEventOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageEventOperationArrayInput)(nil)).Elem(), ImageEventOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageEventOperationMapInput)(nil)).Elem(), ImageEventOperationMap{})
	pulumi.RegisterOutputType(ImageEventOperationOutput{})
	pulumi.RegisterOutputType(ImageEventOperationArrayOutput{})
	pulumi.RegisterOutputType(ImageEventOperationMapOutput{})
}
