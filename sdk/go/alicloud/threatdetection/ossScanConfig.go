// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threatdetection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Threat Detection Oss Scan Config resource.
//
// Oss detection configuration.
//
// For information about Threat Detection Oss Scan Config and how to use it, see [What is Oss Scan Config](https://www.alibabacloud.com/help/zh/security-center/developer-reference/api-sas-2018-12-03-createossscanconfig/).
//
// > **NOTE:** Available since v1.214.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/threatdetection"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			bucketRandom := _default.Result
//			default8j4t1R, err := oss.NewBucket(ctx, "default8j4t1R", &oss.BucketArgs{
//				Bucket:       pulumi.Sprintf("%v-1-%v", name, bucketRandom),
//				StorageClass: pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			default9HMqfT, err := oss.NewBucket(ctx, "default9HMqfT", &oss.BucketArgs{
//				Bucket:       pulumi.Sprintf("%v-2-%v", name, bucketRandom),
//				StorageClass: pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultxBXqFQ, err := oss.NewBucket(ctx, "defaultxBXqFQ", &oss.BucketArgs{
//				Bucket:       pulumi.Sprintf("%v-3-%v", name, bucketRandom),
//				StorageClass: pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewBucket(ctx, "defaulthZvCmR", &oss.BucketArgs{
//				Bucket:       pulumi.Sprintf("%v-4-%v", name, bucketRandom),
//				StorageClass: pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = threatdetection.NewOssScanConfig(ctx, "default", &threatdetection.OssScanConfigArgs{
//				KeySuffixLists: pulumi.StringArray{
//					pulumi.String(".jsp"),
//					pulumi.String(".php"),
//					pulumi.String(".k"),
//				},
//				ScanDayLists: pulumi.IntArray{
//					pulumi.Int(2),
//					pulumi.Int(5),
//					pulumi.Int(4),
//					pulumi.Int(3),
//				},
//				OssScanConfigName: pulumi.String(name),
//				EndTime:           pulumi.String("00:00:02"),
//				StartTime:         pulumi.String("00:00:01"),
//				Enable:            pulumi.Int(1),
//				AllKeyPrefix:      pulumi.Bool(false),
//				BucketNameLists: pulumi.StringArray{
//					default8j4t1R.Bucket,
//					default9HMqfT.Bucket,
//					defaultxBXqFQ.Bucket,
//				},
//				KeyPrefixLists: pulumi.StringArray{
//					pulumi.String("/root"),
//					pulumi.String("/usr"),
//					pulumi.String("/123"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Detection Oss Scan Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:threatdetection/ossScanConfig:OssScanConfig example <id>
// ```
type OssScanConfig struct {
	pulumi.CustomResourceState

	// Indicates whether the prefixes of all objects are matched.
	AllKeyPrefix pulumi.BoolOutput `pulumi:"allKeyPrefix"`
	// The names of the buckets.
	BucketNameLists pulumi.StringArrayOutput `pulumi:"bucketNameLists"`
	// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxFileCount pulumi.IntPtrOutput `pulumi:"decompressMaxFileCount"`
	// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxLayer pulumi.IntPtrOutput `pulumi:"decompressMaxLayer"`
	// The decryption methods.
	DecryptionLists pulumi.StringArrayOutput `pulumi:"decryptionLists"`
	// Indicates whether the check policy is enabled. Valid values:
	Enable pulumi.IntOutput `pulumi:"enable"`
	// The end time of the check. The time is in the HH:mm:ss format.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The prefixes of the objects.
	KeyPrefixLists pulumi.StringArrayOutput `pulumi:"keyPrefixLists"`
	// The suffixes of the objects that are checked.
	KeySuffixLists pulumi.StringArrayOutput `pulumi:"keySuffixLists"`
	// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
	LastModifiedStartTime pulumi.IntPtrOutput `pulumi:"lastModifiedStartTime"`
	// The policy name.
	OssScanConfigName pulumi.StringPtrOutput `pulumi:"ossScanConfigName"`
	// The days when the check is performed. The value indicates the days of the week.
	ScanDayLists pulumi.IntArrayOutput `pulumi:"scanDayLists"`
	// The start time of the check. The time is in the HH:mm:ss format.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewOssScanConfig registers a new resource with the given unique name, arguments, and options.
func NewOssScanConfig(ctx *pulumi.Context,
	name string, args *OssScanConfigArgs, opts ...pulumi.ResourceOption) (*OssScanConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketNameLists == nil {
		return nil, errors.New("invalid value for required argument 'BucketNameLists'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.EndTime == nil {
		return nil, errors.New("invalid value for required argument 'EndTime'")
	}
	if args.KeySuffixLists == nil {
		return nil, errors.New("invalid value for required argument 'KeySuffixLists'")
	}
	if args.ScanDayLists == nil {
		return nil, errors.New("invalid value for required argument 'ScanDayLists'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OssScanConfig
	err := ctx.RegisterResource("alicloud:threatdetection/ossScanConfig:OssScanConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOssScanConfig gets an existing OssScanConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOssScanConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OssScanConfigState, opts ...pulumi.ResourceOption) (*OssScanConfig, error) {
	var resource OssScanConfig
	err := ctx.ReadResource("alicloud:threatdetection/ossScanConfig:OssScanConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OssScanConfig resources.
type ossScanConfigState struct {
	// Indicates whether the prefixes of all objects are matched.
	AllKeyPrefix *bool `pulumi:"allKeyPrefix"`
	// The names of the buckets.
	BucketNameLists []string `pulumi:"bucketNameLists"`
	// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxFileCount *int `pulumi:"decompressMaxFileCount"`
	// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxLayer *int `pulumi:"decompressMaxLayer"`
	// The decryption methods.
	DecryptionLists []string `pulumi:"decryptionLists"`
	// Indicates whether the check policy is enabled. Valid values:
	Enable *int `pulumi:"enable"`
	// The end time of the check. The time is in the HH:mm:ss format.
	EndTime *string `pulumi:"endTime"`
	// The prefixes of the objects.
	KeyPrefixLists []string `pulumi:"keyPrefixLists"`
	// The suffixes of the objects that are checked.
	KeySuffixLists []string `pulumi:"keySuffixLists"`
	// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
	LastModifiedStartTime *int `pulumi:"lastModifiedStartTime"`
	// The policy name.
	OssScanConfigName *string `pulumi:"ossScanConfigName"`
	// The days when the check is performed. The value indicates the days of the week.
	ScanDayLists []int `pulumi:"scanDayLists"`
	// The start time of the check. The time is in the HH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
}

type OssScanConfigState struct {
	// Indicates whether the prefixes of all objects are matched.
	AllKeyPrefix pulumi.BoolPtrInput
	// The names of the buckets.
	BucketNameLists pulumi.StringArrayInput
	// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxFileCount pulumi.IntPtrInput
	// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxLayer pulumi.IntPtrInput
	// The decryption methods.
	DecryptionLists pulumi.StringArrayInput
	// Indicates whether the check policy is enabled. Valid values:
	Enable pulumi.IntPtrInput
	// The end time of the check. The time is in the HH:mm:ss format.
	EndTime pulumi.StringPtrInput
	// The prefixes of the objects.
	KeyPrefixLists pulumi.StringArrayInput
	// The suffixes of the objects that are checked.
	KeySuffixLists pulumi.StringArrayInput
	// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
	LastModifiedStartTime pulumi.IntPtrInput
	// The policy name.
	OssScanConfigName pulumi.StringPtrInput
	// The days when the check is performed. The value indicates the days of the week.
	ScanDayLists pulumi.IntArrayInput
	// The start time of the check. The time is in the HH:mm:ss format.
	StartTime pulumi.StringPtrInput
}

func (OssScanConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*ossScanConfigState)(nil)).Elem()
}

type ossScanConfigArgs struct {
	// Indicates whether the prefixes of all objects are matched.
	AllKeyPrefix *bool `pulumi:"allKeyPrefix"`
	// The names of the buckets.
	BucketNameLists []string `pulumi:"bucketNameLists"`
	// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxFileCount *int `pulumi:"decompressMaxFileCount"`
	// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxLayer *int `pulumi:"decompressMaxLayer"`
	// The decryption methods.
	DecryptionLists []string `pulumi:"decryptionLists"`
	// Indicates whether the check policy is enabled. Valid values:
	Enable int `pulumi:"enable"`
	// The end time of the check. The time is in the HH:mm:ss format.
	EndTime string `pulumi:"endTime"`
	// The prefixes of the objects.
	KeyPrefixLists []string `pulumi:"keyPrefixLists"`
	// The suffixes of the objects that are checked.
	KeySuffixLists []string `pulumi:"keySuffixLists"`
	// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
	LastModifiedStartTime *int `pulumi:"lastModifiedStartTime"`
	// The policy name.
	OssScanConfigName *string `pulumi:"ossScanConfigName"`
	// The days when the check is performed. The value indicates the days of the week.
	ScanDayLists []int `pulumi:"scanDayLists"`
	// The start time of the check. The time is in the HH:mm:ss format.
	StartTime string `pulumi:"startTime"`
}

// The set of arguments for constructing a OssScanConfig resource.
type OssScanConfigArgs struct {
	// Indicates whether the prefixes of all objects are matched.
	AllKeyPrefix pulumi.BoolPtrInput
	// The names of the buckets.
	BucketNameLists pulumi.StringArrayInput
	// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxFileCount pulumi.IntPtrInput
	// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
	DecompressMaxLayer pulumi.IntPtrInput
	// The decryption methods.
	DecryptionLists pulumi.StringArrayInput
	// Indicates whether the check policy is enabled. Valid values:
	Enable pulumi.IntInput
	// The end time of the check. The time is in the HH:mm:ss format.
	EndTime pulumi.StringInput
	// The prefixes of the objects.
	KeyPrefixLists pulumi.StringArrayInput
	// The suffixes of the objects that are checked.
	KeySuffixLists pulumi.StringArrayInput
	// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
	LastModifiedStartTime pulumi.IntPtrInput
	// The policy name.
	OssScanConfigName pulumi.StringPtrInput
	// The days when the check is performed. The value indicates the days of the week.
	ScanDayLists pulumi.IntArrayInput
	// The start time of the check. The time is in the HH:mm:ss format.
	StartTime pulumi.StringInput
}

func (OssScanConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ossScanConfigArgs)(nil)).Elem()
}

type OssScanConfigInput interface {
	pulumi.Input

	ToOssScanConfigOutput() OssScanConfigOutput
	ToOssScanConfigOutputWithContext(ctx context.Context) OssScanConfigOutput
}

func (*OssScanConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**OssScanConfig)(nil)).Elem()
}

func (i *OssScanConfig) ToOssScanConfigOutput() OssScanConfigOutput {
	return i.ToOssScanConfigOutputWithContext(context.Background())
}

func (i *OssScanConfig) ToOssScanConfigOutputWithContext(ctx context.Context) OssScanConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssScanConfigOutput)
}

// OssScanConfigArrayInput is an input type that accepts OssScanConfigArray and OssScanConfigArrayOutput values.
// You can construct a concrete instance of `OssScanConfigArrayInput` via:
//
//	OssScanConfigArray{ OssScanConfigArgs{...} }
type OssScanConfigArrayInput interface {
	pulumi.Input

	ToOssScanConfigArrayOutput() OssScanConfigArrayOutput
	ToOssScanConfigArrayOutputWithContext(context.Context) OssScanConfigArrayOutput
}

type OssScanConfigArray []OssScanConfigInput

func (OssScanConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OssScanConfig)(nil)).Elem()
}

func (i OssScanConfigArray) ToOssScanConfigArrayOutput() OssScanConfigArrayOutput {
	return i.ToOssScanConfigArrayOutputWithContext(context.Background())
}

func (i OssScanConfigArray) ToOssScanConfigArrayOutputWithContext(ctx context.Context) OssScanConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssScanConfigArrayOutput)
}

// OssScanConfigMapInput is an input type that accepts OssScanConfigMap and OssScanConfigMapOutput values.
// You can construct a concrete instance of `OssScanConfigMapInput` via:
//
//	OssScanConfigMap{ "key": OssScanConfigArgs{...} }
type OssScanConfigMapInput interface {
	pulumi.Input

	ToOssScanConfigMapOutput() OssScanConfigMapOutput
	ToOssScanConfigMapOutputWithContext(context.Context) OssScanConfigMapOutput
}

type OssScanConfigMap map[string]OssScanConfigInput

func (OssScanConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OssScanConfig)(nil)).Elem()
}

func (i OssScanConfigMap) ToOssScanConfigMapOutput() OssScanConfigMapOutput {
	return i.ToOssScanConfigMapOutputWithContext(context.Background())
}

func (i OssScanConfigMap) ToOssScanConfigMapOutputWithContext(ctx context.Context) OssScanConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OssScanConfigMapOutput)
}

type OssScanConfigOutput struct{ *pulumi.OutputState }

func (OssScanConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OssScanConfig)(nil)).Elem()
}

func (o OssScanConfigOutput) ToOssScanConfigOutput() OssScanConfigOutput {
	return o
}

func (o OssScanConfigOutput) ToOssScanConfigOutputWithContext(ctx context.Context) OssScanConfigOutput {
	return o
}

// Indicates whether the prefixes of all objects are matched.
func (o OssScanConfigOutput) AllKeyPrefix() pulumi.BoolOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.BoolOutput { return v.AllKeyPrefix }).(pulumi.BoolOutput)
}

// The names of the buckets.
func (o OssScanConfigOutput) BucketNameLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringArrayOutput { return v.BucketNameLists }).(pulumi.StringArrayOutput)
}

// The maximum number of objects that can be extracted during decompression. Valid values: 1 to 1000. If the maximum number of objects that can be extracted is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
func (o OssScanConfigOutput) DecompressMaxFileCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.IntPtrOutput { return v.DecompressMaxFileCount }).(pulumi.IntPtrOutput)
}

// The maximum number of decompression levels when multi-level packages are decompressed. Valid values: 1 to 5. If the maximum number of decompression levels is reached, the decompression operation immediately ends and the detection of extracted objects is not affected.
func (o OssScanConfigOutput) DecompressMaxLayer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.IntPtrOutput { return v.DecompressMaxLayer }).(pulumi.IntPtrOutput)
}

// The decryption methods.
func (o OssScanConfigOutput) DecryptionLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringArrayOutput { return v.DecryptionLists }).(pulumi.StringArrayOutput)
}

// Indicates whether the check policy is enabled. Valid values:
func (o OssScanConfigOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// The end time of the check. The time is in the HH:mm:ss format.
func (o OssScanConfigOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The prefixes of the objects.
func (o OssScanConfigOutput) KeyPrefixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringArrayOutput { return v.KeyPrefixLists }).(pulumi.StringArrayOutput)
}

// The suffixes of the objects that are checked.
func (o OssScanConfigOutput) KeySuffixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringArrayOutput { return v.KeySuffixLists }).(pulumi.StringArrayOutput)
}

// The timestamp when the object was last modified. The time must be later than the timestamp that you specify. Unit: milliseconds.
func (o OssScanConfigOutput) LastModifiedStartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.IntPtrOutput { return v.LastModifiedStartTime }).(pulumi.IntPtrOutput)
}

// The policy name.
func (o OssScanConfigOutput) OssScanConfigName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringPtrOutput { return v.OssScanConfigName }).(pulumi.StringPtrOutput)
}

// The days when the check is performed. The value indicates the days of the week.
func (o OssScanConfigOutput) ScanDayLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.IntArrayOutput { return v.ScanDayLists }).(pulumi.IntArrayOutput)
}

// The start time of the check. The time is in the HH:mm:ss format.
func (o OssScanConfigOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OssScanConfig) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

type OssScanConfigArrayOutput struct{ *pulumi.OutputState }

func (OssScanConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OssScanConfig)(nil)).Elem()
}

func (o OssScanConfigArrayOutput) ToOssScanConfigArrayOutput() OssScanConfigArrayOutput {
	return o
}

func (o OssScanConfigArrayOutput) ToOssScanConfigArrayOutputWithContext(ctx context.Context) OssScanConfigArrayOutput {
	return o
}

func (o OssScanConfigArrayOutput) Index(i pulumi.IntInput) OssScanConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OssScanConfig {
		return vs[0].([]*OssScanConfig)[vs[1].(int)]
	}).(OssScanConfigOutput)
}

type OssScanConfigMapOutput struct{ *pulumi.OutputState }

func (OssScanConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OssScanConfig)(nil)).Elem()
}

func (o OssScanConfigMapOutput) ToOssScanConfigMapOutput() OssScanConfigMapOutput {
	return o
}

func (o OssScanConfigMapOutput) ToOssScanConfigMapOutputWithContext(ctx context.Context) OssScanConfigMapOutput {
	return o
}

func (o OssScanConfigMapOutput) MapIndex(k pulumi.StringInput) OssScanConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OssScanConfig {
		return vs[0].(map[string]*OssScanConfig)[vs[1].(string)]
	}).(OssScanConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OssScanConfigInput)(nil)).Elem(), &OssScanConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*OssScanConfigArrayInput)(nil)).Elem(), OssScanConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OssScanConfigMapInput)(nil)).Elem(), OssScanConfigMap{})
	pulumi.RegisterOutputType(OssScanConfigOutput{})
	pulumi.RegisterOutputType(OssScanConfigArrayOutput{})
	pulumi.RegisterOutputType(OssScanConfigMapOutput{})
}
