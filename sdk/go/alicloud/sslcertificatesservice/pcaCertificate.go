// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sslcertificatesservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SSL Certificates Pca Certificate resource.
//
// For information about SSL Certificates Pca Certificate and how to use it, see [What is Pca Certificate](https://next.api.alibabacloud.com/document/cas/2020-06-30/CreateRootCACertificate).
//
// > **NOTE:** Available since v1.257.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sslcertificatesservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sslcertificatesservice.NewPcaCertificate(ctx, "default", &sslcertificatesservice.PcaCertificateArgs{
//				Organization:     pulumi.String("a"),
//				Years:            pulumi.Int(1),
//				Locality:         pulumi.String("a"),
//				OrganizationUnit: pulumi.String("a"),
//				State:            pulumi.String("a"),
//				CountryCode:      pulumi.String("cn"),
//				CommonName:       pulumi.String("cbc.certqa.cn"),
//				Algorithm:        pulumi.String("RSA_2048"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SSL Certificates Pca Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate example <id>
// ```
type PcaCertificate struct {
	pulumi.CustomResourceState

	// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
	// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
	// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
	// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
	// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
	// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
	//   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
	CountryCode pulumi.StringPtrOutput `pulumi:"countryCode"`
	// Name of the city where the organization is located. Support the use of Chinese, English characters.
	Locality pulumi.StringOutput `pulumi:"locality"`
	// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The name of the department or branch under the organization. Support the use of Chinese, English characters.
	OrganizationUnit pulumi.StringOutput `pulumi:"organizationUnit"`
	// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
	// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
	State pulumi.StringOutput `pulumi:"state"`
	// The status of the CA certificate.
	Status pulumi.StringOutput `pulumi:"status"`
	// The validity period of the root CA certificate, in years.
	// > **NOTE:**  It is recommended to set to `5` to `10` years.
	Years pulumi.IntOutput `pulumi:"years"`
}

// NewPcaCertificate registers a new resource with the given unique name, arguments, and options.
func NewPcaCertificate(ctx *pulumi.Context,
	name string, args *PcaCertificateArgs, opts ...pulumi.ResourceOption) (*PcaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.Locality == nil {
		return nil, errors.New("invalid value for required argument 'Locality'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.OrganizationUnit == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationUnit'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	if args.Years == nil {
		return nil, errors.New("invalid value for required argument 'Years'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PcaCertificate
	err := ctx.RegisterResource("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPcaCertificate gets an existing PcaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPcaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PcaCertificateState, opts ...pulumi.ResourceOption) (*PcaCertificate, error) {
	var resource PcaCertificate
	err := ctx.ReadResource("alicloud:sslcertificatesservice/pcaCertificate:PcaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PcaCertificate resources.
type pcaCertificateState struct {
	// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
	// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
	// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
	// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
	// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
	// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
	//   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
	Algorithm *string `pulumi:"algorithm"`
	// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
	CommonName *string `pulumi:"commonName"`
	// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
	CountryCode *string `pulumi:"countryCode"`
	// Name of the city where the organization is located. Support the use of Chinese, English characters.
	Locality *string `pulumi:"locality"`
	// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
	Organization *string `pulumi:"organization"`
	// The name of the department or branch under the organization. Support the use of Chinese, English characters.
	OrganizationUnit *string `pulumi:"organizationUnit"`
	// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
	// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
	State *string `pulumi:"state"`
	// The status of the CA certificate.
	Status *string `pulumi:"status"`
	// The validity period of the root CA certificate, in years.
	// > **NOTE:**  It is recommended to set to `5` to `10` years.
	Years *int `pulumi:"years"`
}

type PcaCertificateState struct {
	// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
	// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
	// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
	// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
	// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
	// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
	//   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
	Algorithm pulumi.StringPtrInput
	// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
	CommonName pulumi.StringPtrInput
	// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
	CountryCode pulumi.StringPtrInput
	// Name of the city where the organization is located. Support the use of Chinese, English characters.
	Locality pulumi.StringPtrInput
	// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
	Organization pulumi.StringPtrInput
	// The name of the department or branch under the organization. Support the use of Chinese, English characters.
	OrganizationUnit pulumi.StringPtrInput
	// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
	// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
	State pulumi.StringPtrInput
	// The status of the CA certificate.
	Status pulumi.StringPtrInput
	// The validity period of the root CA certificate, in years.
	// > **NOTE:**  It is recommended to set to `5` to `10` years.
	Years pulumi.IntPtrInput
}

func (PcaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*pcaCertificateState)(nil)).Elem()
}

type pcaCertificateArgs struct {
	// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
	// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
	// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
	// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
	// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
	// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
	//   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
	Algorithm *string `pulumi:"algorithm"`
	// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
	CommonName string `pulumi:"commonName"`
	// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
	CountryCode *string `pulumi:"countryCode"`
	// Name of the city where the organization is located. Support the use of Chinese, English characters.
	Locality string `pulumi:"locality"`
	// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
	Organization string `pulumi:"organization"`
	// The name of the department or branch under the organization. Support the use of Chinese, English characters.
	OrganizationUnit string `pulumi:"organizationUnit"`
	// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
	// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
	State string `pulumi:"state"`
	// The validity period of the root CA certificate, in years.
	// > **NOTE:**  It is recommended to set to `5` to `10` years.
	Years int `pulumi:"years"`
}

// The set of arguments for constructing a PcaCertificate resource.
type PcaCertificateArgs struct {
	// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
	// - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
	// - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
	// - `ECC_256`: The signature algorithm is Sha256WithECDSA.
	// - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
	// - `ECC_512`: The signature algorithm is Sha256WithECDSA.
	// - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
	//   The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
	Algorithm pulumi.StringPtrInput
	// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
	CommonName pulumi.StringInput
	// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
	CountryCode pulumi.StringPtrInput
	// Name of the city where the organization is located. Support the use of Chinese, English characters.
	Locality pulumi.StringInput
	// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
	Organization pulumi.StringInput
	// The name of the department or branch under the organization. Support the use of Chinese, English characters.
	OrganizationUnit pulumi.StringInput
	// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
	// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
	State pulumi.StringInput
	// The validity period of the root CA certificate, in years.
	// > **NOTE:**  It is recommended to set to `5` to `10` years.
	Years pulumi.IntInput
}

func (PcaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pcaCertificateArgs)(nil)).Elem()
}

type PcaCertificateInput interface {
	pulumi.Input

	ToPcaCertificateOutput() PcaCertificateOutput
	ToPcaCertificateOutputWithContext(ctx context.Context) PcaCertificateOutput
}

func (*PcaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**PcaCertificate)(nil)).Elem()
}

func (i *PcaCertificate) ToPcaCertificateOutput() PcaCertificateOutput {
	return i.ToPcaCertificateOutputWithContext(context.Background())
}

func (i *PcaCertificate) ToPcaCertificateOutputWithContext(ctx context.Context) PcaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcaCertificateOutput)
}

// PcaCertificateArrayInput is an input type that accepts PcaCertificateArray and PcaCertificateArrayOutput values.
// You can construct a concrete instance of `PcaCertificateArrayInput` via:
//
//	PcaCertificateArray{ PcaCertificateArgs{...} }
type PcaCertificateArrayInput interface {
	pulumi.Input

	ToPcaCertificateArrayOutput() PcaCertificateArrayOutput
	ToPcaCertificateArrayOutputWithContext(context.Context) PcaCertificateArrayOutput
}

type PcaCertificateArray []PcaCertificateInput

func (PcaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PcaCertificate)(nil)).Elem()
}

func (i PcaCertificateArray) ToPcaCertificateArrayOutput() PcaCertificateArrayOutput {
	return i.ToPcaCertificateArrayOutputWithContext(context.Background())
}

func (i PcaCertificateArray) ToPcaCertificateArrayOutputWithContext(ctx context.Context) PcaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcaCertificateArrayOutput)
}

// PcaCertificateMapInput is an input type that accepts PcaCertificateMap and PcaCertificateMapOutput values.
// You can construct a concrete instance of `PcaCertificateMapInput` via:
//
//	PcaCertificateMap{ "key": PcaCertificateArgs{...} }
type PcaCertificateMapInput interface {
	pulumi.Input

	ToPcaCertificateMapOutput() PcaCertificateMapOutput
	ToPcaCertificateMapOutputWithContext(context.Context) PcaCertificateMapOutput
}

type PcaCertificateMap map[string]PcaCertificateInput

func (PcaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PcaCertificate)(nil)).Elem()
}

func (i PcaCertificateMap) ToPcaCertificateMapOutput() PcaCertificateMapOutput {
	return i.ToPcaCertificateMapOutputWithContext(context.Background())
}

func (i PcaCertificateMap) ToPcaCertificateMapOutputWithContext(ctx context.Context) PcaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcaCertificateMapOutput)
}

type PcaCertificateOutput struct{ *pulumi.OutputState }

func (PcaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PcaCertificate)(nil)).Elem()
}

func (o PcaCertificateOutput) ToPcaCertificateOutput() PcaCertificateOutput {
	return o
}

func (o PcaCertificateOutput) ToPcaCertificateOutputWithContext(ctx context.Context) PcaCertificateOutput {
	return o
}

// The key algorithm type of the root CA certificate. The key algorithm is expressed using the '_< key length>' format. Value:
//   - `RSA_1024`: The corresponding signature algorithm is Sha256WithRSA.
//   - `RSA_2048`: The corresponding signature algorithm is Sha256WithRSA.
//   - `RSA_4096`: The corresponding signature algorithm is Sha256WithRSA.
//   - `ECC_256`: The signature algorithm is Sha256WithECDSA.
//   - `ECC_384`: The corresponding signature algorithm is Sha256WithECDSA.
//   - `ECC_512`: The signature algorithm is Sha256WithECDSA.
//   - `SM2_256`: The corresponding signature algorithm is SM3WithSM2.
//     The encryption algorithm of the root CA certificate must be the same as the **certificate algorithm** of the private Root CA you purchased. Example: If the **certificate algorithm** selected when you purchase a private Root CA is `RSA`, the key algorithm of the root CA certificate must be **RSA\_1024**, **RSA\_2048**, or **RSA\_4096**.
func (o PcaCertificateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// The common name or abbreviation of the organization. Support the use of Chinese, English characters.
func (o PcaCertificateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// The code of the country or region in which the organization is located, using a two-digit capital abbreviation. For example, `CN` represents China and `US` represents the United States.
func (o PcaCertificateOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringPtrOutput { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// Name of the city where the organization is located. Support the use of Chinese, English characters.
func (o PcaCertificateOutput) Locality() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.Locality }).(pulumi.StringOutput)
}

// The name of the organization (corresponding to your enterprise or company) associated with the root CA certificate. Support the use of Chinese, English characters.
func (o PcaCertificateOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The name of the department or branch under the organization. Support the use of Chinese, English characters.
func (o PcaCertificateOutput) OrganizationUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.OrganizationUnit }).(pulumi.StringOutput)
}

// The name of the province, municipality, or autonomous region in which the organization is located. Support the use of Chinese, English characters.
// Name of the province or state where the organization is located. Support the use of Chinese, English characters.
func (o PcaCertificateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The status of the CA certificate.
func (o PcaCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The validity period of the root CA certificate, in years.
// > **NOTE:**  It is recommended to set to `5` to `10` years.
func (o PcaCertificateOutput) Years() pulumi.IntOutput {
	return o.ApplyT(func(v *PcaCertificate) pulumi.IntOutput { return v.Years }).(pulumi.IntOutput)
}

type PcaCertificateArrayOutput struct{ *pulumi.OutputState }

func (PcaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PcaCertificate)(nil)).Elem()
}

func (o PcaCertificateArrayOutput) ToPcaCertificateArrayOutput() PcaCertificateArrayOutput {
	return o
}

func (o PcaCertificateArrayOutput) ToPcaCertificateArrayOutputWithContext(ctx context.Context) PcaCertificateArrayOutput {
	return o
}

func (o PcaCertificateArrayOutput) Index(i pulumi.IntInput) PcaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PcaCertificate {
		return vs[0].([]*PcaCertificate)[vs[1].(int)]
	}).(PcaCertificateOutput)
}

type PcaCertificateMapOutput struct{ *pulumi.OutputState }

func (PcaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PcaCertificate)(nil)).Elem()
}

func (o PcaCertificateMapOutput) ToPcaCertificateMapOutput() PcaCertificateMapOutput {
	return o
}

func (o PcaCertificateMapOutput) ToPcaCertificateMapOutputWithContext(ctx context.Context) PcaCertificateMapOutput {
	return o
}

func (o PcaCertificateMapOutput) MapIndex(k pulumi.StringInput) PcaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PcaCertificate {
		return vs[0].(map[string]*PcaCertificate)[vs[1].(string)]
	}).(PcaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PcaCertificateInput)(nil)).Elem(), &PcaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcaCertificateArrayInput)(nil)).Elem(), PcaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcaCertificateMapInput)(nil)).Elem(), PcaCertificateMap{})
	pulumi.RegisterOutputType(PcaCertificateOutput{})
	pulumi.RegisterOutputType(PcaCertificateArrayOutput{})
	pulumi.RegisterOutputType(PcaCertificateMapOutput{})
}
