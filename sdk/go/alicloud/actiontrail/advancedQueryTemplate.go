// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package actiontrail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Actiontrail Advanced Query Template resource.
//
// sql template of advanced query.
//
// For information about Actiontrail Advanced Query Template and how to use it, see [What is Advanced Query Template](https://next.api.alibabacloud.com/document/Actiontrail/2020-07-06/CreateAdvancedQueryTemplate).
//
// > **NOTE:** Available since v1.255.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/actiontrail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := actiontrail.NewAdvancedQueryTemplate(ctx, "default", &actiontrail.AdvancedQueryTemplateArgs{
//				SimpleQuery:  pulumi.Bool(true),
//				TemplateName: pulumi.String("exampleTemplateName"),
//				TemplateSql:  pulumi.String("*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Actiontrail Advanced Query Template can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate example <id>
// ```
type AdvancedQueryTemplate struct {
	pulumi.CustomResourceState

	// Distinguish whether the current template is a simple query
	SimpleQuery pulumi.BoolOutput `pulumi:"simpleQuery"`
	// The name of the resource
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// SQL content saved on behalf of the current template
	TemplateSql pulumi.StringOutput `pulumi:"templateSql"`
}

// NewAdvancedQueryTemplate registers a new resource with the given unique name, arguments, and options.
func NewAdvancedQueryTemplate(ctx *pulumi.Context,
	name string, args *AdvancedQueryTemplateArgs, opts ...pulumi.ResourceOption) (*AdvancedQueryTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SimpleQuery == nil {
		return nil, errors.New("invalid value for required argument 'SimpleQuery'")
	}
	if args.TemplateSql == nil {
		return nil, errors.New("invalid value for required argument 'TemplateSql'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdvancedQueryTemplate
	err := ctx.RegisterResource("alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdvancedQueryTemplate gets an existing AdvancedQueryTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdvancedQueryTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdvancedQueryTemplateState, opts ...pulumi.ResourceOption) (*AdvancedQueryTemplate, error) {
	var resource AdvancedQueryTemplate
	err := ctx.ReadResource("alicloud:actiontrail/advancedQueryTemplate:AdvancedQueryTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdvancedQueryTemplate resources.
type advancedQueryTemplateState struct {
	// Distinguish whether the current template is a simple query
	SimpleQuery *bool `pulumi:"simpleQuery"`
	// The name of the resource
	TemplateName *string `pulumi:"templateName"`
	// SQL content saved on behalf of the current template
	TemplateSql *string `pulumi:"templateSql"`
}

type AdvancedQueryTemplateState struct {
	// Distinguish whether the current template is a simple query
	SimpleQuery pulumi.BoolPtrInput
	// The name of the resource
	TemplateName pulumi.StringPtrInput
	// SQL content saved on behalf of the current template
	TemplateSql pulumi.StringPtrInput
}

func (AdvancedQueryTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedQueryTemplateState)(nil)).Elem()
}

type advancedQueryTemplateArgs struct {
	// Distinguish whether the current template is a simple query
	SimpleQuery bool `pulumi:"simpleQuery"`
	// The name of the resource
	TemplateName *string `pulumi:"templateName"`
	// SQL content saved on behalf of the current template
	TemplateSql string `pulumi:"templateSql"`
}

// The set of arguments for constructing a AdvancedQueryTemplate resource.
type AdvancedQueryTemplateArgs struct {
	// Distinguish whether the current template is a simple query
	SimpleQuery pulumi.BoolInput
	// The name of the resource
	TemplateName pulumi.StringPtrInput
	// SQL content saved on behalf of the current template
	TemplateSql pulumi.StringInput
}

func (AdvancedQueryTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedQueryTemplateArgs)(nil)).Elem()
}

type AdvancedQueryTemplateInput interface {
	pulumi.Input

	ToAdvancedQueryTemplateOutput() AdvancedQueryTemplateOutput
	ToAdvancedQueryTemplateOutputWithContext(ctx context.Context) AdvancedQueryTemplateOutput
}

func (*AdvancedQueryTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedQueryTemplate)(nil)).Elem()
}

func (i *AdvancedQueryTemplate) ToAdvancedQueryTemplateOutput() AdvancedQueryTemplateOutput {
	return i.ToAdvancedQueryTemplateOutputWithContext(context.Background())
}

func (i *AdvancedQueryTemplate) ToAdvancedQueryTemplateOutputWithContext(ctx context.Context) AdvancedQueryTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedQueryTemplateOutput)
}

// AdvancedQueryTemplateArrayInput is an input type that accepts AdvancedQueryTemplateArray and AdvancedQueryTemplateArrayOutput values.
// You can construct a concrete instance of `AdvancedQueryTemplateArrayInput` via:
//
//	AdvancedQueryTemplateArray{ AdvancedQueryTemplateArgs{...} }
type AdvancedQueryTemplateArrayInput interface {
	pulumi.Input

	ToAdvancedQueryTemplateArrayOutput() AdvancedQueryTemplateArrayOutput
	ToAdvancedQueryTemplateArrayOutputWithContext(context.Context) AdvancedQueryTemplateArrayOutput
}

type AdvancedQueryTemplateArray []AdvancedQueryTemplateInput

func (AdvancedQueryTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedQueryTemplate)(nil)).Elem()
}

func (i AdvancedQueryTemplateArray) ToAdvancedQueryTemplateArrayOutput() AdvancedQueryTemplateArrayOutput {
	return i.ToAdvancedQueryTemplateArrayOutputWithContext(context.Background())
}

func (i AdvancedQueryTemplateArray) ToAdvancedQueryTemplateArrayOutputWithContext(ctx context.Context) AdvancedQueryTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedQueryTemplateArrayOutput)
}

// AdvancedQueryTemplateMapInput is an input type that accepts AdvancedQueryTemplateMap and AdvancedQueryTemplateMapOutput values.
// You can construct a concrete instance of `AdvancedQueryTemplateMapInput` via:
//
//	AdvancedQueryTemplateMap{ "key": AdvancedQueryTemplateArgs{...} }
type AdvancedQueryTemplateMapInput interface {
	pulumi.Input

	ToAdvancedQueryTemplateMapOutput() AdvancedQueryTemplateMapOutput
	ToAdvancedQueryTemplateMapOutputWithContext(context.Context) AdvancedQueryTemplateMapOutput
}

type AdvancedQueryTemplateMap map[string]AdvancedQueryTemplateInput

func (AdvancedQueryTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedQueryTemplate)(nil)).Elem()
}

func (i AdvancedQueryTemplateMap) ToAdvancedQueryTemplateMapOutput() AdvancedQueryTemplateMapOutput {
	return i.ToAdvancedQueryTemplateMapOutputWithContext(context.Background())
}

func (i AdvancedQueryTemplateMap) ToAdvancedQueryTemplateMapOutputWithContext(ctx context.Context) AdvancedQueryTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedQueryTemplateMapOutput)
}

type AdvancedQueryTemplateOutput struct{ *pulumi.OutputState }

func (AdvancedQueryTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedQueryTemplate)(nil)).Elem()
}

func (o AdvancedQueryTemplateOutput) ToAdvancedQueryTemplateOutput() AdvancedQueryTemplateOutput {
	return o
}

func (o AdvancedQueryTemplateOutput) ToAdvancedQueryTemplateOutputWithContext(ctx context.Context) AdvancedQueryTemplateOutput {
	return o
}

// Distinguish whether the current template is a simple query
func (o AdvancedQueryTemplateOutput) SimpleQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedQueryTemplate) pulumi.BoolOutput { return v.SimpleQuery }).(pulumi.BoolOutput)
}

// The name of the resource
func (o AdvancedQueryTemplateOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdvancedQueryTemplate) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

// SQL content saved on behalf of the current template
func (o AdvancedQueryTemplateOutput) TemplateSql() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedQueryTemplate) pulumi.StringOutput { return v.TemplateSql }).(pulumi.StringOutput)
}

type AdvancedQueryTemplateArrayOutput struct{ *pulumi.OutputState }

func (AdvancedQueryTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedQueryTemplate)(nil)).Elem()
}

func (o AdvancedQueryTemplateArrayOutput) ToAdvancedQueryTemplateArrayOutput() AdvancedQueryTemplateArrayOutput {
	return o
}

func (o AdvancedQueryTemplateArrayOutput) ToAdvancedQueryTemplateArrayOutputWithContext(ctx context.Context) AdvancedQueryTemplateArrayOutput {
	return o
}

func (o AdvancedQueryTemplateArrayOutput) Index(i pulumi.IntInput) AdvancedQueryTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdvancedQueryTemplate {
		return vs[0].([]*AdvancedQueryTemplate)[vs[1].(int)]
	}).(AdvancedQueryTemplateOutput)
}

type AdvancedQueryTemplateMapOutput struct{ *pulumi.OutputState }

func (AdvancedQueryTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedQueryTemplate)(nil)).Elem()
}

func (o AdvancedQueryTemplateMapOutput) ToAdvancedQueryTemplateMapOutput() AdvancedQueryTemplateMapOutput {
	return o
}

func (o AdvancedQueryTemplateMapOutput) ToAdvancedQueryTemplateMapOutputWithContext(ctx context.Context) AdvancedQueryTemplateMapOutput {
	return o
}

func (o AdvancedQueryTemplateMapOutput) MapIndex(k pulumi.StringInput) AdvancedQueryTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdvancedQueryTemplate {
		return vs[0].(map[string]*AdvancedQueryTemplate)[vs[1].(string)]
	}).(AdvancedQueryTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedQueryTemplateInput)(nil)).Elem(), &AdvancedQueryTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedQueryTemplateArrayInput)(nil)).Elem(), AdvancedQueryTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedQueryTemplateMapInput)(nil)).Elem(), AdvancedQueryTemplateMap{})
	pulumi.RegisterOutputType(AdvancedQueryTemplateOutput{})
	pulumi.RegisterOutputType(AdvancedQueryTemplateArrayOutput{})
	pulumi.RegisterOutputType(AdvancedQueryTemplateMapOutput{})
}
