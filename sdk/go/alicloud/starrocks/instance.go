// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package starrocks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Star Rocks Instance resource.
//
// StarRocks resource instance.
//
// For information about Star Rocks Instance and how to use it, see [What is Instance](https://next.api.alibabacloud.com/document/starrocks/2022-10-19/CreateInstanceV1).
//
// > **NOTE:** Available since v1.256.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/starrocks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultB21JUD, err := vpc.NewNetwork(ctx, "defaultB21JUD", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			default106DkE, err := vpc.NewSwitch(ctx, "default106DkE", &vpc.SwitchArgs{
//				VpcId:       defaultB21JUD.ID(),
//				CidrBlock:   pulumi.String("172.16.1.0/24"),
//				VswitchName: pulumi.String("sr-example"),
//				ZoneId:      pulumi.String("cn-hangzhou-i"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = starrocks.NewInstance(ctx, "default", &starrocks.InstanceArgs{
//				InstanceName: pulumi.String("create-instance-1"),
//				AutoRenew:    pulumi.Bool(false),
//				FrontendNodeGroups: starrocks.InstanceFrontendNodeGroupArray{
//					&starrocks.InstanceFrontendNodeGroupArgs{
//						Cu:                       pulumi.Int(8),
//						StorageSize:              pulumi.Int(100),
//						ResidentNodeNumber:       pulumi.Int(3),
//						StoragePerformanceLevel:  pulumi.String("pl1"),
//						SpecType:                 pulumi.String("standard"),
//						DiskNumber:               pulumi.Int(1),
//						ZoneId:                   pulumi.String("cn-hangzhou-i"),
//						LocalStorageInstanceType: pulumi.String("null"),
//					},
//				},
//				Vswitches: starrocks.InstanceVswitchArray{
//					&starrocks.InstanceVswitchArgs{
//						VswitchId: default106DkE.ID(),
//						ZoneId:    pulumi.String("cn-hangzhou-i"),
//					},
//				},
//				BackendNodeGroups: starrocks.InstanceBackendNodeGroupArray{
//					&starrocks.InstanceBackendNodeGroupArgs{
//						Cu:                       pulumi.Int(8),
//						StorageSize:              pulumi.Int(100),
//						ResidentNodeNumber:       pulumi.Int(3),
//						DiskNumber:               pulumi.Int(1),
//						StoragePerformanceLevel:  pulumi.String("pl1"),
//						SpecType:                 pulumi.String("standard"),
//						ZoneId:                   pulumi.String("cn-hangzhou-i"),
//						LocalStorageInstanceType: pulumi.String("null"),
//					},
//				},
//				ClusterZoneId:        pulumi.String("cn-hangzhou-i"),
//				Duration:             pulumi.Int(1),
//				PayType:              pulumi.String("postPaid"),
//				VpcId:                defaultB21JUD.ID(),
//				Version:              pulumi.String("3.3"),
//				RunMode:              pulumi.String("shared_data"),
//				PackageType:          pulumi.String("official"),
//				AdminPassword:        pulumi.String("1qaz@QAZ"),
//				OssAccessingRoleName: pulumi.String("AliyunEMRStarRocksAccessingOSSRole"),
//				PricingCycle:         pulumi.String("Month"),
//				KmsKeyId:             pulumi.String("123"),
//				PromotionOptionNo:    pulumi.String("123"),
//				Encrypted:            pulumi.Bool(false),
//				ObserverNodeGroups: starrocks.InstanceObserverNodeGroupArray{
//					&starrocks.InstanceObserverNodeGroupArgs{
//						Cu:                       pulumi.Int(8),
//						StorageSize:              pulumi.Int(100),
//						StoragePerformanceLevel:  pulumi.String("pl1"),
//						DiskNumber:               pulumi.Int(1),
//						ResidentNodeNumber:       pulumi.Int(1),
//						SpecType:                 pulumi.String("standard"),
//						LocalStorageInstanceType: pulumi.String("null"),
//						ZoneId:                   pulumi.String("cn-hangzhou-h"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Star Rocks Instance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:starrocks/instance:Instance example <id>
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Password of admin user.
	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// BackendNodeGroups See `backendNodeGroups` below.
	BackendNodeGroups InstanceBackendNodeGroupArrayOutput `pulumi:"backendNodeGroups"`
	// ZoneId of instance.
	ClusterZoneId pulumi.StringOutput `pulumi:"clusterZoneId"`
	// The creation time of the instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Duration of purchase. It is only meaningful when payType is set to PrePaid.
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// Whether encrypted
	Encrypted pulumi.BoolPtrOutput `pulumi:"encrypted"`
	// FrontendNodeGroups See `frontendNodeGroups` below.
	FrontendNodeGroups InstanceFrontendNodeGroupArrayOutput `pulumi:"frontendNodeGroups"`
	// The name of the instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// KmsKeyId
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// ObserverNodeGroups See `observerNodeGroups` below.
	ObserverNodeGroups InstanceObserverNodeGroupArrayOutput `pulumi:"observerNodeGroups"`
	// Role name used for password-free access to OSS.
	OssAccessingRoleName pulumi.StringPtrOutput `pulumi:"ossAccessingRoleName"`
	// The package type of the instance:
	// - trial
	// - official
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// The pay type of the instance:
	// - prePaid
	// - postPaid
	PayType pulumi.StringOutput `pulumi:"payType"`
	// The duration unit for purchasing:
	// - Month
	// - Year
	//   This is only meaningful when PayType is set to PrePaid.
	PricingCycle pulumi.StringPtrOutput `pulumi:"pricingCycle"`
	// Promotion
	PromotionOptionNo pulumi.StringPtrOutput `pulumi:"promotionOptionNo"`
	// The region ID of the instance.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// ResourceGroupId
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The run mode of the instance:
	// - sharedNothing
	// - sharedData
	// - lakehouse
	RunMode pulumi.StringOutput `pulumi:"runMode"`
	// The status of the instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tag list of the instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The version of the instance.
	Version pulumi.StringOutput `pulumi:"version"`
	// The VPC ID of the instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The VSwitches info of the instance. See `vswitches` below.
	Vswitches InstanceVswitchArrayOutput `pulumi:"vswitches"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdminPassword'")
	}
	if args.ClusterZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterZoneId'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.PackageType == nil {
		return nil, errors.New("invalid value for required argument 'PackageType'")
	}
	if args.PayType == nil {
		return nil, errors.New("invalid value for required argument 'PayType'")
	}
	if args.RunMode == nil {
		return nil, errors.New("invalid value for required argument 'RunMode'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("alicloud:index/starRocksInstance:StarRocksInstance"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("alicloud:starrocks/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("alicloud:starrocks/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Password of admin user.
	AdminPassword *string `pulumi:"adminPassword"`
	// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
	AutoRenew *bool `pulumi:"autoRenew"`
	// BackendNodeGroups See `backendNodeGroups` below.
	BackendNodeGroups []InstanceBackendNodeGroup `pulumi:"backendNodeGroups"`
	// ZoneId of instance.
	ClusterZoneId *string `pulumi:"clusterZoneId"`
	// The creation time of the instance.
	CreateTime *string `pulumi:"createTime"`
	// Duration of purchase. It is only meaningful when payType is set to PrePaid.
	Duration *int `pulumi:"duration"`
	// Whether encrypted
	Encrypted *bool `pulumi:"encrypted"`
	// FrontendNodeGroups See `frontendNodeGroups` below.
	FrontendNodeGroups []InstanceFrontendNodeGroup `pulumi:"frontendNodeGroups"`
	// The name of the instance.
	InstanceName *string `pulumi:"instanceName"`
	// KmsKeyId
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// ObserverNodeGroups See `observerNodeGroups` below.
	ObserverNodeGroups []InstanceObserverNodeGroup `pulumi:"observerNodeGroups"`
	// Role name used for password-free access to OSS.
	OssAccessingRoleName *string `pulumi:"ossAccessingRoleName"`
	// The package type of the instance:
	// - trial
	// - official
	PackageType *string `pulumi:"packageType"`
	// The pay type of the instance:
	// - prePaid
	// - postPaid
	PayType *string `pulumi:"payType"`
	// The duration unit for purchasing:
	// - Month
	// - Year
	//   This is only meaningful when PayType is set to PrePaid.
	PricingCycle *string `pulumi:"pricingCycle"`
	// Promotion
	PromotionOptionNo *string `pulumi:"promotionOptionNo"`
	// The region ID of the instance.
	RegionId *string `pulumi:"regionId"`
	// ResourceGroupId
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The run mode of the instance:
	// - sharedNothing
	// - sharedData
	// - lakehouse
	RunMode *string `pulumi:"runMode"`
	// The status of the instance.
	Status *string `pulumi:"status"`
	// Tag list of the instance.
	Tags map[string]string `pulumi:"tags"`
	// The version of the instance.
	Version *string `pulumi:"version"`
	// The VPC ID of the instance.
	VpcId *string `pulumi:"vpcId"`
	// The VSwitches info of the instance. See `vswitches` below.
	Vswitches []InstanceVswitch `pulumi:"vswitches"`
}

type InstanceState struct {
	// Password of admin user.
	AdminPassword pulumi.StringPtrInput
	// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
	AutoRenew pulumi.BoolPtrInput
	// BackendNodeGroups See `backendNodeGroups` below.
	BackendNodeGroups InstanceBackendNodeGroupArrayInput
	// ZoneId of instance.
	ClusterZoneId pulumi.StringPtrInput
	// The creation time of the instance.
	CreateTime pulumi.StringPtrInput
	// Duration of purchase. It is only meaningful when payType is set to PrePaid.
	Duration pulumi.IntPtrInput
	// Whether encrypted
	Encrypted pulumi.BoolPtrInput
	// FrontendNodeGroups See `frontendNodeGroups` below.
	FrontendNodeGroups InstanceFrontendNodeGroupArrayInput
	// The name of the instance.
	InstanceName pulumi.StringPtrInput
	// KmsKeyId
	KmsKeyId pulumi.StringPtrInput
	// ObserverNodeGroups See `observerNodeGroups` below.
	ObserverNodeGroups InstanceObserverNodeGroupArrayInput
	// Role name used for password-free access to OSS.
	OssAccessingRoleName pulumi.StringPtrInput
	// The package type of the instance:
	// - trial
	// - official
	PackageType pulumi.StringPtrInput
	// The pay type of the instance:
	// - prePaid
	// - postPaid
	PayType pulumi.StringPtrInput
	// The duration unit for purchasing:
	// - Month
	// - Year
	//   This is only meaningful when PayType is set to PrePaid.
	PricingCycle pulumi.StringPtrInput
	// Promotion
	PromotionOptionNo pulumi.StringPtrInput
	// The region ID of the instance.
	RegionId pulumi.StringPtrInput
	// ResourceGroupId
	ResourceGroupId pulumi.StringPtrInput
	// The run mode of the instance:
	// - sharedNothing
	// - sharedData
	// - lakehouse
	RunMode pulumi.StringPtrInput
	// The status of the instance.
	Status pulumi.StringPtrInput
	// Tag list of the instance.
	Tags pulumi.StringMapInput
	// The version of the instance.
	Version pulumi.StringPtrInput
	// The VPC ID of the instance.
	VpcId pulumi.StringPtrInput
	// The VSwitches info of the instance. See `vswitches` below.
	Vswitches InstanceVswitchArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Password of admin user.
	AdminPassword string `pulumi:"adminPassword"`
	// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
	AutoRenew *bool `pulumi:"autoRenew"`
	// BackendNodeGroups See `backendNodeGroups` below.
	BackendNodeGroups []InstanceBackendNodeGroup `pulumi:"backendNodeGroups"`
	// ZoneId of instance.
	ClusterZoneId string `pulumi:"clusterZoneId"`
	// Duration of purchase. It is only meaningful when payType is set to PrePaid.
	Duration *int `pulumi:"duration"`
	// Whether encrypted
	Encrypted *bool `pulumi:"encrypted"`
	// FrontendNodeGroups See `frontendNodeGroups` below.
	FrontendNodeGroups []InstanceFrontendNodeGroup `pulumi:"frontendNodeGroups"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// KmsKeyId
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// ObserverNodeGroups See `observerNodeGroups` below.
	ObserverNodeGroups []InstanceObserverNodeGroup `pulumi:"observerNodeGroups"`
	// Role name used for password-free access to OSS.
	OssAccessingRoleName *string `pulumi:"ossAccessingRoleName"`
	// The package type of the instance:
	// - trial
	// - official
	PackageType string `pulumi:"packageType"`
	// The pay type of the instance:
	// - prePaid
	// - postPaid
	PayType string `pulumi:"payType"`
	// The duration unit for purchasing:
	// - Month
	// - Year
	//   This is only meaningful when PayType is set to PrePaid.
	PricingCycle *string `pulumi:"pricingCycle"`
	// Promotion
	PromotionOptionNo *string `pulumi:"promotionOptionNo"`
	// ResourceGroupId
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The run mode of the instance:
	// - sharedNothing
	// - sharedData
	// - lakehouse
	RunMode string `pulumi:"runMode"`
	// Tag list of the instance.
	Tags map[string]string `pulumi:"tags"`
	// The version of the instance.
	Version string `pulumi:"version"`
	// The VPC ID of the instance.
	VpcId string `pulumi:"vpcId"`
	// The VSwitches info of the instance. See `vswitches` below.
	Vswitches []InstanceVswitch `pulumi:"vswitches"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Password of admin user.
	AdminPassword pulumi.StringInput
	// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
	AutoRenew pulumi.BoolPtrInput
	// BackendNodeGroups See `backendNodeGroups` below.
	BackendNodeGroups InstanceBackendNodeGroupArrayInput
	// ZoneId of instance.
	ClusterZoneId pulumi.StringInput
	// Duration of purchase. It is only meaningful when payType is set to PrePaid.
	Duration pulumi.IntPtrInput
	// Whether encrypted
	Encrypted pulumi.BoolPtrInput
	// FrontendNodeGroups See `frontendNodeGroups` below.
	FrontendNodeGroups InstanceFrontendNodeGroupArrayInput
	// The name of the instance.
	InstanceName pulumi.StringInput
	// KmsKeyId
	KmsKeyId pulumi.StringPtrInput
	// ObserverNodeGroups See `observerNodeGroups` below.
	ObserverNodeGroups InstanceObserverNodeGroupArrayInput
	// Role name used for password-free access to OSS.
	OssAccessingRoleName pulumi.StringPtrInput
	// The package type of the instance:
	// - trial
	// - official
	PackageType pulumi.StringInput
	// The pay type of the instance:
	// - prePaid
	// - postPaid
	PayType pulumi.StringInput
	// The duration unit for purchasing:
	// - Month
	// - Year
	//   This is only meaningful when PayType is set to PrePaid.
	PricingCycle pulumi.StringPtrInput
	// Promotion
	PromotionOptionNo pulumi.StringPtrInput
	// ResourceGroupId
	ResourceGroupId pulumi.StringPtrInput
	// The run mode of the instance:
	// - sharedNothing
	// - sharedData
	// - lakehouse
	RunMode pulumi.StringInput
	// Tag list of the instance.
	Tags pulumi.StringMapInput
	// The version of the instance.
	Version pulumi.StringInput
	// The VPC ID of the instance.
	VpcId pulumi.StringInput
	// The VSwitches info of the instance. See `vswitches` below.
	Vswitches InstanceVswitchArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Password of admin user.
func (o InstanceOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AdminPassword }).(pulumi.StringOutput)
}

// Whether to enable automatic renewal. This is only meaningful when payType is set to PrePaid. Disabled by default.
func (o InstanceOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// BackendNodeGroups See `backendNodeGroups` below.
func (o InstanceOutput) BackendNodeGroups() InstanceBackendNodeGroupArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceBackendNodeGroupArrayOutput { return v.BackendNodeGroups }).(InstanceBackendNodeGroupArrayOutput)
}

// ZoneId of instance.
func (o InstanceOutput) ClusterZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ClusterZoneId }).(pulumi.StringOutput)
}

// The creation time of the instance.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Duration of purchase. It is only meaningful when payType is set to PrePaid.
func (o InstanceOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Duration }).(pulumi.IntPtrOutput)
}

// Whether encrypted
func (o InstanceOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// FrontendNodeGroups See `frontendNodeGroups` below.
func (o InstanceOutput) FrontendNodeGroups() InstanceFrontendNodeGroupArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceFrontendNodeGroupArrayOutput { return v.FrontendNodeGroups }).(InstanceFrontendNodeGroupArrayOutput)
}

// The name of the instance.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// KmsKeyId
func (o InstanceOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// ObserverNodeGroups See `observerNodeGroups` below.
func (o InstanceOutput) ObserverNodeGroups() InstanceObserverNodeGroupArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceObserverNodeGroupArrayOutput { return v.ObserverNodeGroups }).(InstanceObserverNodeGroupArrayOutput)
}

// Role name used for password-free access to OSS.
func (o InstanceOutput) OssAccessingRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.OssAccessingRoleName }).(pulumi.StringPtrOutput)
}

// The package type of the instance:
// - trial
// - official
func (o InstanceOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

// The pay type of the instance:
// - prePaid
// - postPaid
func (o InstanceOutput) PayType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PayType }).(pulumi.StringOutput)
}

// The duration unit for purchasing:
//   - Month
//   - Year
//     This is only meaningful when PayType is set to PrePaid.
func (o InstanceOutput) PricingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.PricingCycle }).(pulumi.StringPtrOutput)
}

// Promotion
func (o InstanceOutput) PromotionOptionNo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.PromotionOptionNo }).(pulumi.StringPtrOutput)
}

// The region ID of the instance.
func (o InstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// ResourceGroupId
func (o InstanceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The run mode of the instance:
// - sharedNothing
// - sharedData
// - lakehouse
func (o InstanceOutput) RunMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.RunMode }).(pulumi.StringOutput)
}

// The status of the instance.
func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tag list of the instance.
func (o InstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The version of the instance.
func (o InstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The VPC ID of the instance.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The VSwitches info of the instance. See `vswitches` below.
func (o InstanceOutput) Vswitches() InstanceVswitchArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceVswitchArrayOutput { return v.Vswitches }).(InstanceVswitchArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
