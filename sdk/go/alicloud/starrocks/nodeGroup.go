// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package starrocks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Star Rocks Node Group resource.
//
// For information about Star Rocks Node Group and how to use it, see [What is Node Group](https://next.api.alibabacloud.com/document/starrocks/2022-10-19/CreateNodeGroup).
//
// > **NOTE:** Available since v1.262.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/starrocks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultq6pcFe, err := vpc.NewNetwork(ctx, "defaultq6pcFe", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//				VpcName:   pulumi.String("example-vpc-487"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultujlpyG, err := vpc.NewSwitch(ctx, "defaultujlpyG", &vpc.SwitchArgs{
//				VpcId:       defaultq6pcFe.ID(),
//				ZoneId:      pulumi.String("cn-hangzhou-i"),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				VswitchName: pulumi.String("sr-example-ng"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultvjnpM0, err := starrocks.NewInstance(ctx, "defaultvjnpM0", &starrocks.InstanceArgs{
//				ClusterZoneId: pulumi.String("cn-hangzhou-i"),
//				Encrypted:     pulumi.Bool(false),
//				AutoRenew:     pulumi.Bool(false),
//				PayType:       pulumi.String("postPaid"),
//				FrontendNodeGroups: starrocks.InstanceFrontendNodeGroupArray{
//					&starrocks.InstanceFrontendNodeGroupArgs{
//						Cu:                      pulumi.Int(8),
//						StorageSize:             pulumi.Int(100),
//						StoragePerformanceLevel: pulumi.String("pl1"),
//						DiskNumber:              pulumi.Int(1),
//						ZoneId:                  pulumi.String("cn-hangzhou-i"),
//						SpecType:                pulumi.String("standard"),
//						ResidentNodeNumber:      pulumi.Int(1),
//					},
//				},
//				InstanceName: pulumi.String("t1"),
//				Vswitches: starrocks.InstanceVswitchArray{
//					&starrocks.InstanceVswitchArgs{
//						ZoneId:    pulumi.String("cn-hangzhou-i"),
//						VswitchId: defaultujlpyG.ID(),
//					},
//				},
//				VpcId:                defaultq6pcFe.ID(),
//				Version:              pulumi.String("3.3"),
//				RunMode:              pulumi.String("shared_data"),
//				PackageType:          pulumi.String("official"),
//				OssAccessingRoleName: pulumi.String("AliyunEMRStarRocksAccessingOSSRolecn"),
//				AdminPassword:        pulumi.String("1qaz@QAZ"),
//				BackendNodeGroups: starrocks.InstanceBackendNodeGroupArray{
//					&starrocks.InstanceBackendNodeGroupArgs{
//						Cu:                      pulumi.Int(8),
//						StorageSize:             pulumi.Int(200),
//						ZoneId:                  pulumi.String("cn-hangzhou-i"),
//						SpecType:                pulumi.String("standard"),
//						ResidentNodeNumber:      pulumi.Int(3),
//						DiskNumber:              pulumi.Int(1),
//						StoragePerformanceLevel: pulumi.String("pl1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = starrocks.NewNodeGroup(ctx, "default", &starrocks.NodeGroupArgs{
//				Description:              pulumi.String("example_desc"),
//				NodeGroupName:            pulumi.String("ng_676"),
//				InstanceId:               defaultvjnpM0.ID(),
//				SpecType:                 pulumi.String("standard"),
//				StoragePerformanceLevel:  pulumi.String("pl1"),
//				PricingCycle:             pulumi.String("1"),
//				AutoRenew:                pulumi.Bool(false),
//				StorageSize:              pulumi.Int(200),
//				Duration:                 pulumi.Int(1),
//				PayType:                  pulumi.String("postPaid"),
//				Cu:                       pulumi.Int(8),
//				DiskNumber:               pulumi.Int(1),
//				ResidentNodeNumber:       pulumi.Int(1),
//				LocalStorageInstanceType: pulumi.String("non_local_storage"),
//				PromotionOptionNo:        pulumi.String("blank"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Star Rocks Node Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:starrocks/nodeGroup:NodeGroup example <instance_id>:<node_group_id>
// ```
type NodeGroup struct {
	pulumi.CustomResourceState

	// Whether auto-renewal is enabled.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// The creation time of the node group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
	Cu pulumi.IntPtrOutput `pulumi:"cu"`
	// Description of node group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of disks.
	DiskNumber pulumi.IntPtrOutput `pulumi:"diskNumber"`
	// Duration of node group.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// Whether to restart in fast restart mode. The default is false.
	// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
	// - false: Restarts the compute node in rolling restart mode.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	FastMode pulumi.BoolPtrOutput `pulumi:"fastMode"`
	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
	LocalStorageInstanceType pulumi.StringPtrOutput `pulumi:"localStorageInstanceType"`
	// The ID of the node group.
	NodeGroupId pulumi.StringOutput `pulumi:"nodeGroupId"`
	// The name of the node group.
	NodeGroupName pulumi.StringPtrOutput `pulumi:"nodeGroupName"`
	// Payment type:
	// - PrePaid: Subscription (prepaid).
	// - PostPaid: Pay-as-you-go (postpaid).
	PayType pulumi.StringPtrOutput `pulumi:"payType"`
	// Unit of purchase duration:
	// - Month
	// - Year
	//
	// This is only applicable when payType is set to PrePaid.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	PricingCycle      pulumi.StringPtrOutput `pulumi:"pricingCycle"`
	PromotionOptionNo pulumi.StringPtrOutput `pulumi:"promotionOptionNo"`
	// The region ID of the node group.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Number of nodes.
	ResidentNodeNumber pulumi.IntPtrOutput `pulumi:"residentNodeNumber"`
	// Node group spec types include the following:
	// - standard: Standard edition.
	// - localSSD: Local SSD.
	// - bigData: Large-scale storage.
	// - ramEnhanced: Memory-enhanced type.
	// - networkEnhanced: Network-enhanced type.
	SpecType pulumi.StringPtrOutput `pulumi:"specType"`
	// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
	Status pulumi.StringOutput `pulumi:"status"`
	// Performance levels of the cloud disk. Includes the following values:
	// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
	// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
	// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
	// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
	StoragePerformanceLevel pulumi.StringPtrOutput `pulumi:"storagePerformanceLevel"`
	// Storage size, measured in GiB.
	StorageSize pulumi.IntPtrOutput `pulumi:"storageSize"`
}

// NewNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewNodeGroup(ctx *pulumi.Context,
	name string, args *NodeGroupArgs, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	if args == nil {
		args = &NodeGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeGroup
	err := ctx.RegisterResource("alicloud:starrocks/nodeGroup:NodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeGroup gets an existing NodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeGroupState, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	var resource NodeGroup
	err := ctx.ReadResource("alicloud:starrocks/nodeGroup:NodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeGroup resources.
type nodeGroupState struct {
	// Whether auto-renewal is enabled.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The creation time of the node group.
	CreateTime *string `pulumi:"createTime"`
	// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
	Cu *int `pulumi:"cu"`
	// Description of node group.
	Description *string `pulumi:"description"`
	// Number of disks.
	DiskNumber *int `pulumi:"diskNumber"`
	// Duration of node group.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	Duration *int `pulumi:"duration"`
	// Whether to restart in fast restart mode. The default is false.
	// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
	// - false: Restarts the compute node in rolling restart mode.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	FastMode *bool `pulumi:"fastMode"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
	LocalStorageInstanceType *string `pulumi:"localStorageInstanceType"`
	// The ID of the node group.
	NodeGroupId *string `pulumi:"nodeGroupId"`
	// The name of the node group.
	NodeGroupName *string `pulumi:"nodeGroupName"`
	// Payment type:
	// - PrePaid: Subscription (prepaid).
	// - PostPaid: Pay-as-you-go (postpaid).
	PayType *string `pulumi:"payType"`
	// Unit of purchase duration:
	// - Month
	// - Year
	//
	// This is only applicable when payType is set to PrePaid.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	PricingCycle      *string `pulumi:"pricingCycle"`
	PromotionOptionNo *string `pulumi:"promotionOptionNo"`
	// The region ID of the node group.
	RegionId *string `pulumi:"regionId"`
	// Number of nodes.
	ResidentNodeNumber *int `pulumi:"residentNodeNumber"`
	// Node group spec types include the following:
	// - standard: Standard edition.
	// - localSSD: Local SSD.
	// - bigData: Large-scale storage.
	// - ramEnhanced: Memory-enhanced type.
	// - networkEnhanced: Network-enhanced type.
	SpecType *string `pulumi:"specType"`
	// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
	Status *string `pulumi:"status"`
	// Performance levels of the cloud disk. Includes the following values:
	// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
	// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
	// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
	// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
	StoragePerformanceLevel *string `pulumi:"storagePerformanceLevel"`
	// Storage size, measured in GiB.
	StorageSize *int `pulumi:"storageSize"`
}

type NodeGroupState struct {
	// Whether auto-renewal is enabled.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	AutoRenew pulumi.BoolPtrInput
	// The creation time of the node group.
	CreateTime pulumi.StringPtrInput
	// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
	Cu pulumi.IntPtrInput
	// Description of node group.
	Description pulumi.StringPtrInput
	// Number of disks.
	DiskNumber pulumi.IntPtrInput
	// Duration of node group.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	Duration pulumi.IntPtrInput
	// Whether to restart in fast restart mode. The default is false.
	// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
	// - false: Restarts the compute node in rolling restart mode.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	FastMode pulumi.BoolPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
	LocalStorageInstanceType pulumi.StringPtrInput
	// The ID of the node group.
	NodeGroupId pulumi.StringPtrInput
	// The name of the node group.
	NodeGroupName pulumi.StringPtrInput
	// Payment type:
	// - PrePaid: Subscription (prepaid).
	// - PostPaid: Pay-as-you-go (postpaid).
	PayType pulumi.StringPtrInput
	// Unit of purchase duration:
	// - Month
	// - Year
	//
	// This is only applicable when payType is set to PrePaid.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	PricingCycle      pulumi.StringPtrInput
	PromotionOptionNo pulumi.StringPtrInput
	// The region ID of the node group.
	RegionId pulumi.StringPtrInput
	// Number of nodes.
	ResidentNodeNumber pulumi.IntPtrInput
	// Node group spec types include the following:
	// - standard: Standard edition.
	// - localSSD: Local SSD.
	// - bigData: Large-scale storage.
	// - ramEnhanced: Memory-enhanced type.
	// - networkEnhanced: Network-enhanced type.
	SpecType pulumi.StringPtrInput
	// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
	Status pulumi.StringPtrInput
	// Performance levels of the cloud disk. Includes the following values:
	// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
	// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
	// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
	// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
	StoragePerformanceLevel pulumi.StringPtrInput
	// Storage size, measured in GiB.
	StorageSize pulumi.IntPtrInput
}

func (NodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupState)(nil)).Elem()
}

type nodeGroupArgs struct {
	// Whether auto-renewal is enabled.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
	Cu *int `pulumi:"cu"`
	// Description of node group.
	Description *string `pulumi:"description"`
	// Number of disks.
	DiskNumber *int `pulumi:"diskNumber"`
	// Duration of node group.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	Duration *int `pulumi:"duration"`
	// Whether to restart in fast restart mode. The default is false.
	// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
	// - false: Restarts the compute node in rolling restart mode.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	FastMode *bool `pulumi:"fastMode"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
	LocalStorageInstanceType *string `pulumi:"localStorageInstanceType"`
	// The name of the node group.
	NodeGroupName *string `pulumi:"nodeGroupName"`
	// Payment type:
	// - PrePaid: Subscription (prepaid).
	// - PostPaid: Pay-as-you-go (postpaid).
	PayType *string `pulumi:"payType"`
	// Unit of purchase duration:
	// - Month
	// - Year
	//
	// This is only applicable when payType is set to PrePaid.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	PricingCycle      *string `pulumi:"pricingCycle"`
	PromotionOptionNo *string `pulumi:"promotionOptionNo"`
	// Number of nodes.
	ResidentNodeNumber *int `pulumi:"residentNodeNumber"`
	// Node group spec types include the following:
	// - standard: Standard edition.
	// - localSSD: Local SSD.
	// - bigData: Large-scale storage.
	// - ramEnhanced: Memory-enhanced type.
	// - networkEnhanced: Network-enhanced type.
	SpecType *string `pulumi:"specType"`
	// Performance levels of the cloud disk. Includes the following values:
	// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
	// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
	// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
	// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
	StoragePerformanceLevel *string `pulumi:"storagePerformanceLevel"`
	// Storage size, measured in GiB.
	StorageSize *int `pulumi:"storageSize"`
}

// The set of arguments for constructing a NodeGroup resource.
type NodeGroupArgs struct {
	// Whether auto-renewal is enabled.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	AutoRenew pulumi.BoolPtrInput
	// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
	Cu pulumi.IntPtrInput
	// Description of node group.
	Description pulumi.StringPtrInput
	// Number of disks.
	DiskNumber pulumi.IntPtrInput
	// Duration of node group.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	Duration pulumi.IntPtrInput
	// Whether to restart in fast restart mode. The default is false.
	// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
	// - false: Restarts the compute node in rolling restart mode.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	FastMode pulumi.BoolPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
	LocalStorageInstanceType pulumi.StringPtrInput
	// The name of the node group.
	NodeGroupName pulumi.StringPtrInput
	// Payment type:
	// - PrePaid: Subscription (prepaid).
	// - PostPaid: Pay-as-you-go (postpaid).
	PayType pulumi.StringPtrInput
	// Unit of purchase duration:
	// - Month
	// - Year
	//
	// This is only applicable when payType is set to PrePaid.
	//
	// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
	PricingCycle      pulumi.StringPtrInput
	PromotionOptionNo pulumi.StringPtrInput
	// Number of nodes.
	ResidentNodeNumber pulumi.IntPtrInput
	// Node group spec types include the following:
	// - standard: Standard edition.
	// - localSSD: Local SSD.
	// - bigData: Large-scale storage.
	// - ramEnhanced: Memory-enhanced type.
	// - networkEnhanced: Network-enhanced type.
	SpecType pulumi.StringPtrInput
	// Performance levels of the cloud disk. Includes the following values:
	// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
	// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
	// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
	// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
	StoragePerformanceLevel pulumi.StringPtrInput
	// Storage size, measured in GiB.
	StorageSize pulumi.IntPtrInput
}

func (NodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupArgs)(nil)).Elem()
}

type NodeGroupInput interface {
	pulumi.Input

	ToNodeGroupOutput() NodeGroupOutput
	ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput
}

func (*NodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (i *NodeGroup) ToNodeGroupOutput() NodeGroupOutput {
	return i.ToNodeGroupOutputWithContext(context.Background())
}

func (i *NodeGroup) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupOutput)
}

// NodeGroupArrayInput is an input type that accepts NodeGroupArray and NodeGroupArrayOutput values.
// You can construct a concrete instance of `NodeGroupArrayInput` via:
//
//	NodeGroupArray{ NodeGroupArgs{...} }
type NodeGroupArrayInput interface {
	pulumi.Input

	ToNodeGroupArrayOutput() NodeGroupArrayOutput
	ToNodeGroupArrayOutputWithContext(context.Context) NodeGroupArrayOutput
}

type NodeGroupArray []NodeGroupInput

func (NodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupArray) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return i.ToNodeGroupArrayOutputWithContext(context.Background())
}

func (i NodeGroupArray) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupArrayOutput)
}

// NodeGroupMapInput is an input type that accepts NodeGroupMap and NodeGroupMapOutput values.
// You can construct a concrete instance of `NodeGroupMapInput` via:
//
//	NodeGroupMap{ "key": NodeGroupArgs{...} }
type NodeGroupMapInput interface {
	pulumi.Input

	ToNodeGroupMapOutput() NodeGroupMapOutput
	ToNodeGroupMapOutputWithContext(context.Context) NodeGroupMapOutput
}

type NodeGroupMap map[string]NodeGroupInput

func (NodeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupMap) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return i.ToNodeGroupMapOutputWithContext(context.Background())
}

func (i NodeGroupMap) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMapOutput)
}

type NodeGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (o NodeGroupOutput) ToNodeGroupOutput() NodeGroupOutput {
	return o
}

func (o NodeGroupOutput) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return o
}

// Whether auto-renewal is enabled.
//
// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
func (o NodeGroupOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The creation time of the node group.
func (o NodeGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Number of CUs. CU (Compute Unit) is the basic unit of service measurement, where 1 CU = 1 vCPU + 4 GiB memory. When SpecType is memory-optimized, 1 CU = 1 vCPU + 8 GiB memory.
func (o NodeGroupOutput) Cu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntPtrOutput { return v.Cu }).(pulumi.IntPtrOutput)
}

// Description of node group.
func (o NodeGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of disks.
func (o NodeGroupOutput) DiskNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntPtrOutput { return v.DiskNumber }).(pulumi.IntPtrOutput)
}

// Duration of node group.
//
// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
func (o NodeGroupOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntPtrOutput { return v.Duration }).(pulumi.IntPtrOutput)
}

// Whether to restart in fast restart mode. The default is false.
// - true: Reboots the compute node in fast restart mode. Restart computing nodes in multiple batches, restart in parallel within a batch, and execute serially between batches;
// - false: Restarts the compute node in rolling restart mode.
//
// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
func (o NodeGroupOutput) FastMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.BoolPtrOutput { return v.FastMode }).(pulumi.BoolPtrOutput)
}

// The ID of the instance.
func (o NodeGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Node group local SSD instance specification. This value is only relevant when based on ECS instances and SpecType is set to local SSD/large-scale storage.
func (o NodeGroupOutput) LocalStorageInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.LocalStorageInstanceType }).(pulumi.StringPtrOutput)
}

// The ID of the node group.
func (o NodeGroupOutput) NodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeGroupId }).(pulumi.StringOutput)
}

// The name of the node group.
func (o NodeGroupOutput) NodeGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.NodeGroupName }).(pulumi.StringPtrOutput)
}

// Payment type:
// - PrePaid: Subscription (prepaid).
// - PostPaid: Pay-as-you-go (postpaid).
func (o NodeGroupOutput) PayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.PayType }).(pulumi.StringPtrOutput)
}

// Unit of purchase duration:
// - Month
// - Year
//
// This is only applicable when payType is set to PrePaid.
//
// > **NOTE:** The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.
func (o NodeGroupOutput) PricingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.PricingCycle }).(pulumi.StringPtrOutput)
}

func (o NodeGroupOutput) PromotionOptionNo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.PromotionOptionNo }).(pulumi.StringPtrOutput)
}

// The region ID of the node group.
func (o NodeGroupOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Number of nodes.
func (o NodeGroupOutput) ResidentNodeNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntPtrOutput { return v.ResidentNodeNumber }).(pulumi.IntPtrOutput)
}

// Node group spec types include the following:
// - standard: Standard edition.
// - localSSD: Local SSD.
// - bigData: Large-scale storage.
// - ramEnhanced: Memory-enhanced type.
// - networkEnhanced: Network-enhanced type.
func (o NodeGroupOutput) SpecType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.SpecType }).(pulumi.StringPtrOutput)
}

// Node group status, including the following values:_FAILED: Creation failed._CONFIG: Modifying configuration._TIMEZONE: Modifying timezone._SCALING_OUT: Elastic scaling out._SCALING_IN: Elastic scaling in._OUT: Scaling out._IN: Scaling in._UP: Scaling up (upgrading configuration)._DOWN: Scaling down (downgrading configuration)._PUBLIC_NETWORK: Enabling public network._PUBLIC_NETWORK: Disabling public network._AZ: Switching availability zones.
func (o NodeGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Performance levels of the cloud disk. Includes the following values:
// - pl0: Maximum random read/write IOPS of a single disk is 10,000.
// - pl1: Maximum random read/write IOPS of a single disk is 50,000.
// - pl2: Maximum random read/write IOPS of a single disk is 100,000.
// - pl3: Maximum random read/write IOPS of a single disk is 1,000,000.
func (o NodeGroupOutput) StoragePerformanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringPtrOutput { return v.StoragePerformanceLevel }).(pulumi.StringPtrOutput)
}

// Storage size, measured in GiB.
func (o NodeGroupOutput) StorageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntPtrOutput { return v.StorageSize }).(pulumi.IntPtrOutput)
}

type NodeGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) Index(i pulumi.IntInput) NodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].([]*NodeGroup)[vs[1].(int)]
	}).(NodeGroupOutput)
}

type NodeGroupMapOutput struct{ *pulumi.OutputState }

func (NodeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) MapIndex(k pulumi.StringInput) NodeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].(map[string]*NodeGroup)[vs[1].(string)]
	}).(NodeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupInput)(nil)).Elem(), &NodeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupArrayInput)(nil)).Elem(), NodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupMapInput)(nil)).Elem(), NodeGroupMap{})
	pulumi.RegisterOutputType(NodeGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupMapOutput{})
}
