// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a ECS Snapshot Group resource.
//
// For information about ECS Snapshot Group and how to use it, see [What is Snapshot Group](https://www.alibabacloud.com/help/en/doc-detail/210939.html).
//
// > **NOTE:** Available in v1.160.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("Instance"),
//				AvailableDiskCategory:     pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
//				AvailabilityZone:   pulumi.StringRef(defaultZones.Zones[0].Id),
//				SystemDiskCategory: pulumi.StringRef("cloud_essd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				Owners: pulumi.StringRef("system"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.17.3.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VswitchName: pulumi.String("terraform-example"),
//				CidrBlock:   pulumi.String("172.17.3.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := ecs.NewInstance(ctx, "defaultInstance", &ecs.InstanceArgs{
//				AvailabilityZone: *pulumi.String(defaultZones.Zones[0].Id),
//				InstanceName:     pulumi.String("terraform-example"),
//				SecurityGroups: pulumi.StringArray{
//					defaultSecurityGroup.ID(),
//				},
//				VswitchId:               defaultSwitch.ID(),
//				InstanceType:            *pulumi.String(defaultInstanceTypes.InstanceTypes[0].Id),
//				ImageId:                 *pulumi.String(defaultImages.Images[0].Id),
//				InternetMaxBandwidthOut: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			defaultEcsDisk, err := ecs.NewEcsDisk(ctx, "defaultEcsDisk", &ecs.EcsDiskArgs{
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				DiskName:    pulumi.String("terraform-example"),
//				Description: pulumi.String("terraform-example"),
//				Category:    pulumi.String("cloud_essd"),
//				Size:        pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewDiskAttachment(ctx, "defaultDiskAttachment", &ecs.DiskAttachmentArgs{
//				DiskId:     defaultEcsDisk.ID(),
//				InstanceId: defaultInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewEcsSnapshotGroup(ctx, "defaultEcsSnapshotGroup", &ecs.EcsSnapshotGroupArgs{
//				Description: pulumi.String("terraform-example"),
//				DiskIds: pulumi.StringArray{
//					defaultEcsDisk.ID(),
//				},
//				SnapshotGroupName:          pulumi.String("terraform-example"),
//				InstanceId:                 defaultInstance.ID(),
//				InstantAccess:              pulumi.Bool(true),
//				InstantAccessRetentionDays: pulumi.Int(1),
//				Tags: pulumi.Map{
//					"Created": pulumi.Any("TF"),
//					"For":     pulumi.Any("Acceptance"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ECS Snapshot Group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup example <id>
//
// ```
type EcsSnapshotGroup struct {
	pulumi.CustomResourceState

	// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
	DiskIds pulumi.StringArrayOutput `pulumi:"diskIds"`
	// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
	ExcludeDiskIds pulumi.StringArrayOutput `pulumi:"excludeDiskIds"`
	// The ID of the instance.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// Specifies whether to enable the instant access feature.
	InstantAccess pulumi.BoolPtrOutput `pulumi:"instantAccess"`
	// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
	InstantAccessRetentionDays pulumi.IntPtrOutput `pulumi:"instantAccessRetentionDays"`
	// The ID of the resource group to which the snapshot consistency group belongs.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
	SnapshotGroupName pulumi.StringPtrOutput `pulumi:"snapshotGroupName"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// A mapping of tags to assign to the snapshot group.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewEcsSnapshotGroup registers a new resource with the given unique name, arguments, and options.
func NewEcsSnapshotGroup(ctx *pulumi.Context,
	name string, args *EcsSnapshotGroupArgs, opts ...pulumi.ResourceOption) (*EcsSnapshotGroup, error) {
	if args == nil {
		args = &EcsSnapshotGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EcsSnapshotGroup
	err := ctx.RegisterResource("alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsSnapshotGroup gets an existing EcsSnapshotGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsSnapshotGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsSnapshotGroupState, opts ...pulumi.ResourceOption) (*EcsSnapshotGroup, error) {
	var resource EcsSnapshotGroup
	err := ctx.ReadResource("alicloud:ecs/ecsSnapshotGroup:EcsSnapshotGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsSnapshotGroup resources.
type ecsSnapshotGroupState struct {
	// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
	DiskIds []string `pulumi:"diskIds"`
	// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
	ExcludeDiskIds []string `pulumi:"excludeDiskIds"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to enable the instant access feature.
	InstantAccess *bool `pulumi:"instantAccess"`
	// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
	InstantAccessRetentionDays *int `pulumi:"instantAccessRetentionDays"`
	// The ID of the resource group to which the snapshot consistency group belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
	SnapshotGroupName *string `pulumi:"snapshotGroupName"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the snapshot group.
	Tags map[string]interface{} `pulumi:"tags"`
}

type EcsSnapshotGroupState struct {
	// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
	DiskIds pulumi.StringArrayInput
	// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
	ExcludeDiskIds pulumi.StringArrayInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to enable the instant access feature.
	InstantAccess pulumi.BoolPtrInput
	// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
	InstantAccessRetentionDays pulumi.IntPtrInput
	// The ID of the resource group to which the snapshot consistency group belongs.
	ResourceGroupId pulumi.StringPtrInput
	// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
	SnapshotGroupName pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the snapshot group.
	Tags pulumi.MapInput
}

func (EcsSnapshotGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsSnapshotGroupState)(nil)).Elem()
}

type ecsSnapshotGroupArgs struct {
	// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
	DiskIds []string `pulumi:"diskIds"`
	// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
	ExcludeDiskIds []string `pulumi:"excludeDiskIds"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to enable the instant access feature.
	InstantAccess *bool `pulumi:"instantAccess"`
	// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
	InstantAccessRetentionDays *int `pulumi:"instantAccessRetentionDays"`
	// The ID of the resource group to which the snapshot consistency group belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
	SnapshotGroupName *string `pulumi:"snapshotGroupName"`
	// A mapping of tags to assign to the snapshot group.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a EcsSnapshotGroup resource.
type EcsSnapshotGroupArgs struct {
	// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
	DiskIds pulumi.StringArrayInput
	// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
	ExcludeDiskIds pulumi.StringArrayInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to enable the instant access feature.
	InstantAccess pulumi.BoolPtrInput
	// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
	InstantAccessRetentionDays pulumi.IntPtrInput
	// The ID of the resource group to which the snapshot consistency group belongs.
	ResourceGroupId pulumi.StringPtrInput
	// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
	SnapshotGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the snapshot group.
	Tags pulumi.MapInput
}

func (EcsSnapshotGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsSnapshotGroupArgs)(nil)).Elem()
}

type EcsSnapshotGroupInput interface {
	pulumi.Input

	ToEcsSnapshotGroupOutput() EcsSnapshotGroupOutput
	ToEcsSnapshotGroupOutputWithContext(ctx context.Context) EcsSnapshotGroupOutput
}

func (*EcsSnapshotGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsSnapshotGroup)(nil)).Elem()
}

func (i *EcsSnapshotGroup) ToEcsSnapshotGroupOutput() EcsSnapshotGroupOutput {
	return i.ToEcsSnapshotGroupOutputWithContext(context.Background())
}

func (i *EcsSnapshotGroup) ToEcsSnapshotGroupOutputWithContext(ctx context.Context) EcsSnapshotGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotGroupOutput)
}

func (i *EcsSnapshotGroup) ToOutput(ctx context.Context) pulumix.Output[*EcsSnapshotGroup] {
	return pulumix.Output[*EcsSnapshotGroup]{
		OutputState: i.ToEcsSnapshotGroupOutputWithContext(ctx).OutputState,
	}
}

// EcsSnapshotGroupArrayInput is an input type that accepts EcsSnapshotGroupArray and EcsSnapshotGroupArrayOutput values.
// You can construct a concrete instance of `EcsSnapshotGroupArrayInput` via:
//
//	EcsSnapshotGroupArray{ EcsSnapshotGroupArgs{...} }
type EcsSnapshotGroupArrayInput interface {
	pulumi.Input

	ToEcsSnapshotGroupArrayOutput() EcsSnapshotGroupArrayOutput
	ToEcsSnapshotGroupArrayOutputWithContext(context.Context) EcsSnapshotGroupArrayOutput
}

type EcsSnapshotGroupArray []EcsSnapshotGroupInput

func (EcsSnapshotGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsSnapshotGroup)(nil)).Elem()
}

func (i EcsSnapshotGroupArray) ToEcsSnapshotGroupArrayOutput() EcsSnapshotGroupArrayOutput {
	return i.ToEcsSnapshotGroupArrayOutputWithContext(context.Background())
}

func (i EcsSnapshotGroupArray) ToEcsSnapshotGroupArrayOutputWithContext(ctx context.Context) EcsSnapshotGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotGroupArrayOutput)
}

func (i EcsSnapshotGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*EcsSnapshotGroup] {
	return pulumix.Output[[]*EcsSnapshotGroup]{
		OutputState: i.ToEcsSnapshotGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// EcsSnapshotGroupMapInput is an input type that accepts EcsSnapshotGroupMap and EcsSnapshotGroupMapOutput values.
// You can construct a concrete instance of `EcsSnapshotGroupMapInput` via:
//
//	EcsSnapshotGroupMap{ "key": EcsSnapshotGroupArgs{...} }
type EcsSnapshotGroupMapInput interface {
	pulumi.Input

	ToEcsSnapshotGroupMapOutput() EcsSnapshotGroupMapOutput
	ToEcsSnapshotGroupMapOutputWithContext(context.Context) EcsSnapshotGroupMapOutput
}

type EcsSnapshotGroupMap map[string]EcsSnapshotGroupInput

func (EcsSnapshotGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsSnapshotGroup)(nil)).Elem()
}

func (i EcsSnapshotGroupMap) ToEcsSnapshotGroupMapOutput() EcsSnapshotGroupMapOutput {
	return i.ToEcsSnapshotGroupMapOutputWithContext(context.Background())
}

func (i EcsSnapshotGroupMap) ToEcsSnapshotGroupMapOutputWithContext(ctx context.Context) EcsSnapshotGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotGroupMapOutput)
}

func (i EcsSnapshotGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EcsSnapshotGroup] {
	return pulumix.Output[map[string]*EcsSnapshotGroup]{
		OutputState: i.ToEcsSnapshotGroupMapOutputWithContext(ctx).OutputState,
	}
}

type EcsSnapshotGroupOutput struct{ *pulumi.OutputState }

func (EcsSnapshotGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsSnapshotGroup)(nil)).Elem()
}

func (o EcsSnapshotGroupOutput) ToEcsSnapshotGroupOutput() EcsSnapshotGroupOutput {
	return o
}

func (o EcsSnapshotGroupOutput) ToEcsSnapshotGroupOutputWithContext(ctx context.Context) EcsSnapshotGroupOutput {
	return o
}

func (o EcsSnapshotGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*EcsSnapshotGroup] {
	return pulumix.Output[*EcsSnapshotGroup]{
		OutputState: o.OutputState,
	}
}

// The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
func (o EcsSnapshotGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of disk for which to create snapshots. You can specify multiple disk IDs across instances with the same zone.
func (o EcsSnapshotGroupOutput) DiskIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringArrayOutput { return v.DiskIds }).(pulumi.StringArrayOutput)
}

// The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk.
func (o EcsSnapshotGroupOutput) ExcludeDiskIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringArrayOutput { return v.ExcludeDiskIds }).(pulumi.StringArrayOutput)
}

// The ID of the instance.
func (o EcsSnapshotGroupOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the instant access feature.
func (o EcsSnapshotGroupOutput) InstantAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.BoolPtrOutput { return v.InstantAccess }).(pulumi.BoolPtrOutput)
}

// Specify the number of days for which the instant access feature is available. Unit: days. Valid values: `1` to `65535`.
func (o EcsSnapshotGroupOutput) InstantAccessRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.IntPtrOutput { return v.InstantAccessRetentionDays }).(pulumi.IntPtrOutput)
}

// The ID of the resource group to which the snapshot consistency group belongs.
func (o EcsSnapshotGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The name of the snapshot-consistent group. The name must be `2` to `128` characters in length, and can contain letters, digits, periods (.), underscores (_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.
func (o EcsSnapshotGroupOutput) SnapshotGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringPtrOutput { return v.SnapshotGroupName }).(pulumi.StringPtrOutput)
}

// The status of the resource.
func (o EcsSnapshotGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the snapshot group.
func (o EcsSnapshotGroupOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *EcsSnapshotGroup) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type EcsSnapshotGroupArrayOutput struct{ *pulumi.OutputState }

func (EcsSnapshotGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsSnapshotGroup)(nil)).Elem()
}

func (o EcsSnapshotGroupArrayOutput) ToEcsSnapshotGroupArrayOutput() EcsSnapshotGroupArrayOutput {
	return o
}

func (o EcsSnapshotGroupArrayOutput) ToEcsSnapshotGroupArrayOutputWithContext(ctx context.Context) EcsSnapshotGroupArrayOutput {
	return o
}

func (o EcsSnapshotGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EcsSnapshotGroup] {
	return pulumix.Output[[]*EcsSnapshotGroup]{
		OutputState: o.OutputState,
	}
}

func (o EcsSnapshotGroupArrayOutput) Index(i pulumi.IntInput) EcsSnapshotGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsSnapshotGroup {
		return vs[0].([]*EcsSnapshotGroup)[vs[1].(int)]
	}).(EcsSnapshotGroupOutput)
}

type EcsSnapshotGroupMapOutput struct{ *pulumi.OutputState }

func (EcsSnapshotGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsSnapshotGroup)(nil)).Elem()
}

func (o EcsSnapshotGroupMapOutput) ToEcsSnapshotGroupMapOutput() EcsSnapshotGroupMapOutput {
	return o
}

func (o EcsSnapshotGroupMapOutput) ToEcsSnapshotGroupMapOutputWithContext(ctx context.Context) EcsSnapshotGroupMapOutput {
	return o
}

func (o EcsSnapshotGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EcsSnapshotGroup] {
	return pulumix.Output[map[string]*EcsSnapshotGroup]{
		OutputState: o.OutputState,
	}
}

func (o EcsSnapshotGroupMapOutput) MapIndex(k pulumi.StringInput) EcsSnapshotGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsSnapshotGroup {
		return vs[0].(map[string]*EcsSnapshotGroup)[vs[1].(string)]
	}).(EcsSnapshotGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotGroupInput)(nil)).Elem(), &EcsSnapshotGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotGroupArrayInput)(nil)).Elem(), EcsSnapshotGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotGroupMapInput)(nil)).Elem(), EcsSnapshotGroupMap{})
	pulumi.RegisterOutputType(EcsSnapshotGroupOutput{})
	pulumi.RegisterOutputType(EcsSnapshotGroupArrayOutput{})
	pulumi.RegisterOutputType(EcsSnapshotGroupMapOutput{})
}
