// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECS Snapshot resource.
//
// For information about ECS Snapshot and how to use it, see [What is Snapshot](https://www.alibabacloud.com/help/en/doc-detail/25524.htm).
//
// > **NOTE:** Available since v1.120.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// _default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// AvailableDiskCategory: pulumi.StringRef("cloud_essd"),
// AvailableResourceCreation: pulumi.StringRef("VSwitch"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// MostRecent: pulumi.BoolRef(true),
// Owners: pulumi.StringRef("system"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// AvailabilityZone: pulumi.StringRef(_default.Zones[0].Id),
// ImageId: pulumi.StringRef(defaultGetImages.Images[0].Id),
// SystemDiskCategory: pulumi.StringRef("cloud_essd"),
// }, nil);
// if err != nil {
// return err
// }
// defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
// VpcName: pulumi.String(name),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// })
// if err != nil {
// return err
// }
// defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
// VswitchName: pulumi.String(name),
// VpcId: defaultNetwork.ID(),
// CidrBlock: pulumi.String("192.168.192.0/24"),
// ZoneId: pulumi.String(_default.Zones[0].Id),
// })
// if err != nil {
// return err
// }
// defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
// SecurityGroupName: pulumi.String(name),
// VpcId: defaultNetwork.ID(),
// })
// if err != nil {
// return err
// }
// var splat0 pulumi.StringArray
// for _, val0 := range %!v(PANIC=Format method: fatal: An assertion has failed: tok: ) {
// splat0 = append(splat0, val0.ID())
// }
// defaultInstance, err := ecs.NewInstance(ctx, "default", &ecs.InstanceArgs{
// ImageId: pulumi.String(defaultGetImages.Images[0].Id),
// InstanceType: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].Id),
// SecurityGroups: splat0,
// InternetChargeType: pulumi.String("PayByTraffic"),
// InternetMaxBandwidthOut: pulumi.Int(10),
// AvailabilityZone: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].AvailabilityZones[0]),
// InstanceChargeType: pulumi.String("PostPaid"),
// SystemDiskCategory: pulumi.String("cloud_essd"),
// VswitchId: defaultSwitch.ID(),
// InstanceName: pulumi.String(name),
// DataDisks: ecs.InstanceDataDiskArray{
// &ecs.InstanceDataDiskArgs{
// Category: pulumi.String("cloud_essd"),
// Size: pulumi.Int(20),
// },
// },
// })
// if err != nil {
// return err
// }
// defaultEcsDisk, err := ecs.NewEcsDisk(ctx, "default", &ecs.EcsDiskArgs{
// DiskName: pulumi.String(name),
// ZoneId: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].AvailabilityZones[0]),
// Category: pulumi.String("cloud_essd"),
// Size: pulumi.Int(500),
// })
// if err != nil {
// return err
// }
// defaultEcsDiskAttachment, err := ecs.NewEcsDiskAttachment(ctx, "default", &ecs.EcsDiskAttachmentArgs{
// DiskId: defaultEcsDisk.ID(),
// InstanceId: defaultInstance.ID(),
// })
// if err != nil {
// return err
// }
// _, err = ecs.NewEcsSnapshot(ctx, "default", &ecs.EcsSnapshotArgs{
// DiskId: defaultEcsDiskAttachment.DiskId,
// Category: pulumi.String("standard"),
// RetentionDays: pulumi.Int(20),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// ECS Snapshot can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ecs/ecsSnapshot:EcsSnapshot example <id>
// ```
type EcsSnapshot struct {
	pulumi.CustomResourceState

	// The category of the snapshot. Valid values:
	Category pulumi.StringOutput `pulumi:"category"`
	// (Available since v1.239.0) The time when the snapshot was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the snapshot.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the disk.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// Field `instantAccess` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
	InstantAccess pulumi.BoolPtrOutput `pulumi:"instantAccess"`
	// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	InstantAccessRetentionDays pulumi.IntPtrOutput `pulumi:"instantAccessRetentionDays"`
	// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	//
	// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Available since v1.239.0) The region ID of the snapshot.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
	ResourceGroupId pulumi.StringPtrOutput `pulumi:"resourceGroupId"`
	// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
	RetentionDays pulumi.IntPtrOutput `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName pulumi.StringOutput `pulumi:"snapshotName"`
	// The status of the Snapshot.
	Status pulumi.StringOutput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewEcsSnapshot registers a new resource with the given unique name, arguments, and options.
func NewEcsSnapshot(ctx *pulumi.Context,
	name string, args *EcsSnapshotArgs, opts ...pulumi.ResourceOption) (*EcsSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EcsSnapshot
	err := ctx.RegisterResource("alicloud:ecs/ecsSnapshot:EcsSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsSnapshot gets an existing EcsSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsSnapshotState, opts ...pulumi.ResourceOption) (*EcsSnapshot, error) {
	var resource EcsSnapshot
	err := ctx.ReadResource("alicloud:ecs/ecsSnapshot:EcsSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsSnapshot resources.
type ecsSnapshotState struct {
	// The category of the snapshot. Valid values:
	Category *string `pulumi:"category"`
	// (Available since v1.239.0) The time when the snapshot was created.
	CreateTime *string `pulumi:"createTime"`
	// The description of the snapshot.
	Description *string `pulumi:"description"`
	// The ID of the disk.
	DiskId *string `pulumi:"diskId"`
	// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
	Force *bool `pulumi:"force"`
	// Field `instantAccess` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
	InstantAccess *bool `pulumi:"instantAccess"`
	// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	InstantAccessRetentionDays *int `pulumi:"instantAccessRetentionDays"`
	// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	//
	// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	Name *string `pulumi:"name"`
	// (Available since v1.239.0) The region ID of the snapshot.
	RegionId *string `pulumi:"regionId"`
	// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
	RetentionDays *int `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
	// The status of the Snapshot.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type EcsSnapshotState struct {
	// The category of the snapshot. Valid values:
	Category pulumi.StringPtrInput
	// (Available since v1.239.0) The time when the snapshot was created.
	CreateTime pulumi.StringPtrInput
	// The description of the snapshot.
	Description pulumi.StringPtrInput
	// The ID of the disk.
	DiskId pulumi.StringPtrInput
	// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
	Force pulumi.BoolPtrInput
	// Field `instantAccess` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
	InstantAccess pulumi.BoolPtrInput
	// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	InstantAccessRetentionDays pulumi.IntPtrInput
	// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	//
	// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	Name pulumi.StringPtrInput
	// (Available since v1.239.0) The region ID of the snapshot.
	RegionId pulumi.StringPtrInput
	// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
	ResourceGroupId pulumi.StringPtrInput
	// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
	RetentionDays pulumi.IntPtrInput
	// The name of the snapshot.
	SnapshotName pulumi.StringPtrInput
	// The status of the Snapshot.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (EcsSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsSnapshotState)(nil)).Elem()
}

type ecsSnapshotArgs struct {
	// The category of the snapshot. Valid values:
	Category *string `pulumi:"category"`
	// The description of the snapshot.
	Description *string `pulumi:"description"`
	// The ID of the disk.
	DiskId string `pulumi:"diskId"`
	// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
	Force *bool `pulumi:"force"`
	// Field `instantAccess` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
	InstantAccess *bool `pulumi:"instantAccess"`
	// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	InstantAccessRetentionDays *int `pulumi:"instantAccessRetentionDays"`
	// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	//
	// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	Name *string `pulumi:"name"`
	// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
	RetentionDays *int `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EcsSnapshot resource.
type EcsSnapshotArgs struct {
	// The category of the snapshot. Valid values:
	Category pulumi.StringPtrInput
	// The description of the snapshot.
	Description pulumi.StringPtrInput
	// The ID of the disk.
	DiskId pulumi.StringInput
	// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
	Force pulumi.BoolPtrInput
	// Field `instantAccess` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
	InstantAccess pulumi.BoolPtrInput
	// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	//
	// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
	InstantAccessRetentionDays pulumi.IntPtrInput
	// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	//
	// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
	Name pulumi.StringPtrInput
	// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
	ResourceGroupId pulumi.StringPtrInput
	// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
	RetentionDays pulumi.IntPtrInput
	// The name of the snapshot.
	SnapshotName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (EcsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsSnapshotArgs)(nil)).Elem()
}

type EcsSnapshotInput interface {
	pulumi.Input

	ToEcsSnapshotOutput() EcsSnapshotOutput
	ToEcsSnapshotOutputWithContext(ctx context.Context) EcsSnapshotOutput
}

func (*EcsSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsSnapshot)(nil)).Elem()
}

func (i *EcsSnapshot) ToEcsSnapshotOutput() EcsSnapshotOutput {
	return i.ToEcsSnapshotOutputWithContext(context.Background())
}

func (i *EcsSnapshot) ToEcsSnapshotOutputWithContext(ctx context.Context) EcsSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotOutput)
}

// EcsSnapshotArrayInput is an input type that accepts EcsSnapshotArray and EcsSnapshotArrayOutput values.
// You can construct a concrete instance of `EcsSnapshotArrayInput` via:
//
//	EcsSnapshotArray{ EcsSnapshotArgs{...} }
type EcsSnapshotArrayInput interface {
	pulumi.Input

	ToEcsSnapshotArrayOutput() EcsSnapshotArrayOutput
	ToEcsSnapshotArrayOutputWithContext(context.Context) EcsSnapshotArrayOutput
}

type EcsSnapshotArray []EcsSnapshotInput

func (EcsSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsSnapshot)(nil)).Elem()
}

func (i EcsSnapshotArray) ToEcsSnapshotArrayOutput() EcsSnapshotArrayOutput {
	return i.ToEcsSnapshotArrayOutputWithContext(context.Background())
}

func (i EcsSnapshotArray) ToEcsSnapshotArrayOutputWithContext(ctx context.Context) EcsSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotArrayOutput)
}

// EcsSnapshotMapInput is an input type that accepts EcsSnapshotMap and EcsSnapshotMapOutput values.
// You can construct a concrete instance of `EcsSnapshotMapInput` via:
//
//	EcsSnapshotMap{ "key": EcsSnapshotArgs{...} }
type EcsSnapshotMapInput interface {
	pulumi.Input

	ToEcsSnapshotMapOutput() EcsSnapshotMapOutput
	ToEcsSnapshotMapOutputWithContext(context.Context) EcsSnapshotMapOutput
}

type EcsSnapshotMap map[string]EcsSnapshotInput

func (EcsSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsSnapshot)(nil)).Elem()
}

func (i EcsSnapshotMap) ToEcsSnapshotMapOutput() EcsSnapshotMapOutput {
	return i.ToEcsSnapshotMapOutputWithContext(context.Background())
}

func (i EcsSnapshotMap) ToEcsSnapshotMapOutputWithContext(ctx context.Context) EcsSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsSnapshotMapOutput)
}

type EcsSnapshotOutput struct{ *pulumi.OutputState }

func (EcsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsSnapshot)(nil)).Elem()
}

func (o EcsSnapshotOutput) ToEcsSnapshotOutput() EcsSnapshotOutput {
	return o
}

func (o EcsSnapshotOutput) ToEcsSnapshotOutputWithContext(ctx context.Context) EcsSnapshotOutput {
	return o
}

// The category of the snapshot. Valid values:
func (o EcsSnapshotOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// (Available since v1.239.0) The time when the snapshot was created.
func (o EcsSnapshotOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the snapshot.
func (o EcsSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the disk.
func (o EcsSnapshotOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

// Specifies whether to force delete the snapshot that has been used to create disks. Valid values:
func (o EcsSnapshotOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// Field `instantAccess` has been deprecated from provider version 1.231.0.
//
// Deprecated: Field `instantAccess` has been deprecated from provider version 1.231.0.
func (o EcsSnapshotOutput) InstantAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.BoolPtrOutput { return v.InstantAccess }).(pulumi.BoolPtrOutput)
}

// Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
//
// Deprecated: Field `instantAccessRetentionDays` has been deprecated from provider version 1.231.0.
func (o EcsSnapshotOutput) InstantAccessRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.IntPtrOutput { return v.InstantAccessRetentionDays }).(pulumi.IntPtrOutput)
}

// Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
//
// Deprecated: Field `name` has been deprecated from provider version 1.120.0. New field `snapshotName` instead.
func (o EcsSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Available since v1.239.0) The region ID of the snapshot.
func (o EcsSnapshotOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The ID of the resource group. **NOTE:** From version 1.239.0, `resourceGroupId` can be modified.
func (o EcsSnapshotOutput) ResourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringPtrOutput { return v.ResourceGroupId }).(pulumi.StringPtrOutput)
}

// The retention period of the snapshot. Valid values: `1` to `65536`. **NOTE:** From version 1.231.0, `retentionDays` can be modified.
func (o EcsSnapshotOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.IntPtrOutput { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// The name of the snapshot.
func (o EcsSnapshotOutput) SnapshotName() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.SnapshotName }).(pulumi.StringOutput)
}

// The status of the Snapshot.
func (o EcsSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o EcsSnapshotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EcsSnapshot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type EcsSnapshotArrayOutput struct{ *pulumi.OutputState }

func (EcsSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsSnapshot)(nil)).Elem()
}

func (o EcsSnapshotArrayOutput) ToEcsSnapshotArrayOutput() EcsSnapshotArrayOutput {
	return o
}

func (o EcsSnapshotArrayOutput) ToEcsSnapshotArrayOutputWithContext(ctx context.Context) EcsSnapshotArrayOutput {
	return o
}

func (o EcsSnapshotArrayOutput) Index(i pulumi.IntInput) EcsSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsSnapshot {
		return vs[0].([]*EcsSnapshot)[vs[1].(int)]
	}).(EcsSnapshotOutput)
}

type EcsSnapshotMapOutput struct{ *pulumi.OutputState }

func (EcsSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsSnapshot)(nil)).Elem()
}

func (o EcsSnapshotMapOutput) ToEcsSnapshotMapOutput() EcsSnapshotMapOutput {
	return o
}

func (o EcsSnapshotMapOutput) ToEcsSnapshotMapOutputWithContext(ctx context.Context) EcsSnapshotMapOutput {
	return o
}

func (o EcsSnapshotMapOutput) MapIndex(k pulumi.StringInput) EcsSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsSnapshot {
		return vs[0].(map[string]*EcsSnapshot)[vs[1].(string)]
	}).(EcsSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotInput)(nil)).Elem(), &EcsSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotArrayInput)(nil)).Elem(), EcsSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsSnapshotMapInput)(nil)).Elem(), EcsSnapshotMap{})
	pulumi.RegisterOutputType(EcsSnapshotOutput{})
	pulumi.RegisterOutputType(EcsSnapshotArrayOutput{})
	pulumi.RegisterOutputType(EcsSnapshotMapOutput{})
}
