// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECS Network Interface Permission resource.
//
// For information about ECS Network Interface Permission and how to use it, see [What is Network Interface Permission](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/elastic-network-interfaces-overview).
//
// > **NOTE:** Available in v1.166.0+.
//
// ## Import
//
// ECS Network Interface Permission can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:ecs/ecsNetworkInterfacePermission:EcsNetworkInterfacePermission example <id>
//
// ```
type EcsNetworkInterfacePermission struct {
	pulumi.CustomResourceState

	// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether to force deletion of Network Interface Permission. Default value: `true`.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The Status of the Network Interface Permissions. Valid values: `Pending`, `Granted`, `Revoking`, `Revoked`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewEcsNetworkInterfacePermission registers a new resource with the given unique name, arguments, and options.
func NewEcsNetworkInterfacePermission(ctx *pulumi.Context,
	name string, args *EcsNetworkInterfacePermissionArgs, opts ...pulumi.ResourceOption) (*EcsNetworkInterfacePermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	var resource EcsNetworkInterfacePermission
	err := ctx.RegisterResource("alicloud:ecs/ecsNetworkInterfacePermission:EcsNetworkInterfacePermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsNetworkInterfacePermission gets an existing EcsNetworkInterfacePermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsNetworkInterfacePermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsNetworkInterfacePermissionState, opts ...pulumi.ResourceOption) (*EcsNetworkInterfacePermission, error) {
	var resource EcsNetworkInterfacePermission
	err := ctx.ReadResource("alicloud:ecs/ecsNetworkInterfacePermission:EcsNetworkInterfacePermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsNetworkInterfacePermission resources.
type ecsNetworkInterfacePermissionState struct {
	// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
	AccountId *string `pulumi:"accountId"`
	// Whether to force deletion of Network Interface Permission. Default value: `true`.
	Force *bool `pulumi:"force"`
	// The ID of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
	Permission *string `pulumi:"permission"`
	// The Status of the Network Interface Permissions. Valid values: `Pending`, `Granted`, `Revoking`, `Revoked`.
	Status *string `pulumi:"status"`
}

type EcsNetworkInterfacePermissionState struct {
	// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
	AccountId pulumi.StringPtrInput
	// Whether to force deletion of Network Interface Permission. Default value: `true`.
	Force pulumi.BoolPtrInput
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringPtrInput
	// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
	Permission pulumi.StringPtrInput
	// The Status of the Network Interface Permissions. Valid values: `Pending`, `Granted`, `Revoking`, `Revoked`.
	Status pulumi.StringPtrInput
}

func (EcsNetworkInterfacePermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsNetworkInterfacePermissionState)(nil)).Elem()
}

type ecsNetworkInterfacePermissionArgs struct {
	// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
	AccountId string `pulumi:"accountId"`
	// Whether to force deletion of Network Interface Permission. Default value: `true`.
	Force *bool `pulumi:"force"`
	// The ID of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
	Permission string `pulumi:"permission"`
}

// The set of arguments for constructing a EcsNetworkInterfacePermission resource.
type EcsNetworkInterfacePermissionArgs struct {
	// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
	AccountId pulumi.StringInput
	// Whether to force deletion of Network Interface Permission. Default value: `true`.
	Force pulumi.BoolPtrInput
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringInput
	// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
	Permission pulumi.StringInput
}

func (EcsNetworkInterfacePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsNetworkInterfacePermissionArgs)(nil)).Elem()
}

type EcsNetworkInterfacePermissionInput interface {
	pulumi.Input

	ToEcsNetworkInterfacePermissionOutput() EcsNetworkInterfacePermissionOutput
	ToEcsNetworkInterfacePermissionOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionOutput
}

func (*EcsNetworkInterfacePermission) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsNetworkInterfacePermission)(nil)).Elem()
}

func (i *EcsNetworkInterfacePermission) ToEcsNetworkInterfacePermissionOutput() EcsNetworkInterfacePermissionOutput {
	return i.ToEcsNetworkInterfacePermissionOutputWithContext(context.Background())
}

func (i *EcsNetworkInterfacePermission) ToEcsNetworkInterfacePermissionOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsNetworkInterfacePermissionOutput)
}

// EcsNetworkInterfacePermissionArrayInput is an input type that accepts EcsNetworkInterfacePermissionArray and EcsNetworkInterfacePermissionArrayOutput values.
// You can construct a concrete instance of `EcsNetworkInterfacePermissionArrayInput` via:
//
//	EcsNetworkInterfacePermissionArray{ EcsNetworkInterfacePermissionArgs{...} }
type EcsNetworkInterfacePermissionArrayInput interface {
	pulumi.Input

	ToEcsNetworkInterfacePermissionArrayOutput() EcsNetworkInterfacePermissionArrayOutput
	ToEcsNetworkInterfacePermissionArrayOutputWithContext(context.Context) EcsNetworkInterfacePermissionArrayOutput
}

type EcsNetworkInterfacePermissionArray []EcsNetworkInterfacePermissionInput

func (EcsNetworkInterfacePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsNetworkInterfacePermission)(nil)).Elem()
}

func (i EcsNetworkInterfacePermissionArray) ToEcsNetworkInterfacePermissionArrayOutput() EcsNetworkInterfacePermissionArrayOutput {
	return i.ToEcsNetworkInterfacePermissionArrayOutputWithContext(context.Background())
}

func (i EcsNetworkInterfacePermissionArray) ToEcsNetworkInterfacePermissionArrayOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsNetworkInterfacePermissionArrayOutput)
}

// EcsNetworkInterfacePermissionMapInput is an input type that accepts EcsNetworkInterfacePermissionMap and EcsNetworkInterfacePermissionMapOutput values.
// You can construct a concrete instance of `EcsNetworkInterfacePermissionMapInput` via:
//
//	EcsNetworkInterfacePermissionMap{ "key": EcsNetworkInterfacePermissionArgs{...} }
type EcsNetworkInterfacePermissionMapInput interface {
	pulumi.Input

	ToEcsNetworkInterfacePermissionMapOutput() EcsNetworkInterfacePermissionMapOutput
	ToEcsNetworkInterfacePermissionMapOutputWithContext(context.Context) EcsNetworkInterfacePermissionMapOutput
}

type EcsNetworkInterfacePermissionMap map[string]EcsNetworkInterfacePermissionInput

func (EcsNetworkInterfacePermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsNetworkInterfacePermission)(nil)).Elem()
}

func (i EcsNetworkInterfacePermissionMap) ToEcsNetworkInterfacePermissionMapOutput() EcsNetworkInterfacePermissionMapOutput {
	return i.ToEcsNetworkInterfacePermissionMapOutputWithContext(context.Background())
}

func (i EcsNetworkInterfacePermissionMap) ToEcsNetworkInterfacePermissionMapOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsNetworkInterfacePermissionMapOutput)
}

type EcsNetworkInterfacePermissionOutput struct{ *pulumi.OutputState }

func (EcsNetworkInterfacePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsNetworkInterfacePermission)(nil)).Elem()
}

func (o EcsNetworkInterfacePermissionOutput) ToEcsNetworkInterfacePermissionOutput() EcsNetworkInterfacePermissionOutput {
	return o
}

func (o EcsNetworkInterfacePermissionOutput) ToEcsNetworkInterfacePermissionOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionOutput {
	return o
}

// Alibaba Cloud Partner (Certified ISV) account ID or individual user ID.
func (o EcsNetworkInterfacePermissionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsNetworkInterfacePermission) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether to force deletion of Network Interface Permission. Default value: `true`.
func (o EcsNetworkInterfacePermissionOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EcsNetworkInterfacePermission) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// The ID of the network interface.
func (o EcsNetworkInterfacePermissionOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsNetworkInterfacePermission) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The permissions of the Network Interface. Valid values: `InstanceAttach`. `InstanceAttach`: Allows authorized users to mount your ENI to the other ECS instance. The ECS instance must be in the same zone as the ENI.
func (o EcsNetworkInterfacePermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsNetworkInterfacePermission) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The Status of the Network Interface Permissions. Valid values: `Pending`, `Granted`, `Revoking`, `Revoked`.
func (o EcsNetworkInterfacePermissionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EcsNetworkInterfacePermission) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type EcsNetworkInterfacePermissionArrayOutput struct{ *pulumi.OutputState }

func (EcsNetworkInterfacePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsNetworkInterfacePermission)(nil)).Elem()
}

func (o EcsNetworkInterfacePermissionArrayOutput) ToEcsNetworkInterfacePermissionArrayOutput() EcsNetworkInterfacePermissionArrayOutput {
	return o
}

func (o EcsNetworkInterfacePermissionArrayOutput) ToEcsNetworkInterfacePermissionArrayOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionArrayOutput {
	return o
}

func (o EcsNetworkInterfacePermissionArrayOutput) Index(i pulumi.IntInput) EcsNetworkInterfacePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsNetworkInterfacePermission {
		return vs[0].([]*EcsNetworkInterfacePermission)[vs[1].(int)]
	}).(EcsNetworkInterfacePermissionOutput)
}

type EcsNetworkInterfacePermissionMapOutput struct{ *pulumi.OutputState }

func (EcsNetworkInterfacePermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsNetworkInterfacePermission)(nil)).Elem()
}

func (o EcsNetworkInterfacePermissionMapOutput) ToEcsNetworkInterfacePermissionMapOutput() EcsNetworkInterfacePermissionMapOutput {
	return o
}

func (o EcsNetworkInterfacePermissionMapOutput) ToEcsNetworkInterfacePermissionMapOutputWithContext(ctx context.Context) EcsNetworkInterfacePermissionMapOutput {
	return o
}

func (o EcsNetworkInterfacePermissionMapOutput) MapIndex(k pulumi.StringInput) EcsNetworkInterfacePermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsNetworkInterfacePermission {
		return vs[0].(map[string]*EcsNetworkInterfacePermission)[vs[1].(string)]
	}).(EcsNetworkInterfacePermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsNetworkInterfacePermissionInput)(nil)).Elem(), &EcsNetworkInterfacePermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsNetworkInterfacePermissionArrayInput)(nil)).Elem(), EcsNetworkInterfacePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsNetworkInterfacePermissionMapInput)(nil)).Elem(), EcsNetworkInterfacePermissionMap{})
	pulumi.RegisterOutputType(EcsNetworkInterfacePermissionOutput{})
	pulumi.RegisterOutputType(EcsNetworkInterfacePermissionArrayOutput{})
	pulumi.RegisterOutputType(EcsNetworkInterfacePermissionMapOutput{})
}
