// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Ecs Commands of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.116.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := ecs.GetCommands(ctx, &ecs.GetCommandsArgs{
// 			Ids: []string{
// 				"E2RY53-xxxx",
// 			},
// 			NameRegex: pulumi.StringRef("tf-testAcc"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("firstEcsCommandId", example.Commands[0].Id)
// 		return nil
// 	})
// }
// ```
func GetCommands(ctx *pulumi.Context, args *GetCommandsArgs, opts ...pulumi.InvokeOption) (*GetCommandsResult, error) {
	var rv GetCommandsResult
	err := ctx.Invoke("alicloud:ecs/getCommands:getCommands", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCommands.
type GetCommandsArgs struct {
	// Public order provider.
	CommandProvider *string `pulumi:"commandProvider"`
	// The Base64-encoded content of the command.
	ContentEncoding *string `pulumi:"contentEncoding"`
	// The description of command.
	Description *string `pulumi:"description"`
	// A list of Command IDs.
	Ids []string `pulumi:"ids"`
	// The name of the command
	Name *string `pulumi:"name"`
	// A regex string to filter results by Command name.
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The command type.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getCommands.
type GetCommandsResult struct {
	CommandProvider *string              `pulumi:"commandProvider"`
	Commands        []GetCommandsCommand `pulumi:"commands"`
	ContentEncoding *string              `pulumi:"contentEncoding"`
	Description     *string              `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	Name       *string  `pulumi:"name"`
	NameRegex  *string  `pulumi:"nameRegex"`
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	Type       *string  `pulumi:"type"`
}

func GetCommandsOutput(ctx *pulumi.Context, args GetCommandsOutputArgs, opts ...pulumi.InvokeOption) GetCommandsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCommandsResult, error) {
			args := v.(GetCommandsArgs)
			r, err := GetCommands(ctx, &args, opts...)
			var s GetCommandsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCommandsResultOutput)
}

// A collection of arguments for invoking getCommands.
type GetCommandsOutputArgs struct {
	// Public order provider.
	CommandProvider pulumi.StringPtrInput `pulumi:"commandProvider"`
	// The Base64-encoded content of the command.
	ContentEncoding pulumi.StringPtrInput `pulumi:"contentEncoding"`
	// The description of command.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of Command IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of the command
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A regex string to filter results by Command name.
	NameRegex  pulumi.StringPtrInput `pulumi:"nameRegex"`
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The command type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetCommandsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsArgs)(nil)).Elem()
}

// A collection of values returned by getCommands.
type GetCommandsResultOutput struct{ *pulumi.OutputState }

func (GetCommandsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsResult)(nil)).Elem()
}

func (o GetCommandsResultOutput) ToGetCommandsResultOutput() GetCommandsResultOutput {
	return o
}

func (o GetCommandsResultOutput) ToGetCommandsResultOutputWithContext(ctx context.Context) GetCommandsResultOutput {
	return o
}

func (o GetCommandsResultOutput) CommandProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.CommandProvider }).(pulumi.StringPtrOutput)
}

func (o GetCommandsResultOutput) Commands() GetCommandsCommandArrayOutput {
	return o.ApplyT(func(v GetCommandsResult) []GetCommandsCommand { return v.Commands }).(GetCommandsCommandArrayOutput)
}

func (o GetCommandsResultOutput) ContentEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.ContentEncoding }).(pulumi.StringPtrOutput)
}

func (o GetCommandsResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCommandsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCommandsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCommandsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetCommandsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetCommandsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetCommandsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCommandsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetCommandsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetCommandsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCommandsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCommandsResultOutput{})
}
