// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an Alicloud ECS Disk Attachment as a resource, to attach and detach disks from ECS Instances.
//
// ## Example Usage
//
// Basic usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ecsSg, err := ecs.NewSecurityGroup(ctx, "ecsSg", &ecs.SecurityGroupArgs{
// 			Description: pulumi.String("New security group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ecsDisk, err := ecs.NewDisk(ctx, "ecsDisk", &ecs.DiskArgs{
// 			AvailabilityZone: pulumi.String("cn-beijing-a"),
// 			Size:             pulumi.Int(50),
// 			Tags: pulumi.StringMap{
// 				"Name": pulumi.String("TerraformTest-disk"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ecsInstance, err := ecs.NewInstance(ctx, "ecsInstance", &ecs.InstanceArgs{
// 			ImageId:          pulumi.String("ubuntu_18_04_64_20G_alibase_20190624.vhd"),
// 			InstanceType:     pulumi.String("ecs.n4.small"),
// 			AvailabilityZone: pulumi.String("cn-beijing-a"),
// 			SecurityGroups: pulumi.StringArray{
// 				ecsSg.ID(),
// 			},
// 			InstanceName:       pulumi.String("Hello"),
// 			InternetChargeType: pulumi.String("PayByBandwidth"),
// 			Tags: pulumi.StringMap{
// 				"Name": pulumi.String("TerraformTest-instance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ecs.NewDiskAttachment(ctx, "ecsDiskAtt", &ecs.DiskAttachmentArgs{
// 			DiskId:     ecsDisk.ID(),
// 			InstanceId: ecsInstance.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DiskAttachment struct {
	pulumi.CustomResourceState

	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	//
	// Deprecated: Attribute device_name is deprecated on disk attachment resource. Suggest to remove it from your template.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// ID of the Disk to be attached.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDiskAttachment(ctx *pulumi.Context,
	name string, args *DiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	if args == nil || args.DiskId == nil {
		return nil, errors.New("missing required argument 'DiskId'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &DiskAttachmentArgs{}
	}
	var resource DiskAttachment
	err := ctx.RegisterResource("alicloud:ecs/diskAttachment:DiskAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAttachment gets an existing DiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAttachmentState, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	var resource DiskAttachment
	err := ctx.ReadResource("alicloud:ecs/diskAttachment:DiskAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAttachment resources.
type diskAttachmentState struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	//
	// Deprecated: Attribute device_name is deprecated on disk attachment resource. Suggest to remove it from your template.
	DeviceName *string `pulumi:"deviceName"`
	// ID of the Disk to be attached.
	DiskId *string `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId *string `pulumi:"instanceId"`
}

type DiskAttachmentState struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	//
	// Deprecated: Attribute device_name is deprecated on disk attachment resource. Suggest to remove it from your template.
	DeviceName pulumi.StringPtrInput
	// ID of the Disk to be attached.
	DiskId pulumi.StringPtrInput
	// ID of the Instance to attach to.
	InstanceId pulumi.StringPtrInput
}

func (DiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentState)(nil)).Elem()
}

type diskAttachmentArgs struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	//
	// Deprecated: Attribute device_name is deprecated on disk attachment resource. Suggest to remove it from your template.
	DeviceName *string `pulumi:"deviceName"`
	// ID of the Disk to be attached.
	DiskId string `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DiskAttachment resource.
type DiskAttachmentArgs struct {
	// The device name has been deprecated, and when attaching disk, it will be allocated automatically by system according to default order from /dev/xvdb to /dev/xvdz.
	//
	// Deprecated: Attribute device_name is deprecated on disk attachment resource. Suggest to remove it from your template.
	DeviceName pulumi.StringPtrInput
	// ID of the Disk to be attached.
	DiskId pulumi.StringInput
	// ID of the Instance to attach to.
	InstanceId pulumi.StringInput
}

func (DiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentArgs)(nil)).Elem()
}

type DiskAttachmentInput interface {
	pulumi.Input

	ToDiskAttachmentOutput() DiskAttachmentOutput
	ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput
}

func (DiskAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAttachment)(nil)).Elem()
}

func (i DiskAttachment) ToDiskAttachmentOutput() DiskAttachmentOutput {
	return i.ToDiskAttachmentOutputWithContext(context.Background())
}

func (i DiskAttachment) ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAttachmentOutput)
}

type DiskAttachmentOutput struct {
	*pulumi.OutputState
}

func (DiskAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAttachmentOutput)(nil)).Elem()
}

func (o DiskAttachmentOutput) ToDiskAttachmentOutput() DiskAttachmentOutput {
	return o
}

func (o DiskAttachmentOutput) ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DiskAttachmentOutput{})
}
