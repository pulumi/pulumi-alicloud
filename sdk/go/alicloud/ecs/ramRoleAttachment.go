// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECS Ram Role Attachment resource.
//
// Mount RAM role.
//
// For information about ECS Ram Role Attachment and how to use it, see [What is Ram Role Attachment](https://next.api.alibabacloud.com/document/Ecs/2014-05-26/AttachInstanceRamRole).
//
// > **NOTE:** Available since v1.250.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// _default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// AvailableDiskCategory: pulumi.StringRef("cloud_efficiency"),
// AvailableResourceCreation: pulumi.StringRef("VSwitch"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// MostRecent: pulumi.BoolRef(true),
// Owners: pulumi.StringRef("system"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// AvailabilityZone: pulumi.StringRef(_default.Zones[0].Id),
// ImageId: pulumi.StringRef(defaultGetImages.Images[0].Id),
// }, nil);
// if err != nil {
// return err
// }
// defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
// Min: 10000,
// Max: 99999,
// })
// if err != nil {
// return err
// }
// defaultRole, err := ram.NewRole(ctx, "default", &ram.RoleArgs{
// Name: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
//
//	Document: pulumi.String(`		{
//				"Statement": [
//					{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Principal": {
//							"Service": [
//								"ecs.aliyuncs.com"
//							]
//						}
//					}
//			  	],
//				"Version": "1"
//			}
//
// `),
// Force: pulumi.Bool(true),
// })
// if err != nil {
// return err
// }
// defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
// VpcName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// })
// if err != nil {
// return err
// }
// defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
// VswitchName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// VpcId: defaultNetwork.ID(),
// CidrBlock: pulumi.String("192.168.192.0/24"),
// ZoneId: pulumi.String(_default.Zones[0].Id),
// })
// if err != nil {
// return err
// }
// defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
// VpcId: defaultNetwork.ID(),
// })
// if err != nil {
// return err
// }
// var splat0 pulumi.StringArray
// for _, val0 := range %!v(PANIC=Format method: fatal: An assertion has failed: tok: ) {
// splat0 = append(splat0, val0.ID())
// }
// defaultInstance, err := ecs.NewInstance(ctx, "default", &ecs.InstanceArgs{
// ImageId: pulumi.String(defaultGetImages.Images[0].Id),
// InstanceType: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].Id),
// SecurityGroups: splat0,
// InternetChargeType: pulumi.String("PayByTraffic"),
// InternetMaxBandwidthOut: pulumi.Int(10),
// AvailabilityZone: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].AvailabilityZones[0]),
// InstanceChargeType: pulumi.String("PostPaid"),
// SystemDiskCategory: pulumi.String("cloud_efficiency"),
// VswitchId: defaultSwitch.ID(),
// InstanceName: pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
// })
// if err != nil {
// return err
// }
// _, err = ecs.NewRamRoleAttachment(ctx, "default", &ecs.RamRoleAttachmentArgs{
// RamRoleName: defaultRole.ID(),
// InstanceId: defaultInstance.ID(),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// ECS Ram Role Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ecs/ramRoleAttachment:RamRoleAttachment example <instance_id>:<ram_role_name>
// ```
type RamRoleAttachment struct {
	pulumi.CustomResourceState

	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
	Policy pulumi.StringPtrOutput `pulumi:"policy"`
	// The name of the instance RAM role.
	RamRoleName pulumi.StringOutput `pulumi:"ramRoleName"`
}

// NewRamRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewRamRoleAttachment(ctx *pulumi.Context,
	name string, args *RamRoleAttachmentArgs, opts ...pulumi.ResourceOption) (*RamRoleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RamRoleName == nil {
		return nil, errors.New("invalid value for required argument 'RamRoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RamRoleAttachment
	err := ctx.RegisterResource("alicloud:ecs/ramRoleAttachment:RamRoleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRamRoleAttachment gets an existing RamRoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRamRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RamRoleAttachmentState, opts ...pulumi.ResourceOption) (*RamRoleAttachment, error) {
	var resource RamRoleAttachment
	err := ctx.ReadResource("alicloud:ecs/ramRoleAttachment:RamRoleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RamRoleAttachment resources.
type ramRoleAttachmentState struct {
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
	Policy *string `pulumi:"policy"`
	// The name of the instance RAM role.
	RamRoleName *string `pulumi:"ramRoleName"`
}

type RamRoleAttachmentState struct {
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
	Policy pulumi.StringPtrInput
	// The name of the instance RAM role.
	RamRoleName pulumi.StringPtrInput
}

func (RamRoleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*ramRoleAttachmentState)(nil)).Elem()
}

type ramRoleAttachmentArgs struct {
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
	Policy *string `pulumi:"policy"`
	// The name of the instance RAM role.
	RamRoleName string `pulumi:"ramRoleName"`
}

// The set of arguments for constructing a RamRoleAttachment resource.
type RamRoleAttachmentArgs struct {
	// The ID of the instance.
	InstanceId pulumi.StringInput
	// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
	Policy pulumi.StringPtrInput
	// The name of the instance RAM role.
	RamRoleName pulumi.StringInput
}

func (RamRoleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ramRoleAttachmentArgs)(nil)).Elem()
}

type RamRoleAttachmentInput interface {
	pulumi.Input

	ToRamRoleAttachmentOutput() RamRoleAttachmentOutput
	ToRamRoleAttachmentOutputWithContext(ctx context.Context) RamRoleAttachmentOutput
}

func (*RamRoleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**RamRoleAttachment)(nil)).Elem()
}

func (i *RamRoleAttachment) ToRamRoleAttachmentOutput() RamRoleAttachmentOutput {
	return i.ToRamRoleAttachmentOutputWithContext(context.Background())
}

func (i *RamRoleAttachment) ToRamRoleAttachmentOutputWithContext(ctx context.Context) RamRoleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RamRoleAttachmentOutput)
}

// RamRoleAttachmentArrayInput is an input type that accepts RamRoleAttachmentArray and RamRoleAttachmentArrayOutput values.
// You can construct a concrete instance of `RamRoleAttachmentArrayInput` via:
//
//	RamRoleAttachmentArray{ RamRoleAttachmentArgs{...} }
type RamRoleAttachmentArrayInput interface {
	pulumi.Input

	ToRamRoleAttachmentArrayOutput() RamRoleAttachmentArrayOutput
	ToRamRoleAttachmentArrayOutputWithContext(context.Context) RamRoleAttachmentArrayOutput
}

type RamRoleAttachmentArray []RamRoleAttachmentInput

func (RamRoleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RamRoleAttachment)(nil)).Elem()
}

func (i RamRoleAttachmentArray) ToRamRoleAttachmentArrayOutput() RamRoleAttachmentArrayOutput {
	return i.ToRamRoleAttachmentArrayOutputWithContext(context.Background())
}

func (i RamRoleAttachmentArray) ToRamRoleAttachmentArrayOutputWithContext(ctx context.Context) RamRoleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RamRoleAttachmentArrayOutput)
}

// RamRoleAttachmentMapInput is an input type that accepts RamRoleAttachmentMap and RamRoleAttachmentMapOutput values.
// You can construct a concrete instance of `RamRoleAttachmentMapInput` via:
//
//	RamRoleAttachmentMap{ "key": RamRoleAttachmentArgs{...} }
type RamRoleAttachmentMapInput interface {
	pulumi.Input

	ToRamRoleAttachmentMapOutput() RamRoleAttachmentMapOutput
	ToRamRoleAttachmentMapOutputWithContext(context.Context) RamRoleAttachmentMapOutput
}

type RamRoleAttachmentMap map[string]RamRoleAttachmentInput

func (RamRoleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RamRoleAttachment)(nil)).Elem()
}

func (i RamRoleAttachmentMap) ToRamRoleAttachmentMapOutput() RamRoleAttachmentMapOutput {
	return i.ToRamRoleAttachmentMapOutputWithContext(context.Background())
}

func (i RamRoleAttachmentMap) ToRamRoleAttachmentMapOutputWithContext(ctx context.Context) RamRoleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RamRoleAttachmentMapOutput)
}

type RamRoleAttachmentOutput struct{ *pulumi.OutputState }

func (RamRoleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RamRoleAttachment)(nil)).Elem()
}

func (o RamRoleAttachmentOutput) ToRamRoleAttachmentOutput() RamRoleAttachmentOutput {
	return o
}

func (o RamRoleAttachmentOutput) ToRamRoleAttachmentOutputWithContext(ctx context.Context) RamRoleAttachmentOutput {
	return o
}

// The ID of the instance.
func (o RamRoleAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RamRoleAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The additional policy. When you attach an instance RAM role to instances, you can specify an additional policy to further limit the permissions of the role.
func (o RamRoleAttachmentOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RamRoleAttachment) pulumi.StringPtrOutput { return v.Policy }).(pulumi.StringPtrOutput)
}

// The name of the instance RAM role.
func (o RamRoleAttachmentOutput) RamRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RamRoleAttachment) pulumi.StringOutput { return v.RamRoleName }).(pulumi.StringOutput)
}

type RamRoleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (RamRoleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RamRoleAttachment)(nil)).Elem()
}

func (o RamRoleAttachmentArrayOutput) ToRamRoleAttachmentArrayOutput() RamRoleAttachmentArrayOutput {
	return o
}

func (o RamRoleAttachmentArrayOutput) ToRamRoleAttachmentArrayOutputWithContext(ctx context.Context) RamRoleAttachmentArrayOutput {
	return o
}

func (o RamRoleAttachmentArrayOutput) Index(i pulumi.IntInput) RamRoleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RamRoleAttachment {
		return vs[0].([]*RamRoleAttachment)[vs[1].(int)]
	}).(RamRoleAttachmentOutput)
}

type RamRoleAttachmentMapOutput struct{ *pulumi.OutputState }

func (RamRoleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RamRoleAttachment)(nil)).Elem()
}

func (o RamRoleAttachmentMapOutput) ToRamRoleAttachmentMapOutput() RamRoleAttachmentMapOutput {
	return o
}

func (o RamRoleAttachmentMapOutput) ToRamRoleAttachmentMapOutputWithContext(ctx context.Context) RamRoleAttachmentMapOutput {
	return o
}

func (o RamRoleAttachmentMapOutput) MapIndex(k pulumi.StringInput) RamRoleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RamRoleAttachment {
		return vs[0].(map[string]*RamRoleAttachment)[vs[1].(string)]
	}).(RamRoleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RamRoleAttachmentInput)(nil)).Elem(), &RamRoleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RamRoleAttachmentArrayInput)(nil)).Elem(), RamRoleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RamRoleAttachmentMapInput)(nil)).Elem(), RamRoleAttachmentMap{})
	pulumi.RegisterOutputType(RamRoleAttachmentOutput{})
	pulumi.RegisterOutputType(RamRoleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(RamRoleAttachmentMapOutput{})
}
