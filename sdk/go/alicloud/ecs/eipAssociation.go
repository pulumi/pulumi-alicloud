// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Elastic IP address association can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ecs/eipAssociation:EipAssociation example eip-abc12345678:i-abc12355
// ```
type EipAssociation struct {
	pulumi.CustomResourceState

	// The allocation EIP ID.
	AllocationId pulumi.StringOutput `pulumi:"allocationId"`
	// When EIP is bound to a NAT gateway, and the NAT gateway adds a DNAT or SNAT entry, set it for `true` can unassociation any way. Default to `false`.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// The ID of the ECS or SLB instance or Nat Gateway or NetworkInterface or HaVip.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of cloud product that the eip instance to bind. Valid values: `EcsInstance`, `SlbInstance`, `Nat`, `NetworkInterface` and `HaVip`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The private IP address in the network segment of the vswitch which has been assigned.
	PrivateIpAddress pulumi.StringOutput `pulumi:"privateIpAddress"`
}

// NewEipAssociation registers a new resource with the given unique name, arguments, and options.
func NewEipAssociation(ctx *pulumi.Context,
	name string, args *EipAssociationArgs, opts ...pulumi.ResourceOption) (*EipAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationId == nil {
		return nil, errors.New("invalid value for required argument 'AllocationId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource EipAssociation
	err := ctx.RegisterResource("alicloud:ecs/eipAssociation:EipAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEipAssociation gets an existing EipAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEipAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipAssociationState, opts ...pulumi.ResourceOption) (*EipAssociation, error) {
	var resource EipAssociation
	err := ctx.ReadResource("alicloud:ecs/eipAssociation:EipAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EipAssociation resources.
type eipAssociationState struct {
	// The allocation EIP ID.
	AllocationId *string `pulumi:"allocationId"`
	// When EIP is bound to a NAT gateway, and the NAT gateway adds a DNAT or SNAT entry, set it for `true` can unassociation any way. Default to `false`.
	Force *bool `pulumi:"force"`
	// The ID of the ECS or SLB instance or Nat Gateway or NetworkInterface or HaVip.
	InstanceId *string `pulumi:"instanceId"`
	// The type of cloud product that the eip instance to bind. Valid values: `EcsInstance`, `SlbInstance`, `Nat`, `NetworkInterface` and `HaVip`.
	InstanceType *string `pulumi:"instanceType"`
	// The private IP address in the network segment of the vswitch which has been assigned.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
}

type EipAssociationState struct {
	// The allocation EIP ID.
	AllocationId pulumi.StringPtrInput
	// When EIP is bound to a NAT gateway, and the NAT gateway adds a DNAT or SNAT entry, set it for `true` can unassociation any way. Default to `false`.
	Force pulumi.BoolPtrInput
	// The ID of the ECS or SLB instance or Nat Gateway or NetworkInterface or HaVip.
	InstanceId pulumi.StringPtrInput
	// The type of cloud product that the eip instance to bind. Valid values: `EcsInstance`, `SlbInstance`, `Nat`, `NetworkInterface` and `HaVip`.
	InstanceType pulumi.StringPtrInput
	// The private IP address in the network segment of the vswitch which has been assigned.
	PrivateIpAddress pulumi.StringPtrInput
}

func (EipAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociationState)(nil)).Elem()
}

type eipAssociationArgs struct {
	// The allocation EIP ID.
	AllocationId string `pulumi:"allocationId"`
	// When EIP is bound to a NAT gateway, and the NAT gateway adds a DNAT or SNAT entry, set it for `true` can unassociation any way. Default to `false`.
	Force *bool `pulumi:"force"`
	// The ID of the ECS or SLB instance or Nat Gateway or NetworkInterface or HaVip.
	InstanceId string `pulumi:"instanceId"`
	// The type of cloud product that the eip instance to bind. Valid values: `EcsInstance`, `SlbInstance`, `Nat`, `NetworkInterface` and `HaVip`.
	InstanceType *string `pulumi:"instanceType"`
	// The private IP address in the network segment of the vswitch which has been assigned.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
}

// The set of arguments for constructing a EipAssociation resource.
type EipAssociationArgs struct {
	// The allocation EIP ID.
	AllocationId pulumi.StringInput
	// When EIP is bound to a NAT gateway, and the NAT gateway adds a DNAT or SNAT entry, set it for `true` can unassociation any way. Default to `false`.
	Force pulumi.BoolPtrInput
	// The ID of the ECS or SLB instance or Nat Gateway or NetworkInterface or HaVip.
	InstanceId pulumi.StringInput
	// The type of cloud product that the eip instance to bind. Valid values: `EcsInstance`, `SlbInstance`, `Nat`, `NetworkInterface` and `HaVip`.
	InstanceType pulumi.StringPtrInput
	// The private IP address in the network segment of the vswitch which has been assigned.
	PrivateIpAddress pulumi.StringPtrInput
}

func (EipAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociationArgs)(nil)).Elem()
}

type EipAssociationInput interface {
	pulumi.Input

	ToEipAssociationOutput() EipAssociationOutput
	ToEipAssociationOutputWithContext(ctx context.Context) EipAssociationOutput
}

func (*EipAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*EipAssociation)(nil))
}

func (i *EipAssociation) ToEipAssociationOutput() EipAssociationOutput {
	return i.ToEipAssociationOutputWithContext(context.Background())
}

func (i *EipAssociation) ToEipAssociationOutputWithContext(ctx context.Context) EipAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociationOutput)
}

func (i *EipAssociation) ToEipAssociationPtrOutput() EipAssociationPtrOutput {
	return i.ToEipAssociationPtrOutputWithContext(context.Background())
}

func (i *EipAssociation) ToEipAssociationPtrOutputWithContext(ctx context.Context) EipAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociationPtrOutput)
}

type EipAssociationPtrInput interface {
	pulumi.Input

	ToEipAssociationPtrOutput() EipAssociationPtrOutput
	ToEipAssociationPtrOutputWithContext(ctx context.Context) EipAssociationPtrOutput
}

type eipAssociationPtrType EipAssociationArgs

func (*eipAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EipAssociation)(nil))
}

func (i *eipAssociationPtrType) ToEipAssociationPtrOutput() EipAssociationPtrOutput {
	return i.ToEipAssociationPtrOutputWithContext(context.Background())
}

func (i *eipAssociationPtrType) ToEipAssociationPtrOutputWithContext(ctx context.Context) EipAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociationPtrOutput)
}

// EipAssociationArrayInput is an input type that accepts EipAssociationArray and EipAssociationArrayOutput values.
// You can construct a concrete instance of `EipAssociationArrayInput` via:
//
//          EipAssociationArray{ EipAssociationArgs{...} }
type EipAssociationArrayInput interface {
	pulumi.Input

	ToEipAssociationArrayOutput() EipAssociationArrayOutput
	ToEipAssociationArrayOutputWithContext(context.Context) EipAssociationArrayOutput
}

type EipAssociationArray []EipAssociationInput

func (EipAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EipAssociation)(nil))
}

func (i EipAssociationArray) ToEipAssociationArrayOutput() EipAssociationArrayOutput {
	return i.ToEipAssociationArrayOutputWithContext(context.Background())
}

func (i EipAssociationArray) ToEipAssociationArrayOutputWithContext(ctx context.Context) EipAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociationArrayOutput)
}

// EipAssociationMapInput is an input type that accepts EipAssociationMap and EipAssociationMapOutput values.
// You can construct a concrete instance of `EipAssociationMapInput` via:
//
//          EipAssociationMap{ "key": EipAssociationArgs{...} }
type EipAssociationMapInput interface {
	pulumi.Input

	ToEipAssociationMapOutput() EipAssociationMapOutput
	ToEipAssociationMapOutputWithContext(context.Context) EipAssociationMapOutput
}

type EipAssociationMap map[string]EipAssociationInput

func (EipAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EipAssociation)(nil))
}

func (i EipAssociationMap) ToEipAssociationMapOutput() EipAssociationMapOutput {
	return i.ToEipAssociationMapOutputWithContext(context.Background())
}

func (i EipAssociationMap) ToEipAssociationMapOutputWithContext(ctx context.Context) EipAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipAssociationMapOutput)
}

type EipAssociationOutput struct {
	*pulumi.OutputState
}

func (EipAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipAssociation)(nil))
}

func (o EipAssociationOutput) ToEipAssociationOutput() EipAssociationOutput {
	return o
}

func (o EipAssociationOutput) ToEipAssociationOutputWithContext(ctx context.Context) EipAssociationOutput {
	return o
}

func (o EipAssociationOutput) ToEipAssociationPtrOutput() EipAssociationPtrOutput {
	return o.ToEipAssociationPtrOutputWithContext(context.Background())
}

func (o EipAssociationOutput) ToEipAssociationPtrOutputWithContext(ctx context.Context) EipAssociationPtrOutput {
	return o.ApplyT(func(v EipAssociation) *EipAssociation {
		return &v
	}).(EipAssociationPtrOutput)
}

type EipAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (EipAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipAssociation)(nil))
}

func (o EipAssociationPtrOutput) ToEipAssociationPtrOutput() EipAssociationPtrOutput {
	return o
}

func (o EipAssociationPtrOutput) ToEipAssociationPtrOutputWithContext(ctx context.Context) EipAssociationPtrOutput {
	return o
}

type EipAssociationArrayOutput struct{ *pulumi.OutputState }

func (EipAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EipAssociation)(nil))
}

func (o EipAssociationArrayOutput) ToEipAssociationArrayOutput() EipAssociationArrayOutput {
	return o
}

func (o EipAssociationArrayOutput) ToEipAssociationArrayOutputWithContext(ctx context.Context) EipAssociationArrayOutput {
	return o
}

func (o EipAssociationArrayOutput) Index(i pulumi.IntInput) EipAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EipAssociation {
		return vs[0].([]EipAssociation)[vs[1].(int)]
	}).(EipAssociationOutput)
}

type EipAssociationMapOutput struct{ *pulumi.OutputState }

func (EipAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EipAssociation)(nil))
}

func (o EipAssociationMapOutput) ToEipAssociationMapOutput() EipAssociationMapOutput {
	return o
}

func (o EipAssociationMapOutput) ToEipAssociationMapOutputWithContext(ctx context.Context) EipAssociationMapOutput {
	return o
}

func (o EipAssociationMapOutput) MapIndex(k pulumi.StringInput) EipAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EipAssociation {
		return vs[0].(map[string]EipAssociation)[vs[1].(string)]
	}).(EipAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(EipAssociationOutput{})
	pulumi.RegisterOutputType(EipAssociationPtrOutput{})
	pulumi.RegisterOutputType(EipAssociationArrayOutput{})
	pulumi.RegisterOutputType(EipAssociationMapOutput{})
}
