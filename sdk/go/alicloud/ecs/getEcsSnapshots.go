// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This data source provides the Ecs Snapshots of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.120.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "tf-test"
// 		example, err := ecs.GetEcsSnapshots(ctx, &ecs.GetEcsSnapshotsArgs{
// 			Ids: []string{
// 				"s-bp1fvuxxxxxxxx",
// 			},
// 			NameRegex: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("firstEcsSnapshotId", example.Snapshots[0].Id)
// 		return nil
// 	})
// }
// ```
func GetEcsSnapshots(ctx *pulumi.Context, args *GetEcsSnapshotsArgs, opts ...pulumi.InvokeOption) (*GetEcsSnapshotsResult, error) {
	var rv GetEcsSnapshotsResult
	err := ctx.Invoke("alicloud:ecs/getEcsSnapshots:getEcsSnapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEcsSnapshots.
type GetEcsSnapshotsArgs struct {
	// The category of the snapshot.
	Category *string `pulumi:"category"`
	// Specifies whether to check the validity of the request without actually making the request.
	DryRun *bool `pulumi:"dryRun"`
	// Whether the snapshot is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// A list of Snapshot IDs.
	Ids []string `pulumi:"ids"`
	// The kms key id.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// A regex string to filter results by Snapshot name.
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The resource group id.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The snapshot link id.
	SnapshotLinkId *string `pulumi:"snapshotLinkId"`
	// Snapshot Display Name.
	SnapshotName *string `pulumi:"snapshotName"`
	// Snapshot creation type.
	SnapshotType *string `pulumi:"snapshotType"`
	// Source disk attributes.
	SourceDiskType *string `pulumi:"sourceDiskType"`
	// The status of the snapshot.
	Status *string `pulumi:"status"`
	// The tags.
	Tags map[string]interface{} `pulumi:"tags"`
	Type *string                `pulumi:"type"`
	// A resource type that has a reference relationship.
	Usage *string `pulumi:"usage"`
}

// A collection of values returned by getEcsSnapshots.
type GetEcsSnapshotsResult struct {
	Category  *string `pulumi:"category"`
	DryRun    *bool   `pulumi:"dryRun"`
	Encrypted *bool   `pulumi:"encrypted"`
	// The provider-assigned unique ID for this managed resource.
	Id              string                    `pulumi:"id"`
	Ids             []string                  `pulumi:"ids"`
	KmsKeyId        *string                   `pulumi:"kmsKeyId"`
	NameRegex       *string                   `pulumi:"nameRegex"`
	Names           []string                  `pulumi:"names"`
	OutputFile      *string                   `pulumi:"outputFile"`
	ResourceGroupId *string                   `pulumi:"resourceGroupId"`
	SnapshotLinkId  *string                   `pulumi:"snapshotLinkId"`
	SnapshotName    *string                   `pulumi:"snapshotName"`
	SnapshotType    *string                   `pulumi:"snapshotType"`
	Snapshots       []GetEcsSnapshotsSnapshot `pulumi:"snapshots"`
	SourceDiskType  *string                   `pulumi:"sourceDiskType"`
	Status          *string                   `pulumi:"status"`
	Tags            map[string]interface{}    `pulumi:"tags"`
	Type            *string                   `pulumi:"type"`
	Usage           *string                   `pulumi:"usage"`
}
