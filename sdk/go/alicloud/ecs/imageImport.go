// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ECS Image Import resource.
//
// For information about ECS Image Import and how to use it, see [What is Image Import](https://www.alibabacloud.com/help/en/ecs/developer-reference/api-ecs-2014-05-26-importimage).
//
// > **NOTE:** Available since v1.69.0.
//
// > **NOTE:** You must upload the image file to the object storage OSS in advance.
//
// > **NOTE:** The region where the image is imported must be the same region as the OSS bucket where the image file is uploaded.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/oss"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-image-import-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := oss.NewBucket(ctx, "default", &oss.BucketArgs{
//				Bucket: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBucketObject, err := oss.NewBucketObject(ctx, "default", &oss.BucketObjectArgs{
//				Bucket:  _default.ID(),
//				Key:     pulumi.String("fc/hello.zip"),
//				Content: pulumi.String("    # -*- coding: utf-8 -*-\n    def handler(event, context):\n    print \"hello world\"\n    return 'hello world'\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewImageImport(ctx, "default", &ecs.ImageImportArgs{
//				Architecture: pulumi.String("x86_64"),
//				OsType:       pulumi.String("linux"),
//				Platform:     pulumi.String("Ubuntu"),
//				LicenseType:  pulumi.String("Auto"),
//				ImageName:    pulumi.String(name),
//				Description:  pulumi.String(name),
//				DiskDeviceMappings: ecs.ImageImportDiskDeviceMappingArray{
//					&ecs.ImageImportDiskDeviceMappingArgs{
//						OssBucket:     _default.ID(),
//						OssObject:     defaultBucketObject.ID(),
//						DiskImageSize: pulumi.Int(5),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ECS Image Import can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ecs/imageImport:ImageImport example <id>
// ```
type ImageImport struct {
	pulumi.CustomResourceState

	// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
	Architecture pulumi.StringPtrOutput `pulumi:"architecture"`
	// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
	BootMode pulumi.StringOutput `pulumi:"bootMode"`
	// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The information about the custom image. See `diskDeviceMapping` below.
	DiskDeviceMappings ImageImportDiskDeviceMappingArrayOutput `pulumi:"diskDeviceMappings"`
	// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
	OsType pulumi.StringPtrOutput `pulumi:"osType"`
	// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
	// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
	Platform pulumi.StringOutput `pulumi:"platform"`
}

// NewImageImport registers a new resource with the given unique name, arguments, and options.
func NewImageImport(ctx *pulumi.Context,
	name string, args *ImageImportArgs, opts ...pulumi.ResourceOption) (*ImageImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskDeviceMappings == nil {
		return nil, errors.New("invalid value for required argument 'DiskDeviceMappings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageImport
	err := ctx.RegisterResource("alicloud:ecs/imageImport:ImageImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageImport gets an existing ImageImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageImportState, opts ...pulumi.ResourceOption) (*ImageImport, error) {
	var resource ImageImport
	err := ctx.ReadResource("alicloud:ecs/imageImport:ImageImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageImport resources.
type imageImportState struct {
	// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
	Architecture *string `pulumi:"architecture"`
	// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
	BootMode *string `pulumi:"bootMode"`
	// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The information about the custom image. See `diskDeviceMapping` below.
	DiskDeviceMappings []ImageImportDiskDeviceMapping `pulumi:"diskDeviceMappings"`
	// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	ImageName *string `pulumi:"imageName"`
	// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
	LicenseType *string `pulumi:"licenseType"`
	// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
	OsType *string `pulumi:"osType"`
	// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
	// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
	Platform *string `pulumi:"platform"`
}

type ImageImportState struct {
	// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
	Architecture pulumi.StringPtrInput
	// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
	BootMode pulumi.StringPtrInput
	// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The information about the custom image. See `diskDeviceMapping` below.
	DiskDeviceMappings ImageImportDiskDeviceMappingArrayInput
	// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	ImageName pulumi.StringPtrInput
	// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
	LicenseType pulumi.StringPtrInput
	// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
	OsType pulumi.StringPtrInput
	// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
	// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
	Platform pulumi.StringPtrInput
}

func (ImageImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageImportState)(nil)).Elem()
}

type imageImportArgs struct {
	// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
	Architecture *string `pulumi:"architecture"`
	// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
	BootMode *string `pulumi:"bootMode"`
	// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `pulumi:"description"`
	// The information about the custom image. See `diskDeviceMapping` below.
	DiskDeviceMappings []ImageImportDiskDeviceMapping `pulumi:"diskDeviceMappings"`
	// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	ImageName *string `pulumi:"imageName"`
	// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
	LicenseType *string `pulumi:"licenseType"`
	// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
	OsType *string `pulumi:"osType"`
	// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
	// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
	Platform *string `pulumi:"platform"`
}

// The set of arguments for constructing a ImageImport resource.
type ImageImportArgs struct {
	// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
	Architecture pulumi.StringPtrInput
	// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
	BootMode pulumi.StringPtrInput
	// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description pulumi.StringPtrInput
	// The information about the custom image. See `diskDeviceMapping` below.
	DiskDeviceMappings ImageImportDiskDeviceMappingArrayInput
	// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	ImageName pulumi.StringPtrInput
	// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
	LicenseType pulumi.StringPtrInput
	// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
	OsType pulumi.StringPtrInput
	// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
	// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
	Platform pulumi.StringPtrInput
}

func (ImageImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageImportArgs)(nil)).Elem()
}

type ImageImportInput interface {
	pulumi.Input

	ToImageImportOutput() ImageImportOutput
	ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput
}

func (*ImageImport) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageImport)(nil)).Elem()
}

func (i *ImageImport) ToImageImportOutput() ImageImportOutput {
	return i.ToImageImportOutputWithContext(context.Background())
}

func (i *ImageImport) ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportOutput)
}

// ImageImportArrayInput is an input type that accepts ImageImportArray and ImageImportArrayOutput values.
// You can construct a concrete instance of `ImageImportArrayInput` via:
//
//	ImageImportArray{ ImageImportArgs{...} }
type ImageImportArrayInput interface {
	pulumi.Input

	ToImageImportArrayOutput() ImageImportArrayOutput
	ToImageImportArrayOutputWithContext(context.Context) ImageImportArrayOutput
}

type ImageImportArray []ImageImportInput

func (ImageImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageImport)(nil)).Elem()
}

func (i ImageImportArray) ToImageImportArrayOutput() ImageImportArrayOutput {
	return i.ToImageImportArrayOutputWithContext(context.Background())
}

func (i ImageImportArray) ToImageImportArrayOutputWithContext(ctx context.Context) ImageImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportArrayOutput)
}

// ImageImportMapInput is an input type that accepts ImageImportMap and ImageImportMapOutput values.
// You can construct a concrete instance of `ImageImportMapInput` via:
//
//	ImageImportMap{ "key": ImageImportArgs{...} }
type ImageImportMapInput interface {
	pulumi.Input

	ToImageImportMapOutput() ImageImportMapOutput
	ToImageImportMapOutputWithContext(context.Context) ImageImportMapOutput
}

type ImageImportMap map[string]ImageImportInput

func (ImageImportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageImport)(nil)).Elem()
}

func (i ImageImportMap) ToImageImportMapOutput() ImageImportMapOutput {
	return i.ToImageImportMapOutputWithContext(context.Background())
}

func (i ImageImportMap) ToImageImportMapOutputWithContext(ctx context.Context) ImageImportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportMapOutput)
}

type ImageImportOutput struct{ *pulumi.OutputState }

func (ImageImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageImport)(nil)).Elem()
}

func (o ImageImportOutput) ToImageImportOutput() ImageImportOutput {
	return o
}

func (o ImageImportOutput) ToImageImportOutputWithContext(ctx context.Context) ImageImportOutput {
	return o
}

// The architecture of the image. Default value: `x8664`. Valid values: `x8664`, `i386`.
func (o ImageImportOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringPtrOutput { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The boot mode of the image. Valid values: `BIOS`, `UEFI`.
func (o ImageImportOutput) BootMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.BootMode }).(pulumi.StringOutput)
}

// The description of the image. The `description` must be 2 to 256 characters in length and cannot start with http:// or https://.
func (o ImageImportOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The information about the custom image. See `diskDeviceMapping` below.
func (o ImageImportOutput) DiskDeviceMappings() ImageImportDiskDeviceMappingArrayOutput {
	return o.ApplyT(func(v *ImageImport) ImageImportDiskDeviceMappingArrayOutput { return v.DiskDeviceMappings }).(ImageImportDiskDeviceMappingArrayOutput)
}

// The name of the image. The `imageName` must be `2` to `128` characters in length. The `imageName` must start with a letter and cannot start with acs: or aliyun. The `imageName` cannot contain http:// or https://. The `imageName` can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
func (o ImageImportOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// The type of the license used to activate the operating system after the image is imported. Default value: `Auto`. Valid values: `Auto`, `Aliyun`, `BYOL`.
func (o ImageImportOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The type of the operating system. Default value: `linux`. Valid values: `windows`, `linux`.
func (o ImageImportOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringPtrOutput { return v.OsType }).(pulumi.StringPtrOutput)
}

// The operating system platform. More valid values refer to [ImportImage OpenAPI](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/importimage).
// > **NOTE:** Before provider version 1.197.0, the default value of `platform` is `Ubuntu`.
func (o ImageImportOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageImport) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

type ImageImportArrayOutput struct{ *pulumi.OutputState }

func (ImageImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageImport)(nil)).Elem()
}

func (o ImageImportArrayOutput) ToImageImportArrayOutput() ImageImportArrayOutput {
	return o
}

func (o ImageImportArrayOutput) ToImageImportArrayOutputWithContext(ctx context.Context) ImageImportArrayOutput {
	return o
}

func (o ImageImportArrayOutput) Index(i pulumi.IntInput) ImageImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageImport {
		return vs[0].([]*ImageImport)[vs[1].(int)]
	}).(ImageImportOutput)
}

type ImageImportMapOutput struct{ *pulumi.OutputState }

func (ImageImportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageImport)(nil)).Elem()
}

func (o ImageImportMapOutput) ToImageImportMapOutput() ImageImportMapOutput {
	return o
}

func (o ImageImportMapOutput) ToImageImportMapOutputWithContext(ctx context.Context) ImageImportMapOutput {
	return o
}

func (o ImageImportMapOutput) MapIndex(k pulumi.StringInput) ImageImportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageImport {
		return vs[0].(map[string]*ImageImport)[vs[1].(string)]
	}).(ImageImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportInput)(nil)).Elem(), &ImageImport{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportArrayInput)(nil)).Elem(), ImageImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportMapInput)(nil)).Elem(), ImageImportMap{})
	pulumi.RegisterOutputType(ImageImportOutput{})
	pulumi.RegisterOutputType(ImageImportArrayOutput{})
	pulumi.RegisterOutputType(ImageImportMapOutput{})
}
