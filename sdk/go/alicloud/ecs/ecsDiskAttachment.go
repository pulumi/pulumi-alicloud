// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Alicloud ECS Disk Attachment as a resource, to attach and detach disks from ECS Instances.
//
// For information about ECS Disk Attachment and how to use it, see [What is Disk Attachment](https://www.alibabacloud.com/help/en/doc-detail/25515.htm).
//
// > **NOTE:** Available in v1.122.0+.
//
// ## Example Usage
//
// Basic usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ecsSg, err := ecs.NewSecurityGroup(ctx, "ecsSg", &ecs.SecurityGroupArgs{
// 			Description: pulumi.String("New security group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ecsDisk, err := ecs.NewEcsDisk(ctx, "ecsDisk", &ecs.EcsDiskArgs{
// 			AvailabilityZone: pulumi.String("cn-beijing-a"),
// 			Size:             pulumi.Int(50),
// 			Tags: pulumi.AnyMap{
// 				"Name": pulumi.Any("TerraformTest-disk"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ecsInstance, err := ecs.NewInstance(ctx, "ecsInstance", &ecs.InstanceArgs{
// 			ImageId:          pulumi.String("ubuntu_18_04_64_20G_alibase_20190624.vhd"),
// 			InstanceType:     pulumi.String("ecs.n4.small"),
// 			AvailabilityZone: pulumi.String("cn-beijing-a"),
// 			SecurityGroups: pulumi.StringArray{
// 				ecsSg.ID(),
// 			},
// 			InstanceName:       pulumi.String("Hello"),
// 			InternetChargeType: pulumi.String("PayByBandwidth"),
// 			Tags: pulumi.StringMap{
// 				"Name": pulumi.String("TerraformTest-instance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ecs.NewEcsDiskAttachment(ctx, "ecsDiskAtt", &ecs.EcsDiskAttachmentArgs{
// 			DiskId:     ecsDisk.ID(),
// 			InstanceId: ecsInstance.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// The disk attachment can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment example d-abc12345678:i-abc12355
// ```
type EcsDiskAttachment struct {
	pulumi.CustomResourceState

	// Whether to mount as a system disk. Default to: `false`.
	Bootable pulumi.BoolPtrOutput `pulumi:"bootable"`
	// Indicates whether the disk is released together with the instance. Default to: `false`.
	DeleteWithInstance pulumi.BoolPtrOutput `pulumi:"deleteWithInstance"`
	Device             pulumi.StringOutput  `pulumi:"device"`
	// ID of the Disk to be attached.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of key pair
	KeyPairName pulumi.StringPtrOutput `pulumi:"keyPairName"`
	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password pulumi.StringPtrOutput `pulumi:"password"`
}

// NewEcsDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewEcsDiskAttachment(ctx *pulumi.Context,
	name string, args *EcsDiskAttachmentArgs, opts ...pulumi.ResourceOption) (*EcsDiskAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource EcsDiskAttachment
	err := ctx.RegisterResource("alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsDiskAttachment gets an existing EcsDiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsDiskAttachmentState, opts ...pulumi.ResourceOption) (*EcsDiskAttachment, error) {
	var resource EcsDiskAttachment
	err := ctx.ReadResource("alicloud:ecs/ecsDiskAttachment:EcsDiskAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsDiskAttachment resources.
type ecsDiskAttachmentState struct {
	// Whether to mount as a system disk. Default to: `false`.
	Bootable *bool `pulumi:"bootable"`
	// Indicates whether the disk is released together with the instance. Default to: `false`.
	DeleteWithInstance *bool   `pulumi:"deleteWithInstance"`
	Device             *string `pulumi:"device"`
	// ID of the Disk to be attached.
	DiskId *string `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId *string `pulumi:"instanceId"`
	// The name of key pair
	KeyPairName *string `pulumi:"keyPairName"`
	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password *string `pulumi:"password"`
}

type EcsDiskAttachmentState struct {
	// Whether to mount as a system disk. Default to: `false`.
	Bootable pulumi.BoolPtrInput
	// Indicates whether the disk is released together with the instance. Default to: `false`.
	DeleteWithInstance pulumi.BoolPtrInput
	Device             pulumi.StringPtrInput
	// ID of the Disk to be attached.
	DiskId pulumi.StringPtrInput
	// ID of the Instance to attach to.
	InstanceId pulumi.StringPtrInput
	// The name of key pair
	KeyPairName pulumi.StringPtrInput
	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password pulumi.StringPtrInput
}

func (EcsDiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsDiskAttachmentState)(nil)).Elem()
}

type ecsDiskAttachmentArgs struct {
	// Whether to mount as a system disk. Default to: `false`.
	Bootable *bool `pulumi:"bootable"`
	// Indicates whether the disk is released together with the instance. Default to: `false`.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// ID of the Disk to be attached.
	DiskId string `pulumi:"diskId"`
	// ID of the Instance to attach to.
	InstanceId string `pulumi:"instanceId"`
	// The name of key pair
	KeyPairName *string `pulumi:"keyPairName"`
	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a EcsDiskAttachment resource.
type EcsDiskAttachmentArgs struct {
	// Whether to mount as a system disk. Default to: `false`.
	Bootable pulumi.BoolPtrInput
	// Indicates whether the disk is released together with the instance. Default to: `false`.
	DeleteWithInstance pulumi.BoolPtrInput
	// ID of the Disk to be attached.
	DiskId pulumi.StringInput
	// ID of the Instance to attach to.
	InstanceId pulumi.StringInput
	// The name of key pair
	KeyPairName pulumi.StringPtrInput
	// When mounting the system disk, setting the user name and password of the instance is only effective for the administrator and root user names, and other user names are not effective.
	Password pulumi.StringPtrInput
}

func (EcsDiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsDiskAttachmentArgs)(nil)).Elem()
}

type EcsDiskAttachmentInput interface {
	pulumi.Input

	ToEcsDiskAttachmentOutput() EcsDiskAttachmentOutput
	ToEcsDiskAttachmentOutputWithContext(ctx context.Context) EcsDiskAttachmentOutput
}

func (*EcsDiskAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsDiskAttachment)(nil)).Elem()
}

func (i *EcsDiskAttachment) ToEcsDiskAttachmentOutput() EcsDiskAttachmentOutput {
	return i.ToEcsDiskAttachmentOutputWithContext(context.Background())
}

func (i *EcsDiskAttachment) ToEcsDiskAttachmentOutputWithContext(ctx context.Context) EcsDiskAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsDiskAttachmentOutput)
}

// EcsDiskAttachmentArrayInput is an input type that accepts EcsDiskAttachmentArray and EcsDiskAttachmentArrayOutput values.
// You can construct a concrete instance of `EcsDiskAttachmentArrayInput` via:
//
//          EcsDiskAttachmentArray{ EcsDiskAttachmentArgs{...} }
type EcsDiskAttachmentArrayInput interface {
	pulumi.Input

	ToEcsDiskAttachmentArrayOutput() EcsDiskAttachmentArrayOutput
	ToEcsDiskAttachmentArrayOutputWithContext(context.Context) EcsDiskAttachmentArrayOutput
}

type EcsDiskAttachmentArray []EcsDiskAttachmentInput

func (EcsDiskAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsDiskAttachment)(nil)).Elem()
}

func (i EcsDiskAttachmentArray) ToEcsDiskAttachmentArrayOutput() EcsDiskAttachmentArrayOutput {
	return i.ToEcsDiskAttachmentArrayOutputWithContext(context.Background())
}

func (i EcsDiskAttachmentArray) ToEcsDiskAttachmentArrayOutputWithContext(ctx context.Context) EcsDiskAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsDiskAttachmentArrayOutput)
}

// EcsDiskAttachmentMapInput is an input type that accepts EcsDiskAttachmentMap and EcsDiskAttachmentMapOutput values.
// You can construct a concrete instance of `EcsDiskAttachmentMapInput` via:
//
//          EcsDiskAttachmentMap{ "key": EcsDiskAttachmentArgs{...} }
type EcsDiskAttachmentMapInput interface {
	pulumi.Input

	ToEcsDiskAttachmentMapOutput() EcsDiskAttachmentMapOutput
	ToEcsDiskAttachmentMapOutputWithContext(context.Context) EcsDiskAttachmentMapOutput
}

type EcsDiskAttachmentMap map[string]EcsDiskAttachmentInput

func (EcsDiskAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsDiskAttachment)(nil)).Elem()
}

func (i EcsDiskAttachmentMap) ToEcsDiskAttachmentMapOutput() EcsDiskAttachmentMapOutput {
	return i.ToEcsDiskAttachmentMapOutputWithContext(context.Background())
}

func (i EcsDiskAttachmentMap) ToEcsDiskAttachmentMapOutputWithContext(ctx context.Context) EcsDiskAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsDiskAttachmentMapOutput)
}

type EcsDiskAttachmentOutput struct{ *pulumi.OutputState }

func (EcsDiskAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsDiskAttachment)(nil)).Elem()
}

func (o EcsDiskAttachmentOutput) ToEcsDiskAttachmentOutput() EcsDiskAttachmentOutput {
	return o
}

func (o EcsDiskAttachmentOutput) ToEcsDiskAttachmentOutputWithContext(ctx context.Context) EcsDiskAttachmentOutput {
	return o
}

type EcsDiskAttachmentArrayOutput struct{ *pulumi.OutputState }

func (EcsDiskAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsDiskAttachment)(nil)).Elem()
}

func (o EcsDiskAttachmentArrayOutput) ToEcsDiskAttachmentArrayOutput() EcsDiskAttachmentArrayOutput {
	return o
}

func (o EcsDiskAttachmentArrayOutput) ToEcsDiskAttachmentArrayOutputWithContext(ctx context.Context) EcsDiskAttachmentArrayOutput {
	return o
}

func (o EcsDiskAttachmentArrayOutput) Index(i pulumi.IntInput) EcsDiskAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsDiskAttachment {
		return vs[0].([]*EcsDiskAttachment)[vs[1].(int)]
	}).(EcsDiskAttachmentOutput)
}

type EcsDiskAttachmentMapOutput struct{ *pulumi.OutputState }

func (EcsDiskAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsDiskAttachment)(nil)).Elem()
}

func (o EcsDiskAttachmentMapOutput) ToEcsDiskAttachmentMapOutput() EcsDiskAttachmentMapOutput {
	return o
}

func (o EcsDiskAttachmentMapOutput) ToEcsDiskAttachmentMapOutputWithContext(ctx context.Context) EcsDiskAttachmentMapOutput {
	return o
}

func (o EcsDiskAttachmentMapOutput) MapIndex(k pulumi.StringInput) EcsDiskAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsDiskAttachment {
		return vs[0].(map[string]*EcsDiskAttachment)[vs[1].(string)]
	}).(EcsDiskAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsDiskAttachmentInput)(nil)).Elem(), &EcsDiskAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsDiskAttachmentArrayInput)(nil)).Elem(), EcsDiskAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsDiskAttachmentMapInput)(nil)).Elem(), EcsDiskAttachmentMap{})
	pulumi.RegisterOutputType(EcsDiskAttachmentOutput{})
	pulumi.RegisterOutputType(EcsDiskAttachmentArrayOutput{})
	pulumi.RegisterOutputType(EcsDiskAttachmentMapOutput{})
}
