// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Ecs Disks of the current Alibaba Cloud user.
//
// > **NOTE:** Available since v1.122.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultEcsDisk, err := ecs.NewEcsDisk(ctx, "default", &ecs.EcsDiskArgs{
//				ZoneId:      pulumi.String(_default.Zones[0].Id),
//				DiskName:    pulumi.String("terraform-example"),
//				Description: pulumi.String("terraform-example"),
//				Category:    pulumi.String("cloud_efficiency"),
//				Size:        pulumi.Int(30),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("terraform-example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ids := ecs.GetEcsDisksOutput(ctx, ecs.GetEcsDisksOutputArgs{
//				Ids: pulumi.StringArray{
//					defaultEcsDisk.ID(),
//				},
//			}, nil)
//			ctx.Export("ecsDiskId0", ids.ApplyT(func(ids ecs.GetEcsDisksResult) (*string, error) {
//				return &ids.Disks[0].Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetEcsDisks(ctx *pulumi.Context, args *GetEcsDisksArgs, opts ...pulumi.InvokeOption) (*GetEcsDisksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEcsDisksResult
	err := ctx.Invoke("alicloud:ecs/getEcsDisks:getEcsDisks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEcsDisks.
type GetEcsDisksArgs struct {
	// Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
	AdditionalAttributes []string `pulumi:"additionalAttributes"`
	// Query cloud disks based on the automatic snapshot policy ID.
	AutoSnapshotPolicyId *string `pulumi:"autoSnapshotPolicyId"`
	// Field `availabilityZone` has been deprecated from provider version 1.122.0. New field `zoneId` instead.
	//
	// Deprecated: Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Disk category. Valid values: `cloud`, `cloudEfficiency`, `cloudEssd`, `cloudSsd`, `ephemeralSsd`, `cloudAuto`, `cloudEssdEntry`.
	Category *string `pulumi:"category"`
	// Indicates whether the automatic snapshot is deleted when the disk is released.
	DeleteAutoSnapshot *bool `pulumi:"deleteAutoSnapshot"`
	// Indicates whether the disk is released together with the instance.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The disk name.
	DiskName *string `pulumi:"diskName"`
	// The disk type. Valid values: `system`, `data`, `all`.
	DiskType *string `pulumi:"diskType"`
	// Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
	DryRun *bool `pulumi:"dryRun"`
	// Indicates whether the automatic snapshot is deleted when the disk is released.
	EnableAutoSnapshot *bool `pulumi:"enableAutoSnapshot"`
	// Whether the cloud disk has an automatic snapshot policy
	EnableAutomatedSnapshotPolicy *bool `pulumi:"enableAutomatedSnapshotPolicy"`
	// Whether it is shared block storage.
	EnableShared *bool `pulumi:"enableShared"`
	// Indicate whether the disk is encrypted or not. Valid values: `on` and `off`.
	Encrypted *string `pulumi:"encrypted"`
	// A list of Disk IDs.
	Ids []string `pulumi:"ids"`
	// Filter the results by the specified ECS instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The kms key id.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// A regex string to filter results by Disk name.
	NameRegex *string `pulumi:"nameRegex"`
	// The reasons why the disk was locked. See `operationLocks` below for details.
	OperationLocks []GetEcsDisksOperationLock `pulumi:"operationLocks"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	PageNumber *int    `pulumi:"pageNumber"`
	PageSize   *int    `pulumi:"pageSize"`
	// Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType *string `pulumi:"paymentType"`
	// Whether the cloud disk or local disk supports uninstallation.
	Portable *bool `pulumi:"portable"`
	// The Id of resource group which the disk belongs.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The source snapshot id.
	SnapshotId *string `pulumi:"snapshotId"`
	// The status of disk. Valid Values: `Attaching`, `Available`, `Creating`, `Detaching`, `In_use`, `Migrating`, `ReIniting`, `Transferring`.
	Status *string `pulumi:"status"`
	// A map of tags assigned to the disks.
	Tags map[string]string `pulumi:"tags"`
	// Field `type` has been deprecated from provider version 1.122.0. New field `diskType` instead.
	//
	// Deprecated: Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
	Type *string `pulumi:"type"`
	// ID of the free zone to which the disk belongs.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getEcsDisks.
type GetEcsDisksResult struct {
	AdditionalAttributes []string `pulumi:"additionalAttributes"`
	// Query cloud disks based on the automatic snapshot policy ID.
	AutoSnapshotPolicyId *string `pulumi:"autoSnapshotPolicyId"`
	// Availability zone of the disk.
	//
	// Deprecated: Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Disk category.
	Category *string `pulumi:"category"`
	// Indicates whether the automatic snapshot is deleted when the disk is released.
	DeleteAutoSnapshot *bool `pulumi:"deleteAutoSnapshot"`
	// Indicates whether the disk is released together with the instance.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The disk name.
	DiskName *string `pulumi:"diskName"`
	// The type of the disk.
	DiskType *string `pulumi:"diskType"`
	// A list of Ecs Disks. Each element contains the following attributes:
	Disks  []GetEcsDisksDisk `pulumi:"disks"`
	DryRun *bool             `pulumi:"dryRun"`
	// Whether the disk implements an automatic snapshot policy.
	EnableAutoSnapshot *bool `pulumi:"enableAutoSnapshot"`
	// Whether the disk implements an automatic snapshot policy.
	EnableAutomatedSnapshotPolicy *bool `pulumi:"enableAutomatedSnapshotPolicy"`
	EnableShared                  *bool `pulumi:"enableShared"`
	// Indicate whether the disk is encrypted or not.
	Encrypted *string `pulumi:"encrypted"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The instance ID of the disk mount.
	InstanceId *string `pulumi:"instanceId"`
	// The ID of the KMS key that is used for the cloud disk.
	KmsKeyId  *string `pulumi:"kmsKeyId"`
	NameRegex *string `pulumi:"nameRegex"`
	// A list of Disk names.
	Names []string `pulumi:"names"`
	// The reasons why the disk was locked.
	OperationLocks []GetEcsDisksOperationLock `pulumi:"operationLocks"`
	OutputFile     *string                    `pulumi:"outputFile"`
	PageNumber     *int                       `pulumi:"pageNumber"`
	PageSize       *int                       `pulumi:"pageSize"`
	// Payment method for disk.
	PaymentType *string `pulumi:"paymentType"`
	// Whether the disk is unmountable.
	Portable *bool `pulumi:"portable"`
	// The Id of resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
	SnapshotId *string `pulumi:"snapshotId"`
	// Current status.
	Status *string `pulumi:"status"`
	// A map of tags assigned to the disk.
	Tags       map[string]string `pulumi:"tags"`
	TotalCount int               `pulumi:"totalCount"`
	// The type of the disk.
	//
	// Deprecated: Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
	Type *string `pulumi:"type"`
	// The zone id.
	ZoneId *string `pulumi:"zoneId"`
}

func GetEcsDisksOutput(ctx *pulumi.Context, args GetEcsDisksOutputArgs, opts ...pulumi.InvokeOption) GetEcsDisksResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetEcsDisksResultOutput, error) {
			args := v.(GetEcsDisksArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:ecs/getEcsDisks:getEcsDisks", args, GetEcsDisksResultOutput{}, options).(GetEcsDisksResultOutput), nil
		}).(GetEcsDisksResultOutput)
}

// A collection of arguments for invoking getEcsDisks.
type GetEcsDisksOutputArgs struct {
	// Other attribute values. Currently, only the incoming value of IOPS is supported, which means to query the IOPS upper limit of the current disk.
	AdditionalAttributes pulumi.StringArrayInput `pulumi:"additionalAttributes"`
	// Query cloud disks based on the automatic snapshot policy ID.
	AutoSnapshotPolicyId pulumi.StringPtrInput `pulumi:"autoSnapshotPolicyId"`
	// Field `availabilityZone` has been deprecated from provider version 1.122.0. New field `zoneId` instead.
	//
	// Deprecated: Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// Disk category. Valid values: `cloud`, `cloudEfficiency`, `cloudEssd`, `cloudSsd`, `ephemeralSsd`, `cloudAuto`, `cloudEssdEntry`.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Indicates whether the automatic snapshot is deleted when the disk is released.
	DeleteAutoSnapshot pulumi.BoolPtrInput `pulumi:"deleteAutoSnapshot"`
	// Indicates whether the disk is released together with the instance.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The disk name.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// The disk type. Valid values: `system`, `data`, `all`.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Specifies whether to check the validity of the request without actually making the request.request Default value: false. Valid values:
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// Indicates whether the automatic snapshot is deleted when the disk is released.
	EnableAutoSnapshot pulumi.BoolPtrInput `pulumi:"enableAutoSnapshot"`
	// Whether the cloud disk has an automatic snapshot policy
	EnableAutomatedSnapshotPolicy pulumi.BoolPtrInput `pulumi:"enableAutomatedSnapshotPolicy"`
	// Whether it is shared block storage.
	EnableShared pulumi.BoolPtrInput `pulumi:"enableShared"`
	// Indicate whether the disk is encrypted or not. Valid values: `on` and `off`.
	Encrypted pulumi.StringPtrInput `pulumi:"encrypted"`
	// A list of Disk IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// Filter the results by the specified ECS instance ID.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The kms key id.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// A regex string to filter results by Disk name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The reasons why the disk was locked. See `operationLocks` below for details.
	OperationLocks GetEcsDisksOperationLockArrayInput `pulumi:"operationLocks"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	PageNumber pulumi.IntPtrInput    `pulumi:"pageNumber"`
	PageSize   pulumi.IntPtrInput    `pulumi:"pageSize"`
	// Payment method for disk. Valid Values: `PayAsYouGo`, `Subscription`.
	PaymentType pulumi.StringPtrInput `pulumi:"paymentType"`
	// Whether the cloud disk or local disk supports uninstallation.
	Portable pulumi.BoolPtrInput `pulumi:"portable"`
	// The Id of resource group which the disk belongs.
	ResourceGroupId pulumi.StringPtrInput `pulumi:"resourceGroupId"`
	// The source snapshot id.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The status of disk. Valid Values: `Attaching`, `Available`, `Creating`, `Detaching`, `In_use`, `Migrating`, `ReIniting`, `Transferring`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A map of tags assigned to the disks.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Field `type` has been deprecated from provider version 1.122.0. New field `diskType` instead.
	//
	// Deprecated: Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// ID of the free zone to which the disk belongs.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetEcsDisksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsDisksArgs)(nil)).Elem()
}

// A collection of values returned by getEcsDisks.
type GetEcsDisksResultOutput struct{ *pulumi.OutputState }

func (GetEcsDisksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsDisksResult)(nil)).Elem()
}

func (o GetEcsDisksResultOutput) ToGetEcsDisksResultOutput() GetEcsDisksResultOutput {
	return o
}

func (o GetEcsDisksResultOutput) ToGetEcsDisksResultOutputWithContext(ctx context.Context) GetEcsDisksResultOutput {
	return o
}

func (o GetEcsDisksResultOutput) AdditionalAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsDisksResult) []string { return v.AdditionalAttributes }).(pulumi.StringArrayOutput)
}

// Query cloud disks based on the automatic snapshot policy ID.
func (o GetEcsDisksResultOutput) AutoSnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.AutoSnapshotPolicyId }).(pulumi.StringPtrOutput)
}

// Availability zone of the disk.
//
// Deprecated: Field 'availability_zone' has been deprecated from provider version 1.122.0. New field 'zone_id' instead
func (o GetEcsDisksResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Disk category.
func (o GetEcsDisksResultOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Indicates whether the automatic snapshot is deleted when the disk is released.
func (o GetEcsDisksResultOutput) DeleteAutoSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.DeleteAutoSnapshot }).(pulumi.BoolPtrOutput)
}

// Indicates whether the disk is released together with the instance.
func (o GetEcsDisksResultOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The disk name.
func (o GetEcsDisksResultOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// The type of the disk.
func (o GetEcsDisksResultOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// A list of Ecs Disks. Each element contains the following attributes:
func (o GetEcsDisksResultOutput) Disks() GetEcsDisksDiskArrayOutput {
	return o.ApplyT(func(v GetEcsDisksResult) []GetEcsDisksDisk { return v.Disks }).(GetEcsDisksDiskArrayOutput)
}

func (o GetEcsDisksResultOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Whether the disk implements an automatic snapshot policy.
func (o GetEcsDisksResultOutput) EnableAutoSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.EnableAutoSnapshot }).(pulumi.BoolPtrOutput)
}

// Whether the disk implements an automatic snapshot policy.
func (o GetEcsDisksResultOutput) EnableAutomatedSnapshotPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.EnableAutomatedSnapshotPolicy }).(pulumi.BoolPtrOutput)
}

func (o GetEcsDisksResultOutput) EnableShared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.EnableShared }).(pulumi.BoolPtrOutput)
}

// Indicate whether the disk is encrypted or not.
func (o GetEcsDisksResultOutput) Encrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.Encrypted }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEcsDisksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsDisksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEcsDisksResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsDisksResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The instance ID of the disk mount.
func (o GetEcsDisksResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The ID of the KMS key that is used for the cloud disk.
func (o GetEcsDisksResultOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o GetEcsDisksResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// A list of Disk names.
func (o GetEcsDisksResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsDisksResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// The reasons why the disk was locked.
func (o GetEcsDisksResultOutput) OperationLocks() GetEcsDisksOperationLockArrayOutput {
	return o.ApplyT(func(v GetEcsDisksResult) []GetEcsDisksOperationLock { return v.OperationLocks }).(GetEcsDisksOperationLockArrayOutput)
}

func (o GetEcsDisksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetEcsDisksResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetEcsDisksResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

// Payment method for disk.
func (o GetEcsDisksResultOutput) PaymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.PaymentType }).(pulumi.StringPtrOutput)
}

// Whether the disk is unmountable.
func (o GetEcsDisksResultOutput) Portable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *bool { return v.Portable }).(pulumi.BoolPtrOutput)
}

// The Id of resource group.
func (o GetEcsDisksResultOutput) ResourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.ResourceGroupId }).(pulumi.StringPtrOutput)
}

// Snapshot used to create the disk. It is null if no snapshot is used to create the disk.
func (o GetEcsDisksResultOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Current status.
func (o GetEcsDisksResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A map of tags assigned to the disk.
func (o GetEcsDisksResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetEcsDisksResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetEcsDisksResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetEcsDisksResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The type of the disk.
//
// Deprecated: Field 'type' has been deprecated from provider version 1.122.0. New field 'disk_type' instead.
func (o GetEcsDisksResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The zone id.
func (o GetEcsDisksResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsDisksResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEcsDisksResultOutput{})
}
