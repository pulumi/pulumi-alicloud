// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Export a custom image to the OSS bucket in the same region as the custom image.
//
// > **NOTE:** If you create an ECS instance using a mirror image and create a system disk snapshot again, exporting a custom image created from the system disk snapshot is not supported.
//
// > **NOTE:** Support for exporting custom images that include data disk snapshot information in the image. The number of data disks cannot exceed 4 and the maximum capacity of a single data disk cannot exceed 500 GiB.
//
// > **NOTE:** Before exporting the image, you must authorize the cloud server ECS official service account to write OSS permissions through RAM.
//
// > **NOTE:** Available in 1.68.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ecs.NewImageExport(ctx, "_default", &ecs.ImageExportArgs{
// 			ImageId:   pulumi.String("m-bp1gxy***"),
// 			OssBucket: pulumi.String("ecsimageexportconfig"),
// 			OssPrefix: pulumi.String("ecsExport"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes Reference0
//
//  The following attributes are exported:
//
// * `id` - ID of the image.
type ImageExport struct {
	pulumi.CustomResourceState

	// The source image ID.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket pulumi.StringOutput `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrOutput `pulumi:"ossPrefix"`
}

// NewImageExport registers a new resource with the given unique name, arguments, and options.
func NewImageExport(ctx *pulumi.Context,
	name string, args *ImageExportArgs, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	if args == nil || args.ImageId == nil {
		return nil, errors.New("missing required argument 'ImageId'")
	}
	if args == nil || args.OssBucket == nil {
		return nil, errors.New("missing required argument 'OssBucket'")
	}
	if args == nil {
		args = &ImageExportArgs{}
	}
	var resource ImageExport
	err := ctx.RegisterResource("alicloud:ecs/imageExport:ImageExport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageExport gets an existing ImageExport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageExport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageExportState, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	var resource ImageExport
	err := ctx.ReadResource("alicloud:ecs/imageExport:ImageExport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageExport resources.
type imageExportState struct {
	// The source image ID.
	ImageId *string `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket *string `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `pulumi:"ossPrefix"`
}

type ImageExportState struct {
	// The source image ID.
	ImageId pulumi.StringPtrInput
	// Save the exported OSS bucket.
	OssBucket pulumi.StringPtrInput
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrInput
}

func (ImageExportState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportState)(nil)).Elem()
}

type imageExportArgs struct {
	// The source image ID.
	ImageId string `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket string `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `pulumi:"ossPrefix"`
}

// The set of arguments for constructing a ImageExport resource.
type ImageExportArgs struct {
	// The source image ID.
	ImageId pulumi.StringInput
	// Save the exported OSS bucket.
	OssBucket pulumi.StringInput
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrInput
}

func (ImageExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportArgs)(nil)).Elem()
}

type ImageExportInput interface {
	pulumi.Input

	ToImageExportOutput() ImageExportOutput
	ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput
}

func (ImageExport) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageExport)(nil)).Elem()
}

func (i ImageExport) ToImageExportOutput() ImageExportOutput {
	return i.ToImageExportOutputWithContext(context.Background())
}

func (i ImageExport) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportOutput)
}

type ImageExportOutput struct {
	*pulumi.OutputState
}

func (ImageExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageExportOutput)(nil)).Elem()
}

func (o ImageExportOutput) ToImageExportOutput() ImageExportOutput {
	return o
}

func (o ImageExportOutput) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ImageExportOutput{})
}
