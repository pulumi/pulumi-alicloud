// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Export a custom image to the OSS bucket in the same region as the custom image.
//
// > **NOTE:** If you create an ECS instance using a mirror image and create a system disk snapshot again, exporting a custom image created from the system disk snapshot is not supported.
//
// > **NOTE:** Support for exporting custom images that include data disk snapshot information in the image. The number of data disks cannot exceed 4 and the maximum capacity of a single data disk cannot exceed 500 GiB.
//
// > **NOTE:** Before exporting the image, you must authorize the cloud server ECS official service account to write OSS permissions through RAM.
//
// > **NOTE:** Available in 1.68.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewImageExport(ctx, "default", &ecs.ImageExportArgs{
//				ImageId:   pulumi.String("m-bp1gxy***"),
//				OssBucket: pulumi.String("ecsimageexportconfig"),
//				OssPrefix: pulumi.String("ecsExport"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Attributes Reference0
//
//	The following attributes are exported:
//
// * `id` - ID of the image.
type ImageExport struct {
	pulumi.CustomResourceState

	// The source image ID.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket pulumi.StringOutput `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrOutput `pulumi:"ossPrefix"`
}

// NewImageExport registers a new resource with the given unique name, arguments, and options.
func NewImageExport(ctx *pulumi.Context,
	name string, args *ImageExportArgs, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.OssBucket == nil {
		return nil, errors.New("invalid value for required argument 'OssBucket'")
	}
	var resource ImageExport
	err := ctx.RegisterResource("alicloud:ecs/imageExport:ImageExport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageExport gets an existing ImageExport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageExport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageExportState, opts ...pulumi.ResourceOption) (*ImageExport, error) {
	var resource ImageExport
	err := ctx.ReadResource("alicloud:ecs/imageExport:ImageExport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageExport resources.
type imageExportState struct {
	// The source image ID.
	ImageId *string `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket *string `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `pulumi:"ossPrefix"`
}

type ImageExportState struct {
	// The source image ID.
	ImageId pulumi.StringPtrInput
	// Save the exported OSS bucket.
	OssBucket pulumi.StringPtrInput
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrInput
}

func (ImageExportState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportState)(nil)).Elem()
}

type imageExportArgs struct {
	// The source image ID.
	ImageId string `pulumi:"imageId"`
	// Save the exported OSS bucket.
	OssBucket string `pulumi:"ossBucket"`
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix *string `pulumi:"ossPrefix"`
}

// The set of arguments for constructing a ImageExport resource.
type ImageExportArgs struct {
	// The source image ID.
	ImageId pulumi.StringInput
	// Save the exported OSS bucket.
	OssBucket pulumi.StringInput
	// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
	OssPrefix pulumi.StringPtrInput
}

func (ImageExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportArgs)(nil)).Elem()
}

type ImageExportInput interface {
	pulumi.Input

	ToImageExportOutput() ImageExportOutput
	ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput
}

func (*ImageExport) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExport)(nil)).Elem()
}

func (i *ImageExport) ToImageExportOutput() ImageExportOutput {
	return i.ToImageExportOutputWithContext(context.Background())
}

func (i *ImageExport) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportOutput)
}

// ImageExportArrayInput is an input type that accepts ImageExportArray and ImageExportArrayOutput values.
// You can construct a concrete instance of `ImageExportArrayInput` via:
//
//	ImageExportArray{ ImageExportArgs{...} }
type ImageExportArrayInput interface {
	pulumi.Input

	ToImageExportArrayOutput() ImageExportArrayOutput
	ToImageExportArrayOutputWithContext(context.Context) ImageExportArrayOutput
}

type ImageExportArray []ImageExportInput

func (ImageExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExport)(nil)).Elem()
}

func (i ImageExportArray) ToImageExportArrayOutput() ImageExportArrayOutput {
	return i.ToImageExportArrayOutputWithContext(context.Background())
}

func (i ImageExportArray) ToImageExportArrayOutputWithContext(ctx context.Context) ImageExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportArrayOutput)
}

// ImageExportMapInput is an input type that accepts ImageExportMap and ImageExportMapOutput values.
// You can construct a concrete instance of `ImageExportMapInput` via:
//
//	ImageExportMap{ "key": ImageExportArgs{...} }
type ImageExportMapInput interface {
	pulumi.Input

	ToImageExportMapOutput() ImageExportMapOutput
	ToImageExportMapOutputWithContext(context.Context) ImageExportMapOutput
}

type ImageExportMap map[string]ImageExportInput

func (ImageExportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExport)(nil)).Elem()
}

func (i ImageExportMap) ToImageExportMapOutput() ImageExportMapOutput {
	return i.ToImageExportMapOutputWithContext(context.Background())
}

func (i ImageExportMap) ToImageExportMapOutputWithContext(ctx context.Context) ImageExportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportMapOutput)
}

type ImageExportOutput struct{ *pulumi.OutputState }

func (ImageExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExport)(nil)).Elem()
}

func (o ImageExportOutput) ToImageExportOutput() ImageExportOutput {
	return o
}

func (o ImageExportOutput) ToImageExportOutputWithContext(ctx context.Context) ImageExportOutput {
	return o
}

// The source image ID.
func (o ImageExportOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Save the exported OSS bucket.
func (o ImageExportOutput) OssBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringOutput { return v.OssBucket }).(pulumi.StringOutput)
}

// The prefix of your OSS Object. It can be composed of numbers or letters, and the character length is 1 ~ 30.
func (o ImageExportOutput) OssPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageExport) pulumi.StringPtrOutput { return v.OssPrefix }).(pulumi.StringPtrOutput)
}

type ImageExportArrayOutput struct{ *pulumi.OutputState }

func (ImageExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExport)(nil)).Elem()
}

func (o ImageExportArrayOutput) ToImageExportArrayOutput() ImageExportArrayOutput {
	return o
}

func (o ImageExportArrayOutput) ToImageExportArrayOutputWithContext(ctx context.Context) ImageExportArrayOutput {
	return o
}

func (o ImageExportArrayOutput) Index(i pulumi.IntInput) ImageExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageExport {
		return vs[0].([]*ImageExport)[vs[1].(int)]
	}).(ImageExportOutput)
}

type ImageExportMapOutput struct{ *pulumi.OutputState }

func (ImageExportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExport)(nil)).Elem()
}

func (o ImageExportMapOutput) ToImageExportMapOutput() ImageExportMapOutput {
	return o
}

func (o ImageExportMapOutput) ToImageExportMapOutputWithContext(ctx context.Context) ImageExportMapOutput {
	return o
}

func (o ImageExportMapOutput) MapIndex(k pulumi.StringInput) ImageExportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageExport {
		return vs[0].(map[string]*ImageExport)[vs[1].(string)]
	}).(ImageExportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportInput)(nil)).Elem(), &ImageExport{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportArrayInput)(nil)).Elem(), ImageExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportMapInput)(nil)).Elem(), ImageExportMap{})
	pulumi.RegisterOutputType(ImageExportOutput{})
	pulumi.RegisterOutputType(ImageExportArrayOutput{})
	pulumi.RegisterOutputType(ImageExportMapOutput{})
}
