// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Ecs Prefix Lists of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.152.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := ecs.GetEcsPrefixLists(ctx, &ecs.GetEcsPrefixListsArgs{
// 			Ids: []string{
// 				"E2RY53-xxxx",
// 			},
// 			NameRegex: pulumi.StringRef("tf-testAcc"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("outputId", example.Lists[0].Id)
// 		return nil
// 	})
// }
// ```
func GetEcsPrefixLists(ctx *pulumi.Context, args *GetEcsPrefixListsArgs, opts ...pulumi.InvokeOption) (*GetEcsPrefixListsResult, error) {
	var rv GetEcsPrefixListsResult
	err := ctx.Invoke("alicloud:ecs/getEcsPrefixLists:getEcsPrefixLists", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEcsPrefixLists.
type GetEcsPrefixListsArgs struct {
	// The address family of the prefix list. Valid values:`IPv4`,`IPv6`.
	AddressFamily *string `pulumi:"addressFamily"`
	EnableDetails *bool   `pulumi:"enableDetails"`
	// A list of Prefix List IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by `prefixListName`.
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getEcsPrefixLists.
type GetEcsPrefixListsResult struct {
	AddressFamily *string `pulumi:"addressFamily"`
	EnableDetails *bool   `pulumi:"enableDetails"`
	// The provider-assigned unique ID for this managed resource.
	Id         string                  `pulumi:"id"`
	Ids        []string                `pulumi:"ids"`
	Lists      []GetEcsPrefixListsList `pulumi:"lists"`
	NameRegex  *string                 `pulumi:"nameRegex"`
	Names      []string                `pulumi:"names"`
	OutputFile *string                 `pulumi:"outputFile"`
}

func GetEcsPrefixListsOutput(ctx *pulumi.Context, args GetEcsPrefixListsOutputArgs, opts ...pulumi.InvokeOption) GetEcsPrefixListsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEcsPrefixListsResult, error) {
			args := v.(GetEcsPrefixListsArgs)
			r, err := GetEcsPrefixLists(ctx, &args, opts...)
			var s GetEcsPrefixListsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEcsPrefixListsResultOutput)
}

// A collection of arguments for invoking getEcsPrefixLists.
type GetEcsPrefixListsOutputArgs struct {
	// The address family of the prefix list. Valid values:`IPv4`,`IPv6`.
	AddressFamily pulumi.StringPtrInput `pulumi:"addressFamily"`
	EnableDetails pulumi.BoolPtrInput   `pulumi:"enableDetails"`
	// A list of Prefix List IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by `prefixListName`.
	NameRegex  pulumi.StringPtrInput `pulumi:"nameRegex"`
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetEcsPrefixListsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsPrefixListsArgs)(nil)).Elem()
}

// A collection of values returned by getEcsPrefixLists.
type GetEcsPrefixListsResultOutput struct{ *pulumi.OutputState }

func (GetEcsPrefixListsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsPrefixListsResult)(nil)).Elem()
}

func (o GetEcsPrefixListsResultOutput) ToGetEcsPrefixListsResultOutput() GetEcsPrefixListsResultOutput {
	return o
}

func (o GetEcsPrefixListsResultOutput) ToGetEcsPrefixListsResultOutputWithContext(ctx context.Context) GetEcsPrefixListsResultOutput {
	return o
}

func (o GetEcsPrefixListsResultOutput) AddressFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) *string { return v.AddressFamily }).(pulumi.StringPtrOutput)
}

func (o GetEcsPrefixListsResultOutput) EnableDetails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) *bool { return v.EnableDetails }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEcsPrefixListsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEcsPrefixListsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetEcsPrefixListsResultOutput) Lists() GetEcsPrefixListsListArrayOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) []GetEcsPrefixListsList { return v.Lists }).(GetEcsPrefixListsListArrayOutput)
}

func (o GetEcsPrefixListsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetEcsPrefixListsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetEcsPrefixListsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEcsPrefixListsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEcsPrefixListsResultOutput{})
}
