// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourcemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Resource Manager Resource Share resource.
//
// RS resource sharing.
//
// For information about Resource Manager Resource Share and how to use it, see [What is Resource Share](https://www.alibabacloud.com/help/en/doc-detail/94475.htm).
//
// > **NOTE:** Available since v1.111.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := resourcemanager.NewResourceShare(ctx, "example", &resourcemanager.ResourceShareArgs{
//				ResourceShareName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Manager Resource Share can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:resourcemanager/resourceShare:ResourceShare example <id>
// ```
type ResourceShare struct {
	pulumi.CustomResourceState

	// Whether to allow sharing to accounts outside the resource directory. Value:
	// - false (default): Only sharing within the resource directory is allowed.
	// - true: Allow sharing to any account.
	AllowExternalTargets pulumi.BoolPtrOutput `pulumi:"allowExternalTargets"`
	// The create time of resource share.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
	PermissionNames pulumi.StringArrayOutput `pulumi:"permissionNames"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The name of resource share.
	ResourceShareName pulumi.StringOutput `pulumi:"resourceShareName"`
	// The owner of resource share,  `Self` and `OtherAccounts`.
	ResourceShareOwner pulumi.StringOutput `pulumi:"resourceShareOwner"`
	// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
	Resources ResourceShareResourceArrayOutput `pulumi:"resources"`
	// The status of resource share.  `Active`,`Deleted` and `Deleting`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag of the resource
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource user.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
}

// NewResourceShare registers a new resource with the given unique name, arguments, and options.
func NewResourceShare(ctx *pulumi.Context,
	name string, args *ResourceShareArgs, opts ...pulumi.ResourceOption) (*ResourceShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceShareName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceShareName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceShare
	err := ctx.RegisterResource("alicloud:resourcemanager/resourceShare:ResourceShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceShare gets an existing ResourceShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceShareState, opts ...pulumi.ResourceOption) (*ResourceShare, error) {
	var resource ResourceShare
	err := ctx.ReadResource("alicloud:resourcemanager/resourceShare:ResourceShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceShare resources.
type resourceShareState struct {
	// Whether to allow sharing to accounts outside the resource directory. Value:
	// - false (default): Only sharing within the resource directory is allowed.
	// - true: Allow sharing to any account.
	AllowExternalTargets *bool `pulumi:"allowExternalTargets"`
	// The create time of resource share.
	CreateTime *string `pulumi:"createTime"`
	// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
	PermissionNames []string `pulumi:"permissionNames"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The name of resource share.
	ResourceShareName *string `pulumi:"resourceShareName"`
	// The owner of resource share,  `Self` and `OtherAccounts`.
	ResourceShareOwner *string `pulumi:"resourceShareOwner"`
	// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
	Resources []ResourceShareResource `pulumi:"resources"`
	// The status of resource share.  `Active`,`Deleted` and `Deleting`.
	Status *string `pulumi:"status"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// Resource user.
	Targets []string `pulumi:"targets"`
}

type ResourceShareState struct {
	// Whether to allow sharing to accounts outside the resource directory. Value:
	// - false (default): Only sharing within the resource directory is allowed.
	// - true: Allow sharing to any account.
	AllowExternalTargets pulumi.BoolPtrInput
	// The create time of resource share.
	CreateTime pulumi.StringPtrInput
	// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
	PermissionNames pulumi.StringArrayInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The name of resource share.
	ResourceShareName pulumi.StringPtrInput
	// The owner of resource share,  `Self` and `OtherAccounts`.
	ResourceShareOwner pulumi.StringPtrInput
	// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
	Resources ResourceShareResourceArrayInput
	// The status of resource share.  `Active`,`Deleted` and `Deleting`.
	Status pulumi.StringPtrInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// Resource user.
	Targets pulumi.StringArrayInput
}

func (ResourceShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareState)(nil)).Elem()
}

type resourceShareArgs struct {
	// Whether to allow sharing to accounts outside the resource directory. Value:
	// - false (default): Only sharing within the resource directory is allowed.
	// - true: Allow sharing to any account.
	AllowExternalTargets *bool `pulumi:"allowExternalTargets"`
	// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
	PermissionNames []string `pulumi:"permissionNames"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The name of resource share.
	ResourceShareName string `pulumi:"resourceShareName"`
	// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
	Resources []ResourceShareResource `pulumi:"resources"`
	// The tag of the resource
	Tags map[string]string `pulumi:"tags"`
	// Resource user.
	Targets []string `pulumi:"targets"`
}

// The set of arguments for constructing a ResourceShare resource.
type ResourceShareArgs struct {
	// Whether to allow sharing to accounts outside the resource directory. Value:
	// - false (default): Only sharing within the resource directory is allowed.
	// - true: Allow sharing to any account.
	AllowExternalTargets pulumi.BoolPtrInput
	// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
	PermissionNames pulumi.StringArrayInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The name of resource share.
	ResourceShareName pulumi.StringInput
	// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
	Resources ResourceShareResourceArrayInput
	// The tag of the resource
	Tags pulumi.StringMapInput
	// Resource user.
	Targets pulumi.StringArrayInput
}

func (ResourceShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareArgs)(nil)).Elem()
}

type ResourceShareInput interface {
	pulumi.Input

	ToResourceShareOutput() ResourceShareOutput
	ToResourceShareOutputWithContext(ctx context.Context) ResourceShareOutput
}

func (*ResourceShare) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceShare)(nil)).Elem()
}

func (i *ResourceShare) ToResourceShareOutput() ResourceShareOutput {
	return i.ToResourceShareOutputWithContext(context.Background())
}

func (i *ResourceShare) ToResourceShareOutputWithContext(ctx context.Context) ResourceShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceShareOutput)
}

// ResourceShareArrayInput is an input type that accepts ResourceShareArray and ResourceShareArrayOutput values.
// You can construct a concrete instance of `ResourceShareArrayInput` via:
//
//	ResourceShareArray{ ResourceShareArgs{...} }
type ResourceShareArrayInput interface {
	pulumi.Input

	ToResourceShareArrayOutput() ResourceShareArrayOutput
	ToResourceShareArrayOutputWithContext(context.Context) ResourceShareArrayOutput
}

type ResourceShareArray []ResourceShareInput

func (ResourceShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceShare)(nil)).Elem()
}

func (i ResourceShareArray) ToResourceShareArrayOutput() ResourceShareArrayOutput {
	return i.ToResourceShareArrayOutputWithContext(context.Background())
}

func (i ResourceShareArray) ToResourceShareArrayOutputWithContext(ctx context.Context) ResourceShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceShareArrayOutput)
}

// ResourceShareMapInput is an input type that accepts ResourceShareMap and ResourceShareMapOutput values.
// You can construct a concrete instance of `ResourceShareMapInput` via:
//
//	ResourceShareMap{ "key": ResourceShareArgs{...} }
type ResourceShareMapInput interface {
	pulumi.Input

	ToResourceShareMapOutput() ResourceShareMapOutput
	ToResourceShareMapOutputWithContext(context.Context) ResourceShareMapOutput
}

type ResourceShareMap map[string]ResourceShareInput

func (ResourceShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceShare)(nil)).Elem()
}

func (i ResourceShareMap) ToResourceShareMapOutput() ResourceShareMapOutput {
	return i.ToResourceShareMapOutputWithContext(context.Background())
}

func (i ResourceShareMap) ToResourceShareMapOutputWithContext(ctx context.Context) ResourceShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceShareMapOutput)
}

type ResourceShareOutput struct{ *pulumi.OutputState }

func (ResourceShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceShare)(nil)).Elem()
}

func (o ResourceShareOutput) ToResourceShareOutput() ResourceShareOutput {
	return o
}

func (o ResourceShareOutput) ToResourceShareOutputWithContext(ctx context.Context) ResourceShareOutput {
	return o
}

// Whether to allow sharing to accounts outside the resource directory. Value:
// - false (default): Only sharing within the resource directory is allowed.
// - true: Allow sharing to any account.
func (o ResourceShareOutput) AllowExternalTargets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.BoolPtrOutput { return v.AllowExternalTargets }).(pulumi.BoolPtrOutput)
}

// The create time of resource share.
func (o ResourceShareOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Share permission name. When it is empty, the system automatically binds the default permissions associated with the resource type. For more information, see [Permission Library](https://www.alibabacloud.com/help/en/resource-management/resource-sharing/user-guide/permissions-for-resource-sharing).
func (o ResourceShareOutput) PermissionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringArrayOutput { return v.PermissionNames }).(pulumi.StringArrayOutput)
}

// The ID of the resource group
func (o ResourceShareOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The name of resource share.
func (o ResourceShareOutput) ResourceShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringOutput { return v.ResourceShareName }).(pulumi.StringOutput)
}

// The owner of resource share,  `Self` and `OtherAccounts`.
func (o ResourceShareOutput) ResourceShareOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringOutput { return v.ResourceShareOwner }).(pulumi.StringOutput)
}

// List of shared resources. **Note: The parameter is immutable after resource creation. It only applies during resource creation and has no effect when modified post-creation.** See `resources` below.
func (o ResourceShareOutput) Resources() ResourceShareResourceArrayOutput {
	return o.ApplyT(func(v *ResourceShare) ResourceShareResourceArrayOutput { return v.Resources }).(ResourceShareResourceArrayOutput)
}

// The status of resource share.  `Active`,`Deleted` and `Deleting`.
func (o ResourceShareOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag of the resource
func (o ResourceShareOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource user.
func (o ResourceShareOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceShare) pulumi.StringArrayOutput { return v.Targets }).(pulumi.StringArrayOutput)
}

type ResourceShareArrayOutput struct{ *pulumi.OutputState }

func (ResourceShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceShare)(nil)).Elem()
}

func (o ResourceShareArrayOutput) ToResourceShareArrayOutput() ResourceShareArrayOutput {
	return o
}

func (o ResourceShareArrayOutput) ToResourceShareArrayOutputWithContext(ctx context.Context) ResourceShareArrayOutput {
	return o
}

func (o ResourceShareArrayOutput) Index(i pulumi.IntInput) ResourceShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceShare {
		return vs[0].([]*ResourceShare)[vs[1].(int)]
	}).(ResourceShareOutput)
}

type ResourceShareMapOutput struct{ *pulumi.OutputState }

func (ResourceShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceShare)(nil)).Elem()
}

func (o ResourceShareMapOutput) ToResourceShareMapOutput() ResourceShareMapOutput {
	return o
}

func (o ResourceShareMapOutput) ToResourceShareMapOutputWithContext(ctx context.Context) ResourceShareMapOutput {
	return o
}

func (o ResourceShareMapOutput) MapIndex(k pulumi.StringInput) ResourceShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceShare {
		return vs[0].(map[string]*ResourceShare)[vs[1].(string)]
	}).(ResourceShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceShareInput)(nil)).Elem(), &ResourceShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceShareArrayInput)(nil)).Elem(), ResourceShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceShareMapInput)(nil)).Elem(), ResourceShareMap{})
	pulumi.RegisterOutputType(ResourceShareOutput{})
	pulumi.RegisterOutputType(ResourceShareArrayOutput{})
	pulumi.RegisterOutputType(ResourceShareMapOutput{})
}
