// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourcemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Resource Manager Message Contact resource.
//
// Message contact for Resource Directory account.
//
// For information about Resource Manager Message Contact and how to use it, see [What is Message Contact](https://next.api.alibabacloud.com/document/ResourceDirectoryMaster/2022-04-19/AddMessageContact).
//
// > **NOTE:** Available since v1.259.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := resourcemanager.NewMessageContact(ctx, "default", &resourcemanager.MessageContactArgs{
//				MessageTypes: pulumi.StringArray{
//					pulumi.String("AccountExpenses"),
//				},
//				PhoneNumber:        pulumi.String("86-18626811111"),
//				Title:              pulumi.String("TechnicalDirector"),
//				EmailAddress:       pulumi.String("resourceexample@126.com"),
//				MessageContactName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Manager Message Contact can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:resourcemanager/messageContact:MessageContact example <id>
// ```
type MessageContact struct {
	pulumi.CustomResourceState

	// The time when the contact was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The email address of the contact.
	// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// The name of the contact.
	// The name must be unique in your resource directory.
	// The name must be 2 to 12 characters in length and can contain only letters.
	MessageContactName pulumi.StringOutput `pulumi:"messageContactName"`
	// The types of messages received by the contact.
	MessageTypes pulumi.StringArrayOutput `pulumi:"messageTypes"`
	// The mobile phone number of the contact.
	//
	// Specify the mobile phone number in the `-` format.
	//
	// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
	//
	// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
	PhoneNumber pulumi.StringPtrOutput `pulumi:"phoneNumber"`
	// The status of the contact.
	Status pulumi.StringOutput `pulumi:"status"`
	// The job title of the contact.Valid values:
	// - FinanceDirector
	// - TechnicalDirector
	// - MaintenanceDirector
	// - CEO
	// - ProjectDirector
	// - Other
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewMessageContact registers a new resource with the given unique name, arguments, and options.
func NewMessageContact(ctx *pulumi.Context,
	name string, args *MessageContactArgs, opts ...pulumi.ResourceOption) (*MessageContact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.MessageContactName == nil {
		return nil, errors.New("invalid value for required argument 'MessageContactName'")
	}
	if args.MessageTypes == nil {
		return nil, errors.New("invalid value for required argument 'MessageTypes'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MessageContact
	err := ctx.RegisterResource("alicloud:resourcemanager/messageContact:MessageContact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMessageContact gets an existing MessageContact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMessageContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MessageContactState, opts ...pulumi.ResourceOption) (*MessageContact, error) {
	var resource MessageContact
	err := ctx.ReadResource("alicloud:resourcemanager/messageContact:MessageContact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MessageContact resources.
type messageContactState struct {
	// The time when the contact was created.
	CreateTime *string `pulumi:"createTime"`
	// The email address of the contact.
	// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
	EmailAddress *string `pulumi:"emailAddress"`
	// The name of the contact.
	// The name must be unique in your resource directory.
	// The name must be 2 to 12 characters in length and can contain only letters.
	MessageContactName *string `pulumi:"messageContactName"`
	// The types of messages received by the contact.
	MessageTypes []string `pulumi:"messageTypes"`
	// The mobile phone number of the contact.
	//
	// Specify the mobile phone number in the `-` format.
	//
	// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
	//
	// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The status of the contact.
	Status *string `pulumi:"status"`
	// The job title of the contact.Valid values:
	// - FinanceDirector
	// - TechnicalDirector
	// - MaintenanceDirector
	// - CEO
	// - ProjectDirector
	// - Other
	Title *string `pulumi:"title"`
}

type MessageContactState struct {
	// The time when the contact was created.
	CreateTime pulumi.StringPtrInput
	// The email address of the contact.
	// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
	EmailAddress pulumi.StringPtrInput
	// The name of the contact.
	// The name must be unique in your resource directory.
	// The name must be 2 to 12 characters in length and can contain only letters.
	MessageContactName pulumi.StringPtrInput
	// The types of messages received by the contact.
	MessageTypes pulumi.StringArrayInput
	// The mobile phone number of the contact.
	//
	// Specify the mobile phone number in the `-` format.
	//
	// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
	//
	// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
	PhoneNumber pulumi.StringPtrInput
	// The status of the contact.
	Status pulumi.StringPtrInput
	// The job title of the contact.Valid values:
	// - FinanceDirector
	// - TechnicalDirector
	// - MaintenanceDirector
	// - CEO
	// - ProjectDirector
	// - Other
	Title pulumi.StringPtrInput
}

func (MessageContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*messageContactState)(nil)).Elem()
}

type messageContactArgs struct {
	// The email address of the contact.
	// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the contact.
	// The name must be unique in your resource directory.
	// The name must be 2 to 12 characters in length and can contain only letters.
	MessageContactName string `pulumi:"messageContactName"`
	// The types of messages received by the contact.
	MessageTypes []string `pulumi:"messageTypes"`
	// The mobile phone number of the contact.
	//
	// Specify the mobile phone number in the `-` format.
	//
	// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
	//
	// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The job title of the contact.Valid values:
	// - FinanceDirector
	// - TechnicalDirector
	// - MaintenanceDirector
	// - CEO
	// - ProjectDirector
	// - Other
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a MessageContact resource.
type MessageContactArgs struct {
	// The email address of the contact.
	// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
	EmailAddress pulumi.StringInput
	// The name of the contact.
	// The name must be unique in your resource directory.
	// The name must be 2 to 12 characters in length and can contain only letters.
	MessageContactName pulumi.StringInput
	// The types of messages received by the contact.
	MessageTypes pulumi.StringArrayInput
	// The mobile phone number of the contact.
	//
	// Specify the mobile phone number in the `-` format.
	//
	// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
	//
	// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
	PhoneNumber pulumi.StringPtrInput
	// The job title of the contact.Valid values:
	// - FinanceDirector
	// - TechnicalDirector
	// - MaintenanceDirector
	// - CEO
	// - ProjectDirector
	// - Other
	Title pulumi.StringInput
}

func (MessageContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*messageContactArgs)(nil)).Elem()
}

type MessageContactInput interface {
	pulumi.Input

	ToMessageContactOutput() MessageContactOutput
	ToMessageContactOutputWithContext(ctx context.Context) MessageContactOutput
}

func (*MessageContact) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageContact)(nil)).Elem()
}

func (i *MessageContact) ToMessageContactOutput() MessageContactOutput {
	return i.ToMessageContactOutputWithContext(context.Background())
}

func (i *MessageContact) ToMessageContactOutputWithContext(ctx context.Context) MessageContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageContactOutput)
}

// MessageContactArrayInput is an input type that accepts MessageContactArray and MessageContactArrayOutput values.
// You can construct a concrete instance of `MessageContactArrayInput` via:
//
//	MessageContactArray{ MessageContactArgs{...} }
type MessageContactArrayInput interface {
	pulumi.Input

	ToMessageContactArrayOutput() MessageContactArrayOutput
	ToMessageContactArrayOutputWithContext(context.Context) MessageContactArrayOutput
}

type MessageContactArray []MessageContactInput

func (MessageContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MessageContact)(nil)).Elem()
}

func (i MessageContactArray) ToMessageContactArrayOutput() MessageContactArrayOutput {
	return i.ToMessageContactArrayOutputWithContext(context.Background())
}

func (i MessageContactArray) ToMessageContactArrayOutputWithContext(ctx context.Context) MessageContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageContactArrayOutput)
}

// MessageContactMapInput is an input type that accepts MessageContactMap and MessageContactMapOutput values.
// You can construct a concrete instance of `MessageContactMapInput` via:
//
//	MessageContactMap{ "key": MessageContactArgs{...} }
type MessageContactMapInput interface {
	pulumi.Input

	ToMessageContactMapOutput() MessageContactMapOutput
	ToMessageContactMapOutputWithContext(context.Context) MessageContactMapOutput
}

type MessageContactMap map[string]MessageContactInput

func (MessageContactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MessageContact)(nil)).Elem()
}

func (i MessageContactMap) ToMessageContactMapOutput() MessageContactMapOutput {
	return i.ToMessageContactMapOutputWithContext(context.Background())
}

func (i MessageContactMap) ToMessageContactMapOutputWithContext(ctx context.Context) MessageContactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageContactMapOutput)
}

type MessageContactOutput struct{ *pulumi.OutputState }

func (MessageContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageContact)(nil)).Elem()
}

func (o MessageContactOutput) ToMessageContactOutput() MessageContactOutput {
	return o
}

func (o MessageContactOutput) ToMessageContactOutputWithContext(ctx context.Context) MessageContactOutput {
	return o
}

// The time when the contact was created.
func (o MessageContactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The email address of the contact.
// After you specify an email address, you need to call SendEmailVerificationForMessageContact to send verification information to the email address. After the verification is passed, the email address takes effect.
func (o MessageContactOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the contact.
// The name must be unique in your resource directory.
// The name must be 2 to 12 characters in length and can contain only letters.
func (o MessageContactOutput) MessageContactName() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringOutput { return v.MessageContactName }).(pulumi.StringOutput)
}

// The types of messages received by the contact.
func (o MessageContactOutput) MessageTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringArrayOutput { return v.MessageTypes }).(pulumi.StringArrayOutput)
}

// The mobile phone number of the contact.
//
// Specify the mobile phone number in the `-` format.
//
// > **NOTE:**  Only mobile phone numbers in the `86-` format in the Chinese mainland are supported.
//
// After you specify a mobile phone number, you need to call SendPhoneVerificationForMessageContact to send verification information to the mobile phone number. After the verification is passed, the mobile phone number takes effect.
func (o MessageContactOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringPtrOutput { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

// The status of the contact.
func (o MessageContactOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The job title of the contact.Valid values:
// - FinanceDirector
// - TechnicalDirector
// - MaintenanceDirector
// - CEO
// - ProjectDirector
// - Other
func (o MessageContactOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *MessageContact) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type MessageContactArrayOutput struct{ *pulumi.OutputState }

func (MessageContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MessageContact)(nil)).Elem()
}

func (o MessageContactArrayOutput) ToMessageContactArrayOutput() MessageContactArrayOutput {
	return o
}

func (o MessageContactArrayOutput) ToMessageContactArrayOutputWithContext(ctx context.Context) MessageContactArrayOutput {
	return o
}

func (o MessageContactArrayOutput) Index(i pulumi.IntInput) MessageContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MessageContact {
		return vs[0].([]*MessageContact)[vs[1].(int)]
	}).(MessageContactOutput)
}

type MessageContactMapOutput struct{ *pulumi.OutputState }

func (MessageContactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MessageContact)(nil)).Elem()
}

func (o MessageContactMapOutput) ToMessageContactMapOutput() MessageContactMapOutput {
	return o
}

func (o MessageContactMapOutput) ToMessageContactMapOutputWithContext(ctx context.Context) MessageContactMapOutput {
	return o
}

func (o MessageContactMapOutput) MapIndex(k pulumi.StringInput) MessageContactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MessageContact {
		return vs[0].(map[string]*MessageContact)[vs[1].(string)]
	}).(MessageContactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MessageContactInput)(nil)).Elem(), &MessageContact{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageContactArrayInput)(nil)).Elem(), MessageContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MessageContactMapInput)(nil)).Elem(), MessageContactMap{})
	pulumi.RegisterOutputType(MessageContactOutput{})
	pulumi.RegisterOutputType(MessageContactArrayOutput{})
	pulumi.RegisterOutputType(MessageContactMapOutput{})
}
