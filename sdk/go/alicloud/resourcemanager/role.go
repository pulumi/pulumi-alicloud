// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package resourcemanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Resource Manager role resource. Members are resource containers in the resource directory, which can physically isolate resources to form an independent resource grouping unit. You can create members in the resource folder to manage them in a unified manner.
// For information about Resource Manager role and how to use it, see [What is Resource Manager role](https://www.alibabacloud.com/help/en/doc-detail/111231.htm).
//
// > **NOTE:** Available in v1.82.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/resourcemanager"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := resourcemanager.NewRole(ctx, "example", &resourcemanager.RoleArgs{
// 			AssumeRolePolicyDocument: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "     {\n", "          \"Statement\": [\n", "               {\n", "                    \"Action\": \"sts:AssumeRole\",\n", "                    \"Effect\": \"Allow\",\n", "                    \"Principal\": {\n", "                        \"RAM\":[\n", "                                \"acs:ram::103755469187****:root\"ï¼Œ\n", "                                \"acs:ram::104408977069****:root\"\n", "                        ]\n", "                    }\n", "                }\n", "          ],\n", "          \"Version\": \"1\"\n", "     }\n", "	 \n")),
// 			RoleName: pulumi.String("testrd"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Resource Manager can be imported using the id or role_name, e.g.
//
// ```sh
//  $ pulumi import alicloud:resourcemanager/role:Role example testrd
// ```
type Role struct {
	pulumi.CustomResourceState

	// The resource descriptor of the role.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The content of the permissions strategy that plays a role.
	AssumeRolePolicyDocument pulumi.StringOutput `pulumi:"assumeRolePolicyDocument"`
	// Role creation time.
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// The description of the Resource Manager role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Role maximum session time. Valid values: [3600-43200]. Default to `3600`.
	MaxSessionDuration pulumi.IntPtrOutput `pulumi:"maxSessionDuration"`
	RoleId             pulumi.StringOutput `pulumi:"roleId"`
	// Role Name. The length is 1 ~ 64 characters, which can include English letters, numbers, dots "." and dashes "-".
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Role update time.
	UpdateDate pulumi.StringOutput `pulumi:"updateDate"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil || args.AssumeRolePolicyDocument == nil {
		return nil, errors.New("missing required argument 'AssumeRolePolicyDocument'")
	}
	if args == nil || args.RoleName == nil {
		return nil, errors.New("missing required argument 'RoleName'")
	}
	if args == nil {
		args = &RoleArgs{}
	}
	var resource Role
	err := ctx.RegisterResource("alicloud:resourcemanager/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("alicloud:resourcemanager/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// The resource descriptor of the role.
	Arn *string `pulumi:"arn"`
	// The content of the permissions strategy that plays a role.
	AssumeRolePolicyDocument *string `pulumi:"assumeRolePolicyDocument"`
	// Role creation time.
	CreateDate *string `pulumi:"createDate"`
	// The description of the Resource Manager role.
	Description *string `pulumi:"description"`
	// Role maximum session time. Valid values: [3600-43200]. Default to `3600`.
	MaxSessionDuration *int    `pulumi:"maxSessionDuration"`
	RoleId             *string `pulumi:"roleId"`
	// Role Name. The length is 1 ~ 64 characters, which can include English letters, numbers, dots "." and dashes "-".
	RoleName *string `pulumi:"roleName"`
	// Role update time.
	UpdateDate *string `pulumi:"updateDate"`
}

type RoleState struct {
	// The resource descriptor of the role.
	Arn pulumi.StringPtrInput
	// The content of the permissions strategy that plays a role.
	AssumeRolePolicyDocument pulumi.StringPtrInput
	// Role creation time.
	CreateDate pulumi.StringPtrInput
	// The description of the Resource Manager role.
	Description pulumi.StringPtrInput
	// Role maximum session time. Valid values: [3600-43200]. Default to `3600`.
	MaxSessionDuration pulumi.IntPtrInput
	RoleId             pulumi.StringPtrInput
	// Role Name. The length is 1 ~ 64 characters, which can include English letters, numbers, dots "." and dashes "-".
	RoleName pulumi.StringPtrInput
	// Role update time.
	UpdateDate pulumi.StringPtrInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// The content of the permissions strategy that plays a role.
	AssumeRolePolicyDocument string `pulumi:"assumeRolePolicyDocument"`
	// The description of the Resource Manager role.
	Description *string `pulumi:"description"`
	// Role maximum session time. Valid values: [3600-43200]. Default to `3600`.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// Role Name. The length is 1 ~ 64 characters, which can include English letters, numbers, dots "." and dashes "-".
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// The content of the permissions strategy that plays a role.
	AssumeRolePolicyDocument pulumi.StringInput
	// The description of the Resource Manager role.
	Description pulumi.StringPtrInput
	// Role maximum session time. Valid values: [3600-43200]. Default to `3600`.
	MaxSessionDuration pulumi.IntPtrInput
	// Role Name. The length is 1 ~ 64 characters, which can include English letters, numbers, dots "." and dashes "-".
	RoleName pulumi.StringInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (Role) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

type RoleOutput struct {
	*pulumi.OutputState
}

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleOutput)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RoleOutput{})
}
