// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nlb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a NLB Listener Additional Certificate Attachment resource.
//
// For information about NLB Listener Additional Certificate Attachment and how to use it, see [What is Listener Additional Certificate Attachment](https://www.alibabacloud.com/help/en/server-load-balancer/latest/nlb-instances-change).
//
// > **NOTE:** Available since v1.209.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cas"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nlb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := nlb.GetZones(ctx, &nlb.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			createVpc, err := vpc.NewNetwork(ctx, "create_vpc", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			createVswJ, err := vpc.NewSwitch(ctx, "create_vsw_j", &vpc.SwitchArgs{
//				VpcId:     createVpc.ID(),
//				ZoneId:    pulumi.String(_default.Zones[0].Id),
//				CidrBlock: pulumi.String("172.16.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			createVswK, err := vpc.NewSwitch(ctx, "create_vsw_k", &vpc.SwitchArgs{
//				VpcId:     createVpc.ID(),
//				ZoneId:    pulumi.String(_default.Zones[1].Id),
//				CidrBlock: pulumi.String("172.16.2.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			lb, err := nlb.NewLoadBalancer(ctx, "lb", &nlb.LoadBalancerArgs{
//				AddressIpVersion: pulumi.String("Ipv4"),
//				ZoneMappings: nlb.LoadBalancerZoneMappingArray{
//					&nlb.LoadBalancerZoneMappingArgs{
//						VswitchId: createVswJ.ID(),
//						ZoneId:    createVswJ.ZoneId,
//					},
//					&nlb.LoadBalancerZoneMappingArgs{
//						VswitchId: createVswK.ID(),
//						ZoneId:    createVswK.ZoneId,
//					},
//				},
//				LoadBalancerType: pulumi.String("Network"),
//				LoadBalancerName: pulumi.String(name),
//				VpcId:            createVpc.ID(),
//				AddressType:      pulumi.String("Internet"),
//			})
//			if err != nil {
//				return err
//			}
//			createSg, err := nlb.NewServerGroup(ctx, "create_sg", &nlb.ServerGroupArgs{
//				AddressIpVersion: pulumi.String("Ipv4"),
//				Scheduler:        pulumi.String("Wrr"),
//				HealthCheck:      &nlb.ServerGroupHealthCheckArgs{},
//				ServerGroupType:  pulumi.String("Instance"),
//				VpcId:            createVpc.ID(),
//				Protocol:         pulumi.String("TCPSSL"),
//				ServerGroupName:  pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			invokeJoin, err := std.Join(ctx, &std.JoinArgs{
//				Separator: "-",
//				Input: []interface{}{
//					name,
//					defaultInteger.Result,
//					0,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ssl0, err := cas.NewServiceCertificate(ctx, "ssl0", &cas.ServiceCertificateArgs{
//				Cert: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIIDhDCCAmwCCQCwJW4JChLBqTANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMC
// Q04xEDAOBgNVBAgMB0JlaWppbmcxEDAOBgNVBAcMB0JlaWppbmcxDDAKBgNVBAoM
// A0FsaTEPMA0GA1UECwwGQWxpeXVuMRIwEAYDVQQDDAlUZXJyYWZvcm0xHTAbBgkq
// hkiG9w0BCQEWDjEyM0BhbGl5dW0uY29tMB4XDTI0MTIyNTA3MjQ0OFoXDTI3MTIy
// NTA3MjQ0OFowgYMxCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYD
// VQQHDAdCZWlqaW5nMQwwCgYDVQQKDANBbGkxDzANBgNVBAsMBkFsaXl1bjESMBAG
// A1UEAwwJVGVycmFmb3JtMR0wGwYJKoZIhvcNAQkBFg4xMjNAYWxpeXVtLmNvbTCC
// ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK4UufXydtJZeW6lX9VahVIk
// ifblYCVkFcFoderF2FtD5AeMZJ+v+chHc7RiV+U7P3o0Fzk+cg7OL9dSEYBrwHK4
// 9yCwU/Mv+I/KsS8GjrRMOPjbrYvI0GjheEPJcILbt29tygrxX2PwV6FqWNknbGpk
// Ej8L9zTL977IHBmgw8A2AeKlqV64s8ydAgGbWO3NTK64OlEJJNR+J+75uYskNT3s
// 8DqaQV/IWlGAiUmGVeorWkrAWCfx2zSwI9jU8pNHtSF7PyxlbRy1ir2Lv1WnQKHf
// Bnhr/wXwKOL5IJRVZ144Z9TdcoPo4GbFmYMSTwYFIbjYZ3yxoygeXMk0UXPZxVsC
// AwEAATANBgkqhkiG9w0BAQsFAAOCAQEAVPA+Q0/5T6VzVw+MFXjCxXH1mWgd767w
// YWX4tvdGsTDkK6/ESm8m9GDp5F3p7Degk0isr9XkyzkWo/nPEPWQOeYR0kNTvpwY
// mKz9/aJwxalHS6O/8K2Ed6pZcXW0SUfjdH0/9YHw+vu4i2cQGTICzrKuEvyck40y
// fQocvFyw6O7W+tewLA4ntTuC6HhEQbC0p7zxGc3LSuayBgJrJiOAnGvFu+/OFQi+
// zEXi1xt8uQR6q5DQDsfqNCxpRKsCmU+POzNg2Y31GDMv4ZPerou5jXa1gh8/TVBT
// IX3OTy5aL4Ue8nBip3bVw+V/9L9xhmXbex6IMwwvrWI4OfMt6ECifQ==
// -----END CERTIFICATE-----
// `),
//
//	CertificateName: pulumi.String(invokeJoin.Result),
//	Key: pulumi.String(`-----BEGIN RSA PRIVATE KEY-----
//
// MIIEogIBAAKCAQEArhS59fJ20ll5bqVf1VqFUiSJ9uVgJWQVwWh16sXYW0PkB4xk
// n6/5yEdztGJX5Ts/ejQXOT5yDs4v11IRgGvAcrj3ILBT8y/4j8qxLwaOtEw4+Nut
// i8jQaOF4Q8lwgtu3b23KCvFfY/BXoWpY2SdsamQSPwv3NMv3vsgcGaDDwDYB4qWp
// XrizzJ0CAZtY7c1Mrrg6UQkk1H4n7vm5iyQ1PezwOppBX8haUYCJSYZV6itaSsBY
// J/HbNLAj2NTyk0e1IXs/LGVtHLWKvYu/VadAod8GeGv/BfAo4vkglFVnXjhn1N1y
// g+jgZsWZgxJPBgUhuNhnfLGjKB5cyTRRc9nFWwIDAQABAoIBAC0D2Q6bc1RzpK4S
// /5QZQ055el+o8tLYbbPEwnFCVe9LwASfrkmI5OuAZpAnuhjh2ElOfQ7lcfMYKFDi
// vPnbYzmHUQhX8G17YygzvtutM2u2JilcDSWPeS0V2NaWmYyNKoMa/dsUjZk3RkHM
// UUteIW/ljr5U5sj1UYw5DOMnqlbicy2cPPY4g1QKGW5t3p5Lxw5ojgqynzi8EKMq
// j0apEoTXxmciOrwwiP2ynRTEN77+FUZkTvmxmSPoIfNTycDPRr4aUwVHV2d5FHPn
// d1MdjSoUPbHdOLfynwXqTz9OlvMSUDrBvs6k5ripGY9qvh9PrOdj7zLXVRQXUuOR
// YwoVHKECgYEA1NzNGifjW5cdcbkzc86QA9TM7yAyBmgnopzlm+dFIhxtJmydxN4V
// 820x1Lkfe2vLCyYQ6fcEKAtjC9qdw+E2uzHAbtvnR4JseF3z1D82xw3MgGT9l3zc
// mMrgKmdCGGLWi6hboylX+2GBMVl2R0aRZrZje67jZcDXd06mlvW257ECgYEA0Vv1
// X3Ubn8XA3AA1ybem8fWNwEXfcYP1lJq0cX1gUXlpQvxWN61//aFZUCJZw5cEPArQ
// rEqhT81VCqXGO/by6D3fJD+4P8D6v6szJK2AGvXkZMfnJwAbHcOyGlxMin1CTJss
// ZID0XI9xmbedm7Wi40+qXz8q4rs25kft9YjfzMsCgYBSPfE8vtaYJ52nt7+Kae+4
// mzqG1XCeixVtPaN1BfjvAf6mDucyDgB7KeBL6S6ht/ceGpoEW30On7+n79JuwRAt
// aT6JVotYVKrmIp63jajzZYByxxI3unVcz12m5HhkBaQRF344XxvwMy8ASyloxnod
// LjDns52GTeix3wB8aPk/MQKBgGOQRwXpjISUKB64HtxacZN6ArqgwB2c8uqEFDIw
// vOCiS7Pmix4ZbdfxpqbcXzIMHKBtSEXXjBWGgd35bmfQDj7yRa9Yekgff2Ati7ny
// pQytSbu/8abzfvHNwmKU6HWoEiKaXSdCyHNIaG8BCnwlilxt44k+YifHftlO9dSi
// DkS3AoGAYmF++8uEvQot5Yma4GraY+7ZyfWNLwClsOsrN2g19Vycg16fJk0olwDx
// 2kRWKqNn99HJJwiLie1nvsDRJLbmzmI91Pttpu/EYFDJ8OYQOr1OhhPwwTygf+7S
// 1o2RTXu3gKNG6fxOtHFatws3IzvovOASYyJR5XP2sIJURLOrSN0=
// -----END RSA PRIVATE KEY-----
// `),
//
//	})
//	if err != nil {
//		return err
//	}
//	createListener, err := nlb.NewListener(ctx, "create_listener", &nlb.ListenerArgs{
//		ListenerPort:     pulumi.Int(443),
//		ServerGroupId:    createSg.ID(),
//		LoadBalancerId:   lb.ID(),
//		ListenerProtocol: pulumi.String("TCPSSL"),
//		CertificateIds: pulumi.StringArray{
//			ssl0.ID().ApplyT(func(id string) (string, error) {
//				return fmt.Sprintf("%v-cn-hangzhou", id), nil
//			}).(pulumi.StringOutput),
//		},
//		CaCertificateIds: pulumi.StringArray{},
//	})
//	if err != nil {
//		return err
//	}
//	invokeJoin1, err := std.Join(ctx, &std.JoinArgs{
//		Separator: "-",
//		Input: []interface{}{
//			name,
//			defaultInteger.Result,
//			1,
//		},
//	}, nil)
//	if err != nil {
//		return err
//	}
//	ssl, err := cas.NewServiceCertificate(ctx, "ssl", &cas.ServiceCertificateArgs{
//		Cert: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIIDRjCCAq+gAwIBAgIJAJn3ox4K13PoMA0GCSqGSIb3DQEBBQUAMHYxCzAJBgNV
// BAYTAkNOMQswCQYDVQQIEwJCSjELMAkGA1UEBxMCQkoxDDAKBgNVBAoTA0FMSTEP
// MA0GA1UECxMGQUxJWVVOMQ0wCwYDVQQDEwR0ZXN0MR8wHQYJKoZIhvcNAQkBFhB0
// ZXN0QGhvdG1haWwuY29tMB4XDTE0MTEyNDA2MDQyNVoXDTI0MTEyMTA2MDQyNVow
// djELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjEMMAoGA1UE
// ChMDQUxJMQ8wDQYDVQQLEwZBTElZVU4xDTALBgNVBAMTBHRlc3QxHzAdBgkqhkiG
// 9w0BCQEWEHRlc3RAaG90bWFpbC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ
// AoGBAM7SS3e9+Nj0HKAsRuIDNSsS3UK6b+62YQb2uuhKrp1HMrOx61WSDR2qkAnB
// coG00Uz38EE+9DLYNUVQBK7aSgLP5M1Ak4wr4GqGyCgjejzzh3DshUzLCCy2rook
// KOyRTlPX+Q5l7rE1fcSNzgepcae5i2sE1XXXzLRIDIvQxcspAgMBAAGjgdswgdgw
// HQYDVR0OBBYEFBdy+OuMsvbkV7R14f0OyoLoh2z4MIGoBgNVHSMEgaAwgZ2AFBdy
// +OuMsvbkV7R14f0OyoLoh2z4oXqkeDB2MQswCQYDVQQGEwJDTjELMAkGA1UECBMC
// QkoxCzAJBgNVBAcTAkJKMQwwCgYDVQQKEwNBTEkxDzANBgNVBAsTBkFMSVlVTjEN
// MAsGA1UEAxMEdGVzdDEfMB0GCSqGSIb3DQEJARYQdGVzdEBob3RtYWlsLmNvbYIJ
// AJn3ox4K13PoMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAY7KOsnyT
// cQzfhiiG7ASjiPakw5wXoycHt5GCvLG5htp2TKVzgv9QTliA3gtfv6oV4zRZx7X1
// Ofi6hVgErtHaXJheuPVeW6eAW8mHBoEfvDAfU3y9waYrtUevSl07643bzKL6v+Qd
// DUBTxOAvSYfXTtI90EAxEG/bJJyOm5LqoiA=
// -----END CERTIFICATE-----
// `),
//
//	CertificateName: pulumi.String(invokeJoin1.Result),
//	Key: pulumi.String(`-----BEGIN RSA PRIVATE KEY-----
//
// MIICXAIBAAKBgQDO0kt3vfjY9BygLEbiAzUrEt1Cum/utmEG9rroSq6dRzKzsetV
// kg0dqpAJwXKBtNFM9/BBPvQy2DVFUASu2koCz+TNQJOMK+BqhsgoI3o884dw7IVM
// ywgstq6KJCjskU5T1/kOZe6xNX3Ejc4HqXGnuYtrBNV118y0SAyL0MXLKQIDAQAB
// AoGAfe3NxbsGKhN42o4bGsKZPQDfeCHMxayGp5bTd10BtQIE/ST4BcJH+ihAS7Bd
// 6FwQlKzivNd4GP1MckemklCXfsVckdL94e8ZbJl23GdWul3v8V+KndJHqv5zVJmP
// hwWoKimwIBTb2s0ctVryr2f18N4hhyFw1yGp0VxclGHkjgECQQD9CvllsnOwHpP4
// MdrDHbdb29QrobKyKW8pPcDd+sth+kP6Y8MnCVuAKXCKj5FeIsgVtfluPOsZjPzz
// 71QQWS1dAkEA0T0KXO8gaBQwJhIoo/w6hy5JGZnrNSpOPp5xvJuMAafs2eyvmhJm
// Ev9SN/Pf2VYa1z6FEnBaLOVD6hf6YQIsPQJAX/CZPoW6dzwgvimo1/GcY6eleiWE
// qygqjWhsh71e/3bz7yuEAnj5yE3t7Zshcp+dXR3xxGo0eSuLfLFxHgGxwQJAAxf8
// 9DzQ5NkPkTCJi0sqbl8/03IUKTgT6hcbpWdDXa7m8J3wRr3o5nUB+TPQ5nzAbthM
// zWX931YQeACcwhxvHQJBAN5mTzzJD4w4Ma6YTaNHyXakdYfyAWrOkPIWZxfhMfXe
// DrlNdiysTI4Dd1dLeErVpjsckAaOW/JDG5PCSwkaMxk=
// -----END RSA PRIVATE KEY-----
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nlb.NewListenerAdditionalCertificateAttachment(ctx, "default", &nlb.ListenerAdditionalCertificateAttachmentArgs{
//				CertificateId: ssl.ID(),
//				ListenerId:    createListener.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NLB Listener Additional Certificate Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:nlb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment example <listener_id>:<certificate_id>
// ```
type ListenerAdditionalCertificateAttachment struct {
	pulumi.CustomResourceState

	// The ID of additional certificates.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Specifies whether to perform a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewListenerAdditionalCertificateAttachment registers a new resource with the given unique name, arguments, and options.
func NewListenerAdditionalCertificateAttachment(ctx *pulumi.Context,
	name string, args *ListenerAdditionalCertificateAttachmentArgs, opts ...pulumi.ResourceOption) (*ListenerAdditionalCertificateAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerAdditionalCertificateAttachment
	err := ctx.RegisterResource("alicloud:nlb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerAdditionalCertificateAttachment gets an existing ListenerAdditionalCertificateAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerAdditionalCertificateAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerAdditionalCertificateAttachmentState, opts ...pulumi.ResourceOption) (*ListenerAdditionalCertificateAttachment, error) {
	var resource ListenerAdditionalCertificateAttachment
	err := ctx.ReadResource("alicloud:nlb/listenerAdditionalCertificateAttachment:ListenerAdditionalCertificateAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerAdditionalCertificateAttachment resources.
type listenerAdditionalCertificateAttachmentState struct {
	// The ID of additional certificates.
	CertificateId *string `pulumi:"certificateId"`
	// Specifies whether to perform a dry run, without performing the actual request. Valid values:
	DryRun *bool `pulumi:"dryRun"`
	// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
	ListenerId *string `pulumi:"listenerId"`
	// The status of the resource
	Status *string `pulumi:"status"`
}

type ListenerAdditionalCertificateAttachmentState struct {
	// The ID of additional certificates.
	CertificateId pulumi.StringPtrInput
	// Specifies whether to perform a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrInput
	// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
	ListenerId pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
}

func (ListenerAdditionalCertificateAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerAdditionalCertificateAttachmentState)(nil)).Elem()
}

type listenerAdditionalCertificateAttachmentArgs struct {
	// The ID of additional certificates.
	CertificateId string `pulumi:"certificateId"`
	// Specifies whether to perform a dry run, without performing the actual request. Valid values:
	DryRun *bool `pulumi:"dryRun"`
	// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
	ListenerId string `pulumi:"listenerId"`
}

// The set of arguments for constructing a ListenerAdditionalCertificateAttachment resource.
type ListenerAdditionalCertificateAttachmentArgs struct {
	// The ID of additional certificates.
	CertificateId pulumi.StringInput
	// Specifies whether to perform a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrInput
	// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
	ListenerId pulumi.StringInput
}

func (ListenerAdditionalCertificateAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerAdditionalCertificateAttachmentArgs)(nil)).Elem()
}

type ListenerAdditionalCertificateAttachmentInput interface {
	pulumi.Input

	ToListenerAdditionalCertificateAttachmentOutput() ListenerAdditionalCertificateAttachmentOutput
	ToListenerAdditionalCertificateAttachmentOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentOutput
}

func (*ListenerAdditionalCertificateAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (i *ListenerAdditionalCertificateAttachment) ToListenerAdditionalCertificateAttachmentOutput() ListenerAdditionalCertificateAttachmentOutput {
	return i.ToListenerAdditionalCertificateAttachmentOutputWithContext(context.Background())
}

func (i *ListenerAdditionalCertificateAttachment) ToListenerAdditionalCertificateAttachmentOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerAdditionalCertificateAttachmentOutput)
}

// ListenerAdditionalCertificateAttachmentArrayInput is an input type that accepts ListenerAdditionalCertificateAttachmentArray and ListenerAdditionalCertificateAttachmentArrayOutput values.
// You can construct a concrete instance of `ListenerAdditionalCertificateAttachmentArrayInput` via:
//
//	ListenerAdditionalCertificateAttachmentArray{ ListenerAdditionalCertificateAttachmentArgs{...} }
type ListenerAdditionalCertificateAttachmentArrayInput interface {
	pulumi.Input

	ToListenerAdditionalCertificateAttachmentArrayOutput() ListenerAdditionalCertificateAttachmentArrayOutput
	ToListenerAdditionalCertificateAttachmentArrayOutputWithContext(context.Context) ListenerAdditionalCertificateAttachmentArrayOutput
}

type ListenerAdditionalCertificateAttachmentArray []ListenerAdditionalCertificateAttachmentInput

func (ListenerAdditionalCertificateAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (i ListenerAdditionalCertificateAttachmentArray) ToListenerAdditionalCertificateAttachmentArrayOutput() ListenerAdditionalCertificateAttachmentArrayOutput {
	return i.ToListenerAdditionalCertificateAttachmentArrayOutputWithContext(context.Background())
}

func (i ListenerAdditionalCertificateAttachmentArray) ToListenerAdditionalCertificateAttachmentArrayOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerAdditionalCertificateAttachmentArrayOutput)
}

// ListenerAdditionalCertificateAttachmentMapInput is an input type that accepts ListenerAdditionalCertificateAttachmentMap and ListenerAdditionalCertificateAttachmentMapOutput values.
// You can construct a concrete instance of `ListenerAdditionalCertificateAttachmentMapInput` via:
//
//	ListenerAdditionalCertificateAttachmentMap{ "key": ListenerAdditionalCertificateAttachmentArgs{...} }
type ListenerAdditionalCertificateAttachmentMapInput interface {
	pulumi.Input

	ToListenerAdditionalCertificateAttachmentMapOutput() ListenerAdditionalCertificateAttachmentMapOutput
	ToListenerAdditionalCertificateAttachmentMapOutputWithContext(context.Context) ListenerAdditionalCertificateAttachmentMapOutput
}

type ListenerAdditionalCertificateAttachmentMap map[string]ListenerAdditionalCertificateAttachmentInput

func (ListenerAdditionalCertificateAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (i ListenerAdditionalCertificateAttachmentMap) ToListenerAdditionalCertificateAttachmentMapOutput() ListenerAdditionalCertificateAttachmentMapOutput {
	return i.ToListenerAdditionalCertificateAttachmentMapOutputWithContext(context.Background())
}

func (i ListenerAdditionalCertificateAttachmentMap) ToListenerAdditionalCertificateAttachmentMapOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerAdditionalCertificateAttachmentMapOutput)
}

type ListenerAdditionalCertificateAttachmentOutput struct{ *pulumi.OutputState }

func (ListenerAdditionalCertificateAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (o ListenerAdditionalCertificateAttachmentOutput) ToListenerAdditionalCertificateAttachmentOutput() ListenerAdditionalCertificateAttachmentOutput {
	return o
}

func (o ListenerAdditionalCertificateAttachmentOutput) ToListenerAdditionalCertificateAttachmentOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentOutput {
	return o
}

// The ID of additional certificates.
func (o ListenerAdditionalCertificateAttachmentOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerAdditionalCertificateAttachment) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// Specifies whether to perform a dry run, without performing the actual request. Valid values:
func (o ListenerAdditionalCertificateAttachmentOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ListenerAdditionalCertificateAttachment) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The listener ID. You must specify the ID of a listener that uses SSL over TCP.
func (o ListenerAdditionalCertificateAttachmentOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerAdditionalCertificateAttachment) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// The status of the resource
func (o ListenerAdditionalCertificateAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerAdditionalCertificateAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ListenerAdditionalCertificateAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ListenerAdditionalCertificateAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (o ListenerAdditionalCertificateAttachmentArrayOutput) ToListenerAdditionalCertificateAttachmentArrayOutput() ListenerAdditionalCertificateAttachmentArrayOutput {
	return o
}

func (o ListenerAdditionalCertificateAttachmentArrayOutput) ToListenerAdditionalCertificateAttachmentArrayOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentArrayOutput {
	return o
}

func (o ListenerAdditionalCertificateAttachmentArrayOutput) Index(i pulumi.IntInput) ListenerAdditionalCertificateAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListenerAdditionalCertificateAttachment {
		return vs[0].([]*ListenerAdditionalCertificateAttachment)[vs[1].(int)]
	}).(ListenerAdditionalCertificateAttachmentOutput)
}

type ListenerAdditionalCertificateAttachmentMapOutput struct{ *pulumi.OutputState }

func (ListenerAdditionalCertificateAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerAdditionalCertificateAttachment)(nil)).Elem()
}

func (o ListenerAdditionalCertificateAttachmentMapOutput) ToListenerAdditionalCertificateAttachmentMapOutput() ListenerAdditionalCertificateAttachmentMapOutput {
	return o
}

func (o ListenerAdditionalCertificateAttachmentMapOutput) ToListenerAdditionalCertificateAttachmentMapOutputWithContext(ctx context.Context) ListenerAdditionalCertificateAttachmentMapOutput {
	return o
}

func (o ListenerAdditionalCertificateAttachmentMapOutput) MapIndex(k pulumi.StringInput) ListenerAdditionalCertificateAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListenerAdditionalCertificateAttachment {
		return vs[0].(map[string]*ListenerAdditionalCertificateAttachment)[vs[1].(string)]
	}).(ListenerAdditionalCertificateAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerAdditionalCertificateAttachmentInput)(nil)).Elem(), &ListenerAdditionalCertificateAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerAdditionalCertificateAttachmentArrayInput)(nil)).Elem(), ListenerAdditionalCertificateAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerAdditionalCertificateAttachmentMapInput)(nil)).Elem(), ListenerAdditionalCertificateAttachmentMap{})
	pulumi.RegisterOutputType(ListenerAdditionalCertificateAttachmentOutput{})
	pulumi.RegisterOutputType(ListenerAdditionalCertificateAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ListenerAdditionalCertificateAttachmentMapOutput{})
}
