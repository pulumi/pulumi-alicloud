// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nlb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LoadBalancerZoneMapping struct {
	// The ID of the EIP associated with the Internet-facing NLB instance.
	AllocationId *string `pulumi:"allocationId"`
	// The ID of the elastic network interface (ENI).
	EniId *string `pulumi:"eniId"`
	// The IPv6 address of the NLB instance.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The private IPv4 address of the NLB instance.
	PrivateIpv4Address *string `pulumi:"privateIpv4Address"`
	// The public IPv4 address of the NLB instance.
	PublicIpv4Address *string `pulumi:"publicIpv4Address"`
	// The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance.
	VswitchId string `pulumi:"vswitchId"`
	// The ID of the zone of the NLB instance.
	ZoneId string `pulumi:"zoneId"`
}

// LoadBalancerZoneMappingInput is an input type that accepts LoadBalancerZoneMappingArgs and LoadBalancerZoneMappingOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingInput` via:
//
//	LoadBalancerZoneMappingArgs{...}
type LoadBalancerZoneMappingInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput
	ToLoadBalancerZoneMappingOutputWithContext(context.Context) LoadBalancerZoneMappingOutput
}

type LoadBalancerZoneMappingArgs struct {
	// The ID of the EIP associated with the Internet-facing NLB instance.
	AllocationId pulumi.StringPtrInput `pulumi:"allocationId"`
	// The ID of the elastic network interface (ENI).
	EniId pulumi.StringPtrInput `pulumi:"eniId"`
	// The IPv6 address of the NLB instance.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	// The private IPv4 address of the NLB instance.
	PrivateIpv4Address pulumi.StringPtrInput `pulumi:"privateIpv4Address"`
	// The public IPv4 address of the NLB instance.
	PublicIpv4Address pulumi.StringPtrInput `pulumi:"publicIpv4Address"`
	// The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The ID of the zone of the NLB instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LoadBalancerZoneMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMapping)(nil)).Elem()
}

func (i LoadBalancerZoneMappingArgs) ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput {
	return i.ToLoadBalancerZoneMappingOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingArgs) ToLoadBalancerZoneMappingOutputWithContext(ctx context.Context) LoadBalancerZoneMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingOutput)
}

// LoadBalancerZoneMappingArrayInput is an input type that accepts LoadBalancerZoneMappingArray and LoadBalancerZoneMappingArrayOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingArrayInput` via:
//
//	LoadBalancerZoneMappingArray{ LoadBalancerZoneMappingArgs{...} }
type LoadBalancerZoneMappingArrayInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput
	ToLoadBalancerZoneMappingArrayOutputWithContext(context.Context) LoadBalancerZoneMappingArrayOutput
}

type LoadBalancerZoneMappingArray []LoadBalancerZoneMappingInput

func (LoadBalancerZoneMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMapping)(nil)).Elem()
}

func (i LoadBalancerZoneMappingArray) ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput {
	return i.ToLoadBalancerZoneMappingArrayOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingArray) ToLoadBalancerZoneMappingArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingArrayOutput)
}

type LoadBalancerZoneMappingOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMapping)(nil)).Elem()
}

func (o LoadBalancerZoneMappingOutput) ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput {
	return o
}

func (o LoadBalancerZoneMappingOutput) ToLoadBalancerZoneMappingOutputWithContext(ctx context.Context) LoadBalancerZoneMappingOutput {
	return o
}

// The ID of the EIP associated with the Internet-facing NLB instance.
func (o LoadBalancerZoneMappingOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) *string { return v.AllocationId }).(pulumi.StringPtrOutput)
}

// The ID of the elastic network interface (ENI).
func (o LoadBalancerZoneMappingOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) *string { return v.EniId }).(pulumi.StringPtrOutput)
}

// The IPv6 address of the NLB instance.
func (o LoadBalancerZoneMappingOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// The private IPv4 address of the NLB instance.
func (o LoadBalancerZoneMappingOutput) PrivateIpv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) *string { return v.PrivateIpv4Address }).(pulumi.StringPtrOutput)
}

// The public IPv4 address of the NLB instance.
func (o LoadBalancerZoneMappingOutput) PublicIpv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) *string { return v.PublicIpv4Address }).(pulumi.StringPtrOutput)
}

// The vSwitch in the zone. You can specify only one vSwitch (subnet) in each zone of an NLB instance.
func (o LoadBalancerZoneMappingOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The ID of the zone of the NLB instance.
func (o LoadBalancerZoneMappingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) string { return v.ZoneId }).(pulumi.StringOutput)
}

type LoadBalancerZoneMappingArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMapping)(nil)).Elem()
}

func (o LoadBalancerZoneMappingArrayOutput) ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingArrayOutput) ToLoadBalancerZoneMappingArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingArrayOutput) Index(i pulumi.IntInput) LoadBalancerZoneMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerZoneMapping {
		return vs[0].([]LoadBalancerZoneMapping)[vs[1].(int)]
	}).(LoadBalancerZoneMappingOutput)
}

type ServerGroupHealthCheck struct {
	// The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
	HealthCheckConnectTimeout *int `pulumi:"healthCheckConnectTimeout"`
	// The domain name used for health check. Valid values:
	// - **$SERVER_IP**: uses the intranet IP of the backend server.
	// - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckDomain *string `pulumi:"healthCheckDomain"`
	// Whether to enable health check. Valid values:
	// - **true**: on.
	// - **false**: closed.
	HealthCheckEnabled *bool `pulumi:"healthCheckEnabled"`
	// Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckHttpCodes []string `pulumi:"healthCheckHttpCodes"`
	// Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// Health check protocol. Valid values: **TCP** or **HTTP**.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Health check path.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckUrl *string `pulumi:"healthCheckUrl"`
	// After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The health check method. Valid values: **GET** or **HEAD**.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HttpCheckMethod *string `pulumi:"httpCheckMethod"`
	// After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// ServerGroupHealthCheckInput is an input type that accepts ServerGroupHealthCheckArgs and ServerGroupHealthCheckOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckInput` via:
//
//	ServerGroupHealthCheckArgs{...}
type ServerGroupHealthCheckInput interface {
	pulumi.Input

	ToServerGroupHealthCheckOutput() ServerGroupHealthCheckOutput
	ToServerGroupHealthCheckOutputWithContext(context.Context) ServerGroupHealthCheckOutput
}

type ServerGroupHealthCheckArgs struct {
	// The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
	HealthCheckConnectPort pulumi.IntPtrInput `pulumi:"healthCheckConnectPort"`
	// Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
	HealthCheckConnectTimeout pulumi.IntPtrInput `pulumi:"healthCheckConnectTimeout"`
	// The domain name used for health check. Valid values:
	// - **$SERVER_IP**: uses the intranet IP of the backend server.
	// - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckDomain pulumi.StringPtrInput `pulumi:"healthCheckDomain"`
	// Whether to enable health check. Valid values:
	// - **true**: on.
	// - **false**: closed.
	HealthCheckEnabled pulumi.BoolPtrInput `pulumi:"healthCheckEnabled"`
	// Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckHttpCodes pulumi.StringArrayInput `pulumi:"healthCheckHttpCodes"`
	// Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
	HealthCheckInterval pulumi.IntPtrInput `pulumi:"healthCheckInterval"`
	// Health check protocol. Valid values: **TCP** or **HTTP**.
	HealthCheckType pulumi.StringPtrInput `pulumi:"healthCheckType"`
	// Health check path.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HealthCheckUrl pulumi.StringPtrInput `pulumi:"healthCheckUrl"`
	// After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The health check method. Valid values: **GET** or **HEAD**.
	// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
	HttpCheckMethod pulumi.StringPtrInput `pulumi:"httpCheckMethod"`
	// After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (ServerGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheck)(nil)).Elem()
}

func (i ServerGroupHealthCheckArgs) ToServerGroupHealthCheckOutput() ServerGroupHealthCheckOutput {
	return i.ToServerGroupHealthCheckOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckArgs) ToServerGroupHealthCheckOutputWithContext(ctx context.Context) ServerGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckOutput)
}

func (i ServerGroupHealthCheckArgs) ToServerGroupHealthCheckPtrOutput() ServerGroupHealthCheckPtrOutput {
	return i.ToServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckArgs) ToServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckOutput).ToServerGroupHealthCheckPtrOutputWithContext(ctx)
}

// ServerGroupHealthCheckPtrInput is an input type that accepts ServerGroupHealthCheckArgs, ServerGroupHealthCheckPtr and ServerGroupHealthCheckPtrOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckPtrInput` via:
//
//	        ServerGroupHealthCheckArgs{...}
//
//	or:
//
//	        nil
type ServerGroupHealthCheckPtrInput interface {
	pulumi.Input

	ToServerGroupHealthCheckPtrOutput() ServerGroupHealthCheckPtrOutput
	ToServerGroupHealthCheckPtrOutputWithContext(context.Context) ServerGroupHealthCheckPtrOutput
}

type serverGroupHealthCheckPtrType ServerGroupHealthCheckArgs

func ServerGroupHealthCheckPtr(v *ServerGroupHealthCheckArgs) ServerGroupHealthCheckPtrInput {
	return (*serverGroupHealthCheckPtrType)(v)
}

func (*serverGroupHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheck)(nil)).Elem()
}

func (i *serverGroupHealthCheckPtrType) ToServerGroupHealthCheckPtrOutput() ServerGroupHealthCheckPtrOutput {
	return i.ToServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i *serverGroupHealthCheckPtrType) ToServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckPtrOutput)
}

type ServerGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheck)(nil)).Elem()
}

func (o ServerGroupHealthCheckOutput) ToServerGroupHealthCheckOutput() ServerGroupHealthCheckOutput {
	return o
}

func (o ServerGroupHealthCheckOutput) ToServerGroupHealthCheckOutputWithContext(ctx context.Context) ServerGroupHealthCheckOutput {
	return o
}

func (o ServerGroupHealthCheckOutput) ToServerGroupHealthCheckPtrOutput() ServerGroupHealthCheckPtrOutput {
	return o.ToServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (o ServerGroupHealthCheckOutput) ToServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerGroupHealthCheck) *ServerGroupHealthCheck {
		return &v
	}).(ServerGroupHealthCheckPtrOutput)
}

// The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
func (o ServerGroupHealthCheckOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *int { return v.HealthCheckConnectPort }).(pulumi.IntPtrOutput)
}

// Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
func (o ServerGroupHealthCheckOutput) HealthCheckConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *int { return v.HealthCheckConnectTimeout }).(pulumi.IntPtrOutput)
}

// The domain name used for health check. Valid values:
// - **$SERVER_IP**: uses the intranet IP of the backend server.
// - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckOutput) HealthCheckDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *string { return v.HealthCheckDomain }).(pulumi.StringPtrOutput)
}

// Whether to enable health check. Valid values:
// - **true**: on.
// - **false**: closed.
func (o ServerGroupHealthCheckOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *bool { return v.HealthCheckEnabled }).(pulumi.BoolPtrOutput)
}

// Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckOutput) HealthCheckHttpCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) []string { return v.HealthCheckHttpCodes }).(pulumi.StringArrayOutput)
}

// Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
func (o ServerGroupHealthCheckOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *int { return v.HealthCheckInterval }).(pulumi.IntPtrOutput)
}

// Health check protocol. Valid values: **TCP** or **HTTP**.
func (o ServerGroupHealthCheckOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *string { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// Health check path.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckOutput) HealthCheckUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *string { return v.HealthCheckUrl }).(pulumi.StringPtrOutput)
}

// After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
func (o ServerGroupHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The health check method. Valid values: **GET** or **HEAD**.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckOutput) HttpCheckMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *string { return v.HttpCheckMethod }).(pulumi.StringPtrOutput)
}

// After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
func (o ServerGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type ServerGroupHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheck)(nil)).Elem()
}

func (o ServerGroupHealthCheckPtrOutput) ToServerGroupHealthCheckPtrOutput() ServerGroupHealthCheckPtrOutput {
	return o
}

func (o ServerGroupHealthCheckPtrOutput) ToServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckPtrOutput {
	return o
}

func (o ServerGroupHealthCheckPtrOutput) Elem() ServerGroupHealthCheckOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) ServerGroupHealthCheck {
		if v != nil {
			return *v
		}
		var ret ServerGroupHealthCheck
		return ret
	}).(ServerGroupHealthCheckOutput)
}

// The port of the backend server for health checks. Valid values: **0** ~ **65535**. **0** indicates that the port of the backend server is used for health check.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckConnectPort
	}).(pulumi.IntPtrOutput)
}

// Maximum timeout for health check responses. Unit: seconds. Valid values: **1** ~ **300**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// The domain name used for health check. Valid values:
// - **$SERVER_IP**: uses the intranet IP of the backend server.
// - **domain**: Specify a specific domain name. The length is limited to 1 to 80 characters. Only lowercase letters, numbers, dashes (-), and half-width periods (.) can be used.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckDomain
	}).(pulumi.StringPtrOutput)
}

// Whether to enable health check. Valid values:
// - **true**: on.
// - **false**: closed.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *bool {
		if v == nil {
			return nil
		}
		return v.HealthCheckEnabled
	}).(pulumi.BoolPtrOutput)
}

// Health status return code. Multiple status codes are separated by commas (,). Valid values: **http\_2xx**, **http\_3xx**, **http\_4xx**, and **http\_5xx**.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckHttpCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) []string {
		if v == nil {
			return nil
		}
		return v.HealthCheckHttpCodes
	}).(pulumi.StringArrayOutput)
}

// Time interval of health examination. Unit: seconds.Valid values: **5** ~ **50**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckInterval
	}).(pulumi.IntPtrOutput)
}

// Health check protocol. Valid values: **TCP** or **HTTP**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckType
	}).(pulumi.StringPtrOutput)
}

// Health check path.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckPtrOutput) HealthCheckUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckUrl
	}).(pulumi.StringPtrOutput)
}

// After the health check is successful, the health check status of the backend server is determined from **failed** to **successful * *.Valid values: **2** to **10 * *.
func (o ServerGroupHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The health check method. Valid values: **GET** or **HEAD**.
// > **NOTE:**  This parameter takes effect only when **HealthCheckType** is **HTTP**.
func (o ServerGroupHealthCheckPtrOutput) HttpCheckMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCheckMethod
	}).(pulumi.StringPtrOutput)
}

// After the health check fails for many times in a row, the health check status of the backend server is determined from **Success** to **Failure**. Valid values: **2** to **10**.
func (o ServerGroupHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type GetListenersListener struct {
	// ndicates whether Application-Layer Protocol Negotiation (ALPN) is enabled.
	AlpnEnabled bool `pulumi:"alpnEnabled"`
	// The ALPN policy.
	AlpnPolicy string `pulumi:"alpnPolicy"`
	// CA certificate list information. Currently, only one CA certificate can be added. **NOTE:** This parameter only takes effect for `TCPSSL` listeners.
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// Whether to start two-way authentication.
	CaEnabled bool `pulumi:"caEnabled"`
	// Server certificate list information. Currently, only one server certificate can be added. This parameter only takes effect for `TCPSSL` listeners.
	CertificateIds []string `pulumi:"certificateIds"`
	// The new connection speed limit for a network-based load balancing instance per second. Valid values: `0` ~ `1000000`. `0` indicates unlimited speed.
	Cps int `pulumi:"cps"`
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort string `pulumi:"endPort"`
	// The ID of the Nlb Listener.
	Id string `pulumi:"id"`
	// Connection idle timeout time. Unit: seconds. Valid values: `1` ~ `900`.
	IdleTimeout int `pulumi:"idleTimeout"`
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription string `pulumi:"listenerDescription"`
	// The ID of the listener.
	ListenerId string `pulumi:"listenerId"`
	// Listening port. Valid values: `0` ~ `65535`. `0`: indicates that full port listening is used. When set to 0, you must configure `StartPort` and `EndPort`.
	ListenerPort int `pulumi:"listenerPort"`
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol string `pulumi:"listenerProtocol"`
	// The ID of the network-based server load balancer instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The maximum segment size of the TCP message. Unit: Bytes. Valid values: `0` ~ `1500`. `0` indicates that the MSS value of the TCP message is not modified. only `TCP` and `TCPSSL` listeners support this field value.
	Mss int `pulumi:"mss"`
	// Whether to enable the Proxy Protocol to carry the source address of the client to the backend server.
	ProxyProtocolEnabled bool `pulumi:"proxyProtocolEnabled"`
	// Indicates whether fine-grained monitoring is enabled.
	SecSensorEnabled bool `pulumi:"secSensorEnabled"`
	// Security policy ID. Support system security policies and custom security policies. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, or `tlsCipherPolicy12StrictWith13`. **Note:** This parameter only takes effect for `TCPSSL` listeners.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// The ID of the server group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort string `pulumi:"startPort"`
	// The status of the resource.
	Status string `pulumi:"status"`
}

// GetListenersListenerInput is an input type that accepts GetListenersListenerArgs and GetListenersListenerOutput values.
// You can construct a concrete instance of `GetListenersListenerInput` via:
//
//	GetListenersListenerArgs{...}
type GetListenersListenerInput interface {
	pulumi.Input

	ToGetListenersListenerOutput() GetListenersListenerOutput
	ToGetListenersListenerOutputWithContext(context.Context) GetListenersListenerOutput
}

type GetListenersListenerArgs struct {
	// ndicates whether Application-Layer Protocol Negotiation (ALPN) is enabled.
	AlpnEnabled pulumi.BoolInput `pulumi:"alpnEnabled"`
	// The ALPN policy.
	AlpnPolicy pulumi.StringInput `pulumi:"alpnPolicy"`
	// CA certificate list information. Currently, only one CA certificate can be added. **NOTE:** This parameter only takes effect for `TCPSSL` listeners.
	CaCertificateIds pulumi.StringArrayInput `pulumi:"caCertificateIds"`
	// Whether to start two-way authentication.
	CaEnabled pulumi.BoolInput `pulumi:"caEnabled"`
	// Server certificate list information. Currently, only one server certificate can be added. This parameter only takes effect for `TCPSSL` listeners.
	CertificateIds pulumi.StringArrayInput `pulumi:"certificateIds"`
	// The new connection speed limit for a network-based load balancing instance per second. Valid values: `0` ~ `1000000`. `0` indicates unlimited speed.
	Cps pulumi.IntInput `pulumi:"cps"`
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort pulumi.StringInput `pulumi:"endPort"`
	// The ID of the Nlb Listener.
	Id pulumi.StringInput `pulumi:"id"`
	// Connection idle timeout time. Unit: seconds. Valid values: `1` ~ `900`.
	IdleTimeout pulumi.IntInput `pulumi:"idleTimeout"`
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription pulumi.StringInput `pulumi:"listenerDescription"`
	// The ID of the listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// Listening port. Valid values: `0` ~ `65535`. `0`: indicates that full port listening is used. When set to 0, you must configure `StartPort` and `EndPort`.
	ListenerPort pulumi.IntInput `pulumi:"listenerPort"`
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol pulumi.StringInput `pulumi:"listenerProtocol"`
	// The ID of the network-based server load balancer instance.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The maximum segment size of the TCP message. Unit: Bytes. Valid values: `0` ~ `1500`. `0` indicates that the MSS value of the TCP message is not modified. only `TCP` and `TCPSSL` listeners support this field value.
	Mss pulumi.IntInput `pulumi:"mss"`
	// Whether to enable the Proxy Protocol to carry the source address of the client to the backend server.
	ProxyProtocolEnabled pulumi.BoolInput `pulumi:"proxyProtocolEnabled"`
	// Indicates whether fine-grained monitoring is enabled.
	SecSensorEnabled pulumi.BoolInput `pulumi:"secSensorEnabled"`
	// Security policy ID. Support system security policies and custom security policies. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, or `tlsCipherPolicy12StrictWith13`. **Note:** This parameter only takes effect for `TCPSSL` listeners.
	SecurityPolicyId pulumi.StringInput `pulumi:"securityPolicyId"`
	// The ID of the server group.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort pulumi.StringInput `pulumi:"startPort"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetListenersListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenersListener)(nil)).Elem()
}

func (i GetListenersListenerArgs) ToGetListenersListenerOutput() GetListenersListenerOutput {
	return i.ToGetListenersListenerOutputWithContext(context.Background())
}

func (i GetListenersListenerArgs) ToGetListenersListenerOutputWithContext(ctx context.Context) GetListenersListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenersListenerOutput)
}

// GetListenersListenerArrayInput is an input type that accepts GetListenersListenerArray and GetListenersListenerArrayOutput values.
// You can construct a concrete instance of `GetListenersListenerArrayInput` via:
//
//	GetListenersListenerArray{ GetListenersListenerArgs{...} }
type GetListenersListenerArrayInput interface {
	pulumi.Input

	ToGetListenersListenerArrayOutput() GetListenersListenerArrayOutput
	ToGetListenersListenerArrayOutputWithContext(context.Context) GetListenersListenerArrayOutput
}

type GetListenersListenerArray []GetListenersListenerInput

func (GetListenersListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenersListener)(nil)).Elem()
}

func (i GetListenersListenerArray) ToGetListenersListenerArrayOutput() GetListenersListenerArrayOutput {
	return i.ToGetListenersListenerArrayOutputWithContext(context.Background())
}

func (i GetListenersListenerArray) ToGetListenersListenerArrayOutputWithContext(ctx context.Context) GetListenersListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenersListenerArrayOutput)
}

type GetListenersListenerOutput struct{ *pulumi.OutputState }

func (GetListenersListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenersListener)(nil)).Elem()
}

func (o GetListenersListenerOutput) ToGetListenersListenerOutput() GetListenersListenerOutput {
	return o
}

func (o GetListenersListenerOutput) ToGetListenersListenerOutputWithContext(ctx context.Context) GetListenersListenerOutput {
	return o
}

// ndicates whether Application-Layer Protocol Negotiation (ALPN) is enabled.
func (o GetListenersListenerOutput) AlpnEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListenersListener) bool { return v.AlpnEnabled }).(pulumi.BoolOutput)
}

// The ALPN policy.
func (o GetListenersListenerOutput) AlpnPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.AlpnPolicy }).(pulumi.StringOutput)
}

// CA certificate list information. Currently, only one CA certificate can be added. **NOTE:** This parameter only takes effect for `TCPSSL` listeners.
func (o GetListenersListenerOutput) CaCertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListenersListener) []string { return v.CaCertificateIds }).(pulumi.StringArrayOutput)
}

// Whether to start two-way authentication.
func (o GetListenersListenerOutput) CaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListenersListener) bool { return v.CaEnabled }).(pulumi.BoolOutput)
}

// Server certificate list information. Currently, only one server certificate can be added. This parameter only takes effect for `TCPSSL` listeners.
func (o GetListenersListenerOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListenersListener) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The new connection speed limit for a network-based load balancing instance per second. Valid values: `0` ~ `1000000`. `0` indicates unlimited speed.
func (o GetListenersListenerOutput) Cps() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenersListener) int { return v.Cps }).(pulumi.IntOutput)
}

// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
func (o GetListenersListenerOutput) EndPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.EndPort }).(pulumi.StringOutput)
}

// The ID of the Nlb Listener.
func (o GetListenersListenerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.Id }).(pulumi.StringOutput)
}

// Connection idle timeout time. Unit: seconds. Valid values: `1` ~ `900`.
func (o GetListenersListenerOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenersListener) int { return v.IdleTimeout }).(pulumi.IntOutput)
}

// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
func (o GetListenersListenerOutput) ListenerDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.ListenerDescription }).(pulumi.StringOutput)
}

// The ID of the listener.
func (o GetListenersListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

// Listening port. Valid values: `0` ~ `65535`. `0`: indicates that full port listening is used. When set to 0, you must configure `StartPort` and `EndPort`.
func (o GetListenersListenerOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenersListener) int { return v.ListenerPort }).(pulumi.IntOutput)
}

// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
func (o GetListenersListenerOutput) ListenerProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.ListenerProtocol }).(pulumi.StringOutput)
}

// The ID of the network-based server load balancer instance.
func (o GetListenersListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The maximum segment size of the TCP message. Unit: Bytes. Valid values: `0` ~ `1500`. `0` indicates that the MSS value of the TCP message is not modified. only `TCP` and `TCPSSL` listeners support this field value.
func (o GetListenersListenerOutput) Mss() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenersListener) int { return v.Mss }).(pulumi.IntOutput)
}

// Whether to enable the Proxy Protocol to carry the source address of the client to the backend server.
func (o GetListenersListenerOutput) ProxyProtocolEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListenersListener) bool { return v.ProxyProtocolEnabled }).(pulumi.BoolOutput)
}

// Indicates whether fine-grained monitoring is enabled.
func (o GetListenersListenerOutput) SecSensorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListenersListener) bool { return v.SecSensorEnabled }).(pulumi.BoolOutput)
}

// Security policy ID. Support system security policies and custom security policies. Valid values: `tlsCipherPolicy10`, `tlsCipherPolicy11`, `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, or `tlsCipherPolicy12StrictWith13`. **Note:** This parameter only takes effect for `TCPSSL` listeners.
func (o GetListenersListenerOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// The ID of the server group.
func (o GetListenersListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
func (o GetListenersListenerOutput) StartPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.StartPort }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetListenersListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenersListener) string { return v.Status }).(pulumi.StringOutput)
}

type GetListenersListenerArrayOutput struct{ *pulumi.OutputState }

func (GetListenersListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenersListener)(nil)).Elem()
}

func (o GetListenersListenerArrayOutput) ToGetListenersListenerArrayOutput() GetListenersListenerArrayOutput {
	return o
}

func (o GetListenersListenerArrayOutput) ToGetListenersListenerArrayOutputWithContext(ctx context.Context) GetListenersListenerArrayOutput {
	return o
}

func (o GetListenersListenerArrayOutput) Index(i pulumi.IntInput) GetListenersListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenersListener {
		return vs[0].([]GetListenersListener)[vs[1].(int)]
	}).(GetListenersListenerOutput)
}

type GetLoadBalancersBalancer struct {
	// The IP version.
	AddressIpVersion string `pulumi:"addressIpVersion"`
	// The type of IPv4 address used by the NLB instance.
	AddressType string `pulumi:"addressType"`
	// The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// The time when the resource was created. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.
	CreateTime string `pulumi:"createTime"`
	// Indicates whether cross-zone load balancing is enabled for the NLB instance.
	CrossZoneEnabled bool `pulumi:"crossZoneEnabled"`
	// The domain name of the NLB instance.
	DnsName string `pulumi:"dnsName"`
	// The ID of the NLB instance.
	Id string `pulumi:"id"`
	// The type of IPv6 address used by the NLB instance.
	Ipv6AddressType string `pulumi:"ipv6AddressType"`
	// The business status of the NLB instance.
	LoadBalancerBusinessStatus string `pulumi:"loadBalancerBusinessStatus"`
	// The ID of the NLB instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The name of the NLB instance.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The type of the SLB instance. Only Network is supported, which indicates NLB.
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// The configuration of the operation lock. This parameter takes effect if LoadBalancerBussinessStatus is Abnormal.
	OperationLocks []GetLoadBalancersBalancerOperationLock `pulumi:"operationLocks"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The security group to which the NLB instance belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The status of the NLB instance.
	Status string `pulumi:"status"`
	// The tag of the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The ID of the VPC where the NLB instance is deployed.
	VpcId string `pulumi:"vpcId"`
	// The zones and the vSwitches in the zones. An NLB instance can be deployed across 2 to 10 zones.
	ZoneMappings []GetLoadBalancersBalancerZoneMapping `pulumi:"zoneMappings"`
}

// GetLoadBalancersBalancerInput is an input type that accepts GetLoadBalancersBalancerArgs and GetLoadBalancersBalancerOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerInput` via:
//
//	GetLoadBalancersBalancerArgs{...}
type GetLoadBalancersBalancerInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerOutput() GetLoadBalancersBalancerOutput
	ToGetLoadBalancersBalancerOutputWithContext(context.Context) GetLoadBalancersBalancerOutput
}

type GetLoadBalancersBalancerArgs struct {
	// The IP version.
	AddressIpVersion pulumi.StringInput `pulumi:"addressIpVersion"`
	// The type of IPv4 address used by the NLB instance.
	AddressType pulumi.StringInput `pulumi:"addressType"`
	// The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.
	BandwidthPackageId pulumi.StringInput `pulumi:"bandwidthPackageId"`
	// The time when the resource was created. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Indicates whether cross-zone load balancing is enabled for the NLB instance.
	CrossZoneEnabled pulumi.BoolInput `pulumi:"crossZoneEnabled"`
	// The domain name of the NLB instance.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// The ID of the NLB instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of IPv6 address used by the NLB instance.
	Ipv6AddressType pulumi.StringInput `pulumi:"ipv6AddressType"`
	// The business status of the NLB instance.
	LoadBalancerBusinessStatus pulumi.StringInput `pulumi:"loadBalancerBusinessStatus"`
	// The ID of the NLB instance.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The name of the NLB instance.
	LoadBalancerName pulumi.StringInput `pulumi:"loadBalancerName"`
	// The type of the SLB instance. Only Network is supported, which indicates NLB.
	LoadBalancerType pulumi.StringInput `pulumi:"loadBalancerType"`
	// The configuration of the operation lock. This parameter takes effect if LoadBalancerBussinessStatus is Abnormal.
	OperationLocks GetLoadBalancersBalancerOperationLockArrayInput `pulumi:"operationLocks"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The security group to which the NLB instance belongs.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The status of the NLB instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The tag of the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the VPC where the NLB instance is deployed.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zones and the vSwitches in the zones. An NLB instance can be deployed across 2 to 10 zones.
	ZoneMappings GetLoadBalancersBalancerZoneMappingArrayInput `pulumi:"zoneMappings"`
}

func (GetLoadBalancersBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancer)(nil)).Elem()
}

func (i GetLoadBalancersBalancerArgs) ToGetLoadBalancersBalancerOutput() GetLoadBalancersBalancerOutput {
	return i.ToGetLoadBalancersBalancerOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerArgs) ToGetLoadBalancersBalancerOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerOutput)
}

// GetLoadBalancersBalancerArrayInput is an input type that accepts GetLoadBalancersBalancerArray and GetLoadBalancersBalancerArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerArrayInput` via:
//
//	GetLoadBalancersBalancerArray{ GetLoadBalancersBalancerArgs{...} }
type GetLoadBalancersBalancerArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerArrayOutput() GetLoadBalancersBalancerArrayOutput
	ToGetLoadBalancersBalancerArrayOutputWithContext(context.Context) GetLoadBalancersBalancerArrayOutput
}

type GetLoadBalancersBalancerArray []GetLoadBalancersBalancerInput

func (GetLoadBalancersBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancer)(nil)).Elem()
}

func (i GetLoadBalancersBalancerArray) ToGetLoadBalancersBalancerArrayOutput() GetLoadBalancersBalancerArrayOutput {
	return i.ToGetLoadBalancersBalancerArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerArray) ToGetLoadBalancersBalancerArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerArrayOutput)
}

type GetLoadBalancersBalancerOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancer)(nil)).Elem()
}

func (o GetLoadBalancersBalancerOutput) ToGetLoadBalancersBalancerOutput() GetLoadBalancersBalancerOutput {
	return o
}

func (o GetLoadBalancersBalancerOutput) ToGetLoadBalancersBalancerOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOutput {
	return o
}

// The IP version.
func (o GetLoadBalancersBalancerOutput) AddressIpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.AddressIpVersion }).(pulumi.StringOutput)
}

// The type of IPv4 address used by the NLB instance.
func (o GetLoadBalancersBalancerOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.AddressType }).(pulumi.StringOutput)
}

// The ID of the EIP bandwidth plan that is associated with the NLB instance if the NLB instance uses a public IP address.
func (o GetLoadBalancersBalancerOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// The time when the resource was created. The time is displayed in UTC in `yyyy-MM-ddTHH:mm:ssZ` format.
func (o GetLoadBalancersBalancerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicates whether cross-zone load balancing is enabled for the NLB instance.
func (o GetLoadBalancersBalancerOutput) CrossZoneEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) bool { return v.CrossZoneEnabled }).(pulumi.BoolOutput)
}

// The domain name of the NLB instance.
func (o GetLoadBalancersBalancerOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.DnsName }).(pulumi.StringOutput)
}

// The ID of the NLB instance.
func (o GetLoadBalancersBalancerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.Id }).(pulumi.StringOutput)
}

// The type of IPv6 address used by the NLB instance.
func (o GetLoadBalancersBalancerOutput) Ipv6AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.Ipv6AddressType }).(pulumi.StringOutput)
}

// The business status of the NLB instance.
func (o GetLoadBalancersBalancerOutput) LoadBalancerBusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.LoadBalancerBusinessStatus }).(pulumi.StringOutput)
}

// The ID of the NLB instance.
func (o GetLoadBalancersBalancerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The name of the NLB instance.
func (o GetLoadBalancersBalancerOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The type of the SLB instance. Only Network is supported, which indicates NLB.
func (o GetLoadBalancersBalancerOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The configuration of the operation lock. This parameter takes effect if LoadBalancerBussinessStatus is Abnormal.
func (o GetLoadBalancersBalancerOutput) OperationLocks() GetLoadBalancersBalancerOperationLockArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) []GetLoadBalancersBalancerOperationLock { return v.OperationLocks }).(GetLoadBalancersBalancerOperationLockArrayOutput)
}

// The ID of the resource group.
func (o GetLoadBalancersBalancerOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The security group to which the NLB instance belongs.
func (o GetLoadBalancersBalancerOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The status of the NLB instance.
func (o GetLoadBalancersBalancerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.Status }).(pulumi.StringOutput)
}

// The tag of the resource.
func (o GetLoadBalancersBalancerOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The ID of the VPC where the NLB instance is deployed.
func (o GetLoadBalancersBalancerOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zones and the vSwitches in the zones. An NLB instance can be deployed across 2 to 10 zones.
func (o GetLoadBalancersBalancerOutput) ZoneMappings() GetLoadBalancersBalancerZoneMappingArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancer) []GetLoadBalancersBalancerZoneMapping { return v.ZoneMappings }).(GetLoadBalancersBalancerZoneMappingArrayOutput)
}

type GetLoadBalancersBalancerArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancer)(nil)).Elem()
}

func (o GetLoadBalancersBalancerArrayOutput) ToGetLoadBalancersBalancerArrayOutput() GetLoadBalancersBalancerArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerArrayOutput) ToGetLoadBalancersBalancerArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersBalancer {
		return vs[0].([]GetLoadBalancersBalancer)[vs[1].(int)]
	}).(GetLoadBalancersBalancerOutput)
}

type GetLoadBalancersBalancerOperationLock struct {
	// The reason why the NLB instance is locked.
	LockReason string `pulumi:"lockReason"`
	// The type of lock.
	LockType string `pulumi:"lockType"`
}

// GetLoadBalancersBalancerOperationLockInput is an input type that accepts GetLoadBalancersBalancerOperationLockArgs and GetLoadBalancersBalancerOperationLockOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerOperationLockInput` via:
//
//	GetLoadBalancersBalancerOperationLockArgs{...}
type GetLoadBalancersBalancerOperationLockInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerOperationLockOutput() GetLoadBalancersBalancerOperationLockOutput
	ToGetLoadBalancersBalancerOperationLockOutputWithContext(context.Context) GetLoadBalancersBalancerOperationLockOutput
}

type GetLoadBalancersBalancerOperationLockArgs struct {
	// The reason why the NLB instance is locked.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The type of lock.
	LockType pulumi.StringInput `pulumi:"lockType"`
}

func (GetLoadBalancersBalancerOperationLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancerOperationLock)(nil)).Elem()
}

func (i GetLoadBalancersBalancerOperationLockArgs) ToGetLoadBalancersBalancerOperationLockOutput() GetLoadBalancersBalancerOperationLockOutput {
	return i.ToGetLoadBalancersBalancerOperationLockOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerOperationLockArgs) ToGetLoadBalancersBalancerOperationLockOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOperationLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerOperationLockOutput)
}

// GetLoadBalancersBalancerOperationLockArrayInput is an input type that accepts GetLoadBalancersBalancerOperationLockArray and GetLoadBalancersBalancerOperationLockArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerOperationLockArrayInput` via:
//
//	GetLoadBalancersBalancerOperationLockArray{ GetLoadBalancersBalancerOperationLockArgs{...} }
type GetLoadBalancersBalancerOperationLockArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerOperationLockArrayOutput() GetLoadBalancersBalancerOperationLockArrayOutput
	ToGetLoadBalancersBalancerOperationLockArrayOutputWithContext(context.Context) GetLoadBalancersBalancerOperationLockArrayOutput
}

type GetLoadBalancersBalancerOperationLockArray []GetLoadBalancersBalancerOperationLockInput

func (GetLoadBalancersBalancerOperationLockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancerOperationLock)(nil)).Elem()
}

func (i GetLoadBalancersBalancerOperationLockArray) ToGetLoadBalancersBalancerOperationLockArrayOutput() GetLoadBalancersBalancerOperationLockArrayOutput {
	return i.ToGetLoadBalancersBalancerOperationLockArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerOperationLockArray) ToGetLoadBalancersBalancerOperationLockArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOperationLockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerOperationLockArrayOutput)
}

type GetLoadBalancersBalancerOperationLockOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerOperationLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancerOperationLock)(nil)).Elem()
}

func (o GetLoadBalancersBalancerOperationLockOutput) ToGetLoadBalancersBalancerOperationLockOutput() GetLoadBalancersBalancerOperationLockOutput {
	return o
}

func (o GetLoadBalancersBalancerOperationLockOutput) ToGetLoadBalancersBalancerOperationLockOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOperationLockOutput {
	return o
}

// The reason why the NLB instance is locked.
func (o GetLoadBalancersBalancerOperationLockOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerOperationLock) string { return v.LockReason }).(pulumi.StringOutput)
}

// The type of lock.
func (o GetLoadBalancersBalancerOperationLockOutput) LockType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerOperationLock) string { return v.LockType }).(pulumi.StringOutput)
}

type GetLoadBalancersBalancerOperationLockArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerOperationLockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancerOperationLock)(nil)).Elem()
}

func (o GetLoadBalancersBalancerOperationLockArrayOutput) ToGetLoadBalancersBalancerOperationLockArrayOutput() GetLoadBalancersBalancerOperationLockArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerOperationLockArrayOutput) ToGetLoadBalancersBalancerOperationLockArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerOperationLockArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerOperationLockArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersBalancerOperationLockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersBalancerOperationLock {
		return vs[0].([]GetLoadBalancersBalancerOperationLock)[vs[1].(int)]
	}).(GetLoadBalancersBalancerOperationLockOutput)
}

type GetLoadBalancersBalancerZoneMapping struct {
	// The ID of the elastic IP address (EIP).
	AllocationId string `pulumi:"allocationId"`
	// The ID of the elastic network interface (ENI) attached to the NLB instance.
	EniId string `pulumi:"eniId"`
	// The IPv6 address of the NLB instance.
	Ipv6Address string `pulumi:"ipv6Address"`
	// The private IPv4 address used by the NLB instance.
	PrivateIpv4Address string `pulumi:"privateIpv4Address"`
	// The public IPv4 address used by the NLB instance.
	PublicIpv4Address string `pulumi:"publicIpv4Address"`
	// The ID of the vSwitch. By default, you can specify one vSwitch (subnet) in each zone of the NLB instance.
	VswitchId string `pulumi:"vswitchId"`
	// The name of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// GetLoadBalancersBalancerZoneMappingInput is an input type that accepts GetLoadBalancersBalancerZoneMappingArgs and GetLoadBalancersBalancerZoneMappingOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerZoneMappingInput` via:
//
//	GetLoadBalancersBalancerZoneMappingArgs{...}
type GetLoadBalancersBalancerZoneMappingInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerZoneMappingOutput() GetLoadBalancersBalancerZoneMappingOutput
	ToGetLoadBalancersBalancerZoneMappingOutputWithContext(context.Context) GetLoadBalancersBalancerZoneMappingOutput
}

type GetLoadBalancersBalancerZoneMappingArgs struct {
	// The ID of the elastic IP address (EIP).
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// The ID of the elastic network interface (ENI) attached to the NLB instance.
	EniId pulumi.StringInput `pulumi:"eniId"`
	// The IPv6 address of the NLB instance.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// The private IPv4 address used by the NLB instance.
	PrivateIpv4Address pulumi.StringInput `pulumi:"privateIpv4Address"`
	// The public IPv4 address used by the NLB instance.
	PublicIpv4Address pulumi.StringInput `pulumi:"publicIpv4Address"`
	// The ID of the vSwitch. By default, you can specify one vSwitch (subnet) in each zone of the NLB instance.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The name of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetLoadBalancersBalancerZoneMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancerZoneMapping)(nil)).Elem()
}

func (i GetLoadBalancersBalancerZoneMappingArgs) ToGetLoadBalancersBalancerZoneMappingOutput() GetLoadBalancersBalancerZoneMappingOutput {
	return i.ToGetLoadBalancersBalancerZoneMappingOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerZoneMappingArgs) ToGetLoadBalancersBalancerZoneMappingOutputWithContext(ctx context.Context) GetLoadBalancersBalancerZoneMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerZoneMappingOutput)
}

// GetLoadBalancersBalancerZoneMappingArrayInput is an input type that accepts GetLoadBalancersBalancerZoneMappingArray and GetLoadBalancersBalancerZoneMappingArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersBalancerZoneMappingArrayInput` via:
//
//	GetLoadBalancersBalancerZoneMappingArray{ GetLoadBalancersBalancerZoneMappingArgs{...} }
type GetLoadBalancersBalancerZoneMappingArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersBalancerZoneMappingArrayOutput() GetLoadBalancersBalancerZoneMappingArrayOutput
	ToGetLoadBalancersBalancerZoneMappingArrayOutputWithContext(context.Context) GetLoadBalancersBalancerZoneMappingArrayOutput
}

type GetLoadBalancersBalancerZoneMappingArray []GetLoadBalancersBalancerZoneMappingInput

func (GetLoadBalancersBalancerZoneMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancerZoneMapping)(nil)).Elem()
}

func (i GetLoadBalancersBalancerZoneMappingArray) ToGetLoadBalancersBalancerZoneMappingArrayOutput() GetLoadBalancersBalancerZoneMappingArrayOutput {
	return i.ToGetLoadBalancersBalancerZoneMappingArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersBalancerZoneMappingArray) ToGetLoadBalancersBalancerZoneMappingArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerZoneMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersBalancerZoneMappingArrayOutput)
}

type GetLoadBalancersBalancerZoneMappingOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerZoneMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersBalancerZoneMapping)(nil)).Elem()
}

func (o GetLoadBalancersBalancerZoneMappingOutput) ToGetLoadBalancersBalancerZoneMappingOutput() GetLoadBalancersBalancerZoneMappingOutput {
	return o
}

func (o GetLoadBalancersBalancerZoneMappingOutput) ToGetLoadBalancersBalancerZoneMappingOutputWithContext(ctx context.Context) GetLoadBalancersBalancerZoneMappingOutput {
	return o
}

// The ID of the elastic IP address (EIP).
func (o GetLoadBalancersBalancerZoneMappingOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The ID of the elastic network interface (ENI) attached to the NLB instance.
func (o GetLoadBalancersBalancerZoneMappingOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.EniId }).(pulumi.StringOutput)
}

// The IPv6 address of the NLB instance.
func (o GetLoadBalancersBalancerZoneMappingOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The private IPv4 address used by the NLB instance.
func (o GetLoadBalancersBalancerZoneMappingOutput) PrivateIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.PrivateIpv4Address }).(pulumi.StringOutput)
}

// The public IPv4 address used by the NLB instance.
func (o GetLoadBalancersBalancerZoneMappingOutput) PublicIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.PublicIpv4Address }).(pulumi.StringOutput)
}

// The ID of the vSwitch. By default, you can specify one vSwitch (subnet) in each zone of the NLB instance.
func (o GetLoadBalancersBalancerZoneMappingOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o GetLoadBalancersBalancerZoneMappingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersBalancerZoneMapping) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetLoadBalancersBalancerZoneMappingArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersBalancerZoneMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersBalancerZoneMapping)(nil)).Elem()
}

func (o GetLoadBalancersBalancerZoneMappingArrayOutput) ToGetLoadBalancersBalancerZoneMappingArrayOutput() GetLoadBalancersBalancerZoneMappingArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerZoneMappingArrayOutput) ToGetLoadBalancersBalancerZoneMappingArrayOutputWithContext(ctx context.Context) GetLoadBalancersBalancerZoneMappingArrayOutput {
	return o
}

func (o GetLoadBalancersBalancerZoneMappingArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersBalancerZoneMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersBalancerZoneMapping {
		return vs[0].([]GetLoadBalancersBalancerZoneMapping)[vs[1].(int)]
	}).(GetLoadBalancersBalancerZoneMappingOutput)
}

type GetSecurityPoliciesPolicy struct {
	// The supported cipher suites, which are determined by the TLS protocol version.
	Ciphers []string `pulumi:"ciphers"`
	// The id of the TLS security policy.
	Id string `pulumi:"id"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The name of the TLS security policy.
	SecurityPolicyName string `pulumi:"securityPolicyName"`
	// The status of the resource.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The TLS protocol versions that are supported.
	TlsVersions []string `pulumi:"tlsVersions"`
}

// GetSecurityPoliciesPolicyInput is an input type that accepts GetSecurityPoliciesPolicyArgs and GetSecurityPoliciesPolicyOutput values.
// You can construct a concrete instance of `GetSecurityPoliciesPolicyInput` via:
//
//	GetSecurityPoliciesPolicyArgs{...}
type GetSecurityPoliciesPolicyInput interface {
	pulumi.Input

	ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput
	ToGetSecurityPoliciesPolicyOutputWithContext(context.Context) GetSecurityPoliciesPolicyOutput
}

type GetSecurityPoliciesPolicyArgs struct {
	// The supported cipher suites, which are determined by the TLS protocol version.
	Ciphers pulumi.StringArrayInput `pulumi:"ciphers"`
	// The id of the TLS security policy.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The name of the TLS security policy.
	SecurityPolicyName pulumi.StringInput `pulumi:"securityPolicyName"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The TLS protocol versions that are supported.
	TlsVersions pulumi.StringArrayInput `pulumi:"tlsVersions"`
}

func (GetSecurityPoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (i GetSecurityPoliciesPolicyArgs) ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput {
	return i.ToGetSecurityPoliciesPolicyOutputWithContext(context.Background())
}

func (i GetSecurityPoliciesPolicyArgs) ToGetSecurityPoliciesPolicyOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityPoliciesPolicyOutput)
}

// GetSecurityPoliciesPolicyArrayInput is an input type that accepts GetSecurityPoliciesPolicyArray and GetSecurityPoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `GetSecurityPoliciesPolicyArrayInput` via:
//
//	GetSecurityPoliciesPolicyArray{ GetSecurityPoliciesPolicyArgs{...} }
type GetSecurityPoliciesPolicyArrayInput interface {
	pulumi.Input

	ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput
	ToGetSecurityPoliciesPolicyArrayOutputWithContext(context.Context) GetSecurityPoliciesPolicyArrayOutput
}

type GetSecurityPoliciesPolicyArray []GetSecurityPoliciesPolicyInput

func (GetSecurityPoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (i GetSecurityPoliciesPolicyArray) ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput {
	return i.ToGetSecurityPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i GetSecurityPoliciesPolicyArray) ToGetSecurityPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityPoliciesPolicyArrayOutput)
}

type GetSecurityPoliciesPolicyOutput struct{ *pulumi.OutputState }

func (GetSecurityPoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (o GetSecurityPoliciesPolicyOutput) ToGetSecurityPoliciesPolicyOutput() GetSecurityPoliciesPolicyOutput {
	return o
}

func (o GetSecurityPoliciesPolicyOutput) ToGetSecurityPoliciesPolicyOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyOutput {
	return o
}

// The supported cipher suites, which are determined by the TLS protocol version.
func (o GetSecurityPoliciesPolicyOutput) Ciphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) []string { return v.Ciphers }).(pulumi.StringArrayOutput)
}

// The id of the TLS security policy.
func (o GetSecurityPoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o GetSecurityPoliciesPolicyOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The name of the TLS security policy.
func (o GetSecurityPoliciesPolicyOutput) SecurityPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.SecurityPolicyName }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetSecurityPoliciesPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetSecurityPoliciesPolicyOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The TLS protocol versions that are supported.
func (o GetSecurityPoliciesPolicyOutput) TlsVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesPolicy) []string { return v.TlsVersions }).(pulumi.StringArrayOutput)
}

type GetSecurityPoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityPoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityPoliciesPolicy)(nil)).Elem()
}

func (o GetSecurityPoliciesPolicyArrayOutput) ToGetSecurityPoliciesPolicyArrayOutput() GetSecurityPoliciesPolicyArrayOutput {
	return o
}

func (o GetSecurityPoliciesPolicyArrayOutput) ToGetSecurityPoliciesPolicyArrayOutputWithContext(ctx context.Context) GetSecurityPoliciesPolicyArrayOutput {
	return o
}

func (o GetSecurityPoliciesPolicyArrayOutput) Index(i pulumi.IntInput) GetSecurityPoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityPoliciesPolicy {
		return vs[0].([]GetSecurityPoliciesPolicy)[vs[1].(int)]
	}).(GetSecurityPoliciesPolicyOutput)
}

type GetServerGroupServerAttachmentsAttachment struct {
	// The description of the backend server.
	Description string `pulumi:"description"`
	// The ID of the server group.
	Id string `pulumi:"id"`
	// The port used by the backend server.
	Port int `pulumi:"port"`
	// The ID of the server group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The ID of the server.
	ServerId string `pulumi:"serverId"`
	// The IP address of the backend server.
	ServerIp string `pulumi:"serverIp"`
	// The type of the backend server.
	ServerType string `pulumi:"serverType"`
	// Indicates the status of the backend server.
	Status string `pulumi:"status"`
	// The weight of the backend server.
	Weight int `pulumi:"weight"`
	// The zone ID of the server.
	ZoneId string `pulumi:"zoneId"`
}

// GetServerGroupServerAttachmentsAttachmentInput is an input type that accepts GetServerGroupServerAttachmentsAttachmentArgs and GetServerGroupServerAttachmentsAttachmentOutput values.
// You can construct a concrete instance of `GetServerGroupServerAttachmentsAttachmentInput` via:
//
//	GetServerGroupServerAttachmentsAttachmentArgs{...}
type GetServerGroupServerAttachmentsAttachmentInput interface {
	pulumi.Input

	ToGetServerGroupServerAttachmentsAttachmentOutput() GetServerGroupServerAttachmentsAttachmentOutput
	ToGetServerGroupServerAttachmentsAttachmentOutputWithContext(context.Context) GetServerGroupServerAttachmentsAttachmentOutput
}

type GetServerGroupServerAttachmentsAttachmentArgs struct {
	// The description of the backend server.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the server group.
	Id pulumi.StringInput `pulumi:"id"`
	// The port used by the backend server.
	Port pulumi.IntInput `pulumi:"port"`
	// The ID of the server group.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The ID of the server.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// The IP address of the backend server.
	ServerIp pulumi.StringInput `pulumi:"serverIp"`
	// The type of the backend server.
	ServerType pulumi.StringInput `pulumi:"serverType"`
	// Indicates the status of the backend server.
	Status pulumi.StringInput `pulumi:"status"`
	// The weight of the backend server.
	Weight pulumi.IntInput `pulumi:"weight"`
	// The zone ID of the server.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetServerGroupServerAttachmentsAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupServerAttachmentsAttachment)(nil)).Elem()
}

func (i GetServerGroupServerAttachmentsAttachmentArgs) ToGetServerGroupServerAttachmentsAttachmentOutput() GetServerGroupServerAttachmentsAttachmentOutput {
	return i.ToGetServerGroupServerAttachmentsAttachmentOutputWithContext(context.Background())
}

func (i GetServerGroupServerAttachmentsAttachmentArgs) ToGetServerGroupServerAttachmentsAttachmentOutputWithContext(ctx context.Context) GetServerGroupServerAttachmentsAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupServerAttachmentsAttachmentOutput)
}

// GetServerGroupServerAttachmentsAttachmentArrayInput is an input type that accepts GetServerGroupServerAttachmentsAttachmentArray and GetServerGroupServerAttachmentsAttachmentArrayOutput values.
// You can construct a concrete instance of `GetServerGroupServerAttachmentsAttachmentArrayInput` via:
//
//	GetServerGroupServerAttachmentsAttachmentArray{ GetServerGroupServerAttachmentsAttachmentArgs{...} }
type GetServerGroupServerAttachmentsAttachmentArrayInput interface {
	pulumi.Input

	ToGetServerGroupServerAttachmentsAttachmentArrayOutput() GetServerGroupServerAttachmentsAttachmentArrayOutput
	ToGetServerGroupServerAttachmentsAttachmentArrayOutputWithContext(context.Context) GetServerGroupServerAttachmentsAttachmentArrayOutput
}

type GetServerGroupServerAttachmentsAttachmentArray []GetServerGroupServerAttachmentsAttachmentInput

func (GetServerGroupServerAttachmentsAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupServerAttachmentsAttachment)(nil)).Elem()
}

func (i GetServerGroupServerAttachmentsAttachmentArray) ToGetServerGroupServerAttachmentsAttachmentArrayOutput() GetServerGroupServerAttachmentsAttachmentArrayOutput {
	return i.ToGetServerGroupServerAttachmentsAttachmentArrayOutputWithContext(context.Background())
}

func (i GetServerGroupServerAttachmentsAttachmentArray) ToGetServerGroupServerAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetServerGroupServerAttachmentsAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupServerAttachmentsAttachmentArrayOutput)
}

type GetServerGroupServerAttachmentsAttachmentOutput struct{ *pulumi.OutputState }

func (GetServerGroupServerAttachmentsAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupServerAttachmentsAttachment)(nil)).Elem()
}

func (o GetServerGroupServerAttachmentsAttachmentOutput) ToGetServerGroupServerAttachmentsAttachmentOutput() GetServerGroupServerAttachmentsAttachmentOutput {
	return o
}

func (o GetServerGroupServerAttachmentsAttachmentOutput) ToGetServerGroupServerAttachmentsAttachmentOutputWithContext(ctx context.Context) GetServerGroupServerAttachmentsAttachmentOutput {
	return o
}

// The description of the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the server group.
func (o GetServerGroupServerAttachmentsAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// The port used by the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) int { return v.Port }).(pulumi.IntOutput)
}

// The ID of the server group.
func (o GetServerGroupServerAttachmentsAttachmentOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.ServerId }).(pulumi.StringOutput)
}

// The IP address of the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.ServerIp }).(pulumi.StringOutput)
}

// The type of the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.ServerType }).(pulumi.StringOutput)
}

// Indicates the status of the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.Status }).(pulumi.StringOutput)
}

// The weight of the backend server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) int { return v.Weight }).(pulumi.IntOutput)
}

// The zone ID of the server.
func (o GetServerGroupServerAttachmentsAttachmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServerAttachmentsAttachment) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetServerGroupServerAttachmentsAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupServerAttachmentsAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupServerAttachmentsAttachment)(nil)).Elem()
}

func (o GetServerGroupServerAttachmentsAttachmentArrayOutput) ToGetServerGroupServerAttachmentsAttachmentArrayOutput() GetServerGroupServerAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetServerGroupServerAttachmentsAttachmentArrayOutput) ToGetServerGroupServerAttachmentsAttachmentArrayOutputWithContext(ctx context.Context) GetServerGroupServerAttachmentsAttachmentArrayOutput {
	return o
}

func (o GetServerGroupServerAttachmentsAttachmentArrayOutput) Index(i pulumi.IntInput) GetServerGroupServerAttachmentsAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupServerAttachmentsAttachment {
		return vs[0].([]GetServerGroupServerAttachmentsAttachment)[vs[1].(int)]
	}).(GetServerGroupServerAttachmentsAttachmentOutput)
}

type GetServerGroupsGroup struct {
	// The protocol version.
	AddressIpVersion string `pulumi:"addressIpVersion"`
	// Indicates whether connection draining is enabled.
	ConnectionDrain bool `pulumi:"connectionDrain"`
	// The timeout period of connection draining. Unit: seconds.
	ConnectionDrainTimeout int `pulumi:"connectionDrainTimeout"`
	// The configurations of health checks.
	HealthChecks []GetServerGroupsGroupHealthCheck `pulumi:"healthChecks"`
	// The ID of the Server Group.
	Id string `pulumi:"id"`
	// Indicates whether client address retention is enabled.
	PreserveClientIpEnabled bool `pulumi:"preserveClientIpEnabled"`
	// The protocol used to forward requests to the backend servers.
	Protocol string `pulumi:"protocol"`
	// The NLB instance.
	RelatedLoadBalancerIds []string `pulumi:"relatedLoadBalancerIds"`
	// The ID of the resource group to which the security group belongs.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The routing algorithm.
	Scheduler string `pulumi:"scheduler"`
	// The number of server groups associated with the NLB instance.
	ServerCount int `pulumi:"serverCount"`
	// The name of the server group.
	ServerGroupName string `pulumi:"serverGroupName"`
	// The type of the server group.
	ServerGroupType string `pulumi:"serverGroupType"`
	// The status of the server group.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The ID of the VPC to which the server group belongs.
	VpcId string `pulumi:"vpcId"`
}

// GetServerGroupsGroupInput is an input type that accepts GetServerGroupsGroupArgs and GetServerGroupsGroupOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupInput` via:
//
//	GetServerGroupsGroupArgs{...}
type GetServerGroupsGroupInput interface {
	pulumi.Input

	ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput
	ToGetServerGroupsGroupOutputWithContext(context.Context) GetServerGroupsGroupOutput
}

type GetServerGroupsGroupArgs struct {
	// The protocol version.
	AddressIpVersion pulumi.StringInput `pulumi:"addressIpVersion"`
	// Indicates whether connection draining is enabled.
	ConnectionDrain pulumi.BoolInput `pulumi:"connectionDrain"`
	// The timeout period of connection draining. Unit: seconds.
	ConnectionDrainTimeout pulumi.IntInput `pulumi:"connectionDrainTimeout"`
	// The configurations of health checks.
	HealthChecks GetServerGroupsGroupHealthCheckArrayInput `pulumi:"healthChecks"`
	// The ID of the Server Group.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whether client address retention is enabled.
	PreserveClientIpEnabled pulumi.BoolInput `pulumi:"preserveClientIpEnabled"`
	// The protocol used to forward requests to the backend servers.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The NLB instance.
	RelatedLoadBalancerIds pulumi.StringArrayInput `pulumi:"relatedLoadBalancerIds"`
	// The ID of the resource group to which the security group belongs.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The routing algorithm.
	Scheduler pulumi.StringInput `pulumi:"scheduler"`
	// The number of server groups associated with the NLB instance.
	ServerCount pulumi.IntInput `pulumi:"serverCount"`
	// The name of the server group.
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
	// The type of the server group.
	ServerGroupType pulumi.StringInput `pulumi:"serverGroupType"`
	// The status of the server group.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the VPC to which the server group belongs.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetServerGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroup)(nil)).Elem()
}

func (i GetServerGroupsGroupArgs) ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput {
	return i.ToGetServerGroupsGroupOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupArgs) ToGetServerGroupsGroupOutputWithContext(ctx context.Context) GetServerGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupOutput)
}

// GetServerGroupsGroupArrayInput is an input type that accepts GetServerGroupsGroupArray and GetServerGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupArrayInput` via:
//
//	GetServerGroupsGroupArray{ GetServerGroupsGroupArgs{...} }
type GetServerGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput
	ToGetServerGroupsGroupArrayOutputWithContext(context.Context) GetServerGroupsGroupArrayOutput
}

type GetServerGroupsGroupArray []GetServerGroupsGroupInput

func (GetServerGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroup)(nil)).Elem()
}

func (i GetServerGroupsGroupArray) ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput {
	return i.ToGetServerGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupArray) ToGetServerGroupsGroupArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupArrayOutput)
}

type GetServerGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroup)(nil)).Elem()
}

func (o GetServerGroupsGroupOutput) ToGetServerGroupsGroupOutput() GetServerGroupsGroupOutput {
	return o
}

func (o GetServerGroupsGroupOutput) ToGetServerGroupsGroupOutputWithContext(ctx context.Context) GetServerGroupsGroupOutput {
	return o
}

// The protocol version.
func (o GetServerGroupsGroupOutput) AddressIpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.AddressIpVersion }).(pulumi.StringOutput)
}

// Indicates whether connection draining is enabled.
func (o GetServerGroupsGroupOutput) ConnectionDrain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) bool { return v.ConnectionDrain }).(pulumi.BoolOutput)
}

// The timeout period of connection draining. Unit: seconds.
func (o GetServerGroupsGroupOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) int { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// The configurations of health checks.
func (o GetServerGroupsGroupOutput) HealthChecks() GetServerGroupsGroupHealthCheckArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) []GetServerGroupsGroupHealthCheck { return v.HealthChecks }).(GetServerGroupsGroupHealthCheckArrayOutput)
}

// The ID of the Server Group.
func (o GetServerGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether client address retention is enabled.
func (o GetServerGroupsGroupOutput) PreserveClientIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) bool { return v.PreserveClientIpEnabled }).(pulumi.BoolOutput)
}

// The protocol used to forward requests to the backend servers.
func (o GetServerGroupsGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Protocol }).(pulumi.StringOutput)
}

// The NLB instance.
func (o GetServerGroupsGroupOutput) RelatedLoadBalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) []string { return v.RelatedLoadBalancerIds }).(pulumi.StringArrayOutput)
}

// The ID of the resource group to which the security group belongs.
func (o GetServerGroupsGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The routing algorithm.
func (o GetServerGroupsGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Scheduler }).(pulumi.StringOutput)
}

// The number of server groups associated with the NLB instance.
func (o GetServerGroupsGroupOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) int { return v.ServerCount }).(pulumi.IntOutput)
}

// The name of the server group.
func (o GetServerGroupsGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The type of the server group.
func (o GetServerGroupsGroupOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.ServerGroupType }).(pulumi.StringOutput)
}

// The status of the server group.
func (o GetServerGroupsGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetServerGroupsGroupOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// The ID of the VPC to which the server group belongs.
func (o GetServerGroupsGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroup) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetServerGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroup)(nil)).Elem()
}

func (o GetServerGroupsGroupArrayOutput) ToGetServerGroupsGroupArrayOutput() GetServerGroupsGroupArrayOutput {
	return o
}

func (o GetServerGroupsGroupArrayOutput) ToGetServerGroupsGroupArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupArrayOutput {
	return o
}

func (o GetServerGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroup {
		return vs[0].([]GetServerGroupsGroup)[vs[1].(int)]
	}).(GetServerGroupsGroupOutput)
}

type GetServerGroupsGroupHealthCheck struct {
	// The backend port that is used for health checks.
	HealthCheckConnectPort int `pulumi:"healthCheckConnectPort"`
	// The maximum timeout period of a health check response.
	HealthCheckConnectTimeout int `pulumi:"healthCheckConnectTimeout"`
	// The domain name that is used for health checks.
	HealthCheckDomain string `pulumi:"healthCheckDomain"`
	// Specifies whether to enable health checks.
	HealthCheckEnabled bool `pulumi:"healthCheckEnabled"`
	// The HTTP status codes returned for health checks.
	HealthCheckHttpCodes []string `pulumi:"healthCheckHttpCodes"`
	// The interval between two consecutive health checks.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// The protocol that is used for health checks.
	HealthCheckType string `pulumi:"healthCheckType"`
	// The path to which health check requests are sent.
	HealthCheckUrl string `pulumi:"healthCheckUrl"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// The HTTP method that is used for health checks.
	HttpCheckMethod string `pulumi:"httpCheckMethod"`
	// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// GetServerGroupsGroupHealthCheckInput is an input type that accepts GetServerGroupsGroupHealthCheckArgs and GetServerGroupsGroupHealthCheckOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupHealthCheckInput` via:
//
//	GetServerGroupsGroupHealthCheckArgs{...}
type GetServerGroupsGroupHealthCheckInput interface {
	pulumi.Input

	ToGetServerGroupsGroupHealthCheckOutput() GetServerGroupsGroupHealthCheckOutput
	ToGetServerGroupsGroupHealthCheckOutputWithContext(context.Context) GetServerGroupsGroupHealthCheckOutput
}

type GetServerGroupsGroupHealthCheckArgs struct {
	// The backend port that is used for health checks.
	HealthCheckConnectPort pulumi.IntInput `pulumi:"healthCheckConnectPort"`
	// The maximum timeout period of a health check response.
	HealthCheckConnectTimeout pulumi.IntInput `pulumi:"healthCheckConnectTimeout"`
	// The domain name that is used for health checks.
	HealthCheckDomain pulumi.StringInput `pulumi:"healthCheckDomain"`
	// Specifies whether to enable health checks.
	HealthCheckEnabled pulumi.BoolInput `pulumi:"healthCheckEnabled"`
	// The HTTP status codes returned for health checks.
	HealthCheckHttpCodes pulumi.StringArrayInput `pulumi:"healthCheckHttpCodes"`
	// The interval between two consecutive health checks.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// The protocol that is used for health checks.
	HealthCheckType pulumi.StringInput `pulumi:"healthCheckType"`
	// The path to which health check requests are sent.
	HealthCheckUrl pulumi.StringInput `pulumi:"healthCheckUrl"`
	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// The HTTP method that is used for health checks.
	HttpCheckMethod pulumi.StringInput `pulumi:"httpCheckMethod"`
	// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (GetServerGroupsGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupHealthCheck)(nil)).Elem()
}

func (i GetServerGroupsGroupHealthCheckArgs) ToGetServerGroupsGroupHealthCheckOutput() GetServerGroupsGroupHealthCheckOutput {
	return i.ToGetServerGroupsGroupHealthCheckOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupHealthCheckArgs) ToGetServerGroupsGroupHealthCheckOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupHealthCheckOutput)
}

// GetServerGroupsGroupHealthCheckArrayInput is an input type that accepts GetServerGroupsGroupHealthCheckArray and GetServerGroupsGroupHealthCheckArrayOutput values.
// You can construct a concrete instance of `GetServerGroupsGroupHealthCheckArrayInput` via:
//
//	GetServerGroupsGroupHealthCheckArray{ GetServerGroupsGroupHealthCheckArgs{...} }
type GetServerGroupsGroupHealthCheckArrayInput interface {
	pulumi.Input

	ToGetServerGroupsGroupHealthCheckArrayOutput() GetServerGroupsGroupHealthCheckArrayOutput
	ToGetServerGroupsGroupHealthCheckArrayOutputWithContext(context.Context) GetServerGroupsGroupHealthCheckArrayOutput
}

type GetServerGroupsGroupHealthCheckArray []GetServerGroupsGroupHealthCheckInput

func (GetServerGroupsGroupHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupHealthCheck)(nil)).Elem()
}

func (i GetServerGroupsGroupHealthCheckArray) ToGetServerGroupsGroupHealthCheckArrayOutput() GetServerGroupsGroupHealthCheckArrayOutput {
	return i.ToGetServerGroupsGroupHealthCheckArrayOutputWithContext(context.Background())
}

func (i GetServerGroupsGroupHealthCheckArray) ToGetServerGroupsGroupHealthCheckArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupsGroupHealthCheckArrayOutput)
}

type GetServerGroupsGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupsGroupHealthCheck)(nil)).Elem()
}

func (o GetServerGroupsGroupHealthCheckOutput) ToGetServerGroupsGroupHealthCheckOutput() GetServerGroupsGroupHealthCheckOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckOutput) ToGetServerGroupsGroupHealthCheckOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckOutput {
	return o
}

// The backend port that is used for health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckConnectPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) int { return v.HealthCheckConnectPort }).(pulumi.IntOutput)
}

// The maximum timeout period of a health check response.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) int { return v.HealthCheckConnectTimeout }).(pulumi.IntOutput)
}

// The domain name that is used for health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) string { return v.HealthCheckDomain }).(pulumi.StringOutput)
}

// Specifies whether to enable health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) bool { return v.HealthCheckEnabled }).(pulumi.BoolOutput)
}

// The HTTP status codes returned for health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckHttpCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) []string { return v.HealthCheckHttpCodes }).(pulumi.StringArrayOutput)
}

// The interval between two consecutive health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The protocol that is used for health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) string { return v.HealthCheckType }).(pulumi.StringOutput)
}

// The path to which health check requests are sent.
func (o GetServerGroupsGroupHealthCheckOutput) HealthCheckUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) string { return v.HealthCheckUrl }).(pulumi.StringOutput)
}

// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
func (o GetServerGroupsGroupHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// The HTTP method that is used for health checks.
func (o GetServerGroupsGroupHealthCheckOutput) HttpCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) string { return v.HttpCheckMethod }).(pulumi.StringOutput)
}

// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
func (o GetServerGroupsGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupsGroupHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type GetServerGroupsGroupHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupsGroupHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupsGroupHealthCheck)(nil)).Elem()
}

func (o GetServerGroupsGroupHealthCheckArrayOutput) ToGetServerGroupsGroupHealthCheckArrayOutput() GetServerGroupsGroupHealthCheckArrayOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckArrayOutput) ToGetServerGroupsGroupHealthCheckArrayOutputWithContext(ctx context.Context) GetServerGroupsGroupHealthCheckArrayOutput {
	return o
}

func (o GetServerGroupsGroupHealthCheckArrayOutput) Index(i pulumi.IntInput) GetServerGroupsGroupHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupsGroupHealthCheck {
		return vs[0].([]GetServerGroupsGroupHealthCheck)[vs[1].(int)]
	}).(GetServerGroupsGroupHealthCheckOutput)
}

type GetZonesZone struct {
	// The ID of zone.
	Id string `pulumi:"id"`
	// The local name.
	LocalName string `pulumi:"localName"`
	// The zone ID.
	ZoneId string `pulumi:"zoneId"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The ID of zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The local name.
	LocalName pulumi.StringInput `pulumi:"localName"`
	// The zone ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The ID of zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The local name.
func (o GetZonesZoneOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.LocalName }).(pulumi.StringOutput)
}

// The zone ID.
func (o GetZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingInput)(nil)).Elem(), LoadBalancerZoneMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingArrayInput)(nil)).Elem(), LoadBalancerZoneMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupHealthCheckInput)(nil)).Elem(), ServerGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupHealthCheckPtrInput)(nil)).Elem(), ServerGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenersListenerInput)(nil)).Elem(), GetListenersListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenersListenerArrayInput)(nil)).Elem(), GetListenersListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerInput)(nil)).Elem(), GetLoadBalancersBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerArrayInput)(nil)).Elem(), GetLoadBalancersBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerOperationLockInput)(nil)).Elem(), GetLoadBalancersBalancerOperationLockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerOperationLockArrayInput)(nil)).Elem(), GetLoadBalancersBalancerOperationLockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerZoneMappingInput)(nil)).Elem(), GetLoadBalancersBalancerZoneMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersBalancerZoneMappingArrayInput)(nil)).Elem(), GetLoadBalancersBalancerZoneMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityPoliciesPolicyInput)(nil)).Elem(), GetSecurityPoliciesPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityPoliciesPolicyArrayInput)(nil)).Elem(), GetSecurityPoliciesPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupServerAttachmentsAttachmentInput)(nil)).Elem(), GetServerGroupServerAttachmentsAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupServerAttachmentsAttachmentArrayInput)(nil)).Elem(), GetServerGroupServerAttachmentsAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupsGroupInput)(nil)).Elem(), GetServerGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupsGroupArrayInput)(nil)).Elem(), GetServerGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupsGroupHealthCheckInput)(nil)).Elem(), GetServerGroupsGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupsGroupHealthCheckArrayInput)(nil)).Elem(), GetServerGroupsGroupHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingOutput{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(ServerGroupHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(GetListenersListenerOutput{})
	pulumi.RegisterOutputType(GetListenersListenerArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerOperationLockOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerOperationLockArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerZoneMappingOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersBalancerZoneMappingArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityPoliciesPolicyOutput{})
	pulumi.RegisterOutputType(GetSecurityPoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupServerAttachmentsAttachmentOutput{})
	pulumi.RegisterOutputType(GetServerGroupServerAttachmentsAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(GetServerGroupsGroupHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
