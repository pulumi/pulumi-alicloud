// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nlb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a NLB Listener resource.
//
// For information about NLB Listener and how to use it, see [What is Listener](https://www.alibabacloud.com/help/en/server-load-balancer/latest/createlistener-nl).
//
// > **NOTE:** Available since v1.191.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/nlb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultResourceGroups, err := resourcemanager.GetResourceGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultZones, err := nlb.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String(name),
//				CidrBlock: pulumi.String("10.4.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.0.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			default1, err := vpc.NewSwitch(ctx, "default1", &vpc.SwitchArgs{
//				VswitchName: pulumi.String(name),
//				CidrBlock:   pulumi.String("10.4.1.0/24"),
//				VpcId:       defaultNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[1].Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewSecurityGroup(ctx, "defaultSecurityGroup", &ecs.SecurityGroupArgs{
//				VpcId: defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultLoadBalancer, err := nlb.NewLoadBalancer(ctx, "defaultLoadBalancer", &nlb.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String(name),
//				ResourceGroupId:  *pulumi.String(defaultResourceGroups.Ids[0]),
//				LoadBalancerType: pulumi.String("Network"),
//				AddressType:      pulumi.String("Internet"),
//				AddressIpVersion: pulumi.String("Ipv4"),
//				VpcId:            defaultNetwork.ID(),
//				Tags: pulumi.AnyMap{
//					"Created": pulumi.Any("TF"),
//					"For":     pulumi.Any("example"),
//				},
//				ZoneMappings: nlb.LoadBalancerZoneMappingArray{
//					&nlb.LoadBalancerZoneMappingArgs{
//						VswitchId: defaultSwitch.ID(),
//						ZoneId:    *pulumi.String(defaultZones.Zones[0].Id),
//					},
//					&nlb.LoadBalancerZoneMappingArgs{
//						VswitchId: default1.ID(),
//						ZoneId:    *pulumi.String(defaultZones.Zones[1].Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerGroup, err := nlb.NewServerGroup(ctx, "defaultServerGroup", &nlb.ServerGroupArgs{
//				ResourceGroupId:        *pulumi.String(defaultResourceGroups.Ids[0]),
//				ServerGroupName:        pulumi.String(name),
//				ServerGroupType:        pulumi.String("Instance"),
//				VpcId:                  defaultNetwork.ID(),
//				Scheduler:              pulumi.String("Wrr"),
//				Protocol:               pulumi.String("TCP"),
//				ConnectionDrain:        pulumi.Bool(true),
//				ConnectionDrainTimeout: pulumi.Int(60),
//				AddressIpVersion:       pulumi.String("Ipv4"),
//				HealthCheck: &nlb.ServerGroupHealthCheckArgs{
//					HealthCheckEnabled:        pulumi.Bool(true),
//					HealthCheckType:           pulumi.String("TCP"),
//					HealthCheckConnectPort:    pulumi.Int(0),
//					HealthyThreshold:          pulumi.Int(2),
//					UnhealthyThreshold:        pulumi.Int(2),
//					HealthCheckConnectTimeout: pulumi.Int(5),
//					HealthCheckInterval:       pulumi.Int(10),
//					HttpCheckMethod:           pulumi.String("GET"),
//					HealthCheckHttpCodes: pulumi.StringArray{
//						pulumi.String("http_2xx"),
//						pulumi.String("http_3xx"),
//						pulumi.String("http_4xx"),
//					},
//				},
//				Tags: pulumi.AnyMap{
//					"Created": pulumi.Any("TF"),
//					"For":     pulumi.Any("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nlb.NewListener(ctx, "defaultListener", &nlb.ListenerArgs{
//				ListenerProtocol:     pulumi.String("TCP"),
//				ListenerPort:         pulumi.Int(80),
//				ListenerDescription:  pulumi.String(name),
//				LoadBalancerId:       defaultLoadBalancer.ID(),
//				ServerGroupId:        defaultServerGroup.ID(),
//				IdleTimeout:          pulumi.Int(900),
//				ProxyProtocolEnabled: pulumi.Bool(true),
//				SecSensorEnabled:     pulumi.Bool(true),
//				Cps:                  pulumi.Int(10000),
//				Mss:                  pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NLB Listener can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:nlb/listener:Listener example <id>
//
// ```
type Listener struct {
	pulumi.CustomResourceState

	// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
	AlpnEnabled pulumi.BoolOutput `pulumi:"alpnEnabled"`
	// The ALPN policy.
	AlpnPolicy pulumi.StringPtrOutput `pulumi:"alpnPolicy"`
	// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
	CaCertificateIds pulumi.StringArrayOutput `pulumi:"caCertificateIds"`
	// Specifies whether to enable mutual authentication.
	CaEnabled pulumi.BoolOutput `pulumi:"caEnabled"`
	// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
	CertificateIds pulumi.StringArrayOutput `pulumi:"certificateIds"`
	// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
	Cps pulumi.IntPtrOutput `pulumi:"cps"`
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort pulumi.IntPtrOutput `pulumi:"endPort"`
	// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription pulumi.StringPtrOutput `pulumi:"listenerDescription"`
	// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
	ListenerPort pulumi.IntOutput `pulumi:"listenerPort"`
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol pulumi.StringOutput `pulumi:"listenerProtocol"`
	// The ID of the network-based server load balancer instance.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
	Mss pulumi.IntPtrOutput `pulumi:"mss"`
	// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
	ProxyProtocolEnabled pulumi.BoolOutput `pulumi:"proxyProtocolEnabled"`
	// Specifies whether to enable fine-grained monitoring.
	SecSensorEnabled pulumi.BoolOutput `pulumi:"secSensorEnabled"`
	// The ID of the security policy. System security policies and custom security policies are supported.
	// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
	// Custom security policies can be created by resource `nlb.SecurityPolicy`.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// The ID of the server group.
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort pulumi.IntPtrOutput `pulumi:"startPort"`
	// The status of the resource. Valid values: `Running`, `Stopped`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerPort == nil {
		return nil, errors.New("invalid value for required argument 'ListenerPort'")
	}
	if args.ListenerProtocol == nil {
		return nil, errors.New("invalid value for required argument 'ListenerProtocol'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Listener
	err := ctx.RegisterResource("alicloud:nlb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("alicloud:nlb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
	AlpnEnabled *bool `pulumi:"alpnEnabled"`
	// The ALPN policy.
	AlpnPolicy *string `pulumi:"alpnPolicy"`
	// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// Specifies whether to enable mutual authentication.
	CaEnabled *bool `pulumi:"caEnabled"`
	// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
	CertificateIds []string `pulumi:"certificateIds"`
	// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
	Cps *int `pulumi:"cps"`
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort *int `pulumi:"endPort"`
	// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription *string `pulumi:"listenerDescription"`
	// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
	ListenerPort *int `pulumi:"listenerPort"`
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol *string `pulumi:"listenerProtocol"`
	// The ID of the network-based server load balancer instance.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
	Mss *int `pulumi:"mss"`
	// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
	ProxyProtocolEnabled *bool `pulumi:"proxyProtocolEnabled"`
	// Specifies whether to enable fine-grained monitoring.
	SecSensorEnabled *bool `pulumi:"secSensorEnabled"`
	// The ID of the security policy. System security policies and custom security policies are supported.
	// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
	// Custom security policies can be created by resource `nlb.SecurityPolicy`.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The ID of the server group.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort *int `pulumi:"startPort"`
	// The status of the resource. Valid values: `Running`, `Stopped`.
	Status *string `pulumi:"status"`
}

type ListenerState struct {
	// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
	AlpnEnabled pulumi.BoolPtrInput
	// The ALPN policy.
	AlpnPolicy pulumi.StringPtrInput
	// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
	CaCertificateIds pulumi.StringArrayInput
	// Specifies whether to enable mutual authentication.
	CaEnabled pulumi.BoolPtrInput
	// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
	CertificateIds pulumi.StringArrayInput
	// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
	Cps pulumi.IntPtrInput
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort pulumi.IntPtrInput
	// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
	IdleTimeout pulumi.IntPtrInput
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription pulumi.StringPtrInput
	// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
	ListenerPort pulumi.IntPtrInput
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol pulumi.StringPtrInput
	// The ID of the network-based server load balancer instance.
	LoadBalancerId pulumi.StringPtrInput
	// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
	Mss pulumi.IntPtrInput
	// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
	ProxyProtocolEnabled pulumi.BoolPtrInput
	// Specifies whether to enable fine-grained monitoring.
	SecSensorEnabled pulumi.BoolPtrInput
	// The ID of the security policy. System security policies and custom security policies are supported.
	// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
	// Custom security policies can be created by resource `nlb.SecurityPolicy`.
	SecurityPolicyId pulumi.StringPtrInput
	// The ID of the server group.
	ServerGroupId pulumi.StringPtrInput
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort pulumi.IntPtrInput
	// The status of the resource. Valid values: `Running`, `Stopped`.
	Status pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
	AlpnEnabled *bool `pulumi:"alpnEnabled"`
	// The ALPN policy.
	AlpnPolicy *string `pulumi:"alpnPolicy"`
	// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
	CaCertificateIds []string `pulumi:"caCertificateIds"`
	// Specifies whether to enable mutual authentication.
	CaEnabled *bool `pulumi:"caEnabled"`
	// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
	CertificateIds []string `pulumi:"certificateIds"`
	// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
	Cps *int `pulumi:"cps"`
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort *int `pulumi:"endPort"`
	// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription *string `pulumi:"listenerDescription"`
	// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
	ListenerPort int `pulumi:"listenerPort"`
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol string `pulumi:"listenerProtocol"`
	// The ID of the network-based server load balancer instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
	Mss *int `pulumi:"mss"`
	// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
	ProxyProtocolEnabled *bool `pulumi:"proxyProtocolEnabled"`
	// Specifies whether to enable fine-grained monitoring.
	SecSensorEnabled *bool `pulumi:"secSensorEnabled"`
	// The ID of the security policy. System security policies and custom security policies are supported.
	// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
	// Custom security policies can be created by resource `nlb.SecurityPolicy`.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The ID of the server group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort *int `pulumi:"startPort"`
	// The status of the resource. Valid values: `Running`, `Stopped`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
	AlpnEnabled pulumi.BoolPtrInput
	// The ALPN policy.
	AlpnPolicy pulumi.StringPtrInput
	// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
	CaCertificateIds pulumi.StringArrayInput
	// Specifies whether to enable mutual authentication.
	CaEnabled pulumi.BoolPtrInput
	// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
	CertificateIds pulumi.StringArrayInput
	// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
	Cps pulumi.IntPtrInput
	// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
	EndPort pulumi.IntPtrInput
	// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
	IdleTimeout pulumi.IntPtrInput
	// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
	ListenerDescription pulumi.StringPtrInput
	// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
	ListenerPort pulumi.IntInput
	// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
	ListenerProtocol pulumi.StringInput
	// The ID of the network-based server load balancer instance.
	LoadBalancerId pulumi.StringInput
	// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
	Mss pulumi.IntPtrInput
	// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
	ProxyProtocolEnabled pulumi.BoolPtrInput
	// Specifies whether to enable fine-grained monitoring.
	SecSensorEnabled pulumi.BoolPtrInput
	// The ID of the security policy. System security policies and custom security policies are supported.
	// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
	// Custom security policies can be created by resource `nlb.SecurityPolicy`.
	SecurityPolicyId pulumi.StringPtrInput
	// The ID of the server group.
	ServerGroupId pulumi.StringInput
	// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
	StartPort pulumi.IntPtrInput
	// The status of the resource. Valid values: `Running`, `Stopped`.
	Status pulumi.StringPtrInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

func (i *Listener) ToOutput(ctx context.Context) pulumix.Output[*Listener] {
	return pulumix.Output[*Listener]{
		OutputState: i.ToListenerOutputWithContext(ctx).OutputState,
	}
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//	ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

func (i ListenerArray) ToOutput(ctx context.Context) pulumix.Output[[]*Listener] {
	return pulumix.Output[[]*Listener]{
		OutputState: i.ToListenerArrayOutputWithContext(ctx).OutputState,
	}
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//	ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

func (i ListenerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Listener] {
	return pulumix.Output[map[string]*Listener]{
		OutputState: i.ToListenerMapOutputWithContext(ctx).OutputState,
	}
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

func (o ListenerOutput) ToOutput(ctx context.Context) pulumix.Output[*Listener] {
	return pulumix.Output[*Listener]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to enable Application-Layer Protocol Negotiation (ALPN).
func (o ListenerOutput) AlpnEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolOutput { return v.AlpnEnabled }).(pulumi.BoolOutput)
}

// The ALPN policy.
func (o ListenerOutput) AlpnPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.AlpnPolicy }).(pulumi.StringPtrOutput)
}

// The list of certificate authority (CA) certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one CA certificate is supported.
func (o ListenerOutput) CaCertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringArrayOutput { return v.CaCertificateIds }).(pulumi.StringArrayOutput)
}

// Specifies whether to enable mutual authentication.
func (o ListenerOutput) CaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolOutput { return v.CaEnabled }).(pulumi.BoolOutput)
}

// The list of server certificates. This parameter takes effect only for listeners that use SSL over TCP. **Note:** Only one server certificate is supported.
func (o ListenerOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringArrayOutput { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The maximum number of connections that can be created per second on the NLB instance. Valid values: 0 to 1000000. 0 specifies that the number of connections is unlimited.
func (o ListenerOutput) Cps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.Cps }).(pulumi.IntPtrOutput)
}

// Full port listening end port. Valid values: `0` ~ `65535`. The value of the end port is less than the start port.
func (o ListenerOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.EndPort }).(pulumi.IntPtrOutput)
}

// The timeout period of an idle connection. Unit: seconds. Valid values: `1` to `900`. Default value: `900`.
func (o ListenerOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.IdleTimeout }).(pulumi.IntOutput)
}

// Custom listener name. The length is limited to 2 to 256 characters, supports Chinese and English letters, and can include numbers, commas (,), half-width periods (.), half-width semicolons (;), forward slashes (/), at(@), underscores (_), and dashes (-).
func (o ListenerOutput) ListenerDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.ListenerDescription }).(pulumi.StringPtrOutput)
}

// Listening port. Valid values: 0 ~ 65535. `0`: indicates that full port listening is used. When set to `0`, you must configure `StartPort` and `EndPort`.
func (o ListenerOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ListenerPort }).(pulumi.IntOutput)
}

// The listening protocol. Valid values: `TCP`, `UDP`, or `TCPSSL`.
func (o ListenerOutput) ListenerProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerProtocol }).(pulumi.StringOutput)
}

// The ID of the network-based server load balancer instance.
func (o ListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The maximum size of a TCP segment. Unit: bytes. Valid values: 0 to 1500. 0 specifies that the maximum segment size remains unchanged. **Note:** This parameter is supported only by listeners that use SSL over TCP.
func (o ListenerOutput) Mss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.Mss }).(pulumi.IntPtrOutput)
}

// Specifies whether to use the Proxy protocol to pass client IP addresses to backend servers.
func (o ListenerOutput) ProxyProtocolEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolOutput { return v.ProxyProtocolEnabled }).(pulumi.BoolOutput)
}

// Specifies whether to enable fine-grained monitoring.
func (o ListenerOutput) SecSensorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolOutput { return v.SecSensorEnabled }).(pulumi.BoolOutput)
}

// The ID of the security policy. System security policies and custom security policies are supported.
// System security policies valid values: `tlsCipherPolicy10` (default), `tls_cipher_policy_1_1,` `tlsCipherPolicy12`, `tlsCipherPolicy12Strict`, and `tlsCipherPolicy12StrictWith13`.
// Custom security policies can be created by resource `nlb.SecurityPolicy`.
func (o ListenerOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// The ID of the server group.
func (o ListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// Full Port listens to the starting port. Valid values: `0` ~ `65535`.
func (o ListenerOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.StartPort }).(pulumi.IntPtrOutput)
}

// The status of the resource. Valid values: `Running`, `Stopped`.
func (o ListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Listener] {
	return pulumix.Output[[]*Listener]{
		OutputState: o.OutputState,
	}
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Listener] {
	return pulumix.Output[map[string]*Listener]{
		OutputState: o.OutputState,
	}
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
