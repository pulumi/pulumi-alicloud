// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the Api Gateway Plugins of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.187.0+.
func GetPlugins(ctx *pulumi.Context, args *GetPluginsArgs, opts ...pulumi.InvokeOption) (*GetPluginsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPluginsResult
	err := ctx.Invoke("alicloud:apigateway/getPlugins:getPlugins", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlugins.
type GetPluginsArgs struct {
	// A list of Plugin IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by Plugin name.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	PageNumber *int    `pulumi:"pageNumber"`
	PageSize   *int    `pulumi:"pageSize"`
	// The name of the plug-in that you want to create.
	PluginName *string `pulumi:"pluginName"`
	// The type of the plug-in.
	PluginType *string `pulumi:"pluginType"`
	// The tag of the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// A collection of values returned by getPlugins.
type GetPluginsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                 `pulumi:"id"`
	Ids        []string               `pulumi:"ids"`
	NameRegex  *string                `pulumi:"nameRegex"`
	Names      []string               `pulumi:"names"`
	OutputFile *string                `pulumi:"outputFile"`
	PageNumber *int                   `pulumi:"pageNumber"`
	PageSize   *int                   `pulumi:"pageSize"`
	PluginName *string                `pulumi:"pluginName"`
	PluginType *string                `pulumi:"pluginType"`
	Plugins    []GetPluginsPlugin     `pulumi:"plugins"`
	Tags       map[string]interface{} `pulumi:"tags"`
}

func GetPluginsOutput(ctx *pulumi.Context, args GetPluginsOutputArgs, opts ...pulumi.InvokeOption) GetPluginsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPluginsResult, error) {
			args := v.(GetPluginsArgs)
			r, err := GetPlugins(ctx, &args, opts...)
			var s GetPluginsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPluginsResultOutput)
}

// A collection of arguments for invoking getPlugins.
type GetPluginsOutputArgs struct {
	// A list of Plugin IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by Plugin name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	PageNumber pulumi.IntPtrInput    `pulumi:"pageNumber"`
	PageSize   pulumi.IntPtrInput    `pulumi:"pageSize"`
	// The name of the plug-in that you want to create.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The type of the plug-in.
	PluginType pulumi.StringPtrInput `pulumi:"pluginType"`
	// The tag of the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetPluginsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginsArgs)(nil)).Elem()
}

// A collection of values returned by getPlugins.
type GetPluginsResultOutput struct{ *pulumi.OutputState }

func (GetPluginsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluginsResult)(nil)).Elem()
}

func (o GetPluginsResultOutput) ToGetPluginsResultOutput() GetPluginsResultOutput {
	return o
}

func (o GetPluginsResultOutput) ToGetPluginsResultOutputWithContext(ctx context.Context) GetPluginsResultOutput {
	return o
}

func (o GetPluginsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetPluginsResult] {
	return pulumix.Output[GetPluginsResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetPluginsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluginsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPluginsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPluginsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetPluginsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetPluginsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPluginsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetPluginsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetPluginsResultOutput) PageNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *int { return v.PageNumber }).(pulumi.IntPtrOutput)
}

func (o GetPluginsResultOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

func (o GetPluginsResultOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

func (o GetPluginsResultOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluginsResult) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

func (o GetPluginsResultOutput) Plugins() GetPluginsPluginArrayOutput {
	return o.ApplyT(func(v GetPluginsResult) []GetPluginsPlugin { return v.Plugins }).(GetPluginsPluginArrayOutput)
}

func (o GetPluginsResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPluginsResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPluginsResultOutput{})
}
