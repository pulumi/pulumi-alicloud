// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Instance ACL attachment resource for attaching an ACL to a specific API Gateway instance.
//
// > **NOTE:** Available since v1.228.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/apigateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := apigateway.NewInstance(ctx, "default", &apigateway.InstanceArgs{
//				InstanceName: pulumi.String(name),
//				InstanceSpec: pulumi.String("api.s1.small"),
//				HttpsPolicy:  pulumi.String("HTTPS2_TLS1_0"),
//				ZoneId:       pulumi.String("cn-hangzhou-MAZ6"),
//				PaymentType:  pulumi.String("PayAsYouGo"),
//				InstanceType: pulumi.String("normal"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultAccessControlList, err := apigateway.NewAccessControlList(ctx, "default", &apigateway.AccessControlListArgs{
//				AccessControlListName: pulumi.String(name),
//				AddressIpVersion:      pulumi.String("ipv4"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigateway.NewAclEntryAttachment(ctx, "default", &apigateway.AclEntryAttachmentArgs{
//				AclId:   defaultAccessControlList.ID(),
//				Entry:   pulumi.String("128.0.0.1/32"),
//				Comment: pulumi.String("test comment"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigateway.NewInstanceAclAttachment(ctx, "default", &apigateway.InstanceAclAttachmentArgs{
//				InstanceId: _default.ID(),
//				AclId:      defaultAccessControlList.ID(),
//				AclType:    pulumi.String("white"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Api Gateway Instance Acl Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:apigateway/instanceAclAttachment:InstanceAclAttachment example <instance_id>:<acl_id>:<acl_type>
// ```
type InstanceAclAttachment struct {
	pulumi.CustomResourceState

	// The ID of the ACL to attach.
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// The type of the ACL. Valid values: `white`, `black`.
	AclType pulumi.StringOutput `pulumi:"aclType"`
	// The ID of the API Gateway instance that the ACL will be attached to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewInstanceAclAttachment registers a new resource with the given unique name, arguments, and options.
func NewInstanceAclAttachment(ctx *pulumi.Context,
	name string, args *InstanceAclAttachmentArgs, opts ...pulumi.ResourceOption) (*InstanceAclAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclId == nil {
		return nil, errors.New("invalid value for required argument 'AclId'")
	}
	if args.AclType == nil {
		return nil, errors.New("invalid value for required argument 'AclType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceAclAttachment
	err := ctx.RegisterResource("alicloud:apigateway/instanceAclAttachment:InstanceAclAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceAclAttachment gets an existing InstanceAclAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceAclAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceAclAttachmentState, opts ...pulumi.ResourceOption) (*InstanceAclAttachment, error) {
	var resource InstanceAclAttachment
	err := ctx.ReadResource("alicloud:apigateway/instanceAclAttachment:InstanceAclAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceAclAttachment resources.
type instanceAclAttachmentState struct {
	// The ID of the ACL to attach.
	AclId *string `pulumi:"aclId"`
	// The type of the ACL. Valid values: `white`, `black`.
	AclType *string `pulumi:"aclType"`
	// The ID of the API Gateway instance that the ACL will be attached to.
	InstanceId *string `pulumi:"instanceId"`
}

type InstanceAclAttachmentState struct {
	// The ID of the ACL to attach.
	AclId pulumi.StringPtrInput
	// The type of the ACL. Valid values: `white`, `black`.
	AclType pulumi.StringPtrInput
	// The ID of the API Gateway instance that the ACL will be attached to.
	InstanceId pulumi.StringPtrInput
}

func (InstanceAclAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAclAttachmentState)(nil)).Elem()
}

type instanceAclAttachmentArgs struct {
	// The ID of the ACL to attach.
	AclId string `pulumi:"aclId"`
	// The type of the ACL. Valid values: `white`, `black`.
	AclType string `pulumi:"aclType"`
	// The ID of the API Gateway instance that the ACL will be attached to.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a InstanceAclAttachment resource.
type InstanceAclAttachmentArgs struct {
	// The ID of the ACL to attach.
	AclId pulumi.StringInput
	// The type of the ACL. Valid values: `white`, `black`.
	AclType pulumi.StringInput
	// The ID of the API Gateway instance that the ACL will be attached to.
	InstanceId pulumi.StringInput
}

func (InstanceAclAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAclAttachmentArgs)(nil)).Elem()
}

type InstanceAclAttachmentInput interface {
	pulumi.Input

	ToInstanceAclAttachmentOutput() InstanceAclAttachmentOutput
	ToInstanceAclAttachmentOutputWithContext(ctx context.Context) InstanceAclAttachmentOutput
}

func (*InstanceAclAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAclAttachment)(nil)).Elem()
}

func (i *InstanceAclAttachment) ToInstanceAclAttachmentOutput() InstanceAclAttachmentOutput {
	return i.ToInstanceAclAttachmentOutputWithContext(context.Background())
}

func (i *InstanceAclAttachment) ToInstanceAclAttachmentOutputWithContext(ctx context.Context) InstanceAclAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAclAttachmentOutput)
}

// InstanceAclAttachmentArrayInput is an input type that accepts InstanceAclAttachmentArray and InstanceAclAttachmentArrayOutput values.
// You can construct a concrete instance of `InstanceAclAttachmentArrayInput` via:
//
//	InstanceAclAttachmentArray{ InstanceAclAttachmentArgs{...} }
type InstanceAclAttachmentArrayInput interface {
	pulumi.Input

	ToInstanceAclAttachmentArrayOutput() InstanceAclAttachmentArrayOutput
	ToInstanceAclAttachmentArrayOutputWithContext(context.Context) InstanceAclAttachmentArrayOutput
}

type InstanceAclAttachmentArray []InstanceAclAttachmentInput

func (InstanceAclAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAclAttachment)(nil)).Elem()
}

func (i InstanceAclAttachmentArray) ToInstanceAclAttachmentArrayOutput() InstanceAclAttachmentArrayOutput {
	return i.ToInstanceAclAttachmentArrayOutputWithContext(context.Background())
}

func (i InstanceAclAttachmentArray) ToInstanceAclAttachmentArrayOutputWithContext(ctx context.Context) InstanceAclAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAclAttachmentArrayOutput)
}

// InstanceAclAttachmentMapInput is an input type that accepts InstanceAclAttachmentMap and InstanceAclAttachmentMapOutput values.
// You can construct a concrete instance of `InstanceAclAttachmentMapInput` via:
//
//	InstanceAclAttachmentMap{ "key": InstanceAclAttachmentArgs{...} }
type InstanceAclAttachmentMapInput interface {
	pulumi.Input

	ToInstanceAclAttachmentMapOutput() InstanceAclAttachmentMapOutput
	ToInstanceAclAttachmentMapOutputWithContext(context.Context) InstanceAclAttachmentMapOutput
}

type InstanceAclAttachmentMap map[string]InstanceAclAttachmentInput

func (InstanceAclAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAclAttachment)(nil)).Elem()
}

func (i InstanceAclAttachmentMap) ToInstanceAclAttachmentMapOutput() InstanceAclAttachmentMapOutput {
	return i.ToInstanceAclAttachmentMapOutputWithContext(context.Background())
}

func (i InstanceAclAttachmentMap) ToInstanceAclAttachmentMapOutputWithContext(ctx context.Context) InstanceAclAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAclAttachmentMapOutput)
}

type InstanceAclAttachmentOutput struct{ *pulumi.OutputState }

func (InstanceAclAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAclAttachment)(nil)).Elem()
}

func (o InstanceAclAttachmentOutput) ToInstanceAclAttachmentOutput() InstanceAclAttachmentOutput {
	return o
}

func (o InstanceAclAttachmentOutput) ToInstanceAclAttachmentOutputWithContext(ctx context.Context) InstanceAclAttachmentOutput {
	return o
}

// The ID of the ACL to attach.
func (o InstanceAclAttachmentOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAclAttachment) pulumi.StringOutput { return v.AclId }).(pulumi.StringOutput)
}

// The type of the ACL. Valid values: `white`, `black`.
func (o InstanceAclAttachmentOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAclAttachment) pulumi.StringOutput { return v.AclType }).(pulumi.StringOutput)
}

// The ID of the API Gateway instance that the ACL will be attached to.
func (o InstanceAclAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAclAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type InstanceAclAttachmentArrayOutput struct{ *pulumi.OutputState }

func (InstanceAclAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAclAttachment)(nil)).Elem()
}

func (o InstanceAclAttachmentArrayOutput) ToInstanceAclAttachmentArrayOutput() InstanceAclAttachmentArrayOutput {
	return o
}

func (o InstanceAclAttachmentArrayOutput) ToInstanceAclAttachmentArrayOutputWithContext(ctx context.Context) InstanceAclAttachmentArrayOutput {
	return o
}

func (o InstanceAclAttachmentArrayOutput) Index(i pulumi.IntInput) InstanceAclAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceAclAttachment {
		return vs[0].([]*InstanceAclAttachment)[vs[1].(int)]
	}).(InstanceAclAttachmentOutput)
}

type InstanceAclAttachmentMapOutput struct{ *pulumi.OutputState }

func (InstanceAclAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAclAttachment)(nil)).Elem()
}

func (o InstanceAclAttachmentMapOutput) ToInstanceAclAttachmentMapOutput() InstanceAclAttachmentMapOutput {
	return o
}

func (o InstanceAclAttachmentMapOutput) ToInstanceAclAttachmentMapOutputWithContext(ctx context.Context) InstanceAclAttachmentMapOutput {
	return o
}

func (o InstanceAclAttachmentMapOutput) MapIndex(k pulumi.StringInput) InstanceAclAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceAclAttachment {
		return vs[0].(map[string]*InstanceAclAttachment)[vs[1].(string)]
	}).(InstanceAclAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAclAttachmentInput)(nil)).Elem(), &InstanceAclAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAclAttachmentArrayInput)(nil)).Elem(), InstanceAclAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAclAttachmentMapInput)(nil)).Elem(), InstanceAclAttachmentMap{})
	pulumi.RegisterOutputType(InstanceAclAttachmentOutput{})
	pulumi.RegisterOutputType(InstanceAclAttachmentArrayOutput{})
	pulumi.RegisterOutputType(InstanceAclAttachmentMapOutput{})
}
