// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AppAttachment struct {
	pulumi.CustomResourceState

	// The apiId that app apply to access.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The app that apply to the authorization.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The group that the api belongs to.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Stage that the app apply to access.
	StageName pulumi.StringOutput `pulumi:"stageName"`
}

// NewAppAttachment registers a new resource with the given unique name, arguments, and options.
func NewAppAttachment(ctx *pulumi.Context,
	name string, args *AppAttachmentArgs, opts ...pulumi.ResourceOption) (*AppAttachment, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.AppId == nil {
		return nil, errors.New("missing required argument 'AppId'")
	}
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.StageName == nil {
		return nil, errors.New("missing required argument 'StageName'")
	}
	if args == nil {
		args = &AppAttachmentArgs{}
	}
	var resource AppAttachment
	err := ctx.RegisterResource("alicloud:apigateway/appAttachment:AppAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppAttachment gets an existing AppAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppAttachmentState, opts ...pulumi.ResourceOption) (*AppAttachment, error) {
	var resource AppAttachment
	err := ctx.ReadResource("alicloud:apigateway/appAttachment:AppAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppAttachment resources.
type appAttachmentState struct {
	// The apiId that app apply to access.
	ApiId *string `pulumi:"apiId"`
	// The app that apply to the authorization.
	AppId *string `pulumi:"appId"`
	// The group that the api belongs to.
	GroupId *string `pulumi:"groupId"`
	// Stage that the app apply to access.
	StageName *string `pulumi:"stageName"`
}

type AppAttachmentState struct {
	// The apiId that app apply to access.
	ApiId pulumi.StringPtrInput
	// The app that apply to the authorization.
	AppId pulumi.StringPtrInput
	// The group that the api belongs to.
	GroupId pulumi.StringPtrInput
	// Stage that the app apply to access.
	StageName pulumi.StringPtrInput
}

func (AppAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*appAttachmentState)(nil)).Elem()
}

type appAttachmentArgs struct {
	// The apiId that app apply to access.
	ApiId string `pulumi:"apiId"`
	// The app that apply to the authorization.
	AppId string `pulumi:"appId"`
	// The group that the api belongs to.
	GroupId string `pulumi:"groupId"`
	// Stage that the app apply to access.
	StageName string `pulumi:"stageName"`
}

// The set of arguments for constructing a AppAttachment resource.
type AppAttachmentArgs struct {
	// The apiId that app apply to access.
	ApiId pulumi.StringInput
	// The app that apply to the authorization.
	AppId pulumi.StringInput
	// The group that the api belongs to.
	GroupId pulumi.StringInput
	// Stage that the app apply to access.
	StageName pulumi.StringInput
}

func (AppAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appAttachmentArgs)(nil)).Elem()
}

type AppAttachmentInput interface {
	pulumi.Input

	ToAppAttachmentOutput() AppAttachmentOutput
	ToAppAttachmentOutputWithContext(ctx context.Context) AppAttachmentOutput
}

func (AppAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAttachment)(nil)).Elem()
}

func (i AppAttachment) ToAppAttachmentOutput() AppAttachmentOutput {
	return i.ToAppAttachmentOutputWithContext(context.Background())
}

func (i AppAttachment) ToAppAttachmentOutputWithContext(ctx context.Context) AppAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppAttachmentOutput)
}

type AppAttachmentOutput struct {
	*pulumi.OutputState
}

func (AppAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAttachmentOutput)(nil)).Elem()
}

func (o AppAttachmentOutput) ToAppAttachmentOutput() AppAttachmentOutput {
	return o
}

func (o AppAttachmentOutput) ToAppAttachmentOutputWithContext(ctx context.Context) AppAttachmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AppAttachmentOutput{})
}
