// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directmail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Direct Mail Mail Address resource.
//
// For information about Direct Mail Mail Address and how to use it, see [What is Mail Address](https://www.aliyun.com/product/directmail).
//
// > **NOTE:** Available in v1.134.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/directmail"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := directmail.NewMailAddress(ctx, "example", &directmail.MailAddressArgs{
// 			AccountName: pulumi.String("example_value@email.com"),
// 			Sendtype:    pulumi.String("batch"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **Note:**
// A maximum of 10 mailing addresses can be added.
// Individual users: Up to 10 mailing addresses can be deleted within a month.
// Enterprise users: Up to 10 mailing addresses can be deleted within a month.
//
// ## Import
//
// Direct Mail Mail Address can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:directmail/mailAddress:MailAddress example <id>
// ```
type MailAddress struct {
	pulumi.CustomResourceState

	// The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Return address.
	ReplyAddress pulumi.StringPtrOutput `pulumi:"replyAddress"`
	// Account type. Valid values: `batch`, `trigger`.
	Sendtype pulumi.StringOutput `pulumi:"sendtype"`
	// Account Status freeze: 1, normal: 0.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewMailAddress registers a new resource with the given unique name, arguments, and options.
func NewMailAddress(ctx *pulumi.Context,
	name string, args *MailAddressArgs, opts ...pulumi.ResourceOption) (*MailAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Sendtype == nil {
		return nil, errors.New("invalid value for required argument 'Sendtype'")
	}
	var resource MailAddress
	err := ctx.RegisterResource("alicloud:directmail/mailAddress:MailAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMailAddress gets an existing MailAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMailAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailAddressState, opts ...pulumi.ResourceOption) (*MailAddress, error) {
	var resource MailAddress
	err := ctx.ReadResource("alicloud:directmail/mailAddress:MailAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MailAddress resources.
type mailAddressState struct {
	// The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
	AccountName *string `pulumi:"accountName"`
	// Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
	Password *string `pulumi:"password"`
	// Return address.
	ReplyAddress *string `pulumi:"replyAddress"`
	// Account type. Valid values: `batch`, `trigger`.
	Sendtype *string `pulumi:"sendtype"`
	// Account Status freeze: 1, normal: 0.
	Status *string `pulumi:"status"`
}

type MailAddressState struct {
	// The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
	AccountName pulumi.StringPtrInput
	// Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
	Password pulumi.StringPtrInput
	// Return address.
	ReplyAddress pulumi.StringPtrInput
	// Account type. Valid values: `batch`, `trigger`.
	Sendtype pulumi.StringPtrInput
	// Account Status freeze: 1, normal: 0.
	Status pulumi.StringPtrInput
}

func (MailAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailAddressState)(nil)).Elem()
}

type mailAddressArgs struct {
	// The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
	AccountName string `pulumi:"accountName"`
	// Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
	Password *string `pulumi:"password"`
	// Return address.
	ReplyAddress *string `pulumi:"replyAddress"`
	// Account type. Valid values: `batch`, `trigger`.
	Sendtype string `pulumi:"sendtype"`
}

// The set of arguments for constructing a MailAddress resource.
type MailAddressArgs struct {
	// The sender address. The email address must be filled in the format of account@domain, and only lowercase letters or numbers can be used.
	AccountName pulumi.StringInput
	// Account password. The password must be length 10-20 string, contains numbers, uppercase letters, lowercase letters at the same time.
	Password pulumi.StringPtrInput
	// Return address.
	ReplyAddress pulumi.StringPtrInput
	// Account type. Valid values: `batch`, `trigger`.
	Sendtype pulumi.StringInput
}

func (MailAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailAddressArgs)(nil)).Elem()
}

type MailAddressInput interface {
	pulumi.Input

	ToMailAddressOutput() MailAddressOutput
	ToMailAddressOutputWithContext(ctx context.Context) MailAddressOutput
}

func (*MailAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**MailAddress)(nil)).Elem()
}

func (i *MailAddress) ToMailAddressOutput() MailAddressOutput {
	return i.ToMailAddressOutputWithContext(context.Background())
}

func (i *MailAddress) ToMailAddressOutputWithContext(ctx context.Context) MailAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailAddressOutput)
}

// MailAddressArrayInput is an input type that accepts MailAddressArray and MailAddressArrayOutput values.
// You can construct a concrete instance of `MailAddressArrayInput` via:
//
//          MailAddressArray{ MailAddressArgs{...} }
type MailAddressArrayInput interface {
	pulumi.Input

	ToMailAddressArrayOutput() MailAddressArrayOutput
	ToMailAddressArrayOutputWithContext(context.Context) MailAddressArrayOutput
}

type MailAddressArray []MailAddressInput

func (MailAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MailAddress)(nil)).Elem()
}

func (i MailAddressArray) ToMailAddressArrayOutput() MailAddressArrayOutput {
	return i.ToMailAddressArrayOutputWithContext(context.Background())
}

func (i MailAddressArray) ToMailAddressArrayOutputWithContext(ctx context.Context) MailAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailAddressArrayOutput)
}

// MailAddressMapInput is an input type that accepts MailAddressMap and MailAddressMapOutput values.
// You can construct a concrete instance of `MailAddressMapInput` via:
//
//          MailAddressMap{ "key": MailAddressArgs{...} }
type MailAddressMapInput interface {
	pulumi.Input

	ToMailAddressMapOutput() MailAddressMapOutput
	ToMailAddressMapOutputWithContext(context.Context) MailAddressMapOutput
}

type MailAddressMap map[string]MailAddressInput

func (MailAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MailAddress)(nil)).Elem()
}

func (i MailAddressMap) ToMailAddressMapOutput() MailAddressMapOutput {
	return i.ToMailAddressMapOutputWithContext(context.Background())
}

func (i MailAddressMap) ToMailAddressMapOutputWithContext(ctx context.Context) MailAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailAddressMapOutput)
}

type MailAddressOutput struct{ *pulumi.OutputState }

func (MailAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MailAddress)(nil)).Elem()
}

func (o MailAddressOutput) ToMailAddressOutput() MailAddressOutput {
	return o
}

func (o MailAddressOutput) ToMailAddressOutputWithContext(ctx context.Context) MailAddressOutput {
	return o
}

type MailAddressArrayOutput struct{ *pulumi.OutputState }

func (MailAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MailAddress)(nil)).Elem()
}

func (o MailAddressArrayOutput) ToMailAddressArrayOutput() MailAddressArrayOutput {
	return o
}

func (o MailAddressArrayOutput) ToMailAddressArrayOutputWithContext(ctx context.Context) MailAddressArrayOutput {
	return o
}

func (o MailAddressArrayOutput) Index(i pulumi.IntInput) MailAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MailAddress {
		return vs[0].([]*MailAddress)[vs[1].(int)]
	}).(MailAddressOutput)
}

type MailAddressMapOutput struct{ *pulumi.OutputState }

func (MailAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MailAddress)(nil)).Elem()
}

func (o MailAddressMapOutput) ToMailAddressMapOutput() MailAddressMapOutput {
	return o
}

func (o MailAddressMapOutput) ToMailAddressMapOutputWithContext(ctx context.Context) MailAddressMapOutput {
	return o
}

func (o MailAddressMapOutput) MapIndex(k pulumi.StringInput) MailAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MailAddress {
		return vs[0].(map[string]*MailAddress)[vs[1].(string)]
	}).(MailAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailAddressInput)(nil)).Elem(), &MailAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailAddressArrayInput)(nil)).Elem(), MailAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailAddressMapInput)(nil)).Elem(), MailAddressMap{})
	pulumi.RegisterOutputType(MailAddressOutput{})
	pulumi.RegisterOutputType(MailAddressArrayOutput{})
	pulumi.RegisterOutputType(MailAddressMapOutput{})
}
