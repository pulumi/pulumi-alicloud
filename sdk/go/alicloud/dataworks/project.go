// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Data Works Project resource.
//
// For information about Data Works Project and how to use it, see [What is Project](https://www.alibabacloud.com/help/en/dataworks/developer-reference/api-dataworks-public-2024-05-18-createproject).
//
// > **NOTE:** Available since v1.229.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dataworks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			randint, err := random.NewInteger(ctx, "randint", &random.IntegerArgs{
//				Max: 999,
//				Min: 1,
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataworks.NewProject(ctx, "default", &dataworks.ProjectArgs{
//				Status:                pulumi.String("Available"),
//				Description:           pulumi.String("tf_desc"),
//				ProjectName:           pulumi.Sprintf("%v%v", name, randint.Id),
//				PaiTaskEnabled:        pulumi.Bool(false),
//				DisplayName:           pulumi.String("tf_new_api_display"),
//				DevRoleDisabled:       pulumi.Bool(true),
//				DevEnvironmentEnabled: pulumi.Bool(false),
//				ResourceGroupId:       pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Works Project can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dataworks/project:Project example <id>
// ```
type Project struct {
	pulumi.CustomResourceState

	// Workspace Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Is Development Environment Enabled
	DevEnvironmentEnabled pulumi.BoolOutput `pulumi:"devEnvironmentEnabled"`
	// Is Development Role Disabled
	DevRoleDisabled pulumi.BoolOutput `pulumi:"devRoleDisabled"`
	// Workspace Display Name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Create PAI Workspace Together
	PaiTaskEnabled pulumi.BoolOutput `pulumi:"paiTaskEnabled"`
	// Workspace Name
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Aliyun Resource Group Id
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// Workspace Status
	Status pulumi.StringOutput `pulumi:"status"`
	// Aliyun Resource Tag
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PaiTaskEnabled == nil {
		return nil, errors.New("invalid value for required argument 'PaiTaskEnabled'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("alicloud:dataworks/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("alicloud:dataworks/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Workspace Description
	Description *string `pulumi:"description"`
	// Is Development Environment Enabled
	DevEnvironmentEnabled *bool `pulumi:"devEnvironmentEnabled"`
	// Is Development Role Disabled
	DevRoleDisabled *bool `pulumi:"devRoleDisabled"`
	// Workspace Display Name
	DisplayName *string `pulumi:"displayName"`
	// Create PAI Workspace Together
	PaiTaskEnabled *bool `pulumi:"paiTaskEnabled"`
	// Workspace Name
	ProjectName *string `pulumi:"projectName"`
	// Aliyun Resource Group Id
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Workspace Status
	Status *string `pulumi:"status"`
	// Aliyun Resource Tag
	Tags map[string]string `pulumi:"tags"`
}

type ProjectState struct {
	// Workspace Description
	Description pulumi.StringPtrInput
	// Is Development Environment Enabled
	DevEnvironmentEnabled pulumi.BoolPtrInput
	// Is Development Role Disabled
	DevRoleDisabled pulumi.BoolPtrInput
	// Workspace Display Name
	DisplayName pulumi.StringPtrInput
	// Create PAI Workspace Together
	PaiTaskEnabled pulumi.BoolPtrInput
	// Workspace Name
	ProjectName pulumi.StringPtrInput
	// Aliyun Resource Group Id
	ResourceGroupId pulumi.StringPtrInput
	// Workspace Status
	Status pulumi.StringPtrInput
	// Aliyun Resource Tag
	Tags pulumi.StringMapInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Workspace Description
	Description *string `pulumi:"description"`
	// Is Development Environment Enabled
	DevEnvironmentEnabled *bool `pulumi:"devEnvironmentEnabled"`
	// Is Development Role Disabled
	DevRoleDisabled *bool `pulumi:"devRoleDisabled"`
	// Workspace Display Name
	DisplayName string `pulumi:"displayName"`
	// Create PAI Workspace Together
	PaiTaskEnabled bool `pulumi:"paiTaskEnabled"`
	// Workspace Name
	ProjectName string `pulumi:"projectName"`
	// Aliyun Resource Group Id
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Workspace Status
	Status *string `pulumi:"status"`
	// Aliyun Resource Tag
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Workspace Description
	Description pulumi.StringPtrInput
	// Is Development Environment Enabled
	DevEnvironmentEnabled pulumi.BoolPtrInput
	// Is Development Role Disabled
	DevRoleDisabled pulumi.BoolPtrInput
	// Workspace Display Name
	DisplayName pulumi.StringInput
	// Create PAI Workspace Together
	PaiTaskEnabled pulumi.BoolInput
	// Workspace Name
	ProjectName pulumi.StringInput
	// Aliyun Resource Group Id
	ResourceGroupId pulumi.StringPtrInput
	// Workspace Status
	Status pulumi.StringPtrInput
	// Aliyun Resource Tag
	Tags pulumi.StringMapInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Workspace Description
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Is Development Environment Enabled
func (o ProjectOutput) DevEnvironmentEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.DevEnvironmentEnabled }).(pulumi.BoolOutput)
}

// Is Development Role Disabled
func (o ProjectOutput) DevRoleDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.DevRoleDisabled }).(pulumi.BoolOutput)
}

// Workspace Display Name
func (o ProjectOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Create PAI Workspace Together
func (o ProjectOutput) PaiTaskEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.PaiTaskEnabled }).(pulumi.BoolOutput)
}

// Workspace Name
func (o ProjectOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Aliyun Resource Group Id
func (o ProjectOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Workspace Status
func (o ProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Aliyun Resource Tag
func (o ProjectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Project) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
