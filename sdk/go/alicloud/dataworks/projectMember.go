// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Data Works Project Member resource.
//
// For information about Data Works Project Member and how to use it, see [What is Project Member](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.237.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dataworks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ram"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			adminCode := "role_project_admin"
//			if param := cfg.Get("adminCode"); param != "" {
//				adminCode = param
//			}
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			randint, err := random.NewInteger(ctx, "randint", &random.IntegerArgs{
//				Max: 999,
//				Min: 1,
//			})
//			if err != nil {
//				return err
//			}
//			defaultKCTrB2, err := ram.NewUser(ctx, "defaultKCTrB2", &ram.UserArgs{
//				DisplayName: pulumi.Sprintf("%v%v", name, randint.Id),
//				Name:        pulumi.Sprintf("%v%v", name, randint.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataworks.NewProject(ctx, "defaultQeRfvU", &dataworks.ProjectArgs{
//				Status:                pulumi.String("Available"),
//				Description:           pulumi.String("tf_desc"),
//				ProjectName:           pulumi.Sprintf("%v%v", name, randint.Id),
//				PaiTaskEnabled:        pulumi.Bool(false),
//				DisplayName:           pulumi.String("tf_new_api_display"),
//				DevRoleDisabled:       pulumi.Bool(true),
//				DevEnvironmentEnabled: pulumi.Bool(false),
//				ResourceGroupId:       pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataworks.NewProjectMember(ctx, "default", &dataworks.ProjectMemberArgs{
//				UserId:    defaultKCTrB2.ID(),
//				ProjectId: pulumi.Any(defaultCoMnk8.Id),
//				Roles: dataworks.ProjectMemberRoleArray{
//					&dataworks.ProjectMemberRoleArgs{
//						Code: pulumi.String(adminCode),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Works Project Member can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dataworks/projectMember:ProjectMember example <project_id>:<user_id>
// ```
type ProjectMember struct {
	pulumi.CustomResourceState

	// Project ID
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// List of roles owned by members. See `roles` below.
	Roles ProjectMemberRoleArrayOutput `pulumi:"roles"`
	// The status of the user in project
	Status pulumi.StringOutput `pulumi:"status"`
	// The user ID of the member.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewProjectMember registers a new resource with the given unique name, arguments, and options.
func NewProjectMember(ctx *pulumi.Context,
	name string, args *ProjectMemberArgs, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMember
	err := ctx.RegisterResource("alicloud:dataworks/projectMember:ProjectMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMember gets an existing ProjectMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMemberState, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	var resource ProjectMember
	err := ctx.ReadResource("alicloud:dataworks/projectMember:ProjectMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMember resources.
type projectMemberState struct {
	// Project ID
	ProjectId *int `pulumi:"projectId"`
	// List of roles owned by members. See `roles` below.
	Roles []ProjectMemberRole `pulumi:"roles"`
	// The status of the user in project
	Status *string `pulumi:"status"`
	// The user ID of the member.
	UserId *string `pulumi:"userId"`
}

type ProjectMemberState struct {
	// Project ID
	ProjectId pulumi.IntPtrInput
	// List of roles owned by members. See `roles` below.
	Roles ProjectMemberRoleArrayInput
	// The status of the user in project
	Status pulumi.StringPtrInput
	// The user ID of the member.
	UserId pulumi.StringPtrInput
}

func (ProjectMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberState)(nil)).Elem()
}

type projectMemberArgs struct {
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// List of roles owned by members. See `roles` below.
	Roles []ProjectMemberRole `pulumi:"roles"`
	// The user ID of the member.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a ProjectMember resource.
type ProjectMemberArgs struct {
	// Project ID
	ProjectId pulumi.IntInput
	// List of roles owned by members. See `roles` below.
	Roles ProjectMemberRoleArrayInput
	// The user ID of the member.
	UserId pulumi.StringInput
}

func (ProjectMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberArgs)(nil)).Elem()
}

type ProjectMemberInput interface {
	pulumi.Input

	ToProjectMemberOutput() ProjectMemberOutput
	ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput
}

func (*ProjectMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (i *ProjectMember) ToProjectMemberOutput() ProjectMemberOutput {
	return i.ToProjectMemberOutputWithContext(context.Background())
}

func (i *ProjectMember) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberOutput)
}

// ProjectMemberArrayInput is an input type that accepts ProjectMemberArray and ProjectMemberArrayOutput values.
// You can construct a concrete instance of `ProjectMemberArrayInput` via:
//
//	ProjectMemberArray{ ProjectMemberArgs{...} }
type ProjectMemberArrayInput interface {
	pulumi.Input

	ToProjectMemberArrayOutput() ProjectMemberArrayOutput
	ToProjectMemberArrayOutputWithContext(context.Context) ProjectMemberArrayOutput
}

type ProjectMemberArray []ProjectMemberInput

func (ProjectMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMember)(nil)).Elem()
}

func (i ProjectMemberArray) ToProjectMemberArrayOutput() ProjectMemberArrayOutput {
	return i.ToProjectMemberArrayOutputWithContext(context.Background())
}

func (i ProjectMemberArray) ToProjectMemberArrayOutputWithContext(ctx context.Context) ProjectMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberArrayOutput)
}

// ProjectMemberMapInput is an input type that accepts ProjectMemberMap and ProjectMemberMapOutput values.
// You can construct a concrete instance of `ProjectMemberMapInput` via:
//
//	ProjectMemberMap{ "key": ProjectMemberArgs{...} }
type ProjectMemberMapInput interface {
	pulumi.Input

	ToProjectMemberMapOutput() ProjectMemberMapOutput
	ToProjectMemberMapOutputWithContext(context.Context) ProjectMemberMapOutput
}

type ProjectMemberMap map[string]ProjectMemberInput

func (ProjectMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMember)(nil)).Elem()
}

func (i ProjectMemberMap) ToProjectMemberMapOutput() ProjectMemberMapOutput {
	return i.ToProjectMemberMapOutputWithContext(context.Background())
}

func (i ProjectMemberMap) ToProjectMemberMapOutputWithContext(ctx context.Context) ProjectMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberMapOutput)
}

type ProjectMemberOutput struct{ *pulumi.OutputState }

func (ProjectMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (o ProjectMemberOutput) ToProjectMemberOutput() ProjectMemberOutput {
	return o
}

func (o ProjectMemberOutput) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return o
}

// Project ID
func (o ProjectMemberOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// List of roles owned by members. See `roles` below.
func (o ProjectMemberOutput) Roles() ProjectMemberRoleArrayOutput {
	return o.ApplyT(func(v *ProjectMember) ProjectMemberRoleArrayOutput { return v.Roles }).(ProjectMemberRoleArrayOutput)
}

// The status of the user in project
func (o ProjectMemberOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The user ID of the member.
func (o ProjectMemberOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type ProjectMemberArrayOutput struct{ *pulumi.OutputState }

func (ProjectMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMember)(nil)).Elem()
}

func (o ProjectMemberArrayOutput) ToProjectMemberArrayOutput() ProjectMemberArrayOutput {
	return o
}

func (o ProjectMemberArrayOutput) ToProjectMemberArrayOutputWithContext(ctx context.Context) ProjectMemberArrayOutput {
	return o
}

func (o ProjectMemberArrayOutput) Index(i pulumi.IntInput) ProjectMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMember {
		return vs[0].([]*ProjectMember)[vs[1].(int)]
	}).(ProjectMemberOutput)
}

type ProjectMemberMapOutput struct{ *pulumi.OutputState }

func (ProjectMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMember)(nil)).Elem()
}

func (o ProjectMemberMapOutput) ToProjectMemberMapOutput() ProjectMemberMapOutput {
	return o
}

func (o ProjectMemberMapOutput) ToProjectMemberMapOutputWithContext(ctx context.Context) ProjectMemberMapOutput {
	return o
}

func (o ProjectMemberMapOutput) MapIndex(k pulumi.StringInput) ProjectMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMember {
		return vs[0].(map[string]*ProjectMember)[vs[1].(string)]
	}).(ProjectMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberInput)(nil)).Elem(), &ProjectMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberArrayInput)(nil)).Elem(), ProjectMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberMapInput)(nil)).Elem(), ProjectMemberMap{})
	pulumi.RegisterOutputType(ProjectMemberOutput{})
	pulumi.RegisterOutputType(ProjectMemberArrayOutput{})
	pulumi.RegisterOutputType(ProjectMemberMapOutput{})
}
