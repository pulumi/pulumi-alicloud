// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Data Works Data Source resource.
//
// For information about Data Works Data Source and how to use it, see [What is Data Source](https://www.alibabacloud.com/help/en/dataworks/developer-reference/api-dataworks-public-2024-05-18-createdatasource).
//
// > **NOTE:** Available since v1.237.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dataworks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			randint, err := random.NewInteger(ctx, "randint", &random.IntegerArgs{
//				Max: 999,
//				Min: 1,
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultkguw4R, err := dataworks.NewProject(ctx, "defaultkguw4R", &dataworks.ProjectArgs{
//				Status:                pulumi.String("Available"),
//				Description:           pulumi.String("tf_desc"),
//				ProjectName:           pulumi.Sprintf("%v%v", name, randint.Id),
//				PaiTaskEnabled:        pulumi.Bool(false),
//				DisplayName:           pulumi.String("tf_new_api_display"),
//				DevRoleDisabled:       pulumi.Bool(true),
//				DevEnvironmentEnabled: pulumi.Bool(false),
//				ResourceGroupId:       pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"address": []map[string]interface{}{
//					map[string]interface{}{
//						"host": "127.0.0.1",
//						"port": "1234",
//					},
//				},
//				"database":         "hive_database",
//				"metaType":         "HiveMetastore",
//				"metastoreUris":    "thrift://123:123",
//				"version":          "2.3.9",
//				"loginMode":        "Anonymous",
//				"securityProtocol": "authTypeNone",
//				"envType":          "Prod",
//				"properties": map[string]interface{}{
//					"key1": "value1",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = dataworks.NewDataSource(ctx, "default", &dataworks.DataSourceArgs{
//				Type:                     pulumi.String("hive"),
//				DataSourceName:           pulumi.String(name),
//				ConnectionProperties:     pulumi.String(json0),
//				ConnectionPropertiesMode: pulumi.String("UrlMode"),
//				ProjectId:                defaultkguw4R.ID(),
//				Description:              pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Works Data Source can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dataworks/dataSource:DataSource example <project_id>:<data_source_id>
// ```
type DataSource struct {
	pulumi.CustomResourceState

	// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
	ConnectionProperties pulumi.StringOutput `pulumi:"connectionProperties"`
	// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
	ConnectionPropertiesMode pulumi.StringOutput `pulumi:"connectionPropertiesMode"`
	// The creation time of the resource
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// Creator of the data source
	CreateUser pulumi.StringOutput `pulumi:"createUser"`
	// The first ID of the resource
	DataSourceId pulumi.IntOutput `pulumi:"dataSourceId"`
	// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
	DataSourceName pulumi.StringOutput `pulumi:"dataSourceName"`
	// Description of the data source
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Modification time
	ModifyTime pulumi.IntOutput `pulumi:"modifyTime"`
	// Modifier of the data source
	ModifyUser pulumi.StringOutput `pulumi:"modifyUser"`
	// The ID of the project to which the data source belongs.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Business Unique Key of Data Source
	QualifiedName pulumi.StringOutput `pulumi:"qualifiedName"`
	// The type of data source. For a list of data source types, see the values listed in the API documentation.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionProperties == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionProperties'")
	}
	if args.ConnectionPropertiesMode == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionPropertiesMode'")
	}
	if args.DataSourceName == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ConnectionProperties != nil {
		args.ConnectionProperties = pulumi.ToSecret(args.ConnectionProperties).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionProperties",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("alicloud:dataworks/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("alicloud:dataworks/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
	ConnectionProperties *string `pulumi:"connectionProperties"`
	// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
	ConnectionPropertiesMode *string `pulumi:"connectionPropertiesMode"`
	// The creation time of the resource
	CreateTime *int `pulumi:"createTime"`
	// Creator of the data source
	CreateUser *string `pulumi:"createUser"`
	// The first ID of the resource
	DataSourceId *int `pulumi:"dataSourceId"`
	// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
	DataSourceName *string `pulumi:"dataSourceName"`
	// Description of the data source
	Description *string `pulumi:"description"`
	// Modification time
	ModifyTime *int `pulumi:"modifyTime"`
	// Modifier of the data source
	ModifyUser *string `pulumi:"modifyUser"`
	// The ID of the project to which the data source belongs.
	ProjectId *int `pulumi:"projectId"`
	// Business Unique Key of Data Source
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of data source. For a list of data source types, see the values listed in the API documentation.
	Type *string `pulumi:"type"`
}

type DataSourceState struct {
	// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
	ConnectionProperties pulumi.StringPtrInput
	// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
	ConnectionPropertiesMode pulumi.StringPtrInput
	// The creation time of the resource
	CreateTime pulumi.IntPtrInput
	// Creator of the data source
	CreateUser pulumi.StringPtrInput
	// The first ID of the resource
	DataSourceId pulumi.IntPtrInput
	// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
	DataSourceName pulumi.StringPtrInput
	// Description of the data source
	Description pulumi.StringPtrInput
	// Modification time
	ModifyTime pulumi.IntPtrInput
	// Modifier of the data source
	ModifyUser pulumi.StringPtrInput
	// The ID of the project to which the data source belongs.
	ProjectId pulumi.IntPtrInput
	// Business Unique Key of Data Source
	QualifiedName pulumi.StringPtrInput
	// The type of data source. For a list of data source types, see the values listed in the API documentation.
	Type pulumi.StringPtrInput
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
	ConnectionProperties string `pulumi:"connectionProperties"`
	// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
	ConnectionPropertiesMode string `pulumi:"connectionPropertiesMode"`
	// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
	DataSourceName string `pulumi:"dataSourceName"`
	// Description of the data source
	Description *string `pulumi:"description"`
	// The ID of the project to which the data source belongs.
	ProjectId int `pulumi:"projectId"`
	// The type of data source. For a list of data source types, see the values listed in the API documentation.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
	ConnectionProperties pulumi.StringInput
	// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
	ConnectionPropertiesMode pulumi.StringInput
	// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
	DataSourceName pulumi.StringInput
	// Description of the data source
	Description pulumi.StringPtrInput
	// The ID of the project to which the data source belongs.
	ProjectId pulumi.IntInput
	// The type of data source. For a list of data source types, see the values listed in the API documentation.
	Type pulumi.StringInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

// DataSourceArrayInput is an input type that accepts DataSourceArray and DataSourceArrayOutput values.
// You can construct a concrete instance of `DataSourceArrayInput` via:
//
//	DataSourceArray{ DataSourceArgs{...} }
type DataSourceArrayInput interface {
	pulumi.Input

	ToDataSourceArrayOutput() DataSourceArrayOutput
	ToDataSourceArrayOutputWithContext(context.Context) DataSourceArrayOutput
}

type DataSourceArray []DataSourceInput

func (DataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSource)(nil)).Elem()
}

func (i DataSourceArray) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return i.ToDataSourceArrayOutputWithContext(context.Background())
}

func (i DataSourceArray) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceArrayOutput)
}

// DataSourceMapInput is an input type that accepts DataSourceMap and DataSourceMapOutput values.
// You can construct a concrete instance of `DataSourceMapInput` via:
//
//	DataSourceMap{ "key": DataSourceArgs{...} }
type DataSourceMapInput interface {
	pulumi.Input

	ToDataSourceMapOutput() DataSourceMapOutput
	ToDataSourceMapOutputWithContext(context.Context) DataSourceMapOutput
}

type DataSourceMap map[string]DataSourceInput

func (DataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSource)(nil)).Elem()
}

func (i DataSourceMap) ToDataSourceMapOutput() DataSourceMapOutput {
	return i.ToDataSourceMapOutputWithContext(context.Background())
}

func (i DataSourceMap) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMapOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

// Data source connection configuration information, including the connection address, access identity, and environment information. The data source environment EnvType information is a member property of this object, including DEV (Development Environment) and PROD (production environment). The value of EnvType is not case-sensitive.
func (o DataSourceOutput) ConnectionProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ConnectionProperties }).(pulumi.StringOutput)
}

// The configuration mode of the data source. Different types of data sources have different configuration modes. For example, MySQL data sources support UrlMode and InstanceMode.
func (o DataSourceOutput) ConnectionPropertiesMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ConnectionPropertiesMode }).(pulumi.StringOutput)
}

// The creation time of the resource
func (o DataSourceOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSource) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// Creator of the data source
func (o DataSourceOutput) CreateUser() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreateUser }).(pulumi.StringOutput)
}

// The first ID of the resource
func (o DataSourceOutput) DataSourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSource) pulumi.IntOutput { return v.DataSourceId }).(pulumi.IntOutput)
}

// The data source name. The name of a data source in a specific environment (development environment or production environment) is unique in a project.
func (o DataSourceOutput) DataSourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceName }).(pulumi.StringOutput)
}

// Description of the data source
func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Modification time
func (o DataSourceOutput) ModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSource) pulumi.IntOutput { return v.ModifyTime }).(pulumi.IntOutput)
}

// Modifier of the data source
func (o DataSourceOutput) ModifyUser() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ModifyUser }).(pulumi.StringOutput)
}

// The ID of the project to which the data source belongs.
func (o DataSourceOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSource) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Business Unique Key of Data Source
func (o DataSourceOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.QualifiedName }).(pulumi.StringOutput)
}

// The type of data source. For a list of data source types, see the values listed in the API documentation.
func (o DataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DataSourceArrayOutput struct{ *pulumi.OutputState }

func (DataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSource)(nil)).Elem()
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) Index(i pulumi.IntInput) DataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSource {
		return vs[0].([]*DataSource)[vs[1].(int)]
	}).(DataSourceOutput)
}

type DataSourceMapOutput struct{ *pulumi.OutputState }

func (DataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSource)(nil)).Elem()
}

func (o DataSourceMapOutput) ToDataSourceMapOutput() DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) MapIndex(k pulumi.StringInput) DataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSource {
		return vs[0].(map[string]*DataSource)[vs[1].(string)]
	}).(DataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceArrayInput)(nil)).Elem(), DataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMapInput)(nil)).Elem(), DataSourceMap{})
	pulumi.RegisterOutputType(DataSourceOutput{})
	pulumi.RegisterOutputType(DataSourceArrayOutput{})
	pulumi.RegisterOutputType(DataSourceMapOutput{})
}
