// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Data Works Data Source Shared Rule resource.
//
// Data source sharing rule, which expresses A data source, from space A to space B (A user).
//
// For information about Data Works Data Source Shared Rule and how to use it, see [What is Data Source Shared Rule](https://www.alibabacloud.com/help/en/dataworks/developer-reference/api-dataworks-public-2024-05-18-createdatasourcesharedrule).
//
// > **NOTE:** Available since v1.237.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dataworks"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := random.NewInteger(ctx, "randint", &random.IntegerArgs{
//				Max: 999,
//				Min: 1,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultQeRfvU, err := dataworks.NewProject(ctx, "defaultQeRfvU", &dataworks.ProjectArgs{
//				Description:    pulumi.String("源项目"),
//				ProjectName:    pulumi.String(name),
//				DisplayName:    pulumi.String("shared_source2"),
//				PaiTaskEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s1",
//				Args: []string{
//					name,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultasjsH5, err := dataworks.NewProject(ctx, "defaultasjsH5", &dataworks.ProjectArgs{
//				Description:    pulumi.String("目标空间"),
//				ProjectName:    pulumi.String(invokeFormat.Result),
//				DisplayName:    pulumi.String("shared_target2"),
//				PaiTaskEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat1, err := std.Format(ctx, &std.FormatArgs{
//				Input: "%s2",
//				Args: []string{
//					name,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"address": []map[string]interface{}{
//					map[string]interface{}{
//						"host": "127.0.0.1",
//						"port": "1234",
//					},
//				},
//				"database":         "hive_database",
//				"metaType":         "HiveMetastore",
//				"metastoreUris":    "thrift://123:123",
//				"version":          "2.3.9",
//				"loginMode":        "Anonymous",
//				"securityProtocol": "authTypeNone",
//				"envType":          "Prod",
//				"properties": map[string]interface{}{
//					"key1": "value1",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			defaultvzu0wG, err := dataworks.NewDataSource(ctx, "defaultvzu0wG", &dataworks.DataSourceArgs{
//				Type:                     pulumi.String("hive"),
//				DataSourceName:           pulumi.String(invokeFormat1.Result),
//				ConnectionProperties:     pulumi.String(json0),
//				ProjectId:                defaultQeRfvU.ID(),
//				ConnectionPropertiesMode: pulumi.String("UrlMode"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataworks.NewDataSourceSharedRule(ctx, "default", &dataworks.DataSourceSharedRuleArgs{
//				TargetProjectId: defaultasjsH5.ID(),
//				DataSourceId:    defaultvzu0wG.DataSourceId,
//				EnvType:         pulumi.String("Prod"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Works Data Source Shared Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dataworks/dataSourceSharedRule:DataSourceSharedRule example <data_source_id>:<data_source_shared_rule_id>
// ```
type DataSourceSharedRule struct {
	pulumi.CustomResourceState

	// The creation time of the data source sharing rule.
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// The ID of the data source, that is, the unique identifier of the data source.
	DataSourceId pulumi.IntOutput `pulumi:"dataSourceId"`
	// The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
	DataSourceSharedRuleId pulumi.StringOutput `pulumi:"dataSourceSharedRuleId"`
	// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
	EnvType pulumi.StringOutput `pulumi:"envType"`
	// The target user of the data source permission policy, which is null to share to the project.
	SharedUser pulumi.StringPtrOutput `pulumi:"sharedUser"`
	// The ID of the project to which the data source is shared.
	TargetProjectId pulumi.IntOutput `pulumi:"targetProjectId"`
}

// NewDataSourceSharedRule registers a new resource with the given unique name, arguments, and options.
func NewDataSourceSharedRule(ctx *pulumi.Context,
	name string, args *DataSourceSharedRuleArgs, opts ...pulumi.ResourceOption) (*DataSourceSharedRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceId == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceId'")
	}
	if args.EnvType == nil {
		return nil, errors.New("invalid value for required argument 'EnvType'")
	}
	if args.TargetProjectId == nil {
		return nil, errors.New("invalid value for required argument 'TargetProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSourceSharedRule
	err := ctx.RegisterResource("alicloud:dataworks/dataSourceSharedRule:DataSourceSharedRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSourceSharedRule gets an existing DataSourceSharedRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSourceSharedRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceSharedRuleState, opts ...pulumi.ResourceOption) (*DataSourceSharedRule, error) {
	var resource DataSourceSharedRule
	err := ctx.ReadResource("alicloud:dataworks/dataSourceSharedRule:DataSourceSharedRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSourceSharedRule resources.
type dataSourceSharedRuleState struct {
	// The creation time of the data source sharing rule.
	CreateTime *int `pulumi:"createTime"`
	// The ID of the data source, that is, the unique identifier of the data source.
	DataSourceId *int `pulumi:"dataSourceId"`
	// The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
	DataSourceSharedRuleId *string `pulumi:"dataSourceSharedRuleId"`
	// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
	EnvType *string `pulumi:"envType"`
	// The target user of the data source permission policy, which is null to share to the project.
	SharedUser *string `pulumi:"sharedUser"`
	// The ID of the project to which the data source is shared.
	TargetProjectId *int `pulumi:"targetProjectId"`
}

type DataSourceSharedRuleState struct {
	// The creation time of the data source sharing rule.
	CreateTime pulumi.IntPtrInput
	// The ID of the data source, that is, the unique identifier of the data source.
	DataSourceId pulumi.IntPtrInput
	// The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
	DataSourceSharedRuleId pulumi.StringPtrInput
	// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
	EnvType pulumi.StringPtrInput
	// The target user of the data source permission policy, which is null to share to the project.
	SharedUser pulumi.StringPtrInput
	// The ID of the project to which the data source is shared.
	TargetProjectId pulumi.IntPtrInput
}

func (DataSourceSharedRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceSharedRuleState)(nil)).Elem()
}

type dataSourceSharedRuleArgs struct {
	// The ID of the data source, that is, the unique identifier of the data source.
	DataSourceId int `pulumi:"dataSourceId"`
	// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
	EnvType string `pulumi:"envType"`
	// The target user of the data source permission policy, which is null to share to the project.
	SharedUser *string `pulumi:"sharedUser"`
	// The ID of the project to which the data source is shared.
	TargetProjectId int `pulumi:"targetProjectId"`
}

// The set of arguments for constructing a DataSourceSharedRule resource.
type DataSourceSharedRuleArgs struct {
	// The ID of the data source, that is, the unique identifier of the data source.
	DataSourceId pulumi.IntInput
	// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
	EnvType pulumi.StringInput
	// The target user of the data source permission policy, which is null to share to the project.
	SharedUser pulumi.StringPtrInput
	// The ID of the project to which the data source is shared.
	TargetProjectId pulumi.IntInput
}

func (DataSourceSharedRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceSharedRuleArgs)(nil)).Elem()
}

type DataSourceSharedRuleInput interface {
	pulumi.Input

	ToDataSourceSharedRuleOutput() DataSourceSharedRuleOutput
	ToDataSourceSharedRuleOutputWithContext(ctx context.Context) DataSourceSharedRuleOutput
}

func (*DataSourceSharedRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSharedRule)(nil)).Elem()
}

func (i *DataSourceSharedRule) ToDataSourceSharedRuleOutput() DataSourceSharedRuleOutput {
	return i.ToDataSourceSharedRuleOutputWithContext(context.Background())
}

func (i *DataSourceSharedRule) ToDataSourceSharedRuleOutputWithContext(ctx context.Context) DataSourceSharedRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSharedRuleOutput)
}

// DataSourceSharedRuleArrayInput is an input type that accepts DataSourceSharedRuleArray and DataSourceSharedRuleArrayOutput values.
// You can construct a concrete instance of `DataSourceSharedRuleArrayInput` via:
//
//	DataSourceSharedRuleArray{ DataSourceSharedRuleArgs{...} }
type DataSourceSharedRuleArrayInput interface {
	pulumi.Input

	ToDataSourceSharedRuleArrayOutput() DataSourceSharedRuleArrayOutput
	ToDataSourceSharedRuleArrayOutputWithContext(context.Context) DataSourceSharedRuleArrayOutput
}

type DataSourceSharedRuleArray []DataSourceSharedRuleInput

func (DataSourceSharedRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSourceSharedRule)(nil)).Elem()
}

func (i DataSourceSharedRuleArray) ToDataSourceSharedRuleArrayOutput() DataSourceSharedRuleArrayOutput {
	return i.ToDataSourceSharedRuleArrayOutputWithContext(context.Background())
}

func (i DataSourceSharedRuleArray) ToDataSourceSharedRuleArrayOutputWithContext(ctx context.Context) DataSourceSharedRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSharedRuleArrayOutput)
}

// DataSourceSharedRuleMapInput is an input type that accepts DataSourceSharedRuleMap and DataSourceSharedRuleMapOutput values.
// You can construct a concrete instance of `DataSourceSharedRuleMapInput` via:
//
//	DataSourceSharedRuleMap{ "key": DataSourceSharedRuleArgs{...} }
type DataSourceSharedRuleMapInput interface {
	pulumi.Input

	ToDataSourceSharedRuleMapOutput() DataSourceSharedRuleMapOutput
	ToDataSourceSharedRuleMapOutputWithContext(context.Context) DataSourceSharedRuleMapOutput
}

type DataSourceSharedRuleMap map[string]DataSourceSharedRuleInput

func (DataSourceSharedRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSourceSharedRule)(nil)).Elem()
}

func (i DataSourceSharedRuleMap) ToDataSourceSharedRuleMapOutput() DataSourceSharedRuleMapOutput {
	return i.ToDataSourceSharedRuleMapOutputWithContext(context.Background())
}

func (i DataSourceSharedRuleMap) ToDataSourceSharedRuleMapOutputWithContext(ctx context.Context) DataSourceSharedRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSharedRuleMapOutput)
}

type DataSourceSharedRuleOutput struct{ *pulumi.OutputState }

func (DataSourceSharedRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSharedRule)(nil)).Elem()
}

func (o DataSourceSharedRuleOutput) ToDataSourceSharedRuleOutput() DataSourceSharedRuleOutput {
	return o
}

func (o DataSourceSharedRuleOutput) ToDataSourceSharedRuleOutputWithContext(ctx context.Context) DataSourceSharedRuleOutput {
	return o
}

// The creation time of the data source sharing rule.
func (o DataSourceSharedRuleOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// The ID of the data source, that is, the unique identifier of the data source.
func (o DataSourceSharedRuleOutput) DataSourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.IntOutput { return v.DataSourceId }).(pulumi.IntOutput)
}

// The data source sharing rule ID, that is, the unique identifier of the data source sharing rule.
func (o DataSourceSharedRuleOutput) DataSourceSharedRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.StringOutput { return v.DataSourceSharedRuleId }).(pulumi.StringOutput)
}

// The environment type of the data source shared to the target project, such as Dev (Development Environment) and Prod (production environment).
func (o DataSourceSharedRuleOutput) EnvType() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.StringOutput { return v.EnvType }).(pulumi.StringOutput)
}

// The target user of the data source permission policy, which is null to share to the project.
func (o DataSourceSharedRuleOutput) SharedUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.StringPtrOutput { return v.SharedUser }).(pulumi.StringPtrOutput)
}

// The ID of the project to which the data source is shared.
func (o DataSourceSharedRuleOutput) TargetProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *DataSourceSharedRule) pulumi.IntOutput { return v.TargetProjectId }).(pulumi.IntOutput)
}

type DataSourceSharedRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSourceSharedRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSourceSharedRule)(nil)).Elem()
}

func (o DataSourceSharedRuleArrayOutput) ToDataSourceSharedRuleArrayOutput() DataSourceSharedRuleArrayOutput {
	return o
}

func (o DataSourceSharedRuleArrayOutput) ToDataSourceSharedRuleArrayOutputWithContext(ctx context.Context) DataSourceSharedRuleArrayOutput {
	return o
}

func (o DataSourceSharedRuleArrayOutput) Index(i pulumi.IntInput) DataSourceSharedRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSourceSharedRule {
		return vs[0].([]*DataSourceSharedRule)[vs[1].(int)]
	}).(DataSourceSharedRuleOutput)
}

type DataSourceSharedRuleMapOutput struct{ *pulumi.OutputState }

func (DataSourceSharedRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSourceSharedRule)(nil)).Elem()
}

func (o DataSourceSharedRuleMapOutput) ToDataSourceSharedRuleMapOutput() DataSourceSharedRuleMapOutput {
	return o
}

func (o DataSourceSharedRuleMapOutput) ToDataSourceSharedRuleMapOutputWithContext(ctx context.Context) DataSourceSharedRuleMapOutput {
	return o
}

func (o DataSourceSharedRuleMapOutput) MapIndex(k pulumi.StringInput) DataSourceSharedRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSourceSharedRule {
		return vs[0].(map[string]*DataSourceSharedRule)[vs[1].(string)]
	}).(DataSourceSharedRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSharedRuleInput)(nil)).Elem(), &DataSourceSharedRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSharedRuleArrayInput)(nil)).Elem(), DataSourceSharedRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSharedRuleMapInput)(nil)).Elem(), DataSourceSharedRuleMap{})
	pulumi.RegisterOutputType(DataSourceSharedRuleOutput{})
	pulumi.RegisterOutputType(DataSourceSharedRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSourceSharedRuleMapOutput{})
}
