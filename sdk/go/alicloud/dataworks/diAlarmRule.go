// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Data Works Di Alarm Rule resource.
//
// Data Integration alarm rules.
//
// For information about Data Works Di Alarm Rule and how to use it, see [What is Di Alarm Rule](https://www.alibabacloud.com/help/en/dataworks/developer-reference/api-dataworks-public-2024-05-18-createdialarmrule).
//
// > **NOTE:** Available since v1.241.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dataworks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaulteNv8bu, err := dataworks.NewProject(ctx, "defaulteNv8bu", &dataworks.ProjectArgs{
//				ProjectName: pulumi.String(name),
//				DisplayName: pulumi.String(name),
//				Description: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultUW8inp, err := dataworks.NewDiJob(ctx, "defaultUW8inp", &dataworks.DiJobArgs{
//				Description:          pulumi.String("xxxx"),
//				ProjectId:            defaulteNv8bu.ID(),
//				JobName:              pulumi.String("xxx"),
//				MigrationType:        pulumi.String("api_xxx"),
//				SourceDataSourceType: pulumi.String("xxx"),
//				ResourceSettings: &dataworks.DiJobResourceSettingsArgs{
//					OfflineResourceSettings: &dataworks.DiJobResourceSettingsOfflineResourceSettingsArgs{
//						RequestedCu:             pulumi.Float64(2),
//						ResourceGroupIdentifier: pulumi.String("xx"),
//					},
//					RealtimeResourceSettings: &dataworks.DiJobResourceSettingsRealtimeResourceSettingsArgs{
//						RequestedCu:             pulumi.Float64(2),
//						ResourceGroupIdentifier: pulumi.String("xx"),
//					},
//					ScheduleResourceSettings: &dataworks.DiJobResourceSettingsScheduleResourceSettingsArgs{
//						RequestedCu:             pulumi.Float64(2),
//						ResourceGroupIdentifier: pulumi.String("xx"),
//					},
//				},
//				JobSettings: &dataworks.DiJobJobSettingsArgs{
//					ChannelSettings: pulumi.String("xxxx"),
//					ColumnDataTypeSettings: dataworks.DiJobJobSettingsColumnDataTypeSettingArray{
//						&dataworks.DiJobJobSettingsColumnDataTypeSettingArgs{
//							DestinationDataType: pulumi.String("xxxx"),
//							SourceDataType:      pulumi.String("xxxx"),
//						},
//					},
//					CycleScheduleSettings: &dataworks.DiJobJobSettingsCycleScheduleSettingsArgs{
//						CycleMigrationType: pulumi.String("xxxx"),
//						ScheduleParameters: pulumi.String("xxxx"),
//					},
//				},
//				SourceDataSourceSettings: dataworks.DiJobSourceDataSourceSettingArray{
//					&dataworks.DiJobSourceDataSourceSettingArgs{
//						DataSourceName: pulumi.String("xxxx"),
//						DataSourceProperties: &dataworks.DiJobSourceDataSourceSettingDataSourcePropertiesArgs{
//							Encoding: pulumi.String("xxxx"),
//							Timezone: pulumi.String("xxxx"),
//						},
//					},
//				},
//				DestinationDataSourceType: pulumi.String("xxxx"),
//				TableMappings: dataworks.DiJobTableMappingArray{
//					&dataworks.DiJobTableMappingArgs{
//						SourceObjectSelectionRules: dataworks.DiJobTableMappingSourceObjectSelectionRuleArray{
//							&dataworks.DiJobTableMappingSourceObjectSelectionRuleArgs{
//								Action:         pulumi.String("Include"),
//								Expression:     pulumi.String("xxxx"),
//								ExpressionType: pulumi.String("Exact"),
//								ObjectType:     pulumi.String("xxxx"),
//							},
//							&dataworks.DiJobTableMappingSourceObjectSelectionRuleArgs{
//								Action:         pulumi.String("Include"),
//								Expression:     pulumi.String("xxxx"),
//								ExpressionType: pulumi.String("Exact"),
//								ObjectType:     pulumi.String("xxxx"),
//							},
//						},
//						TransformationRules: dataworks.DiJobTableMappingTransformationRuleArray{
//							&dataworks.DiJobTableMappingTransformationRuleArgs{
//								RuleName:       pulumi.String("xxxx"),
//								RuleActionType: pulumi.String("xxxx"),
//								RuleTargetType: pulumi.String("xxxx"),
//							},
//						},
//					},
//				},
//				TransformationRules: dataworks.DiJobTransformationRuleArray{
//					&dataworks.DiJobTransformationRuleArgs{
//						RuleActionType: pulumi.String("xxxx"),
//						RuleExpression: pulumi.String("xxxx"),
//						RuleName:       pulumi.String("xxxx"),
//						RuleTargetType: pulumi.String("xxxx"),
//					},
//				},
//				DestinationDataSourceSettings: dataworks.DiJobDestinationDataSourceSettingArray{
//					&dataworks.DiJobDestinationDataSourceSettingArgs{
//						DataSourceName: pulumi.String("xxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataworks.NewDiAlarmRule(ctx, "default", &dataworks.DiAlarmRuleArgs{
//				Description: pulumi.String("Description"),
//				TriggerConditions: dataworks.DiAlarmRuleTriggerConditionArray{
//					&dataworks.DiAlarmRuleTriggerConditionArgs{
//						DdlReportTags: pulumi.StringArray{
//							pulumi.String("ALTERADDCOLUMN"),
//						},
//						Threshold: pulumi.Int(20),
//						Duration:  pulumi.Int(10),
//						Severity:  pulumi.String("Warning"),
//					},
//				},
//				MetricType: pulumi.String("DdlReport"),
//				NotificationSettings: &dataworks.DiAlarmRuleNotificationSettingsArgs{
//					NotificationChannels: dataworks.DiAlarmRuleNotificationSettingsNotificationChannelArray{
//						&dataworks.DiAlarmRuleNotificationSettingsNotificationChannelArgs{
//							Severity: pulumi.String("Warning"),
//							Channels: pulumi.StringArray{
//								pulumi.String("Ding"),
//							},
//						},
//					},
//					NotificationReceivers: dataworks.DiAlarmRuleNotificationSettingsNotificationReceiverArray{
//						&dataworks.DiAlarmRuleNotificationSettingsNotificationReceiverArgs{
//							ReceiverType: pulumi.String("DingToken"),
//							ReceiverValues: pulumi.StringArray{
//								pulumi.String("1107550004253538"),
//							},
//						},
//					},
//					InhibitionInterval: pulumi.Int(10),
//				},
//				DiJobId:         defaultUW8inp.DiJobId,
//				DiAlarmRuleName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Works Di Alarm Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dataworks/diAlarmRule:DiAlarmRule example <di_job_id>:<di_alarm_rule_id>
// ```
type DiAlarmRule struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Resource attribute field representing resource level ID
	DiAlarmRuleId pulumi.IntOutput `pulumi:"diAlarmRuleId"`
	// Data Integration alarm rule name
	DiAlarmRuleName pulumi.StringOutput `pulumi:"diAlarmRuleName"`
	// Task ID: the ID of the task associated with the alert rule.
	DiJobId pulumi.IntOutput     `pulumi:"diJobId"`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Alarm indicator type. Optional enumerated values:
	// - Heartbeat (task status alarm)
	// - FailoverCount(failover times alarm)
	// - Delay (task Delay alarm)
	MetricType pulumi.StringOutput `pulumi:"metricType"`
	// Alarm notification settings See `notificationSettings` below.
	NotificationSettings DiAlarmRuleNotificationSettingsOutput `pulumi:"notificationSettings"`
	// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
	TriggerConditions DiAlarmRuleTriggerConditionArrayOutput `pulumi:"triggerConditions"`
}

// NewDiAlarmRule registers a new resource with the given unique name, arguments, and options.
func NewDiAlarmRule(ctx *pulumi.Context,
	name string, args *DiAlarmRuleArgs, opts ...pulumi.ResourceOption) (*DiAlarmRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiAlarmRuleName == nil {
		return nil, errors.New("invalid value for required argument 'DiAlarmRuleName'")
	}
	if args.DiJobId == nil {
		return nil, errors.New("invalid value for required argument 'DiJobId'")
	}
	if args.MetricType == nil {
		return nil, errors.New("invalid value for required argument 'MetricType'")
	}
	if args.NotificationSettings == nil {
		return nil, errors.New("invalid value for required argument 'NotificationSettings'")
	}
	if args.TriggerConditions == nil {
		return nil, errors.New("invalid value for required argument 'TriggerConditions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiAlarmRule
	err := ctx.RegisterResource("alicloud:dataworks/diAlarmRule:DiAlarmRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiAlarmRule gets an existing DiAlarmRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiAlarmRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiAlarmRuleState, opts ...pulumi.ResourceOption) (*DiAlarmRule, error) {
	var resource DiAlarmRule
	err := ctx.ReadResource("alicloud:dataworks/diAlarmRule:DiAlarmRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiAlarmRule resources.
type diAlarmRuleState struct {
	Description *string `pulumi:"description"`
	// Resource attribute field representing resource level ID
	DiAlarmRuleId *int `pulumi:"diAlarmRuleId"`
	// Data Integration alarm rule name
	DiAlarmRuleName *string `pulumi:"diAlarmRuleName"`
	// Task ID: the ID of the task associated with the alert rule.
	DiJobId *int  `pulumi:"diJobId"`
	Enabled *bool `pulumi:"enabled"`
	// Alarm indicator type. Optional enumerated values:
	// - Heartbeat (task status alarm)
	// - FailoverCount(failover times alarm)
	// - Delay (task Delay alarm)
	MetricType *string `pulumi:"metricType"`
	// Alarm notification settings See `notificationSettings` below.
	NotificationSettings *DiAlarmRuleNotificationSettings `pulumi:"notificationSettings"`
	// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
	TriggerConditions []DiAlarmRuleTriggerCondition `pulumi:"triggerConditions"`
}

type DiAlarmRuleState struct {
	Description pulumi.StringPtrInput
	// Resource attribute field representing resource level ID
	DiAlarmRuleId pulumi.IntPtrInput
	// Data Integration alarm rule name
	DiAlarmRuleName pulumi.StringPtrInput
	// Task ID: the ID of the task associated with the alert rule.
	DiJobId pulumi.IntPtrInput
	Enabled pulumi.BoolPtrInput
	// Alarm indicator type. Optional enumerated values:
	// - Heartbeat (task status alarm)
	// - FailoverCount(failover times alarm)
	// - Delay (task Delay alarm)
	MetricType pulumi.StringPtrInput
	// Alarm notification settings See `notificationSettings` below.
	NotificationSettings DiAlarmRuleNotificationSettingsPtrInput
	// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
	TriggerConditions DiAlarmRuleTriggerConditionArrayInput
}

func (DiAlarmRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*diAlarmRuleState)(nil)).Elem()
}

type diAlarmRuleArgs struct {
	Description *string `pulumi:"description"`
	// Data Integration alarm rule name
	DiAlarmRuleName string `pulumi:"diAlarmRuleName"`
	// Task ID: the ID of the task associated with the alert rule.
	DiJobId int   `pulumi:"diJobId"`
	Enabled *bool `pulumi:"enabled"`
	// Alarm indicator type. Optional enumerated values:
	// - Heartbeat (task status alarm)
	// - FailoverCount(failover times alarm)
	// - Delay (task Delay alarm)
	MetricType string `pulumi:"metricType"`
	// Alarm notification settings See `notificationSettings` below.
	NotificationSettings DiAlarmRuleNotificationSettings `pulumi:"notificationSettings"`
	// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
	TriggerConditions []DiAlarmRuleTriggerCondition `pulumi:"triggerConditions"`
}

// The set of arguments for constructing a DiAlarmRule resource.
type DiAlarmRuleArgs struct {
	Description pulumi.StringPtrInput
	// Data Integration alarm rule name
	DiAlarmRuleName pulumi.StringInput
	// Task ID: the ID of the task associated with the alert rule.
	DiJobId pulumi.IntInput
	Enabled pulumi.BoolPtrInput
	// Alarm indicator type. Optional enumerated values:
	// - Heartbeat (task status alarm)
	// - FailoverCount(failover times alarm)
	// - Delay (task Delay alarm)
	MetricType pulumi.StringInput
	// Alarm notification settings See `notificationSettings` below.
	NotificationSettings DiAlarmRuleNotificationSettingsInput
	// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
	TriggerConditions DiAlarmRuleTriggerConditionArrayInput
}

func (DiAlarmRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diAlarmRuleArgs)(nil)).Elem()
}

type DiAlarmRuleInput interface {
	pulumi.Input

	ToDiAlarmRuleOutput() DiAlarmRuleOutput
	ToDiAlarmRuleOutputWithContext(ctx context.Context) DiAlarmRuleOutput
}

func (*DiAlarmRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DiAlarmRule)(nil)).Elem()
}

func (i *DiAlarmRule) ToDiAlarmRuleOutput() DiAlarmRuleOutput {
	return i.ToDiAlarmRuleOutputWithContext(context.Background())
}

func (i *DiAlarmRule) ToDiAlarmRuleOutputWithContext(ctx context.Context) DiAlarmRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiAlarmRuleOutput)
}

// DiAlarmRuleArrayInput is an input type that accepts DiAlarmRuleArray and DiAlarmRuleArrayOutput values.
// You can construct a concrete instance of `DiAlarmRuleArrayInput` via:
//
//	DiAlarmRuleArray{ DiAlarmRuleArgs{...} }
type DiAlarmRuleArrayInput interface {
	pulumi.Input

	ToDiAlarmRuleArrayOutput() DiAlarmRuleArrayOutput
	ToDiAlarmRuleArrayOutputWithContext(context.Context) DiAlarmRuleArrayOutput
}

type DiAlarmRuleArray []DiAlarmRuleInput

func (DiAlarmRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiAlarmRule)(nil)).Elem()
}

func (i DiAlarmRuleArray) ToDiAlarmRuleArrayOutput() DiAlarmRuleArrayOutput {
	return i.ToDiAlarmRuleArrayOutputWithContext(context.Background())
}

func (i DiAlarmRuleArray) ToDiAlarmRuleArrayOutputWithContext(ctx context.Context) DiAlarmRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiAlarmRuleArrayOutput)
}

// DiAlarmRuleMapInput is an input type that accepts DiAlarmRuleMap and DiAlarmRuleMapOutput values.
// You can construct a concrete instance of `DiAlarmRuleMapInput` via:
//
//	DiAlarmRuleMap{ "key": DiAlarmRuleArgs{...} }
type DiAlarmRuleMapInput interface {
	pulumi.Input

	ToDiAlarmRuleMapOutput() DiAlarmRuleMapOutput
	ToDiAlarmRuleMapOutputWithContext(context.Context) DiAlarmRuleMapOutput
}

type DiAlarmRuleMap map[string]DiAlarmRuleInput

func (DiAlarmRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiAlarmRule)(nil)).Elem()
}

func (i DiAlarmRuleMap) ToDiAlarmRuleMapOutput() DiAlarmRuleMapOutput {
	return i.ToDiAlarmRuleMapOutputWithContext(context.Background())
}

func (i DiAlarmRuleMap) ToDiAlarmRuleMapOutputWithContext(ctx context.Context) DiAlarmRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiAlarmRuleMapOutput)
}

type DiAlarmRuleOutput struct{ *pulumi.OutputState }

func (DiAlarmRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiAlarmRule)(nil)).Elem()
}

func (o DiAlarmRuleOutput) ToDiAlarmRuleOutput() DiAlarmRuleOutput {
	return o
}

func (o DiAlarmRuleOutput) ToDiAlarmRuleOutputWithContext(ctx context.Context) DiAlarmRuleOutput {
	return o
}

func (o DiAlarmRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource attribute field representing resource level ID
func (o DiAlarmRuleOutput) DiAlarmRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.IntOutput { return v.DiAlarmRuleId }).(pulumi.IntOutput)
}

// Data Integration alarm rule name
func (o DiAlarmRuleOutput) DiAlarmRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.StringOutput { return v.DiAlarmRuleName }).(pulumi.StringOutput)
}

// Task ID: the ID of the task associated with the alert rule.
func (o DiAlarmRuleOutput) DiJobId() pulumi.IntOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.IntOutput { return v.DiJobId }).(pulumi.IntOutput)
}

func (o DiAlarmRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Alarm indicator type. Optional enumerated values:
// - Heartbeat (task status alarm)
// - FailoverCount(failover times alarm)
// - Delay (task Delay alarm)
func (o DiAlarmRuleOutput) MetricType() pulumi.StringOutput {
	return o.ApplyT(func(v *DiAlarmRule) pulumi.StringOutput { return v.MetricType }).(pulumi.StringOutput)
}

// Alarm notification settings See `notificationSettings` below.
func (o DiAlarmRuleOutput) NotificationSettings() DiAlarmRuleNotificationSettingsOutput {
	return o.ApplyT(func(v *DiAlarmRule) DiAlarmRuleNotificationSettingsOutput { return v.NotificationSettings }).(DiAlarmRuleNotificationSettingsOutput)
}

// Alarm trigger condition list, supporting multiple conditions See `triggerConditions` below.
func (o DiAlarmRuleOutput) TriggerConditions() DiAlarmRuleTriggerConditionArrayOutput {
	return o.ApplyT(func(v *DiAlarmRule) DiAlarmRuleTriggerConditionArrayOutput { return v.TriggerConditions }).(DiAlarmRuleTriggerConditionArrayOutput)
}

type DiAlarmRuleArrayOutput struct{ *pulumi.OutputState }

func (DiAlarmRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiAlarmRule)(nil)).Elem()
}

func (o DiAlarmRuleArrayOutput) ToDiAlarmRuleArrayOutput() DiAlarmRuleArrayOutput {
	return o
}

func (o DiAlarmRuleArrayOutput) ToDiAlarmRuleArrayOutputWithContext(ctx context.Context) DiAlarmRuleArrayOutput {
	return o
}

func (o DiAlarmRuleArrayOutput) Index(i pulumi.IntInput) DiAlarmRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiAlarmRule {
		return vs[0].([]*DiAlarmRule)[vs[1].(int)]
	}).(DiAlarmRuleOutput)
}

type DiAlarmRuleMapOutput struct{ *pulumi.OutputState }

func (DiAlarmRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiAlarmRule)(nil)).Elem()
}

func (o DiAlarmRuleMapOutput) ToDiAlarmRuleMapOutput() DiAlarmRuleMapOutput {
	return o
}

func (o DiAlarmRuleMapOutput) ToDiAlarmRuleMapOutputWithContext(ctx context.Context) DiAlarmRuleMapOutput {
	return o
}

func (o DiAlarmRuleMapOutput) MapIndex(k pulumi.StringInput) DiAlarmRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiAlarmRule {
		return vs[0].(map[string]*DiAlarmRule)[vs[1].(string)]
	}).(DiAlarmRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiAlarmRuleInput)(nil)).Elem(), &DiAlarmRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiAlarmRuleArrayInput)(nil)).Elem(), DiAlarmRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiAlarmRuleMapInput)(nil)).Elem(), DiAlarmRuleMap{})
	pulumi.RegisterOutputType(DiAlarmRuleOutput{})
	pulumi.RegisterOutputType(DiAlarmRuleArrayOutput{})
	pulumi.RegisterOutputType(DiAlarmRuleMapOutput{})
}
