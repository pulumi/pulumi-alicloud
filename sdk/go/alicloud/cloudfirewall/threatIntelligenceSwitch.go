// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfirewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Cloud Firewall Threat Intelligence Switch can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cloudfirewall/threatIntelligenceSwitch:ThreatIntelligenceSwitch example <id>
// ```
type ThreatIntelligenceSwitch struct {
	pulumi.CustomResourceState

	// Rule action. Value:
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// The threat intelligence classification ID.
	CategoryId pulumi.StringOutput `pulumi:"categoryId"`
	// Switch status. Value:
	EnableStatus pulumi.IntPtrOutput `pulumi:"enableStatus"`
}

// NewThreatIntelligenceSwitch registers a new resource with the given unique name, arguments, and options.
func NewThreatIntelligenceSwitch(ctx *pulumi.Context,
	name string, args *ThreatIntelligenceSwitchArgs, opts ...pulumi.ResourceOption) (*ThreatIntelligenceSwitch, error) {
	if args == nil {
		args = &ThreatIntelligenceSwitchArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ThreatIntelligenceSwitch
	err := ctx.RegisterResource("alicloud:cloudfirewall/threatIntelligenceSwitch:ThreatIntelligenceSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThreatIntelligenceSwitch gets an existing ThreatIntelligenceSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThreatIntelligenceSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThreatIntelligenceSwitchState, opts ...pulumi.ResourceOption) (*ThreatIntelligenceSwitch, error) {
	var resource ThreatIntelligenceSwitch
	err := ctx.ReadResource("alicloud:cloudfirewall/threatIntelligenceSwitch:ThreatIntelligenceSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThreatIntelligenceSwitch resources.
type threatIntelligenceSwitchState struct {
	// Rule action. Value:
	Action *string `pulumi:"action"`
	// The threat intelligence classification ID.
	CategoryId *string `pulumi:"categoryId"`
	// Switch status. Value:
	EnableStatus *int `pulumi:"enableStatus"`
}

type ThreatIntelligenceSwitchState struct {
	// Rule action. Value:
	Action pulumi.StringPtrInput
	// The threat intelligence classification ID.
	CategoryId pulumi.StringPtrInput
	// Switch status. Value:
	EnableStatus pulumi.IntPtrInput
}

func (ThreatIntelligenceSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*threatIntelligenceSwitchState)(nil)).Elem()
}

type threatIntelligenceSwitchArgs struct {
	// Rule action. Value:
	Action *string `pulumi:"action"`
	// The threat intelligence classification ID.
	CategoryId *string `pulumi:"categoryId"`
	// Switch status. Value:
	EnableStatus *int `pulumi:"enableStatus"`
}

// The set of arguments for constructing a ThreatIntelligenceSwitch resource.
type ThreatIntelligenceSwitchArgs struct {
	// Rule action. Value:
	Action pulumi.StringPtrInput
	// The threat intelligence classification ID.
	CategoryId pulumi.StringPtrInput
	// Switch status. Value:
	EnableStatus pulumi.IntPtrInput
}

func (ThreatIntelligenceSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*threatIntelligenceSwitchArgs)(nil)).Elem()
}

type ThreatIntelligenceSwitchInput interface {
	pulumi.Input

	ToThreatIntelligenceSwitchOutput() ThreatIntelligenceSwitchOutput
	ToThreatIntelligenceSwitchOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchOutput
}

func (*ThreatIntelligenceSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreatIntelligenceSwitch)(nil)).Elem()
}

func (i *ThreatIntelligenceSwitch) ToThreatIntelligenceSwitchOutput() ThreatIntelligenceSwitchOutput {
	return i.ToThreatIntelligenceSwitchOutputWithContext(context.Background())
}

func (i *ThreatIntelligenceSwitch) ToThreatIntelligenceSwitchOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceSwitchOutput)
}

// ThreatIntelligenceSwitchArrayInput is an input type that accepts ThreatIntelligenceSwitchArray and ThreatIntelligenceSwitchArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceSwitchArrayInput` via:
//
//	ThreatIntelligenceSwitchArray{ ThreatIntelligenceSwitchArgs{...} }
type ThreatIntelligenceSwitchArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceSwitchArrayOutput() ThreatIntelligenceSwitchArrayOutput
	ToThreatIntelligenceSwitchArrayOutputWithContext(context.Context) ThreatIntelligenceSwitchArrayOutput
}

type ThreatIntelligenceSwitchArray []ThreatIntelligenceSwitchInput

func (ThreatIntelligenceSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThreatIntelligenceSwitch)(nil)).Elem()
}

func (i ThreatIntelligenceSwitchArray) ToThreatIntelligenceSwitchArrayOutput() ThreatIntelligenceSwitchArrayOutput {
	return i.ToThreatIntelligenceSwitchArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceSwitchArray) ToThreatIntelligenceSwitchArrayOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceSwitchArrayOutput)
}

// ThreatIntelligenceSwitchMapInput is an input type that accepts ThreatIntelligenceSwitchMap and ThreatIntelligenceSwitchMapOutput values.
// You can construct a concrete instance of `ThreatIntelligenceSwitchMapInput` via:
//
//	ThreatIntelligenceSwitchMap{ "key": ThreatIntelligenceSwitchArgs{...} }
type ThreatIntelligenceSwitchMapInput interface {
	pulumi.Input

	ToThreatIntelligenceSwitchMapOutput() ThreatIntelligenceSwitchMapOutput
	ToThreatIntelligenceSwitchMapOutputWithContext(context.Context) ThreatIntelligenceSwitchMapOutput
}

type ThreatIntelligenceSwitchMap map[string]ThreatIntelligenceSwitchInput

func (ThreatIntelligenceSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThreatIntelligenceSwitch)(nil)).Elem()
}

func (i ThreatIntelligenceSwitchMap) ToThreatIntelligenceSwitchMapOutput() ThreatIntelligenceSwitchMapOutput {
	return i.ToThreatIntelligenceSwitchMapOutputWithContext(context.Background())
}

func (i ThreatIntelligenceSwitchMap) ToThreatIntelligenceSwitchMapOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceSwitchMapOutput)
}

type ThreatIntelligenceSwitchOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreatIntelligenceSwitch)(nil)).Elem()
}

func (o ThreatIntelligenceSwitchOutput) ToThreatIntelligenceSwitchOutput() ThreatIntelligenceSwitchOutput {
	return o
}

func (o ThreatIntelligenceSwitchOutput) ToThreatIntelligenceSwitchOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchOutput {
	return o
}

// Rule action. Value:
func (o ThreatIntelligenceSwitchOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreatIntelligenceSwitch) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// The threat intelligence classification ID.
func (o ThreatIntelligenceSwitchOutput) CategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelligenceSwitch) pulumi.StringOutput { return v.CategoryId }).(pulumi.StringOutput)
}

// Switch status. Value:
func (o ThreatIntelligenceSwitchOutput) EnableStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThreatIntelligenceSwitch) pulumi.IntPtrOutput { return v.EnableStatus }).(pulumi.IntPtrOutput)
}

type ThreatIntelligenceSwitchArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThreatIntelligenceSwitch)(nil)).Elem()
}

func (o ThreatIntelligenceSwitchArrayOutput) ToThreatIntelligenceSwitchArrayOutput() ThreatIntelligenceSwitchArrayOutput {
	return o
}

func (o ThreatIntelligenceSwitchArrayOutput) ToThreatIntelligenceSwitchArrayOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchArrayOutput {
	return o
}

func (o ThreatIntelligenceSwitchArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ThreatIntelligenceSwitch {
		return vs[0].([]*ThreatIntelligenceSwitch)[vs[1].(int)]
	}).(ThreatIntelligenceSwitchOutput)
}

type ThreatIntelligenceSwitchMapOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThreatIntelligenceSwitch)(nil)).Elem()
}

func (o ThreatIntelligenceSwitchMapOutput) ToThreatIntelligenceSwitchMapOutput() ThreatIntelligenceSwitchMapOutput {
	return o
}

func (o ThreatIntelligenceSwitchMapOutput) ToThreatIntelligenceSwitchMapOutputWithContext(ctx context.Context) ThreatIntelligenceSwitchMapOutput {
	return o
}

func (o ThreatIntelligenceSwitchMapOutput) MapIndex(k pulumi.StringInput) ThreatIntelligenceSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ThreatIntelligenceSwitch {
		return vs[0].(map[string]*ThreatIntelligenceSwitch)[vs[1].(string)]
	}).(ThreatIntelligenceSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelligenceSwitchInput)(nil)).Elem(), &ThreatIntelligenceSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelligenceSwitchArrayInput)(nil)).Elem(), ThreatIntelligenceSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelligenceSwitchMapInput)(nil)).Elem(), ThreatIntelligenceSwitchMap{})
	pulumi.RegisterOutputType(ThreatIntelligenceSwitchOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceSwitchArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceSwitchMapOutput{})
}
