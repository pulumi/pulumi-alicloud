// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfirewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Cloud Firewall IPS Config can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cloudfirewall/ipsConfig:IpsConfig example
// ```
type IpsConfig struct {
	pulumi.CustomResourceState

	// Basic rule switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	BasicRules pulumi.IntPtrOutput `pulumi:"basicRules"`
	// Threat intelligence. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	CtiRules pulumi.IntPtrOutput `pulumi:"ctiRules"`
	// Language
	Lang pulumi.StringPtrOutput `pulumi:"lang"`
	// Sensitive data detection Daily detection traffic limit. Defaults to 0.
	MaxSdl pulumi.IntPtrOutput `pulumi:"maxSdl"`
	// Virtual patch switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	PatchRules pulumi.IntPtrOutput `pulumi:"patchRules"`
	// The IPS rule Group. Value:
	// - 1: loose rule Group.
	// - 2: Medium rule Group.
	// - 3: Strict rule groups.
	RuleClass pulumi.IntPtrOutput `pulumi:"ruleClass"`
	// IPS defense mode. Value:
	// - 1: Intercept mode.
	// - 0: Observation mode (Default).
	RunMode pulumi.IntPtrOutput `pulumi:"runMode"`
}

// NewIpsConfig registers a new resource with the given unique name, arguments, and options.
func NewIpsConfig(ctx *pulumi.Context,
	name string, args *IpsConfigArgs, opts ...pulumi.ResourceOption) (*IpsConfig, error) {
	if args == nil {
		args = &IpsConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpsConfig
	err := ctx.RegisterResource("alicloud:cloudfirewall/ipsConfig:IpsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsConfig gets an existing IpsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsConfigState, opts ...pulumi.ResourceOption) (*IpsConfig, error) {
	var resource IpsConfig
	err := ctx.ReadResource("alicloud:cloudfirewall/ipsConfig:IpsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsConfig resources.
type ipsConfigState struct {
	// Basic rule switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	BasicRules *int `pulumi:"basicRules"`
	// Threat intelligence. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	CtiRules *int `pulumi:"ctiRules"`
	// Language
	Lang *string `pulumi:"lang"`
	// Sensitive data detection Daily detection traffic limit. Defaults to 0.
	MaxSdl *int `pulumi:"maxSdl"`
	// Virtual patch switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	PatchRules *int `pulumi:"patchRules"`
	// The IPS rule Group. Value:
	// - 1: loose rule Group.
	// - 2: Medium rule Group.
	// - 3: Strict rule groups.
	RuleClass *int `pulumi:"ruleClass"`
	// IPS defense mode. Value:
	// - 1: Intercept mode.
	// - 0: Observation mode (Default).
	RunMode *int `pulumi:"runMode"`
}

type IpsConfigState struct {
	// Basic rule switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	BasicRules pulumi.IntPtrInput
	// Threat intelligence. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	CtiRules pulumi.IntPtrInput
	// Language
	Lang pulumi.StringPtrInput
	// Sensitive data detection Daily detection traffic limit. Defaults to 0.
	MaxSdl pulumi.IntPtrInput
	// Virtual patch switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	PatchRules pulumi.IntPtrInput
	// The IPS rule Group. Value:
	// - 1: loose rule Group.
	// - 2: Medium rule Group.
	// - 3: Strict rule groups.
	RuleClass pulumi.IntPtrInput
	// IPS defense mode. Value:
	// - 1: Intercept mode.
	// - 0: Observation mode (Default).
	RunMode pulumi.IntPtrInput
}

func (IpsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsConfigState)(nil)).Elem()
}

type ipsConfigArgs struct {
	// Basic rule switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	BasicRules *int `pulumi:"basicRules"`
	// Threat intelligence. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	CtiRules *int `pulumi:"ctiRules"`
	// Language
	Lang *string `pulumi:"lang"`
	// Sensitive data detection Daily detection traffic limit. Defaults to 0.
	MaxSdl *int `pulumi:"maxSdl"`
	// Virtual patch switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	PatchRules *int `pulumi:"patchRules"`
	// The IPS rule Group. Value:
	// - 1: loose rule Group.
	// - 2: Medium rule Group.
	// - 3: Strict rule groups.
	RuleClass *int `pulumi:"ruleClass"`
	// IPS defense mode. Value:
	// - 1: Intercept mode.
	// - 0: Observation mode (Default).
	RunMode *int `pulumi:"runMode"`
}

// The set of arguments for constructing a IpsConfig resource.
type IpsConfigArgs struct {
	// Basic rule switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	BasicRules pulumi.IntPtrInput
	// Threat intelligence. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	CtiRules pulumi.IntPtrInput
	// Language
	Lang pulumi.StringPtrInput
	// Sensitive data detection Daily detection traffic limit. Defaults to 0.
	MaxSdl pulumi.IntPtrInput
	// Virtual patch switch. Value:
	// - 1: Open.
	// - 0: Closed (Default).
	PatchRules pulumi.IntPtrInput
	// The IPS rule Group. Value:
	// - 1: loose rule Group.
	// - 2: Medium rule Group.
	// - 3: Strict rule groups.
	RuleClass pulumi.IntPtrInput
	// IPS defense mode. Value:
	// - 1: Intercept mode.
	// - 0: Observation mode (Default).
	RunMode pulumi.IntPtrInput
}

func (IpsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsConfigArgs)(nil)).Elem()
}

type IpsConfigInput interface {
	pulumi.Input

	ToIpsConfigOutput() IpsConfigOutput
	ToIpsConfigOutputWithContext(ctx context.Context) IpsConfigOutput
}

func (*IpsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsConfig)(nil)).Elem()
}

func (i *IpsConfig) ToIpsConfigOutput() IpsConfigOutput {
	return i.ToIpsConfigOutputWithContext(context.Background())
}

func (i *IpsConfig) ToIpsConfigOutputWithContext(ctx context.Context) IpsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsConfigOutput)
}

// IpsConfigArrayInput is an input type that accepts IpsConfigArray and IpsConfigArrayOutput values.
// You can construct a concrete instance of `IpsConfigArrayInput` via:
//
//	IpsConfigArray{ IpsConfigArgs{...} }
type IpsConfigArrayInput interface {
	pulumi.Input

	ToIpsConfigArrayOutput() IpsConfigArrayOutput
	ToIpsConfigArrayOutputWithContext(context.Context) IpsConfigArrayOutput
}

type IpsConfigArray []IpsConfigInput

func (IpsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsConfig)(nil)).Elem()
}

func (i IpsConfigArray) ToIpsConfigArrayOutput() IpsConfigArrayOutput {
	return i.ToIpsConfigArrayOutputWithContext(context.Background())
}

func (i IpsConfigArray) ToIpsConfigArrayOutputWithContext(ctx context.Context) IpsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsConfigArrayOutput)
}

// IpsConfigMapInput is an input type that accepts IpsConfigMap and IpsConfigMapOutput values.
// You can construct a concrete instance of `IpsConfigMapInput` via:
//
//	IpsConfigMap{ "key": IpsConfigArgs{...} }
type IpsConfigMapInput interface {
	pulumi.Input

	ToIpsConfigMapOutput() IpsConfigMapOutput
	ToIpsConfigMapOutputWithContext(context.Context) IpsConfigMapOutput
}

type IpsConfigMap map[string]IpsConfigInput

func (IpsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsConfig)(nil)).Elem()
}

func (i IpsConfigMap) ToIpsConfigMapOutput() IpsConfigMapOutput {
	return i.ToIpsConfigMapOutputWithContext(context.Background())
}

func (i IpsConfigMap) ToIpsConfigMapOutputWithContext(ctx context.Context) IpsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsConfigMapOutput)
}

type IpsConfigOutput struct{ *pulumi.OutputState }

func (IpsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsConfig)(nil)).Elem()
}

func (o IpsConfigOutput) ToIpsConfigOutput() IpsConfigOutput {
	return o
}

func (o IpsConfigOutput) ToIpsConfigOutputWithContext(ctx context.Context) IpsConfigOutput {
	return o
}

// Basic rule switch. Value:
// - 1: Open.
// - 0: Closed (Default).
func (o IpsConfigOutput) BasicRules() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.BasicRules }).(pulumi.IntPtrOutput)
}

// Threat intelligence. Value:
// - 1: Open.
// - 0: Closed (Default).
func (o IpsConfigOutput) CtiRules() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.CtiRules }).(pulumi.IntPtrOutput)
}

// Language
func (o IpsConfigOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.StringPtrOutput { return v.Lang }).(pulumi.StringPtrOutput)
}

// Sensitive data detection Daily detection traffic limit. Defaults to 0.
func (o IpsConfigOutput) MaxSdl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.MaxSdl }).(pulumi.IntPtrOutput)
}

// Virtual patch switch. Value:
// - 1: Open.
// - 0: Closed (Default).
func (o IpsConfigOutput) PatchRules() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.PatchRules }).(pulumi.IntPtrOutput)
}

// The IPS rule Group. Value:
// - 1: loose rule Group.
// - 2: Medium rule Group.
// - 3: Strict rule groups.
func (o IpsConfigOutput) RuleClass() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.RuleClass }).(pulumi.IntPtrOutput)
}

// IPS defense mode. Value:
// - 1: Intercept mode.
// - 0: Observation mode (Default).
func (o IpsConfigOutput) RunMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsConfig) pulumi.IntPtrOutput { return v.RunMode }).(pulumi.IntPtrOutput)
}

type IpsConfigArrayOutput struct{ *pulumi.OutputState }

func (IpsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsConfig)(nil)).Elem()
}

func (o IpsConfigArrayOutput) ToIpsConfigArrayOutput() IpsConfigArrayOutput {
	return o
}

func (o IpsConfigArrayOutput) ToIpsConfigArrayOutputWithContext(ctx context.Context) IpsConfigArrayOutput {
	return o
}

func (o IpsConfigArrayOutput) Index(i pulumi.IntInput) IpsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsConfig {
		return vs[0].([]*IpsConfig)[vs[1].(int)]
	}).(IpsConfigOutput)
}

type IpsConfigMapOutput struct{ *pulumi.OutputState }

func (IpsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsConfig)(nil)).Elem()
}

func (o IpsConfigMapOutput) ToIpsConfigMapOutput() IpsConfigMapOutput {
	return o
}

func (o IpsConfigMapOutput) ToIpsConfigMapOutputWithContext(ctx context.Context) IpsConfigMapOutput {
	return o
}

func (o IpsConfigMapOutput) MapIndex(k pulumi.StringInput) IpsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsConfig {
		return vs[0].(map[string]*IpsConfig)[vs[1].(string)]
	}).(IpsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsConfigInput)(nil)).Elem(), &IpsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsConfigArrayInput)(nil)).Elem(), IpsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsConfigMapInput)(nil)).Elem(), IpsConfigMap{})
	pulumi.RegisterOutputType(IpsConfigOutput{})
	pulumi.RegisterOutputType(IpsConfigArrayOutput{})
	pulumi.RegisterOutputType(IpsConfigMapOutput{})
}
