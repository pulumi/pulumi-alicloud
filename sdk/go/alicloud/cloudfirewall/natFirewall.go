// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfirewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Firewall Nat Firewall resource.
//
// For information about Cloud Firewall Nat Firewall and how to use it, see [What is Nat Firewall](https://www.alibabacloud.com/help/zh/cloud-firewall/developer-reference/api-cloudfw-2017-12-07-createsecurityproxy).
//
// > **NOTE:** Available since v1.224.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cloudfirewall"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultikZ0gD, err := vpc.NewNetwork(ctx, "defaultikZ0gD", &vpc.NetworkArgs{
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//				VpcName:   pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultp4O7qi, err := vpc.NewSwitch(ctx, "defaultp4O7qi", &vpc.SwitchArgs{
//				VpcId:       defaultikZ0gD.ID(),
//				CidrBlock:   pulumi.String("172.16.6.0/24"),
//				VswitchName: pulumi.String(name),
//				ZoneId:      pulumi.String(_default.Zones[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			default2iRZpC, err := vpc.NewNatGateway(ctx, "default2iRZpC", &vpc.NatGatewayArgs{
//				EipBindMode:    pulumi.String("MULTI_BINDED"),
//				VpcId:          defaultikZ0gD.ID(),
//				NatGatewayName: pulumi.String(name),
//				PaymentType:    pulumi.String("PayAsYouGo"),
//				VswitchId:      defaultp4O7qi.ID(),
//				NatType:        pulumi.String("Enhanced"),
//				NetworkType:    pulumi.String("internet"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultyiRwgs, err := ecs.NewEipAddress(ctx, "defaultyiRwgs", &ecs.EipAddressArgs{
//				AddressName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewEipAssociation(ctx, "defaults2MTuO", &ecs.EipAssociationArgs{
//				InstanceId:   default2iRZpC.ID(),
//				AllocationId: defaultyiRwgs.ID(),
//				Mode:         pulumi.String("NAT"),
//				InstanceType: pulumi.String("Nat"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultAKE43g, err := vpc.NewSnatEntry(ctx, "defaultAKE43g", &vpc.SnatEntryArgs{
//				SnatIp:          defaultyiRwgs.IpAddress,
//				SnatTableId:     default2iRZpC.SnatTableIds,
//				SourceVswitchId: defaultp4O7qi.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudfirewall.NewNatFirewall(ctx, "default", &cloudfirewall.NatFirewallArgs{
//				NatGatewayId: default2iRZpC.ID(),
//				NatRouteEntryLists: cloudfirewall.NatFirewallNatRouteEntryListArray{
//					&cloudfirewall.NatFirewallNatRouteEntryListArgs{
//						NexthopType:     pulumi.String("NatGateway"),
//						RouteTableId:    defaultikZ0gD.RouteTableId,
//						NexthopId:       default2iRZpC.ID(),
//						DestinationCidr: pulumi.String("0.0.0.0/0"),
//					},
//				},
//				FirewallSwitch: pulumi.String("close"),
//				VswitchAuto:    pulumi.String("true"),
//				Status:         pulumi.String("closed"),
//				RegionNo:       pulumi.String("cn-shenzhen"),
//				Lang:           pulumi.String("zh"),
//				ProxyName:      pulumi.String("CFW-example"),
//				VswitchId:      defaultAKE43g.SourceVswitchId,
//				StrictMode:     pulumi.Int(0),
//				VpcId:          defaultikZ0gD.ID(),
//				VswitchCidr:    pulumi.String("172.16.5.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloud Firewall Nat Firewall can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:cloudfirewall/natFirewall:NatFirewall example <id>
// ```
type NatFirewall struct {
	pulumi.CustomResourceState

	// Safety protection switch. Value:-**open**: open-**close**: close.
	FirewallSwitch pulumi.StringPtrOutput `pulumi:"firewallSwitch"`
	// Lang.
	Lang pulumi.StringPtrOutput `pulumi:"lang"`
	// NAT gateway ID.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
	NatRouteEntryLists NatFirewallNatRouteEntryListArrayOutput `pulumi:"natRouteEntryLists"`
	// NAT firewall name.
	ProxyName pulumi.StringOutput `pulumi:"proxyName"`
	// Region.
	RegionNo pulumi.StringOutput `pulumi:"regionNo"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
	StrictMode pulumi.IntPtrOutput `pulumi:"strictMode"`
	// The ID of the VPC instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
	VswitchAuto pulumi.StringPtrOutput `pulumi:"vswitchAuto"`
	// The network segment of the virtual switch. Required for Switch automatic mode.
	VswitchCidr pulumi.StringPtrOutput `pulumi:"vswitchCidr"`
	// The switch ID. Required for switch manual mode.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
}

// NewNatFirewall registers a new resource with the given unique name, arguments, and options.
func NewNatFirewall(ctx *pulumi.Context,
	name string, args *NatFirewallArgs, opts ...pulumi.ResourceOption) (*NatFirewall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.NatRouteEntryLists == nil {
		return nil, errors.New("invalid value for required argument 'NatRouteEntryLists'")
	}
	if args.ProxyName == nil {
		return nil, errors.New("invalid value for required argument 'ProxyName'")
	}
	if args.RegionNo == nil {
		return nil, errors.New("invalid value for required argument 'RegionNo'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatFirewall
	err := ctx.RegisterResource("alicloud:cloudfirewall/natFirewall:NatFirewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatFirewall gets an existing NatFirewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatFirewallState, opts ...pulumi.ResourceOption) (*NatFirewall, error) {
	var resource NatFirewall
	err := ctx.ReadResource("alicloud:cloudfirewall/natFirewall:NatFirewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatFirewall resources.
type natFirewallState struct {
	// Safety protection switch. Value:-**open**: open-**close**: close.
	FirewallSwitch *string `pulumi:"firewallSwitch"`
	// Lang.
	Lang *string `pulumi:"lang"`
	// NAT gateway ID.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
	NatRouteEntryLists []NatFirewallNatRouteEntryList `pulumi:"natRouteEntryLists"`
	// NAT firewall name.
	ProxyName *string `pulumi:"proxyName"`
	// Region.
	RegionNo *string `pulumi:"regionNo"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
	StrictMode *int `pulumi:"strictMode"`
	// The ID of the VPC instance.
	VpcId *string `pulumi:"vpcId"`
	// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
	VswitchAuto *string `pulumi:"vswitchAuto"`
	// The network segment of the virtual switch. Required for Switch automatic mode.
	VswitchCidr *string `pulumi:"vswitchCidr"`
	// The switch ID. Required for switch manual mode.
	VswitchId *string `pulumi:"vswitchId"`
}

type NatFirewallState struct {
	// Safety protection switch. Value:-**open**: open-**close**: close.
	FirewallSwitch pulumi.StringPtrInput
	// Lang.
	Lang pulumi.StringPtrInput
	// NAT gateway ID.
	NatGatewayId pulumi.StringPtrInput
	// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
	NatRouteEntryLists NatFirewallNatRouteEntryListArrayInput
	// NAT firewall name.
	ProxyName pulumi.StringPtrInput
	// Region.
	RegionNo pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
	StrictMode pulumi.IntPtrInput
	// The ID of the VPC instance.
	VpcId pulumi.StringPtrInput
	// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
	VswitchAuto pulumi.StringPtrInput
	// The network segment of the virtual switch. Required for Switch automatic mode.
	VswitchCidr pulumi.StringPtrInput
	// The switch ID. Required for switch manual mode.
	VswitchId pulumi.StringPtrInput
}

func (NatFirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*natFirewallState)(nil)).Elem()
}

type natFirewallArgs struct {
	// Safety protection switch. Value:-**open**: open-**close**: close.
	FirewallSwitch *string `pulumi:"firewallSwitch"`
	// Lang.
	Lang *string `pulumi:"lang"`
	// NAT gateway ID.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
	NatRouteEntryLists []NatFirewallNatRouteEntryList `pulumi:"natRouteEntryLists"`
	// NAT firewall name.
	ProxyName string `pulumi:"proxyName"`
	// Region.
	RegionNo string `pulumi:"regionNo"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
	StrictMode *int `pulumi:"strictMode"`
	// The ID of the VPC instance.
	VpcId string `pulumi:"vpcId"`
	// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
	VswitchAuto *string `pulumi:"vswitchAuto"`
	// The network segment of the virtual switch. Required for Switch automatic mode.
	VswitchCidr *string `pulumi:"vswitchCidr"`
	// The switch ID. Required for switch manual mode.
	VswitchId *string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a NatFirewall resource.
type NatFirewallArgs struct {
	// Safety protection switch. Value:-**open**: open-**close**: close.
	FirewallSwitch pulumi.StringPtrInput
	// Lang.
	Lang pulumi.StringPtrInput
	// NAT gateway ID.
	NatGatewayId pulumi.StringInput
	// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
	NatRouteEntryLists NatFirewallNatRouteEntryListArrayInput
	// NAT firewall name.
	ProxyName pulumi.StringInput
	// Region.
	RegionNo pulumi.StringInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
	StrictMode pulumi.IntPtrInput
	// The ID of the VPC instance.
	VpcId pulumi.StringInput
	// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
	VswitchAuto pulumi.StringPtrInput
	// The network segment of the virtual switch. Required for Switch automatic mode.
	VswitchCidr pulumi.StringPtrInput
	// The switch ID. Required for switch manual mode.
	VswitchId pulumi.StringPtrInput
}

func (NatFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natFirewallArgs)(nil)).Elem()
}

type NatFirewallInput interface {
	pulumi.Input

	ToNatFirewallOutput() NatFirewallOutput
	ToNatFirewallOutputWithContext(ctx context.Context) NatFirewallOutput
}

func (*NatFirewall) ElementType() reflect.Type {
	return reflect.TypeOf((**NatFirewall)(nil)).Elem()
}

func (i *NatFirewall) ToNatFirewallOutput() NatFirewallOutput {
	return i.ToNatFirewallOutputWithContext(context.Background())
}

func (i *NatFirewall) ToNatFirewallOutputWithContext(ctx context.Context) NatFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatFirewallOutput)
}

// NatFirewallArrayInput is an input type that accepts NatFirewallArray and NatFirewallArrayOutput values.
// You can construct a concrete instance of `NatFirewallArrayInput` via:
//
//	NatFirewallArray{ NatFirewallArgs{...} }
type NatFirewallArrayInput interface {
	pulumi.Input

	ToNatFirewallArrayOutput() NatFirewallArrayOutput
	ToNatFirewallArrayOutputWithContext(context.Context) NatFirewallArrayOutput
}

type NatFirewallArray []NatFirewallInput

func (NatFirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatFirewall)(nil)).Elem()
}

func (i NatFirewallArray) ToNatFirewallArrayOutput() NatFirewallArrayOutput {
	return i.ToNatFirewallArrayOutputWithContext(context.Background())
}

func (i NatFirewallArray) ToNatFirewallArrayOutputWithContext(ctx context.Context) NatFirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatFirewallArrayOutput)
}

// NatFirewallMapInput is an input type that accepts NatFirewallMap and NatFirewallMapOutput values.
// You can construct a concrete instance of `NatFirewallMapInput` via:
//
//	NatFirewallMap{ "key": NatFirewallArgs{...} }
type NatFirewallMapInput interface {
	pulumi.Input

	ToNatFirewallMapOutput() NatFirewallMapOutput
	ToNatFirewallMapOutputWithContext(context.Context) NatFirewallMapOutput
}

type NatFirewallMap map[string]NatFirewallInput

func (NatFirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatFirewall)(nil)).Elem()
}

func (i NatFirewallMap) ToNatFirewallMapOutput() NatFirewallMapOutput {
	return i.ToNatFirewallMapOutputWithContext(context.Background())
}

func (i NatFirewallMap) ToNatFirewallMapOutputWithContext(ctx context.Context) NatFirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatFirewallMapOutput)
}

type NatFirewallOutput struct{ *pulumi.OutputState }

func (NatFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatFirewall)(nil)).Elem()
}

func (o NatFirewallOutput) ToNatFirewallOutput() NatFirewallOutput {
	return o
}

func (o NatFirewallOutput) ToNatFirewallOutputWithContext(ctx context.Context) NatFirewallOutput {
	return o
}

// Safety protection switch. Value:-**open**: open-**close**: close.
func (o NatFirewallOutput) FirewallSwitch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringPtrOutput { return v.FirewallSwitch }).(pulumi.StringPtrOutput)
}

// Lang.
func (o NatFirewallOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringPtrOutput { return v.Lang }).(pulumi.StringPtrOutput)
}

// NAT gateway ID.
func (o NatFirewallOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The list of routes to be switched by the NAT gateway. See `natRouteEntryList` below.
func (o NatFirewallOutput) NatRouteEntryLists() NatFirewallNatRouteEntryListArrayOutput {
	return o.ApplyT(func(v *NatFirewall) NatFirewallNatRouteEntryListArrayOutput { return v.NatRouteEntryLists }).(NatFirewallNatRouteEntryListArrayOutput)
}

// NAT firewall name.
func (o NatFirewallOutput) ProxyName() pulumi.StringOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringOutput { return v.ProxyName }).(pulumi.StringOutput)
}

// Region.
func (o NatFirewallOutput) RegionNo() pulumi.StringOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringOutput { return v.RegionNo }).(pulumi.StringOutput)
}

// The status of the resource.
func (o NatFirewallOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Whether strict mode is enabled 1-Enable strict mode 0-Disable strict mode.
func (o NatFirewallOutput) StrictMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.IntPtrOutput { return v.StrictMode }).(pulumi.IntPtrOutput)
}

// The ID of the VPC instance.
func (o NatFirewallOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Whether to use switch automatic mode. Value: **true**: Use automatic mode: **false**: Use manual mode.
func (o NatFirewallOutput) VswitchAuto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringPtrOutput { return v.VswitchAuto }).(pulumi.StringPtrOutput)
}

// The network segment of the virtual switch. Required for Switch automatic mode.
func (o NatFirewallOutput) VswitchCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringPtrOutput { return v.VswitchCidr }).(pulumi.StringPtrOutput)
}

// The switch ID. Required for switch manual mode.
func (o NatFirewallOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatFirewall) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

type NatFirewallArrayOutput struct{ *pulumi.OutputState }

func (NatFirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatFirewall)(nil)).Elem()
}

func (o NatFirewallArrayOutput) ToNatFirewallArrayOutput() NatFirewallArrayOutput {
	return o
}

func (o NatFirewallArrayOutput) ToNatFirewallArrayOutputWithContext(ctx context.Context) NatFirewallArrayOutput {
	return o
}

func (o NatFirewallArrayOutput) Index(i pulumi.IntInput) NatFirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatFirewall {
		return vs[0].([]*NatFirewall)[vs[1].(int)]
	}).(NatFirewallOutput)
}

type NatFirewallMapOutput struct{ *pulumi.OutputState }

func (NatFirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatFirewall)(nil)).Elem()
}

func (o NatFirewallMapOutput) ToNatFirewallMapOutput() NatFirewallMapOutput {
	return o
}

func (o NatFirewallMapOutput) ToNatFirewallMapOutputWithContext(ctx context.Context) NatFirewallMapOutput {
	return o
}

func (o NatFirewallMapOutput) MapIndex(k pulumi.StringInput) NatFirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatFirewall {
		return vs[0].(map[string]*NatFirewall)[vs[1].(string)]
	}).(NatFirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatFirewallInput)(nil)).Elem(), &NatFirewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatFirewallArrayInput)(nil)).Elem(), NatFirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatFirewallMapInput)(nil)).Elem(), NatFirewallMap{})
	pulumi.RegisterOutputType(NatFirewallOutput{})
	pulumi.RegisterOutputType(NatFirewallArrayOutput{})
	pulumi.RegisterOutputType(NatFirewallMapOutput{})
}
