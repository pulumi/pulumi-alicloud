// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA List resource.
//
// For information about ESA List and how to use it, see [What is List](https://www.alibabacloud.com/help/en/edge-security-acceleration/esa/user-guide/grouping).
//
// > **NOTE:** Available since v1.242.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := esa.NewList(ctx, "default", &esa.ListArgs{
//				Description: pulumi.String("resource example ip list"),
//				Kind:        pulumi.String("ip"),
//				Items: pulumi.StringArray{
//					pulumi.String("10.1.1.1"),
//					pulumi.String("10.1.1.2"),
//					pulumi.String("10.1.1.3"),
//				},
//				Name: pulumi.String("resource_example_ip_list"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA List can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/list:List example <id>
// ```
type List struct {
	pulumi.CustomResourceState

	// The new description of the list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The items in the updated list. The value is a JSON array.
	Items pulumi.StringArrayOutput `pulumi:"items"`
	// The type of the list that you want to create.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The new name of the list.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewList registers a new resource with the given unique name, arguments, and options.
func NewList(ctx *pulumi.Context,
	name string, args *ListArgs, opts ...pulumi.ResourceOption) (*List, error) {
	if args == nil {
		args = &ListArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource List
	err := ctx.RegisterResource("alicloud:esa/list:List", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetList gets an existing List resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListState, opts ...pulumi.ResourceOption) (*List, error) {
	var resource List
	err := ctx.ReadResource("alicloud:esa/list:List", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering List resources.
type listState struct {
	// The new description of the list.
	Description *string `pulumi:"description"`
	// The items in the updated list. The value is a JSON array.
	Items []string `pulumi:"items"`
	// The type of the list that you want to create.
	Kind *string `pulumi:"kind"`
	// The new name of the list.
	Name *string `pulumi:"name"`
}

type ListState struct {
	// The new description of the list.
	Description pulumi.StringPtrInput
	// The items in the updated list. The value is a JSON array.
	Items pulumi.StringArrayInput
	// The type of the list that you want to create.
	Kind pulumi.StringPtrInput
	// The new name of the list.
	Name pulumi.StringPtrInput
}

func (ListState) ElementType() reflect.Type {
	return reflect.TypeOf((*listState)(nil)).Elem()
}

type listArgs struct {
	// The new description of the list.
	Description *string `pulumi:"description"`
	// The items in the updated list. The value is a JSON array.
	Items []string `pulumi:"items"`
	// The type of the list that you want to create.
	Kind *string `pulumi:"kind"`
	// The new name of the list.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a List resource.
type ListArgs struct {
	// The new description of the list.
	Description pulumi.StringPtrInput
	// The items in the updated list. The value is a JSON array.
	Items pulumi.StringArrayInput
	// The type of the list that you want to create.
	Kind pulumi.StringPtrInput
	// The new name of the list.
	Name pulumi.StringPtrInput
}

func (ListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listArgs)(nil)).Elem()
}

type ListInput interface {
	pulumi.Input

	ToListOutput() ListOutput
	ToListOutputWithContext(ctx context.Context) ListOutput
}

func (*List) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil)).Elem()
}

func (i *List) ToListOutput() ListOutput {
	return i.ToListOutputWithContext(context.Background())
}

func (i *List) ToListOutputWithContext(ctx context.Context) ListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListOutput)
}

// ListArrayInput is an input type that accepts ListArray and ListArrayOutput values.
// You can construct a concrete instance of `ListArrayInput` via:
//
//	ListArray{ ListArgs{...} }
type ListArrayInput interface {
	pulumi.Input

	ToListArrayOutput() ListArrayOutput
	ToListArrayOutputWithContext(context.Context) ListArrayOutput
}

type ListArray []ListInput

func (ListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*List)(nil)).Elem()
}

func (i ListArray) ToListArrayOutput() ListArrayOutput {
	return i.ToListArrayOutputWithContext(context.Background())
}

func (i ListArray) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListArrayOutput)
}

// ListMapInput is an input type that accepts ListMap and ListMapOutput values.
// You can construct a concrete instance of `ListMapInput` via:
//
//	ListMap{ "key": ListArgs{...} }
type ListMapInput interface {
	pulumi.Input

	ToListMapOutput() ListMapOutput
	ToListMapOutputWithContext(context.Context) ListMapOutput
}

type ListMap map[string]ListInput

func (ListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*List)(nil)).Elem()
}

func (i ListMap) ToListMapOutput() ListMapOutput {
	return i.ToListMapOutputWithContext(context.Background())
}

func (i ListMap) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMapOutput)
}

type ListOutput struct{ *pulumi.OutputState }

func (ListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil)).Elem()
}

func (o ListOutput) ToListOutput() ListOutput {
	return o
}

func (o ListOutput) ToListOutputWithContext(ctx context.Context) ListOutput {
	return o
}

// The new description of the list.
func (o ListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *List) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The items in the updated list. The value is a JSON array.
func (o ListOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *List) pulumi.StringArrayOutput { return v.Items }).(pulumi.StringArrayOutput)
}

// The type of the list that you want to create.
func (o ListOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *List) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The new name of the list.
func (o ListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *List) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ListArrayOutput struct{ *pulumi.OutputState }

func (ListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*List)(nil)).Elem()
}

func (o ListArrayOutput) ToListArrayOutput() ListArrayOutput {
	return o
}

func (o ListArrayOutput) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return o
}

func (o ListArrayOutput) Index(i pulumi.IntInput) ListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *List {
		return vs[0].([]*List)[vs[1].(int)]
	}).(ListOutput)
}

type ListMapOutput struct{ *pulumi.OutputState }

func (ListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*List)(nil)).Elem()
}

func (o ListMapOutput) ToListMapOutput() ListMapOutput {
	return o
}

func (o ListMapOutput) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return o
}

func (o ListMapOutput) MapIndex(k pulumi.StringInput) ListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *List {
		return vs[0].(map[string]*List)[vs[1].(string)]
	}).(ListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListInput)(nil)).Elem(), &List{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListArrayInput)(nil)).Elem(), ListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMapInput)(nil)).Elem(), ListMap{})
	pulumi.RegisterOutputType(ListOutput{})
	pulumi.RegisterOutputType(ListArrayOutput{})
	pulumi.RegisterOutputType(ListMapOutput{})
}
