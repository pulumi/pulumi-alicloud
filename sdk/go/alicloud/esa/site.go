// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Site resource.
//
// For information about ESA Site and how to use it, see [What is Site](https://www.alibabacloud.com/help/en/edge-security-acceleration/esa/user-guide/site-management).
//
// > **NOTE:** Available since v1.234.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			defaultIEoDfU, err := esa.NewRatePlanInstance(ctx, "defaultIEoDfU", &esa.RatePlanInstanceArgs{
//				Type:        pulumi.String("NS"),
//				AutoRenew:   pulumi.Bool(true),
//				Period:      pulumi.Int(1),
//				PaymentType: pulumi.String("Subscription"),
//				Coverage:    pulumi.String("overseas"),
//				AutoPay:     pulumi.Bool(true),
//				PlanName:    pulumi.String("basic"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:        pulumi.Sprintf("bcd%v.com", defaultInteger.Result),
//				Coverage:        pulumi.String("overseas"),
//				AccessType:      pulumi.String("NS"),
//				InstanceId:      defaultIEoDfU.ID(),
//				ResourceGroupId: pulumi.String(_default.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Site can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/site:Site example <id>
// ```
type Site struct {
	pulumi.CustomResourceState

	// The DNS setup. Valid values:
	// - `NS`
	// - `CNAME`
	AccessType pulumi.StringPtrOutput `pulumi:"accessType"`
	// Add visitor geolocation header. Value range:
	AddClientGeolocationHeader pulumi.StringPtrOutput `pulumi:"addClientGeolocationHeader"`
	// Add the "ali-real-client-ip" header containing the real client IP. Value range:
	AddRealClientIpHeader pulumi.StringPtrOutput `pulumi:"addRealClientIpHeader"`
	// Multi-level cache architecture mode. Possible values:
	CacheArchitectureMode pulumi.StringOutput `pulumi:"cacheArchitectureMode"`
	// The service location. Valid values:
	Coverage pulumi.StringPtrOutput `pulumi:"coverage"`
	// The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the associated package instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether to enable IPv6. Valid values:
	Ipv6Enable pulumi.StringOutput `pulumi:"ipv6Enable"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The website name.
	SiteName pulumi.StringOutput `pulumi:"siteName"`
	// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
	SiteVersion pulumi.IntPtrOutput `pulumi:"siteVersion"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewSite registers a new resource with the given unique name, arguments, and options.
func NewSite(ctx *pulumi.Context,
	name string, args *SiteArgs, opts ...pulumi.ResourceOption) (*Site, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.SiteName == nil {
		return nil, errors.New("invalid value for required argument 'SiteName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Site
	err := ctx.RegisterResource("alicloud:esa/site:Site", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSite gets an existing Site resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteState, opts ...pulumi.ResourceOption) (*Site, error) {
	var resource Site
	err := ctx.ReadResource("alicloud:esa/site:Site", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Site resources.
type siteState struct {
	// The DNS setup. Valid values:
	// - `NS`
	// - `CNAME`
	AccessType *string `pulumi:"accessType"`
	// Add visitor geolocation header. Value range:
	AddClientGeolocationHeader *string `pulumi:"addClientGeolocationHeader"`
	// Add the "ali-real-client-ip" header containing the real client IP. Value range:
	AddRealClientIpHeader *string `pulumi:"addRealClientIpHeader"`
	// Multi-level cache architecture mode. Possible values:
	CacheArchitectureMode *string `pulumi:"cacheArchitectureMode"`
	// The service location. Valid values:
	Coverage *string `pulumi:"coverage"`
	// The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the associated package instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to enable IPv6. Valid values:
	Ipv6Enable *string `pulumi:"ipv6Enable"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The website name.
	SiteName *string `pulumi:"siteName"`
	// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// The status of the resource
	Status *string `pulumi:"status"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

type SiteState struct {
	// The DNS setup. Valid values:
	// - `NS`
	// - `CNAME`
	AccessType pulumi.StringPtrInput
	// Add visitor geolocation header. Value range:
	AddClientGeolocationHeader pulumi.StringPtrInput
	// Add the "ali-real-client-ip" header containing the real client IP. Value range:
	AddRealClientIpHeader pulumi.StringPtrInput
	// Multi-level cache architecture mode. Possible values:
	CacheArchitectureMode pulumi.StringPtrInput
	// The service location. Valid values:
	Coverage pulumi.StringPtrInput
	// The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	CreateTime pulumi.StringPtrInput
	// The ID of the associated package instance.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to enable IPv6. Valid values:
	Ipv6Enable pulumi.StringPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The website name.
	SiteName pulumi.StringPtrInput
	// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
	SiteVersion pulumi.IntPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (SiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteState)(nil)).Elem()
}

type siteArgs struct {
	// The DNS setup. Valid values:
	// - `NS`
	// - `CNAME`
	AccessType *string `pulumi:"accessType"`
	// Add visitor geolocation header. Value range:
	AddClientGeolocationHeader *string `pulumi:"addClientGeolocationHeader"`
	// Add the "ali-real-client-ip" header containing the real client IP. Value range:
	AddRealClientIpHeader *string `pulumi:"addRealClientIpHeader"`
	// Multi-level cache architecture mode. Possible values:
	CacheArchitectureMode *string `pulumi:"cacheArchitectureMode"`
	// The service location. Valid values:
	Coverage *string `pulumi:"coverage"`
	// The ID of the associated package instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether to enable IPv6. Valid values:
	Ipv6Enable *string `pulumi:"ipv6Enable"`
	// The ID of the resource group
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The website name.
	SiteName string `pulumi:"siteName"`
	// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Site resource.
type SiteArgs struct {
	// The DNS setup. Valid values:
	// - `NS`
	// - `CNAME`
	AccessType pulumi.StringPtrInput
	// Add visitor geolocation header. Value range:
	AddClientGeolocationHeader pulumi.StringPtrInput
	// Add the "ali-real-client-ip" header containing the real client IP. Value range:
	AddRealClientIpHeader pulumi.StringPtrInput
	// Multi-level cache architecture mode. Possible values:
	CacheArchitectureMode pulumi.StringPtrInput
	// The service location. Valid values:
	Coverage pulumi.StringPtrInput
	// The ID of the associated package instance.
	InstanceId pulumi.StringInput
	// Specifies whether to enable IPv6. Valid values:
	Ipv6Enable pulumi.StringPtrInput
	// The ID of the resource group
	ResourceGroupId pulumi.StringPtrInput
	// The website name.
	SiteName pulumi.StringInput
	// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
	SiteVersion pulumi.IntPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (SiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteArgs)(nil)).Elem()
}

type SiteInput interface {
	pulumi.Input

	ToSiteOutput() SiteOutput
	ToSiteOutputWithContext(ctx context.Context) SiteOutput
}

func (*Site) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (i *Site) ToSiteOutput() SiteOutput {
	return i.ToSiteOutputWithContext(context.Background())
}

func (i *Site) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteOutput)
}

// SiteArrayInput is an input type that accepts SiteArray and SiteArrayOutput values.
// You can construct a concrete instance of `SiteArrayInput` via:
//
//	SiteArray{ SiteArgs{...} }
type SiteArrayInput interface {
	pulumi.Input

	ToSiteArrayOutput() SiteArrayOutput
	ToSiteArrayOutputWithContext(context.Context) SiteArrayOutput
}

type SiteArray []SiteInput

func (SiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (i SiteArray) ToSiteArrayOutput() SiteArrayOutput {
	return i.ToSiteArrayOutputWithContext(context.Background())
}

func (i SiteArray) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteArrayOutput)
}

// SiteMapInput is an input type that accepts SiteMap and SiteMapOutput values.
// You can construct a concrete instance of `SiteMapInput` via:
//
//	SiteMap{ "key": SiteArgs{...} }
type SiteMapInput interface {
	pulumi.Input

	ToSiteMapOutput() SiteMapOutput
	ToSiteMapOutputWithContext(context.Context) SiteMapOutput
}

type SiteMap map[string]SiteInput

func (SiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (i SiteMap) ToSiteMapOutput() SiteMapOutput {
	return i.ToSiteMapOutputWithContext(context.Background())
}

func (i SiteMap) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteMapOutput)
}

type SiteOutput struct{ *pulumi.OutputState }

func (SiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (o SiteOutput) ToSiteOutput() SiteOutput {
	return o
}

func (o SiteOutput) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return o
}

// The DNS setup. Valid values:
// - `NS`
// - `CNAME`
func (o SiteOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.AccessType }).(pulumi.StringPtrOutput)
}

// Add visitor geolocation header. Value range:
func (o SiteOutput) AddClientGeolocationHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.AddClientGeolocationHeader }).(pulumi.StringPtrOutput)
}

// Add the "ali-real-client-ip" header containing the real client IP. Value range:
func (o SiteOutput) AddRealClientIpHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.AddRealClientIpHeader }).(pulumi.StringPtrOutput)
}

// Multi-level cache architecture mode. Possible values:
func (o SiteOutput) CacheArchitectureMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.CacheArchitectureMode }).(pulumi.StringOutput)
}

// The service location. Valid values:
func (o SiteOutput) Coverage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Coverage }).(pulumi.StringPtrOutput)
}

// The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
func (o SiteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the associated package instance.
func (o SiteOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether to enable IPv6. Valid values:
func (o SiteOutput) Ipv6Enable() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Ipv6Enable }).(pulumi.StringOutput)
}

// The ID of the resource group
func (o SiteOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The website name.
func (o SiteOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.SiteName }).(pulumi.StringOutput)
}

// The version number of the site. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration will take effect, defaulting to version 0.
func (o SiteOutput) SiteVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.IntPtrOutput { return v.SiteVersion }).(pulumi.IntPtrOutput)
}

// The status of the resource
func (o SiteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Resource tags
func (o SiteOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Site) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type SiteArrayOutput struct{ *pulumi.OutputState }

func (SiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (o SiteArrayOutput) ToSiteArrayOutput() SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) Index(i pulumi.IntInput) SiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Site {
		return vs[0].([]*Site)[vs[1].(int)]
	}).(SiteOutput)
}

type SiteMapOutput struct{ *pulumi.OutputState }

func (SiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (o SiteMapOutput) ToSiteMapOutput() SiteMapOutput {
	return o
}

func (o SiteMapOutput) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return o
}

func (o SiteMapOutput) MapIndex(k pulumi.StringInput) SiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Site {
		return vs[0].(map[string]*Site)[vs[1].(string)]
	}).(SiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SiteInput)(nil)).Elem(), &Site{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteArrayInput)(nil)).Elem(), SiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteMapInput)(nil)).Elem(), SiteMap{})
	pulumi.RegisterOutputType(SiteOutput{})
	pulumi.RegisterOutputType(SiteArrayOutput{})
	pulumi.RegisterOutputType(SiteMapOutput{})
}
