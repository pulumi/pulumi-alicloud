// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Client Ca Certificate resource.
//
// For information about ESA Client Ca Certificate and how to use it, see [What is Client Ca Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/UploadClientCaCertificate).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//				SiteName:          pulumi.StringRef("gositecdn.cn"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewClientCaCertificate(ctx, "default", &esa.ClientCaCertificateArgs{
//				Certificate:      pulumi.String("-----BEGIN CERTIFICATE-----\n****-----END CERTIFICATE-----"),
//				ClientCaCertName: pulumi.String("example"),
//				SiteId:           pulumi.Int(_default.Sites[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Client Ca Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/clientCaCertificate:ClientCaCertificate example <site_id>:<client_ca_cert_id>
// ```
type ClientCaCertificate struct {
	pulumi.CustomResourceState

	// Certificate content.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// ClientCaCertificate Id
	ClientCaCertId pulumi.StringOutput `pulumi:"clientCaCertId"`
	// The certificate name.
	ClientCaCertName pulumi.StringPtrOutput `pulumi:"clientCaCertName"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Site Id
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// Certificate status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewClientCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewClientCaCertificate(ctx *pulumi.Context,
	name string, args *ClientCaCertificateArgs, opts ...pulumi.ResourceOption) (*ClientCaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientCaCertificate
	err := ctx.RegisterResource("alicloud:esa/clientCaCertificate:ClientCaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientCaCertificate gets an existing ClientCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientCaCertificateState, opts ...pulumi.ResourceOption) (*ClientCaCertificate, error) {
	var resource ClientCaCertificate
	err := ctx.ReadResource("alicloud:esa/clientCaCertificate:ClientCaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientCaCertificate resources.
type clientCaCertificateState struct {
	// Certificate content.
	Certificate *string `pulumi:"certificate"`
	// ClientCaCertificate Id
	ClientCaCertId *string `pulumi:"clientCaCertId"`
	// The certificate name.
	ClientCaCertName *string `pulumi:"clientCaCertName"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// Site Id
	SiteId *int `pulumi:"siteId"`
	// Certificate status.
	Status *string `pulumi:"status"`
}

type ClientCaCertificateState struct {
	// Certificate content.
	Certificate pulumi.StringPtrInput
	// ClientCaCertificate Id
	ClientCaCertId pulumi.StringPtrInput
	// The certificate name.
	ClientCaCertName pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntPtrInput
	// Certificate status.
	Status pulumi.StringPtrInput
}

func (ClientCaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCaCertificateState)(nil)).Elem()
}

type clientCaCertificateArgs struct {
	// Certificate content.
	Certificate string `pulumi:"certificate"`
	// The certificate name.
	ClientCaCertName *string `pulumi:"clientCaCertName"`
	// Site Id
	SiteId int `pulumi:"siteId"`
}

// The set of arguments for constructing a ClientCaCertificate resource.
type ClientCaCertificateArgs struct {
	// Certificate content.
	Certificate pulumi.StringInput
	// The certificate name.
	ClientCaCertName pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntInput
}

func (ClientCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCaCertificateArgs)(nil)).Elem()
}

type ClientCaCertificateInput interface {
	pulumi.Input

	ToClientCaCertificateOutput() ClientCaCertificateOutput
	ToClientCaCertificateOutputWithContext(ctx context.Context) ClientCaCertificateOutput
}

func (*ClientCaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCaCertificate)(nil)).Elem()
}

func (i *ClientCaCertificate) ToClientCaCertificateOutput() ClientCaCertificateOutput {
	return i.ToClientCaCertificateOutputWithContext(context.Background())
}

func (i *ClientCaCertificate) ToClientCaCertificateOutputWithContext(ctx context.Context) ClientCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCaCertificateOutput)
}

// ClientCaCertificateArrayInput is an input type that accepts ClientCaCertificateArray and ClientCaCertificateArrayOutput values.
// You can construct a concrete instance of `ClientCaCertificateArrayInput` via:
//
//	ClientCaCertificateArray{ ClientCaCertificateArgs{...} }
type ClientCaCertificateArrayInput interface {
	pulumi.Input

	ToClientCaCertificateArrayOutput() ClientCaCertificateArrayOutput
	ToClientCaCertificateArrayOutputWithContext(context.Context) ClientCaCertificateArrayOutput
}

type ClientCaCertificateArray []ClientCaCertificateInput

func (ClientCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCaCertificate)(nil)).Elem()
}

func (i ClientCaCertificateArray) ToClientCaCertificateArrayOutput() ClientCaCertificateArrayOutput {
	return i.ToClientCaCertificateArrayOutputWithContext(context.Background())
}

func (i ClientCaCertificateArray) ToClientCaCertificateArrayOutputWithContext(ctx context.Context) ClientCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCaCertificateArrayOutput)
}

// ClientCaCertificateMapInput is an input type that accepts ClientCaCertificateMap and ClientCaCertificateMapOutput values.
// You can construct a concrete instance of `ClientCaCertificateMapInput` via:
//
//	ClientCaCertificateMap{ "key": ClientCaCertificateArgs{...} }
type ClientCaCertificateMapInput interface {
	pulumi.Input

	ToClientCaCertificateMapOutput() ClientCaCertificateMapOutput
	ToClientCaCertificateMapOutputWithContext(context.Context) ClientCaCertificateMapOutput
}

type ClientCaCertificateMap map[string]ClientCaCertificateInput

func (ClientCaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCaCertificate)(nil)).Elem()
}

func (i ClientCaCertificateMap) ToClientCaCertificateMapOutput() ClientCaCertificateMapOutput {
	return i.ToClientCaCertificateMapOutputWithContext(context.Background())
}

func (i ClientCaCertificateMap) ToClientCaCertificateMapOutputWithContext(ctx context.Context) ClientCaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCaCertificateMapOutput)
}

type ClientCaCertificateOutput struct{ *pulumi.OutputState }

func (ClientCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCaCertificate)(nil)).Elem()
}

func (o ClientCaCertificateOutput) ToClientCaCertificateOutput() ClientCaCertificateOutput {
	return o
}

func (o ClientCaCertificateOutput) ToClientCaCertificateOutputWithContext(ctx context.Context) ClientCaCertificateOutput {
	return o
}

// Certificate content.
func (o ClientCaCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// ClientCaCertificate Id
func (o ClientCaCertificateOutput) ClientCaCertId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.StringOutput { return v.ClientCaCertId }).(pulumi.StringOutput)
}

// The certificate name.
func (o ClientCaCertificateOutput) ClientCaCertName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.StringPtrOutput { return v.ClientCaCertName }).(pulumi.StringPtrOutput)
}

// Creation time.
func (o ClientCaCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Site Id
func (o ClientCaCertificateOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Certificate status.
func (o ClientCaCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCaCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ClientCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (ClientCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCaCertificate)(nil)).Elem()
}

func (o ClientCaCertificateArrayOutput) ToClientCaCertificateArrayOutput() ClientCaCertificateArrayOutput {
	return o
}

func (o ClientCaCertificateArrayOutput) ToClientCaCertificateArrayOutputWithContext(ctx context.Context) ClientCaCertificateArrayOutput {
	return o
}

func (o ClientCaCertificateArrayOutput) Index(i pulumi.IntInput) ClientCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientCaCertificate {
		return vs[0].([]*ClientCaCertificate)[vs[1].(int)]
	}).(ClientCaCertificateOutput)
}

type ClientCaCertificateMapOutput struct{ *pulumi.OutputState }

func (ClientCaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCaCertificate)(nil)).Elem()
}

func (o ClientCaCertificateMapOutput) ToClientCaCertificateMapOutput() ClientCaCertificateMapOutput {
	return o
}

func (o ClientCaCertificateMapOutput) ToClientCaCertificateMapOutputWithContext(ctx context.Context) ClientCaCertificateMapOutput {
	return o
}

func (o ClientCaCertificateMapOutput) MapIndex(k pulumi.StringInput) ClientCaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientCaCertificate {
		return vs[0].(map[string]*ClientCaCertificate)[vs[1].(string)]
	}).(ClientCaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCaCertificateInput)(nil)).Elem(), &ClientCaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCaCertificateArrayInput)(nil)).Elem(), ClientCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCaCertificateMapInput)(nil)).Elem(), ClientCaCertificateMap{})
	pulumi.RegisterOutputType(ClientCaCertificateOutput{})
	pulumi.RegisterOutputType(ClientCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(ClientCaCertificateMapOutput{})
}
