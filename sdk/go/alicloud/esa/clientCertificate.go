// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Client Certificate resource.
//
// For information about ESA Client Certificate and how to use it, see [What is Client Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateClientCertificate).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//				SiteName:          pulumi.StringRef("gositecdn.cn"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewClientCertificate(ctx, "default", &esa.ClientCertificateArgs{
//				SiteId:       pulumi.Int(_default.Sites[0].Id),
//				PkeyType:     pulumi.String("RSA"),
//				ValidityDays: pulumi.String("365"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Client Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/clientCertificate:ClientCertificate example <site_id>:<client_cert_id>
// ```
type ClientCertificate struct {
	pulumi.CustomResourceState

	// ClientCertificate Id
	ClientCertId pulumi.StringOutput `pulumi:"clientCertId"`
	// The time when the certificate was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Certificate signing request content.
	Csr pulumi.StringPtrOutput `pulumi:"csr"`
	// The private key algorithm type.
	PkeyType pulumi.StringPtrOutput `pulumi:"pkeyType"`
	// Site Id
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The certificate status. Valid values: `revoked`, `active`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Certificate validity period.
	ValidityDays pulumi.StringOutput `pulumi:"validityDays"`
}

// NewClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewClientCertificate(ctx *pulumi.Context,
	name string, args *ClientCertificateArgs, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.ValidityDays == nil {
		return nil, errors.New("invalid value for required argument 'ValidityDays'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientCertificate
	err := ctx.RegisterResource("alicloud:esa/clientCertificate:ClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientCertificate gets an existing ClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientCertificateState, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	var resource ClientCertificate
	err := ctx.ReadResource("alicloud:esa/clientCertificate:ClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientCertificate resources.
type clientCertificateState struct {
	// ClientCertificate Id
	ClientCertId *string `pulumi:"clientCertId"`
	// The time when the certificate was created.
	CreateTime *string `pulumi:"createTime"`
	// Certificate signing request content.
	Csr *string `pulumi:"csr"`
	// The private key algorithm type.
	PkeyType *string `pulumi:"pkeyType"`
	// Site Id
	SiteId *int `pulumi:"siteId"`
	// The certificate status. Valid values: `revoked`, `active`.
	Status *string `pulumi:"status"`
	// Certificate validity period.
	ValidityDays *string `pulumi:"validityDays"`
}

type ClientCertificateState struct {
	// ClientCertificate Id
	ClientCertId pulumi.StringPtrInput
	// The time when the certificate was created.
	CreateTime pulumi.StringPtrInput
	// Certificate signing request content.
	Csr pulumi.StringPtrInput
	// The private key algorithm type.
	PkeyType pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntPtrInput
	// The certificate status. Valid values: `revoked`, `active`.
	Status pulumi.StringPtrInput
	// Certificate validity period.
	ValidityDays pulumi.StringPtrInput
}

func (ClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateState)(nil)).Elem()
}

type clientCertificateArgs struct {
	// Certificate signing request content.
	Csr *string `pulumi:"csr"`
	// The private key algorithm type.
	PkeyType *string `pulumi:"pkeyType"`
	// Site Id
	SiteId int `pulumi:"siteId"`
	// The certificate status. Valid values: `revoked`, `active`.
	Status *string `pulumi:"status"`
	// Certificate validity period.
	ValidityDays string `pulumi:"validityDays"`
}

// The set of arguments for constructing a ClientCertificate resource.
type ClientCertificateArgs struct {
	// Certificate signing request content.
	Csr pulumi.StringPtrInput
	// The private key algorithm type.
	PkeyType pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntInput
	// The certificate status. Valid values: `revoked`, `active`.
	Status pulumi.StringPtrInput
	// Certificate validity period.
	ValidityDays pulumi.StringInput
}

func (ClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateArgs)(nil)).Elem()
}

type ClientCertificateInput interface {
	pulumi.Input

	ToClientCertificateOutput() ClientCertificateOutput
	ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput
}

func (*ClientCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificate)(nil)).Elem()
}

func (i *ClientCertificate) ToClientCertificateOutput() ClientCertificateOutput {
	return i.ToClientCertificateOutputWithContext(context.Background())
}

func (i *ClientCertificate) ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateOutput)
}

// ClientCertificateArrayInput is an input type that accepts ClientCertificateArray and ClientCertificateArrayOutput values.
// You can construct a concrete instance of `ClientCertificateArrayInput` via:
//
//	ClientCertificateArray{ ClientCertificateArgs{...} }
type ClientCertificateArrayInput interface {
	pulumi.Input

	ToClientCertificateArrayOutput() ClientCertificateArrayOutput
	ToClientCertificateArrayOutputWithContext(context.Context) ClientCertificateArrayOutput
}

type ClientCertificateArray []ClientCertificateInput

func (ClientCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCertificate)(nil)).Elem()
}

func (i ClientCertificateArray) ToClientCertificateArrayOutput() ClientCertificateArrayOutput {
	return i.ToClientCertificateArrayOutputWithContext(context.Background())
}

func (i ClientCertificateArray) ToClientCertificateArrayOutputWithContext(ctx context.Context) ClientCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateArrayOutput)
}

// ClientCertificateMapInput is an input type that accepts ClientCertificateMap and ClientCertificateMapOutput values.
// You can construct a concrete instance of `ClientCertificateMapInput` via:
//
//	ClientCertificateMap{ "key": ClientCertificateArgs{...} }
type ClientCertificateMapInput interface {
	pulumi.Input

	ToClientCertificateMapOutput() ClientCertificateMapOutput
	ToClientCertificateMapOutputWithContext(context.Context) ClientCertificateMapOutput
}

type ClientCertificateMap map[string]ClientCertificateInput

func (ClientCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCertificate)(nil)).Elem()
}

func (i ClientCertificateMap) ToClientCertificateMapOutput() ClientCertificateMapOutput {
	return i.ToClientCertificateMapOutputWithContext(context.Background())
}

func (i ClientCertificateMap) ToClientCertificateMapOutputWithContext(ctx context.Context) ClientCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateMapOutput)
}

type ClientCertificateOutput struct{ *pulumi.OutputState }

func (ClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateOutput) ToClientCertificateOutput() ClientCertificateOutput {
	return o
}

func (o ClientCertificateOutput) ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput {
	return o
}

// ClientCertificate Id
func (o ClientCertificateOutput) ClientCertId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.ClientCertId }).(pulumi.StringOutput)
}

// The time when the certificate was created.
func (o ClientCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Certificate signing request content.
func (o ClientCertificateOutput) Csr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringPtrOutput { return v.Csr }).(pulumi.StringPtrOutput)
}

// The private key algorithm type.
func (o ClientCertificateOutput) PkeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringPtrOutput { return v.PkeyType }).(pulumi.StringPtrOutput)
}

// Site Id
func (o ClientCertificateOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The certificate status. Valid values: `revoked`, `active`.
func (o ClientCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Certificate validity period.
func (o ClientCertificateOutput) ValidityDays() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.ValidityDays }).(pulumi.StringOutput)
}

type ClientCertificateArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateArrayOutput) ToClientCertificateArrayOutput() ClientCertificateArrayOutput {
	return o
}

func (o ClientCertificateArrayOutput) ToClientCertificateArrayOutputWithContext(ctx context.Context) ClientCertificateArrayOutput {
	return o
}

func (o ClientCertificateArrayOutput) Index(i pulumi.IntInput) ClientCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientCertificate {
		return vs[0].([]*ClientCertificate)[vs[1].(int)]
	}).(ClientCertificateOutput)
}

type ClientCertificateMapOutput struct{ *pulumi.OutputState }

func (ClientCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateMapOutput) ToClientCertificateMapOutput() ClientCertificateMapOutput {
	return o
}

func (o ClientCertificateMapOutput) ToClientCertificateMapOutputWithContext(ctx context.Context) ClientCertificateMapOutput {
	return o
}

func (o ClientCertificateMapOutput) MapIndex(k pulumi.StringInput) ClientCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientCertificate {
		return vs[0].(map[string]*ClientCertificate)[vs[1].(string)]
	}).(ClientCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateInput)(nil)).Elem(), &ClientCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateArrayInput)(nil)).Elem(), ClientCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateMapInput)(nil)).Elem(), ClientCertificateMap{})
	pulumi.RegisterOutputType(ClientCertificateOutput{})
	pulumi.RegisterOutputType(ClientCertificateArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateMapOutput{})
}
