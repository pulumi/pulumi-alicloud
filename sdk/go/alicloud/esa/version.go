// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Site Version resource.
//
// For information about ESA Site Version and how to use it, see [What is Site Version](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CloneVersion).
//
// > **NOTE:** Available since v1.251.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "bcd72239.com"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:          pulumi.String(name),
//				InstanceId:        pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:          pulumi.String("overseas"),
//				AccessType:        pulumi.String("NS"),
//				VersionManagement: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewVersion(ctx, "default", &esa.VersionArgs{
//				SiteId:        defaultSite.ID(),
//				Description:   pulumi.String("example"),
//				OriginVersion: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Site Version can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/version:Version example <site_id>:<site_version>
// ```
type Version struct {
	pulumi.CustomResourceState

	// The creation time. The date format follows ISO8601 notation and uses UTC time. The format is yyyy-MM-ddTHH:mm:ssZ.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The Site version's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	OriginVersion pulumi.IntOutput `pulumi:"originVersion"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The version number of the site configuration.
	SiteVersion pulumi.IntOutput `pulumi:"siteVersion"`
	// Site version status:：`online`.：`configuring`._faild`：`configureFaild`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVersion registers a new resource with the given unique name, arguments, and options.
func NewVersion(ctx *pulumi.Context,
	name string, args *VersionArgs, opts ...pulumi.ResourceOption) (*Version, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OriginVersion == nil {
		return nil, errors.New("invalid value for required argument 'OriginVersion'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Version
	err := ctx.RegisterResource("alicloud:esa/version:Version", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVersion gets an existing Version resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VersionState, opts ...pulumi.ResourceOption) (*Version, error) {
	var resource Version
	err := ctx.ReadResource("alicloud:esa/version:Version", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Version resources.
type versionState struct {
	// The creation time. The date format follows ISO8601 notation and uses UTC time. The format is yyyy-MM-ddTHH:mm:ssZ.
	CreateTime *string `pulumi:"createTime"`
	// The Site version's description.
	Description *string `pulumi:"description"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	OriginVersion *int `pulumi:"originVersion"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId *int `pulumi:"siteId"`
	// The version number of the site configuration.
	SiteVersion *int `pulumi:"siteVersion"`
	// Site version status:：`online`.：`configuring`._faild`：`configureFaild`.
	Status *string `pulumi:"status"`
}

type VersionState struct {
	// The creation time. The date format follows ISO8601 notation and uses UTC time. The format is yyyy-MM-ddTHH:mm:ssZ.
	CreateTime pulumi.StringPtrInput
	// The Site version's description.
	Description pulumi.StringPtrInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	OriginVersion pulumi.IntPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntPtrInput
	// The version number of the site configuration.
	SiteVersion pulumi.IntPtrInput
	// Site version status:：`online`.：`configuring`._faild`：`configureFaild`.
	Status pulumi.StringPtrInput
}

func (VersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*versionState)(nil)).Elem()
}

type versionArgs struct {
	// The Site version's description.
	Description *string `pulumi:"description"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	OriginVersion int `pulumi:"originVersion"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId int `pulumi:"siteId"`
}

// The set of arguments for constructing a Version resource.
type VersionArgs struct {
	// The Site version's description.
	Description pulumi.StringPtrInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	OriginVersion pulumi.IntInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntInput
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*versionArgs)(nil)).Elem()
}

type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(ctx context.Context) VersionOutput
}

func (*Version) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *Version) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i *Version) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

// VersionArrayInput is an input type that accepts VersionArray and VersionArrayOutput values.
// You can construct a concrete instance of `VersionArrayInput` via:
//
//	VersionArray{ VersionArgs{...} }
type VersionArrayInput interface {
	pulumi.Input

	ToVersionArrayOutput() VersionArrayOutput
	ToVersionArrayOutputWithContext(context.Context) VersionArrayOutput
}

type VersionArray []VersionInput

func (VersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (i VersionArray) ToVersionArrayOutput() VersionArrayOutput {
	return i.ToVersionArrayOutputWithContext(context.Background())
}

func (i VersionArray) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionArrayOutput)
}

// VersionMapInput is an input type that accepts VersionMap and VersionMapOutput values.
// You can construct a concrete instance of `VersionMapInput` via:
//
//	VersionMap{ "key": VersionArgs{...} }
type VersionMapInput interface {
	pulumi.Input

	ToVersionMapOutput() VersionMapOutput
	ToVersionMapOutputWithContext(context.Context) VersionMapOutput
}

type VersionMap map[string]VersionInput

func (VersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (i VersionMap) ToVersionMapOutput() VersionMapOutput {
	return i.ToVersionMapOutputWithContext(context.Background())
}

func (i VersionMap) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionMapOutput)
}

type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

// The creation time. The date format follows ISO8601 notation and uses UTC time. The format is yyyy-MM-ddTHH:mm:ssZ.
func (o VersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The Site version's description.
func (o VersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
func (o VersionOutput) OriginVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Version) pulumi.IntOutput { return v.OriginVersion }).(pulumi.IntOutput)
}

// The site ID, which can be obtained by calling the ListSites API.
func (o VersionOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *Version) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The version number of the site configuration.
func (o VersionOutput) SiteVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Version) pulumi.IntOutput { return v.SiteVersion }).(pulumi.IntOutput)
}

// Site version status:：`online`.：`configuring`._faild`：`configureFaild`.
func (o VersionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type VersionArrayOutput struct{ *pulumi.OutputState }

func (VersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (o VersionArrayOutput) ToVersionArrayOutput() VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) Index(i pulumi.IntInput) VersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Version {
		return vs[0].([]*Version)[vs[1].(int)]
	}).(VersionOutput)
}

type VersionMapOutput struct{ *pulumi.OutputState }

func (VersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (o VersionMapOutput) ToVersionMapOutput() VersionMapOutput {
	return o
}

func (o VersionMapOutput) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return o
}

func (o VersionMapOutput) MapIndex(k pulumi.StringInput) VersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Version {
		return vs[0].(map[string]*Version)[vs[1].(string)]
	}).(VersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), &Version{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionArrayInput)(nil)).Elem(), VersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionMapInput)(nil)).Elem(), VersionMap{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionArrayOutput{})
	pulumi.RegisterOutputType(VersionMapOutput{})
}
