// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Scheduled Preload Execution resource.
//
// For information about ESA Scheduled Preload Execution and how to use it, see [What is Scheduled Preload Execution](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateScheduledPreloadExecutions).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:   pulumi.String("terraform.cn"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultScheduledPreloadJob, err := esa.NewScheduledPreloadJob(ctx, "default", &esa.ScheduledPreloadJobArgs{
//				InsertWay:               pulumi.String("textBox"),
//				SiteId:                  defaultSite.ID(),
//				ScheduledPreloadJobName: pulumi.String("example_scheduledpreloadexecution_job"),
//				UrlList:                 pulumi.String("http://example.gositecdn.cn/example/example.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewScheduledPreloadExecution(ctx, "default", &esa.ScheduledPreloadExecutionArgs{
//				SliceLen:              pulumi.Int(5),
//				EndTime:               pulumi.String("2024-06-04T10:02:09.000+08:00"),
//				StartTime:             pulumi.String("2024-06-04T00:00:00.000+08:00"),
//				ScheduledPreloadJobId: defaultScheduledPreloadJob.ScheduledPreloadJobId,
//				Interval:              pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Scheduled Preload Execution can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/scheduledPreloadExecution:ScheduledPreloadExecution example <scheduled_preload_job_id>:<scheduled_preload_execution_id>
// ```
type ScheduledPreloadExecution struct {
	pulumi.CustomResourceState

	// The end time of the prefetch plan.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The time interval between each batch execution. Unit: seconds.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// The ID of the prefetch plan.
	ScheduledPreloadExecutionId pulumi.StringOutput `pulumi:"scheduledPreloadExecutionId"`
	// The ID of the prefetch task.
	ScheduledPreloadJobId pulumi.StringOutput `pulumi:"scheduledPreloadJobId"`
	// The number of URLs prefetched in each batch.
	SliceLen pulumi.IntOutput `pulumi:"sliceLen"`
	// The start time of the prefetch plan.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// The status of the prefetch plan, including the following statuses.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewScheduledPreloadExecution registers a new resource with the given unique name, arguments, and options.
func NewScheduledPreloadExecution(ctx *pulumi.Context,
	name string, args *ScheduledPreloadExecutionArgs, opts ...pulumi.ResourceOption) (*ScheduledPreloadExecution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.ScheduledPreloadJobId == nil {
		return nil, errors.New("invalid value for required argument 'ScheduledPreloadJobId'")
	}
	if args.SliceLen == nil {
		return nil, errors.New("invalid value for required argument 'SliceLen'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledPreloadExecution
	err := ctx.RegisterResource("alicloud:esa/scheduledPreloadExecution:ScheduledPreloadExecution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledPreloadExecution gets an existing ScheduledPreloadExecution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledPreloadExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledPreloadExecutionState, opts ...pulumi.ResourceOption) (*ScheduledPreloadExecution, error) {
	var resource ScheduledPreloadExecution
	err := ctx.ReadResource("alicloud:esa/scheduledPreloadExecution:ScheduledPreloadExecution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledPreloadExecution resources.
type scheduledPreloadExecutionState struct {
	// The end time of the prefetch plan.
	EndTime *string `pulumi:"endTime"`
	// The time interval between each batch execution. Unit: seconds.
	Interval *int `pulumi:"interval"`
	// The ID of the prefetch plan.
	ScheduledPreloadExecutionId *string `pulumi:"scheduledPreloadExecutionId"`
	// The ID of the prefetch task.
	ScheduledPreloadJobId *string `pulumi:"scheduledPreloadJobId"`
	// The number of URLs prefetched in each batch.
	SliceLen *int `pulumi:"sliceLen"`
	// The start time of the prefetch plan.
	StartTime *string `pulumi:"startTime"`
	// The status of the prefetch plan, including the following statuses.
	Status *string `pulumi:"status"`
}

type ScheduledPreloadExecutionState struct {
	// The end time of the prefetch plan.
	EndTime pulumi.StringPtrInput
	// The time interval between each batch execution. Unit: seconds.
	Interval pulumi.IntPtrInput
	// The ID of the prefetch plan.
	ScheduledPreloadExecutionId pulumi.StringPtrInput
	// The ID of the prefetch task.
	ScheduledPreloadJobId pulumi.StringPtrInput
	// The number of URLs prefetched in each batch.
	SliceLen pulumi.IntPtrInput
	// The start time of the prefetch plan.
	StartTime pulumi.StringPtrInput
	// The status of the prefetch plan, including the following statuses.
	Status pulumi.StringPtrInput
}

func (ScheduledPreloadExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledPreloadExecutionState)(nil)).Elem()
}

type scheduledPreloadExecutionArgs struct {
	// The end time of the prefetch plan.
	EndTime *string `pulumi:"endTime"`
	// The time interval between each batch execution. Unit: seconds.
	Interval int `pulumi:"interval"`
	// The ID of the prefetch task.
	ScheduledPreloadJobId string `pulumi:"scheduledPreloadJobId"`
	// The number of URLs prefetched in each batch.
	SliceLen int `pulumi:"sliceLen"`
	// The start time of the prefetch plan.
	StartTime *string `pulumi:"startTime"`
}

// The set of arguments for constructing a ScheduledPreloadExecution resource.
type ScheduledPreloadExecutionArgs struct {
	// The end time of the prefetch plan.
	EndTime pulumi.StringPtrInput
	// The time interval between each batch execution. Unit: seconds.
	Interval pulumi.IntInput
	// The ID of the prefetch task.
	ScheduledPreloadJobId pulumi.StringInput
	// The number of URLs prefetched in each batch.
	SliceLen pulumi.IntInput
	// The start time of the prefetch plan.
	StartTime pulumi.StringPtrInput
}

func (ScheduledPreloadExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledPreloadExecutionArgs)(nil)).Elem()
}

type ScheduledPreloadExecutionInput interface {
	pulumi.Input

	ToScheduledPreloadExecutionOutput() ScheduledPreloadExecutionOutput
	ToScheduledPreloadExecutionOutputWithContext(ctx context.Context) ScheduledPreloadExecutionOutput
}

func (*ScheduledPreloadExecution) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledPreloadExecution)(nil)).Elem()
}

func (i *ScheduledPreloadExecution) ToScheduledPreloadExecutionOutput() ScheduledPreloadExecutionOutput {
	return i.ToScheduledPreloadExecutionOutputWithContext(context.Background())
}

func (i *ScheduledPreloadExecution) ToScheduledPreloadExecutionOutputWithContext(ctx context.Context) ScheduledPreloadExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadExecutionOutput)
}

// ScheduledPreloadExecutionArrayInput is an input type that accepts ScheduledPreloadExecutionArray and ScheduledPreloadExecutionArrayOutput values.
// You can construct a concrete instance of `ScheduledPreloadExecutionArrayInput` via:
//
//	ScheduledPreloadExecutionArray{ ScheduledPreloadExecutionArgs{...} }
type ScheduledPreloadExecutionArrayInput interface {
	pulumi.Input

	ToScheduledPreloadExecutionArrayOutput() ScheduledPreloadExecutionArrayOutput
	ToScheduledPreloadExecutionArrayOutputWithContext(context.Context) ScheduledPreloadExecutionArrayOutput
}

type ScheduledPreloadExecutionArray []ScheduledPreloadExecutionInput

func (ScheduledPreloadExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledPreloadExecution)(nil)).Elem()
}

func (i ScheduledPreloadExecutionArray) ToScheduledPreloadExecutionArrayOutput() ScheduledPreloadExecutionArrayOutput {
	return i.ToScheduledPreloadExecutionArrayOutputWithContext(context.Background())
}

func (i ScheduledPreloadExecutionArray) ToScheduledPreloadExecutionArrayOutputWithContext(ctx context.Context) ScheduledPreloadExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadExecutionArrayOutput)
}

// ScheduledPreloadExecutionMapInput is an input type that accepts ScheduledPreloadExecutionMap and ScheduledPreloadExecutionMapOutput values.
// You can construct a concrete instance of `ScheduledPreloadExecutionMapInput` via:
//
//	ScheduledPreloadExecutionMap{ "key": ScheduledPreloadExecutionArgs{...} }
type ScheduledPreloadExecutionMapInput interface {
	pulumi.Input

	ToScheduledPreloadExecutionMapOutput() ScheduledPreloadExecutionMapOutput
	ToScheduledPreloadExecutionMapOutputWithContext(context.Context) ScheduledPreloadExecutionMapOutput
}

type ScheduledPreloadExecutionMap map[string]ScheduledPreloadExecutionInput

func (ScheduledPreloadExecutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledPreloadExecution)(nil)).Elem()
}

func (i ScheduledPreloadExecutionMap) ToScheduledPreloadExecutionMapOutput() ScheduledPreloadExecutionMapOutput {
	return i.ToScheduledPreloadExecutionMapOutputWithContext(context.Background())
}

func (i ScheduledPreloadExecutionMap) ToScheduledPreloadExecutionMapOutputWithContext(ctx context.Context) ScheduledPreloadExecutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadExecutionMapOutput)
}

type ScheduledPreloadExecutionOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledPreloadExecution)(nil)).Elem()
}

func (o ScheduledPreloadExecutionOutput) ToScheduledPreloadExecutionOutput() ScheduledPreloadExecutionOutput {
	return o
}

func (o ScheduledPreloadExecutionOutput) ToScheduledPreloadExecutionOutputWithContext(ctx context.Context) ScheduledPreloadExecutionOutput {
	return o
}

// The end time of the prefetch plan.
func (o ScheduledPreloadExecutionOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The time interval between each batch execution. Unit: seconds.
func (o ScheduledPreloadExecutionOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// The ID of the prefetch plan.
func (o ScheduledPreloadExecutionOutput) ScheduledPreloadExecutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.StringOutput { return v.ScheduledPreloadExecutionId }).(pulumi.StringOutput)
}

// The ID of the prefetch task.
func (o ScheduledPreloadExecutionOutput) ScheduledPreloadJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.StringOutput { return v.ScheduledPreloadJobId }).(pulumi.StringOutput)
}

// The number of URLs prefetched in each batch.
func (o ScheduledPreloadExecutionOutput) SliceLen() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.IntOutput { return v.SliceLen }).(pulumi.IntOutput)
}

// The start time of the prefetch plan.
func (o ScheduledPreloadExecutionOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The status of the prefetch plan, including the following statuses.
func (o ScheduledPreloadExecutionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadExecution) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ScheduledPreloadExecutionArrayOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledPreloadExecution)(nil)).Elem()
}

func (o ScheduledPreloadExecutionArrayOutput) ToScheduledPreloadExecutionArrayOutput() ScheduledPreloadExecutionArrayOutput {
	return o
}

func (o ScheduledPreloadExecutionArrayOutput) ToScheduledPreloadExecutionArrayOutputWithContext(ctx context.Context) ScheduledPreloadExecutionArrayOutput {
	return o
}

func (o ScheduledPreloadExecutionArrayOutput) Index(i pulumi.IntInput) ScheduledPreloadExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledPreloadExecution {
		return vs[0].([]*ScheduledPreloadExecution)[vs[1].(int)]
	}).(ScheduledPreloadExecutionOutput)
}

type ScheduledPreloadExecutionMapOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadExecutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledPreloadExecution)(nil)).Elem()
}

func (o ScheduledPreloadExecutionMapOutput) ToScheduledPreloadExecutionMapOutput() ScheduledPreloadExecutionMapOutput {
	return o
}

func (o ScheduledPreloadExecutionMapOutput) ToScheduledPreloadExecutionMapOutputWithContext(ctx context.Context) ScheduledPreloadExecutionMapOutput {
	return o
}

func (o ScheduledPreloadExecutionMapOutput) MapIndex(k pulumi.StringInput) ScheduledPreloadExecutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledPreloadExecution {
		return vs[0].(map[string]*ScheduledPreloadExecution)[vs[1].(string)]
	}).(ScheduledPreloadExecutionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadExecutionInput)(nil)).Elem(), &ScheduledPreloadExecution{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadExecutionArrayInput)(nil)).Elem(), ScheduledPreloadExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadExecutionMapInput)(nil)).Elem(), ScheduledPreloadExecutionMap{})
	pulumi.RegisterOutputType(ScheduledPreloadExecutionOutput{})
	pulumi.RegisterOutputType(ScheduledPreloadExecutionArrayOutput{})
	pulumi.RegisterOutputType(ScheduledPreloadExecutionMapOutput{})
}
