// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoutineRelatedRecord struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput `pulumi:"name"`
	RecordId   pulumi.IntOutput    `pulumi:"recordId"`
	RecordName pulumi.StringOutput `pulumi:"recordName"`
	SiteId     pulumi.IntOutput    `pulumi:"siteId"`
}

// NewRoutineRelatedRecord registers a new resource with the given unique name, arguments, and options.
func NewRoutineRelatedRecord(ctx *pulumi.Context,
	name string, args *RoutineRelatedRecordArgs, opts ...pulumi.ResourceOption) (*RoutineRelatedRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecordName == nil {
		return nil, errors.New("invalid value for required argument 'RecordName'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutineRelatedRecord
	err := ctx.RegisterResource("alicloud:esa/routineRelatedRecord:RoutineRelatedRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutineRelatedRecord gets an existing RoutineRelatedRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutineRelatedRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutineRelatedRecordState, opts ...pulumi.ResourceOption) (*RoutineRelatedRecord, error) {
	var resource RoutineRelatedRecord
	err := ctx.ReadResource("alicloud:esa/routineRelatedRecord:RoutineRelatedRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutineRelatedRecord resources.
type routineRelatedRecordState struct {
	Name       *string `pulumi:"name"`
	RecordId   *int    `pulumi:"recordId"`
	RecordName *string `pulumi:"recordName"`
	SiteId     *int    `pulumi:"siteId"`
}

type RoutineRelatedRecordState struct {
	Name       pulumi.StringPtrInput
	RecordId   pulumi.IntPtrInput
	RecordName pulumi.StringPtrInput
	SiteId     pulumi.IntPtrInput
}

func (RoutineRelatedRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*routineRelatedRecordState)(nil)).Elem()
}

type routineRelatedRecordArgs struct {
	Name       *string `pulumi:"name"`
	RecordName string  `pulumi:"recordName"`
	SiteId     int     `pulumi:"siteId"`
}

// The set of arguments for constructing a RoutineRelatedRecord resource.
type RoutineRelatedRecordArgs struct {
	Name       pulumi.StringPtrInput
	RecordName pulumi.StringInput
	SiteId     pulumi.IntInput
}

func (RoutineRelatedRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routineRelatedRecordArgs)(nil)).Elem()
}

type RoutineRelatedRecordInput interface {
	pulumi.Input

	ToRoutineRelatedRecordOutput() RoutineRelatedRecordOutput
	ToRoutineRelatedRecordOutputWithContext(ctx context.Context) RoutineRelatedRecordOutput
}

func (*RoutineRelatedRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineRelatedRecord)(nil)).Elem()
}

func (i *RoutineRelatedRecord) ToRoutineRelatedRecordOutput() RoutineRelatedRecordOutput {
	return i.ToRoutineRelatedRecordOutputWithContext(context.Background())
}

func (i *RoutineRelatedRecord) ToRoutineRelatedRecordOutputWithContext(ctx context.Context) RoutineRelatedRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRelatedRecordOutput)
}

// RoutineRelatedRecordArrayInput is an input type that accepts RoutineRelatedRecordArray and RoutineRelatedRecordArrayOutput values.
// You can construct a concrete instance of `RoutineRelatedRecordArrayInput` via:
//
//	RoutineRelatedRecordArray{ RoutineRelatedRecordArgs{...} }
type RoutineRelatedRecordArrayInput interface {
	pulumi.Input

	ToRoutineRelatedRecordArrayOutput() RoutineRelatedRecordArrayOutput
	ToRoutineRelatedRecordArrayOutputWithContext(context.Context) RoutineRelatedRecordArrayOutput
}

type RoutineRelatedRecordArray []RoutineRelatedRecordInput

func (RoutineRelatedRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutineRelatedRecord)(nil)).Elem()
}

func (i RoutineRelatedRecordArray) ToRoutineRelatedRecordArrayOutput() RoutineRelatedRecordArrayOutput {
	return i.ToRoutineRelatedRecordArrayOutputWithContext(context.Background())
}

func (i RoutineRelatedRecordArray) ToRoutineRelatedRecordArrayOutputWithContext(ctx context.Context) RoutineRelatedRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRelatedRecordArrayOutput)
}

// RoutineRelatedRecordMapInput is an input type that accepts RoutineRelatedRecordMap and RoutineRelatedRecordMapOutput values.
// You can construct a concrete instance of `RoutineRelatedRecordMapInput` via:
//
//	RoutineRelatedRecordMap{ "key": RoutineRelatedRecordArgs{...} }
type RoutineRelatedRecordMapInput interface {
	pulumi.Input

	ToRoutineRelatedRecordMapOutput() RoutineRelatedRecordMapOutput
	ToRoutineRelatedRecordMapOutputWithContext(context.Context) RoutineRelatedRecordMapOutput
}

type RoutineRelatedRecordMap map[string]RoutineRelatedRecordInput

func (RoutineRelatedRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutineRelatedRecord)(nil)).Elem()
}

func (i RoutineRelatedRecordMap) ToRoutineRelatedRecordMapOutput() RoutineRelatedRecordMapOutput {
	return i.ToRoutineRelatedRecordMapOutputWithContext(context.Background())
}

func (i RoutineRelatedRecordMap) ToRoutineRelatedRecordMapOutputWithContext(ctx context.Context) RoutineRelatedRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRelatedRecordMapOutput)
}

type RoutineRelatedRecordOutput struct{ *pulumi.OutputState }

func (RoutineRelatedRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineRelatedRecord)(nil)).Elem()
}

func (o RoutineRelatedRecordOutput) ToRoutineRelatedRecordOutput() RoutineRelatedRecordOutput {
	return o
}

func (o RoutineRelatedRecordOutput) ToRoutineRelatedRecordOutputWithContext(ctx context.Context) RoutineRelatedRecordOutput {
	return o
}

func (o RoutineRelatedRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutineRelatedRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RoutineRelatedRecordOutput) RecordId() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutineRelatedRecord) pulumi.IntOutput { return v.RecordId }).(pulumi.IntOutput)
}

func (o RoutineRelatedRecordOutput) RecordName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutineRelatedRecord) pulumi.StringOutput { return v.RecordName }).(pulumi.StringOutput)
}

func (o RoutineRelatedRecordOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutineRelatedRecord) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

type RoutineRelatedRecordArrayOutput struct{ *pulumi.OutputState }

func (RoutineRelatedRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutineRelatedRecord)(nil)).Elem()
}

func (o RoutineRelatedRecordArrayOutput) ToRoutineRelatedRecordArrayOutput() RoutineRelatedRecordArrayOutput {
	return o
}

func (o RoutineRelatedRecordArrayOutput) ToRoutineRelatedRecordArrayOutputWithContext(ctx context.Context) RoutineRelatedRecordArrayOutput {
	return o
}

func (o RoutineRelatedRecordArrayOutput) Index(i pulumi.IntInput) RoutineRelatedRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutineRelatedRecord {
		return vs[0].([]*RoutineRelatedRecord)[vs[1].(int)]
	}).(RoutineRelatedRecordOutput)
}

type RoutineRelatedRecordMapOutput struct{ *pulumi.OutputState }

func (RoutineRelatedRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutineRelatedRecord)(nil)).Elem()
}

func (o RoutineRelatedRecordMapOutput) ToRoutineRelatedRecordMapOutput() RoutineRelatedRecordMapOutput {
	return o
}

func (o RoutineRelatedRecordMapOutput) ToRoutineRelatedRecordMapOutputWithContext(ctx context.Context) RoutineRelatedRecordMapOutput {
	return o
}

func (o RoutineRelatedRecordMapOutput) MapIndex(k pulumi.StringInput) RoutineRelatedRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutineRelatedRecord {
		return vs[0].(map[string]*RoutineRelatedRecord)[vs[1].(string)]
	}).(RoutineRelatedRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRelatedRecordInput)(nil)).Elem(), &RoutineRelatedRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRelatedRecordArrayInput)(nil)).Elem(), RoutineRelatedRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRelatedRecordMapInput)(nil)).Elem(), RoutineRelatedRecordMap{})
	pulumi.RegisterOutputType(RoutineRelatedRecordOutput{})
	pulumi.RegisterOutputType(RoutineRelatedRecordArrayOutput{})
	pulumi.RegisterOutputType(RoutineRelatedRecordMapOutput{})
}
