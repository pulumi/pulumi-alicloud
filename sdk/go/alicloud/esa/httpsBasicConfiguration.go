// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Https Basic Configuration resource.
//
// For information about ESA Https Basic Configuration and how to use it, see [What is Https Basic Configuration](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateHttpsBasicConfiguration).
//
// > **NOTE:** Available since v1.243.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			example, err := esa.NewRatePlanInstance(ctx, "example", &esa.RatePlanInstanceArgs{
//				Type:        pulumi.String("NS"),
//				AutoRenew:   pulumi.Bool(false),
//				Period:      pulumi.Int(1),
//				PaymentType: pulumi.String("Subscription"),
//				Coverage:    pulumi.String("overseas"),
//				AutoPay:     pulumi.Bool(true),
//				PlanName:    pulumi.String("high"),
//			})
//			if err != nil {
//				return err
//			}
//			resourceHttpBasicConfigurationSetExample, err := esa.NewSite(ctx, "resource_HttpBasicConfiguration_set_example", &esa.SiteArgs{
//				SiteName:   pulumi.String("gositecdn.cn"),
//				InstanceId: example.ID(),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewHttpsBasicConfiguration(ctx, "default", &esa.HttpsBasicConfigurationArgs{
//				Https:      pulumi.String("on"),
//				Rule:       pulumi.String("true"),
//				RuleName:   pulumi.String("example2"),
//				SiteId:     resourceHttpBasicConfigurationSetExample.ID(),
//				RuleEnable: pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Https Basic Configuration can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/httpsBasicConfiguration:HttpsBasicConfiguration example <site_id>:<config_id>
// ```
type HttpsBasicConfiguration struct {
	pulumi.CustomResourceState

	// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
	Ciphersuite pulumi.StringPtrOutput `pulumi:"ciphersuite"`
	// Cipher suite group. Default is all cipher suites. Possible values:
	// - all: All cipher suites.
	// - strict: Strong cipher suites.
	// - custom: Custom cipher suites.
	CiphersuiteGroup pulumi.StringPtrOutput `pulumi:"ciphersuiteGroup"`
	// ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](https://www.alibabacloud.com/help/en/doc-detail/2867470.html) interface.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Indicates whether HTTP2 is enabled. Default is on. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	Http2 pulumi.StringPtrOutput `pulumi:"http2"`
	// Whether to enable HTTP3, which is enabled by default. The value can be:
	// - on: Enabled.
	// - off: Disabled.
	Http3 pulumi.StringPtrOutput `pulumi:"http3"`
	// Whether to enable HTTPS. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Https pulumi.StringPtrOutput `pulumi:"https"`
	// Indicates whether OCSP is enabled. Default is off. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	OcspStapling pulumi.StringPtrOutput `pulumi:"ocspStapling"`
	// Matching rule content.
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Rule switch. Possible values:
	// - on: Enable.
	// - off: Disable.
	RuleEnable pulumi.StringPtrOutput `pulumi:"ruleEnable"`
	// Rule name, which can be used to find the rule with the specified name.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// Whether to enable TLS1.0. Default is disabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls10 pulumi.StringPtrOutput `pulumi:"tls10"`
	// Whether to enable TLS1.1. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls11 pulumi.StringPtrOutput `pulumi:"tls11"`
	// Whether to enable TLS1.2. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls12 pulumi.StringPtrOutput `pulumi:"tls12"`
	// Whether to enable TLS1.3. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls13 pulumi.StringPtrOutput `pulumi:"tls13"`
}

// NewHttpsBasicConfiguration registers a new resource with the given unique name, arguments, and options.
func NewHttpsBasicConfiguration(ctx *pulumi.Context,
	name string, args *HttpsBasicConfigurationArgs, opts ...pulumi.ResourceOption) (*HttpsBasicConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpsBasicConfiguration
	err := ctx.RegisterResource("alicloud:esa/httpsBasicConfiguration:HttpsBasicConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpsBasicConfiguration gets an existing HttpsBasicConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpsBasicConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpsBasicConfigurationState, opts ...pulumi.ResourceOption) (*HttpsBasicConfiguration, error) {
	var resource HttpsBasicConfiguration
	err := ctx.ReadResource("alicloud:esa/httpsBasicConfiguration:HttpsBasicConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpsBasicConfiguration resources.
type httpsBasicConfigurationState struct {
	// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
	Ciphersuite *string `pulumi:"ciphersuite"`
	// Cipher suite group. Default is all cipher suites. Possible values:
	// - all: All cipher suites.
	// - strict: Strong cipher suites.
	// - custom: Custom cipher suites.
	CiphersuiteGroup *string `pulumi:"ciphersuiteGroup"`
	// ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](https://www.alibabacloud.com/help/en/doc-detail/2867470.html) interface.
	ConfigId *int `pulumi:"configId"`
	// Indicates whether HTTP2 is enabled. Default is on. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	Http2 *string `pulumi:"http2"`
	// Whether to enable HTTP3, which is enabled by default. The value can be:
	// - on: Enabled.
	// - off: Disabled.
	Http3 *string `pulumi:"http3"`
	// Whether to enable HTTPS. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Https *string `pulumi:"https"`
	// Indicates whether OCSP is enabled. Default is off. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	OcspStapling *string `pulumi:"ocspStapling"`
	// Matching rule content.
	Rule *string `pulumi:"rule"`
	// Rule switch. Possible values:
	// - on: Enable.
	// - off: Disable.
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, which can be used to find the rule with the specified name.
	RuleName *string `pulumi:"ruleName"`
	// Site ID, which can be obtained by calling the ListSites interface.
	SiteId *int `pulumi:"siteId"`
	// Whether to enable TLS1.0. Default is disabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls10 *string `pulumi:"tls10"`
	// Whether to enable TLS1.1. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls11 *string `pulumi:"tls11"`
	// Whether to enable TLS1.2. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls12 *string `pulumi:"tls12"`
	// Whether to enable TLS1.3. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls13 *string `pulumi:"tls13"`
}

type HttpsBasicConfigurationState struct {
	// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
	Ciphersuite pulumi.StringPtrInput
	// Cipher suite group. Default is all cipher suites. Possible values:
	// - all: All cipher suites.
	// - strict: Strong cipher suites.
	// - custom: Custom cipher suites.
	CiphersuiteGroup pulumi.StringPtrInput
	// ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](https://www.alibabacloud.com/help/en/doc-detail/2867470.html) interface.
	ConfigId pulumi.IntPtrInput
	// Indicates whether HTTP2 is enabled. Default is on. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	Http2 pulumi.StringPtrInput
	// Whether to enable HTTP3, which is enabled by default. The value can be:
	// - on: Enabled.
	// - off: Disabled.
	Http3 pulumi.StringPtrInput
	// Whether to enable HTTPS. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Https pulumi.StringPtrInput
	// Indicates whether OCSP is enabled. Default is off. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	OcspStapling pulumi.StringPtrInput
	// Matching rule content.
	Rule pulumi.StringPtrInput
	// Rule switch. Possible values:
	// - on: Enable.
	// - off: Disable.
	RuleEnable pulumi.StringPtrInput
	// Rule name, which can be used to find the rule with the specified name.
	RuleName pulumi.StringPtrInput
	// Site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntPtrInput
	// Whether to enable TLS1.0. Default is disabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls10 pulumi.StringPtrInput
	// Whether to enable TLS1.1. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls11 pulumi.StringPtrInput
	// Whether to enable TLS1.2. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls12 pulumi.StringPtrInput
	// Whether to enable TLS1.3. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls13 pulumi.StringPtrInput
}

func (HttpsBasicConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpsBasicConfigurationState)(nil)).Elem()
}

type httpsBasicConfigurationArgs struct {
	// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
	Ciphersuite *string `pulumi:"ciphersuite"`
	// Cipher suite group. Default is all cipher suites. Possible values:
	// - all: All cipher suites.
	// - strict: Strong cipher suites.
	// - custom: Custom cipher suites.
	CiphersuiteGroup *string `pulumi:"ciphersuiteGroup"`
	// Indicates whether HTTP2 is enabled. Default is on. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	Http2 *string `pulumi:"http2"`
	// Whether to enable HTTP3, which is enabled by default. The value can be:
	// - on: Enabled.
	// - off: Disabled.
	Http3 *string `pulumi:"http3"`
	// Whether to enable HTTPS. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Https *string `pulumi:"https"`
	// Indicates whether OCSP is enabled. Default is off. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	OcspStapling *string `pulumi:"ocspStapling"`
	// Matching rule content.
	Rule *string `pulumi:"rule"`
	// Rule switch. Possible values:
	// - on: Enable.
	// - off: Disable.
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, which can be used to find the rule with the specified name.
	RuleName *string `pulumi:"ruleName"`
	// Site ID, which can be obtained by calling the ListSites interface.
	SiteId int `pulumi:"siteId"`
	// Whether to enable TLS1.0. Default is disabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls10 *string `pulumi:"tls10"`
	// Whether to enable TLS1.1. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls11 *string `pulumi:"tls11"`
	// Whether to enable TLS1.2. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls12 *string `pulumi:"tls12"`
	// Whether to enable TLS1.3. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls13 *string `pulumi:"tls13"`
}

// The set of arguments for constructing a HttpsBasicConfiguration resource.
type HttpsBasicConfigurationArgs struct {
	// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
	Ciphersuite pulumi.StringPtrInput
	// Cipher suite group. Default is all cipher suites. Possible values:
	// - all: All cipher suites.
	// - strict: Strong cipher suites.
	// - custom: Custom cipher suites.
	CiphersuiteGroup pulumi.StringPtrInput
	// Indicates whether HTTP2 is enabled. Default is on. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	Http2 pulumi.StringPtrInput
	// Whether to enable HTTP3, which is enabled by default. The value can be:
	// - on: Enabled.
	// - off: Disabled.
	Http3 pulumi.StringPtrInput
	// Whether to enable HTTPS. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Https pulumi.StringPtrInput
	// Indicates whether OCSP is enabled. Default is off. Possible values:
	// - on: Enabled.
	// - off: Disabled.
	OcspStapling pulumi.StringPtrInput
	// Matching rule content.
	Rule pulumi.StringPtrInput
	// Rule switch. Possible values:
	// - on: Enable.
	// - off: Disable.
	RuleEnable pulumi.StringPtrInput
	// Rule name, which can be used to find the rule with the specified name.
	RuleName pulumi.StringPtrInput
	// Site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntInput
	// Whether to enable TLS1.0. Default is disabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls10 pulumi.StringPtrInput
	// Whether to enable TLS1.1. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls11 pulumi.StringPtrInput
	// Whether to enable TLS1.2. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls12 pulumi.StringPtrInput
	// Whether to enable TLS1.3. Default is enabled. Possible values:
	// - on: Enable.
	// - off: Disable.
	Tls13 pulumi.StringPtrInput
}

func (HttpsBasicConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpsBasicConfigurationArgs)(nil)).Elem()
}

type HttpsBasicConfigurationInput interface {
	pulumi.Input

	ToHttpsBasicConfigurationOutput() HttpsBasicConfigurationOutput
	ToHttpsBasicConfigurationOutputWithContext(ctx context.Context) HttpsBasicConfigurationOutput
}

func (*HttpsBasicConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsBasicConfiguration)(nil)).Elem()
}

func (i *HttpsBasicConfiguration) ToHttpsBasicConfigurationOutput() HttpsBasicConfigurationOutput {
	return i.ToHttpsBasicConfigurationOutputWithContext(context.Background())
}

func (i *HttpsBasicConfiguration) ToHttpsBasicConfigurationOutputWithContext(ctx context.Context) HttpsBasicConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsBasicConfigurationOutput)
}

// HttpsBasicConfigurationArrayInput is an input type that accepts HttpsBasicConfigurationArray and HttpsBasicConfigurationArrayOutput values.
// You can construct a concrete instance of `HttpsBasicConfigurationArrayInput` via:
//
//	HttpsBasicConfigurationArray{ HttpsBasicConfigurationArgs{...} }
type HttpsBasicConfigurationArrayInput interface {
	pulumi.Input

	ToHttpsBasicConfigurationArrayOutput() HttpsBasicConfigurationArrayOutput
	ToHttpsBasicConfigurationArrayOutputWithContext(context.Context) HttpsBasicConfigurationArrayOutput
}

type HttpsBasicConfigurationArray []HttpsBasicConfigurationInput

func (HttpsBasicConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpsBasicConfiguration)(nil)).Elem()
}

func (i HttpsBasicConfigurationArray) ToHttpsBasicConfigurationArrayOutput() HttpsBasicConfigurationArrayOutput {
	return i.ToHttpsBasicConfigurationArrayOutputWithContext(context.Background())
}

func (i HttpsBasicConfigurationArray) ToHttpsBasicConfigurationArrayOutputWithContext(ctx context.Context) HttpsBasicConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsBasicConfigurationArrayOutput)
}

// HttpsBasicConfigurationMapInput is an input type that accepts HttpsBasicConfigurationMap and HttpsBasicConfigurationMapOutput values.
// You can construct a concrete instance of `HttpsBasicConfigurationMapInput` via:
//
//	HttpsBasicConfigurationMap{ "key": HttpsBasicConfigurationArgs{...} }
type HttpsBasicConfigurationMapInput interface {
	pulumi.Input

	ToHttpsBasicConfigurationMapOutput() HttpsBasicConfigurationMapOutput
	ToHttpsBasicConfigurationMapOutputWithContext(context.Context) HttpsBasicConfigurationMapOutput
}

type HttpsBasicConfigurationMap map[string]HttpsBasicConfigurationInput

func (HttpsBasicConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpsBasicConfiguration)(nil)).Elem()
}

func (i HttpsBasicConfigurationMap) ToHttpsBasicConfigurationMapOutput() HttpsBasicConfigurationMapOutput {
	return i.ToHttpsBasicConfigurationMapOutputWithContext(context.Background())
}

func (i HttpsBasicConfigurationMap) ToHttpsBasicConfigurationMapOutputWithContext(ctx context.Context) HttpsBasicConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsBasicConfigurationMapOutput)
}

type HttpsBasicConfigurationOutput struct{ *pulumi.OutputState }

func (HttpsBasicConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsBasicConfiguration)(nil)).Elem()
}

func (o HttpsBasicConfigurationOutput) ToHttpsBasicConfigurationOutput() HttpsBasicConfigurationOutput {
	return o
}

func (o HttpsBasicConfigurationOutput) ToHttpsBasicConfigurationOutputWithContext(ctx context.Context) HttpsBasicConfigurationOutput {
	return o
}

// Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
func (o HttpsBasicConfigurationOutput) Ciphersuite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Ciphersuite }).(pulumi.StringPtrOutput)
}

// Cipher suite group. Default is all cipher suites. Possible values:
// - all: All cipher suites.
// - strict: Strong cipher suites.
// - custom: Custom cipher suites.
func (o HttpsBasicConfigurationOutput) CiphersuiteGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.CiphersuiteGroup }).(pulumi.StringPtrOutput)
}

// ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](https://www.alibabacloud.com/help/en/doc-detail/2867470.html) interface.
func (o HttpsBasicConfigurationOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Indicates whether HTTP2 is enabled. Default is on. Possible values:
// - on: Enabled.
// - off: Disabled.
func (o HttpsBasicConfigurationOutput) Http2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Http2 }).(pulumi.StringPtrOutput)
}

// Whether to enable HTTP3, which is enabled by default. The value can be:
// - on: Enabled.
// - off: Disabled.
func (o HttpsBasicConfigurationOutput) Http3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Http3 }).(pulumi.StringPtrOutput)
}

// Whether to enable HTTPS. Default is enabled. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) Https() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Https }).(pulumi.StringPtrOutput)
}

// Indicates whether OCSP is enabled. Default is off. Possible values:
// - on: Enabled.
// - off: Disabled.
func (o HttpsBasicConfigurationOutput) OcspStapling() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.OcspStapling }).(pulumi.StringPtrOutput)
}

// Matching rule content.
func (o HttpsBasicConfigurationOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Rule switch. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) RuleEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.RuleEnable }).(pulumi.StringPtrOutput)
}

// Rule name, which can be used to find the rule with the specified name.
func (o HttpsBasicConfigurationOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Site ID, which can be obtained by calling the ListSites interface.
func (o HttpsBasicConfigurationOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Whether to enable TLS1.0. Default is disabled. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) Tls10() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Tls10 }).(pulumi.StringPtrOutput)
}

// Whether to enable TLS1.1. Default is enabled. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) Tls11() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Tls11 }).(pulumi.StringPtrOutput)
}

// Whether to enable TLS1.2. Default is enabled. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) Tls12() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Tls12 }).(pulumi.StringPtrOutput)
}

// Whether to enable TLS1.3. Default is enabled. Possible values:
// - on: Enable.
// - off: Disable.
func (o HttpsBasicConfigurationOutput) Tls13() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsBasicConfiguration) pulumi.StringPtrOutput { return v.Tls13 }).(pulumi.StringPtrOutput)
}

type HttpsBasicConfigurationArrayOutput struct{ *pulumi.OutputState }

func (HttpsBasicConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpsBasicConfiguration)(nil)).Elem()
}

func (o HttpsBasicConfigurationArrayOutput) ToHttpsBasicConfigurationArrayOutput() HttpsBasicConfigurationArrayOutput {
	return o
}

func (o HttpsBasicConfigurationArrayOutput) ToHttpsBasicConfigurationArrayOutputWithContext(ctx context.Context) HttpsBasicConfigurationArrayOutput {
	return o
}

func (o HttpsBasicConfigurationArrayOutput) Index(i pulumi.IntInput) HttpsBasicConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpsBasicConfiguration {
		return vs[0].([]*HttpsBasicConfiguration)[vs[1].(int)]
	}).(HttpsBasicConfigurationOutput)
}

type HttpsBasicConfigurationMapOutput struct{ *pulumi.OutputState }

func (HttpsBasicConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpsBasicConfiguration)(nil)).Elem()
}

func (o HttpsBasicConfigurationMapOutput) ToHttpsBasicConfigurationMapOutput() HttpsBasicConfigurationMapOutput {
	return o
}

func (o HttpsBasicConfigurationMapOutput) ToHttpsBasicConfigurationMapOutputWithContext(ctx context.Context) HttpsBasicConfigurationMapOutput {
	return o
}

func (o HttpsBasicConfigurationMapOutput) MapIndex(k pulumi.StringInput) HttpsBasicConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpsBasicConfiguration {
		return vs[0].(map[string]*HttpsBasicConfiguration)[vs[1].(string)]
	}).(HttpsBasicConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsBasicConfigurationInput)(nil)).Elem(), &HttpsBasicConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsBasicConfigurationArrayInput)(nil)).Elem(), HttpsBasicConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsBasicConfigurationMapInput)(nil)).Elem(), HttpsBasicConfigurationMap{})
	pulumi.RegisterOutputType(HttpsBasicConfigurationOutput{})
	pulumi.RegisterOutputType(HttpsBasicConfigurationArrayOutput{})
	pulumi.RegisterOutputType(HttpsBasicConfigurationMapOutput{})
}
