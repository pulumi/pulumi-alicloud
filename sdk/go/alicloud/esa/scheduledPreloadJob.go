// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Scheduled Preload Job resource.
//
// For information about ESA Scheduled Preload Job and how to use it, see [What is Scheduled Preload Job](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateScheduledPreloadJob).
//
// > **NOTE:** Available since v1.248.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:   pulumi.String("terraform.cn"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewScheduledPreloadJob(ctx, "default", &esa.ScheduledPreloadJobArgs{
//				InsertWay:               pulumi.String("textBox"),
//				SiteId:                  defaultSite.ID(),
//				ScheduledPreloadJobName: pulumi.String("example_scheduledpreloadexecution_job"),
//				UrlList:                 pulumi.String("http://example.gositecdn.cn/example/example.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Scheduled Preload Job can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob example <site_id>:<scheduled_preload_job_id>
// ```
type ScheduledPreloadJob struct {
	pulumi.CustomResourceState

	// The time when the task was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The method to submit the URLs to be prefetched.
	InsertWay pulumi.StringOutput `pulumi:"insertWay"`
	// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
	OssUrl pulumi.StringPtrOutput `pulumi:"ossUrl"`
	// The ID of the prefetch task.
	ScheduledPreloadJobId pulumi.StringOutput `pulumi:"scheduledPreloadJobId"`
	// The task name.
	ScheduledPreloadJobName pulumi.StringOutput `pulumi:"scheduledPreloadJobName"`
	// The site ID.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
	UrlList pulumi.StringPtrOutput `pulumi:"urlList"`
}

// NewScheduledPreloadJob registers a new resource with the given unique name, arguments, and options.
func NewScheduledPreloadJob(ctx *pulumi.Context,
	name string, args *ScheduledPreloadJobArgs, opts ...pulumi.ResourceOption) (*ScheduledPreloadJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InsertWay == nil {
		return nil, errors.New("invalid value for required argument 'InsertWay'")
	}
	if args.ScheduledPreloadJobName == nil {
		return nil, errors.New("invalid value for required argument 'ScheduledPreloadJobName'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledPreloadJob
	err := ctx.RegisterResource("alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledPreloadJob gets an existing ScheduledPreloadJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledPreloadJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledPreloadJobState, opts ...pulumi.ResourceOption) (*ScheduledPreloadJob, error) {
	var resource ScheduledPreloadJob
	err := ctx.ReadResource("alicloud:esa/scheduledPreloadJob:ScheduledPreloadJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledPreloadJob resources.
type scheduledPreloadJobState struct {
	// The time when the task was created.
	CreateTime *string `pulumi:"createTime"`
	// The method to submit the URLs to be prefetched.
	InsertWay *string `pulumi:"insertWay"`
	// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
	OssUrl *string `pulumi:"ossUrl"`
	// The ID of the prefetch task.
	ScheduledPreloadJobId *string `pulumi:"scheduledPreloadJobId"`
	// The task name.
	ScheduledPreloadJobName *string `pulumi:"scheduledPreloadJobName"`
	// The site ID.
	SiteId *int `pulumi:"siteId"`
	// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
	UrlList *string `pulumi:"urlList"`
}

type ScheduledPreloadJobState struct {
	// The time when the task was created.
	CreateTime pulumi.StringPtrInput
	// The method to submit the URLs to be prefetched.
	InsertWay pulumi.StringPtrInput
	// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
	OssUrl pulumi.StringPtrInput
	// The ID of the prefetch task.
	ScheduledPreloadJobId pulumi.StringPtrInput
	// The task name.
	ScheduledPreloadJobName pulumi.StringPtrInput
	// The site ID.
	SiteId pulumi.IntPtrInput
	// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
	UrlList pulumi.StringPtrInput
}

func (ScheduledPreloadJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledPreloadJobState)(nil)).Elem()
}

type scheduledPreloadJobArgs struct {
	// The method to submit the URLs to be prefetched.
	InsertWay string `pulumi:"insertWay"`
	// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
	OssUrl *string `pulumi:"ossUrl"`
	// The task name.
	ScheduledPreloadJobName string `pulumi:"scheduledPreloadJobName"`
	// The site ID.
	SiteId int `pulumi:"siteId"`
	// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
	UrlList *string `pulumi:"urlList"`
}

// The set of arguments for constructing a ScheduledPreloadJob resource.
type ScheduledPreloadJobArgs struct {
	// The method to submit the URLs to be prefetched.
	InsertWay pulumi.StringInput
	// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
	OssUrl pulumi.StringPtrInput
	// The task name.
	ScheduledPreloadJobName pulumi.StringInput
	// The site ID.
	SiteId pulumi.IntInput
	// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
	UrlList pulumi.StringPtrInput
}

func (ScheduledPreloadJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledPreloadJobArgs)(nil)).Elem()
}

type ScheduledPreloadJobInput interface {
	pulumi.Input

	ToScheduledPreloadJobOutput() ScheduledPreloadJobOutput
	ToScheduledPreloadJobOutputWithContext(ctx context.Context) ScheduledPreloadJobOutput
}

func (*ScheduledPreloadJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledPreloadJob)(nil)).Elem()
}

func (i *ScheduledPreloadJob) ToScheduledPreloadJobOutput() ScheduledPreloadJobOutput {
	return i.ToScheduledPreloadJobOutputWithContext(context.Background())
}

func (i *ScheduledPreloadJob) ToScheduledPreloadJobOutputWithContext(ctx context.Context) ScheduledPreloadJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadJobOutput)
}

// ScheduledPreloadJobArrayInput is an input type that accepts ScheduledPreloadJobArray and ScheduledPreloadJobArrayOutput values.
// You can construct a concrete instance of `ScheduledPreloadJobArrayInput` via:
//
//	ScheduledPreloadJobArray{ ScheduledPreloadJobArgs{...} }
type ScheduledPreloadJobArrayInput interface {
	pulumi.Input

	ToScheduledPreloadJobArrayOutput() ScheduledPreloadJobArrayOutput
	ToScheduledPreloadJobArrayOutputWithContext(context.Context) ScheduledPreloadJobArrayOutput
}

type ScheduledPreloadJobArray []ScheduledPreloadJobInput

func (ScheduledPreloadJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledPreloadJob)(nil)).Elem()
}

func (i ScheduledPreloadJobArray) ToScheduledPreloadJobArrayOutput() ScheduledPreloadJobArrayOutput {
	return i.ToScheduledPreloadJobArrayOutputWithContext(context.Background())
}

func (i ScheduledPreloadJobArray) ToScheduledPreloadJobArrayOutputWithContext(ctx context.Context) ScheduledPreloadJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadJobArrayOutput)
}

// ScheduledPreloadJobMapInput is an input type that accepts ScheduledPreloadJobMap and ScheduledPreloadJobMapOutput values.
// You can construct a concrete instance of `ScheduledPreloadJobMapInput` via:
//
//	ScheduledPreloadJobMap{ "key": ScheduledPreloadJobArgs{...} }
type ScheduledPreloadJobMapInput interface {
	pulumi.Input

	ToScheduledPreloadJobMapOutput() ScheduledPreloadJobMapOutput
	ToScheduledPreloadJobMapOutputWithContext(context.Context) ScheduledPreloadJobMapOutput
}

type ScheduledPreloadJobMap map[string]ScheduledPreloadJobInput

func (ScheduledPreloadJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledPreloadJob)(nil)).Elem()
}

func (i ScheduledPreloadJobMap) ToScheduledPreloadJobMapOutput() ScheduledPreloadJobMapOutput {
	return i.ToScheduledPreloadJobMapOutputWithContext(context.Background())
}

func (i ScheduledPreloadJobMap) ToScheduledPreloadJobMapOutputWithContext(ctx context.Context) ScheduledPreloadJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledPreloadJobMapOutput)
}

type ScheduledPreloadJobOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledPreloadJob)(nil)).Elem()
}

func (o ScheduledPreloadJobOutput) ToScheduledPreloadJobOutput() ScheduledPreloadJobOutput {
	return o
}

func (o ScheduledPreloadJobOutput) ToScheduledPreloadJobOutputWithContext(ctx context.Context) ScheduledPreloadJobOutput {
	return o
}

// The time when the task was created.
func (o ScheduledPreloadJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The method to submit the URLs to be prefetched.
func (o ScheduledPreloadJobOutput) InsertWay() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringOutput { return v.InsertWay }).(pulumi.StringOutput)
}

// Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
func (o ScheduledPreloadJobOutput) OssUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringPtrOutput { return v.OssUrl }).(pulumi.StringPtrOutput)
}

// The ID of the prefetch task.
func (o ScheduledPreloadJobOutput) ScheduledPreloadJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringOutput { return v.ScheduledPreloadJobId }).(pulumi.StringOutput)
}

// The task name.
func (o ScheduledPreloadJobOutput) ScheduledPreloadJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringOutput { return v.ScheduledPreloadJobName }).(pulumi.StringOutput)
}

// The site ID.
func (o ScheduledPreloadJobOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
func (o ScheduledPreloadJobOutput) UrlList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledPreloadJob) pulumi.StringPtrOutput { return v.UrlList }).(pulumi.StringPtrOutput)
}

type ScheduledPreloadJobArrayOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledPreloadJob)(nil)).Elem()
}

func (o ScheduledPreloadJobArrayOutput) ToScheduledPreloadJobArrayOutput() ScheduledPreloadJobArrayOutput {
	return o
}

func (o ScheduledPreloadJobArrayOutput) ToScheduledPreloadJobArrayOutputWithContext(ctx context.Context) ScheduledPreloadJobArrayOutput {
	return o
}

func (o ScheduledPreloadJobArrayOutput) Index(i pulumi.IntInput) ScheduledPreloadJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledPreloadJob {
		return vs[0].([]*ScheduledPreloadJob)[vs[1].(int)]
	}).(ScheduledPreloadJobOutput)
}

type ScheduledPreloadJobMapOutput struct{ *pulumi.OutputState }

func (ScheduledPreloadJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledPreloadJob)(nil)).Elem()
}

func (o ScheduledPreloadJobMapOutput) ToScheduledPreloadJobMapOutput() ScheduledPreloadJobMapOutput {
	return o
}

func (o ScheduledPreloadJobMapOutput) ToScheduledPreloadJobMapOutputWithContext(ctx context.Context) ScheduledPreloadJobMapOutput {
	return o
}

func (o ScheduledPreloadJobMapOutput) MapIndex(k pulumi.StringInput) ScheduledPreloadJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledPreloadJob {
		return vs[0].(map[string]*ScheduledPreloadJob)[vs[1].(string)]
	}).(ScheduledPreloadJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadJobInput)(nil)).Elem(), &ScheduledPreloadJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadJobArrayInput)(nil)).Elem(), ScheduledPreloadJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledPreloadJobMapInput)(nil)).Elem(), ScheduledPreloadJobMap{})
	pulumi.RegisterOutputType(ScheduledPreloadJobOutput{})
	pulumi.RegisterOutputType(ScheduledPreloadJobArrayOutput{})
	pulumi.RegisterOutputType(ScheduledPreloadJobMapOutput{})
}
