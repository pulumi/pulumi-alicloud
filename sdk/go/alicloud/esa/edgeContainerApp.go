// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Edge Container App resource.
//
// For information about ESA Edge Container App and how to use it, see [What is Edge Container App](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateEdgeContainerApp).
//
// > **NOTE:** Available since v1.247.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tfexample"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := esa.NewEdgeContainerApp(ctx, "default", &esa.EdgeContainerAppArgs{
//				TargetPort:           pulumi.Int(3000),
//				HealthCheckHost:      pulumi.String("example.com"),
//				Remarks:              pulumi.String(name),
//				HealthCheckPort:      pulumi.Int(80),
//				HealthCheckUri:       pulumi.String("/"),
//				HealthCheckTimeout:   pulumi.Int(3),
//				HealthCheckMethod:    pulumi.String("HEAD"),
//				HealthCheckHttpCode:  pulumi.String("http_2xx"),
//				HealthCheckFailTimes: pulumi.Int(5),
//				ServicePort:          pulumi.Int(80),
//				HealthCheckInterval:  pulumi.Int(5),
//				HealthCheckSuccTimes: pulumi.Int(2),
//				EdgeContainerAppName: pulumi.String(name),
//				HealthCheckType:      pulumi.String("l7"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Edge Container App can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/edgeContainerApp:EdgeContainerApp example <id>
// ```
type EdgeContainerApp struct {
	pulumi.CustomResourceState

	// The time when the application was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
	EdgeContainerAppName pulumi.StringOutput `pulumi:"edgeContainerAppName"`
	// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
	HealthCheckFailTimes pulumi.IntPtrOutput `pulumi:"healthCheckFailTimes"`
	// The health check type. By default, this parameter is left empty.
	//
	// Valid values:
	HealthCheckHost pulumi.StringPtrOutput `pulumi:"healthCheckHost"`
	// The domain name that is used for health checks. This parameter is empty by default.
	HealthCheckHttpCode pulumi.StringOutput `pulumi:"healthCheckHttpCode"`
	// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
	// Valid values: `1` to `100`.
	// Default value: `3`.
	HealthCheckInterval pulumi.IntOutput `pulumi:"healthCheckInterval"`
	// The HTTP status code returned for a successful health check. Valid values:
	//
	// - **http\_2xx** (default)
	// - **http\_3xx**
	HealthCheckMethod pulumi.StringOutput `pulumi:"healthCheckMethod"`
	// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
	HealthCheckPort pulumi.IntOutput `pulumi:"healthCheckPort"`
	// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
	HealthCheckSuccTimes pulumi.IntOutput `pulumi:"healthCheckSuccTimes"`
	// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
	HealthCheckTimeout pulumi.IntOutput `pulumi:"healthCheckTimeout"`
	// The remarks. This parameter is empty by default.
	HealthCheckType pulumi.StringOutput `pulumi:"healthCheckType"`
	// The HTTP request method for health checks. Valid values:
	//
	// - `HEAD` (default): requests the headers of the resource.
	// - `GET`: requests the specified resource and returns both the headers and entity body.
	HealthCheckUri pulumi.StringOutput `pulumi:"healthCheckUri"`
	// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
	Remarks pulumi.StringPtrOutput `pulumi:"remarks"`
	// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
	ServicePort pulumi.IntOutput `pulumi:"servicePort"`
	// The status of the application.
	Status pulumi.StringOutput `pulumi:"status"`
	// The server port. Valid values: 1 to 65535.
	TargetPort pulumi.IntOutput `pulumi:"targetPort"`
}

// NewEdgeContainerApp registers a new resource with the given unique name, arguments, and options.
func NewEdgeContainerApp(ctx *pulumi.Context,
	name string, args *EdgeContainerAppArgs, opts ...pulumi.ResourceOption) (*EdgeContainerApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeContainerAppName == nil {
		return nil, errors.New("invalid value for required argument 'EdgeContainerAppName'")
	}
	if args.ServicePort == nil {
		return nil, errors.New("invalid value for required argument 'ServicePort'")
	}
	if args.TargetPort == nil {
		return nil, errors.New("invalid value for required argument 'TargetPort'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeContainerApp
	err := ctx.RegisterResource("alicloud:esa/edgeContainerApp:EdgeContainerApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeContainerApp gets an existing EdgeContainerApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeContainerApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeContainerAppState, opts ...pulumi.ResourceOption) (*EdgeContainerApp, error) {
	var resource EdgeContainerApp
	err := ctx.ReadResource("alicloud:esa/edgeContainerApp:EdgeContainerApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeContainerApp resources.
type edgeContainerAppState struct {
	// The time when the application was created.
	CreateTime *string `pulumi:"createTime"`
	// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
	EdgeContainerAppName *string `pulumi:"edgeContainerAppName"`
	// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
	HealthCheckFailTimes *int `pulumi:"healthCheckFailTimes"`
	// The health check type. By default, this parameter is left empty.
	//
	// Valid values:
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The domain name that is used for health checks. This parameter is empty by default.
	HealthCheckHttpCode *string `pulumi:"healthCheckHttpCode"`
	// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
	// Valid values: `1` to `100`.
	// Default value: `3`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The HTTP status code returned for a successful health check. Valid values:
	//
	// - **http\_2xx** (default)
	// - **http\_3xx**
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
	HealthCheckSuccTimes *int `pulumi:"healthCheckSuccTimes"`
	// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The remarks. This parameter is empty by default.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The HTTP request method for health checks. Valid values:
	//
	// - `HEAD` (default): requests the headers of the resource.
	// - `GET`: requests the specified resource and returns both the headers and entity body.
	HealthCheckUri *string `pulumi:"healthCheckUri"`
	// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
	Remarks *string `pulumi:"remarks"`
	// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
	ServicePort *int `pulumi:"servicePort"`
	// The status of the application.
	Status *string `pulumi:"status"`
	// The server port. Valid values: 1 to 65535.
	TargetPort *int `pulumi:"targetPort"`
}

type EdgeContainerAppState struct {
	// The time when the application was created.
	CreateTime pulumi.StringPtrInput
	// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
	EdgeContainerAppName pulumi.StringPtrInput
	// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
	HealthCheckFailTimes pulumi.IntPtrInput
	// The health check type. By default, this parameter is left empty.
	//
	// Valid values:
	HealthCheckHost pulumi.StringPtrInput
	// The domain name that is used for health checks. This parameter is empty by default.
	HealthCheckHttpCode pulumi.StringPtrInput
	// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
	// Valid values: `1` to `100`.
	// Default value: `3`.
	HealthCheckInterval pulumi.IntPtrInput
	// The HTTP status code returned for a successful health check. Valid values:
	//
	// - **http\_2xx** (default)
	// - **http\_3xx**
	HealthCheckMethod pulumi.StringPtrInput
	// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
	HealthCheckPort pulumi.IntPtrInput
	// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
	HealthCheckSuccTimes pulumi.IntPtrInput
	// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
	HealthCheckTimeout pulumi.IntPtrInput
	// The remarks. This parameter is empty by default.
	HealthCheckType pulumi.StringPtrInput
	// The HTTP request method for health checks. Valid values:
	//
	// - `HEAD` (default): requests the headers of the resource.
	// - `GET`: requests the specified resource and returns both the headers and entity body.
	HealthCheckUri pulumi.StringPtrInput
	// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
	Remarks pulumi.StringPtrInput
	// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
	ServicePort pulumi.IntPtrInput
	// The status of the application.
	Status pulumi.StringPtrInput
	// The server port. Valid values: 1 to 65535.
	TargetPort pulumi.IntPtrInput
}

func (EdgeContainerAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeContainerAppState)(nil)).Elem()
}

type edgeContainerAppArgs struct {
	// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
	EdgeContainerAppName string `pulumi:"edgeContainerAppName"`
	// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
	HealthCheckFailTimes *int `pulumi:"healthCheckFailTimes"`
	// The health check type. By default, this parameter is left empty.
	//
	// Valid values:
	HealthCheckHost *string `pulumi:"healthCheckHost"`
	// The domain name that is used for health checks. This parameter is empty by default.
	HealthCheckHttpCode *string `pulumi:"healthCheckHttpCode"`
	// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
	// Valid values: `1` to `100`.
	// Default value: `3`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// The HTTP status code returned for a successful health check. Valid values:
	//
	// - **http\_2xx** (default)
	// - **http\_3xx**
	HealthCheckMethod *string `pulumi:"healthCheckMethod"`
	// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
	HealthCheckSuccTimes *int `pulumi:"healthCheckSuccTimes"`
	// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
	HealthCheckTimeout *int `pulumi:"healthCheckTimeout"`
	// The remarks. This parameter is empty by default.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The HTTP request method for health checks. Valid values:
	//
	// - `HEAD` (default): requests the headers of the resource.
	// - `GET`: requests the specified resource and returns both the headers and entity body.
	HealthCheckUri *string `pulumi:"healthCheckUri"`
	// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
	Remarks *string `pulumi:"remarks"`
	// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
	ServicePort int `pulumi:"servicePort"`
	// The server port. Valid values: 1 to 65535.
	TargetPort int `pulumi:"targetPort"`
}

// The set of arguments for constructing a EdgeContainerApp resource.
type EdgeContainerAppArgs struct {
	// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
	EdgeContainerAppName pulumi.StringInput
	// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
	HealthCheckFailTimes pulumi.IntPtrInput
	// The health check type. By default, this parameter is left empty.
	//
	// Valid values:
	HealthCheckHost pulumi.StringPtrInput
	// The domain name that is used for health checks. This parameter is empty by default.
	HealthCheckHttpCode pulumi.StringPtrInput
	// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
	// Valid values: `1` to `100`.
	// Default value: `3`.
	HealthCheckInterval pulumi.IntPtrInput
	// The HTTP status code returned for a successful health check. Valid values:
	//
	// - **http\_2xx** (default)
	// - **http\_3xx**
	HealthCheckMethod pulumi.StringPtrInput
	// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
	HealthCheckPort pulumi.IntPtrInput
	// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
	HealthCheckSuccTimes pulumi.IntPtrInput
	// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
	HealthCheckTimeout pulumi.IntPtrInput
	// The remarks. This parameter is empty by default.
	HealthCheckType pulumi.StringPtrInput
	// The HTTP request method for health checks. Valid values:
	//
	// - `HEAD` (default): requests the headers of the resource.
	// - `GET`: requests the specified resource and returns both the headers and entity body.
	HealthCheckUri pulumi.StringPtrInput
	// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
	Remarks pulumi.StringPtrInput
	// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
	ServicePort pulumi.IntInput
	// The server port. Valid values: 1 to 65535.
	TargetPort pulumi.IntInput
}

func (EdgeContainerAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeContainerAppArgs)(nil)).Elem()
}

type EdgeContainerAppInput interface {
	pulumi.Input

	ToEdgeContainerAppOutput() EdgeContainerAppOutput
	ToEdgeContainerAppOutputWithContext(ctx context.Context) EdgeContainerAppOutput
}

func (*EdgeContainerApp) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeContainerApp)(nil)).Elem()
}

func (i *EdgeContainerApp) ToEdgeContainerAppOutput() EdgeContainerAppOutput {
	return i.ToEdgeContainerAppOutputWithContext(context.Background())
}

func (i *EdgeContainerApp) ToEdgeContainerAppOutputWithContext(ctx context.Context) EdgeContainerAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeContainerAppOutput)
}

// EdgeContainerAppArrayInput is an input type that accepts EdgeContainerAppArray and EdgeContainerAppArrayOutput values.
// You can construct a concrete instance of `EdgeContainerAppArrayInput` via:
//
//	EdgeContainerAppArray{ EdgeContainerAppArgs{...} }
type EdgeContainerAppArrayInput interface {
	pulumi.Input

	ToEdgeContainerAppArrayOutput() EdgeContainerAppArrayOutput
	ToEdgeContainerAppArrayOutputWithContext(context.Context) EdgeContainerAppArrayOutput
}

type EdgeContainerAppArray []EdgeContainerAppInput

func (EdgeContainerAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeContainerApp)(nil)).Elem()
}

func (i EdgeContainerAppArray) ToEdgeContainerAppArrayOutput() EdgeContainerAppArrayOutput {
	return i.ToEdgeContainerAppArrayOutputWithContext(context.Background())
}

func (i EdgeContainerAppArray) ToEdgeContainerAppArrayOutputWithContext(ctx context.Context) EdgeContainerAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeContainerAppArrayOutput)
}

// EdgeContainerAppMapInput is an input type that accepts EdgeContainerAppMap and EdgeContainerAppMapOutput values.
// You can construct a concrete instance of `EdgeContainerAppMapInput` via:
//
//	EdgeContainerAppMap{ "key": EdgeContainerAppArgs{...} }
type EdgeContainerAppMapInput interface {
	pulumi.Input

	ToEdgeContainerAppMapOutput() EdgeContainerAppMapOutput
	ToEdgeContainerAppMapOutputWithContext(context.Context) EdgeContainerAppMapOutput
}

type EdgeContainerAppMap map[string]EdgeContainerAppInput

func (EdgeContainerAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeContainerApp)(nil)).Elem()
}

func (i EdgeContainerAppMap) ToEdgeContainerAppMapOutput() EdgeContainerAppMapOutput {
	return i.ToEdgeContainerAppMapOutputWithContext(context.Background())
}

func (i EdgeContainerAppMap) ToEdgeContainerAppMapOutputWithContext(ctx context.Context) EdgeContainerAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeContainerAppMapOutput)
}

type EdgeContainerAppOutput struct{ *pulumi.OutputState }

func (EdgeContainerAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeContainerApp)(nil)).Elem()
}

func (o EdgeContainerAppOutput) ToEdgeContainerAppOutput() EdgeContainerAppOutput {
	return o
}

func (o EdgeContainerAppOutput) ToEdgeContainerAppOutputWithContext(ctx context.Context) EdgeContainerAppOutput {
	return o
}

// The time when the application was created.
func (o EdgeContainerAppOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The application name must start with a lowercase letter. Lowercase letters, numbers, and bars are supported. The length is limited to 6 to 128 characters.
func (o EdgeContainerAppOutput) EdgeContainerAppName() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.EdgeContainerAppName }).(pulumi.StringOutput)
}

// The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
func (o EdgeContainerAppOutput) HealthCheckFailTimes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntPtrOutput { return v.HealthCheckFailTimes }).(pulumi.IntPtrOutput)
}

// The health check type. By default, this parameter is left empty.
//
// Valid values:
func (o EdgeContainerAppOutput) HealthCheckHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringPtrOutput { return v.HealthCheckHost }).(pulumi.StringPtrOutput)
}

// The domain name that is used for health checks. This parameter is empty by default.
func (o EdgeContainerAppOutput) HealthCheckHttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.HealthCheckHttpCode }).(pulumi.StringOutput)
}

// The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.
// Valid values: `1` to `100`.
// Default value: `3`.
func (o EdgeContainerAppOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The HTTP status code returned for a successful health check. Valid values:
//
// - **http\_2xx** (default)
// - **http\_3xx**
func (o EdgeContainerAppOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The URI used for health checks. The URI must be `1` to `80` characters in length. Default value: "/".
func (o EdgeContainerAppOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// The interval between two consecutive health checks. Unit: seconds. Valid values: `1` to `50`. Default value: `5`.
func (o EdgeContainerAppOutput) HealthCheckSuccTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.HealthCheckSuccTimes }).(pulumi.IntOutput)
}

// The port used for health checks. Valid values: 1 to 65535. Default value: 80.
func (o EdgeContainerAppOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The remarks. This parameter is empty by default.
func (o EdgeContainerAppOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.HealthCheckType }).(pulumi.StringOutput)
}

// The HTTP request method for health checks. Valid values:
//
// - `HEAD` (default): requests the headers of the resource.
// - `GET`: requests the specified resource and returns both the headers and entity body.
func (o EdgeContainerAppOutput) HealthCheckUri() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.HealthCheckUri }).(pulumi.StringOutput)
}

// The backend port, which is also the service port of the application. Valid values: 1 to 65535.
func (o EdgeContainerAppOutput) Remarks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringPtrOutput { return v.Remarks }).(pulumi.StringPtrOutput)
}

// The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
func (o EdgeContainerAppOutput) ServicePort() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.ServicePort }).(pulumi.IntOutput)
}

// The status of the application.
func (o EdgeContainerAppOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The server port. Valid values: 1 to 65535.
func (o EdgeContainerAppOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeContainerApp) pulumi.IntOutput { return v.TargetPort }).(pulumi.IntOutput)
}

type EdgeContainerAppArrayOutput struct{ *pulumi.OutputState }

func (EdgeContainerAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeContainerApp)(nil)).Elem()
}

func (o EdgeContainerAppArrayOutput) ToEdgeContainerAppArrayOutput() EdgeContainerAppArrayOutput {
	return o
}

func (o EdgeContainerAppArrayOutput) ToEdgeContainerAppArrayOutputWithContext(ctx context.Context) EdgeContainerAppArrayOutput {
	return o
}

func (o EdgeContainerAppArrayOutput) Index(i pulumi.IntInput) EdgeContainerAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeContainerApp {
		return vs[0].([]*EdgeContainerApp)[vs[1].(int)]
	}).(EdgeContainerAppOutput)
}

type EdgeContainerAppMapOutput struct{ *pulumi.OutputState }

func (EdgeContainerAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeContainerApp)(nil)).Elem()
}

func (o EdgeContainerAppMapOutput) ToEdgeContainerAppMapOutput() EdgeContainerAppMapOutput {
	return o
}

func (o EdgeContainerAppMapOutput) ToEdgeContainerAppMapOutputWithContext(ctx context.Context) EdgeContainerAppMapOutput {
	return o
}

func (o EdgeContainerAppMapOutput) MapIndex(k pulumi.StringInput) EdgeContainerAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeContainerApp {
		return vs[0].(map[string]*EdgeContainerApp)[vs[1].(string)]
	}).(EdgeContainerAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeContainerAppInput)(nil)).Elem(), &EdgeContainerApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeContainerAppArrayInput)(nil)).Elem(), EdgeContainerAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeContainerAppMapInput)(nil)).Elem(), EdgeContainerAppMap{})
	pulumi.RegisterOutputType(EdgeContainerAppOutput{})
	pulumi.RegisterOutputType(EdgeContainerAppArrayOutput{})
	pulumi.RegisterOutputType(EdgeContainerAppMapOutput{})
}
