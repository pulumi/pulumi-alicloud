// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Load Balancer resource.
//
// For information about ESA Load Balancer and how to use it, see [What is Load Balancer](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateLoadBalancer).
//
// > **NOTE:** Available since v1.262.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			resourceSiteOriginPool, err := esa.NewSite(ctx, "resource_Site_OriginPool", &esa.SiteArgs{
//				SiteName:   pulumi.Sprintf("%v%v.com", name, defaultInteger.Result),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			resourceOriginPoolLoadBalancer11, err := esa.NewOriginPool(ctx, "resource_OriginPool_LoadBalancer_1_1", &esa.OriginPoolArgs{
//				Origins: esa.OriginPoolOriginArray{
//					&esa.OriginPoolOriginArgs{
//						Type:    pulumi.String("ip_domain"),
//						Address: pulumi.String("www.example.com"),
//						Header:  pulumi.String("{\"Host\":[\"www.example.com\"]}"),
//						Enabled: pulumi.Bool(true),
//						Weight:  pulumi.Int(30),
//						Name:    pulumi.String("origin1"),
//					},
//				},
//				SiteId:         resourceSiteOriginPool.ID(),
//				OriginPoolName: pulumi.String("originpool1"),
//				Enabled:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewLoadBalancer(ctx, "default", &esa.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String("lb.exampleloadbalancer.top"),
//				FallbackPool:     resourceOriginPoolLoadBalancer11.OriginPoolId,
//				SiteId:           resourceSiteOriginPool.ID(),
//				Description:      pulumi.String(name),
//				DefaultPools: pulumi.IntArray{
//					resourceOriginPoolLoadBalancer11.OriginPoolId,
//				},
//				SteeringPolicy: pulumi.String("geo"),
//				Monitor: &esa.LoadBalancerMonitorArgs{
//					Type:             pulumi.String("ICMP Ping"),
//					Timeout:          pulumi.Int(5),
//					MonitoringRegion: pulumi.String("ChineseMainland"),
//					ConsecutiveUp:    pulumi.Int(3),
//					ConsecutiveDown:  pulumi.Int(5),
//					Interval:         pulumi.Int(60),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Load Balancer can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/loadBalancer:LoadBalancer example <site_id>:<load_balancer_id>
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Cross-pool origin configuration. See `adaptiveRouting` below.
	AdaptiveRouting LoadBalancerAdaptiveRoutingOutput `pulumi:"adaptiveRouting"`
	// List of default pool IDs.
	DefaultPools pulumi.IntArrayOutput `pulumi:"defaultPools"`
	// The detailed description of the load balancer for easy management and identification.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the load balancer is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
	FallbackPool pulumi.IntOutput `pulumi:"fallbackPool"`
	// The unique identifier ID of the load balancer.
	LoadBalancerId pulumi.IntOutput `pulumi:"loadBalancerId"`
	// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// Monitor configuration for health check. See `monitor` below.
	Monitor LoadBalancerMonitorOutput `pulumi:"monitor"`
	// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
	RandomSteering LoadBalancerRandomSteeringPtrOutput `pulumi:"randomSteering"`
	// Address pools corresponding to primary regions.
	RegionPools pulumi.StringPtrOutput `pulumi:"regionPools"`
	// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
	Rules LoadBalancerRuleArrayOutput `pulumi:"rules"`
	// Session persistence. Valid values:
	SessionAffinity pulumi.StringPtrOutput `pulumi:"sessionAffinity"`
	// The site ID.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The status of the load balancer.
	Status pulumi.StringOutput `pulumi:"status"`
	// Load balancing policy.
	SteeringPolicy pulumi.StringOutput `pulumi:"steeringPolicy"`
	// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
	SubRegionPools pulumi.StringPtrOutput `pulumi:"subRegionPools"`
	// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultPools == nil {
		return nil, errors.New("invalid value for required argument 'DefaultPools'")
	}
	if args.FallbackPool == nil {
		return nil, errors.New("invalid value for required argument 'FallbackPool'")
	}
	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	if args.Monitor == nil {
		return nil, errors.New("invalid value for required argument 'Monitor'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.SteeringPolicy == nil {
		return nil, errors.New("invalid value for required argument 'SteeringPolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("alicloud:esa/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("alicloud:esa/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Cross-pool origin configuration. See `adaptiveRouting` below.
	AdaptiveRouting *LoadBalancerAdaptiveRouting `pulumi:"adaptiveRouting"`
	// List of default pool IDs.
	DefaultPools []int `pulumi:"defaultPools"`
	// The detailed description of the load balancer for easy management and identification.
	Description *string `pulumi:"description"`
	// Whether the load balancer is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
	FallbackPool *int `pulumi:"fallbackPool"`
	// The unique identifier ID of the load balancer.
	LoadBalancerId *int `pulumi:"loadBalancerId"`
	// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// Monitor configuration for health check. See `monitor` below.
	Monitor *LoadBalancerMonitor `pulumi:"monitor"`
	// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
	RandomSteering *LoadBalancerRandomSteering `pulumi:"randomSteering"`
	// Address pools corresponding to primary regions.
	RegionPools *string `pulumi:"regionPools"`
	// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Session persistence. Valid values:
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// The site ID.
	SiteId *int `pulumi:"siteId"`
	// The status of the load balancer.
	Status *string `pulumi:"status"`
	// Load balancing policy.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
	SubRegionPools *string `pulumi:"subRegionPools"`
	// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
	Ttl *int `pulumi:"ttl"`
}

type LoadBalancerState struct {
	// Cross-pool origin configuration. See `adaptiveRouting` below.
	AdaptiveRouting LoadBalancerAdaptiveRoutingPtrInput
	// List of default pool IDs.
	DefaultPools pulumi.IntArrayInput
	// The detailed description of the load balancer for easy management and identification.
	Description pulumi.StringPtrInput
	// Whether the load balancer is enabled.
	Enabled pulumi.BoolPtrInput
	// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
	FallbackPool pulumi.IntPtrInput
	// The unique identifier ID of the load balancer.
	LoadBalancerId pulumi.IntPtrInput
	// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
	LoadBalancerName pulumi.StringPtrInput
	// Monitor configuration for health check. See `monitor` below.
	Monitor LoadBalancerMonitorPtrInput
	// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
	RandomSteering LoadBalancerRandomSteeringPtrInput
	// Address pools corresponding to primary regions.
	RegionPools pulumi.StringPtrInput
	// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
	Rules LoadBalancerRuleArrayInput
	// Session persistence. Valid values:
	SessionAffinity pulumi.StringPtrInput
	// The site ID.
	SiteId pulumi.IntPtrInput
	// The status of the load balancer.
	Status pulumi.StringPtrInput
	// Load balancing policy.
	SteeringPolicy pulumi.StringPtrInput
	// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
	SubRegionPools pulumi.StringPtrInput
	// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
	Ttl pulumi.IntPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Cross-pool origin configuration. See `adaptiveRouting` below.
	AdaptiveRouting *LoadBalancerAdaptiveRouting `pulumi:"adaptiveRouting"`
	// List of default pool IDs.
	DefaultPools []int `pulumi:"defaultPools"`
	// The detailed description of the load balancer for easy management and identification.
	Description *string `pulumi:"description"`
	// Whether the load balancer is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
	FallbackPool int `pulumi:"fallbackPool"`
	// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// Monitor configuration for health check. See `monitor` below.
	Monitor LoadBalancerMonitor `pulumi:"monitor"`
	// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
	RandomSteering *LoadBalancerRandomSteering `pulumi:"randomSteering"`
	// Address pools corresponding to primary regions.
	RegionPools *string `pulumi:"regionPools"`
	// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Session persistence. Valid values:
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// The site ID.
	SiteId int `pulumi:"siteId"`
	// Load balancing policy.
	SteeringPolicy string `pulumi:"steeringPolicy"`
	// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
	SubRegionPools *string `pulumi:"subRegionPools"`
	// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Cross-pool origin configuration. See `adaptiveRouting` below.
	AdaptiveRouting LoadBalancerAdaptiveRoutingPtrInput
	// List of default pool IDs.
	DefaultPools pulumi.IntArrayInput
	// The detailed description of the load balancer for easy management and identification.
	Description pulumi.StringPtrInput
	// Whether the load balancer is enabled.
	Enabled pulumi.BoolPtrInput
	// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
	FallbackPool pulumi.IntInput
	// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
	LoadBalancerName pulumi.StringInput
	// Monitor configuration for health check. See `monitor` below.
	Monitor LoadBalancerMonitorInput
	// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
	RandomSteering LoadBalancerRandomSteeringPtrInput
	// Address pools corresponding to primary regions.
	RegionPools pulumi.StringPtrInput
	// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
	Rules LoadBalancerRuleArrayInput
	// Session persistence. Valid values:
	SessionAffinity pulumi.StringPtrInput
	// The site ID.
	SiteId pulumi.IntInput
	// Load balancing policy.
	SteeringPolicy pulumi.StringInput
	// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
	SubRegionPools pulumi.StringPtrInput
	// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
	Ttl pulumi.IntPtrInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Cross-pool origin configuration. See `adaptiveRouting` below.
func (o LoadBalancerOutput) AdaptiveRouting() LoadBalancerAdaptiveRoutingOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerAdaptiveRoutingOutput { return v.AdaptiveRouting }).(LoadBalancerAdaptiveRoutingOutput)
}

// List of default pool IDs.
func (o LoadBalancerOutput) DefaultPools() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntArrayOutput { return v.DefaultPools }).(pulumi.IntArrayOutput)
}

// The detailed description of the load balancer for easy management and identification.
func (o LoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the load balancer is enabled.
func (o LoadBalancerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.
func (o LoadBalancerOutput) FallbackPool() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntOutput { return v.FallbackPool }).(pulumi.IntOutput)
}

// The unique identifier ID of the load balancer.
func (o LoadBalancerOutput) LoadBalancerId() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntOutput { return v.LoadBalancerId }).(pulumi.IntOutput)
}

// The name of the load balancer must meet the domain name format verification and be a subdomain name under the site.
func (o LoadBalancerOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// Monitor configuration for health check. See `monitor` below.
func (o LoadBalancerOutput) Monitor() LoadBalancerMonitorOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerMonitorOutput { return v.Monitor }).(LoadBalancerMonitorOutput)
}

// Weighted round-robin configuration, used to control the traffic distribution weights among different pools. See `randomSteering` below.
func (o LoadBalancerOutput) RandomSteering() LoadBalancerRandomSteeringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRandomSteeringPtrOutput { return v.RandomSteering }).(LoadBalancerRandomSteeringPtrOutput)
}

// Address pools corresponding to primary regions.
func (o LoadBalancerOutput) RegionPools() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.RegionPools }).(pulumi.StringPtrOutput)
}

// Rule configuration list, used to define behavior under specific conditions. See `rules` below.
func (o LoadBalancerOutput) Rules() LoadBalancerRuleArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRuleArrayOutput { return v.Rules }).(LoadBalancerRuleArrayOutput)
}

// Session persistence. Valid values:
func (o LoadBalancerOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// The site ID.
func (o LoadBalancerOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The status of the load balancer.
func (o LoadBalancerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Load balancing policy.
func (o LoadBalancerOutput) SteeringPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.SteeringPolicy }).(pulumi.StringOutput)
}

// Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.
func (o LoadBalancerOutput) SubRegionPools() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.SubRegionPools }).(pulumi.StringPtrOutput)
}

// TTL value, the time-to-live for DNS records. The default value is 30. The value range is 10-600.
func (o LoadBalancerOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
