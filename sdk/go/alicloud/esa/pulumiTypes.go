// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HttpRequestHeaderModificationRuleRequestHeaderModification struct {
	// Request Header Name.
	Name string `pulumi:"name"`
	// Mode of operation. Value range:
	// add: add.
	// del: delete
	// modify: change.
	Operation string `pulumi:"operation"`
	// Request header value
	Value *string `pulumi:"value"`
}

// HttpRequestHeaderModificationRuleRequestHeaderModificationInput is an input type that accepts HttpRequestHeaderModificationRuleRequestHeaderModificationArgs and HttpRequestHeaderModificationRuleRequestHeaderModificationOutput values.
// You can construct a concrete instance of `HttpRequestHeaderModificationRuleRequestHeaderModificationInput` via:
//
//	HttpRequestHeaderModificationRuleRequestHeaderModificationArgs{...}
type HttpRequestHeaderModificationRuleRequestHeaderModificationInput interface {
	pulumi.Input

	ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationOutput
	ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutputWithContext(context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationOutput
}

type HttpRequestHeaderModificationRuleRequestHeaderModificationArgs struct {
	// Request Header Name.
	Name pulumi.StringInput `pulumi:"name"`
	// Mode of operation. Value range:
	// add: add.
	// del: delete
	// modify: change.
	Operation pulumi.StringInput `pulumi:"operation"`
	// Request header value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HttpRequestHeaderModificationRuleRequestHeaderModificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequestHeaderModificationRuleRequestHeaderModification)(nil)).Elem()
}

func (i HttpRequestHeaderModificationRuleRequestHeaderModificationArgs) ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationOutput {
	return i.ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutputWithContext(context.Background())
}

func (i HttpRequestHeaderModificationRuleRequestHeaderModificationArgs) ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutputWithContext(ctx context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestHeaderModificationRuleRequestHeaderModificationOutput)
}

// HttpRequestHeaderModificationRuleRequestHeaderModificationArrayInput is an input type that accepts HttpRequestHeaderModificationRuleRequestHeaderModificationArray and HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput values.
// You can construct a concrete instance of `HttpRequestHeaderModificationRuleRequestHeaderModificationArrayInput` via:
//
//	HttpRequestHeaderModificationRuleRequestHeaderModificationArray{ HttpRequestHeaderModificationRuleRequestHeaderModificationArgs{...} }
type HttpRequestHeaderModificationRuleRequestHeaderModificationArrayInput interface {
	pulumi.Input

	ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput
	ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutputWithContext(context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput
}

type HttpRequestHeaderModificationRuleRequestHeaderModificationArray []HttpRequestHeaderModificationRuleRequestHeaderModificationInput

func (HttpRequestHeaderModificationRuleRequestHeaderModificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRequestHeaderModificationRuleRequestHeaderModification)(nil)).Elem()
}

func (i HttpRequestHeaderModificationRuleRequestHeaderModificationArray) ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput {
	return i.ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutputWithContext(context.Background())
}

func (i HttpRequestHeaderModificationRuleRequestHeaderModificationArray) ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutputWithContext(ctx context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput)
}

type HttpRequestHeaderModificationRuleRequestHeaderModificationOutput struct{ *pulumi.OutputState }

func (HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequestHeaderModificationRuleRequestHeaderModification)(nil)).Elem()
}

func (o HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationOutput {
	return o
}

func (o HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) ToHttpRequestHeaderModificationRuleRequestHeaderModificationOutputWithContext(ctx context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationOutput {
	return o
}

// Request Header Name.
func (o HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRequestHeaderModificationRuleRequestHeaderModification) string { return v.Name }).(pulumi.StringOutput)
}

// Mode of operation. Value range:
// add: add.
// del: delete
// modify: change.
func (o HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRequestHeaderModificationRuleRequestHeaderModification) string { return v.Operation }).(pulumi.StringOutput)
}

// Request header value
func (o HttpRequestHeaderModificationRuleRequestHeaderModificationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRequestHeaderModificationRuleRequestHeaderModification) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput struct{ *pulumi.OutputState }

func (HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRequestHeaderModificationRuleRequestHeaderModification)(nil)).Elem()
}

func (o HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput) ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput() HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput {
	return o
}

func (o HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput) ToHttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutputWithContext(ctx context.Context) HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput {
	return o
}

func (o HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput) Index(i pulumi.IntInput) HttpRequestHeaderModificationRuleRequestHeaderModificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRequestHeaderModificationRuleRequestHeaderModification {
		return vs[0].([]HttpRequestHeaderModificationRuleRequestHeaderModification)[vs[1].(int)]
	}).(HttpRequestHeaderModificationRuleRequestHeaderModificationOutput)
}

type HttpResponseHeaderModificationRuleResponseHeaderModification struct {
	// The response header name.
	Name string `pulumi:"name"`
	// Mode of operation.
	Operation string `pulumi:"operation"`
	// The response header value.
	Value *string `pulumi:"value"`
}

// HttpResponseHeaderModificationRuleResponseHeaderModificationInput is an input type that accepts HttpResponseHeaderModificationRuleResponseHeaderModificationArgs and HttpResponseHeaderModificationRuleResponseHeaderModificationOutput values.
// You can construct a concrete instance of `HttpResponseHeaderModificationRuleResponseHeaderModificationInput` via:
//
//	HttpResponseHeaderModificationRuleResponseHeaderModificationArgs{...}
type HttpResponseHeaderModificationRuleResponseHeaderModificationInput interface {
	pulumi.Input

	ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationOutput
	ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutputWithContext(context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationOutput
}

type HttpResponseHeaderModificationRuleResponseHeaderModificationArgs struct {
	// The response header name.
	Name pulumi.StringInput `pulumi:"name"`
	// Mode of operation.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The response header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HttpResponseHeaderModificationRuleResponseHeaderModificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpResponseHeaderModificationRuleResponseHeaderModification)(nil)).Elem()
}

func (i HttpResponseHeaderModificationRuleResponseHeaderModificationArgs) ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationOutput {
	return i.ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutputWithContext(context.Background())
}

func (i HttpResponseHeaderModificationRuleResponseHeaderModificationArgs) ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutputWithContext(ctx context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpResponseHeaderModificationRuleResponseHeaderModificationOutput)
}

// HttpResponseHeaderModificationRuleResponseHeaderModificationArrayInput is an input type that accepts HttpResponseHeaderModificationRuleResponseHeaderModificationArray and HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput values.
// You can construct a concrete instance of `HttpResponseHeaderModificationRuleResponseHeaderModificationArrayInput` via:
//
//	HttpResponseHeaderModificationRuleResponseHeaderModificationArray{ HttpResponseHeaderModificationRuleResponseHeaderModificationArgs{...} }
type HttpResponseHeaderModificationRuleResponseHeaderModificationArrayInput interface {
	pulumi.Input

	ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput
	ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutputWithContext(context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput
}

type HttpResponseHeaderModificationRuleResponseHeaderModificationArray []HttpResponseHeaderModificationRuleResponseHeaderModificationInput

func (HttpResponseHeaderModificationRuleResponseHeaderModificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpResponseHeaderModificationRuleResponseHeaderModification)(nil)).Elem()
}

func (i HttpResponseHeaderModificationRuleResponseHeaderModificationArray) ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput {
	return i.ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutputWithContext(context.Background())
}

func (i HttpResponseHeaderModificationRuleResponseHeaderModificationArray) ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutputWithContext(ctx context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput)
}

type HttpResponseHeaderModificationRuleResponseHeaderModificationOutput struct{ *pulumi.OutputState }

func (HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpResponseHeaderModificationRuleResponseHeaderModification)(nil)).Elem()
}

func (o HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationOutput {
	return o
}

func (o HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) ToHttpResponseHeaderModificationRuleResponseHeaderModificationOutputWithContext(ctx context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationOutput {
	return o
}

// The response header name.
func (o HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HttpResponseHeaderModificationRuleResponseHeaderModification) string { return v.Name }).(pulumi.StringOutput)
}

// Mode of operation.
func (o HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v HttpResponseHeaderModificationRuleResponseHeaderModification) string { return v.Operation }).(pulumi.StringOutput)
}

// The response header value.
func (o HttpResponseHeaderModificationRuleResponseHeaderModificationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpResponseHeaderModificationRuleResponseHeaderModification) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput struct{ *pulumi.OutputState }

func (HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpResponseHeaderModificationRuleResponseHeaderModification)(nil)).Elem()
}

func (o HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput) ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput() HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput {
	return o
}

func (o HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput) ToHttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutputWithContext(ctx context.Context) HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput {
	return o
}

func (o HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput) Index(i pulumi.IntInput) HttpResponseHeaderModificationRuleResponseHeaderModificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpResponseHeaderModificationRuleResponseHeaderModification {
		return vs[0].([]HttpResponseHeaderModificationRuleResponseHeaderModification)[vs[1].(int)]
	}).(HttpResponseHeaderModificationRuleResponseHeaderModificationOutput)
}

type OriginPoolOrigin struct {
	// Origin Address.
	Address *string `pulumi:"address"`
	// The authentication information. When the source Station is an OSS or S3 and other source stations need to be authenticated, the authentication-related configuration information needs to be transmitted. See `authConf` below.
	AuthConf *OriginPoolOriginAuthConf `pulumi:"authConf"`
	// Whether the source station is enabled:
	Enabled *bool `pulumi:"enabled"`
	// The request header that is sent when returning to the source. Only Host is supported.
	Header *string `pulumi:"header"`
	// Origin Name.
	Name *string `pulumi:"name"`
	// Origin ID.
	OriginId *int `pulumi:"originId"`
	// Source station type:
	Type *string `pulumi:"type"`
	// Weight, 0-100.
	Weight *int `pulumi:"weight"`
}

// OriginPoolOriginInput is an input type that accepts OriginPoolOriginArgs and OriginPoolOriginOutput values.
// You can construct a concrete instance of `OriginPoolOriginInput` via:
//
//	OriginPoolOriginArgs{...}
type OriginPoolOriginInput interface {
	pulumi.Input

	ToOriginPoolOriginOutput() OriginPoolOriginOutput
	ToOriginPoolOriginOutputWithContext(context.Context) OriginPoolOriginOutput
}

type OriginPoolOriginArgs struct {
	// Origin Address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The authentication information. When the source Station is an OSS or S3 and other source stations need to be authenticated, the authentication-related configuration information needs to be transmitted. See `authConf` below.
	AuthConf OriginPoolOriginAuthConfPtrInput `pulumi:"authConf"`
	// Whether the source station is enabled:
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The request header that is sent when returning to the source. Only Host is supported.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// Origin Name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Origin ID.
	OriginId pulumi.IntPtrInput `pulumi:"originId"`
	// Source station type:
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Weight, 0-100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (OriginPoolOriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginPoolOrigin)(nil)).Elem()
}

func (i OriginPoolOriginArgs) ToOriginPoolOriginOutput() OriginPoolOriginOutput {
	return i.ToOriginPoolOriginOutputWithContext(context.Background())
}

func (i OriginPoolOriginArgs) ToOriginPoolOriginOutputWithContext(ctx context.Context) OriginPoolOriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPoolOriginOutput)
}

// OriginPoolOriginArrayInput is an input type that accepts OriginPoolOriginArray and OriginPoolOriginArrayOutput values.
// You can construct a concrete instance of `OriginPoolOriginArrayInput` via:
//
//	OriginPoolOriginArray{ OriginPoolOriginArgs{...} }
type OriginPoolOriginArrayInput interface {
	pulumi.Input

	ToOriginPoolOriginArrayOutput() OriginPoolOriginArrayOutput
	ToOriginPoolOriginArrayOutputWithContext(context.Context) OriginPoolOriginArrayOutput
}

type OriginPoolOriginArray []OriginPoolOriginInput

func (OriginPoolOriginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginPoolOrigin)(nil)).Elem()
}

func (i OriginPoolOriginArray) ToOriginPoolOriginArrayOutput() OriginPoolOriginArrayOutput {
	return i.ToOriginPoolOriginArrayOutputWithContext(context.Background())
}

func (i OriginPoolOriginArray) ToOriginPoolOriginArrayOutputWithContext(ctx context.Context) OriginPoolOriginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPoolOriginArrayOutput)
}

type OriginPoolOriginOutput struct{ *pulumi.OutputState }

func (OriginPoolOriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginPoolOrigin)(nil)).Elem()
}

func (o OriginPoolOriginOutput) ToOriginPoolOriginOutput() OriginPoolOriginOutput {
	return o
}

func (o OriginPoolOriginOutput) ToOriginPoolOriginOutputWithContext(ctx context.Context) OriginPoolOriginOutput {
	return o
}

// Origin Address.
func (o OriginPoolOriginOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The authentication information. When the source Station is an OSS or S3 and other source stations need to be authenticated, the authentication-related configuration information needs to be transmitted. See `authConf` below.
func (o OriginPoolOriginOutput) AuthConf() OriginPoolOriginAuthConfPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *OriginPoolOriginAuthConf { return v.AuthConf }).(OriginPoolOriginAuthConfPtrOutput)
}

// Whether the source station is enabled:
func (o OriginPoolOriginOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The request header that is sent when returning to the source. Only Host is supported.
func (o OriginPoolOriginOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// Origin Name.
func (o OriginPoolOriginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Origin ID.
func (o OriginPoolOriginOutput) OriginId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *int { return v.OriginId }).(pulumi.IntPtrOutput)
}

// Source station type:
func (o OriginPoolOriginOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Weight, 0-100.
func (o OriginPoolOriginOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginPoolOrigin) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type OriginPoolOriginArrayOutput struct{ *pulumi.OutputState }

func (OriginPoolOriginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginPoolOrigin)(nil)).Elem()
}

func (o OriginPoolOriginArrayOutput) ToOriginPoolOriginArrayOutput() OriginPoolOriginArrayOutput {
	return o
}

func (o OriginPoolOriginArrayOutput) ToOriginPoolOriginArrayOutputWithContext(ctx context.Context) OriginPoolOriginArrayOutput {
	return o
}

func (o OriginPoolOriginArrayOutput) Index(i pulumi.IntInput) OriginPoolOriginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginPoolOrigin {
		return vs[0].([]OriginPoolOrigin)[vs[1].(int)]
	}).(OriginPoolOriginOutput)
}

type OriginPoolOriginAuthConf struct {
	// The AccessKey to be passed when AuthType is set to privateCrossAccount or private.
	AccessKey *string `pulumi:"accessKey"`
	// Authentication type.
	AuthType *string `pulumi:"authType"`
	// The Region of the source station to be transmitted when the source station is AWS S3.
	Region *string `pulumi:"region"`
	// The SecretKey to be passed when AuthType is set to privateCrossAccount or private.
	SecretKey *string `pulumi:"secretKey"`
	// The signature version to be transmitted when the source station is AWS S3.
	Version *string `pulumi:"version"`
}

// OriginPoolOriginAuthConfInput is an input type that accepts OriginPoolOriginAuthConfArgs and OriginPoolOriginAuthConfOutput values.
// You can construct a concrete instance of `OriginPoolOriginAuthConfInput` via:
//
//	OriginPoolOriginAuthConfArgs{...}
type OriginPoolOriginAuthConfInput interface {
	pulumi.Input

	ToOriginPoolOriginAuthConfOutput() OriginPoolOriginAuthConfOutput
	ToOriginPoolOriginAuthConfOutputWithContext(context.Context) OriginPoolOriginAuthConfOutput
}

type OriginPoolOriginAuthConfArgs struct {
	// The AccessKey to be passed when AuthType is set to privateCrossAccount or private.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Authentication type.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// The Region of the source station to be transmitted when the source station is AWS S3.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The SecretKey to be passed when AuthType is set to privateCrossAccount or private.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The signature version to be transmitted when the source station is AWS S3.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (OriginPoolOriginAuthConfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginPoolOriginAuthConf)(nil)).Elem()
}

func (i OriginPoolOriginAuthConfArgs) ToOriginPoolOriginAuthConfOutput() OriginPoolOriginAuthConfOutput {
	return i.ToOriginPoolOriginAuthConfOutputWithContext(context.Background())
}

func (i OriginPoolOriginAuthConfArgs) ToOriginPoolOriginAuthConfOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPoolOriginAuthConfOutput)
}

func (i OriginPoolOriginAuthConfArgs) ToOriginPoolOriginAuthConfPtrOutput() OriginPoolOriginAuthConfPtrOutput {
	return i.ToOriginPoolOriginAuthConfPtrOutputWithContext(context.Background())
}

func (i OriginPoolOriginAuthConfArgs) ToOriginPoolOriginAuthConfPtrOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPoolOriginAuthConfOutput).ToOriginPoolOriginAuthConfPtrOutputWithContext(ctx)
}

// OriginPoolOriginAuthConfPtrInput is an input type that accepts OriginPoolOriginAuthConfArgs, OriginPoolOriginAuthConfPtr and OriginPoolOriginAuthConfPtrOutput values.
// You can construct a concrete instance of `OriginPoolOriginAuthConfPtrInput` via:
//
//	        OriginPoolOriginAuthConfArgs{...}
//
//	or:
//
//	        nil
type OriginPoolOriginAuthConfPtrInput interface {
	pulumi.Input

	ToOriginPoolOriginAuthConfPtrOutput() OriginPoolOriginAuthConfPtrOutput
	ToOriginPoolOriginAuthConfPtrOutputWithContext(context.Context) OriginPoolOriginAuthConfPtrOutput
}

type originPoolOriginAuthConfPtrType OriginPoolOriginAuthConfArgs

func OriginPoolOriginAuthConfPtr(v *OriginPoolOriginAuthConfArgs) OriginPoolOriginAuthConfPtrInput {
	return (*originPoolOriginAuthConfPtrType)(v)
}

func (*originPoolOriginAuthConfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginPoolOriginAuthConf)(nil)).Elem()
}

func (i *originPoolOriginAuthConfPtrType) ToOriginPoolOriginAuthConfPtrOutput() OriginPoolOriginAuthConfPtrOutput {
	return i.ToOriginPoolOriginAuthConfPtrOutputWithContext(context.Background())
}

func (i *originPoolOriginAuthConfPtrType) ToOriginPoolOriginAuthConfPtrOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPoolOriginAuthConfPtrOutput)
}

type OriginPoolOriginAuthConfOutput struct{ *pulumi.OutputState }

func (OriginPoolOriginAuthConfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginPoolOriginAuthConf)(nil)).Elem()
}

func (o OriginPoolOriginAuthConfOutput) ToOriginPoolOriginAuthConfOutput() OriginPoolOriginAuthConfOutput {
	return o
}

func (o OriginPoolOriginAuthConfOutput) ToOriginPoolOriginAuthConfOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfOutput {
	return o
}

func (o OriginPoolOriginAuthConfOutput) ToOriginPoolOriginAuthConfPtrOutput() OriginPoolOriginAuthConfPtrOutput {
	return o.ToOriginPoolOriginAuthConfPtrOutputWithContext(context.Background())
}

func (o OriginPoolOriginAuthConfOutput) ToOriginPoolOriginAuthConfPtrOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginPoolOriginAuthConf) *OriginPoolOriginAuthConf {
		return &v
	}).(OriginPoolOriginAuthConfPtrOutput)
}

// The AccessKey to be passed when AuthType is set to privateCrossAccount or private.
func (o OriginPoolOriginAuthConfOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOriginAuthConf) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Authentication type.
func (o OriginPoolOriginAuthConfOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOriginAuthConf) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// The Region of the source station to be transmitted when the source station is AWS S3.
func (o OriginPoolOriginAuthConfOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOriginAuthConf) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The SecretKey to be passed when AuthType is set to privateCrossAccount or private.
func (o OriginPoolOriginAuthConfOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOriginAuthConf) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The signature version to be transmitted when the source station is AWS S3.
func (o OriginPoolOriginAuthConfOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginPoolOriginAuthConf) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type OriginPoolOriginAuthConfPtrOutput struct{ *pulumi.OutputState }

func (OriginPoolOriginAuthConfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginPoolOriginAuthConf)(nil)).Elem()
}

func (o OriginPoolOriginAuthConfPtrOutput) ToOriginPoolOriginAuthConfPtrOutput() OriginPoolOriginAuthConfPtrOutput {
	return o
}

func (o OriginPoolOriginAuthConfPtrOutput) ToOriginPoolOriginAuthConfPtrOutputWithContext(ctx context.Context) OriginPoolOriginAuthConfPtrOutput {
	return o
}

func (o OriginPoolOriginAuthConfPtrOutput) Elem() OriginPoolOriginAuthConfOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) OriginPoolOriginAuthConf {
		if v != nil {
			return *v
		}
		var ret OriginPoolOriginAuthConf
		return ret
	}).(OriginPoolOriginAuthConfOutput)
}

// The AccessKey to be passed when AuthType is set to privateCrossAccount or private.
func (o OriginPoolOriginAuthConfPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Authentication type.
func (o OriginPoolOriginAuthConfPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// The Region of the source station to be transmitted when the source station is AWS S3.
func (o OriginPoolOriginAuthConfPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The SecretKey to be passed when AuthType is set to privateCrossAccount or private.
func (o OriginPoolOriginAuthConfPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// The signature version to be transmitted when the source station is AWS S3.
func (o OriginPoolOriginAuthConfPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginPoolOriginAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type RecordAuthConf struct {
	// The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
	AccessKey *string `pulumi:"accessKey"`
	// The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
	AuthType *string `pulumi:"authType"`
	// The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
	Region *string `pulumi:"region"`
	// The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
	SecretKey *string `pulumi:"secretKey"`
	// The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
	Version *string `pulumi:"version"`
}

// RecordAuthConfInput is an input type that accepts RecordAuthConfArgs and RecordAuthConfOutput values.
// You can construct a concrete instance of `RecordAuthConfInput` via:
//
//	RecordAuthConfArgs{...}
type RecordAuthConfInput interface {
	pulumi.Input

	ToRecordAuthConfOutput() RecordAuthConfOutput
	ToRecordAuthConfOutputWithContext(context.Context) RecordAuthConfOutput
}

type RecordAuthConfArgs struct {
	// The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (RecordAuthConfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAuthConf)(nil)).Elem()
}

func (i RecordAuthConfArgs) ToRecordAuthConfOutput() RecordAuthConfOutput {
	return i.ToRecordAuthConfOutputWithContext(context.Background())
}

func (i RecordAuthConfArgs) ToRecordAuthConfOutputWithContext(ctx context.Context) RecordAuthConfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAuthConfOutput)
}

func (i RecordAuthConfArgs) ToRecordAuthConfPtrOutput() RecordAuthConfPtrOutput {
	return i.ToRecordAuthConfPtrOutputWithContext(context.Background())
}

func (i RecordAuthConfArgs) ToRecordAuthConfPtrOutputWithContext(ctx context.Context) RecordAuthConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAuthConfOutput).ToRecordAuthConfPtrOutputWithContext(ctx)
}

// RecordAuthConfPtrInput is an input type that accepts RecordAuthConfArgs, RecordAuthConfPtr and RecordAuthConfPtrOutput values.
// You can construct a concrete instance of `RecordAuthConfPtrInput` via:
//
//	        RecordAuthConfArgs{...}
//
//	or:
//
//	        nil
type RecordAuthConfPtrInput interface {
	pulumi.Input

	ToRecordAuthConfPtrOutput() RecordAuthConfPtrOutput
	ToRecordAuthConfPtrOutputWithContext(context.Context) RecordAuthConfPtrOutput
}

type recordAuthConfPtrType RecordAuthConfArgs

func RecordAuthConfPtr(v *RecordAuthConfArgs) RecordAuthConfPtrInput {
	return (*recordAuthConfPtrType)(v)
}

func (*recordAuthConfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordAuthConf)(nil)).Elem()
}

func (i *recordAuthConfPtrType) ToRecordAuthConfPtrOutput() RecordAuthConfPtrOutput {
	return i.ToRecordAuthConfPtrOutputWithContext(context.Background())
}

func (i *recordAuthConfPtrType) ToRecordAuthConfPtrOutputWithContext(ctx context.Context) RecordAuthConfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAuthConfPtrOutput)
}

type RecordAuthConfOutput struct{ *pulumi.OutputState }

func (RecordAuthConfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAuthConf)(nil)).Elem()
}

func (o RecordAuthConfOutput) ToRecordAuthConfOutput() RecordAuthConfOutput {
	return o
}

func (o RecordAuthConfOutput) ToRecordAuthConfOutputWithContext(ctx context.Context) RecordAuthConfOutput {
	return o
}

func (o RecordAuthConfOutput) ToRecordAuthConfPtrOutput() RecordAuthConfPtrOutput {
	return o.ToRecordAuthConfPtrOutputWithContext(context.Background())
}

func (o RecordAuthConfOutput) ToRecordAuthConfPtrOutputWithContext(ctx context.Context) RecordAuthConfPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordAuthConf) *RecordAuthConf {
		return &v
	}).(RecordAuthConfPtrOutput)
}

// The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
func (o RecordAuthConfOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAuthConf) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
func (o RecordAuthConfOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAuthConf) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
func (o RecordAuthConfOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAuthConf) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
func (o RecordAuthConfOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAuthConf) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
func (o RecordAuthConfOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAuthConf) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type RecordAuthConfPtrOutput struct{ *pulumi.OutputState }

func (RecordAuthConfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordAuthConf)(nil)).Elem()
}

func (o RecordAuthConfPtrOutput) ToRecordAuthConfPtrOutput() RecordAuthConfPtrOutput {
	return o
}

func (o RecordAuthConfPtrOutput) ToRecordAuthConfPtrOutputWithContext(ctx context.Context) RecordAuthConfPtrOutput {
	return o
}

func (o RecordAuthConfPtrOutput) Elem() RecordAuthConfOutput {
	return o.ApplyT(func(v *RecordAuthConf) RecordAuthConf {
		if v != nil {
			return *v
		}
		var ret RecordAuthConf
		return ret
	}).(RecordAuthConfOutput)
}

// The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
func (o RecordAuthConfPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:
func (o RecordAuthConfPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:
func (o RecordAuthConfPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.
func (o RecordAuthConfPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.
func (o RecordAuthConfPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordAuthConf) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type RecordData struct {
	// The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
	Algorithm *int `pulumi:"algorithm"`
	// The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
	Certificate *string `pulumi:"certificate"`
	// The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
	Fingerprint *string `pulumi:"fingerprint"`
	// The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
	Flag *int `pulumi:"flag"`
	// The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
	KeyTag *int `pulumi:"keyTag"`
	// The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	MatchingType *int `pulumi:"matchingType"`
	// The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
	Port *int `pulumi:"port"`
	// The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
	Priority *int `pulumi:"priority"`
	// The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	Selector *int `pulumi:"selector"`
	// The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
	Tag *string `pulumi:"tag"`
	// The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
	Type *int `pulumi:"type"`
	// The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	Usage *int `pulumi:"usage"`
	// The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
	//
	// - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
	// - `CNAME`: the target domain name.
	// - `NS`: the name servers for the domain name.
	// - `MX`: a valid domain name of the target mail server.
	// - `TXT`: a valid text string.
	// - `CAA`: a valid domain name of the certificate authority.
	// - `SRV`: a valid domain name of the target host.
	// - `URI`: a valid URI string.
	Value *string `pulumi:"value"`
	// The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
	Weight *int `pulumi:"weight"`
}

// RecordDataInput is an input type that accepts RecordDataArgs and RecordDataOutput values.
// You can construct a concrete instance of `RecordDataInput` via:
//
//	RecordDataArgs{...}
type RecordDataInput interface {
	pulumi.Input

	ToRecordDataOutput() RecordDataOutput
	ToRecordDataOutputWithContext(context.Context) RecordDataOutput
}

type RecordDataArgs struct {
	// The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
	Algorithm pulumi.IntPtrInput `pulumi:"algorithm"`
	// The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
	Fingerprint pulumi.StringPtrInput `pulumi:"fingerprint"`
	// The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
	Flag pulumi.IntPtrInput `pulumi:"flag"`
	// The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
	KeyTag pulumi.IntPtrInput `pulumi:"keyTag"`
	// The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	MatchingType pulumi.IntPtrInput `pulumi:"matchingType"`
	// The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	Selector pulumi.IntPtrInput `pulumi:"selector"`
	// The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
	Type pulumi.IntPtrInput `pulumi:"type"`
	// The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
	Usage pulumi.IntPtrInput `pulumi:"usage"`
	// The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
	//
	// - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
	// - `CNAME`: the target domain name.
	// - `NS`: the name servers for the domain name.
	// - `MX`: a valid domain name of the target mail server.
	// - `TXT`: a valid text string.
	// - `CAA`: a valid domain name of the certificate authority.
	// - `SRV`: a valid domain name of the target host.
	// - `URI`: a valid URI string.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (RecordDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordData)(nil)).Elem()
}

func (i RecordDataArgs) ToRecordDataOutput() RecordDataOutput {
	return i.ToRecordDataOutputWithContext(context.Background())
}

func (i RecordDataArgs) ToRecordDataOutputWithContext(ctx context.Context) RecordDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordDataOutput)
}

func (i RecordDataArgs) ToRecordDataPtrOutput() RecordDataPtrOutput {
	return i.ToRecordDataPtrOutputWithContext(context.Background())
}

func (i RecordDataArgs) ToRecordDataPtrOutputWithContext(ctx context.Context) RecordDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordDataOutput).ToRecordDataPtrOutputWithContext(ctx)
}

// RecordDataPtrInput is an input type that accepts RecordDataArgs, RecordDataPtr and RecordDataPtrOutput values.
// You can construct a concrete instance of `RecordDataPtrInput` via:
//
//	        RecordDataArgs{...}
//
//	or:
//
//	        nil
type RecordDataPtrInput interface {
	pulumi.Input

	ToRecordDataPtrOutput() RecordDataPtrOutput
	ToRecordDataPtrOutputWithContext(context.Context) RecordDataPtrOutput
}

type recordDataPtrType RecordDataArgs

func RecordDataPtr(v *RecordDataArgs) RecordDataPtrInput {
	return (*recordDataPtrType)(v)
}

func (*recordDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordData)(nil)).Elem()
}

func (i *recordDataPtrType) ToRecordDataPtrOutput() RecordDataPtrOutput {
	return i.ToRecordDataPtrOutputWithContext(context.Background())
}

func (i *recordDataPtrType) ToRecordDataPtrOutputWithContext(ctx context.Context) RecordDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordDataPtrOutput)
}

type RecordDataOutput struct{ *pulumi.OutputState }

func (RecordDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordData)(nil)).Elem()
}

func (o RecordDataOutput) ToRecordDataOutput() RecordDataOutput {
	return o
}

func (o RecordDataOutput) ToRecordDataOutputWithContext(ctx context.Context) RecordDataOutput {
	return o
}

func (o RecordDataOutput) ToRecordDataPtrOutput() RecordDataPtrOutput {
	return o.ToRecordDataPtrOutputWithContext(context.Background())
}

func (o RecordDataOutput) ToRecordDataPtrOutputWithContext(ctx context.Context) RecordDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordData) *RecordData {
		return &v
	}).(RecordDataPtrOutput)
}

// The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
func (o RecordDataOutput) Algorithm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Algorithm }).(pulumi.IntPtrOutput)
}

// The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
func (o RecordDataOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordData) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
func (o RecordDataOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordData) *string { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

// The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
func (o RecordDataOutput) Flag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Flag }).(pulumi.IntPtrOutput)
}

// The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
func (o RecordDataOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.KeyTag }).(pulumi.IntPtrOutput)
}

// The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataOutput) MatchingType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.MatchingType }).(pulumi.IntPtrOutput)
}

// The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
func (o RecordDataOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
func (o RecordDataOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataOutput) Selector() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Selector }).(pulumi.IntPtrOutput)
}

// The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
func (o RecordDataOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordData) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
func (o RecordDataOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Type }).(pulumi.IntPtrOutput)
}

// The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataOutput) Usage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Usage }).(pulumi.IntPtrOutput)
}

// The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
//
// - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
// - `CNAME`: the target domain name.
// - `NS`: the name servers for the domain name.
// - `MX`: a valid domain name of the target mail server.
// - `TXT`: a valid text string.
// - `CAA`: a valid domain name of the certificate authority.
// - `SRV`: a valid domain name of the target host.
// - `URI`: a valid URI string.
func (o RecordDataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordData) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
func (o RecordDataOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordData) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RecordDataPtrOutput struct{ *pulumi.OutputState }

func (RecordDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordData)(nil)).Elem()
}

func (o RecordDataPtrOutput) ToRecordDataPtrOutput() RecordDataPtrOutput {
	return o
}

func (o RecordDataPtrOutput) ToRecordDataPtrOutputWithContext(ctx context.Context) RecordDataPtrOutput {
	return o
}

func (o RecordDataPtrOutput) Elem() RecordDataOutput {
	return o.ApplyT(func(v *RecordData) RecordData {
		if v != nil {
			return *v
		}
		var ret RecordData
		return ret
	}).(RecordDataOutput)
}

// The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.
func (o RecordDataPtrOutput) Algorithm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.IntPtrOutput)
}

// The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.
func (o RecordDataPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordData) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The public key fingerprint of the record. This parameter is required when you add a SSHFP record.
func (o RecordDataPtrOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordData) *string {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(pulumi.StringPtrOutput)
}

// The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.
func (o RecordDataPtrOutput) Flag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Flag
	}).(pulumi.IntPtrOutput)
}

// The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.
func (o RecordDataPtrOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.KeyTag
	}).(pulumi.IntPtrOutput)
}

// The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataPtrOutput) MatchingType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.MatchingType
	}).(pulumi.IntPtrOutput)
}

// The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.
func (o RecordDataPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.
func (o RecordDataPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataPtrOutput) Selector() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.IntPtrOutput)
}

// The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.
func (o RecordDataPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordData) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.
func (o RecordDataPtrOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.IntPtrOutput)
}

// The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.
func (o RecordDataPtrOutput) Usage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Usage
	}).(pulumi.IntPtrOutput)
}

// The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:
//
// - **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
// - `CNAME`: the target domain name.
// - `NS`: the name servers for the domain name.
// - `MX`: a valid domain name of the target mail server.
// - `TXT`: a valid text string.
// - `CAA`: a valid domain name of the certificate authority.
// - `SRV`: a valid domain name of the target host.
// - `URI`: a valid URI string.
func (o RecordDataPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordData) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.
func (o RecordDataPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordData) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type WaitingRoomHostNameAndPath struct {
	// The domain name.
	Domain string `pulumi:"domain"`
	// The path.
	Path string `pulumi:"path"`
	// The subdomain.
	Subdomain string `pulumi:"subdomain"`
}

// WaitingRoomHostNameAndPathInput is an input type that accepts WaitingRoomHostNameAndPathArgs and WaitingRoomHostNameAndPathOutput values.
// You can construct a concrete instance of `WaitingRoomHostNameAndPathInput` via:
//
//	WaitingRoomHostNameAndPathArgs{...}
type WaitingRoomHostNameAndPathInput interface {
	pulumi.Input

	ToWaitingRoomHostNameAndPathOutput() WaitingRoomHostNameAndPathOutput
	ToWaitingRoomHostNameAndPathOutputWithContext(context.Context) WaitingRoomHostNameAndPathOutput
}

type WaitingRoomHostNameAndPathArgs struct {
	// The domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The path.
	Path pulumi.StringInput `pulumi:"path"`
	// The subdomain.
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
}

func (WaitingRoomHostNameAndPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitingRoomHostNameAndPath)(nil)).Elem()
}

func (i WaitingRoomHostNameAndPathArgs) ToWaitingRoomHostNameAndPathOutput() WaitingRoomHostNameAndPathOutput {
	return i.ToWaitingRoomHostNameAndPathOutputWithContext(context.Background())
}

func (i WaitingRoomHostNameAndPathArgs) ToWaitingRoomHostNameAndPathOutputWithContext(ctx context.Context) WaitingRoomHostNameAndPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WaitingRoomHostNameAndPathOutput)
}

// WaitingRoomHostNameAndPathArrayInput is an input type that accepts WaitingRoomHostNameAndPathArray and WaitingRoomHostNameAndPathArrayOutput values.
// You can construct a concrete instance of `WaitingRoomHostNameAndPathArrayInput` via:
//
//	WaitingRoomHostNameAndPathArray{ WaitingRoomHostNameAndPathArgs{...} }
type WaitingRoomHostNameAndPathArrayInput interface {
	pulumi.Input

	ToWaitingRoomHostNameAndPathArrayOutput() WaitingRoomHostNameAndPathArrayOutput
	ToWaitingRoomHostNameAndPathArrayOutputWithContext(context.Context) WaitingRoomHostNameAndPathArrayOutput
}

type WaitingRoomHostNameAndPathArray []WaitingRoomHostNameAndPathInput

func (WaitingRoomHostNameAndPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WaitingRoomHostNameAndPath)(nil)).Elem()
}

func (i WaitingRoomHostNameAndPathArray) ToWaitingRoomHostNameAndPathArrayOutput() WaitingRoomHostNameAndPathArrayOutput {
	return i.ToWaitingRoomHostNameAndPathArrayOutputWithContext(context.Background())
}

func (i WaitingRoomHostNameAndPathArray) ToWaitingRoomHostNameAndPathArrayOutputWithContext(ctx context.Context) WaitingRoomHostNameAndPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WaitingRoomHostNameAndPathArrayOutput)
}

type WaitingRoomHostNameAndPathOutput struct{ *pulumi.OutputState }

func (WaitingRoomHostNameAndPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitingRoomHostNameAndPath)(nil)).Elem()
}

func (o WaitingRoomHostNameAndPathOutput) ToWaitingRoomHostNameAndPathOutput() WaitingRoomHostNameAndPathOutput {
	return o
}

func (o WaitingRoomHostNameAndPathOutput) ToWaitingRoomHostNameAndPathOutputWithContext(ctx context.Context) WaitingRoomHostNameAndPathOutput {
	return o
}

// The domain name.
func (o WaitingRoomHostNameAndPathOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v WaitingRoomHostNameAndPath) string { return v.Domain }).(pulumi.StringOutput)
}

// The path.
func (o WaitingRoomHostNameAndPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v WaitingRoomHostNameAndPath) string { return v.Path }).(pulumi.StringOutput)
}

// The subdomain.
func (o WaitingRoomHostNameAndPathOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v WaitingRoomHostNameAndPath) string { return v.Subdomain }).(pulumi.StringOutput)
}

type WaitingRoomHostNameAndPathArrayOutput struct{ *pulumi.OutputState }

func (WaitingRoomHostNameAndPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WaitingRoomHostNameAndPath)(nil)).Elem()
}

func (o WaitingRoomHostNameAndPathArrayOutput) ToWaitingRoomHostNameAndPathArrayOutput() WaitingRoomHostNameAndPathArrayOutput {
	return o
}

func (o WaitingRoomHostNameAndPathArrayOutput) ToWaitingRoomHostNameAndPathArrayOutputWithContext(ctx context.Context) WaitingRoomHostNameAndPathArrayOutput {
	return o
}

func (o WaitingRoomHostNameAndPathArrayOutput) Index(i pulumi.IntInput) WaitingRoomHostNameAndPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WaitingRoomHostNameAndPath {
		return vs[0].([]WaitingRoomHostNameAndPath)[vs[1].(int)]
	}).(WaitingRoomHostNameAndPathOutput)
}

type GetSitesSite struct {
	// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
	AccessType string `pulumi:"accessType"`
	// Acceleration area
	Coverage string `pulumi:"coverage"`
	// Creation time
	CreateTime string `pulumi:"createTime"`
	// The ID of the resource supplied above.
	Id int `pulumi:"id"`
	// The ID of the associated package instance.
	InstanceId string `pulumi:"instanceId"`
	// Modification time
	ModifyTime string `pulumi:"modifyTime"`
	// Site Resolution Name Server List
	NameServerList string `pulumi:"nameServerList"`
	// The ID of the resource group
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// Site ID
	SiteId int `pulumi:"siteId"`
	// Site Name
	SiteName string `pulumi:"siteName"`
	// The status of the resource
	Status string `pulumi:"status"`
}

// GetSitesSiteInput is an input type that accepts GetSitesSiteArgs and GetSitesSiteOutput values.
// You can construct a concrete instance of `GetSitesSiteInput` via:
//
//	GetSitesSiteArgs{...}
type GetSitesSiteInput interface {
	pulumi.Input

	ToGetSitesSiteOutput() GetSitesSiteOutput
	ToGetSitesSiteOutputWithContext(context.Context) GetSitesSiteOutput
}

type GetSitesSiteArgs struct {
	// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
	AccessType pulumi.StringInput `pulumi:"accessType"`
	// Acceleration area
	Coverage pulumi.StringInput `pulumi:"coverage"`
	// Creation time
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the resource supplied above.
	Id pulumi.IntInput `pulumi:"id"`
	// The ID of the associated package instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Modification time
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Site Resolution Name Server List
	NameServerList pulumi.StringInput `pulumi:"nameServerList"`
	// The ID of the resource group
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// Site ID
	SiteId pulumi.IntInput `pulumi:"siteId"`
	// Site Name
	SiteName pulumi.StringInput `pulumi:"siteName"`
	// The status of the resource
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetSitesSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSite)(nil)).Elem()
}

func (i GetSitesSiteArgs) ToGetSitesSiteOutput() GetSitesSiteOutput {
	return i.ToGetSitesSiteOutputWithContext(context.Background())
}

func (i GetSitesSiteArgs) ToGetSitesSiteOutputWithContext(ctx context.Context) GetSitesSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteOutput)
}

// GetSitesSiteArrayInput is an input type that accepts GetSitesSiteArray and GetSitesSiteArrayOutput values.
// You can construct a concrete instance of `GetSitesSiteArrayInput` via:
//
//	GetSitesSiteArray{ GetSitesSiteArgs{...} }
type GetSitesSiteArrayInput interface {
	pulumi.Input

	ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput
	ToGetSitesSiteArrayOutputWithContext(context.Context) GetSitesSiteArrayOutput
}

type GetSitesSiteArray []GetSitesSiteInput

func (GetSitesSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSite)(nil)).Elem()
}

func (i GetSitesSiteArray) ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput {
	return i.ToGetSitesSiteArrayOutputWithContext(context.Background())
}

func (i GetSitesSiteArray) ToGetSitesSiteArrayOutputWithContext(ctx context.Context) GetSitesSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitesSiteArrayOutput)
}

type GetSitesSiteOutput struct{ *pulumi.OutputState }

func (GetSitesSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesSite)(nil)).Elem()
}

func (o GetSitesSiteOutput) ToGetSitesSiteOutput() GetSitesSiteOutput {
	return o
}

func (o GetSitesSiteOutput) ToGetSitesSiteOutputWithContext(ctx context.Context) GetSitesSiteOutput {
	return o
}

// Access type. Value:-**NS**: Managed access via NS.-**CNAME**: access through CNAME.
func (o GetSitesSiteOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.AccessType }).(pulumi.StringOutput)
}

// Acceleration area
func (o GetSitesSiteOutput) Coverage() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Coverage }).(pulumi.StringOutput)
}

// Creation time
func (o GetSitesSiteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the resource supplied above.
func (o GetSitesSiteOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetSitesSite) int { return v.Id }).(pulumi.IntOutput)
}

// The ID of the associated package instance.
func (o GetSitesSiteOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Modification time
func (o GetSitesSiteOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Site Resolution Name Server List
func (o GetSitesSiteOutput) NameServerList() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.NameServerList }).(pulumi.StringOutput)
}

// The ID of the resource group
func (o GetSitesSiteOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Site ID
func (o GetSitesSiteOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v GetSitesSite) int { return v.SiteId }).(pulumi.IntOutput)
}

// Site Name
func (o GetSitesSiteOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.SiteName }).(pulumi.StringOutput)
}

// The status of the resource
func (o GetSitesSiteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitesSite) string { return v.Status }).(pulumi.StringOutput)
}

type GetSitesSiteArrayOutput struct{ *pulumi.OutputState }

func (GetSitesSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitesSite)(nil)).Elem()
}

func (o GetSitesSiteArrayOutput) ToGetSitesSiteArrayOutput() GetSitesSiteArrayOutput {
	return o
}

func (o GetSitesSiteArrayOutput) ToGetSitesSiteArrayOutputWithContext(ctx context.Context) GetSitesSiteArrayOutput {
	return o
}

func (o GetSitesSiteArrayOutput) Index(i pulumi.IntInput) GetSitesSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSitesSite {
		return vs[0].([]GetSitesSite)[vs[1].(int)]
	}).(GetSitesSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRequestHeaderModificationRuleRequestHeaderModificationInput)(nil)).Elem(), HttpRequestHeaderModificationRuleRequestHeaderModificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRequestHeaderModificationRuleRequestHeaderModificationArrayInput)(nil)).Elem(), HttpRequestHeaderModificationRuleRequestHeaderModificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpResponseHeaderModificationRuleResponseHeaderModificationInput)(nil)).Elem(), HttpResponseHeaderModificationRuleResponseHeaderModificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpResponseHeaderModificationRuleResponseHeaderModificationArrayInput)(nil)).Elem(), HttpResponseHeaderModificationRuleResponseHeaderModificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginPoolOriginInput)(nil)).Elem(), OriginPoolOriginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginPoolOriginArrayInput)(nil)).Elem(), OriginPoolOriginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginPoolOriginAuthConfInput)(nil)).Elem(), OriginPoolOriginAuthConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginPoolOriginAuthConfPtrInput)(nil)).Elem(), OriginPoolOriginAuthConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAuthConfInput)(nil)).Elem(), RecordAuthConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAuthConfPtrInput)(nil)).Elem(), RecordAuthConfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordDataInput)(nil)).Elem(), RecordDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordDataPtrInput)(nil)).Elem(), RecordDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WaitingRoomHostNameAndPathInput)(nil)).Elem(), WaitingRoomHostNameAndPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WaitingRoomHostNameAndPathArrayInput)(nil)).Elem(), WaitingRoomHostNameAndPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteInput)(nil)).Elem(), GetSitesSiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitesSiteArrayInput)(nil)).Elem(), GetSitesSiteArray{})
	pulumi.RegisterOutputType(HttpRequestHeaderModificationRuleRequestHeaderModificationOutput{})
	pulumi.RegisterOutputType(HttpRequestHeaderModificationRuleRequestHeaderModificationArrayOutput{})
	pulumi.RegisterOutputType(HttpResponseHeaderModificationRuleResponseHeaderModificationOutput{})
	pulumi.RegisterOutputType(HttpResponseHeaderModificationRuleResponseHeaderModificationArrayOutput{})
	pulumi.RegisterOutputType(OriginPoolOriginOutput{})
	pulumi.RegisterOutputType(OriginPoolOriginArrayOutput{})
	pulumi.RegisterOutputType(OriginPoolOriginAuthConfOutput{})
	pulumi.RegisterOutputType(OriginPoolOriginAuthConfPtrOutput{})
	pulumi.RegisterOutputType(RecordAuthConfOutput{})
	pulumi.RegisterOutputType(RecordAuthConfPtrOutput{})
	pulumi.RegisterOutputType(RecordDataOutput{})
	pulumi.RegisterOutputType(RecordDataPtrOutput{})
	pulumi.RegisterOutputType(WaitingRoomHostNameAndPathOutput{})
	pulumi.RegisterOutputType(WaitingRoomHostNameAndPathArrayOutput{})
	pulumi.RegisterOutputType(GetSitesSiteOutput{})
	pulumi.RegisterOutputType(GetSitesSiteArrayOutput{})
}
