// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Compression Rule resource.
//
// For information about ESA Compression Rule and how to use it, see [What is Compression Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCompressionRule).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := esa.NewSite(ctx, "example", &esa.SiteArgs{
//				SiteName:   pulumi.String("compression.example.com"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("domestic"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewCompressionRule(ctx, "default", &esa.CompressionRuleArgs{
//				Gzip:        pulumi.String("off"),
//				Brotli:      pulumi.String("off"),
//				Rule:        pulumi.String("http.host eq \"video.example.com\""),
//				SiteVersion: pulumi.Int(0),
//				RuleName:    pulumi.String("rule_example"),
//				SiteId:      example.ID(),
//				Zstd:        pulumi.String("off"),
//				RuleEnable:  pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Compression Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/compressionRule:CompressionRule example <site_id>:<config_id>
// ```
type CompressionRule struct {
	pulumi.CustomResourceState

	// Brotli compression. Value range:
	Brotli pulumi.StringPtrOutput `pulumi:"brotli"`
	// Config Id
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Gzip compression. Value range:
	Gzip pulumi.StringPtrOutput `pulumi:"gzip"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrOutput `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrOutput `pulumi:"siteVersion"`
	// Zstd compression. Value range:
	Zstd pulumi.StringPtrOutput `pulumi:"zstd"`
}

// NewCompressionRule registers a new resource with the given unique name, arguments, and options.
func NewCompressionRule(ctx *pulumi.Context,
	name string, args *CompressionRuleArgs, opts ...pulumi.ResourceOption) (*CompressionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CompressionRule
	err := ctx.RegisterResource("alicloud:esa/compressionRule:CompressionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompressionRule gets an existing CompressionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompressionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompressionRuleState, opts ...pulumi.ResourceOption) (*CompressionRule, error) {
	var resource CompressionRule
	err := ctx.ReadResource("alicloud:esa/compressionRule:CompressionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompressionRule resources.
type compressionRuleState struct {
	// Brotli compression. Value range:
	Brotli *string `pulumi:"brotli"`
	// Config Id
	ConfigId *int `pulumi:"configId"`
	// Gzip compression. Value range:
	Gzip *string `pulumi:"gzip"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
	Rule *string `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName *string `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId *int `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Zstd compression. Value range:
	Zstd *string `pulumi:"zstd"`
}

type CompressionRuleState struct {
	// Brotli compression. Value range:
	Brotli pulumi.StringPtrInput
	// Config Id
	ConfigId pulumi.IntPtrInput
	// Gzip compression. Value range:
	Gzip pulumi.StringPtrInput
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
	Rule pulumi.StringPtrInput
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrInput
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntPtrInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrInput
	// Zstd compression. Value range:
	Zstd pulumi.StringPtrInput
}

func (CompressionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*compressionRuleState)(nil)).Elem()
}

type compressionRuleArgs struct {
	// Brotli compression. Value range:
	Brotli *string `pulumi:"brotli"`
	// Gzip compression. Value range:
	Gzip *string `pulumi:"gzip"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
	Rule *string `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName *string `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId int `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Zstd compression. Value range:
	Zstd *string `pulumi:"zstd"`
}

// The set of arguments for constructing a CompressionRule resource.
type CompressionRuleArgs struct {
	// Brotli compression. Value range:
	Brotli pulumi.StringPtrInput
	// Gzip compression. Value range:
	Gzip pulumi.StringPtrInput
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
	Rule pulumi.StringPtrInput
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrInput
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrInput
	// Zstd compression. Value range:
	Zstd pulumi.StringPtrInput
}

func (CompressionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compressionRuleArgs)(nil)).Elem()
}

type CompressionRuleInput interface {
	pulumi.Input

	ToCompressionRuleOutput() CompressionRuleOutput
	ToCompressionRuleOutputWithContext(ctx context.Context) CompressionRuleOutput
}

func (*CompressionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CompressionRule)(nil)).Elem()
}

func (i *CompressionRule) ToCompressionRuleOutput() CompressionRuleOutput {
	return i.ToCompressionRuleOutputWithContext(context.Background())
}

func (i *CompressionRule) ToCompressionRuleOutputWithContext(ctx context.Context) CompressionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionRuleOutput)
}

// CompressionRuleArrayInput is an input type that accepts CompressionRuleArray and CompressionRuleArrayOutput values.
// You can construct a concrete instance of `CompressionRuleArrayInput` via:
//
//	CompressionRuleArray{ CompressionRuleArgs{...} }
type CompressionRuleArrayInput interface {
	pulumi.Input

	ToCompressionRuleArrayOutput() CompressionRuleArrayOutput
	ToCompressionRuleArrayOutputWithContext(context.Context) CompressionRuleArrayOutput
}

type CompressionRuleArray []CompressionRuleInput

func (CompressionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompressionRule)(nil)).Elem()
}

func (i CompressionRuleArray) ToCompressionRuleArrayOutput() CompressionRuleArrayOutput {
	return i.ToCompressionRuleArrayOutputWithContext(context.Background())
}

func (i CompressionRuleArray) ToCompressionRuleArrayOutputWithContext(ctx context.Context) CompressionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionRuleArrayOutput)
}

// CompressionRuleMapInput is an input type that accepts CompressionRuleMap and CompressionRuleMapOutput values.
// You can construct a concrete instance of `CompressionRuleMapInput` via:
//
//	CompressionRuleMap{ "key": CompressionRuleArgs{...} }
type CompressionRuleMapInput interface {
	pulumi.Input

	ToCompressionRuleMapOutput() CompressionRuleMapOutput
	ToCompressionRuleMapOutputWithContext(context.Context) CompressionRuleMapOutput
}

type CompressionRuleMap map[string]CompressionRuleInput

func (CompressionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompressionRule)(nil)).Elem()
}

func (i CompressionRuleMap) ToCompressionRuleMapOutput() CompressionRuleMapOutput {
	return i.ToCompressionRuleMapOutputWithContext(context.Background())
}

func (i CompressionRuleMap) ToCompressionRuleMapOutputWithContext(ctx context.Context) CompressionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionRuleMapOutput)
}

type CompressionRuleOutput struct{ *pulumi.OutputState }

func (CompressionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompressionRule)(nil)).Elem()
}

func (o CompressionRuleOutput) ToCompressionRuleOutput() CompressionRuleOutput {
	return o
}

func (o CompressionRuleOutput) ToCompressionRuleOutputWithContext(ctx context.Context) CompressionRuleOutput {
	return o
}

// Brotli compression. Value range:
func (o CompressionRuleOutput) Brotli() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.Brotli }).(pulumi.StringPtrOutput)
}

// Config Id
func (o CompressionRuleOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Gzip compression. Value range:
func (o CompressionRuleOutput) Gzip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.Gzip }).(pulumi.StringPtrOutput)
}

// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
// - Match all incoming requests: value set to true
// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\")
func (o CompressionRuleOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
func (o CompressionRuleOutput) RuleEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.RuleEnable }).(pulumi.StringPtrOutput)
}

// Rule name. When adding global configuration, this parameter does not need to be set.
func (o CompressionRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// The site ID, which can be obtained by calling the ListSites API.
func (o CompressionRuleOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
func (o CompressionRuleOutput) SiteVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.IntPtrOutput { return v.SiteVersion }).(pulumi.IntPtrOutput)
}

// Zstd compression. Value range:
func (o CompressionRuleOutput) Zstd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionRule) pulumi.StringPtrOutput { return v.Zstd }).(pulumi.StringPtrOutput)
}

type CompressionRuleArrayOutput struct{ *pulumi.OutputState }

func (CompressionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompressionRule)(nil)).Elem()
}

func (o CompressionRuleArrayOutput) ToCompressionRuleArrayOutput() CompressionRuleArrayOutput {
	return o
}

func (o CompressionRuleArrayOutput) ToCompressionRuleArrayOutputWithContext(ctx context.Context) CompressionRuleArrayOutput {
	return o
}

func (o CompressionRuleArrayOutput) Index(i pulumi.IntInput) CompressionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CompressionRule {
		return vs[0].([]*CompressionRule)[vs[1].(int)]
	}).(CompressionRuleOutput)
}

type CompressionRuleMapOutput struct{ *pulumi.OutputState }

func (CompressionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompressionRule)(nil)).Elem()
}

func (o CompressionRuleMapOutput) ToCompressionRuleMapOutput() CompressionRuleMapOutput {
	return o
}

func (o CompressionRuleMapOutput) ToCompressionRuleMapOutputWithContext(ctx context.Context) CompressionRuleMapOutput {
	return o
}

func (o CompressionRuleMapOutput) MapIndex(k pulumi.StringInput) CompressionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CompressionRule {
		return vs[0].(map[string]*CompressionRule)[vs[1].(string)]
	}).(CompressionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CompressionRuleInput)(nil)).Elem(), &CompressionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompressionRuleArrayInput)(nil)).Elem(), CompressionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompressionRuleMapInput)(nil)).Elem(), CompressionRuleMap{})
	pulumi.RegisterOutputType(CompressionRuleOutput{})
	pulumi.RegisterOutputType(CompressionRuleArrayOutput{})
	pulumi.RegisterOutputType(CompressionRuleMapOutput{})
}
