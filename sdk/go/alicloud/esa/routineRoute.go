// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Routine Route resource.
//
// For information about ESA Routine Route and how to use it, see [What is Routine Route](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateRoutineRoute).
//
// > **NOTE:** Available since v1.251.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:   pulumi.String("chenxin0116.site"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRoutine, err := esa.NewRoutine(ctx, "default", &esa.RoutineArgs{
//				Description: pulumi.String("example-routine2"),
//				Name:        pulumi.String("example-routine2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewRoutineRoute(ctx, "default", &esa.RoutineRouteArgs{
//				RouteEnable: pulumi.String("on"),
//				Rule:        pulumi.String("(http.host eq \"video.example1.com\")"),
//				Sequence:    pulumi.Int(1),
//				RoutineName: defaultRoutine.Name,
//				SiteId:      defaultSite.ID(),
//				Bypass:      pulumi.String("off"),
//				RouteName:   pulumi.String("example_routine"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Routine Route can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/routineRoute:RoutineRoute example <site_id>:<routine_name>:<config_id>
// ```
type RoutineRoute struct {
	pulumi.CustomResourceState

	// Bypass mode. Value range:
	// - on: Open
	// - off: off
	Bypass pulumi.StringPtrOutput `pulumi:"bypass"`
	// Config Id
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Routing switch. Value range:
	// - on: Open
	// - off: off
	RouteEnable pulumi.StringPtrOutput `pulumi:"routeEnable"`
	// The route name.
	RouteName pulumi.StringPtrOutput `pulumi:"routeName"`
	// The edge function Routine name.
	RoutineName pulumi.StringOutput `pulumi:"routineName"`
	// The rule content.
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Rule execution order.
	Sequence pulumi.IntPtrOutput `pulumi:"sequence"`
	// Site Id
	SiteId pulumi.IntOutput `pulumi:"siteId"`
}

// NewRoutineRoute registers a new resource with the given unique name, arguments, and options.
func NewRoutineRoute(ctx *pulumi.Context,
	name string, args *RoutineRouteArgs, opts ...pulumi.ResourceOption) (*RoutineRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoutineName == nil {
		return nil, errors.New("invalid value for required argument 'RoutineName'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutineRoute
	err := ctx.RegisterResource("alicloud:esa/routineRoute:RoutineRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutineRoute gets an existing RoutineRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutineRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutineRouteState, opts ...pulumi.ResourceOption) (*RoutineRoute, error) {
	var resource RoutineRoute
	err := ctx.ReadResource("alicloud:esa/routineRoute:RoutineRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutineRoute resources.
type routineRouteState struct {
	// Bypass mode. Value range:
	// - on: Open
	// - off: off
	Bypass *string `pulumi:"bypass"`
	// Config Id
	ConfigId *int `pulumi:"configId"`
	// Routing switch. Value range:
	// - on: Open
	// - off: off
	RouteEnable *string `pulumi:"routeEnable"`
	// The route name.
	RouteName *string `pulumi:"routeName"`
	// The edge function Routine name.
	RoutineName *string `pulumi:"routineName"`
	// The rule content.
	Rule *string `pulumi:"rule"`
	// Rule execution order.
	Sequence *int `pulumi:"sequence"`
	// Site Id
	SiteId *int `pulumi:"siteId"`
}

type RoutineRouteState struct {
	// Bypass mode. Value range:
	// - on: Open
	// - off: off
	Bypass pulumi.StringPtrInput
	// Config Id
	ConfigId pulumi.IntPtrInput
	// Routing switch. Value range:
	// - on: Open
	// - off: off
	RouteEnable pulumi.StringPtrInput
	// The route name.
	RouteName pulumi.StringPtrInput
	// The edge function Routine name.
	RoutineName pulumi.StringPtrInput
	// The rule content.
	Rule pulumi.StringPtrInput
	// Rule execution order.
	Sequence pulumi.IntPtrInput
	// Site Id
	SiteId pulumi.IntPtrInput
}

func (RoutineRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routineRouteState)(nil)).Elem()
}

type routineRouteArgs struct {
	// Bypass mode. Value range:
	// - on: Open
	// - off: off
	Bypass *string `pulumi:"bypass"`
	// Routing switch. Value range:
	// - on: Open
	// - off: off
	RouteEnable *string `pulumi:"routeEnable"`
	// The route name.
	RouteName *string `pulumi:"routeName"`
	// The edge function Routine name.
	RoutineName string `pulumi:"routineName"`
	// The rule content.
	Rule *string `pulumi:"rule"`
	// Rule execution order.
	Sequence *int `pulumi:"sequence"`
	// Site Id
	SiteId int `pulumi:"siteId"`
}

// The set of arguments for constructing a RoutineRoute resource.
type RoutineRouteArgs struct {
	// Bypass mode. Value range:
	// - on: Open
	// - off: off
	Bypass pulumi.StringPtrInput
	// Routing switch. Value range:
	// - on: Open
	// - off: off
	RouteEnable pulumi.StringPtrInput
	// The route name.
	RouteName pulumi.StringPtrInput
	// The edge function Routine name.
	RoutineName pulumi.StringInput
	// The rule content.
	Rule pulumi.StringPtrInput
	// Rule execution order.
	Sequence pulumi.IntPtrInput
	// Site Id
	SiteId pulumi.IntInput
}

func (RoutineRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routineRouteArgs)(nil)).Elem()
}

type RoutineRouteInput interface {
	pulumi.Input

	ToRoutineRouteOutput() RoutineRouteOutput
	ToRoutineRouteOutputWithContext(ctx context.Context) RoutineRouteOutput
}

func (*RoutineRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineRoute)(nil)).Elem()
}

func (i *RoutineRoute) ToRoutineRouteOutput() RoutineRouteOutput {
	return i.ToRoutineRouteOutputWithContext(context.Background())
}

func (i *RoutineRoute) ToRoutineRouteOutputWithContext(ctx context.Context) RoutineRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRouteOutput)
}

// RoutineRouteArrayInput is an input type that accepts RoutineRouteArray and RoutineRouteArrayOutput values.
// You can construct a concrete instance of `RoutineRouteArrayInput` via:
//
//	RoutineRouteArray{ RoutineRouteArgs{...} }
type RoutineRouteArrayInput interface {
	pulumi.Input

	ToRoutineRouteArrayOutput() RoutineRouteArrayOutput
	ToRoutineRouteArrayOutputWithContext(context.Context) RoutineRouteArrayOutput
}

type RoutineRouteArray []RoutineRouteInput

func (RoutineRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutineRoute)(nil)).Elem()
}

func (i RoutineRouteArray) ToRoutineRouteArrayOutput() RoutineRouteArrayOutput {
	return i.ToRoutineRouteArrayOutputWithContext(context.Background())
}

func (i RoutineRouteArray) ToRoutineRouteArrayOutputWithContext(ctx context.Context) RoutineRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRouteArrayOutput)
}

// RoutineRouteMapInput is an input type that accepts RoutineRouteMap and RoutineRouteMapOutput values.
// You can construct a concrete instance of `RoutineRouteMapInput` via:
//
//	RoutineRouteMap{ "key": RoutineRouteArgs{...} }
type RoutineRouteMapInput interface {
	pulumi.Input

	ToRoutineRouteMapOutput() RoutineRouteMapOutput
	ToRoutineRouteMapOutputWithContext(context.Context) RoutineRouteMapOutput
}

type RoutineRouteMap map[string]RoutineRouteInput

func (RoutineRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutineRoute)(nil)).Elem()
}

func (i RoutineRouteMap) ToRoutineRouteMapOutput() RoutineRouteMapOutput {
	return i.ToRoutineRouteMapOutputWithContext(context.Background())
}

func (i RoutineRouteMap) ToRoutineRouteMapOutputWithContext(ctx context.Context) RoutineRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineRouteMapOutput)
}

type RoutineRouteOutput struct{ *pulumi.OutputState }

func (RoutineRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineRoute)(nil)).Elem()
}

func (o RoutineRouteOutput) ToRoutineRouteOutput() RoutineRouteOutput {
	return o
}

func (o RoutineRouteOutput) ToRoutineRouteOutputWithContext(ctx context.Context) RoutineRouteOutput {
	return o
}

// Bypass mode. Value range:
// - on: Open
// - off: off
func (o RoutineRouteOutput) Bypass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.StringPtrOutput { return v.Bypass }).(pulumi.StringPtrOutput)
}

// Config Id
func (o RoutineRouteOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Routing switch. Value range:
// - on: Open
// - off: off
func (o RoutineRouteOutput) RouteEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.StringPtrOutput { return v.RouteEnable }).(pulumi.StringPtrOutput)
}

// The route name.
func (o RoutineRouteOutput) RouteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.StringPtrOutput { return v.RouteName }).(pulumi.StringPtrOutput)
}

// The edge function Routine name.
func (o RoutineRouteOutput) RoutineName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.StringOutput { return v.RoutineName }).(pulumi.StringOutput)
}

// The rule content.
func (o RoutineRouteOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Rule execution order.
func (o RoutineRouteOutput) Sequence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.IntPtrOutput { return v.Sequence }).(pulumi.IntPtrOutput)
}

// Site Id
func (o RoutineRouteOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutineRoute) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

type RoutineRouteArrayOutput struct{ *pulumi.OutputState }

func (RoutineRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutineRoute)(nil)).Elem()
}

func (o RoutineRouteArrayOutput) ToRoutineRouteArrayOutput() RoutineRouteArrayOutput {
	return o
}

func (o RoutineRouteArrayOutput) ToRoutineRouteArrayOutputWithContext(ctx context.Context) RoutineRouteArrayOutput {
	return o
}

func (o RoutineRouteArrayOutput) Index(i pulumi.IntInput) RoutineRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutineRoute {
		return vs[0].([]*RoutineRoute)[vs[1].(int)]
	}).(RoutineRouteOutput)
}

type RoutineRouteMapOutput struct{ *pulumi.OutputState }

func (RoutineRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutineRoute)(nil)).Elem()
}

func (o RoutineRouteMapOutput) ToRoutineRouteMapOutput() RoutineRouteMapOutput {
	return o
}

func (o RoutineRouteMapOutput) ToRoutineRouteMapOutputWithContext(ctx context.Context) RoutineRouteMapOutput {
	return o
}

func (o RoutineRouteMapOutput) MapIndex(k pulumi.StringInput) RoutineRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutineRoute {
		return vs[0].(map[string]*RoutineRoute)[vs[1].(string)]
	}).(RoutineRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRouteInput)(nil)).Elem(), &RoutineRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRouteArrayInput)(nil)).Elem(), RoutineRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRouteMapInput)(nil)).Elem(), RoutineRouteMap{})
	pulumi.RegisterOutputType(RoutineRouteOutput{})
	pulumi.RegisterOutputType(RoutineRouteArrayOutput{})
	pulumi.RegisterOutputType(RoutineRouteMapOutput{})
}
