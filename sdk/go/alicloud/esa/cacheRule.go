// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Cache Rule resource.
//
// For information about ESA Cache Rule and how to use it, see [What is Cache Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCacheRule).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewCacheRule(ctx, "default", &esa.CacheRuleArgs{
//				UserDeviceType:           pulumi.String("off"),
//				BrowserCacheMode:         pulumi.String("no_cache"),
//				UserLanguage:             pulumi.String("off"),
//				CheckPresenceHeader:      pulumi.String("headername"),
//				IncludeCookie:            pulumi.String("cookie_exapmle"),
//				EdgeCacheMode:            pulumi.String("follow_origin"),
//				AdditionalCacheablePorts: pulumi.String("2053"),
//				RuleName:                 pulumi.String("rule_example"),
//				EdgeStatusCodeCacheTtl:   pulumi.String("300"),
//				BrowserCacheTtl:          pulumi.String("300"),
//				QueryString:              pulumi.String("example"),
//				UserGeo:                  pulumi.String("off"),
//				SortQueryStringForCache:  pulumi.String("off"),
//				CheckPresenceCookie:      pulumi.String("cookiename"),
//				CacheReserveEligibility:  pulumi.String("bypass_cache_reserve"),
//				QueryStringMode:          pulumi.String("ignore_all"),
//				Rule:                     pulumi.String("http.host eq \"video.example.com\""),
//				CacheDeceptionArmor:      pulumi.String("off"),
//				SiteId:                   pulumi.Int(_default.Sites[0].Id),
//				BypassCache:              pulumi.String("cache_all"),
//				EdgeCacheTtl:             pulumi.String("300"),
//				RuleEnable:               pulumi.String("off"),
//				SiteVersion:              pulumi.Int(0),
//				IncludeHeader:            pulumi.String("example"),
//				ServeStale:               pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Cache Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/cacheRule:CacheRule example <site_id>:<cache_rule_id>
// ```
type CacheRule struct {
	pulumi.CustomResourceState

	// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
	AdditionalCacheablePorts pulumi.StringPtrOutput `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. Possible values:
	BrowserCacheMode pulumi.StringPtrOutput `pulumi:"browserCacheMode"`
	// Browser cache expiration time in seconds.
	BrowserCacheTtl pulumi.StringPtrOutput `pulumi:"browserCacheTtl"`
	// Set the bypass cache mode. Possible values:
	BypassCache pulumi.StringPtrOutput `pulumi:"bypassCache"`
	// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
	CacheDeceptionArmor pulumi.StringPtrOutput `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
	CacheReserveEligibility pulumi.StringPtrOutput `pulumi:"cacheReserveEligibility"`
	// Cache Rule Id.
	CacheRuleId pulumi.IntOutput `pulumi:"cacheRuleId"`
	// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
	CheckPresenceCookie pulumi.StringPtrOutput `pulumi:"checkPresenceCookie"`
	// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
	CheckPresenceHeader pulumi.StringPtrOutput `pulumi:"checkPresenceHeader"`
	// Edge cache mode. Possible values:
	EdgeCacheMode pulumi.StringPtrOutput `pulumi:"edgeCacheMode"`
	// Edge cache expiration time in seconds.
	EdgeCacheTtl pulumi.StringPtrOutput `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrOutput `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
	IncludeCookie pulumi.StringPtrOutput `pulumi:"includeCookie"`
	// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
	IncludeHeader pulumi.StringPtrOutput `pulumi:"includeHeader"`
	// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
	QueryString pulumi.StringPtrOutput `pulumi:"queryString"`
	// The processing mode for query strings when generating the cache key. Possible values:
	QueryStringMode pulumi.StringPtrOutput `pulumi:"queryStringMode"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true.
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrOutput `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
	ServeStale pulumi.StringPtrOutput `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the [ListSites] API.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrOutput `pulumi:"siteVersion"`
	// Query string sorting, disabled by default. Possible values:
	SortQueryStringForCache pulumi.StringPtrOutput `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. Possible values:
	UserDeviceType pulumi.StringPtrOutput `pulumi:"userDeviceType"`
	// When generating the cache key, add the client's geographic location. Possible values:
	UserGeo pulumi.StringPtrOutput `pulumi:"userGeo"`
	// When generating cache keys, include the client's language type. Possible values:
	UserLanguage pulumi.StringPtrOutput `pulumi:"userLanguage"`
}

// NewCacheRule registers a new resource with the given unique name, arguments, and options.
func NewCacheRule(ctx *pulumi.Context,
	name string, args *CacheRuleArgs, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CacheRule
	err := ctx.RegisterResource("alicloud:esa/cacheRule:CacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheRule gets an existing CacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheRuleState, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	var resource CacheRule
	err := ctx.ReadResource("alicloud:esa/cacheRule:CacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CacheRule resources.
type cacheRuleState struct {
	// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
	AdditionalCacheablePorts *string `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. Possible values:
	BrowserCacheMode *string `pulumi:"browserCacheMode"`
	// Browser cache expiration time in seconds.
	BrowserCacheTtl *string `pulumi:"browserCacheTtl"`
	// Set the bypass cache mode. Possible values:
	BypassCache *string `pulumi:"bypassCache"`
	// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
	CacheDeceptionArmor *string `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
	CacheReserveEligibility *string `pulumi:"cacheReserveEligibility"`
	// Cache Rule Id.
	CacheRuleId *int `pulumi:"cacheRuleId"`
	// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
	CheckPresenceCookie *string `pulumi:"checkPresenceCookie"`
	// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
	CheckPresenceHeader *string `pulumi:"checkPresenceHeader"`
	// Edge cache mode. Possible values:
	EdgeCacheMode *string `pulumi:"edgeCacheMode"`
	// Edge cache expiration time in seconds.
	EdgeCacheTtl *string `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time in seconds.
	EdgeStatusCodeCacheTtl *string `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
	IncludeCookie *string `pulumi:"includeCookie"`
	// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
	IncludeHeader *string `pulumi:"includeHeader"`
	// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
	QueryString *string `pulumi:"queryString"`
	// The processing mode for query strings when generating the cache key. Possible values:
	QueryStringMode *string `pulumi:"queryStringMode"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true.
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
	Rule *string `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName *string `pulumi:"ruleName"`
	// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
	ServeStale *string `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the [ListSites] API.
	SiteId *int `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Query string sorting, disabled by default. Possible values:
	SortQueryStringForCache *string `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. Possible values:
	UserDeviceType *string `pulumi:"userDeviceType"`
	// When generating the cache key, add the client's geographic location. Possible values:
	UserGeo *string `pulumi:"userGeo"`
	// When generating cache keys, include the client's language type. Possible values:
	UserLanguage *string `pulumi:"userLanguage"`
}

type CacheRuleState struct {
	// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
	AdditionalCacheablePorts pulumi.StringPtrInput
	// Browser cache mode. Possible values:
	BrowserCacheMode pulumi.StringPtrInput
	// Browser cache expiration time in seconds.
	BrowserCacheTtl pulumi.StringPtrInput
	// Set the bypass cache mode. Possible values:
	BypassCache pulumi.StringPtrInput
	// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
	CacheDeceptionArmor pulumi.StringPtrInput
	// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
	CacheReserveEligibility pulumi.StringPtrInput
	// Cache Rule Id.
	CacheRuleId pulumi.IntPtrInput
	// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
	CheckPresenceCookie pulumi.StringPtrInput
	// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
	CheckPresenceHeader pulumi.StringPtrInput
	// Edge cache mode. Possible values:
	EdgeCacheMode pulumi.StringPtrInput
	// Edge cache expiration time in seconds.
	EdgeCacheTtl pulumi.StringPtrInput
	// Status code cache expiration time in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrInput
	// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
	IncludeCookie pulumi.StringPtrInput
	// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
	IncludeHeader pulumi.StringPtrInput
	// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
	QueryString pulumi.StringPtrInput
	// The processing mode for query strings when generating the cache key. Possible values:
	QueryStringMode pulumi.StringPtrInput
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true.
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
	Rule pulumi.StringPtrInput
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrInput
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrInput
	// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
	ServeStale pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the [ListSites] API.
	SiteId pulumi.IntPtrInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrInput
	// Query string sorting, disabled by default. Possible values:
	SortQueryStringForCache pulumi.StringPtrInput
	// When generating the cache key, add the client device type. Possible values:
	UserDeviceType pulumi.StringPtrInput
	// When generating the cache key, add the client's geographic location. Possible values:
	UserGeo pulumi.StringPtrInput
	// When generating cache keys, include the client's language type. Possible values:
	UserLanguage pulumi.StringPtrInput
}

func (CacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleState)(nil)).Elem()
}

type cacheRuleArgs struct {
	// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
	AdditionalCacheablePorts *string `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. Possible values:
	BrowserCacheMode *string `pulumi:"browserCacheMode"`
	// Browser cache expiration time in seconds.
	BrowserCacheTtl *string `pulumi:"browserCacheTtl"`
	// Set the bypass cache mode. Possible values:
	BypassCache *string `pulumi:"bypassCache"`
	// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
	CacheDeceptionArmor *string `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
	CacheReserveEligibility *string `pulumi:"cacheReserveEligibility"`
	// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
	CheckPresenceCookie *string `pulumi:"checkPresenceCookie"`
	// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
	CheckPresenceHeader *string `pulumi:"checkPresenceHeader"`
	// Edge cache mode. Possible values:
	EdgeCacheMode *string `pulumi:"edgeCacheMode"`
	// Edge cache expiration time in seconds.
	EdgeCacheTtl *string `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time in seconds.
	EdgeStatusCodeCacheTtl *string `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
	IncludeCookie *string `pulumi:"includeCookie"`
	// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
	IncludeHeader *string `pulumi:"includeHeader"`
	// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
	QueryString *string `pulumi:"queryString"`
	// The processing mode for query strings when generating the cache key. Possible values:
	QueryStringMode *string `pulumi:"queryStringMode"`
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true.
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
	Rule *string `pulumi:"rule"`
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName *string `pulumi:"ruleName"`
	// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
	ServeStale *string `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the [ListSites] API.
	SiteId int `pulumi:"siteId"`
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Query string sorting, disabled by default. Possible values:
	SortQueryStringForCache *string `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. Possible values:
	UserDeviceType *string `pulumi:"userDeviceType"`
	// When generating the cache key, add the client's geographic location. Possible values:
	UserGeo *string `pulumi:"userGeo"`
	// When generating cache keys, include the client's language type. Possible values:
	UserLanguage *string `pulumi:"userLanguage"`
}

// The set of arguments for constructing a CacheRule resource.
type CacheRuleArgs struct {
	// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
	AdditionalCacheablePorts pulumi.StringPtrInput
	// Browser cache mode. Possible values:
	BrowserCacheMode pulumi.StringPtrInput
	// Browser cache expiration time in seconds.
	BrowserCacheTtl pulumi.StringPtrInput
	// Set the bypass cache mode. Possible values:
	BypassCache pulumi.StringPtrInput
	// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
	CacheDeceptionArmor pulumi.StringPtrInput
	// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
	CacheReserveEligibility pulumi.StringPtrInput
	// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
	CheckPresenceCookie pulumi.StringPtrInput
	// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
	CheckPresenceHeader pulumi.StringPtrInput
	// Edge cache mode. Possible values:
	EdgeCacheMode pulumi.StringPtrInput
	// Edge cache expiration time in seconds.
	EdgeCacheTtl pulumi.StringPtrInput
	// Status code cache expiration time in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrInput
	// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
	IncludeCookie pulumi.StringPtrInput
	// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
	IncludeHeader pulumi.StringPtrInput
	// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
	QueryString pulumi.StringPtrInput
	// The processing mode for query strings when generating the cache key. Possible values:
	QueryStringMode pulumi.StringPtrInput
	// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
	// - Match all incoming requests: value set to true.
	// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
	Rule pulumi.StringPtrInput
	// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
	RuleEnable pulumi.StringPtrInput
	// Rule name. When adding global configuration, this parameter does not need to be set.
	RuleName pulumi.StringPtrInput
	// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
	ServeStale pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the [ListSites] API.
	SiteId pulumi.IntInput
	// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
	SiteVersion pulumi.IntPtrInput
	// Query string sorting, disabled by default. Possible values:
	SortQueryStringForCache pulumi.StringPtrInput
	// When generating the cache key, add the client device type. Possible values:
	UserDeviceType pulumi.StringPtrInput
	// When generating the cache key, add the client's geographic location. Possible values:
	UserGeo pulumi.StringPtrInput
	// When generating cache keys, include the client's language type. Possible values:
	UserLanguage pulumi.StringPtrInput
}

func (CacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleArgs)(nil)).Elem()
}

type CacheRuleInput interface {
	pulumi.Input

	ToCacheRuleOutput() CacheRuleOutput
	ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput
}

func (*CacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (i *CacheRule) ToCacheRuleOutput() CacheRuleOutput {
	return i.ToCacheRuleOutputWithContext(context.Background())
}

func (i *CacheRule) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleOutput)
}

// CacheRuleArrayInput is an input type that accepts CacheRuleArray and CacheRuleArrayOutput values.
// You can construct a concrete instance of `CacheRuleArrayInput` via:
//
//	CacheRuleArray{ CacheRuleArgs{...} }
type CacheRuleArrayInput interface {
	pulumi.Input

	ToCacheRuleArrayOutput() CacheRuleArrayOutput
	ToCacheRuleArrayOutputWithContext(context.Context) CacheRuleArrayOutput
}

type CacheRuleArray []CacheRuleInput

func (CacheRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheRule)(nil)).Elem()
}

func (i CacheRuleArray) ToCacheRuleArrayOutput() CacheRuleArrayOutput {
	return i.ToCacheRuleArrayOutputWithContext(context.Background())
}

func (i CacheRuleArray) ToCacheRuleArrayOutputWithContext(ctx context.Context) CacheRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleArrayOutput)
}

// CacheRuleMapInput is an input type that accepts CacheRuleMap and CacheRuleMapOutput values.
// You can construct a concrete instance of `CacheRuleMapInput` via:
//
//	CacheRuleMap{ "key": CacheRuleArgs{...} }
type CacheRuleMapInput interface {
	pulumi.Input

	ToCacheRuleMapOutput() CacheRuleMapOutput
	ToCacheRuleMapOutputWithContext(context.Context) CacheRuleMapOutput
}

type CacheRuleMap map[string]CacheRuleInput

func (CacheRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheRule)(nil)).Elem()
}

func (i CacheRuleMap) ToCacheRuleMapOutput() CacheRuleMapOutput {
	return i.ToCacheRuleMapOutputWithContext(context.Background())
}

func (i CacheRuleMap) ToCacheRuleMapOutputWithContext(ctx context.Context) CacheRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleMapOutput)
}

type CacheRuleOutput struct{ *pulumi.OutputState }

func (CacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (o CacheRuleOutput) ToCacheRuleOutput() CacheRuleOutput {
	return o
}

func (o CacheRuleOutput) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return o
}

// Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096
func (o CacheRuleOutput) AdditionalCacheablePorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.AdditionalCacheablePorts }).(pulumi.StringPtrOutput)
}

// Browser cache mode. Possible values:
func (o CacheRuleOutput) BrowserCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BrowserCacheMode }).(pulumi.StringPtrOutput)
}

// Browser cache expiration time in seconds.
func (o CacheRuleOutput) BrowserCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BrowserCacheTtl }).(pulumi.StringPtrOutput)
}

// Set the bypass cache mode. Possible values:
func (o CacheRuleOutput) BypassCache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BypassCache }).(pulumi.StringPtrOutput)
}

// Cache deception protection. Used to defend against web cache deception attacks, only the cache content that passes the validation will be cached. Value range:
func (o CacheRuleOutput) CacheDeceptionArmor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CacheDeceptionArmor }).(pulumi.StringPtrOutput)
}

// Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
func (o CacheRuleOutput) CacheReserveEligibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CacheReserveEligibility }).(pulumi.StringPtrOutput)
}

// Cache Rule Id.
func (o CacheRuleOutput) CacheRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntOutput { return v.CacheRuleId }).(pulumi.IntOutput)
}

// When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.
func (o CacheRuleOutput) CheckPresenceCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CheckPresenceCookie }).(pulumi.StringPtrOutput)
}

// When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.
func (o CacheRuleOutput) CheckPresenceHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CheckPresenceHeader }).(pulumi.StringPtrOutput)
}

// Edge cache mode. Possible values:
func (o CacheRuleOutput) EdgeCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeCacheMode }).(pulumi.StringPtrOutput)
}

// Edge cache expiration time in seconds.
func (o CacheRuleOutput) EdgeCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeCacheTtl }).(pulumi.StringPtrOutput)
}

// Status code cache expiration time in seconds.
func (o CacheRuleOutput) EdgeStatusCodeCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeStatusCodeCacheTtl }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.
func (o CacheRuleOutput) IncludeCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.IncludeCookie }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.
func (o CacheRuleOutput) IncludeHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.IncludeHeader }).(pulumi.StringPtrOutput)
}

// Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.
func (o CacheRuleOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.QueryString }).(pulumi.StringPtrOutput)
}

// The processing mode for query strings when generating the cache key. Possible values:
func (o CacheRuleOutput) QueryStringMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.QueryStringMode }).(pulumi.StringPtrOutput)
}

// Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
// - Match all incoming requests: value set to true.
// - Match specified request: Set the value to a custom expression, for example: (http.host eq \"video.example.com\").
func (o CacheRuleOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
func (o CacheRuleOutput) RuleEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.RuleEnable }).(pulumi.StringPtrOutput)
}

// Rule name. When adding global configuration, this parameter does not need to be set.
func (o CacheRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Serve stale cache. When enabled, the node can still respond to user requests with expired cached files when the origin server is unavailable. Value range:
func (o CacheRuleOutput) ServeStale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.ServeStale }).(pulumi.StringPtrOutput)
}

// The site ID, which can be obtained by calling the [ListSites] API.
func (o CacheRuleOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
func (o CacheRuleOutput) SiteVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntPtrOutput { return v.SiteVersion }).(pulumi.IntPtrOutput)
}

// Query string sorting, disabled by default. Possible values:
func (o CacheRuleOutput) SortQueryStringForCache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.SortQueryStringForCache }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the client device type. Possible values:
func (o CacheRuleOutput) UserDeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserDeviceType }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the client's geographic location. Possible values:
func (o CacheRuleOutput) UserGeo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserGeo }).(pulumi.StringPtrOutput)
}

// When generating cache keys, include the client's language type. Possible values:
func (o CacheRuleOutput) UserLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserLanguage }).(pulumi.StringPtrOutput)
}

type CacheRuleArrayOutput struct{ *pulumi.OutputState }

func (CacheRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheRule)(nil)).Elem()
}

func (o CacheRuleArrayOutput) ToCacheRuleArrayOutput() CacheRuleArrayOutput {
	return o
}

func (o CacheRuleArrayOutput) ToCacheRuleArrayOutputWithContext(ctx context.Context) CacheRuleArrayOutput {
	return o
}

func (o CacheRuleArrayOutput) Index(i pulumi.IntInput) CacheRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CacheRule {
		return vs[0].([]*CacheRule)[vs[1].(int)]
	}).(CacheRuleOutput)
}

type CacheRuleMapOutput struct{ *pulumi.OutputState }

func (CacheRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheRule)(nil)).Elem()
}

func (o CacheRuleMapOutput) ToCacheRuleMapOutput() CacheRuleMapOutput {
	return o
}

func (o CacheRuleMapOutput) ToCacheRuleMapOutputWithContext(ctx context.Context) CacheRuleMapOutput {
	return o
}

func (o CacheRuleMapOutput) MapIndex(k pulumi.StringInput) CacheRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CacheRule {
		return vs[0].(map[string]*CacheRule)[vs[1].(string)]
	}).(CacheRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleInput)(nil)).Elem(), &CacheRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleArrayInput)(nil)).Elem(), CacheRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleMapInput)(nil)).Elem(), CacheRuleMap{})
	pulumi.RegisterOutputType(CacheRuleOutput{})
	pulumi.RegisterOutputType(CacheRuleArrayOutput{})
	pulumi.RegisterOutputType(CacheRuleMapOutput{})
}
