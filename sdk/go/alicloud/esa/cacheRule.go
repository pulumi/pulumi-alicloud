// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Cache Rule resource.
//
// For information about ESA Cache Rule and how to use it, see [What is Cache Rule](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateCacheRule).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewCacheRule(ctx, "default", &esa.CacheRuleArgs{
//				UserDeviceType:           pulumi.String("off"),
//				BrowserCacheMode:         pulumi.String("no_cache"),
//				UserLanguage:             pulumi.String("off"),
//				CheckPresenceHeader:      pulumi.String("headername"),
//				IncludeCookie:            pulumi.String("cookie_exapmle"),
//				EdgeCacheMode:            pulumi.String("follow_origin"),
//				AdditionalCacheablePorts: pulumi.String("2053"),
//				RuleName:                 pulumi.String("rule_example"),
//				EdgeStatusCodeCacheTtl:   pulumi.String("300"),
//				BrowserCacheTtl:          pulumi.String("300"),
//				QueryString:              pulumi.String("example"),
//				UserGeo:                  pulumi.String("off"),
//				SortQueryStringForCache:  pulumi.String("off"),
//				CheckPresenceCookie:      pulumi.String("cookiename"),
//				CacheReserveEligibility:  pulumi.String("bypass_cache_reserve"),
//				QueryStringMode:          pulumi.String("ignore_all"),
//				Rule:                     pulumi.String("http.host eq \"video.example.com\""),
//				CacheDeceptionArmor:      pulumi.String("off"),
//				SiteId:                   pulumi.Int(_default.Sites[0].Id),
//				BypassCache:              pulumi.String("cache_all"),
//				EdgeCacheTtl:             pulumi.String("300"),
//				RuleEnable:               pulumi.String("off"),
//				SiteVersion:              pulumi.Int(0),
//				IncludeHeader:            pulumi.String("example"),
//				ServeStale:               pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Cache Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/cacheRule:CacheRule example <site_id>:<cache_rule_id>
// ```
type CacheRule struct {
	pulumi.CustomResourceState

	// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
	AdditionalCacheablePorts pulumi.StringPtrOutput `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. value:
	BrowserCacheMode pulumi.StringPtrOutput `pulumi:"browserCacheMode"`
	// The browser cache expiration time, in seconds.
	BrowserCacheTtl pulumi.StringPtrOutput `pulumi:"browserCacheTtl"`
	// Set the cache bypass mode. value:
	BypassCache pulumi.StringPtrOutput `pulumi:"bypassCache"`
	// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
	CacheDeceptionArmor pulumi.StringPtrOutput `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
	CacheReserveEligibility pulumi.StringPtrOutput `pulumi:"cacheReserveEligibility"`
	// The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
	CacheRuleId pulumi.IntOutput `pulumi:"cacheRuleId"`
	// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
	CheckPresenceCookie pulumi.StringPtrOutput `pulumi:"checkPresenceCookie"`
	// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
	CheckPresenceHeader pulumi.StringPtrOutput `pulumi:"checkPresenceHeader"`
	// Node cache mode. value:
	EdgeCacheMode pulumi.StringPtrOutput `pulumi:"edgeCacheMode"`
	// The node cache expiration time, in seconds.
	EdgeCacheTtl pulumi.StringPtrOutput `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time, in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrOutput `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
	IncludeCookie pulumi.StringPtrOutput `pulumi:"includeCookie"`
	// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
	IncludeHeader pulumi.StringPtrOutput `pulumi:"includeHeader"`
	// The query string to be retained or deleted. You can enter multiple values separated by spaces.
	QueryString pulumi.StringPtrOutput `pulumi:"queryString"`
	// The processing mode for the query string when the cache key is generated. value:
	QueryStringMode pulumi.StringPtrOutput `pulumi:"queryStringMode"`
	// The rule content.
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Rule switch. value:
	RuleEnable pulumi.StringPtrOutput `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
	ServeStale pulumi.StringPtrOutput `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
	SiteVersion pulumi.IntPtrOutput `pulumi:"siteVersion"`
	// Query string sorting, which is disabled by default. value:
	SortQueryStringForCache pulumi.StringPtrOutput `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. value:
	UserDeviceType pulumi.StringPtrOutput `pulumi:"userDeviceType"`
	// When generating the cache key, add the client geographic location. value:
	UserGeo pulumi.StringPtrOutput `pulumi:"userGeo"`
	// When generating the cache key, add the client language type. value:
	UserLanguage pulumi.StringPtrOutput `pulumi:"userLanguage"`
}

// NewCacheRule registers a new resource with the given unique name, arguments, and options.
func NewCacheRule(ctx *pulumi.Context,
	name string, args *CacheRuleArgs, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CacheRule
	err := ctx.RegisterResource("alicloud:esa/cacheRule:CacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheRule gets an existing CacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheRuleState, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	var resource CacheRule
	err := ctx.ReadResource("alicloud:esa/cacheRule:CacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CacheRule resources.
type cacheRuleState struct {
	// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
	AdditionalCacheablePorts *string `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. value:
	BrowserCacheMode *string `pulumi:"browserCacheMode"`
	// The browser cache expiration time, in seconds.
	BrowserCacheTtl *string `pulumi:"browserCacheTtl"`
	// Set the cache bypass mode. value:
	BypassCache *string `pulumi:"bypassCache"`
	// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
	CacheDeceptionArmor *string `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
	CacheReserveEligibility *string `pulumi:"cacheReserveEligibility"`
	// The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
	CacheRuleId *int `pulumi:"cacheRuleId"`
	// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
	CheckPresenceCookie *string `pulumi:"checkPresenceCookie"`
	// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
	CheckPresenceHeader *string `pulumi:"checkPresenceHeader"`
	// Node cache mode. value:
	EdgeCacheMode *string `pulumi:"edgeCacheMode"`
	// The node cache expiration time, in seconds.
	EdgeCacheTtl *string `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time, in seconds.
	EdgeStatusCodeCacheTtl *string `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
	IncludeCookie *string `pulumi:"includeCookie"`
	// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
	IncludeHeader *string `pulumi:"includeHeader"`
	// The query string to be retained or deleted. You can enter multiple values separated by spaces.
	QueryString *string `pulumi:"queryString"`
	// The processing mode for the query string when the cache key is generated. value:
	QueryStringMode *string `pulumi:"queryStringMode"`
	// The rule content.
	Rule *string `pulumi:"rule"`
	// Rule switch. value:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName *string `pulumi:"ruleName"`
	// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
	ServeStale *string `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId *int `pulumi:"siteId"`
	// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Query string sorting, which is disabled by default. value:
	SortQueryStringForCache *string `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. value:
	UserDeviceType *string `pulumi:"userDeviceType"`
	// When generating the cache key, add the client geographic location. value:
	UserGeo *string `pulumi:"userGeo"`
	// When generating the cache key, add the client language type. value:
	UserLanguage *string `pulumi:"userLanguage"`
}

type CacheRuleState struct {
	// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
	AdditionalCacheablePorts pulumi.StringPtrInput
	// Browser cache mode. value:
	BrowserCacheMode pulumi.StringPtrInput
	// The browser cache expiration time, in seconds.
	BrowserCacheTtl pulumi.StringPtrInput
	// Set the cache bypass mode. value:
	BypassCache pulumi.StringPtrInput
	// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
	CacheDeceptionArmor pulumi.StringPtrInput
	// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
	CacheReserveEligibility pulumi.StringPtrInput
	// The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
	CacheRuleId pulumi.IntPtrInput
	// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
	CheckPresenceCookie pulumi.StringPtrInput
	// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
	CheckPresenceHeader pulumi.StringPtrInput
	// Node cache mode. value:
	EdgeCacheMode pulumi.StringPtrInput
	// The node cache expiration time, in seconds.
	EdgeCacheTtl pulumi.StringPtrInput
	// Status code cache expiration time, in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrInput
	// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
	IncludeCookie pulumi.StringPtrInput
	// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
	IncludeHeader pulumi.StringPtrInput
	// The query string to be retained or deleted. You can enter multiple values separated by spaces.
	QueryString pulumi.StringPtrInput
	// The processing mode for the query string when the cache key is generated. value:
	QueryStringMode pulumi.StringPtrInput
	// The rule content.
	Rule pulumi.StringPtrInput
	// Rule switch. value:
	RuleEnable pulumi.StringPtrInput
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrInput
	// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
	ServeStale pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntPtrInput
	// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
	SiteVersion pulumi.IntPtrInput
	// Query string sorting, which is disabled by default. value:
	SortQueryStringForCache pulumi.StringPtrInput
	// When generating the cache key, add the client device type. value:
	UserDeviceType pulumi.StringPtrInput
	// When generating the cache key, add the client geographic location. value:
	UserGeo pulumi.StringPtrInput
	// When generating the cache key, add the client language type. value:
	UserLanguage pulumi.StringPtrInput
}

func (CacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleState)(nil)).Elem()
}

type cacheRuleArgs struct {
	// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
	AdditionalCacheablePorts *string `pulumi:"additionalCacheablePorts"`
	// Browser cache mode. value:
	BrowserCacheMode *string `pulumi:"browserCacheMode"`
	// The browser cache expiration time, in seconds.
	BrowserCacheTtl *string `pulumi:"browserCacheTtl"`
	// Set the cache bypass mode. value:
	BypassCache *string `pulumi:"bypassCache"`
	// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
	CacheDeceptionArmor *string `pulumi:"cacheDeceptionArmor"`
	// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
	CacheReserveEligibility *string `pulumi:"cacheReserveEligibility"`
	// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
	CheckPresenceCookie *string `pulumi:"checkPresenceCookie"`
	// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
	CheckPresenceHeader *string `pulumi:"checkPresenceHeader"`
	// Node cache mode. value:
	EdgeCacheMode *string `pulumi:"edgeCacheMode"`
	// The node cache expiration time, in seconds.
	EdgeCacheTtl *string `pulumi:"edgeCacheTtl"`
	// Status code cache expiration time, in seconds.
	EdgeStatusCodeCacheTtl *string `pulumi:"edgeStatusCodeCacheTtl"`
	// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
	IncludeCookie *string `pulumi:"includeCookie"`
	// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
	IncludeHeader *string `pulumi:"includeHeader"`
	// The query string to be retained or deleted. You can enter multiple values separated by spaces.
	QueryString *string `pulumi:"queryString"`
	// The processing mode for the query string when the cache key is generated. value:
	QueryStringMode *string `pulumi:"queryStringMode"`
	// The rule content.
	Rule *string `pulumi:"rule"`
	// Rule switch. value:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName *string `pulumi:"ruleName"`
	// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
	ServeStale *string `pulumi:"serveStale"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId int `pulumi:"siteId"`
	// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
	SiteVersion *int `pulumi:"siteVersion"`
	// Query string sorting, which is disabled by default. value:
	SortQueryStringForCache *string `pulumi:"sortQueryStringForCache"`
	// When generating the cache key, add the client device type. value:
	UserDeviceType *string `pulumi:"userDeviceType"`
	// When generating the cache key, add the client geographic location. value:
	UserGeo *string `pulumi:"userGeo"`
	// When generating the cache key, add the client language type. value:
	UserLanguage *string `pulumi:"userLanguage"`
}

// The set of arguments for constructing a CacheRule resource.
type CacheRuleArgs struct {
	// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
	AdditionalCacheablePorts pulumi.StringPtrInput
	// Browser cache mode. value:
	BrowserCacheMode pulumi.StringPtrInput
	// The browser cache expiration time, in seconds.
	BrowserCacheTtl pulumi.StringPtrInput
	// Set the cache bypass mode. value:
	BypassCache pulumi.StringPtrInput
	// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
	CacheDeceptionArmor pulumi.StringPtrInput
	// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
	CacheReserveEligibility pulumi.StringPtrInput
	// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
	CheckPresenceCookie pulumi.StringPtrInput
	// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
	CheckPresenceHeader pulumi.StringPtrInput
	// Node cache mode. value:
	EdgeCacheMode pulumi.StringPtrInput
	// The node cache expiration time, in seconds.
	EdgeCacheTtl pulumi.StringPtrInput
	// Status code cache expiration time, in seconds.
	EdgeStatusCodeCacheTtl pulumi.StringPtrInput
	// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
	IncludeCookie pulumi.StringPtrInput
	// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
	IncludeHeader pulumi.StringPtrInput
	// The query string to be retained or deleted. You can enter multiple values separated by spaces.
	QueryString pulumi.StringPtrInput
	// The processing mode for the query string when the cache key is generated. value:
	QueryStringMode pulumi.StringPtrInput
	// The rule content.
	Rule pulumi.StringPtrInput
	// Rule switch. value:
	RuleEnable pulumi.StringPtrInput
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrInput
	// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
	ServeStale pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntInput
	// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
	SiteVersion pulumi.IntPtrInput
	// Query string sorting, which is disabled by default. value:
	SortQueryStringForCache pulumi.StringPtrInput
	// When generating the cache key, add the client device type. value:
	UserDeviceType pulumi.StringPtrInput
	// When generating the cache key, add the client geographic location. value:
	UserGeo pulumi.StringPtrInput
	// When generating the cache key, add the client language type. value:
	UserLanguage pulumi.StringPtrInput
}

func (CacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleArgs)(nil)).Elem()
}

type CacheRuleInput interface {
	pulumi.Input

	ToCacheRuleOutput() CacheRuleOutput
	ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput
}

func (*CacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (i *CacheRule) ToCacheRuleOutput() CacheRuleOutput {
	return i.ToCacheRuleOutputWithContext(context.Background())
}

func (i *CacheRule) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleOutput)
}

// CacheRuleArrayInput is an input type that accepts CacheRuleArray and CacheRuleArrayOutput values.
// You can construct a concrete instance of `CacheRuleArrayInput` via:
//
//	CacheRuleArray{ CacheRuleArgs{...} }
type CacheRuleArrayInput interface {
	pulumi.Input

	ToCacheRuleArrayOutput() CacheRuleArrayOutput
	ToCacheRuleArrayOutputWithContext(context.Context) CacheRuleArrayOutput
}

type CacheRuleArray []CacheRuleInput

func (CacheRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheRule)(nil)).Elem()
}

func (i CacheRuleArray) ToCacheRuleArrayOutput() CacheRuleArrayOutput {
	return i.ToCacheRuleArrayOutputWithContext(context.Background())
}

func (i CacheRuleArray) ToCacheRuleArrayOutputWithContext(ctx context.Context) CacheRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleArrayOutput)
}

// CacheRuleMapInput is an input type that accepts CacheRuleMap and CacheRuleMapOutput values.
// You can construct a concrete instance of `CacheRuleMapInput` via:
//
//	CacheRuleMap{ "key": CacheRuleArgs{...} }
type CacheRuleMapInput interface {
	pulumi.Input

	ToCacheRuleMapOutput() CacheRuleMapOutput
	ToCacheRuleMapOutputWithContext(context.Context) CacheRuleMapOutput
}

type CacheRuleMap map[string]CacheRuleInput

func (CacheRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheRule)(nil)).Elem()
}

func (i CacheRuleMap) ToCacheRuleMapOutput() CacheRuleMapOutput {
	return i.ToCacheRuleMapOutputWithContext(context.Background())
}

func (i CacheRuleMap) ToCacheRuleMapOutputWithContext(ctx context.Context) CacheRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleMapOutput)
}

type CacheRuleOutput struct{ *pulumi.OutputState }

func (CacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (o CacheRuleOutput) ToCacheRuleOutput() CacheRuleOutput {
	return o
}

func (o CacheRuleOutput) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return o
}

// Enable caching on the specified port. value: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.
func (o CacheRuleOutput) AdditionalCacheablePorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.AdditionalCacheablePorts }).(pulumi.StringPtrOutput)
}

// Browser cache mode. value:
func (o CacheRuleOutput) BrowserCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BrowserCacheMode }).(pulumi.StringPtrOutput)
}

// The browser cache expiration time, in seconds.
func (o CacheRuleOutput) BrowserCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BrowserCacheTtl }).(pulumi.StringPtrOutput)
}

// Set the cache bypass mode. value:
func (o CacheRuleOutput) BypassCache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.BypassCache }).(pulumi.StringPtrOutput)
}

// Cache spoofing defense. Used to defend against Web cache spoofing attacks, the cached content that passes the check is cached. value:
func (o CacheRuleOutput) CacheDeceptionArmor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CacheDeceptionArmor }).(pulumi.StringPtrOutput)
}

// Cache retention eligibility. Used to control whether the user request bypasses the cache retention node when returning to the source. value:
func (o CacheRuleOutput) CacheReserveEligibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CacheReserveEligibility }).(pulumi.StringPtrOutput)
}

// The configured ConfigId. You can call the ListCacheRules operation to obtain the ConfigId.
func (o CacheRuleOutput) CacheRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntOutput { return v.CacheRuleId }).(pulumi.IntOutput)
}

// When generating the cache key, check whether the cookie exists, and if so, add the cookie name to the cache key (the cookie name is not case sensitive). Multiple cookie names are supported, with multiple values separated by spaces.
func (o CacheRuleOutput) CheckPresenceCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CheckPresenceCookie }).(pulumi.StringPtrOutput)
}

// When the cache key is generated, check whether the header exists. If the header exists, add the header name to the cache key (the header name is not case sensitive). You can enter multiple header names, with multiple values separated by spaces.
func (o CacheRuleOutput) CheckPresenceHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CheckPresenceHeader }).(pulumi.StringPtrOutput)
}

// Node cache mode. value:
func (o CacheRuleOutput) EdgeCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeCacheMode }).(pulumi.StringPtrOutput)
}

// The node cache expiration time, in seconds.
func (o CacheRuleOutput) EdgeCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeCacheTtl }).(pulumi.StringPtrOutput)
}

// Status code cache expiration time, in seconds.
func (o CacheRuleOutput) EdgeStatusCodeCacheTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.EdgeStatusCodeCacheTtl }).(pulumi.StringPtrOutput)
}

// When generating a cache key, it includes the specified cookie name and its value. You can enter multiple values separated by spaces.
func (o CacheRuleOutput) IncludeCookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.IncludeCookie }).(pulumi.StringPtrOutput)
}

// When generating a cache key, it includes the specified header name and its value. You can enter multiple values separated by spaces.
func (o CacheRuleOutput) IncludeHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.IncludeHeader }).(pulumi.StringPtrOutput)
}

// The query string to be retained or deleted. You can enter multiple values separated by spaces.
func (o CacheRuleOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.QueryString }).(pulumi.StringPtrOutput)
}

// The processing mode for the query string when the cache key is generated. value:
func (o CacheRuleOutput) QueryStringMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.QueryStringMode }).(pulumi.StringPtrOutput)
}

// The rule content.
func (o CacheRuleOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Rule switch. value:
func (o CacheRuleOutput) RuleEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.RuleEnable }).(pulumi.StringPtrOutput)
}

// Rule name, you can find out the rule whose rule name is the passed field.
func (o CacheRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Response expiration cache. After enabling, nodes can still use cached expired files to respond to user requests even if the source server is unavailable. value:
func (o CacheRuleOutput) ServeStale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.ServeStale }).(pulumi.StringPtrOutput)
}

// The site ID, which can be obtained by calling the ListSites API.
func (o CacheRuleOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Version number of the site configuration. For a site with configuration version management enabled, you can use this parameter to specify the site version in which the configuration takes effect. The default version is 0.
func (o CacheRuleOutput) SiteVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.IntPtrOutput { return v.SiteVersion }).(pulumi.IntPtrOutput)
}

// Query string sorting, which is disabled by default. value:
func (o CacheRuleOutput) SortQueryStringForCache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.SortQueryStringForCache }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the client device type. value:
func (o CacheRuleOutput) UserDeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserDeviceType }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the client geographic location. value:
func (o CacheRuleOutput) UserGeo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserGeo }).(pulumi.StringPtrOutput)
}

// When generating the cache key, add the client language type. value:
func (o CacheRuleOutput) UserLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.UserLanguage }).(pulumi.StringPtrOutput)
}

type CacheRuleArrayOutput struct{ *pulumi.OutputState }

func (CacheRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheRule)(nil)).Elem()
}

func (o CacheRuleArrayOutput) ToCacheRuleArrayOutput() CacheRuleArrayOutput {
	return o
}

func (o CacheRuleArrayOutput) ToCacheRuleArrayOutputWithContext(ctx context.Context) CacheRuleArrayOutput {
	return o
}

func (o CacheRuleArrayOutput) Index(i pulumi.IntInput) CacheRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CacheRule {
		return vs[0].([]*CacheRule)[vs[1].(int)]
	}).(CacheRuleOutput)
}

type CacheRuleMapOutput struct{ *pulumi.OutputState }

func (CacheRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheRule)(nil)).Elem()
}

func (o CacheRuleMapOutput) ToCacheRuleMapOutput() CacheRuleMapOutput {
	return o
}

func (o CacheRuleMapOutput) ToCacheRuleMapOutputWithContext(ctx context.Context) CacheRuleMapOutput {
	return o
}

func (o CacheRuleMapOutput) MapIndex(k pulumi.StringInput) CacheRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CacheRule {
		return vs[0].(map[string]*CacheRule)[vs[1].(string)]
	}).(CacheRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleInput)(nil)).Elem(), &CacheRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleArrayInput)(nil)).Elem(), CacheRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRuleMapInput)(nil)).Elem(), CacheRuleMap{})
	pulumi.RegisterOutputType(CacheRuleOutput{})
	pulumi.RegisterOutputType(CacheRuleArrayOutput{})
	pulumi.RegisterOutputType(CacheRuleMapOutput{})
}
