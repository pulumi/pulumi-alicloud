// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Image Transform resource.
//
// For information about ESA Image Transform and how to use it, see [What is Image Transform](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateImageTransform).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:   pulumi.String("imagetransform.tf.com"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("domestic"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewImageTransform(ctx, "default", &esa.ImageTransformArgs{
//				Rule:        pulumi.String("http.host eq \"video.example.com\""),
//				SiteVersion: pulumi.Int(0),
//				RuleName:    pulumi.String("rule_example"),
//				SiteId:      defaultSite.ID(),
//				RuleEnable:  pulumi.String("off"),
//				Enable:      pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Image Transform can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/imageTransform:ImageTransform example <site_id>:<config_id>
// ```
type ImageTransform struct {
	pulumi.CustomResourceState

	// Config Id
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Indicates whether the image transformations feature is enabled. Valid values:
	Enable pulumi.StringPtrOutput `pulumi:"enable"`
	// The rule content, which is a policy or conditional expression.
	Rule pulumi.StringPtrOutput `pulumi:"rule"`
	// Indicates whether the rule is enabled. Valid values:
	RuleEnable pulumi.StringPtrOutput `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The version number of the website.
	SiteVersion pulumi.IntPtrOutput `pulumi:"siteVersion"`
}

// NewImageTransform registers a new resource with the given unique name, arguments, and options.
func NewImageTransform(ctx *pulumi.Context,
	name string, args *ImageTransformArgs, opts ...pulumi.ResourceOption) (*ImageTransform, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageTransform
	err := ctx.RegisterResource("alicloud:esa/imageTransform:ImageTransform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageTransform gets an existing ImageTransform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageTransform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageTransformState, opts ...pulumi.ResourceOption) (*ImageTransform, error) {
	var resource ImageTransform
	err := ctx.ReadResource("alicloud:esa/imageTransform:ImageTransform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageTransform resources.
type imageTransformState struct {
	// Config Id
	ConfigId *int `pulumi:"configId"`
	// Indicates whether the image transformations feature is enabled. Valid values:
	Enable *string `pulumi:"enable"`
	// The rule content, which is a policy or conditional expression.
	Rule *string `pulumi:"rule"`
	// Indicates whether the rule is enabled. Valid values:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName *string `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId *int `pulumi:"siteId"`
	// The version number of the website.
	SiteVersion *int `pulumi:"siteVersion"`
}

type ImageTransformState struct {
	// Config Id
	ConfigId pulumi.IntPtrInput
	// Indicates whether the image transformations feature is enabled. Valid values:
	Enable pulumi.StringPtrInput
	// The rule content, which is a policy or conditional expression.
	Rule pulumi.StringPtrInput
	// Indicates whether the rule is enabled. Valid values:
	RuleEnable pulumi.StringPtrInput
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntPtrInput
	// The version number of the website.
	SiteVersion pulumi.IntPtrInput
}

func (ImageTransformState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageTransformState)(nil)).Elem()
}

type imageTransformArgs struct {
	// Indicates whether the image transformations feature is enabled. Valid values:
	Enable *string `pulumi:"enable"`
	// The rule content, which is a policy or conditional expression.
	Rule *string `pulumi:"rule"`
	// Indicates whether the rule is enabled. Valid values:
	RuleEnable *string `pulumi:"ruleEnable"`
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName *string `pulumi:"ruleName"`
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId int `pulumi:"siteId"`
	// The version number of the website.
	SiteVersion *int `pulumi:"siteVersion"`
}

// The set of arguments for constructing a ImageTransform resource.
type ImageTransformArgs struct {
	// Indicates whether the image transformations feature is enabled. Valid values:
	Enable pulumi.StringPtrInput
	// The rule content, which is a policy or conditional expression.
	Rule pulumi.StringPtrInput
	// Indicates whether the rule is enabled. Valid values:
	RuleEnable pulumi.StringPtrInput
	// Rule name, you can find out the rule whose rule name is the passed field.
	RuleName pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites API.
	SiteId pulumi.IntInput
	// The version number of the website.
	SiteVersion pulumi.IntPtrInput
}

func (ImageTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageTransformArgs)(nil)).Elem()
}

type ImageTransformInput interface {
	pulumi.Input

	ToImageTransformOutput() ImageTransformOutput
	ToImageTransformOutputWithContext(ctx context.Context) ImageTransformOutput
}

func (*ImageTransform) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTransform)(nil)).Elem()
}

func (i *ImageTransform) ToImageTransformOutput() ImageTransformOutput {
	return i.ToImageTransformOutputWithContext(context.Background())
}

func (i *ImageTransform) ToImageTransformOutputWithContext(ctx context.Context) ImageTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTransformOutput)
}

// ImageTransformArrayInput is an input type that accepts ImageTransformArray and ImageTransformArrayOutput values.
// You can construct a concrete instance of `ImageTransformArrayInput` via:
//
//	ImageTransformArray{ ImageTransformArgs{...} }
type ImageTransformArrayInput interface {
	pulumi.Input

	ToImageTransformArrayOutput() ImageTransformArrayOutput
	ToImageTransformArrayOutputWithContext(context.Context) ImageTransformArrayOutput
}

type ImageTransformArray []ImageTransformInput

func (ImageTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageTransform)(nil)).Elem()
}

func (i ImageTransformArray) ToImageTransformArrayOutput() ImageTransformArrayOutput {
	return i.ToImageTransformArrayOutputWithContext(context.Background())
}

func (i ImageTransformArray) ToImageTransformArrayOutputWithContext(ctx context.Context) ImageTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTransformArrayOutput)
}

// ImageTransformMapInput is an input type that accepts ImageTransformMap and ImageTransformMapOutput values.
// You can construct a concrete instance of `ImageTransformMapInput` via:
//
//	ImageTransformMap{ "key": ImageTransformArgs{...} }
type ImageTransformMapInput interface {
	pulumi.Input

	ToImageTransformMapOutput() ImageTransformMapOutput
	ToImageTransformMapOutputWithContext(context.Context) ImageTransformMapOutput
}

type ImageTransformMap map[string]ImageTransformInput

func (ImageTransformMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageTransform)(nil)).Elem()
}

func (i ImageTransformMap) ToImageTransformMapOutput() ImageTransformMapOutput {
	return i.ToImageTransformMapOutputWithContext(context.Background())
}

func (i ImageTransformMap) ToImageTransformMapOutputWithContext(ctx context.Context) ImageTransformMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTransformMapOutput)
}

type ImageTransformOutput struct{ *pulumi.OutputState }

func (ImageTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTransform)(nil)).Elem()
}

func (o ImageTransformOutput) ToImageTransformOutput() ImageTransformOutput {
	return o
}

func (o ImageTransformOutput) ToImageTransformOutputWithContext(ctx context.Context) ImageTransformOutput {
	return o
}

// Config Id
func (o ImageTransformOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Indicates whether the image transformations feature is enabled. Valid values:
func (o ImageTransformOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.StringPtrOutput { return v.Enable }).(pulumi.StringPtrOutput)
}

// The rule content, which is a policy or conditional expression.
func (o ImageTransformOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.StringPtrOutput { return v.Rule }).(pulumi.StringPtrOutput)
}

// Indicates whether the rule is enabled. Valid values:
func (o ImageTransformOutput) RuleEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.StringPtrOutput { return v.RuleEnable }).(pulumi.StringPtrOutput)
}

// Rule name, you can find out the rule whose rule name is the passed field.
func (o ImageTransformOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// The site ID, which can be obtained by calling the ListSites API.
func (o ImageTransformOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The version number of the website.
func (o ImageTransformOutput) SiteVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageTransform) pulumi.IntPtrOutput { return v.SiteVersion }).(pulumi.IntPtrOutput)
}

type ImageTransformArrayOutput struct{ *pulumi.OutputState }

func (ImageTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageTransform)(nil)).Elem()
}

func (o ImageTransformArrayOutput) ToImageTransformArrayOutput() ImageTransformArrayOutput {
	return o
}

func (o ImageTransformArrayOutput) ToImageTransformArrayOutputWithContext(ctx context.Context) ImageTransformArrayOutput {
	return o
}

func (o ImageTransformArrayOutput) Index(i pulumi.IntInput) ImageTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageTransform {
		return vs[0].([]*ImageTransform)[vs[1].(int)]
	}).(ImageTransformOutput)
}

type ImageTransformMapOutput struct{ *pulumi.OutputState }

func (ImageTransformMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageTransform)(nil)).Elem()
}

func (o ImageTransformMapOutput) ToImageTransformMapOutput() ImageTransformMapOutput {
	return o
}

func (o ImageTransformMapOutput) ToImageTransformMapOutputWithContext(ctx context.Context) ImageTransformMapOutput {
	return o
}

func (o ImageTransformMapOutput) MapIndex(k pulumi.StringInput) ImageTransformOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageTransform {
		return vs[0].(map[string]*ImageTransform)[vs[1].(string)]
	}).(ImageTransformOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTransformInput)(nil)).Elem(), &ImageTransform{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTransformArrayInput)(nil)).Elem(), ImageTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTransformMapInput)(nil)).Elem(), ImageTransformMap{})
	pulumi.RegisterOutputType(ImageTransformOutput{})
	pulumi.RegisterOutputType(ImageTransformArrayOutput{})
	pulumi.RegisterOutputType(ImageTransformMapOutput{})
}
