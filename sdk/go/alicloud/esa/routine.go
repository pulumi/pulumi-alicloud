// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Routine resource.
//
// For information about ESA Routine and how to use it, see [What is Routine](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateRoutine).
//
// > **NOTE:** Available since v1.251.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := esa.NewRoutine(ctx, "default", &esa.RoutineArgs{
//				Description: pulumi.String(name),
//				Name:        pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Routine can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/routine:Routine example <id>
// ```
type Routine struct {
	pulumi.CustomResourceState

	// The time when the routine was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The routine name, which must be unique in the same account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Routine Name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRoutine registers a new resource with the given unique name, arguments, and options.
func NewRoutine(ctx *pulumi.Context,
	name string, args *RoutineArgs, opts ...pulumi.ResourceOption) (*Routine, error) {
	if args == nil {
		args = &RoutineArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Routine
	err := ctx.RegisterResource("alicloud:esa/routine:Routine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutine gets an existing Routine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutineState, opts ...pulumi.ResourceOption) (*Routine, error) {
	var resource Routine
	err := ctx.ReadResource("alicloud:esa/routine:Routine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routine resources.
type routineState struct {
	// The time when the routine was created.
	CreateTime *string `pulumi:"createTime"`
	// The routine name, which must be unique in the same account.
	Description *string `pulumi:"description"`
	// Routine Name
	Name *string `pulumi:"name"`
}

type RoutineState struct {
	// The time when the routine was created.
	CreateTime pulumi.StringPtrInput
	// The routine name, which must be unique in the same account.
	Description pulumi.StringPtrInput
	// Routine Name
	Name pulumi.StringPtrInput
}

func (RoutineState) ElementType() reflect.Type {
	return reflect.TypeOf((*routineState)(nil)).Elem()
}

type routineArgs struct {
	// The routine name, which must be unique in the same account.
	Description *string `pulumi:"description"`
	// Routine Name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Routine resource.
type RoutineArgs struct {
	// The routine name, which must be unique in the same account.
	Description pulumi.StringPtrInput
	// Routine Name
	Name pulumi.StringPtrInput
}

func (RoutineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routineArgs)(nil)).Elem()
}

type RoutineInput interface {
	pulumi.Input

	ToRoutineOutput() RoutineOutput
	ToRoutineOutputWithContext(ctx context.Context) RoutineOutput
}

func (*Routine) ElementType() reflect.Type {
	return reflect.TypeOf((**Routine)(nil)).Elem()
}

func (i *Routine) ToRoutineOutput() RoutineOutput {
	return i.ToRoutineOutputWithContext(context.Background())
}

func (i *Routine) ToRoutineOutputWithContext(ctx context.Context) RoutineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineOutput)
}

// RoutineArrayInput is an input type that accepts RoutineArray and RoutineArrayOutput values.
// You can construct a concrete instance of `RoutineArrayInput` via:
//
//	RoutineArray{ RoutineArgs{...} }
type RoutineArrayInput interface {
	pulumi.Input

	ToRoutineArrayOutput() RoutineArrayOutput
	ToRoutineArrayOutputWithContext(context.Context) RoutineArrayOutput
}

type RoutineArray []RoutineInput

func (RoutineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routine)(nil)).Elem()
}

func (i RoutineArray) ToRoutineArrayOutput() RoutineArrayOutput {
	return i.ToRoutineArrayOutputWithContext(context.Background())
}

func (i RoutineArray) ToRoutineArrayOutputWithContext(ctx context.Context) RoutineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineArrayOutput)
}

// RoutineMapInput is an input type that accepts RoutineMap and RoutineMapOutput values.
// You can construct a concrete instance of `RoutineMapInput` via:
//
//	RoutineMap{ "key": RoutineArgs{...} }
type RoutineMapInput interface {
	pulumi.Input

	ToRoutineMapOutput() RoutineMapOutput
	ToRoutineMapOutputWithContext(context.Context) RoutineMapOutput
}

type RoutineMap map[string]RoutineInput

func (RoutineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routine)(nil)).Elem()
}

func (i RoutineMap) ToRoutineMapOutput() RoutineMapOutput {
	return i.ToRoutineMapOutputWithContext(context.Background())
}

func (i RoutineMap) ToRoutineMapOutputWithContext(ctx context.Context) RoutineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineMapOutput)
}

type RoutineOutput struct{ *pulumi.OutputState }

func (RoutineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routine)(nil)).Elem()
}

func (o RoutineOutput) ToRoutineOutput() RoutineOutput {
	return o
}

func (o RoutineOutput) ToRoutineOutputWithContext(ctx context.Context) RoutineOutput {
	return o
}

// The time when the routine was created.
func (o RoutineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The routine name, which must be unique in the same account.
func (o RoutineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Routine Name
func (o RoutineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RoutineArrayOutput struct{ *pulumi.OutputState }

func (RoutineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routine)(nil)).Elem()
}

func (o RoutineArrayOutput) ToRoutineArrayOutput() RoutineArrayOutput {
	return o
}

func (o RoutineArrayOutput) ToRoutineArrayOutputWithContext(ctx context.Context) RoutineArrayOutput {
	return o
}

func (o RoutineArrayOutput) Index(i pulumi.IntInput) RoutineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Routine {
		return vs[0].([]*Routine)[vs[1].(int)]
	}).(RoutineOutput)
}

type RoutineMapOutput struct{ *pulumi.OutputState }

func (RoutineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routine)(nil)).Elem()
}

func (o RoutineMapOutput) ToRoutineMapOutput() RoutineMapOutput {
	return o
}

func (o RoutineMapOutput) ToRoutineMapOutputWithContext(ctx context.Context) RoutineMapOutput {
	return o
}

func (o RoutineMapOutput) MapIndex(k pulumi.StringInput) RoutineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Routine {
		return vs[0].(map[string]*Routine)[vs[1].(string)]
	}).(RoutineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineInput)(nil)).Elem(), &Routine{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineArrayInput)(nil)).Elem(), RoutineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineMapInput)(nil)).Elem(), RoutineMap{})
	pulumi.RegisterOutputType(RoutineOutput{})
	pulumi.RegisterOutputType(RoutineArrayOutput{})
	pulumi.RegisterOutputType(RoutineMapOutput{})
}
