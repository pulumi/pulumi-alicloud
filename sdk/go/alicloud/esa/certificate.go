// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Certificate resource.
//
// For information about ESA Certificate and how to use it, see [What is Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/SetCertificate).
//
// > **NOTE:** Available since v1.244.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//				SiteName:          pulumi.StringRef("gositecdn.cn"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewCertificate(ctx, "default", &esa.CertificateArgs{
//				CreatedType: pulumi.String("free"),
//				Domains:     pulumi.String("101.gositecdn.cn"),
//				SiteId:      pulumi.Int(_default.Sites[0].Id),
//				Type:        pulumi.String("lets_encrypt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/certificate:Certificate example <site_id>:<cert_id>
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// Cloud certificate ID.
	CasId pulumi.StringPtrOutput `pulumi:"casId"`
	// The certificate Id.
	CertId pulumi.StringOutput `pulumi:"certId"`
	// The certificate name.
	CertName pulumi.StringOutput `pulumi:"certName"`
	// The certificate type. Valid values:
	//
	// - cas: a certificate purchased by using Certificate Management Service.
	// - upload: a custom certificate that you upload.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The certificate type.
	// - cas (Certificate Center Certificate)
	// - upload (custom upload certificate)
	// - free( Free certificate).
	CreatedType pulumi.StringOutput `pulumi:"createdType"`
	// A list of domain names. Multiple domain names are separated by commas.
	Domains pulumi.StringPtrOutput `pulumi:"domains"`
	// The certificate private key.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Geographical information.
	Region pulumi.StringOutput `pulumi:"region"`
	// The site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
	Status pulumi.StringOutput `pulumi:"status"`
	// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreatedType == nil {
		return nil, errors.New("invalid value for required argument 'CreatedType'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("alicloud:esa/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("alicloud:esa/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Cloud certificate ID.
	CasId *string `pulumi:"casId"`
	// The certificate Id.
	CertId *string `pulumi:"certId"`
	// The certificate name.
	CertName *string `pulumi:"certName"`
	// The certificate type. Valid values:
	//
	// - cas: a certificate purchased by using Certificate Management Service.
	// - upload: a custom certificate that you upload.
	Certificate *string `pulumi:"certificate"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// The certificate type.
	// - cas (Certificate Center Certificate)
	// - upload (custom upload certificate)
	// - free( Free certificate).
	CreatedType *string `pulumi:"createdType"`
	// A list of domain names. Multiple domain names are separated by commas.
	Domains *string `pulumi:"domains"`
	// The certificate private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Geographical information.
	Region *string `pulumi:"region"`
	// The site ID, which can be obtained by calling the ListSites interface.
	SiteId *int `pulumi:"siteId"`
	// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
	Status *string `pulumi:"status"`
	// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
	Type *string `pulumi:"type"`
}

type CertificateState struct {
	// Cloud certificate ID.
	CasId pulumi.StringPtrInput
	// The certificate Id.
	CertId pulumi.StringPtrInput
	// The certificate name.
	CertName pulumi.StringPtrInput
	// The certificate type. Valid values:
	//
	// - cas: a certificate purchased by using Certificate Management Service.
	// - upload: a custom certificate that you upload.
	Certificate pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// The certificate type.
	// - cas (Certificate Center Certificate)
	// - upload (custom upload certificate)
	// - free( Free certificate).
	CreatedType pulumi.StringPtrInput
	// A list of domain names. Multiple domain names are separated by commas.
	Domains pulumi.StringPtrInput
	// The certificate private key.
	PrivateKey pulumi.StringPtrInput
	// Geographical information.
	Region pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntPtrInput
	// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
	Status pulumi.StringPtrInput
	// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
	Type pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Cloud certificate ID.
	CasId *string `pulumi:"casId"`
	// The certificate Id.
	CertId *string `pulumi:"certId"`
	// The certificate name.
	CertName *string `pulumi:"certName"`
	// The certificate type. Valid values:
	//
	// - cas: a certificate purchased by using Certificate Management Service.
	// - upload: a custom certificate that you upload.
	Certificate *string `pulumi:"certificate"`
	// The certificate type.
	// - cas (Certificate Center Certificate)
	// - upload (custom upload certificate)
	// - free( Free certificate).
	CreatedType string `pulumi:"createdType"`
	// A list of domain names. Multiple domain names are separated by commas.
	Domains *string `pulumi:"domains"`
	// The certificate private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Geographical information.
	Region *string `pulumi:"region"`
	// The site ID, which can be obtained by calling the ListSites interface.
	SiteId int `pulumi:"siteId"`
	// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Cloud certificate ID.
	CasId pulumi.StringPtrInput
	// The certificate Id.
	CertId pulumi.StringPtrInput
	// The certificate name.
	CertName pulumi.StringPtrInput
	// The certificate type. Valid values:
	//
	// - cas: a certificate purchased by using Certificate Management Service.
	// - upload: a custom certificate that you upload.
	Certificate pulumi.StringPtrInput
	// The certificate type.
	// - cas (Certificate Center Certificate)
	// - upload (custom upload certificate)
	// - free( Free certificate).
	CreatedType pulumi.StringInput
	// A list of domain names. Multiple domain names are separated by commas.
	Domains pulumi.StringPtrInput
	// The certificate private key.
	PrivateKey pulumi.StringPtrInput
	// Geographical information.
	Region pulumi.StringPtrInput
	// The site ID, which can be obtained by calling the ListSites interface.
	SiteId pulumi.IntInput
	// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
	Type pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Cloud certificate ID.
func (o CertificateOutput) CasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CasId }).(pulumi.StringPtrOutput)
}

// The certificate Id.
func (o CertificateOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertId }).(pulumi.StringOutput)
}

// The certificate name.
func (o CertificateOutput) CertName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertName }).(pulumi.StringOutput)
}

// The certificate type. Valid values:
//
// - cas: a certificate purchased by using Certificate Management Service.
// - upload: a custom certificate that you upload.
func (o CertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Creation time.
func (o CertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The certificate type.
// - cas (Certificate Center Certificate)
// - upload (custom upload certificate)
// - free( Free certificate).
func (o CertificateOutput) CreatedType() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CreatedType }).(pulumi.StringOutput)
}

// A list of domain names. Multiple domain names are separated by commas.
func (o CertificateOutput) Domains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Domains }).(pulumi.StringPtrOutput)
}

// The certificate private key.
func (o CertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Geographical information.
func (o CertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The site ID, which can be obtained by calling the ListSites interface.
func (o CertificateOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *Certificate) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Certificate status.(within 30 days).- issued.- applying.- application failed.- canceled.
func (o CertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Certificate type. Possible values: lets_encrypt: Let's Encrypt certificate;
func (o CertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
