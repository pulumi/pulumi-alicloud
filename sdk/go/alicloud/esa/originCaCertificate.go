// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Origin Ca Certificate resource.
//
// For information about ESA Origin Ca Certificate and how to use it, see [What is Origin Ca Certificate](https://next.api.alibabacloud.com/document/ESA/2024-09-10/UploadOriginCaCertificate).
//
// > **NOTE:** Available since v1.256.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := esa.NewSite(ctx, "example", &esa.SiteArgs{
//				SiteName:   pulumi.String("bcd.com"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewOriginCaCertificate(ctx, "default", &esa.OriginCaCertificateArgs{
//				SiteId: example.ID(),
//				Certificate: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIIDRTCCAi2gAwIBAgIUHRPTIPKP2zN9on/NCzBe0BV68UUwDQYJKoZIhvcNAQEF
// BQAwMzEPMA0GA1UEAwwGU1NMZXllMRMwEQYDVQQKDApTU0xleWUgSW5jMQswCQYD
// VQQGEwJDTjAeFw0yNTA3MzAwODQzMDBaFw0yNTEyMzEwODQwMDBaMGQxCzAJBgNV
// BAYTAkNOMQ8wDQYDVQQIDAbljJfkuqwxEDAOBgNVBAcMB0JlaWppbmcxGzAZBgNV
// BAoMEuenkeaKgOaciemZkOWFrOWPuDEVMBMGA1UEAwwMZ29zaXRlY2RuLmNuMIIB
// IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtu2oW3t2bj9LsFnXj1C2EmaR
// JYJwNgHsTBKl3DxeL2+Ext0qN2Z+UgTqYM1c1HOdwN9x13pnAVe4PmiLAkxpp/4u
// 5gKsH1+6p3aXFUk0NvEoLXfESoQpyvoB0o/8oryxNs3+iUfvAk+a7IKAr99a1P9F
// TkpyE6t+dgSLYhHc49ZRdYImmZcYQLmpygYOwWBdv6hlQUFi/tvX16fRZ0GgyUOK
// 7xsTWG6qUhPJyLRtj9zn+0khgh5DJhfJQ4KTWZMX63UPiIx7sPu9sR+TPWqJsEuq
// VipxouMys+NNMjDtn55+PE6/sDbkvULHeFUglGMZ9qHcl3ej31zmkhu6bmvNcQID
// AQABoyAwHjALBgNVHREEBDACggAwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0B
// AQUFAAOCAQEAF6J9TdaDYQ96EaWvb2ttQ6jNrDe4k3t1cdfhPEWMJzxZFxoDBYZ2
// Al9vB2JICEsGDkCwpqYz2UXJsGnq2rHjUxouYo1568K/loownWjwdCgdLGbQpnXY
// QeqPSTRLT71ikH+RqCpoYxcN63i3j9oYWm9KoD5F4arcqlLrEUZ1TqW5csGSY1h6
// 2HmGPsINl9KCxwUS+76dxsdHIqLFx0qdnD6S5vmd0sin33jdYhj9ltp0KvhEgMvS
// XMuzECVRvI4MZxebf7gkV3EByqV6XvazBSxuMhplygpAaLra11yV1M/m9wzVwlnS
// S2GNvRkNym9WnH0IQ0kn9hS8hj52Nh12JQ==
// -----END CERTIFICATE-----`),
//
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Origin Ca Certificate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/originCaCertificate:OriginCaCertificate example <site_id>:<origin_ca_certificate_id>
// ```
type OriginCaCertificate struct {
	pulumi.CustomResourceState

	// Certificate content.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The certificate name.
	Name pulumi.StringOutput `pulumi:"name"`
	// OriginCaCertificate Id
	OriginCaCertificateId pulumi.StringOutput `pulumi:"originCaCertificateId"`
	// Site Id
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// Certificate status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewOriginCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewOriginCaCertificate(ctx *pulumi.Context,
	name string, args *OriginCaCertificateArgs, opts ...pulumi.ResourceOption) (*OriginCaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OriginCaCertificate
	err := ctx.RegisterResource("alicloud:esa/originCaCertificate:OriginCaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOriginCaCertificate gets an existing OriginCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOriginCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OriginCaCertificateState, opts ...pulumi.ResourceOption) (*OriginCaCertificate, error) {
	var resource OriginCaCertificate
	err := ctx.ReadResource("alicloud:esa/originCaCertificate:OriginCaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OriginCaCertificate resources.
type originCaCertificateState struct {
	// Certificate content.
	Certificate *string `pulumi:"certificate"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// The certificate name.
	Name *string `pulumi:"name"`
	// OriginCaCertificate Id
	OriginCaCertificateId *string `pulumi:"originCaCertificateId"`
	// Site Id
	SiteId *int `pulumi:"siteId"`
	// Certificate status.
	Status *string `pulumi:"status"`
}

type OriginCaCertificateState struct {
	// Certificate content.
	Certificate pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// The certificate name.
	Name pulumi.StringPtrInput
	// OriginCaCertificate Id
	OriginCaCertificateId pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntPtrInput
	// Certificate status.
	Status pulumi.StringPtrInput
}

func (OriginCaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*originCaCertificateState)(nil)).Elem()
}

type originCaCertificateArgs struct {
	// Certificate content.
	Certificate string `pulumi:"certificate"`
	// The certificate name.
	Name *string `pulumi:"name"`
	// Site Id
	SiteId int `pulumi:"siteId"`
}

// The set of arguments for constructing a OriginCaCertificate resource.
type OriginCaCertificateArgs struct {
	// Certificate content.
	Certificate pulumi.StringInput
	// The certificate name.
	Name pulumi.StringPtrInput
	// Site Id
	SiteId pulumi.IntInput
}

func (OriginCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*originCaCertificateArgs)(nil)).Elem()
}

type OriginCaCertificateInput interface {
	pulumi.Input

	ToOriginCaCertificateOutput() OriginCaCertificateOutput
	ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput
}

func (*OriginCaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginCaCertificate)(nil)).Elem()
}

func (i *OriginCaCertificate) ToOriginCaCertificateOutput() OriginCaCertificateOutput {
	return i.ToOriginCaCertificateOutputWithContext(context.Background())
}

func (i *OriginCaCertificate) ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateOutput)
}

// OriginCaCertificateArrayInput is an input type that accepts OriginCaCertificateArray and OriginCaCertificateArrayOutput values.
// You can construct a concrete instance of `OriginCaCertificateArrayInput` via:
//
//	OriginCaCertificateArray{ OriginCaCertificateArgs{...} }
type OriginCaCertificateArrayInput interface {
	pulumi.Input

	ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput
	ToOriginCaCertificateArrayOutputWithContext(context.Context) OriginCaCertificateArrayOutput
}

type OriginCaCertificateArray []OriginCaCertificateInput

func (OriginCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OriginCaCertificate)(nil)).Elem()
}

func (i OriginCaCertificateArray) ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput {
	return i.ToOriginCaCertificateArrayOutputWithContext(context.Background())
}

func (i OriginCaCertificateArray) ToOriginCaCertificateArrayOutputWithContext(ctx context.Context) OriginCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateArrayOutput)
}

// OriginCaCertificateMapInput is an input type that accepts OriginCaCertificateMap and OriginCaCertificateMapOutput values.
// You can construct a concrete instance of `OriginCaCertificateMapInput` via:
//
//	OriginCaCertificateMap{ "key": OriginCaCertificateArgs{...} }
type OriginCaCertificateMapInput interface {
	pulumi.Input

	ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput
	ToOriginCaCertificateMapOutputWithContext(context.Context) OriginCaCertificateMapOutput
}

type OriginCaCertificateMap map[string]OriginCaCertificateInput

func (OriginCaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OriginCaCertificate)(nil)).Elem()
}

func (i OriginCaCertificateMap) ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput {
	return i.ToOriginCaCertificateMapOutputWithContext(context.Background())
}

func (i OriginCaCertificateMap) ToOriginCaCertificateMapOutputWithContext(ctx context.Context) OriginCaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateMapOutput)
}

type OriginCaCertificateOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateOutput) ToOriginCaCertificateOutput() OriginCaCertificateOutput {
	return o
}

func (o OriginCaCertificateOutput) ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput {
	return o
}

// Certificate content.
func (o OriginCaCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Creation time.
func (o OriginCaCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The certificate name.
func (o OriginCaCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// OriginCaCertificate Id
func (o OriginCaCertificateOutput) OriginCaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.OriginCaCertificateId }).(pulumi.StringOutput)
}

// Site Id
func (o OriginCaCertificateOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Certificate status.
func (o OriginCaCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type OriginCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateArrayOutput) ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput {
	return o
}

func (o OriginCaCertificateArrayOutput) ToOriginCaCertificateArrayOutputWithContext(ctx context.Context) OriginCaCertificateArrayOutput {
	return o
}

func (o OriginCaCertificateArrayOutput) Index(i pulumi.IntInput) OriginCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OriginCaCertificate {
		return vs[0].([]*OriginCaCertificate)[vs[1].(int)]
	}).(OriginCaCertificateOutput)
}

type OriginCaCertificateMapOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateMapOutput) ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput {
	return o
}

func (o OriginCaCertificateMapOutput) ToOriginCaCertificateMapOutputWithContext(ctx context.Context) OriginCaCertificateMapOutput {
	return o
}

func (o OriginCaCertificateMapOutput) MapIndex(k pulumi.StringInput) OriginCaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OriginCaCertificate {
		return vs[0].(map[string]*OriginCaCertificate)[vs[1].(string)]
	}).(OriginCaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateInput)(nil)).Elem(), &OriginCaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateArrayInput)(nil)).Elem(), OriginCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateMapInput)(nil)).Elem(), OriginCaCertificateMap{})
	pulumi.RegisterOutputType(OriginCaCertificateOutput{})
	pulumi.RegisterOutputType(OriginCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(OriginCaCertificateMapOutput{})
}
