// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ESA Url Observation resource.
//
// Web page monitoring.
//
// For information about ESA Url Observation and how to use it, see [What is Url Observation](https://next.api.alibabacloud.com/document/ESA/2024-09-10/CreateUrlObservation).
//
// > **NOTE:** Available since v1.259.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/esa"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := esa.GetSites(ctx, &esa.GetSitesArgs{
//				PlanSubscribeType: pulumi.StringRef("enterpriseplan"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSite, err := esa.NewSite(ctx, "default", &esa.SiteArgs{
//				SiteName:   pulumi.String("terraform.cn"),
//				InstanceId: pulumi.String(_default.Sites[0].InstanceId),
//				Coverage:   pulumi.String("overseas"),
//				AccessType: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = esa.NewUrlObservation(ctx, "default", &esa.UrlObservationArgs{
//				SdkType: pulumi.String("automatic"),
//				SiteId:  defaultSite.ID(),
//				Url:     pulumi.String("terraform.cn/a.html"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ESA Url Observation can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:esa/urlObservation:UrlObservation example <site_id>:<config_id>
// ```
type UrlObservation struct {
	pulumi.CustomResourceState

	// Config Id
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// SDK integration mode. Value:
	SdkType pulumi.StringOutput `pulumi:"sdkType"`
	// The site ID.
	SiteId pulumi.IntOutput `pulumi:"siteId"`
	// The URL of the page to monitor.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewUrlObservation registers a new resource with the given unique name, arguments, and options.
func NewUrlObservation(ctx *pulumi.Context,
	name string, args *UrlObservationArgs, opts ...pulumi.ResourceOption) (*UrlObservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SdkType == nil {
		return nil, errors.New("invalid value for required argument 'SdkType'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UrlObservation
	err := ctx.RegisterResource("alicloud:esa/urlObservation:UrlObservation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUrlObservation gets an existing UrlObservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUrlObservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UrlObservationState, opts ...pulumi.ResourceOption) (*UrlObservation, error) {
	var resource UrlObservation
	err := ctx.ReadResource("alicloud:esa/urlObservation:UrlObservation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UrlObservation resources.
type urlObservationState struct {
	// Config Id
	ConfigId *int `pulumi:"configId"`
	// SDK integration mode. Value:
	SdkType *string `pulumi:"sdkType"`
	// The site ID.
	SiteId *int `pulumi:"siteId"`
	// The URL of the page to monitor.
	Url *string `pulumi:"url"`
}

type UrlObservationState struct {
	// Config Id
	ConfigId pulumi.IntPtrInput
	// SDK integration mode. Value:
	SdkType pulumi.StringPtrInput
	// The site ID.
	SiteId pulumi.IntPtrInput
	// The URL of the page to monitor.
	Url pulumi.StringPtrInput
}

func (UrlObservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*urlObservationState)(nil)).Elem()
}

type urlObservationArgs struct {
	// SDK integration mode. Value:
	SdkType string `pulumi:"sdkType"`
	// The site ID.
	SiteId int `pulumi:"siteId"`
	// The URL of the page to monitor.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a UrlObservation resource.
type UrlObservationArgs struct {
	// SDK integration mode. Value:
	SdkType pulumi.StringInput
	// The site ID.
	SiteId pulumi.IntInput
	// The URL of the page to monitor.
	Url pulumi.StringInput
}

func (UrlObservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*urlObservationArgs)(nil)).Elem()
}

type UrlObservationInput interface {
	pulumi.Input

	ToUrlObservationOutput() UrlObservationOutput
	ToUrlObservationOutputWithContext(ctx context.Context) UrlObservationOutput
}

func (*UrlObservation) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlObservation)(nil)).Elem()
}

func (i *UrlObservation) ToUrlObservationOutput() UrlObservationOutput {
	return i.ToUrlObservationOutputWithContext(context.Background())
}

func (i *UrlObservation) ToUrlObservationOutputWithContext(ctx context.Context) UrlObservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlObservationOutput)
}

// UrlObservationArrayInput is an input type that accepts UrlObservationArray and UrlObservationArrayOutput values.
// You can construct a concrete instance of `UrlObservationArrayInput` via:
//
//	UrlObservationArray{ UrlObservationArgs{...} }
type UrlObservationArrayInput interface {
	pulumi.Input

	ToUrlObservationArrayOutput() UrlObservationArrayOutput
	ToUrlObservationArrayOutputWithContext(context.Context) UrlObservationArrayOutput
}

type UrlObservationArray []UrlObservationInput

func (UrlObservationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlObservation)(nil)).Elem()
}

func (i UrlObservationArray) ToUrlObservationArrayOutput() UrlObservationArrayOutput {
	return i.ToUrlObservationArrayOutputWithContext(context.Background())
}

func (i UrlObservationArray) ToUrlObservationArrayOutputWithContext(ctx context.Context) UrlObservationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlObservationArrayOutput)
}

// UrlObservationMapInput is an input type that accepts UrlObservationMap and UrlObservationMapOutput values.
// You can construct a concrete instance of `UrlObservationMapInput` via:
//
//	UrlObservationMap{ "key": UrlObservationArgs{...} }
type UrlObservationMapInput interface {
	pulumi.Input

	ToUrlObservationMapOutput() UrlObservationMapOutput
	ToUrlObservationMapOutputWithContext(context.Context) UrlObservationMapOutput
}

type UrlObservationMap map[string]UrlObservationInput

func (UrlObservationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlObservation)(nil)).Elem()
}

func (i UrlObservationMap) ToUrlObservationMapOutput() UrlObservationMapOutput {
	return i.ToUrlObservationMapOutputWithContext(context.Background())
}

func (i UrlObservationMap) ToUrlObservationMapOutputWithContext(ctx context.Context) UrlObservationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlObservationMapOutput)
}

type UrlObservationOutput struct{ *pulumi.OutputState }

func (UrlObservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlObservation)(nil)).Elem()
}

func (o UrlObservationOutput) ToUrlObservationOutput() UrlObservationOutput {
	return o
}

func (o UrlObservationOutput) ToUrlObservationOutputWithContext(ctx context.Context) UrlObservationOutput {
	return o
}

// Config Id
func (o UrlObservationOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *UrlObservation) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// SDK integration mode. Value:
func (o UrlObservationOutput) SdkType() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlObservation) pulumi.StringOutput { return v.SdkType }).(pulumi.StringOutput)
}

// The site ID.
func (o UrlObservationOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *UrlObservation) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// The URL of the page to monitor.
func (o UrlObservationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlObservation) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type UrlObservationArrayOutput struct{ *pulumi.OutputState }

func (UrlObservationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlObservation)(nil)).Elem()
}

func (o UrlObservationArrayOutput) ToUrlObservationArrayOutput() UrlObservationArrayOutput {
	return o
}

func (o UrlObservationArrayOutput) ToUrlObservationArrayOutputWithContext(ctx context.Context) UrlObservationArrayOutput {
	return o
}

func (o UrlObservationArrayOutput) Index(i pulumi.IntInput) UrlObservationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UrlObservation {
		return vs[0].([]*UrlObservation)[vs[1].(int)]
	}).(UrlObservationOutput)
}

type UrlObservationMapOutput struct{ *pulumi.OutputState }

func (UrlObservationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlObservation)(nil)).Elem()
}

func (o UrlObservationMapOutput) ToUrlObservationMapOutput() UrlObservationMapOutput {
	return o
}

func (o UrlObservationMapOutput) ToUrlObservationMapOutputWithContext(ctx context.Context) UrlObservationMapOutput {
	return o
}

func (o UrlObservationMapOutput) MapIndex(k pulumi.StringInput) UrlObservationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UrlObservation {
		return vs[0].(map[string]*UrlObservation)[vs[1].(string)]
	}).(UrlObservationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UrlObservationInput)(nil)).Elem(), &UrlObservation{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlObservationArrayInput)(nil)).Elem(), UrlObservationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlObservationMapInput)(nil)).Elem(), UrlObservationMap{})
	pulumi.RegisterOutputType(UrlObservationOutput{})
	pulumi.RegisterOutputType(UrlObservationArrayOutput{})
	pulumi.RegisterOutputType(UrlObservationMapOutput{})
}
