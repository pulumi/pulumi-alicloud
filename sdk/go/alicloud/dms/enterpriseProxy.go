// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DMS Enterprise Proxy resource.
//
// For information about DMS Enterprise Proxy and how to use it, see [What is Proxy](https://www.alibabacloud.com/help/en/data-management-service/latest/createproxy).
//
// > **NOTE:** Available in v1.188.0+.
//
// ## Import
//
// DMS Enterprise Proxy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:dms/enterpriseProxy:EnterpriseProxy example <id>
//
// ```
type EnterpriseProxy struct {
	pulumi.CustomResourceState

	// The ID of the database instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The password of the database account.
	Password pulumi.StringOutput `pulumi:"password"`
	// The ID of the tenant.
	Tid pulumi.StringPtrOutput `pulumi:"tid"`
	// The username of the database account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewEnterpriseProxy registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseProxy(ctx *pulumi.Context,
	name string, args *EnterpriseProxyArgs, opts ...pulumi.ResourceOption) (*EnterpriseProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	if args.Username != nil {
		args.Username = pulumi.ToSecret(args.Username).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"username",
	})
	opts = append(opts, secrets)
	var resource EnterpriseProxy
	err := ctx.RegisterResource("alicloud:dms/enterpriseProxy:EnterpriseProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseProxy gets an existing EnterpriseProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseProxyState, opts ...pulumi.ResourceOption) (*EnterpriseProxy, error) {
	var resource EnterpriseProxy
	err := ctx.ReadResource("alicloud:dms/enterpriseProxy:EnterpriseProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseProxy resources.
type enterpriseProxyState struct {
	// The ID of the database instance.
	InstanceId *string `pulumi:"instanceId"`
	// The password of the database account.
	Password *string `pulumi:"password"`
	// The ID of the tenant.
	Tid *string `pulumi:"tid"`
	// The username of the database account.
	Username *string `pulumi:"username"`
}

type EnterpriseProxyState struct {
	// The ID of the database instance.
	InstanceId pulumi.StringPtrInput
	// The password of the database account.
	Password pulumi.StringPtrInput
	// The ID of the tenant.
	Tid pulumi.StringPtrInput
	// The username of the database account.
	Username pulumi.StringPtrInput
}

func (EnterpriseProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseProxyState)(nil)).Elem()
}

type enterpriseProxyArgs struct {
	// The ID of the database instance.
	InstanceId string `pulumi:"instanceId"`
	// The password of the database account.
	Password string `pulumi:"password"`
	// The ID of the tenant.
	Tid *string `pulumi:"tid"`
	// The username of the database account.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a EnterpriseProxy resource.
type EnterpriseProxyArgs struct {
	// The ID of the database instance.
	InstanceId pulumi.StringInput
	// The password of the database account.
	Password pulumi.StringInput
	// The ID of the tenant.
	Tid pulumi.StringPtrInput
	// The username of the database account.
	Username pulumi.StringInput
}

func (EnterpriseProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseProxyArgs)(nil)).Elem()
}

type EnterpriseProxyInput interface {
	pulumi.Input

	ToEnterpriseProxyOutput() EnterpriseProxyOutput
	ToEnterpriseProxyOutputWithContext(ctx context.Context) EnterpriseProxyOutput
}

func (*EnterpriseProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseProxy)(nil)).Elem()
}

func (i *EnterpriseProxy) ToEnterpriseProxyOutput() EnterpriseProxyOutput {
	return i.ToEnterpriseProxyOutputWithContext(context.Background())
}

func (i *EnterpriseProxy) ToEnterpriseProxyOutputWithContext(ctx context.Context) EnterpriseProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProxyOutput)
}

// EnterpriseProxyArrayInput is an input type that accepts EnterpriseProxyArray and EnterpriseProxyArrayOutput values.
// You can construct a concrete instance of `EnterpriseProxyArrayInput` via:
//
//	EnterpriseProxyArray{ EnterpriseProxyArgs{...} }
type EnterpriseProxyArrayInput interface {
	pulumi.Input

	ToEnterpriseProxyArrayOutput() EnterpriseProxyArrayOutput
	ToEnterpriseProxyArrayOutputWithContext(context.Context) EnterpriseProxyArrayOutput
}

type EnterpriseProxyArray []EnterpriseProxyInput

func (EnterpriseProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseProxy)(nil)).Elem()
}

func (i EnterpriseProxyArray) ToEnterpriseProxyArrayOutput() EnterpriseProxyArrayOutput {
	return i.ToEnterpriseProxyArrayOutputWithContext(context.Background())
}

func (i EnterpriseProxyArray) ToEnterpriseProxyArrayOutputWithContext(ctx context.Context) EnterpriseProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProxyArrayOutput)
}

// EnterpriseProxyMapInput is an input type that accepts EnterpriseProxyMap and EnterpriseProxyMapOutput values.
// You can construct a concrete instance of `EnterpriseProxyMapInput` via:
//
//	EnterpriseProxyMap{ "key": EnterpriseProxyArgs{...} }
type EnterpriseProxyMapInput interface {
	pulumi.Input

	ToEnterpriseProxyMapOutput() EnterpriseProxyMapOutput
	ToEnterpriseProxyMapOutputWithContext(context.Context) EnterpriseProxyMapOutput
}

type EnterpriseProxyMap map[string]EnterpriseProxyInput

func (EnterpriseProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseProxy)(nil)).Elem()
}

func (i EnterpriseProxyMap) ToEnterpriseProxyMapOutput() EnterpriseProxyMapOutput {
	return i.ToEnterpriseProxyMapOutputWithContext(context.Background())
}

func (i EnterpriseProxyMap) ToEnterpriseProxyMapOutputWithContext(ctx context.Context) EnterpriseProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProxyMapOutput)
}

type EnterpriseProxyOutput struct{ *pulumi.OutputState }

func (EnterpriseProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseProxy)(nil)).Elem()
}

func (o EnterpriseProxyOutput) ToEnterpriseProxyOutput() EnterpriseProxyOutput {
	return o
}

func (o EnterpriseProxyOutput) ToEnterpriseProxyOutputWithContext(ctx context.Context) EnterpriseProxyOutput {
	return o
}

// The ID of the database instance.
func (o EnterpriseProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The password of the database account.
func (o EnterpriseProxyOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProxy) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The ID of the tenant.
func (o EnterpriseProxyOutput) Tid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseProxy) pulumi.StringPtrOutput { return v.Tid }).(pulumi.StringPtrOutput)
}

// The username of the database account.
func (o EnterpriseProxyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProxy) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type EnterpriseProxyArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseProxy)(nil)).Elem()
}

func (o EnterpriseProxyArrayOutput) ToEnterpriseProxyArrayOutput() EnterpriseProxyArrayOutput {
	return o
}

func (o EnterpriseProxyArrayOutput) ToEnterpriseProxyArrayOutputWithContext(ctx context.Context) EnterpriseProxyArrayOutput {
	return o
}

func (o EnterpriseProxyArrayOutput) Index(i pulumi.IntInput) EnterpriseProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseProxy {
		return vs[0].([]*EnterpriseProxy)[vs[1].(int)]
	}).(EnterpriseProxyOutput)
}

type EnterpriseProxyMapOutput struct{ *pulumi.OutputState }

func (EnterpriseProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseProxy)(nil)).Elem()
}

func (o EnterpriseProxyMapOutput) ToEnterpriseProxyMapOutput() EnterpriseProxyMapOutput {
	return o
}

func (o EnterpriseProxyMapOutput) ToEnterpriseProxyMapOutputWithContext(ctx context.Context) EnterpriseProxyMapOutput {
	return o
}

func (o EnterpriseProxyMapOutput) MapIndex(k pulumi.StringInput) EnterpriseProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseProxy {
		return vs[0].(map[string]*EnterpriseProxy)[vs[1].(string)]
	}).(EnterpriseProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProxyInput)(nil)).Elem(), &EnterpriseProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProxyArrayInput)(nil)).Elem(), EnterpriseProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProxyMapInput)(nil)).Elem(), EnterpriseProxyMap{})
	pulumi.RegisterOutputType(EnterpriseProxyOutput{})
	pulumi.RegisterOutputType(EnterpriseProxyArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseProxyMapOutput{})
}
