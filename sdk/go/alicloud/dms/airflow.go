// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Dms Airflow resource.
//
// Airflow instance, used to schedule jobs.
//
// For information about Dms Airflow and how to use it, see [What is Airflow](https://next.api.alibabacloud.com/document/Dms/2025-04-14/CreateAirflow).
//
// > **NOTE:** Available since v1.260.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("^default-NODELETING$"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId:  pulumi.StringRef(_default.Ids[0]),
//				ZoneId: pulumi.StringRef("cn-hangzhou-h"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			securityGroup, err := ecs.NewSecurityGroup(ctx, "security_group", &ecs.SecurityGroupArgs{
//				Description:       pulumi.String("terraform_example_group"),
//				SecurityGroupName: pulumi.String("terraform_example_group"),
//				VpcId:             pulumi.String(_default.Ids[0]),
//				SecurityGroupType: pulumi.String("normal"),
//				InnerAccessPolicy: pulumi.String("Accept"),
//			})
//			if err != nil {
//				return err
//			}
//			workspace, err := dms.NewEnterpriseWorkspace(ctx, "workspace", &dms.EnterpriseWorkspaceArgs{
//				Description:   pulumi.String("terraform-example"),
//				VpcId:         pulumi.String(_default.Ids[0]),
//				WorkspaceName: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dms.NewAirflow(ctx, "default", &dms.AirflowArgs{
//				VpcId:                    pulumi.String(_default.Ids[0]),
//				OssPath:                  pulumi.String("/"),
//				DagsDir:                  pulumi.String("default/dags"),
//				ZoneId:                   pulumi.String("cn-hangzhou-h"),
//				WorkerServerlessReplicas: pulumi.Int(0),
//				Description:              pulumi.String("terraform-example"),
//				SecurityGroupId:          securityGroup.ID(),
//				RequirementFile:          pulumi.String("default/requirements.txt"),
//				AirflowName:              pulumi.String("tfaccdms6513"),
//				PluginsDir:               pulumi.String("default/plugins"),
//				StartupFile:              pulumi.String("default/startup.sh"),
//				AppSpec:                  pulumi.String("SMALL"),
//				OssBucketName:            pulumi.String("hansheng"),
//				VswitchId:                pulumi.String(defaultGetSwitches.Ids[0]),
//				WorkspaceId:              workspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Dms Airflow can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dms/airflow:Airflow example <workspace_id>:<airflow_id>
// ```
type Airflow struct {
	pulumi.CustomResourceState

	// AirflowId
	AirflowId pulumi.StringOutput `pulumi:"airflowId"`
	// Name of the Airflow instance
	AirflowName pulumi.StringOutput `pulumi:"airflowName"`
	// Airflow instance specifications
	AppSpec pulumi.StringOutput `pulumi:"appSpec"`
	// Dag scan path
	DagsDir pulumi.StringPtrOutput `pulumi:"dagsDir"`
	// Description of the airflow instance
	Description pulumi.StringOutput `pulumi:"description"`
	// OSS bucket name
	OssBucketName pulumi.StringOutput `pulumi:"ossBucketName"`
	// OSS path
	OssPath pulumi.StringOutput `pulumi:"ossPath"`
	// The path of the plugin scanned by the airflow instance.
	PluginsDir pulumi.StringPtrOutput `pulumi:"pluginsDir"`
	// The region ID of the resource
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Path to installable package
	RequirementFile pulumi.StringPtrOutput `pulumi:"requirementFile"`
	// Security group ID
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Launch script for the airflow container
	StartupFile pulumi.StringPtrOutput `pulumi:"startupFile"`
	// Vpc id
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Switch ID
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
	// Worker Node extension
	WorkerServerlessReplicas pulumi.IntOutput `pulumi:"workerServerlessReplicas"`
	// DMS workspace ID
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
	// Zone ID in the region
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAirflow registers a new resource with the given unique name, arguments, and options.
func NewAirflow(ctx *pulumi.Context,
	name string, args *AirflowArgs, opts ...pulumi.ResourceOption) (*Airflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AirflowName == nil {
		return nil, errors.New("invalid value for required argument 'AirflowName'")
	}
	if args.AppSpec == nil {
		return nil, errors.New("invalid value for required argument 'AppSpec'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.OssBucketName == nil {
		return nil, errors.New("invalid value for required argument 'OssBucketName'")
	}
	if args.OssPath == nil {
		return nil, errors.New("invalid value for required argument 'OssPath'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	if args.WorkerServerlessReplicas == nil {
		return nil, errors.New("invalid value for required argument 'WorkerServerlessReplicas'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Airflow
	err := ctx.RegisterResource("alicloud:dms/airflow:Airflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAirflow gets an existing Airflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAirflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AirflowState, opts ...pulumi.ResourceOption) (*Airflow, error) {
	var resource Airflow
	err := ctx.ReadResource("alicloud:dms/airflow:Airflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Airflow resources.
type airflowState struct {
	// AirflowId
	AirflowId *string `pulumi:"airflowId"`
	// Name of the Airflow instance
	AirflowName *string `pulumi:"airflowName"`
	// Airflow instance specifications
	AppSpec *string `pulumi:"appSpec"`
	// Dag scan path
	DagsDir *string `pulumi:"dagsDir"`
	// Description of the airflow instance
	Description *string `pulumi:"description"`
	// OSS bucket name
	OssBucketName *string `pulumi:"ossBucketName"`
	// OSS path
	OssPath *string `pulumi:"ossPath"`
	// The path of the plugin scanned by the airflow instance.
	PluginsDir *string `pulumi:"pluginsDir"`
	// The region ID of the resource
	RegionId *string `pulumi:"regionId"`
	// Path to installable package
	RequirementFile *string `pulumi:"requirementFile"`
	// Security group ID
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Launch script for the airflow container
	StartupFile *string `pulumi:"startupFile"`
	// Vpc id
	VpcId *string `pulumi:"vpcId"`
	// Switch ID
	VswitchId *string `pulumi:"vswitchId"`
	// Worker Node extension
	WorkerServerlessReplicas *int `pulumi:"workerServerlessReplicas"`
	// DMS workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
	// Zone ID in the region
	ZoneId *string `pulumi:"zoneId"`
}

type AirflowState struct {
	// AirflowId
	AirflowId pulumi.StringPtrInput
	// Name of the Airflow instance
	AirflowName pulumi.StringPtrInput
	// Airflow instance specifications
	AppSpec pulumi.StringPtrInput
	// Dag scan path
	DagsDir pulumi.StringPtrInput
	// Description of the airflow instance
	Description pulumi.StringPtrInput
	// OSS bucket name
	OssBucketName pulumi.StringPtrInput
	// OSS path
	OssPath pulumi.StringPtrInput
	// The path of the plugin scanned by the airflow instance.
	PluginsDir pulumi.StringPtrInput
	// The region ID of the resource
	RegionId pulumi.StringPtrInput
	// Path to installable package
	RequirementFile pulumi.StringPtrInput
	// Security group ID
	SecurityGroupId pulumi.StringPtrInput
	// Launch script for the airflow container
	StartupFile pulumi.StringPtrInput
	// Vpc id
	VpcId pulumi.StringPtrInput
	// Switch ID
	VswitchId pulumi.StringPtrInput
	// Worker Node extension
	WorkerServerlessReplicas pulumi.IntPtrInput
	// DMS workspace ID
	WorkspaceId pulumi.StringPtrInput
	// Zone ID in the region
	ZoneId pulumi.StringPtrInput
}

func (AirflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*airflowState)(nil)).Elem()
}

type airflowArgs struct {
	// Name of the Airflow instance
	AirflowName string `pulumi:"airflowName"`
	// Airflow instance specifications
	AppSpec string `pulumi:"appSpec"`
	// Dag scan path
	DagsDir *string `pulumi:"dagsDir"`
	// Description of the airflow instance
	Description string `pulumi:"description"`
	// OSS bucket name
	OssBucketName string `pulumi:"ossBucketName"`
	// OSS path
	OssPath string `pulumi:"ossPath"`
	// The path of the plugin scanned by the airflow instance.
	PluginsDir *string `pulumi:"pluginsDir"`
	// Path to installable package
	RequirementFile *string `pulumi:"requirementFile"`
	// Security group ID
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Launch script for the airflow container
	StartupFile *string `pulumi:"startupFile"`
	// Vpc id
	VpcId string `pulumi:"vpcId"`
	// Switch ID
	VswitchId string `pulumi:"vswitchId"`
	// Worker Node extension
	WorkerServerlessReplicas int `pulumi:"workerServerlessReplicas"`
	// DMS workspace ID
	WorkspaceId string `pulumi:"workspaceId"`
	// Zone ID in the region
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Airflow resource.
type AirflowArgs struct {
	// Name of the Airflow instance
	AirflowName pulumi.StringInput
	// Airflow instance specifications
	AppSpec pulumi.StringInput
	// Dag scan path
	DagsDir pulumi.StringPtrInput
	// Description of the airflow instance
	Description pulumi.StringInput
	// OSS bucket name
	OssBucketName pulumi.StringInput
	// OSS path
	OssPath pulumi.StringInput
	// The path of the plugin scanned by the airflow instance.
	PluginsDir pulumi.StringPtrInput
	// Path to installable package
	RequirementFile pulumi.StringPtrInput
	// Security group ID
	SecurityGroupId pulumi.StringInput
	// Launch script for the airflow container
	StartupFile pulumi.StringPtrInput
	// Vpc id
	VpcId pulumi.StringInput
	// Switch ID
	VswitchId pulumi.StringInput
	// Worker Node extension
	WorkerServerlessReplicas pulumi.IntInput
	// DMS workspace ID
	WorkspaceId pulumi.StringInput
	// Zone ID in the region
	ZoneId pulumi.StringInput
}

func (AirflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*airflowArgs)(nil)).Elem()
}

type AirflowInput interface {
	pulumi.Input

	ToAirflowOutput() AirflowOutput
	ToAirflowOutputWithContext(ctx context.Context) AirflowOutput
}

func (*Airflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Airflow)(nil)).Elem()
}

func (i *Airflow) ToAirflowOutput() AirflowOutput {
	return i.ToAirflowOutputWithContext(context.Background())
}

func (i *Airflow) ToAirflowOutputWithContext(ctx context.Context) AirflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AirflowOutput)
}

// AirflowArrayInput is an input type that accepts AirflowArray and AirflowArrayOutput values.
// You can construct a concrete instance of `AirflowArrayInput` via:
//
//	AirflowArray{ AirflowArgs{...} }
type AirflowArrayInput interface {
	pulumi.Input

	ToAirflowArrayOutput() AirflowArrayOutput
	ToAirflowArrayOutputWithContext(context.Context) AirflowArrayOutput
}

type AirflowArray []AirflowInput

func (AirflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Airflow)(nil)).Elem()
}

func (i AirflowArray) ToAirflowArrayOutput() AirflowArrayOutput {
	return i.ToAirflowArrayOutputWithContext(context.Background())
}

func (i AirflowArray) ToAirflowArrayOutputWithContext(ctx context.Context) AirflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AirflowArrayOutput)
}

// AirflowMapInput is an input type that accepts AirflowMap and AirflowMapOutput values.
// You can construct a concrete instance of `AirflowMapInput` via:
//
//	AirflowMap{ "key": AirflowArgs{...} }
type AirflowMapInput interface {
	pulumi.Input

	ToAirflowMapOutput() AirflowMapOutput
	ToAirflowMapOutputWithContext(context.Context) AirflowMapOutput
}

type AirflowMap map[string]AirflowInput

func (AirflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Airflow)(nil)).Elem()
}

func (i AirflowMap) ToAirflowMapOutput() AirflowMapOutput {
	return i.ToAirflowMapOutputWithContext(context.Background())
}

func (i AirflowMap) ToAirflowMapOutputWithContext(ctx context.Context) AirflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AirflowMapOutput)
}

type AirflowOutput struct{ *pulumi.OutputState }

func (AirflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Airflow)(nil)).Elem()
}

func (o AirflowOutput) ToAirflowOutput() AirflowOutput {
	return o
}

func (o AirflowOutput) ToAirflowOutputWithContext(ctx context.Context) AirflowOutput {
	return o
}

// AirflowId
func (o AirflowOutput) AirflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.AirflowId }).(pulumi.StringOutput)
}

// Name of the Airflow instance
func (o AirflowOutput) AirflowName() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.AirflowName }).(pulumi.StringOutput)
}

// Airflow instance specifications
func (o AirflowOutput) AppSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.AppSpec }).(pulumi.StringOutput)
}

// Dag scan path
func (o AirflowOutput) DagsDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringPtrOutput { return v.DagsDir }).(pulumi.StringPtrOutput)
}

// Description of the airflow instance
func (o AirflowOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// OSS bucket name
func (o AirflowOutput) OssBucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.OssBucketName }).(pulumi.StringOutput)
}

// OSS path
func (o AirflowOutput) OssPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.OssPath }).(pulumi.StringOutput)
}

// The path of the plugin scanned by the airflow instance.
func (o AirflowOutput) PluginsDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringPtrOutput { return v.PluginsDir }).(pulumi.StringPtrOutput)
}

// The region ID of the resource
func (o AirflowOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Path to installable package
func (o AirflowOutput) RequirementFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringPtrOutput { return v.RequirementFile }).(pulumi.StringPtrOutput)
}

// Security group ID
func (o AirflowOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Launch script for the airflow container
func (o AirflowOutput) StartupFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringPtrOutput { return v.StartupFile }).(pulumi.StringPtrOutput)
}

// Vpc id
func (o AirflowOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Switch ID
func (o AirflowOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

// Worker Node extension
func (o AirflowOutput) WorkerServerlessReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Airflow) pulumi.IntOutput { return v.WorkerServerlessReplicas }).(pulumi.IntOutput)
}

// DMS workspace ID
func (o AirflowOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

// Zone ID in the region
func (o AirflowOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Airflow) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type AirflowArrayOutput struct{ *pulumi.OutputState }

func (AirflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Airflow)(nil)).Elem()
}

func (o AirflowArrayOutput) ToAirflowArrayOutput() AirflowArrayOutput {
	return o
}

func (o AirflowArrayOutput) ToAirflowArrayOutputWithContext(ctx context.Context) AirflowArrayOutput {
	return o
}

func (o AirflowArrayOutput) Index(i pulumi.IntInput) AirflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Airflow {
		return vs[0].([]*Airflow)[vs[1].(int)]
	}).(AirflowOutput)
}

type AirflowMapOutput struct{ *pulumi.OutputState }

func (AirflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Airflow)(nil)).Elem()
}

func (o AirflowMapOutput) ToAirflowMapOutput() AirflowMapOutput {
	return o
}

func (o AirflowMapOutput) ToAirflowMapOutputWithContext(ctx context.Context) AirflowMapOutput {
	return o
}

func (o AirflowMapOutput) MapIndex(k pulumi.StringInput) AirflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Airflow {
		return vs[0].(map[string]*Airflow)[vs[1].(string)]
	}).(AirflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AirflowInput)(nil)).Elem(), &Airflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*AirflowArrayInput)(nil)).Elem(), AirflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AirflowMapInput)(nil)).Elem(), AirflowMap{})
	pulumi.RegisterOutputType(AirflowOutput{})
	pulumi.RegisterOutputType(AirflowArrayOutput{})
	pulumi.RegisterOutputType(AirflowMapOutput{})
}
