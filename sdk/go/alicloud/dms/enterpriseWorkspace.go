// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DMS Enterprise Workspace resource.
//
// For information about DMS Enterprise Workspace and how to use it, see [What is Workspace](https://next.api.alibabacloud.com/document/dms-enterprise/2018-11-01/CreateWorkspace).
//
// > **NOTE:** Available since v1.259.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/dms"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			vpcCreate, err := vpc.NewNetwork(ctx, "vpc_create", &vpc.NetworkArgs{
//				IsDefault:   pulumi.Bool(false),
//				Description: pulumi.String("example vpc"),
//				CidrBlock:   pulumi.String("192.168.0.0/16"),
//				VpcName:     pulumi.Sprintf("%v-%v", name, _default.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dms.NewEnterpriseWorkspace(ctx, "default", &dms.EnterpriseWorkspaceArgs{
//				Description:   pulumi.String(name),
//				WorkspaceName: pulumi.Sprintf("%v-%v", name, _default.Result),
//				VpcId:         vpcCreate.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DMS Enterprise Workspace can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:dms/enterpriseWorkspace:EnterpriseWorkspace example <id>
// ```
type EnterpriseWorkspace struct {
	pulumi.CustomResourceState

	// The description of the Workspace.
	Description pulumi.StringOutput `pulumi:"description"`
	// The region ID of the resource.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The name of the Workspace.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`
}

// NewEnterpriseWorkspace registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseWorkspace(ctx *pulumi.Context,
	name string, args *EnterpriseWorkspaceArgs, opts ...pulumi.ResourceOption) (*EnterpriseWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnterpriseWorkspace
	err := ctx.RegisterResource("alicloud:dms/enterpriseWorkspace:EnterpriseWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseWorkspace gets an existing EnterpriseWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseWorkspaceState, opts ...pulumi.ResourceOption) (*EnterpriseWorkspace, error) {
	var resource EnterpriseWorkspace
	err := ctx.ReadResource("alicloud:dms/enterpriseWorkspace:EnterpriseWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseWorkspace resources.
type enterpriseWorkspaceState struct {
	// The description of the Workspace.
	Description *string `pulumi:"description"`
	// The region ID of the resource.
	RegionId *string `pulumi:"regionId"`
	// The ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// The name of the Workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type EnterpriseWorkspaceState struct {
	// The description of the Workspace.
	Description pulumi.StringPtrInput
	// The region ID of the resource.
	RegionId pulumi.StringPtrInput
	// The ID of the VPC.
	VpcId pulumi.StringPtrInput
	// The name of the Workspace.
	WorkspaceName pulumi.StringPtrInput
}

func (EnterpriseWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseWorkspaceState)(nil)).Elem()
}

type enterpriseWorkspaceArgs struct {
	// The description of the Workspace.
	Description string `pulumi:"description"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The name of the Workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a EnterpriseWorkspace resource.
type EnterpriseWorkspaceArgs struct {
	// The description of the Workspace.
	Description pulumi.StringInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
	// The name of the Workspace.
	WorkspaceName pulumi.StringInput
}

func (EnterpriseWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseWorkspaceArgs)(nil)).Elem()
}

type EnterpriseWorkspaceInput interface {
	pulumi.Input

	ToEnterpriseWorkspaceOutput() EnterpriseWorkspaceOutput
	ToEnterpriseWorkspaceOutputWithContext(ctx context.Context) EnterpriseWorkspaceOutput
}

func (*EnterpriseWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseWorkspace)(nil)).Elem()
}

func (i *EnterpriseWorkspace) ToEnterpriseWorkspaceOutput() EnterpriseWorkspaceOutput {
	return i.ToEnterpriseWorkspaceOutputWithContext(context.Background())
}

func (i *EnterpriseWorkspace) ToEnterpriseWorkspaceOutputWithContext(ctx context.Context) EnterpriseWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseWorkspaceOutput)
}

// EnterpriseWorkspaceArrayInput is an input type that accepts EnterpriseWorkspaceArray and EnterpriseWorkspaceArrayOutput values.
// You can construct a concrete instance of `EnterpriseWorkspaceArrayInput` via:
//
//	EnterpriseWorkspaceArray{ EnterpriseWorkspaceArgs{...} }
type EnterpriseWorkspaceArrayInput interface {
	pulumi.Input

	ToEnterpriseWorkspaceArrayOutput() EnterpriseWorkspaceArrayOutput
	ToEnterpriseWorkspaceArrayOutputWithContext(context.Context) EnterpriseWorkspaceArrayOutput
}

type EnterpriseWorkspaceArray []EnterpriseWorkspaceInput

func (EnterpriseWorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseWorkspace)(nil)).Elem()
}

func (i EnterpriseWorkspaceArray) ToEnterpriseWorkspaceArrayOutput() EnterpriseWorkspaceArrayOutput {
	return i.ToEnterpriseWorkspaceArrayOutputWithContext(context.Background())
}

func (i EnterpriseWorkspaceArray) ToEnterpriseWorkspaceArrayOutputWithContext(ctx context.Context) EnterpriseWorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseWorkspaceArrayOutput)
}

// EnterpriseWorkspaceMapInput is an input type that accepts EnterpriseWorkspaceMap and EnterpriseWorkspaceMapOutput values.
// You can construct a concrete instance of `EnterpriseWorkspaceMapInput` via:
//
//	EnterpriseWorkspaceMap{ "key": EnterpriseWorkspaceArgs{...} }
type EnterpriseWorkspaceMapInput interface {
	pulumi.Input

	ToEnterpriseWorkspaceMapOutput() EnterpriseWorkspaceMapOutput
	ToEnterpriseWorkspaceMapOutputWithContext(context.Context) EnterpriseWorkspaceMapOutput
}

type EnterpriseWorkspaceMap map[string]EnterpriseWorkspaceInput

func (EnterpriseWorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseWorkspace)(nil)).Elem()
}

func (i EnterpriseWorkspaceMap) ToEnterpriseWorkspaceMapOutput() EnterpriseWorkspaceMapOutput {
	return i.ToEnterpriseWorkspaceMapOutputWithContext(context.Background())
}

func (i EnterpriseWorkspaceMap) ToEnterpriseWorkspaceMapOutputWithContext(ctx context.Context) EnterpriseWorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseWorkspaceMapOutput)
}

type EnterpriseWorkspaceOutput struct{ *pulumi.OutputState }

func (EnterpriseWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseWorkspace)(nil)).Elem()
}

func (o EnterpriseWorkspaceOutput) ToEnterpriseWorkspaceOutput() EnterpriseWorkspaceOutput {
	return o
}

func (o EnterpriseWorkspaceOutput) ToEnterpriseWorkspaceOutputWithContext(ctx context.Context) EnterpriseWorkspaceOutput {
	return o
}

// The description of the Workspace.
func (o EnterpriseWorkspaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseWorkspace) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The region ID of the resource.
func (o EnterpriseWorkspaceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseWorkspace) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The ID of the VPC.
func (o EnterpriseWorkspaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseWorkspace) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The name of the Workspace.
func (o EnterpriseWorkspaceOutput) WorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseWorkspace) pulumi.StringOutput { return v.WorkspaceName }).(pulumi.StringOutput)
}

type EnterpriseWorkspaceArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseWorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseWorkspace)(nil)).Elem()
}

func (o EnterpriseWorkspaceArrayOutput) ToEnterpriseWorkspaceArrayOutput() EnterpriseWorkspaceArrayOutput {
	return o
}

func (o EnterpriseWorkspaceArrayOutput) ToEnterpriseWorkspaceArrayOutputWithContext(ctx context.Context) EnterpriseWorkspaceArrayOutput {
	return o
}

func (o EnterpriseWorkspaceArrayOutput) Index(i pulumi.IntInput) EnterpriseWorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseWorkspace {
		return vs[0].([]*EnterpriseWorkspace)[vs[1].(int)]
	}).(EnterpriseWorkspaceOutput)
}

type EnterpriseWorkspaceMapOutput struct{ *pulumi.OutputState }

func (EnterpriseWorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseWorkspace)(nil)).Elem()
}

func (o EnterpriseWorkspaceMapOutput) ToEnterpriseWorkspaceMapOutput() EnterpriseWorkspaceMapOutput {
	return o
}

func (o EnterpriseWorkspaceMapOutput) ToEnterpriseWorkspaceMapOutputWithContext(ctx context.Context) EnterpriseWorkspaceMapOutput {
	return o
}

func (o EnterpriseWorkspaceMapOutput) MapIndex(k pulumi.StringInput) EnterpriseWorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseWorkspace {
		return vs[0].(map[string]*EnterpriseWorkspace)[vs[1].(string)]
	}).(EnterpriseWorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseWorkspaceInput)(nil)).Elem(), &EnterpriseWorkspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseWorkspaceArrayInput)(nil)).Elem(), EnterpriseWorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseWorkspaceMapInput)(nil)).Elem(), EnterpriseWorkspaceMap{})
	pulumi.RegisterOutputType(EnterpriseWorkspaceOutput{})
	pulumi.RegisterOutputType(EnterpriseWorkspaceArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseWorkspaceMapOutput{})
}
