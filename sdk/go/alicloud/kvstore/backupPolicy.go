// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kvstore

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a backup policy for ApsaraDB Redis / Memcache instance resource.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/kvstore"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		creation := "KVStore"
// 		if param := cfg.Get("creation"); param != "" {
// 			creation = param
// 		}
// 		multiAz := "false"
// 		if param := cfg.Get("multiAz"); param != "" {
// 			multiAz = param
// 		}
// 		name := "kvstorebackuppolicyvpc"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		opt0 := creation
// 		defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// 			AvailableResourceCreation: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
// 			CidrBlock: pulumi.String("172.16.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
// 			VpcId:            defaultNetwork.ID(),
// 			CidrBlock:        pulumi.String("172.16.0.0/24"),
// 			AvailabilityZone: pulumi.String(defaultZones.Zones[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultInstance, err := kvstore.NewInstance(ctx, "defaultInstance", &kvstore.InstanceArgs{
// 			InstanceClass: pulumi.String("Memcache"),
// 			InstanceName:  pulumi.String(name),
// 			VswitchId:     defaultSwitch.ID(),
// 			PrivateIp:     pulumi.String("172.16.0.10"),
// 			SecurityIps: pulumi.StringArray{
// 				pulumi.String("10.0.0.1"),
// 			},
// 			InstanceType:  pulumi.String("memcache.master.small.default"),
// 			EngineVersion: pulumi.String("2.8"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = kvstore.NewBackupPolicy(ctx, "defaultBackupPolicy", &kvstore.BackupPolicyArgs{
// 			InstanceId: defaultInstance.ID(),
// 			BackupPeriods: pulumi.StringArray{
// 				pulumi.String("Tuesday"),
// 				pulumi.String("Wednesday"),
// 			},
// 			BackupTime: pulumi.String("10:00Z-11:00Z"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type BackupPolicy struct {
	pulumi.CustomResourceState

	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayOutput `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrOutput `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicy(ctx *pulumi.Context,
	name string, args *BackupPolicyArgs, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &BackupPolicyArgs{}
	}
	var resource BackupPolicy
	err := ctx.RegisterResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicy gets an existing BackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyState, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	var resource BackupPolicy
	err := ctx.ReadResource("alicloud:kvstore/backupPolicy:BackupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicy resources.
type backupPolicyState struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime *string `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId *string `pulumi:"instanceId"`
}

type BackupPolicyState struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayInput
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrInput
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringPtrInput
}

func (BackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyState)(nil)).Elem()
}

type backupPolicyArgs struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime *string `pulumi:"backupTime"`
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a BackupPolicy resource.
type BackupPolicyArgs struct {
	// Backup Cycle. Allowed values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	BackupPeriods pulumi.StringArrayInput
	// Backup time, in the format of HH:mmZ- HH:mm Z
	BackupTime pulumi.StringPtrInput
	// The id of ApsaraDB for Redis or Memcache intance.
	InstanceId pulumi.StringInput
}

func (BackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyArgs)(nil)).Elem()
}
