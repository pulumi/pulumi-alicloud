// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PolarDB endpoint resource to manage primary endpoint of PolarDB cluster.
//
// > **NOTE:** Available since v1.217.0
//
// > **NOTE:** The default primary endpoint can not be created or deleted manually.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/polardb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNodeClasses, err := polardb.GetNodeClasses(ctx, &polardb.GetNodeClassesArgs{
//				DbType:    pulumi.StringRef("MySQL"),
//				DbVersion: pulumi.StringRef("8.0"),
//				PayType:   "PostPaid",
//				Category:  pulumi.StringRef("Normal"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(defaultNodeClasses.Classes[0].ZoneId),
//				VswitchName: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := polardb.NewCluster(ctx, "defaultCluster", &polardb.ClusterArgs{
//				DbType:      pulumi.String("MySQL"),
//				DbVersion:   pulumi.String("8.0"),
//				DbNodeClass: *pulumi.String(defaultNodeClasses.Classes[0].SupportedEngines[0].AvailableResources[0].DbNodeClass),
//				PayType:     pulumi.String("PostPaid"),
//				VswitchId:   defaultSwitch.ID(),
//				Description: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = polardb.NewPrimaryEndpoint(ctx, "defaultPrimaryEndpoint", &polardb.PrimaryEndpointArgs{
//				DbClusterId: defaultCluster.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PolarDB endpoint can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:polardb/primaryEndpoint:PrimaryEndpoint example pc-abc123456:pe-abc123456
// ```
type PrimaryEndpoint struct {
	pulumi.CustomResourceState

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringOutput `pulumi:"connectionPrefix"`
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The name of the endpoint.
	DbEndpointDescription pulumi.StringPtrOutput `pulumi:"dbEndpointDescription"`
	// The ID of the cluster endpoint.
	DbEndpointId pulumi.StringOutput `pulumi:"dbEndpointId"`
	// Type of endpoint.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
	// The network type of the endpoint address.
	NetType pulumi.StringPtrOutput `pulumi:"netType"`
	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port pulumi.StringOutput `pulumi:"port"`
	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
	// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SslAutoRotate pulumi.StringPtrOutput `pulumi:"sslAutoRotate"`
	// The specifies SSL certificate download link.
	SslCertificateUrl pulumi.StringOutput `pulumi:"sslCertificateUrl"`
	// The SSL connection string.
	SslConnectionString pulumi.StringOutput `pulumi:"sslConnectionString"`
	// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
	SslEnabled pulumi.StringPtrOutput `pulumi:"sslEnabled"`
	// The time when the SSL certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	SslExpireTime pulumi.StringOutput `pulumi:"sslExpireTime"`
}

// NewPrimaryEndpoint registers a new resource with the given unique name, arguments, and options.
func NewPrimaryEndpoint(ctx *pulumi.Context,
	name string, args *PrimaryEndpointArgs, opts ...pulumi.ResourceOption) (*PrimaryEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrimaryEndpoint
	err := ctx.RegisterResource("alicloud:polardb/primaryEndpoint:PrimaryEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimaryEndpoint gets an existing PrimaryEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimaryEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimaryEndpointState, opts ...pulumi.ResourceOption) (*PrimaryEndpoint, error) {
	var resource PrimaryEndpoint
	err := ctx.ReadResource("alicloud:polardb/primaryEndpoint:PrimaryEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrimaryEndpoint resources.
type primaryEndpointState struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// The Id of cluster that can run database.
	DbClusterId *string `pulumi:"dbClusterId"`
	// The name of the endpoint.
	DbEndpointDescription *string `pulumi:"dbEndpointDescription"`
	// The ID of the cluster endpoint.
	DbEndpointId *string `pulumi:"dbEndpointId"`
	// Type of endpoint.
	EndpointType *string `pulumi:"endpointType"`
	// The network type of the endpoint address.
	NetType *string `pulumi:"netType"`
	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `pulumi:"port"`
	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
	// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SslAutoRotate *string `pulumi:"sslAutoRotate"`
	// The specifies SSL certificate download link.
	SslCertificateUrl *string `pulumi:"sslCertificateUrl"`
	// The SSL connection string.
	SslConnectionString *string `pulumi:"sslConnectionString"`
	// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
	SslEnabled *string `pulumi:"sslEnabled"`
	// The time when the SSL certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	SslExpireTime *string `pulumi:"sslExpireTime"`
}

type PrimaryEndpointState struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringPtrInput
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringPtrInput
	// The name of the endpoint.
	DbEndpointDescription pulumi.StringPtrInput
	// The ID of the cluster endpoint.
	DbEndpointId pulumi.StringPtrInput
	// Type of endpoint.
	EndpointType pulumi.StringPtrInput
	// The network type of the endpoint address.
	NetType pulumi.StringPtrInput
	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port pulumi.StringPtrInput
	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
	// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SslAutoRotate pulumi.StringPtrInput
	// The specifies SSL certificate download link.
	SslCertificateUrl pulumi.StringPtrInput
	// The SSL connection string.
	SslConnectionString pulumi.StringPtrInput
	// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
	SslEnabled pulumi.StringPtrInput
	// The time when the SSL certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	SslExpireTime pulumi.StringPtrInput
}

func (PrimaryEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryEndpointState)(nil)).Elem()
}

type primaryEndpointArgs struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// The Id of cluster that can run database.
	DbClusterId string `pulumi:"dbClusterId"`
	// The name of the endpoint.
	DbEndpointDescription *string `pulumi:"dbEndpointDescription"`
	// The network type of the endpoint address.
	NetType *string `pulumi:"netType"`
	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port *string `pulumi:"port"`
	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
	// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SslAutoRotate *string `pulumi:"sslAutoRotate"`
	// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
	SslEnabled *string `pulumi:"sslEnabled"`
}

// The set of arguments for constructing a PrimaryEndpoint resource.
type PrimaryEndpointArgs struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringPtrInput
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringInput
	// The name of the endpoint.
	DbEndpointDescription pulumi.StringPtrInput
	// The network type of the endpoint address.
	NetType pulumi.StringPtrInput
	// Port of the specified endpoint. Valid values: 3000 to 5999.
	Port pulumi.StringPtrInput
	// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
	// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
	// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
	SslAutoRotate pulumi.StringPtrInput
	// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
	SslEnabled pulumi.StringPtrInput
}

func (PrimaryEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryEndpointArgs)(nil)).Elem()
}

type PrimaryEndpointInput interface {
	pulumi.Input

	ToPrimaryEndpointOutput() PrimaryEndpointOutput
	ToPrimaryEndpointOutputWithContext(ctx context.Context) PrimaryEndpointOutput
}

func (*PrimaryEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryEndpoint)(nil)).Elem()
}

func (i *PrimaryEndpoint) ToPrimaryEndpointOutput() PrimaryEndpointOutput {
	return i.ToPrimaryEndpointOutputWithContext(context.Background())
}

func (i *PrimaryEndpoint) ToPrimaryEndpointOutputWithContext(ctx context.Context) PrimaryEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryEndpointOutput)
}

// PrimaryEndpointArrayInput is an input type that accepts PrimaryEndpointArray and PrimaryEndpointArrayOutput values.
// You can construct a concrete instance of `PrimaryEndpointArrayInput` via:
//
//	PrimaryEndpointArray{ PrimaryEndpointArgs{...} }
type PrimaryEndpointArrayInput interface {
	pulumi.Input

	ToPrimaryEndpointArrayOutput() PrimaryEndpointArrayOutput
	ToPrimaryEndpointArrayOutputWithContext(context.Context) PrimaryEndpointArrayOutput
}

type PrimaryEndpointArray []PrimaryEndpointInput

func (PrimaryEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryEndpoint)(nil)).Elem()
}

func (i PrimaryEndpointArray) ToPrimaryEndpointArrayOutput() PrimaryEndpointArrayOutput {
	return i.ToPrimaryEndpointArrayOutputWithContext(context.Background())
}

func (i PrimaryEndpointArray) ToPrimaryEndpointArrayOutputWithContext(ctx context.Context) PrimaryEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryEndpointArrayOutput)
}

// PrimaryEndpointMapInput is an input type that accepts PrimaryEndpointMap and PrimaryEndpointMapOutput values.
// You can construct a concrete instance of `PrimaryEndpointMapInput` via:
//
//	PrimaryEndpointMap{ "key": PrimaryEndpointArgs{...} }
type PrimaryEndpointMapInput interface {
	pulumi.Input

	ToPrimaryEndpointMapOutput() PrimaryEndpointMapOutput
	ToPrimaryEndpointMapOutputWithContext(context.Context) PrimaryEndpointMapOutput
}

type PrimaryEndpointMap map[string]PrimaryEndpointInput

func (PrimaryEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryEndpoint)(nil)).Elem()
}

func (i PrimaryEndpointMap) ToPrimaryEndpointMapOutput() PrimaryEndpointMapOutput {
	return i.ToPrimaryEndpointMapOutputWithContext(context.Background())
}

func (i PrimaryEndpointMap) ToPrimaryEndpointMapOutputWithContext(ctx context.Context) PrimaryEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryEndpointMapOutput)
}

type PrimaryEndpointOutput struct{ *pulumi.OutputState }

func (PrimaryEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryEndpoint)(nil)).Elem()
}

func (o PrimaryEndpointOutput) ToPrimaryEndpointOutput() PrimaryEndpointOutput {
	return o
}

func (o PrimaryEndpointOutput) ToPrimaryEndpointOutputWithContext(ctx context.Context) PrimaryEndpointOutput {
	return o
}

// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
func (o PrimaryEndpointOutput) ConnectionPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.ConnectionPrefix }).(pulumi.StringOutput)
}

// The Id of cluster that can run database.
func (o PrimaryEndpointOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// The name of the endpoint.
func (o PrimaryEndpointOutput) DbEndpointDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringPtrOutput { return v.DbEndpointDescription }).(pulumi.StringPtrOutput)
}

// The ID of the cluster endpoint.
func (o PrimaryEndpointOutput) DbEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.DbEndpointId }).(pulumi.StringOutput)
}

// Type of endpoint.
func (o PrimaryEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

// The network type of the endpoint address.
func (o PrimaryEndpointOutput) NetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringPtrOutput { return v.NetType }).(pulumi.StringPtrOutput)
}

// Port of the specified endpoint. Valid values: 3000 to 5999.
func (o PrimaryEndpointOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// Specifies whether automatic rotation of SSL certificates is enabled. Valid values: `Enable`,`Disable`.
// **NOTE:** For a PolarDB for MySQL cluster, this parameter is required, and only one connection string in each endpoint can enable the ssl, for other notes, see [Configure SSL encryption](https://www.alibabacloud.com/help/doc-detail/153182.htm).
// For a PolarDB for PostgreSQL cluster or a PolarDB-O cluster, this parameter is not required, by default, SSL encryption is enabled for all endpoints.
func (o PrimaryEndpointOutput) SslAutoRotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringPtrOutput { return v.SslAutoRotate }).(pulumi.StringPtrOutput)
}

// The specifies SSL certificate download link.
func (o PrimaryEndpointOutput) SslCertificateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.SslCertificateUrl }).(pulumi.StringOutput)
}

// The SSL connection string.
func (o PrimaryEndpointOutput) SslConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.SslConnectionString }).(pulumi.StringOutput)
}

// Specifies how to modify the SSL encryption status. Valid values: `Disable`, `Enable`, `Update`.
func (o PrimaryEndpointOutput) SslEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringPtrOutput { return v.SslEnabled }).(pulumi.StringPtrOutput)
}

// The time when the SSL certificate expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
func (o PrimaryEndpointOutput) SslExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrimaryEndpoint) pulumi.StringOutput { return v.SslExpireTime }).(pulumi.StringOutput)
}

type PrimaryEndpointArrayOutput struct{ *pulumi.OutputState }

func (PrimaryEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryEndpoint)(nil)).Elem()
}

func (o PrimaryEndpointArrayOutput) ToPrimaryEndpointArrayOutput() PrimaryEndpointArrayOutput {
	return o
}

func (o PrimaryEndpointArrayOutput) ToPrimaryEndpointArrayOutputWithContext(ctx context.Context) PrimaryEndpointArrayOutput {
	return o
}

func (o PrimaryEndpointArrayOutput) Index(i pulumi.IntInput) PrimaryEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrimaryEndpoint {
		return vs[0].([]*PrimaryEndpoint)[vs[1].(int)]
	}).(PrimaryEndpointOutput)
}

type PrimaryEndpointMapOutput struct{ *pulumi.OutputState }

func (PrimaryEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryEndpoint)(nil)).Elem()
}

func (o PrimaryEndpointMapOutput) ToPrimaryEndpointMapOutput() PrimaryEndpointMapOutput {
	return o
}

func (o PrimaryEndpointMapOutput) ToPrimaryEndpointMapOutputWithContext(ctx context.Context) PrimaryEndpointMapOutput {
	return o
}

func (o PrimaryEndpointMapOutput) MapIndex(k pulumi.StringInput) PrimaryEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrimaryEndpoint {
		return vs[0].(map[string]*PrimaryEndpoint)[vs[1].(string)]
	}).(PrimaryEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryEndpointInput)(nil)).Elem(), &PrimaryEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryEndpointArrayInput)(nil)).Elem(), PrimaryEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryEndpointMapInput)(nil)).Elem(), PrimaryEndpointMap{})
	pulumi.RegisterOutputType(PrimaryEndpointOutput{})
	pulumi.RegisterOutputType(PrimaryEndpointArrayOutput{})
	pulumi.RegisterOutputType(PrimaryEndpointMapOutput{})
}
