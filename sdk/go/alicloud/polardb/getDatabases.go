// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `polardb.getDatabases` data source provides a collection of PolarDB cluster database available in Alibaba Cloud account.
// Filters support regular expression for the database name, searches by clusterId.
//
// > **NOTE:** Available since v1.70.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/polardb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := polardb.GetNodeClasses(ctx, &polardb.GetNodeClassesArgs{
//				DbType:    pulumi.StringRef("MySQL"),
//				DbVersion: pulumi.StringRef("8.0"),
//				PayType:   "PostPaid",
//				Category:  pulumi.StringRef("Normal"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(this.Classes[0].ZoneId),
//				VswitchName: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := polardb.NewCluster(ctx, "cluster", &polardb.ClusterArgs{
//				DbType:      pulumi.String("MySQL"),
//				DbVersion:   pulumi.String("8.0"),
//				PayType:     pulumi.String("PostPaid"),
//				DbNodeCount: pulumi.Int(2),
//				DbNodeClass: *pulumi.String(this.Classes[0].SupportedEngines[0].AvailableResources[0].DbNodeClass),
//				VswitchId:   defaultSwitch.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			polardbClustersDs := polardb.GetClustersOutput(ctx, polardb.GetClustersOutputArgs{
//				DescriptionRegex: cluster.Description,
//				Status:           pulumi.String("Running"),
//			}, nil)
//			defaultDatabase, err := polardb.NewDatabase(ctx, "defaultDatabase", &polardb.DatabaseArgs{
//				DbClusterId: polardbClustersDs.ApplyT(func(polardbClustersDs polardb.GetClustersResult) (*string, error) {
//					return &polardbClustersDs.Clusters[0].Id, nil
//				}).(pulumi.StringPtrOutput),
//				DbName: polardbClustersDs.ApplyT(func(polardbClustersDs polardb.GetClustersResult) (string, error) {
//					return fmt.Sprintf("tfaccountpri_%v", polardbClustersDs.Clusters[0].Id), nil
//				}).(pulumi.StringOutput),
//				DbDescription: pulumi.String("from terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultDatabases := pulumi.All(polardbClustersDs, defaultDatabase.DbName).ApplyT(func(_args []interface{}) (polardb.GetDatabasesResult, error) {
//				polardbClustersDs := _args[0].(polardb.GetClustersResult)
//				dbName := _args[1].(string)
//				return polardb.GetDatabasesOutput(ctx, polardb.GetDatabasesOutputArgs{
//					DbClusterId: polardbClustersDs.Clusters[0].Id,
//					NameRegex:   dbName,
//				}, nil), nil
//			}).(polardb.GetDatabasesResultOutput)
//			ctx.Export("database", defaultDatabases.ApplyT(func(defaultDatabases polardb.GetDatabasesResult) (*string, error) {
//				return &defaultDatabases.Databases[0].DbName, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetDatabases(ctx *pulumi.Context, args *GetDatabasesArgs, opts ...pulumi.InvokeOption) (*GetDatabasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatabasesResult
	err := ctx.Invoke("alicloud:polardb/getDatabases:getDatabases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabases.
type GetDatabasesArgs struct {
	// The polarDB cluster ID.
	DbClusterId string `pulumi:"dbClusterId"`
	// A regex string to filter results by database name.
	NameRegex *string `pulumi:"nameRegex"`
}

// A collection of values returned by getDatabases.
type GetDatabasesResult struct {
	// A list of PolarDB cluster databases. Each element contains the following attributes:
	Databases   []GetDatabasesDatabase `pulumi:"databases"`
	DbClusterId string                 `pulumi:"dbClusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	NameRegex *string `pulumi:"nameRegex"`
	// database name of the cluster.
	Names []string `pulumi:"names"`
}

func GetDatabasesOutput(ctx *pulumi.Context, args GetDatabasesOutputArgs, opts ...pulumi.InvokeOption) GetDatabasesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDatabasesResult, error) {
			args := v.(GetDatabasesArgs)
			r, err := GetDatabases(ctx, &args, opts...)
			var s GetDatabasesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDatabasesResultOutput)
}

// A collection of arguments for invoking getDatabases.
type GetDatabasesOutputArgs struct {
	// The polarDB cluster ID.
	DbClusterId pulumi.StringInput `pulumi:"dbClusterId"`
	// A regex string to filter results by database name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
}

func (GetDatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesArgs)(nil)).Elem()
}

// A collection of values returned by getDatabases.
type GetDatabasesResultOutput struct{ *pulumi.OutputState }

func (GetDatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesResult)(nil)).Elem()
}

func (o GetDatabasesResultOutput) ToGetDatabasesResultOutput() GetDatabasesResultOutput {
	return o
}

func (o GetDatabasesResultOutput) ToGetDatabasesResultOutputWithContext(ctx context.Context) GetDatabasesResultOutput {
	return o
}

// A list of PolarDB cluster databases. Each element contains the following attributes:
func (o GetDatabasesResultOutput) Databases() GetDatabasesDatabaseArrayOutput {
	return o.ApplyT(func(v GetDatabasesResult) []GetDatabasesDatabase { return v.Databases }).(GetDatabasesDatabaseArrayOutput)
}

func (o GetDatabasesResultOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesResult) string { return v.DbClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatabasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDatabasesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabasesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// database name of the cluster.
func (o GetDatabasesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabasesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabasesResultOutput{})
}
