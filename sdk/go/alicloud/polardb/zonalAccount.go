// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a PolarDB Zonal account resource and used to manage databases.
//
// > **NOTE:** Available since v1.262.0.
//
// ## Example Usage
//
// ## Import
//
// PolarDB Zonal account can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:polardb/zonalAccount:ZonalAccount example "pc-12345:tf_account"
// ```
type ZonalAccount struct {
	pulumi.CustomResourceState

	// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	AccountDescription pulumi.StringPtrOutput `pulumi:"accountDescription"`
	// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// The Id of cluster in which account belongs.
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
}

// NewZonalAccount registers a new resource with the given unique name, arguments, and options.
func NewZonalAccount(ctx *pulumi.Context,
	name string, args *ZonalAccountArgs, opts ...pulumi.ResourceOption) (*ZonalAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZonalAccount
	err := ctx.RegisterResource("alicloud:polardb/zonalAccount:ZonalAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZonalAccount gets an existing ZonalAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZonalAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZonalAccountState, opts ...pulumi.ResourceOption) (*ZonalAccount, error) {
	var resource ZonalAccount
	err := ctx.ReadResource("alicloud:polardb/zonalAccount:ZonalAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZonalAccount resources.
type zonalAccountState struct {
	// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	AccountDescription *string `pulumi:"accountDescription"`
	// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
	AccountName *string `pulumi:"accountName"`
	// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
	AccountPassword *string `pulumi:"accountPassword"`
	// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
	AccountType *string `pulumi:"accountType"`
	// The Id of cluster in which account belongs.
	DbClusterId *string `pulumi:"dbClusterId"`
}

type ZonalAccountState struct {
	// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	AccountDescription pulumi.StringPtrInput
	// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
	AccountName pulumi.StringPtrInput
	// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
	AccountPassword pulumi.StringPtrInput
	// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
	AccountType pulumi.StringPtrInput
	// The Id of cluster in which account belongs.
	DbClusterId pulumi.StringPtrInput
}

func (ZonalAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*zonalAccountState)(nil)).Elem()
}

type zonalAccountArgs struct {
	// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	AccountDescription *string `pulumi:"accountDescription"`
	// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
	AccountName string `pulumi:"accountName"`
	// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
	AccountPassword *string `pulumi:"accountPassword"`
	// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
	AccountType *string `pulumi:"accountType"`
	// The Id of cluster in which account belongs.
	DbClusterId string `pulumi:"dbClusterId"`
}

// The set of arguments for constructing a ZonalAccount resource.
type ZonalAccountArgs struct {
	// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
	AccountDescription pulumi.StringPtrInput
	// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
	AccountName pulumi.StringInput
	// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
	AccountPassword pulumi.StringPtrInput
	// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
	AccountType pulumi.StringPtrInput
	// The Id of cluster in which account belongs.
	DbClusterId pulumi.StringInput
}

func (ZonalAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zonalAccountArgs)(nil)).Elem()
}

type ZonalAccountInput interface {
	pulumi.Input

	ToZonalAccountOutput() ZonalAccountOutput
	ToZonalAccountOutputWithContext(ctx context.Context) ZonalAccountOutput
}

func (*ZonalAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonalAccount)(nil)).Elem()
}

func (i *ZonalAccount) ToZonalAccountOutput() ZonalAccountOutput {
	return i.ToZonalAccountOutputWithContext(context.Background())
}

func (i *ZonalAccount) ToZonalAccountOutputWithContext(ctx context.Context) ZonalAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAccountOutput)
}

// ZonalAccountArrayInput is an input type that accepts ZonalAccountArray and ZonalAccountArrayOutput values.
// You can construct a concrete instance of `ZonalAccountArrayInput` via:
//
//	ZonalAccountArray{ ZonalAccountArgs{...} }
type ZonalAccountArrayInput interface {
	pulumi.Input

	ToZonalAccountArrayOutput() ZonalAccountArrayOutput
	ToZonalAccountArrayOutputWithContext(context.Context) ZonalAccountArrayOutput
}

type ZonalAccountArray []ZonalAccountInput

func (ZonalAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZonalAccount)(nil)).Elem()
}

func (i ZonalAccountArray) ToZonalAccountArrayOutput() ZonalAccountArrayOutput {
	return i.ToZonalAccountArrayOutputWithContext(context.Background())
}

func (i ZonalAccountArray) ToZonalAccountArrayOutputWithContext(ctx context.Context) ZonalAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAccountArrayOutput)
}

// ZonalAccountMapInput is an input type that accepts ZonalAccountMap and ZonalAccountMapOutput values.
// You can construct a concrete instance of `ZonalAccountMapInput` via:
//
//	ZonalAccountMap{ "key": ZonalAccountArgs{...} }
type ZonalAccountMapInput interface {
	pulumi.Input

	ToZonalAccountMapOutput() ZonalAccountMapOutput
	ToZonalAccountMapOutputWithContext(context.Context) ZonalAccountMapOutput
}

type ZonalAccountMap map[string]ZonalAccountInput

func (ZonalAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZonalAccount)(nil)).Elem()
}

func (i ZonalAccountMap) ToZonalAccountMapOutput() ZonalAccountMapOutput {
	return i.ToZonalAccountMapOutputWithContext(context.Background())
}

func (i ZonalAccountMap) ToZonalAccountMapOutputWithContext(ctx context.Context) ZonalAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAccountMapOutput)
}

type ZonalAccountOutput struct{ *pulumi.OutputState }

func (ZonalAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonalAccount)(nil)).Elem()
}

func (o ZonalAccountOutput) ToZonalAccountOutput() ZonalAccountOutput {
	return o
}

func (o ZonalAccountOutput) ToZonalAccountOutputWithContext(ctx context.Context) ZonalAccountOutput {
	return o
}

// Account description. It cannot begin with https://. It must start with a Chinese character or English letter. It can include Chinese and English characters, underlines (_), hyphens (-), and numbers. The length may be 2-256 characters.
func (o ZonalAccountOutput) AccountDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZonalAccount) pulumi.StringPtrOutput { return v.AccountDescription }).(pulumi.StringPtrOutput)
}

// Operation account requiring a uniqueness check. It may consist of lower case letters, numbers, and underlines, and must start with a letter and have no more than 16 characters.
func (o ZonalAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonalAccount) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Operation password. It may consist of letters, digits, or underlines, with a length of 6 to 32 characters.
func (o ZonalAccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonalAccount) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// Account type, Valid values are `Normal`, `Super`, Default to `Normal`.
func (o ZonalAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonalAccount) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// The Id of cluster in which account belongs.
func (o ZonalAccountOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonalAccount) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

type ZonalAccountArrayOutput struct{ *pulumi.OutputState }

func (ZonalAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZonalAccount)(nil)).Elem()
}

func (o ZonalAccountArrayOutput) ToZonalAccountArrayOutput() ZonalAccountArrayOutput {
	return o
}

func (o ZonalAccountArrayOutput) ToZonalAccountArrayOutputWithContext(ctx context.Context) ZonalAccountArrayOutput {
	return o
}

func (o ZonalAccountArrayOutput) Index(i pulumi.IntInput) ZonalAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZonalAccount {
		return vs[0].([]*ZonalAccount)[vs[1].(int)]
	}).(ZonalAccountOutput)
}

type ZonalAccountMapOutput struct{ *pulumi.OutputState }

func (ZonalAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZonalAccount)(nil)).Elem()
}

func (o ZonalAccountMapOutput) ToZonalAccountMapOutput() ZonalAccountMapOutput {
	return o
}

func (o ZonalAccountMapOutput) ToZonalAccountMapOutputWithContext(ctx context.Context) ZonalAccountMapOutput {
	return o
}

func (o ZonalAccountMapOutput) MapIndex(k pulumi.StringInput) ZonalAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZonalAccount {
		return vs[0].(map[string]*ZonalAccount)[vs[1].(string)]
	}).(ZonalAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAccountInput)(nil)).Elem(), &ZonalAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAccountArrayInput)(nil)).Elem(), ZonalAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAccountMapInput)(nil)).Elem(), ZonalAccountMap{})
	pulumi.RegisterOutputType(ZonalAccountOutput{})
	pulumi.RegisterOutputType(ZonalAccountArrayOutput{})
	pulumi.RegisterOutputType(ZonalAccountMapOutput{})
}
