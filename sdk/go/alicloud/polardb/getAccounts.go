// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The `polardb.getAccounts` data source provides a collection of PolarDB cluster database account available in Alibaba Cloud account.
// Filters support regular expression for the account name, searches by clusterId.
//
// > **NOTE:** Available since v1.70.0+.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/polardb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := polardb.GetNodeClasses(ctx, &polardb.GetNodeClassesArgs{
//				DbType:    pulumi.StringRef("MySQL"),
//				DbVersion: pulumi.StringRef("8.0"),
//				PayType:   "PostPaid",
//				Category:  pulumi.StringRef("Normal"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("terraform-example"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
//				VpcId:       defaultNetwork.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(this.Classes[0].ZoneId),
//				VswitchName: pulumi.String("terraform-example"),
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := polardb.NewCluster(ctx, "cluster", &polardb.ClusterArgs{
//				DbType:      pulumi.String("MySQL"),
//				DbVersion:   pulumi.String("8.0"),
//				PayType:     pulumi.String("PostPaid"),
//				DbNodeCount: pulumi.Int(2),
//				DbNodeClass: *pulumi.String(this.Classes[0].SupportedEngines[0].AvailableResources[0].DbNodeClass),
//				VswitchId:   defaultSwitch.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			polardbClustersDs := polardb.GetClustersOutput(ctx, polardb.GetClustersOutputArgs{
//				DescriptionRegex: cluster.Description,
//				Status:           pulumi.String("Running"),
//			}, nil)
//			accountAccount, err := polardb.NewAccount(ctx, "accountAccount", &polardb.AccountArgs{
//				DbClusterId: polardbClustersDs.ApplyT(func(polardbClustersDs polardb.GetClustersResult) (*string, error) {
//					return &polardbClustersDs.Clusters[0].Id, nil
//				}).(pulumi.StringPtrOutput),
//				AccountName:        pulumi.String("tfnormal_01"),
//				AccountPassword:    pulumi.String("Test12345"),
//				AccountDescription: pulumi.String("tf_account_description"),
//				AccountType:        pulumi.String("Normal"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultAccounts := pulumi.All(polardbClustersDs, accountAccount.AccountName).ApplyT(func(_args []interface{}) (polardb.GetAccountsResult, error) {
//				polardbClustersDs := _args[0].(polardb.GetClustersResult)
//				accountName := _args[1].(string)
//				return polardb.GetAccountsOutput(ctx, polardb.GetAccountsOutputArgs{
//					DbClusterId: polardbClustersDs.Clusters[0].Id,
//					NameRegex:   accountName,
//				}, nil), nil
//			}).(polardb.GetAccountsResultOutput)
//			ctx.Export("account", defaultAccounts.ApplyT(func(defaultAccounts polardb.GetAccountsResult) (*string, error) {
//				return &defaultAccounts.Accounts[0].AccountName, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetAccounts(ctx *pulumi.Context, args *GetAccountsArgs, opts ...pulumi.InvokeOption) (*GetAccountsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAccountsResult
	err := ctx.Invoke("alicloud:polardb/getAccounts:getAccounts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccounts.
type GetAccountsArgs struct {
	// The polarDB cluster ID.
	DbClusterId string `pulumi:"dbClusterId"`
	// A regex string to filter results by account name.
	NameRegex *string `pulumi:"nameRegex"`
}

// A collection of values returned by getAccounts.
type GetAccountsResult struct {
	// A list of PolarDB cluster accounts. Each element contains the following attributes:
	Accounts    []GetAccountsAccount `pulumi:"accounts"`
	DbClusterId string               `pulumi:"dbClusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	NameRegex *string `pulumi:"nameRegex"`
	// Account name of the cluster.
	Names []string `pulumi:"names"`
}

func GetAccountsOutput(ctx *pulumi.Context, args GetAccountsOutputArgs, opts ...pulumi.InvokeOption) GetAccountsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAccountsResult, error) {
			args := v.(GetAccountsArgs)
			r, err := GetAccounts(ctx, &args, opts...)
			var s GetAccountsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAccountsResultOutput)
}

// A collection of arguments for invoking getAccounts.
type GetAccountsOutputArgs struct {
	// The polarDB cluster ID.
	DbClusterId pulumi.StringInput `pulumi:"dbClusterId"`
	// A regex string to filter results by account name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
}

func (GetAccountsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsArgs)(nil)).Elem()
}

// A collection of values returned by getAccounts.
type GetAccountsResultOutput struct{ *pulumi.OutputState }

func (GetAccountsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsResult)(nil)).Elem()
}

func (o GetAccountsResultOutput) ToGetAccountsResultOutput() GetAccountsResultOutput {
	return o
}

func (o GetAccountsResultOutput) ToGetAccountsResultOutputWithContext(ctx context.Context) GetAccountsResultOutput {
	return o
}

func (o GetAccountsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccountsResult] {
	return pulumix.Output[GetAccountsResult]{
		OutputState: o.OutputState,
	}
}

// A list of PolarDB cluster accounts. Each element contains the following attributes:
func (o GetAccountsResultOutput) Accounts() GetAccountsAccountArrayOutput {
	return o.ApplyT(func(v GetAccountsResult) []GetAccountsAccount { return v.Accounts }).(GetAccountsAccountArrayOutput)
}

func (o GetAccountsResultOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsResult) string { return v.DbClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAccountsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAccountsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// Account name of the cluster.
func (o GetAccountsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAccountsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAccountsResultOutput{})
}
