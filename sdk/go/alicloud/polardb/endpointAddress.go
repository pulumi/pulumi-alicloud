// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package polardb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a PolarDB endpoint address resource to allocate an Internet endpoint address string for PolarDB instance.
//
// > **NOTE:** Available in v1.68.0+. Each PolarDB instance will allocate a intranet connection string automatically and its prefix is Cluster ID.
//  To avoid unnecessary conflict, please specified a internet connection prefix before applying the resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/polardb"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		creation := "PolarDB"
// 		if param := cfg.Get("creation"); param != "" {
// 			creation = param
// 		}
// 		name := "polardbconnectionbasic"
// 		if param := cfg.Get("name"); param != "" {
// 			name = param
// 		}
// 		opt0 := creation
// 		defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// 			AvailableResourceCreation: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultNetwork, err := vpc.NewNetwork(ctx, "defaultNetwork", &vpc.NetworkArgs{
// 			CidrBlock: pulumi.String("172.16.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSwitch, err := vpc.NewSwitch(ctx, "defaultSwitch", &vpc.SwitchArgs{
// 			VpcId:            defaultNetwork.ID(),
// 			CidrBlock:        pulumi.String("172.16.0.0/24"),
// 			AvailabilityZone: pulumi.String(defaultZones.Zones[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultCluster, err := polardb.NewCluster(ctx, "defaultCluster", &polardb.ClusterArgs{
// 			DbType:      pulumi.String("MySQL"),
// 			DbVersion:   pulumi.String("8.0"),
// 			PayType:     pulumi.String("PostPaid"),
// 			DbNodeClass: pulumi.String("polar.mysql.x4.large"),
// 			VswitchId:   defaultSwitch.ID(),
// 			Description: pulumi.String(name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = polardb.NewEndpointAddress(ctx, "endpoint", &polardb.EndpointAddressArgs{
// 			DbClusterId: defaultCluster.ID(),
// 			DbEndpointId: defaultEndpoints.ApplyT(func(defaultEndpoints polardb.GetEndpointsResult) (string, error) {
// 				return defaultEndpoints.Endpoints[0].DbEndpointId, nil
// 			}).(pulumi.StringOutput),
// 			ConnectionPrefix: pulumi.String("testpolardbconn"),
// 			NetType:          pulumi.String("Public"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// PolarDB endpoint address can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:polardb/endpointAddress:EndpointAddress example pc-abc123456:pe-abc123456
// ```
type EndpointAddress struct {
	pulumi.CustomResourceState

	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringOutput `pulumi:"connectionPrefix"`
	// Connection cluster or endpoint string.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The Id of endpoint that can run database.
	DbEndpointId pulumi.StringOutput `pulumi:"dbEndpointId"`
	// The ip address of connection string.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Internet connection net type. Valid value: `Public`. Default to `Public`. Currently supported only `Public`.
	NetType pulumi.StringPtrOutput `pulumi:"netType"`
	// Connection cluster or endpoint port.
	Port pulumi.StringOutput `pulumi:"port"`
}

// NewEndpointAddress registers a new resource with the given unique name, arguments, and options.
func NewEndpointAddress(ctx *pulumi.Context,
	name string, args *EndpointAddressArgs, opts ...pulumi.ResourceOption) (*EndpointAddress, error) {
	if args == nil || args.DbClusterId == nil {
		return nil, errors.New("missing required argument 'DbClusterId'")
	}
	if args == nil || args.DbEndpointId == nil {
		return nil, errors.New("missing required argument 'DbEndpointId'")
	}
	if args == nil {
		args = &EndpointAddressArgs{}
	}
	var resource EndpointAddress
	err := ctx.RegisterResource("alicloud:polardb/endpointAddress:EndpointAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAddress gets an existing EndpointAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAddressState, opts ...pulumi.ResourceOption) (*EndpointAddress, error) {
	var resource EndpointAddress
	err := ctx.ReadResource("alicloud:polardb/endpointAddress:EndpointAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAddress resources.
type endpointAddressState struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// Connection cluster or endpoint string.
	ConnectionString *string `pulumi:"connectionString"`
	// The Id of cluster that can run database.
	DbClusterId *string `pulumi:"dbClusterId"`
	// The Id of endpoint that can run database.
	DbEndpointId *string `pulumi:"dbEndpointId"`
	// The ip address of connection string.
	IpAddress *string `pulumi:"ipAddress"`
	// Internet connection net type. Valid value: `Public`. Default to `Public`. Currently supported only `Public`.
	NetType *string `pulumi:"netType"`
	// Connection cluster or endpoint port.
	Port *string `pulumi:"port"`
}

type EndpointAddressState struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringPtrInput
	// Connection cluster or endpoint string.
	ConnectionString pulumi.StringPtrInput
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringPtrInput
	// The Id of endpoint that can run database.
	DbEndpointId pulumi.StringPtrInput
	// The ip address of connection string.
	IpAddress pulumi.StringPtrInput
	// Internet connection net type. Valid value: `Public`. Default to `Public`. Currently supported only `Public`.
	NetType pulumi.StringPtrInput
	// Connection cluster or endpoint port.
	Port pulumi.StringPtrInput
}

func (EndpointAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAddressState)(nil)).Elem()
}

type endpointAddressArgs struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix *string `pulumi:"connectionPrefix"`
	// The Id of cluster that can run database.
	DbClusterId string `pulumi:"dbClusterId"`
	// The Id of endpoint that can run database.
	DbEndpointId string `pulumi:"dbEndpointId"`
	// Internet connection net type. Valid value: `Public`. Default to `Public`. Currently supported only `Public`.
	NetType *string `pulumi:"netType"`
}

// The set of arguments for constructing a EndpointAddress resource.
type EndpointAddressArgs struct {
	// Prefix of the specified endpoint. The prefix must be 6 to 30 characters in length, and can contain lowercase letters, digits, and hyphens (-), must start with a letter and end with a digit or letter.
	ConnectionPrefix pulumi.StringPtrInput
	// The Id of cluster that can run database.
	DbClusterId pulumi.StringInput
	// The Id of endpoint that can run database.
	DbEndpointId pulumi.StringInput
	// Internet connection net type. Valid value: `Public`. Default to `Public`. Currently supported only `Public`.
	NetType pulumi.StringPtrInput
}

func (EndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAddressArgs)(nil)).Elem()
}

type EndpointAddressInput interface {
	pulumi.Input

	ToEndpointAddressOutput() EndpointAddressOutput
	ToEndpointAddressOutputWithContext(ctx context.Context) EndpointAddressOutput
}

func (EndpointAddress) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddress)(nil)).Elem()
}

func (i EndpointAddress) ToEndpointAddressOutput() EndpointAddressOutput {
	return i.ToEndpointAddressOutputWithContext(context.Background())
}

func (i EndpointAddress) ToEndpointAddressOutputWithContext(ctx context.Context) EndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAddressOutput)
}

type EndpointAddressOutput struct {
	*pulumi.OutputState
}

func (EndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAddressOutput)(nil)).Elem()
}

func (o EndpointAddressOutput) ToEndpointAddressOutput() EndpointAddressOutput {
	return o
}

func (o EndpointAddressOutput) ToEndpointAddressOutputWithContext(ctx context.Context) EndpointAddressOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EndpointAddressOutput{})
}
