// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a network acl attachment resource to associate network acls to vswitches.
//
// > **DEPRECATED:**  This resource  has been deprecated from version `1.124.0`. Replace by `resources` with the resource alicloud_network_acl.
// Note that because this resource conflicts with the `resources` attribute of `vpc.NetworkAcl`, this resource can no be used.
//
// > **NOTE:** Available in 1.44.0+. Currently, the resource are only available in Hongkong(cn-hongkong), India(ap-south-1), and Indonesia(ap-southeast-1) regions.
type NetworkAclAttachment struct {
	pulumi.CustomResourceState

	// The id of the network acl, the field can't be changed.
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// List of the resources associated with the network acl. The details see Block Resources.
	Resources NetworkAclAttachmentResourceArrayOutput `pulumi:"resources"`
}

// NewNetworkAclAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclAttachment(ctx *pulumi.Context,
	name string, args *NetworkAclAttachmentArgs, opts ...pulumi.ResourceOption) (*NetworkAclAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAclAttachment
	err := ctx.RegisterResource("alicloud:vpc/networkAclAttachment:NetworkAclAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclAttachment gets an existing NetworkAclAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclAttachmentState, opts ...pulumi.ResourceOption) (*NetworkAclAttachment, error) {
	var resource NetworkAclAttachment
	err := ctx.ReadResource("alicloud:vpc/networkAclAttachment:NetworkAclAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclAttachment resources.
type networkAclAttachmentState struct {
	// The id of the network acl, the field can't be changed.
	NetworkAclId *string `pulumi:"networkAclId"`
	// List of the resources associated with the network acl. The details see Block Resources.
	Resources []NetworkAclAttachmentResource `pulumi:"resources"`
}

type NetworkAclAttachmentState struct {
	// The id of the network acl, the field can't be changed.
	NetworkAclId pulumi.StringPtrInput
	// List of the resources associated with the network acl. The details see Block Resources.
	Resources NetworkAclAttachmentResourceArrayInput
}

func (NetworkAclAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAttachmentState)(nil)).Elem()
}

type networkAclAttachmentArgs struct {
	// The id of the network acl, the field can't be changed.
	NetworkAclId string `pulumi:"networkAclId"`
	// List of the resources associated with the network acl. The details see Block Resources.
	Resources []NetworkAclAttachmentResource `pulumi:"resources"`
}

// The set of arguments for constructing a NetworkAclAttachment resource.
type NetworkAclAttachmentArgs struct {
	// The id of the network acl, the field can't be changed.
	NetworkAclId pulumi.StringInput
	// List of the resources associated with the network acl. The details see Block Resources.
	Resources NetworkAclAttachmentResourceArrayInput
}

func (NetworkAclAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAttachmentArgs)(nil)).Elem()
}

type NetworkAclAttachmentInput interface {
	pulumi.Input

	ToNetworkAclAttachmentOutput() NetworkAclAttachmentOutput
	ToNetworkAclAttachmentOutputWithContext(ctx context.Context) NetworkAclAttachmentOutput
}

func (*NetworkAclAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclAttachment)(nil)).Elem()
}

func (i *NetworkAclAttachment) ToNetworkAclAttachmentOutput() NetworkAclAttachmentOutput {
	return i.ToNetworkAclAttachmentOutputWithContext(context.Background())
}

func (i *NetworkAclAttachment) ToNetworkAclAttachmentOutputWithContext(ctx context.Context) NetworkAclAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAttachmentOutput)
}

func (i *NetworkAclAttachment) ToOutput(ctx context.Context) pulumix.Output[*NetworkAclAttachment] {
	return pulumix.Output[*NetworkAclAttachment]{
		OutputState: i.ToNetworkAclAttachmentOutputWithContext(ctx).OutputState,
	}
}

// NetworkAclAttachmentArrayInput is an input type that accepts NetworkAclAttachmentArray and NetworkAclAttachmentArrayOutput values.
// You can construct a concrete instance of `NetworkAclAttachmentArrayInput` via:
//
//	NetworkAclAttachmentArray{ NetworkAclAttachmentArgs{...} }
type NetworkAclAttachmentArrayInput interface {
	pulumi.Input

	ToNetworkAclAttachmentArrayOutput() NetworkAclAttachmentArrayOutput
	ToNetworkAclAttachmentArrayOutputWithContext(context.Context) NetworkAclAttachmentArrayOutput
}

type NetworkAclAttachmentArray []NetworkAclAttachmentInput

func (NetworkAclAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclAttachment)(nil)).Elem()
}

func (i NetworkAclAttachmentArray) ToNetworkAclAttachmentArrayOutput() NetworkAclAttachmentArrayOutput {
	return i.ToNetworkAclAttachmentArrayOutputWithContext(context.Background())
}

func (i NetworkAclAttachmentArray) ToNetworkAclAttachmentArrayOutputWithContext(ctx context.Context) NetworkAclAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAttachmentArrayOutput)
}

func (i NetworkAclAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkAclAttachment] {
	return pulumix.Output[[]*NetworkAclAttachment]{
		OutputState: i.ToNetworkAclAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkAclAttachmentMapInput is an input type that accepts NetworkAclAttachmentMap and NetworkAclAttachmentMapOutput values.
// You can construct a concrete instance of `NetworkAclAttachmentMapInput` via:
//
//	NetworkAclAttachmentMap{ "key": NetworkAclAttachmentArgs{...} }
type NetworkAclAttachmentMapInput interface {
	pulumi.Input

	ToNetworkAclAttachmentMapOutput() NetworkAclAttachmentMapOutput
	ToNetworkAclAttachmentMapOutputWithContext(context.Context) NetworkAclAttachmentMapOutput
}

type NetworkAclAttachmentMap map[string]NetworkAclAttachmentInput

func (NetworkAclAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclAttachment)(nil)).Elem()
}

func (i NetworkAclAttachmentMap) ToNetworkAclAttachmentMapOutput() NetworkAclAttachmentMapOutput {
	return i.ToNetworkAclAttachmentMapOutputWithContext(context.Background())
}

func (i NetworkAclAttachmentMap) ToNetworkAclAttachmentMapOutputWithContext(ctx context.Context) NetworkAclAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAttachmentMapOutput)
}

func (i NetworkAclAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkAclAttachment] {
	return pulumix.Output[map[string]*NetworkAclAttachment]{
		OutputState: i.ToNetworkAclAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkAclAttachmentOutput struct{ *pulumi.OutputState }

func (NetworkAclAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclAttachment)(nil)).Elem()
}

func (o NetworkAclAttachmentOutput) ToNetworkAclAttachmentOutput() NetworkAclAttachmentOutput {
	return o
}

func (o NetworkAclAttachmentOutput) ToNetworkAclAttachmentOutputWithContext(ctx context.Context) NetworkAclAttachmentOutput {
	return o
}

func (o NetworkAclAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkAclAttachment] {
	return pulumix.Output[*NetworkAclAttachment]{
		OutputState: o.OutputState,
	}
}

// The id of the network acl, the field can't be changed.
func (o NetworkAclAttachmentOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclAttachment) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// List of the resources associated with the network acl. The details see Block Resources.
func (o NetworkAclAttachmentOutput) Resources() NetworkAclAttachmentResourceArrayOutput {
	return o.ApplyT(func(v *NetworkAclAttachment) NetworkAclAttachmentResourceArrayOutput { return v.Resources }).(NetworkAclAttachmentResourceArrayOutput)
}

type NetworkAclAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclAttachment)(nil)).Elem()
}

func (o NetworkAclAttachmentArrayOutput) ToNetworkAclAttachmentArrayOutput() NetworkAclAttachmentArrayOutput {
	return o
}

func (o NetworkAclAttachmentArrayOutput) ToNetworkAclAttachmentArrayOutputWithContext(ctx context.Context) NetworkAclAttachmentArrayOutput {
	return o
}

func (o NetworkAclAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkAclAttachment] {
	return pulumix.Output[[]*NetworkAclAttachment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAclAttachmentArrayOutput) Index(i pulumi.IntInput) NetworkAclAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAclAttachment {
		return vs[0].([]*NetworkAclAttachment)[vs[1].(int)]
	}).(NetworkAclAttachmentOutput)
}

type NetworkAclAttachmentMapOutput struct{ *pulumi.OutputState }

func (NetworkAclAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclAttachment)(nil)).Elem()
}

func (o NetworkAclAttachmentMapOutput) ToNetworkAclAttachmentMapOutput() NetworkAclAttachmentMapOutput {
	return o
}

func (o NetworkAclAttachmentMapOutput) ToNetworkAclAttachmentMapOutputWithContext(ctx context.Context) NetworkAclAttachmentMapOutput {
	return o
}

func (o NetworkAclAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkAclAttachment] {
	return pulumix.Output[map[string]*NetworkAclAttachment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAclAttachmentMapOutput) MapIndex(k pulumi.StringInput) NetworkAclAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAclAttachment {
		return vs[0].(map[string]*NetworkAclAttachment)[vs[1].(string)]
	}).(NetworkAclAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAttachmentInput)(nil)).Elem(), &NetworkAclAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAttachmentArrayInput)(nil)).Elem(), NetworkAclAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAttachmentMapInput)(nil)).Elem(), NetworkAclAttachmentMap{})
	pulumi.RegisterOutputType(NetworkAclAttachmentOutput{})
	pulumi.RegisterOutputType(NetworkAclAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclAttachmentMapOutput{})
}
