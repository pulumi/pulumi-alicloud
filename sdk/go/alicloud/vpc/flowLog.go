// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vpc Flow Log resource. While it uses vpc.FlowLog to build a vpc flow log resource, it will be active by default.
//
// For information about Vpc Flow Log and how to use it, see [What is Flow Log](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/flow-logs-overview).
//
// > **NOTE:** Available since v1.117.0.
//
// ## Import
//
// Vpc Flow Log can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:vpc/flowLog:FlowLog example <id>
//
// ```
type FlowLog struct {
	pulumi.CustomResourceState

	// Data aggregation interval.
	AggregationInterval pulumi.StringOutput `pulumi:"aggregationInterval"`
	// Business status.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The Description of the VPC Flow Log.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flow log ID.
	FlowLogId pulumi.StringOutput `pulumi:"flowLogId"`
	// The Name of the VPC Flow Log.
	FlowLogName pulumi.StringPtrOutput `pulumi:"flowLogName"`
	// The name of the logstore.
	LogStoreName pulumi.StringOutput `pulumi:"logStoreName"`
	// The name of the project.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag of the current instance resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
	TrafficPaths pulumi.StringArrayOutput `pulumi:"trafficPaths"`
	// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogStoreName == nil {
		return nil, errors.New("invalid value for required argument 'LogStoreName'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.TrafficType == nil {
		return nil, errors.New("invalid value for required argument 'TrafficType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowLog
	err := ctx.RegisterResource("alicloud:vpc/flowLog:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("alicloud:vpc/flowLog:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
	// Data aggregation interval.
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// Business status.
	BusinessStatus *string `pulumi:"businessStatus"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// The Description of the VPC Flow Log.
	Description *string `pulumi:"description"`
	// The flow log ID.
	FlowLogId *string `pulumi:"flowLogId"`
	// The Name of the VPC Flow Log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The name of the logstore.
	LogStoreName *string `pulumi:"logStoreName"`
	// The name of the project.
	ProjectName *string `pulumi:"projectName"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId *string `pulumi:"resourceId"`
	// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
	ResourceType *string `pulumi:"resourceType"`
	// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
	Status *string `pulumi:"status"`
	// The tag of the current instance resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
	TrafficPaths []string `pulumi:"trafficPaths"`
	// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
	TrafficType *string `pulumi:"trafficType"`
}

type FlowLogState struct {
	// Data aggregation interval.
	AggregationInterval pulumi.StringPtrInput
	// Business status.
	BusinessStatus pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// The Description of the VPC Flow Log.
	Description pulumi.StringPtrInput
	// The flow log ID.
	FlowLogId pulumi.StringPtrInput
	// The Name of the VPC Flow Log.
	FlowLogName pulumi.StringPtrInput
	// The name of the logstore.
	LogStoreName pulumi.StringPtrInput
	// The name of the project.
	ProjectName pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the resource.
	ResourceId pulumi.StringPtrInput
	// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
	ResourceType pulumi.StringPtrInput
	// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
	Status pulumi.StringPtrInput
	// The tag of the current instance resource.
	Tags pulumi.MapInput
	// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
	TrafficPaths pulumi.StringArrayInput
	// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
	TrafficType pulumi.StringPtrInput
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	// Data aggregation interval.
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// The Description of the VPC Flow Log.
	Description *string `pulumi:"description"`
	// The Name of the VPC Flow Log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The name of the logstore.
	LogStoreName string `pulumi:"logStoreName"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The ID of the resource.
	ResourceId string `pulumi:"resourceId"`
	// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
	ResourceType string `pulumi:"resourceType"`
	// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
	Status *string `pulumi:"status"`
	// The tag of the current instance resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
	TrafficPaths []string `pulumi:"trafficPaths"`
	// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
	TrafficType string `pulumi:"trafficType"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	// Data aggregation interval.
	AggregationInterval pulumi.StringPtrInput
	// The Description of the VPC Flow Log.
	Description pulumi.StringPtrInput
	// The Name of the VPC Flow Log.
	FlowLogName pulumi.StringPtrInput
	// The name of the logstore.
	LogStoreName pulumi.StringInput
	// The name of the project.
	ProjectName pulumi.StringInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The ID of the resource.
	ResourceId pulumi.StringInput
	// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
	ResourceType pulumi.StringInput
	// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
	Status pulumi.StringPtrInput
	// The tag of the current instance resource.
	Tags pulumi.MapInput
	// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
	TrafficPaths pulumi.StringArrayInput
	// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
	TrafficType pulumi.StringInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

// FlowLogArrayInput is an input type that accepts FlowLogArray and FlowLogArrayOutput values.
// You can construct a concrete instance of `FlowLogArrayInput` via:
//
//	FlowLogArray{ FlowLogArgs{...} }
type FlowLogArrayInput interface {
	pulumi.Input

	ToFlowLogArrayOutput() FlowLogArrayOutput
	ToFlowLogArrayOutputWithContext(context.Context) FlowLogArrayOutput
}

type FlowLogArray []FlowLogInput

func (FlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (i FlowLogArray) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return i.ToFlowLogArrayOutputWithContext(context.Background())
}

func (i FlowLogArray) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogArrayOutput)
}

// FlowLogMapInput is an input type that accepts FlowLogMap and FlowLogMapOutput values.
// You can construct a concrete instance of `FlowLogMapInput` via:
//
//	FlowLogMap{ "key": FlowLogArgs{...} }
type FlowLogMapInput interface {
	pulumi.Input

	ToFlowLogMapOutput() FlowLogMapOutput
	ToFlowLogMapOutputWithContext(context.Context) FlowLogMapOutput
}

type FlowLogMap map[string]FlowLogInput

func (FlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (i FlowLogMap) ToFlowLogMapOutput() FlowLogMapOutput {
	return i.ToFlowLogMapOutputWithContext(context.Background())
}

func (i FlowLogMap) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogMapOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

// Data aggregation interval.
func (o FlowLogOutput) AggregationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.AggregationInterval }).(pulumi.StringOutput)
}

// Business status.
func (o FlowLogOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// Creation time.
func (o FlowLogOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The Description of the VPC Flow Log.
func (o FlowLogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The flow log ID.
func (o FlowLogOutput) FlowLogId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.FlowLogId }).(pulumi.StringOutput)
}

// The Name of the VPC Flow Log.
func (o FlowLogOutput) FlowLogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.FlowLogName }).(pulumi.StringPtrOutput)
}

// The name of the logstore.
func (o FlowLogOutput) LogStoreName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogStoreName }).(pulumi.StringOutput)
}

// The name of the project.
func (o FlowLogOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o FlowLogOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o FlowLogOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The resource type of the traffic captured by the flow log:-**NetworkInterface**: ENI.-**VSwitch**: All ENIs in the VSwitch.-**VPC**: All ENIs in the VPC.
func (o FlowLogOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of the VPC Flow Log. Valid values: **Active** and **Inactive**.
func (o FlowLogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag of the current instance resource.
func (o FlowLogOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The collected flow path. Value:**all**: indicates full acquisition.**internetGateway**: indicates public network traffic collection.
func (o FlowLogOutput) TrafficPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringArrayOutput { return v.TrafficPaths }).(pulumi.StringArrayOutput)
}

// The type of traffic collected. Valid values:**All**: All traffic.**Allow**: Access control allowedtraffic.**Drop**: Access control denied traffic.
func (o FlowLogOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

type FlowLogArrayOutput struct{ *pulumi.OutputState }

func (FlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) Index(i pulumi.IntInput) FlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].([]*FlowLog)[vs[1].(int)]
	}).(FlowLogOutput)
}

type FlowLogMapOutput struct{ *pulumi.OutputState }

func (FlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (o FlowLogMapOutput) ToFlowLogMapOutput() FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) MapIndex(k pulumi.StringInput) FlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].(map[string]*FlowLog)[vs[1].(string)]
	}).(FlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogInput)(nil)).Elem(), &FlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogArrayInput)(nil)).Elem(), FlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogMapInput)(nil)).Elem(), FlowLogMap{})
	pulumi.RegisterOutputType(FlowLogOutput{})
	pulumi.RegisterOutputType(FlowLogArrayOutput{})
	pulumi.RegisterOutputType(FlowLogMapOutput{})
}
