// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VPC Route Entry resource.
//
// There are route entries in the routing table, and the next hop is judged based on the route entries.
//
// For information about VPC Route Entry and how to use it, see [What is Route Entry](https://www.alibabacloud.com/help/en/vpc/developer-reference/api-vpc-2016-04-28-createrouteentry).
//
// > **NOTE:** Available since v1.245.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// _default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
// AvailableDiskCategory: pulumi.StringRef("cloud_efficiency"),
// AvailableResourceCreation: pulumi.StringRef("VSwitch"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// MostRecent: pulumi.BoolRef(true),
// Owners: pulumi.StringRef("system"),
// }, nil);
// if err != nil {
// return err
// }
// defaultGetInstanceTypes, err := ecs.GetInstanceTypes(ctx, &ecs.GetInstanceTypesArgs{
// AvailabilityZone: pulumi.StringRef(_default.Zones[0].Id),
// ImageId: pulumi.StringRef(defaultGetImages.Images[0].Id),
// }, nil);
// if err != nil {
// return err
// }
// defaultNetwork, err := vpc.NewNetwork(ctx, "default", &vpc.NetworkArgs{
// VpcName: pulumi.String(name),
// CidrBlock: pulumi.String("192.168.0.0/16"),
// })
// if err != nil {
// return err
// }
// defaultSwitch, err := vpc.NewSwitch(ctx, "default", &vpc.SwitchArgs{
// VswitchName: pulumi.String(name),
// VpcId: defaultNetwork.ID(),
// CidrBlock: pulumi.String("192.168.192.0/24"),
// ZoneId: pulumi.String(_default.Zones[0].Id),
// })
// if err != nil {
// return err
// }
// defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
// Name: pulumi.String(name),
// VpcId: defaultNetwork.ID(),
// })
// if err != nil {
// return err
// }
// var splat0 pulumi.StringArray
// for _, val0 := range %!v(PANIC=Format method: fatal: An assertion has failed: tok: ) {
// splat0 = append(splat0, val0.ID())
// }
// defaultInstance, err := ecs.NewInstance(ctx, "default", &ecs.InstanceArgs{
// ImageId: pulumi.String(defaultGetImages.Images[0].Id),
// InstanceType: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].Id),
// SecurityGroups: splat0,
// InternetChargeType: pulumi.String("PayByTraffic"),
// InternetMaxBandwidthOut: pulumi.Int(10),
// AvailabilityZone: pulumi.String(defaultGetInstanceTypes.InstanceTypes[0].AvailabilityZones[0]),
// InstanceChargeType: pulumi.String("PostPaid"),
// SystemDiskCategory: pulumi.String("cloud_efficiency"),
// VswitchId: defaultSwitch.ID(),
// InstanceName: pulumi.String(name),
// })
// if err != nil {
// return err
// }
// _, err = vpc.NewRouteEntry(ctx, "foo", &vpc.RouteEntryArgs{
// RouteTableId: defaultNetwork.RouteTableId,
// DestinationCidrblock: pulumi.String("172.11.1.1/32"),
// NexthopType: pulumi.String("Instance"),
// NexthopId: defaultInstance.ID(),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// VPC Route Entry can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpc/vPCRouteEntry:VPCRouteEntry example <route_table_id>:<destination_cidr_block>
// ```
type VPCRouteEntry struct {
	pulumi.CustomResourceState

	// Description of the route entry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination network segment of the routing entry.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// Next jump See `nextHops` below.
	NextHops VPCRouteEntryNextHopArrayOutput `pulumi:"nextHops"`
	// The ID of the next hop instance of the custom route entry.
	NexthopId pulumi.StringOutput `pulumi:"nexthopId"`
	// The type of the next hop of the custom route entry. Valid values:
	// - `Instance` (default): The ECS Instance.
	// - `HaVip`: a highly available virtual IP address.
	// - `RouterInterface`: indicates the router interface.
	// - **Network interface**: ENI.
	// - `VpnGateway`: the VPN gateway.
	// - `IPv6Gateway`:IPv6 gateway.
	// - `NatGateway`:NAT gateway.
	// - `Attachment`: The forwarding router.
	// - `VpcPeer`:VPC peer connection.
	// - `Ipv4Gateway`:IPv4 Gateway.
	// - `GatewayEndpoint`: the gateway endpoint.
	// - `Ecr`: Leased line gateway.
	// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
	NexthopType pulumi.StringOutput `pulumi:"nexthopType"`
	// The name of the route entry.
	RouteEntryName pulumi.StringOutput `pulumi:"routeEntryName"`
	// Route publish status and publish target type See `routePublishTargets` below.
	RoutePublishTargets VPCRouteEntryRoutePublishTargetArrayOutput `pulumi:"routePublishTargets"`
	// Routing table ID
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The status of the route entry.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVPCRouteEntry registers a new resource with the given unique name, arguments, and options.
func NewVPCRouteEntry(ctx *pulumi.Context,
	name string, args *VPCRouteEntryArgs, opts ...pulumi.ResourceOption) (*VPCRouteEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VPCRouteEntry
	err := ctx.RegisterResource("alicloud:vpc/vPCRouteEntry:VPCRouteEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCRouteEntry gets an existing VPCRouteEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCRouteEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCRouteEntryState, opts ...pulumi.ResourceOption) (*VPCRouteEntry, error) {
	var resource VPCRouteEntry
	err := ctx.ReadResource("alicloud:vpc/vPCRouteEntry:VPCRouteEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCRouteEntry resources.
type vpcrouteEntryState struct {
	// Description of the route entry.
	Description *string `pulumi:"description"`
	// The destination network segment of the routing entry.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Next jump See `nextHops` below.
	NextHops []VPCRouteEntryNextHop `pulumi:"nextHops"`
	// The ID of the next hop instance of the custom route entry.
	NexthopId *string `pulumi:"nexthopId"`
	// The type of the next hop of the custom route entry. Valid values:
	// - `Instance` (default): The ECS Instance.
	// - `HaVip`: a highly available virtual IP address.
	// - `RouterInterface`: indicates the router interface.
	// - **Network interface**: ENI.
	// - `VpnGateway`: the VPN gateway.
	// - `IPv6Gateway`:IPv6 gateway.
	// - `NatGateway`:NAT gateway.
	// - `Attachment`: The forwarding router.
	// - `VpcPeer`:VPC peer connection.
	// - `Ipv4Gateway`:IPv4 Gateway.
	// - `GatewayEndpoint`: the gateway endpoint.
	// - `Ecr`: Leased line gateway.
	// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
	NexthopType *string `pulumi:"nexthopType"`
	// The name of the route entry.
	RouteEntryName *string `pulumi:"routeEntryName"`
	// Route publish status and publish target type See `routePublishTargets` below.
	RoutePublishTargets []VPCRouteEntryRoutePublishTarget `pulumi:"routePublishTargets"`
	// Routing table ID
	RouteTableId *string `pulumi:"routeTableId"`
	// The status of the route entry.
	Status *string `pulumi:"status"`
}

type VPCRouteEntryState struct {
	// Description of the route entry.
	Description pulumi.StringPtrInput
	// The destination network segment of the routing entry.
	DestinationCidrBlock pulumi.StringPtrInput
	// Next jump See `nextHops` below.
	NextHops VPCRouteEntryNextHopArrayInput
	// The ID of the next hop instance of the custom route entry.
	NexthopId pulumi.StringPtrInput
	// The type of the next hop of the custom route entry. Valid values:
	// - `Instance` (default): The ECS Instance.
	// - `HaVip`: a highly available virtual IP address.
	// - `RouterInterface`: indicates the router interface.
	// - **Network interface**: ENI.
	// - `VpnGateway`: the VPN gateway.
	// - `IPv6Gateway`:IPv6 gateway.
	// - `NatGateway`:NAT gateway.
	// - `Attachment`: The forwarding router.
	// - `VpcPeer`:VPC peer connection.
	// - `Ipv4Gateway`:IPv4 Gateway.
	// - `GatewayEndpoint`: the gateway endpoint.
	// - `Ecr`: Leased line gateway.
	// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
	NexthopType pulumi.StringPtrInput
	// The name of the route entry.
	RouteEntryName pulumi.StringPtrInput
	// Route publish status and publish target type See `routePublishTargets` below.
	RoutePublishTargets VPCRouteEntryRoutePublishTargetArrayInput
	// Routing table ID
	RouteTableId pulumi.StringPtrInput
	// The status of the route entry.
	Status pulumi.StringPtrInput
}

func (VPCRouteEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcrouteEntryState)(nil)).Elem()
}

type vpcrouteEntryArgs struct {
	// Description of the route entry.
	Description *string `pulumi:"description"`
	// The destination network segment of the routing entry.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// Next jump See `nextHops` below.
	NextHops []VPCRouteEntryNextHop `pulumi:"nextHops"`
	// The ID of the next hop instance of the custom route entry.
	NexthopId *string `pulumi:"nexthopId"`
	// The type of the next hop of the custom route entry. Valid values:
	// - `Instance` (default): The ECS Instance.
	// - `HaVip`: a highly available virtual IP address.
	// - `RouterInterface`: indicates the router interface.
	// - **Network interface**: ENI.
	// - `VpnGateway`: the VPN gateway.
	// - `IPv6Gateway`:IPv6 gateway.
	// - `NatGateway`:NAT gateway.
	// - `Attachment`: The forwarding router.
	// - `VpcPeer`:VPC peer connection.
	// - `Ipv4Gateway`:IPv4 Gateway.
	// - `GatewayEndpoint`: the gateway endpoint.
	// - `Ecr`: Leased line gateway.
	// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
	NexthopType *string `pulumi:"nexthopType"`
	// The name of the route entry.
	RouteEntryName *string `pulumi:"routeEntryName"`
	// Route publish status and publish target type See `routePublishTargets` below.
	RoutePublishTargets []VPCRouteEntryRoutePublishTarget `pulumi:"routePublishTargets"`
	// Routing table ID
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a VPCRouteEntry resource.
type VPCRouteEntryArgs struct {
	// Description of the route entry.
	Description pulumi.StringPtrInput
	// The destination network segment of the routing entry.
	DestinationCidrBlock pulumi.StringInput
	// Next jump See `nextHops` below.
	NextHops VPCRouteEntryNextHopArrayInput
	// The ID of the next hop instance of the custom route entry.
	NexthopId pulumi.StringPtrInput
	// The type of the next hop of the custom route entry. Valid values:
	// - `Instance` (default): The ECS Instance.
	// - `HaVip`: a highly available virtual IP address.
	// - `RouterInterface`: indicates the router interface.
	// - **Network interface**: ENI.
	// - `VpnGateway`: the VPN gateway.
	// - `IPv6Gateway`:IPv6 gateway.
	// - `NatGateway`:NAT gateway.
	// - `Attachment`: The forwarding router.
	// - `VpcPeer`:VPC peer connection.
	// - `Ipv4Gateway`:IPv4 Gateway.
	// - `GatewayEndpoint`: the gateway endpoint.
	// - `Ecr`: Leased line gateway.
	// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
	NexthopType pulumi.StringPtrInput
	// The name of the route entry.
	RouteEntryName pulumi.StringPtrInput
	// Route publish status and publish target type See `routePublishTargets` below.
	RoutePublishTargets VPCRouteEntryRoutePublishTargetArrayInput
	// Routing table ID
	RouteTableId pulumi.StringInput
}

func (VPCRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcrouteEntryArgs)(nil)).Elem()
}

type VPCRouteEntryInput interface {
	pulumi.Input

	ToVPCRouteEntryOutput() VPCRouteEntryOutput
	ToVPCRouteEntryOutputWithContext(ctx context.Context) VPCRouteEntryOutput
}

func (*VPCRouteEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCRouteEntry)(nil)).Elem()
}

func (i *VPCRouteEntry) ToVPCRouteEntryOutput() VPCRouteEntryOutput {
	return i.ToVPCRouteEntryOutputWithContext(context.Background())
}

func (i *VPCRouteEntry) ToVPCRouteEntryOutputWithContext(ctx context.Context) VPCRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouteEntryOutput)
}

// VPCRouteEntryArrayInput is an input type that accepts VPCRouteEntryArray and VPCRouteEntryArrayOutput values.
// You can construct a concrete instance of `VPCRouteEntryArrayInput` via:
//
//	VPCRouteEntryArray{ VPCRouteEntryArgs{...} }
type VPCRouteEntryArrayInput interface {
	pulumi.Input

	ToVPCRouteEntryArrayOutput() VPCRouteEntryArrayOutput
	ToVPCRouteEntryArrayOutputWithContext(context.Context) VPCRouteEntryArrayOutput
}

type VPCRouteEntryArray []VPCRouteEntryInput

func (VPCRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPCRouteEntry)(nil)).Elem()
}

func (i VPCRouteEntryArray) ToVPCRouteEntryArrayOutput() VPCRouteEntryArrayOutput {
	return i.ToVPCRouteEntryArrayOutputWithContext(context.Background())
}

func (i VPCRouteEntryArray) ToVPCRouteEntryArrayOutputWithContext(ctx context.Context) VPCRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouteEntryArrayOutput)
}

// VPCRouteEntryMapInput is an input type that accepts VPCRouteEntryMap and VPCRouteEntryMapOutput values.
// You can construct a concrete instance of `VPCRouteEntryMapInput` via:
//
//	VPCRouteEntryMap{ "key": VPCRouteEntryArgs{...} }
type VPCRouteEntryMapInput interface {
	pulumi.Input

	ToVPCRouteEntryMapOutput() VPCRouteEntryMapOutput
	ToVPCRouteEntryMapOutputWithContext(context.Context) VPCRouteEntryMapOutput
}

type VPCRouteEntryMap map[string]VPCRouteEntryInput

func (VPCRouteEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPCRouteEntry)(nil)).Elem()
}

func (i VPCRouteEntryMap) ToVPCRouteEntryMapOutput() VPCRouteEntryMapOutput {
	return i.ToVPCRouteEntryMapOutputWithContext(context.Background())
}

func (i VPCRouteEntryMap) ToVPCRouteEntryMapOutputWithContext(ctx context.Context) VPCRouteEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouteEntryMapOutput)
}

type VPCRouteEntryOutput struct{ *pulumi.OutputState }

func (VPCRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCRouteEntry)(nil)).Elem()
}

func (o VPCRouteEntryOutput) ToVPCRouteEntryOutput() VPCRouteEntryOutput {
	return o
}

func (o VPCRouteEntryOutput) ToVPCRouteEntryOutputWithContext(ctx context.Context) VPCRouteEntryOutput {
	return o
}

// Description of the route entry.
func (o VPCRouteEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination network segment of the routing entry.
func (o VPCRouteEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// Next jump See `nextHops` below.
func (o VPCRouteEntryOutput) NextHops() VPCRouteEntryNextHopArrayOutput {
	return o.ApplyT(func(v *VPCRouteEntry) VPCRouteEntryNextHopArrayOutput { return v.NextHops }).(VPCRouteEntryNextHopArrayOutput)
}

// The ID of the next hop instance of the custom route entry.
func (o VPCRouteEntryOutput) NexthopId() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.NexthopId }).(pulumi.StringOutput)
}

// The type of the next hop of the custom route entry. Valid values:
// - `Instance` (default): The ECS Instance.
// - `HaVip`: a highly available virtual IP address.
// - `RouterInterface`: indicates the router interface.
// - **Network interface**: ENI.
// - `VpnGateway`: the VPN gateway.
// - `IPv6Gateway`:IPv6 gateway.
// - `NatGateway`:NAT gateway.
// - `Attachment`: The forwarding router.
// - `VpcPeer`:VPC peer connection.
// - `Ipv4Gateway`:IPv4 Gateway.
// - `GatewayEndpoint`: the gateway endpoint.
// - `Ecr`: Leased line gateway.
// - `GatewayLoadBalancerEndpoint`: The Gateway-based load balancing endpoint.
func (o VPCRouteEntryOutput) NexthopType() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.NexthopType }).(pulumi.StringOutput)
}

// The name of the route entry.
func (o VPCRouteEntryOutput) RouteEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.RouteEntryName }).(pulumi.StringOutput)
}

// Route publish status and publish target type See `routePublishTargets` below.
func (o VPCRouteEntryOutput) RoutePublishTargets() VPCRouteEntryRoutePublishTargetArrayOutput {
	return o.ApplyT(func(v *VPCRouteEntry) VPCRouteEntryRoutePublishTargetArrayOutput { return v.RoutePublishTargets }).(VPCRouteEntryRoutePublishTargetArrayOutput)
}

// Routing table ID
func (o VPCRouteEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The status of the route entry.
func (o VPCRouteEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCRouteEntry) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type VPCRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (VPCRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPCRouteEntry)(nil)).Elem()
}

func (o VPCRouteEntryArrayOutput) ToVPCRouteEntryArrayOutput() VPCRouteEntryArrayOutput {
	return o
}

func (o VPCRouteEntryArrayOutput) ToVPCRouteEntryArrayOutputWithContext(ctx context.Context) VPCRouteEntryArrayOutput {
	return o
}

func (o VPCRouteEntryArrayOutput) Index(i pulumi.IntInput) VPCRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VPCRouteEntry {
		return vs[0].([]*VPCRouteEntry)[vs[1].(int)]
	}).(VPCRouteEntryOutput)
}

type VPCRouteEntryMapOutput struct{ *pulumi.OutputState }

func (VPCRouteEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPCRouteEntry)(nil)).Elem()
}

func (o VPCRouteEntryMapOutput) ToVPCRouteEntryMapOutput() VPCRouteEntryMapOutput {
	return o
}

func (o VPCRouteEntryMapOutput) ToVPCRouteEntryMapOutputWithContext(ctx context.Context) VPCRouteEntryMapOutput {
	return o
}

func (o VPCRouteEntryMapOutput) MapIndex(k pulumi.StringInput) VPCRouteEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VPCRouteEntry {
		return vs[0].(map[string]*VPCRouteEntry)[vs[1].(string)]
	}).(VPCRouteEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPCRouteEntryInput)(nil)).Elem(), &VPCRouteEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCRouteEntryArrayInput)(nil)).Elem(), VPCRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCRouteEntryMapInput)(nil)).Elem(), VPCRouteEntryMap{})
	pulumi.RegisterOutputType(VPCRouteEntryOutput{})
	pulumi.RegisterOutputType(VPCRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(VPCRouteEntryMapOutput{})
}
