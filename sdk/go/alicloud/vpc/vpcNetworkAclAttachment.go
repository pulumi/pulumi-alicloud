// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VPC Network Acl Attachment resource.
//
// For information about VPC Network Acl Attachment and how to use it, see [What is Network Acl Attachment](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/associatenetworkacl).
//
// > **NOTE:** Available in v1.193.0+.
//
// ## Import
//
// VPC Network Acl Attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:vpc/vpcNetworkAclAttachment:VpcNetworkAclAttachment example <network_acl_id>:<resource_id>
//
// ```
type VpcNetworkAclAttachment struct {
	pulumi.CustomResourceState

	// The ID of the network ACL.
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// The ID of the associated resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The type of the associated resource. Valid values: `VSwitch`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of the Network Acl Attachment.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVpcNetworkAclAttachment registers a new resource with the given unique name, arguments, and options.
func NewVpcNetworkAclAttachment(ctx *pulumi.Context,
	name string, args *VpcNetworkAclAttachmentArgs, opts ...pulumi.ResourceOption) (*VpcNetworkAclAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	var resource VpcNetworkAclAttachment
	err := ctx.RegisterResource("alicloud:vpc/vpcNetworkAclAttachment:VpcNetworkAclAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcNetworkAclAttachment gets an existing VpcNetworkAclAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcNetworkAclAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcNetworkAclAttachmentState, opts ...pulumi.ResourceOption) (*VpcNetworkAclAttachment, error) {
	var resource VpcNetworkAclAttachment
	err := ctx.ReadResource("alicloud:vpc/vpcNetworkAclAttachment:VpcNetworkAclAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcNetworkAclAttachment resources.
type vpcNetworkAclAttachmentState struct {
	// The ID of the network ACL.
	NetworkAclId *string `pulumi:"networkAclId"`
	// The ID of the associated resource.
	ResourceId *string `pulumi:"resourceId"`
	// The type of the associated resource. Valid values: `VSwitch`.
	ResourceType *string `pulumi:"resourceType"`
	// The status of the Network Acl Attachment.
	Status *string `pulumi:"status"`
}

type VpcNetworkAclAttachmentState struct {
	// The ID of the network ACL.
	NetworkAclId pulumi.StringPtrInput
	// The ID of the associated resource.
	ResourceId pulumi.StringPtrInput
	// The type of the associated resource. Valid values: `VSwitch`.
	ResourceType pulumi.StringPtrInput
	// The status of the Network Acl Attachment.
	Status pulumi.StringPtrInput
}

func (VpcNetworkAclAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNetworkAclAttachmentState)(nil)).Elem()
}

type vpcNetworkAclAttachmentArgs struct {
	// The ID of the network ACL.
	NetworkAclId string `pulumi:"networkAclId"`
	// The ID of the associated resource.
	ResourceId string `pulumi:"resourceId"`
	// The type of the associated resource. Valid values: `VSwitch`.
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a VpcNetworkAclAttachment resource.
type VpcNetworkAclAttachmentArgs struct {
	// The ID of the network ACL.
	NetworkAclId pulumi.StringInput
	// The ID of the associated resource.
	ResourceId pulumi.StringInput
	// The type of the associated resource. Valid values: `VSwitch`.
	ResourceType pulumi.StringInput
}

func (VpcNetworkAclAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNetworkAclAttachmentArgs)(nil)).Elem()
}

type VpcNetworkAclAttachmentInput interface {
	pulumi.Input

	ToVpcNetworkAclAttachmentOutput() VpcNetworkAclAttachmentOutput
	ToVpcNetworkAclAttachmentOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentOutput
}

func (*VpcNetworkAclAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcNetworkAclAttachment)(nil)).Elem()
}

func (i *VpcNetworkAclAttachment) ToVpcNetworkAclAttachmentOutput() VpcNetworkAclAttachmentOutput {
	return i.ToVpcNetworkAclAttachmentOutputWithContext(context.Background())
}

func (i *VpcNetworkAclAttachment) ToVpcNetworkAclAttachmentOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNetworkAclAttachmentOutput)
}

// VpcNetworkAclAttachmentArrayInput is an input type that accepts VpcNetworkAclAttachmentArray and VpcNetworkAclAttachmentArrayOutput values.
// You can construct a concrete instance of `VpcNetworkAclAttachmentArrayInput` via:
//
//	VpcNetworkAclAttachmentArray{ VpcNetworkAclAttachmentArgs{...} }
type VpcNetworkAclAttachmentArrayInput interface {
	pulumi.Input

	ToVpcNetworkAclAttachmentArrayOutput() VpcNetworkAclAttachmentArrayOutput
	ToVpcNetworkAclAttachmentArrayOutputWithContext(context.Context) VpcNetworkAclAttachmentArrayOutput
}

type VpcNetworkAclAttachmentArray []VpcNetworkAclAttachmentInput

func (VpcNetworkAclAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcNetworkAclAttachment)(nil)).Elem()
}

func (i VpcNetworkAclAttachmentArray) ToVpcNetworkAclAttachmentArrayOutput() VpcNetworkAclAttachmentArrayOutput {
	return i.ToVpcNetworkAclAttachmentArrayOutputWithContext(context.Background())
}

func (i VpcNetworkAclAttachmentArray) ToVpcNetworkAclAttachmentArrayOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNetworkAclAttachmentArrayOutput)
}

// VpcNetworkAclAttachmentMapInput is an input type that accepts VpcNetworkAclAttachmentMap and VpcNetworkAclAttachmentMapOutput values.
// You can construct a concrete instance of `VpcNetworkAclAttachmentMapInput` via:
//
//	VpcNetworkAclAttachmentMap{ "key": VpcNetworkAclAttachmentArgs{...} }
type VpcNetworkAclAttachmentMapInput interface {
	pulumi.Input

	ToVpcNetworkAclAttachmentMapOutput() VpcNetworkAclAttachmentMapOutput
	ToVpcNetworkAclAttachmentMapOutputWithContext(context.Context) VpcNetworkAclAttachmentMapOutput
}

type VpcNetworkAclAttachmentMap map[string]VpcNetworkAclAttachmentInput

func (VpcNetworkAclAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcNetworkAclAttachment)(nil)).Elem()
}

func (i VpcNetworkAclAttachmentMap) ToVpcNetworkAclAttachmentMapOutput() VpcNetworkAclAttachmentMapOutput {
	return i.ToVpcNetworkAclAttachmentMapOutputWithContext(context.Background())
}

func (i VpcNetworkAclAttachmentMap) ToVpcNetworkAclAttachmentMapOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNetworkAclAttachmentMapOutput)
}

type VpcNetworkAclAttachmentOutput struct{ *pulumi.OutputState }

func (VpcNetworkAclAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcNetworkAclAttachment)(nil)).Elem()
}

func (o VpcNetworkAclAttachmentOutput) ToVpcNetworkAclAttachmentOutput() VpcNetworkAclAttachmentOutput {
	return o
}

func (o VpcNetworkAclAttachmentOutput) ToVpcNetworkAclAttachmentOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentOutput {
	return o
}

// The ID of the network ACL.
func (o VpcNetworkAclAttachmentOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNetworkAclAttachment) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// The ID of the associated resource.
func (o VpcNetworkAclAttachmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNetworkAclAttachment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of the associated resource. Valid values: `VSwitch`.
func (o VpcNetworkAclAttachmentOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNetworkAclAttachment) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of the Network Acl Attachment.
func (o VpcNetworkAclAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNetworkAclAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type VpcNetworkAclAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VpcNetworkAclAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcNetworkAclAttachment)(nil)).Elem()
}

func (o VpcNetworkAclAttachmentArrayOutput) ToVpcNetworkAclAttachmentArrayOutput() VpcNetworkAclAttachmentArrayOutput {
	return o
}

func (o VpcNetworkAclAttachmentArrayOutput) ToVpcNetworkAclAttachmentArrayOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentArrayOutput {
	return o
}

func (o VpcNetworkAclAttachmentArrayOutput) Index(i pulumi.IntInput) VpcNetworkAclAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcNetworkAclAttachment {
		return vs[0].([]*VpcNetworkAclAttachment)[vs[1].(int)]
	}).(VpcNetworkAclAttachmentOutput)
}

type VpcNetworkAclAttachmentMapOutput struct{ *pulumi.OutputState }

func (VpcNetworkAclAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcNetworkAclAttachment)(nil)).Elem()
}

func (o VpcNetworkAclAttachmentMapOutput) ToVpcNetworkAclAttachmentMapOutput() VpcNetworkAclAttachmentMapOutput {
	return o
}

func (o VpcNetworkAclAttachmentMapOutput) ToVpcNetworkAclAttachmentMapOutputWithContext(ctx context.Context) VpcNetworkAclAttachmentMapOutput {
	return o
}

func (o VpcNetworkAclAttachmentMapOutput) MapIndex(k pulumi.StringInput) VpcNetworkAclAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcNetworkAclAttachment {
		return vs[0].(map[string]*VpcNetworkAclAttachment)[vs[1].(string)]
	}).(VpcNetworkAclAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNetworkAclAttachmentInput)(nil)).Elem(), &VpcNetworkAclAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNetworkAclAttachmentArrayInput)(nil)).Elem(), VpcNetworkAclAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNetworkAclAttachmentMapInput)(nil)).Elem(), VpcNetworkAclAttachmentMap{})
	pulumi.RegisterOutputType(VpcNetworkAclAttachmentOutput{})
	pulumi.RegisterOutputType(VpcNetworkAclAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VpcNetworkAclAttachmentMapOutput{})
}
