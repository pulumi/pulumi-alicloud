// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vpc Ipam Ipam Pool Cidr resource.
//
// Ipam address pool preset CIDR.
//
// For information about Vpc Ipam Ipam Pool Cidr and how to use it, see [What is Ipam Pool Cidr](https://next.api.alibabacloud.com/document/VpcIpam/2023-02-28/AddIpamPoolCidr).
//
// > **NOTE:** Available since v1.234.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultIpam, err := vpc.NewIpamIpam(ctx, "defaultIpam", &vpc.IpamIpamArgs{
//				OperatingRegionLists: pulumi.StringArray{
//					pulumi.String("cn-hangzhou"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultIpamPool, err := vpc.NewIpamIpamPool(ctx, "defaultIpamPool", &vpc.IpamIpamPoolArgs{
//				IpamScopeId:  defaultIpam.PrivateDefaultScopeId,
//				PoolRegionId: defaultIpam.RegionId,
//				IpVersion:    pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewIpamIpamPoolCidr(ctx, "default", &vpc.IpamIpamPoolCidrArgs{
//				Cidr:       pulumi.String("10.0.0.0/8"),
//				IpamPoolId: defaultIpamPool.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Vpc Ipam Ipam Pool Cidr can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpc/ipamIpamPoolCidr:IpamIpamPoolCidr example <ipam_pool_id>:<cidr>
// ```
type IpamIpamPoolCidr struct {
	pulumi.CustomResourceState

	// The CIDR address segment to be preset.
	//
	// > **NOTE:**  currently, only IPv4 address segments are supported.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The ID of the IPAM pool instance.
	IpamPoolId pulumi.StringOutput `pulumi:"ipamPoolId"`
	// The status of the resource
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewIpamIpamPoolCidr registers a new resource with the given unique name, arguments, and options.
func NewIpamIpamPoolCidr(ctx *pulumi.Context,
	name string, args *IpamIpamPoolCidrArgs, opts ...pulumi.ResourceOption) (*IpamIpamPoolCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamIpamPoolCidr
	err := ctx.RegisterResource("alicloud:vpc/ipamIpamPoolCidr:IpamIpamPoolCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamIpamPoolCidr gets an existing IpamIpamPoolCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamIpamPoolCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamIpamPoolCidrState, opts ...pulumi.ResourceOption) (*IpamIpamPoolCidr, error) {
	var resource IpamIpamPoolCidr
	err := ctx.ReadResource("alicloud:vpc/ipamIpamPoolCidr:IpamIpamPoolCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamIpamPoolCidr resources.
type ipamIpamPoolCidrState struct {
	// The CIDR address segment to be preset.
	//
	// > **NOTE:**  currently, only IPv4 address segments are supported.
	Cidr *string `pulumi:"cidr"`
	// The ID of the IPAM pool instance.
	IpamPoolId *string `pulumi:"ipamPoolId"`
	// The status of the resource
	Status *string `pulumi:"status"`
}

type IpamIpamPoolCidrState struct {
	// The CIDR address segment to be preset.
	//
	// > **NOTE:**  currently, only IPv4 address segments are supported.
	Cidr pulumi.StringPtrInput
	// The ID of the IPAM pool instance.
	IpamPoolId pulumi.StringPtrInput
	// The status of the resource
	Status pulumi.StringPtrInput
}

func (IpamIpamPoolCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpamPoolCidrState)(nil)).Elem()
}

type ipamIpamPoolCidrArgs struct {
	// The CIDR address segment to be preset.
	//
	// > **NOTE:**  currently, only IPv4 address segments are supported.
	Cidr string `pulumi:"cidr"`
	// The ID of the IPAM pool instance.
	IpamPoolId string `pulumi:"ipamPoolId"`
}

// The set of arguments for constructing a IpamIpamPoolCidr resource.
type IpamIpamPoolCidrArgs struct {
	// The CIDR address segment to be preset.
	//
	// > **NOTE:**  currently, only IPv4 address segments are supported.
	Cidr pulumi.StringInput
	// The ID of the IPAM pool instance.
	IpamPoolId pulumi.StringInput
}

func (IpamIpamPoolCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpamPoolCidrArgs)(nil)).Elem()
}

type IpamIpamPoolCidrInput interface {
	pulumi.Input

	ToIpamIpamPoolCidrOutput() IpamIpamPoolCidrOutput
	ToIpamIpamPoolCidrOutputWithContext(ctx context.Context) IpamIpamPoolCidrOutput
}

func (*IpamIpamPoolCidr) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIpamPoolCidr)(nil)).Elem()
}

func (i *IpamIpamPoolCidr) ToIpamIpamPoolCidrOutput() IpamIpamPoolCidrOutput {
	return i.ToIpamIpamPoolCidrOutputWithContext(context.Background())
}

func (i *IpamIpamPoolCidr) ToIpamIpamPoolCidrOutputWithContext(ctx context.Context) IpamIpamPoolCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamPoolCidrOutput)
}

// IpamIpamPoolCidrArrayInput is an input type that accepts IpamIpamPoolCidrArray and IpamIpamPoolCidrArrayOutput values.
// You can construct a concrete instance of `IpamIpamPoolCidrArrayInput` via:
//
//	IpamIpamPoolCidrArray{ IpamIpamPoolCidrArgs{...} }
type IpamIpamPoolCidrArrayInput interface {
	pulumi.Input

	ToIpamIpamPoolCidrArrayOutput() IpamIpamPoolCidrArrayOutput
	ToIpamIpamPoolCidrArrayOutputWithContext(context.Context) IpamIpamPoolCidrArrayOutput
}

type IpamIpamPoolCidrArray []IpamIpamPoolCidrInput

func (IpamIpamPoolCidrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIpamPoolCidr)(nil)).Elem()
}

func (i IpamIpamPoolCidrArray) ToIpamIpamPoolCidrArrayOutput() IpamIpamPoolCidrArrayOutput {
	return i.ToIpamIpamPoolCidrArrayOutputWithContext(context.Background())
}

func (i IpamIpamPoolCidrArray) ToIpamIpamPoolCidrArrayOutputWithContext(ctx context.Context) IpamIpamPoolCidrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamPoolCidrArrayOutput)
}

// IpamIpamPoolCidrMapInput is an input type that accepts IpamIpamPoolCidrMap and IpamIpamPoolCidrMapOutput values.
// You can construct a concrete instance of `IpamIpamPoolCidrMapInput` via:
//
//	IpamIpamPoolCidrMap{ "key": IpamIpamPoolCidrArgs{...} }
type IpamIpamPoolCidrMapInput interface {
	pulumi.Input

	ToIpamIpamPoolCidrMapOutput() IpamIpamPoolCidrMapOutput
	ToIpamIpamPoolCidrMapOutputWithContext(context.Context) IpamIpamPoolCidrMapOutput
}

type IpamIpamPoolCidrMap map[string]IpamIpamPoolCidrInput

func (IpamIpamPoolCidrMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIpamPoolCidr)(nil)).Elem()
}

func (i IpamIpamPoolCidrMap) ToIpamIpamPoolCidrMapOutput() IpamIpamPoolCidrMapOutput {
	return i.ToIpamIpamPoolCidrMapOutputWithContext(context.Background())
}

func (i IpamIpamPoolCidrMap) ToIpamIpamPoolCidrMapOutputWithContext(ctx context.Context) IpamIpamPoolCidrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamPoolCidrMapOutput)
}

type IpamIpamPoolCidrOutput struct{ *pulumi.OutputState }

func (IpamIpamPoolCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIpamPoolCidr)(nil)).Elem()
}

func (o IpamIpamPoolCidrOutput) ToIpamIpamPoolCidrOutput() IpamIpamPoolCidrOutput {
	return o
}

func (o IpamIpamPoolCidrOutput) ToIpamIpamPoolCidrOutputWithContext(ctx context.Context) IpamIpamPoolCidrOutput {
	return o
}

// The CIDR address segment to be preset.
//
// > **NOTE:**  currently, only IPv4 address segments are supported.
func (o IpamIpamPoolCidrOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamPoolCidr) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// The ID of the IPAM pool instance.
func (o IpamIpamPoolCidrOutput) IpamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamPoolCidr) pulumi.StringOutput { return v.IpamPoolId }).(pulumi.StringOutput)
}

// The status of the resource
func (o IpamIpamPoolCidrOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamPoolCidr) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type IpamIpamPoolCidrArrayOutput struct{ *pulumi.OutputState }

func (IpamIpamPoolCidrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIpamPoolCidr)(nil)).Elem()
}

func (o IpamIpamPoolCidrArrayOutput) ToIpamIpamPoolCidrArrayOutput() IpamIpamPoolCidrArrayOutput {
	return o
}

func (o IpamIpamPoolCidrArrayOutput) ToIpamIpamPoolCidrArrayOutputWithContext(ctx context.Context) IpamIpamPoolCidrArrayOutput {
	return o
}

func (o IpamIpamPoolCidrArrayOutput) Index(i pulumi.IntInput) IpamIpamPoolCidrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpamIpamPoolCidr {
		return vs[0].([]*IpamIpamPoolCidr)[vs[1].(int)]
	}).(IpamIpamPoolCidrOutput)
}

type IpamIpamPoolCidrMapOutput struct{ *pulumi.OutputState }

func (IpamIpamPoolCidrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIpamPoolCidr)(nil)).Elem()
}

func (o IpamIpamPoolCidrMapOutput) ToIpamIpamPoolCidrMapOutput() IpamIpamPoolCidrMapOutput {
	return o
}

func (o IpamIpamPoolCidrMapOutput) ToIpamIpamPoolCidrMapOutputWithContext(ctx context.Context) IpamIpamPoolCidrMapOutput {
	return o
}

func (o IpamIpamPoolCidrMapOutput) MapIndex(k pulumi.StringInput) IpamIpamPoolCidrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpamIpamPoolCidr {
		return vs[0].(map[string]*IpamIpamPoolCidr)[vs[1].(string)]
	}).(IpamIpamPoolCidrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamPoolCidrInput)(nil)).Elem(), &IpamIpamPoolCidr{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamPoolCidrArrayInput)(nil)).Elem(), IpamIpamPoolCidrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamPoolCidrMapInput)(nil)).Elem(), IpamIpamPoolCidrMap{})
	pulumi.RegisterOutputType(IpamIpamPoolCidrOutput{})
	pulumi.RegisterOutputType(IpamIpamPoolCidrArrayOutput{})
	pulumi.RegisterOutputType(IpamIpamPoolCidrMapOutput{})
}
