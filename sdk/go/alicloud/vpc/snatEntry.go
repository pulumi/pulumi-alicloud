// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a snat resource.
//
// ## Import
//
// Snat Entry can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:vpc/snatEntry:SnatEntry foo stb-1aece3:snat-232ce2
// ```
type SnatEntry struct {
	pulumi.CustomResourceState

	// The id of the snat entry on the server.
	SnatEntryId pulumi.StringOutput `pulumi:"snatEntryId"`
	// The name of snat entry.
	SnatEntryName pulumi.StringPtrOutput `pulumi:"snatEntryName"`
	// The SNAT ip address, the ip must along bandwidth package public ip which `vpc.NatGateway` argument `bandwidthPackages`.
	SnatIp pulumi.StringOutput `pulumi:"snatIp"`
	// The value can get from `vpc.NatGateway` Attributes "snatTableIds".
	SnatTableId pulumi.StringOutput `pulumi:"snatTableId"`
	// The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
	SourceCidr pulumi.StringPtrOutput `pulumi:"sourceCidr"`
	// The vswitch ID.
	SourceVswitchId pulumi.StringPtrOutput `pulumi:"sourceVswitchId"`
	// (Available in 1.119.1+) The status of snat entry.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewSnatEntry registers a new resource with the given unique name, arguments, and options.
func NewSnatEntry(ctx *pulumi.Context,
	name string, args *SnatEntryArgs, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SnatIp == nil {
		return nil, errors.New("invalid value for required argument 'SnatIp'")
	}
	if args.SnatTableId == nil {
		return nil, errors.New("invalid value for required argument 'SnatTableId'")
	}
	var resource SnatEntry
	err := ctx.RegisterResource("alicloud:vpc/snatEntry:SnatEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnatEntry gets an existing SnatEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnatEntryState, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	var resource SnatEntry
	err := ctx.ReadResource("alicloud:vpc/snatEntry:SnatEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnatEntry resources.
type snatEntryState struct {
	// The id of the snat entry on the server.
	SnatEntryId *string `pulumi:"snatEntryId"`
	// The name of snat entry.
	SnatEntryName *string `pulumi:"snatEntryName"`
	// The SNAT ip address, the ip must along bandwidth package public ip which `vpc.NatGateway` argument `bandwidthPackages`.
	SnatIp *string `pulumi:"snatIp"`
	// The value can get from `vpc.NatGateway` Attributes "snatTableIds".
	SnatTableId *string `pulumi:"snatTableId"`
	// The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
	SourceCidr *string `pulumi:"sourceCidr"`
	// The vswitch ID.
	SourceVswitchId *string `pulumi:"sourceVswitchId"`
	// (Available in 1.119.1+) The status of snat entry.
	Status *string `pulumi:"status"`
}

type SnatEntryState struct {
	// The id of the snat entry on the server.
	SnatEntryId pulumi.StringPtrInput
	// The name of snat entry.
	SnatEntryName pulumi.StringPtrInput
	// The SNAT ip address, the ip must along bandwidth package public ip which `vpc.NatGateway` argument `bandwidthPackages`.
	SnatIp pulumi.StringPtrInput
	// The value can get from `vpc.NatGateway` Attributes "snatTableIds".
	SnatTableId pulumi.StringPtrInput
	// The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
	SourceCidr pulumi.StringPtrInput
	// The vswitch ID.
	SourceVswitchId pulumi.StringPtrInput
	// (Available in 1.119.1+) The status of snat entry.
	Status pulumi.StringPtrInput
}

func (SnatEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryState)(nil)).Elem()
}

type snatEntryArgs struct {
	// The name of snat entry.
	SnatEntryName *string `pulumi:"snatEntryName"`
	// The SNAT ip address, the ip must along bandwidth package public ip which `vpc.NatGateway` argument `bandwidthPackages`.
	SnatIp string `pulumi:"snatIp"`
	// The value can get from `vpc.NatGateway` Attributes "snatTableIds".
	SnatTableId string `pulumi:"snatTableId"`
	// The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
	SourceCidr *string `pulumi:"sourceCidr"`
	// The vswitch ID.
	SourceVswitchId *string `pulumi:"sourceVswitchId"`
}

// The set of arguments for constructing a SnatEntry resource.
type SnatEntryArgs struct {
	// The name of snat entry.
	SnatEntryName pulumi.StringPtrInput
	// The SNAT ip address, the ip must along bandwidth package public ip which `vpc.NatGateway` argument `bandwidthPackages`.
	SnatIp pulumi.StringInput
	// The value can get from `vpc.NatGateway` Attributes "snatTableIds".
	SnatTableId pulumi.StringInput
	// The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
	SourceCidr pulumi.StringPtrInput
	// The vswitch ID.
	SourceVswitchId pulumi.StringPtrInput
}

func (SnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryArgs)(nil)).Elem()
}

type SnatEntryInput interface {
	pulumi.Input

	ToSnatEntryOutput() SnatEntryOutput
	ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput
}

func (*SnatEntry) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntry)(nil))
}

func (i *SnatEntry) ToSnatEntryOutput() SnatEntryOutput {
	return i.ToSnatEntryOutputWithContext(context.Background())
}

func (i *SnatEntry) ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryOutput)
}

func (i *SnatEntry) ToSnatEntryPtrOutput() SnatEntryPtrOutput {
	return i.ToSnatEntryPtrOutputWithContext(context.Background())
}

func (i *SnatEntry) ToSnatEntryPtrOutputWithContext(ctx context.Context) SnatEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryPtrOutput)
}

type SnatEntryPtrInput interface {
	pulumi.Input

	ToSnatEntryPtrOutput() SnatEntryPtrOutput
	ToSnatEntryPtrOutputWithContext(ctx context.Context) SnatEntryPtrOutput
}

type snatEntryPtrType SnatEntryArgs

func (*snatEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatEntry)(nil))
}

func (i *snatEntryPtrType) ToSnatEntryPtrOutput() SnatEntryPtrOutput {
	return i.ToSnatEntryPtrOutputWithContext(context.Background())
}

func (i *snatEntryPtrType) ToSnatEntryPtrOutputWithContext(ctx context.Context) SnatEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryPtrOutput)
}

// SnatEntryArrayInput is an input type that accepts SnatEntryArray and SnatEntryArrayOutput values.
// You can construct a concrete instance of `SnatEntryArrayInput` via:
//
//          SnatEntryArray{ SnatEntryArgs{...} }
type SnatEntryArrayInput interface {
	pulumi.Input

	ToSnatEntryArrayOutput() SnatEntryArrayOutput
	ToSnatEntryArrayOutputWithContext(context.Context) SnatEntryArrayOutput
}

type SnatEntryArray []SnatEntryInput

func (SnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SnatEntry)(nil))
}

func (i SnatEntryArray) ToSnatEntryArrayOutput() SnatEntryArrayOutput {
	return i.ToSnatEntryArrayOutputWithContext(context.Background())
}

func (i SnatEntryArray) ToSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryArrayOutput)
}

// SnatEntryMapInput is an input type that accepts SnatEntryMap and SnatEntryMapOutput values.
// You can construct a concrete instance of `SnatEntryMapInput` via:
//
//          SnatEntryMap{ "key": SnatEntryArgs{...} }
type SnatEntryMapInput interface {
	pulumi.Input

	ToSnatEntryMapOutput() SnatEntryMapOutput
	ToSnatEntryMapOutputWithContext(context.Context) SnatEntryMapOutput
}

type SnatEntryMap map[string]SnatEntryInput

func (SnatEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SnatEntry)(nil))
}

func (i SnatEntryMap) ToSnatEntryMapOutput() SnatEntryMapOutput {
	return i.ToSnatEntryMapOutputWithContext(context.Background())
}

func (i SnatEntryMap) ToSnatEntryMapOutputWithContext(ctx context.Context) SnatEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryMapOutput)
}

type SnatEntryOutput struct {
	*pulumi.OutputState
}

func (SnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntry)(nil))
}

func (o SnatEntryOutput) ToSnatEntryOutput() SnatEntryOutput {
	return o
}

func (o SnatEntryOutput) ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput {
	return o
}

func (o SnatEntryOutput) ToSnatEntryPtrOutput() SnatEntryPtrOutput {
	return o.ToSnatEntryPtrOutputWithContext(context.Background())
}

func (o SnatEntryOutput) ToSnatEntryPtrOutputWithContext(ctx context.Context) SnatEntryPtrOutput {
	return o.ApplyT(func(v SnatEntry) *SnatEntry {
		return &v
	}).(SnatEntryPtrOutput)
}

type SnatEntryPtrOutput struct {
	*pulumi.OutputState
}

func (SnatEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatEntry)(nil))
}

func (o SnatEntryPtrOutput) ToSnatEntryPtrOutput() SnatEntryPtrOutput {
	return o
}

func (o SnatEntryPtrOutput) ToSnatEntryPtrOutputWithContext(ctx context.Context) SnatEntryPtrOutput {
	return o
}

type SnatEntryArrayOutput struct{ *pulumi.OutputState }

func (SnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatEntry)(nil))
}

func (o SnatEntryArrayOutput) ToSnatEntryArrayOutput() SnatEntryArrayOutput {
	return o
}

func (o SnatEntryArrayOutput) ToSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntryArrayOutput {
	return o
}

func (o SnatEntryArrayOutput) Index(i pulumi.IntInput) SnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnatEntry {
		return vs[0].([]SnatEntry)[vs[1].(int)]
	}).(SnatEntryOutput)
}

type SnatEntryMapOutput struct{ *pulumi.OutputState }

func (SnatEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SnatEntry)(nil))
}

func (o SnatEntryMapOutput) ToSnatEntryMapOutput() SnatEntryMapOutput {
	return o
}

func (o SnatEntryMapOutput) ToSnatEntryMapOutputWithContext(ctx context.Context) SnatEntryMapOutput {
	return o
}

func (o SnatEntryMapOutput) MapIndex(k pulumi.StringInput) SnatEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SnatEntry {
		return vs[0].(map[string]SnatEntry)[vs[1].(string)]
	}).(SnatEntryOutput)
}

func init() {
	pulumi.RegisterOutputType(SnatEntryOutput{})
	pulumi.RegisterOutputType(SnatEntryPtrOutput{})
	pulumi.RegisterOutputType(SnatEntryArrayOutput{})
	pulumi.RegisterOutputType(SnatEntryMapOutput{})
}
