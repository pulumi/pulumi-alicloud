// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// The havip can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:vpc/hAVip:HAVip foo havip-abc123456
// ```
type HAVip struct {
	pulumi.CustomResourceState

	// The description of the HaVip instance.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewHAVip registers a new resource with the given unique name, arguments, and options.
func NewHAVip(ctx *pulumi.Context,
	name string, args *HAVipArgs, opts ...pulumi.ResourceOption) (*HAVip, error) {
	if args == nil || args.VswitchId == nil {
		return nil, errors.New("missing required argument 'VswitchId'")
	}
	if args == nil {
		args = &HAVipArgs{}
	}
	var resource HAVip
	err := ctx.RegisterResource("alicloud:vpc/hAVip:HAVip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHAVip gets an existing HAVip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHAVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HAVipState, opts ...pulumi.ResourceOption) (*HAVip, error) {
	var resource HAVip
	err := ctx.ReadResource("alicloud:vpc/hAVip:HAVip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HAVip resources.
type havipState struct {
	// The description of the HaVip instance.
	Description *string `pulumi:"description"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress *string `pulumi:"ipAddress"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId *string `pulumi:"vswitchId"`
}

type HAVipState struct {
	// The description of the HaVip instance.
	Description pulumi.StringPtrInput
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringPtrInput
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringPtrInput
}

func (HAVipState) ElementType() reflect.Type {
	return reflect.TypeOf((*havipState)(nil)).Elem()
}

type havipArgs struct {
	// The description of the HaVip instance.
	Description *string `pulumi:"description"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress *string `pulumi:"ipAddress"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a HAVip resource.
type HAVipArgs struct {
	// The description of the HaVip instance.
	Description pulumi.StringPtrInput
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringPtrInput
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringInput
}

func (HAVipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*havipArgs)(nil)).Elem()
}

type HAVipInput interface {
	pulumi.Input

	ToHAVipOutput() HAVipOutput
	ToHAVipOutputWithContext(ctx context.Context) HAVipOutput
}

func (HAVip) ElementType() reflect.Type {
	return reflect.TypeOf((*HAVip)(nil)).Elem()
}

func (i HAVip) ToHAVipOutput() HAVipOutput {
	return i.ToHAVipOutputWithContext(context.Background())
}

func (i HAVip) ToHAVipOutputWithContext(ctx context.Context) HAVipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipOutput)
}

type HAVipOutput struct {
	*pulumi.OutputState
}

func (HAVipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HAVipOutput)(nil)).Elem()
}

func (o HAVipOutput) ToHAVipOutput() HAVipOutput {
	return o
}

func (o HAVipOutput) ToHAVipOutputWithContext(ctx context.Context) HAVipOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HAVipOutput{})
}
