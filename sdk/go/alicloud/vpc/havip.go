// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// The havip can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:vpc/hAVip:HAVip foo havip-abc123456
// ```
type HAVip struct {
	pulumi.CustomResourceState

	// The description of the HaVip instance.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the HaVip instance.
	HavipName pulumi.StringPtrOutput `pulumi:"havipName"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// (Available in v1.120.0+) The status of the HaVip instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewHAVip registers a new resource with the given unique name, arguments, and options.
func NewHAVip(ctx *pulumi.Context,
	name string, args *HAVipArgs, opts ...pulumi.ResourceOption) (*HAVip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	var resource HAVip
	err := ctx.RegisterResource("alicloud:vpc/hAVip:HAVip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHAVip gets an existing HAVip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHAVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HAVipState, opts ...pulumi.ResourceOption) (*HAVip, error) {
	var resource HAVip
	err := ctx.ReadResource("alicloud:vpc/hAVip:HAVip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HAVip resources.
type havipState struct {
	// The description of the HaVip instance.
	Description *string `pulumi:"description"`
	// The name of the HaVip instance.
	HavipName *string `pulumi:"havipName"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress *string `pulumi:"ipAddress"`
	// (Available in v1.120.0+) The status of the HaVip instance.
	Status *string `pulumi:"status"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId *string `pulumi:"vswitchId"`
}

type HAVipState struct {
	// The description of the HaVip instance.
	Description pulumi.StringPtrInput
	// The name of the HaVip instance.
	HavipName pulumi.StringPtrInput
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringPtrInput
	// (Available in v1.120.0+) The status of the HaVip instance.
	Status pulumi.StringPtrInput
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringPtrInput
}

func (HAVipState) ElementType() reflect.Type {
	return reflect.TypeOf((*havipState)(nil)).Elem()
}

type havipArgs struct {
	// The description of the HaVip instance.
	Description *string `pulumi:"description"`
	// The name of the HaVip instance.
	HavipName *string `pulumi:"havipName"`
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress *string `pulumi:"ipAddress"`
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a HAVip resource.
type HAVipArgs struct {
	// The description of the HaVip instance.
	Description pulumi.StringPtrInput
	// The name of the HaVip instance.
	HavipName pulumi.StringPtrInput
	// The ip address of the HaVip. If not filled, the default will be assigned one from the vswitch.
	IpAddress pulumi.StringPtrInput
	// The vswitchId of the HaVip, the field can't be changed.
	VswitchId pulumi.StringInput
}

func (HAVipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*havipArgs)(nil)).Elem()
}

type HAVipInput interface {
	pulumi.Input

	ToHAVipOutput() HAVipOutput
	ToHAVipOutputWithContext(ctx context.Context) HAVipOutput
}

func (*HAVip) ElementType() reflect.Type {
	return reflect.TypeOf((*HAVip)(nil))
}

func (i *HAVip) ToHAVipOutput() HAVipOutput {
	return i.ToHAVipOutputWithContext(context.Background())
}

func (i *HAVip) ToHAVipOutputWithContext(ctx context.Context) HAVipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipOutput)
}

func (i *HAVip) ToHAVipPtrOutput() HAVipPtrOutput {
	return i.ToHAVipPtrOutputWithContext(context.Background())
}

func (i *HAVip) ToHAVipPtrOutputWithContext(ctx context.Context) HAVipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipPtrOutput)
}

type HAVipPtrInput interface {
	pulumi.Input

	ToHAVipPtrOutput() HAVipPtrOutput
	ToHAVipPtrOutputWithContext(ctx context.Context) HAVipPtrOutput
}

type havipPtrType HAVipArgs

func (*havipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HAVip)(nil))
}

func (i *havipPtrType) ToHAVipPtrOutput() HAVipPtrOutput {
	return i.ToHAVipPtrOutputWithContext(context.Background())
}

func (i *havipPtrType) ToHAVipPtrOutputWithContext(ctx context.Context) HAVipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipPtrOutput)
}

// HAVipArrayInput is an input type that accepts HAVipArray and HAVipArrayOutput values.
// You can construct a concrete instance of `HAVipArrayInput` via:
//
//          HAVipArray{ HAVipArgs{...} }
type HAVipArrayInput interface {
	pulumi.Input

	ToHAVipArrayOutput() HAVipArrayOutput
	ToHAVipArrayOutputWithContext(context.Context) HAVipArrayOutput
}

type HAVipArray []HAVipInput

func (HAVipArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*HAVip)(nil))
}

func (i HAVipArray) ToHAVipArrayOutput() HAVipArrayOutput {
	return i.ToHAVipArrayOutputWithContext(context.Background())
}

func (i HAVipArray) ToHAVipArrayOutputWithContext(ctx context.Context) HAVipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipArrayOutput)
}

// HAVipMapInput is an input type that accepts HAVipMap and HAVipMapOutput values.
// You can construct a concrete instance of `HAVipMapInput` via:
//
//          HAVipMap{ "key": HAVipArgs{...} }
type HAVipMapInput interface {
	pulumi.Input

	ToHAVipMapOutput() HAVipMapOutput
	ToHAVipMapOutputWithContext(context.Context) HAVipMapOutput
}

type HAVipMap map[string]HAVipInput

func (HAVipMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*HAVip)(nil))
}

func (i HAVipMap) ToHAVipMapOutput() HAVipMapOutput {
	return i.ToHAVipMapOutputWithContext(context.Background())
}

func (i HAVipMap) ToHAVipMapOutputWithContext(ctx context.Context) HAVipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HAVipMapOutput)
}

type HAVipOutput struct {
	*pulumi.OutputState
}

func (HAVipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HAVip)(nil))
}

func (o HAVipOutput) ToHAVipOutput() HAVipOutput {
	return o
}

func (o HAVipOutput) ToHAVipOutputWithContext(ctx context.Context) HAVipOutput {
	return o
}

func (o HAVipOutput) ToHAVipPtrOutput() HAVipPtrOutput {
	return o.ToHAVipPtrOutputWithContext(context.Background())
}

func (o HAVipOutput) ToHAVipPtrOutputWithContext(ctx context.Context) HAVipPtrOutput {
	return o.ApplyT(func(v HAVip) *HAVip {
		return &v
	}).(HAVipPtrOutput)
}

type HAVipPtrOutput struct {
	*pulumi.OutputState
}

func (HAVipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HAVip)(nil))
}

func (o HAVipPtrOutput) ToHAVipPtrOutput() HAVipPtrOutput {
	return o
}

func (o HAVipPtrOutput) ToHAVipPtrOutputWithContext(ctx context.Context) HAVipPtrOutput {
	return o
}

type HAVipArrayOutput struct{ *pulumi.OutputState }

func (HAVipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HAVip)(nil))
}

func (o HAVipArrayOutput) ToHAVipArrayOutput() HAVipArrayOutput {
	return o
}

func (o HAVipArrayOutput) ToHAVipArrayOutputWithContext(ctx context.Context) HAVipArrayOutput {
	return o
}

func (o HAVipArrayOutput) Index(i pulumi.IntInput) HAVipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HAVip {
		return vs[0].([]HAVip)[vs[1].(int)]
	}).(HAVipOutput)
}

type HAVipMapOutput struct{ *pulumi.OutputState }

func (HAVipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HAVip)(nil))
}

func (o HAVipMapOutput) ToHAVipMapOutput() HAVipMapOutput {
	return o
}

func (o HAVipMapOutput) ToHAVipMapOutputWithContext(ctx context.Context) HAVipMapOutput {
	return o
}

func (o HAVipMapOutput) MapIndex(k pulumi.StringInput) HAVipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HAVip {
		return vs[0].(map[string]HAVip)[vs[1].(string)]
	}).(HAVipOutput)
}

func init() {
	pulumi.RegisterOutputType(HAVipOutput{})
	pulumi.RegisterOutputType(HAVipPtrOutput{})
	pulumi.RegisterOutputType(HAVipArrayOutput{})
	pulumi.RegisterOutputType(HAVipMapOutput{})
}
