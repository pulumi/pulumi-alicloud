// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NatGatewayBandwidthPackage struct {
	Bandwidth         int     `pulumi:"bandwidth"`
	IpCount           int     `pulumi:"ipCount"`
	PublicIpAddresses *string `pulumi:"publicIpAddresses"`
	Zone              *string `pulumi:"zone"`
}

// NatGatewayBandwidthPackageInput is an input type that accepts NatGatewayBandwidthPackageArgs and NatGatewayBandwidthPackageOutput values.
// You can construct a concrete instance of `NatGatewayBandwidthPackageInput` via:
//
//          NatGatewayBandwidthPackageArgs{...}
type NatGatewayBandwidthPackageInput interface {
	pulumi.Input

	ToNatGatewayBandwidthPackageOutput() NatGatewayBandwidthPackageOutput
	ToNatGatewayBandwidthPackageOutputWithContext(context.Context) NatGatewayBandwidthPackageOutput
}

type NatGatewayBandwidthPackageArgs struct {
	Bandwidth         pulumi.IntInput       `pulumi:"bandwidth"`
	IpCount           pulumi.IntInput       `pulumi:"ipCount"`
	PublicIpAddresses pulumi.StringPtrInput `pulumi:"publicIpAddresses"`
	Zone              pulumi.StringPtrInput `pulumi:"zone"`
}

func (NatGatewayBandwidthPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NatGatewayBandwidthPackage)(nil)).Elem()
}

func (i NatGatewayBandwidthPackageArgs) ToNatGatewayBandwidthPackageOutput() NatGatewayBandwidthPackageOutput {
	return i.ToNatGatewayBandwidthPackageOutputWithContext(context.Background())
}

func (i NatGatewayBandwidthPackageArgs) ToNatGatewayBandwidthPackageOutputWithContext(ctx context.Context) NatGatewayBandwidthPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayBandwidthPackageOutput)
}

// NatGatewayBandwidthPackageArrayInput is an input type that accepts NatGatewayBandwidthPackageArray and NatGatewayBandwidthPackageArrayOutput values.
// You can construct a concrete instance of `NatGatewayBandwidthPackageArrayInput` via:
//
//          NatGatewayBandwidthPackageArray{ NatGatewayBandwidthPackageArgs{...} }
type NatGatewayBandwidthPackageArrayInput interface {
	pulumi.Input

	ToNatGatewayBandwidthPackageArrayOutput() NatGatewayBandwidthPackageArrayOutput
	ToNatGatewayBandwidthPackageArrayOutputWithContext(context.Context) NatGatewayBandwidthPackageArrayOutput
}

type NatGatewayBandwidthPackageArray []NatGatewayBandwidthPackageInput

func (NatGatewayBandwidthPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NatGatewayBandwidthPackage)(nil)).Elem()
}

func (i NatGatewayBandwidthPackageArray) ToNatGatewayBandwidthPackageArrayOutput() NatGatewayBandwidthPackageArrayOutput {
	return i.ToNatGatewayBandwidthPackageArrayOutputWithContext(context.Background())
}

func (i NatGatewayBandwidthPackageArray) ToNatGatewayBandwidthPackageArrayOutputWithContext(ctx context.Context) NatGatewayBandwidthPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayBandwidthPackageArrayOutput)
}

type NatGatewayBandwidthPackageOutput struct{ *pulumi.OutputState }

func (NatGatewayBandwidthPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NatGatewayBandwidthPackage)(nil)).Elem()
}

func (o NatGatewayBandwidthPackageOutput) ToNatGatewayBandwidthPackageOutput() NatGatewayBandwidthPackageOutput {
	return o
}

func (o NatGatewayBandwidthPackageOutput) ToNatGatewayBandwidthPackageOutputWithContext(ctx context.Context) NatGatewayBandwidthPackageOutput {
	return o
}

func (o NatGatewayBandwidthPackageOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v NatGatewayBandwidthPackage) int { return v.Bandwidth }).(pulumi.IntOutput)
}

func (o NatGatewayBandwidthPackageOutput) IpCount() pulumi.IntOutput {
	return o.ApplyT(func(v NatGatewayBandwidthPackage) int { return v.IpCount }).(pulumi.IntOutput)
}

func (o NatGatewayBandwidthPackageOutput) PublicIpAddresses() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NatGatewayBandwidthPackage) *string { return v.PublicIpAddresses }).(pulumi.StringPtrOutput)
}

func (o NatGatewayBandwidthPackageOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NatGatewayBandwidthPackage) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type NatGatewayBandwidthPackageArrayOutput struct{ *pulumi.OutputState }

func (NatGatewayBandwidthPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NatGatewayBandwidthPackage)(nil)).Elem()
}

func (o NatGatewayBandwidthPackageArrayOutput) ToNatGatewayBandwidthPackageArrayOutput() NatGatewayBandwidthPackageArrayOutput {
	return o
}

func (o NatGatewayBandwidthPackageArrayOutput) ToNatGatewayBandwidthPackageArrayOutputWithContext(ctx context.Context) NatGatewayBandwidthPackageArrayOutput {
	return o
}

func (o NatGatewayBandwidthPackageArrayOutput) Index(i pulumi.IntInput) NatGatewayBandwidthPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NatGatewayBandwidthPackage {
		return vs[0].([]NatGatewayBandwidthPackage)[vs[1].(int)]
	}).(NatGatewayBandwidthPackageOutput)
}

type NetworkAclAttachmentResource struct {
	// The resource id that the network acl will associate with.
	ResourceId string `pulumi:"resourceId"`
	// The resource id that the network acl will associate with. Only support `VSwitch` now.
	ResourceType string `pulumi:"resourceType"`
}

// NetworkAclAttachmentResourceInput is an input type that accepts NetworkAclAttachmentResourceArgs and NetworkAclAttachmentResourceOutput values.
// You can construct a concrete instance of `NetworkAclAttachmentResourceInput` via:
//
//          NetworkAclAttachmentResourceArgs{...}
type NetworkAclAttachmentResourceInput interface {
	pulumi.Input

	ToNetworkAclAttachmentResourceOutput() NetworkAclAttachmentResourceOutput
	ToNetworkAclAttachmentResourceOutputWithContext(context.Context) NetworkAclAttachmentResourceOutput
}

type NetworkAclAttachmentResourceArgs struct {
	// The resource id that the network acl will associate with.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The resource id that the network acl will associate with. Only support `VSwitch` now.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (NetworkAclAttachmentResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclAttachmentResource)(nil)).Elem()
}

func (i NetworkAclAttachmentResourceArgs) ToNetworkAclAttachmentResourceOutput() NetworkAclAttachmentResourceOutput {
	return i.ToNetworkAclAttachmentResourceOutputWithContext(context.Background())
}

func (i NetworkAclAttachmentResourceArgs) ToNetworkAclAttachmentResourceOutputWithContext(ctx context.Context) NetworkAclAttachmentResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAttachmentResourceOutput)
}

// NetworkAclAttachmentResourceArrayInput is an input type that accepts NetworkAclAttachmentResourceArray and NetworkAclAttachmentResourceArrayOutput values.
// You can construct a concrete instance of `NetworkAclAttachmentResourceArrayInput` via:
//
//          NetworkAclAttachmentResourceArray{ NetworkAclAttachmentResourceArgs{...} }
type NetworkAclAttachmentResourceArrayInput interface {
	pulumi.Input

	ToNetworkAclAttachmentResourceArrayOutput() NetworkAclAttachmentResourceArrayOutput
	ToNetworkAclAttachmentResourceArrayOutputWithContext(context.Context) NetworkAclAttachmentResourceArrayOutput
}

type NetworkAclAttachmentResourceArray []NetworkAclAttachmentResourceInput

func (NetworkAclAttachmentResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclAttachmentResource)(nil)).Elem()
}

func (i NetworkAclAttachmentResourceArray) ToNetworkAclAttachmentResourceArrayOutput() NetworkAclAttachmentResourceArrayOutput {
	return i.ToNetworkAclAttachmentResourceArrayOutputWithContext(context.Background())
}

func (i NetworkAclAttachmentResourceArray) ToNetworkAclAttachmentResourceArrayOutputWithContext(ctx context.Context) NetworkAclAttachmentResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAttachmentResourceArrayOutput)
}

type NetworkAclAttachmentResourceOutput struct{ *pulumi.OutputState }

func (NetworkAclAttachmentResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclAttachmentResource)(nil)).Elem()
}

func (o NetworkAclAttachmentResourceOutput) ToNetworkAclAttachmentResourceOutput() NetworkAclAttachmentResourceOutput {
	return o
}

func (o NetworkAclAttachmentResourceOutput) ToNetworkAclAttachmentResourceOutputWithContext(ctx context.Context) NetworkAclAttachmentResourceOutput {
	return o
}

// The resource id that the network acl will associate with.
func (o NetworkAclAttachmentResourceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAclAttachmentResource) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The resource id that the network acl will associate with. Only support `VSwitch` now.
func (o NetworkAclAttachmentResourceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAclAttachmentResource) string { return v.ResourceType }).(pulumi.StringOutput)
}

type NetworkAclAttachmentResourceArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclAttachmentResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclAttachmentResource)(nil)).Elem()
}

func (o NetworkAclAttachmentResourceArrayOutput) ToNetworkAclAttachmentResourceArrayOutput() NetworkAclAttachmentResourceArrayOutput {
	return o
}

func (o NetworkAclAttachmentResourceArrayOutput) ToNetworkAclAttachmentResourceArrayOutputWithContext(ctx context.Context) NetworkAclAttachmentResourceArrayOutput {
	return o
}

func (o NetworkAclAttachmentResourceArrayOutput) Index(i pulumi.IntInput) NetworkAclAttachmentResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclAttachmentResource {
		return vs[0].([]NetworkAclAttachmentResource)[vs[1].(int)]
	}).(NetworkAclAttachmentResourceOutput)
}

type NetworkAclEntriesEgress struct {
	// The description of the egress entry.
	Description *string `pulumi:"description"`
	// The destination ip of the egress entry.
	DestinationCidrIp *string `pulumi:"destinationCidrIp"`
	// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
	EntryType *string `pulumi:"entryType"`
	// The name of the egress entry.
	Name *string `pulumi:"name"`
	// The policy of the egress entry. It must be `accept` or `drop`.
	Policy *string `pulumi:"policy"`
	// The port of the egress entry.
	Port *string `pulumi:"port"`
	// The protocol of the egress entry.
	Protocol *string `pulumi:"protocol"`
}

// NetworkAclEntriesEgressInput is an input type that accepts NetworkAclEntriesEgressArgs and NetworkAclEntriesEgressOutput values.
// You can construct a concrete instance of `NetworkAclEntriesEgressInput` via:
//
//          NetworkAclEntriesEgressArgs{...}
type NetworkAclEntriesEgressInput interface {
	pulumi.Input

	ToNetworkAclEntriesEgressOutput() NetworkAclEntriesEgressOutput
	ToNetworkAclEntriesEgressOutputWithContext(context.Context) NetworkAclEntriesEgressOutput
}

type NetworkAclEntriesEgressArgs struct {
	// The description of the egress entry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The destination ip of the egress entry.
	DestinationCidrIp pulumi.StringPtrInput `pulumi:"destinationCidrIp"`
	// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
	EntryType pulumi.StringPtrInput `pulumi:"entryType"`
	// The name of the egress entry.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The policy of the egress entry. It must be `accept` or `drop`.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// The port of the egress entry.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The protocol of the egress entry.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkAclEntriesEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntriesEgress)(nil)).Elem()
}

func (i NetworkAclEntriesEgressArgs) ToNetworkAclEntriesEgressOutput() NetworkAclEntriesEgressOutput {
	return i.ToNetworkAclEntriesEgressOutputWithContext(context.Background())
}

func (i NetworkAclEntriesEgressArgs) ToNetworkAclEntriesEgressOutputWithContext(ctx context.Context) NetworkAclEntriesEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEntriesEgressOutput)
}

// NetworkAclEntriesEgressArrayInput is an input type that accepts NetworkAclEntriesEgressArray and NetworkAclEntriesEgressArrayOutput values.
// You can construct a concrete instance of `NetworkAclEntriesEgressArrayInput` via:
//
//          NetworkAclEntriesEgressArray{ NetworkAclEntriesEgressArgs{...} }
type NetworkAclEntriesEgressArrayInput interface {
	pulumi.Input

	ToNetworkAclEntriesEgressArrayOutput() NetworkAclEntriesEgressArrayOutput
	ToNetworkAclEntriesEgressArrayOutputWithContext(context.Context) NetworkAclEntriesEgressArrayOutput
}

type NetworkAclEntriesEgressArray []NetworkAclEntriesEgressInput

func (NetworkAclEntriesEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEntriesEgress)(nil)).Elem()
}

func (i NetworkAclEntriesEgressArray) ToNetworkAclEntriesEgressArrayOutput() NetworkAclEntriesEgressArrayOutput {
	return i.ToNetworkAclEntriesEgressArrayOutputWithContext(context.Background())
}

func (i NetworkAclEntriesEgressArray) ToNetworkAclEntriesEgressArrayOutputWithContext(ctx context.Context) NetworkAclEntriesEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEntriesEgressArrayOutput)
}

type NetworkAclEntriesEgressOutput struct{ *pulumi.OutputState }

func (NetworkAclEntriesEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntriesEgress)(nil)).Elem()
}

func (o NetworkAclEntriesEgressOutput) ToNetworkAclEntriesEgressOutput() NetworkAclEntriesEgressOutput {
	return o
}

func (o NetworkAclEntriesEgressOutput) ToNetworkAclEntriesEgressOutputWithContext(ctx context.Context) NetworkAclEntriesEgressOutput {
	return o
}

// The description of the egress entry.
func (o NetworkAclEntriesEgressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination ip of the egress entry.
func (o NetworkAclEntriesEgressOutput) DestinationCidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.DestinationCidrIp }).(pulumi.StringPtrOutput)
}

// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
func (o NetworkAclEntriesEgressOutput) EntryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.EntryType }).(pulumi.StringPtrOutput)
}

// The name of the egress entry.
func (o NetworkAclEntriesEgressOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The policy of the egress entry. It must be `accept` or `drop`.
func (o NetworkAclEntriesEgressOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// The port of the egress entry.
func (o NetworkAclEntriesEgressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The protocol of the egress entry.
func (o NetworkAclEntriesEgressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesEgress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkAclEntriesEgressArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclEntriesEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEntriesEgress)(nil)).Elem()
}

func (o NetworkAclEntriesEgressArrayOutput) ToNetworkAclEntriesEgressArrayOutput() NetworkAclEntriesEgressArrayOutput {
	return o
}

func (o NetworkAclEntriesEgressArrayOutput) ToNetworkAclEntriesEgressArrayOutputWithContext(ctx context.Context) NetworkAclEntriesEgressArrayOutput {
	return o
}

func (o NetworkAclEntriesEgressArrayOutput) Index(i pulumi.IntInput) NetworkAclEntriesEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclEntriesEgress {
		return vs[0].([]NetworkAclEntriesEgress)[vs[1].(int)]
	}).(NetworkAclEntriesEgressOutput)
}

type NetworkAclEntriesIngress struct {
	// The description of the egress entry.
	Description *string `pulumi:"description"`
	// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
	EntryType *string `pulumi:"entryType"`
	// The name of the egress entry.
	Name *string `pulumi:"name"`
	// The policy of the egress entry. It must be `accept` or `drop`.
	Policy *string `pulumi:"policy"`
	// The port of the egress entry.
	Port *string `pulumi:"port"`
	// The protocol of the egress entry.
	Protocol *string `pulumi:"protocol"`
	// The source ip of the ingress entry.
	SourceCidrIp *string `pulumi:"sourceCidrIp"`
}

// NetworkAclEntriesIngressInput is an input type that accepts NetworkAclEntriesIngressArgs and NetworkAclEntriesIngressOutput values.
// You can construct a concrete instance of `NetworkAclEntriesIngressInput` via:
//
//          NetworkAclEntriesIngressArgs{...}
type NetworkAclEntriesIngressInput interface {
	pulumi.Input

	ToNetworkAclEntriesIngressOutput() NetworkAclEntriesIngressOutput
	ToNetworkAclEntriesIngressOutputWithContext(context.Context) NetworkAclEntriesIngressOutput
}

type NetworkAclEntriesIngressArgs struct {
	// The description of the egress entry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
	EntryType pulumi.StringPtrInput `pulumi:"entryType"`
	// The name of the egress entry.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The policy of the egress entry. It must be `accept` or `drop`.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// The port of the egress entry.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The protocol of the egress entry.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The source ip of the ingress entry.
	SourceCidrIp pulumi.StringPtrInput `pulumi:"sourceCidrIp"`
}

func (NetworkAclEntriesIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntriesIngress)(nil)).Elem()
}

func (i NetworkAclEntriesIngressArgs) ToNetworkAclEntriesIngressOutput() NetworkAclEntriesIngressOutput {
	return i.ToNetworkAclEntriesIngressOutputWithContext(context.Background())
}

func (i NetworkAclEntriesIngressArgs) ToNetworkAclEntriesIngressOutputWithContext(ctx context.Context) NetworkAclEntriesIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEntriesIngressOutput)
}

// NetworkAclEntriesIngressArrayInput is an input type that accepts NetworkAclEntriesIngressArray and NetworkAclEntriesIngressArrayOutput values.
// You can construct a concrete instance of `NetworkAclEntriesIngressArrayInput` via:
//
//          NetworkAclEntriesIngressArray{ NetworkAclEntriesIngressArgs{...} }
type NetworkAclEntriesIngressArrayInput interface {
	pulumi.Input

	ToNetworkAclEntriesIngressArrayOutput() NetworkAclEntriesIngressArrayOutput
	ToNetworkAclEntriesIngressArrayOutputWithContext(context.Context) NetworkAclEntriesIngressArrayOutput
}

type NetworkAclEntriesIngressArray []NetworkAclEntriesIngressInput

func (NetworkAclEntriesIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEntriesIngress)(nil)).Elem()
}

func (i NetworkAclEntriesIngressArray) ToNetworkAclEntriesIngressArrayOutput() NetworkAclEntriesIngressArrayOutput {
	return i.ToNetworkAclEntriesIngressArrayOutputWithContext(context.Background())
}

func (i NetworkAclEntriesIngressArray) ToNetworkAclEntriesIngressArrayOutputWithContext(ctx context.Context) NetworkAclEntriesIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEntriesIngressArrayOutput)
}

type NetworkAclEntriesIngressOutput struct{ *pulumi.OutputState }

func (NetworkAclEntriesIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntriesIngress)(nil)).Elem()
}

func (o NetworkAclEntriesIngressOutput) ToNetworkAclEntriesIngressOutput() NetworkAclEntriesIngressOutput {
	return o
}

func (o NetworkAclEntriesIngressOutput) ToNetworkAclEntriesIngressOutputWithContext(ctx context.Context) NetworkAclEntriesIngressOutput {
	return o
}

// The description of the egress entry.
func (o NetworkAclEntriesIngressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
func (o NetworkAclEntriesIngressOutput) EntryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.EntryType }).(pulumi.StringPtrOutput)
}

// The name of the egress entry.
func (o NetworkAclEntriesIngressOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The policy of the egress entry. It must be `accept` or `drop`.
func (o NetworkAclEntriesIngressOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// The port of the egress entry.
func (o NetworkAclEntriesIngressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The protocol of the egress entry.
func (o NetworkAclEntriesIngressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The source ip of the ingress entry.
func (o NetworkAclEntriesIngressOutput) SourceCidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEntriesIngress) *string { return v.SourceCidrIp }).(pulumi.StringPtrOutput)
}

type NetworkAclEntriesIngressArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclEntriesIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEntriesIngress)(nil)).Elem()
}

func (o NetworkAclEntriesIngressArrayOutput) ToNetworkAclEntriesIngressArrayOutput() NetworkAclEntriesIngressArrayOutput {
	return o
}

func (o NetworkAclEntriesIngressArrayOutput) ToNetworkAclEntriesIngressArrayOutputWithContext(ctx context.Context) NetworkAclEntriesIngressArrayOutput {
	return o
}

func (o NetworkAclEntriesIngressArrayOutput) Index(i pulumi.IntInput) NetworkAclEntriesIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclEntriesIngress {
		return vs[0].([]NetworkAclEntriesIngress)[vs[1].(int)]
	}).(NetworkAclEntriesIngressOutput)
}

type GetCommonBandwidthPackagesPackage struct {
	// The peak bandwidth of the Internet Shared Bandwidth instance.
	Bandwidth string `pulumi:"bandwidth"`
	// The resource ID of bandwidth package.
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// The name of bandwidth package.
	BandwidthPackageName string `pulumi:"bandwidthPackageName"`
	// The business status of the Common Bandwidth Package instance.
	BusinessStatus string `pulumi:"businessStatus"`
	// The deletion protection of bandwidth package.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The description of the Common Bandwidth Package instance.
	Description string `pulumi:"description"`
	// The expired time of bandwidth package.
	ExpiredTime string `pulumi:"expiredTime"`
	// Is has reservation data.
	HasReservationData bool `pulumi:"hasReservationData"`
	// ID of the Common Bandwidth Package.
	Id string `pulumi:"id"`
	// The internet charge type of bandwidth package.
	InternetChargeType string `pulumi:"internetChargeType"`
	// ISP of the Common Bandwidth Package.
	Isp string `pulumi:"isp"`
	// Name of the Common Bandwidth Package.
	Name string `pulumi:"name"`
	// The payment type of bandwidth package.
	PaymentType string `pulumi:"paymentType"`
	// Public ip addresses that in the Common Bandwidth Pakcage.
	PublicIpAddresses []GetCommonBandwidthPackagesPackagePublicIpAddress `pulumi:"publicIpAddresses"`
	// The ratio of bandwidth package.
	Ratio int `pulumi:"ratio"`
	// The active time of reservation.
	ReservationActiveTime string `pulumi:"reservationActiveTime"`
	// The bandwidth of reservation.
	ReservationBandwidth string `pulumi:"reservationBandwidth"`
	// The charge type of reservation internet.
	ReservationInternetChargeType string `pulumi:"reservationInternetChargeType"`
	// The type of reservation order.
	ReservationOrderType string `pulumi:"reservationOrderType"`
	// The Id of resource group which the common bandwidth package belongs.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The service managed.
	ServiceManaged int `pulumi:"serviceManaged"`
	// The status of bandwidth package. Valid values: `Available` and `Pending`.
	Status string `pulumi:"status"`
}

// GetCommonBandwidthPackagesPackageInput is an input type that accepts GetCommonBandwidthPackagesPackageArgs and GetCommonBandwidthPackagesPackageOutput values.
// You can construct a concrete instance of `GetCommonBandwidthPackagesPackageInput` via:
//
//          GetCommonBandwidthPackagesPackageArgs{...}
type GetCommonBandwidthPackagesPackageInput interface {
	pulumi.Input

	ToGetCommonBandwidthPackagesPackageOutput() GetCommonBandwidthPackagesPackageOutput
	ToGetCommonBandwidthPackagesPackageOutputWithContext(context.Context) GetCommonBandwidthPackagesPackageOutput
}

type GetCommonBandwidthPackagesPackageArgs struct {
	// The peak bandwidth of the Internet Shared Bandwidth instance.
	Bandwidth pulumi.StringInput `pulumi:"bandwidth"`
	// The resource ID of bandwidth package.
	BandwidthPackageId pulumi.StringInput `pulumi:"bandwidthPackageId"`
	// The name of bandwidth package.
	BandwidthPackageName pulumi.StringInput `pulumi:"bandwidthPackageName"`
	// The business status of the Common Bandwidth Package instance.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The deletion protection of bandwidth package.
	DeletionProtection pulumi.BoolInput `pulumi:"deletionProtection"`
	// The description of the Common Bandwidth Package instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The expired time of bandwidth package.
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// Is has reservation data.
	HasReservationData pulumi.BoolInput `pulumi:"hasReservationData"`
	// ID of the Common Bandwidth Package.
	Id pulumi.StringInput `pulumi:"id"`
	// The internet charge type of bandwidth package.
	InternetChargeType pulumi.StringInput `pulumi:"internetChargeType"`
	// ISP of the Common Bandwidth Package.
	Isp pulumi.StringInput `pulumi:"isp"`
	// Name of the Common Bandwidth Package.
	Name pulumi.StringInput `pulumi:"name"`
	// The payment type of bandwidth package.
	PaymentType pulumi.StringInput `pulumi:"paymentType"`
	// Public ip addresses that in the Common Bandwidth Pakcage.
	PublicIpAddresses GetCommonBandwidthPackagesPackagePublicIpAddressArrayInput `pulumi:"publicIpAddresses"`
	// The ratio of bandwidth package.
	Ratio pulumi.IntInput `pulumi:"ratio"`
	// The active time of reservation.
	ReservationActiveTime pulumi.StringInput `pulumi:"reservationActiveTime"`
	// The bandwidth of reservation.
	ReservationBandwidth pulumi.StringInput `pulumi:"reservationBandwidth"`
	// The charge type of reservation internet.
	ReservationInternetChargeType pulumi.StringInput `pulumi:"reservationInternetChargeType"`
	// The type of reservation order.
	ReservationOrderType pulumi.StringInput `pulumi:"reservationOrderType"`
	// The Id of resource group which the common bandwidth package belongs.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The service managed.
	ServiceManaged pulumi.IntInput `pulumi:"serviceManaged"`
	// The status of bandwidth package. Valid values: `Available` and `Pending`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetCommonBandwidthPackagesPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommonBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetCommonBandwidthPackagesPackageArgs) ToGetCommonBandwidthPackagesPackageOutput() GetCommonBandwidthPackagesPackageOutput {
	return i.ToGetCommonBandwidthPackagesPackageOutputWithContext(context.Background())
}

func (i GetCommonBandwidthPackagesPackageArgs) ToGetCommonBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommonBandwidthPackagesPackageOutput)
}

// GetCommonBandwidthPackagesPackageArrayInput is an input type that accepts GetCommonBandwidthPackagesPackageArray and GetCommonBandwidthPackagesPackageArrayOutput values.
// You can construct a concrete instance of `GetCommonBandwidthPackagesPackageArrayInput` via:
//
//          GetCommonBandwidthPackagesPackageArray{ GetCommonBandwidthPackagesPackageArgs{...} }
type GetCommonBandwidthPackagesPackageArrayInput interface {
	pulumi.Input

	ToGetCommonBandwidthPackagesPackageArrayOutput() GetCommonBandwidthPackagesPackageArrayOutput
	ToGetCommonBandwidthPackagesPackageArrayOutputWithContext(context.Context) GetCommonBandwidthPackagesPackageArrayOutput
}

type GetCommonBandwidthPackagesPackageArray []GetCommonBandwidthPackagesPackageInput

func (GetCommonBandwidthPackagesPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommonBandwidthPackagesPackage)(nil)).Elem()
}

func (i GetCommonBandwidthPackagesPackageArray) ToGetCommonBandwidthPackagesPackageArrayOutput() GetCommonBandwidthPackagesPackageArrayOutput {
	return i.ToGetCommonBandwidthPackagesPackageArrayOutputWithContext(context.Background())
}

func (i GetCommonBandwidthPackagesPackageArray) ToGetCommonBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommonBandwidthPackagesPackageArrayOutput)
}

type GetCommonBandwidthPackagesPackageOutput struct{ *pulumi.OutputState }

func (GetCommonBandwidthPackagesPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommonBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetCommonBandwidthPackagesPackageOutput) ToGetCommonBandwidthPackagesPackageOutput() GetCommonBandwidthPackagesPackageOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackageOutput) ToGetCommonBandwidthPackagesPackageOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackageOutput {
	return o
}

// The peak bandwidth of the Internet Shared Bandwidth instance.
func (o GetCommonBandwidthPackagesPackageOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Bandwidth }).(pulumi.StringOutput)
}

// The resource ID of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// The name of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) BandwidthPackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.BandwidthPackageName }).(pulumi.StringOutput)
}

// The business status of the Common Bandwidth Package instance.
func (o GetCommonBandwidthPackagesPackageOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The deletion protection of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The description of the Common Bandwidth Package instance.
func (o GetCommonBandwidthPackagesPackageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Description }).(pulumi.StringOutput)
}

// The expired time of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// Is has reservation data.
func (o GetCommonBandwidthPackagesPackageOutput) HasReservationData() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) bool { return v.HasReservationData }).(pulumi.BoolOutput)
}

// ID of the Common Bandwidth Package.
func (o GetCommonBandwidthPackagesPackageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Id }).(pulumi.StringOutput)
}

// The internet charge type of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) InternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.InternetChargeType }).(pulumi.StringOutput)
}

// ISP of the Common Bandwidth Package.
func (o GetCommonBandwidthPackagesPackageOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Isp }).(pulumi.StringOutput)
}

// Name of the Common Bandwidth Package.
func (o GetCommonBandwidthPackagesPackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Name }).(pulumi.StringOutput)
}

// The payment type of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.PaymentType }).(pulumi.StringOutput)
}

// Public ip addresses that in the Common Bandwidth Pakcage.
func (o GetCommonBandwidthPackagesPackageOutput) PublicIpAddresses() GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) []GetCommonBandwidthPackagesPackagePublicIpAddress {
		return v.PublicIpAddresses
	}).(GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput)
}

// The ratio of bandwidth package.
func (o GetCommonBandwidthPackagesPackageOutput) Ratio() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) int { return v.Ratio }).(pulumi.IntOutput)
}

// The active time of reservation.
func (o GetCommonBandwidthPackagesPackageOutput) ReservationActiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ReservationActiveTime }).(pulumi.StringOutput)
}

// The bandwidth of reservation.
func (o GetCommonBandwidthPackagesPackageOutput) ReservationBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ReservationBandwidth }).(pulumi.StringOutput)
}

// The charge type of reservation internet.
func (o GetCommonBandwidthPackagesPackageOutput) ReservationInternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ReservationInternetChargeType }).(pulumi.StringOutput)
}

// The type of reservation order.
func (o GetCommonBandwidthPackagesPackageOutput) ReservationOrderType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ReservationOrderType }).(pulumi.StringOutput)
}

// The Id of resource group which the common bandwidth package belongs.
func (o GetCommonBandwidthPackagesPackageOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The service managed.
func (o GetCommonBandwidthPackagesPackageOutput) ServiceManaged() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) int { return v.ServiceManaged }).(pulumi.IntOutput)
}

// The status of bandwidth package. Valid values: `Available` and `Pending`.
func (o GetCommonBandwidthPackagesPackageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackage) string { return v.Status }).(pulumi.StringOutput)
}

type GetCommonBandwidthPackagesPackageArrayOutput struct{ *pulumi.OutputState }

func (GetCommonBandwidthPackagesPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommonBandwidthPackagesPackage)(nil)).Elem()
}

func (o GetCommonBandwidthPackagesPackageArrayOutput) ToGetCommonBandwidthPackagesPackageArrayOutput() GetCommonBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackageArrayOutput) ToGetCommonBandwidthPackagesPackageArrayOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackageArrayOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackageArrayOutput) Index(i pulumi.IntInput) GetCommonBandwidthPackagesPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommonBandwidthPackagesPackage {
		return vs[0].([]GetCommonBandwidthPackagesPackage)[vs[1].(int)]
	}).(GetCommonBandwidthPackagesPackageOutput)
}

type GetCommonBandwidthPackagesPackagePublicIpAddress struct {
	AllocationId                     string `pulumi:"allocationId"`
	BandwidthPackageIpRelationStatus string `pulumi:"bandwidthPackageIpRelationStatus"`
	IpAddress                        string `pulumi:"ipAddress"`
}

// GetCommonBandwidthPackagesPackagePublicIpAddressInput is an input type that accepts GetCommonBandwidthPackagesPackagePublicIpAddressArgs and GetCommonBandwidthPackagesPackagePublicIpAddressOutput values.
// You can construct a concrete instance of `GetCommonBandwidthPackagesPackagePublicIpAddressInput` via:
//
//          GetCommonBandwidthPackagesPackagePublicIpAddressArgs{...}
type GetCommonBandwidthPackagesPackagePublicIpAddressInput interface {
	pulumi.Input

	ToGetCommonBandwidthPackagesPackagePublicIpAddressOutput() GetCommonBandwidthPackagesPackagePublicIpAddressOutput
	ToGetCommonBandwidthPackagesPackagePublicIpAddressOutputWithContext(context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressOutput
}

type GetCommonBandwidthPackagesPackagePublicIpAddressArgs struct {
	AllocationId                     pulumi.StringInput `pulumi:"allocationId"`
	BandwidthPackageIpRelationStatus pulumi.StringInput `pulumi:"bandwidthPackageIpRelationStatus"`
	IpAddress                        pulumi.StringInput `pulumi:"ipAddress"`
}

func (GetCommonBandwidthPackagesPackagePublicIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommonBandwidthPackagesPackagePublicIpAddress)(nil)).Elem()
}

func (i GetCommonBandwidthPackagesPackagePublicIpAddressArgs) ToGetCommonBandwidthPackagesPackagePublicIpAddressOutput() GetCommonBandwidthPackagesPackagePublicIpAddressOutput {
	return i.ToGetCommonBandwidthPackagesPackagePublicIpAddressOutputWithContext(context.Background())
}

func (i GetCommonBandwidthPackagesPackagePublicIpAddressArgs) ToGetCommonBandwidthPackagesPackagePublicIpAddressOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommonBandwidthPackagesPackagePublicIpAddressOutput)
}

// GetCommonBandwidthPackagesPackagePublicIpAddressArrayInput is an input type that accepts GetCommonBandwidthPackagesPackagePublicIpAddressArray and GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput values.
// You can construct a concrete instance of `GetCommonBandwidthPackagesPackagePublicIpAddressArrayInput` via:
//
//          GetCommonBandwidthPackagesPackagePublicIpAddressArray{ GetCommonBandwidthPackagesPackagePublicIpAddressArgs{...} }
type GetCommonBandwidthPackagesPackagePublicIpAddressArrayInput interface {
	pulumi.Input

	ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput() GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput
	ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutputWithContext(context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput
}

type GetCommonBandwidthPackagesPackagePublicIpAddressArray []GetCommonBandwidthPackagesPackagePublicIpAddressInput

func (GetCommonBandwidthPackagesPackagePublicIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommonBandwidthPackagesPackagePublicIpAddress)(nil)).Elem()
}

func (i GetCommonBandwidthPackagesPackagePublicIpAddressArray) ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput() GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput {
	return i.ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutputWithContext(context.Background())
}

func (i GetCommonBandwidthPackagesPackagePublicIpAddressArray) ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput)
}

type GetCommonBandwidthPackagesPackagePublicIpAddressOutput struct{ *pulumi.OutputState }

func (GetCommonBandwidthPackagesPackagePublicIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommonBandwidthPackagesPackagePublicIpAddress)(nil)).Elem()
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressOutput) ToGetCommonBandwidthPackagesPackagePublicIpAddressOutput() GetCommonBandwidthPackagesPackagePublicIpAddressOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressOutput) ToGetCommonBandwidthPackagesPackagePublicIpAddressOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackagePublicIpAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressOutput) BandwidthPackageIpRelationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackagePublicIpAddress) string {
		return v.BandwidthPackageIpRelationStatus
	}).(pulumi.StringOutput)
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommonBandwidthPackagesPackagePublicIpAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

type GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput struct{ *pulumi.OutputState }

func (GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommonBandwidthPackagesPackagePublicIpAddress)(nil)).Elem()
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput) ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput() GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput) ToGetCommonBandwidthPackagesPackagePublicIpAddressArrayOutputWithContext(ctx context.Context) GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput {
	return o
}

func (o GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput) Index(i pulumi.IntInput) GetCommonBandwidthPackagesPackagePublicIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommonBandwidthPackagesPackagePublicIpAddress {
		return vs[0].([]GetCommonBandwidthPackagesPackagePublicIpAddress)[vs[1].(int)]
	}).(GetCommonBandwidthPackagesPackagePublicIpAddressOutput)
}

type GetEnhancedNatAvailableZonesZone struct {
	LocalName string `pulumi:"localName"`
	ZoneId    string `pulumi:"zoneId"`
}

// GetEnhancedNatAvailableZonesZoneInput is an input type that accepts GetEnhancedNatAvailableZonesZoneArgs and GetEnhancedNatAvailableZonesZoneOutput values.
// You can construct a concrete instance of `GetEnhancedNatAvailableZonesZoneInput` via:
//
//          GetEnhancedNatAvailableZonesZoneArgs{...}
type GetEnhancedNatAvailableZonesZoneInput interface {
	pulumi.Input

	ToGetEnhancedNatAvailableZonesZoneOutput() GetEnhancedNatAvailableZonesZoneOutput
	ToGetEnhancedNatAvailableZonesZoneOutputWithContext(context.Context) GetEnhancedNatAvailableZonesZoneOutput
}

type GetEnhancedNatAvailableZonesZoneArgs struct {
	LocalName pulumi.StringInput `pulumi:"localName"`
	ZoneId    pulumi.StringInput `pulumi:"zoneId"`
}

func (GetEnhancedNatAvailableZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnhancedNatAvailableZonesZone)(nil)).Elem()
}

func (i GetEnhancedNatAvailableZonesZoneArgs) ToGetEnhancedNatAvailableZonesZoneOutput() GetEnhancedNatAvailableZonesZoneOutput {
	return i.ToGetEnhancedNatAvailableZonesZoneOutputWithContext(context.Background())
}

func (i GetEnhancedNatAvailableZonesZoneArgs) ToGetEnhancedNatAvailableZonesZoneOutputWithContext(ctx context.Context) GetEnhancedNatAvailableZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnhancedNatAvailableZonesZoneOutput)
}

// GetEnhancedNatAvailableZonesZoneArrayInput is an input type that accepts GetEnhancedNatAvailableZonesZoneArray and GetEnhancedNatAvailableZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetEnhancedNatAvailableZonesZoneArrayInput` via:
//
//          GetEnhancedNatAvailableZonesZoneArray{ GetEnhancedNatAvailableZonesZoneArgs{...} }
type GetEnhancedNatAvailableZonesZoneArrayInput interface {
	pulumi.Input

	ToGetEnhancedNatAvailableZonesZoneArrayOutput() GetEnhancedNatAvailableZonesZoneArrayOutput
	ToGetEnhancedNatAvailableZonesZoneArrayOutputWithContext(context.Context) GetEnhancedNatAvailableZonesZoneArrayOutput
}

type GetEnhancedNatAvailableZonesZoneArray []GetEnhancedNatAvailableZonesZoneInput

func (GetEnhancedNatAvailableZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnhancedNatAvailableZonesZone)(nil)).Elem()
}

func (i GetEnhancedNatAvailableZonesZoneArray) ToGetEnhancedNatAvailableZonesZoneArrayOutput() GetEnhancedNatAvailableZonesZoneArrayOutput {
	return i.ToGetEnhancedNatAvailableZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetEnhancedNatAvailableZonesZoneArray) ToGetEnhancedNatAvailableZonesZoneArrayOutputWithContext(ctx context.Context) GetEnhancedNatAvailableZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnhancedNatAvailableZonesZoneArrayOutput)
}

type GetEnhancedNatAvailableZonesZoneOutput struct{ *pulumi.OutputState }

func (GetEnhancedNatAvailableZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnhancedNatAvailableZonesZone)(nil)).Elem()
}

func (o GetEnhancedNatAvailableZonesZoneOutput) ToGetEnhancedNatAvailableZonesZoneOutput() GetEnhancedNatAvailableZonesZoneOutput {
	return o
}

func (o GetEnhancedNatAvailableZonesZoneOutput) ToGetEnhancedNatAvailableZonesZoneOutputWithContext(ctx context.Context) GetEnhancedNatAvailableZonesZoneOutput {
	return o
}

func (o GetEnhancedNatAvailableZonesZoneOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnhancedNatAvailableZonesZone) string { return v.LocalName }).(pulumi.StringOutput)
}

func (o GetEnhancedNatAvailableZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnhancedNatAvailableZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetEnhancedNatAvailableZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetEnhancedNatAvailableZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnhancedNatAvailableZonesZone)(nil)).Elem()
}

func (o GetEnhancedNatAvailableZonesZoneArrayOutput) ToGetEnhancedNatAvailableZonesZoneArrayOutput() GetEnhancedNatAvailableZonesZoneArrayOutput {
	return o
}

func (o GetEnhancedNatAvailableZonesZoneArrayOutput) ToGetEnhancedNatAvailableZonesZoneArrayOutputWithContext(ctx context.Context) GetEnhancedNatAvailableZonesZoneArrayOutput {
	return o
}

func (o GetEnhancedNatAvailableZonesZoneArrayOutput) Index(i pulumi.IntInput) GetEnhancedNatAvailableZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEnhancedNatAvailableZonesZone {
		return vs[0].([]GetEnhancedNatAvailableZonesZone)[vs[1].(int)]
	}).(GetEnhancedNatAvailableZonesZoneOutput)
}

type GetForwardEntriesEntry struct {
	// The public IP address.
	ExternalIp string `pulumi:"externalIp"`
	// The public port.
	ExternalPort string `pulumi:"externalPort"`
	// The forward entry ID.
	ForwardEntryId string `pulumi:"forwardEntryId"`
	// The name of forward entry.
	ForwardEntryName string `pulumi:"forwardEntryName"`
	// The ID of the Forward Entry.
	Id string `pulumi:"id"`
	// The private IP address.
	InternalIp string `pulumi:"internalIp"`
	// The internal port.
	InternalPort string `pulumi:"internalPort"`
	// The ip protocol. Valid values: `any`,`tcp` and `udp`.
	IpProtocol string `pulumi:"ipProtocol"`
	// The forward entry name.
	Name string `pulumi:"name"`
	// The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
	Status string `pulumi:"status"`
}

// GetForwardEntriesEntryInput is an input type that accepts GetForwardEntriesEntryArgs and GetForwardEntriesEntryOutput values.
// You can construct a concrete instance of `GetForwardEntriesEntryInput` via:
//
//          GetForwardEntriesEntryArgs{...}
type GetForwardEntriesEntryInput interface {
	pulumi.Input

	ToGetForwardEntriesEntryOutput() GetForwardEntriesEntryOutput
	ToGetForwardEntriesEntryOutputWithContext(context.Context) GetForwardEntriesEntryOutput
}

type GetForwardEntriesEntryArgs struct {
	// The public IP address.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
	// The public port.
	ExternalPort pulumi.StringInput `pulumi:"externalPort"`
	// The forward entry ID.
	ForwardEntryId pulumi.StringInput `pulumi:"forwardEntryId"`
	// The name of forward entry.
	ForwardEntryName pulumi.StringInput `pulumi:"forwardEntryName"`
	// The ID of the Forward Entry.
	Id pulumi.StringInput `pulumi:"id"`
	// The private IP address.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
	// The internal port.
	InternalPort pulumi.StringInput `pulumi:"internalPort"`
	// The ip protocol. Valid values: `any`,`tcp` and `udp`.
	IpProtocol pulumi.StringInput `pulumi:"ipProtocol"`
	// The forward entry name.
	Name pulumi.StringInput `pulumi:"name"`
	// The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetForwardEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardEntriesEntry)(nil)).Elem()
}

func (i GetForwardEntriesEntryArgs) ToGetForwardEntriesEntryOutput() GetForwardEntriesEntryOutput {
	return i.ToGetForwardEntriesEntryOutputWithContext(context.Background())
}

func (i GetForwardEntriesEntryArgs) ToGetForwardEntriesEntryOutputWithContext(ctx context.Context) GetForwardEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardEntriesEntryOutput)
}

// GetForwardEntriesEntryArrayInput is an input type that accepts GetForwardEntriesEntryArray and GetForwardEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetForwardEntriesEntryArrayInput` via:
//
//          GetForwardEntriesEntryArray{ GetForwardEntriesEntryArgs{...} }
type GetForwardEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetForwardEntriesEntryArrayOutput() GetForwardEntriesEntryArrayOutput
	ToGetForwardEntriesEntryArrayOutputWithContext(context.Context) GetForwardEntriesEntryArrayOutput
}

type GetForwardEntriesEntryArray []GetForwardEntriesEntryInput

func (GetForwardEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardEntriesEntry)(nil)).Elem()
}

func (i GetForwardEntriesEntryArray) ToGetForwardEntriesEntryArrayOutput() GetForwardEntriesEntryArrayOutput {
	return i.ToGetForwardEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetForwardEntriesEntryArray) ToGetForwardEntriesEntryArrayOutputWithContext(ctx context.Context) GetForwardEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardEntriesEntryArrayOutput)
}

type GetForwardEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetForwardEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardEntriesEntry)(nil)).Elem()
}

func (o GetForwardEntriesEntryOutput) ToGetForwardEntriesEntryOutput() GetForwardEntriesEntryOutput {
	return o
}

func (o GetForwardEntriesEntryOutput) ToGetForwardEntriesEntryOutputWithContext(ctx context.Context) GetForwardEntriesEntryOutput {
	return o
}

// The public IP address.
func (o GetForwardEntriesEntryOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// The public port.
func (o GetForwardEntriesEntryOutput) ExternalPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.ExternalPort }).(pulumi.StringOutput)
}

// The forward entry ID.
func (o GetForwardEntriesEntryOutput) ForwardEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.ForwardEntryId }).(pulumi.StringOutput)
}

// The name of forward entry.
func (o GetForwardEntriesEntryOutput) ForwardEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.ForwardEntryName }).(pulumi.StringOutput)
}

// The ID of the Forward Entry.
func (o GetForwardEntriesEntryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.Id }).(pulumi.StringOutput)
}

// The private IP address.
func (o GetForwardEntriesEntryOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The internal port.
func (o GetForwardEntriesEntryOutput) InternalPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.InternalPort }).(pulumi.StringOutput)
}

// The ip protocol. Valid values: `any`,`tcp` and `udp`.
func (o GetForwardEntriesEntryOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.IpProtocol }).(pulumi.StringOutput)
}

// The forward entry name.
func (o GetForwardEntriesEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.Name }).(pulumi.StringOutput)
}

// The status of farward entry. Valid value `Available`, `Deleting` and `Pending`.
func (o GetForwardEntriesEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardEntriesEntry) string { return v.Status }).(pulumi.StringOutput)
}

type GetForwardEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetForwardEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardEntriesEntry)(nil)).Elem()
}

func (o GetForwardEntriesEntryArrayOutput) ToGetForwardEntriesEntryArrayOutput() GetForwardEntriesEntryArrayOutput {
	return o
}

func (o GetForwardEntriesEntryArrayOutput) ToGetForwardEntriesEntryArrayOutputWithContext(ctx context.Context) GetForwardEntriesEntryArrayOutput {
	return o
}

func (o GetForwardEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetForwardEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetForwardEntriesEntry {
		return vs[0].([]GetForwardEntriesEntry)[vs[1].(int)]
	}).(GetForwardEntriesEntryOutput)
}

type GetHavipsHavip struct {
	// EIP bound to HaVip.
	AssociatedEipAddresses []string `pulumi:"associatedEipAddresses"`
	// An ECS instance that is bound to HaVip.
	AssociatedInstances []string `pulumi:"associatedInstances"`
	// Dependence of a HaVip instance.
	Description string `pulumi:"description"`
	// The  ID of the resource.
	HavipId string `pulumi:"havipId"`
	// The name of the HaVip instance.
	HavipName string `pulumi:"havipName"`
	// The ID of the Ha Vip.
	Id string `pulumi:"id"`
	// IP address of private network.
	IpAddress string `pulumi:"ipAddress"`
	// The primary instance ID bound to HaVip.
	MasterInstanceId string `pulumi:"masterInstanceId"`
	// The status.
	Status string `pulumi:"status"`
	// The VPC ID to which the HaVip instance belongs.
	VpcId string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId string `pulumi:"vswitchId"`
}

// GetHavipsHavipInput is an input type that accepts GetHavipsHavipArgs and GetHavipsHavipOutput values.
// You can construct a concrete instance of `GetHavipsHavipInput` via:
//
//          GetHavipsHavipArgs{...}
type GetHavipsHavipInput interface {
	pulumi.Input

	ToGetHavipsHavipOutput() GetHavipsHavipOutput
	ToGetHavipsHavipOutputWithContext(context.Context) GetHavipsHavipOutput
}

type GetHavipsHavipArgs struct {
	// EIP bound to HaVip.
	AssociatedEipAddresses pulumi.StringArrayInput `pulumi:"associatedEipAddresses"`
	// An ECS instance that is bound to HaVip.
	AssociatedInstances pulumi.StringArrayInput `pulumi:"associatedInstances"`
	// Dependence of a HaVip instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The  ID of the resource.
	HavipId pulumi.StringInput `pulumi:"havipId"`
	// The name of the HaVip instance.
	HavipName pulumi.StringInput `pulumi:"havipName"`
	// The ID of the Ha Vip.
	Id pulumi.StringInput `pulumi:"id"`
	// IP address of private network.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The primary instance ID bound to HaVip.
	MasterInstanceId pulumi.StringInput `pulumi:"masterInstanceId"`
	// The status.
	Status pulumi.StringInput `pulumi:"status"`
	// The VPC ID to which the HaVip instance belongs.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
}

func (GetHavipsHavipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHavipsHavip)(nil)).Elem()
}

func (i GetHavipsHavipArgs) ToGetHavipsHavipOutput() GetHavipsHavipOutput {
	return i.ToGetHavipsHavipOutputWithContext(context.Background())
}

func (i GetHavipsHavipArgs) ToGetHavipsHavipOutputWithContext(ctx context.Context) GetHavipsHavipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHavipsHavipOutput)
}

// GetHavipsHavipArrayInput is an input type that accepts GetHavipsHavipArray and GetHavipsHavipArrayOutput values.
// You can construct a concrete instance of `GetHavipsHavipArrayInput` via:
//
//          GetHavipsHavipArray{ GetHavipsHavipArgs{...} }
type GetHavipsHavipArrayInput interface {
	pulumi.Input

	ToGetHavipsHavipArrayOutput() GetHavipsHavipArrayOutput
	ToGetHavipsHavipArrayOutputWithContext(context.Context) GetHavipsHavipArrayOutput
}

type GetHavipsHavipArray []GetHavipsHavipInput

func (GetHavipsHavipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHavipsHavip)(nil)).Elem()
}

func (i GetHavipsHavipArray) ToGetHavipsHavipArrayOutput() GetHavipsHavipArrayOutput {
	return i.ToGetHavipsHavipArrayOutputWithContext(context.Background())
}

func (i GetHavipsHavipArray) ToGetHavipsHavipArrayOutputWithContext(ctx context.Context) GetHavipsHavipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHavipsHavipArrayOutput)
}

type GetHavipsHavipOutput struct{ *pulumi.OutputState }

func (GetHavipsHavipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHavipsHavip)(nil)).Elem()
}

func (o GetHavipsHavipOutput) ToGetHavipsHavipOutput() GetHavipsHavipOutput {
	return o
}

func (o GetHavipsHavipOutput) ToGetHavipsHavipOutputWithContext(ctx context.Context) GetHavipsHavipOutput {
	return o
}

// EIP bound to HaVip.
func (o GetHavipsHavipOutput) AssociatedEipAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHavipsHavip) []string { return v.AssociatedEipAddresses }).(pulumi.StringArrayOutput)
}

// An ECS instance that is bound to HaVip.
func (o GetHavipsHavipOutput) AssociatedInstances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHavipsHavip) []string { return v.AssociatedInstances }).(pulumi.StringArrayOutput)
}

// Dependence of a HaVip instance.
func (o GetHavipsHavipOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.Description }).(pulumi.StringOutput)
}

// The  ID of the resource.
func (o GetHavipsHavipOutput) HavipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.HavipId }).(pulumi.StringOutput)
}

// The name of the HaVip instance.
func (o GetHavipsHavipOutput) HavipName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.HavipName }).(pulumi.StringOutput)
}

// The ID of the Ha Vip.
func (o GetHavipsHavipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.Id }).(pulumi.StringOutput)
}

// IP address of private network.
func (o GetHavipsHavipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The primary instance ID bound to HaVip.
func (o GetHavipsHavipOutput) MasterInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.MasterInstanceId }).(pulumi.StringOutput)
}

// The status.
func (o GetHavipsHavipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.Status }).(pulumi.StringOutput)
}

// The VPC ID to which the HaVip instance belongs.
func (o GetHavipsHavipOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vswitch id.
func (o GetHavipsHavipOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHavipsHavip) string { return v.VswitchId }).(pulumi.StringOutput)
}

type GetHavipsHavipArrayOutput struct{ *pulumi.OutputState }

func (GetHavipsHavipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHavipsHavip)(nil)).Elem()
}

func (o GetHavipsHavipArrayOutput) ToGetHavipsHavipArrayOutput() GetHavipsHavipArrayOutput {
	return o
}

func (o GetHavipsHavipArrayOutput) ToGetHavipsHavipArrayOutputWithContext(ctx context.Context) GetHavipsHavipArrayOutput {
	return o
}

func (o GetHavipsHavipArrayOutput) Index(i pulumi.IntInput) GetHavipsHavipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHavipsHavip {
		return vs[0].([]GetHavipsHavip)[vs[1].(int)]
	}).(GetHavipsHavipOutput)
}

type GetNatGatewaysGateway struct {
	// Time of creation.
	CreationTime string `pulumi:"creationTime"`
	// The description of the NAT gateway.
	Description string `pulumi:"description"`
	// The forward table id.
	ForwardTableId string `pulumi:"forwardTableId"`
	// The ID of the NAT gateway.
	Id string `pulumi:"id"`
	// The ip address of the bind eip.
	IpLists []string `pulumi:"ipLists"`
	// Name of the NAT gateway.
	Name string `pulumi:"name"`
	// The snat table id.
	SnatTableId string `pulumi:"snatTableId"`
	// The specification of the NAT gateway.
	Spec string `pulumi:"spec"`
	// The status of the NAT gateway.
	Status string `pulumi:"status"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// GetNatGatewaysGatewayInput is an input type that accepts GetNatGatewaysGatewayArgs and GetNatGatewaysGatewayOutput values.
// You can construct a concrete instance of `GetNatGatewaysGatewayInput` via:
//
//          GetNatGatewaysGatewayArgs{...}
type GetNatGatewaysGatewayInput interface {
	pulumi.Input

	ToGetNatGatewaysGatewayOutput() GetNatGatewaysGatewayOutput
	ToGetNatGatewaysGatewayOutputWithContext(context.Context) GetNatGatewaysGatewayOutput
}

type GetNatGatewaysGatewayArgs struct {
	// Time of creation.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The description of the NAT gateway.
	Description pulumi.StringInput `pulumi:"description"`
	// The forward table id.
	ForwardTableId pulumi.StringInput `pulumi:"forwardTableId"`
	// The ID of the NAT gateway.
	Id pulumi.StringInput `pulumi:"id"`
	// The ip address of the bind eip.
	IpLists pulumi.StringArrayInput `pulumi:"ipLists"`
	// Name of the NAT gateway.
	Name pulumi.StringInput `pulumi:"name"`
	// The snat table id.
	SnatTableId pulumi.StringInput `pulumi:"snatTableId"`
	// The specification of the NAT gateway.
	Spec pulumi.StringInput `pulumi:"spec"`
	// The status of the NAT gateway.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetNatGatewaysGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNatGatewaysGateway)(nil)).Elem()
}

func (i GetNatGatewaysGatewayArgs) ToGetNatGatewaysGatewayOutput() GetNatGatewaysGatewayOutput {
	return i.ToGetNatGatewaysGatewayOutputWithContext(context.Background())
}

func (i GetNatGatewaysGatewayArgs) ToGetNatGatewaysGatewayOutputWithContext(ctx context.Context) GetNatGatewaysGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNatGatewaysGatewayOutput)
}

// GetNatGatewaysGatewayArrayInput is an input type that accepts GetNatGatewaysGatewayArray and GetNatGatewaysGatewayArrayOutput values.
// You can construct a concrete instance of `GetNatGatewaysGatewayArrayInput` via:
//
//          GetNatGatewaysGatewayArray{ GetNatGatewaysGatewayArgs{...} }
type GetNatGatewaysGatewayArrayInput interface {
	pulumi.Input

	ToGetNatGatewaysGatewayArrayOutput() GetNatGatewaysGatewayArrayOutput
	ToGetNatGatewaysGatewayArrayOutputWithContext(context.Context) GetNatGatewaysGatewayArrayOutput
}

type GetNatGatewaysGatewayArray []GetNatGatewaysGatewayInput

func (GetNatGatewaysGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNatGatewaysGateway)(nil)).Elem()
}

func (i GetNatGatewaysGatewayArray) ToGetNatGatewaysGatewayArrayOutput() GetNatGatewaysGatewayArrayOutput {
	return i.ToGetNatGatewaysGatewayArrayOutputWithContext(context.Background())
}

func (i GetNatGatewaysGatewayArray) ToGetNatGatewaysGatewayArrayOutputWithContext(ctx context.Context) GetNatGatewaysGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNatGatewaysGatewayArrayOutput)
}

type GetNatGatewaysGatewayOutput struct{ *pulumi.OutputState }

func (GetNatGatewaysGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNatGatewaysGateway)(nil)).Elem()
}

func (o GetNatGatewaysGatewayOutput) ToGetNatGatewaysGatewayOutput() GetNatGatewaysGatewayOutput {
	return o
}

func (o GetNatGatewaysGatewayOutput) ToGetNatGatewaysGatewayOutputWithContext(ctx context.Context) GetNatGatewaysGatewayOutput {
	return o
}

// Time of creation.
func (o GetNatGatewaysGatewayOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the NAT gateway.
func (o GetNatGatewaysGatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.Description }).(pulumi.StringOutput)
}

// The forward table id.
func (o GetNatGatewaysGatewayOutput) ForwardTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.ForwardTableId }).(pulumi.StringOutput)
}

// The ID of the NAT gateway.
func (o GetNatGatewaysGatewayOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.Id }).(pulumi.StringOutput)
}

// The ip address of the bind eip.
func (o GetNatGatewaysGatewayOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) []string { return v.IpLists }).(pulumi.StringArrayOutput)
}

// Name of the NAT gateway.
func (o GetNatGatewaysGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.Name }).(pulumi.StringOutput)
}

// The snat table id.
func (o GetNatGatewaysGatewayOutput) SnatTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.SnatTableId }).(pulumi.StringOutput)
}

// The specification of the NAT gateway.
func (o GetNatGatewaysGatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.Spec }).(pulumi.StringOutput)
}

// The status of the NAT gateway.
func (o GetNatGatewaysGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the VPC.
func (o GetNatGatewaysGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatGatewaysGateway) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetNatGatewaysGatewayArrayOutput struct{ *pulumi.OutputState }

func (GetNatGatewaysGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNatGatewaysGateway)(nil)).Elem()
}

func (o GetNatGatewaysGatewayArrayOutput) ToGetNatGatewaysGatewayArrayOutput() GetNatGatewaysGatewayArrayOutput {
	return o
}

func (o GetNatGatewaysGatewayArrayOutput) ToGetNatGatewaysGatewayArrayOutputWithContext(ctx context.Context) GetNatGatewaysGatewayArrayOutput {
	return o
}

func (o GetNatGatewaysGatewayArrayOutput) Index(i pulumi.IntInput) GetNatGatewaysGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNatGatewaysGateway {
		return vs[0].([]GetNatGatewaysGateway)[vs[1].(int)]
	}).(GetNatGatewaysGatewayOutput)
}

type GetNetworksVpc struct {
	// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
	CidrBlock string `pulumi:"cidrBlock"`
	// Time of creation.
	CreationTime string `pulumi:"creationTime"`
	// Description of the VPC
	Description string `pulumi:"description"`
	// ID of the VPC.
	Id string `pulumi:"id"`
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock string `pulumi:"ipv6CidrBlock"`
	// Indicate whether the VPC is the default one in the specified region.
	IsDefault bool `pulumi:"isDefault"`
	// ID of the region where the VPC is located.
	RegionId string `pulumi:"regionId"`
	// The Id of resource group which VPC belongs.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// Route table ID of the VRouter.
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of the VRouter.
	RouterId string `pulumi:"routerId"`
	// A list of secondary IPv4 CIDR blocks of the VPC.
	SecondaryCidrBlocks []string `pulumi:"secondaryCidrBlocks"`
	// Filter results by a specific status. Valid value are `Pending` and `Available`.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// A list of user CIDRs.
	UserCidrs []string `pulumi:"userCidrs"`
	// ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The name of the VPC.
	VpcName string `pulumi:"vpcName"`
	// ID of the VRouter.
	VrouterId string `pulumi:"vrouterId"`
	// List of VSwitch IDs in the specified VPC
	VswitchIds []string `pulumi:"vswitchIds"`
}

// GetNetworksVpcInput is an input type that accepts GetNetworksVpcArgs and GetNetworksVpcOutput values.
// You can construct a concrete instance of `GetNetworksVpcInput` via:
//
//          GetNetworksVpcArgs{...}
type GetNetworksVpcInput interface {
	pulumi.Input

	ToGetNetworksVpcOutput() GetNetworksVpcOutput
	ToGetNetworksVpcOutputWithContext(context.Context) GetNetworksVpcOutput
}

type GetNetworksVpcArgs struct {
	// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Time of creation.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// Description of the VPC
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the VPC.
	Id pulumi.StringInput `pulumi:"id"`
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock pulumi.StringInput `pulumi:"ipv6CidrBlock"`
	// Indicate whether the VPC is the default one in the specified region.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// ID of the region where the VPC is located.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The Id of resource group which VPC belongs.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// Route table ID of the VRouter.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The ID of the VRouter.
	RouterId pulumi.StringInput `pulumi:"routerId"`
	// A list of secondary IPv4 CIDR blocks of the VPC.
	SecondaryCidrBlocks pulumi.StringArrayInput `pulumi:"secondaryCidrBlocks"`
	// Filter results by a specific status. Valid value are `Pending` and `Available`.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// A list of user CIDRs.
	UserCidrs pulumi.StringArrayInput `pulumi:"userCidrs"`
	// ID of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The name of the VPC.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
	// ID of the VRouter.
	VrouterId pulumi.StringInput `pulumi:"vrouterId"`
	// List of VSwitch IDs in the specified VPC
	VswitchIds pulumi.StringArrayInput `pulumi:"vswitchIds"`
}

func (GetNetworksVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksVpc)(nil)).Elem()
}

func (i GetNetworksVpcArgs) ToGetNetworksVpcOutput() GetNetworksVpcOutput {
	return i.ToGetNetworksVpcOutputWithContext(context.Background())
}

func (i GetNetworksVpcArgs) ToGetNetworksVpcOutputWithContext(ctx context.Context) GetNetworksVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksVpcOutput)
}

// GetNetworksVpcArrayInput is an input type that accepts GetNetworksVpcArray and GetNetworksVpcArrayOutput values.
// You can construct a concrete instance of `GetNetworksVpcArrayInput` via:
//
//          GetNetworksVpcArray{ GetNetworksVpcArgs{...} }
type GetNetworksVpcArrayInput interface {
	pulumi.Input

	ToGetNetworksVpcArrayOutput() GetNetworksVpcArrayOutput
	ToGetNetworksVpcArrayOutputWithContext(context.Context) GetNetworksVpcArrayOutput
}

type GetNetworksVpcArray []GetNetworksVpcInput

func (GetNetworksVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksVpc)(nil)).Elem()
}

func (i GetNetworksVpcArray) ToGetNetworksVpcArrayOutput() GetNetworksVpcArrayOutput {
	return i.ToGetNetworksVpcArrayOutputWithContext(context.Background())
}

func (i GetNetworksVpcArray) ToGetNetworksVpcArrayOutputWithContext(ctx context.Context) GetNetworksVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksVpcArrayOutput)
}

type GetNetworksVpcOutput struct{ *pulumi.OutputState }

func (GetNetworksVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksVpc)(nil)).Elem()
}

func (o GetNetworksVpcOutput) ToGetNetworksVpcOutput() GetNetworksVpcOutput {
	return o
}

func (o GetNetworksVpcOutput) ToGetNetworksVpcOutputWithContext(ctx context.Context) GetNetworksVpcOutput {
	return o
}

// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
func (o GetNetworksVpcOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// Time of creation.
func (o GetNetworksVpcOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Description of the VPC
func (o GetNetworksVpcOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the VPC.
func (o GetNetworksVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The IPv6 CIDR block of the VPC.
func (o GetNetworksVpcOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// Indicate whether the VPC is the default one in the specified region.
func (o GetNetworksVpcOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNetworksVpc) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// ID of the region where the VPC is located.
func (o GetNetworksVpcOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.RegionId }).(pulumi.StringOutput)
}

// The Id of resource group which VPC belongs.
func (o GetNetworksVpcOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Route table ID of the VRouter.
func (o GetNetworksVpcOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The ID of the VRouter.
func (o GetNetworksVpcOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.RouterId }).(pulumi.StringOutput)
}

// A list of secondary IPv4 CIDR blocks of the VPC.
func (o GetNetworksVpcOutput) SecondaryCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworksVpc) []string { return v.SecondaryCidrBlocks }).(pulumi.StringArrayOutput)
}

// Filter results by a specific status. Valid value are `Pending` and `Available`.
func (o GetNetworksVpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetNetworksVpcOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetNetworksVpc) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// A list of user CIDRs.
func (o GetNetworksVpcOutput) UserCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworksVpc) []string { return v.UserCidrs }).(pulumi.StringArrayOutput)
}

// ID of the VPC.
func (o GetNetworksVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

// The name of the VPC.
func (o GetNetworksVpcOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.VpcName }).(pulumi.StringOutput)
}

// ID of the VRouter.
func (o GetNetworksVpcOutput) VrouterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksVpc) string { return v.VrouterId }).(pulumi.StringOutput)
}

// List of VSwitch IDs in the specified VPC
func (o GetNetworksVpcOutput) VswitchIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworksVpc) []string { return v.VswitchIds }).(pulumi.StringArrayOutput)
}

type GetNetworksVpcArrayOutput struct{ *pulumi.OutputState }

func (GetNetworksVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksVpc)(nil)).Elem()
}

func (o GetNetworksVpcArrayOutput) ToGetNetworksVpcArrayOutput() GetNetworksVpcArrayOutput {
	return o
}

func (o GetNetworksVpcArrayOutput) ToGetNetworksVpcArrayOutputWithContext(ctx context.Context) GetNetworksVpcArrayOutput {
	return o
}

func (o GetNetworksVpcArrayOutput) Index(i pulumi.IntInput) GetNetworksVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworksVpc {
		return vs[0].([]GetNetworksVpc)[vs[1].(int)]
	}).(GetNetworksVpcOutput)
}

type GetRouteEntriesEntry struct {
	// The destination CIDR block of the route entry.
	CidrBlock string `pulumi:"cidrBlock"`
	// The instance ID of the next hop.
	InstanceId string `pulumi:"instanceId"`
	// The type of the next hop.
	NextHopType string `pulumi:"nextHopType"`
	// The ID of the router table to which the route entry belongs.
	RouteTableId string `pulumi:"routeTableId"`
	// The status of the route entry.
	Status string `pulumi:"status"`
	// The type of the route entry.
	Type string `pulumi:"type"`
}

// GetRouteEntriesEntryInput is an input type that accepts GetRouteEntriesEntryArgs and GetRouteEntriesEntryOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryInput` via:
//
//          GetRouteEntriesEntryArgs{...}
type GetRouteEntriesEntryInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput
	ToGetRouteEntriesEntryOutputWithContext(context.Context) GetRouteEntriesEntryOutput
}

type GetRouteEntriesEntryArgs struct {
	// The destination CIDR block of the route entry.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// The instance ID of the next hop.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the next hop.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// The ID of the router table to which the route entry belongs.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The status of the route entry.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the route entry.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRouteEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return i.ToGetRouteEntriesEntryOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArgs) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryOutput)
}

// GetRouteEntriesEntryArrayInput is an input type that accepts GetRouteEntriesEntryArray and GetRouteEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteEntriesEntryArrayInput` via:
//
//          GetRouteEntriesEntryArray{ GetRouteEntriesEntryArgs{...} }
type GetRouteEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput
	ToGetRouteEntriesEntryArrayOutputWithContext(context.Context) GetRouteEntriesEntryArrayOutput
}

type GetRouteEntriesEntryArray []GetRouteEntriesEntryInput

func (GetRouteEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return i.ToGetRouteEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteEntriesEntryArray) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteEntriesEntryArrayOutput)
}

type GetRouteEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutput() GetRouteEntriesEntryOutput {
	return o
}

func (o GetRouteEntriesEntryOutput) ToGetRouteEntriesEntryOutputWithContext(ctx context.Context) GetRouteEntriesEntryOutput {
	return o
}

// The destination CIDR block of the route entry.
func (o GetRouteEntriesEntryOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// The instance ID of the next hop.
func (o GetRouteEntriesEntryOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the next hop.
func (o GetRouteEntriesEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// The ID of the router table to which the route entry belongs.
func (o GetRouteEntriesEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The status of the route entry.
func (o GetRouteEntriesEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the route entry.
func (o GetRouteEntriesEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteEntriesEntry) string { return v.Type }).(pulumi.StringOutput)
}

type GetRouteEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteEntriesEntry)(nil)).Elem()
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutput() GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) ToGetRouteEntriesEntryArrayOutputWithContext(ctx context.Context) GetRouteEntriesEntryArrayOutput {
	return o
}

func (o GetRouteEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetRouteEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteEntriesEntry {
		return vs[0].([]GetRouteEntriesEntry)[vs[1].(int)]
	}).(GetRouteEntriesEntryOutput)
}

type GetRouteTablesTable struct {
	// The description of the route table instance.
	Description string `pulumi:"description"`
	// ID of the Route Table.
	Id string `pulumi:"id"`
	// Name of the route table.
	Name string `pulumi:"name"`
	// The Id of resource group which route tables belongs.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The route table id.
	RouteTableId string `pulumi:"routeTableId"`
	// The route table name.
	RouteTableName string `pulumi:"routeTableName"`
	// The type of route table.
	RouteTableType string `pulumi:"routeTableType"`
	// The router ID.
	RouterId string `pulumi:"routerId"`
	// The route type of route table. Valid values: `VRouter` and `VBR`.
	RouterType string `pulumi:"routerType"`
	// The status of resource. Valid values: `Available` and `Pending`.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Vpc id of the route table.
	VpcId string `pulumi:"vpcId"`
	// A list of vswitch id.
	VswitchIds []string `pulumi:"vswitchIds"`
}

// GetRouteTablesTableInput is an input type that accepts GetRouteTablesTableArgs and GetRouteTablesTableOutput values.
// You can construct a concrete instance of `GetRouteTablesTableInput` via:
//
//          GetRouteTablesTableArgs{...}
type GetRouteTablesTableInput interface {
	pulumi.Input

	ToGetRouteTablesTableOutput() GetRouteTablesTableOutput
	ToGetRouteTablesTableOutputWithContext(context.Context) GetRouteTablesTableOutput
}

type GetRouteTablesTableArgs struct {
	// The description of the route table instance.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the Route Table.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the route table.
	Name pulumi.StringInput `pulumi:"name"`
	// The Id of resource group which route tables belongs.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The route table id.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The route table name.
	RouteTableName pulumi.StringInput `pulumi:"routeTableName"`
	// The type of route table.
	RouteTableType pulumi.StringInput `pulumi:"routeTableType"`
	// The router ID.
	RouterId pulumi.StringInput `pulumi:"routerId"`
	// The route type of route table. Valid values: `VRouter` and `VBR`.
	RouterType pulumi.StringInput `pulumi:"routerType"`
	// The status of resource. Valid values: `Available` and `Pending`.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Vpc id of the route table.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// A list of vswitch id.
	VswitchIds pulumi.StringArrayInput `pulumi:"vswitchIds"`
}

func (GetRouteTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesTable)(nil)).Elem()
}

func (i GetRouteTablesTableArgs) ToGetRouteTablesTableOutput() GetRouteTablesTableOutput {
	return i.ToGetRouteTablesTableOutputWithContext(context.Background())
}

func (i GetRouteTablesTableArgs) ToGetRouteTablesTableOutputWithContext(ctx context.Context) GetRouteTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTablesTableOutput)
}

// GetRouteTablesTableArrayInput is an input type that accepts GetRouteTablesTableArray and GetRouteTablesTableArrayOutput values.
// You can construct a concrete instance of `GetRouteTablesTableArrayInput` via:
//
//          GetRouteTablesTableArray{ GetRouteTablesTableArgs{...} }
type GetRouteTablesTableArrayInput interface {
	pulumi.Input

	ToGetRouteTablesTableArrayOutput() GetRouteTablesTableArrayOutput
	ToGetRouteTablesTableArrayOutputWithContext(context.Context) GetRouteTablesTableArrayOutput
}

type GetRouteTablesTableArray []GetRouteTablesTableInput

func (GetRouteTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTablesTable)(nil)).Elem()
}

func (i GetRouteTablesTableArray) ToGetRouteTablesTableArrayOutput() GetRouteTablesTableArrayOutput {
	return i.ToGetRouteTablesTableArrayOutputWithContext(context.Background())
}

func (i GetRouteTablesTableArray) ToGetRouteTablesTableArrayOutputWithContext(ctx context.Context) GetRouteTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTablesTableArrayOutput)
}

type GetRouteTablesTableOutput struct{ *pulumi.OutputState }

func (GetRouteTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesTable)(nil)).Elem()
}

func (o GetRouteTablesTableOutput) ToGetRouteTablesTableOutput() GetRouteTablesTableOutput {
	return o
}

func (o GetRouteTablesTableOutput) ToGetRouteTablesTableOutputWithContext(ctx context.Context) GetRouteTablesTableOutput {
	return o
}

// The description of the route table instance.
func (o GetRouteTablesTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the Route Table.
func (o GetRouteTablesTableOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the route table.
func (o GetRouteTablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.Name }).(pulumi.StringOutput)
}

// The Id of resource group which route tables belongs.
func (o GetRouteTablesTableOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The route table id.
func (o GetRouteTablesTableOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The route table name.
func (o GetRouteTablesTableOutput) RouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.RouteTableName }).(pulumi.StringOutput)
}

// The type of route table.
func (o GetRouteTablesTableOutput) RouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.RouteTableType }).(pulumi.StringOutput)
}

// The router ID.
func (o GetRouteTablesTableOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.RouterId }).(pulumi.StringOutput)
}

// The route type of route table. Valid values: `VRouter` and `VBR`.
func (o GetRouteTablesTableOutput) RouterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.RouterType }).(pulumi.StringOutput)
}

// The status of resource. Valid values: `Available` and `Pending`.
func (o GetRouteTablesTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetRouteTablesTableOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetRouteTablesTable) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// Vpc id of the route table.
func (o GetRouteTablesTableOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesTable) string { return v.VpcId }).(pulumi.StringOutput)
}

// A list of vswitch id.
func (o GetRouteTablesTableOutput) VswitchIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteTablesTable) []string { return v.VswitchIds }).(pulumi.StringArrayOutput)
}

type GetRouteTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetRouteTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTablesTable)(nil)).Elem()
}

func (o GetRouteTablesTableArrayOutput) ToGetRouteTablesTableArrayOutput() GetRouteTablesTableArrayOutput {
	return o
}

func (o GetRouteTablesTableArrayOutput) ToGetRouteTablesTableArrayOutputWithContext(ctx context.Context) GetRouteTablesTableArrayOutput {
	return o
}

func (o GetRouteTablesTableArrayOutput) Index(i pulumi.IntInput) GetRouteTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteTablesTable {
		return vs[0].([]GetRouteTablesTable)[vs[1].(int)]
	}).(GetRouteTablesTableOutput)
}

type GetRouterInterfacesInterface struct {
	// ID of the access point used by the VBR.
	AccessPointId string `pulumi:"accessPointId"`
	// Router interface creation time.
	CreationTime string `pulumi:"creationTime"`
	// Router interface description.
	Description string `pulumi:"description"`
	// Source IP address used to perform health check on the physical connection.
	HealthCheckSourceIp string `pulumi:"healthCheckSourceIp"`
	// Destination IP address used to perform health check on the physical connection.
	HealthCheckTargetIp string `pulumi:"healthCheckTargetIp"`
	// Router interface ID.
	Id string `pulumi:"id"`
	// Router interface name.
	Name string `pulumi:"name"`
	// ID of the peer router interface.
	OppositeInterfaceId string `pulumi:"oppositeInterfaceId"`
	// Account ID of the owner of the peer router interface.
	OppositeInterfaceOwnerId string `pulumi:"oppositeInterfaceOwnerId"`
	// Peer router region ID.
	OppositeRegionId string `pulumi:"oppositeRegionId"`
	// Peer router ID.
	OppositeRouterId string `pulumi:"oppositeRouterId"`
	// Router type in the peer region. Possible values: `VRouter` and `VBR`.
	OppositeRouterType string `pulumi:"oppositeRouterType"`
	// Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and
	// `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `routerType` is set to `VBR`.
	Role string `pulumi:"role"`
	// ID of the VRouter located in the local region.
	RouterId string `pulumi:"routerId"`
	// Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
	RouterType string `pulumi:"routerType"`
	// Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
	Specification string `pulumi:"specification"`
	// Expected status. Valid values are `Active`, `Inactive` and `Idle`.
	Status string `pulumi:"status"`
	// ID of the VPC that owns the router in the local region.
	VpcId string `pulumi:"vpcId"`
}

// GetRouterInterfacesInterfaceInput is an input type that accepts GetRouterInterfacesInterfaceArgs and GetRouterInterfacesInterfaceOutput values.
// You can construct a concrete instance of `GetRouterInterfacesInterfaceInput` via:
//
//          GetRouterInterfacesInterfaceArgs{...}
type GetRouterInterfacesInterfaceInput interface {
	pulumi.Input

	ToGetRouterInterfacesInterfaceOutput() GetRouterInterfacesInterfaceOutput
	ToGetRouterInterfacesInterfaceOutputWithContext(context.Context) GetRouterInterfacesInterfaceOutput
}

type GetRouterInterfacesInterfaceArgs struct {
	// ID of the access point used by the VBR.
	AccessPointId pulumi.StringInput `pulumi:"accessPointId"`
	// Router interface creation time.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// Router interface description.
	Description pulumi.StringInput `pulumi:"description"`
	// Source IP address used to perform health check on the physical connection.
	HealthCheckSourceIp pulumi.StringInput `pulumi:"healthCheckSourceIp"`
	// Destination IP address used to perform health check on the physical connection.
	HealthCheckTargetIp pulumi.StringInput `pulumi:"healthCheckTargetIp"`
	// Router interface ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Router interface name.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of the peer router interface.
	OppositeInterfaceId pulumi.StringInput `pulumi:"oppositeInterfaceId"`
	// Account ID of the owner of the peer router interface.
	OppositeInterfaceOwnerId pulumi.StringInput `pulumi:"oppositeInterfaceOwnerId"`
	// Peer router region ID.
	OppositeRegionId pulumi.StringInput `pulumi:"oppositeRegionId"`
	// Peer router ID.
	OppositeRouterId pulumi.StringInput `pulumi:"oppositeRouterId"`
	// Router type in the peer region. Possible values: `VRouter` and `VBR`.
	OppositeRouterType pulumi.StringInput `pulumi:"oppositeRouterType"`
	// Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and
	// `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `routerType` is set to `VBR`.
	Role pulumi.StringInput `pulumi:"role"`
	// ID of the VRouter located in the local region.
	RouterId pulumi.StringInput `pulumi:"routerId"`
	// Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
	RouterType pulumi.StringInput `pulumi:"routerType"`
	// Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
	Specification pulumi.StringInput `pulumi:"specification"`
	// Expected status. Valid values are `Active`, `Inactive` and `Idle`.
	Status pulumi.StringInput `pulumi:"status"`
	// ID of the VPC that owns the router in the local region.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetRouterInterfacesInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterInterfacesInterface)(nil)).Elem()
}

func (i GetRouterInterfacesInterfaceArgs) ToGetRouterInterfacesInterfaceOutput() GetRouterInterfacesInterfaceOutput {
	return i.ToGetRouterInterfacesInterfaceOutputWithContext(context.Background())
}

func (i GetRouterInterfacesInterfaceArgs) ToGetRouterInterfacesInterfaceOutputWithContext(ctx context.Context) GetRouterInterfacesInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterInterfacesInterfaceOutput)
}

// GetRouterInterfacesInterfaceArrayInput is an input type that accepts GetRouterInterfacesInterfaceArray and GetRouterInterfacesInterfaceArrayOutput values.
// You can construct a concrete instance of `GetRouterInterfacesInterfaceArrayInput` via:
//
//          GetRouterInterfacesInterfaceArray{ GetRouterInterfacesInterfaceArgs{...} }
type GetRouterInterfacesInterfaceArrayInput interface {
	pulumi.Input

	ToGetRouterInterfacesInterfaceArrayOutput() GetRouterInterfacesInterfaceArrayOutput
	ToGetRouterInterfacesInterfaceArrayOutputWithContext(context.Context) GetRouterInterfacesInterfaceArrayOutput
}

type GetRouterInterfacesInterfaceArray []GetRouterInterfacesInterfaceInput

func (GetRouterInterfacesInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterInterfacesInterface)(nil)).Elem()
}

func (i GetRouterInterfacesInterfaceArray) ToGetRouterInterfacesInterfaceArrayOutput() GetRouterInterfacesInterfaceArrayOutput {
	return i.ToGetRouterInterfacesInterfaceArrayOutputWithContext(context.Background())
}

func (i GetRouterInterfacesInterfaceArray) ToGetRouterInterfacesInterfaceArrayOutputWithContext(ctx context.Context) GetRouterInterfacesInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterInterfacesInterfaceArrayOutput)
}

type GetRouterInterfacesInterfaceOutput struct{ *pulumi.OutputState }

func (GetRouterInterfacesInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterInterfacesInterface)(nil)).Elem()
}

func (o GetRouterInterfacesInterfaceOutput) ToGetRouterInterfacesInterfaceOutput() GetRouterInterfacesInterfaceOutput {
	return o
}

func (o GetRouterInterfacesInterfaceOutput) ToGetRouterInterfacesInterfaceOutputWithContext(ctx context.Context) GetRouterInterfacesInterfaceOutput {
	return o
}

// ID of the access point used by the VBR.
func (o GetRouterInterfacesInterfaceOutput) AccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.AccessPointId }).(pulumi.StringOutput)
}

// Router interface creation time.
func (o GetRouterInterfacesInterfaceOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Router interface description.
func (o GetRouterInterfacesInterfaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Description }).(pulumi.StringOutput)
}

// Source IP address used to perform health check on the physical connection.
func (o GetRouterInterfacesInterfaceOutput) HealthCheckSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.HealthCheckSourceIp }).(pulumi.StringOutput)
}

// Destination IP address used to perform health check on the physical connection.
func (o GetRouterInterfacesInterfaceOutput) HealthCheckTargetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.HealthCheckTargetIp }).(pulumi.StringOutput)
}

// Router interface ID.
func (o GetRouterInterfacesInterfaceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Id }).(pulumi.StringOutput)
}

// Router interface name.
func (o GetRouterInterfacesInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the peer router interface.
func (o GetRouterInterfacesInterfaceOutput) OppositeInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.OppositeInterfaceId }).(pulumi.StringOutput)
}

// Account ID of the owner of the peer router interface.
func (o GetRouterInterfacesInterfaceOutput) OppositeInterfaceOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.OppositeInterfaceOwnerId }).(pulumi.StringOutput)
}

// Peer router region ID.
func (o GetRouterInterfacesInterfaceOutput) OppositeRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.OppositeRegionId }).(pulumi.StringOutput)
}

// Peer router ID.
func (o GetRouterInterfacesInterfaceOutput) OppositeRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.OppositeRouterId }).(pulumi.StringOutput)
}

// Router type in the peer region. Possible values: `VRouter` and `VBR`.
func (o GetRouterInterfacesInterfaceOutput) OppositeRouterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.OppositeRouterType }).(pulumi.StringOutput)
}

// Role of the router interface. Valid values are `InitiatingSide` (connection initiator) and
// `AcceptingSide` (connection receiver). The value of this parameter must be `InitiatingSide` if the `routerType` is set to `VBR`.
func (o GetRouterInterfacesInterfaceOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Role }).(pulumi.StringOutput)
}

// ID of the VRouter located in the local region.
func (o GetRouterInterfacesInterfaceOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.RouterId }).(pulumi.StringOutput)
}

// Router type in the local region. Valid values are `VRouter` and `VBR` (physical connection).
func (o GetRouterInterfacesInterfaceOutput) RouterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.RouterType }).(pulumi.StringOutput)
}

// Specification of the link, such as `Small.1` (10Mb), `Middle.1` (100Mb), `Large.2` (2Gb), ...etc.
func (o GetRouterInterfacesInterfaceOutput) Specification() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Specification }).(pulumi.StringOutput)
}

// Expected status. Valid values are `Active`, `Inactive` and `Idle`.
func (o GetRouterInterfacesInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.Status }).(pulumi.StringOutput)
}

// ID of the VPC that owns the router in the local region.
func (o GetRouterInterfacesInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterInterfacesInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetRouterInterfacesInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetRouterInterfacesInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterInterfacesInterface)(nil)).Elem()
}

func (o GetRouterInterfacesInterfaceArrayOutput) ToGetRouterInterfacesInterfaceArrayOutput() GetRouterInterfacesInterfaceArrayOutput {
	return o
}

func (o GetRouterInterfacesInterfaceArrayOutput) ToGetRouterInterfacesInterfaceArrayOutputWithContext(ctx context.Context) GetRouterInterfacesInterfaceArrayOutput {
	return o
}

func (o GetRouterInterfacesInterfaceArrayOutput) Index(i pulumi.IntInput) GetRouterInterfacesInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouterInterfacesInterface {
		return vs[0].([]GetRouterInterfacesInterface)[vs[1].(int)]
	}).(GetRouterInterfacesInterfaceOutput)
}

type GetSnatEntriesEntry struct {
	// The ID of the Snat Entry.
	Id string `pulumi:"id"`
	// The ID of snat entry.
	SnatEntryId string `pulumi:"snatEntryId"`
	// The name of snat entry.
	SnatEntryName string `pulumi:"snatEntryName"`
	// The public IP of the Snat Entry.
	SnatIp string `pulumi:"snatIp"`
	// The source CIDR block of the Snat Entry.
	SourceCidr string `pulumi:"sourceCidr"`
	// The source vswitch ID.
	SourceVswitchId string `pulumi:"sourceVswitchId"`
	// The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
	Status string `pulumi:"status"`
}

// GetSnatEntriesEntryInput is an input type that accepts GetSnatEntriesEntryArgs and GetSnatEntriesEntryOutput values.
// You can construct a concrete instance of `GetSnatEntriesEntryInput` via:
//
//          GetSnatEntriesEntryArgs{...}
type GetSnatEntriesEntryInput interface {
	pulumi.Input

	ToGetSnatEntriesEntryOutput() GetSnatEntriesEntryOutput
	ToGetSnatEntriesEntryOutputWithContext(context.Context) GetSnatEntriesEntryOutput
}

type GetSnatEntriesEntryArgs struct {
	// The ID of the Snat Entry.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of snat entry.
	SnatEntryId pulumi.StringInput `pulumi:"snatEntryId"`
	// The name of snat entry.
	SnatEntryName pulumi.StringInput `pulumi:"snatEntryName"`
	// The public IP of the Snat Entry.
	SnatIp pulumi.StringInput `pulumi:"snatIp"`
	// The source CIDR block of the Snat Entry.
	SourceCidr pulumi.StringInput `pulumi:"sourceCidr"`
	// The source vswitch ID.
	SourceVswitchId pulumi.StringInput `pulumi:"sourceVswitchId"`
	// The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetSnatEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnatEntriesEntry)(nil)).Elem()
}

func (i GetSnatEntriesEntryArgs) ToGetSnatEntriesEntryOutput() GetSnatEntriesEntryOutput {
	return i.ToGetSnatEntriesEntryOutputWithContext(context.Background())
}

func (i GetSnatEntriesEntryArgs) ToGetSnatEntriesEntryOutputWithContext(ctx context.Context) GetSnatEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnatEntriesEntryOutput)
}

// GetSnatEntriesEntryArrayInput is an input type that accepts GetSnatEntriesEntryArray and GetSnatEntriesEntryArrayOutput values.
// You can construct a concrete instance of `GetSnatEntriesEntryArrayInput` via:
//
//          GetSnatEntriesEntryArray{ GetSnatEntriesEntryArgs{...} }
type GetSnatEntriesEntryArrayInput interface {
	pulumi.Input

	ToGetSnatEntriesEntryArrayOutput() GetSnatEntriesEntryArrayOutput
	ToGetSnatEntriesEntryArrayOutputWithContext(context.Context) GetSnatEntriesEntryArrayOutput
}

type GetSnatEntriesEntryArray []GetSnatEntriesEntryInput

func (GetSnatEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnatEntriesEntry)(nil)).Elem()
}

func (i GetSnatEntriesEntryArray) ToGetSnatEntriesEntryArrayOutput() GetSnatEntriesEntryArrayOutput {
	return i.ToGetSnatEntriesEntryArrayOutputWithContext(context.Background())
}

func (i GetSnatEntriesEntryArray) ToGetSnatEntriesEntryArrayOutputWithContext(ctx context.Context) GetSnatEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnatEntriesEntryArrayOutput)
}

type GetSnatEntriesEntryOutput struct{ *pulumi.OutputState }

func (GetSnatEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnatEntriesEntry)(nil)).Elem()
}

func (o GetSnatEntriesEntryOutput) ToGetSnatEntriesEntryOutput() GetSnatEntriesEntryOutput {
	return o
}

func (o GetSnatEntriesEntryOutput) ToGetSnatEntriesEntryOutputWithContext(ctx context.Context) GetSnatEntriesEntryOutput {
	return o
}

// The ID of the Snat Entry.
func (o GetSnatEntriesEntryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of snat entry.
func (o GetSnatEntriesEntryOutput) SnatEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.SnatEntryId }).(pulumi.StringOutput)
}

// The name of snat entry.
func (o GetSnatEntriesEntryOutput) SnatEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.SnatEntryName }).(pulumi.StringOutput)
}

// The public IP of the Snat Entry.
func (o GetSnatEntriesEntryOutput) SnatIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.SnatIp }).(pulumi.StringOutput)
}

// The source CIDR block of the Snat Entry.
func (o GetSnatEntriesEntryOutput) SourceCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.SourceCidr }).(pulumi.StringOutput)
}

// The source vswitch ID.
func (o GetSnatEntriesEntryOutput) SourceVswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.SourceVswitchId }).(pulumi.StringOutput)
}

// The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
func (o GetSnatEntriesEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnatEntriesEntry) string { return v.Status }).(pulumi.StringOutput)
}

type GetSnatEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (GetSnatEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnatEntriesEntry)(nil)).Elem()
}

func (o GetSnatEntriesEntryArrayOutput) ToGetSnatEntriesEntryArrayOutput() GetSnatEntriesEntryArrayOutput {
	return o
}

func (o GetSnatEntriesEntryArrayOutput) ToGetSnatEntriesEntryArrayOutputWithContext(ctx context.Context) GetSnatEntriesEntryArrayOutput {
	return o
}

func (o GetSnatEntriesEntryArrayOutput) Index(i pulumi.IntInput) GetSnatEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnatEntriesEntry {
		return vs[0].([]GetSnatEntriesEntry)[vs[1].(int)]
	}).(GetSnatEntriesEntryOutput)
}

type GetSslVpnClientCertsCert struct {
	// The time of creation.
	CreateTime string `pulumi:"createTime"`
	// The expiration time of the client certificate.
	EndTime int `pulumi:"endTime"`
	// ID of the SSL-VPN client certificate.
	Id string `pulumi:"id"`
	// The name of the SSL-VPN client certificate.
	Name string `pulumi:"name"`
	// Use the SSL-VPN server ID as the search key.
	SslVpnServerId string `pulumi:"sslVpnServerId"`
	// The status of the client certificate. valid value:expiring-soon, normal, expired.
	Status string `pulumi:"status"`
}

// GetSslVpnClientCertsCertInput is an input type that accepts GetSslVpnClientCertsCertArgs and GetSslVpnClientCertsCertOutput values.
// You can construct a concrete instance of `GetSslVpnClientCertsCertInput` via:
//
//          GetSslVpnClientCertsCertArgs{...}
type GetSslVpnClientCertsCertInput interface {
	pulumi.Input

	ToGetSslVpnClientCertsCertOutput() GetSslVpnClientCertsCertOutput
	ToGetSslVpnClientCertsCertOutputWithContext(context.Context) GetSslVpnClientCertsCertOutput
}

type GetSslVpnClientCertsCertArgs struct {
	// The time of creation.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The expiration time of the client certificate.
	EndTime pulumi.IntInput `pulumi:"endTime"`
	// ID of the SSL-VPN client certificate.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the SSL-VPN client certificate.
	Name pulumi.StringInput `pulumi:"name"`
	// Use the SSL-VPN server ID as the search key.
	SslVpnServerId pulumi.StringInput `pulumi:"sslVpnServerId"`
	// The status of the client certificate. valid value:expiring-soon, normal, expired.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetSslVpnClientCertsCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnClientCertsCert)(nil)).Elem()
}

func (i GetSslVpnClientCertsCertArgs) ToGetSslVpnClientCertsCertOutput() GetSslVpnClientCertsCertOutput {
	return i.ToGetSslVpnClientCertsCertOutputWithContext(context.Background())
}

func (i GetSslVpnClientCertsCertArgs) ToGetSslVpnClientCertsCertOutputWithContext(ctx context.Context) GetSslVpnClientCertsCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSslVpnClientCertsCertOutput)
}

// GetSslVpnClientCertsCertArrayInput is an input type that accepts GetSslVpnClientCertsCertArray and GetSslVpnClientCertsCertArrayOutput values.
// You can construct a concrete instance of `GetSslVpnClientCertsCertArrayInput` via:
//
//          GetSslVpnClientCertsCertArray{ GetSslVpnClientCertsCertArgs{...} }
type GetSslVpnClientCertsCertArrayInput interface {
	pulumi.Input

	ToGetSslVpnClientCertsCertArrayOutput() GetSslVpnClientCertsCertArrayOutput
	ToGetSslVpnClientCertsCertArrayOutputWithContext(context.Context) GetSslVpnClientCertsCertArrayOutput
}

type GetSslVpnClientCertsCertArray []GetSslVpnClientCertsCertInput

func (GetSslVpnClientCertsCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSslVpnClientCertsCert)(nil)).Elem()
}

func (i GetSslVpnClientCertsCertArray) ToGetSslVpnClientCertsCertArrayOutput() GetSslVpnClientCertsCertArrayOutput {
	return i.ToGetSslVpnClientCertsCertArrayOutputWithContext(context.Background())
}

func (i GetSslVpnClientCertsCertArray) ToGetSslVpnClientCertsCertArrayOutputWithContext(ctx context.Context) GetSslVpnClientCertsCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSslVpnClientCertsCertArrayOutput)
}

type GetSslVpnClientCertsCertOutput struct{ *pulumi.OutputState }

func (GetSslVpnClientCertsCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnClientCertsCert)(nil)).Elem()
}

func (o GetSslVpnClientCertsCertOutput) ToGetSslVpnClientCertsCertOutput() GetSslVpnClientCertsCertOutput {
	return o
}

func (o GetSslVpnClientCertsCertOutput) ToGetSslVpnClientCertsCertOutputWithContext(ctx context.Context) GetSslVpnClientCertsCertOutput {
	return o
}

// The time of creation.
func (o GetSslVpnClientCertsCertOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The expiration time of the client certificate.
func (o GetSslVpnClientCertsCertOutput) EndTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) int { return v.EndTime }).(pulumi.IntOutput)
}

// ID of the SSL-VPN client certificate.
func (o GetSslVpnClientCertsCertOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the SSL-VPN client certificate.
func (o GetSslVpnClientCertsCertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) string { return v.Name }).(pulumi.StringOutput)
}

// Use the SSL-VPN server ID as the search key.
func (o GetSslVpnClientCertsCertOutput) SslVpnServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) string { return v.SslVpnServerId }).(pulumi.StringOutput)
}

// The status of the client certificate. valid value:expiring-soon, normal, expired.
func (o GetSslVpnClientCertsCertOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsCert) string { return v.Status }).(pulumi.StringOutput)
}

type GetSslVpnClientCertsCertArrayOutput struct{ *pulumi.OutputState }

func (GetSslVpnClientCertsCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSslVpnClientCertsCert)(nil)).Elem()
}

func (o GetSslVpnClientCertsCertArrayOutput) ToGetSslVpnClientCertsCertArrayOutput() GetSslVpnClientCertsCertArrayOutput {
	return o
}

func (o GetSslVpnClientCertsCertArrayOutput) ToGetSslVpnClientCertsCertArrayOutputWithContext(ctx context.Context) GetSslVpnClientCertsCertArrayOutput {
	return o
}

func (o GetSslVpnClientCertsCertArrayOutput) Index(i pulumi.IntInput) GetSslVpnClientCertsCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSslVpnClientCertsCert {
		return vs[0].([]GetSslVpnClientCertsCert)[vs[1].(int)]
	}).(GetSslVpnClientCertsCertOutput)
}

type GetSslVpnServersServer struct {
	// The encryption algorithm used.
	Cipher string `pulumi:"cipher"`
	// The IP address pool of the client.
	ClientIpPool string `pulumi:"clientIpPool"`
	// Whether to compress.
	Compress bool `pulumi:"compress"`
	// The number of current connections.
	Connections int `pulumi:"connections"`
	// The time of creation.
	CreateTime string `pulumi:"createTime"`
	// The ID of the SSL-VPN server.
	Id string `pulumi:"id"`
	// The public IP.
	InternetIp string `pulumi:"internetIp"`
	// The local subnet of the VPN connection.
	LocalSubnet string `pulumi:"localSubnet"`
	// The maximum number of connections.
	MaxConnections int `pulumi:"maxConnections"`
	// The name of the SSL-VPN server.
	Name string `pulumi:"name"`
	// The port used by the SSL-VPN server.
	Port int `pulumi:"port"`
	// The protocol used by the SSL-VPN server.
	Proto string `pulumi:"proto"`
	// Use the VPN gateway ID as the search key.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// GetSslVpnServersServerInput is an input type that accepts GetSslVpnServersServerArgs and GetSslVpnServersServerOutput values.
// You can construct a concrete instance of `GetSslVpnServersServerInput` via:
//
//          GetSslVpnServersServerArgs{...}
type GetSslVpnServersServerInput interface {
	pulumi.Input

	ToGetSslVpnServersServerOutput() GetSslVpnServersServerOutput
	ToGetSslVpnServersServerOutputWithContext(context.Context) GetSslVpnServersServerOutput
}

type GetSslVpnServersServerArgs struct {
	// The encryption algorithm used.
	Cipher pulumi.StringInput `pulumi:"cipher"`
	// The IP address pool of the client.
	ClientIpPool pulumi.StringInput `pulumi:"clientIpPool"`
	// Whether to compress.
	Compress pulumi.BoolInput `pulumi:"compress"`
	// The number of current connections.
	Connections pulumi.IntInput `pulumi:"connections"`
	// The time of creation.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the SSL-VPN server.
	Id pulumi.StringInput `pulumi:"id"`
	// The public IP.
	InternetIp pulumi.StringInput `pulumi:"internetIp"`
	// The local subnet of the VPN connection.
	LocalSubnet pulumi.StringInput `pulumi:"localSubnet"`
	// The maximum number of connections.
	MaxConnections pulumi.IntInput `pulumi:"maxConnections"`
	// The name of the SSL-VPN server.
	Name pulumi.StringInput `pulumi:"name"`
	// The port used by the SSL-VPN server.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used by the SSL-VPN server.
	Proto pulumi.StringInput `pulumi:"proto"`
	// Use the VPN gateway ID as the search key.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
}

func (GetSslVpnServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnServersServer)(nil)).Elem()
}

func (i GetSslVpnServersServerArgs) ToGetSslVpnServersServerOutput() GetSslVpnServersServerOutput {
	return i.ToGetSslVpnServersServerOutputWithContext(context.Background())
}

func (i GetSslVpnServersServerArgs) ToGetSslVpnServersServerOutputWithContext(ctx context.Context) GetSslVpnServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSslVpnServersServerOutput)
}

// GetSslVpnServersServerArrayInput is an input type that accepts GetSslVpnServersServerArray and GetSslVpnServersServerArrayOutput values.
// You can construct a concrete instance of `GetSslVpnServersServerArrayInput` via:
//
//          GetSslVpnServersServerArray{ GetSslVpnServersServerArgs{...} }
type GetSslVpnServersServerArrayInput interface {
	pulumi.Input

	ToGetSslVpnServersServerArrayOutput() GetSslVpnServersServerArrayOutput
	ToGetSslVpnServersServerArrayOutputWithContext(context.Context) GetSslVpnServersServerArrayOutput
}

type GetSslVpnServersServerArray []GetSslVpnServersServerInput

func (GetSslVpnServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSslVpnServersServer)(nil)).Elem()
}

func (i GetSslVpnServersServerArray) ToGetSslVpnServersServerArrayOutput() GetSslVpnServersServerArrayOutput {
	return i.ToGetSslVpnServersServerArrayOutputWithContext(context.Background())
}

func (i GetSslVpnServersServerArray) ToGetSslVpnServersServerArrayOutputWithContext(ctx context.Context) GetSslVpnServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSslVpnServersServerArrayOutput)
}

type GetSslVpnServersServerOutput struct{ *pulumi.OutputState }

func (GetSslVpnServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnServersServer)(nil)).Elem()
}

func (o GetSslVpnServersServerOutput) ToGetSslVpnServersServerOutput() GetSslVpnServersServerOutput {
	return o
}

func (o GetSslVpnServersServerOutput) ToGetSslVpnServersServerOutputWithContext(ctx context.Context) GetSslVpnServersServerOutput {
	return o
}

// The encryption algorithm used.
func (o GetSslVpnServersServerOutput) Cipher() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.Cipher }).(pulumi.StringOutput)
}

// The IP address pool of the client.
func (o GetSslVpnServersServerOutput) ClientIpPool() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.ClientIpPool }).(pulumi.StringOutput)
}

// Whether to compress.
func (o GetSslVpnServersServerOutput) Compress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) bool { return v.Compress }).(pulumi.BoolOutput)
}

// The number of current connections.
func (o GetSslVpnServersServerOutput) Connections() pulumi.IntOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) int { return v.Connections }).(pulumi.IntOutput)
}

// The time of creation.
func (o GetSslVpnServersServerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the SSL-VPN server.
func (o GetSslVpnServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// The public IP.
func (o GetSslVpnServersServerOutput) InternetIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.InternetIp }).(pulumi.StringOutput)
}

// The local subnet of the VPN connection.
func (o GetSslVpnServersServerOutput) LocalSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.LocalSubnet }).(pulumi.StringOutput)
}

// The maximum number of connections.
func (o GetSslVpnServersServerOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// The name of the SSL-VPN server.
func (o GetSslVpnServersServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.Name }).(pulumi.StringOutput)
}

// The port used by the SSL-VPN server.
func (o GetSslVpnServersServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used by the SSL-VPN server.
func (o GetSslVpnServersServerOutput) Proto() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.Proto }).(pulumi.StringOutput)
}

// Use the VPN gateway ID as the search key.
func (o GetSslVpnServersServerOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnServersServer) string { return v.VpnGatewayId }).(pulumi.StringOutput)
}

type GetSslVpnServersServerArrayOutput struct{ *pulumi.OutputState }

func (GetSslVpnServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSslVpnServersServer)(nil)).Elem()
}

func (o GetSslVpnServersServerArrayOutput) ToGetSslVpnServersServerArrayOutput() GetSslVpnServersServerArrayOutput {
	return o
}

func (o GetSslVpnServersServerArrayOutput) ToGetSslVpnServersServerArrayOutputWithContext(ctx context.Context) GetSslVpnServersServerArrayOutput {
	return o
}

func (o GetSslVpnServersServerArrayOutput) Index(i pulumi.IntInput) GetSslVpnServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSslVpnServersServer {
		return vs[0].([]GetSslVpnServersServer)[vs[1].(int)]
	}).(GetSslVpnServersServerOutput)
}

type GetSwitchesVswitch struct {
	// The available ip address count of the VSwitch.
	AvailableIpAddressCount int `pulumi:"availableIpAddressCount"`
	// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
	CidrBlock string `pulumi:"cidrBlock"`
	// Time of creation.
	CreationTime string `pulumi:"creationTime"`
	// Description of the VSwitch.
	Description string `pulumi:"description"`
	// ID of the VSwitch.
	Id string `pulumi:"id"`
	// Indicate whether the VSwitch is created by the system.
	IsDefault bool `pulumi:"isDefault"`
	// Name of the VSwitch.
	Name string `pulumi:"name"`
	// The Id of resource group which VSWitch belongs.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The route table ID of the VSwitch.
	RouteTableId string `pulumi:"routeTableId"`
	// The status of the VSwitch. Valid values: `Available` and `Pending`.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC that owns the VSwitch.
	VpcId string `pulumi:"vpcId"`
	// ID of the VSwitch.
	VswitchId string `pulumi:"vswitchId"`
	// The name of the VSwitch.
	VswitchName string `pulumi:"vswitchName"`
	// The availability zone of the VSwitch.
	ZoneId string `pulumi:"zoneId"`
}

// GetSwitchesVswitchInput is an input type that accepts GetSwitchesVswitchArgs and GetSwitchesVswitchOutput values.
// You can construct a concrete instance of `GetSwitchesVswitchInput` via:
//
//          GetSwitchesVswitchArgs{...}
type GetSwitchesVswitchInput interface {
	pulumi.Input

	ToGetSwitchesVswitchOutput() GetSwitchesVswitchOutput
	ToGetSwitchesVswitchOutputWithContext(context.Context) GetSwitchesVswitchOutput
}

type GetSwitchesVswitchArgs struct {
	// The available ip address count of the VSwitch.
	AvailableIpAddressCount pulumi.IntInput `pulumi:"availableIpAddressCount"`
	// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Time of creation.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// Description of the VSwitch.
	Description pulumi.StringInput `pulumi:"description"`
	// ID of the VSwitch.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicate whether the VSwitch is created by the system.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// Name of the VSwitch.
	Name pulumi.StringInput `pulumi:"name"`
	// The Id of resource group which VSWitch belongs.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The route table ID of the VSwitch.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The status of the VSwitch. Valid values: `Available` and `Pending`.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// ID of the VPC that owns the VSwitch.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// ID of the VSwitch.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The name of the VSwitch.
	VswitchName pulumi.StringInput `pulumi:"vswitchName"`
	// The availability zone of the VSwitch.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetSwitchesVswitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSwitchesVswitch)(nil)).Elem()
}

func (i GetSwitchesVswitchArgs) ToGetSwitchesVswitchOutput() GetSwitchesVswitchOutput {
	return i.ToGetSwitchesVswitchOutputWithContext(context.Background())
}

func (i GetSwitchesVswitchArgs) ToGetSwitchesVswitchOutputWithContext(ctx context.Context) GetSwitchesVswitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSwitchesVswitchOutput)
}

// GetSwitchesVswitchArrayInput is an input type that accepts GetSwitchesVswitchArray and GetSwitchesVswitchArrayOutput values.
// You can construct a concrete instance of `GetSwitchesVswitchArrayInput` via:
//
//          GetSwitchesVswitchArray{ GetSwitchesVswitchArgs{...} }
type GetSwitchesVswitchArrayInput interface {
	pulumi.Input

	ToGetSwitchesVswitchArrayOutput() GetSwitchesVswitchArrayOutput
	ToGetSwitchesVswitchArrayOutputWithContext(context.Context) GetSwitchesVswitchArrayOutput
}

type GetSwitchesVswitchArray []GetSwitchesVswitchInput

func (GetSwitchesVswitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSwitchesVswitch)(nil)).Elem()
}

func (i GetSwitchesVswitchArray) ToGetSwitchesVswitchArrayOutput() GetSwitchesVswitchArrayOutput {
	return i.ToGetSwitchesVswitchArrayOutputWithContext(context.Background())
}

func (i GetSwitchesVswitchArray) ToGetSwitchesVswitchArrayOutputWithContext(ctx context.Context) GetSwitchesVswitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSwitchesVswitchArrayOutput)
}

type GetSwitchesVswitchOutput struct{ *pulumi.OutputState }

func (GetSwitchesVswitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSwitchesVswitch)(nil)).Elem()
}

func (o GetSwitchesVswitchOutput) ToGetSwitchesVswitchOutput() GetSwitchesVswitchOutput {
	return o
}

func (o GetSwitchesVswitchOutput) ToGetSwitchesVswitchOutputWithContext(ctx context.Context) GetSwitchesVswitchOutput {
	return o
}

// The available ip address count of the VSwitch.
func (o GetSwitchesVswitchOutput) AvailableIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) int { return v.AvailableIpAddressCount }).(pulumi.IntOutput)
}

// Filter results by a specific CIDR block. For example: "172.16.0.0/12".
func (o GetSwitchesVswitchOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// Time of creation.
func (o GetSwitchesVswitchOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Description of the VSwitch.
func (o GetSwitchesVswitchOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the VSwitch.
func (o GetSwitchesVswitchOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.Id }).(pulumi.StringOutput)
}

// Indicate whether the VSwitch is created by the system.
func (o GetSwitchesVswitchOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Name of the VSwitch.
func (o GetSwitchesVswitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.Name }).(pulumi.StringOutput)
}

// The Id of resource group which VSWitch belongs.
func (o GetSwitchesVswitchOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The route table ID of the VSwitch.
func (o GetSwitchesVswitchOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The status of the VSwitch. Valid values: `Available` and `Pending`.
func (o GetSwitchesVswitchOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetSwitchesVswitchOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC that owns the VSwitch.
func (o GetSwitchesVswitchOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.VpcId }).(pulumi.StringOutput)
}

// ID of the VSwitch.
func (o GetSwitchesVswitchOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The name of the VSwitch.
func (o GetSwitchesVswitchOutput) VswitchName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.VswitchName }).(pulumi.StringOutput)
}

// The availability zone of the VSwitch.
func (o GetSwitchesVswitchOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwitchesVswitch) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetSwitchesVswitchArrayOutput struct{ *pulumi.OutputState }

func (GetSwitchesVswitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSwitchesVswitch)(nil)).Elem()
}

func (o GetSwitchesVswitchArrayOutput) ToGetSwitchesVswitchArrayOutput() GetSwitchesVswitchArrayOutput {
	return o
}

func (o GetSwitchesVswitchArrayOutput) ToGetSwitchesVswitchArrayOutputWithContext(ctx context.Context) GetSwitchesVswitchArrayOutput {
	return o
}

func (o GetSwitchesVswitchArrayOutput) Index(i pulumi.IntInput) GetSwitchesVswitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSwitchesVswitch {
		return vs[0].([]GetSwitchesVswitch)[vs[1].(int)]
	}).(GetSwitchesVswitchOutput)
}

func init() {
	pulumi.RegisterOutputType(NatGatewayBandwidthPackageOutput{})
	pulumi.RegisterOutputType(NatGatewayBandwidthPackageArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclAttachmentResourceOutput{})
	pulumi.RegisterOutputType(NetworkAclAttachmentResourceArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclEntriesEgressOutput{})
	pulumi.RegisterOutputType(NetworkAclEntriesEgressArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclEntriesIngressOutput{})
	pulumi.RegisterOutputType(NetworkAclEntriesIngressArrayOutput{})
	pulumi.RegisterOutputType(GetCommonBandwidthPackagesPackageOutput{})
	pulumi.RegisterOutputType(GetCommonBandwidthPackagesPackageArrayOutput{})
	pulumi.RegisterOutputType(GetCommonBandwidthPackagesPackagePublicIpAddressOutput{})
	pulumi.RegisterOutputType(GetCommonBandwidthPackagesPackagePublicIpAddressArrayOutput{})
	pulumi.RegisterOutputType(GetEnhancedNatAvailableZonesZoneOutput{})
	pulumi.RegisterOutputType(GetEnhancedNatAvailableZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetForwardEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetForwardEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetHavipsHavipOutput{})
	pulumi.RegisterOutputType(GetHavipsHavipArrayOutput{})
	pulumi.RegisterOutputType(GetNatGatewaysGatewayOutput{})
	pulumi.RegisterOutputType(GetNatGatewaysGatewayArrayOutput{})
	pulumi.RegisterOutputType(GetNetworksVpcOutput{})
	pulumi.RegisterOutputType(GetNetworksVpcArrayOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetRouteEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteTablesTableOutput{})
	pulumi.RegisterOutputType(GetRouteTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetRouterInterfacesInterfaceOutput{})
	pulumi.RegisterOutputType(GetRouterInterfacesInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetSnatEntriesEntryOutput{})
	pulumi.RegisterOutputType(GetSnatEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(GetSslVpnClientCertsCertOutput{})
	pulumi.RegisterOutputType(GetSslVpnClientCertsCertArrayOutput{})
	pulumi.RegisterOutputType(GetSslVpnServersServerOutput{})
	pulumi.RegisterOutputType(GetSslVpnServersServerArrayOutput{})
	pulumi.RegisterOutputType(GetSwitchesVswitchOutput{})
	pulumi.RegisterOutputType(GetSwitchesVswitchArrayOutput{})
}
