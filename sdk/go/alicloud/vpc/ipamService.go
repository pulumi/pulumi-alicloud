// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Vpc Ipam Service can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpc/ipamService:IpamService example
// ```
type IpamService struct {
	pulumi.CustomResourceState

	// Whether the IPAM service has been activated.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewIpamService registers a new resource with the given unique name, arguments, and options.
func NewIpamService(ctx *pulumi.Context,
	name string, args *IpamServiceArgs, opts ...pulumi.ResourceOption) (*IpamService, error) {
	if args == nil {
		args = &IpamServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamService
	err := ctx.RegisterResource("alicloud:vpc/ipamService:IpamService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamService gets an existing IpamService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamServiceState, opts ...pulumi.ResourceOption) (*IpamService, error) {
	var resource IpamService
	err := ctx.ReadResource("alicloud:vpc/ipamService:IpamService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamService resources.
type ipamServiceState struct {
	// Whether the IPAM service has been activated.
	Enabled *bool `pulumi:"enabled"`
}

type IpamServiceState struct {
	// Whether the IPAM service has been activated.
	Enabled pulumi.BoolPtrInput
}

func (IpamServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamServiceState)(nil)).Elem()
}

type ipamServiceArgs struct {
}

// The set of arguments for constructing a IpamService resource.
type IpamServiceArgs struct {
}

func (IpamServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamServiceArgs)(nil)).Elem()
}

type IpamServiceInput interface {
	pulumi.Input

	ToIpamServiceOutput() IpamServiceOutput
	ToIpamServiceOutputWithContext(ctx context.Context) IpamServiceOutput
}

func (*IpamService) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamService)(nil)).Elem()
}

func (i *IpamService) ToIpamServiceOutput() IpamServiceOutput {
	return i.ToIpamServiceOutputWithContext(context.Background())
}

func (i *IpamService) ToIpamServiceOutputWithContext(ctx context.Context) IpamServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamServiceOutput)
}

// IpamServiceArrayInput is an input type that accepts IpamServiceArray and IpamServiceArrayOutput values.
// You can construct a concrete instance of `IpamServiceArrayInput` via:
//
//	IpamServiceArray{ IpamServiceArgs{...} }
type IpamServiceArrayInput interface {
	pulumi.Input

	ToIpamServiceArrayOutput() IpamServiceArrayOutput
	ToIpamServiceArrayOutputWithContext(context.Context) IpamServiceArrayOutput
}

type IpamServiceArray []IpamServiceInput

func (IpamServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamService)(nil)).Elem()
}

func (i IpamServiceArray) ToIpamServiceArrayOutput() IpamServiceArrayOutput {
	return i.ToIpamServiceArrayOutputWithContext(context.Background())
}

func (i IpamServiceArray) ToIpamServiceArrayOutputWithContext(ctx context.Context) IpamServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamServiceArrayOutput)
}

// IpamServiceMapInput is an input type that accepts IpamServiceMap and IpamServiceMapOutput values.
// You can construct a concrete instance of `IpamServiceMapInput` via:
//
//	IpamServiceMap{ "key": IpamServiceArgs{...} }
type IpamServiceMapInput interface {
	pulumi.Input

	ToIpamServiceMapOutput() IpamServiceMapOutput
	ToIpamServiceMapOutputWithContext(context.Context) IpamServiceMapOutput
}

type IpamServiceMap map[string]IpamServiceInput

func (IpamServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamService)(nil)).Elem()
}

func (i IpamServiceMap) ToIpamServiceMapOutput() IpamServiceMapOutput {
	return i.ToIpamServiceMapOutputWithContext(context.Background())
}

func (i IpamServiceMap) ToIpamServiceMapOutputWithContext(ctx context.Context) IpamServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamServiceMapOutput)
}

type IpamServiceOutput struct{ *pulumi.OutputState }

func (IpamServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamService)(nil)).Elem()
}

func (o IpamServiceOutput) ToIpamServiceOutput() IpamServiceOutput {
	return o
}

func (o IpamServiceOutput) ToIpamServiceOutputWithContext(ctx context.Context) IpamServiceOutput {
	return o
}

// Whether the IPAM service has been activated.
func (o IpamServiceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpamService) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type IpamServiceArrayOutput struct{ *pulumi.OutputState }

func (IpamServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamService)(nil)).Elem()
}

func (o IpamServiceArrayOutput) ToIpamServiceArrayOutput() IpamServiceArrayOutput {
	return o
}

func (o IpamServiceArrayOutput) ToIpamServiceArrayOutputWithContext(ctx context.Context) IpamServiceArrayOutput {
	return o
}

func (o IpamServiceArrayOutput) Index(i pulumi.IntInput) IpamServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpamService {
		return vs[0].([]*IpamService)[vs[1].(int)]
	}).(IpamServiceOutput)
}

type IpamServiceMapOutput struct{ *pulumi.OutputState }

func (IpamServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamService)(nil)).Elem()
}

func (o IpamServiceMapOutput) ToIpamServiceMapOutput() IpamServiceMapOutput {
	return o
}

func (o IpamServiceMapOutput) ToIpamServiceMapOutputWithContext(ctx context.Context) IpamServiceMapOutput {
	return o
}

func (o IpamServiceMapOutput) MapIndex(k pulumi.StringInput) IpamServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpamService {
		return vs[0].(map[string]*IpamService)[vs[1].(string)]
	}).(IpamServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamServiceInput)(nil)).Elem(), &IpamService{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamServiceArrayInput)(nil)).Elem(), IpamServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamServiceMapInput)(nil)).Elem(), IpamServiceMap{})
	pulumi.RegisterOutputType(IpamServiceOutput{})
	pulumi.RegisterOutputType(IpamServiceArrayOutput{})
	pulumi.RegisterOutputType(IpamServiceMapOutput{})
}
