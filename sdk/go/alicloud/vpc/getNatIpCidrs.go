// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the Vpc Nat Ip Cidrs of the current Alibaba Cloud user.
//
// > **NOTE:** Available in v1.136.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ids, err := vpc.GetNatIpCidrs(ctx, &vpc.GetNatIpCidrsArgs{
// 			NatGatewayId: "example_value",
// 			Ids: []string{
// 				"example_value-1",
// 				"example_value-2",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("vpcNatIpCidrId1", ids.Cidrs[0].Id)
// 		nameRegex, err := vpc.GetNatIpCidrs(ctx, &vpc.GetNatIpCidrsArgs{
// 			NatGatewayId: "example_value",
// 			NameRegex:    pulumi.StringRef("^my-NatIpCidr"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("vpcNatIpCidrId2", nameRegex.Cidrs[0].Id)
// 		status, err := vpc.GetNatIpCidrs(ctx, &vpc.GetNatIpCidrsArgs{
// 			NatGatewayId: "example_value",
// 			Ids: []string{
// 				"example_value-1",
// 			},
// 			Status: pulumi.StringRef("Available"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("vpcNatIpCidrId3", status.Cidrs[0].Id)
// 		natIpCidr, err := vpc.GetNatIpCidrs(ctx, &vpc.GetNatIpCidrsArgs{
// 			NatGatewayId: "example_value",
// 			NatIpCidrs: []string{
// 				"example_value-1",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("vpcNatIpCidrId4", natIpCidr.Cidrs[0].Id)
// 		atIpCidrName, err := vpc.GetNatIpCidrs(ctx, &vpc.GetNatIpCidrsArgs{
// 			NatGatewayId: "example_value",
// 			NatIpCidrNames: []string{
// 				"example_value-1",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("vpcNatIpCidrId5", atIpCidrName.Cidrs[0].Id)
// 		return nil
// 	})
// }
// ```
func GetNatIpCidrs(ctx *pulumi.Context, args *GetNatIpCidrsArgs, opts ...pulumi.InvokeOption) (*GetNatIpCidrsResult, error) {
	var rv GetNatIpCidrsResult
	err := ctx.Invoke("alicloud:vpc/getNatIpCidrs:getNatIpCidrs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatIpCidrs.
type GetNatIpCidrsArgs struct {
	// A list of Nat Ip Cidr IDs.
	Ids []string `pulumi:"ids"`
	// A regex string to filter results by Nat Ip Cidr name.
	NameRegex *string `pulumi:"nameRegex"`
	// The ID of the VPC NAT gateway.
	NatGatewayId string `pulumi:"natGatewayId"`
	// NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
	NatIpCidrNames []string `pulumi:"natIpCidrNames"`
	// The NAT CIDR block to be created. Support up to `20`. The CIDR block must meet the following conditions: It must be `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
	NatIpCidrs []string `pulumi:"natIpCidrs"`
	OutputFile *string  `pulumi:"outputFile"`
	// The status of the CIDR block of the NAT gateway. If the value is `Available`, the CIDR block is available.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getNatIpCidrs.
type GetNatIpCidrsResult struct {
	Cidrs []GetNatIpCidrsCidr `pulumi:"cidrs"`
	// The provider-assigned unique ID for this managed resource.
	Id             string   `pulumi:"id"`
	Ids            []string `pulumi:"ids"`
	NameRegex      *string  `pulumi:"nameRegex"`
	Names          []string `pulumi:"names"`
	NatGatewayId   string   `pulumi:"natGatewayId"`
	NatIpCidrNames []string `pulumi:"natIpCidrNames"`
	NatIpCidrs     []string `pulumi:"natIpCidrs"`
	OutputFile     *string  `pulumi:"outputFile"`
	Status         *string  `pulumi:"status"`
}

func GetNatIpCidrsOutput(ctx *pulumi.Context, args GetNatIpCidrsOutputArgs, opts ...pulumi.InvokeOption) GetNatIpCidrsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNatIpCidrsResult, error) {
			args := v.(GetNatIpCidrsArgs)
			r, err := GetNatIpCidrs(ctx, &args, opts...)
			var s GetNatIpCidrsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNatIpCidrsResultOutput)
}

// A collection of arguments for invoking getNatIpCidrs.
type GetNatIpCidrsOutputArgs struct {
	// A list of Nat Ip Cidr IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A regex string to filter results by Nat Ip Cidr name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The ID of the VPC NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
	NatIpCidrNames pulumi.StringArrayInput `pulumi:"natIpCidrNames"`
	// The NAT CIDR block to be created. Support up to `20`. The CIDR block must meet the following conditions: It must be `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
	NatIpCidrs pulumi.StringArrayInput `pulumi:"natIpCidrs"`
	OutputFile pulumi.StringPtrInput   `pulumi:"outputFile"`
	// The status of the CIDR block of the NAT gateway. If the value is `Available`, the CIDR block is available.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetNatIpCidrsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNatIpCidrsArgs)(nil)).Elem()
}

// A collection of values returned by getNatIpCidrs.
type GetNatIpCidrsResultOutput struct{ *pulumi.OutputState }

func (GetNatIpCidrsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNatIpCidrsResult)(nil)).Elem()
}

func (o GetNatIpCidrsResultOutput) ToGetNatIpCidrsResultOutput() GetNatIpCidrsResultOutput {
	return o
}

func (o GetNatIpCidrsResultOutput) ToGetNatIpCidrsResultOutputWithContext(ctx context.Context) GetNatIpCidrsResultOutput {
	return o
}

func (o GetNatIpCidrsResultOutput) Cidrs() GetNatIpCidrsCidrArrayOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) []GetNatIpCidrsCidr { return v.Cidrs }).(GetNatIpCidrsCidrArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNatIpCidrsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNatIpCidrsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetNatIpCidrsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetNatIpCidrsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetNatIpCidrsResultOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

func (o GetNatIpCidrsResultOutput) NatIpCidrNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) []string { return v.NatIpCidrNames }).(pulumi.StringArrayOutput)
}

func (o GetNatIpCidrsResultOutput) NatIpCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) []string { return v.NatIpCidrs }).(pulumi.StringArrayOutput)
}

func (o GetNatIpCidrsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetNatIpCidrsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNatIpCidrsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNatIpCidrsResultOutput{})
}
