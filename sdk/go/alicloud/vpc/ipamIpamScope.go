// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vpc Ipam Ipam Scope resource.
//
// IP Address Management Scope.
//
// For information about Vpc Ipam Ipam Scope and how to use it, see [What is Ipam Scope](https://next.api.alibabacloud.com/document/VpcIpam/2023-02-28/CreateIpamScope).
//
// > **NOTE:** Available since v1.234.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultIpam, err := vpc.NewIpamIpam(ctx, "defaultIpam", &vpc.IpamIpamArgs{
//				OperatingRegionLists: pulumi.StringArray{
//					pulumi.String("cn-hangzhou"),
//				},
//				IpamName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewIpamIpamScope(ctx, "default", &vpc.IpamIpamScopeArgs{
//				IpamScopeName:        pulumi.String(name),
//				IpamId:               defaultIpam.ID(),
//				IpamScopeDescription: pulumi.String("This is a ipam scope."),
//				IpamScopeType:        pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Vpc Ipam Ipam Scope can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpc/ipamIpamScope:IpamIpamScope example <id>
// ```
type IpamIpamScope struct {
	pulumi.CustomResourceState

	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The id of the Ipam instance.
	IpamId pulumi.StringOutput `pulumi:"ipamId"`
	// The description of the IPAM's scope of action.
	// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
	IpamScopeDescription pulumi.StringPtrOutput `pulumi:"ipamScopeDescription"`
	// The name of the resource.
	IpamScopeName pulumi.StringPtrOutput `pulumi:"ipamScopeName"`
	// IPAM scope of action type:
	// `private`.
	//
	// > **NOTE:**  Currently, only the role scope of the private network is supported.
	IpamScopeType pulumi.StringPtrOutput `pulumi:"ipamScopeType"`
	// The region ID of the resource.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewIpamIpamScope registers a new resource with the given unique name, arguments, and options.
func NewIpamIpamScope(ctx *pulumi.Context,
	name string, args *IpamIpamScopeArgs, opts ...pulumi.ResourceOption) (*IpamIpamScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamId == nil {
		return nil, errors.New("invalid value for required argument 'IpamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamIpamScope
	err := ctx.RegisterResource("alicloud:vpc/ipamIpamScope:IpamIpamScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamIpamScope gets an existing IpamIpamScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamIpamScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamIpamScopeState, opts ...pulumi.ResourceOption) (*IpamIpamScope, error) {
	var resource IpamIpamScope
	err := ctx.ReadResource("alicloud:vpc/ipamIpamScope:IpamIpamScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamIpamScope resources.
type ipamIpamScopeState struct {
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// The id of the Ipam instance.
	IpamId *string `pulumi:"ipamId"`
	// The description of the IPAM's scope of action.
	// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
	IpamScopeDescription *string `pulumi:"ipamScopeDescription"`
	// The name of the resource.
	IpamScopeName *string `pulumi:"ipamScopeName"`
	// IPAM scope of action type:
	// `private`.
	//
	// > **NOTE:**  Currently, only the role scope of the private network is supported.
	IpamScopeType *string `pulumi:"ipamScopeType"`
	// The region ID of the resource.
	RegionId *string `pulumi:"regionId"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
}

type IpamIpamScopeState struct {
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// The id of the Ipam instance.
	IpamId pulumi.StringPtrInput
	// The description of the IPAM's scope of action.
	// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
	IpamScopeDescription pulumi.StringPtrInput
	// The name of the resource.
	IpamScopeName pulumi.StringPtrInput
	// IPAM scope of action type:
	// `private`.
	//
	// > **NOTE:**  Currently, only the role scope of the private network is supported.
	IpamScopeType pulumi.StringPtrInput
	// The region ID of the resource.
	RegionId pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
}

func (IpamIpamScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpamScopeState)(nil)).Elem()
}

type ipamIpamScopeArgs struct {
	// The id of the Ipam instance.
	IpamId string `pulumi:"ipamId"`
	// The description of the IPAM's scope of action.
	// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
	IpamScopeDescription *string `pulumi:"ipamScopeDescription"`
	// The name of the resource.
	IpamScopeName *string `pulumi:"ipamScopeName"`
	// IPAM scope of action type:
	// `private`.
	//
	// > **NOTE:**  Currently, only the role scope of the private network is supported.
	IpamScopeType *string `pulumi:"ipamScopeType"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The tag of the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IpamIpamScope resource.
type IpamIpamScopeArgs struct {
	// The id of the Ipam instance.
	IpamId pulumi.StringInput
	// The description of the IPAM's scope of action.
	// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
	IpamScopeDescription pulumi.StringPtrInput
	// The name of the resource.
	IpamScopeName pulumi.StringPtrInput
	// IPAM scope of action type:
	// `private`.
	//
	// > **NOTE:**  Currently, only the role scope of the private network is supported.
	IpamScopeType pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The tag of the resource.
	Tags pulumi.StringMapInput
}

func (IpamIpamScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpamScopeArgs)(nil)).Elem()
}

type IpamIpamScopeInput interface {
	pulumi.Input

	ToIpamIpamScopeOutput() IpamIpamScopeOutput
	ToIpamIpamScopeOutputWithContext(ctx context.Context) IpamIpamScopeOutput
}

func (*IpamIpamScope) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIpamScope)(nil)).Elem()
}

func (i *IpamIpamScope) ToIpamIpamScopeOutput() IpamIpamScopeOutput {
	return i.ToIpamIpamScopeOutputWithContext(context.Background())
}

func (i *IpamIpamScope) ToIpamIpamScopeOutputWithContext(ctx context.Context) IpamIpamScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamScopeOutput)
}

// IpamIpamScopeArrayInput is an input type that accepts IpamIpamScopeArray and IpamIpamScopeArrayOutput values.
// You can construct a concrete instance of `IpamIpamScopeArrayInput` via:
//
//	IpamIpamScopeArray{ IpamIpamScopeArgs{...} }
type IpamIpamScopeArrayInput interface {
	pulumi.Input

	ToIpamIpamScopeArrayOutput() IpamIpamScopeArrayOutput
	ToIpamIpamScopeArrayOutputWithContext(context.Context) IpamIpamScopeArrayOutput
}

type IpamIpamScopeArray []IpamIpamScopeInput

func (IpamIpamScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIpamScope)(nil)).Elem()
}

func (i IpamIpamScopeArray) ToIpamIpamScopeArrayOutput() IpamIpamScopeArrayOutput {
	return i.ToIpamIpamScopeArrayOutputWithContext(context.Background())
}

func (i IpamIpamScopeArray) ToIpamIpamScopeArrayOutputWithContext(ctx context.Context) IpamIpamScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamScopeArrayOutput)
}

// IpamIpamScopeMapInput is an input type that accepts IpamIpamScopeMap and IpamIpamScopeMapOutput values.
// You can construct a concrete instance of `IpamIpamScopeMapInput` via:
//
//	IpamIpamScopeMap{ "key": IpamIpamScopeArgs{...} }
type IpamIpamScopeMapInput interface {
	pulumi.Input

	ToIpamIpamScopeMapOutput() IpamIpamScopeMapOutput
	ToIpamIpamScopeMapOutputWithContext(context.Context) IpamIpamScopeMapOutput
}

type IpamIpamScopeMap map[string]IpamIpamScopeInput

func (IpamIpamScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIpamScope)(nil)).Elem()
}

func (i IpamIpamScopeMap) ToIpamIpamScopeMapOutput() IpamIpamScopeMapOutput {
	return i.ToIpamIpamScopeMapOutputWithContext(context.Background())
}

func (i IpamIpamScopeMap) ToIpamIpamScopeMapOutputWithContext(ctx context.Context) IpamIpamScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpamScopeMapOutput)
}

type IpamIpamScopeOutput struct{ *pulumi.OutputState }

func (IpamIpamScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIpamScope)(nil)).Elem()
}

func (o IpamIpamScopeOutput) ToIpamIpamScopeOutput() IpamIpamScopeOutput {
	return o
}

func (o IpamIpamScopeOutput) ToIpamIpamScopeOutputWithContext(ctx context.Context) IpamIpamScopeOutput {
	return o
}

// The creation time of the resource.
func (o IpamIpamScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the Ipam instance.
func (o IpamIpamScopeOutput) IpamId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringOutput { return v.IpamId }).(pulumi.StringOutput)
}

// The description of the IPAM's scope of action.
// It must be 2 to 256 characters in length and must start with a lowercase letter, but cannot start with 'http:// 'or 'https. If it is not filled in, it is empty. The default value is empty.
func (o IpamIpamScopeOutput) IpamScopeDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringPtrOutput { return v.IpamScopeDescription }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o IpamIpamScopeOutput) IpamScopeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringPtrOutput { return v.IpamScopeName }).(pulumi.StringPtrOutput)
}

// IPAM scope of action type:
// `private`.
//
// > **NOTE:**  Currently, only the role scope of the private network is supported.
func (o IpamIpamScopeOutput) IpamScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringPtrOutput { return v.IpamScopeType }).(pulumi.StringPtrOutput)
}

// The region ID of the resource.
func (o IpamIpamScopeOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o IpamIpamScopeOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The status of the resource.
func (o IpamIpamScopeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag of the resource.
func (o IpamIpamScopeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpamIpamScope) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type IpamIpamScopeArrayOutput struct{ *pulumi.OutputState }

func (IpamIpamScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIpamScope)(nil)).Elem()
}

func (o IpamIpamScopeArrayOutput) ToIpamIpamScopeArrayOutput() IpamIpamScopeArrayOutput {
	return o
}

func (o IpamIpamScopeArrayOutput) ToIpamIpamScopeArrayOutputWithContext(ctx context.Context) IpamIpamScopeArrayOutput {
	return o
}

func (o IpamIpamScopeArrayOutput) Index(i pulumi.IntInput) IpamIpamScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpamIpamScope {
		return vs[0].([]*IpamIpamScope)[vs[1].(int)]
	}).(IpamIpamScopeOutput)
}

type IpamIpamScopeMapOutput struct{ *pulumi.OutputState }

func (IpamIpamScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIpamScope)(nil)).Elem()
}

func (o IpamIpamScopeMapOutput) ToIpamIpamScopeMapOutput() IpamIpamScopeMapOutput {
	return o
}

func (o IpamIpamScopeMapOutput) ToIpamIpamScopeMapOutputWithContext(ctx context.Context) IpamIpamScopeMapOutput {
	return o
}

func (o IpamIpamScopeMapOutput) MapIndex(k pulumi.StringInput) IpamIpamScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpamIpamScope {
		return vs[0].(map[string]*IpamIpamScope)[vs[1].(string)]
	}).(IpamIpamScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamScopeInput)(nil)).Elem(), &IpamIpamScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamScopeArrayInput)(nil)).Elem(), IpamIpamScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpamScopeMapInput)(nil)).Elem(), IpamIpamScopeMap{})
	pulumi.RegisterOutputType(IpamIpamScopeOutput{})
	pulumi.RegisterOutputType(IpamIpamScopeArrayOutput{})
	pulumi.RegisterOutputType(IpamIpamScopeMapOutput{})
}
