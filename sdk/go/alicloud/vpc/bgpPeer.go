// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VPC Bgp Peer resource.
//
// For information about VPC Bgp Peer and how to use it, see [What is Bgp Peer](https://www.alibabacloud.com/help/en/doc-detail/91267.html).
//
// > **NOTE:** Available in v1.153.0+.
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultPhysicalConnections, err := expressconnect.GetPhysicalConnections(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultVirtualBorderRouter, err := expressconnect.NewVirtualBorderRouter(ctx, "defaultVirtualBorderRouter", &expressconnect.VirtualBorderRouterArgs{
// 			LocalGatewayIp:          pulumi.String("10.0.0.1"),
// 			PeerGatewayIp:           pulumi.String("10.0.0.2"),
// 			PeeringSubnetMask:       pulumi.String("255.255.255.252"),
// 			PhysicalConnectionId:    pulumi.String(defaultPhysicalConnections.Connections[0].Id),
// 			VirtualBorderRouterName: pulumi.String("example_value"),
// 			VlanId:                  pulumi.Int(120),
// 			MinRxInterval:           pulumi.Int(1000),
// 			MinTxInterval:           pulumi.Int(1000),
// 			DetectMultiplier:        pulumi.Int(10),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultBgpGroup, err := vpc.NewBgpGroup(ctx, "defaultBgpGroup", &vpc.BgpGroupArgs{
// 			AuthKey:      pulumi.String("YourPassword+12345678"),
// 			BgpGroupName: pulumi.String("example_value"),
// 			Description:  pulumi.String("example_value"),
// 			LocalAsn:     pulumi.Int(64512),
// 			PeerAsn:      pulumi.Int(1111),
// 			RouterId:     defaultVirtualBorderRouter.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vpc.NewBgpPeer(ctx, "defaultBgpPeer", &vpc.BgpPeerArgs{
// 			BfdMultiHop:   pulumi.Int(10),
// 			BgpGroupId:    defaultBgpGroup.ID(),
// 			EnableBfd:     pulumi.Bool(true),
// 			IpVersion:     pulumi.String("IPV4"),
// 			PeerIpAddress: pulumi.String("1.1.1.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VPC Bgp Peer can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import alicloud:vpc/bgpPeer:BgpPeer example <id>
// ```
type BgpPeer struct {
	pulumi.CustomResourceState

	// The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enableBfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
	BfdMultiHop pulumi.IntPtrOutput `pulumi:"bfdMultiHop"`
	// The ID of the BGP group.
	BgpGroupId pulumi.StringOutput `pulumi:"bgpGroupId"`
	// Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
	EnableBfd pulumi.BoolPtrOutput `pulumi:"enableBfd"`
	// The IP version.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// The IP address of the BGP peer.
	PeerIpAddress pulumi.StringPtrOutput `pulumi:"peerIpAddress"`
	// The status of the BGP peer.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBgpPeer registers a new resource with the given unique name, arguments, and options.
func NewBgpPeer(ctx *pulumi.Context,
	name string, args *BgpPeerArgs, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BgpGroupId == nil {
		return nil, errors.New("invalid value for required argument 'BgpGroupId'")
	}
	var resource BgpPeer
	err := ctx.RegisterResource("alicloud:vpc/bgpPeer:BgpPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpPeer gets an existing BgpPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpPeerState, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	var resource BgpPeer
	err := ctx.ReadResource("alicloud:vpc/bgpPeer:BgpPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpPeer resources.
type bgpPeerState struct {
	// The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enableBfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
	BfdMultiHop *int `pulumi:"bfdMultiHop"`
	// The ID of the BGP group.
	BgpGroupId *string `pulumi:"bgpGroupId"`
	// Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
	EnableBfd *bool `pulumi:"enableBfd"`
	// The IP version.
	IpVersion *string `pulumi:"ipVersion"`
	// The IP address of the BGP peer.
	PeerIpAddress *string `pulumi:"peerIpAddress"`
	// The status of the BGP peer.
	Status *string `pulumi:"status"`
}

type BgpPeerState struct {
	// The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enableBfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
	BfdMultiHop pulumi.IntPtrInput
	// The ID of the BGP group.
	BgpGroupId pulumi.StringPtrInput
	// Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
	EnableBfd pulumi.BoolPtrInput
	// The IP version.
	IpVersion pulumi.StringPtrInput
	// The IP address of the BGP peer.
	PeerIpAddress pulumi.StringPtrInput
	// The status of the BGP peer.
	Status pulumi.StringPtrInput
}

func (BgpPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpPeerState)(nil)).Elem()
}

type bgpPeerArgs struct {
	// The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enableBfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
	BfdMultiHop *int `pulumi:"bfdMultiHop"`
	// The ID of the BGP group.
	BgpGroupId string `pulumi:"bgpGroupId"`
	// Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
	EnableBfd *bool `pulumi:"enableBfd"`
	// The IP version.
	IpVersion *string `pulumi:"ipVersion"`
	// The IP address of the BGP peer.
	PeerIpAddress *string `pulumi:"peerIpAddress"`
}

// The set of arguments for constructing a BgpPeer resource.
type BgpPeerArgs struct {
	// The BFD hop count. Valid values: `1` to `255`. **NOTE:** The attribute is valid when the attribute `enableBfd` is `true`. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. You can set a proper value based on the factors that affect the physical connection.
	BfdMultiHop pulumi.IntPtrInput
	// The ID of the BGP group.
	BgpGroupId pulumi.StringInput
	// Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature.
	EnableBfd pulumi.BoolPtrInput
	// The IP version.
	IpVersion pulumi.StringPtrInput
	// The IP address of the BGP peer.
	PeerIpAddress pulumi.StringPtrInput
}

func (BgpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpPeerArgs)(nil)).Elem()
}

type BgpPeerInput interface {
	pulumi.Input

	ToBgpPeerOutput() BgpPeerOutput
	ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput
}

func (*BgpPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpPeer)(nil)).Elem()
}

func (i *BgpPeer) ToBgpPeerOutput() BgpPeerOutput {
	return i.ToBgpPeerOutputWithContext(context.Background())
}

func (i *BgpPeer) ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpPeerOutput)
}

// BgpPeerArrayInput is an input type that accepts BgpPeerArray and BgpPeerArrayOutput values.
// You can construct a concrete instance of `BgpPeerArrayInput` via:
//
//          BgpPeerArray{ BgpPeerArgs{...} }
type BgpPeerArrayInput interface {
	pulumi.Input

	ToBgpPeerArrayOutput() BgpPeerArrayOutput
	ToBgpPeerArrayOutputWithContext(context.Context) BgpPeerArrayOutput
}

type BgpPeerArray []BgpPeerInput

func (BgpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpPeer)(nil)).Elem()
}

func (i BgpPeerArray) ToBgpPeerArrayOutput() BgpPeerArrayOutput {
	return i.ToBgpPeerArrayOutputWithContext(context.Background())
}

func (i BgpPeerArray) ToBgpPeerArrayOutputWithContext(ctx context.Context) BgpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpPeerArrayOutput)
}

// BgpPeerMapInput is an input type that accepts BgpPeerMap and BgpPeerMapOutput values.
// You can construct a concrete instance of `BgpPeerMapInput` via:
//
//          BgpPeerMap{ "key": BgpPeerArgs{...} }
type BgpPeerMapInput interface {
	pulumi.Input

	ToBgpPeerMapOutput() BgpPeerMapOutput
	ToBgpPeerMapOutputWithContext(context.Context) BgpPeerMapOutput
}

type BgpPeerMap map[string]BgpPeerInput

func (BgpPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpPeer)(nil)).Elem()
}

func (i BgpPeerMap) ToBgpPeerMapOutput() BgpPeerMapOutput {
	return i.ToBgpPeerMapOutputWithContext(context.Background())
}

func (i BgpPeerMap) ToBgpPeerMapOutputWithContext(ctx context.Context) BgpPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpPeerMapOutput)
}

type BgpPeerOutput struct{ *pulumi.OutputState }

func (BgpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpPeer)(nil)).Elem()
}

func (o BgpPeerOutput) ToBgpPeerOutput() BgpPeerOutput {
	return o
}

func (o BgpPeerOutput) ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput {
	return o
}

type BgpPeerArrayOutput struct{ *pulumi.OutputState }

func (BgpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpPeer)(nil)).Elem()
}

func (o BgpPeerArrayOutput) ToBgpPeerArrayOutput() BgpPeerArrayOutput {
	return o
}

func (o BgpPeerArrayOutput) ToBgpPeerArrayOutputWithContext(ctx context.Context) BgpPeerArrayOutput {
	return o
}

func (o BgpPeerArrayOutput) Index(i pulumi.IntInput) BgpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BgpPeer {
		return vs[0].([]*BgpPeer)[vs[1].(int)]
	}).(BgpPeerOutput)
}

type BgpPeerMapOutput struct{ *pulumi.OutputState }

func (BgpPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpPeer)(nil)).Elem()
}

func (o BgpPeerMapOutput) ToBgpPeerMapOutput() BgpPeerMapOutput {
	return o
}

func (o BgpPeerMapOutput) ToBgpPeerMapOutputWithContext(ctx context.Context) BgpPeerMapOutput {
	return o
}

func (o BgpPeerMapOutput) MapIndex(k pulumi.StringInput) BgpPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BgpPeer {
		return vs[0].(map[string]*BgpPeer)[vs[1].(string)]
	}).(BgpPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpPeerInput)(nil)).Elem(), &BgpPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpPeerArrayInput)(nil)).Elem(), BgpPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpPeerMapInput)(nil)).Elem(), BgpPeerMap{})
	pulumi.RegisterOutputType(BgpPeerOutput{})
	pulumi.RegisterOutputType(BgpPeerArrayOutput{})
	pulumi.RegisterOutputType(BgpPeerMapOutput{})
}
