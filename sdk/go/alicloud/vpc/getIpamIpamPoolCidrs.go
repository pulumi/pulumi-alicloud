// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides Vpc Ipam Ipam Pool Cidr available to the user.[What is Ipam Pool Cidr](https://next.api.alibabacloud.com/document/VpcIpam/2023-02-28/AddIpamPoolCidr)
//
// > **NOTE:** Available since v1.241.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// name := "terraform-example";
// if param := cfg.Get("name"); param != ""{
// name = param
// }
// defaultIpam, err := vpc.NewIpamIpam(ctx, "defaultIpam", &vpc.IpamIpamArgs{
// OperatingRegionLists: pulumi.StringArray{
// pulumi.String("cn-hangzhou"),
// },
// })
// if err != nil {
// return err
// }
// defaultIpamPool, err := vpc.NewIpamIpamPool(ctx, "defaultIpamPool", &vpc.IpamIpamPoolArgs{
// IpamScopeId: defaultIpam.PrivateDefaultScopeId,
// PoolRegionId: defaultIpam.RegionId,
// IpVersion: pulumi.String("IPv4"),
// })
// if err != nil {
// return err
// }
// defaultIpamIpamPoolCidr, err := vpc.NewIpamIpamPoolCidr(ctx, "default", &vpc.IpamIpamPoolCidrArgs{
// Cidr: pulumi.String("10.0.0.0/8"),
// IpamPoolId: defaultIpamPool.ID(),
// })
// if err != nil {
// return err
// }
// _default := vpc.GetIpamIpamPoolCidrsOutput(ctx, vpc.GetIpamIpamPoolCidrsOutputArgs{
// Cidr: pulumi.String("10.0.0.0/8"),
// IpamPoolId: defaultIpamIpamPoolCidr.IpamPoolId,
// }, nil);
// ctx.Export("alicloudVpcIpamIpamPoolCidrExampleId", _default.ApplyT(func(_default vpc.GetIpamIpamPoolCidrsResult) (*string, error) {
// return &default.Cidrs[0].Id, nil
// }).(pulumi.StringPtrOutput))
// return nil
// })
// }
// ```
func GetIpamIpamPoolCidrs(ctx *pulumi.Context, args *GetIpamIpamPoolCidrsArgs, opts ...pulumi.InvokeOption) (*GetIpamIpamPoolCidrsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpamIpamPoolCidrsResult
	err := ctx.Invoke("alicloud:vpc/getIpamIpamPoolCidrs:getIpamIpamPoolCidrs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpamIpamPoolCidrs.
type GetIpamIpamPoolCidrsArgs struct {
	// The CIDR address segment to be preset.> currently, only IPv4 address segments are supported.
	Cidr *string `pulumi:"cidr"`
	// The ID of the IPAM pool instance.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getIpamIpamPoolCidrs.
type GetIpamIpamPoolCidrsResult struct {
	// The CIDR address segment to be preset.> currently, only IPv4 address segments are supported.
	Cidr *string `pulumi:"cidr"`
	// A list of Ipam Pool Cidr Entries. Each element contains the following attributes:
	Cidrs []GetIpamIpamPoolCidrsCidr `pulumi:"cidrs"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the IPAM pool instance.
	IpamPoolId string  `pulumi:"ipamPoolId"`
	OutputFile *string `pulumi:"outputFile"`
}

func GetIpamIpamPoolCidrsOutput(ctx *pulumi.Context, args GetIpamIpamPoolCidrsOutputArgs, opts ...pulumi.InvokeOption) GetIpamIpamPoolCidrsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIpamIpamPoolCidrsResultOutput, error) {
			args := v.(GetIpamIpamPoolCidrsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("alicloud:vpc/getIpamIpamPoolCidrs:getIpamIpamPoolCidrs", args, GetIpamIpamPoolCidrsResultOutput{}, options).(GetIpamIpamPoolCidrsResultOutput), nil
		}).(GetIpamIpamPoolCidrsResultOutput)
}

// A collection of arguments for invoking getIpamIpamPoolCidrs.
type GetIpamIpamPoolCidrsOutputArgs struct {
	// The CIDR address segment to be preset.> currently, only IPv4 address segments are supported.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The ID of the IPAM pool instance.
	IpamPoolId pulumi.StringInput `pulumi:"ipamPoolId"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetIpamIpamPoolCidrsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpamIpamPoolCidrsArgs)(nil)).Elem()
}

// A collection of values returned by getIpamIpamPoolCidrs.
type GetIpamIpamPoolCidrsResultOutput struct{ *pulumi.OutputState }

func (GetIpamIpamPoolCidrsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpamIpamPoolCidrsResult)(nil)).Elem()
}

func (o GetIpamIpamPoolCidrsResultOutput) ToGetIpamIpamPoolCidrsResultOutput() GetIpamIpamPoolCidrsResultOutput {
	return o
}

func (o GetIpamIpamPoolCidrsResultOutput) ToGetIpamIpamPoolCidrsResultOutputWithContext(ctx context.Context) GetIpamIpamPoolCidrsResultOutput {
	return o
}

// The CIDR address segment to be preset.> currently, only IPv4 address segments are supported.
func (o GetIpamIpamPoolCidrsResultOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpamIpamPoolCidrsResult) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// A list of Ipam Pool Cidr Entries. Each element contains the following attributes:
func (o GetIpamIpamPoolCidrsResultOutput) Cidrs() GetIpamIpamPoolCidrsCidrArrayOutput {
	return o.ApplyT(func(v GetIpamIpamPoolCidrsResult) []GetIpamIpamPoolCidrsCidr { return v.Cidrs }).(GetIpamIpamPoolCidrsCidrArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIpamIpamPoolCidrsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpamIpamPoolCidrsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the IPAM pool instance.
func (o GetIpamIpamPoolCidrsResultOutput) IpamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpamIpamPoolCidrsResult) string { return v.IpamPoolId }).(pulumi.StringOutput)
}

func (o GetIpamIpamPoolCidrsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpamIpamPoolCidrsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpamIpamPoolCidrsResultOutput{})
}
