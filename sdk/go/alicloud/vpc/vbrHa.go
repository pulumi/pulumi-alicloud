// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Express Connect Vbr Ha resource.
//
// VBR switching Group.
//
// For information about Express Connect Vbr Ha and how to use it, see [What is Vbr Ha](https://www.alibabacloud.com/help/doc-detail/212629.html).
//
// > **NOTE:** Available since v1.151.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/cen"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/expressconnect"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_default, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := expressconnect.GetPhysicalConnections(ctx, &expressconnect.GetPhysicalConnectionsArgs{
//				NameRegex: pulumi.StringRef("^preserved-NODELETING"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vlanId, err := random.NewInteger(ctx, "vlan_id", &random.IntegerArgs{
//				Max: 2999,
//				Min: 1,
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: fmt.Sprintf("%v%v", name, "-%d"),
//				Args: []float64{
//					val0 + 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleVirtualBorderRouter []*expressconnect.VirtualBorderRouter
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := expressconnect.NewVirtualBorderRouter(ctx, fmt.Sprintf("example-%v", key0), &expressconnect.VirtualBorderRouterArgs{
//					LocalGatewayIp:          pulumi.String("10.0.0.1"),
//					PeerGatewayIp:           pulumi.String("10.0.0.2"),
//					PeeringSubnetMask:       pulumi.String("255.255.255.252"),
//					PhysicalConnectionId:    example.Connections[val0].Id,
//					VirtualBorderRouterName: pulumi.String(invokeFormat.Result),
//					VlanId:                  int(vlanId.Id + val0),
//					MinRxInterval:           pulumi.Int(1000),
//					MinTxInterval:           pulumi.Int(1000),
//					DetectMultiplier:        pulumi.Int(10),
//				})
//				if err != nil {
//					return err
//				}
//				exampleVirtualBorderRouter = append(exampleVirtualBorderRouter, __res)
//			}
//			exampleInstance, err := cen.NewInstance(ctx, "example", &cen.InstanceArgs{
//				CenInstanceName: pulumi.String(name),
//				Description:     pulumi.String(name),
//				ProtectionLevel: pulumi.String("REDUCED"),
//			})
//			if err != nil {
//				return err
//			}
//			var exampleInstanceAttachment []*cen.InstanceAttachment
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := cen.NewInstanceAttachment(ctx, fmt.Sprintf("example-%v", key0), &cen.InstanceAttachmentArgs{
//					InstanceId:            exampleInstance.ID(),
//					ChildInstanceId:       exampleVirtualBorderRouter[val0].ID(),
//					ChildInstanceType:     pulumi.String("VBR"),
//					ChildInstanceRegionId: pulumi.String(_default.Regions[0].Id),
//				})
//				if err != nil {
//					return err
//				}
//				exampleInstanceAttachment = append(exampleInstanceAttachment, __res)
//			}
//			_, err = vpc.NewVbrHa(ctx, "example", &vpc.VbrHaArgs{
//				VbrId:       exampleInstanceAttachment[0].ChildInstanceId,
//				PeerVbrId:   exampleInstanceAttachment[1].ChildInstanceId,
//				VbrHaName:   pulumi.String(name),
//				Description: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Connect Vbr Ha can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:vpc/vbrHa:VbrHa example <id>
// ```
type VbrHa struct {
	pulumi.CustomResourceState

	// The creation time of the VBR.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the VBR switching group.
	// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to PreCheck only this request. Value range:
	// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
	// - *false** (default): Send a normal request and start the instance directly after passing the check.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// The instance ID of another VBR in The VBR switching group.
	PeerVbrId pulumi.StringOutput `pulumi:"peerVbrId"`
	// The ID of the region to which the VBR belongs.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Status of VBR switching Group
	Status pulumi.StringOutput `pulumi:"status"`
	// VBR switch group name.
	VbrHaName pulumi.StringPtrOutput `pulumi:"vbrHaName"`
	// The VBR instance ID.
	VbrId pulumi.StringOutput `pulumi:"vbrId"`
}

// NewVbrHa registers a new resource with the given unique name, arguments, and options.
func NewVbrHa(ctx *pulumi.Context,
	name string, args *VbrHaArgs, opts ...pulumi.ResourceOption) (*VbrHa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVbrId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVbrId'")
	}
	if args.VbrId == nil {
		return nil, errors.New("invalid value for required argument 'VbrId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VbrHa
	err := ctx.RegisterResource("alicloud:vpc/vbrHa:VbrHa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVbrHa gets an existing VbrHa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVbrHa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VbrHaState, opts ...pulumi.ResourceOption) (*VbrHa, error) {
	var resource VbrHa
	err := ctx.ReadResource("alicloud:vpc/vbrHa:VbrHa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VbrHa resources.
type vbrHaState struct {
	// The creation time of the VBR.
	CreateTime *string `pulumi:"createTime"`
	// The description of the VBR switching group.
	// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
	Description *string `pulumi:"description"`
	// Whether to PreCheck only this request. Value range:
	// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
	// - *false** (default): Send a normal request and start the instance directly after passing the check.
	DryRun *bool `pulumi:"dryRun"`
	// The instance ID of another VBR in The VBR switching group.
	PeerVbrId *string `pulumi:"peerVbrId"`
	// The ID of the region to which the VBR belongs.
	RegionId *string `pulumi:"regionId"`
	// Status of VBR switching Group
	Status *string `pulumi:"status"`
	// VBR switch group name.
	VbrHaName *string `pulumi:"vbrHaName"`
	// The VBR instance ID.
	VbrId *string `pulumi:"vbrId"`
}

type VbrHaState struct {
	// The creation time of the VBR.
	CreateTime pulumi.StringPtrInput
	// The description of the VBR switching group.
	// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
	Description pulumi.StringPtrInput
	// Whether to PreCheck only this request. Value range:
	// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
	// - *false** (default): Send a normal request and start the instance directly after passing the check.
	DryRun pulumi.BoolPtrInput
	// The instance ID of another VBR in The VBR switching group.
	PeerVbrId pulumi.StringPtrInput
	// The ID of the region to which the VBR belongs.
	RegionId pulumi.StringPtrInput
	// Status of VBR switching Group
	Status pulumi.StringPtrInput
	// VBR switch group name.
	VbrHaName pulumi.StringPtrInput
	// The VBR instance ID.
	VbrId pulumi.StringPtrInput
}

func (VbrHaState) ElementType() reflect.Type {
	return reflect.TypeOf((*vbrHaState)(nil)).Elem()
}

type vbrHaArgs struct {
	// The description of the VBR switching group.
	// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
	Description *string `pulumi:"description"`
	// Whether to PreCheck only this request. Value range:
	// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
	// - *false** (default): Send a normal request and start the instance directly after passing the check.
	DryRun *bool `pulumi:"dryRun"`
	// The instance ID of another VBR in The VBR switching group.
	PeerVbrId string `pulumi:"peerVbrId"`
	// VBR switch group name.
	VbrHaName *string `pulumi:"vbrHaName"`
	// The VBR instance ID.
	VbrId string `pulumi:"vbrId"`
}

// The set of arguments for constructing a VbrHa resource.
type VbrHaArgs struct {
	// The description of the VBR switching group.
	// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
	Description pulumi.StringPtrInput
	// Whether to PreCheck only this request. Value range:
	// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
	// - *false** (default): Send a normal request and start the instance directly after passing the check.
	DryRun pulumi.BoolPtrInput
	// The instance ID of another VBR in The VBR switching group.
	PeerVbrId pulumi.StringInput
	// VBR switch group name.
	VbrHaName pulumi.StringPtrInput
	// The VBR instance ID.
	VbrId pulumi.StringInput
}

func (VbrHaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vbrHaArgs)(nil)).Elem()
}

type VbrHaInput interface {
	pulumi.Input

	ToVbrHaOutput() VbrHaOutput
	ToVbrHaOutputWithContext(ctx context.Context) VbrHaOutput
}

func (*VbrHa) ElementType() reflect.Type {
	return reflect.TypeOf((**VbrHa)(nil)).Elem()
}

func (i *VbrHa) ToVbrHaOutput() VbrHaOutput {
	return i.ToVbrHaOutputWithContext(context.Background())
}

func (i *VbrHa) ToVbrHaOutputWithContext(ctx context.Context) VbrHaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VbrHaOutput)
}

// VbrHaArrayInput is an input type that accepts VbrHaArray and VbrHaArrayOutput values.
// You can construct a concrete instance of `VbrHaArrayInput` via:
//
//	VbrHaArray{ VbrHaArgs{...} }
type VbrHaArrayInput interface {
	pulumi.Input

	ToVbrHaArrayOutput() VbrHaArrayOutput
	ToVbrHaArrayOutputWithContext(context.Context) VbrHaArrayOutput
}

type VbrHaArray []VbrHaInput

func (VbrHaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VbrHa)(nil)).Elem()
}

func (i VbrHaArray) ToVbrHaArrayOutput() VbrHaArrayOutput {
	return i.ToVbrHaArrayOutputWithContext(context.Background())
}

func (i VbrHaArray) ToVbrHaArrayOutputWithContext(ctx context.Context) VbrHaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VbrHaArrayOutput)
}

// VbrHaMapInput is an input type that accepts VbrHaMap and VbrHaMapOutput values.
// You can construct a concrete instance of `VbrHaMapInput` via:
//
//	VbrHaMap{ "key": VbrHaArgs{...} }
type VbrHaMapInput interface {
	pulumi.Input

	ToVbrHaMapOutput() VbrHaMapOutput
	ToVbrHaMapOutputWithContext(context.Context) VbrHaMapOutput
}

type VbrHaMap map[string]VbrHaInput

func (VbrHaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VbrHa)(nil)).Elem()
}

func (i VbrHaMap) ToVbrHaMapOutput() VbrHaMapOutput {
	return i.ToVbrHaMapOutputWithContext(context.Background())
}

func (i VbrHaMap) ToVbrHaMapOutputWithContext(ctx context.Context) VbrHaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VbrHaMapOutput)
}

type VbrHaOutput struct{ *pulumi.OutputState }

func (VbrHaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VbrHa)(nil)).Elem()
}

func (o VbrHaOutput) ToVbrHaOutput() VbrHaOutput {
	return o
}

func (o VbrHaOutput) ToVbrHaOutputWithContext(ctx context.Context) VbrHaOutput {
	return o
}

// The creation time of the VBR.
func (o VbrHaOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the VBR switching group.
// It must be 2 to 256 characters in length and must start with a letter or Chinese, but cannot start with 'http:// 'or 'https.
func (o VbrHaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to PreCheck only this request. Value range:
// - *true**: The check request is sent and the instance is not started. Check whether the required parameters, request format, and instance status are filled in. If the check does not pass, the corresponding error is returned. If the check passes, DRYRUN.SUCCESS is returned.
// - *false** (default): Send a normal request and start the instance directly after passing the check.
func (o VbrHaOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// The instance ID of another VBR in The VBR switching group.
func (o VbrHaOutput) PeerVbrId() pulumi.StringOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringOutput { return v.PeerVbrId }).(pulumi.StringOutput)
}

// The ID of the region to which the VBR belongs.
func (o VbrHaOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Status of VBR switching Group
func (o VbrHaOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// VBR switch group name.
func (o VbrHaOutput) VbrHaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringPtrOutput { return v.VbrHaName }).(pulumi.StringPtrOutput)
}

// The VBR instance ID.
func (o VbrHaOutput) VbrId() pulumi.StringOutput {
	return o.ApplyT(func(v *VbrHa) pulumi.StringOutput { return v.VbrId }).(pulumi.StringOutput)
}

type VbrHaArrayOutput struct{ *pulumi.OutputState }

func (VbrHaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VbrHa)(nil)).Elem()
}

func (o VbrHaArrayOutput) ToVbrHaArrayOutput() VbrHaArrayOutput {
	return o
}

func (o VbrHaArrayOutput) ToVbrHaArrayOutputWithContext(ctx context.Context) VbrHaArrayOutput {
	return o
}

func (o VbrHaArrayOutput) Index(i pulumi.IntInput) VbrHaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VbrHa {
		return vs[0].([]*VbrHa)[vs[1].(int)]
	}).(VbrHaOutput)
}

type VbrHaMapOutput struct{ *pulumi.OutputState }

func (VbrHaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VbrHa)(nil)).Elem()
}

func (o VbrHaMapOutput) ToVbrHaMapOutput() VbrHaMapOutput {
	return o
}

func (o VbrHaMapOutput) ToVbrHaMapOutputWithContext(ctx context.Context) VbrHaMapOutput {
	return o
}

func (o VbrHaMapOutput) MapIndex(k pulumi.StringInput) VbrHaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VbrHa {
		return vs[0].(map[string]*VbrHa)[vs[1].(string)]
	}).(VbrHaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VbrHaInput)(nil)).Elem(), &VbrHa{})
	pulumi.RegisterInputType(reflect.TypeOf((*VbrHaArrayInput)(nil)).Elem(), VbrHaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VbrHaMapInput)(nil)).Elem(), VbrHaMap{})
	pulumi.RegisterOutputType(VbrHaOutput{})
	pulumi.RegisterOutputType(VbrHaArrayOutput{})
	pulumi.RegisterOutputType(VbrHaMapOutput{})
}
