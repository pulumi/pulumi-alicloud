// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sae

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApplicationConfigMapMountDescV2 struct {
	// The ID of the ConfigMap.
	ConfigMapId *string `pulumi:"configMapId"`
	// The key.
	Key *string `pulumi:"key"`
	// The path of the container in SAE.
	MountPath *string `pulumi:"mountPath"`
}

// ApplicationConfigMapMountDescV2Input is an input type that accepts ApplicationConfigMapMountDescV2Args and ApplicationConfigMapMountDescV2Output values.
// You can construct a concrete instance of `ApplicationConfigMapMountDescV2Input` via:
//
//	ApplicationConfigMapMountDescV2Args{...}
type ApplicationConfigMapMountDescV2Input interface {
	pulumi.Input

	ToApplicationConfigMapMountDescV2Output() ApplicationConfigMapMountDescV2Output
	ToApplicationConfigMapMountDescV2OutputWithContext(context.Context) ApplicationConfigMapMountDescV2Output
}

type ApplicationConfigMapMountDescV2Args struct {
	// The ID of the ConfigMap.
	ConfigMapId pulumi.StringPtrInput `pulumi:"configMapId"`
	// The key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The path of the container in SAE.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
}

func (ApplicationConfigMapMountDescV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationConfigMapMountDescV2)(nil)).Elem()
}

func (i ApplicationConfigMapMountDescV2Args) ToApplicationConfigMapMountDescV2Output() ApplicationConfigMapMountDescV2Output {
	return i.ToApplicationConfigMapMountDescV2OutputWithContext(context.Background())
}

func (i ApplicationConfigMapMountDescV2Args) ToApplicationConfigMapMountDescV2OutputWithContext(ctx context.Context) ApplicationConfigMapMountDescV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConfigMapMountDescV2Output)
}

func (i ApplicationConfigMapMountDescV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationConfigMapMountDescV2] {
	return pulumix.Output[ApplicationConfigMapMountDescV2]{
		OutputState: i.ToApplicationConfigMapMountDescV2OutputWithContext(ctx).OutputState,
	}
}

// ApplicationConfigMapMountDescV2ArrayInput is an input type that accepts ApplicationConfigMapMountDescV2Array and ApplicationConfigMapMountDescV2ArrayOutput values.
// You can construct a concrete instance of `ApplicationConfigMapMountDescV2ArrayInput` via:
//
//	ApplicationConfigMapMountDescV2Array{ ApplicationConfigMapMountDescV2Args{...} }
type ApplicationConfigMapMountDescV2ArrayInput interface {
	pulumi.Input

	ToApplicationConfigMapMountDescV2ArrayOutput() ApplicationConfigMapMountDescV2ArrayOutput
	ToApplicationConfigMapMountDescV2ArrayOutputWithContext(context.Context) ApplicationConfigMapMountDescV2ArrayOutput
}

type ApplicationConfigMapMountDescV2Array []ApplicationConfigMapMountDescV2Input

func (ApplicationConfigMapMountDescV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationConfigMapMountDescV2)(nil)).Elem()
}

func (i ApplicationConfigMapMountDescV2Array) ToApplicationConfigMapMountDescV2ArrayOutput() ApplicationConfigMapMountDescV2ArrayOutput {
	return i.ToApplicationConfigMapMountDescV2ArrayOutputWithContext(context.Background())
}

func (i ApplicationConfigMapMountDescV2Array) ToApplicationConfigMapMountDescV2ArrayOutputWithContext(ctx context.Context) ApplicationConfigMapMountDescV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConfigMapMountDescV2ArrayOutput)
}

func (i ApplicationConfigMapMountDescV2Array) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationConfigMapMountDescV2] {
	return pulumix.Output[[]ApplicationConfigMapMountDescV2]{
		OutputState: i.ToApplicationConfigMapMountDescV2ArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationConfigMapMountDescV2Output struct{ *pulumi.OutputState }

func (ApplicationConfigMapMountDescV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationConfigMapMountDescV2)(nil)).Elem()
}

func (o ApplicationConfigMapMountDescV2Output) ToApplicationConfigMapMountDescV2Output() ApplicationConfigMapMountDescV2Output {
	return o
}

func (o ApplicationConfigMapMountDescV2Output) ToApplicationConfigMapMountDescV2OutputWithContext(ctx context.Context) ApplicationConfigMapMountDescV2Output {
	return o
}

func (o ApplicationConfigMapMountDescV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationConfigMapMountDescV2] {
	return pulumix.Output[ApplicationConfigMapMountDescV2]{
		OutputState: o.OutputState,
	}
}

// The ID of the ConfigMap.
func (o ApplicationConfigMapMountDescV2Output) ConfigMapId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConfigMapMountDescV2) *string { return v.ConfigMapId }).(pulumi.StringPtrOutput)
}

// The key.
func (o ApplicationConfigMapMountDescV2Output) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConfigMapMountDescV2) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The path of the container in SAE.
func (o ApplicationConfigMapMountDescV2Output) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConfigMapMountDescV2) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

type ApplicationConfigMapMountDescV2ArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConfigMapMountDescV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationConfigMapMountDescV2)(nil)).Elem()
}

func (o ApplicationConfigMapMountDescV2ArrayOutput) ToApplicationConfigMapMountDescV2ArrayOutput() ApplicationConfigMapMountDescV2ArrayOutput {
	return o
}

func (o ApplicationConfigMapMountDescV2ArrayOutput) ToApplicationConfigMapMountDescV2ArrayOutputWithContext(ctx context.Context) ApplicationConfigMapMountDescV2ArrayOutput {
	return o
}

func (o ApplicationConfigMapMountDescV2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationConfigMapMountDescV2] {
	return pulumix.Output[[]ApplicationConfigMapMountDescV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationConfigMapMountDescV2ArrayOutput) Index(i pulumi.IntInput) ApplicationConfigMapMountDescV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationConfigMapMountDescV2 {
		return vs[0].([]ApplicationConfigMapMountDescV2)[vs[1].(int)]
	}).(ApplicationConfigMapMountDescV2Output)
}

type ApplicationCustomHostAliasV2 struct {
	// The domain name or hostname.
	HostName *string `pulumi:"hostName"`
	// The IP address.
	Ip *string `pulumi:"ip"`
}

// ApplicationCustomHostAliasV2Input is an input type that accepts ApplicationCustomHostAliasV2Args and ApplicationCustomHostAliasV2Output values.
// You can construct a concrete instance of `ApplicationCustomHostAliasV2Input` via:
//
//	ApplicationCustomHostAliasV2Args{...}
type ApplicationCustomHostAliasV2Input interface {
	pulumi.Input

	ToApplicationCustomHostAliasV2Output() ApplicationCustomHostAliasV2Output
	ToApplicationCustomHostAliasV2OutputWithContext(context.Context) ApplicationCustomHostAliasV2Output
}

type ApplicationCustomHostAliasV2Args struct {
	// The domain name or hostname.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// The IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ApplicationCustomHostAliasV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCustomHostAliasV2)(nil)).Elem()
}

func (i ApplicationCustomHostAliasV2Args) ToApplicationCustomHostAliasV2Output() ApplicationCustomHostAliasV2Output {
	return i.ToApplicationCustomHostAliasV2OutputWithContext(context.Background())
}

func (i ApplicationCustomHostAliasV2Args) ToApplicationCustomHostAliasV2OutputWithContext(ctx context.Context) ApplicationCustomHostAliasV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCustomHostAliasV2Output)
}

func (i ApplicationCustomHostAliasV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationCustomHostAliasV2] {
	return pulumix.Output[ApplicationCustomHostAliasV2]{
		OutputState: i.ToApplicationCustomHostAliasV2OutputWithContext(ctx).OutputState,
	}
}

// ApplicationCustomHostAliasV2ArrayInput is an input type that accepts ApplicationCustomHostAliasV2Array and ApplicationCustomHostAliasV2ArrayOutput values.
// You can construct a concrete instance of `ApplicationCustomHostAliasV2ArrayInput` via:
//
//	ApplicationCustomHostAliasV2Array{ ApplicationCustomHostAliasV2Args{...} }
type ApplicationCustomHostAliasV2ArrayInput interface {
	pulumi.Input

	ToApplicationCustomHostAliasV2ArrayOutput() ApplicationCustomHostAliasV2ArrayOutput
	ToApplicationCustomHostAliasV2ArrayOutputWithContext(context.Context) ApplicationCustomHostAliasV2ArrayOutput
}

type ApplicationCustomHostAliasV2Array []ApplicationCustomHostAliasV2Input

func (ApplicationCustomHostAliasV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCustomHostAliasV2)(nil)).Elem()
}

func (i ApplicationCustomHostAliasV2Array) ToApplicationCustomHostAliasV2ArrayOutput() ApplicationCustomHostAliasV2ArrayOutput {
	return i.ToApplicationCustomHostAliasV2ArrayOutputWithContext(context.Background())
}

func (i ApplicationCustomHostAliasV2Array) ToApplicationCustomHostAliasV2ArrayOutputWithContext(ctx context.Context) ApplicationCustomHostAliasV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCustomHostAliasV2ArrayOutput)
}

func (i ApplicationCustomHostAliasV2Array) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationCustomHostAliasV2] {
	return pulumix.Output[[]ApplicationCustomHostAliasV2]{
		OutputState: i.ToApplicationCustomHostAliasV2ArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationCustomHostAliasV2Output struct{ *pulumi.OutputState }

func (ApplicationCustomHostAliasV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCustomHostAliasV2)(nil)).Elem()
}

func (o ApplicationCustomHostAliasV2Output) ToApplicationCustomHostAliasV2Output() ApplicationCustomHostAliasV2Output {
	return o
}

func (o ApplicationCustomHostAliasV2Output) ToApplicationCustomHostAliasV2OutputWithContext(ctx context.Context) ApplicationCustomHostAliasV2Output {
	return o
}

func (o ApplicationCustomHostAliasV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationCustomHostAliasV2] {
	return pulumix.Output[ApplicationCustomHostAliasV2]{
		OutputState: o.OutputState,
	}
}

// The domain name or hostname.
func (o ApplicationCustomHostAliasV2Output) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCustomHostAliasV2) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// The IP address.
func (o ApplicationCustomHostAliasV2Output) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCustomHostAliasV2) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ApplicationCustomHostAliasV2ArrayOutput struct{ *pulumi.OutputState }

func (ApplicationCustomHostAliasV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCustomHostAliasV2)(nil)).Elem()
}

func (o ApplicationCustomHostAliasV2ArrayOutput) ToApplicationCustomHostAliasV2ArrayOutput() ApplicationCustomHostAliasV2ArrayOutput {
	return o
}

func (o ApplicationCustomHostAliasV2ArrayOutput) ToApplicationCustomHostAliasV2ArrayOutputWithContext(ctx context.Context) ApplicationCustomHostAliasV2ArrayOutput {
	return o
}

func (o ApplicationCustomHostAliasV2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationCustomHostAliasV2] {
	return pulumix.Output[[]ApplicationCustomHostAliasV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCustomHostAliasV2ArrayOutput) Index(i pulumi.IntInput) ApplicationCustomHostAliasV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationCustomHostAliasV2 {
		return vs[0].([]ApplicationCustomHostAliasV2)[vs[1].(int)]
	}).(ApplicationCustomHostAliasV2Output)
}

type ApplicationKafkaConfigs struct {
	// One or more logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
	KafkaConfigs []ApplicationKafkaConfigsKafkaConfig `pulumi:"kafkaConfigs"`
	// The endpoint of the ApsaraMQ for Kafka API.
	KafkaEndpoint *string `pulumi:"kafkaEndpoint"`
	// The  ID of the ApsaraMQ for Kafka instance.
	KafkaInstanceId *string `pulumi:"kafkaInstanceId"`
}

// ApplicationKafkaConfigsInput is an input type that accepts ApplicationKafkaConfigsArgs and ApplicationKafkaConfigsOutput values.
// You can construct a concrete instance of `ApplicationKafkaConfigsInput` via:
//
//	ApplicationKafkaConfigsArgs{...}
type ApplicationKafkaConfigsInput interface {
	pulumi.Input

	ToApplicationKafkaConfigsOutput() ApplicationKafkaConfigsOutput
	ToApplicationKafkaConfigsOutputWithContext(context.Context) ApplicationKafkaConfigsOutput
}

type ApplicationKafkaConfigsArgs struct {
	// One or more logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
	KafkaConfigs ApplicationKafkaConfigsKafkaConfigArrayInput `pulumi:"kafkaConfigs"`
	// The endpoint of the ApsaraMQ for Kafka API.
	KafkaEndpoint pulumi.StringPtrInput `pulumi:"kafkaEndpoint"`
	// The  ID of the ApsaraMQ for Kafka instance.
	KafkaInstanceId pulumi.StringPtrInput `pulumi:"kafkaInstanceId"`
}

func (ApplicationKafkaConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKafkaConfigs)(nil)).Elem()
}

func (i ApplicationKafkaConfigsArgs) ToApplicationKafkaConfigsOutput() ApplicationKafkaConfigsOutput {
	return i.ToApplicationKafkaConfigsOutputWithContext(context.Background())
}

func (i ApplicationKafkaConfigsArgs) ToApplicationKafkaConfigsOutputWithContext(ctx context.Context) ApplicationKafkaConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKafkaConfigsOutput)
}

func (i ApplicationKafkaConfigsArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKafkaConfigs] {
	return pulumix.Output[ApplicationKafkaConfigs]{
		OutputState: i.ToApplicationKafkaConfigsOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationKafkaConfigsArgs) ToApplicationKafkaConfigsPtrOutput() ApplicationKafkaConfigsPtrOutput {
	return i.ToApplicationKafkaConfigsPtrOutputWithContext(context.Background())
}

func (i ApplicationKafkaConfigsArgs) ToApplicationKafkaConfigsPtrOutputWithContext(ctx context.Context) ApplicationKafkaConfigsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKafkaConfigsOutput).ToApplicationKafkaConfigsPtrOutputWithContext(ctx)
}

// ApplicationKafkaConfigsPtrInput is an input type that accepts ApplicationKafkaConfigsArgs, ApplicationKafkaConfigsPtr and ApplicationKafkaConfigsPtrOutput values.
// You can construct a concrete instance of `ApplicationKafkaConfigsPtrInput` via:
//
//	        ApplicationKafkaConfigsArgs{...}
//
//	or:
//
//	        nil
type ApplicationKafkaConfigsPtrInput interface {
	pulumi.Input

	ToApplicationKafkaConfigsPtrOutput() ApplicationKafkaConfigsPtrOutput
	ToApplicationKafkaConfigsPtrOutputWithContext(context.Context) ApplicationKafkaConfigsPtrOutput
}

type applicationKafkaConfigsPtrType ApplicationKafkaConfigsArgs

func ApplicationKafkaConfigsPtr(v *ApplicationKafkaConfigsArgs) ApplicationKafkaConfigsPtrInput {
	return (*applicationKafkaConfigsPtrType)(v)
}

func (*applicationKafkaConfigsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKafkaConfigs)(nil)).Elem()
}

func (i *applicationKafkaConfigsPtrType) ToApplicationKafkaConfigsPtrOutput() ApplicationKafkaConfigsPtrOutput {
	return i.ToApplicationKafkaConfigsPtrOutputWithContext(context.Background())
}

func (i *applicationKafkaConfigsPtrType) ToApplicationKafkaConfigsPtrOutputWithContext(ctx context.Context) ApplicationKafkaConfigsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKafkaConfigsPtrOutput)
}

func (i *applicationKafkaConfigsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKafkaConfigs] {
	return pulumix.Output[*ApplicationKafkaConfigs]{
		OutputState: i.ToApplicationKafkaConfigsPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationKafkaConfigsOutput struct{ *pulumi.OutputState }

func (ApplicationKafkaConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKafkaConfigs)(nil)).Elem()
}

func (o ApplicationKafkaConfigsOutput) ToApplicationKafkaConfigsOutput() ApplicationKafkaConfigsOutput {
	return o
}

func (o ApplicationKafkaConfigsOutput) ToApplicationKafkaConfigsOutputWithContext(ctx context.Context) ApplicationKafkaConfigsOutput {
	return o
}

func (o ApplicationKafkaConfigsOutput) ToApplicationKafkaConfigsPtrOutput() ApplicationKafkaConfigsPtrOutput {
	return o.ToApplicationKafkaConfigsPtrOutputWithContext(context.Background())
}

func (o ApplicationKafkaConfigsOutput) ToApplicationKafkaConfigsPtrOutputWithContext(ctx context.Context) ApplicationKafkaConfigsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationKafkaConfigs) *ApplicationKafkaConfigs {
		return &v
	}).(ApplicationKafkaConfigsPtrOutput)
}

func (o ApplicationKafkaConfigsOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKafkaConfigs] {
	return pulumix.Output[ApplicationKafkaConfigs]{
		OutputState: o.OutputState,
	}
}

// One or more logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
func (o ApplicationKafkaConfigsOutput) KafkaConfigs() ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigs) []ApplicationKafkaConfigsKafkaConfig { return v.KafkaConfigs }).(ApplicationKafkaConfigsKafkaConfigArrayOutput)
}

// The endpoint of the ApsaraMQ for Kafka API.
func (o ApplicationKafkaConfigsOutput) KafkaEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigs) *string { return v.KafkaEndpoint }).(pulumi.StringPtrOutput)
}

// The  ID of the ApsaraMQ for Kafka instance.
func (o ApplicationKafkaConfigsOutput) KafkaInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigs) *string { return v.KafkaInstanceId }).(pulumi.StringPtrOutput)
}

type ApplicationKafkaConfigsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationKafkaConfigsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKafkaConfigs)(nil)).Elem()
}

func (o ApplicationKafkaConfigsPtrOutput) ToApplicationKafkaConfigsPtrOutput() ApplicationKafkaConfigsPtrOutput {
	return o
}

func (o ApplicationKafkaConfigsPtrOutput) ToApplicationKafkaConfigsPtrOutputWithContext(ctx context.Context) ApplicationKafkaConfigsPtrOutput {
	return o
}

func (o ApplicationKafkaConfigsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKafkaConfigs] {
	return pulumix.Output[*ApplicationKafkaConfigs]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKafkaConfigsPtrOutput) Elem() ApplicationKafkaConfigsOutput {
	return o.ApplyT(func(v *ApplicationKafkaConfigs) ApplicationKafkaConfigs {
		if v != nil {
			return *v
		}
		var ret ApplicationKafkaConfigs
		return ret
	}).(ApplicationKafkaConfigsOutput)
}

// One or more logging configurations of ApsaraMQ for Kafka. See `kafkaConfigs` below.
func (o ApplicationKafkaConfigsPtrOutput) KafkaConfigs() ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return o.ApplyT(func(v *ApplicationKafkaConfigs) []ApplicationKafkaConfigsKafkaConfig {
		if v == nil {
			return nil
		}
		return v.KafkaConfigs
	}).(ApplicationKafkaConfigsKafkaConfigArrayOutput)
}

// The endpoint of the ApsaraMQ for Kafka API.
func (o ApplicationKafkaConfigsPtrOutput) KafkaEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKafkaConfigs) *string {
		if v == nil {
			return nil
		}
		return v.KafkaEndpoint
	}).(pulumi.StringPtrOutput)
}

// The  ID of the ApsaraMQ for Kafka instance.
func (o ApplicationKafkaConfigsPtrOutput) KafkaInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKafkaConfigs) *string {
		if v == nil {
			return nil
		}
		return v.KafkaInstanceId
	}).(pulumi.StringPtrOutput)
}

type ApplicationKafkaConfigsKafkaConfig struct {
	// The topic of the Kafka.
	KafkaTopic *string `pulumi:"kafkaTopic"`
	// The path in which logs are stored.
	LogDir *string `pulumi:"logDir"`
	// The type of the log.
	LogType *string `pulumi:"logType"`
}

// ApplicationKafkaConfigsKafkaConfigInput is an input type that accepts ApplicationKafkaConfigsKafkaConfigArgs and ApplicationKafkaConfigsKafkaConfigOutput values.
// You can construct a concrete instance of `ApplicationKafkaConfigsKafkaConfigInput` via:
//
//	ApplicationKafkaConfigsKafkaConfigArgs{...}
type ApplicationKafkaConfigsKafkaConfigInput interface {
	pulumi.Input

	ToApplicationKafkaConfigsKafkaConfigOutput() ApplicationKafkaConfigsKafkaConfigOutput
	ToApplicationKafkaConfigsKafkaConfigOutputWithContext(context.Context) ApplicationKafkaConfigsKafkaConfigOutput
}

type ApplicationKafkaConfigsKafkaConfigArgs struct {
	// The topic of the Kafka.
	KafkaTopic pulumi.StringPtrInput `pulumi:"kafkaTopic"`
	// The path in which logs are stored.
	LogDir pulumi.StringPtrInput `pulumi:"logDir"`
	// The type of the log.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (ApplicationKafkaConfigsKafkaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKafkaConfigsKafkaConfig)(nil)).Elem()
}

func (i ApplicationKafkaConfigsKafkaConfigArgs) ToApplicationKafkaConfigsKafkaConfigOutput() ApplicationKafkaConfigsKafkaConfigOutput {
	return i.ToApplicationKafkaConfigsKafkaConfigOutputWithContext(context.Background())
}

func (i ApplicationKafkaConfigsKafkaConfigArgs) ToApplicationKafkaConfigsKafkaConfigOutputWithContext(ctx context.Context) ApplicationKafkaConfigsKafkaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKafkaConfigsKafkaConfigOutput)
}

func (i ApplicationKafkaConfigsKafkaConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKafkaConfigsKafkaConfig] {
	return pulumix.Output[ApplicationKafkaConfigsKafkaConfig]{
		OutputState: i.ToApplicationKafkaConfigsKafkaConfigOutputWithContext(ctx).OutputState,
	}
}

// ApplicationKafkaConfigsKafkaConfigArrayInput is an input type that accepts ApplicationKafkaConfigsKafkaConfigArray and ApplicationKafkaConfigsKafkaConfigArrayOutput values.
// You can construct a concrete instance of `ApplicationKafkaConfigsKafkaConfigArrayInput` via:
//
//	ApplicationKafkaConfigsKafkaConfigArray{ ApplicationKafkaConfigsKafkaConfigArgs{...} }
type ApplicationKafkaConfigsKafkaConfigArrayInput interface {
	pulumi.Input

	ToApplicationKafkaConfigsKafkaConfigArrayOutput() ApplicationKafkaConfigsKafkaConfigArrayOutput
	ToApplicationKafkaConfigsKafkaConfigArrayOutputWithContext(context.Context) ApplicationKafkaConfigsKafkaConfigArrayOutput
}

type ApplicationKafkaConfigsKafkaConfigArray []ApplicationKafkaConfigsKafkaConfigInput

func (ApplicationKafkaConfigsKafkaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationKafkaConfigsKafkaConfig)(nil)).Elem()
}

func (i ApplicationKafkaConfigsKafkaConfigArray) ToApplicationKafkaConfigsKafkaConfigArrayOutput() ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return i.ToApplicationKafkaConfigsKafkaConfigArrayOutputWithContext(context.Background())
}

func (i ApplicationKafkaConfigsKafkaConfigArray) ToApplicationKafkaConfigsKafkaConfigArrayOutputWithContext(ctx context.Context) ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKafkaConfigsKafkaConfigArrayOutput)
}

func (i ApplicationKafkaConfigsKafkaConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationKafkaConfigsKafkaConfig] {
	return pulumix.Output[[]ApplicationKafkaConfigsKafkaConfig]{
		OutputState: i.ToApplicationKafkaConfigsKafkaConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationKafkaConfigsKafkaConfigOutput struct{ *pulumi.OutputState }

func (ApplicationKafkaConfigsKafkaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKafkaConfigsKafkaConfig)(nil)).Elem()
}

func (o ApplicationKafkaConfigsKafkaConfigOutput) ToApplicationKafkaConfigsKafkaConfigOutput() ApplicationKafkaConfigsKafkaConfigOutput {
	return o
}

func (o ApplicationKafkaConfigsKafkaConfigOutput) ToApplicationKafkaConfigsKafkaConfigOutputWithContext(ctx context.Context) ApplicationKafkaConfigsKafkaConfigOutput {
	return o
}

func (o ApplicationKafkaConfigsKafkaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKafkaConfigsKafkaConfig] {
	return pulumix.Output[ApplicationKafkaConfigsKafkaConfig]{
		OutputState: o.OutputState,
	}
}

// The topic of the Kafka.
func (o ApplicationKafkaConfigsKafkaConfigOutput) KafkaTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigsKafkaConfig) *string { return v.KafkaTopic }).(pulumi.StringPtrOutput)
}

// The path in which logs are stored.
func (o ApplicationKafkaConfigsKafkaConfigOutput) LogDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigsKafkaConfig) *string { return v.LogDir }).(pulumi.StringPtrOutput)
}

// The type of the log.
func (o ApplicationKafkaConfigsKafkaConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationKafkaConfigsKafkaConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type ApplicationKafkaConfigsKafkaConfigArrayOutput struct{ *pulumi.OutputState }

func (ApplicationKafkaConfigsKafkaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationKafkaConfigsKafkaConfig)(nil)).Elem()
}

func (o ApplicationKafkaConfigsKafkaConfigArrayOutput) ToApplicationKafkaConfigsKafkaConfigArrayOutput() ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return o
}

func (o ApplicationKafkaConfigsKafkaConfigArrayOutput) ToApplicationKafkaConfigsKafkaConfigArrayOutputWithContext(ctx context.Context) ApplicationKafkaConfigsKafkaConfigArrayOutput {
	return o
}

func (o ApplicationKafkaConfigsKafkaConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationKafkaConfigsKafkaConfig] {
	return pulumix.Output[[]ApplicationKafkaConfigsKafkaConfig]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKafkaConfigsKafkaConfigArrayOutput) Index(i pulumi.IntInput) ApplicationKafkaConfigsKafkaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationKafkaConfigsKafkaConfig {
		return vs[0].([]ApplicationKafkaConfigsKafkaConfig)[vs[1].(int)]
	}).(ApplicationKafkaConfigsKafkaConfigOutput)
}

type ApplicationLivenessV2 struct {
	// Execute. See `exec` below.
	Exec *ApplicationLivenessV2Exec `pulumi:"exec"`
	// The liveness check settings of the container. See `httpGet` below.
	HttpGet *ApplicationLivenessV2HttpGet `pulumi:"httpGet"`
	// The delay of the health check.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The interval at which the health check is performed.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The liveness check settings of the container. See `tcpSocket` below.
	TcpSocket *ApplicationLivenessV2TcpSocket `pulumi:"tcpSocket"`
	// The timeout period of the health check.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ApplicationLivenessV2Input is an input type that accepts ApplicationLivenessV2Args and ApplicationLivenessV2Output values.
// You can construct a concrete instance of `ApplicationLivenessV2Input` via:
//
//	ApplicationLivenessV2Args{...}
type ApplicationLivenessV2Input interface {
	pulumi.Input

	ToApplicationLivenessV2Output() ApplicationLivenessV2Output
	ToApplicationLivenessV2OutputWithContext(context.Context) ApplicationLivenessV2Output
}

type ApplicationLivenessV2Args struct {
	// Execute. See `exec` below.
	Exec ApplicationLivenessV2ExecPtrInput `pulumi:"exec"`
	// The liveness check settings of the container. See `httpGet` below.
	HttpGet ApplicationLivenessV2HttpGetPtrInput `pulumi:"httpGet"`
	// The delay of the health check.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The interval at which the health check is performed.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The liveness check settings of the container. See `tcpSocket` below.
	TcpSocket ApplicationLivenessV2TcpSocketPtrInput `pulumi:"tcpSocket"`
	// The timeout period of the health check.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ApplicationLivenessV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2)(nil)).Elem()
}

func (i ApplicationLivenessV2Args) ToApplicationLivenessV2Output() ApplicationLivenessV2Output {
	return i.ToApplicationLivenessV2OutputWithContext(context.Background())
}

func (i ApplicationLivenessV2Args) ToApplicationLivenessV2OutputWithContext(ctx context.Context) ApplicationLivenessV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2Output)
}

func (i ApplicationLivenessV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2] {
	return pulumix.Output[ApplicationLivenessV2]{
		OutputState: i.ToApplicationLivenessV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationLivenessV2Args) ToApplicationLivenessV2PtrOutput() ApplicationLivenessV2PtrOutput {
	return i.ToApplicationLivenessV2PtrOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2Args) ToApplicationLivenessV2PtrOutputWithContext(ctx context.Context) ApplicationLivenessV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2Output).ToApplicationLivenessV2PtrOutputWithContext(ctx)
}

// ApplicationLivenessV2PtrInput is an input type that accepts ApplicationLivenessV2Args, ApplicationLivenessV2Ptr and ApplicationLivenessV2PtrOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2PtrInput` via:
//
//	        ApplicationLivenessV2Args{...}
//
//	or:
//
//	        nil
type ApplicationLivenessV2PtrInput interface {
	pulumi.Input

	ToApplicationLivenessV2PtrOutput() ApplicationLivenessV2PtrOutput
	ToApplicationLivenessV2PtrOutputWithContext(context.Context) ApplicationLivenessV2PtrOutput
}

type applicationLivenessV2PtrType ApplicationLivenessV2Args

func ApplicationLivenessV2Ptr(v *ApplicationLivenessV2Args) ApplicationLivenessV2PtrInput {
	return (*applicationLivenessV2PtrType)(v)
}

func (*applicationLivenessV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2)(nil)).Elem()
}

func (i *applicationLivenessV2PtrType) ToApplicationLivenessV2PtrOutput() ApplicationLivenessV2PtrOutput {
	return i.ToApplicationLivenessV2PtrOutputWithContext(context.Background())
}

func (i *applicationLivenessV2PtrType) ToApplicationLivenessV2PtrOutputWithContext(ctx context.Context) ApplicationLivenessV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2PtrOutput)
}

func (i *applicationLivenessV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2] {
	return pulumix.Output[*ApplicationLivenessV2]{
		OutputState: i.ToApplicationLivenessV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationLivenessV2Output struct{ *pulumi.OutputState }

func (ApplicationLivenessV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2)(nil)).Elem()
}

func (o ApplicationLivenessV2Output) ToApplicationLivenessV2Output() ApplicationLivenessV2Output {
	return o
}

func (o ApplicationLivenessV2Output) ToApplicationLivenessV2OutputWithContext(ctx context.Context) ApplicationLivenessV2Output {
	return o
}

func (o ApplicationLivenessV2Output) ToApplicationLivenessV2PtrOutput() ApplicationLivenessV2PtrOutput {
	return o.ToApplicationLivenessV2PtrOutputWithContext(context.Background())
}

func (o ApplicationLivenessV2Output) ToApplicationLivenessV2PtrOutputWithContext(ctx context.Context) ApplicationLivenessV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationLivenessV2) *ApplicationLivenessV2 {
		return &v
	}).(ApplicationLivenessV2PtrOutput)
}

func (o ApplicationLivenessV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2] {
	return pulumix.Output[ApplicationLivenessV2]{
		OutputState: o.OutputState,
	}
}

// Execute. See `exec` below.
func (o ApplicationLivenessV2Output) Exec() ApplicationLivenessV2ExecPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *ApplicationLivenessV2Exec { return v.Exec }).(ApplicationLivenessV2ExecPtrOutput)
}

// The liveness check settings of the container. See `httpGet` below.
func (o ApplicationLivenessV2Output) HttpGet() ApplicationLivenessV2HttpGetPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *ApplicationLivenessV2HttpGet { return v.HttpGet }).(ApplicationLivenessV2HttpGetPtrOutput)
}

// The delay of the health check.
func (o ApplicationLivenessV2Output) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The interval at which the health check is performed.
func (o ApplicationLivenessV2Output) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The liveness check settings of the container. See `tcpSocket` below.
func (o ApplicationLivenessV2Output) TcpSocket() ApplicationLivenessV2TcpSocketPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *ApplicationLivenessV2TcpSocket { return v.TcpSocket }).(ApplicationLivenessV2TcpSocketPtrOutput)
}

// The timeout period of the health check.
func (o ApplicationLivenessV2Output) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ApplicationLivenessV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2)(nil)).Elem()
}

func (o ApplicationLivenessV2PtrOutput) ToApplicationLivenessV2PtrOutput() ApplicationLivenessV2PtrOutput {
	return o
}

func (o ApplicationLivenessV2PtrOutput) ToApplicationLivenessV2PtrOutputWithContext(ctx context.Context) ApplicationLivenessV2PtrOutput {
	return o
}

func (o ApplicationLivenessV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2] {
	return pulumix.Output[*ApplicationLivenessV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationLivenessV2PtrOutput) Elem() ApplicationLivenessV2Output {
	return o.ApplyT(func(v *ApplicationLivenessV2) ApplicationLivenessV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationLivenessV2
		return ret
	}).(ApplicationLivenessV2Output)
}

// Execute. See `exec` below.
func (o ApplicationLivenessV2PtrOutput) Exec() ApplicationLivenessV2ExecPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *ApplicationLivenessV2Exec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ApplicationLivenessV2ExecPtrOutput)
}

// The liveness check settings of the container. See `httpGet` below.
func (o ApplicationLivenessV2PtrOutput) HttpGet() ApplicationLivenessV2HttpGetPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *ApplicationLivenessV2HttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ApplicationLivenessV2HttpGetPtrOutput)
}

// The delay of the health check.
func (o ApplicationLivenessV2PtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The interval at which the health check is performed.
func (o ApplicationLivenessV2PtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The liveness check settings of the container. See `tcpSocket` below.
func (o ApplicationLivenessV2PtrOutput) TcpSocket() ApplicationLivenessV2TcpSocketPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *ApplicationLivenessV2TcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(ApplicationLivenessV2TcpSocketPtrOutput)
}

// The timeout period of the health check.
func (o ApplicationLivenessV2PtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ApplicationLivenessV2Exec struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands []string `pulumi:"commands"`
}

// ApplicationLivenessV2ExecInput is an input type that accepts ApplicationLivenessV2ExecArgs and ApplicationLivenessV2ExecOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2ExecInput` via:
//
//	ApplicationLivenessV2ExecArgs{...}
type ApplicationLivenessV2ExecInput interface {
	pulumi.Input

	ToApplicationLivenessV2ExecOutput() ApplicationLivenessV2ExecOutput
	ToApplicationLivenessV2ExecOutputWithContext(context.Context) ApplicationLivenessV2ExecOutput
}

type ApplicationLivenessV2ExecArgs struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ApplicationLivenessV2ExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2Exec)(nil)).Elem()
}

func (i ApplicationLivenessV2ExecArgs) ToApplicationLivenessV2ExecOutput() ApplicationLivenessV2ExecOutput {
	return i.ToApplicationLivenessV2ExecOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2ExecArgs) ToApplicationLivenessV2ExecOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2ExecOutput)
}

func (i ApplicationLivenessV2ExecArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2Exec] {
	return pulumix.Output[ApplicationLivenessV2Exec]{
		OutputState: i.ToApplicationLivenessV2ExecOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationLivenessV2ExecArgs) ToApplicationLivenessV2ExecPtrOutput() ApplicationLivenessV2ExecPtrOutput {
	return i.ToApplicationLivenessV2ExecPtrOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2ExecArgs) ToApplicationLivenessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2ExecOutput).ToApplicationLivenessV2ExecPtrOutputWithContext(ctx)
}

// ApplicationLivenessV2ExecPtrInput is an input type that accepts ApplicationLivenessV2ExecArgs, ApplicationLivenessV2ExecPtr and ApplicationLivenessV2ExecPtrOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2ExecPtrInput` via:
//
//	        ApplicationLivenessV2ExecArgs{...}
//
//	or:
//
//	        nil
type ApplicationLivenessV2ExecPtrInput interface {
	pulumi.Input

	ToApplicationLivenessV2ExecPtrOutput() ApplicationLivenessV2ExecPtrOutput
	ToApplicationLivenessV2ExecPtrOutputWithContext(context.Context) ApplicationLivenessV2ExecPtrOutput
}

type applicationLivenessV2ExecPtrType ApplicationLivenessV2ExecArgs

func ApplicationLivenessV2ExecPtr(v *ApplicationLivenessV2ExecArgs) ApplicationLivenessV2ExecPtrInput {
	return (*applicationLivenessV2ExecPtrType)(v)
}

func (*applicationLivenessV2ExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2Exec)(nil)).Elem()
}

func (i *applicationLivenessV2ExecPtrType) ToApplicationLivenessV2ExecPtrOutput() ApplicationLivenessV2ExecPtrOutput {
	return i.ToApplicationLivenessV2ExecPtrOutputWithContext(context.Background())
}

func (i *applicationLivenessV2ExecPtrType) ToApplicationLivenessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2ExecPtrOutput)
}

func (i *applicationLivenessV2ExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2Exec] {
	return pulumix.Output[*ApplicationLivenessV2Exec]{
		OutputState: i.ToApplicationLivenessV2ExecPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationLivenessV2ExecOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2ExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2Exec)(nil)).Elem()
}

func (o ApplicationLivenessV2ExecOutput) ToApplicationLivenessV2ExecOutput() ApplicationLivenessV2ExecOutput {
	return o
}

func (o ApplicationLivenessV2ExecOutput) ToApplicationLivenessV2ExecOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecOutput {
	return o
}

func (o ApplicationLivenessV2ExecOutput) ToApplicationLivenessV2ExecPtrOutput() ApplicationLivenessV2ExecPtrOutput {
	return o.ToApplicationLivenessV2ExecPtrOutputWithContext(context.Background())
}

func (o ApplicationLivenessV2ExecOutput) ToApplicationLivenessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationLivenessV2Exec) *ApplicationLivenessV2Exec {
		return &v
	}).(ApplicationLivenessV2ExecPtrOutput)
}

func (o ApplicationLivenessV2ExecOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2Exec] {
	return pulumix.Output[ApplicationLivenessV2Exec]{
		OutputState: o.OutputState,
	}
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationLivenessV2ExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationLivenessV2Exec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ApplicationLivenessV2ExecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2ExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2Exec)(nil)).Elem()
}

func (o ApplicationLivenessV2ExecPtrOutput) ToApplicationLivenessV2ExecPtrOutput() ApplicationLivenessV2ExecPtrOutput {
	return o
}

func (o ApplicationLivenessV2ExecPtrOutput) ToApplicationLivenessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2ExecPtrOutput {
	return o
}

func (o ApplicationLivenessV2ExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2Exec] {
	return pulumix.Output[*ApplicationLivenessV2Exec]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationLivenessV2ExecPtrOutput) Elem() ApplicationLivenessV2ExecOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2Exec) ApplicationLivenessV2Exec {
		if v != nil {
			return *v
		}
		var ret ApplicationLivenessV2Exec
		return ret
	}).(ApplicationLivenessV2ExecOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationLivenessV2ExecPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2Exec) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type ApplicationLivenessV2HttpGet struct {
	// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
	IsContainKeyWord *bool `pulumi:"isContainKeyWord"`
	// The custom keywords.
	KeyWord *string `pulumi:"keyWord"`
	// The request path.
	Path *string `pulumi:"path"`
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
	// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
	Scheme *string `pulumi:"scheme"`
}

// ApplicationLivenessV2HttpGetInput is an input type that accepts ApplicationLivenessV2HttpGetArgs and ApplicationLivenessV2HttpGetOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2HttpGetInput` via:
//
//	ApplicationLivenessV2HttpGetArgs{...}
type ApplicationLivenessV2HttpGetInput interface {
	pulumi.Input

	ToApplicationLivenessV2HttpGetOutput() ApplicationLivenessV2HttpGetOutput
	ToApplicationLivenessV2HttpGetOutputWithContext(context.Context) ApplicationLivenessV2HttpGetOutput
}

type ApplicationLivenessV2HttpGetArgs struct {
	// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
	IsContainKeyWord pulumi.BoolPtrInput `pulumi:"isContainKeyWord"`
	// The custom keywords.
	KeyWord pulumi.StringPtrInput `pulumi:"keyWord"`
	// The request path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ApplicationLivenessV2HttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2HttpGet)(nil)).Elem()
}

func (i ApplicationLivenessV2HttpGetArgs) ToApplicationLivenessV2HttpGetOutput() ApplicationLivenessV2HttpGetOutput {
	return i.ToApplicationLivenessV2HttpGetOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2HttpGetArgs) ToApplicationLivenessV2HttpGetOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2HttpGetOutput)
}

func (i ApplicationLivenessV2HttpGetArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2HttpGet] {
	return pulumix.Output[ApplicationLivenessV2HttpGet]{
		OutputState: i.ToApplicationLivenessV2HttpGetOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationLivenessV2HttpGetArgs) ToApplicationLivenessV2HttpGetPtrOutput() ApplicationLivenessV2HttpGetPtrOutput {
	return i.ToApplicationLivenessV2HttpGetPtrOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2HttpGetArgs) ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2HttpGetOutput).ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx)
}

// ApplicationLivenessV2HttpGetPtrInput is an input type that accepts ApplicationLivenessV2HttpGetArgs, ApplicationLivenessV2HttpGetPtr and ApplicationLivenessV2HttpGetPtrOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2HttpGetPtrInput` via:
//
//	        ApplicationLivenessV2HttpGetArgs{...}
//
//	or:
//
//	        nil
type ApplicationLivenessV2HttpGetPtrInput interface {
	pulumi.Input

	ToApplicationLivenessV2HttpGetPtrOutput() ApplicationLivenessV2HttpGetPtrOutput
	ToApplicationLivenessV2HttpGetPtrOutputWithContext(context.Context) ApplicationLivenessV2HttpGetPtrOutput
}

type applicationLivenessV2HttpGetPtrType ApplicationLivenessV2HttpGetArgs

func ApplicationLivenessV2HttpGetPtr(v *ApplicationLivenessV2HttpGetArgs) ApplicationLivenessV2HttpGetPtrInput {
	return (*applicationLivenessV2HttpGetPtrType)(v)
}

func (*applicationLivenessV2HttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2HttpGet)(nil)).Elem()
}

func (i *applicationLivenessV2HttpGetPtrType) ToApplicationLivenessV2HttpGetPtrOutput() ApplicationLivenessV2HttpGetPtrOutput {
	return i.ToApplicationLivenessV2HttpGetPtrOutputWithContext(context.Background())
}

func (i *applicationLivenessV2HttpGetPtrType) ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2HttpGetPtrOutput)
}

func (i *applicationLivenessV2HttpGetPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2HttpGet] {
	return pulumix.Output[*ApplicationLivenessV2HttpGet]{
		OutputState: i.ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationLivenessV2HttpGetOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2HttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2HttpGet)(nil)).Elem()
}

func (o ApplicationLivenessV2HttpGetOutput) ToApplicationLivenessV2HttpGetOutput() ApplicationLivenessV2HttpGetOutput {
	return o
}

func (o ApplicationLivenessV2HttpGetOutput) ToApplicationLivenessV2HttpGetOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetOutput {
	return o
}

func (o ApplicationLivenessV2HttpGetOutput) ToApplicationLivenessV2HttpGetPtrOutput() ApplicationLivenessV2HttpGetPtrOutput {
	return o.ToApplicationLivenessV2HttpGetPtrOutputWithContext(context.Background())
}

func (o ApplicationLivenessV2HttpGetOutput) ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationLivenessV2HttpGet) *ApplicationLivenessV2HttpGet {
		return &v
	}).(ApplicationLivenessV2HttpGetPtrOutput)
}

func (o ApplicationLivenessV2HttpGetOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2HttpGet] {
	return pulumix.Output[ApplicationLivenessV2HttpGet]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
func (o ApplicationLivenessV2HttpGetOutput) IsContainKeyWord() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2HttpGet) *bool { return v.IsContainKeyWord }).(pulumi.BoolPtrOutput)
}

// The custom keywords.
func (o ApplicationLivenessV2HttpGetOutput) KeyWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2HttpGet) *string { return v.KeyWord }).(pulumi.StringPtrOutput)
}

// The request path.
func (o ApplicationLivenessV2HttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2HttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationLivenessV2HttpGetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2HttpGet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
func (o ApplicationLivenessV2HttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2HttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ApplicationLivenessV2HttpGetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2HttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2HttpGet)(nil)).Elem()
}

func (o ApplicationLivenessV2HttpGetPtrOutput) ToApplicationLivenessV2HttpGetPtrOutput() ApplicationLivenessV2HttpGetPtrOutput {
	return o
}

func (o ApplicationLivenessV2HttpGetPtrOutput) ToApplicationLivenessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2HttpGetPtrOutput {
	return o
}

func (o ApplicationLivenessV2HttpGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2HttpGet] {
	return pulumix.Output[*ApplicationLivenessV2HttpGet]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationLivenessV2HttpGetPtrOutput) Elem() ApplicationLivenessV2HttpGetOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) ApplicationLivenessV2HttpGet {
		if v != nil {
			return *v
		}
		var ret ApplicationLivenessV2HttpGet
		return ret
	}).(ApplicationLivenessV2HttpGetOutput)
}

// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
func (o ApplicationLivenessV2HttpGetPtrOutput) IsContainKeyWord() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) *bool {
		if v == nil {
			return nil
		}
		return v.IsContainKeyWord
	}).(pulumi.BoolPtrOutput)
}

// The custom keywords.
func (o ApplicationLivenessV2HttpGetPtrOutput) KeyWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.KeyWord
	}).(pulumi.StringPtrOutput)
}

// The request path.
func (o ApplicationLivenessV2HttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationLivenessV2HttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
func (o ApplicationLivenessV2HttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

type ApplicationLivenessV2TcpSocket struct {
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
}

// ApplicationLivenessV2TcpSocketInput is an input type that accepts ApplicationLivenessV2TcpSocketArgs and ApplicationLivenessV2TcpSocketOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2TcpSocketInput` via:
//
//	ApplicationLivenessV2TcpSocketArgs{...}
type ApplicationLivenessV2TcpSocketInput interface {
	pulumi.Input

	ToApplicationLivenessV2TcpSocketOutput() ApplicationLivenessV2TcpSocketOutput
	ToApplicationLivenessV2TcpSocketOutputWithContext(context.Context) ApplicationLivenessV2TcpSocketOutput
}

type ApplicationLivenessV2TcpSocketArgs struct {
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ApplicationLivenessV2TcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2TcpSocket)(nil)).Elem()
}

func (i ApplicationLivenessV2TcpSocketArgs) ToApplicationLivenessV2TcpSocketOutput() ApplicationLivenessV2TcpSocketOutput {
	return i.ToApplicationLivenessV2TcpSocketOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2TcpSocketArgs) ToApplicationLivenessV2TcpSocketOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2TcpSocketOutput)
}

func (i ApplicationLivenessV2TcpSocketArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2TcpSocket] {
	return pulumix.Output[ApplicationLivenessV2TcpSocket]{
		OutputState: i.ToApplicationLivenessV2TcpSocketOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationLivenessV2TcpSocketArgs) ToApplicationLivenessV2TcpSocketPtrOutput() ApplicationLivenessV2TcpSocketPtrOutput {
	return i.ToApplicationLivenessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (i ApplicationLivenessV2TcpSocketArgs) ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2TcpSocketOutput).ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx)
}

// ApplicationLivenessV2TcpSocketPtrInput is an input type that accepts ApplicationLivenessV2TcpSocketArgs, ApplicationLivenessV2TcpSocketPtr and ApplicationLivenessV2TcpSocketPtrOutput values.
// You can construct a concrete instance of `ApplicationLivenessV2TcpSocketPtrInput` via:
//
//	        ApplicationLivenessV2TcpSocketArgs{...}
//
//	or:
//
//	        nil
type ApplicationLivenessV2TcpSocketPtrInput interface {
	pulumi.Input

	ToApplicationLivenessV2TcpSocketPtrOutput() ApplicationLivenessV2TcpSocketPtrOutput
	ToApplicationLivenessV2TcpSocketPtrOutputWithContext(context.Context) ApplicationLivenessV2TcpSocketPtrOutput
}

type applicationLivenessV2TcpSocketPtrType ApplicationLivenessV2TcpSocketArgs

func ApplicationLivenessV2TcpSocketPtr(v *ApplicationLivenessV2TcpSocketArgs) ApplicationLivenessV2TcpSocketPtrInput {
	return (*applicationLivenessV2TcpSocketPtrType)(v)
}

func (*applicationLivenessV2TcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2TcpSocket)(nil)).Elem()
}

func (i *applicationLivenessV2TcpSocketPtrType) ToApplicationLivenessV2TcpSocketPtrOutput() ApplicationLivenessV2TcpSocketPtrOutput {
	return i.ToApplicationLivenessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (i *applicationLivenessV2TcpSocketPtrType) ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLivenessV2TcpSocketPtrOutput)
}

func (i *applicationLivenessV2TcpSocketPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2TcpSocket] {
	return pulumix.Output[*ApplicationLivenessV2TcpSocket]{
		OutputState: i.ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationLivenessV2TcpSocketOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2TcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationLivenessV2TcpSocket)(nil)).Elem()
}

func (o ApplicationLivenessV2TcpSocketOutput) ToApplicationLivenessV2TcpSocketOutput() ApplicationLivenessV2TcpSocketOutput {
	return o
}

func (o ApplicationLivenessV2TcpSocketOutput) ToApplicationLivenessV2TcpSocketOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketOutput {
	return o
}

func (o ApplicationLivenessV2TcpSocketOutput) ToApplicationLivenessV2TcpSocketPtrOutput() ApplicationLivenessV2TcpSocketPtrOutput {
	return o.ToApplicationLivenessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (o ApplicationLivenessV2TcpSocketOutput) ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationLivenessV2TcpSocket) *ApplicationLivenessV2TcpSocket {
		return &v
	}).(ApplicationLivenessV2TcpSocketPtrOutput)
}

func (o ApplicationLivenessV2TcpSocketOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationLivenessV2TcpSocket] {
	return pulumix.Output[ApplicationLivenessV2TcpSocket]{
		OutputState: o.OutputState,
	}
}

// The port that is used to check the status of TCP connections.
func (o ApplicationLivenessV2TcpSocketOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationLivenessV2TcpSocket) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ApplicationLivenessV2TcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ApplicationLivenessV2TcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLivenessV2TcpSocket)(nil)).Elem()
}

func (o ApplicationLivenessV2TcpSocketPtrOutput) ToApplicationLivenessV2TcpSocketPtrOutput() ApplicationLivenessV2TcpSocketPtrOutput {
	return o
}

func (o ApplicationLivenessV2TcpSocketPtrOutput) ToApplicationLivenessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationLivenessV2TcpSocketPtrOutput {
	return o
}

func (o ApplicationLivenessV2TcpSocketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationLivenessV2TcpSocket] {
	return pulumix.Output[*ApplicationLivenessV2TcpSocket]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationLivenessV2TcpSocketPtrOutput) Elem() ApplicationLivenessV2TcpSocketOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2TcpSocket) ApplicationLivenessV2TcpSocket {
		if v != nil {
			return *v
		}
		var ret ApplicationLivenessV2TcpSocket
		return ret
	}).(ApplicationLivenessV2TcpSocketOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationLivenessV2TcpSocketPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationLivenessV2TcpSocket) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type ApplicationNasConfig struct {
	// The domain name of the mount target.
	MountDomain *string `pulumi:"mountDomain"`
	// The mount path of the container.
	MountPath *string `pulumi:"mountPath"`
	// The ID of the NAS file system.
	NasId *string `pulumi:"nasId"`
	// The directory in the NAS file system.
	NasPath *string `pulumi:"nasPath"`
	// Specifies whether the application can read data from or write data to resources in the directory of the NAS. Valid values: `true` and `false`. If you set `readOnly` to `false`, the application has the read and write permissions.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ApplicationNasConfigInput is an input type that accepts ApplicationNasConfigArgs and ApplicationNasConfigOutput values.
// You can construct a concrete instance of `ApplicationNasConfigInput` via:
//
//	ApplicationNasConfigArgs{...}
type ApplicationNasConfigInput interface {
	pulumi.Input

	ToApplicationNasConfigOutput() ApplicationNasConfigOutput
	ToApplicationNasConfigOutputWithContext(context.Context) ApplicationNasConfigOutput
}

type ApplicationNasConfigArgs struct {
	// The domain name of the mount target.
	MountDomain pulumi.StringPtrInput `pulumi:"mountDomain"`
	// The mount path of the container.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The ID of the NAS file system.
	NasId pulumi.StringPtrInput `pulumi:"nasId"`
	// The directory in the NAS file system.
	NasPath pulumi.StringPtrInput `pulumi:"nasPath"`
	// Specifies whether the application can read data from or write data to resources in the directory of the NAS. Valid values: `true` and `false`. If you set `readOnly` to `false`, the application has the read and write permissions.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ApplicationNasConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationNasConfig)(nil)).Elem()
}

func (i ApplicationNasConfigArgs) ToApplicationNasConfigOutput() ApplicationNasConfigOutput {
	return i.ToApplicationNasConfigOutputWithContext(context.Background())
}

func (i ApplicationNasConfigArgs) ToApplicationNasConfigOutputWithContext(ctx context.Context) ApplicationNasConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNasConfigOutput)
}

func (i ApplicationNasConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationNasConfig] {
	return pulumix.Output[ApplicationNasConfig]{
		OutputState: i.ToApplicationNasConfigOutputWithContext(ctx).OutputState,
	}
}

// ApplicationNasConfigArrayInput is an input type that accepts ApplicationNasConfigArray and ApplicationNasConfigArrayOutput values.
// You can construct a concrete instance of `ApplicationNasConfigArrayInput` via:
//
//	ApplicationNasConfigArray{ ApplicationNasConfigArgs{...} }
type ApplicationNasConfigArrayInput interface {
	pulumi.Input

	ToApplicationNasConfigArrayOutput() ApplicationNasConfigArrayOutput
	ToApplicationNasConfigArrayOutputWithContext(context.Context) ApplicationNasConfigArrayOutput
}

type ApplicationNasConfigArray []ApplicationNasConfigInput

func (ApplicationNasConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationNasConfig)(nil)).Elem()
}

func (i ApplicationNasConfigArray) ToApplicationNasConfigArrayOutput() ApplicationNasConfigArrayOutput {
	return i.ToApplicationNasConfigArrayOutputWithContext(context.Background())
}

func (i ApplicationNasConfigArray) ToApplicationNasConfigArrayOutputWithContext(ctx context.Context) ApplicationNasConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNasConfigArrayOutput)
}

func (i ApplicationNasConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationNasConfig] {
	return pulumix.Output[[]ApplicationNasConfig]{
		OutputState: i.ToApplicationNasConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationNasConfigOutput struct{ *pulumi.OutputState }

func (ApplicationNasConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationNasConfig)(nil)).Elem()
}

func (o ApplicationNasConfigOutput) ToApplicationNasConfigOutput() ApplicationNasConfigOutput {
	return o
}

func (o ApplicationNasConfigOutput) ToApplicationNasConfigOutputWithContext(ctx context.Context) ApplicationNasConfigOutput {
	return o
}

func (o ApplicationNasConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationNasConfig] {
	return pulumix.Output[ApplicationNasConfig]{
		OutputState: o.OutputState,
	}
}

// The domain name of the mount target.
func (o ApplicationNasConfigOutput) MountDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationNasConfig) *string { return v.MountDomain }).(pulumi.StringPtrOutput)
}

// The mount path of the container.
func (o ApplicationNasConfigOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationNasConfig) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The ID of the NAS file system.
func (o ApplicationNasConfigOutput) NasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationNasConfig) *string { return v.NasId }).(pulumi.StringPtrOutput)
}

// The directory in the NAS file system.
func (o ApplicationNasConfigOutput) NasPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationNasConfig) *string { return v.NasPath }).(pulumi.StringPtrOutput)
}

// Specifies whether the application can read data from or write data to resources in the directory of the NAS. Valid values: `true` and `false`. If you set `readOnly` to `false`, the application has the read and write permissions.
func (o ApplicationNasConfigOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationNasConfig) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ApplicationNasConfigArrayOutput struct{ *pulumi.OutputState }

func (ApplicationNasConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationNasConfig)(nil)).Elem()
}

func (o ApplicationNasConfigArrayOutput) ToApplicationNasConfigArrayOutput() ApplicationNasConfigArrayOutput {
	return o
}

func (o ApplicationNasConfigArrayOutput) ToApplicationNasConfigArrayOutputWithContext(ctx context.Context) ApplicationNasConfigArrayOutput {
	return o
}

func (o ApplicationNasConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationNasConfig] {
	return pulumix.Output[[]ApplicationNasConfig]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationNasConfigArrayOutput) Index(i pulumi.IntInput) ApplicationNasConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationNasConfig {
		return vs[0].([]ApplicationNasConfig)[vs[1].(int)]
	}).(ApplicationNasConfigOutput)
}

type ApplicationOssMountDescsV2 struct {
	// The name of the OSS bucket.
	BucketName *string `pulumi:"bucketName"`
	// The directory or object in OSS.
	BucketPath *string `pulumi:"bucketPath"`
	// The path of the container in SAE.
	MountPath *string `pulumi:"mountPath"`
	// Specifies whether the application can use the container path to read data from or write data to resources in the directory of the OSS bucket. Valid values:
	ReadOnly *bool `pulumi:"readOnly"`
}

// ApplicationOssMountDescsV2Input is an input type that accepts ApplicationOssMountDescsV2Args and ApplicationOssMountDescsV2Output values.
// You can construct a concrete instance of `ApplicationOssMountDescsV2Input` via:
//
//	ApplicationOssMountDescsV2Args{...}
type ApplicationOssMountDescsV2Input interface {
	pulumi.Input

	ToApplicationOssMountDescsV2Output() ApplicationOssMountDescsV2Output
	ToApplicationOssMountDescsV2OutputWithContext(context.Context) ApplicationOssMountDescsV2Output
}

type ApplicationOssMountDescsV2Args struct {
	// The name of the OSS bucket.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// The directory or object in OSS.
	BucketPath pulumi.StringPtrInput `pulumi:"bucketPath"`
	// The path of the container in SAE.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Specifies whether the application can use the container path to read data from or write data to resources in the directory of the OSS bucket. Valid values:
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ApplicationOssMountDescsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOssMountDescsV2)(nil)).Elem()
}

func (i ApplicationOssMountDescsV2Args) ToApplicationOssMountDescsV2Output() ApplicationOssMountDescsV2Output {
	return i.ToApplicationOssMountDescsV2OutputWithContext(context.Background())
}

func (i ApplicationOssMountDescsV2Args) ToApplicationOssMountDescsV2OutputWithContext(ctx context.Context) ApplicationOssMountDescsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOssMountDescsV2Output)
}

func (i ApplicationOssMountDescsV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationOssMountDescsV2] {
	return pulumix.Output[ApplicationOssMountDescsV2]{
		OutputState: i.ToApplicationOssMountDescsV2OutputWithContext(ctx).OutputState,
	}
}

// ApplicationOssMountDescsV2ArrayInput is an input type that accepts ApplicationOssMountDescsV2Array and ApplicationOssMountDescsV2ArrayOutput values.
// You can construct a concrete instance of `ApplicationOssMountDescsV2ArrayInput` via:
//
//	ApplicationOssMountDescsV2Array{ ApplicationOssMountDescsV2Args{...} }
type ApplicationOssMountDescsV2ArrayInput interface {
	pulumi.Input

	ToApplicationOssMountDescsV2ArrayOutput() ApplicationOssMountDescsV2ArrayOutput
	ToApplicationOssMountDescsV2ArrayOutputWithContext(context.Context) ApplicationOssMountDescsV2ArrayOutput
}

type ApplicationOssMountDescsV2Array []ApplicationOssMountDescsV2Input

func (ApplicationOssMountDescsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOssMountDescsV2)(nil)).Elem()
}

func (i ApplicationOssMountDescsV2Array) ToApplicationOssMountDescsV2ArrayOutput() ApplicationOssMountDescsV2ArrayOutput {
	return i.ToApplicationOssMountDescsV2ArrayOutputWithContext(context.Background())
}

func (i ApplicationOssMountDescsV2Array) ToApplicationOssMountDescsV2ArrayOutputWithContext(ctx context.Context) ApplicationOssMountDescsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOssMountDescsV2ArrayOutput)
}

func (i ApplicationOssMountDescsV2Array) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationOssMountDescsV2] {
	return pulumix.Output[[]ApplicationOssMountDescsV2]{
		OutputState: i.ToApplicationOssMountDescsV2ArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOssMountDescsV2Output struct{ *pulumi.OutputState }

func (ApplicationOssMountDescsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOssMountDescsV2)(nil)).Elem()
}

func (o ApplicationOssMountDescsV2Output) ToApplicationOssMountDescsV2Output() ApplicationOssMountDescsV2Output {
	return o
}

func (o ApplicationOssMountDescsV2Output) ToApplicationOssMountDescsV2OutputWithContext(ctx context.Context) ApplicationOssMountDescsV2Output {
	return o
}

func (o ApplicationOssMountDescsV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationOssMountDescsV2] {
	return pulumix.Output[ApplicationOssMountDescsV2]{
		OutputState: o.OutputState,
	}
}

// The name of the OSS bucket.
func (o ApplicationOssMountDescsV2Output) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOssMountDescsV2) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The directory or object in OSS.
func (o ApplicationOssMountDescsV2Output) BucketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOssMountDescsV2) *string { return v.BucketPath }).(pulumi.StringPtrOutput)
}

// The path of the container in SAE.
func (o ApplicationOssMountDescsV2Output) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOssMountDescsV2) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Specifies whether the application can use the container path to read data from or write data to resources in the directory of the OSS bucket. Valid values:
func (o ApplicationOssMountDescsV2Output) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOssMountDescsV2) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ApplicationOssMountDescsV2ArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOssMountDescsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOssMountDescsV2)(nil)).Elem()
}

func (o ApplicationOssMountDescsV2ArrayOutput) ToApplicationOssMountDescsV2ArrayOutput() ApplicationOssMountDescsV2ArrayOutput {
	return o
}

func (o ApplicationOssMountDescsV2ArrayOutput) ToApplicationOssMountDescsV2ArrayOutputWithContext(ctx context.Context) ApplicationOssMountDescsV2ArrayOutput {
	return o
}

func (o ApplicationOssMountDescsV2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationOssMountDescsV2] {
	return pulumix.Output[[]ApplicationOssMountDescsV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOssMountDescsV2ArrayOutput) Index(i pulumi.IntInput) ApplicationOssMountDescsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOssMountDescsV2 {
		return vs[0].([]ApplicationOssMountDescsV2)[vs[1].(int)]
	}).(ApplicationOssMountDescsV2Output)
}

type ApplicationPostStartV2 struct {
	// Execute. See `exec` below.
	Exec *ApplicationPostStartV2Exec `pulumi:"exec"`
}

// ApplicationPostStartV2Input is an input type that accepts ApplicationPostStartV2Args and ApplicationPostStartV2Output values.
// You can construct a concrete instance of `ApplicationPostStartV2Input` via:
//
//	ApplicationPostStartV2Args{...}
type ApplicationPostStartV2Input interface {
	pulumi.Input

	ToApplicationPostStartV2Output() ApplicationPostStartV2Output
	ToApplicationPostStartV2OutputWithContext(context.Context) ApplicationPostStartV2Output
}

type ApplicationPostStartV2Args struct {
	// Execute. See `exec` below.
	Exec ApplicationPostStartV2ExecPtrInput `pulumi:"exec"`
}

func (ApplicationPostStartV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPostStartV2)(nil)).Elem()
}

func (i ApplicationPostStartV2Args) ToApplicationPostStartV2Output() ApplicationPostStartV2Output {
	return i.ToApplicationPostStartV2OutputWithContext(context.Background())
}

func (i ApplicationPostStartV2Args) ToApplicationPostStartV2OutputWithContext(ctx context.Context) ApplicationPostStartV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2Output)
}

func (i ApplicationPostStartV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationPostStartV2] {
	return pulumix.Output[ApplicationPostStartV2]{
		OutputState: i.ToApplicationPostStartV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationPostStartV2Args) ToApplicationPostStartV2PtrOutput() ApplicationPostStartV2PtrOutput {
	return i.ToApplicationPostStartV2PtrOutputWithContext(context.Background())
}

func (i ApplicationPostStartV2Args) ToApplicationPostStartV2PtrOutputWithContext(ctx context.Context) ApplicationPostStartV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2Output).ToApplicationPostStartV2PtrOutputWithContext(ctx)
}

// ApplicationPostStartV2PtrInput is an input type that accepts ApplicationPostStartV2Args, ApplicationPostStartV2Ptr and ApplicationPostStartV2PtrOutput values.
// You can construct a concrete instance of `ApplicationPostStartV2PtrInput` via:
//
//	        ApplicationPostStartV2Args{...}
//
//	or:
//
//	        nil
type ApplicationPostStartV2PtrInput interface {
	pulumi.Input

	ToApplicationPostStartV2PtrOutput() ApplicationPostStartV2PtrOutput
	ToApplicationPostStartV2PtrOutputWithContext(context.Context) ApplicationPostStartV2PtrOutput
}

type applicationPostStartV2PtrType ApplicationPostStartV2Args

func ApplicationPostStartV2Ptr(v *ApplicationPostStartV2Args) ApplicationPostStartV2PtrInput {
	return (*applicationPostStartV2PtrType)(v)
}

func (*applicationPostStartV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPostStartV2)(nil)).Elem()
}

func (i *applicationPostStartV2PtrType) ToApplicationPostStartV2PtrOutput() ApplicationPostStartV2PtrOutput {
	return i.ToApplicationPostStartV2PtrOutputWithContext(context.Background())
}

func (i *applicationPostStartV2PtrType) ToApplicationPostStartV2PtrOutputWithContext(ctx context.Context) ApplicationPostStartV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2PtrOutput)
}

func (i *applicationPostStartV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPostStartV2] {
	return pulumix.Output[*ApplicationPostStartV2]{
		OutputState: i.ToApplicationPostStartV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPostStartV2Output struct{ *pulumi.OutputState }

func (ApplicationPostStartV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPostStartV2)(nil)).Elem()
}

func (o ApplicationPostStartV2Output) ToApplicationPostStartV2Output() ApplicationPostStartV2Output {
	return o
}

func (o ApplicationPostStartV2Output) ToApplicationPostStartV2OutputWithContext(ctx context.Context) ApplicationPostStartV2Output {
	return o
}

func (o ApplicationPostStartV2Output) ToApplicationPostStartV2PtrOutput() ApplicationPostStartV2PtrOutput {
	return o.ToApplicationPostStartV2PtrOutputWithContext(context.Background())
}

func (o ApplicationPostStartV2Output) ToApplicationPostStartV2PtrOutputWithContext(ctx context.Context) ApplicationPostStartV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationPostStartV2) *ApplicationPostStartV2 {
		return &v
	}).(ApplicationPostStartV2PtrOutput)
}

func (o ApplicationPostStartV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationPostStartV2] {
	return pulumix.Output[ApplicationPostStartV2]{
		OutputState: o.OutputState,
	}
}

// Execute. See `exec` below.
func (o ApplicationPostStartV2Output) Exec() ApplicationPostStartV2ExecPtrOutput {
	return o.ApplyT(func(v ApplicationPostStartV2) *ApplicationPostStartV2Exec { return v.Exec }).(ApplicationPostStartV2ExecPtrOutput)
}

type ApplicationPostStartV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationPostStartV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPostStartV2)(nil)).Elem()
}

func (o ApplicationPostStartV2PtrOutput) ToApplicationPostStartV2PtrOutput() ApplicationPostStartV2PtrOutput {
	return o
}

func (o ApplicationPostStartV2PtrOutput) ToApplicationPostStartV2PtrOutputWithContext(ctx context.Context) ApplicationPostStartV2PtrOutput {
	return o
}

func (o ApplicationPostStartV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPostStartV2] {
	return pulumix.Output[*ApplicationPostStartV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPostStartV2PtrOutput) Elem() ApplicationPostStartV2Output {
	return o.ApplyT(func(v *ApplicationPostStartV2) ApplicationPostStartV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationPostStartV2
		return ret
	}).(ApplicationPostStartV2Output)
}

// Execute. See `exec` below.
func (o ApplicationPostStartV2PtrOutput) Exec() ApplicationPostStartV2ExecPtrOutput {
	return o.ApplyT(func(v *ApplicationPostStartV2) *ApplicationPostStartV2Exec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ApplicationPostStartV2ExecPtrOutput)
}

type ApplicationPostStartV2Exec struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands []string `pulumi:"commands"`
}

// ApplicationPostStartV2ExecInput is an input type that accepts ApplicationPostStartV2ExecArgs and ApplicationPostStartV2ExecOutput values.
// You can construct a concrete instance of `ApplicationPostStartV2ExecInput` via:
//
//	ApplicationPostStartV2ExecArgs{...}
type ApplicationPostStartV2ExecInput interface {
	pulumi.Input

	ToApplicationPostStartV2ExecOutput() ApplicationPostStartV2ExecOutput
	ToApplicationPostStartV2ExecOutputWithContext(context.Context) ApplicationPostStartV2ExecOutput
}

type ApplicationPostStartV2ExecArgs struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ApplicationPostStartV2ExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPostStartV2Exec)(nil)).Elem()
}

func (i ApplicationPostStartV2ExecArgs) ToApplicationPostStartV2ExecOutput() ApplicationPostStartV2ExecOutput {
	return i.ToApplicationPostStartV2ExecOutputWithContext(context.Background())
}

func (i ApplicationPostStartV2ExecArgs) ToApplicationPostStartV2ExecOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2ExecOutput)
}

func (i ApplicationPostStartV2ExecArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationPostStartV2Exec] {
	return pulumix.Output[ApplicationPostStartV2Exec]{
		OutputState: i.ToApplicationPostStartV2ExecOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationPostStartV2ExecArgs) ToApplicationPostStartV2ExecPtrOutput() ApplicationPostStartV2ExecPtrOutput {
	return i.ToApplicationPostStartV2ExecPtrOutputWithContext(context.Background())
}

func (i ApplicationPostStartV2ExecArgs) ToApplicationPostStartV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2ExecOutput).ToApplicationPostStartV2ExecPtrOutputWithContext(ctx)
}

// ApplicationPostStartV2ExecPtrInput is an input type that accepts ApplicationPostStartV2ExecArgs, ApplicationPostStartV2ExecPtr and ApplicationPostStartV2ExecPtrOutput values.
// You can construct a concrete instance of `ApplicationPostStartV2ExecPtrInput` via:
//
//	        ApplicationPostStartV2ExecArgs{...}
//
//	or:
//
//	        nil
type ApplicationPostStartV2ExecPtrInput interface {
	pulumi.Input

	ToApplicationPostStartV2ExecPtrOutput() ApplicationPostStartV2ExecPtrOutput
	ToApplicationPostStartV2ExecPtrOutputWithContext(context.Context) ApplicationPostStartV2ExecPtrOutput
}

type applicationPostStartV2ExecPtrType ApplicationPostStartV2ExecArgs

func ApplicationPostStartV2ExecPtr(v *ApplicationPostStartV2ExecArgs) ApplicationPostStartV2ExecPtrInput {
	return (*applicationPostStartV2ExecPtrType)(v)
}

func (*applicationPostStartV2ExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPostStartV2Exec)(nil)).Elem()
}

func (i *applicationPostStartV2ExecPtrType) ToApplicationPostStartV2ExecPtrOutput() ApplicationPostStartV2ExecPtrOutput {
	return i.ToApplicationPostStartV2ExecPtrOutputWithContext(context.Background())
}

func (i *applicationPostStartV2ExecPtrType) ToApplicationPostStartV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPostStartV2ExecPtrOutput)
}

func (i *applicationPostStartV2ExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPostStartV2Exec] {
	return pulumix.Output[*ApplicationPostStartV2Exec]{
		OutputState: i.ToApplicationPostStartV2ExecPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPostStartV2ExecOutput struct{ *pulumi.OutputState }

func (ApplicationPostStartV2ExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPostStartV2Exec)(nil)).Elem()
}

func (o ApplicationPostStartV2ExecOutput) ToApplicationPostStartV2ExecOutput() ApplicationPostStartV2ExecOutput {
	return o
}

func (o ApplicationPostStartV2ExecOutput) ToApplicationPostStartV2ExecOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecOutput {
	return o
}

func (o ApplicationPostStartV2ExecOutput) ToApplicationPostStartV2ExecPtrOutput() ApplicationPostStartV2ExecPtrOutput {
	return o.ToApplicationPostStartV2ExecPtrOutputWithContext(context.Background())
}

func (o ApplicationPostStartV2ExecOutput) ToApplicationPostStartV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationPostStartV2Exec) *ApplicationPostStartV2Exec {
		return &v
	}).(ApplicationPostStartV2ExecPtrOutput)
}

func (o ApplicationPostStartV2ExecOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationPostStartV2Exec] {
	return pulumix.Output[ApplicationPostStartV2Exec]{
		OutputState: o.OutputState,
	}
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationPostStartV2ExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationPostStartV2Exec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ApplicationPostStartV2ExecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationPostStartV2ExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPostStartV2Exec)(nil)).Elem()
}

func (o ApplicationPostStartV2ExecPtrOutput) ToApplicationPostStartV2ExecPtrOutput() ApplicationPostStartV2ExecPtrOutput {
	return o
}

func (o ApplicationPostStartV2ExecPtrOutput) ToApplicationPostStartV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPostStartV2ExecPtrOutput {
	return o
}

func (o ApplicationPostStartV2ExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPostStartV2Exec] {
	return pulumix.Output[*ApplicationPostStartV2Exec]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPostStartV2ExecPtrOutput) Elem() ApplicationPostStartV2ExecOutput {
	return o.ApplyT(func(v *ApplicationPostStartV2Exec) ApplicationPostStartV2Exec {
		if v != nil {
			return *v
		}
		var ret ApplicationPostStartV2Exec
		return ret
	}).(ApplicationPostStartV2ExecOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationPostStartV2ExecPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationPostStartV2Exec) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type ApplicationPreStopV2 struct {
	// Execute. See `exec` below.
	Exec *ApplicationPreStopV2Exec `pulumi:"exec"`
}

// ApplicationPreStopV2Input is an input type that accepts ApplicationPreStopV2Args and ApplicationPreStopV2Output values.
// You can construct a concrete instance of `ApplicationPreStopV2Input` via:
//
//	ApplicationPreStopV2Args{...}
type ApplicationPreStopV2Input interface {
	pulumi.Input

	ToApplicationPreStopV2Output() ApplicationPreStopV2Output
	ToApplicationPreStopV2OutputWithContext(context.Context) ApplicationPreStopV2Output
}

type ApplicationPreStopV2Args struct {
	// Execute. See `exec` below.
	Exec ApplicationPreStopV2ExecPtrInput `pulumi:"exec"`
}

func (ApplicationPreStopV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPreStopV2)(nil)).Elem()
}

func (i ApplicationPreStopV2Args) ToApplicationPreStopV2Output() ApplicationPreStopV2Output {
	return i.ToApplicationPreStopV2OutputWithContext(context.Background())
}

func (i ApplicationPreStopV2Args) ToApplicationPreStopV2OutputWithContext(ctx context.Context) ApplicationPreStopV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2Output)
}

func (i ApplicationPreStopV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationPreStopV2] {
	return pulumix.Output[ApplicationPreStopV2]{
		OutputState: i.ToApplicationPreStopV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationPreStopV2Args) ToApplicationPreStopV2PtrOutput() ApplicationPreStopV2PtrOutput {
	return i.ToApplicationPreStopV2PtrOutputWithContext(context.Background())
}

func (i ApplicationPreStopV2Args) ToApplicationPreStopV2PtrOutputWithContext(ctx context.Context) ApplicationPreStopV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2Output).ToApplicationPreStopV2PtrOutputWithContext(ctx)
}

// ApplicationPreStopV2PtrInput is an input type that accepts ApplicationPreStopV2Args, ApplicationPreStopV2Ptr and ApplicationPreStopV2PtrOutput values.
// You can construct a concrete instance of `ApplicationPreStopV2PtrInput` via:
//
//	        ApplicationPreStopV2Args{...}
//
//	or:
//
//	        nil
type ApplicationPreStopV2PtrInput interface {
	pulumi.Input

	ToApplicationPreStopV2PtrOutput() ApplicationPreStopV2PtrOutput
	ToApplicationPreStopV2PtrOutputWithContext(context.Context) ApplicationPreStopV2PtrOutput
}

type applicationPreStopV2PtrType ApplicationPreStopV2Args

func ApplicationPreStopV2Ptr(v *ApplicationPreStopV2Args) ApplicationPreStopV2PtrInput {
	return (*applicationPreStopV2PtrType)(v)
}

func (*applicationPreStopV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPreStopV2)(nil)).Elem()
}

func (i *applicationPreStopV2PtrType) ToApplicationPreStopV2PtrOutput() ApplicationPreStopV2PtrOutput {
	return i.ToApplicationPreStopV2PtrOutputWithContext(context.Background())
}

func (i *applicationPreStopV2PtrType) ToApplicationPreStopV2PtrOutputWithContext(ctx context.Context) ApplicationPreStopV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2PtrOutput)
}

func (i *applicationPreStopV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPreStopV2] {
	return pulumix.Output[*ApplicationPreStopV2]{
		OutputState: i.ToApplicationPreStopV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPreStopV2Output struct{ *pulumi.OutputState }

func (ApplicationPreStopV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPreStopV2)(nil)).Elem()
}

func (o ApplicationPreStopV2Output) ToApplicationPreStopV2Output() ApplicationPreStopV2Output {
	return o
}

func (o ApplicationPreStopV2Output) ToApplicationPreStopV2OutputWithContext(ctx context.Context) ApplicationPreStopV2Output {
	return o
}

func (o ApplicationPreStopV2Output) ToApplicationPreStopV2PtrOutput() ApplicationPreStopV2PtrOutput {
	return o.ToApplicationPreStopV2PtrOutputWithContext(context.Background())
}

func (o ApplicationPreStopV2Output) ToApplicationPreStopV2PtrOutputWithContext(ctx context.Context) ApplicationPreStopV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationPreStopV2) *ApplicationPreStopV2 {
		return &v
	}).(ApplicationPreStopV2PtrOutput)
}

func (o ApplicationPreStopV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationPreStopV2] {
	return pulumix.Output[ApplicationPreStopV2]{
		OutputState: o.OutputState,
	}
}

// Execute. See `exec` below.
func (o ApplicationPreStopV2Output) Exec() ApplicationPreStopV2ExecPtrOutput {
	return o.ApplyT(func(v ApplicationPreStopV2) *ApplicationPreStopV2Exec { return v.Exec }).(ApplicationPreStopV2ExecPtrOutput)
}

type ApplicationPreStopV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationPreStopV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPreStopV2)(nil)).Elem()
}

func (o ApplicationPreStopV2PtrOutput) ToApplicationPreStopV2PtrOutput() ApplicationPreStopV2PtrOutput {
	return o
}

func (o ApplicationPreStopV2PtrOutput) ToApplicationPreStopV2PtrOutputWithContext(ctx context.Context) ApplicationPreStopV2PtrOutput {
	return o
}

func (o ApplicationPreStopV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPreStopV2] {
	return pulumix.Output[*ApplicationPreStopV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPreStopV2PtrOutput) Elem() ApplicationPreStopV2Output {
	return o.ApplyT(func(v *ApplicationPreStopV2) ApplicationPreStopV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationPreStopV2
		return ret
	}).(ApplicationPreStopV2Output)
}

// Execute. See `exec` below.
func (o ApplicationPreStopV2PtrOutput) Exec() ApplicationPreStopV2ExecPtrOutput {
	return o.ApplyT(func(v *ApplicationPreStopV2) *ApplicationPreStopV2Exec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ApplicationPreStopV2ExecPtrOutput)
}

type ApplicationPreStopV2Exec struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands []string `pulumi:"commands"`
}

// ApplicationPreStopV2ExecInput is an input type that accepts ApplicationPreStopV2ExecArgs and ApplicationPreStopV2ExecOutput values.
// You can construct a concrete instance of `ApplicationPreStopV2ExecInput` via:
//
//	ApplicationPreStopV2ExecArgs{...}
type ApplicationPreStopV2ExecInput interface {
	pulumi.Input

	ToApplicationPreStopV2ExecOutput() ApplicationPreStopV2ExecOutput
	ToApplicationPreStopV2ExecOutputWithContext(context.Context) ApplicationPreStopV2ExecOutput
}

type ApplicationPreStopV2ExecArgs struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ApplicationPreStopV2ExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPreStopV2Exec)(nil)).Elem()
}

func (i ApplicationPreStopV2ExecArgs) ToApplicationPreStopV2ExecOutput() ApplicationPreStopV2ExecOutput {
	return i.ToApplicationPreStopV2ExecOutputWithContext(context.Background())
}

func (i ApplicationPreStopV2ExecArgs) ToApplicationPreStopV2ExecOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2ExecOutput)
}

func (i ApplicationPreStopV2ExecArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationPreStopV2Exec] {
	return pulumix.Output[ApplicationPreStopV2Exec]{
		OutputState: i.ToApplicationPreStopV2ExecOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationPreStopV2ExecArgs) ToApplicationPreStopV2ExecPtrOutput() ApplicationPreStopV2ExecPtrOutput {
	return i.ToApplicationPreStopV2ExecPtrOutputWithContext(context.Background())
}

func (i ApplicationPreStopV2ExecArgs) ToApplicationPreStopV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2ExecOutput).ToApplicationPreStopV2ExecPtrOutputWithContext(ctx)
}

// ApplicationPreStopV2ExecPtrInput is an input type that accepts ApplicationPreStopV2ExecArgs, ApplicationPreStopV2ExecPtr and ApplicationPreStopV2ExecPtrOutput values.
// You can construct a concrete instance of `ApplicationPreStopV2ExecPtrInput` via:
//
//	        ApplicationPreStopV2ExecArgs{...}
//
//	or:
//
//	        nil
type ApplicationPreStopV2ExecPtrInput interface {
	pulumi.Input

	ToApplicationPreStopV2ExecPtrOutput() ApplicationPreStopV2ExecPtrOutput
	ToApplicationPreStopV2ExecPtrOutputWithContext(context.Context) ApplicationPreStopV2ExecPtrOutput
}

type applicationPreStopV2ExecPtrType ApplicationPreStopV2ExecArgs

func ApplicationPreStopV2ExecPtr(v *ApplicationPreStopV2ExecArgs) ApplicationPreStopV2ExecPtrInput {
	return (*applicationPreStopV2ExecPtrType)(v)
}

func (*applicationPreStopV2ExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPreStopV2Exec)(nil)).Elem()
}

func (i *applicationPreStopV2ExecPtrType) ToApplicationPreStopV2ExecPtrOutput() ApplicationPreStopV2ExecPtrOutput {
	return i.ToApplicationPreStopV2ExecPtrOutputWithContext(context.Background())
}

func (i *applicationPreStopV2ExecPtrType) ToApplicationPreStopV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPreStopV2ExecPtrOutput)
}

func (i *applicationPreStopV2ExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPreStopV2Exec] {
	return pulumix.Output[*ApplicationPreStopV2Exec]{
		OutputState: i.ToApplicationPreStopV2ExecPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPreStopV2ExecOutput struct{ *pulumi.OutputState }

func (ApplicationPreStopV2ExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPreStopV2Exec)(nil)).Elem()
}

func (o ApplicationPreStopV2ExecOutput) ToApplicationPreStopV2ExecOutput() ApplicationPreStopV2ExecOutput {
	return o
}

func (o ApplicationPreStopV2ExecOutput) ToApplicationPreStopV2ExecOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecOutput {
	return o
}

func (o ApplicationPreStopV2ExecOutput) ToApplicationPreStopV2ExecPtrOutput() ApplicationPreStopV2ExecPtrOutput {
	return o.ToApplicationPreStopV2ExecPtrOutputWithContext(context.Background())
}

func (o ApplicationPreStopV2ExecOutput) ToApplicationPreStopV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationPreStopV2Exec) *ApplicationPreStopV2Exec {
		return &v
	}).(ApplicationPreStopV2ExecPtrOutput)
}

func (o ApplicationPreStopV2ExecOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationPreStopV2Exec] {
	return pulumix.Output[ApplicationPreStopV2Exec]{
		OutputState: o.OutputState,
	}
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationPreStopV2ExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationPreStopV2Exec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ApplicationPreStopV2ExecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationPreStopV2ExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPreStopV2Exec)(nil)).Elem()
}

func (o ApplicationPreStopV2ExecPtrOutput) ToApplicationPreStopV2ExecPtrOutput() ApplicationPreStopV2ExecPtrOutput {
	return o
}

func (o ApplicationPreStopV2ExecPtrOutput) ToApplicationPreStopV2ExecPtrOutputWithContext(ctx context.Context) ApplicationPreStopV2ExecPtrOutput {
	return o
}

func (o ApplicationPreStopV2ExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPreStopV2Exec] {
	return pulumix.Output[*ApplicationPreStopV2Exec]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPreStopV2ExecPtrOutput) Elem() ApplicationPreStopV2ExecOutput {
	return o.ApplyT(func(v *ApplicationPreStopV2Exec) ApplicationPreStopV2Exec {
		if v != nil {
			return *v
		}
		var ret ApplicationPreStopV2Exec
		return ret
	}).(ApplicationPreStopV2ExecOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationPreStopV2ExecPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationPreStopV2Exec) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type ApplicationPvtzDiscoverySvc struct {
	// Enables the Kubernetes Service-based registration and discovery feature.
	Enable *bool `pulumi:"enable"`
	// The ID of the namespace.
	NamespaceId *string `pulumi:"namespaceId"`
	// The port number and protocol. See `portProtocols` below.
	PortProtocols []ApplicationPvtzDiscoverySvcPortProtocol `pulumi:"portProtocols"`
	// The name of the Service.
	ServiceName *string `pulumi:"serviceName"`
}

// ApplicationPvtzDiscoverySvcInput is an input type that accepts ApplicationPvtzDiscoverySvcArgs and ApplicationPvtzDiscoverySvcOutput values.
// You can construct a concrete instance of `ApplicationPvtzDiscoverySvcInput` via:
//
//	ApplicationPvtzDiscoverySvcArgs{...}
type ApplicationPvtzDiscoverySvcInput interface {
	pulumi.Input

	ToApplicationPvtzDiscoverySvcOutput() ApplicationPvtzDiscoverySvcOutput
	ToApplicationPvtzDiscoverySvcOutputWithContext(context.Context) ApplicationPvtzDiscoverySvcOutput
}

type ApplicationPvtzDiscoverySvcArgs struct {
	// Enables the Kubernetes Service-based registration and discovery feature.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// The ID of the namespace.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// The port number and protocol. See `portProtocols` below.
	PortProtocols ApplicationPvtzDiscoverySvcPortProtocolArrayInput `pulumi:"portProtocols"`
	// The name of the Service.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ApplicationPvtzDiscoverySvcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPvtzDiscoverySvc)(nil)).Elem()
}

func (i ApplicationPvtzDiscoverySvcArgs) ToApplicationPvtzDiscoverySvcOutput() ApplicationPvtzDiscoverySvcOutput {
	return i.ToApplicationPvtzDiscoverySvcOutputWithContext(context.Background())
}

func (i ApplicationPvtzDiscoverySvcArgs) ToApplicationPvtzDiscoverySvcOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPvtzDiscoverySvcOutput)
}

func (i ApplicationPvtzDiscoverySvcArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationPvtzDiscoverySvc] {
	return pulumix.Output[ApplicationPvtzDiscoverySvc]{
		OutputState: i.ToApplicationPvtzDiscoverySvcOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationPvtzDiscoverySvcArgs) ToApplicationPvtzDiscoverySvcPtrOutput() ApplicationPvtzDiscoverySvcPtrOutput {
	return i.ToApplicationPvtzDiscoverySvcPtrOutputWithContext(context.Background())
}

func (i ApplicationPvtzDiscoverySvcArgs) ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPvtzDiscoverySvcOutput).ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx)
}

// ApplicationPvtzDiscoverySvcPtrInput is an input type that accepts ApplicationPvtzDiscoverySvcArgs, ApplicationPvtzDiscoverySvcPtr and ApplicationPvtzDiscoverySvcPtrOutput values.
// You can construct a concrete instance of `ApplicationPvtzDiscoverySvcPtrInput` via:
//
//	        ApplicationPvtzDiscoverySvcArgs{...}
//
//	or:
//
//	        nil
type ApplicationPvtzDiscoverySvcPtrInput interface {
	pulumi.Input

	ToApplicationPvtzDiscoverySvcPtrOutput() ApplicationPvtzDiscoverySvcPtrOutput
	ToApplicationPvtzDiscoverySvcPtrOutputWithContext(context.Context) ApplicationPvtzDiscoverySvcPtrOutput
}

type applicationPvtzDiscoverySvcPtrType ApplicationPvtzDiscoverySvcArgs

func ApplicationPvtzDiscoverySvcPtr(v *ApplicationPvtzDiscoverySvcArgs) ApplicationPvtzDiscoverySvcPtrInput {
	return (*applicationPvtzDiscoverySvcPtrType)(v)
}

func (*applicationPvtzDiscoverySvcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPvtzDiscoverySvc)(nil)).Elem()
}

func (i *applicationPvtzDiscoverySvcPtrType) ToApplicationPvtzDiscoverySvcPtrOutput() ApplicationPvtzDiscoverySvcPtrOutput {
	return i.ToApplicationPvtzDiscoverySvcPtrOutputWithContext(context.Background())
}

func (i *applicationPvtzDiscoverySvcPtrType) ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPvtzDiscoverySvcPtrOutput)
}

func (i *applicationPvtzDiscoverySvcPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPvtzDiscoverySvc] {
	return pulumix.Output[*ApplicationPvtzDiscoverySvc]{
		OutputState: i.ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPvtzDiscoverySvcOutput struct{ *pulumi.OutputState }

func (ApplicationPvtzDiscoverySvcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPvtzDiscoverySvc)(nil)).Elem()
}

func (o ApplicationPvtzDiscoverySvcOutput) ToApplicationPvtzDiscoverySvcOutput() ApplicationPvtzDiscoverySvcOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcOutput) ToApplicationPvtzDiscoverySvcOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcOutput) ToApplicationPvtzDiscoverySvcPtrOutput() ApplicationPvtzDiscoverySvcPtrOutput {
	return o.ToApplicationPvtzDiscoverySvcPtrOutputWithContext(context.Background())
}

func (o ApplicationPvtzDiscoverySvcOutput) ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationPvtzDiscoverySvc) *ApplicationPvtzDiscoverySvc {
		return &v
	}).(ApplicationPvtzDiscoverySvcPtrOutput)
}

func (o ApplicationPvtzDiscoverySvcOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationPvtzDiscoverySvc] {
	return pulumix.Output[ApplicationPvtzDiscoverySvc]{
		OutputState: o.OutputState,
	}
}

// Enables the Kubernetes Service-based registration and discovery feature.
func (o ApplicationPvtzDiscoverySvcOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvc) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The ID of the namespace.
func (o ApplicationPvtzDiscoverySvcOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvc) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The port number and protocol. See `portProtocols` below.
func (o ApplicationPvtzDiscoverySvcOutput) PortProtocols() ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvc) []ApplicationPvtzDiscoverySvcPortProtocol { return v.PortProtocols }).(ApplicationPvtzDiscoverySvcPortProtocolArrayOutput)
}

// The name of the Service.
func (o ApplicationPvtzDiscoverySvcOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvc) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ApplicationPvtzDiscoverySvcPtrOutput struct{ *pulumi.OutputState }

func (ApplicationPvtzDiscoverySvcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationPvtzDiscoverySvc)(nil)).Elem()
}

func (o ApplicationPvtzDiscoverySvcPtrOutput) ToApplicationPvtzDiscoverySvcPtrOutput() ApplicationPvtzDiscoverySvcPtrOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPtrOutput) ToApplicationPvtzDiscoverySvcPtrOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPtrOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationPvtzDiscoverySvc] {
	return pulumix.Output[*ApplicationPvtzDiscoverySvc]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPvtzDiscoverySvcPtrOutput) Elem() ApplicationPvtzDiscoverySvcOutput {
	return o.ApplyT(func(v *ApplicationPvtzDiscoverySvc) ApplicationPvtzDiscoverySvc {
		if v != nil {
			return *v
		}
		var ret ApplicationPvtzDiscoverySvc
		return ret
	}).(ApplicationPvtzDiscoverySvcOutput)
}

// Enables the Kubernetes Service-based registration and discovery feature.
func (o ApplicationPvtzDiscoverySvcPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationPvtzDiscoverySvc) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The ID of the namespace.
func (o ApplicationPvtzDiscoverySvcPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationPvtzDiscoverySvc) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The port number and protocol. See `portProtocols` below.
func (o ApplicationPvtzDiscoverySvcPtrOutput) PortProtocols() ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return o.ApplyT(func(v *ApplicationPvtzDiscoverySvc) []ApplicationPvtzDiscoverySvcPortProtocol {
		if v == nil {
			return nil
		}
		return v.PortProtocols
	}).(ApplicationPvtzDiscoverySvcPortProtocolArrayOutput)
}

// The name of the Service.
func (o ApplicationPvtzDiscoverySvcPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationPvtzDiscoverySvc) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

type ApplicationPvtzDiscoverySvcPortProtocol struct {
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
	// The protocol. Valid values: `TCP` and `UDP`.
	Protocol *string `pulumi:"protocol"`
}

// ApplicationPvtzDiscoverySvcPortProtocolInput is an input type that accepts ApplicationPvtzDiscoverySvcPortProtocolArgs and ApplicationPvtzDiscoverySvcPortProtocolOutput values.
// You can construct a concrete instance of `ApplicationPvtzDiscoverySvcPortProtocolInput` via:
//
//	ApplicationPvtzDiscoverySvcPortProtocolArgs{...}
type ApplicationPvtzDiscoverySvcPortProtocolInput interface {
	pulumi.Input

	ToApplicationPvtzDiscoverySvcPortProtocolOutput() ApplicationPvtzDiscoverySvcPortProtocolOutput
	ToApplicationPvtzDiscoverySvcPortProtocolOutputWithContext(context.Context) ApplicationPvtzDiscoverySvcPortProtocolOutput
}

type ApplicationPvtzDiscoverySvcPortProtocolArgs struct {
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol. Valid values: `TCP` and `UDP`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ApplicationPvtzDiscoverySvcPortProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPvtzDiscoverySvcPortProtocol)(nil)).Elem()
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArgs) ToApplicationPvtzDiscoverySvcPortProtocolOutput() ApplicationPvtzDiscoverySvcPortProtocolOutput {
	return i.ToApplicationPvtzDiscoverySvcPortProtocolOutputWithContext(context.Background())
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArgs) ToApplicationPvtzDiscoverySvcPortProtocolOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPortProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPvtzDiscoverySvcPortProtocolOutput)
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationPvtzDiscoverySvcPortProtocol] {
	return pulumix.Output[ApplicationPvtzDiscoverySvcPortProtocol]{
		OutputState: i.ToApplicationPvtzDiscoverySvcPortProtocolOutputWithContext(ctx).OutputState,
	}
}

// ApplicationPvtzDiscoverySvcPortProtocolArrayInput is an input type that accepts ApplicationPvtzDiscoverySvcPortProtocolArray and ApplicationPvtzDiscoverySvcPortProtocolArrayOutput values.
// You can construct a concrete instance of `ApplicationPvtzDiscoverySvcPortProtocolArrayInput` via:
//
//	ApplicationPvtzDiscoverySvcPortProtocolArray{ ApplicationPvtzDiscoverySvcPortProtocolArgs{...} }
type ApplicationPvtzDiscoverySvcPortProtocolArrayInput interface {
	pulumi.Input

	ToApplicationPvtzDiscoverySvcPortProtocolArrayOutput() ApplicationPvtzDiscoverySvcPortProtocolArrayOutput
	ToApplicationPvtzDiscoverySvcPortProtocolArrayOutputWithContext(context.Context) ApplicationPvtzDiscoverySvcPortProtocolArrayOutput
}

type ApplicationPvtzDiscoverySvcPortProtocolArray []ApplicationPvtzDiscoverySvcPortProtocolInput

func (ApplicationPvtzDiscoverySvcPortProtocolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPvtzDiscoverySvcPortProtocol)(nil)).Elem()
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArray) ToApplicationPvtzDiscoverySvcPortProtocolArrayOutput() ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return i.ToApplicationPvtzDiscoverySvcPortProtocolArrayOutputWithContext(context.Background())
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArray) ToApplicationPvtzDiscoverySvcPortProtocolArrayOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPvtzDiscoverySvcPortProtocolArrayOutput)
}

func (i ApplicationPvtzDiscoverySvcPortProtocolArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationPvtzDiscoverySvcPortProtocol] {
	return pulumix.Output[[]ApplicationPvtzDiscoverySvcPortProtocol]{
		OutputState: i.ToApplicationPvtzDiscoverySvcPortProtocolArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationPvtzDiscoverySvcPortProtocolOutput struct{ *pulumi.OutputState }

func (ApplicationPvtzDiscoverySvcPortProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPvtzDiscoverySvcPortProtocol)(nil)).Elem()
}

func (o ApplicationPvtzDiscoverySvcPortProtocolOutput) ToApplicationPvtzDiscoverySvcPortProtocolOutput() ApplicationPvtzDiscoverySvcPortProtocolOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPortProtocolOutput) ToApplicationPvtzDiscoverySvcPortProtocolOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPortProtocolOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPortProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationPvtzDiscoverySvcPortProtocol] {
	return pulumix.Output[ApplicationPvtzDiscoverySvcPortProtocol]{
		OutputState: o.OutputState,
	}
}

// The port that is used to check the status of TCP connections.
func (o ApplicationPvtzDiscoverySvcPortProtocolOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvcPortProtocol) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol. Valid values: `TCP` and `UDP`.
func (o ApplicationPvtzDiscoverySvcPortProtocolOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPvtzDiscoverySvcPortProtocol) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ApplicationPvtzDiscoverySvcPortProtocolArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPvtzDiscoverySvcPortProtocolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPvtzDiscoverySvcPortProtocol)(nil)).Elem()
}

func (o ApplicationPvtzDiscoverySvcPortProtocolArrayOutput) ToApplicationPvtzDiscoverySvcPortProtocolArrayOutput() ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPortProtocolArrayOutput) ToApplicationPvtzDiscoverySvcPortProtocolArrayOutputWithContext(ctx context.Context) ApplicationPvtzDiscoverySvcPortProtocolArrayOutput {
	return o
}

func (o ApplicationPvtzDiscoverySvcPortProtocolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationPvtzDiscoverySvcPortProtocol] {
	return pulumix.Output[[]ApplicationPvtzDiscoverySvcPortProtocol]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPvtzDiscoverySvcPortProtocolArrayOutput) Index(i pulumi.IntInput) ApplicationPvtzDiscoverySvcPortProtocolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPvtzDiscoverySvcPortProtocol {
		return vs[0].([]ApplicationPvtzDiscoverySvcPortProtocol)[vs[1].(int)]
	}).(ApplicationPvtzDiscoverySvcPortProtocolOutput)
}

type ApplicationReadinessV2 struct {
	// Execute. See `exec` below.
	Exec *ApplicationReadinessV2Exec `pulumi:"exec"`
	// The liveness check settings of the container. See `httpGet` below.
	HttpGet *ApplicationReadinessV2HttpGet `pulumi:"httpGet"`
	// The delay of the health check.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The interval at which the health check is performed.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The liveness check settings of the container. See `tcpSocket` below.
	TcpSocket *ApplicationReadinessV2TcpSocket `pulumi:"tcpSocket"`
	// The timeout period of the health check.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ApplicationReadinessV2Input is an input type that accepts ApplicationReadinessV2Args and ApplicationReadinessV2Output values.
// You can construct a concrete instance of `ApplicationReadinessV2Input` via:
//
//	ApplicationReadinessV2Args{...}
type ApplicationReadinessV2Input interface {
	pulumi.Input

	ToApplicationReadinessV2Output() ApplicationReadinessV2Output
	ToApplicationReadinessV2OutputWithContext(context.Context) ApplicationReadinessV2Output
}

type ApplicationReadinessV2Args struct {
	// Execute. See `exec` below.
	Exec ApplicationReadinessV2ExecPtrInput `pulumi:"exec"`
	// The liveness check settings of the container. See `httpGet` below.
	HttpGet ApplicationReadinessV2HttpGetPtrInput `pulumi:"httpGet"`
	// The delay of the health check.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The interval at which the health check is performed.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The liveness check settings of the container. See `tcpSocket` below.
	TcpSocket ApplicationReadinessV2TcpSocketPtrInput `pulumi:"tcpSocket"`
	// The timeout period of the health check.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ApplicationReadinessV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2)(nil)).Elem()
}

func (i ApplicationReadinessV2Args) ToApplicationReadinessV2Output() ApplicationReadinessV2Output {
	return i.ToApplicationReadinessV2OutputWithContext(context.Background())
}

func (i ApplicationReadinessV2Args) ToApplicationReadinessV2OutputWithContext(ctx context.Context) ApplicationReadinessV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2Output)
}

func (i ApplicationReadinessV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2] {
	return pulumix.Output[ApplicationReadinessV2]{
		OutputState: i.ToApplicationReadinessV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReadinessV2Args) ToApplicationReadinessV2PtrOutput() ApplicationReadinessV2PtrOutput {
	return i.ToApplicationReadinessV2PtrOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2Args) ToApplicationReadinessV2PtrOutputWithContext(ctx context.Context) ApplicationReadinessV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2Output).ToApplicationReadinessV2PtrOutputWithContext(ctx)
}

// ApplicationReadinessV2PtrInput is an input type that accepts ApplicationReadinessV2Args, ApplicationReadinessV2Ptr and ApplicationReadinessV2PtrOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2PtrInput` via:
//
//	        ApplicationReadinessV2Args{...}
//
//	or:
//
//	        nil
type ApplicationReadinessV2PtrInput interface {
	pulumi.Input

	ToApplicationReadinessV2PtrOutput() ApplicationReadinessV2PtrOutput
	ToApplicationReadinessV2PtrOutputWithContext(context.Context) ApplicationReadinessV2PtrOutput
}

type applicationReadinessV2PtrType ApplicationReadinessV2Args

func ApplicationReadinessV2Ptr(v *ApplicationReadinessV2Args) ApplicationReadinessV2PtrInput {
	return (*applicationReadinessV2PtrType)(v)
}

func (*applicationReadinessV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2)(nil)).Elem()
}

func (i *applicationReadinessV2PtrType) ToApplicationReadinessV2PtrOutput() ApplicationReadinessV2PtrOutput {
	return i.ToApplicationReadinessV2PtrOutputWithContext(context.Background())
}

func (i *applicationReadinessV2PtrType) ToApplicationReadinessV2PtrOutputWithContext(ctx context.Context) ApplicationReadinessV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2PtrOutput)
}

func (i *applicationReadinessV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2] {
	return pulumix.Output[*ApplicationReadinessV2]{
		OutputState: i.ToApplicationReadinessV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReadinessV2Output struct{ *pulumi.OutputState }

func (ApplicationReadinessV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2)(nil)).Elem()
}

func (o ApplicationReadinessV2Output) ToApplicationReadinessV2Output() ApplicationReadinessV2Output {
	return o
}

func (o ApplicationReadinessV2Output) ToApplicationReadinessV2OutputWithContext(ctx context.Context) ApplicationReadinessV2Output {
	return o
}

func (o ApplicationReadinessV2Output) ToApplicationReadinessV2PtrOutput() ApplicationReadinessV2PtrOutput {
	return o.ToApplicationReadinessV2PtrOutputWithContext(context.Background())
}

func (o ApplicationReadinessV2Output) ToApplicationReadinessV2PtrOutputWithContext(ctx context.Context) ApplicationReadinessV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReadinessV2) *ApplicationReadinessV2 {
		return &v
	}).(ApplicationReadinessV2PtrOutput)
}

func (o ApplicationReadinessV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2] {
	return pulumix.Output[ApplicationReadinessV2]{
		OutputState: o.OutputState,
	}
}

// Execute. See `exec` below.
func (o ApplicationReadinessV2Output) Exec() ApplicationReadinessV2ExecPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *ApplicationReadinessV2Exec { return v.Exec }).(ApplicationReadinessV2ExecPtrOutput)
}

// The liveness check settings of the container. See `httpGet` below.
func (o ApplicationReadinessV2Output) HttpGet() ApplicationReadinessV2HttpGetPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *ApplicationReadinessV2HttpGet { return v.HttpGet }).(ApplicationReadinessV2HttpGetPtrOutput)
}

// The delay of the health check.
func (o ApplicationReadinessV2Output) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The interval at which the health check is performed.
func (o ApplicationReadinessV2Output) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The liveness check settings of the container. See `tcpSocket` below.
func (o ApplicationReadinessV2Output) TcpSocket() ApplicationReadinessV2TcpSocketPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *ApplicationReadinessV2TcpSocket { return v.TcpSocket }).(ApplicationReadinessV2TcpSocketPtrOutput)
}

// The timeout period of the health check.
func (o ApplicationReadinessV2Output) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ApplicationReadinessV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2)(nil)).Elem()
}

func (o ApplicationReadinessV2PtrOutput) ToApplicationReadinessV2PtrOutput() ApplicationReadinessV2PtrOutput {
	return o
}

func (o ApplicationReadinessV2PtrOutput) ToApplicationReadinessV2PtrOutputWithContext(ctx context.Context) ApplicationReadinessV2PtrOutput {
	return o
}

func (o ApplicationReadinessV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2] {
	return pulumix.Output[*ApplicationReadinessV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReadinessV2PtrOutput) Elem() ApplicationReadinessV2Output {
	return o.ApplyT(func(v *ApplicationReadinessV2) ApplicationReadinessV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationReadinessV2
		return ret
	}).(ApplicationReadinessV2Output)
}

// Execute. See `exec` below.
func (o ApplicationReadinessV2PtrOutput) Exec() ApplicationReadinessV2ExecPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *ApplicationReadinessV2Exec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ApplicationReadinessV2ExecPtrOutput)
}

// The liveness check settings of the container. See `httpGet` below.
func (o ApplicationReadinessV2PtrOutput) HttpGet() ApplicationReadinessV2HttpGetPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *ApplicationReadinessV2HttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ApplicationReadinessV2HttpGetPtrOutput)
}

// The delay of the health check.
func (o ApplicationReadinessV2PtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The interval at which the health check is performed.
func (o ApplicationReadinessV2PtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The liveness check settings of the container. See `tcpSocket` below.
func (o ApplicationReadinessV2PtrOutput) TcpSocket() ApplicationReadinessV2TcpSocketPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *ApplicationReadinessV2TcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(ApplicationReadinessV2TcpSocketPtrOutput)
}

// The timeout period of the health check.
func (o ApplicationReadinessV2PtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ApplicationReadinessV2Exec struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands []string `pulumi:"commands"`
}

// ApplicationReadinessV2ExecInput is an input type that accepts ApplicationReadinessV2ExecArgs and ApplicationReadinessV2ExecOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2ExecInput` via:
//
//	ApplicationReadinessV2ExecArgs{...}
type ApplicationReadinessV2ExecInput interface {
	pulumi.Input

	ToApplicationReadinessV2ExecOutput() ApplicationReadinessV2ExecOutput
	ToApplicationReadinessV2ExecOutputWithContext(context.Context) ApplicationReadinessV2ExecOutput
}

type ApplicationReadinessV2ExecArgs struct {
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (ApplicationReadinessV2ExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2Exec)(nil)).Elem()
}

func (i ApplicationReadinessV2ExecArgs) ToApplicationReadinessV2ExecOutput() ApplicationReadinessV2ExecOutput {
	return i.ToApplicationReadinessV2ExecOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2ExecArgs) ToApplicationReadinessV2ExecOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2ExecOutput)
}

func (i ApplicationReadinessV2ExecArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2Exec] {
	return pulumix.Output[ApplicationReadinessV2Exec]{
		OutputState: i.ToApplicationReadinessV2ExecOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReadinessV2ExecArgs) ToApplicationReadinessV2ExecPtrOutput() ApplicationReadinessV2ExecPtrOutput {
	return i.ToApplicationReadinessV2ExecPtrOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2ExecArgs) ToApplicationReadinessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2ExecOutput).ToApplicationReadinessV2ExecPtrOutputWithContext(ctx)
}

// ApplicationReadinessV2ExecPtrInput is an input type that accepts ApplicationReadinessV2ExecArgs, ApplicationReadinessV2ExecPtr and ApplicationReadinessV2ExecPtrOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2ExecPtrInput` via:
//
//	        ApplicationReadinessV2ExecArgs{...}
//
//	or:
//
//	        nil
type ApplicationReadinessV2ExecPtrInput interface {
	pulumi.Input

	ToApplicationReadinessV2ExecPtrOutput() ApplicationReadinessV2ExecPtrOutput
	ToApplicationReadinessV2ExecPtrOutputWithContext(context.Context) ApplicationReadinessV2ExecPtrOutput
}

type applicationReadinessV2ExecPtrType ApplicationReadinessV2ExecArgs

func ApplicationReadinessV2ExecPtr(v *ApplicationReadinessV2ExecArgs) ApplicationReadinessV2ExecPtrInput {
	return (*applicationReadinessV2ExecPtrType)(v)
}

func (*applicationReadinessV2ExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2Exec)(nil)).Elem()
}

func (i *applicationReadinessV2ExecPtrType) ToApplicationReadinessV2ExecPtrOutput() ApplicationReadinessV2ExecPtrOutput {
	return i.ToApplicationReadinessV2ExecPtrOutputWithContext(context.Background())
}

func (i *applicationReadinessV2ExecPtrType) ToApplicationReadinessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2ExecPtrOutput)
}

func (i *applicationReadinessV2ExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2Exec] {
	return pulumix.Output[*ApplicationReadinessV2Exec]{
		OutputState: i.ToApplicationReadinessV2ExecPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReadinessV2ExecOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2ExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2Exec)(nil)).Elem()
}

func (o ApplicationReadinessV2ExecOutput) ToApplicationReadinessV2ExecOutput() ApplicationReadinessV2ExecOutput {
	return o
}

func (o ApplicationReadinessV2ExecOutput) ToApplicationReadinessV2ExecOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecOutput {
	return o
}

func (o ApplicationReadinessV2ExecOutput) ToApplicationReadinessV2ExecPtrOutput() ApplicationReadinessV2ExecPtrOutput {
	return o.ToApplicationReadinessV2ExecPtrOutputWithContext(context.Background())
}

func (o ApplicationReadinessV2ExecOutput) ToApplicationReadinessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReadinessV2Exec) *ApplicationReadinessV2Exec {
		return &v
	}).(ApplicationReadinessV2ExecPtrOutput)
}

func (o ApplicationReadinessV2ExecOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2Exec] {
	return pulumix.Output[ApplicationReadinessV2Exec]{
		OutputState: o.OutputState,
	}
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationReadinessV2ExecOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationReadinessV2Exec) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type ApplicationReadinessV2ExecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2ExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2Exec)(nil)).Elem()
}

func (o ApplicationReadinessV2ExecPtrOutput) ToApplicationReadinessV2ExecPtrOutput() ApplicationReadinessV2ExecPtrOutput {
	return o
}

func (o ApplicationReadinessV2ExecPtrOutput) ToApplicationReadinessV2ExecPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2ExecPtrOutput {
	return o
}

func (o ApplicationReadinessV2ExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2Exec] {
	return pulumix.Output[*ApplicationReadinessV2Exec]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReadinessV2ExecPtrOutput) Elem() ApplicationReadinessV2ExecOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2Exec) ApplicationReadinessV2Exec {
		if v != nil {
			return *v
		}
		var ret ApplicationReadinessV2Exec
		return ret
	}).(ApplicationReadinessV2ExecOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationReadinessV2ExecPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2Exec) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type ApplicationReadinessV2HttpGet struct {
	// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
	IsContainKeyWord *bool `pulumi:"isContainKeyWord"`
	// The custom keywords.
	KeyWord *string `pulumi:"keyWord"`
	// The request path.
	Path *string `pulumi:"path"`
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
	// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
	Scheme *string `pulumi:"scheme"`
}

// ApplicationReadinessV2HttpGetInput is an input type that accepts ApplicationReadinessV2HttpGetArgs and ApplicationReadinessV2HttpGetOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2HttpGetInput` via:
//
//	ApplicationReadinessV2HttpGetArgs{...}
type ApplicationReadinessV2HttpGetInput interface {
	pulumi.Input

	ToApplicationReadinessV2HttpGetOutput() ApplicationReadinessV2HttpGetOutput
	ToApplicationReadinessV2HttpGetOutputWithContext(context.Context) ApplicationReadinessV2HttpGetOutput
}

type ApplicationReadinessV2HttpGetArgs struct {
	// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
	IsContainKeyWord pulumi.BoolPtrInput `pulumi:"isContainKeyWord"`
	// The custom keywords.
	KeyWord pulumi.StringPtrInput `pulumi:"keyWord"`
	// The request path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ApplicationReadinessV2HttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2HttpGet)(nil)).Elem()
}

func (i ApplicationReadinessV2HttpGetArgs) ToApplicationReadinessV2HttpGetOutput() ApplicationReadinessV2HttpGetOutput {
	return i.ToApplicationReadinessV2HttpGetOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2HttpGetArgs) ToApplicationReadinessV2HttpGetOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2HttpGetOutput)
}

func (i ApplicationReadinessV2HttpGetArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2HttpGet] {
	return pulumix.Output[ApplicationReadinessV2HttpGet]{
		OutputState: i.ToApplicationReadinessV2HttpGetOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReadinessV2HttpGetArgs) ToApplicationReadinessV2HttpGetPtrOutput() ApplicationReadinessV2HttpGetPtrOutput {
	return i.ToApplicationReadinessV2HttpGetPtrOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2HttpGetArgs) ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2HttpGetOutput).ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx)
}

// ApplicationReadinessV2HttpGetPtrInput is an input type that accepts ApplicationReadinessV2HttpGetArgs, ApplicationReadinessV2HttpGetPtr and ApplicationReadinessV2HttpGetPtrOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2HttpGetPtrInput` via:
//
//	        ApplicationReadinessV2HttpGetArgs{...}
//
//	or:
//
//	        nil
type ApplicationReadinessV2HttpGetPtrInput interface {
	pulumi.Input

	ToApplicationReadinessV2HttpGetPtrOutput() ApplicationReadinessV2HttpGetPtrOutput
	ToApplicationReadinessV2HttpGetPtrOutputWithContext(context.Context) ApplicationReadinessV2HttpGetPtrOutput
}

type applicationReadinessV2HttpGetPtrType ApplicationReadinessV2HttpGetArgs

func ApplicationReadinessV2HttpGetPtr(v *ApplicationReadinessV2HttpGetArgs) ApplicationReadinessV2HttpGetPtrInput {
	return (*applicationReadinessV2HttpGetPtrType)(v)
}

func (*applicationReadinessV2HttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2HttpGet)(nil)).Elem()
}

func (i *applicationReadinessV2HttpGetPtrType) ToApplicationReadinessV2HttpGetPtrOutput() ApplicationReadinessV2HttpGetPtrOutput {
	return i.ToApplicationReadinessV2HttpGetPtrOutputWithContext(context.Background())
}

func (i *applicationReadinessV2HttpGetPtrType) ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2HttpGetPtrOutput)
}

func (i *applicationReadinessV2HttpGetPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2HttpGet] {
	return pulumix.Output[*ApplicationReadinessV2HttpGet]{
		OutputState: i.ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReadinessV2HttpGetOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2HttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2HttpGet)(nil)).Elem()
}

func (o ApplicationReadinessV2HttpGetOutput) ToApplicationReadinessV2HttpGetOutput() ApplicationReadinessV2HttpGetOutput {
	return o
}

func (o ApplicationReadinessV2HttpGetOutput) ToApplicationReadinessV2HttpGetOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetOutput {
	return o
}

func (o ApplicationReadinessV2HttpGetOutput) ToApplicationReadinessV2HttpGetPtrOutput() ApplicationReadinessV2HttpGetPtrOutput {
	return o.ToApplicationReadinessV2HttpGetPtrOutputWithContext(context.Background())
}

func (o ApplicationReadinessV2HttpGetOutput) ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReadinessV2HttpGet) *ApplicationReadinessV2HttpGet {
		return &v
	}).(ApplicationReadinessV2HttpGetPtrOutput)
}

func (o ApplicationReadinessV2HttpGetOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2HttpGet] {
	return pulumix.Output[ApplicationReadinessV2HttpGet]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
func (o ApplicationReadinessV2HttpGetOutput) IsContainKeyWord() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2HttpGet) *bool { return v.IsContainKeyWord }).(pulumi.BoolPtrOutput)
}

// The custom keywords.
func (o ApplicationReadinessV2HttpGetOutput) KeyWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2HttpGet) *string { return v.KeyWord }).(pulumi.StringPtrOutput)
}

// The request path.
func (o ApplicationReadinessV2HttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2HttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationReadinessV2HttpGetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2HttpGet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
func (o ApplicationReadinessV2HttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2HttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ApplicationReadinessV2HttpGetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2HttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2HttpGet)(nil)).Elem()
}

func (o ApplicationReadinessV2HttpGetPtrOutput) ToApplicationReadinessV2HttpGetPtrOutput() ApplicationReadinessV2HttpGetPtrOutput {
	return o
}

func (o ApplicationReadinessV2HttpGetPtrOutput) ToApplicationReadinessV2HttpGetPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2HttpGetPtrOutput {
	return o
}

func (o ApplicationReadinessV2HttpGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2HttpGet] {
	return pulumix.Output[*ApplicationReadinessV2HttpGet]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReadinessV2HttpGetPtrOutput) Elem() ApplicationReadinessV2HttpGetOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) ApplicationReadinessV2HttpGet {
		if v != nil {
			return *v
		}
		var ret ApplicationReadinessV2HttpGet
		return ret
	}).(ApplicationReadinessV2HttpGetOutput)
}

// Specifies whether the response contains keywords. Valid values: `true` and `false`. If you do not set it, the advanced settings are not used.
func (o ApplicationReadinessV2HttpGetPtrOutput) IsContainKeyWord() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) *bool {
		if v == nil {
			return nil
		}
		return v.IsContainKeyWord
	}).(pulumi.BoolPtrOutput)
}

// The custom keywords.
func (o ApplicationReadinessV2HttpGetPtrOutput) KeyWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.KeyWord
	}).(pulumi.StringPtrOutput)
}

// The request path.
func (o ApplicationReadinessV2HttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationReadinessV2HttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The protocol that is used to perform the health check. Valid values: `HTTP` and `HTTPS`.
func (o ApplicationReadinessV2HttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2HttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

type ApplicationReadinessV2TcpSocket struct {
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
}

// ApplicationReadinessV2TcpSocketInput is an input type that accepts ApplicationReadinessV2TcpSocketArgs and ApplicationReadinessV2TcpSocketOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2TcpSocketInput` via:
//
//	ApplicationReadinessV2TcpSocketArgs{...}
type ApplicationReadinessV2TcpSocketInput interface {
	pulumi.Input

	ToApplicationReadinessV2TcpSocketOutput() ApplicationReadinessV2TcpSocketOutput
	ToApplicationReadinessV2TcpSocketOutputWithContext(context.Context) ApplicationReadinessV2TcpSocketOutput
}

type ApplicationReadinessV2TcpSocketArgs struct {
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ApplicationReadinessV2TcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2TcpSocket)(nil)).Elem()
}

func (i ApplicationReadinessV2TcpSocketArgs) ToApplicationReadinessV2TcpSocketOutput() ApplicationReadinessV2TcpSocketOutput {
	return i.ToApplicationReadinessV2TcpSocketOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2TcpSocketArgs) ToApplicationReadinessV2TcpSocketOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2TcpSocketOutput)
}

func (i ApplicationReadinessV2TcpSocketArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2TcpSocket] {
	return pulumix.Output[ApplicationReadinessV2TcpSocket]{
		OutputState: i.ToApplicationReadinessV2TcpSocketOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReadinessV2TcpSocketArgs) ToApplicationReadinessV2TcpSocketPtrOutput() ApplicationReadinessV2TcpSocketPtrOutput {
	return i.ToApplicationReadinessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (i ApplicationReadinessV2TcpSocketArgs) ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2TcpSocketOutput).ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx)
}

// ApplicationReadinessV2TcpSocketPtrInput is an input type that accepts ApplicationReadinessV2TcpSocketArgs, ApplicationReadinessV2TcpSocketPtr and ApplicationReadinessV2TcpSocketPtrOutput values.
// You can construct a concrete instance of `ApplicationReadinessV2TcpSocketPtrInput` via:
//
//	        ApplicationReadinessV2TcpSocketArgs{...}
//
//	or:
//
//	        nil
type ApplicationReadinessV2TcpSocketPtrInput interface {
	pulumi.Input

	ToApplicationReadinessV2TcpSocketPtrOutput() ApplicationReadinessV2TcpSocketPtrOutput
	ToApplicationReadinessV2TcpSocketPtrOutputWithContext(context.Context) ApplicationReadinessV2TcpSocketPtrOutput
}

type applicationReadinessV2TcpSocketPtrType ApplicationReadinessV2TcpSocketArgs

func ApplicationReadinessV2TcpSocketPtr(v *ApplicationReadinessV2TcpSocketArgs) ApplicationReadinessV2TcpSocketPtrInput {
	return (*applicationReadinessV2TcpSocketPtrType)(v)
}

func (*applicationReadinessV2TcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2TcpSocket)(nil)).Elem()
}

func (i *applicationReadinessV2TcpSocketPtrType) ToApplicationReadinessV2TcpSocketPtrOutput() ApplicationReadinessV2TcpSocketPtrOutput {
	return i.ToApplicationReadinessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (i *applicationReadinessV2TcpSocketPtrType) ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReadinessV2TcpSocketPtrOutput)
}

func (i *applicationReadinessV2TcpSocketPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2TcpSocket] {
	return pulumix.Output[*ApplicationReadinessV2TcpSocket]{
		OutputState: i.ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReadinessV2TcpSocketOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2TcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReadinessV2TcpSocket)(nil)).Elem()
}

func (o ApplicationReadinessV2TcpSocketOutput) ToApplicationReadinessV2TcpSocketOutput() ApplicationReadinessV2TcpSocketOutput {
	return o
}

func (o ApplicationReadinessV2TcpSocketOutput) ToApplicationReadinessV2TcpSocketOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketOutput {
	return o
}

func (o ApplicationReadinessV2TcpSocketOutput) ToApplicationReadinessV2TcpSocketPtrOutput() ApplicationReadinessV2TcpSocketPtrOutput {
	return o.ToApplicationReadinessV2TcpSocketPtrOutputWithContext(context.Background())
}

func (o ApplicationReadinessV2TcpSocketOutput) ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReadinessV2TcpSocket) *ApplicationReadinessV2TcpSocket {
		return &v
	}).(ApplicationReadinessV2TcpSocketPtrOutput)
}

func (o ApplicationReadinessV2TcpSocketOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReadinessV2TcpSocket] {
	return pulumix.Output[ApplicationReadinessV2TcpSocket]{
		OutputState: o.OutputState,
	}
}

// The port that is used to check the status of TCP connections.
func (o ApplicationReadinessV2TcpSocketOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationReadinessV2TcpSocket) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ApplicationReadinessV2TcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReadinessV2TcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReadinessV2TcpSocket)(nil)).Elem()
}

func (o ApplicationReadinessV2TcpSocketPtrOutput) ToApplicationReadinessV2TcpSocketPtrOutput() ApplicationReadinessV2TcpSocketPtrOutput {
	return o
}

func (o ApplicationReadinessV2TcpSocketPtrOutput) ToApplicationReadinessV2TcpSocketPtrOutputWithContext(ctx context.Context) ApplicationReadinessV2TcpSocketPtrOutput {
	return o
}

func (o ApplicationReadinessV2TcpSocketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReadinessV2TcpSocket] {
	return pulumix.Output[*ApplicationReadinessV2TcpSocket]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReadinessV2TcpSocketPtrOutput) Elem() ApplicationReadinessV2TcpSocketOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2TcpSocket) ApplicationReadinessV2TcpSocket {
		if v != nil {
			return *v
		}
		var ret ApplicationReadinessV2TcpSocket
		return ret
	}).(ApplicationReadinessV2TcpSocketOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationReadinessV2TcpSocketPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationReadinessV2TcpSocket) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetric struct {
	// Maximum number of instances applied.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Indicator rule configuration. See `metrics` below.
	Metrics []ApplicationScalingRuleScalingRuleMetricMetric `pulumi:"metrics"`
	// Minimum number of instances applied.
	MinReplicas *int `pulumi:"minReplicas"`
	// Apply shrink rules. See `scaleDownRules` below.
	ScaleDownRules *ApplicationScalingRuleScalingRuleMetricScaleDownRules `pulumi:"scaleDownRules"`
	// Apply expansion rules. See `scaleUpRules` below.
	ScaleUpRules *ApplicationScalingRuleScalingRuleMetricScaleUpRules `pulumi:"scaleUpRules"`
}

// ApplicationScalingRuleScalingRuleMetricInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricArgs and ApplicationScalingRuleScalingRuleMetricOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricInput` via:
//
//	ApplicationScalingRuleScalingRuleMetricArgs{...}
type ApplicationScalingRuleScalingRuleMetricInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricOutput() ApplicationScalingRuleScalingRuleMetricOutput
	ToApplicationScalingRuleScalingRuleMetricOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricOutput
}

type ApplicationScalingRuleScalingRuleMetricArgs struct {
	// Maximum number of instances applied.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// Indicator rule configuration. See `metrics` below.
	Metrics ApplicationScalingRuleScalingRuleMetricMetricArrayInput `pulumi:"metrics"`
	// Minimum number of instances applied.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// Apply shrink rules. See `scaleDownRules` below.
	ScaleDownRules ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput `pulumi:"scaleDownRules"`
	// Apply expansion rules. See `scaleUpRules` below.
	ScaleUpRules ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput `pulumi:"scaleUpRules"`
}

func (ApplicationScalingRuleScalingRuleMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetric)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleMetricArgs) ToApplicationScalingRuleScalingRuleMetricOutput() ApplicationScalingRuleScalingRuleMetricOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricArgs) ToApplicationScalingRuleScalingRuleMetricOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricOutput)
}

func (i ApplicationScalingRuleScalingRuleMetricArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetric] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetric]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationScalingRuleScalingRuleMetricArgs) ToApplicationScalingRuleScalingRuleMetricPtrOutput() ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricArgs) ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricOutput).ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx)
}

// ApplicationScalingRuleScalingRuleMetricPtrInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricArgs, ApplicationScalingRuleScalingRuleMetricPtr and ApplicationScalingRuleScalingRuleMetricPtrOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricPtrInput` via:
//
//	        ApplicationScalingRuleScalingRuleMetricArgs{...}
//
//	or:
//
//	        nil
type ApplicationScalingRuleScalingRuleMetricPtrInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricPtrOutput() ApplicationScalingRuleScalingRuleMetricPtrOutput
	ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricPtrOutput
}

type applicationScalingRuleScalingRuleMetricPtrType ApplicationScalingRuleScalingRuleMetricArgs

func ApplicationScalingRuleScalingRuleMetricPtr(v *ApplicationScalingRuleScalingRuleMetricArgs) ApplicationScalingRuleScalingRuleMetricPtrInput {
	return (*applicationScalingRuleScalingRuleMetricPtrType)(v)
}

func (*applicationScalingRuleScalingRuleMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetric)(nil)).Elem()
}

func (i *applicationScalingRuleScalingRuleMetricPtrType) ToApplicationScalingRuleScalingRuleMetricPtrOutput() ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(context.Background())
}

func (i *applicationScalingRuleScalingRuleMetricPtrType) ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricPtrOutput)
}

func (i *applicationScalingRuleScalingRuleMetricPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetric] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetric]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleMetricOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetric)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricOutput) ToApplicationScalingRuleScalingRuleMetricOutput() ApplicationScalingRuleScalingRuleMetricOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricOutput) ToApplicationScalingRuleScalingRuleMetricOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricOutput) ToApplicationScalingRuleScalingRuleMetricPtrOutput() ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return o.ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(context.Background())
}

func (o ApplicationScalingRuleScalingRuleMetricOutput) ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationScalingRuleScalingRuleMetric) *ApplicationScalingRuleScalingRuleMetric {
		return &v
	}).(ApplicationScalingRuleScalingRuleMetricPtrOutput)
}

func (o ApplicationScalingRuleScalingRuleMetricOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetric] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetric]{
		OutputState: o.OutputState,
	}
}

// Maximum number of instances applied.
func (o ApplicationScalingRuleScalingRuleMetricOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetric) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Indicator rule configuration. See `metrics` below.
func (o ApplicationScalingRuleScalingRuleMetricOutput) Metrics() ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetric) []ApplicationScalingRuleScalingRuleMetricMetric {
		return v.Metrics
	}).(ApplicationScalingRuleScalingRuleMetricMetricArrayOutput)
}

// Minimum number of instances applied.
func (o ApplicationScalingRuleScalingRuleMetricOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetric) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// Apply shrink rules. See `scaleDownRules` below.
func (o ApplicationScalingRuleScalingRuleMetricOutput) ScaleDownRules() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetric) *ApplicationScalingRuleScalingRuleMetricScaleDownRules {
		return v.ScaleDownRules
	}).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput)
}

// Apply expansion rules. See `scaleUpRules` below.
func (o ApplicationScalingRuleScalingRuleMetricOutput) ScaleUpRules() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetric) *ApplicationScalingRuleScalingRuleMetricScaleUpRules {
		return v.ScaleUpRules
	}).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricPtrOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetric)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) ToApplicationScalingRuleScalingRuleMetricPtrOutput() ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) ToApplicationScalingRuleScalingRuleMetricPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetric] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetric]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) Elem() ApplicationScalingRuleScalingRuleMetricOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) ApplicationScalingRuleScalingRuleMetric {
		if v != nil {
			return *v
		}
		var ret ApplicationScalingRuleScalingRuleMetric
		return ret
	}).(ApplicationScalingRuleScalingRuleMetricOutput)
}

// Maximum number of instances applied.
func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Indicator rule configuration. See `metrics` below.
func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) Metrics() ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) []ApplicationScalingRuleScalingRuleMetricMetric {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ApplicationScalingRuleScalingRuleMetricMetricArrayOutput)
}

// Minimum number of instances applied.
func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// Apply shrink rules. See `scaleDownRules` below.
func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) ScaleDownRules() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) *ApplicationScalingRuleScalingRuleMetricScaleDownRules {
		if v == nil {
			return nil
		}
		return v.ScaleDownRules
	}).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput)
}

// Apply expansion rules. See `scaleUpRules` below.
func (o ApplicationScalingRuleScalingRuleMetricPtrOutput) ScaleUpRules() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetric) *ApplicationScalingRuleScalingRuleMetricScaleUpRules {
		if v == nil {
			return nil
		}
		return v.ScaleUpRules
	}).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricMetric struct {
	// According to different `metricType`, set the target value of the corresponding monitoring index.
	MetricTargetAverageUtilization *int `pulumi:"metricTargetAverageUtilization"`
	// Monitoring indicator trigger condition. Valid values: `CPU`, `MEMORY`, `tcpActiveConn`, `QPS`, `RT`, `SLB_QPS`, `SLB_RT`, `INTRANET_SLB_QPS` and `INTRANET_SLB_RT`. The values are described as follows:
	// - CPU: CPU usage.
	// - MEMORY: MEMORY usage.
	// - tcpActiveConn: The average number of TCP active connections for a single instance in 30 seconds.
	// - QPS: The average QPS of a single instance within 1 minute of JAVA application.
	// - RT: The average response time of all service interfaces within 1 minute of JAVA application.
	// - SLB_QPS: The average public network SLB QPS of a single instance within 15 seconds.
	// - SLB_RT: The average response time of public network SLB within 15 seconds.
	// - INTRANET_SLB_QPS: The average private network SLB QPS of a single instance within 15 seconds.
	// - INTRANET_SLB_RT: The average response time of private network SLB within 15 seconds.
	//   **NOTE:** From version 1.206.0, `metricType` can be set to `QPS`, `RT`, `INTRANET_SLB_QPS`, `INTRANET_SLB_RT`.
	MetricType *string `pulumi:"metricType"`
	// SLB ID.
	SlbId *string `pulumi:"slbId"`
	// The log store of the Log Service.
	SlbLogStore *string `pulumi:"slbLogStore"`
	// The project of the Log Service.
	SlbProject *string `pulumi:"slbProject"`
	// SLB listening port.
	Vport *string `pulumi:"vport"`
}

// ApplicationScalingRuleScalingRuleMetricMetricInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricMetricArgs and ApplicationScalingRuleScalingRuleMetricMetricOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricMetricInput` via:
//
//	ApplicationScalingRuleScalingRuleMetricMetricArgs{...}
type ApplicationScalingRuleScalingRuleMetricMetricInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricMetricOutput() ApplicationScalingRuleScalingRuleMetricMetricOutput
	ToApplicationScalingRuleScalingRuleMetricMetricOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricMetricOutput
}

type ApplicationScalingRuleScalingRuleMetricMetricArgs struct {
	// According to different `metricType`, set the target value of the corresponding monitoring index.
	MetricTargetAverageUtilization pulumi.IntPtrInput `pulumi:"metricTargetAverageUtilization"`
	// Monitoring indicator trigger condition. Valid values: `CPU`, `MEMORY`, `tcpActiveConn`, `QPS`, `RT`, `SLB_QPS`, `SLB_RT`, `INTRANET_SLB_QPS` and `INTRANET_SLB_RT`. The values are described as follows:
	// - CPU: CPU usage.
	// - MEMORY: MEMORY usage.
	// - tcpActiveConn: The average number of TCP active connections for a single instance in 30 seconds.
	// - QPS: The average QPS of a single instance within 1 minute of JAVA application.
	// - RT: The average response time of all service interfaces within 1 minute of JAVA application.
	// - SLB_QPS: The average public network SLB QPS of a single instance within 15 seconds.
	// - SLB_RT: The average response time of public network SLB within 15 seconds.
	// - INTRANET_SLB_QPS: The average private network SLB QPS of a single instance within 15 seconds.
	// - INTRANET_SLB_RT: The average response time of private network SLB within 15 seconds.
	//   **NOTE:** From version 1.206.0, `metricType` can be set to `QPS`, `RT`, `INTRANET_SLB_QPS`, `INTRANET_SLB_RT`.
	MetricType pulumi.StringPtrInput `pulumi:"metricType"`
	// SLB ID.
	SlbId pulumi.StringPtrInput `pulumi:"slbId"`
	// The log store of the Log Service.
	SlbLogStore pulumi.StringPtrInput `pulumi:"slbLogStore"`
	// The project of the Log Service.
	SlbProject pulumi.StringPtrInput `pulumi:"slbProject"`
	// SLB listening port.
	Vport pulumi.StringPtrInput `pulumi:"vport"`
}

func (ApplicationScalingRuleScalingRuleMetricMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArgs) ToApplicationScalingRuleScalingRuleMetricMetricOutput() ApplicationScalingRuleScalingRuleMetricMetricOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricMetricOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArgs) ToApplicationScalingRuleScalingRuleMetricMetricOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricMetricOutput)
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricMetric] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricMetric]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricMetricOutputWithContext(ctx).OutputState,
	}
}

// ApplicationScalingRuleScalingRuleMetricMetricArrayInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricMetricArray and ApplicationScalingRuleScalingRuleMetricMetricArrayOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricMetricArrayInput` via:
//
//	ApplicationScalingRuleScalingRuleMetricMetricArray{ ApplicationScalingRuleScalingRuleMetricMetricArgs{...} }
type ApplicationScalingRuleScalingRuleMetricMetricArrayInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricMetricArrayOutput() ApplicationScalingRuleScalingRuleMetricMetricArrayOutput
	ToApplicationScalingRuleScalingRuleMetricMetricArrayOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricMetricArrayOutput
}

type ApplicationScalingRuleScalingRuleMetricMetricArray []ApplicationScalingRuleScalingRuleMetricMetricInput

func (ApplicationScalingRuleScalingRuleMetricMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationScalingRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArray) ToApplicationScalingRuleScalingRuleMetricMetricArrayOutput() ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricMetricArrayOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArray) ToApplicationScalingRuleScalingRuleMetricMetricArrayOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricMetricArrayOutput)
}

func (i ApplicationScalingRuleScalingRuleMetricMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationScalingRuleScalingRuleMetricMetric] {
	return pulumix.Output[[]ApplicationScalingRuleScalingRuleMetricMetric]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleMetricMetricOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) ToApplicationScalingRuleScalingRuleMetricMetricOutput() ApplicationScalingRuleScalingRuleMetricMetricOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) ToApplicationScalingRuleScalingRuleMetricMetricOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricMetricOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricMetric] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricMetric]{
		OutputState: o.OutputState,
	}
}

// According to different `metricType`, set the target value of the corresponding monitoring index.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) MetricTargetAverageUtilization() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *int { return v.MetricTargetAverageUtilization }).(pulumi.IntPtrOutput)
}

// Monitoring indicator trigger condition. Valid values: `CPU`, `MEMORY`, `tcpActiveConn`, `QPS`, `RT`, `SLB_QPS`, `SLB_RT`, `INTRANET_SLB_QPS` and `INTRANET_SLB_RT`. The values are described as follows:
//   - CPU: CPU usage.
//   - MEMORY: MEMORY usage.
//   - tcpActiveConn: The average number of TCP active connections for a single instance in 30 seconds.
//   - QPS: The average QPS of a single instance within 1 minute of JAVA application.
//   - RT: The average response time of all service interfaces within 1 minute of JAVA application.
//   - SLB_QPS: The average public network SLB QPS of a single instance within 15 seconds.
//   - SLB_RT: The average response time of public network SLB within 15 seconds.
//   - INTRANET_SLB_QPS: The average private network SLB QPS of a single instance within 15 seconds.
//   - INTRANET_SLB_RT: The average response time of private network SLB within 15 seconds.
//     **NOTE:** From version 1.206.0, `metricType` can be set to `QPS`, `RT`, `INTRANET_SLB_QPS`, `INTRANET_SLB_RT`.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) MetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *string { return v.MetricType }).(pulumi.StringPtrOutput)
}

// SLB ID.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) SlbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *string { return v.SlbId }).(pulumi.StringPtrOutput)
}

// The log store of the Log Service.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) SlbLogStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *string { return v.SlbLogStore }).(pulumi.StringPtrOutput)
}

// The project of the Log Service.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) SlbProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *string { return v.SlbProject }).(pulumi.StringPtrOutput)
}

// SLB listening port.
func (o ApplicationScalingRuleScalingRuleMetricMetricOutput) Vport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricMetric) *string { return v.Vport }).(pulumi.StringPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricMetricArrayOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationScalingRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricMetricArrayOutput) ToApplicationScalingRuleScalingRuleMetricMetricArrayOutput() ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricMetricArrayOutput) ToApplicationScalingRuleScalingRuleMetricMetricArrayOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricMetricArrayOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationScalingRuleScalingRuleMetricMetric] {
	return pulumix.Output[[]ApplicationScalingRuleScalingRuleMetricMetric]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleMetricMetricArrayOutput) Index(i pulumi.IntInput) ApplicationScalingRuleScalingRuleMetricMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationScalingRuleScalingRuleMetricMetric {
		return vs[0].([]ApplicationScalingRuleScalingRuleMetricMetric)[vs[1].(int)]
	}).(ApplicationScalingRuleScalingRuleMetricMetricOutput)
}

type ApplicationScalingRuleScalingRuleMetricScaleDownRules struct {
	// Whether shrinkage is prohibited.
	Disabled *bool `pulumi:"disabled"`
	// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
	StabilizationWindowSeconds *int `pulumi:"stabilizationWindowSeconds"`
	// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
	Step *int `pulumi:"step"`
}

// ApplicationScalingRuleScalingRuleMetricScaleDownRulesInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs and ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricScaleDownRulesInput` via:
//
//	ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs{...}
type ApplicationScalingRuleScalingRuleMetricScaleDownRulesInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput
	ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput
}

type ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs struct {
	// Whether shrinkage is prohibited.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
	StabilizationWindowSeconds pulumi.IntPtrInput `pulumi:"stabilizationWindowSeconds"`
	// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
	Step pulumi.IntPtrInput `pulumi:"step"`
}

func (ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleDownRules)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput)
}

func (i ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleDownRules] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleDownRules]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput).ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx)
}

// ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs, ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtr and ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput` via:
//
//	        ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs{...}
//
//	or:
//
//	        nil
type ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput
	ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput
}

type applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs

func ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtr(v *ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput {
	return (*applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType)(v)
}

func (*applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetricScaleDownRules)(nil)).Elem()
}

func (i *applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(context.Background())
}

func (i *applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput)
}

func (i *applicationScalingRuleScalingRuleMetricScaleDownRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleDownRules] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleDownRules]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleDownRules)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o.ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(context.Background())
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationScalingRuleScalingRuleMetricScaleDownRules) *ApplicationScalingRuleScalingRuleMetricScaleDownRules {
		return &v
	}).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput)
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleDownRules] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleDownRules]{
		OutputState: o.OutputState,
	}
}

// Whether shrinkage is prohibited.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleDownRules) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleDownRules) *int {
		return v.StabilizationWindowSeconds
	}).(pulumi.IntPtrOutput)
}

// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput) Step() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleDownRules) *int { return v.Step }).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetricScaleDownRules)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) ToApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleDownRules] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleDownRules]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) Elem() ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleDownRules) ApplicationScalingRuleScalingRuleMetricScaleDownRules {
		if v != nil {
			return *v
		}
		var ret ApplicationScalingRuleScalingRuleMetricScaleDownRules
		return ret
	}).(ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput)
}

// Whether shrinkage is prohibited.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleDownRules) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleDownRules) *int {
		if v == nil {
			return nil
		}
		return v.StabilizationWindowSeconds
	}).(pulumi.IntPtrOutput)
}

// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
func (o ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput) Step() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleDownRules) *int {
		if v == nil {
			return nil
		}
		return v.Step
	}).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricScaleUpRules struct {
	// Whether shrinkage is prohibited.
	Disabled *bool `pulumi:"disabled"`
	// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
	StabilizationWindowSeconds *int `pulumi:"stabilizationWindowSeconds"`
	// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
	Step *int `pulumi:"step"`
}

// ApplicationScalingRuleScalingRuleMetricScaleUpRulesInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs and ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricScaleUpRulesInput` via:
//
//	ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs{...}
type ApplicationScalingRuleScalingRuleMetricScaleUpRulesInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput
	ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput
}

type ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs struct {
	// Whether shrinkage is prohibited.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
	StabilizationWindowSeconds pulumi.IntPtrInput `pulumi:"stabilizationWindowSeconds"`
	// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
	Step pulumi.IntPtrInput `pulumi:"step"`
}

func (ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleUpRules)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput)
}

func (i ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleUpRules] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleUpRules]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput).ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx)
}

// ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput is an input type that accepts ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs, ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtr and ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput` via:
//
//	        ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs{...}
//
//	or:
//
//	        nil
type ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput
	ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput
}

type applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs

func ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtr(v *ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput {
	return (*applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType)(v)
}

func (*applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetricScaleUpRules)(nil)).Elem()
}

func (i *applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(context.Background())
}

func (i *applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput)
}

func (i *applicationScalingRuleScalingRuleMetricScaleUpRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleUpRules] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleUpRules]{
		OutputState: i.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleUpRules)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o.ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(context.Background())
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationScalingRuleScalingRuleMetricScaleUpRules) *ApplicationScalingRuleScalingRuleMetricScaleUpRules {
		return &v
	}).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput)
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleUpRules] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleMetricScaleUpRules]{
		OutputState: o.OutputState,
	}
}

// Whether shrinkage is prohibited.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleUpRules) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleUpRules) *int { return v.StabilizationWindowSeconds }).(pulumi.IntPtrOutput)
}

// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput) Step() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleMetricScaleUpRules) *int { return v.Step }).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleMetricScaleUpRules)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput() ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) ToApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleUpRules] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleMetricScaleUpRules]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) Elem() ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleUpRules) ApplicationScalingRuleScalingRuleMetricScaleUpRules {
		if v != nil {
			return *v
		}
		var ret ApplicationScalingRuleScalingRuleMetricScaleUpRules
		return ret
	}).(ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput)
}

// Whether shrinkage is prohibited.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleUpRules) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleUpRules) *int {
		if v == nil {
			return nil
		}
		return v.StabilizationWindowSeconds
	}).(pulumi.IntPtrOutput)
}

// Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
func (o ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput) Step() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleMetricScaleUpRules) *int {
		if v == nil {
			return nil
		}
		return v.Step
	}).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleTimer struct {
	// The Start date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
	BeginDate *string `pulumi:"beginDate"`
	// The End Date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
	EndDate *string `pulumi:"endDate"`
	// The period in which a timed elastic scaling strategy is executed.
	Period *string `pulumi:"period"`
	// Resilient Scaling Strategy Trigger Timing. See `schedules` below.
	Schedules []ApplicationScalingRuleScalingRuleTimerSchedule `pulumi:"schedules"`
}

// ApplicationScalingRuleScalingRuleTimerInput is an input type that accepts ApplicationScalingRuleScalingRuleTimerArgs and ApplicationScalingRuleScalingRuleTimerOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleTimerInput` via:
//
//	ApplicationScalingRuleScalingRuleTimerArgs{...}
type ApplicationScalingRuleScalingRuleTimerInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleTimerOutput() ApplicationScalingRuleScalingRuleTimerOutput
	ToApplicationScalingRuleScalingRuleTimerOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleTimerOutput
}

type ApplicationScalingRuleScalingRuleTimerArgs struct {
	// The Start date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// The End Date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The period in which a timed elastic scaling strategy is executed.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// Resilient Scaling Strategy Trigger Timing. See `schedules` below.
	Schedules ApplicationScalingRuleScalingRuleTimerScheduleArrayInput `pulumi:"schedules"`
}

func (ApplicationScalingRuleScalingRuleTimerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimer)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleTimerArgs) ToApplicationScalingRuleScalingRuleTimerOutput() ApplicationScalingRuleScalingRuleTimerOutput {
	return i.ToApplicationScalingRuleScalingRuleTimerOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleTimerArgs) ToApplicationScalingRuleScalingRuleTimerOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleTimerOutput)
}

func (i ApplicationScalingRuleScalingRuleTimerArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleTimer] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleTimer]{
		OutputState: i.ToApplicationScalingRuleScalingRuleTimerOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationScalingRuleScalingRuleTimerArgs) ToApplicationScalingRuleScalingRuleTimerPtrOutput() ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleTimerArgs) ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleTimerOutput).ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx)
}

// ApplicationScalingRuleScalingRuleTimerPtrInput is an input type that accepts ApplicationScalingRuleScalingRuleTimerArgs, ApplicationScalingRuleScalingRuleTimerPtr and ApplicationScalingRuleScalingRuleTimerPtrOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleTimerPtrInput` via:
//
//	        ApplicationScalingRuleScalingRuleTimerArgs{...}
//
//	or:
//
//	        nil
type ApplicationScalingRuleScalingRuleTimerPtrInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleTimerPtrOutput() ApplicationScalingRuleScalingRuleTimerPtrOutput
	ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleTimerPtrOutput
}

type applicationScalingRuleScalingRuleTimerPtrType ApplicationScalingRuleScalingRuleTimerArgs

func ApplicationScalingRuleScalingRuleTimerPtr(v *ApplicationScalingRuleScalingRuleTimerArgs) ApplicationScalingRuleScalingRuleTimerPtrInput {
	return (*applicationScalingRuleScalingRuleTimerPtrType)(v)
}

func (*applicationScalingRuleScalingRuleTimerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleTimer)(nil)).Elem()
}

func (i *applicationScalingRuleScalingRuleTimerPtrType) ToApplicationScalingRuleScalingRuleTimerPtrOutput() ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return i.ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(context.Background())
}

func (i *applicationScalingRuleScalingRuleTimerPtrType) ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleTimerPtrOutput)
}

func (i *applicationScalingRuleScalingRuleTimerPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleTimer] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleTimer]{
		OutputState: i.ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleTimerOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleTimerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimer)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleTimerOutput) ToApplicationScalingRuleScalingRuleTimerOutput() ApplicationScalingRuleScalingRuleTimerOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerOutput) ToApplicationScalingRuleScalingRuleTimerOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerOutput) ToApplicationScalingRuleScalingRuleTimerPtrOutput() ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return o.ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(context.Background())
}

func (o ApplicationScalingRuleScalingRuleTimerOutput) ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationScalingRuleScalingRuleTimer) *ApplicationScalingRuleScalingRuleTimer {
		return &v
	}).(ApplicationScalingRuleScalingRuleTimerPtrOutput)
}

func (o ApplicationScalingRuleScalingRuleTimerOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleTimer] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleTimer]{
		OutputState: o.OutputState,
	}
}

// The Start date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
func (o ApplicationScalingRuleScalingRuleTimerOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimer) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

// The End Date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
func (o ApplicationScalingRuleScalingRuleTimerOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimer) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The period in which a timed elastic scaling strategy is executed.
func (o ApplicationScalingRuleScalingRuleTimerOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimer) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// Resilient Scaling Strategy Trigger Timing. See `schedules` below.
func (o ApplicationScalingRuleScalingRuleTimerOutput) Schedules() ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimer) []ApplicationScalingRuleScalingRuleTimerSchedule {
		return v.Schedules
	}).(ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput)
}

type ApplicationScalingRuleScalingRuleTimerPtrOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleTimerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationScalingRuleScalingRuleTimer)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) ToApplicationScalingRuleScalingRuleTimerPtrOutput() ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) ToApplicationScalingRuleScalingRuleTimerPtrOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerPtrOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationScalingRuleScalingRuleTimer] {
	return pulumix.Output[*ApplicationScalingRuleScalingRuleTimer]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) Elem() ApplicationScalingRuleScalingRuleTimerOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleTimer) ApplicationScalingRuleScalingRuleTimer {
		if v != nil {
			return *v
		}
		var ret ApplicationScalingRuleScalingRuleTimer
		return ret
	}).(ApplicationScalingRuleScalingRuleTimerOutput)
}

// The Start date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleTimer) *string {
		if v == nil {
			return nil
		}
		return v.BeginDate
	}).(pulumi.StringPtrOutput)
}

// The End Date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleTimer) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The period in which a timed elastic scaling strategy is executed.
func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleTimer) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// Resilient Scaling Strategy Trigger Timing. See `schedules` below.
func (o ApplicationScalingRuleScalingRuleTimerPtrOutput) Schedules() ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return o.ApplyT(func(v *ApplicationScalingRuleScalingRuleTimer) []ApplicationScalingRuleScalingRuleTimerSchedule {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput)
}

type ApplicationScalingRuleScalingRuleTimerSchedule struct {
	// Trigger point in time. When supporting format: minutes, for example: `08:00`.
	AtTime *string `pulumi:"atTime"`
	// Maximum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Minimum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
	MinReplicas *int `pulumi:"minReplicas"`
	// This parameter can specify the number of instances to be applied or the minimum number of surviving instances per deployment. value range [1,50]. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `timing`.
	TargetReplicas *int `pulumi:"targetReplicas"`
}

// ApplicationScalingRuleScalingRuleTimerScheduleInput is an input type that accepts ApplicationScalingRuleScalingRuleTimerScheduleArgs and ApplicationScalingRuleScalingRuleTimerScheduleOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleTimerScheduleInput` via:
//
//	ApplicationScalingRuleScalingRuleTimerScheduleArgs{...}
type ApplicationScalingRuleScalingRuleTimerScheduleInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleTimerScheduleOutput() ApplicationScalingRuleScalingRuleTimerScheduleOutput
	ToApplicationScalingRuleScalingRuleTimerScheduleOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleTimerScheduleOutput
}

type ApplicationScalingRuleScalingRuleTimerScheduleArgs struct {
	// Trigger point in time. When supporting format: minutes, for example: `08:00`.
	AtTime pulumi.StringPtrInput `pulumi:"atTime"`
	// Maximum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// Minimum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// This parameter can specify the number of instances to be applied or the minimum number of surviving instances per deployment. value range [1,50]. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `timing`.
	TargetReplicas pulumi.IntPtrInput `pulumi:"targetReplicas"`
}

func (ApplicationScalingRuleScalingRuleTimerScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArgs) ToApplicationScalingRuleScalingRuleTimerScheduleOutput() ApplicationScalingRuleScalingRuleTimerScheduleOutput {
	return i.ToApplicationScalingRuleScalingRuleTimerScheduleOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArgs) ToApplicationScalingRuleScalingRuleTimerScheduleOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleTimerScheduleOutput)
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleTimerSchedule] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleTimerSchedule]{
		OutputState: i.ToApplicationScalingRuleScalingRuleTimerScheduleOutputWithContext(ctx).OutputState,
	}
}

// ApplicationScalingRuleScalingRuleTimerScheduleArrayInput is an input type that accepts ApplicationScalingRuleScalingRuleTimerScheduleArray and ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput values.
// You can construct a concrete instance of `ApplicationScalingRuleScalingRuleTimerScheduleArrayInput` via:
//
//	ApplicationScalingRuleScalingRuleTimerScheduleArray{ ApplicationScalingRuleScalingRuleTimerScheduleArgs{...} }
type ApplicationScalingRuleScalingRuleTimerScheduleArrayInput interface {
	pulumi.Input

	ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutput() ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput
	ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutputWithContext(context.Context) ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput
}

type ApplicationScalingRuleScalingRuleTimerScheduleArray []ApplicationScalingRuleScalingRuleTimerScheduleInput

func (ApplicationScalingRuleScalingRuleTimerScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationScalingRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArray) ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutput() ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return i.ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutputWithContext(context.Background())
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArray) ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput)
}

func (i ApplicationScalingRuleScalingRuleTimerScheduleArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationScalingRuleScalingRuleTimerSchedule] {
	return pulumix.Output[[]ApplicationScalingRuleScalingRuleTimerSchedule]{
		OutputState: i.ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationScalingRuleScalingRuleTimerScheduleOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleTimerScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) ToApplicationScalingRuleScalingRuleTimerScheduleOutput() ApplicationScalingRuleScalingRuleTimerScheduleOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) ToApplicationScalingRuleScalingRuleTimerScheduleOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerScheduleOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationScalingRuleScalingRuleTimerSchedule] {
	return pulumix.Output[ApplicationScalingRuleScalingRuleTimerSchedule]{
		OutputState: o.OutputState,
	}
}

// Trigger point in time. When supporting format: minutes, for example: `08:00`.
func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) AtTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimerSchedule) *string { return v.AtTime }).(pulumi.StringPtrOutput)
}

// Maximum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimerSchedule) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Minimum number of instances applied. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimerSchedule) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// This parameter can specify the number of instances to be applied or the minimum number of surviving instances per deployment. value range [1,50]. > **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `timing`.
func (o ApplicationScalingRuleScalingRuleTimerScheduleOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationScalingRuleScalingRuleTimerSchedule) *int { return v.TargetReplicas }).(pulumi.IntPtrOutput)
}

type ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput struct{ *pulumi.OutputState }

func (ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationScalingRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput) ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutput() ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput) ToApplicationScalingRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx context.Context) ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput {
	return o
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationScalingRuleScalingRuleTimerSchedule] {
	return pulumix.Output[[]ApplicationScalingRuleScalingRuleTimerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput) Index(i pulumi.IntInput) ApplicationScalingRuleScalingRuleTimerScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationScalingRuleScalingRuleTimerSchedule {
		return vs[0].([]ApplicationScalingRuleScalingRuleTimerSchedule)[vs[1].(int)]
	}).(ApplicationScalingRuleScalingRuleTimerScheduleOutput)
}

type ApplicationTomcatConfigV2 struct {
	// The path.
	ContextPath *string `pulumi:"contextPath"`
	// The maximum number of connections in the connection pool.
	MaxThreads *int `pulumi:"maxThreads"`
	// The port that is used to check the status of TCP connections.
	Port *int `pulumi:"port"`
	// The URI encoding scheme in the Tomcat container.
	UriEncoding *string `pulumi:"uriEncoding"`
	// Specifies whether to use the encoding scheme that is specified by BodyEncoding for URL.
	UseBodyEncodingForUri *string `pulumi:"useBodyEncodingForUri"`
}

// ApplicationTomcatConfigV2Input is an input type that accepts ApplicationTomcatConfigV2Args and ApplicationTomcatConfigV2Output values.
// You can construct a concrete instance of `ApplicationTomcatConfigV2Input` via:
//
//	ApplicationTomcatConfigV2Args{...}
type ApplicationTomcatConfigV2Input interface {
	pulumi.Input

	ToApplicationTomcatConfigV2Output() ApplicationTomcatConfigV2Output
	ToApplicationTomcatConfigV2OutputWithContext(context.Context) ApplicationTomcatConfigV2Output
}

type ApplicationTomcatConfigV2Args struct {
	// The path.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The maximum number of connections in the connection pool.
	MaxThreads pulumi.IntPtrInput `pulumi:"maxThreads"`
	// The port that is used to check the status of TCP connections.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The URI encoding scheme in the Tomcat container.
	UriEncoding pulumi.StringPtrInput `pulumi:"uriEncoding"`
	// Specifies whether to use the encoding scheme that is specified by BodyEncoding for URL.
	UseBodyEncodingForUri pulumi.StringPtrInput `pulumi:"useBodyEncodingForUri"`
}

func (ApplicationTomcatConfigV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTomcatConfigV2)(nil)).Elem()
}

func (i ApplicationTomcatConfigV2Args) ToApplicationTomcatConfigV2Output() ApplicationTomcatConfigV2Output {
	return i.ToApplicationTomcatConfigV2OutputWithContext(context.Background())
}

func (i ApplicationTomcatConfigV2Args) ToApplicationTomcatConfigV2OutputWithContext(ctx context.Context) ApplicationTomcatConfigV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTomcatConfigV2Output)
}

func (i ApplicationTomcatConfigV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationTomcatConfigV2] {
	return pulumix.Output[ApplicationTomcatConfigV2]{
		OutputState: i.ToApplicationTomcatConfigV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationTomcatConfigV2Args) ToApplicationTomcatConfigV2PtrOutput() ApplicationTomcatConfigV2PtrOutput {
	return i.ToApplicationTomcatConfigV2PtrOutputWithContext(context.Background())
}

func (i ApplicationTomcatConfigV2Args) ToApplicationTomcatConfigV2PtrOutputWithContext(ctx context.Context) ApplicationTomcatConfigV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTomcatConfigV2Output).ToApplicationTomcatConfigV2PtrOutputWithContext(ctx)
}

// ApplicationTomcatConfigV2PtrInput is an input type that accepts ApplicationTomcatConfigV2Args, ApplicationTomcatConfigV2Ptr and ApplicationTomcatConfigV2PtrOutput values.
// You can construct a concrete instance of `ApplicationTomcatConfigV2PtrInput` via:
//
//	        ApplicationTomcatConfigV2Args{...}
//
//	or:
//
//	        nil
type ApplicationTomcatConfigV2PtrInput interface {
	pulumi.Input

	ToApplicationTomcatConfigV2PtrOutput() ApplicationTomcatConfigV2PtrOutput
	ToApplicationTomcatConfigV2PtrOutputWithContext(context.Context) ApplicationTomcatConfigV2PtrOutput
}

type applicationTomcatConfigV2PtrType ApplicationTomcatConfigV2Args

func ApplicationTomcatConfigV2Ptr(v *ApplicationTomcatConfigV2Args) ApplicationTomcatConfigV2PtrInput {
	return (*applicationTomcatConfigV2PtrType)(v)
}

func (*applicationTomcatConfigV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTomcatConfigV2)(nil)).Elem()
}

func (i *applicationTomcatConfigV2PtrType) ToApplicationTomcatConfigV2PtrOutput() ApplicationTomcatConfigV2PtrOutput {
	return i.ToApplicationTomcatConfigV2PtrOutputWithContext(context.Background())
}

func (i *applicationTomcatConfigV2PtrType) ToApplicationTomcatConfigV2PtrOutputWithContext(ctx context.Context) ApplicationTomcatConfigV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTomcatConfigV2PtrOutput)
}

func (i *applicationTomcatConfigV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationTomcatConfigV2] {
	return pulumix.Output[*ApplicationTomcatConfigV2]{
		OutputState: i.ToApplicationTomcatConfigV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationTomcatConfigV2Output struct{ *pulumi.OutputState }

func (ApplicationTomcatConfigV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTomcatConfigV2)(nil)).Elem()
}

func (o ApplicationTomcatConfigV2Output) ToApplicationTomcatConfigV2Output() ApplicationTomcatConfigV2Output {
	return o
}

func (o ApplicationTomcatConfigV2Output) ToApplicationTomcatConfigV2OutputWithContext(ctx context.Context) ApplicationTomcatConfigV2Output {
	return o
}

func (o ApplicationTomcatConfigV2Output) ToApplicationTomcatConfigV2PtrOutput() ApplicationTomcatConfigV2PtrOutput {
	return o.ToApplicationTomcatConfigV2PtrOutputWithContext(context.Background())
}

func (o ApplicationTomcatConfigV2Output) ToApplicationTomcatConfigV2PtrOutputWithContext(ctx context.Context) ApplicationTomcatConfigV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationTomcatConfigV2) *ApplicationTomcatConfigV2 {
		return &v
	}).(ApplicationTomcatConfigV2PtrOutput)
}

func (o ApplicationTomcatConfigV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationTomcatConfigV2] {
	return pulumix.Output[ApplicationTomcatConfigV2]{
		OutputState: o.OutputState,
	}
}

// The path.
func (o ApplicationTomcatConfigV2Output) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationTomcatConfigV2) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The maximum number of connections in the connection pool.
func (o ApplicationTomcatConfigV2Output) MaxThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationTomcatConfigV2) *int { return v.MaxThreads }).(pulumi.IntPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationTomcatConfigV2Output) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationTomcatConfigV2) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The URI encoding scheme in the Tomcat container.
func (o ApplicationTomcatConfigV2Output) UriEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationTomcatConfigV2) *string { return v.UriEncoding }).(pulumi.StringPtrOutput)
}

// Specifies whether to use the encoding scheme that is specified by BodyEncoding for URL.
func (o ApplicationTomcatConfigV2Output) UseBodyEncodingForUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationTomcatConfigV2) *string { return v.UseBodyEncodingForUri }).(pulumi.StringPtrOutput)
}

type ApplicationTomcatConfigV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationTomcatConfigV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTomcatConfigV2)(nil)).Elem()
}

func (o ApplicationTomcatConfigV2PtrOutput) ToApplicationTomcatConfigV2PtrOutput() ApplicationTomcatConfigV2PtrOutput {
	return o
}

func (o ApplicationTomcatConfigV2PtrOutput) ToApplicationTomcatConfigV2PtrOutputWithContext(ctx context.Context) ApplicationTomcatConfigV2PtrOutput {
	return o
}

func (o ApplicationTomcatConfigV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationTomcatConfigV2] {
	return pulumix.Output[*ApplicationTomcatConfigV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationTomcatConfigV2PtrOutput) Elem() ApplicationTomcatConfigV2Output {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) ApplicationTomcatConfigV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationTomcatConfigV2
		return ret
	}).(ApplicationTomcatConfigV2Output)
}

// The path.
func (o ApplicationTomcatConfigV2PtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The maximum number of connections in the connection pool.
func (o ApplicationTomcatConfigV2PtrOutput) MaxThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) *int {
		if v == nil {
			return nil
		}
		return v.MaxThreads
	}).(pulumi.IntPtrOutput)
}

// The port that is used to check the status of TCP connections.
func (o ApplicationTomcatConfigV2PtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The URI encoding scheme in the Tomcat container.
func (o ApplicationTomcatConfigV2PtrOutput) UriEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) *string {
		if v == nil {
			return nil
		}
		return v.UriEncoding
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use the encoding scheme that is specified by BodyEncoding for URL.
func (o ApplicationTomcatConfigV2PtrOutput) UseBodyEncodingForUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTomcatConfigV2) *string {
		if v == nil {
			return nil
		}
		return v.UseBodyEncodingForUri
	}).(pulumi.StringPtrOutput)
}

type ApplicationUpdateStrategyV2 struct {
	// The phased release policy. See `batchUpdate` below.
	BatchUpdate *ApplicationUpdateStrategyV2BatchUpdate `pulumi:"batchUpdate"`
	// The type of the release policy. Valid values: `GrayBatchUpdate` and `BatchUpdate`.
	Type *string `pulumi:"type"`
}

// ApplicationUpdateStrategyV2Input is an input type that accepts ApplicationUpdateStrategyV2Args and ApplicationUpdateStrategyV2Output values.
// You can construct a concrete instance of `ApplicationUpdateStrategyV2Input` via:
//
//	ApplicationUpdateStrategyV2Args{...}
type ApplicationUpdateStrategyV2Input interface {
	pulumi.Input

	ToApplicationUpdateStrategyV2Output() ApplicationUpdateStrategyV2Output
	ToApplicationUpdateStrategyV2OutputWithContext(context.Context) ApplicationUpdateStrategyV2Output
}

type ApplicationUpdateStrategyV2Args struct {
	// The phased release policy. See `batchUpdate` below.
	BatchUpdate ApplicationUpdateStrategyV2BatchUpdatePtrInput `pulumi:"batchUpdate"`
	// The type of the release policy. Valid values: `GrayBatchUpdate` and `BatchUpdate`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApplicationUpdateStrategyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpdateStrategyV2)(nil)).Elem()
}

func (i ApplicationUpdateStrategyV2Args) ToApplicationUpdateStrategyV2Output() ApplicationUpdateStrategyV2Output {
	return i.ToApplicationUpdateStrategyV2OutputWithContext(context.Background())
}

func (i ApplicationUpdateStrategyV2Args) ToApplicationUpdateStrategyV2OutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2Output)
}

func (i ApplicationUpdateStrategyV2Args) ToOutput(ctx context.Context) pulumix.Output[ApplicationUpdateStrategyV2] {
	return pulumix.Output[ApplicationUpdateStrategyV2]{
		OutputState: i.ToApplicationUpdateStrategyV2OutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationUpdateStrategyV2Args) ToApplicationUpdateStrategyV2PtrOutput() ApplicationUpdateStrategyV2PtrOutput {
	return i.ToApplicationUpdateStrategyV2PtrOutputWithContext(context.Background())
}

func (i ApplicationUpdateStrategyV2Args) ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2Output).ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx)
}

// ApplicationUpdateStrategyV2PtrInput is an input type that accepts ApplicationUpdateStrategyV2Args, ApplicationUpdateStrategyV2Ptr and ApplicationUpdateStrategyV2PtrOutput values.
// You can construct a concrete instance of `ApplicationUpdateStrategyV2PtrInput` via:
//
//	        ApplicationUpdateStrategyV2Args{...}
//
//	or:
//
//	        nil
type ApplicationUpdateStrategyV2PtrInput interface {
	pulumi.Input

	ToApplicationUpdateStrategyV2PtrOutput() ApplicationUpdateStrategyV2PtrOutput
	ToApplicationUpdateStrategyV2PtrOutputWithContext(context.Context) ApplicationUpdateStrategyV2PtrOutput
}

type applicationUpdateStrategyV2PtrType ApplicationUpdateStrategyV2Args

func ApplicationUpdateStrategyV2Ptr(v *ApplicationUpdateStrategyV2Args) ApplicationUpdateStrategyV2PtrInput {
	return (*applicationUpdateStrategyV2PtrType)(v)
}

func (*applicationUpdateStrategyV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpdateStrategyV2)(nil)).Elem()
}

func (i *applicationUpdateStrategyV2PtrType) ToApplicationUpdateStrategyV2PtrOutput() ApplicationUpdateStrategyV2PtrOutput {
	return i.ToApplicationUpdateStrategyV2PtrOutputWithContext(context.Background())
}

func (i *applicationUpdateStrategyV2PtrType) ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2PtrOutput)
}

func (i *applicationUpdateStrategyV2PtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUpdateStrategyV2] {
	return pulumix.Output[*ApplicationUpdateStrategyV2]{
		OutputState: i.ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationUpdateStrategyV2Output struct{ *pulumi.OutputState }

func (ApplicationUpdateStrategyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpdateStrategyV2)(nil)).Elem()
}

func (o ApplicationUpdateStrategyV2Output) ToApplicationUpdateStrategyV2Output() ApplicationUpdateStrategyV2Output {
	return o
}

func (o ApplicationUpdateStrategyV2Output) ToApplicationUpdateStrategyV2OutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2Output {
	return o
}

func (o ApplicationUpdateStrategyV2Output) ToApplicationUpdateStrategyV2PtrOutput() ApplicationUpdateStrategyV2PtrOutput {
	return o.ToApplicationUpdateStrategyV2PtrOutputWithContext(context.Background())
}

func (o ApplicationUpdateStrategyV2Output) ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationUpdateStrategyV2) *ApplicationUpdateStrategyV2 {
		return &v
	}).(ApplicationUpdateStrategyV2PtrOutput)
}

func (o ApplicationUpdateStrategyV2Output) ToOutput(ctx context.Context) pulumix.Output[ApplicationUpdateStrategyV2] {
	return pulumix.Output[ApplicationUpdateStrategyV2]{
		OutputState: o.OutputState,
	}
}

// The phased release policy. See `batchUpdate` below.
func (o ApplicationUpdateStrategyV2Output) BatchUpdate() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o.ApplyT(func(v ApplicationUpdateStrategyV2) *ApplicationUpdateStrategyV2BatchUpdate { return v.BatchUpdate }).(ApplicationUpdateStrategyV2BatchUpdatePtrOutput)
}

// The type of the release policy. Valid values: `GrayBatchUpdate` and `BatchUpdate`.
func (o ApplicationUpdateStrategyV2Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpdateStrategyV2) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApplicationUpdateStrategyV2PtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpdateStrategyV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpdateStrategyV2)(nil)).Elem()
}

func (o ApplicationUpdateStrategyV2PtrOutput) ToApplicationUpdateStrategyV2PtrOutput() ApplicationUpdateStrategyV2PtrOutput {
	return o
}

func (o ApplicationUpdateStrategyV2PtrOutput) ToApplicationUpdateStrategyV2PtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2PtrOutput {
	return o
}

func (o ApplicationUpdateStrategyV2PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUpdateStrategyV2] {
	return pulumix.Output[*ApplicationUpdateStrategyV2]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationUpdateStrategyV2PtrOutput) Elem() ApplicationUpdateStrategyV2Output {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2) ApplicationUpdateStrategyV2 {
		if v != nil {
			return *v
		}
		var ret ApplicationUpdateStrategyV2
		return ret
	}).(ApplicationUpdateStrategyV2Output)
}

// The phased release policy. See `batchUpdate` below.
func (o ApplicationUpdateStrategyV2PtrOutput) BatchUpdate() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2) *ApplicationUpdateStrategyV2BatchUpdate {
		if v == nil {
			return nil
		}
		return v.BatchUpdate
	}).(ApplicationUpdateStrategyV2BatchUpdatePtrOutput)
}

// The type of the release policy. Valid values: `GrayBatchUpdate` and `BatchUpdate`.
func (o ApplicationUpdateStrategyV2PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ApplicationUpdateStrategyV2BatchUpdate struct {
	// The number of batches in which you want to release the instances.
	Batch *int `pulumi:"batch"`
	// The batch wait time.
	BatchWaitTime *int `pulumi:"batchWaitTime"`
	// The processing method for the batches. Valid values: `auto` and `manual`.
	ReleaseType *string `pulumi:"releaseType"`
}

// ApplicationUpdateStrategyV2BatchUpdateInput is an input type that accepts ApplicationUpdateStrategyV2BatchUpdateArgs and ApplicationUpdateStrategyV2BatchUpdateOutput values.
// You can construct a concrete instance of `ApplicationUpdateStrategyV2BatchUpdateInput` via:
//
//	ApplicationUpdateStrategyV2BatchUpdateArgs{...}
type ApplicationUpdateStrategyV2BatchUpdateInput interface {
	pulumi.Input

	ToApplicationUpdateStrategyV2BatchUpdateOutput() ApplicationUpdateStrategyV2BatchUpdateOutput
	ToApplicationUpdateStrategyV2BatchUpdateOutputWithContext(context.Context) ApplicationUpdateStrategyV2BatchUpdateOutput
}

type ApplicationUpdateStrategyV2BatchUpdateArgs struct {
	// The number of batches in which you want to release the instances.
	Batch pulumi.IntPtrInput `pulumi:"batch"`
	// The batch wait time.
	BatchWaitTime pulumi.IntPtrInput `pulumi:"batchWaitTime"`
	// The processing method for the batches. Valid values: `auto` and `manual`.
	ReleaseType pulumi.StringPtrInput `pulumi:"releaseType"`
}

func (ApplicationUpdateStrategyV2BatchUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpdateStrategyV2BatchUpdate)(nil)).Elem()
}

func (i ApplicationUpdateStrategyV2BatchUpdateArgs) ToApplicationUpdateStrategyV2BatchUpdateOutput() ApplicationUpdateStrategyV2BatchUpdateOutput {
	return i.ToApplicationUpdateStrategyV2BatchUpdateOutputWithContext(context.Background())
}

func (i ApplicationUpdateStrategyV2BatchUpdateArgs) ToApplicationUpdateStrategyV2BatchUpdateOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2BatchUpdateOutput)
}

func (i ApplicationUpdateStrategyV2BatchUpdateArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationUpdateStrategyV2BatchUpdate] {
	return pulumix.Output[ApplicationUpdateStrategyV2BatchUpdate]{
		OutputState: i.ToApplicationUpdateStrategyV2BatchUpdateOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationUpdateStrategyV2BatchUpdateArgs) ToApplicationUpdateStrategyV2BatchUpdatePtrOutput() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return i.ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(context.Background())
}

func (i ApplicationUpdateStrategyV2BatchUpdateArgs) ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2BatchUpdateOutput).ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx)
}

// ApplicationUpdateStrategyV2BatchUpdatePtrInput is an input type that accepts ApplicationUpdateStrategyV2BatchUpdateArgs, ApplicationUpdateStrategyV2BatchUpdatePtr and ApplicationUpdateStrategyV2BatchUpdatePtrOutput values.
// You can construct a concrete instance of `ApplicationUpdateStrategyV2BatchUpdatePtrInput` via:
//
//	        ApplicationUpdateStrategyV2BatchUpdateArgs{...}
//
//	or:
//
//	        nil
type ApplicationUpdateStrategyV2BatchUpdatePtrInput interface {
	pulumi.Input

	ToApplicationUpdateStrategyV2BatchUpdatePtrOutput() ApplicationUpdateStrategyV2BatchUpdatePtrOutput
	ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(context.Context) ApplicationUpdateStrategyV2BatchUpdatePtrOutput
}

type applicationUpdateStrategyV2BatchUpdatePtrType ApplicationUpdateStrategyV2BatchUpdateArgs

func ApplicationUpdateStrategyV2BatchUpdatePtr(v *ApplicationUpdateStrategyV2BatchUpdateArgs) ApplicationUpdateStrategyV2BatchUpdatePtrInput {
	return (*applicationUpdateStrategyV2BatchUpdatePtrType)(v)
}

func (*applicationUpdateStrategyV2BatchUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpdateStrategyV2BatchUpdate)(nil)).Elem()
}

func (i *applicationUpdateStrategyV2BatchUpdatePtrType) ToApplicationUpdateStrategyV2BatchUpdatePtrOutput() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return i.ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(context.Background())
}

func (i *applicationUpdateStrategyV2BatchUpdatePtrType) ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpdateStrategyV2BatchUpdatePtrOutput)
}

func (i *applicationUpdateStrategyV2BatchUpdatePtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUpdateStrategyV2BatchUpdate] {
	return pulumix.Output[*ApplicationUpdateStrategyV2BatchUpdate]{
		OutputState: i.ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationUpdateStrategyV2BatchUpdateOutput struct{ *pulumi.OutputState }

func (ApplicationUpdateStrategyV2BatchUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpdateStrategyV2BatchUpdate)(nil)).Elem()
}

func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ToApplicationUpdateStrategyV2BatchUpdateOutput() ApplicationUpdateStrategyV2BatchUpdateOutput {
	return o
}

func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ToApplicationUpdateStrategyV2BatchUpdateOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdateOutput {
	return o
}

func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ToApplicationUpdateStrategyV2BatchUpdatePtrOutput() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o.ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(context.Background())
}

func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationUpdateStrategyV2BatchUpdate) *ApplicationUpdateStrategyV2BatchUpdate {
		return &v
	}).(ApplicationUpdateStrategyV2BatchUpdatePtrOutput)
}

func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationUpdateStrategyV2BatchUpdate] {
	return pulumix.Output[ApplicationUpdateStrategyV2BatchUpdate]{
		OutputState: o.OutputState,
	}
}

// The number of batches in which you want to release the instances.
func (o ApplicationUpdateStrategyV2BatchUpdateOutput) Batch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationUpdateStrategyV2BatchUpdate) *int { return v.Batch }).(pulumi.IntPtrOutput)
}

// The batch wait time.
func (o ApplicationUpdateStrategyV2BatchUpdateOutput) BatchWaitTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationUpdateStrategyV2BatchUpdate) *int { return v.BatchWaitTime }).(pulumi.IntPtrOutput)
}

// The processing method for the batches. Valid values: `auto` and `manual`.
func (o ApplicationUpdateStrategyV2BatchUpdateOutput) ReleaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpdateStrategyV2BatchUpdate) *string { return v.ReleaseType }).(pulumi.StringPtrOutput)
}

type ApplicationUpdateStrategyV2BatchUpdatePtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpdateStrategyV2BatchUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpdateStrategyV2BatchUpdate)(nil)).Elem()
}

func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) ToApplicationUpdateStrategyV2BatchUpdatePtrOutput() ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o
}

func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) ToApplicationUpdateStrategyV2BatchUpdatePtrOutputWithContext(ctx context.Context) ApplicationUpdateStrategyV2BatchUpdatePtrOutput {
	return o
}

func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationUpdateStrategyV2BatchUpdate] {
	return pulumix.Output[*ApplicationUpdateStrategyV2BatchUpdate]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) Elem() ApplicationUpdateStrategyV2BatchUpdateOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2BatchUpdate) ApplicationUpdateStrategyV2BatchUpdate {
		if v != nil {
			return *v
		}
		var ret ApplicationUpdateStrategyV2BatchUpdate
		return ret
	}).(ApplicationUpdateStrategyV2BatchUpdateOutput)
}

// The number of batches in which you want to release the instances.
func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) Batch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2BatchUpdate) *int {
		if v == nil {
			return nil
		}
		return v.Batch
	}).(pulumi.IntPtrOutput)
}

// The batch wait time.
func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) BatchWaitTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2BatchUpdate) *int {
		if v == nil {
			return nil
		}
		return v.BatchWaitTime
	}).(pulumi.IntPtrOutput)
}

// The processing method for the batches. Valid values: `auto` and `manual`.
func (o ApplicationUpdateStrategyV2BatchUpdatePtrOutput) ReleaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpdateStrategyV2BatchUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseType
	}).(pulumi.StringPtrOutput)
}

type GreyTagRouteDubboRule struct {
	// The Conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
	Condition *string `pulumi:"condition"`
	// The service group.
	Group *string `pulumi:"group"`
	// A list of conditions items. See `items` below.
	Items []GreyTagRouteDubboRuleItem `pulumi:"items"`
	// The method name
	MethodName *string `pulumi:"methodName"`
	// The service name.
	ServiceName *string `pulumi:"serviceName"`
	// The service version.
	Version *string `pulumi:"version"`
}

// GreyTagRouteDubboRuleInput is an input type that accepts GreyTagRouteDubboRuleArgs and GreyTagRouteDubboRuleOutput values.
// You can construct a concrete instance of `GreyTagRouteDubboRuleInput` via:
//
//	GreyTagRouteDubboRuleArgs{...}
type GreyTagRouteDubboRuleInput interface {
	pulumi.Input

	ToGreyTagRouteDubboRuleOutput() GreyTagRouteDubboRuleOutput
	ToGreyTagRouteDubboRuleOutputWithContext(context.Context) GreyTagRouteDubboRuleOutput
}

type GreyTagRouteDubboRuleArgs struct {
	// The Conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The service group.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// A list of conditions items. See `items` below.
	Items GreyTagRouteDubboRuleItemArrayInput `pulumi:"items"`
	// The method name
	MethodName pulumi.StringPtrInput `pulumi:"methodName"`
	// The service name.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// The service version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GreyTagRouteDubboRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteDubboRule)(nil)).Elem()
}

func (i GreyTagRouteDubboRuleArgs) ToGreyTagRouteDubboRuleOutput() GreyTagRouteDubboRuleOutput {
	return i.ToGreyTagRouteDubboRuleOutputWithContext(context.Background())
}

func (i GreyTagRouteDubboRuleArgs) ToGreyTagRouteDubboRuleOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteDubboRuleOutput)
}

func (i GreyTagRouteDubboRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteDubboRule] {
	return pulumix.Output[GreyTagRouteDubboRule]{
		OutputState: i.ToGreyTagRouteDubboRuleOutputWithContext(ctx).OutputState,
	}
}

// GreyTagRouteDubboRuleArrayInput is an input type that accepts GreyTagRouteDubboRuleArray and GreyTagRouteDubboRuleArrayOutput values.
// You can construct a concrete instance of `GreyTagRouteDubboRuleArrayInput` via:
//
//	GreyTagRouteDubboRuleArray{ GreyTagRouteDubboRuleArgs{...} }
type GreyTagRouteDubboRuleArrayInput interface {
	pulumi.Input

	ToGreyTagRouteDubboRuleArrayOutput() GreyTagRouteDubboRuleArrayOutput
	ToGreyTagRouteDubboRuleArrayOutputWithContext(context.Context) GreyTagRouteDubboRuleArrayOutput
}

type GreyTagRouteDubboRuleArray []GreyTagRouteDubboRuleInput

func (GreyTagRouteDubboRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteDubboRule)(nil)).Elem()
}

func (i GreyTagRouteDubboRuleArray) ToGreyTagRouteDubboRuleArrayOutput() GreyTagRouteDubboRuleArrayOutput {
	return i.ToGreyTagRouteDubboRuleArrayOutputWithContext(context.Background())
}

func (i GreyTagRouteDubboRuleArray) ToGreyTagRouteDubboRuleArrayOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteDubboRuleArrayOutput)
}

func (i GreyTagRouteDubboRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteDubboRule] {
	return pulumix.Output[[]GreyTagRouteDubboRule]{
		OutputState: i.ToGreyTagRouteDubboRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GreyTagRouteDubboRuleOutput struct{ *pulumi.OutputState }

func (GreyTagRouteDubboRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteDubboRule)(nil)).Elem()
}

func (o GreyTagRouteDubboRuleOutput) ToGreyTagRouteDubboRuleOutput() GreyTagRouteDubboRuleOutput {
	return o
}

func (o GreyTagRouteDubboRuleOutput) ToGreyTagRouteDubboRuleOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleOutput {
	return o
}

func (o GreyTagRouteDubboRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteDubboRule] {
	return pulumix.Output[GreyTagRouteDubboRule]{
		OutputState: o.OutputState,
	}
}

// The Conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
func (o GreyTagRouteDubboRuleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The service group.
func (o GreyTagRouteDubboRuleOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// A list of conditions items. See `items` below.
func (o GreyTagRouteDubboRuleOutput) Items() GreyTagRouteDubboRuleItemArrayOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) []GreyTagRouteDubboRuleItem { return v.Items }).(GreyTagRouteDubboRuleItemArrayOutput)
}

// The method name
func (o GreyTagRouteDubboRuleOutput) MethodName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) *string { return v.MethodName }).(pulumi.StringPtrOutput)
}

// The service name.
func (o GreyTagRouteDubboRuleOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// The service version.
func (o GreyTagRouteDubboRuleOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRule) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GreyTagRouteDubboRuleArrayOutput struct{ *pulumi.OutputState }

func (GreyTagRouteDubboRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteDubboRule)(nil)).Elem()
}

func (o GreyTagRouteDubboRuleArrayOutput) ToGreyTagRouteDubboRuleArrayOutput() GreyTagRouteDubboRuleArrayOutput {
	return o
}

func (o GreyTagRouteDubboRuleArrayOutput) ToGreyTagRouteDubboRuleArrayOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleArrayOutput {
	return o
}

func (o GreyTagRouteDubboRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteDubboRule] {
	return pulumix.Output[[]GreyTagRouteDubboRule]{
		OutputState: o.OutputState,
	}
}

func (o GreyTagRouteDubboRuleArrayOutput) Index(i pulumi.IntInput) GreyTagRouteDubboRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GreyTagRouteDubboRule {
		return vs[0].([]GreyTagRouteDubboRule)[vs[1].(int)]
	}).(GreyTagRouteDubboRuleOutput)
}

type GreyTagRouteDubboRuleItem struct {
	// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
	Cond *string `pulumi:"cond"`
	// The parameter value gets the expression.
	Expr *string `pulumi:"expr"`
	// The parameter number.
	Index *int `pulumi:"index"`
	// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
	Operator *string `pulumi:"operator"`
	// The value of the parameter.
	Value *string `pulumi:"value"`
}

// GreyTagRouteDubboRuleItemInput is an input type that accepts GreyTagRouteDubboRuleItemArgs and GreyTagRouteDubboRuleItemOutput values.
// You can construct a concrete instance of `GreyTagRouteDubboRuleItemInput` via:
//
//	GreyTagRouteDubboRuleItemArgs{...}
type GreyTagRouteDubboRuleItemInput interface {
	pulumi.Input

	ToGreyTagRouteDubboRuleItemOutput() GreyTagRouteDubboRuleItemOutput
	ToGreyTagRouteDubboRuleItemOutputWithContext(context.Context) GreyTagRouteDubboRuleItemOutput
}

type GreyTagRouteDubboRuleItemArgs struct {
	// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
	Cond pulumi.StringPtrInput `pulumi:"cond"`
	// The parameter value gets the expression.
	Expr pulumi.StringPtrInput `pulumi:"expr"`
	// The parameter number.
	Index pulumi.IntPtrInput `pulumi:"index"`
	// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value of the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GreyTagRouteDubboRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteDubboRuleItem)(nil)).Elem()
}

func (i GreyTagRouteDubboRuleItemArgs) ToGreyTagRouteDubboRuleItemOutput() GreyTagRouteDubboRuleItemOutput {
	return i.ToGreyTagRouteDubboRuleItemOutputWithContext(context.Background())
}

func (i GreyTagRouteDubboRuleItemArgs) ToGreyTagRouteDubboRuleItemOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteDubboRuleItemOutput)
}

func (i GreyTagRouteDubboRuleItemArgs) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteDubboRuleItem] {
	return pulumix.Output[GreyTagRouteDubboRuleItem]{
		OutputState: i.ToGreyTagRouteDubboRuleItemOutputWithContext(ctx).OutputState,
	}
}

// GreyTagRouteDubboRuleItemArrayInput is an input type that accepts GreyTagRouteDubboRuleItemArray and GreyTagRouteDubboRuleItemArrayOutput values.
// You can construct a concrete instance of `GreyTagRouteDubboRuleItemArrayInput` via:
//
//	GreyTagRouteDubboRuleItemArray{ GreyTagRouteDubboRuleItemArgs{...} }
type GreyTagRouteDubboRuleItemArrayInput interface {
	pulumi.Input

	ToGreyTagRouteDubboRuleItemArrayOutput() GreyTagRouteDubboRuleItemArrayOutput
	ToGreyTagRouteDubboRuleItemArrayOutputWithContext(context.Context) GreyTagRouteDubboRuleItemArrayOutput
}

type GreyTagRouteDubboRuleItemArray []GreyTagRouteDubboRuleItemInput

func (GreyTagRouteDubboRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteDubboRuleItem)(nil)).Elem()
}

func (i GreyTagRouteDubboRuleItemArray) ToGreyTagRouteDubboRuleItemArrayOutput() GreyTagRouteDubboRuleItemArrayOutput {
	return i.ToGreyTagRouteDubboRuleItemArrayOutputWithContext(context.Background())
}

func (i GreyTagRouteDubboRuleItemArray) ToGreyTagRouteDubboRuleItemArrayOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteDubboRuleItemArrayOutput)
}

func (i GreyTagRouteDubboRuleItemArray) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteDubboRuleItem] {
	return pulumix.Output[[]GreyTagRouteDubboRuleItem]{
		OutputState: i.ToGreyTagRouteDubboRuleItemArrayOutputWithContext(ctx).OutputState,
	}
}

type GreyTagRouteDubboRuleItemOutput struct{ *pulumi.OutputState }

func (GreyTagRouteDubboRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteDubboRuleItem)(nil)).Elem()
}

func (o GreyTagRouteDubboRuleItemOutput) ToGreyTagRouteDubboRuleItemOutput() GreyTagRouteDubboRuleItemOutput {
	return o
}

func (o GreyTagRouteDubboRuleItemOutput) ToGreyTagRouteDubboRuleItemOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleItemOutput {
	return o
}

func (o GreyTagRouteDubboRuleItemOutput) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteDubboRuleItem] {
	return pulumix.Output[GreyTagRouteDubboRuleItem]{
		OutputState: o.OutputState,
	}
}

// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
func (o GreyTagRouteDubboRuleItemOutput) Cond() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRuleItem) *string { return v.Cond }).(pulumi.StringPtrOutput)
}

// The parameter value gets the expression.
func (o GreyTagRouteDubboRuleItemOutput) Expr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRuleItem) *string { return v.Expr }).(pulumi.StringPtrOutput)
}

// The parameter number.
func (o GreyTagRouteDubboRuleItemOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRuleItem) *int { return v.Index }).(pulumi.IntPtrOutput)
}

// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
func (o GreyTagRouteDubboRuleItemOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRuleItem) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value of the parameter.
func (o GreyTagRouteDubboRuleItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteDubboRuleItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GreyTagRouteDubboRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GreyTagRouteDubboRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteDubboRuleItem)(nil)).Elem()
}

func (o GreyTagRouteDubboRuleItemArrayOutput) ToGreyTagRouteDubboRuleItemArrayOutput() GreyTagRouteDubboRuleItemArrayOutput {
	return o
}

func (o GreyTagRouteDubboRuleItemArrayOutput) ToGreyTagRouteDubboRuleItemArrayOutputWithContext(ctx context.Context) GreyTagRouteDubboRuleItemArrayOutput {
	return o
}

func (o GreyTagRouteDubboRuleItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteDubboRuleItem] {
	return pulumix.Output[[]GreyTagRouteDubboRuleItem]{
		OutputState: o.OutputState,
	}
}

func (o GreyTagRouteDubboRuleItemArrayOutput) Index(i pulumi.IntInput) GreyTagRouteDubboRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GreyTagRouteDubboRuleItem {
		return vs[0].([]GreyTagRouteDubboRuleItem)[vs[1].(int)]
	}).(GreyTagRouteDubboRuleItemOutput)
}

type GreyTagRouteScRule struct {
	// The conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
	Condition *string `pulumi:"condition"`
	// A list of conditions items. See `items` below.
	Items []GreyTagRouteScRuleItem `pulumi:"items"`
	// The path corresponding to the grayscale rule.
	Path *string `pulumi:"path"`
}

// GreyTagRouteScRuleInput is an input type that accepts GreyTagRouteScRuleArgs and GreyTagRouteScRuleOutput values.
// You can construct a concrete instance of `GreyTagRouteScRuleInput` via:
//
//	GreyTagRouteScRuleArgs{...}
type GreyTagRouteScRuleInput interface {
	pulumi.Input

	ToGreyTagRouteScRuleOutput() GreyTagRouteScRuleOutput
	ToGreyTagRouteScRuleOutputWithContext(context.Context) GreyTagRouteScRuleOutput
}

type GreyTagRouteScRuleArgs struct {
	// The conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// A list of conditions items. See `items` below.
	Items GreyTagRouteScRuleItemArrayInput `pulumi:"items"`
	// The path corresponding to the grayscale rule.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GreyTagRouteScRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteScRule)(nil)).Elem()
}

func (i GreyTagRouteScRuleArgs) ToGreyTagRouteScRuleOutput() GreyTagRouteScRuleOutput {
	return i.ToGreyTagRouteScRuleOutputWithContext(context.Background())
}

func (i GreyTagRouteScRuleArgs) ToGreyTagRouteScRuleOutputWithContext(ctx context.Context) GreyTagRouteScRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteScRuleOutput)
}

func (i GreyTagRouteScRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteScRule] {
	return pulumix.Output[GreyTagRouteScRule]{
		OutputState: i.ToGreyTagRouteScRuleOutputWithContext(ctx).OutputState,
	}
}

// GreyTagRouteScRuleArrayInput is an input type that accepts GreyTagRouteScRuleArray and GreyTagRouteScRuleArrayOutput values.
// You can construct a concrete instance of `GreyTagRouteScRuleArrayInput` via:
//
//	GreyTagRouteScRuleArray{ GreyTagRouteScRuleArgs{...} }
type GreyTagRouteScRuleArrayInput interface {
	pulumi.Input

	ToGreyTagRouteScRuleArrayOutput() GreyTagRouteScRuleArrayOutput
	ToGreyTagRouteScRuleArrayOutputWithContext(context.Context) GreyTagRouteScRuleArrayOutput
}

type GreyTagRouteScRuleArray []GreyTagRouteScRuleInput

func (GreyTagRouteScRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteScRule)(nil)).Elem()
}

func (i GreyTagRouteScRuleArray) ToGreyTagRouteScRuleArrayOutput() GreyTagRouteScRuleArrayOutput {
	return i.ToGreyTagRouteScRuleArrayOutputWithContext(context.Background())
}

func (i GreyTagRouteScRuleArray) ToGreyTagRouteScRuleArrayOutputWithContext(ctx context.Context) GreyTagRouteScRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteScRuleArrayOutput)
}

func (i GreyTagRouteScRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteScRule] {
	return pulumix.Output[[]GreyTagRouteScRule]{
		OutputState: i.ToGreyTagRouteScRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GreyTagRouteScRuleOutput struct{ *pulumi.OutputState }

func (GreyTagRouteScRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteScRule)(nil)).Elem()
}

func (o GreyTagRouteScRuleOutput) ToGreyTagRouteScRuleOutput() GreyTagRouteScRuleOutput {
	return o
}

func (o GreyTagRouteScRuleOutput) ToGreyTagRouteScRuleOutputWithContext(ctx context.Context) GreyTagRouteScRuleOutput {
	return o
}

func (o GreyTagRouteScRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteScRule] {
	return pulumix.Output[GreyTagRouteScRule]{
		OutputState: o.OutputState,
	}
}

// The conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
func (o GreyTagRouteScRuleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRule) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// A list of conditions items. See `items` below.
func (o GreyTagRouteScRuleOutput) Items() GreyTagRouteScRuleItemArrayOutput {
	return o.ApplyT(func(v GreyTagRouteScRule) []GreyTagRouteScRuleItem { return v.Items }).(GreyTagRouteScRuleItemArrayOutput)
}

// The path corresponding to the grayscale rule.
func (o GreyTagRouteScRuleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRule) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GreyTagRouteScRuleArrayOutput struct{ *pulumi.OutputState }

func (GreyTagRouteScRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteScRule)(nil)).Elem()
}

func (o GreyTagRouteScRuleArrayOutput) ToGreyTagRouteScRuleArrayOutput() GreyTagRouteScRuleArrayOutput {
	return o
}

func (o GreyTagRouteScRuleArrayOutput) ToGreyTagRouteScRuleArrayOutputWithContext(ctx context.Context) GreyTagRouteScRuleArrayOutput {
	return o
}

func (o GreyTagRouteScRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteScRule] {
	return pulumix.Output[[]GreyTagRouteScRule]{
		OutputState: o.OutputState,
	}
}

func (o GreyTagRouteScRuleArrayOutput) Index(i pulumi.IntInput) GreyTagRouteScRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GreyTagRouteScRule {
		return vs[0].([]GreyTagRouteScRule)[vs[1].(int)]
	}).(GreyTagRouteScRuleOutput)
}

type GreyTagRouteScRuleItem struct {
	// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
	Cond *string `pulumi:"cond"`
	// The name of the parameter.
	Name *string `pulumi:"name"`
	// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
	Operator *string `pulumi:"operator"`
	// The compare types. Valid values: `param`, `cookie`, `header`.
	Type *string `pulumi:"type"`
	// The value of the parameter.
	Value *string `pulumi:"value"`
}

// GreyTagRouteScRuleItemInput is an input type that accepts GreyTagRouteScRuleItemArgs and GreyTagRouteScRuleItemOutput values.
// You can construct a concrete instance of `GreyTagRouteScRuleItemInput` via:
//
//	GreyTagRouteScRuleItemArgs{...}
type GreyTagRouteScRuleItemInput interface {
	pulumi.Input

	ToGreyTagRouteScRuleItemOutput() GreyTagRouteScRuleItemOutput
	ToGreyTagRouteScRuleItemOutputWithContext(context.Context) GreyTagRouteScRuleItemOutput
}

type GreyTagRouteScRuleItemArgs struct {
	// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
	Cond pulumi.StringPtrInput `pulumi:"cond"`
	// The name of the parameter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The compare types. Valid values: `param`, `cookie`, `header`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GreyTagRouteScRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteScRuleItem)(nil)).Elem()
}

func (i GreyTagRouteScRuleItemArgs) ToGreyTagRouteScRuleItemOutput() GreyTagRouteScRuleItemOutput {
	return i.ToGreyTagRouteScRuleItemOutputWithContext(context.Background())
}

func (i GreyTagRouteScRuleItemArgs) ToGreyTagRouteScRuleItemOutputWithContext(ctx context.Context) GreyTagRouteScRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteScRuleItemOutput)
}

func (i GreyTagRouteScRuleItemArgs) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteScRuleItem] {
	return pulumix.Output[GreyTagRouteScRuleItem]{
		OutputState: i.ToGreyTagRouteScRuleItemOutputWithContext(ctx).OutputState,
	}
}

// GreyTagRouteScRuleItemArrayInput is an input type that accepts GreyTagRouteScRuleItemArray and GreyTagRouteScRuleItemArrayOutput values.
// You can construct a concrete instance of `GreyTagRouteScRuleItemArrayInput` via:
//
//	GreyTagRouteScRuleItemArray{ GreyTagRouteScRuleItemArgs{...} }
type GreyTagRouteScRuleItemArrayInput interface {
	pulumi.Input

	ToGreyTagRouteScRuleItemArrayOutput() GreyTagRouteScRuleItemArrayOutput
	ToGreyTagRouteScRuleItemArrayOutputWithContext(context.Context) GreyTagRouteScRuleItemArrayOutput
}

type GreyTagRouteScRuleItemArray []GreyTagRouteScRuleItemInput

func (GreyTagRouteScRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteScRuleItem)(nil)).Elem()
}

func (i GreyTagRouteScRuleItemArray) ToGreyTagRouteScRuleItemArrayOutput() GreyTagRouteScRuleItemArrayOutput {
	return i.ToGreyTagRouteScRuleItemArrayOutputWithContext(context.Background())
}

func (i GreyTagRouteScRuleItemArray) ToGreyTagRouteScRuleItemArrayOutputWithContext(ctx context.Context) GreyTagRouteScRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreyTagRouteScRuleItemArrayOutput)
}

func (i GreyTagRouteScRuleItemArray) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteScRuleItem] {
	return pulumix.Output[[]GreyTagRouteScRuleItem]{
		OutputState: i.ToGreyTagRouteScRuleItemArrayOutputWithContext(ctx).OutputState,
	}
}

type GreyTagRouteScRuleItemOutput struct{ *pulumi.OutputState }

func (GreyTagRouteScRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreyTagRouteScRuleItem)(nil)).Elem()
}

func (o GreyTagRouteScRuleItemOutput) ToGreyTagRouteScRuleItemOutput() GreyTagRouteScRuleItemOutput {
	return o
}

func (o GreyTagRouteScRuleItemOutput) ToGreyTagRouteScRuleItemOutputWithContext(ctx context.Context) GreyTagRouteScRuleItemOutput {
	return o
}

func (o GreyTagRouteScRuleItemOutput) ToOutput(ctx context.Context) pulumix.Output[GreyTagRouteScRuleItem] {
	return pulumix.Output[GreyTagRouteScRuleItem]{
		OutputState: o.OutputState,
	}
}

// The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
func (o GreyTagRouteScRuleItemOutput) Cond() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRuleItem) *string { return v.Cond }).(pulumi.StringPtrOutput)
}

// The name of the parameter.
func (o GreyTagRouteScRuleItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRuleItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.
func (o GreyTagRouteScRuleItemOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRuleItem) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The compare types. Valid values: `param`, `cookie`, `header`.
func (o GreyTagRouteScRuleItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRuleItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the parameter.
func (o GreyTagRouteScRuleItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreyTagRouteScRuleItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GreyTagRouteScRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GreyTagRouteScRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GreyTagRouteScRuleItem)(nil)).Elem()
}

func (o GreyTagRouteScRuleItemArrayOutput) ToGreyTagRouteScRuleItemArrayOutput() GreyTagRouteScRuleItemArrayOutput {
	return o
}

func (o GreyTagRouteScRuleItemArrayOutput) ToGreyTagRouteScRuleItemArrayOutputWithContext(ctx context.Context) GreyTagRouteScRuleItemArrayOutput {
	return o
}

func (o GreyTagRouteScRuleItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GreyTagRouteScRuleItem] {
	return pulumix.Output[[]GreyTagRouteScRuleItem]{
		OutputState: o.OutputState,
	}
}

func (o GreyTagRouteScRuleItemArrayOutput) Index(i pulumi.IntInput) GreyTagRouteScRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GreyTagRouteScRuleItem {
		return vs[0].([]GreyTagRouteScRuleItem)[vs[1].(int)]
	}).(GreyTagRouteScRuleItemOutput)
}

type IngressDefaultRule struct {
	// Target application ID.
	AppId *string `pulumi:"appId"`
	// Target application name.
	AppName *string `pulumi:"appName"`
	// Application backend port.
	ContainerPort *int `pulumi:"containerPort"`
}

// IngressDefaultRuleInput is an input type that accepts IngressDefaultRuleArgs and IngressDefaultRuleOutput values.
// You can construct a concrete instance of `IngressDefaultRuleInput` via:
//
//	IngressDefaultRuleArgs{...}
type IngressDefaultRuleInput interface {
	pulumi.Input

	ToIngressDefaultRuleOutput() IngressDefaultRuleOutput
	ToIngressDefaultRuleOutputWithContext(context.Context) IngressDefaultRuleOutput
}

type IngressDefaultRuleArgs struct {
	// Target application ID.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Target application name.
	AppName pulumi.StringPtrInput `pulumi:"appName"`
	// Application backend port.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
}

func (IngressDefaultRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDefaultRule)(nil)).Elem()
}

func (i IngressDefaultRuleArgs) ToIngressDefaultRuleOutput() IngressDefaultRuleOutput {
	return i.ToIngressDefaultRuleOutputWithContext(context.Background())
}

func (i IngressDefaultRuleArgs) ToIngressDefaultRuleOutputWithContext(ctx context.Context) IngressDefaultRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDefaultRuleOutput)
}

func (i IngressDefaultRuleArgs) ToOutput(ctx context.Context) pulumix.Output[IngressDefaultRule] {
	return pulumix.Output[IngressDefaultRule]{
		OutputState: i.ToIngressDefaultRuleOutputWithContext(ctx).OutputState,
	}
}

func (i IngressDefaultRuleArgs) ToIngressDefaultRulePtrOutput() IngressDefaultRulePtrOutput {
	return i.ToIngressDefaultRulePtrOutputWithContext(context.Background())
}

func (i IngressDefaultRuleArgs) ToIngressDefaultRulePtrOutputWithContext(ctx context.Context) IngressDefaultRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDefaultRuleOutput).ToIngressDefaultRulePtrOutputWithContext(ctx)
}

// IngressDefaultRulePtrInput is an input type that accepts IngressDefaultRuleArgs, IngressDefaultRulePtr and IngressDefaultRulePtrOutput values.
// You can construct a concrete instance of `IngressDefaultRulePtrInput` via:
//
//	        IngressDefaultRuleArgs{...}
//
//	or:
//
//	        nil
type IngressDefaultRulePtrInput interface {
	pulumi.Input

	ToIngressDefaultRulePtrOutput() IngressDefaultRulePtrOutput
	ToIngressDefaultRulePtrOutputWithContext(context.Context) IngressDefaultRulePtrOutput
}

type ingressDefaultRulePtrType IngressDefaultRuleArgs

func IngressDefaultRulePtr(v *IngressDefaultRuleArgs) IngressDefaultRulePtrInput {
	return (*ingressDefaultRulePtrType)(v)
}

func (*ingressDefaultRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDefaultRule)(nil)).Elem()
}

func (i *ingressDefaultRulePtrType) ToIngressDefaultRulePtrOutput() IngressDefaultRulePtrOutput {
	return i.ToIngressDefaultRulePtrOutputWithContext(context.Background())
}

func (i *ingressDefaultRulePtrType) ToIngressDefaultRulePtrOutputWithContext(ctx context.Context) IngressDefaultRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressDefaultRulePtrOutput)
}

func (i *ingressDefaultRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*IngressDefaultRule] {
	return pulumix.Output[*IngressDefaultRule]{
		OutputState: i.ToIngressDefaultRulePtrOutputWithContext(ctx).OutputState,
	}
}

type IngressDefaultRuleOutput struct{ *pulumi.OutputState }

func (IngressDefaultRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressDefaultRule)(nil)).Elem()
}

func (o IngressDefaultRuleOutput) ToIngressDefaultRuleOutput() IngressDefaultRuleOutput {
	return o
}

func (o IngressDefaultRuleOutput) ToIngressDefaultRuleOutputWithContext(ctx context.Context) IngressDefaultRuleOutput {
	return o
}

func (o IngressDefaultRuleOutput) ToIngressDefaultRulePtrOutput() IngressDefaultRulePtrOutput {
	return o.ToIngressDefaultRulePtrOutputWithContext(context.Background())
}

func (o IngressDefaultRuleOutput) ToIngressDefaultRulePtrOutputWithContext(ctx context.Context) IngressDefaultRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressDefaultRule) *IngressDefaultRule {
		return &v
	}).(IngressDefaultRulePtrOutput)
}

func (o IngressDefaultRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IngressDefaultRule] {
	return pulumix.Output[IngressDefaultRule]{
		OutputState: o.OutputState,
	}
}

// Target application ID.
func (o IngressDefaultRuleOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressDefaultRule) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Target application name.
func (o IngressDefaultRuleOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressDefaultRule) *string { return v.AppName }).(pulumi.StringPtrOutput)
}

// Application backend port.
func (o IngressDefaultRuleOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressDefaultRule) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

type IngressDefaultRulePtrOutput struct{ *pulumi.OutputState }

func (IngressDefaultRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressDefaultRule)(nil)).Elem()
}

func (o IngressDefaultRulePtrOutput) ToIngressDefaultRulePtrOutput() IngressDefaultRulePtrOutput {
	return o
}

func (o IngressDefaultRulePtrOutput) ToIngressDefaultRulePtrOutputWithContext(ctx context.Context) IngressDefaultRulePtrOutput {
	return o
}

func (o IngressDefaultRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IngressDefaultRule] {
	return pulumix.Output[*IngressDefaultRule]{
		OutputState: o.OutputState,
	}
}

func (o IngressDefaultRulePtrOutput) Elem() IngressDefaultRuleOutput {
	return o.ApplyT(func(v *IngressDefaultRule) IngressDefaultRule {
		if v != nil {
			return *v
		}
		var ret IngressDefaultRule
		return ret
	}).(IngressDefaultRuleOutput)
}

// Target application ID.
func (o IngressDefaultRulePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressDefaultRule) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// Target application name.
func (o IngressDefaultRulePtrOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressDefaultRule) *string {
		if v == nil {
			return nil
		}
		return v.AppName
	}).(pulumi.StringPtrOutput)
}

// Application backend port.
func (o IngressDefaultRulePtrOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IngressDefaultRule) *int {
		if v == nil {
			return nil
		}
		return v.ContainerPort
	}).(pulumi.IntPtrOutput)
}

type IngressRule struct {
	// Target application ID.
	AppId string `pulumi:"appId"`
	// Target application name.
	AppName string `pulumi:"appName"`
	// The backend protocol.
	BackendProtocol *string `pulumi:"backendProtocol"`
	// Application backend port.
	ContainerPort int `pulumi:"containerPort"`
	// Application domain name.
	Domain string `pulumi:"domain"`
	// URL path.
	Path string `pulumi:"path"`
	// The rewrite path.
	RewritePath *string `pulumi:"rewritePath"`
}

// IngressRuleInput is an input type that accepts IngressRuleArgs and IngressRuleOutput values.
// You can construct a concrete instance of `IngressRuleInput` via:
//
//	IngressRuleArgs{...}
type IngressRuleInput interface {
	pulumi.Input

	ToIngressRuleOutput() IngressRuleOutput
	ToIngressRuleOutputWithContext(context.Context) IngressRuleOutput
}

type IngressRuleArgs struct {
	// Target application ID.
	AppId pulumi.StringInput `pulumi:"appId"`
	// Target application name.
	AppName pulumi.StringInput `pulumi:"appName"`
	// The backend protocol.
	BackendProtocol pulumi.StringPtrInput `pulumi:"backendProtocol"`
	// Application backend port.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// Application domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// URL path.
	Path pulumi.StringInput `pulumi:"path"`
	// The rewrite path.
	RewritePath pulumi.StringPtrInput `pulumi:"rewritePath"`
}

func (IngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (i IngressRuleArgs) ToIngressRuleOutput() IngressRuleOutput {
	return i.ToIngressRuleOutputWithContext(context.Background())
}

func (i IngressRuleArgs) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleOutput)
}

func (i IngressRuleArgs) ToOutput(ctx context.Context) pulumix.Output[IngressRule] {
	return pulumix.Output[IngressRule]{
		OutputState: i.ToIngressRuleOutputWithContext(ctx).OutputState,
	}
}

// IngressRuleArrayInput is an input type that accepts IngressRuleArray and IngressRuleArrayOutput values.
// You can construct a concrete instance of `IngressRuleArrayInput` via:
//
//	IngressRuleArray{ IngressRuleArgs{...} }
type IngressRuleArrayInput interface {
	pulumi.Input

	ToIngressRuleArrayOutput() IngressRuleArrayOutput
	ToIngressRuleArrayOutputWithContext(context.Context) IngressRuleArrayOutput
}

type IngressRuleArray []IngressRuleInput

func (IngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (i IngressRuleArray) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return i.ToIngressRuleArrayOutputWithContext(context.Background())
}

func (i IngressRuleArray) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRuleArrayOutput)
}

func (i IngressRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]IngressRule] {
	return pulumix.Output[[]IngressRule]{
		OutputState: i.ToIngressRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type IngressRuleOutput struct{ *pulumi.OutputState }

func (IngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressRule)(nil)).Elem()
}

func (o IngressRuleOutput) ToIngressRuleOutput() IngressRuleOutput {
	return o
}

func (o IngressRuleOutput) ToIngressRuleOutputWithContext(ctx context.Context) IngressRuleOutput {
	return o
}

func (o IngressRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IngressRule] {
	return pulumix.Output[IngressRule]{
		OutputState: o.OutputState,
	}
}

// Target application ID.
func (o IngressRuleOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v IngressRule) string { return v.AppId }).(pulumi.StringOutput)
}

// Target application name.
func (o IngressRuleOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v IngressRule) string { return v.AppName }).(pulumi.StringOutput)
}

// The backend protocol.
func (o IngressRuleOutput) BackendProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressRule) *string { return v.BackendProtocol }).(pulumi.StringPtrOutput)
}

// Application backend port.
func (o IngressRuleOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v IngressRule) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// Application domain name.
func (o IngressRuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v IngressRule) string { return v.Domain }).(pulumi.StringOutput)
}

// URL path.
func (o IngressRuleOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v IngressRule) string { return v.Path }).(pulumi.StringOutput)
}

// The rewrite path.
func (o IngressRuleOutput) RewritePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressRule) *string { return v.RewritePath }).(pulumi.StringPtrOutput)
}

type IngressRuleArrayOutput struct{ *pulumi.OutputState }

func (IngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressRule)(nil)).Elem()
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutput() IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) ToIngressRuleArrayOutputWithContext(ctx context.Context) IngressRuleArrayOutput {
	return o
}

func (o IngressRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IngressRule] {
	return pulumix.Output[[]IngressRule]{
		OutputState: o.OutputState,
	}
}

func (o IngressRuleArrayOutput) Index(i pulumi.IntInput) IngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressRule {
		return vs[0].([]IngressRule)[vs[1].(int)]
	}).(IngressRuleOutput)
}

type LoadBalancerInternetInternet struct {
	// The SSL certificate. `httpsCertId` is required when HTTPS is selected
	HttpsCertId *string `pulumi:"httpsCertId"`
	// The SLB Port.
	Port *int `pulumi:"port"`
	// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The Container port.
	TargetPort *int `pulumi:"targetPort"`
}

// LoadBalancerInternetInternetInput is an input type that accepts LoadBalancerInternetInternetArgs and LoadBalancerInternetInternetOutput values.
// You can construct a concrete instance of `LoadBalancerInternetInternetInput` via:
//
//	LoadBalancerInternetInternetArgs{...}
type LoadBalancerInternetInternetInput interface {
	pulumi.Input

	ToLoadBalancerInternetInternetOutput() LoadBalancerInternetInternetOutput
	ToLoadBalancerInternetInternetOutputWithContext(context.Context) LoadBalancerInternetInternetOutput
}

type LoadBalancerInternetInternetArgs struct {
	// The SSL certificate. `httpsCertId` is required when HTTPS is selected
	HttpsCertId pulumi.StringPtrInput `pulumi:"httpsCertId"`
	// The SLB Port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The Container port.
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (LoadBalancerInternetInternetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInternetInternet)(nil)).Elem()
}

func (i LoadBalancerInternetInternetArgs) ToLoadBalancerInternetInternetOutput() LoadBalancerInternetInternetOutput {
	return i.ToLoadBalancerInternetInternetOutputWithContext(context.Background())
}

func (i LoadBalancerInternetInternetArgs) ToLoadBalancerInternetInternetOutputWithContext(ctx context.Context) LoadBalancerInternetInternetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInternetInternetOutput)
}

func (i LoadBalancerInternetInternetArgs) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerInternetInternet] {
	return pulumix.Output[LoadBalancerInternetInternet]{
		OutputState: i.ToLoadBalancerInternetInternetOutputWithContext(ctx).OutputState,
	}
}

// LoadBalancerInternetInternetArrayInput is an input type that accepts LoadBalancerInternetInternetArray and LoadBalancerInternetInternetArrayOutput values.
// You can construct a concrete instance of `LoadBalancerInternetInternetArrayInput` via:
//
//	LoadBalancerInternetInternetArray{ LoadBalancerInternetInternetArgs{...} }
type LoadBalancerInternetInternetArrayInput interface {
	pulumi.Input

	ToLoadBalancerInternetInternetArrayOutput() LoadBalancerInternetInternetArrayOutput
	ToLoadBalancerInternetInternetArrayOutputWithContext(context.Context) LoadBalancerInternetInternetArrayOutput
}

type LoadBalancerInternetInternetArray []LoadBalancerInternetInternetInput

func (LoadBalancerInternetInternetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerInternetInternet)(nil)).Elem()
}

func (i LoadBalancerInternetInternetArray) ToLoadBalancerInternetInternetArrayOutput() LoadBalancerInternetInternetArrayOutput {
	return i.ToLoadBalancerInternetInternetArrayOutputWithContext(context.Background())
}

func (i LoadBalancerInternetInternetArray) ToLoadBalancerInternetInternetArrayOutputWithContext(ctx context.Context) LoadBalancerInternetInternetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInternetInternetArrayOutput)
}

func (i LoadBalancerInternetInternetArray) ToOutput(ctx context.Context) pulumix.Output[[]LoadBalancerInternetInternet] {
	return pulumix.Output[[]LoadBalancerInternetInternet]{
		OutputState: i.ToLoadBalancerInternetInternetArrayOutputWithContext(ctx).OutputState,
	}
}

type LoadBalancerInternetInternetOutput struct{ *pulumi.OutputState }

func (LoadBalancerInternetInternetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInternetInternet)(nil)).Elem()
}

func (o LoadBalancerInternetInternetOutput) ToLoadBalancerInternetInternetOutput() LoadBalancerInternetInternetOutput {
	return o
}

func (o LoadBalancerInternetInternetOutput) ToLoadBalancerInternetInternetOutputWithContext(ctx context.Context) LoadBalancerInternetInternetOutput {
	return o
}

func (o LoadBalancerInternetInternetOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerInternetInternet] {
	return pulumix.Output[LoadBalancerInternetInternet]{
		OutputState: o.OutputState,
	}
}

// The SSL certificate. `httpsCertId` is required when HTTPS is selected
func (o LoadBalancerInternetInternetOutput) HttpsCertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInternetInternet) *string { return v.HttpsCertId }).(pulumi.StringPtrOutput)
}

// The SLB Port.
func (o LoadBalancerInternetInternetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerInternetInternet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
func (o LoadBalancerInternetInternetOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInternetInternet) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The Container port.
func (o LoadBalancerInternetInternetOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerInternetInternet) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type LoadBalancerInternetInternetArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerInternetInternetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerInternetInternet)(nil)).Elem()
}

func (o LoadBalancerInternetInternetArrayOutput) ToLoadBalancerInternetInternetArrayOutput() LoadBalancerInternetInternetArrayOutput {
	return o
}

func (o LoadBalancerInternetInternetArrayOutput) ToLoadBalancerInternetInternetArrayOutputWithContext(ctx context.Context) LoadBalancerInternetInternetArrayOutput {
	return o
}

func (o LoadBalancerInternetInternetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoadBalancerInternetInternet] {
	return pulumix.Output[[]LoadBalancerInternetInternet]{
		OutputState: o.OutputState,
	}
}

func (o LoadBalancerInternetInternetArrayOutput) Index(i pulumi.IntInput) LoadBalancerInternetInternetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerInternetInternet {
		return vs[0].([]LoadBalancerInternetInternet)[vs[1].(int)]
	}).(LoadBalancerInternetInternetOutput)
}

type LoadBalancerIntranetIntranet struct {
	// The SSL certificate. `httpsCertId` is required when HTTPS is selected
	HttpsCertId *string `pulumi:"httpsCertId"`
	// The SLB Port.
	Port *int `pulumi:"port"`
	// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The Container port.
	TargetPort *int `pulumi:"targetPort"`
}

// LoadBalancerIntranetIntranetInput is an input type that accepts LoadBalancerIntranetIntranetArgs and LoadBalancerIntranetIntranetOutput values.
// You can construct a concrete instance of `LoadBalancerIntranetIntranetInput` via:
//
//	LoadBalancerIntranetIntranetArgs{...}
type LoadBalancerIntranetIntranetInput interface {
	pulumi.Input

	ToLoadBalancerIntranetIntranetOutput() LoadBalancerIntranetIntranetOutput
	ToLoadBalancerIntranetIntranetOutputWithContext(context.Context) LoadBalancerIntranetIntranetOutput
}

type LoadBalancerIntranetIntranetArgs struct {
	// The SSL certificate. `httpsCertId` is required when HTTPS is selected
	HttpsCertId pulumi.StringPtrInput `pulumi:"httpsCertId"`
	// The SLB Port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The Container port.
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (LoadBalancerIntranetIntranetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIntranetIntranet)(nil)).Elem()
}

func (i LoadBalancerIntranetIntranetArgs) ToLoadBalancerIntranetIntranetOutput() LoadBalancerIntranetIntranetOutput {
	return i.ToLoadBalancerIntranetIntranetOutputWithContext(context.Background())
}

func (i LoadBalancerIntranetIntranetArgs) ToLoadBalancerIntranetIntranetOutputWithContext(ctx context.Context) LoadBalancerIntranetIntranetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIntranetIntranetOutput)
}

func (i LoadBalancerIntranetIntranetArgs) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerIntranetIntranet] {
	return pulumix.Output[LoadBalancerIntranetIntranet]{
		OutputState: i.ToLoadBalancerIntranetIntranetOutputWithContext(ctx).OutputState,
	}
}

// LoadBalancerIntranetIntranetArrayInput is an input type that accepts LoadBalancerIntranetIntranetArray and LoadBalancerIntranetIntranetArrayOutput values.
// You can construct a concrete instance of `LoadBalancerIntranetIntranetArrayInput` via:
//
//	LoadBalancerIntranetIntranetArray{ LoadBalancerIntranetIntranetArgs{...} }
type LoadBalancerIntranetIntranetArrayInput interface {
	pulumi.Input

	ToLoadBalancerIntranetIntranetArrayOutput() LoadBalancerIntranetIntranetArrayOutput
	ToLoadBalancerIntranetIntranetArrayOutputWithContext(context.Context) LoadBalancerIntranetIntranetArrayOutput
}

type LoadBalancerIntranetIntranetArray []LoadBalancerIntranetIntranetInput

func (LoadBalancerIntranetIntranetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIntranetIntranet)(nil)).Elem()
}

func (i LoadBalancerIntranetIntranetArray) ToLoadBalancerIntranetIntranetArrayOutput() LoadBalancerIntranetIntranetArrayOutput {
	return i.ToLoadBalancerIntranetIntranetArrayOutputWithContext(context.Background())
}

func (i LoadBalancerIntranetIntranetArray) ToLoadBalancerIntranetIntranetArrayOutputWithContext(ctx context.Context) LoadBalancerIntranetIntranetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerIntranetIntranetArrayOutput)
}

func (i LoadBalancerIntranetIntranetArray) ToOutput(ctx context.Context) pulumix.Output[[]LoadBalancerIntranetIntranet] {
	return pulumix.Output[[]LoadBalancerIntranetIntranet]{
		OutputState: i.ToLoadBalancerIntranetIntranetArrayOutputWithContext(ctx).OutputState,
	}
}

type LoadBalancerIntranetIntranetOutput struct{ *pulumi.OutputState }

func (LoadBalancerIntranetIntranetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerIntranetIntranet)(nil)).Elem()
}

func (o LoadBalancerIntranetIntranetOutput) ToLoadBalancerIntranetIntranetOutput() LoadBalancerIntranetIntranetOutput {
	return o
}

func (o LoadBalancerIntranetIntranetOutput) ToLoadBalancerIntranetIntranetOutputWithContext(ctx context.Context) LoadBalancerIntranetIntranetOutput {
	return o
}

func (o LoadBalancerIntranetIntranetOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerIntranetIntranet] {
	return pulumix.Output[LoadBalancerIntranetIntranet]{
		OutputState: o.OutputState,
	}
}

// The SSL certificate. `httpsCertId` is required when HTTPS is selected
func (o LoadBalancerIntranetIntranetOutput) HttpsCertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIntranetIntranet) *string { return v.HttpsCertId }).(pulumi.StringPtrOutput)
}

// The SLB Port.
func (o LoadBalancerIntranetIntranetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerIntranetIntranet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The Network protocol. Valid values: `TCP` ,`HTTP`,`HTTPS`.
func (o LoadBalancerIntranetIntranetOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerIntranetIntranet) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The Container port.
func (o LoadBalancerIntranetIntranetOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerIntranetIntranet) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type LoadBalancerIntranetIntranetArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerIntranetIntranetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerIntranetIntranet)(nil)).Elem()
}

func (o LoadBalancerIntranetIntranetArrayOutput) ToLoadBalancerIntranetIntranetArrayOutput() LoadBalancerIntranetIntranetArrayOutput {
	return o
}

func (o LoadBalancerIntranetIntranetArrayOutput) ToLoadBalancerIntranetIntranetArrayOutputWithContext(ctx context.Context) LoadBalancerIntranetIntranetArrayOutput {
	return o
}

func (o LoadBalancerIntranetIntranetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoadBalancerIntranetIntranet] {
	return pulumix.Output[[]LoadBalancerIntranetIntranet]{
		OutputState: o.OutputState,
	}
}

func (o LoadBalancerIntranetIntranetArrayOutput) Index(i pulumi.IntInput) LoadBalancerIntranetIntranetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerIntranetIntranet {
		return vs[0].([]LoadBalancerIntranetIntranet)[vs[1].(int)]
	}).(LoadBalancerIntranetIntranetOutput)
}

type GetApplicationScalingRulesRule struct {
	// The ID of the Application.
	AppId string `pulumi:"appId"`
	// The CreateTime of the Application Scaling Rule.
	CreateTime string `pulumi:"createTime"`
	// The ID of the Application Scaling Rule.
	Id string `pulumi:"id"`
	// Whether to enable the auto scaling policy.
	ScalingRuleEnable bool `pulumi:"scalingRuleEnable"`
	// Monitoring indicators for elastic scaling.
	ScalingRuleMetrics []GetApplicationScalingRulesRuleScalingRuleMetric `pulumi:"scalingRuleMetrics"`
	// The name of the scaling rule.
	ScalingRuleName string `pulumi:"scalingRuleName"`
	// Timing elastic expansion.
	ScalingRuleTimers []GetApplicationScalingRulesRuleScalingRuleTimer `pulumi:"scalingRuleTimers"`
	// Flexible strategy type.
	ScalingRuleType string `pulumi:"scalingRuleType"`
}

// GetApplicationScalingRulesRuleInput is an input type that accepts GetApplicationScalingRulesRuleArgs and GetApplicationScalingRulesRuleOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleInput` via:
//
//	GetApplicationScalingRulesRuleArgs{...}
type GetApplicationScalingRulesRuleInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleOutput() GetApplicationScalingRulesRuleOutput
	ToGetApplicationScalingRulesRuleOutputWithContext(context.Context) GetApplicationScalingRulesRuleOutput
}

type GetApplicationScalingRulesRuleArgs struct {
	// The ID of the Application.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The CreateTime of the Application Scaling Rule.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the Application Scaling Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether to enable the auto scaling policy.
	ScalingRuleEnable pulumi.BoolInput `pulumi:"scalingRuleEnable"`
	// Monitoring indicators for elastic scaling.
	ScalingRuleMetrics GetApplicationScalingRulesRuleScalingRuleMetricArrayInput `pulumi:"scalingRuleMetrics"`
	// The name of the scaling rule.
	ScalingRuleName pulumi.StringInput `pulumi:"scalingRuleName"`
	// Timing elastic expansion.
	ScalingRuleTimers GetApplicationScalingRulesRuleScalingRuleTimerArrayInput `pulumi:"scalingRuleTimers"`
	// Flexible strategy type.
	ScalingRuleType pulumi.StringInput `pulumi:"scalingRuleType"`
}

func (GetApplicationScalingRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleArgs) ToGetApplicationScalingRulesRuleOutput() GetApplicationScalingRulesRuleOutput {
	return i.ToGetApplicationScalingRulesRuleOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleArgs) ToGetApplicationScalingRulesRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleOutput)
}

func (i GetApplicationScalingRulesRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRule] {
	return pulumix.Output[GetApplicationScalingRulesRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleArrayInput is an input type that accepts GetApplicationScalingRulesRuleArray and GetApplicationScalingRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleArrayInput` via:
//
//	GetApplicationScalingRulesRuleArray{ GetApplicationScalingRulesRuleArgs{...} }
type GetApplicationScalingRulesRuleArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleArrayOutput() GetApplicationScalingRulesRuleArrayOutput
	ToGetApplicationScalingRulesRuleArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleArrayOutput
}

type GetApplicationScalingRulesRuleArray []GetApplicationScalingRulesRuleInput

func (GetApplicationScalingRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleArray) ToGetApplicationScalingRulesRuleArrayOutput() GetApplicationScalingRulesRuleArrayOutput {
	return i.ToGetApplicationScalingRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleArray) ToGetApplicationScalingRulesRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleArrayOutput)
}

func (i GetApplicationScalingRulesRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleOutput) ToGetApplicationScalingRulesRuleOutput() GetApplicationScalingRulesRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleOutput) ToGetApplicationScalingRulesRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRule] {
	return pulumix.Output[GetApplicationScalingRulesRule]{
		OutputState: o.OutputState,
	}
}

// The ID of the Application.
func (o GetApplicationScalingRulesRuleOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) string { return v.AppId }).(pulumi.StringOutput)
}

// The CreateTime of the Application Scaling Rule.
func (o GetApplicationScalingRulesRuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the Application Scaling Rule.
func (o GetApplicationScalingRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to enable the auto scaling policy.
func (o GetApplicationScalingRulesRuleOutput) ScalingRuleEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) bool { return v.ScalingRuleEnable }).(pulumi.BoolOutput)
}

// Monitoring indicators for elastic scaling.
func (o GetApplicationScalingRulesRuleOutput) ScalingRuleMetrics() GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) []GetApplicationScalingRulesRuleScalingRuleMetric {
		return v.ScalingRuleMetrics
	}).(GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput)
}

// The name of the scaling rule.
func (o GetApplicationScalingRulesRuleOutput) ScalingRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) string { return v.ScalingRuleName }).(pulumi.StringOutput)
}

// Timing elastic expansion.
func (o GetApplicationScalingRulesRuleOutput) ScalingRuleTimers() GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) []GetApplicationScalingRulesRuleScalingRuleTimer {
		return v.ScalingRuleTimers
	}).(GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput)
}

// Flexible strategy type.
func (o GetApplicationScalingRulesRuleOutput) ScalingRuleType() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRule) string { return v.ScalingRuleType }).(pulumi.StringOutput)
}

type GetApplicationScalingRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleArrayOutput) ToGetApplicationScalingRulesRuleArrayOutput() GetApplicationScalingRulesRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleArrayOutput) ToGetApplicationScalingRulesRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRule]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRule {
		return vs[0].([]GetApplicationScalingRulesRule)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetric struct {
	// The maximum number of instances.
	MaxReplicas int `pulumi:"maxReplicas"`
	// The auto scaling list of monitoring indicators.
	Metrics []GetApplicationScalingRulesRuleScalingRuleMetricMetric `pulumi:"metrics"`
	// Monitor indicator elasticity status.
	MetricsStatuses []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus `pulumi:"metricsStatuses"`
	// The minimum number of instances.
	MinReplicas int `pulumi:"minReplicas"`
	// The shrink rule.
	ScaleDownRules []GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule `pulumi:"scaleDownRules"`
	// The expansion rules.
	ScaleUpRules []GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule `pulumi:"scaleUpRules"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricArgs and GetApplicationScalingRulesRuleScalingRuleMetricOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricArgs struct {
	// The maximum number of instances.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// The auto scaling list of monitoring indicators.
	Metrics GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayInput `pulumi:"metrics"`
	// Monitor indicator elasticity status.
	MetricsStatuses GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayInput `pulumi:"metricsStatuses"`
	// The minimum number of instances.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
	// The shrink rule.
	ScaleDownRules GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayInput `pulumi:"scaleDownRules"`
	// The expansion rules.
	ScaleUpRules GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayInput `pulumi:"scaleUpRules"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricArray and GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricArray{ GetApplicationScalingRulesRuleScalingRuleMetricArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricArray []GetApplicationScalingRulesRuleScalingRuleMetricInput

func (GetApplicationScalingRulesRuleScalingRuleMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetric]{
		OutputState: o.OutputState,
	}
}

// The maximum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// The auto scaling list of monitoring indicators.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) Metrics() GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) []GetApplicationScalingRulesRuleScalingRuleMetricMetric {
		return v.Metrics
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput)
}

// Monitor indicator elasticity status.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) MetricsStatuses() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus {
		return v.MetricsStatuses
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput)
}

// The minimum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) int { return v.MinReplicas }).(pulumi.IntOutput)
}

// The shrink rule.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) ScaleDownRules() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) []GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule {
		return v.ScaleDownRules
	}).(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput)
}

// The expansion rules.
func (o GetApplicationScalingRulesRuleScalingRuleMetricOutput) ScaleUpRules() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetric) []GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule {
		return v.ScaleUpRules
	}).(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetric]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetric {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetric)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetric struct {
	// The target value of the monitoring indicator.
	MetricTargetAverageUtilization int `pulumi:"metricTargetAverageUtilization"`
	// The metric type of the Application Scaling Rule.
	MetricType string `pulumi:"metricType"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs and GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricMetricInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs struct {
	// The target value of the monitoring indicator.
	MetricTargetAverageUtilization pulumi.IntInput `pulumi:"metricTargetAverageUtilization"`
	// The metric type of the Application Scaling Rule.
	MetricType pulumi.StringInput `pulumi:"metricType"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricArray and GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricArray{ GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricArray []GetApplicationScalingRulesRuleScalingRuleMetricMetricInput

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetric]{
		OutputState: o.OutputState,
	}
}

// The target value of the monitoring indicator.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) MetricTargetAverageUtilization() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetric) int {
		return v.MetricTargetAverageUtilization
	}).(pulumi.IntOutput)
}

// The metric type of the Application Scaling Rule.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput) MetricType() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetric) string { return v.MetricType }).(pulumi.StringOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetric]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricMetric {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricMetric)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus struct {
	// The current monitoring indicator elasticity list.
	CurrentMetrics []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric `pulumi:"currentMetrics"`
	// The number of current instances.
	CurrentReplicas int `pulumi:"currentReplicas"`
	// The number of target instances.
	DesiredReplicas int `pulumi:"desiredReplicas"`
	// The time of the last elastic expansion.
	LastScaleTime string `pulumi:"lastScaleTime"`
	// The maximum number of instances.
	MaxReplicas int `pulumi:"maxReplicas"`
	// The minimum number of instances.
	MinReplicas int `pulumi:"minReplicas"`
	// Next monitoring indicator elasticity list
	NextScaleMetrics []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric `pulumi:"nextScaleMetrics"`
	// The next cycle of monitoring indicator elasticity.
	NextScaleTimePeriod int `pulumi:"nextScaleTimePeriod"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs struct {
	// The current monitoring indicator elasticity list.
	CurrentMetrics GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayInput `pulumi:"currentMetrics"`
	// The number of current instances.
	CurrentReplicas pulumi.IntInput `pulumi:"currentReplicas"`
	// The number of target instances.
	DesiredReplicas pulumi.IntInput `pulumi:"desiredReplicas"`
	// The time of the last elastic expansion.
	LastScaleTime pulumi.StringInput `pulumi:"lastScaleTime"`
	// The maximum number of instances.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// The minimum number of instances.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
	// Next monitoring indicator elasticity list
	NextScaleMetrics GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayInput `pulumi:"nextScaleMetrics"`
	// The next cycle of monitoring indicator elasticity.
	NextScaleTimePeriod pulumi.IntInput `pulumi:"nextScaleTimePeriod"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray{ GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusInput

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus]{
		OutputState: o.OutputState,
	}
}

// The current monitoring indicator elasticity list.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) CurrentMetrics() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric {
		return v.CurrentMetrics
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput)
}

// The number of current instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) CurrentReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) int { return v.CurrentReplicas }).(pulumi.IntOutput)
}

// The number of target instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) DesiredReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) int { return v.DesiredReplicas }).(pulumi.IntOutput)
}

// The time of the last elastic expansion.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) LastScaleTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) string { return v.LastScaleTime }).(pulumi.StringOutput)
}

// The maximum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// The minimum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) int { return v.MinReplicas }).(pulumi.IntOutput)
}

// Next monitoring indicator elasticity list
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) NextScaleMetrics() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric {
		return v.NextScaleMetrics
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput)
}

// The next cycle of monitoring indicator elasticity.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput) NextScaleTimePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus) int { return v.NextScaleTimePeriod }).(pulumi.IntOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatus)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric struct {
	// The current value.
	CurrentValue int `pulumi:"currentValue"`
	// The name of the trigger condition.
	Name string `pulumi:"name"`
	// The metric type. Associated with monitoring indicators.
	Type string `pulumi:"type"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs struct {
	// The current value.
	CurrentValue pulumi.IntInput `pulumi:"currentValue"`
	// The name of the trigger condition.
	Name pulumi.StringInput `pulumi:"name"`
	// The metric type. Associated with monitoring indicators.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray{ GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricInput

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric]{
		OutputState: o.OutputState,
	}
}

// The current value.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) CurrentValue() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric) int {
		return v.CurrentValue
	}).(pulumi.IntOutput)
}

// The name of the trigger condition.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// The metric type. Associated with monitoring indicators.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric) string {
		return v.Type
	}).(pulumi.StringOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetric)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric struct {
	// The name of the trigger condition.
	Name string `pulumi:"name"`
	// The percentage value of the monitoring indicator elasticity that triggers the shrinkage condition next time.
	NextScaleInAverageUtilization int `pulumi:"nextScaleInAverageUtilization"`
	// The percentage value of the monitoring indicator elasticity that triggers the expansion condition next time.
	NextScaleOutAverageUtilization int `pulumi:"nextScaleOutAverageUtilization"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs struct {
	// The name of the trigger condition.
	Name pulumi.StringInput `pulumi:"name"`
	// The percentage value of the monitoring indicator elasticity that triggers the shrinkage condition next time.
	NextScaleInAverageUtilization pulumi.IntInput `pulumi:"nextScaleInAverageUtilization"`
	// The percentage value of the monitoring indicator elasticity that triggers the expansion condition next time.
	NextScaleOutAverageUtilization pulumi.IntInput `pulumi:"nextScaleOutAverageUtilization"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray and GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray{ GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray []GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricInput

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric]{
		OutputState: o.OutputState,
	}
}

// The name of the trigger condition.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// The percentage value of the monitoring indicator elasticity that triggers the shrinkage condition next time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) NextScaleInAverageUtilization() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric) int {
		return v.NextScaleInAverageUtilization
	}).(pulumi.IntOutput)
}

// The percentage value of the monitoring indicator elasticity that triggers the expansion condition next time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput) NextScaleOutAverageUtilization() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric) int {
		return v.NextScaleOutAverageUtilization
	}).(pulumi.IntOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetric)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule struct {
	// Whether shrinkage is prohibited. The values are described as follows:
	Disabled bool `pulumi:"disabled"`
	// Expansion cooling time.
	StabilizationWindowSeconds int `pulumi:"stabilizationWindowSeconds"`
	// Flexible expansion step. The maximum number of instances per unit time.
	Step int `pulumi:"step"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs and GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs struct {
	// Whether shrinkage is prohibited. The values are described as follows:
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Expansion cooling time.
	StabilizationWindowSeconds pulumi.IntInput `pulumi:"stabilizationWindowSeconds"`
	// Flexible expansion step. The maximum number of instances per unit time.
	Step pulumi.IntInput `pulumi:"step"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray and GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray{ GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray []GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleInput

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule]{
		OutputState: o.OutputState,
	}
}

// Whether shrinkage is prohibited. The values are described as follows:
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Expansion cooling time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) StabilizationWindowSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule) int {
		return v.StabilizationWindowSeconds
	}).(pulumi.IntOutput)
}

// Flexible expansion step. The maximum number of instances per unit time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput) Step() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule) int { return v.Step }).(pulumi.IntOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRule)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule struct {
	// Whether shrinkage is prohibited. The values are described as follows:
	Disabled bool `pulumi:"disabled"`
	// Expansion cooling time.
	StabilizationWindowSeconds int `pulumi:"stabilizationWindowSeconds"`
	// Flexible expansion step. The maximum number of instances per unit time.
	Step int `pulumi:"step"`
}

// GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs and GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs{...}
type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs struct {
	// Whether shrinkage is prohibited. The values are described as follows:
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Expansion cooling time.
	StabilizationWindowSeconds pulumi.IntInput `pulumi:"stabilizationWindowSeconds"`
	// Flexible expansion step. The maximum number of instances per unit time.
	Step pulumi.IntInput `pulumi:"step"`
}

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray and GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray{ GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray []GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleInput

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule]{
		OutputState: o.OutputState,
	}
}

// Whether shrinkage is prohibited. The values are described as follows:
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Expansion cooling time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) StabilizationWindowSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule) int {
		return v.StabilizationWindowSeconds
	}).(pulumi.IntOutput)
}

// Flexible expansion step. The maximum number of instances per unit time.
func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput) Step() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule) int { return v.Step }).(pulumi.IntOutput)
}

type GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput() GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRule)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput)
}

type GetApplicationScalingRulesRuleScalingRuleTimer struct {
	// The short-term start date of the timed elastic scaling strategy.
	BeginDate string `pulumi:"beginDate"`
	// The short-term end date of the timed elastic scaling strategy.
	EndDate string `pulumi:"endDate"`
	// The period in which a timed elastic scaling strategy is executed.
	Period string `pulumi:"period"`
	// Trigger point in time within a single day.
	Schedules []GetApplicationScalingRulesRuleScalingRuleTimerSchedule `pulumi:"schedules"`
}

// GetApplicationScalingRulesRuleScalingRuleTimerInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleTimerArgs and GetApplicationScalingRulesRuleScalingRuleTimerOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleTimerInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleTimerArgs{...}
type GetApplicationScalingRulesRuleScalingRuleTimerInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleTimerOutput() GetApplicationScalingRulesRuleScalingRuleTimerOutput
	ToGetApplicationScalingRulesRuleScalingRuleTimerOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleTimerOutput
}

type GetApplicationScalingRulesRuleScalingRuleTimerArgs struct {
	// The short-term start date of the timed elastic scaling strategy.
	BeginDate pulumi.StringInput `pulumi:"beginDate"`
	// The short-term end date of the timed elastic scaling strategy.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The period in which a timed elastic scaling strategy is executed.
	Period pulumi.StringInput `pulumi:"period"`
	// Trigger point in time within a single day.
	Schedules GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayInput `pulumi:"schedules"`
}

func (GetApplicationScalingRulesRuleScalingRuleTimerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimer)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArgs) ToGetApplicationScalingRulesRuleScalingRuleTimerOutput() GetApplicationScalingRulesRuleScalingRuleTimerOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleTimerOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArgs) ToGetApplicationScalingRulesRuleScalingRuleTimerOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleTimerOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimer] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimer]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleTimerOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleTimerArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleTimerArray and GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleTimerArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleTimerArray{ GetApplicationScalingRulesRuleScalingRuleTimerArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleTimerArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleTimerArray []GetApplicationScalingRulesRuleScalingRuleTimerInput

func (GetApplicationScalingRulesRuleScalingRuleTimerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleTimer)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArray) ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArray) ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimer] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimer]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleTimerOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleTimerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimer)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerOutput() GetApplicationScalingRulesRuleScalingRuleTimerOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimer] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimer]{
		OutputState: o.OutputState,
	}
}

// The short-term start date of the timed elastic scaling strategy.
func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) BeginDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimer) string { return v.BeginDate }).(pulumi.StringOutput)
}

// The short-term end date of the timed elastic scaling strategy.
func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimer) string { return v.EndDate }).(pulumi.StringOutput)
}

// The period in which a timed elastic scaling strategy is executed.
func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) Period() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimer) string { return v.Period }).(pulumi.StringOutput)
}

// Trigger point in time within a single day.
func (o GetApplicationScalingRulesRuleScalingRuleTimerOutput) Schedules() GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimer) []GetApplicationScalingRulesRuleScalingRuleTimerSchedule {
		return v.Schedules
	}).(GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput)
}

type GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleTimer)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimer] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimer]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleTimerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleTimer {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleTimer)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleTimerOutput)
}

type GetApplicationScalingRulesRuleScalingRuleTimerSchedule struct {
	// Time point. Format: `hours:minutes`.
	AtTime string `pulumi:"atTime"`
	// The maximum number of instances.
	MaxReplicas int `pulumi:"maxReplicas"`
	// The minimum number of instances.
	MinReplicas int `pulumi:"minReplicas"`
	// The number of target instances.
	TargetReplicas int `pulumi:"targetReplicas"`
}

// GetApplicationScalingRulesRuleScalingRuleTimerScheduleInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs and GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleTimerScheduleInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs{...}
type GetApplicationScalingRulesRuleScalingRuleTimerScheduleInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput
	ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput
}

type GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs struct {
	// Time point. Format: `hours:minutes`.
	AtTime pulumi.StringInput `pulumi:"atTime"`
	// The maximum number of instances.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// The minimum number of instances.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
	// The number of target instances.
	TargetReplicas pulumi.IntInput `pulumi:"targetReplicas"`
}

func (GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimerSchedule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimerSchedule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayInput is an input type that accepts GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray and GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput values.
// You can construct a concrete instance of `GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayInput` via:
//
//	GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray{ GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs{...} }
type GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayInput interface {
	pulumi.Input

	ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput
	ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutputWithContext(context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput
}

type GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray []GetApplicationScalingRulesRuleScalingRuleTimerScheduleInput

func (GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput {
	return i.ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutputWithContext(context.Background())
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput)
}

func (i GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule]{
		OutputState: i.ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimerSchedule] {
	return pulumix.Output[GetApplicationScalingRulesRuleScalingRuleTimerSchedule]{
		OutputState: o.OutputState,
	}
}

// Time point. Format: `hours:minutes`.
func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) AtTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimerSchedule) string { return v.AtTime }).(pulumi.StringOutput)
}

// The maximum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimerSchedule) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// The minimum number of instances.
func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimerSchedule) int { return v.MinReplicas }).(pulumi.IntOutput)
}

// The number of target instances.
func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput) TargetReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationScalingRulesRuleScalingRuleTimerSchedule) int { return v.TargetReplicas }).(pulumi.IntOutput)
}

type GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule)(nil)).Elem()
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput() GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput) ToGetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutputWithContext(ctx context.Context) GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput {
	return o
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule] {
	return pulumix.Output[[]GetApplicationScalingRulesRuleScalingRuleTimerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput) Index(i pulumi.IntInput) GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationScalingRulesRuleScalingRuleTimerSchedule {
		return vs[0].([]GetApplicationScalingRulesRuleScalingRuleTimerSchedule)[vs[1].(int)]
	}).(GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput)
}

type GetApplicationsApplication struct {
	// The ARN of the RAM role required when pulling images across accounts.
	AcrAssumeRoleArn string `pulumi:"acrAssumeRoleArn"`
	// The ID of the ACR EE instance.
	AcrInstanceId string `pulumi:"acrInstanceId"`
	// Application description information. No more than 1024 characters.
	AppDescription string `pulumi:"appDescription"`
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName string `pulumi:"appName"`
	// The first ID of the resource.
	ApplicationId string `pulumi:"applicationId"`
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command string `pulumi:"command"`
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs string `pulumi:"commandArgs"`
	// ConfigMap mount description.
	ConfigMapMountDesc string `pulumi:"configMapMountDesc"`
	// The CPU required for each instance, in millicores, cannot be 0.
	Cpu int `pulumi:"cpu"`
	// Indicates That the Application of the Creation Time.
	CreateTime string `pulumi:"createTime"`
	// Custom host mapping in the container. For example: [{"hostName":"samplehost","ip":"127.0.0.1"}].
	CustomHostAlias string `pulumi:"customHostAlias"`
	// The operating environment used by the Pandora application.
	EdasContainerVersion string `pulumi:"edasContainerVersion"`
	// The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
	Envs string `pulumi:"envs"`
	// The ID of the Application.
	Id string `pulumi:"id"`
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl string `pulumi:"imageUrl"`
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs string `pulumi:"jarStartArgs"`
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions string `pulumi:"jarStartOptions"`
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk string `pulumi:"jdk"`
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness string `pulumi:"liveness"`
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU.
	Memory int `pulumi:"memory"`
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances int `pulumi:"minReadyInstances"`
	// Mount description information.
	MountDescs []GetApplicationsApplicationMountDesc `pulumi:"mountDescs"`
	// Mount point of NAS in application VPC.
	MountHost string `pulumi:"mountHost"`
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId string `pulumi:"namespaceId"`
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId string `pulumi:"nasId"`
	// OSS AccessKey ID.
	OssAkId string `pulumi:"ossAkId"`
	// OSS  AccessKey Secret.
	OssAkSecret string `pulumi:"ossAkSecret"`
	// OSS mount description information.
	OssMountDescs string `pulumi:"ossMountDescs"`
	// The OSS mount detail.
	OssMountDetails []GetApplicationsApplicationOssMountDetail `pulumi:"ossMountDetails"`
	// Application package type. Support FatJar, War and Image.
	PackageType string `pulumi:"packageType"`
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl string `pulumi:"packageUrl"`
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion string `pulumi:"packageVersion"`
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation string `pulumi:"phpArmsConfigLocation"`
	// PHP configuration file content.
	PhpConfig string `pulumi:"phpConfig"`
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation string `pulumi:"phpConfigLocation"`
	// Execute the script after startup, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
	PostStart string `pulumi:"postStart"`
	// Execute the script before stopping, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
	PreStop string `pulumi:"preStop"`
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds ":2}.
	Readiness string `pulumi:"readiness"`
	RegionId  string `pulumi:"regionId"`
	// Initial number of instances.
	Replicas       int    `pulumi:"replicas"`
	RepoName       string `pulumi:"repoName"`
	RepoNamespace  string `pulumi:"repoNamespace"`
	RepoOriginType string `pulumi:"repoOriginType"`
	// Security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// SLS  configuration.
	SlsConfigs string `pulumi:"slsConfigs"`
	// The status of the resource.
	Status string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60.
	TerminationGracePeriodSeconds int `pulumi:"terminationGracePeriodSeconds"`
	// Time zone, the default value is Asia/Shanghai.
	Timezone string `pulumi:"timezone"`
	// Tomcat file configuration, set to "" or "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL.
	TomcatConfig string `pulumi:"tomcatConfig"`
	// The VPC corresponding to the SAE namespace. In SAE, a namespace can only correspond to one VPC and cannot be modified. Creating a SAE application in the namespace for the first time will form a binding relationship. Multiple namespaces can correspond to a VPC. If you leave it blank, it will default to the VPC ID bound to the namespace.
	VpcId string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId string `pulumi:"vswitchId"`
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions string `pulumi:"warStartOptions"`
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer string `pulumi:"webContainer"`
}

// GetApplicationsApplicationInput is an input type that accepts GetApplicationsApplicationArgs and GetApplicationsApplicationOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationInput` via:
//
//	GetApplicationsApplicationArgs{...}
type GetApplicationsApplicationInput interface {
	pulumi.Input

	ToGetApplicationsApplicationOutput() GetApplicationsApplicationOutput
	ToGetApplicationsApplicationOutputWithContext(context.Context) GetApplicationsApplicationOutput
}

type GetApplicationsApplicationArgs struct {
	// The ARN of the RAM role required when pulling images across accounts.
	AcrAssumeRoleArn pulumi.StringInput `pulumi:"acrAssumeRoleArn"`
	// The ID of the ACR EE instance.
	AcrInstanceId pulumi.StringInput `pulumi:"acrInstanceId"`
	// Application description information. No more than 1024 characters.
	AppDescription pulumi.StringInput `pulumi:"appDescription"`
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName pulumi.StringInput `pulumi:"appName"`
	// The first ID of the resource.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command pulumi.StringInput `pulumi:"command"`
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs pulumi.StringInput `pulumi:"commandArgs"`
	// ConfigMap mount description.
	ConfigMapMountDesc pulumi.StringInput `pulumi:"configMapMountDesc"`
	// The CPU required for each instance, in millicores, cannot be 0.
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// Indicates That the Application of the Creation Time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Custom host mapping in the container. For example: [{"hostName":"samplehost","ip":"127.0.0.1"}].
	CustomHostAlias pulumi.StringInput `pulumi:"customHostAlias"`
	// The operating environment used by the Pandora application.
	EdasContainerVersion pulumi.StringInput `pulumi:"edasContainerVersion"`
	// The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
	Envs pulumi.StringInput `pulumi:"envs"`
	// The ID of the Application.
	Id pulumi.StringInput `pulumi:"id"`
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl pulumi.StringInput `pulumi:"imageUrl"`
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs pulumi.StringInput `pulumi:"jarStartArgs"`
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions pulumi.StringInput `pulumi:"jarStartOptions"`
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk pulumi.StringInput `pulumi:"jdk"`
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness pulumi.StringInput `pulumi:"liveness"`
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances pulumi.IntInput `pulumi:"minReadyInstances"`
	// Mount description information.
	MountDescs GetApplicationsApplicationMountDescArrayInput `pulumi:"mountDescs"`
	// Mount point of NAS in application VPC.
	MountHost pulumi.StringInput `pulumi:"mountHost"`
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringInput `pulumi:"nasId"`
	// OSS AccessKey ID.
	OssAkId pulumi.StringInput `pulumi:"ossAkId"`
	// OSS  AccessKey Secret.
	OssAkSecret pulumi.StringInput `pulumi:"ossAkSecret"`
	// OSS mount description information.
	OssMountDescs pulumi.StringInput `pulumi:"ossMountDescs"`
	// The OSS mount detail.
	OssMountDetails GetApplicationsApplicationOssMountDetailArrayInput `pulumi:"ossMountDetails"`
	// Application package type. Support FatJar, War and Image.
	PackageType pulumi.StringInput `pulumi:"packageType"`
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl pulumi.StringInput `pulumi:"packageUrl"`
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation pulumi.StringInput `pulumi:"phpArmsConfigLocation"`
	// PHP configuration file content.
	PhpConfig pulumi.StringInput `pulumi:"phpConfig"`
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation pulumi.StringInput `pulumi:"phpConfigLocation"`
	// Execute the script after startup, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
	PostStart pulumi.StringInput `pulumi:"postStart"`
	// Execute the script before stopping, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
	PreStop pulumi.StringInput `pulumi:"preStop"`
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds ":2}.
	Readiness pulumi.StringInput `pulumi:"readiness"`
	RegionId  pulumi.StringInput `pulumi:"regionId"`
	// Initial number of instances.
	Replicas       pulumi.IntInput    `pulumi:"replicas"`
	RepoName       pulumi.StringInput `pulumi:"repoName"`
	RepoNamespace  pulumi.StringInput `pulumi:"repoNamespace"`
	RepoOriginType pulumi.StringInput `pulumi:"repoOriginType"`
	// Security group ID.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// SLS  configuration.
	SlsConfigs pulumi.StringInput `pulumi:"slsConfigs"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60.
	TerminationGracePeriodSeconds pulumi.IntInput `pulumi:"terminationGracePeriodSeconds"`
	// Time zone, the default value is Asia/Shanghai.
	Timezone pulumi.StringInput `pulumi:"timezone"`
	// Tomcat file configuration, set to "" or "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL.
	TomcatConfig pulumi.StringInput `pulumi:"tomcatConfig"`
	// The VPC corresponding to the SAE namespace. In SAE, a namespace can only correspond to one VPC and cannot be modified. Creating a SAE application in the namespace for the first time will form a binding relationship. Multiple namespaces can correspond to a VPC. If you leave it blank, it will default to the VPC ID bound to the namespace.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions pulumi.StringInput `pulumi:"warStartOptions"`
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer pulumi.StringInput `pulumi:"webContainer"`
}

func (GetApplicationsApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplication)(nil)).Elem()
}

func (i GetApplicationsApplicationArgs) ToGetApplicationsApplicationOutput() GetApplicationsApplicationOutput {
	return i.ToGetApplicationsApplicationOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationArgs) ToGetApplicationsApplicationOutputWithContext(ctx context.Context) GetApplicationsApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationOutput)
}

func (i GetApplicationsApplicationArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplication] {
	return pulumix.Output[GetApplicationsApplication]{
		OutputState: i.ToGetApplicationsApplicationOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationsApplicationArrayInput is an input type that accepts GetApplicationsApplicationArray and GetApplicationsApplicationArrayOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationArrayInput` via:
//
//	GetApplicationsApplicationArray{ GetApplicationsApplicationArgs{...} }
type GetApplicationsApplicationArrayInput interface {
	pulumi.Input

	ToGetApplicationsApplicationArrayOutput() GetApplicationsApplicationArrayOutput
	ToGetApplicationsApplicationArrayOutputWithContext(context.Context) GetApplicationsApplicationArrayOutput
}

type GetApplicationsApplicationArray []GetApplicationsApplicationInput

func (GetApplicationsApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplication)(nil)).Elem()
}

func (i GetApplicationsApplicationArray) ToGetApplicationsApplicationArrayOutput() GetApplicationsApplicationArrayOutput {
	return i.ToGetApplicationsApplicationArrayOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationArray) ToGetApplicationsApplicationArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationArrayOutput)
}

func (i GetApplicationsApplicationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplication] {
	return pulumix.Output[[]GetApplicationsApplication]{
		OutputState: i.ToGetApplicationsApplicationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationsApplicationOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplication)(nil)).Elem()
}

func (o GetApplicationsApplicationOutput) ToGetApplicationsApplicationOutput() GetApplicationsApplicationOutput {
	return o
}

func (o GetApplicationsApplicationOutput) ToGetApplicationsApplicationOutputWithContext(ctx context.Context) GetApplicationsApplicationOutput {
	return o
}

func (o GetApplicationsApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplication] {
	return pulumix.Output[GetApplicationsApplication]{
		OutputState: o.OutputState,
	}
}

// The ARN of the RAM role required when pulling images across accounts.
func (o GetApplicationsApplicationOutput) AcrAssumeRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.AcrAssumeRoleArn }).(pulumi.StringOutput)
}

// The ID of the ACR EE instance.
func (o GetApplicationsApplicationOutput) AcrInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.AcrInstanceId }).(pulumi.StringOutput)
}

// Application description information. No more than 1024 characters.
func (o GetApplicationsApplicationOutput) AppDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.AppDescription }).(pulumi.StringOutput)
}

// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
func (o GetApplicationsApplicationOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.AppName }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetApplicationsApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o GetApplicationsApplicationOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Command }).(pulumi.StringOutput)
}

// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
func (o GetApplicationsApplicationOutput) CommandArgs() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.CommandArgs }).(pulumi.StringOutput)
}

// ConfigMap mount description.
func (o GetApplicationsApplicationOutput) ConfigMapMountDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.ConfigMapMountDesc }).(pulumi.StringOutput)
}

// The CPU required for each instance, in millicores, cannot be 0.
func (o GetApplicationsApplicationOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationsApplication) int { return v.Cpu }).(pulumi.IntOutput)
}

// Indicates That the Application of the Creation Time.
func (o GetApplicationsApplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Custom host mapping in the container. For example: [{"hostName":"samplehost","ip":"127.0.0.1"}].
func (o GetApplicationsApplicationOutput) CustomHostAlias() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.CustomHostAlias }).(pulumi.StringOutput)
}

// The operating environment used by the Pandora application.
func (o GetApplicationsApplicationOutput) EdasContainerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.EdasContainerVersion }).(pulumi.StringOutput)
}

// The virtual switch where the elastic network card of the application instance is located. The switch must be located in the aforementioned VPC. The switch also has a binding relationship with the SAE namespace. If it is left blank, the default is the vSwitch ID bound to the namespace.
func (o GetApplicationsApplicationOutput) Envs() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Envs }).(pulumi.StringOutput)
}

// The ID of the Application.
func (o GetApplicationsApplicationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Id }).(pulumi.StringOutput)
}

// Mirror address. Only Image type applications can configure the mirror address.
func (o GetApplicationsApplicationOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.ImageUrl }).(pulumi.StringOutput)
}

// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
func (o GetApplicationsApplicationOutput) JarStartArgs() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.JarStartArgs }).(pulumi.StringOutput)
}

// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
func (o GetApplicationsApplicationOutput) JarStartOptions() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.JarStartOptions }).(pulumi.StringOutput)
}

// The JDK version that the deployment package depends on. Image type applications are not supported.
func (o GetApplicationsApplicationOutput) Jdk() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Jdk }).(pulumi.StringOutput)
}

// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
func (o GetApplicationsApplicationOutput) Liveness() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Liveness }).(pulumi.StringOutput)
}

// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU.
func (o GetApplicationsApplicationOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationsApplication) int { return v.Memory }).(pulumi.IntOutput)
}

// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
func (o GetApplicationsApplicationOutput) MinReadyInstances() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationsApplication) int { return v.MinReadyInstances }).(pulumi.IntOutput)
}

// Mount description information.
func (o GetApplicationsApplicationOutput) MountDescs() GetApplicationsApplicationMountDescArrayOutput {
	return o.ApplyT(func(v GetApplicationsApplication) []GetApplicationsApplicationMountDesc { return v.MountDescs }).(GetApplicationsApplicationMountDescArrayOutput)
}

// Mount point of NAS in application VPC.
func (o GetApplicationsApplicationOutput) MountHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.MountHost }).(pulumi.StringOutput)
}

// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
func (o GetApplicationsApplicationOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
func (o GetApplicationsApplicationOutput) NasId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.NasId }).(pulumi.StringOutput)
}

// OSS AccessKey ID.
func (o GetApplicationsApplicationOutput) OssAkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.OssAkId }).(pulumi.StringOutput)
}

// OSS  AccessKey Secret.
func (o GetApplicationsApplicationOutput) OssAkSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.OssAkSecret }).(pulumi.StringOutput)
}

// OSS mount description information.
func (o GetApplicationsApplicationOutput) OssMountDescs() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.OssMountDescs }).(pulumi.StringOutput)
}

// The OSS mount detail.
func (o GetApplicationsApplicationOutput) OssMountDetails() GetApplicationsApplicationOssMountDetailArrayOutput {
	return o.ApplyT(func(v GetApplicationsApplication) []GetApplicationsApplicationOssMountDetail {
		return v.OssMountDetails
	}).(GetApplicationsApplicationOssMountDetailArrayOutput)
}

// Application package type. Support FatJar, War and Image.
func (o GetApplicationsApplicationOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PackageType }).(pulumi.StringOutput)
}

// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
func (o GetApplicationsApplicationOutput) PackageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PackageUrl }).(pulumi.StringOutput)
}

// The version number of the deployment package. Required when the Package Type is War and FatJar.
func (o GetApplicationsApplicationOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
func (o GetApplicationsApplicationOutput) PhpArmsConfigLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PhpArmsConfigLocation }).(pulumi.StringOutput)
}

// PHP configuration file content.
func (o GetApplicationsApplicationOutput) PhpConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PhpConfig }).(pulumi.StringOutput)
}

// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
func (o GetApplicationsApplicationOutput) PhpConfigLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PhpConfigLocation }).(pulumi.StringOutput)
}

// Execute the script after startup, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
func (o GetApplicationsApplicationOutput) PostStart() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PostStart }).(pulumi.StringOutput)
}

// Execute the script before stopping, the format is like: {"exec":{"command":["cat","/etc/group"]}}.
func (o GetApplicationsApplicationOutput) PreStop() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.PreStop }).(pulumi.StringOutput)
}

// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds ":2}.
func (o GetApplicationsApplicationOutput) Readiness() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Readiness }).(pulumi.StringOutput)
}

func (o GetApplicationsApplicationOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.RegionId }).(pulumi.StringOutput)
}

// Initial number of instances.
func (o GetApplicationsApplicationOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationsApplication) int { return v.Replicas }).(pulumi.IntOutput)
}

func (o GetApplicationsApplicationOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.RepoName }).(pulumi.StringOutput)
}

func (o GetApplicationsApplicationOutput) RepoNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.RepoNamespace }).(pulumi.StringOutput)
}

func (o GetApplicationsApplicationOutput) RepoOriginType() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.RepoOriginType }).(pulumi.StringOutput)
}

// Security group ID.
func (o GetApplicationsApplicationOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// SLS  configuration.
func (o GetApplicationsApplicationOutput) SlsConfigs() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.SlsConfigs }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetApplicationsApplicationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o GetApplicationsApplicationOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetApplicationsApplication) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60.
func (o GetApplicationsApplicationOutput) TerminationGracePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetApplicationsApplication) int { return v.TerminationGracePeriodSeconds }).(pulumi.IntOutput)
}

// Time zone, the default value is Asia/Shanghai.
func (o GetApplicationsApplicationOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.Timezone }).(pulumi.StringOutput)
}

// Tomcat file configuration, set to "" or "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL.
func (o GetApplicationsApplicationOutput) TomcatConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.TomcatConfig }).(pulumi.StringOutput)
}

// The VPC corresponding to the SAE namespace. In SAE, a namespace can only correspond to one VPC and cannot be modified. Creating a SAE application in the namespace for the first time will form a binding relationship. Multiple namespaces can correspond to a VPC. If you leave it blank, it will default to the VPC ID bound to the namespace.
func (o GetApplicationsApplicationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vswitch id.
func (o GetApplicationsApplicationOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.VswitchId }).(pulumi.StringOutput)
}

// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
func (o GetApplicationsApplicationOutput) WarStartOptions() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.WarStartOptions }).(pulumi.StringOutput)
}

// The version of tomcat that the deployment package depends on. Image type applications are not supported.
func (o GetApplicationsApplicationOutput) WebContainer() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplication) string { return v.WebContainer }).(pulumi.StringOutput)
}

type GetApplicationsApplicationArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplication)(nil)).Elem()
}

func (o GetApplicationsApplicationArrayOutput) ToGetApplicationsApplicationArrayOutput() GetApplicationsApplicationArrayOutput {
	return o
}

func (o GetApplicationsApplicationArrayOutput) ToGetApplicationsApplicationArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationArrayOutput {
	return o
}

func (o GetApplicationsApplicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplication] {
	return pulumix.Output[[]GetApplicationsApplication]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationsApplicationArrayOutput) Index(i pulumi.IntInput) GetApplicationsApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationsApplication {
		return vs[0].([]GetApplicationsApplication)[vs[1].(int)]
	}).(GetApplicationsApplicationOutput)
}

type GetApplicationsApplicationMountDesc struct {
	// The Container mount path.
	MountPath string `pulumi:"mountPath"`
	// NAS relative file directory.
	NasPath string `pulumi:"nasPath"`
}

// GetApplicationsApplicationMountDescInput is an input type that accepts GetApplicationsApplicationMountDescArgs and GetApplicationsApplicationMountDescOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationMountDescInput` via:
//
//	GetApplicationsApplicationMountDescArgs{...}
type GetApplicationsApplicationMountDescInput interface {
	pulumi.Input

	ToGetApplicationsApplicationMountDescOutput() GetApplicationsApplicationMountDescOutput
	ToGetApplicationsApplicationMountDescOutputWithContext(context.Context) GetApplicationsApplicationMountDescOutput
}

type GetApplicationsApplicationMountDescArgs struct {
	// The Container mount path.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// NAS relative file directory.
	NasPath pulumi.StringInput `pulumi:"nasPath"`
}

func (GetApplicationsApplicationMountDescArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplicationMountDesc)(nil)).Elem()
}

func (i GetApplicationsApplicationMountDescArgs) ToGetApplicationsApplicationMountDescOutput() GetApplicationsApplicationMountDescOutput {
	return i.ToGetApplicationsApplicationMountDescOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationMountDescArgs) ToGetApplicationsApplicationMountDescOutputWithContext(ctx context.Context) GetApplicationsApplicationMountDescOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationMountDescOutput)
}

func (i GetApplicationsApplicationMountDescArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplicationMountDesc] {
	return pulumix.Output[GetApplicationsApplicationMountDesc]{
		OutputState: i.ToGetApplicationsApplicationMountDescOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationsApplicationMountDescArrayInput is an input type that accepts GetApplicationsApplicationMountDescArray and GetApplicationsApplicationMountDescArrayOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationMountDescArrayInput` via:
//
//	GetApplicationsApplicationMountDescArray{ GetApplicationsApplicationMountDescArgs{...} }
type GetApplicationsApplicationMountDescArrayInput interface {
	pulumi.Input

	ToGetApplicationsApplicationMountDescArrayOutput() GetApplicationsApplicationMountDescArrayOutput
	ToGetApplicationsApplicationMountDescArrayOutputWithContext(context.Context) GetApplicationsApplicationMountDescArrayOutput
}

type GetApplicationsApplicationMountDescArray []GetApplicationsApplicationMountDescInput

func (GetApplicationsApplicationMountDescArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplicationMountDesc)(nil)).Elem()
}

func (i GetApplicationsApplicationMountDescArray) ToGetApplicationsApplicationMountDescArrayOutput() GetApplicationsApplicationMountDescArrayOutput {
	return i.ToGetApplicationsApplicationMountDescArrayOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationMountDescArray) ToGetApplicationsApplicationMountDescArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationMountDescArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationMountDescArrayOutput)
}

func (i GetApplicationsApplicationMountDescArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplicationMountDesc] {
	return pulumix.Output[[]GetApplicationsApplicationMountDesc]{
		OutputState: i.ToGetApplicationsApplicationMountDescArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationsApplicationMountDescOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationMountDescOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplicationMountDesc)(nil)).Elem()
}

func (o GetApplicationsApplicationMountDescOutput) ToGetApplicationsApplicationMountDescOutput() GetApplicationsApplicationMountDescOutput {
	return o
}

func (o GetApplicationsApplicationMountDescOutput) ToGetApplicationsApplicationMountDescOutputWithContext(ctx context.Context) GetApplicationsApplicationMountDescOutput {
	return o
}

func (o GetApplicationsApplicationMountDescOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplicationMountDesc] {
	return pulumix.Output[GetApplicationsApplicationMountDesc]{
		OutputState: o.OutputState,
	}
}

// The Container mount path.
func (o GetApplicationsApplicationMountDescOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplicationMountDesc) string { return v.MountPath }).(pulumi.StringOutput)
}

// NAS relative file directory.
func (o GetApplicationsApplicationMountDescOutput) NasPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplicationMountDesc) string { return v.NasPath }).(pulumi.StringOutput)
}

type GetApplicationsApplicationMountDescArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationMountDescArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplicationMountDesc)(nil)).Elem()
}

func (o GetApplicationsApplicationMountDescArrayOutput) ToGetApplicationsApplicationMountDescArrayOutput() GetApplicationsApplicationMountDescArrayOutput {
	return o
}

func (o GetApplicationsApplicationMountDescArrayOutput) ToGetApplicationsApplicationMountDescArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationMountDescArrayOutput {
	return o
}

func (o GetApplicationsApplicationMountDescArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplicationMountDesc] {
	return pulumix.Output[[]GetApplicationsApplicationMountDesc]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationsApplicationMountDescArrayOutput) Index(i pulumi.IntInput) GetApplicationsApplicationMountDescOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationsApplicationMountDesc {
		return vs[0].([]GetApplicationsApplicationMountDesc)[vs[1].(int)]
	}).(GetApplicationsApplicationMountDescOutput)
}

type GetApplicationsApplicationOssMountDetail struct {
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The path of the bucket.
	BucketPath string `pulumi:"bucketPath"`
	// The Container mount path.
	MountPath string `pulumi:"mountPath"`
	// Whether the container path has readable permission to mount directory resources.
	ReadOnly bool `pulumi:"readOnly"`
}

// GetApplicationsApplicationOssMountDetailInput is an input type that accepts GetApplicationsApplicationOssMountDetailArgs and GetApplicationsApplicationOssMountDetailOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationOssMountDetailInput` via:
//
//	GetApplicationsApplicationOssMountDetailArgs{...}
type GetApplicationsApplicationOssMountDetailInput interface {
	pulumi.Input

	ToGetApplicationsApplicationOssMountDetailOutput() GetApplicationsApplicationOssMountDetailOutput
	ToGetApplicationsApplicationOssMountDetailOutputWithContext(context.Context) GetApplicationsApplicationOssMountDetailOutput
}

type GetApplicationsApplicationOssMountDetailArgs struct {
	// The name of the bucket.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The path of the bucket.
	BucketPath pulumi.StringInput `pulumi:"bucketPath"`
	// The Container mount path.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// Whether the container path has readable permission to mount directory resources.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`
}

func (GetApplicationsApplicationOssMountDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplicationOssMountDetail)(nil)).Elem()
}

func (i GetApplicationsApplicationOssMountDetailArgs) ToGetApplicationsApplicationOssMountDetailOutput() GetApplicationsApplicationOssMountDetailOutput {
	return i.ToGetApplicationsApplicationOssMountDetailOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationOssMountDetailArgs) ToGetApplicationsApplicationOssMountDetailOutputWithContext(ctx context.Context) GetApplicationsApplicationOssMountDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationOssMountDetailOutput)
}

func (i GetApplicationsApplicationOssMountDetailArgs) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplicationOssMountDetail] {
	return pulumix.Output[GetApplicationsApplicationOssMountDetail]{
		OutputState: i.ToGetApplicationsApplicationOssMountDetailOutputWithContext(ctx).OutputState,
	}
}

// GetApplicationsApplicationOssMountDetailArrayInput is an input type that accepts GetApplicationsApplicationOssMountDetailArray and GetApplicationsApplicationOssMountDetailArrayOutput values.
// You can construct a concrete instance of `GetApplicationsApplicationOssMountDetailArrayInput` via:
//
//	GetApplicationsApplicationOssMountDetailArray{ GetApplicationsApplicationOssMountDetailArgs{...} }
type GetApplicationsApplicationOssMountDetailArrayInput interface {
	pulumi.Input

	ToGetApplicationsApplicationOssMountDetailArrayOutput() GetApplicationsApplicationOssMountDetailArrayOutput
	ToGetApplicationsApplicationOssMountDetailArrayOutputWithContext(context.Context) GetApplicationsApplicationOssMountDetailArrayOutput
}

type GetApplicationsApplicationOssMountDetailArray []GetApplicationsApplicationOssMountDetailInput

func (GetApplicationsApplicationOssMountDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplicationOssMountDetail)(nil)).Elem()
}

func (i GetApplicationsApplicationOssMountDetailArray) ToGetApplicationsApplicationOssMountDetailArrayOutput() GetApplicationsApplicationOssMountDetailArrayOutput {
	return i.ToGetApplicationsApplicationOssMountDetailArrayOutputWithContext(context.Background())
}

func (i GetApplicationsApplicationOssMountDetailArray) ToGetApplicationsApplicationOssMountDetailArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationOssMountDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationsApplicationOssMountDetailArrayOutput)
}

func (i GetApplicationsApplicationOssMountDetailArray) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplicationOssMountDetail] {
	return pulumix.Output[[]GetApplicationsApplicationOssMountDetail]{
		OutputState: i.ToGetApplicationsApplicationOssMountDetailArrayOutputWithContext(ctx).OutputState,
	}
}

type GetApplicationsApplicationOssMountDetailOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationOssMountDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationsApplicationOssMountDetail)(nil)).Elem()
}

func (o GetApplicationsApplicationOssMountDetailOutput) ToGetApplicationsApplicationOssMountDetailOutput() GetApplicationsApplicationOssMountDetailOutput {
	return o
}

func (o GetApplicationsApplicationOssMountDetailOutput) ToGetApplicationsApplicationOssMountDetailOutputWithContext(ctx context.Context) GetApplicationsApplicationOssMountDetailOutput {
	return o
}

func (o GetApplicationsApplicationOssMountDetailOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationsApplicationOssMountDetail] {
	return pulumix.Output[GetApplicationsApplicationOssMountDetail]{
		OutputState: o.OutputState,
	}
}

// The name of the bucket.
func (o GetApplicationsApplicationOssMountDetailOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplicationOssMountDetail) string { return v.BucketName }).(pulumi.StringOutput)
}

// The path of the bucket.
func (o GetApplicationsApplicationOssMountDetailOutput) BucketPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplicationOssMountDetail) string { return v.BucketPath }).(pulumi.StringOutput)
}

// The Container mount path.
func (o GetApplicationsApplicationOssMountDetailOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationsApplicationOssMountDetail) string { return v.MountPath }).(pulumi.StringOutput)
}

// Whether the container path has readable permission to mount directory resources.
func (o GetApplicationsApplicationOssMountDetailOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationsApplicationOssMountDetail) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

type GetApplicationsApplicationOssMountDetailArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationsApplicationOssMountDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationsApplicationOssMountDetail)(nil)).Elem()
}

func (o GetApplicationsApplicationOssMountDetailArrayOutput) ToGetApplicationsApplicationOssMountDetailArrayOutput() GetApplicationsApplicationOssMountDetailArrayOutput {
	return o
}

func (o GetApplicationsApplicationOssMountDetailArrayOutput) ToGetApplicationsApplicationOssMountDetailArrayOutputWithContext(ctx context.Context) GetApplicationsApplicationOssMountDetailArrayOutput {
	return o
}

func (o GetApplicationsApplicationOssMountDetailArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetApplicationsApplicationOssMountDetail] {
	return pulumix.Output[[]GetApplicationsApplicationOssMountDetail]{
		OutputState: o.OutputState,
	}
}

func (o GetApplicationsApplicationOssMountDetailArrayOutput) Index(i pulumi.IntInput) GetApplicationsApplicationOssMountDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationsApplicationOssMountDetail {
		return vs[0].([]GetApplicationsApplicationOssMountDetail)[vs[1].(int)]
	}).(GetApplicationsApplicationOssMountDetailOutput)
}

type GetConfigMapsMap struct {
	// The first ID of the resource.
	ConfigMapId string `pulumi:"configMapId"`
	// The Creation Time of the ConfigMap.
	CreateTime string `pulumi:"createTime"`
	// ConfigMap instance data. The value's format is a `json` string
	Data string `pulumi:"data"`
	// The Description of Config Map.
	Description string `pulumi:"description"`
	// The ID of the Config Map.
	Id string `pulumi:"id"`
	// ConfigMap instance name.
	Name string `pulumi:"name"`
	// The NamespaceId of Config Maps.
	NamespaceId string `pulumi:"namespaceId"`
}

// GetConfigMapsMapInput is an input type that accepts GetConfigMapsMap and GetConfigMapsMapOutput values.
// You can construct a concrete instance of `GetConfigMapsMapInput` via:
//
//	GetConfigMapsMap{ "key": GetConfigMapsArgs{...} }
type GetConfigMapsMapInput interface {
	pulumi.Input

	ToGetConfigMapsMapOutput() GetConfigMapsMapOutput
	ToGetConfigMapsMapOutputWithContext(context.Context) GetConfigMapsMapOutput
}

type GetConfigMapsMapArgs struct {
	// The first ID of the resource.
	ConfigMapId pulumi.StringInput `pulumi:"configMapId"`
	// The Creation Time of the ConfigMap.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// ConfigMap instance data. The value's format is a `json` string
	Data pulumi.StringInput `pulumi:"data"`
	// The Description of Config Map.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Config Map.
	Id pulumi.StringInput `pulumi:"id"`
	// ConfigMap instance name.
	Name pulumi.StringInput `pulumi:"name"`
	// The NamespaceId of Config Maps.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
}

func (GetConfigMapsMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigMapsMap)(nil)).Elem()
}

func (i GetConfigMapsMapArgs) ToGetConfigMapsMapOutput() GetConfigMapsMapOutput {
	return i.ToGetConfigMapsMapOutputWithContext(context.Background())
}

func (i GetConfigMapsMapArgs) ToGetConfigMapsMapOutputWithContext(ctx context.Context) GetConfigMapsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigMapsMapOutput)
}

func (i GetConfigMapsMapArgs) ToOutput(ctx context.Context) pulumix.Output[GetConfigMapsMap] {
	return pulumix.Output[GetConfigMapsMap]{
		OutputState: i.ToGetConfigMapsMapOutputWithContext(ctx).OutputState,
	}
}

// GetConfigMapsMapArrayInput is an input type that accepts GetConfigMapsMapArray and GetConfigMapsMapArrayOutput values.
// You can construct a concrete instance of `GetConfigMapsMapArrayInput` via:
//
//	GetConfigMapsMapArray{ GetConfigMapsMapArgs{...} }
type GetConfigMapsMapArrayInput interface {
	pulumi.Input

	ToGetConfigMapsMapArrayOutput() GetConfigMapsMapArrayOutput
	ToGetConfigMapsMapArrayOutputWithContext(context.Context) GetConfigMapsMapArrayOutput
}

type GetConfigMapsMapArray []GetConfigMapsMapInput

func (GetConfigMapsMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigMapsMap)(nil)).Elem()
}

func (i GetConfigMapsMapArray) ToGetConfigMapsMapArrayOutput() GetConfigMapsMapArrayOutput {
	return i.ToGetConfigMapsMapArrayOutputWithContext(context.Background())
}

func (i GetConfigMapsMapArray) ToGetConfigMapsMapArrayOutputWithContext(ctx context.Context) GetConfigMapsMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigMapsMapArrayOutput)
}

func (i GetConfigMapsMapArray) ToOutput(ctx context.Context) pulumix.Output[[]GetConfigMapsMap] {
	return pulumix.Output[[]GetConfigMapsMap]{
		OutputState: i.ToGetConfigMapsMapArrayOutputWithContext(ctx).OutputState,
	}
}

type GetConfigMapsMapOutput struct{ *pulumi.OutputState }

func (GetConfigMapsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigMapsMap)(nil)).Elem()
}

func (o GetConfigMapsMapOutput) ToGetConfigMapsMapOutput() GetConfigMapsMapOutput {
	return o
}

func (o GetConfigMapsMapOutput) ToGetConfigMapsMapOutputWithContext(ctx context.Context) GetConfigMapsMapOutput {
	return o
}

func (o GetConfigMapsMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetConfigMapsMap] {
	return pulumix.Output[GetConfigMapsMap]{
		OutputState: o.OutputState,
	}
}

// The first ID of the resource.
func (o GetConfigMapsMapOutput) ConfigMapId() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.ConfigMapId }).(pulumi.StringOutput)
}

// The Creation Time of the ConfigMap.
func (o GetConfigMapsMapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.CreateTime }).(pulumi.StringOutput)
}

// ConfigMap instance data. The value's format is a `json` string
func (o GetConfigMapsMapOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.Data }).(pulumi.StringOutput)
}

// The Description of Config Map.
func (o GetConfigMapsMapOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Config Map.
func (o GetConfigMapsMapOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.Id }).(pulumi.StringOutput)
}

// ConfigMap instance name.
func (o GetConfigMapsMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.Name }).(pulumi.StringOutput)
}

// The NamespaceId of Config Maps.
func (o GetConfigMapsMapOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigMapsMap) string { return v.NamespaceId }).(pulumi.StringOutput)
}

type GetConfigMapsMapArrayOutput struct{ *pulumi.OutputState }

func (GetConfigMapsMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigMapsMap)(nil)).Elem()
}

func (o GetConfigMapsMapArrayOutput) ToGetConfigMapsMapArrayOutput() GetConfigMapsMapArrayOutput {
	return o
}

func (o GetConfigMapsMapArrayOutput) ToGetConfigMapsMapArrayOutputWithContext(ctx context.Context) GetConfigMapsMapArrayOutput {
	return o
}

func (o GetConfigMapsMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetConfigMapsMap] {
	return pulumix.Output[[]GetConfigMapsMap]{
		OutputState: o.OutputState,
	}
}

func (o GetConfigMapsMapArrayOutput) Index(i pulumi.IntInput) GetConfigMapsMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConfigMapsMap {
		return vs[0].([]GetConfigMapsMap)[vs[1].(int)]
	}).(GetConfigMapsMapOutput)
}

type GetGreyTagRoutesRoute struct {
	// The description of GreyTagRoute.
	Description string `pulumi:"description"`
	// The grayscale rule created for Dubbo Application.
	DubboRules []GetGreyTagRoutesRouteDubboRule `pulumi:"dubboRules"`
	// The name of GreyTagRoute.
	GreyTagRouteName string `pulumi:"greyTagRouteName"`
	// The ID of the GreyTagRoute.
	Id string `pulumi:"id"`
	// The grayscale rule created for SpringCloud Application.
	ScRules []GetGreyTagRoutesRouteScRule `pulumi:"scRules"`
}

// GetGreyTagRoutesRouteInput is an input type that accepts GetGreyTagRoutesRouteArgs and GetGreyTagRoutesRouteOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteInput` via:
//
//	GetGreyTagRoutesRouteArgs{...}
type GetGreyTagRoutesRouteInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteOutput() GetGreyTagRoutesRouteOutput
	ToGetGreyTagRoutesRouteOutputWithContext(context.Context) GetGreyTagRoutesRouteOutput
}

type GetGreyTagRoutesRouteArgs struct {
	// The description of GreyTagRoute.
	Description pulumi.StringInput `pulumi:"description"`
	// The grayscale rule created for Dubbo Application.
	DubboRules GetGreyTagRoutesRouteDubboRuleArrayInput `pulumi:"dubboRules"`
	// The name of GreyTagRoute.
	GreyTagRouteName pulumi.StringInput `pulumi:"greyTagRouteName"`
	// The ID of the GreyTagRoute.
	Id pulumi.StringInput `pulumi:"id"`
	// The grayscale rule created for SpringCloud Application.
	ScRules GetGreyTagRoutesRouteScRuleArrayInput `pulumi:"scRules"`
}

func (GetGreyTagRoutesRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRoute)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteArgs) ToGetGreyTagRoutesRouteOutput() GetGreyTagRoutesRouteOutput {
	return i.ToGetGreyTagRoutesRouteOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteArgs) ToGetGreyTagRoutesRouteOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteOutput)
}

func (i GetGreyTagRoutesRouteArgs) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRoute] {
	return pulumix.Output[GetGreyTagRoutesRoute]{
		OutputState: i.ToGetGreyTagRoutesRouteOutputWithContext(ctx).OutputState,
	}
}

// GetGreyTagRoutesRouteArrayInput is an input type that accepts GetGreyTagRoutesRouteArray and GetGreyTagRoutesRouteArrayOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteArrayInput` via:
//
//	GetGreyTagRoutesRouteArray{ GetGreyTagRoutesRouteArgs{...} }
type GetGreyTagRoutesRouteArrayInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteArrayOutput() GetGreyTagRoutesRouteArrayOutput
	ToGetGreyTagRoutesRouteArrayOutputWithContext(context.Context) GetGreyTagRoutesRouteArrayOutput
}

type GetGreyTagRoutesRouteArray []GetGreyTagRoutesRouteInput

func (GetGreyTagRoutesRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRoute)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteArray) ToGetGreyTagRoutesRouteArrayOutput() GetGreyTagRoutesRouteArrayOutput {
	return i.ToGetGreyTagRoutesRouteArrayOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteArray) ToGetGreyTagRoutesRouteArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteArrayOutput)
}

func (i GetGreyTagRoutesRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRoute] {
	return pulumix.Output[[]GetGreyTagRoutesRoute]{
		OutputState: i.ToGetGreyTagRoutesRouteArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGreyTagRoutesRouteOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRoute)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteOutput) ToGetGreyTagRoutesRouteOutput() GetGreyTagRoutesRouteOutput {
	return o
}

func (o GetGreyTagRoutesRouteOutput) ToGetGreyTagRoutesRouteOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteOutput {
	return o
}

func (o GetGreyTagRoutesRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRoute] {
	return pulumix.Output[GetGreyTagRoutesRoute]{
		OutputState: o.OutputState,
	}
}

// The description of GreyTagRoute.
func (o GetGreyTagRoutesRouteOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRoute) string { return v.Description }).(pulumi.StringOutput)
}

// The grayscale rule created for Dubbo Application.
func (o GetGreyTagRoutesRouteOutput) DubboRules() GetGreyTagRoutesRouteDubboRuleArrayOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRoute) []GetGreyTagRoutesRouteDubboRule { return v.DubboRules }).(GetGreyTagRoutesRouteDubboRuleArrayOutput)
}

// The name of GreyTagRoute.
func (o GetGreyTagRoutesRouteOutput) GreyTagRouteName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRoute) string { return v.GreyTagRouteName }).(pulumi.StringOutput)
}

// The ID of the GreyTagRoute.
func (o GetGreyTagRoutesRouteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRoute) string { return v.Id }).(pulumi.StringOutput)
}

// The grayscale rule created for SpringCloud Application.
func (o GetGreyTagRoutesRouteOutput) ScRules() GetGreyTagRoutesRouteScRuleArrayOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRoute) []GetGreyTagRoutesRouteScRule { return v.ScRules }).(GetGreyTagRoutesRouteScRuleArrayOutput)
}

type GetGreyTagRoutesRouteArrayOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRoute)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteArrayOutput) ToGetGreyTagRoutesRouteArrayOutput() GetGreyTagRoutesRouteArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteArrayOutput) ToGetGreyTagRoutesRouteArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRoute] {
	return pulumix.Output[[]GetGreyTagRoutesRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetGreyTagRoutesRouteArrayOutput) Index(i pulumi.IntInput) GetGreyTagRoutesRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGreyTagRoutesRoute {
		return vs[0].([]GetGreyTagRoutesRoute)[vs[1].(int)]
	}).(GetGreyTagRoutesRouteOutput)
}

type GetGreyTagRoutesRouteDubboRule struct {
	// The Conditional Patterns for Grayscale Rules.
	Condition string `pulumi:"condition"`
	// The service group.
	Group string `pulumi:"group"`
	// A list of conditions items.
	Items []GetGreyTagRoutesRouteDubboRuleItem `pulumi:"items"`
	// The method name
	MethodName string `pulumi:"methodName"`
	// The service name.
	ServiceName string `pulumi:"serviceName"`
	// The service version.
	Version string `pulumi:"version"`
}

// GetGreyTagRoutesRouteDubboRuleInput is an input type that accepts GetGreyTagRoutesRouteDubboRuleArgs and GetGreyTagRoutesRouteDubboRuleOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteDubboRuleInput` via:
//
//	GetGreyTagRoutesRouteDubboRuleArgs{...}
type GetGreyTagRoutesRouteDubboRuleInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteDubboRuleOutput() GetGreyTagRoutesRouteDubboRuleOutput
	ToGetGreyTagRoutesRouteDubboRuleOutputWithContext(context.Context) GetGreyTagRoutesRouteDubboRuleOutput
}

type GetGreyTagRoutesRouteDubboRuleArgs struct {
	// The Conditional Patterns for Grayscale Rules.
	Condition pulumi.StringInput `pulumi:"condition"`
	// The service group.
	Group pulumi.StringInput `pulumi:"group"`
	// A list of conditions items.
	Items GetGreyTagRoutesRouteDubboRuleItemArrayInput `pulumi:"items"`
	// The method name
	MethodName pulumi.StringInput `pulumi:"methodName"`
	// The service name.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The service version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetGreyTagRoutesRouteDubboRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteDubboRule)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteDubboRuleArgs) ToGetGreyTagRoutesRouteDubboRuleOutput() GetGreyTagRoutesRouteDubboRuleOutput {
	return i.ToGetGreyTagRoutesRouteDubboRuleOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteDubboRuleArgs) ToGetGreyTagRoutesRouteDubboRuleOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteDubboRuleOutput)
}

func (i GetGreyTagRoutesRouteDubboRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteDubboRule] {
	return pulumix.Output[GetGreyTagRoutesRouteDubboRule]{
		OutputState: i.ToGetGreyTagRoutesRouteDubboRuleOutputWithContext(ctx).OutputState,
	}
}

// GetGreyTagRoutesRouteDubboRuleArrayInput is an input type that accepts GetGreyTagRoutesRouteDubboRuleArray and GetGreyTagRoutesRouteDubboRuleArrayOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteDubboRuleArrayInput` via:
//
//	GetGreyTagRoutesRouteDubboRuleArray{ GetGreyTagRoutesRouteDubboRuleArgs{...} }
type GetGreyTagRoutesRouteDubboRuleArrayInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteDubboRuleArrayOutput() GetGreyTagRoutesRouteDubboRuleArrayOutput
	ToGetGreyTagRoutesRouteDubboRuleArrayOutputWithContext(context.Context) GetGreyTagRoutesRouteDubboRuleArrayOutput
}

type GetGreyTagRoutesRouteDubboRuleArray []GetGreyTagRoutesRouteDubboRuleInput

func (GetGreyTagRoutesRouteDubboRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteDubboRule)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteDubboRuleArray) ToGetGreyTagRoutesRouteDubboRuleArrayOutput() GetGreyTagRoutesRouteDubboRuleArrayOutput {
	return i.ToGetGreyTagRoutesRouteDubboRuleArrayOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteDubboRuleArray) ToGetGreyTagRoutesRouteDubboRuleArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteDubboRuleArrayOutput)
}

func (i GetGreyTagRoutesRouteDubboRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteDubboRule] {
	return pulumix.Output[[]GetGreyTagRoutesRouteDubboRule]{
		OutputState: i.ToGetGreyTagRoutesRouteDubboRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGreyTagRoutesRouteDubboRuleOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteDubboRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteDubboRule)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteDubboRuleOutput) ToGetGreyTagRoutesRouteDubboRuleOutput() GetGreyTagRoutesRouteDubboRuleOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleOutput) ToGetGreyTagRoutesRouteDubboRuleOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteDubboRule] {
	return pulumix.Output[GetGreyTagRoutesRouteDubboRule]{
		OutputState: o.OutputState,
	}
}

// The Conditional Patterns for Grayscale Rules.
func (o GetGreyTagRoutesRouteDubboRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) string { return v.Condition }).(pulumi.StringOutput)
}

// The service group.
func (o GetGreyTagRoutesRouteDubboRuleOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) string { return v.Group }).(pulumi.StringOutput)
}

// A list of conditions items.
func (o GetGreyTagRoutesRouteDubboRuleOutput) Items() GetGreyTagRoutesRouteDubboRuleItemArrayOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) []GetGreyTagRoutesRouteDubboRuleItem { return v.Items }).(GetGreyTagRoutesRouteDubboRuleItemArrayOutput)
}

// The method name
func (o GetGreyTagRoutesRouteDubboRuleOutput) MethodName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) string { return v.MethodName }).(pulumi.StringOutput)
}

// The service name.
func (o GetGreyTagRoutesRouteDubboRuleOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The service version.
func (o GetGreyTagRoutesRouteDubboRuleOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRule) string { return v.Version }).(pulumi.StringOutput)
}

type GetGreyTagRoutesRouteDubboRuleArrayOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteDubboRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteDubboRule)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteDubboRuleArrayOutput) ToGetGreyTagRoutesRouteDubboRuleArrayOutput() GetGreyTagRoutesRouteDubboRuleArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleArrayOutput) ToGetGreyTagRoutesRouteDubboRuleArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteDubboRule] {
	return pulumix.Output[[]GetGreyTagRoutesRouteDubboRule]{
		OutputState: o.OutputState,
	}
}

func (o GetGreyTagRoutesRouteDubboRuleArrayOutput) Index(i pulumi.IntInput) GetGreyTagRoutesRouteDubboRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGreyTagRoutesRouteDubboRule {
		return vs[0].([]GetGreyTagRoutesRouteDubboRule)[vs[1].(int)]
	}).(GetGreyTagRoutesRouteDubboRuleOutput)
}

type GetGreyTagRoutesRouteDubboRuleItem struct {
	// The comparison operator.
	Cond string `pulumi:"cond"`
	// The parameter value gets the expression.
	Expr string `pulumi:"expr"`
	// The parameter number.
	Index int `pulumi:"index"`
	// The operator.
	Operator string `pulumi:"operator"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

// GetGreyTagRoutesRouteDubboRuleItemInput is an input type that accepts GetGreyTagRoutesRouteDubboRuleItemArgs and GetGreyTagRoutesRouteDubboRuleItemOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteDubboRuleItemInput` via:
//
//	GetGreyTagRoutesRouteDubboRuleItemArgs{...}
type GetGreyTagRoutesRouteDubboRuleItemInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteDubboRuleItemOutput() GetGreyTagRoutesRouteDubboRuleItemOutput
	ToGetGreyTagRoutesRouteDubboRuleItemOutputWithContext(context.Context) GetGreyTagRoutesRouteDubboRuleItemOutput
}

type GetGreyTagRoutesRouteDubboRuleItemArgs struct {
	// The comparison operator.
	Cond pulumi.StringInput `pulumi:"cond"`
	// The parameter value gets the expression.
	Expr pulumi.StringInput `pulumi:"expr"`
	// The parameter number.
	Index pulumi.IntInput `pulumi:"index"`
	// The operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetGreyTagRoutesRouteDubboRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleItem)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteDubboRuleItemArgs) ToGetGreyTagRoutesRouteDubboRuleItemOutput() GetGreyTagRoutesRouteDubboRuleItemOutput {
	return i.ToGetGreyTagRoutesRouteDubboRuleItemOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteDubboRuleItemArgs) ToGetGreyTagRoutesRouteDubboRuleItemOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteDubboRuleItemOutput)
}

func (i GetGreyTagRoutesRouteDubboRuleItemArgs) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteDubboRuleItem] {
	return pulumix.Output[GetGreyTagRoutesRouteDubboRuleItem]{
		OutputState: i.ToGetGreyTagRoutesRouteDubboRuleItemOutputWithContext(ctx).OutputState,
	}
}

// GetGreyTagRoutesRouteDubboRuleItemArrayInput is an input type that accepts GetGreyTagRoutesRouteDubboRuleItemArray and GetGreyTagRoutesRouteDubboRuleItemArrayOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteDubboRuleItemArrayInput` via:
//
//	GetGreyTagRoutesRouteDubboRuleItemArray{ GetGreyTagRoutesRouteDubboRuleItemArgs{...} }
type GetGreyTagRoutesRouteDubboRuleItemArrayInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteDubboRuleItemArrayOutput() GetGreyTagRoutesRouteDubboRuleItemArrayOutput
	ToGetGreyTagRoutesRouteDubboRuleItemArrayOutputWithContext(context.Context) GetGreyTagRoutesRouteDubboRuleItemArrayOutput
}

type GetGreyTagRoutesRouteDubboRuleItemArray []GetGreyTagRoutesRouteDubboRuleItemInput

func (GetGreyTagRoutesRouteDubboRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteDubboRuleItem)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteDubboRuleItemArray) ToGetGreyTagRoutesRouteDubboRuleItemArrayOutput() GetGreyTagRoutesRouteDubboRuleItemArrayOutput {
	return i.ToGetGreyTagRoutesRouteDubboRuleItemArrayOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteDubboRuleItemArray) ToGetGreyTagRoutesRouteDubboRuleItemArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteDubboRuleItemArrayOutput)
}

func (i GetGreyTagRoutesRouteDubboRuleItemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteDubboRuleItem] {
	return pulumix.Output[[]GetGreyTagRoutesRouteDubboRuleItem]{
		OutputState: i.ToGetGreyTagRoutesRouteDubboRuleItemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGreyTagRoutesRouteDubboRuleItemOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteDubboRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleItem)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteDubboRuleItemOutput) ToGetGreyTagRoutesRouteDubboRuleItemOutput() GetGreyTagRoutesRouteDubboRuleItemOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleItemOutput) ToGetGreyTagRoutesRouteDubboRuleItemOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleItemOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleItemOutput) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteDubboRuleItem] {
	return pulumix.Output[GetGreyTagRoutesRouteDubboRuleItem]{
		OutputState: o.OutputState,
	}
}

// The comparison operator.
func (o GetGreyTagRoutesRouteDubboRuleItemOutput) Cond() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRuleItem) string { return v.Cond }).(pulumi.StringOutput)
}

// The parameter value gets the expression.
func (o GetGreyTagRoutesRouteDubboRuleItemOutput) Expr() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRuleItem) string { return v.Expr }).(pulumi.StringOutput)
}

// The parameter number.
func (o GetGreyTagRoutesRouteDubboRuleItemOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRuleItem) int { return v.Index }).(pulumi.IntOutput)
}

// The operator.
func (o GetGreyTagRoutesRouteDubboRuleItemOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRuleItem) string { return v.Operator }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o GetGreyTagRoutesRouteDubboRuleItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteDubboRuleItem) string { return v.Value }).(pulumi.StringOutput)
}

type GetGreyTagRoutesRouteDubboRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteDubboRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteDubboRuleItem)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteDubboRuleItemArrayOutput) ToGetGreyTagRoutesRouteDubboRuleItemArrayOutput() GetGreyTagRoutesRouteDubboRuleItemArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleItemArrayOutput) ToGetGreyTagRoutesRouteDubboRuleItemArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteDubboRuleItemArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteDubboRuleItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteDubboRuleItem] {
	return pulumix.Output[[]GetGreyTagRoutesRouteDubboRuleItem]{
		OutputState: o.OutputState,
	}
}

func (o GetGreyTagRoutesRouteDubboRuleItemArrayOutput) Index(i pulumi.IntInput) GetGreyTagRoutesRouteDubboRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGreyTagRoutesRouteDubboRuleItem {
		return vs[0].([]GetGreyTagRoutesRouteDubboRuleItem)[vs[1].(int)]
	}).(GetGreyTagRoutesRouteDubboRuleItemOutput)
}

type GetGreyTagRoutesRouteScRule struct {
	// The Conditional Patterns for Grayscale Rules.
	Condition string `pulumi:"condition"`
	// A list of conditions items.
	Items []GetGreyTagRoutesRouteScRuleItem `pulumi:"items"`
	// The path corresponding to the grayscale rule.
	Path string `pulumi:"path"`
}

// GetGreyTagRoutesRouteScRuleInput is an input type that accepts GetGreyTagRoutesRouteScRuleArgs and GetGreyTagRoutesRouteScRuleOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteScRuleInput` via:
//
//	GetGreyTagRoutesRouteScRuleArgs{...}
type GetGreyTagRoutesRouteScRuleInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteScRuleOutput() GetGreyTagRoutesRouteScRuleOutput
	ToGetGreyTagRoutesRouteScRuleOutputWithContext(context.Context) GetGreyTagRoutesRouteScRuleOutput
}

type GetGreyTagRoutesRouteScRuleArgs struct {
	// The Conditional Patterns for Grayscale Rules.
	Condition pulumi.StringInput `pulumi:"condition"`
	// A list of conditions items.
	Items GetGreyTagRoutesRouteScRuleItemArrayInput `pulumi:"items"`
	// The path corresponding to the grayscale rule.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetGreyTagRoutesRouteScRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteScRule)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteScRuleArgs) ToGetGreyTagRoutesRouteScRuleOutput() GetGreyTagRoutesRouteScRuleOutput {
	return i.ToGetGreyTagRoutesRouteScRuleOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteScRuleArgs) ToGetGreyTagRoutesRouteScRuleOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteScRuleOutput)
}

func (i GetGreyTagRoutesRouteScRuleArgs) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteScRule] {
	return pulumix.Output[GetGreyTagRoutesRouteScRule]{
		OutputState: i.ToGetGreyTagRoutesRouteScRuleOutputWithContext(ctx).OutputState,
	}
}

// GetGreyTagRoutesRouteScRuleArrayInput is an input type that accepts GetGreyTagRoutesRouteScRuleArray and GetGreyTagRoutesRouteScRuleArrayOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteScRuleArrayInput` via:
//
//	GetGreyTagRoutesRouteScRuleArray{ GetGreyTagRoutesRouteScRuleArgs{...} }
type GetGreyTagRoutesRouteScRuleArrayInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteScRuleArrayOutput() GetGreyTagRoutesRouteScRuleArrayOutput
	ToGetGreyTagRoutesRouteScRuleArrayOutputWithContext(context.Context) GetGreyTagRoutesRouteScRuleArrayOutput
}

type GetGreyTagRoutesRouteScRuleArray []GetGreyTagRoutesRouteScRuleInput

func (GetGreyTagRoutesRouteScRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteScRule)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteScRuleArray) ToGetGreyTagRoutesRouteScRuleArrayOutput() GetGreyTagRoutesRouteScRuleArrayOutput {
	return i.ToGetGreyTagRoutesRouteScRuleArrayOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteScRuleArray) ToGetGreyTagRoutesRouteScRuleArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteScRuleArrayOutput)
}

func (i GetGreyTagRoutesRouteScRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteScRule] {
	return pulumix.Output[[]GetGreyTagRoutesRouteScRule]{
		OutputState: i.ToGetGreyTagRoutesRouteScRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGreyTagRoutesRouteScRuleOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteScRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteScRule)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteScRuleOutput) ToGetGreyTagRoutesRouteScRuleOutput() GetGreyTagRoutesRouteScRuleOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleOutput) ToGetGreyTagRoutesRouteScRuleOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteScRule] {
	return pulumix.Output[GetGreyTagRoutesRouteScRule]{
		OutputState: o.OutputState,
	}
}

// The Conditional Patterns for Grayscale Rules.
func (o GetGreyTagRoutesRouteScRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRule) string { return v.Condition }).(pulumi.StringOutput)
}

// A list of conditions items.
func (o GetGreyTagRoutesRouteScRuleOutput) Items() GetGreyTagRoutesRouteScRuleItemArrayOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRule) []GetGreyTagRoutesRouteScRuleItem { return v.Items }).(GetGreyTagRoutesRouteScRuleItemArrayOutput)
}

// The path corresponding to the grayscale rule.
func (o GetGreyTagRoutesRouteScRuleOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRule) string { return v.Path }).(pulumi.StringOutput)
}

type GetGreyTagRoutesRouteScRuleArrayOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteScRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteScRule)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteScRuleArrayOutput) ToGetGreyTagRoutesRouteScRuleArrayOutput() GetGreyTagRoutesRouteScRuleArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleArrayOutput) ToGetGreyTagRoutesRouteScRuleArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteScRule] {
	return pulumix.Output[[]GetGreyTagRoutesRouteScRule]{
		OutputState: o.OutputState,
	}
}

func (o GetGreyTagRoutesRouteScRuleArrayOutput) Index(i pulumi.IntInput) GetGreyTagRoutesRouteScRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGreyTagRoutesRouteScRule {
		return vs[0].([]GetGreyTagRoutesRouteScRule)[vs[1].(int)]
	}).(GetGreyTagRoutesRouteScRuleOutput)
}

type GetGreyTagRoutesRouteScRuleItem struct {
	// The comparison operator.
	Cond string `pulumi:"cond"`
	// The name of the parameter.
	Name string `pulumi:"name"`
	// The operator.
	Operator string `pulumi:"operator"`
	// The Compare types.
	Type string `pulumi:"type"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

// GetGreyTagRoutesRouteScRuleItemInput is an input type that accepts GetGreyTagRoutesRouteScRuleItemArgs and GetGreyTagRoutesRouteScRuleItemOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteScRuleItemInput` via:
//
//	GetGreyTagRoutesRouteScRuleItemArgs{...}
type GetGreyTagRoutesRouteScRuleItemInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteScRuleItemOutput() GetGreyTagRoutesRouteScRuleItemOutput
	ToGetGreyTagRoutesRouteScRuleItemOutputWithContext(context.Context) GetGreyTagRoutesRouteScRuleItemOutput
}

type GetGreyTagRoutesRouteScRuleItemArgs struct {
	// The comparison operator.
	Cond pulumi.StringInput `pulumi:"cond"`
	// The name of the parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The Compare types.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetGreyTagRoutesRouteScRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteScRuleItem)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteScRuleItemArgs) ToGetGreyTagRoutesRouteScRuleItemOutput() GetGreyTagRoutesRouteScRuleItemOutput {
	return i.ToGetGreyTagRoutesRouteScRuleItemOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteScRuleItemArgs) ToGetGreyTagRoutesRouteScRuleItemOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteScRuleItemOutput)
}

func (i GetGreyTagRoutesRouteScRuleItemArgs) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteScRuleItem] {
	return pulumix.Output[GetGreyTagRoutesRouteScRuleItem]{
		OutputState: i.ToGetGreyTagRoutesRouteScRuleItemOutputWithContext(ctx).OutputState,
	}
}

// GetGreyTagRoutesRouteScRuleItemArrayInput is an input type that accepts GetGreyTagRoutesRouteScRuleItemArray and GetGreyTagRoutesRouteScRuleItemArrayOutput values.
// You can construct a concrete instance of `GetGreyTagRoutesRouteScRuleItemArrayInput` via:
//
//	GetGreyTagRoutesRouteScRuleItemArray{ GetGreyTagRoutesRouteScRuleItemArgs{...} }
type GetGreyTagRoutesRouteScRuleItemArrayInput interface {
	pulumi.Input

	ToGetGreyTagRoutesRouteScRuleItemArrayOutput() GetGreyTagRoutesRouteScRuleItemArrayOutput
	ToGetGreyTagRoutesRouteScRuleItemArrayOutputWithContext(context.Context) GetGreyTagRoutesRouteScRuleItemArrayOutput
}

type GetGreyTagRoutesRouteScRuleItemArray []GetGreyTagRoutesRouteScRuleItemInput

func (GetGreyTagRoutesRouteScRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteScRuleItem)(nil)).Elem()
}

func (i GetGreyTagRoutesRouteScRuleItemArray) ToGetGreyTagRoutesRouteScRuleItemArrayOutput() GetGreyTagRoutesRouteScRuleItemArrayOutput {
	return i.ToGetGreyTagRoutesRouteScRuleItemArrayOutputWithContext(context.Background())
}

func (i GetGreyTagRoutesRouteScRuleItemArray) ToGetGreyTagRoutesRouteScRuleItemArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGreyTagRoutesRouteScRuleItemArrayOutput)
}

func (i GetGreyTagRoutesRouteScRuleItemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteScRuleItem] {
	return pulumix.Output[[]GetGreyTagRoutesRouteScRuleItem]{
		OutputState: i.ToGetGreyTagRoutesRouteScRuleItemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetGreyTagRoutesRouteScRuleItemOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteScRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGreyTagRoutesRouteScRuleItem)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteScRuleItemOutput) ToGetGreyTagRoutesRouteScRuleItemOutput() GetGreyTagRoutesRouteScRuleItemOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleItemOutput) ToGetGreyTagRoutesRouteScRuleItemOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleItemOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleItemOutput) ToOutput(ctx context.Context) pulumix.Output[GetGreyTagRoutesRouteScRuleItem] {
	return pulumix.Output[GetGreyTagRoutesRouteScRuleItem]{
		OutputState: o.OutputState,
	}
}

// The comparison operator.
func (o GetGreyTagRoutesRouteScRuleItemOutput) Cond() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRuleItem) string { return v.Cond }).(pulumi.StringOutput)
}

// The name of the parameter.
func (o GetGreyTagRoutesRouteScRuleItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRuleItem) string { return v.Name }).(pulumi.StringOutput)
}

// The operator.
func (o GetGreyTagRoutesRouteScRuleItemOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRuleItem) string { return v.Operator }).(pulumi.StringOutput)
}

// The Compare types.
func (o GetGreyTagRoutesRouteScRuleItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRuleItem) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o GetGreyTagRoutesRouteScRuleItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetGreyTagRoutesRouteScRuleItem) string { return v.Value }).(pulumi.StringOutput)
}

type GetGreyTagRoutesRouteScRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GetGreyTagRoutesRouteScRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGreyTagRoutesRouteScRuleItem)(nil)).Elem()
}

func (o GetGreyTagRoutesRouteScRuleItemArrayOutput) ToGetGreyTagRoutesRouteScRuleItemArrayOutput() GetGreyTagRoutesRouteScRuleItemArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleItemArrayOutput) ToGetGreyTagRoutesRouteScRuleItemArrayOutputWithContext(ctx context.Context) GetGreyTagRoutesRouteScRuleItemArrayOutput {
	return o
}

func (o GetGreyTagRoutesRouteScRuleItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetGreyTagRoutesRouteScRuleItem] {
	return pulumix.Output[[]GetGreyTagRoutesRouteScRuleItem]{
		OutputState: o.OutputState,
	}
}

func (o GetGreyTagRoutesRouteScRuleItemArrayOutput) Index(i pulumi.IntInput) GetGreyTagRoutesRouteScRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGreyTagRoutesRouteScRuleItem {
		return vs[0].([]GetGreyTagRoutesRouteScRuleItem)[vs[1].(int)]
	}).(GetGreyTagRoutesRouteScRuleItemOutput)
}

type GetIngressesIngress struct {
	// Cert Id.
	CertId string `pulumi:"certId"`
	// Default Rule.
	DefaultRule string `pulumi:"defaultRule"`
	// Description.
	Description string `pulumi:"description"`
	// The ID of the Ingress.
	Id string `pulumi:"id"`
	// The first ID of the resource.
	IngressId string `pulumi:"ingressId"`
	// SLB listening port.
	ListenerPort int `pulumi:"listenerPort"`
	// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
	NamespaceId string `pulumi:"namespaceId"`
	// SLB ID.
	SlbId string `pulumi:"slbId"`
}

// GetIngressesIngressInput is an input type that accepts GetIngressesIngressArgs and GetIngressesIngressOutput values.
// You can construct a concrete instance of `GetIngressesIngressInput` via:
//
//	GetIngressesIngressArgs{...}
type GetIngressesIngressInput interface {
	pulumi.Input

	ToGetIngressesIngressOutput() GetIngressesIngressOutput
	ToGetIngressesIngressOutputWithContext(context.Context) GetIngressesIngressOutput
}

type GetIngressesIngressArgs struct {
	// Cert Id.
	CertId pulumi.StringInput `pulumi:"certId"`
	// Default Rule.
	DefaultRule pulumi.StringInput `pulumi:"defaultRule"`
	// Description.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Ingress.
	Id pulumi.StringInput `pulumi:"id"`
	// The first ID of the resource.
	IngressId pulumi.StringInput `pulumi:"ingressId"`
	// SLB listening port.
	ListenerPort pulumi.IntInput `pulumi:"listenerPort"`
	// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// SLB ID.
	SlbId pulumi.StringInput `pulumi:"slbId"`
}

func (GetIngressesIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngressesIngress)(nil)).Elem()
}

func (i GetIngressesIngressArgs) ToGetIngressesIngressOutput() GetIngressesIngressOutput {
	return i.ToGetIngressesIngressOutputWithContext(context.Background())
}

func (i GetIngressesIngressArgs) ToGetIngressesIngressOutputWithContext(ctx context.Context) GetIngressesIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIngressesIngressOutput)
}

func (i GetIngressesIngressArgs) ToOutput(ctx context.Context) pulumix.Output[GetIngressesIngress] {
	return pulumix.Output[GetIngressesIngress]{
		OutputState: i.ToGetIngressesIngressOutputWithContext(ctx).OutputState,
	}
}

// GetIngressesIngressArrayInput is an input type that accepts GetIngressesIngressArray and GetIngressesIngressArrayOutput values.
// You can construct a concrete instance of `GetIngressesIngressArrayInput` via:
//
//	GetIngressesIngressArray{ GetIngressesIngressArgs{...} }
type GetIngressesIngressArrayInput interface {
	pulumi.Input

	ToGetIngressesIngressArrayOutput() GetIngressesIngressArrayOutput
	ToGetIngressesIngressArrayOutputWithContext(context.Context) GetIngressesIngressArrayOutput
}

type GetIngressesIngressArray []GetIngressesIngressInput

func (GetIngressesIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIngressesIngress)(nil)).Elem()
}

func (i GetIngressesIngressArray) ToGetIngressesIngressArrayOutput() GetIngressesIngressArrayOutput {
	return i.ToGetIngressesIngressArrayOutputWithContext(context.Background())
}

func (i GetIngressesIngressArray) ToGetIngressesIngressArrayOutputWithContext(ctx context.Context) GetIngressesIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIngressesIngressArrayOutput)
}

func (i GetIngressesIngressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIngressesIngress] {
	return pulumix.Output[[]GetIngressesIngress]{
		OutputState: i.ToGetIngressesIngressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIngressesIngressOutput struct{ *pulumi.OutputState }

func (GetIngressesIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngressesIngress)(nil)).Elem()
}

func (o GetIngressesIngressOutput) ToGetIngressesIngressOutput() GetIngressesIngressOutput {
	return o
}

func (o GetIngressesIngressOutput) ToGetIngressesIngressOutputWithContext(ctx context.Context) GetIngressesIngressOutput {
	return o
}

func (o GetIngressesIngressOutput) ToOutput(ctx context.Context) pulumix.Output[GetIngressesIngress] {
	return pulumix.Output[GetIngressesIngress]{
		OutputState: o.OutputState,
	}
}

// Cert Id.
func (o GetIngressesIngressOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.CertId }).(pulumi.StringOutput)
}

// Default Rule.
func (o GetIngressesIngressOutput) DefaultRule() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.DefaultRule }).(pulumi.StringOutput)
}

// Description.
func (o GetIngressesIngressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Ingress.
func (o GetIngressesIngressOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.Id }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetIngressesIngressOutput) IngressId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.IngressId }).(pulumi.StringOutput)
}

// SLB listening port.
func (o GetIngressesIngressOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetIngressesIngress) int { return v.ListenerPort }).(pulumi.IntOutput)
}

// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
func (o GetIngressesIngressOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// SLB ID.
func (o GetIngressesIngressOutput) SlbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngressesIngress) string { return v.SlbId }).(pulumi.StringOutput)
}

type GetIngressesIngressArrayOutput struct{ *pulumi.OutputState }

func (GetIngressesIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIngressesIngress)(nil)).Elem()
}

func (o GetIngressesIngressArrayOutput) ToGetIngressesIngressArrayOutput() GetIngressesIngressArrayOutput {
	return o
}

func (o GetIngressesIngressArrayOutput) ToGetIngressesIngressArrayOutputWithContext(ctx context.Context) GetIngressesIngressArrayOutput {
	return o
}

func (o GetIngressesIngressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIngressesIngress] {
	return pulumix.Output[[]GetIngressesIngress]{
		OutputState: o.OutputState,
	}
}

func (o GetIngressesIngressArrayOutput) Index(i pulumi.IntInput) GetIngressesIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIngressesIngress {
		return vs[0].([]GetIngressesIngress)[vs[1].(int)]
	}).(GetIngressesIngressOutput)
}

type GetInstanceSpecificationsSpecification struct {
	// CPU Size, Specifications for Micronucleus.
	Cpu int `pulumi:"cpu"`
	// Whether the instance is available. The value description is as follows:
	Enable bool `pulumi:"enable"`
	// The ID of the Instance Specification.
	Id string `pulumi:"id"`
	// The first ID of the resource.
	InstanceSpecificationId string `pulumi:"instanceSpecificationId"`
	// The Memory specifications for the MB.
	Memory int `pulumi:"memory"`
	// The specification configuration name.
	SpecInfo string `pulumi:"specInfo"`
	// The specification configuration version.
	Version int `pulumi:"version"`
}

// GetInstanceSpecificationsSpecificationInput is an input type that accepts GetInstanceSpecificationsSpecificationArgs and GetInstanceSpecificationsSpecificationOutput values.
// You can construct a concrete instance of `GetInstanceSpecificationsSpecificationInput` via:
//
//	GetInstanceSpecificationsSpecificationArgs{...}
type GetInstanceSpecificationsSpecificationInput interface {
	pulumi.Input

	ToGetInstanceSpecificationsSpecificationOutput() GetInstanceSpecificationsSpecificationOutput
	ToGetInstanceSpecificationsSpecificationOutputWithContext(context.Context) GetInstanceSpecificationsSpecificationOutput
}

type GetInstanceSpecificationsSpecificationArgs struct {
	// CPU Size, Specifications for Micronucleus.
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// Whether the instance is available. The value description is as follows:
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The ID of the Instance Specification.
	Id pulumi.StringInput `pulumi:"id"`
	// The first ID of the resource.
	InstanceSpecificationId pulumi.StringInput `pulumi:"instanceSpecificationId"`
	// The Memory specifications for the MB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The specification configuration name.
	SpecInfo pulumi.StringInput `pulumi:"specInfo"`
	// The specification configuration version.
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetInstanceSpecificationsSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSpecificationsSpecification)(nil)).Elem()
}

func (i GetInstanceSpecificationsSpecificationArgs) ToGetInstanceSpecificationsSpecificationOutput() GetInstanceSpecificationsSpecificationOutput {
	return i.ToGetInstanceSpecificationsSpecificationOutputWithContext(context.Background())
}

func (i GetInstanceSpecificationsSpecificationArgs) ToGetInstanceSpecificationsSpecificationOutputWithContext(ctx context.Context) GetInstanceSpecificationsSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSpecificationsSpecificationOutput)
}

func (i GetInstanceSpecificationsSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSpecificationsSpecification] {
	return pulumix.Output[GetInstanceSpecificationsSpecification]{
		OutputState: i.ToGetInstanceSpecificationsSpecificationOutputWithContext(ctx).OutputState,
	}
}

// GetInstanceSpecificationsSpecificationArrayInput is an input type that accepts GetInstanceSpecificationsSpecificationArray and GetInstanceSpecificationsSpecificationArrayOutput values.
// You can construct a concrete instance of `GetInstanceSpecificationsSpecificationArrayInput` via:
//
//	GetInstanceSpecificationsSpecificationArray{ GetInstanceSpecificationsSpecificationArgs{...} }
type GetInstanceSpecificationsSpecificationArrayInput interface {
	pulumi.Input

	ToGetInstanceSpecificationsSpecificationArrayOutput() GetInstanceSpecificationsSpecificationArrayOutput
	ToGetInstanceSpecificationsSpecificationArrayOutputWithContext(context.Context) GetInstanceSpecificationsSpecificationArrayOutput
}

type GetInstanceSpecificationsSpecificationArray []GetInstanceSpecificationsSpecificationInput

func (GetInstanceSpecificationsSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSpecificationsSpecification)(nil)).Elem()
}

func (i GetInstanceSpecificationsSpecificationArray) ToGetInstanceSpecificationsSpecificationArrayOutput() GetInstanceSpecificationsSpecificationArrayOutput {
	return i.ToGetInstanceSpecificationsSpecificationArrayOutputWithContext(context.Background())
}

func (i GetInstanceSpecificationsSpecificationArray) ToGetInstanceSpecificationsSpecificationArrayOutputWithContext(ctx context.Context) GetInstanceSpecificationsSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSpecificationsSpecificationArrayOutput)
}

func (i GetInstanceSpecificationsSpecificationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSpecificationsSpecification] {
	return pulumix.Output[[]GetInstanceSpecificationsSpecification]{
		OutputState: i.ToGetInstanceSpecificationsSpecificationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstanceSpecificationsSpecificationOutput struct{ *pulumi.OutputState }

func (GetInstanceSpecificationsSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSpecificationsSpecification)(nil)).Elem()
}

func (o GetInstanceSpecificationsSpecificationOutput) ToGetInstanceSpecificationsSpecificationOutput() GetInstanceSpecificationsSpecificationOutput {
	return o
}

func (o GetInstanceSpecificationsSpecificationOutput) ToGetInstanceSpecificationsSpecificationOutputWithContext(ctx context.Context) GetInstanceSpecificationsSpecificationOutput {
	return o
}

func (o GetInstanceSpecificationsSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceSpecificationsSpecification] {
	return pulumix.Output[GetInstanceSpecificationsSpecification]{
		OutputState: o.OutputState,
	}
}

// CPU Size, Specifications for Micronucleus.
func (o GetInstanceSpecificationsSpecificationOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) int { return v.Cpu }).(pulumi.IntOutput)
}

// Whether the instance is available. The value description is as follows:
func (o GetInstanceSpecificationsSpecificationOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The ID of the Instance Specification.
func (o GetInstanceSpecificationsSpecificationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) string { return v.Id }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetInstanceSpecificationsSpecificationOutput) InstanceSpecificationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) string { return v.InstanceSpecificationId }).(pulumi.StringOutput)
}

// The Memory specifications for the MB.
func (o GetInstanceSpecificationsSpecificationOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) int { return v.Memory }).(pulumi.IntOutput)
}

// The specification configuration name.
func (o GetInstanceSpecificationsSpecificationOutput) SpecInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) string { return v.SpecInfo }).(pulumi.StringOutput)
}

// The specification configuration version.
func (o GetInstanceSpecificationsSpecificationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecificationsSpecification) int { return v.Version }).(pulumi.IntOutput)
}

type GetInstanceSpecificationsSpecificationArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSpecificationsSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSpecificationsSpecification)(nil)).Elem()
}

func (o GetInstanceSpecificationsSpecificationArrayOutput) ToGetInstanceSpecificationsSpecificationArrayOutput() GetInstanceSpecificationsSpecificationArrayOutput {
	return o
}

func (o GetInstanceSpecificationsSpecificationArrayOutput) ToGetInstanceSpecificationsSpecificationArrayOutputWithContext(ctx context.Context) GetInstanceSpecificationsSpecificationArrayOutput {
	return o
}

func (o GetInstanceSpecificationsSpecificationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstanceSpecificationsSpecification] {
	return pulumix.Output[[]GetInstanceSpecificationsSpecification]{
		OutputState: o.OutputState,
	}
}

func (o GetInstanceSpecificationsSpecificationArrayOutput) Index(i pulumi.IntInput) GetInstanceSpecificationsSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSpecificationsSpecification {
		return vs[0].([]GetInstanceSpecificationsSpecification)[vs[1].(int)]
	}).(GetInstanceSpecificationsSpecificationOutput)
}

type GetNamespacesNamespace struct {
	// The ID of the Namespace.
	Id string `pulumi:"id"`
	// The Description of Namespace.
	NamespaceDescription string `pulumi:"namespaceDescription"`
	// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
	NamespaceId string `pulumi:"namespaceId"`
	// The Name of Namespace.
	NamespaceName string `pulumi:"namespaceName"`
}

// GetNamespacesNamespaceInput is an input type that accepts GetNamespacesNamespaceArgs and GetNamespacesNamespaceOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceInput` via:
//
//	GetNamespacesNamespaceArgs{...}
type GetNamespacesNamespaceInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput
	ToGetNamespacesNamespaceOutputWithContext(context.Context) GetNamespacesNamespaceOutput
}

type GetNamespacesNamespaceArgs struct {
	// The ID of the Namespace.
	Id pulumi.StringInput `pulumi:"id"`
	// The Description of Namespace.
	NamespaceDescription pulumi.StringInput `pulumi:"namespaceDescription"`
	// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// The Name of Namespace.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
}

func (GetNamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return i.ToGetNamespacesNamespaceOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceOutput)
}

func (i GetNamespacesNamespaceArgs) ToOutput(ctx context.Context) pulumix.Output[GetNamespacesNamespace] {
	return pulumix.Output[GetNamespacesNamespace]{
		OutputState: i.ToGetNamespacesNamespaceOutputWithContext(ctx).OutputState,
	}
}

// GetNamespacesNamespaceArrayInput is an input type that accepts GetNamespacesNamespaceArray and GetNamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceArrayInput` via:
//
//	GetNamespacesNamespaceArray{ GetNamespacesNamespaceArgs{...} }
type GetNamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput
	ToGetNamespacesNamespaceArrayOutputWithContext(context.Context) GetNamespacesNamespaceArrayOutput
}

type GetNamespacesNamespaceArray []GetNamespacesNamespaceInput

func (GetNamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return i.ToGetNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceArrayOutput)
}

func (i GetNamespacesNamespaceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNamespacesNamespace] {
	return pulumix.Output[[]GetNamespacesNamespace]{
		OutputState: i.ToGetNamespacesNamespaceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[GetNamespacesNamespace] {
	return pulumix.Output[GetNamespacesNamespace]{
		OutputState: o.OutputState,
	}
}

// The ID of the Namespace.
func (o GetNamespacesNamespaceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Id }).(pulumi.StringOutput)
}

// The Description of Namespace.
func (o GetNamespacesNamespaceOutput) NamespaceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.NamespaceDescription }).(pulumi.StringOutput)
}

// The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
func (o GetNamespacesNamespaceOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The Name of Namespace.
func (o GetNamespacesNamespaceOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.NamespaceName }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNamespacesNamespace] {
	return pulumix.Output[[]GetNamespacesNamespace]{
		OutputState: o.OutputState,
	}
}

func (o GetNamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespace {
		return vs[0].([]GetNamespacesNamespace)[vs[1].(int)]
	}).(GetNamespacesNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationConfigMapMountDescV2Input)(nil)).Elem(), ApplicationConfigMapMountDescV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationConfigMapMountDescV2ArrayInput)(nil)).Elem(), ApplicationConfigMapMountDescV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCustomHostAliasV2Input)(nil)).Elem(), ApplicationCustomHostAliasV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCustomHostAliasV2ArrayInput)(nil)).Elem(), ApplicationCustomHostAliasV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKafkaConfigsInput)(nil)).Elem(), ApplicationKafkaConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKafkaConfigsPtrInput)(nil)).Elem(), ApplicationKafkaConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKafkaConfigsKafkaConfigInput)(nil)).Elem(), ApplicationKafkaConfigsKafkaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKafkaConfigsKafkaConfigArrayInput)(nil)).Elem(), ApplicationKafkaConfigsKafkaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2Input)(nil)).Elem(), ApplicationLivenessV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2PtrInput)(nil)).Elem(), ApplicationLivenessV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2ExecInput)(nil)).Elem(), ApplicationLivenessV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2ExecPtrInput)(nil)).Elem(), ApplicationLivenessV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2HttpGetInput)(nil)).Elem(), ApplicationLivenessV2HttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2HttpGetPtrInput)(nil)).Elem(), ApplicationLivenessV2HttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2TcpSocketInput)(nil)).Elem(), ApplicationLivenessV2TcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLivenessV2TcpSocketPtrInput)(nil)).Elem(), ApplicationLivenessV2TcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNasConfigInput)(nil)).Elem(), ApplicationNasConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNasConfigArrayInput)(nil)).Elem(), ApplicationNasConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOssMountDescsV2Input)(nil)).Elem(), ApplicationOssMountDescsV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOssMountDescsV2ArrayInput)(nil)).Elem(), ApplicationOssMountDescsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPostStartV2Input)(nil)).Elem(), ApplicationPostStartV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPostStartV2PtrInput)(nil)).Elem(), ApplicationPostStartV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPostStartV2ExecInput)(nil)).Elem(), ApplicationPostStartV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPostStartV2ExecPtrInput)(nil)).Elem(), ApplicationPostStartV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPreStopV2Input)(nil)).Elem(), ApplicationPreStopV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPreStopV2PtrInput)(nil)).Elem(), ApplicationPreStopV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPreStopV2ExecInput)(nil)).Elem(), ApplicationPreStopV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPreStopV2ExecPtrInput)(nil)).Elem(), ApplicationPreStopV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPvtzDiscoverySvcInput)(nil)).Elem(), ApplicationPvtzDiscoverySvcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPvtzDiscoverySvcPtrInput)(nil)).Elem(), ApplicationPvtzDiscoverySvcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPvtzDiscoverySvcPortProtocolInput)(nil)).Elem(), ApplicationPvtzDiscoverySvcPortProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPvtzDiscoverySvcPortProtocolArrayInput)(nil)).Elem(), ApplicationPvtzDiscoverySvcPortProtocolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2Input)(nil)).Elem(), ApplicationReadinessV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2PtrInput)(nil)).Elem(), ApplicationReadinessV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2ExecInput)(nil)).Elem(), ApplicationReadinessV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2ExecPtrInput)(nil)).Elem(), ApplicationReadinessV2ExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2HttpGetInput)(nil)).Elem(), ApplicationReadinessV2HttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2HttpGetPtrInput)(nil)).Elem(), ApplicationReadinessV2HttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2TcpSocketInput)(nil)).Elem(), ApplicationReadinessV2TcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReadinessV2TcpSocketPtrInput)(nil)).Elem(), ApplicationReadinessV2TcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricPtrInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricMetricInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricMetricArrayInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleDownRulesInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricScaleDownRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleUpRulesInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleMetricScaleUpRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleTimerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerPtrInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleTimerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerScheduleInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleTimerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationScalingRuleScalingRuleTimerScheduleArrayInput)(nil)).Elem(), ApplicationScalingRuleScalingRuleTimerScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTomcatConfigV2Input)(nil)).Elem(), ApplicationTomcatConfigV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTomcatConfigV2PtrInput)(nil)).Elem(), ApplicationTomcatConfigV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUpdateStrategyV2Input)(nil)).Elem(), ApplicationUpdateStrategyV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUpdateStrategyV2PtrInput)(nil)).Elem(), ApplicationUpdateStrategyV2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUpdateStrategyV2BatchUpdateInput)(nil)).Elem(), ApplicationUpdateStrategyV2BatchUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationUpdateStrategyV2BatchUpdatePtrInput)(nil)).Elem(), ApplicationUpdateStrategyV2BatchUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteDubboRuleInput)(nil)).Elem(), GreyTagRouteDubboRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteDubboRuleArrayInput)(nil)).Elem(), GreyTagRouteDubboRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteDubboRuleItemInput)(nil)).Elem(), GreyTagRouteDubboRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteDubboRuleItemArrayInput)(nil)).Elem(), GreyTagRouteDubboRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteScRuleInput)(nil)).Elem(), GreyTagRouteScRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteScRuleArrayInput)(nil)).Elem(), GreyTagRouteScRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteScRuleItemInput)(nil)).Elem(), GreyTagRouteScRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreyTagRouteScRuleItemArrayInput)(nil)).Elem(), GreyTagRouteScRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressDefaultRuleInput)(nil)).Elem(), IngressDefaultRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressDefaultRulePtrInput)(nil)).Elem(), IngressDefaultRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRuleInput)(nil)).Elem(), IngressRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRuleArrayInput)(nil)).Elem(), IngressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInternetInternetInput)(nil)).Elem(), LoadBalancerInternetInternetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInternetInternetArrayInput)(nil)).Elem(), LoadBalancerInternetInternetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIntranetIntranetInput)(nil)).Elem(), LoadBalancerIntranetIntranetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerIntranetIntranetArrayInput)(nil)).Elem(), LoadBalancerIntranetIntranetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleInput)(nil)).Elem(), GetApplicationScalingRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleTimerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleTimerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerScheduleInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleTimerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayInput)(nil)).Elem(), GetApplicationScalingRulesRuleScalingRuleTimerScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationInput)(nil)).Elem(), GetApplicationsApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationArrayInput)(nil)).Elem(), GetApplicationsApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationMountDescInput)(nil)).Elem(), GetApplicationsApplicationMountDescArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationMountDescArrayInput)(nil)).Elem(), GetApplicationsApplicationMountDescArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationOssMountDetailInput)(nil)).Elem(), GetApplicationsApplicationOssMountDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApplicationsApplicationOssMountDetailArrayInput)(nil)).Elem(), GetApplicationsApplicationOssMountDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigMapsMapInput)(nil)).Elem(), GetConfigMapsMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigMapsMapArrayInput)(nil)).Elem(), GetConfigMapsMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteInput)(nil)).Elem(), GetGreyTagRoutesRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteArrayInput)(nil)).Elem(), GetGreyTagRoutesRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleInput)(nil)).Elem(), GetGreyTagRoutesRouteDubboRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleArrayInput)(nil)).Elem(), GetGreyTagRoutesRouteDubboRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleItemInput)(nil)).Elem(), GetGreyTagRoutesRouteDubboRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteDubboRuleItemArrayInput)(nil)).Elem(), GetGreyTagRoutesRouteDubboRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteScRuleInput)(nil)).Elem(), GetGreyTagRoutesRouteScRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteScRuleArrayInput)(nil)).Elem(), GetGreyTagRoutesRouteScRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteScRuleItemInput)(nil)).Elem(), GetGreyTagRoutesRouteScRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGreyTagRoutesRouteScRuleItemArrayInput)(nil)).Elem(), GetGreyTagRoutesRouteScRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIngressesIngressInput)(nil)).Elem(), GetIngressesIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIngressesIngressArrayInput)(nil)).Elem(), GetIngressesIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSpecificationsSpecificationInput)(nil)).Elem(), GetInstanceSpecificationsSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSpecificationsSpecificationArrayInput)(nil)).Elem(), GetInstanceSpecificationsSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceInput)(nil)).Elem(), GetNamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceArrayInput)(nil)).Elem(), GetNamespacesNamespaceArray{})
	pulumi.RegisterOutputType(ApplicationConfigMapMountDescV2Output{})
	pulumi.RegisterOutputType(ApplicationConfigMapMountDescV2ArrayOutput{})
	pulumi.RegisterOutputType(ApplicationCustomHostAliasV2Output{})
	pulumi.RegisterOutputType(ApplicationCustomHostAliasV2ArrayOutput{})
	pulumi.RegisterOutputType(ApplicationKafkaConfigsOutput{})
	pulumi.RegisterOutputType(ApplicationKafkaConfigsPtrOutput{})
	pulumi.RegisterOutputType(ApplicationKafkaConfigsKafkaConfigOutput{})
	pulumi.RegisterOutputType(ApplicationKafkaConfigsKafkaConfigArrayOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2Output{})
	pulumi.RegisterOutputType(ApplicationLivenessV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2ExecOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2ExecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2HttpGetOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2HttpGetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2TcpSocketOutput{})
	pulumi.RegisterOutputType(ApplicationLivenessV2TcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ApplicationNasConfigOutput{})
	pulumi.RegisterOutputType(ApplicationNasConfigArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOssMountDescsV2Output{})
	pulumi.RegisterOutputType(ApplicationOssMountDescsV2ArrayOutput{})
	pulumi.RegisterOutputType(ApplicationPostStartV2Output{})
	pulumi.RegisterOutputType(ApplicationPostStartV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationPostStartV2ExecOutput{})
	pulumi.RegisterOutputType(ApplicationPostStartV2ExecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationPreStopV2Output{})
	pulumi.RegisterOutputType(ApplicationPreStopV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationPreStopV2ExecOutput{})
	pulumi.RegisterOutputType(ApplicationPreStopV2ExecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationPvtzDiscoverySvcOutput{})
	pulumi.RegisterOutputType(ApplicationPvtzDiscoverySvcPtrOutput{})
	pulumi.RegisterOutputType(ApplicationPvtzDiscoverySvcPortProtocolOutput{})
	pulumi.RegisterOutputType(ApplicationPvtzDiscoverySvcPortProtocolArrayOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2Output{})
	pulumi.RegisterOutputType(ApplicationReadinessV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2ExecOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2ExecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2HttpGetOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2HttpGetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2TcpSocketOutput{})
	pulumi.RegisterOutputType(ApplicationReadinessV2TcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricPtrOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricMetricOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricMetricArrayOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricScaleDownRulesOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricScaleDownRulesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricScaleUpRulesOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleMetricScaleUpRulesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleTimerOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleTimerPtrOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleTimerScheduleOutput{})
	pulumi.RegisterOutputType(ApplicationScalingRuleScalingRuleTimerScheduleArrayOutput{})
	pulumi.RegisterOutputType(ApplicationTomcatConfigV2Output{})
	pulumi.RegisterOutputType(ApplicationTomcatConfigV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationUpdateStrategyV2Output{})
	pulumi.RegisterOutputType(ApplicationUpdateStrategyV2PtrOutput{})
	pulumi.RegisterOutputType(ApplicationUpdateStrategyV2BatchUpdateOutput{})
	pulumi.RegisterOutputType(ApplicationUpdateStrategyV2BatchUpdatePtrOutput{})
	pulumi.RegisterOutputType(GreyTagRouteDubboRuleOutput{})
	pulumi.RegisterOutputType(GreyTagRouteDubboRuleArrayOutput{})
	pulumi.RegisterOutputType(GreyTagRouteDubboRuleItemOutput{})
	pulumi.RegisterOutputType(GreyTagRouteDubboRuleItemArrayOutput{})
	pulumi.RegisterOutputType(GreyTagRouteScRuleOutput{})
	pulumi.RegisterOutputType(GreyTagRouteScRuleArrayOutput{})
	pulumi.RegisterOutputType(GreyTagRouteScRuleItemOutput{})
	pulumi.RegisterOutputType(GreyTagRouteScRuleItemArrayOutput{})
	pulumi.RegisterOutputType(IngressDefaultRuleOutput{})
	pulumi.RegisterOutputType(IngressDefaultRulePtrOutput{})
	pulumi.RegisterOutputType(IngressRuleOutput{})
	pulumi.RegisterOutputType(IngressRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerInternetInternetOutput{})
	pulumi.RegisterOutputType(LoadBalancerInternetInternetArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerIntranetIntranetOutput{})
	pulumi.RegisterOutputType(LoadBalancerIntranetIntranetArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusCurrentMetricArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricMetricsStatusNextScaleMetricArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricScaleDownRuleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleMetricScaleUpRuleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleTimerOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleTimerArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleTimerScheduleOutput{})
	pulumi.RegisterOutputType(GetApplicationScalingRulesRuleScalingRuleTimerScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationMountDescOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationMountDescArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationOssMountDetailOutput{})
	pulumi.RegisterOutputType(GetApplicationsApplicationOssMountDetailArrayOutput{})
	pulumi.RegisterOutputType(GetConfigMapsMapOutput{})
	pulumi.RegisterOutputType(GetConfigMapsMapArrayOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteArrayOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteDubboRuleOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteDubboRuleArrayOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteDubboRuleItemOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteDubboRuleItemArrayOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteScRuleOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteScRuleArrayOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteScRuleItemOutput{})
	pulumi.RegisterOutputType(GetGreyTagRoutesRouteScRuleItemArrayOutput{})
	pulumi.RegisterOutputType(GetIngressesIngressOutput{})
	pulumi.RegisterOutputType(GetIngressesIngressArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSpecificationsSpecificationOutput{})
	pulumi.RegisterOutputType(GetInstanceSpecificationsSpecificationArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceArrayOutput{})
}
