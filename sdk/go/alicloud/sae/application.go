// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sae

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Serverless App Engine (SAE) Application resource.
//
// For information about Serverless App Engine (SAE) Application and how to use it, see [What is Application](https://help.aliyun.com/document_detail/97792.html).
//
// > **NOTE:** Available in v1.161.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/sae"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "tf-testacc"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := vpc.NewNetwork(ctx, "vpc", &vpc.NetworkArgs{
//				VpcName:   pulumi.String("tf_testacc"),
//				CidrBlock: pulumi.String("172.16.0.0/12"),
//			})
//			if err != nil {
//				return err
//			}
//			vsw, err := vpc.NewSwitch(ctx, "vsw", &vpc.SwitchArgs{
//				VpcId:       vpc.ID(),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultNamespace, err := sae.NewNamespace(ctx, "defaultNamespace", &sae.NamespaceArgs{
//				NamespaceDescription: pulumi.String(name),
//				NamespaceId:          pulumi.String("cn-hangzhou:tfacctest"),
//				NamespaceName:        pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sae.NewApplication(ctx, "defaultApplication", &sae.ApplicationArgs{
//				AppDescription: pulumi.String("tf-testaccDescription"),
//				AppName:        pulumi.String("tf-testaccAppName"),
//				NamespaceId:    defaultNamespace.ID(),
//				ImageUrl:       pulumi.String("registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5"),
//				PackageType:    pulumi.String("Image"),
//				VpcId:          vsw.VpcId,
//				VswitchId:      vsw.ID(),
//				Timezone:       pulumi.String("Asia/Beijing"),
//				Replicas:       pulumi.Int(5),
//				Cpu:            pulumi.Int(500),
//				Memory:         pulumi.Int(2048),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Serverless App Engine (SAE) Application can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:sae/application:Application example <id>
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrAssumeRoleArn pulumi.StringPtrOutput `pulumi:"acrAssumeRoleArn"`
	// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrInstanceId pulumi.StringPtrOutput `pulumi:"acrInstanceId"`
	// Application description information. No more than 1024 characters.
	AppDescription pulumi.StringPtrOutput `pulumi:"appDescription"`
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// The auto config. Valid values: `false`, `true`.
	AutoConfig pulumi.BoolPtrOutput `pulumi:"autoConfig"`
	// The auto enable application scaling rule. Valid values: `false`, `true`.
	AutoEnableApplicationScalingRule pulumi.BoolOutput `pulumi:"autoEnableApplicationScalingRule"`
	// The batch wait time.
	BatchWaitTime pulumi.IntOutput `pulumi:"batchWaitTime"`
	// The change order desc.
	ChangeOrderDesc pulumi.StringOutput `pulumi:"changeOrderDesc"`
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command pulumi.StringPtrOutput `pulumi:"command"`
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs pulumi.StringPtrOutput `pulumi:"commandArgs"`
	// ConfigMap mount description.
	ConfigMapMountDesc pulumi.StringOutput `pulumi:"configMapMountDesc"`
	// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
	Cpu pulumi.IntPtrOutput `pulumi:"cpu"`
	// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
	CustomHostAlias pulumi.StringOutput `pulumi:"customHostAlias"`
	// The deploy. Valid values: `false`, `true`.
	Deploy pulumi.BoolPtrOutput `pulumi:"deploy"`
	// The operating environment used by the Pandora application.
	EdasContainerVersion pulumi.StringPtrOutput `pulumi:"edasContainerVersion"`
	// The enable ahas.
	EnableAhas pulumi.StringOutput `pulumi:"enableAhas"`
	// The enable grey tag route.
	EnableGreyTagRoute pulumi.BoolOutput `pulumi:"enableGreyTagRoute"`
	// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
	Envs pulumi.StringOutput `pulumi:"envs"`
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl pulumi.StringPtrOutput `pulumi:"imageUrl"`
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs pulumi.StringPtrOutput `pulumi:"jarStartArgs"`
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions pulumi.StringPtrOutput `pulumi:"jarStartOptions"`
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk pulumi.StringPtrOutput `pulumi:"jdk"`
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness pulumi.StringPtrOutput `pulumi:"liveness"`
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// Select the Nacos registry. Valid values: `0`, `1`, `2`.
	MicroRegistration pulumi.StringPtrOutput `pulumi:"microRegistration"`
	// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
	// * `-1`: Initialization value, indicating that percentages are not used.
	// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
	MinReadyInstanceRatio pulumi.IntOutput `pulumi:"minReadyInstanceRatio"`
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances pulumi.IntOutput `pulumi:"minReadyInstances"`
	// Mount description.
	MountDesc pulumi.StringPtrOutput `pulumi:"mountDesc"`
	// Mount point of NAS in application VPC.
	MountHost pulumi.StringPtrOutput `pulumi:"mountHost"`
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId pulumi.StringPtrOutput `pulumi:"namespaceId"`
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrOutput `pulumi:"nasId"`
	// OSS AccessKey ID.
	OssAkId pulumi.StringPtrOutput `pulumi:"ossAkId"`
	// OSS  AccessKey Secret.
	OssAkSecret pulumi.StringPtrOutput `pulumi:"ossAkSecret"`
	// OSS mount description information.
	OssMountDescs pulumi.StringPtrOutput `pulumi:"ossMountDescs"`
	// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
	PackageType pulumi.StringOutput `pulumi:"packageType"`
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl pulumi.StringPtrOutput `pulumi:"packageUrl"`
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion pulumi.StringOutput `pulumi:"packageVersion"`
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation pulumi.StringPtrOutput `pulumi:"phpArmsConfigLocation"`
	// PHP configuration file content.
	PhpConfig pulumi.StringPtrOutput `pulumi:"phpConfig"`
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation pulumi.StringPtrOutput `pulumi:"phpConfigLocation"`
	// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PostStart pulumi.StringPtrOutput `pulumi:"postStart"`
	// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PreStop pulumi.StringPtrOutput `pulumi:"preStop"`
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
	Readiness pulumi.StringPtrOutput `pulumi:"readiness"`
	// Initial number of instances.
	Replicas pulumi.IntOutput `pulumi:"replicas"`
	// Security group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// SLS  configuration.
	SlsConfigs pulumi.StringPtrOutput `pulumi:"slsConfigs"`
	// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
	TerminationGracePeriodSeconds pulumi.IntOutput `pulumi:"terminationGracePeriodSeconds"`
	// Time zone, the default value is Asia/Shanghai.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
	TomcatConfig pulumi.StringPtrOutput `pulumi:"tomcatConfig"`
	// The update strategy.
	UpdateStrategy pulumi.StringOutput `pulumi:"updateStrategy"`
	// Application version id.
	VersionId pulumi.StringPtrOutput `pulumi:"versionId"`
	// The vpc id.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId pulumi.StringPtrOutput `pulumi:"vswitchId"`
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions pulumi.StringPtrOutput `pulumi:"warStartOptions"`
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer pulumi.StringPtrOutput `pulumi:"webContainer"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.PackageType == nil {
		return nil, errors.New("invalid value for required argument 'PackageType'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.OssAkId != nil {
		args.OssAkId = pulumi.ToSecret(args.OssAkId).(pulumi.StringPtrInput)
	}
	if args.OssAkSecret != nil {
		args.OssAkSecret = pulumi.ToSecret(args.OssAkSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ossAkId",
		"ossAkSecret",
	})
	opts = append(opts, secrets)
	var resource Application
	err := ctx.RegisterResource("alicloud:sae/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("alicloud:sae/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrAssumeRoleArn *string `pulumi:"acrAssumeRoleArn"`
	// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrInstanceId *string `pulumi:"acrInstanceId"`
	// Application description information. No more than 1024 characters.
	AppDescription *string `pulumi:"appDescription"`
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName *string `pulumi:"appName"`
	// The auto config. Valid values: `false`, `true`.
	AutoConfig *bool `pulumi:"autoConfig"`
	// The auto enable application scaling rule. Valid values: `false`, `true`.
	AutoEnableApplicationScalingRule *bool `pulumi:"autoEnableApplicationScalingRule"`
	// The batch wait time.
	BatchWaitTime *int `pulumi:"batchWaitTime"`
	// The change order desc.
	ChangeOrderDesc *string `pulumi:"changeOrderDesc"`
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command *string `pulumi:"command"`
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs *string `pulumi:"commandArgs"`
	// ConfigMap mount description.
	ConfigMapMountDesc *string `pulumi:"configMapMountDesc"`
	// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
	Cpu *int `pulumi:"cpu"`
	// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
	CustomHostAlias *string `pulumi:"customHostAlias"`
	// The deploy. Valid values: `false`, `true`.
	Deploy *bool `pulumi:"deploy"`
	// The operating environment used by the Pandora application.
	EdasContainerVersion *string `pulumi:"edasContainerVersion"`
	// The enable ahas.
	EnableAhas *string `pulumi:"enableAhas"`
	// The enable grey tag route.
	EnableGreyTagRoute *bool `pulumi:"enableGreyTagRoute"`
	// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
	Envs *string `pulumi:"envs"`
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl *string `pulumi:"imageUrl"`
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs *string `pulumi:"jarStartArgs"`
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions *string `pulumi:"jarStartOptions"`
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk *string `pulumi:"jdk"`
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness *string `pulumi:"liveness"`
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
	Memory *int `pulumi:"memory"`
	// Select the Nacos registry. Valid values: `0`, `1`, `2`.
	MicroRegistration *string `pulumi:"microRegistration"`
	// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
	// * `-1`: Initialization value, indicating that percentages are not used.
	// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
	MinReadyInstanceRatio *int `pulumi:"minReadyInstanceRatio"`
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances *int `pulumi:"minReadyInstances"`
	// Mount description.
	MountDesc *string `pulumi:"mountDesc"`
	// Mount point of NAS in application VPC.
	MountHost *string `pulumi:"mountHost"`
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId *string `pulumi:"namespaceId"`
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId *string `pulumi:"nasId"`
	// OSS AccessKey ID.
	OssAkId *string `pulumi:"ossAkId"`
	// OSS  AccessKey Secret.
	OssAkSecret *string `pulumi:"ossAkSecret"`
	// OSS mount description information.
	OssMountDescs *string `pulumi:"ossMountDescs"`
	// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
	PackageType *string `pulumi:"packageType"`
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl *string `pulumi:"packageUrl"`
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion *string `pulumi:"packageVersion"`
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation *string `pulumi:"phpArmsConfigLocation"`
	// PHP configuration file content.
	PhpConfig *string `pulumi:"phpConfig"`
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation *string `pulumi:"phpConfigLocation"`
	// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PostStart *string `pulumi:"postStart"`
	// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PreStop *string `pulumi:"preStop"`
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
	Readiness *string `pulumi:"readiness"`
	// Initial number of instances.
	Replicas *int `pulumi:"replicas"`
	// Security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// SLS  configuration.
	SlsConfigs *string `pulumi:"slsConfigs"`
	// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Time zone, the default value is Asia/Shanghai.
	Timezone *string `pulumi:"timezone"`
	// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
	TomcatConfig *string `pulumi:"tomcatConfig"`
	// The update strategy.
	UpdateStrategy *string `pulumi:"updateStrategy"`
	// Application version id.
	VersionId *string `pulumi:"versionId"`
	// The vpc id.
	VpcId *string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId *string `pulumi:"vswitchId"`
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions *string `pulumi:"warStartOptions"`
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer *string `pulumi:"webContainer"`
}

type ApplicationState struct {
	// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrAssumeRoleArn pulumi.StringPtrInput
	// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrInstanceId pulumi.StringPtrInput
	// Application description information. No more than 1024 characters.
	AppDescription pulumi.StringPtrInput
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName pulumi.StringPtrInput
	// The auto config. Valid values: `false`, `true`.
	AutoConfig pulumi.BoolPtrInput
	// The auto enable application scaling rule. Valid values: `false`, `true`.
	AutoEnableApplicationScalingRule pulumi.BoolPtrInput
	// The batch wait time.
	BatchWaitTime pulumi.IntPtrInput
	// The change order desc.
	ChangeOrderDesc pulumi.StringPtrInput
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command pulumi.StringPtrInput
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs pulumi.StringPtrInput
	// ConfigMap mount description.
	ConfigMapMountDesc pulumi.StringPtrInput
	// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
	Cpu pulumi.IntPtrInput
	// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
	CustomHostAlias pulumi.StringPtrInput
	// The deploy. Valid values: `false`, `true`.
	Deploy pulumi.BoolPtrInput
	// The operating environment used by the Pandora application.
	EdasContainerVersion pulumi.StringPtrInput
	// The enable ahas.
	EnableAhas pulumi.StringPtrInput
	// The enable grey tag route.
	EnableGreyTagRoute pulumi.BoolPtrInput
	// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
	Envs pulumi.StringPtrInput
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl pulumi.StringPtrInput
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs pulumi.StringPtrInput
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions pulumi.StringPtrInput
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk pulumi.StringPtrInput
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness pulumi.StringPtrInput
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
	Memory pulumi.IntPtrInput
	// Select the Nacos registry. Valid values: `0`, `1`, `2`.
	MicroRegistration pulumi.StringPtrInput
	// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
	// * `-1`: Initialization value, indicating that percentages are not used.
	// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
	MinReadyInstanceRatio pulumi.IntPtrInput
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances pulumi.IntPtrInput
	// Mount description.
	MountDesc pulumi.StringPtrInput
	// Mount point of NAS in application VPC.
	MountHost pulumi.StringPtrInput
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId pulumi.StringPtrInput
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrInput
	// OSS AccessKey ID.
	OssAkId pulumi.StringPtrInput
	// OSS  AccessKey Secret.
	OssAkSecret pulumi.StringPtrInput
	// OSS mount description information.
	OssMountDescs pulumi.StringPtrInput
	// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
	PackageType pulumi.StringPtrInput
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl pulumi.StringPtrInput
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion pulumi.StringPtrInput
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation pulumi.StringPtrInput
	// PHP configuration file content.
	PhpConfig pulumi.StringPtrInput
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation pulumi.StringPtrInput
	// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PostStart pulumi.StringPtrInput
	// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PreStop pulumi.StringPtrInput
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
	Readiness pulumi.StringPtrInput
	// Initial number of instances.
	Replicas pulumi.IntPtrInput
	// Security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// SLS  configuration.
	SlsConfigs pulumi.StringPtrInput
	// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
	TerminationGracePeriodSeconds pulumi.IntPtrInput
	// Time zone, the default value is Asia/Shanghai.
	Timezone pulumi.StringPtrInput
	// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
	TomcatConfig pulumi.StringPtrInput
	// The update strategy.
	UpdateStrategy pulumi.StringPtrInput
	// Application version id.
	VersionId pulumi.StringPtrInput
	// The vpc id.
	VpcId pulumi.StringPtrInput
	// The vswitch id.
	VswitchId pulumi.StringPtrInput
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions pulumi.StringPtrInput
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrAssumeRoleArn *string `pulumi:"acrAssumeRoleArn"`
	// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrInstanceId *string `pulumi:"acrInstanceId"`
	// Application description information. No more than 1024 characters.
	AppDescription *string `pulumi:"appDescription"`
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName string `pulumi:"appName"`
	// The auto config. Valid values: `false`, `true`.
	AutoConfig *bool `pulumi:"autoConfig"`
	// The auto enable application scaling rule. Valid values: `false`, `true`.
	AutoEnableApplicationScalingRule *bool `pulumi:"autoEnableApplicationScalingRule"`
	// The batch wait time.
	BatchWaitTime *int `pulumi:"batchWaitTime"`
	// The change order desc.
	ChangeOrderDesc *string `pulumi:"changeOrderDesc"`
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command *string `pulumi:"command"`
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs *string `pulumi:"commandArgs"`
	// ConfigMap mount description.
	ConfigMapMountDesc *string `pulumi:"configMapMountDesc"`
	// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
	Cpu *int `pulumi:"cpu"`
	// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
	CustomHostAlias *string `pulumi:"customHostAlias"`
	// The deploy. Valid values: `false`, `true`.
	Deploy *bool `pulumi:"deploy"`
	// The operating environment used by the Pandora application.
	EdasContainerVersion *string `pulumi:"edasContainerVersion"`
	// The enable ahas.
	EnableAhas *string `pulumi:"enableAhas"`
	// The enable grey tag route.
	EnableGreyTagRoute *bool `pulumi:"enableGreyTagRoute"`
	// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
	Envs *string `pulumi:"envs"`
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl *string `pulumi:"imageUrl"`
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs *string `pulumi:"jarStartArgs"`
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions *string `pulumi:"jarStartOptions"`
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk *string `pulumi:"jdk"`
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness *string `pulumi:"liveness"`
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
	Memory *int `pulumi:"memory"`
	// Select the Nacos registry. Valid values: `0`, `1`, `2`.
	MicroRegistration *string `pulumi:"microRegistration"`
	// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
	// * `-1`: Initialization value, indicating that percentages are not used.
	// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
	MinReadyInstanceRatio *int `pulumi:"minReadyInstanceRatio"`
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances *int `pulumi:"minReadyInstances"`
	// Mount description.
	MountDesc *string `pulumi:"mountDesc"`
	// Mount point of NAS in application VPC.
	MountHost *string `pulumi:"mountHost"`
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId *string `pulumi:"namespaceId"`
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId *string `pulumi:"nasId"`
	// OSS AccessKey ID.
	OssAkId *string `pulumi:"ossAkId"`
	// OSS  AccessKey Secret.
	OssAkSecret *string `pulumi:"ossAkSecret"`
	// OSS mount description information.
	OssMountDescs *string `pulumi:"ossMountDescs"`
	// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
	PackageType string `pulumi:"packageType"`
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl *string `pulumi:"packageUrl"`
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion *string `pulumi:"packageVersion"`
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation *string `pulumi:"phpArmsConfigLocation"`
	// PHP configuration file content.
	PhpConfig *string `pulumi:"phpConfig"`
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation *string `pulumi:"phpConfigLocation"`
	// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PostStart *string `pulumi:"postStart"`
	// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PreStop *string `pulumi:"preStop"`
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
	Readiness *string `pulumi:"readiness"`
	// Initial number of instances.
	Replicas int `pulumi:"replicas"`
	// Security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// SLS  configuration.
	SlsConfigs *string `pulumi:"slsConfigs"`
	// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Time zone, the default value is Asia/Shanghai.
	Timezone *string `pulumi:"timezone"`
	// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
	TomcatConfig *string `pulumi:"tomcatConfig"`
	// The update strategy.
	UpdateStrategy *string `pulumi:"updateStrategy"`
	// Application version id.
	VersionId *string `pulumi:"versionId"`
	// The vpc id.
	VpcId *string `pulumi:"vpcId"`
	// The vswitch id.
	VswitchId *string `pulumi:"vswitchId"`
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions *string `pulumi:"warStartOptions"`
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer *string `pulumi:"webContainer"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrAssumeRoleArn pulumi.StringPtrInput
	// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
	AcrInstanceId pulumi.StringPtrInput
	// Application description information. No more than 1024 characters.
	AppDescription pulumi.StringPtrInput
	// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
	AppName pulumi.StringInput
	// The auto config. Valid values: `false`, `true`.
	AutoConfig pulumi.BoolPtrInput
	// The auto enable application scaling rule. Valid values: `false`, `true`.
	AutoEnableApplicationScalingRule pulumi.BoolPtrInput
	// The batch wait time.
	BatchWaitTime pulumi.IntPtrInput
	// The change order desc.
	ChangeOrderDesc pulumi.StringPtrInput
	// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
	Command pulumi.StringPtrInput
	// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
	CommandArgs pulumi.StringPtrInput
	// ConfigMap mount description.
	ConfigMapMountDesc pulumi.StringPtrInput
	// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
	Cpu pulumi.IntPtrInput
	// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
	CustomHostAlias pulumi.StringPtrInput
	// The deploy. Valid values: `false`, `true`.
	Deploy pulumi.BoolPtrInput
	// The operating environment used by the Pandora application.
	EdasContainerVersion pulumi.StringPtrInput
	// The enable ahas.
	EnableAhas pulumi.StringPtrInput
	// The enable grey tag route.
	EnableGreyTagRoute pulumi.BoolPtrInput
	// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
	Envs pulumi.StringPtrInput
	// Mirror address. Only Image type applications can configure the mirror address.
	ImageUrl pulumi.StringPtrInput
	// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartArgs pulumi.StringPtrInput
	// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
	JarStartOptions pulumi.StringPtrInput
	// The JDK version that the deployment package depends on. Image type applications are not supported.
	Jdk pulumi.StringPtrInput
	// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
	Liveness pulumi.StringPtrInput
	// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
	Memory pulumi.IntPtrInput
	// Select the Nacos registry. Valid values: `0`, `1`, `2`.
	MicroRegistration pulumi.StringPtrInput
	// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
	// * `-1`: Initialization value, indicating that percentages are not used.
	// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
	MinReadyInstanceRatio pulumi.IntPtrInput
	// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
	MinReadyInstances pulumi.IntPtrInput
	// Mount description.
	MountDesc pulumi.StringPtrInput
	// Mount point of NAS in application VPC.
	MountHost pulumi.StringPtrInput
	// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
	NamespaceId pulumi.StringPtrInput
	// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
	NasId pulumi.StringPtrInput
	// OSS AccessKey ID.
	OssAkId pulumi.StringPtrInput
	// OSS  AccessKey Secret.
	OssAkSecret pulumi.StringPtrInput
	// OSS mount description information.
	OssMountDescs pulumi.StringPtrInput
	// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
	PackageType pulumi.StringInput
	// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
	PackageUrl pulumi.StringPtrInput
	// The version number of the deployment package. Required when the Package Type is War and FatJar.
	PackageVersion pulumi.StringPtrInput
	// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
	PhpArmsConfigLocation pulumi.StringPtrInput
	// PHP configuration file content.
	PhpConfig pulumi.StringPtrInput
	// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
	PhpConfigLocation pulumi.StringPtrInput
	// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PostStart pulumi.StringPtrInput
	// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
	PreStop pulumi.StringPtrInput
	// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
	Readiness pulumi.StringPtrInput
	// Initial number of instances.
	Replicas pulumi.IntInput
	// Security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// SLS  configuration.
	SlsConfigs pulumi.StringPtrInput
	// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
	TerminationGracePeriodSeconds pulumi.IntPtrInput
	// Time zone, the default value is Asia/Shanghai.
	Timezone pulumi.StringPtrInput
	// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
	TomcatConfig pulumi.StringPtrInput
	// The update strategy.
	UpdateStrategy pulumi.StringPtrInput
	// Application version id.
	VersionId pulumi.StringPtrInput
	// The vpc id.
	VpcId pulumi.StringPtrInput
	// The vswitch id.
	VswitchId pulumi.StringPtrInput
	// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
	WarStartOptions pulumi.StringPtrInput
	// The version of tomcat that the deployment package depends on. Image type applications are not supported.
	WebContainer pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The ARN of the RAM role required when pulling images across accounts. Only necessary if the imageUrl is pointing to an ACR EE instance.
func (o ApplicationOutput) AcrAssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.AcrAssumeRoleArn }).(pulumi.StringPtrOutput)
}

// The ID of the ACR EE instance. Only necessary if the imageUrl is pointing to an ACR EE instance.
func (o ApplicationOutput) AcrInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.AcrInstanceId }).(pulumi.StringPtrOutput)
}

// Application description information. No more than 1024 characters.
func (o ApplicationOutput) AppDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.AppDescription }).(pulumi.StringPtrOutput)
}

// Application Name. Combinations of numbers, letters, and dashes (-) are allowed. It must start with a letter and the maximum length is 36 characters.
func (o ApplicationOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// The auto config. Valid values: `false`, `true`.
func (o ApplicationOutput) AutoConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.AutoConfig }).(pulumi.BoolPtrOutput)
}

// The auto enable application scaling rule. Valid values: `false`, `true`.
func (o ApplicationOutput) AutoEnableApplicationScalingRule() pulumi.BoolOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolOutput { return v.AutoEnableApplicationScalingRule }).(pulumi.BoolOutput)
}

// The batch wait time.
func (o ApplicationOutput) BatchWaitTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Application) pulumi.IntOutput { return v.BatchWaitTime }).(pulumi.IntOutput)
}

// The change order desc.
func (o ApplicationOutput) ChangeOrderDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ChangeOrderDesc }).(pulumi.StringOutput)
}

// Mirror start command. The command must be an executable object in the container. For example: sleep. Setting this command will cause the original startup command of the mirror to become invalid.
func (o ApplicationOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Command }).(pulumi.StringPtrOutput)
}

// Mirror startup command parameters. The parameters required for the above start command. For example: 1d.
func (o ApplicationOutput) CommandArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.CommandArgs }).(pulumi.StringPtrOutput)
}

// ConfigMap mount description.
func (o ApplicationOutput) ConfigMapMountDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ConfigMapMountDesc }).(pulumi.StringOutput)
}

// The CPU required for each instance, in millicores, cannot be 0. Valid values: `1000`, `16000`, `2000`, `32000`, `4000`, `500`, `8000`.
func (o ApplicationOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.Cpu }).(pulumi.IntPtrOutput)
}

// Custom host mapping in the container. For example: [{`hostName`:`samplehost`,`ip`:`127.0.0.1`}].
func (o ApplicationOutput) CustomHostAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CustomHostAlias }).(pulumi.StringOutput)
}

// The deploy. Valid values: `false`, `true`.
func (o ApplicationOutput) Deploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.Deploy }).(pulumi.BoolPtrOutput)
}

// The operating environment used by the Pandora application.
func (o ApplicationOutput) EdasContainerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.EdasContainerVersion }).(pulumi.StringPtrOutput)
}

// The enable ahas.
func (o ApplicationOutput) EnableAhas() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.EnableAhas }).(pulumi.StringOutput)
}

// The enable grey tag route.
func (o ApplicationOutput) EnableGreyTagRoute() pulumi.BoolOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolOutput { return v.EnableGreyTagRoute }).(pulumi.BoolOutput)
}

// Container environment variable parameters. For example,`	[{"name":"envtmp","value":"0"}]`. The value description is as follows:
func (o ApplicationOutput) Envs() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Envs }).(pulumi.StringOutput)
}

// Mirror address. Only Image type applications can configure the mirror address.
func (o ApplicationOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// The JAR package starts application parameters. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
func (o ApplicationOutput) JarStartArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.JarStartArgs }).(pulumi.StringPtrOutput)
}

// The JAR package starts the application option. Application default startup command: $JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs.
func (o ApplicationOutput) JarStartOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.JarStartOptions }).(pulumi.StringPtrOutput)
}

// The JDK version that the deployment package depends on. Image type applications are not supported.
func (o ApplicationOutput) Jdk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Jdk }).(pulumi.StringPtrOutput)
}

// Container health check. Containers that fail the health check will be shut down and restored. Currently, only the method of issuing commands in the container is supported.
func (o ApplicationOutput) Liveness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Liveness }).(pulumi.StringPtrOutput)
}

// The memory required for each instance, in MB, cannot be 0. One-to-one correspondence with CPU. Valid values: `1024`, `131072`, `16384`, `2048`, `32768`, `4096`, `65536`, `8192`.
func (o ApplicationOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.Memory }).(pulumi.IntPtrOutput)
}

// Select the Nacos registry. Valid values: `0`, `1`, `2`.
func (o ApplicationOutput) MicroRegistration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.MicroRegistration }).(pulumi.StringPtrOutput)
}

// Minimum Survival Instance Percentage. **NOTE:** When `minReadyInstances` and `minReadyInstanceRatio` are passed at the same time, and the value of `minReadyInstanceRatio` is not -1, the `minReadyInstanceRatio` parameter shall prevail. Assuming that `minReadyInstances` is 5 and `minReadyInstanceRatio` is 50, 50 is used to calculate the minimum number of surviving instances.The value description is as follows:
// * `-1`: Initialization value, indicating that percentages are not used.
// * `0~100`: The unit is percentage, rounded up. For example, if it is set to 50%, if there are currently 5 instances, the minimum number of surviving instances is 3.
func (o ApplicationOutput) MinReadyInstanceRatio() pulumi.IntOutput {
	return o.ApplyT(func(v *Application) pulumi.IntOutput { return v.MinReadyInstanceRatio }).(pulumi.IntOutput)
}

// The Minimum Available Instance. On the Change Had Promised during the Available Number of Instances to Be.
func (o ApplicationOutput) MinReadyInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *Application) pulumi.IntOutput { return v.MinReadyInstances }).(pulumi.IntOutput)
}

// Mount description.
func (o ApplicationOutput) MountDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.MountDesc }).(pulumi.StringPtrOutput)
}

// Mount point of NAS in application VPC.
func (o ApplicationOutput) MountHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.MountHost }).(pulumi.StringPtrOutput)
}

// SAE namespace ID. Only namespaces whose names are lowercase letters and dashes (-) are supported, and must start with a letter. The namespace can be obtained by calling the DescribeNamespaceList interface.
func (o ApplicationOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// ID of the mounted NAS, Must be in the same region as the cluster. It must have an available mount point creation quota, or its mount point must be on a switch in the VPC. If it is not filled in and the mountDescs field is present, a NAS will be automatically purchased and mounted on the switch in the VPC by default.
func (o ApplicationOutput) NasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.NasId }).(pulumi.StringPtrOutput)
}

// OSS AccessKey ID.
func (o ApplicationOutput) OssAkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.OssAkId }).(pulumi.StringPtrOutput)
}

// OSS  AccessKey Secret.
func (o ApplicationOutput) OssAkSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.OssAkSecret }).(pulumi.StringPtrOutput)
}

// OSS mount description information.
func (o ApplicationOutput) OssMountDescs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.OssMountDescs }).(pulumi.StringPtrOutput)
}

// Application package type. Support FatJar, War and Image. Valid values: `FatJar`, `Image`, `War`.
func (o ApplicationOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.PackageType }).(pulumi.StringOutput)
}

// Deployment package address. Only FatJar or War type applications can configure the deployment package address.
func (o ApplicationOutput) PackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PackageUrl }).(pulumi.StringPtrOutput)
}

// The version number of the deployment package. Required when the Package Type is War and FatJar.
func (o ApplicationOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.PackageVersion }).(pulumi.StringOutput)
}

// The PHP application monitors the mount path, and you need to ensure that the PHP server will load the configuration file of this path. You don't need to pay attention to the configuration content, SAE will automatically render the correct configuration file.
func (o ApplicationOutput) PhpArmsConfigLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PhpArmsConfigLocation }).(pulumi.StringPtrOutput)
}

// PHP configuration file content.
func (o ApplicationOutput) PhpConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PhpConfig }).(pulumi.StringPtrOutput)
}

// PHP application startup configuration mount path, you need to ensure that the PHP server will start using this configuration file.
func (o ApplicationOutput) PhpConfigLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PhpConfigLocation }).(pulumi.StringPtrOutput)
}

// Execute the script after startup, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
func (o ApplicationOutput) PostStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PostStart }).(pulumi.StringPtrOutput)
}

// Execute the script before stopping, the format is like: {`exec`:{`command`:[`cat`,"/etc/group"]}}.
func (o ApplicationOutput) PreStop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PreStop }).(pulumi.StringPtrOutput)
}

// Application startup status checks, containers that fail multiple health checks will be shut down and restarted. Containers that do not pass the health check will not receive SLB traffic. For example: {`exec`:{`command`:[`sh`,"-c","cat /home/admin/start.sh"]},`initialDelaySeconds`:30,`periodSeconds`:30,"timeoutSeconds ":2}. Valid values: `command`, `initialDelaySeconds`, `periodSeconds`, `timeoutSeconds`.
func (o ApplicationOutput) Readiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Readiness }).(pulumi.StringPtrOutput)
}

// Initial number of instances.
func (o ApplicationOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Application) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

// Security group ID.
func (o ApplicationOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// SLS  configuration.
func (o ApplicationOutput) SlsConfigs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SlsConfigs }).(pulumi.StringPtrOutput)
}

// The status of the resource. Valid values: `RUNNING`, `STOPPED`.
func (o ApplicationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ApplicationOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Application) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Graceful offline timeout, the default is 30, the unit is seconds. The value range is 1~60. Valid values: [1,60].
func (o ApplicationOutput) TerminationGracePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Application) pulumi.IntOutput { return v.TerminationGracePeriodSeconds }).(pulumi.IntOutput)
}

// Time zone, the default value is Asia/Shanghai.
func (o ApplicationOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Tomcat file configuration, set to "{}" means to delete the configuration:  useDefaultConfig: Whether to use a custom configuration, if it is true, it means that the custom configuration is not used; if it is false, it means that the custom configuration is used. If you do not use custom configuration, the following parameter configuration will not take effect.  contextInputType: Select the access path of the application.  war: No need to fill in the custom path, the access path of the application is the WAR package name. root: No need to fill in the custom path, the access path of the application is /. custom: You need to fill in the custom path in the custom path below. contextPath: custom path, this parameter only needs to be configured when the contextInputType type is custom.  httpPort: The port range is 1024~65535. Ports less than 1024 need Root permission to operate. Because the container is configured with Admin permissions, please fill in a port greater than 1024. If not configured, the default is 8080. maxThreads: Configure the number of connections in the connection pool, the default size is 400. uriEncoding: Tomcat encoding format, including UTF-8, ISO-8859-1, GBK and GB2312. If not set, the default is ISO-8859-1. useBodyEncoding: Whether to use BodyEncoding for URL. Valid values: `contextInputType`, `contextPath`, `httpPort`, `maxThreads`, `uriEncoding`, `useBodyEncoding`, `useDefaultConfig`.
func (o ApplicationOutput) TomcatConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.TomcatConfig }).(pulumi.StringPtrOutput)
}

// The update strategy.
func (o ApplicationOutput) UpdateStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.UpdateStrategy }).(pulumi.StringOutput)
}

// Application version id.
func (o ApplicationOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.VersionId }).(pulumi.StringPtrOutput)
}

// The vpc id.
func (o ApplicationOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The vswitch id.
func (o ApplicationOutput) VswitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.VswitchId }).(pulumi.StringPtrOutput)
}

// WAR package launch application option. Application default startup command: java $JAVA_OPTS $CATALINA_OPTS [-Options] org.apache.catalina.startup.Bootstrap "$@" start.
func (o ApplicationOutput) WarStartOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.WarStartOptions }).(pulumi.StringPtrOutput)
}

// The version of tomcat that the deployment package depends on. Image type applications are not supported.
func (o ApplicationOutput) WebContainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.WebContainer }).(pulumi.StringPtrOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
