// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Message Service Event Rule resource.
//
// For information about Message Service Event Rule and how to use it, see [What is Event Rule](https://next.api.alibabacloud.com/document/Mns-open/2022-01-19/CreateEventRule).
//
// > **NOTE:** Available since v1.255.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/message"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			queueName := "tf-exampe-topic2queue"
//			if param := cfg.Get("queueName"); param != "" {
//				queueName = param
//			}
//			ruleName := "tf-exampe-topic-1"
//			if param := cfg.Get("ruleName"); param != "" {
//				ruleName = param
//			}
//			topicName := "tf-exampe-topic2queue"
//			if param := cfg.Get("topicName"); param != "" {
//				topicName = param
//			}
//			createTopic, err := message.NewServiceTopic(ctx, "CreateTopic", &message.ServiceTopicArgs{
//				MaxMessageSize: pulumi.Int(65536),
//				TopicName:      pulumi.String(topicName),
//				LoggingEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			createQueue, err := message.NewServiceQueue(ctx, "CreateQueue", &message.ServiceQueueArgs{
//				DelaySeconds:           pulumi.Int(2),
//				PollingWaitSeconds:     pulumi.Int(2),
//				MessageRetentionPeriod: pulumi.Int(566),
//				MaximumMessageSize:     pulumi.Int(1123),
//				VisibilityTimeout:      pulumi.Int(30),
//				QueueName:              pulumi.String(queueName),
//				LoggingEnabled:         pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFormat, err := std.Format(ctx, &std.FormatArgs{
//				Input: "acs:mns:cn-hangzhou:1511928242963727:/queues/%s",
//				Args: pulumi.StringArray{
//					createQueue.ID(),
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			createSub, err := message.NewServiceSubscription(ctx, "CreateSub", &message.ServiceSubscriptionArgs{
//				PushType:            pulumi.String("queue"),
//				NotifyStrategy:      pulumi.String("BACKOFF_RETRY"),
//				NotifyContentFormat: pulumi.String("SIMPLIFIED"),
//				SubscriptionName:    pulumi.String("RDK-example-sub"),
//				FilterTag:           pulumi.String("important"),
//				TopicName:           createTopic.TopicName,
//				Endpoint:            pulumi.String(invokeFormat.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = message.NewServiceEventRule(ctx, "default", &message.ServiceEventRuleArgs{
//				EventTypes: pulumi.StringArray{
//					pulumi.String("ObjectCreated:PutObject"),
//				},
//				MatchRules: message.ServiceEventRuleMatchRuleArrayArray{
//					message.ServiceEventRuleMatchRuleArray{
//						&message.ServiceEventRuleMatchRuleArgs{
//							Suffix:     pulumi.String(""),
//							MatchState: pulumi.String("true"),
//							Name:       pulumi.String("acs:oss:cn-hangzhou:1511928242963727:accccx"),
//							Prefix:     pulumi.String(""),
//						},
//					},
//				},
//				Endpoint: &message.ServiceEventRuleEndpointArgs{
//					EndpointValue: createSub.TopicName,
//					EndpointType:  pulumi.String("topic"),
//				},
//				RuleName: pulumi.String(ruleName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Message Service Event Rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:message/serviceEventRule:ServiceEventRule example <id>
// ```
type ServiceEventRule struct {
	pulumi.CustomResourceState

	// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
	// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
	DeliveryMode pulumi.StringOutput `pulumi:"deliveryMode"`
	// Message Receiving Terminal Endpoint Object. See `endpoint` below.
	Endpoint ServiceEventRuleEndpointPtrOutput `pulumi:"endpoint"`
	// Event Type List
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// Matching rules, or relationships between multiple rules. See `matchRules` below.
	MatchRules ServiceEventRuleMatchRuleArrayArrayOutput `pulumi:"matchRules"`
	// The event notification rule name.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
}

// NewServiceEventRule registers a new resource with the given unique name, arguments, and options.
func NewServiceEventRule(ctx *pulumi.Context,
	name string, args *ServiceEventRuleArgs, opts ...pulumi.ResourceOption) (*ServiceEventRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceEventRule
	err := ctx.RegisterResource("alicloud:message/serviceEventRule:ServiceEventRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEventRule gets an existing ServiceEventRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEventRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEventRuleState, opts ...pulumi.ResourceOption) (*ServiceEventRule, error) {
	var resource ServiceEventRule
	err := ctx.ReadResource("alicloud:message/serviceEventRule:ServiceEventRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEventRule resources.
type serviceEventRuleState struct {
	// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
	// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
	DeliveryMode *string `pulumi:"deliveryMode"`
	// Message Receiving Terminal Endpoint Object. See `endpoint` below.
	Endpoint *ServiceEventRuleEndpoint `pulumi:"endpoint"`
	// Event Type List
	EventTypes []string `pulumi:"eventTypes"`
	// Matching rules, or relationships between multiple rules. See `matchRules` below.
	MatchRules [][]ServiceEventRuleMatchRule `pulumi:"matchRules"`
	// The event notification rule name.
	RuleName *string `pulumi:"ruleName"`
}

type ServiceEventRuleState struct {
	// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
	// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
	DeliveryMode pulumi.StringPtrInput
	// Message Receiving Terminal Endpoint Object. See `endpoint` below.
	Endpoint ServiceEventRuleEndpointPtrInput
	// Event Type List
	EventTypes pulumi.StringArrayInput
	// Matching rules, or relationships between multiple rules. See `matchRules` below.
	MatchRules ServiceEventRuleMatchRuleArrayArrayInput
	// The event notification rule name.
	RuleName pulumi.StringPtrInput
}

func (ServiceEventRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEventRuleState)(nil)).Elem()
}

type serviceEventRuleArgs struct {
	// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
	// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
	DeliveryMode *string `pulumi:"deliveryMode"`
	// Message Receiving Terminal Endpoint Object. See `endpoint` below.
	Endpoint *ServiceEventRuleEndpoint `pulumi:"endpoint"`
	// Event Type List
	EventTypes []string `pulumi:"eventTypes"`
	// Matching rules, or relationships between multiple rules. See `matchRules` below.
	MatchRules [][]ServiceEventRuleMatchRule `pulumi:"matchRules"`
	// The event notification rule name.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a ServiceEventRule resource.
type ServiceEventRuleArgs struct {
	// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
	// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
	DeliveryMode pulumi.StringPtrInput
	// Message Receiving Terminal Endpoint Object. See `endpoint` below.
	Endpoint ServiceEventRuleEndpointPtrInput
	// Event Type List
	EventTypes pulumi.StringArrayInput
	// Matching rules, or relationships between multiple rules. See `matchRules` below.
	MatchRules ServiceEventRuleMatchRuleArrayArrayInput
	// The event notification rule name.
	RuleName pulumi.StringInput
}

func (ServiceEventRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEventRuleArgs)(nil)).Elem()
}

type ServiceEventRuleInput interface {
	pulumi.Input

	ToServiceEventRuleOutput() ServiceEventRuleOutput
	ToServiceEventRuleOutputWithContext(ctx context.Context) ServiceEventRuleOutput
}

func (*ServiceEventRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRule)(nil)).Elem()
}

func (i *ServiceEventRule) ToServiceEventRuleOutput() ServiceEventRuleOutput {
	return i.ToServiceEventRuleOutputWithContext(context.Background())
}

func (i *ServiceEventRule) ToServiceEventRuleOutputWithContext(ctx context.Context) ServiceEventRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleOutput)
}

// ServiceEventRuleArrayInput is an input type that accepts ServiceEventRuleArray and ServiceEventRuleArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleArrayInput` via:
//
//	ServiceEventRuleArray{ ServiceEventRuleArgs{...} }
type ServiceEventRuleArrayInput interface {
	pulumi.Input

	ToServiceEventRuleArrayOutput() ServiceEventRuleArrayOutput
	ToServiceEventRuleArrayOutputWithContext(context.Context) ServiceEventRuleArrayOutput
}

type ServiceEventRuleArray []ServiceEventRuleInput

func (ServiceEventRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEventRule)(nil)).Elem()
}

func (i ServiceEventRuleArray) ToServiceEventRuleArrayOutput() ServiceEventRuleArrayOutput {
	return i.ToServiceEventRuleArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleArray) ToServiceEventRuleArrayOutputWithContext(ctx context.Context) ServiceEventRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleArrayOutput)
}

// ServiceEventRuleMapInput is an input type that accepts ServiceEventRuleMap and ServiceEventRuleMapOutput values.
// You can construct a concrete instance of `ServiceEventRuleMapInput` via:
//
//	ServiceEventRuleMap{ "key": ServiceEventRuleArgs{...} }
type ServiceEventRuleMapInput interface {
	pulumi.Input

	ToServiceEventRuleMapOutput() ServiceEventRuleMapOutput
	ToServiceEventRuleMapOutputWithContext(context.Context) ServiceEventRuleMapOutput
}

type ServiceEventRuleMap map[string]ServiceEventRuleInput

func (ServiceEventRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEventRule)(nil)).Elem()
}

func (i ServiceEventRuleMap) ToServiceEventRuleMapOutput() ServiceEventRuleMapOutput {
	return i.ToServiceEventRuleMapOutputWithContext(context.Background())
}

func (i ServiceEventRuleMap) ToServiceEventRuleMapOutputWithContext(ctx context.Context) ServiceEventRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleMapOutput)
}

type ServiceEventRuleOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRule)(nil)).Elem()
}

func (o ServiceEventRuleOutput) ToServiceEventRuleOutput() ServiceEventRuleOutput {
	return o
}

func (o ServiceEventRuleOutput) ToServiceEventRuleOutputWithContext(ctx context.Context) ServiceEventRuleOutput {
	return o
}

// DIRECT: directly delivers to a single queue (1:1) without creating a Topic;
// - BROADCAST: BROADCAST to all subscription queues (1:N). You need to create a Topic;
func (o ServiceEventRuleOutput) DeliveryMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEventRule) pulumi.StringOutput { return v.DeliveryMode }).(pulumi.StringOutput)
}

// Message Receiving Terminal Endpoint Object. See `endpoint` below.
func (o ServiceEventRuleOutput) Endpoint() ServiceEventRuleEndpointPtrOutput {
	return o.ApplyT(func(v *ServiceEventRule) ServiceEventRuleEndpointPtrOutput { return v.Endpoint }).(ServiceEventRuleEndpointPtrOutput)
}

// Event Type List
func (o ServiceEventRuleOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEventRule) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// Matching rules, or relationships between multiple rules. See `matchRules` below.
func (o ServiceEventRuleOutput) MatchRules() ServiceEventRuleMatchRuleArrayArrayOutput {
	return o.ApplyT(func(v *ServiceEventRule) ServiceEventRuleMatchRuleArrayArrayOutput { return v.MatchRules }).(ServiceEventRuleMatchRuleArrayArrayOutput)
}

// The event notification rule name.
func (o ServiceEventRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEventRule) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

type ServiceEventRuleArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEventRule)(nil)).Elem()
}

func (o ServiceEventRuleArrayOutput) ToServiceEventRuleArrayOutput() ServiceEventRuleArrayOutput {
	return o
}

func (o ServiceEventRuleArrayOutput) ToServiceEventRuleArrayOutputWithContext(ctx context.Context) ServiceEventRuleArrayOutput {
	return o
}

func (o ServiceEventRuleArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceEventRule {
		return vs[0].([]*ServiceEventRule)[vs[1].(int)]
	}).(ServiceEventRuleOutput)
}

type ServiceEventRuleMapOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEventRule)(nil)).Elem()
}

func (o ServiceEventRuleMapOutput) ToServiceEventRuleMapOutput() ServiceEventRuleMapOutput {
	return o
}

func (o ServiceEventRuleMapOutput) ToServiceEventRuleMapOutputWithContext(ctx context.Context) ServiceEventRuleMapOutput {
	return o
}

func (o ServiceEventRuleMapOutput) MapIndex(k pulumi.StringInput) ServiceEventRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceEventRule {
		return vs[0].(map[string]*ServiceEventRule)[vs[1].(string)]
	}).(ServiceEventRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleInput)(nil)).Elem(), &ServiceEventRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleArrayInput)(nil)).Elem(), ServiceEventRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleMapInput)(nil)).Elem(), ServiceEventRuleMap{})
	pulumi.RegisterOutputType(ServiceEventRuleOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleMapOutput{})
}
