// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Message Service Endpoint can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:message/serviceEndpoint:ServiceEndpoint example <id>
// ```
type ServiceEndpoint struct {
	pulumi.CustomResourceState

	// Specifies whether the endpoint is enabled. Valid values:
	EndpointEnabled pulumi.BoolOutput `pulumi:"endpointEnabled"`
	// Access point type. Value:
	// - public: indicates a public access point. (Currently only public is supported)
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
}

// NewServiceEndpoint registers a new resource with the given unique name, arguments, and options.
func NewServiceEndpoint(ctx *pulumi.Context,
	name string, args *ServiceEndpointArgs, opts ...pulumi.ResourceOption) (*ServiceEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointEnabled == nil {
		return nil, errors.New("invalid value for required argument 'EndpointEnabled'")
	}
	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceEndpoint
	err := ctx.RegisterResource("alicloud:message/serviceEndpoint:ServiceEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEndpoint gets an existing ServiceEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEndpointState, opts ...pulumi.ResourceOption) (*ServiceEndpoint, error) {
	var resource ServiceEndpoint
	err := ctx.ReadResource("alicloud:message/serviceEndpoint:ServiceEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEndpoint resources.
type serviceEndpointState struct {
	// Specifies whether the endpoint is enabled. Valid values:
	EndpointEnabled *bool `pulumi:"endpointEnabled"`
	// Access point type. Value:
	// - public: indicates a public access point. (Currently only public is supported)
	EndpointType *string `pulumi:"endpointType"`
}

type ServiceEndpointState struct {
	// Specifies whether the endpoint is enabled. Valid values:
	EndpointEnabled pulumi.BoolPtrInput
	// Access point type. Value:
	// - public: indicates a public access point. (Currently only public is supported)
	EndpointType pulumi.StringPtrInput
}

func (ServiceEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointState)(nil)).Elem()
}

type serviceEndpointArgs struct {
	// Specifies whether the endpoint is enabled. Valid values:
	EndpointEnabled bool `pulumi:"endpointEnabled"`
	// Access point type. Value:
	// - public: indicates a public access point. (Currently only public is supported)
	EndpointType string `pulumi:"endpointType"`
}

// The set of arguments for constructing a ServiceEndpoint resource.
type ServiceEndpointArgs struct {
	// Specifies whether the endpoint is enabled. Valid values:
	EndpointEnabled pulumi.BoolInput
	// Access point type. Value:
	// - public: indicates a public access point. (Currently only public is supported)
	EndpointType pulumi.StringInput
}

func (ServiceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointArgs)(nil)).Elem()
}

type ServiceEndpointInput interface {
	pulumi.Input

	ToServiceEndpointOutput() ServiceEndpointOutput
	ToServiceEndpointOutputWithContext(ctx context.Context) ServiceEndpointOutput
}

func (*ServiceEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpoint)(nil)).Elem()
}

func (i *ServiceEndpoint) ToServiceEndpointOutput() ServiceEndpointOutput {
	return i.ToServiceEndpointOutputWithContext(context.Background())
}

func (i *ServiceEndpoint) ToServiceEndpointOutputWithContext(ctx context.Context) ServiceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointOutput)
}

// ServiceEndpointArrayInput is an input type that accepts ServiceEndpointArray and ServiceEndpointArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointArrayInput` via:
//
//	ServiceEndpointArray{ ServiceEndpointArgs{...} }
type ServiceEndpointArrayInput interface {
	pulumi.Input

	ToServiceEndpointArrayOutput() ServiceEndpointArrayOutput
	ToServiceEndpointArrayOutputWithContext(context.Context) ServiceEndpointArrayOutput
}

type ServiceEndpointArray []ServiceEndpointInput

func (ServiceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEndpoint)(nil)).Elem()
}

func (i ServiceEndpointArray) ToServiceEndpointArrayOutput() ServiceEndpointArrayOutput {
	return i.ToServiceEndpointArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointArray) ToServiceEndpointArrayOutputWithContext(ctx context.Context) ServiceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointArrayOutput)
}

// ServiceEndpointMapInput is an input type that accepts ServiceEndpointMap and ServiceEndpointMapOutput values.
// You can construct a concrete instance of `ServiceEndpointMapInput` via:
//
//	ServiceEndpointMap{ "key": ServiceEndpointArgs{...} }
type ServiceEndpointMapInput interface {
	pulumi.Input

	ToServiceEndpointMapOutput() ServiceEndpointMapOutput
	ToServiceEndpointMapOutputWithContext(context.Context) ServiceEndpointMapOutput
}

type ServiceEndpointMap map[string]ServiceEndpointInput

func (ServiceEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEndpoint)(nil)).Elem()
}

func (i ServiceEndpointMap) ToServiceEndpointMapOutput() ServiceEndpointMapOutput {
	return i.ToServiceEndpointMapOutputWithContext(context.Background())
}

func (i ServiceEndpointMap) ToServiceEndpointMapOutputWithContext(ctx context.Context) ServiceEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointMapOutput)
}

type ServiceEndpointOutput struct{ *pulumi.OutputState }

func (ServiceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpoint)(nil)).Elem()
}

func (o ServiceEndpointOutput) ToServiceEndpointOutput() ServiceEndpointOutput {
	return o
}

func (o ServiceEndpointOutput) ToServiceEndpointOutputWithContext(ctx context.Context) ServiceEndpointOutput {
	return o
}

// Specifies whether the endpoint is enabled. Valid values:
func (o ServiceEndpointOutput) EndpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceEndpoint) pulumi.BoolOutput { return v.EndpointEnabled }).(pulumi.BoolOutput)
}

// Access point type. Value:
// - public: indicates a public access point. (Currently only public is supported)
func (o ServiceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

type ServiceEndpointArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEndpoint)(nil)).Elem()
}

func (o ServiceEndpointArrayOutput) ToServiceEndpointArrayOutput() ServiceEndpointArrayOutput {
	return o
}

func (o ServiceEndpointArrayOutput) ToServiceEndpointArrayOutputWithContext(ctx context.Context) ServiceEndpointArrayOutput {
	return o
}

func (o ServiceEndpointArrayOutput) Index(i pulumi.IntInput) ServiceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceEndpoint {
		return vs[0].([]*ServiceEndpoint)[vs[1].(int)]
	}).(ServiceEndpointOutput)
}

type ServiceEndpointMapOutput struct{ *pulumi.OutputState }

func (ServiceEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEndpoint)(nil)).Elem()
}

func (o ServiceEndpointMapOutput) ToServiceEndpointMapOutput() ServiceEndpointMapOutput {
	return o
}

func (o ServiceEndpointMapOutput) ToServiceEndpointMapOutputWithContext(ctx context.Context) ServiceEndpointMapOutput {
	return o
}

func (o ServiceEndpointMapOutput) MapIndex(k pulumi.StringInput) ServiceEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceEndpoint {
		return vs[0].(map[string]*ServiceEndpoint)[vs[1].(string)]
	}).(ServiceEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointInput)(nil)).Elem(), &ServiceEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointArrayInput)(nil)).Elem(), ServiceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointMapInput)(nil)).Elem(), ServiceEndpointMap{})
	pulumi.RegisterOutputType(ServiceEndpointOutput{})
	pulumi.RegisterOutputType(ServiceEndpointArrayOutput{})
	pulumi.RegisterOutputType(ServiceEndpointMapOutput{})
}
