// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetServiceQueuesQueue struct {
	// The total number of messages that are in the Active state in the queue. The value is an approximate number.
	ActiveMessages int `pulumi:"activeMessages"`
	// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
	DelayMessages int `pulumi:"delayMessages"`
	// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
	DelaySeconds int `pulumi:"delaySeconds"`
	// The ID of the Queue. Its value is same as Queue Name.
	Id string `pulumi:"id"`
	// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
	InactiveMessages int `pulumi:"inactiveMessages"`
	// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled for the queue.
	LoggingEnabled bool `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the queue. Unit: bytes.
	MaximumMessageSize int `pulumi:"maximumMessageSize"`
	// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
	MessageRetentionPeriod int `pulumi:"messageRetentionPeriod"`
	// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
	PollingWaitSeconds int `pulumi:"pollingWaitSeconds"`
	// The internal url of the queue.
	QueueInternalUrl string `pulumi:"queueInternalUrl"`
	// The name of the queue.
	QueueName string `pulumi:"queueName"`
	// The url of the queue.
	QueueUrl string `pulumi:"queueUrl"`
	// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
	VisibilityTimeout int `pulumi:"visibilityTimeout"`
}

// GetServiceQueuesQueueInput is an input type that accepts GetServiceQueuesQueueArgs and GetServiceQueuesQueueOutput values.
// You can construct a concrete instance of `GetServiceQueuesQueueInput` via:
//
//	GetServiceQueuesQueueArgs{...}
type GetServiceQueuesQueueInput interface {
	pulumi.Input

	ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput
	ToGetServiceQueuesQueueOutputWithContext(context.Context) GetServiceQueuesQueueOutput
}

type GetServiceQueuesQueueArgs struct {
	// The total number of messages that are in the Active state in the queue. The value is an approximate number.
	ActiveMessages pulumi.IntInput `pulumi:"activeMessages"`
	// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
	DelayMessages pulumi.IntInput `pulumi:"delayMessages"`
	// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
	DelaySeconds pulumi.IntInput `pulumi:"delaySeconds"`
	// The ID of the Queue. Its value is same as Queue Name.
	Id pulumi.StringInput `pulumi:"id"`
	// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
	InactiveMessages pulumi.IntInput `pulumi:"inactiveMessages"`
	// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled for the queue.
	LoggingEnabled pulumi.BoolInput `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the queue. Unit: bytes.
	MaximumMessageSize pulumi.IntInput `pulumi:"maximumMessageSize"`
	// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
	MessageRetentionPeriod pulumi.IntInput `pulumi:"messageRetentionPeriod"`
	// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
	PollingWaitSeconds pulumi.IntInput `pulumi:"pollingWaitSeconds"`
	// The internal url of the queue.
	QueueInternalUrl pulumi.StringInput `pulumi:"queueInternalUrl"`
	// The name of the queue.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// The url of the queue.
	QueueUrl pulumi.StringInput `pulumi:"queueUrl"`
	// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
	VisibilityTimeout pulumi.IntInput `pulumi:"visibilityTimeout"`
}

func (GetServiceQueuesQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueuesQueue)(nil)).Elem()
}

func (i GetServiceQueuesQueueArgs) ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput {
	return i.ToGetServiceQueuesQueueOutputWithContext(context.Background())
}

func (i GetServiceQueuesQueueArgs) ToGetServiceQueuesQueueOutputWithContext(ctx context.Context) GetServiceQueuesQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueuesQueueOutput)
}

// GetServiceQueuesQueueArrayInput is an input type that accepts GetServiceQueuesQueueArray and GetServiceQueuesQueueArrayOutput values.
// You can construct a concrete instance of `GetServiceQueuesQueueArrayInput` via:
//
//	GetServiceQueuesQueueArray{ GetServiceQueuesQueueArgs{...} }
type GetServiceQueuesQueueArrayInput interface {
	pulumi.Input

	ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput
	ToGetServiceQueuesQueueArrayOutputWithContext(context.Context) GetServiceQueuesQueueArrayOutput
}

type GetServiceQueuesQueueArray []GetServiceQueuesQueueInput

func (GetServiceQueuesQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueuesQueue)(nil)).Elem()
}

func (i GetServiceQueuesQueueArray) ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput {
	return i.ToGetServiceQueuesQueueArrayOutputWithContext(context.Background())
}

func (i GetServiceQueuesQueueArray) ToGetServiceQueuesQueueArrayOutputWithContext(ctx context.Context) GetServiceQueuesQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueuesQueueArrayOutput)
}

type GetServiceQueuesQueueOutput struct{ *pulumi.OutputState }

func (GetServiceQueuesQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueuesQueue)(nil)).Elem()
}

func (o GetServiceQueuesQueueOutput) ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput {
	return o
}

func (o GetServiceQueuesQueueOutput) ToGetServiceQueuesQueueOutputWithContext(ctx context.Context) GetServiceQueuesQueueOutput {
	return o
}

// The total number of messages that are in the Active state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) ActiveMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.ActiveMessages }).(pulumi.IntOutput)
}

// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceQueuesQueueOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) DelayMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.DelayMessages }).(pulumi.IntOutput)
}

// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
func (o GetServiceQueuesQueueOutput) DelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.DelaySeconds }).(pulumi.IntOutput)
}

// The ID of the Queue. Its value is same as Queue Name.
func (o GetServiceQueuesQueueOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.Id }).(pulumi.StringOutput)
}

// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) InactiveMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.InactiveMessages }).(pulumi.IntOutput)
}

// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceQueuesQueueOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// Indicates whether the log management feature is enabled for the queue.
func (o GetServiceQueuesQueueOutput) LoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) bool { return v.LoggingEnabled }).(pulumi.BoolOutput)
}

// The maximum size of a message body that can be sent to the queue. Unit: bytes.
func (o GetServiceQueuesQueueOutput) MaximumMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.MaximumMessageSize }).(pulumi.IntOutput)
}

// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
func (o GetServiceQueuesQueueOutput) MessageRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.MessageRetentionPeriod }).(pulumi.IntOutput)
}

// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
func (o GetServiceQueuesQueueOutput) PollingWaitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.PollingWaitSeconds }).(pulumi.IntOutput)
}

// The internal url of the queue.
func (o GetServiceQueuesQueueOutput) QueueInternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueInternalUrl }).(pulumi.StringOutput)
}

// The name of the queue.
func (o GetServiceQueuesQueueOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueName }).(pulumi.StringOutput)
}

// The url of the queue.
func (o GetServiceQueuesQueueOutput) QueueUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueUrl }).(pulumi.StringOutput)
}

// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
func (o GetServiceQueuesQueueOutput) VisibilityTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.VisibilityTimeout }).(pulumi.IntOutput)
}

type GetServiceQueuesQueueArrayOutput struct{ *pulumi.OutputState }

func (GetServiceQueuesQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueuesQueue)(nil)).Elem()
}

func (o GetServiceQueuesQueueArrayOutput) ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput {
	return o
}

func (o GetServiceQueuesQueueArrayOutput) ToGetServiceQueuesQueueArrayOutputWithContext(ctx context.Context) GetServiceQueuesQueueArrayOutput {
	return o
}

func (o GetServiceQueuesQueueArrayOutput) Index(i pulumi.IntInput) GetServiceQueuesQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceQueuesQueue {
		return vs[0].([]GetServiceQueuesQueue)[vs[1].(int)]
	}).(GetServiceQueuesQueueOutput)
}

type GetServiceSubscriptionsSubscription struct {
	// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The endpoint to which the messages are pushed.
	Endpoint string `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
	FilterTag string `pulumi:"filterTag"`
	// The id of the Subscription.
	Id string `pulumi:"id"`
	// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// The content format of the messages that are pushed to the endpoint.
	NotifyContentFormat string `pulumi:"notifyContentFormat"`
	// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
	NotifyStrategy string `pulumi:"notifyStrategy"`
	// The name of the subscription.
	SubscriptionName string `pulumi:"subscriptionName"`
	// The url of the subscription.
	SubscriptionUrl string `pulumi:"subscriptionUrl"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
	// The account ID of the topic owner.
	TopicOwner string `pulumi:"topicOwner"`
}

// GetServiceSubscriptionsSubscriptionInput is an input type that accepts GetServiceSubscriptionsSubscriptionArgs and GetServiceSubscriptionsSubscriptionOutput values.
// You can construct a concrete instance of `GetServiceSubscriptionsSubscriptionInput` via:
//
//	GetServiceSubscriptionsSubscriptionArgs{...}
type GetServiceSubscriptionsSubscriptionInput interface {
	pulumi.Input

	ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput
	ToGetServiceSubscriptionsSubscriptionOutputWithContext(context.Context) GetServiceSubscriptionsSubscriptionOutput
}

type GetServiceSubscriptionsSubscriptionArgs struct {
	// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The endpoint to which the messages are pushed.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
	FilterTag pulumi.StringInput `pulumi:"filterTag"`
	// The id of the Subscription.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// The content format of the messages that are pushed to the endpoint.
	NotifyContentFormat pulumi.StringInput `pulumi:"notifyContentFormat"`
	// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
	NotifyStrategy pulumi.StringInput `pulumi:"notifyStrategy"`
	// The name of the subscription.
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
	// The url of the subscription.
	SubscriptionUrl pulumi.StringInput `pulumi:"subscriptionUrl"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// The account ID of the topic owner.
	TopicOwner pulumi.StringInput `pulumi:"topicOwner"`
}

func (GetServiceSubscriptionsSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (i GetServiceSubscriptionsSubscriptionArgs) ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput {
	return i.ToGetServiceSubscriptionsSubscriptionOutputWithContext(context.Background())
}

func (i GetServiceSubscriptionsSubscriptionArgs) ToGetServiceSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceSubscriptionsSubscriptionOutput)
}

// GetServiceSubscriptionsSubscriptionArrayInput is an input type that accepts GetServiceSubscriptionsSubscriptionArray and GetServiceSubscriptionsSubscriptionArrayOutput values.
// You can construct a concrete instance of `GetServiceSubscriptionsSubscriptionArrayInput` via:
//
//	GetServiceSubscriptionsSubscriptionArray{ GetServiceSubscriptionsSubscriptionArgs{...} }
type GetServiceSubscriptionsSubscriptionArrayInput interface {
	pulumi.Input

	ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput
	ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(context.Context) GetServiceSubscriptionsSubscriptionArrayOutput
}

type GetServiceSubscriptionsSubscriptionArray []GetServiceSubscriptionsSubscriptionInput

func (GetServiceSubscriptionsSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (i GetServiceSubscriptionsSubscriptionArray) ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput {
	return i.ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(context.Background())
}

func (i GetServiceSubscriptionsSubscriptionArray) ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceSubscriptionsSubscriptionArrayOutput)
}

type GetServiceSubscriptionsSubscriptionOutput struct{ *pulumi.OutputState }

func (GetServiceSubscriptionsSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (o GetServiceSubscriptionsSubscriptionOutput) ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionOutput) ToGetServiceSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionOutput {
	return o
}

// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceSubscriptionsSubscriptionOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The endpoint to which the messages are pushed.
func (o GetServiceSubscriptionsSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
func (o GetServiceSubscriptionsSubscriptionOutput) FilterTag() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.FilterTag }).(pulumi.StringOutput)
}

// The id of the Subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceSubscriptionsSubscriptionOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// The content format of the messages that are pushed to the endpoint.
func (o GetServiceSubscriptionsSubscriptionOutput) NotifyContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.NotifyContentFormat }).(pulumi.StringOutput)
}

// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
func (o GetServiceSubscriptionsSubscriptionOutput) NotifyStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.NotifyStrategy }).(pulumi.StringOutput)
}

// The name of the subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.SubscriptionName }).(pulumi.StringOutput)
}

// The url of the subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) SubscriptionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.SubscriptionUrl }).(pulumi.StringOutput)
}

// The name of the topic.
func (o GetServiceSubscriptionsSubscriptionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.TopicName }).(pulumi.StringOutput)
}

// The account ID of the topic owner.
func (o GetServiceSubscriptionsSubscriptionOutput) TopicOwner() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.TopicOwner }).(pulumi.StringOutput)
}

type GetServiceSubscriptionsSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (GetServiceSubscriptionsSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) Index(i pulumi.IntInput) GetServiceSubscriptionsSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceSubscriptionsSubscription {
		return vs[0].([]GetServiceSubscriptionsSubscription)[vs[1].(int)]
	}).(GetServiceSubscriptionsSubscriptionOutput)
}

type GetServiceTopicsTopic struct {
	// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The id of the Topic. Its value is same as Topic Name.
	Id string `pulumi:"id"`
	// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled.
	LoggingEnabled bool `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the topic. Unit: bytes.
	MaxMessageSize int `pulumi:"maxMessageSize"`
	// The number of messages in the topic.
	MessageCount int `pulumi:"messageCount"`
	// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
	MessageRetentionPeriod int `pulumi:"messageRetentionPeriod"`
	// The inner url of the topic.
	TopicInnerUrl string `pulumi:"topicInnerUrl"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
	// The url of the topic.
	TopicUrl string `pulumi:"topicUrl"`
}

// GetServiceTopicsTopicInput is an input type that accepts GetServiceTopicsTopicArgs and GetServiceTopicsTopicOutput values.
// You can construct a concrete instance of `GetServiceTopicsTopicInput` via:
//
//	GetServiceTopicsTopicArgs{...}
type GetServiceTopicsTopicInput interface {
	pulumi.Input

	ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput
	ToGetServiceTopicsTopicOutputWithContext(context.Context) GetServiceTopicsTopicOutput
}

type GetServiceTopicsTopicArgs struct {
	// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The id of the Topic. Its value is same as Topic Name.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled.
	LoggingEnabled pulumi.BoolInput `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the topic. Unit: bytes.
	MaxMessageSize pulumi.IntInput `pulumi:"maxMessageSize"`
	// The number of messages in the topic.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
	MessageRetentionPeriod pulumi.IntInput `pulumi:"messageRetentionPeriod"`
	// The inner url of the topic.
	TopicInnerUrl pulumi.StringInput `pulumi:"topicInnerUrl"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// The url of the topic.
	TopicUrl pulumi.StringInput `pulumi:"topicUrl"`
}

func (GetServiceTopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTopicsTopic)(nil)).Elem()
}

func (i GetServiceTopicsTopicArgs) ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput {
	return i.ToGetServiceTopicsTopicOutputWithContext(context.Background())
}

func (i GetServiceTopicsTopicArgs) ToGetServiceTopicsTopicOutputWithContext(ctx context.Context) GetServiceTopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTopicsTopicOutput)
}

// GetServiceTopicsTopicArrayInput is an input type that accepts GetServiceTopicsTopicArray and GetServiceTopicsTopicArrayOutput values.
// You can construct a concrete instance of `GetServiceTopicsTopicArrayInput` via:
//
//	GetServiceTopicsTopicArray{ GetServiceTopicsTopicArgs{...} }
type GetServiceTopicsTopicArrayInput interface {
	pulumi.Input

	ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput
	ToGetServiceTopicsTopicArrayOutputWithContext(context.Context) GetServiceTopicsTopicArrayOutput
}

type GetServiceTopicsTopicArray []GetServiceTopicsTopicInput

func (GetServiceTopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTopicsTopic)(nil)).Elem()
}

func (i GetServiceTopicsTopicArray) ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput {
	return i.ToGetServiceTopicsTopicArrayOutputWithContext(context.Background())
}

func (i GetServiceTopicsTopicArray) ToGetServiceTopicsTopicArrayOutputWithContext(ctx context.Context) GetServiceTopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTopicsTopicArrayOutput)
}

type GetServiceTopicsTopicOutput struct{ *pulumi.OutputState }

func (GetServiceTopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTopicsTopic)(nil)).Elem()
}

func (o GetServiceTopicsTopicOutput) ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput {
	return o
}

func (o GetServiceTopicsTopicOutput) ToGetServiceTopicsTopicOutputWithContext(ctx context.Context) GetServiceTopicsTopicOutput {
	return o
}

// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceTopicsTopicOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The id of the Topic. Its value is same as Topic Name.
func (o GetServiceTopicsTopicOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceTopicsTopicOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// Indicates whether the log management feature is enabled.
func (o GetServiceTopicsTopicOutput) LoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) bool { return v.LoggingEnabled }).(pulumi.BoolOutput)
}

// The maximum size of a message body that can be sent to the topic. Unit: bytes.
func (o GetServiceTopicsTopicOutput) MaxMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MaxMessageSize }).(pulumi.IntOutput)
}

// The number of messages in the topic.
func (o GetServiceTopicsTopicOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
func (o GetServiceTopicsTopicOutput) MessageRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MessageRetentionPeriod }).(pulumi.IntOutput)
}

// The inner url of the topic.
func (o GetServiceTopicsTopicOutput) TopicInnerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicInnerUrl }).(pulumi.StringOutput)
}

// The name of the topic.
func (o GetServiceTopicsTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

// The url of the topic.
func (o GetServiceTopicsTopicOutput) TopicUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicUrl }).(pulumi.StringOutput)
}

type GetServiceTopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTopicsTopic)(nil)).Elem()
}

func (o GetServiceTopicsTopicArrayOutput) ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput {
	return o
}

func (o GetServiceTopicsTopicArrayOutput) ToGetServiceTopicsTopicArrayOutputWithContext(ctx context.Context) GetServiceTopicsTopicArrayOutput {
	return o
}

func (o GetServiceTopicsTopicArrayOutput) Index(i pulumi.IntInput) GetServiceTopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTopicsTopic {
		return vs[0].([]GetServiceTopicsTopic)[vs[1].(int)]
	}).(GetServiceTopicsTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceQueuesQueueInput)(nil)).Elem(), GetServiceQueuesQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceQueuesQueueArrayInput)(nil)).Elem(), GetServiceQueuesQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceSubscriptionsSubscriptionInput)(nil)).Elem(), GetServiceSubscriptionsSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceSubscriptionsSubscriptionArrayInput)(nil)).Elem(), GetServiceSubscriptionsSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTopicsTopicInput)(nil)).Elem(), GetServiceTopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTopicsTopicArrayInput)(nil)).Elem(), GetServiceTopicsTopicArray{})
	pulumi.RegisterOutputType(GetServiceQueuesQueueOutput{})
	pulumi.RegisterOutputType(GetServiceQueuesQueueArrayOutput{})
	pulumi.RegisterOutputType(GetServiceSubscriptionsSubscriptionOutput{})
	pulumi.RegisterOutputType(GetServiceSubscriptionsSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTopicsTopicOutput{})
	pulumi.RegisterOutputType(GetServiceTopicsTopicArrayOutput{})
}
