// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ServiceEventRuleEndpoint struct {
	// Message receiving terminal endpoint type
	EndpointType *string `pulumi:"endpointType"`
	// Message Receiving Terminal Endpoint
	EndpointValue *string `pulumi:"endpointValue"`
}

// ServiceEventRuleEndpointInput is an input type that accepts ServiceEventRuleEndpointArgs and ServiceEventRuleEndpointOutput values.
// You can construct a concrete instance of `ServiceEventRuleEndpointInput` via:
//
//	ServiceEventRuleEndpointArgs{...}
type ServiceEventRuleEndpointInput interface {
	pulumi.Input

	ToServiceEventRuleEndpointOutput() ServiceEventRuleEndpointOutput
	ToServiceEventRuleEndpointOutputWithContext(context.Context) ServiceEventRuleEndpointOutput
}

type ServiceEventRuleEndpointArgs struct {
	// Message receiving terminal endpoint type
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// Message Receiving Terminal Endpoint
	EndpointValue pulumi.StringPtrInput `pulumi:"endpointValue"`
}

func (ServiceEventRuleEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleEndpoint)(nil)).Elem()
}

func (i ServiceEventRuleEndpointArgs) ToServiceEventRuleEndpointOutput() ServiceEventRuleEndpointOutput {
	return i.ToServiceEventRuleEndpointOutputWithContext(context.Background())
}

func (i ServiceEventRuleEndpointArgs) ToServiceEventRuleEndpointOutputWithContext(ctx context.Context) ServiceEventRuleEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleEndpointOutput)
}

func (i ServiceEventRuleEndpointArgs) ToServiceEventRuleEndpointPtrOutput() ServiceEventRuleEndpointPtrOutput {
	return i.ToServiceEventRuleEndpointPtrOutputWithContext(context.Background())
}

func (i ServiceEventRuleEndpointArgs) ToServiceEventRuleEndpointPtrOutputWithContext(ctx context.Context) ServiceEventRuleEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleEndpointOutput).ToServiceEventRuleEndpointPtrOutputWithContext(ctx)
}

// ServiceEventRuleEndpointPtrInput is an input type that accepts ServiceEventRuleEndpointArgs, ServiceEventRuleEndpointPtr and ServiceEventRuleEndpointPtrOutput values.
// You can construct a concrete instance of `ServiceEventRuleEndpointPtrInput` via:
//
//	        ServiceEventRuleEndpointArgs{...}
//
//	or:
//
//	        nil
type ServiceEventRuleEndpointPtrInput interface {
	pulumi.Input

	ToServiceEventRuleEndpointPtrOutput() ServiceEventRuleEndpointPtrOutput
	ToServiceEventRuleEndpointPtrOutputWithContext(context.Context) ServiceEventRuleEndpointPtrOutput
}

type serviceEventRuleEndpointPtrType ServiceEventRuleEndpointArgs

func ServiceEventRuleEndpointPtr(v *ServiceEventRuleEndpointArgs) ServiceEventRuleEndpointPtrInput {
	return (*serviceEventRuleEndpointPtrType)(v)
}

func (*serviceEventRuleEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleEndpoint)(nil)).Elem()
}

func (i *serviceEventRuleEndpointPtrType) ToServiceEventRuleEndpointPtrOutput() ServiceEventRuleEndpointPtrOutput {
	return i.ToServiceEventRuleEndpointPtrOutputWithContext(context.Background())
}

func (i *serviceEventRuleEndpointPtrType) ToServiceEventRuleEndpointPtrOutputWithContext(ctx context.Context) ServiceEventRuleEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleEndpointPtrOutput)
}

type ServiceEventRuleEndpointOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleEndpoint)(nil)).Elem()
}

func (o ServiceEventRuleEndpointOutput) ToServiceEventRuleEndpointOutput() ServiceEventRuleEndpointOutput {
	return o
}

func (o ServiceEventRuleEndpointOutput) ToServiceEventRuleEndpointOutputWithContext(ctx context.Context) ServiceEventRuleEndpointOutput {
	return o
}

func (o ServiceEventRuleEndpointOutput) ToServiceEventRuleEndpointPtrOutput() ServiceEventRuleEndpointPtrOutput {
	return o.ToServiceEventRuleEndpointPtrOutputWithContext(context.Background())
}

func (o ServiceEventRuleEndpointOutput) ToServiceEventRuleEndpointPtrOutputWithContext(ctx context.Context) ServiceEventRuleEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEventRuleEndpoint) *ServiceEventRuleEndpoint {
		return &v
	}).(ServiceEventRuleEndpointPtrOutput)
}

// Message receiving terminal endpoint type
func (o ServiceEventRuleEndpointOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleEndpoint) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// Message Receiving Terminal Endpoint
func (o ServiceEventRuleEndpointOutput) EndpointValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleEndpoint) *string { return v.EndpointValue }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleEndpointPtrOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEventRuleEndpoint)(nil)).Elem()
}

func (o ServiceEventRuleEndpointPtrOutput) ToServiceEventRuleEndpointPtrOutput() ServiceEventRuleEndpointPtrOutput {
	return o
}

func (o ServiceEventRuleEndpointPtrOutput) ToServiceEventRuleEndpointPtrOutputWithContext(ctx context.Context) ServiceEventRuleEndpointPtrOutput {
	return o
}

func (o ServiceEventRuleEndpointPtrOutput) Elem() ServiceEventRuleEndpointOutput {
	return o.ApplyT(func(v *ServiceEventRuleEndpoint) ServiceEventRuleEndpoint {
		if v != nil {
			return *v
		}
		var ret ServiceEventRuleEndpoint
		return ret
	}).(ServiceEventRuleEndpointOutput)
}

// Message receiving terminal endpoint type
func (o ServiceEventRuleEndpointPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEventRuleEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Message Receiving Terminal Endpoint
func (o ServiceEventRuleEndpointPtrOutput) EndpointValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEventRuleEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.EndpointValue
	}).(pulumi.StringPtrOutput)
}

type ServiceEventRuleMatchRule struct {
	// Match state. valid values: `true`, `false`.
	MatchState *string `pulumi:"matchState"`
	Name       *string `pulumi:"name"`
	// Prefix matching rule.
	Prefix *string `pulumi:"prefix"`
	// Suffix matching rule.
	Suffix *string `pulumi:"suffix"`
}

// ServiceEventRuleMatchRuleInput is an input type that accepts ServiceEventRuleMatchRuleArgs and ServiceEventRuleMatchRuleOutput values.
// You can construct a concrete instance of `ServiceEventRuleMatchRuleInput` via:
//
//	ServiceEventRuleMatchRuleArgs{...}
type ServiceEventRuleMatchRuleInput interface {
	pulumi.Input

	ToServiceEventRuleMatchRuleOutput() ServiceEventRuleMatchRuleOutput
	ToServiceEventRuleMatchRuleOutputWithContext(context.Context) ServiceEventRuleMatchRuleOutput
}

type ServiceEventRuleMatchRuleArgs struct {
	// Match state. valid values: `true`, `false`.
	MatchState pulumi.StringPtrInput `pulumi:"matchState"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// Prefix matching rule.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Suffix matching rule.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (ServiceEventRuleMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleMatchRule)(nil)).Elem()
}

func (i ServiceEventRuleMatchRuleArgs) ToServiceEventRuleMatchRuleOutput() ServiceEventRuleMatchRuleOutput {
	return i.ToServiceEventRuleMatchRuleOutputWithContext(context.Background())
}

func (i ServiceEventRuleMatchRuleArgs) ToServiceEventRuleMatchRuleOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleMatchRuleOutput)
}

// ServiceEventRuleMatchRuleArrayInput is an input type that accepts ServiceEventRuleMatchRuleArray and ServiceEventRuleMatchRuleArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleMatchRuleArrayInput` via:
//
//	ServiceEventRuleMatchRuleArray{ ServiceEventRuleMatchRuleArgs{...} }
type ServiceEventRuleMatchRuleArrayInput interface {
	pulumi.Input

	ToServiceEventRuleMatchRuleArrayOutput() ServiceEventRuleMatchRuleArrayOutput
	ToServiceEventRuleMatchRuleArrayOutputWithContext(context.Context) ServiceEventRuleMatchRuleArrayOutput
}

type ServiceEventRuleMatchRuleArray []ServiceEventRuleMatchRuleInput

func (ServiceEventRuleMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleMatchRule)(nil)).Elem()
}

func (i ServiceEventRuleMatchRuleArray) ToServiceEventRuleMatchRuleArrayOutput() ServiceEventRuleMatchRuleArrayOutput {
	return i.ToServiceEventRuleMatchRuleArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleMatchRuleArray) ToServiceEventRuleMatchRuleArrayOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleMatchRuleArrayOutput)
}

type ServiceEventRuleMatchRuleOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEventRuleMatchRule)(nil)).Elem()
}

func (o ServiceEventRuleMatchRuleOutput) ToServiceEventRuleMatchRuleOutput() ServiceEventRuleMatchRuleOutput {
	return o
}

func (o ServiceEventRuleMatchRuleOutput) ToServiceEventRuleMatchRuleOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleOutput {
	return o
}

// Match state. valid values: `true`, `false`.
func (o ServiceEventRuleMatchRuleOutput) MatchState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleMatchRule) *string { return v.MatchState }).(pulumi.StringPtrOutput)
}

func (o ServiceEventRuleMatchRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleMatchRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Prefix matching rule.
func (o ServiceEventRuleMatchRuleOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleMatchRule) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Suffix matching rule.
func (o ServiceEventRuleMatchRuleOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEventRuleMatchRule) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type ServiceEventRuleMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEventRuleMatchRule)(nil)).Elem()
}

func (o ServiceEventRuleMatchRuleArrayOutput) ToServiceEventRuleMatchRuleArrayOutput() ServiceEventRuleMatchRuleArrayOutput {
	return o
}

func (o ServiceEventRuleMatchRuleArrayOutput) ToServiceEventRuleMatchRuleArrayOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleArrayOutput {
	return o
}

func (o ServiceEventRuleMatchRuleArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEventRuleMatchRule {
		return vs[0].([]ServiceEventRuleMatchRule)[vs[1].(int)]
	}).(ServiceEventRuleMatchRuleOutput)
}

type ServiceQueueDlqPolicy struct {
	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue *string `pulumi:"deadLetterTargetQueue"`
	// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
	// The maximum number of retries.
	MaxReceiveCount *int `pulumi:"maxReceiveCount"`
}

// ServiceQueueDlqPolicyInput is an input type that accepts ServiceQueueDlqPolicyArgs and ServiceQueueDlqPolicyOutput values.
// You can construct a concrete instance of `ServiceQueueDlqPolicyInput` via:
//
//	ServiceQueueDlqPolicyArgs{...}
type ServiceQueueDlqPolicyInput interface {
	pulumi.Input

	ToServiceQueueDlqPolicyOutput() ServiceQueueDlqPolicyOutput
	ToServiceQueueDlqPolicyOutputWithContext(context.Context) ServiceQueueDlqPolicyOutput
}

type ServiceQueueDlqPolicyArgs struct {
	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue pulumi.StringPtrInput `pulumi:"deadLetterTargetQueue"`
	// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The maximum number of retries.
	MaxReceiveCount pulumi.IntPtrInput `pulumi:"maxReceiveCount"`
}

func (ServiceQueueDlqPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceQueueDlqPolicy)(nil)).Elem()
}

func (i ServiceQueueDlqPolicyArgs) ToServiceQueueDlqPolicyOutput() ServiceQueueDlqPolicyOutput {
	return i.ToServiceQueueDlqPolicyOutputWithContext(context.Background())
}

func (i ServiceQueueDlqPolicyArgs) ToServiceQueueDlqPolicyOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceQueueDlqPolicyOutput)
}

func (i ServiceQueueDlqPolicyArgs) ToServiceQueueDlqPolicyPtrOutput() ServiceQueueDlqPolicyPtrOutput {
	return i.ToServiceQueueDlqPolicyPtrOutputWithContext(context.Background())
}

func (i ServiceQueueDlqPolicyArgs) ToServiceQueueDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceQueueDlqPolicyOutput).ToServiceQueueDlqPolicyPtrOutputWithContext(ctx)
}

// ServiceQueueDlqPolicyPtrInput is an input type that accepts ServiceQueueDlqPolicyArgs, ServiceQueueDlqPolicyPtr and ServiceQueueDlqPolicyPtrOutput values.
// You can construct a concrete instance of `ServiceQueueDlqPolicyPtrInput` via:
//
//	        ServiceQueueDlqPolicyArgs{...}
//
//	or:
//
//	        nil
type ServiceQueueDlqPolicyPtrInput interface {
	pulumi.Input

	ToServiceQueueDlqPolicyPtrOutput() ServiceQueueDlqPolicyPtrOutput
	ToServiceQueueDlqPolicyPtrOutputWithContext(context.Context) ServiceQueueDlqPolicyPtrOutput
}

type serviceQueueDlqPolicyPtrType ServiceQueueDlqPolicyArgs

func ServiceQueueDlqPolicyPtr(v *ServiceQueueDlqPolicyArgs) ServiceQueueDlqPolicyPtrInput {
	return (*serviceQueueDlqPolicyPtrType)(v)
}

func (*serviceQueueDlqPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceQueueDlqPolicy)(nil)).Elem()
}

func (i *serviceQueueDlqPolicyPtrType) ToServiceQueueDlqPolicyPtrOutput() ServiceQueueDlqPolicyPtrOutput {
	return i.ToServiceQueueDlqPolicyPtrOutputWithContext(context.Background())
}

func (i *serviceQueueDlqPolicyPtrType) ToServiceQueueDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceQueueDlqPolicyPtrOutput)
}

type ServiceQueueDlqPolicyOutput struct{ *pulumi.OutputState }

func (ServiceQueueDlqPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceQueueDlqPolicy)(nil)).Elem()
}

func (o ServiceQueueDlqPolicyOutput) ToServiceQueueDlqPolicyOutput() ServiceQueueDlqPolicyOutput {
	return o
}

func (o ServiceQueueDlqPolicyOutput) ToServiceQueueDlqPolicyOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyOutput {
	return o
}

func (o ServiceQueueDlqPolicyOutput) ToServiceQueueDlqPolicyPtrOutput() ServiceQueueDlqPolicyPtrOutput {
	return o.ToServiceQueueDlqPolicyPtrOutputWithContext(context.Background())
}

func (o ServiceQueueDlqPolicyOutput) ToServiceQueueDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceQueueDlqPolicy) *ServiceQueueDlqPolicy {
		return &v
	}).(ServiceQueueDlqPolicyPtrOutput)
}

// The queue to which dead-letter messages are delivered.
func (o ServiceQueueDlqPolicyOutput) DeadLetterTargetQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceQueueDlqPolicy) *string { return v.DeadLetterTargetQueue }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
func (o ServiceQueueDlqPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceQueueDlqPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The maximum number of retries.
func (o ServiceQueueDlqPolicyOutput) MaxReceiveCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceQueueDlqPolicy) *int { return v.MaxReceiveCount }).(pulumi.IntPtrOutput)
}

type ServiceQueueDlqPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServiceQueueDlqPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceQueueDlqPolicy)(nil)).Elem()
}

func (o ServiceQueueDlqPolicyPtrOutput) ToServiceQueueDlqPolicyPtrOutput() ServiceQueueDlqPolicyPtrOutput {
	return o
}

func (o ServiceQueueDlqPolicyPtrOutput) ToServiceQueueDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceQueueDlqPolicyPtrOutput {
	return o
}

func (o ServiceQueueDlqPolicyPtrOutput) Elem() ServiceQueueDlqPolicyOutput {
	return o.ApplyT(func(v *ServiceQueueDlqPolicy) ServiceQueueDlqPolicy {
		if v != nil {
			return *v
		}
		var ret ServiceQueueDlqPolicy
		return ret
	}).(ServiceQueueDlqPolicyOutput)
}

// The queue to which dead-letter messages are delivered.
func (o ServiceQueueDlqPolicyPtrOutput) DeadLetterTargetQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceQueueDlqPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeadLetterTargetQueue
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
func (o ServiceQueueDlqPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceQueueDlqPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of retries.
func (o ServiceQueueDlqPolicyPtrOutput) MaxReceiveCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceQueueDlqPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxReceiveCount
	}).(pulumi.IntPtrOutput)
}

type ServiceSubscriptionDlqPolicy struct {
	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue *string `pulumi:"deadLetterTargetQueue"`
	// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
}

// ServiceSubscriptionDlqPolicyInput is an input type that accepts ServiceSubscriptionDlqPolicyArgs and ServiceSubscriptionDlqPolicyOutput values.
// You can construct a concrete instance of `ServiceSubscriptionDlqPolicyInput` via:
//
//	ServiceSubscriptionDlqPolicyArgs{...}
type ServiceSubscriptionDlqPolicyInput interface {
	pulumi.Input

	ToServiceSubscriptionDlqPolicyOutput() ServiceSubscriptionDlqPolicyOutput
	ToServiceSubscriptionDlqPolicyOutputWithContext(context.Context) ServiceSubscriptionDlqPolicyOutput
}

type ServiceSubscriptionDlqPolicyArgs struct {
	// The queue to which dead-letter messages are delivered.
	DeadLetterTargetQueue pulumi.StringPtrInput `pulumi:"deadLetterTargetQueue"`
	// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ServiceSubscriptionDlqPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSubscriptionDlqPolicy)(nil)).Elem()
}

func (i ServiceSubscriptionDlqPolicyArgs) ToServiceSubscriptionDlqPolicyOutput() ServiceSubscriptionDlqPolicyOutput {
	return i.ToServiceSubscriptionDlqPolicyOutputWithContext(context.Background())
}

func (i ServiceSubscriptionDlqPolicyArgs) ToServiceSubscriptionDlqPolicyOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionDlqPolicyOutput)
}

func (i ServiceSubscriptionDlqPolicyArgs) ToServiceSubscriptionDlqPolicyPtrOutput() ServiceSubscriptionDlqPolicyPtrOutput {
	return i.ToServiceSubscriptionDlqPolicyPtrOutputWithContext(context.Background())
}

func (i ServiceSubscriptionDlqPolicyArgs) ToServiceSubscriptionDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionDlqPolicyOutput).ToServiceSubscriptionDlqPolicyPtrOutputWithContext(ctx)
}

// ServiceSubscriptionDlqPolicyPtrInput is an input type that accepts ServiceSubscriptionDlqPolicyArgs, ServiceSubscriptionDlqPolicyPtr and ServiceSubscriptionDlqPolicyPtrOutput values.
// You can construct a concrete instance of `ServiceSubscriptionDlqPolicyPtrInput` via:
//
//	        ServiceSubscriptionDlqPolicyArgs{...}
//
//	or:
//
//	        nil
type ServiceSubscriptionDlqPolicyPtrInput interface {
	pulumi.Input

	ToServiceSubscriptionDlqPolicyPtrOutput() ServiceSubscriptionDlqPolicyPtrOutput
	ToServiceSubscriptionDlqPolicyPtrOutputWithContext(context.Context) ServiceSubscriptionDlqPolicyPtrOutput
}

type serviceSubscriptionDlqPolicyPtrType ServiceSubscriptionDlqPolicyArgs

func ServiceSubscriptionDlqPolicyPtr(v *ServiceSubscriptionDlqPolicyArgs) ServiceSubscriptionDlqPolicyPtrInput {
	return (*serviceSubscriptionDlqPolicyPtrType)(v)
}

func (*serviceSubscriptionDlqPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSubscriptionDlqPolicy)(nil)).Elem()
}

func (i *serviceSubscriptionDlqPolicyPtrType) ToServiceSubscriptionDlqPolicyPtrOutput() ServiceSubscriptionDlqPolicyPtrOutput {
	return i.ToServiceSubscriptionDlqPolicyPtrOutputWithContext(context.Background())
}

func (i *serviceSubscriptionDlqPolicyPtrType) ToServiceSubscriptionDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionDlqPolicyPtrOutput)
}

type ServiceSubscriptionDlqPolicyOutput struct{ *pulumi.OutputState }

func (ServiceSubscriptionDlqPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSubscriptionDlqPolicy)(nil)).Elem()
}

func (o ServiceSubscriptionDlqPolicyOutput) ToServiceSubscriptionDlqPolicyOutput() ServiceSubscriptionDlqPolicyOutput {
	return o
}

func (o ServiceSubscriptionDlqPolicyOutput) ToServiceSubscriptionDlqPolicyOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyOutput {
	return o
}

func (o ServiceSubscriptionDlqPolicyOutput) ToServiceSubscriptionDlqPolicyPtrOutput() ServiceSubscriptionDlqPolicyPtrOutput {
	return o.ToServiceSubscriptionDlqPolicyPtrOutputWithContext(context.Background())
}

func (o ServiceSubscriptionDlqPolicyOutput) ToServiceSubscriptionDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSubscriptionDlqPolicy) *ServiceSubscriptionDlqPolicy {
		return &v
	}).(ServiceSubscriptionDlqPolicyPtrOutput)
}

// The queue to which dead-letter messages are delivered.
func (o ServiceSubscriptionDlqPolicyOutput) DeadLetterTargetQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSubscriptionDlqPolicy) *string { return v.DeadLetterTargetQueue }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
func (o ServiceSubscriptionDlqPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceSubscriptionDlqPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ServiceSubscriptionDlqPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServiceSubscriptionDlqPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSubscriptionDlqPolicy)(nil)).Elem()
}

func (o ServiceSubscriptionDlqPolicyPtrOutput) ToServiceSubscriptionDlqPolicyPtrOutput() ServiceSubscriptionDlqPolicyPtrOutput {
	return o
}

func (o ServiceSubscriptionDlqPolicyPtrOutput) ToServiceSubscriptionDlqPolicyPtrOutputWithContext(ctx context.Context) ServiceSubscriptionDlqPolicyPtrOutput {
	return o
}

func (o ServiceSubscriptionDlqPolicyPtrOutput) Elem() ServiceSubscriptionDlqPolicyOutput {
	return o.ApplyT(func(v *ServiceSubscriptionDlqPolicy) ServiceSubscriptionDlqPolicy {
		if v != nil {
			return *v
		}
		var ret ServiceSubscriptionDlqPolicy
		return ret
	}).(ServiceSubscriptionDlqPolicyOutput)
}

// The queue to which dead-letter messages are delivered.
func (o ServiceSubscriptionDlqPolicyPtrOutput) DeadLetterTargetQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSubscriptionDlqPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeadLetterTargetQueue
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the dead-letter message delivery. Valid values: `true`, `false`.
func (o ServiceSubscriptionDlqPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceSubscriptionDlqPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GetServiceQueuesQueue struct {
	// The total number of messages that are in the Active state in the queue. The value is an approximate number.
	ActiveMessages int `pulumi:"activeMessages"`
	// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
	DelayMessages int `pulumi:"delayMessages"`
	// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
	DelaySeconds int `pulumi:"delaySeconds"`
	// The ID of the Queue. Its value is same as Queue Name.
	Id string `pulumi:"id"`
	// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
	InactiveMessages int `pulumi:"inactiveMessages"`
	// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled for the queue.
	LoggingEnabled bool `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the queue. Unit: bytes.
	MaximumMessageSize int `pulumi:"maximumMessageSize"`
	// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
	MessageRetentionPeriod int `pulumi:"messageRetentionPeriod"`
	// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
	PollingWaitSeconds int `pulumi:"pollingWaitSeconds"`
	// The internal url of the queue.
	QueueInternalUrl string `pulumi:"queueInternalUrl"`
	// The name of the queue.
	QueueName string `pulumi:"queueName"`
	// The url of the queue.
	QueueUrl string `pulumi:"queueUrl"`
	// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
	VisibilityTimeout int `pulumi:"visibilityTimeout"`
}

// GetServiceQueuesQueueInput is an input type that accepts GetServiceQueuesQueueArgs and GetServiceQueuesQueueOutput values.
// You can construct a concrete instance of `GetServiceQueuesQueueInput` via:
//
//	GetServiceQueuesQueueArgs{...}
type GetServiceQueuesQueueInput interface {
	pulumi.Input

	ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput
	ToGetServiceQueuesQueueOutputWithContext(context.Context) GetServiceQueuesQueueOutput
}

type GetServiceQueuesQueueArgs struct {
	// The total number of messages that are in the Active state in the queue. The value is an approximate number.
	ActiveMessages pulumi.IntInput `pulumi:"activeMessages"`
	// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
	DelayMessages pulumi.IntInput `pulumi:"delayMessages"`
	// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
	DelaySeconds pulumi.IntInput `pulumi:"delaySeconds"`
	// The ID of the Queue. Its value is same as Queue Name.
	Id pulumi.StringInput `pulumi:"id"`
	// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
	InactiveMessages pulumi.IntInput `pulumi:"inactiveMessages"`
	// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled for the queue.
	LoggingEnabled pulumi.BoolInput `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the queue. Unit: bytes.
	MaximumMessageSize pulumi.IntInput `pulumi:"maximumMessageSize"`
	// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
	MessageRetentionPeriod pulumi.IntInput `pulumi:"messageRetentionPeriod"`
	// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
	PollingWaitSeconds pulumi.IntInput `pulumi:"pollingWaitSeconds"`
	// The internal url of the queue.
	QueueInternalUrl pulumi.StringInput `pulumi:"queueInternalUrl"`
	// The name of the queue.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// The url of the queue.
	QueueUrl pulumi.StringInput `pulumi:"queueUrl"`
	// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
	VisibilityTimeout pulumi.IntInput `pulumi:"visibilityTimeout"`
}

func (GetServiceQueuesQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueuesQueue)(nil)).Elem()
}

func (i GetServiceQueuesQueueArgs) ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput {
	return i.ToGetServiceQueuesQueueOutputWithContext(context.Background())
}

func (i GetServiceQueuesQueueArgs) ToGetServiceQueuesQueueOutputWithContext(ctx context.Context) GetServiceQueuesQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueuesQueueOutput)
}

// GetServiceQueuesQueueArrayInput is an input type that accepts GetServiceQueuesQueueArray and GetServiceQueuesQueueArrayOutput values.
// You can construct a concrete instance of `GetServiceQueuesQueueArrayInput` via:
//
//	GetServiceQueuesQueueArray{ GetServiceQueuesQueueArgs{...} }
type GetServiceQueuesQueueArrayInput interface {
	pulumi.Input

	ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput
	ToGetServiceQueuesQueueArrayOutputWithContext(context.Context) GetServiceQueuesQueueArrayOutput
}

type GetServiceQueuesQueueArray []GetServiceQueuesQueueInput

func (GetServiceQueuesQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueuesQueue)(nil)).Elem()
}

func (i GetServiceQueuesQueueArray) ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput {
	return i.ToGetServiceQueuesQueueArrayOutputWithContext(context.Background())
}

func (i GetServiceQueuesQueueArray) ToGetServiceQueuesQueueArrayOutputWithContext(ctx context.Context) GetServiceQueuesQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceQueuesQueueArrayOutput)
}

type GetServiceQueuesQueueOutput struct{ *pulumi.OutputState }

func (GetServiceQueuesQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceQueuesQueue)(nil)).Elem()
}

func (o GetServiceQueuesQueueOutput) ToGetServiceQueuesQueueOutput() GetServiceQueuesQueueOutput {
	return o
}

func (o GetServiceQueuesQueueOutput) ToGetServiceQueuesQueueOutputWithContext(ctx context.Context) GetServiceQueuesQueueOutput {
	return o
}

// The total number of messages that are in the Active state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) ActiveMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.ActiveMessages }).(pulumi.IntOutput)
}

// The time when the queue was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceQueuesQueueOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The total number of the messages that are in the Delayed state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) DelayMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.DelayMessages }).(pulumi.IntOutput)
}

// The delay period after which all messages that are sent to the queue can be consumed. Unit: seconds.
func (o GetServiceQueuesQueueOutput) DelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.DelaySeconds }).(pulumi.IntOutput)
}

// The ID of the Queue. Its value is same as Queue Name.
func (o GetServiceQueuesQueueOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.Id }).(pulumi.StringOutput)
}

// The total number of the messages that are in the Inactive state in the queue. The value is an approximate number.
func (o GetServiceQueuesQueueOutput) InactiveMessages() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.InactiveMessages }).(pulumi.IntOutput)
}

// The time when the queue was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceQueuesQueueOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// Indicates whether the log management feature is enabled for the queue.
func (o GetServiceQueuesQueueOutput) LoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) bool { return v.LoggingEnabled }).(pulumi.BoolOutput)
}

// The maximum size of a message body that can be sent to the queue. Unit: bytes.
func (o GetServiceQueuesQueueOutput) MaximumMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.MaximumMessageSize }).(pulumi.IntOutput)
}

// The maximum period for which a message can be retained in the queue. A message that is sent to the queue can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is consumed. Unit: seconds.
func (o GetServiceQueuesQueueOutput) MessageRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.MessageRetentionPeriod }).(pulumi.IntOutput)
}

// The maximum period for which a ReceiveMessage request waits if no message is available in the queue. Unit: seconds.
func (o GetServiceQueuesQueueOutput) PollingWaitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.PollingWaitSeconds }).(pulumi.IntOutput)
}

// The internal url of the queue.
func (o GetServiceQueuesQueueOutput) QueueInternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueInternalUrl }).(pulumi.StringOutput)
}

// The name of the queue.
func (o GetServiceQueuesQueueOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueName }).(pulumi.StringOutput)
}

// The url of the queue.
func (o GetServiceQueuesQueueOutput) QueueUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) string { return v.QueueUrl }).(pulumi.StringOutput)
}

// The invisibility period for which the received message remains the Inactive state. Unit: seconds.
func (o GetServiceQueuesQueueOutput) VisibilityTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceQueuesQueue) int { return v.VisibilityTimeout }).(pulumi.IntOutput)
}

type GetServiceQueuesQueueArrayOutput struct{ *pulumi.OutputState }

func (GetServiceQueuesQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceQueuesQueue)(nil)).Elem()
}

func (o GetServiceQueuesQueueArrayOutput) ToGetServiceQueuesQueueArrayOutput() GetServiceQueuesQueueArrayOutput {
	return o
}

func (o GetServiceQueuesQueueArrayOutput) ToGetServiceQueuesQueueArrayOutputWithContext(ctx context.Context) GetServiceQueuesQueueArrayOutput {
	return o
}

func (o GetServiceQueuesQueueArrayOutput) Index(i pulumi.IntInput) GetServiceQueuesQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceQueuesQueue {
		return vs[0].([]GetServiceQueuesQueue)[vs[1].(int)]
	}).(GetServiceQueuesQueueOutput)
}

type GetServiceSubscriptionsSubscription struct {
	// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The endpoint to which the messages are pushed.
	Endpoint string `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
	FilterTag string `pulumi:"filterTag"`
	// The id of the Subscription.
	Id string `pulumi:"id"`
	// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// The content format of the messages that are pushed to the endpoint.
	NotifyContentFormat string `pulumi:"notifyContentFormat"`
	// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
	NotifyStrategy string `pulumi:"notifyStrategy"`
	// The name of the subscription.
	SubscriptionName string `pulumi:"subscriptionName"`
	// The url of the subscription.
	SubscriptionUrl string `pulumi:"subscriptionUrl"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
	// The account ID of the topic owner.
	TopicOwner string `pulumi:"topicOwner"`
}

// GetServiceSubscriptionsSubscriptionInput is an input type that accepts GetServiceSubscriptionsSubscriptionArgs and GetServiceSubscriptionsSubscriptionOutput values.
// You can construct a concrete instance of `GetServiceSubscriptionsSubscriptionInput` via:
//
//	GetServiceSubscriptionsSubscriptionArgs{...}
type GetServiceSubscriptionsSubscriptionInput interface {
	pulumi.Input

	ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput
	ToGetServiceSubscriptionsSubscriptionOutputWithContext(context.Context) GetServiceSubscriptionsSubscriptionOutput
}

type GetServiceSubscriptionsSubscriptionArgs struct {
	// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The endpoint to which the messages are pushed.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
	FilterTag pulumi.StringInput `pulumi:"filterTag"`
	// The id of the Subscription.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// The content format of the messages that are pushed to the endpoint.
	NotifyContentFormat pulumi.StringInput `pulumi:"notifyContentFormat"`
	// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
	NotifyStrategy pulumi.StringInput `pulumi:"notifyStrategy"`
	// The name of the subscription.
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
	// The url of the subscription.
	SubscriptionUrl pulumi.StringInput `pulumi:"subscriptionUrl"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// The account ID of the topic owner.
	TopicOwner pulumi.StringInput `pulumi:"topicOwner"`
}

func (GetServiceSubscriptionsSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (i GetServiceSubscriptionsSubscriptionArgs) ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput {
	return i.ToGetServiceSubscriptionsSubscriptionOutputWithContext(context.Background())
}

func (i GetServiceSubscriptionsSubscriptionArgs) ToGetServiceSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceSubscriptionsSubscriptionOutput)
}

// GetServiceSubscriptionsSubscriptionArrayInput is an input type that accepts GetServiceSubscriptionsSubscriptionArray and GetServiceSubscriptionsSubscriptionArrayOutput values.
// You can construct a concrete instance of `GetServiceSubscriptionsSubscriptionArrayInput` via:
//
//	GetServiceSubscriptionsSubscriptionArray{ GetServiceSubscriptionsSubscriptionArgs{...} }
type GetServiceSubscriptionsSubscriptionArrayInput interface {
	pulumi.Input

	ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput
	ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(context.Context) GetServiceSubscriptionsSubscriptionArrayOutput
}

type GetServiceSubscriptionsSubscriptionArray []GetServiceSubscriptionsSubscriptionInput

func (GetServiceSubscriptionsSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (i GetServiceSubscriptionsSubscriptionArray) ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput {
	return i.ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(context.Background())
}

func (i GetServiceSubscriptionsSubscriptionArray) ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceSubscriptionsSubscriptionArrayOutput)
}

type GetServiceSubscriptionsSubscriptionOutput struct{ *pulumi.OutputState }

func (GetServiceSubscriptionsSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (o GetServiceSubscriptionsSubscriptionOutput) ToGetServiceSubscriptionsSubscriptionOutput() GetServiceSubscriptionsSubscriptionOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionOutput) ToGetServiceSubscriptionsSubscriptionOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionOutput {
	return o
}

// The time when the subscription was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceSubscriptionsSubscriptionOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The endpoint to which the messages are pushed.
func (o GetServiceSubscriptionsSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The tag that is used to filter messages. Only the messages that are attached with the specified tag can be pushed.
func (o GetServiceSubscriptionsSubscriptionOutput) FilterTag() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.FilterTag }).(pulumi.StringOutput)
}

// The id of the Subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the subscription was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceSubscriptionsSubscriptionOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// The content format of the messages that are pushed to the endpoint.
func (o GetServiceSubscriptionsSubscriptionOutput) NotifyContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.NotifyContentFormat }).(pulumi.StringOutput)
}

// The retry policy that is applied if an error occurs when MNS pushes messages to the endpoint.
func (o GetServiceSubscriptionsSubscriptionOutput) NotifyStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.NotifyStrategy }).(pulumi.StringOutput)
}

// The name of the subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.SubscriptionName }).(pulumi.StringOutput)
}

// The url of the subscription.
func (o GetServiceSubscriptionsSubscriptionOutput) SubscriptionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.SubscriptionUrl }).(pulumi.StringOutput)
}

// The name of the topic.
func (o GetServiceSubscriptionsSubscriptionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.TopicName }).(pulumi.StringOutput)
}

// The account ID of the topic owner.
func (o GetServiceSubscriptionsSubscriptionOutput) TopicOwner() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceSubscriptionsSubscription) string { return v.TopicOwner }).(pulumi.StringOutput)
}

type GetServiceSubscriptionsSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (GetServiceSubscriptionsSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceSubscriptionsSubscription)(nil)).Elem()
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) ToGetServiceSubscriptionsSubscriptionArrayOutput() GetServiceSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) ToGetServiceSubscriptionsSubscriptionArrayOutputWithContext(ctx context.Context) GetServiceSubscriptionsSubscriptionArrayOutput {
	return o
}

func (o GetServiceSubscriptionsSubscriptionArrayOutput) Index(i pulumi.IntInput) GetServiceSubscriptionsSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceSubscriptionsSubscription {
		return vs[0].([]GetServiceSubscriptionsSubscription)[vs[1].(int)]
	}).(GetServiceSubscriptionsSubscriptionOutput)
}

type GetServiceTopicsTopic struct {
	// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime int `pulumi:"createTime"`
	// The id of the Topic. Its value is same as Topic Name.
	Id string `pulumi:"id"`
	// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime int `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled.
	LoggingEnabled bool `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the topic. Unit: bytes.
	MaxMessageSize int `pulumi:"maxMessageSize"`
	// The number of messages in the topic.
	MessageCount int `pulumi:"messageCount"`
	// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
	MessageRetentionPeriod int `pulumi:"messageRetentionPeriod"`
	// The inner url of the topic.
	TopicInnerUrl string `pulumi:"topicInnerUrl"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
	// The url of the topic.
	TopicUrl string `pulumi:"topicUrl"`
}

// GetServiceTopicsTopicInput is an input type that accepts GetServiceTopicsTopicArgs and GetServiceTopicsTopicOutput values.
// You can construct a concrete instance of `GetServiceTopicsTopicInput` via:
//
//	GetServiceTopicsTopicArgs{...}
type GetServiceTopicsTopicInput interface {
	pulumi.Input

	ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput
	ToGetServiceTopicsTopicOutputWithContext(context.Context) GetServiceTopicsTopicOutput
}

type GetServiceTopicsTopicArgs struct {
	// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The id of the Topic. Its value is same as Topic Name.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	LastModifyTime pulumi.IntInput `pulumi:"lastModifyTime"`
	// Indicates whether the log management feature is enabled.
	LoggingEnabled pulumi.BoolInput `pulumi:"loggingEnabled"`
	// The maximum size of a message body that can be sent to the topic. Unit: bytes.
	MaxMessageSize pulumi.IntInput `pulumi:"maxMessageSize"`
	// The number of messages in the topic.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
	MessageRetentionPeriod pulumi.IntInput `pulumi:"messageRetentionPeriod"`
	// The inner url of the topic.
	TopicInnerUrl pulumi.StringInput `pulumi:"topicInnerUrl"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// The url of the topic.
	TopicUrl pulumi.StringInput `pulumi:"topicUrl"`
}

func (GetServiceTopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTopicsTopic)(nil)).Elem()
}

func (i GetServiceTopicsTopicArgs) ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput {
	return i.ToGetServiceTopicsTopicOutputWithContext(context.Background())
}

func (i GetServiceTopicsTopicArgs) ToGetServiceTopicsTopicOutputWithContext(ctx context.Context) GetServiceTopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTopicsTopicOutput)
}

// GetServiceTopicsTopicArrayInput is an input type that accepts GetServiceTopicsTopicArray and GetServiceTopicsTopicArrayOutput values.
// You can construct a concrete instance of `GetServiceTopicsTopicArrayInput` via:
//
//	GetServiceTopicsTopicArray{ GetServiceTopicsTopicArgs{...} }
type GetServiceTopicsTopicArrayInput interface {
	pulumi.Input

	ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput
	ToGetServiceTopicsTopicArrayOutputWithContext(context.Context) GetServiceTopicsTopicArrayOutput
}

type GetServiceTopicsTopicArray []GetServiceTopicsTopicInput

func (GetServiceTopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTopicsTopic)(nil)).Elem()
}

func (i GetServiceTopicsTopicArray) ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput {
	return i.ToGetServiceTopicsTopicArrayOutputWithContext(context.Background())
}

func (i GetServiceTopicsTopicArray) ToGetServiceTopicsTopicArrayOutputWithContext(ctx context.Context) GetServiceTopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTopicsTopicArrayOutput)
}

type GetServiceTopicsTopicOutput struct{ *pulumi.OutputState }

func (GetServiceTopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTopicsTopic)(nil)).Elem()
}

func (o GetServiceTopicsTopicOutput) ToGetServiceTopicsTopicOutput() GetServiceTopicsTopicOutput {
	return o
}

func (o GetServiceTopicsTopicOutput) ToGetServiceTopicsTopicOutputWithContext(ctx context.Context) GetServiceTopicsTopicOutput {
	return o
}

// The time when the topic was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceTopicsTopicOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The id of the Topic. Its value is same as Topic Name.
func (o GetServiceTopicsTopicOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the topic was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
func (o GetServiceTopicsTopicOutput) LastModifyTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.LastModifyTime }).(pulumi.IntOutput)
}

// Indicates whether the log management feature is enabled.
func (o GetServiceTopicsTopicOutput) LoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) bool { return v.LoggingEnabled }).(pulumi.BoolOutput)
}

// The maximum size of a message body that can be sent to the topic. Unit: bytes.
func (o GetServiceTopicsTopicOutput) MaxMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MaxMessageSize }).(pulumi.IntOutput)
}

// The number of messages in the topic.
func (o GetServiceTopicsTopicOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The maximum period for which a message can be retained in the topic. A message that is sent to the topic can be retained for a specified period. After the specified period ends, the message is deleted no matter whether it is pushed to the specified endpoints. Unit: seconds.
func (o GetServiceTopicsTopicOutput) MessageRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) int { return v.MessageRetentionPeriod }).(pulumi.IntOutput)
}

// The inner url of the topic.
func (o GetServiceTopicsTopicOutput) TopicInnerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicInnerUrl }).(pulumi.StringOutput)
}

// The name of the topic.
func (o GetServiceTopicsTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

// The url of the topic.
func (o GetServiceTopicsTopicOutput) TopicUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTopicsTopic) string { return v.TopicUrl }).(pulumi.StringOutput)
}

type GetServiceTopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTopicsTopic)(nil)).Elem()
}

func (o GetServiceTopicsTopicArrayOutput) ToGetServiceTopicsTopicArrayOutput() GetServiceTopicsTopicArrayOutput {
	return o
}

func (o GetServiceTopicsTopicArrayOutput) ToGetServiceTopicsTopicArrayOutputWithContext(ctx context.Context) GetServiceTopicsTopicArrayOutput {
	return o
}

func (o GetServiceTopicsTopicArrayOutput) Index(i pulumi.IntInput) GetServiceTopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTopicsTopic {
		return vs[0].([]GetServiceTopicsTopic)[vs[1].(int)]
	}).(GetServiceTopicsTopicOutput)
}

type ServiceEventRuleMatchRuleArrayArray []ServiceEventRuleMatchRuleArrayInput

func (ServiceEventRuleMatchRuleArrayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[][]ServiceEventRuleMatchRule)(nil)).Elem()
}

func (i ServiceEventRuleMatchRuleArrayArray) ToServiceEventRuleMatchRuleArrayArrayOutput() ServiceEventRuleMatchRuleArrayArrayOutput {
	return i.ToServiceEventRuleMatchRuleArrayArrayOutputWithContext(context.Background())
}

func (i ServiceEventRuleMatchRuleArrayArray) ToServiceEventRuleMatchRuleArrayArrayOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleArrayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEventRuleMatchRuleArrayArrayOutput)
}

// ServiceEventRuleMatchRuleArrayArrayInput is an input type that accepts ServiceEventRuleMatchRuleArrayArray and ServiceEventRuleMatchRuleArrayArrayOutput values.
// You can construct a concrete instance of `ServiceEventRuleMatchRuleArrayArrayInput` via:
//
//	ServiceEventRuleMatchRuleArrayArray{ ServiceEventRuleMatchRuleArray{ ServiceEventRuleMatchRuleArgs{...} } }
type ServiceEventRuleMatchRuleArrayArrayInput interface {
	pulumi.Input

	ToServiceEventRuleMatchRuleArrayArrayOutput() ServiceEventRuleMatchRuleArrayArrayOutput
	ToServiceEventRuleMatchRuleArrayArrayOutputWithContext(context.Context) ServiceEventRuleMatchRuleArrayArrayOutput
}

type ServiceEventRuleMatchRuleArrayArrayOutput struct{ *pulumi.OutputState }

func (ServiceEventRuleMatchRuleArrayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[][]ServiceEventRuleMatchRule)(nil)).Elem()
}

func (o ServiceEventRuleMatchRuleArrayArrayOutput) ToServiceEventRuleMatchRuleArrayArrayOutput() ServiceEventRuleMatchRuleArrayArrayOutput {
	return o
}

func (o ServiceEventRuleMatchRuleArrayArrayOutput) ToServiceEventRuleMatchRuleArrayArrayOutputWithContext(ctx context.Context) ServiceEventRuleMatchRuleArrayArrayOutput {
	return o
}

func (o ServiceEventRuleMatchRuleArrayArrayOutput) Index(i pulumi.IntInput) ServiceEventRuleMatchRuleArrayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) []ServiceEventRuleMatchRule {
		return vs[0].([][]ServiceEventRuleMatchRule)[vs[1].(int)]
	}).(ServiceEventRuleMatchRuleArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleEndpointInput)(nil)).Elem(), ServiceEventRuleEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleEndpointPtrInput)(nil)).Elem(), ServiceEventRuleEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleMatchRuleInput)(nil)).Elem(), ServiceEventRuleMatchRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleMatchRuleArrayInput)(nil)).Elem(), ServiceEventRuleMatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceQueueDlqPolicyInput)(nil)).Elem(), ServiceQueueDlqPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceQueueDlqPolicyPtrInput)(nil)).Elem(), ServiceQueueDlqPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSubscriptionDlqPolicyInput)(nil)).Elem(), ServiceSubscriptionDlqPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSubscriptionDlqPolicyPtrInput)(nil)).Elem(), ServiceSubscriptionDlqPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceQueuesQueueInput)(nil)).Elem(), GetServiceQueuesQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceQueuesQueueArrayInput)(nil)).Elem(), GetServiceQueuesQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceSubscriptionsSubscriptionInput)(nil)).Elem(), GetServiceSubscriptionsSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceSubscriptionsSubscriptionArrayInput)(nil)).Elem(), GetServiceSubscriptionsSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTopicsTopicInput)(nil)).Elem(), GetServiceTopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTopicsTopicArrayInput)(nil)).Elem(), GetServiceTopicsTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEventRuleMatchRuleArrayArrayInput)(nil)).Elem(), ServiceEventRuleMatchRuleArrayArray{})
	pulumi.RegisterOutputType(ServiceEventRuleEndpointOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleEndpointPtrOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleMatchRuleOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceQueueDlqPolicyOutput{})
	pulumi.RegisterOutputType(ServiceQueueDlqPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServiceSubscriptionDlqPolicyOutput{})
	pulumi.RegisterOutputType(ServiceSubscriptionDlqPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetServiceQueuesQueueOutput{})
	pulumi.RegisterOutputType(GetServiceQueuesQueueArrayOutput{})
	pulumi.RegisterOutputType(GetServiceSubscriptionsSubscriptionOutput{})
	pulumi.RegisterOutputType(GetServiceSubscriptionsSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTopicsTopicOutput{})
	pulumi.RegisterOutputType(GetServiceTopicsTopicArrayOutput{})
	pulumi.RegisterOutputType(ServiceEventRuleMatchRuleArrayArrayOutput{})
}
