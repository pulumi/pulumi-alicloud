// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Message Notification Service Subscription resource.
//
// For information about Message Notification Service Subscription and how to use it, see [What is Subscription](https://www.alibabacloud.com/help/en/message-service/latest/subscribe-1).
//
// > **NOTE:** Available in v1.188.0+.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/message"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultServiceTopic, err := message.NewServiceTopic(ctx, "defaultServiceTopic", &message.ServiceTopicArgs{
//				TopicName:      pulumi.String("tf-example-value"),
//				MaxMessageSize: pulumi.Int(12357),
//				LoggingEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = message.NewServiceSubscription(ctx, "defaultServiceSubscription", &message.ServiceSubscriptionArgs{
//				TopicName:           defaultServiceTopic.TopicName,
//				SubscriptionName:    pulumi.String("tf-example-value"),
//				Endpoint:            pulumi.String("http://www.test.com/test"),
//				PushType:            pulumi.String("http"),
//				FilterTag:           pulumi.String("tf-test"),
//				NotifyContentFormat: pulumi.String("XML"),
//				NotifyStrategy:      pulumi.String("BACKOFF_RETRY"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Message Notification Service Subscription can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:message/serviceSubscription:ServiceSubscription example <topic_name>:<subscription_name>
//
// ```
type ServiceSubscription struct {
	pulumi.CustomResourceState

	// The endpoint has three format. Available values format:
	// - `HTTP Format`: http://xxx.com/xxx
	// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - `Email Format`: mail:directmail:{MailAddress}
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag pulumi.StringPtrOutput `pulumi:"filterTag"`
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
	NotifyContentFormat pulumi.StringOutput `pulumi:"notifyContentFormat"`
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
	NotifyStrategy pulumi.StringOutput `pulumi:"notifyStrategy"`
	// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
	PushType pulumi.StringOutput `pulumi:"pushType"`
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName pulumi.StringOutput `pulumi:"subscriptionName"`
	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewServiceSubscription registers a new resource with the given unique name, arguments, and options.
func NewServiceSubscription(ctx *pulumi.Context,
	name string, args *ServiceSubscriptionArgs, opts ...pulumi.ResourceOption) (*ServiceSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.PushType == nil {
		return nil, errors.New("invalid value for required argument 'PushType'")
	}
	if args.SubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionName'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	var resource ServiceSubscription
	err := ctx.RegisterResource("alicloud:message/serviceSubscription:ServiceSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceSubscription gets an existing ServiceSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceSubscriptionState, opts ...pulumi.ResourceOption) (*ServiceSubscription, error) {
	var resource ServiceSubscription
	err := ctx.ReadResource("alicloud:message/serviceSubscription:ServiceSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceSubscription resources.
type serviceSubscriptionState struct {
	// The endpoint has three format. Available values format:
	// - `HTTP Format`: http://xxx.com/xxx
	// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - `Email Format`: mail:directmail:{MailAddress}
	Endpoint *string `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag *string `pulumi:"filterTag"`
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
	NotifyContentFormat *string `pulumi:"notifyContentFormat"`
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
	NotifyStrategy *string `pulumi:"notifyStrategy"`
	// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
	PushType *string `pulumi:"pushType"`
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName *string `pulumi:"subscriptionName"`
	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName *string `pulumi:"topicName"`
}

type ServiceSubscriptionState struct {
	// The endpoint has three format. Available values format:
	// - `HTTP Format`: http://xxx.com/xxx
	// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - `Email Format`: mail:directmail:{MailAddress}
	Endpoint pulumi.StringPtrInput
	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag pulumi.StringPtrInput
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
	NotifyContentFormat pulumi.StringPtrInput
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
	NotifyStrategy pulumi.StringPtrInput
	// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
	PushType pulumi.StringPtrInput
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName pulumi.StringPtrInput
	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName pulumi.StringPtrInput
}

func (ServiceSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSubscriptionState)(nil)).Elem()
}

type serviceSubscriptionArgs struct {
	// The endpoint has three format. Available values format:
	// - `HTTP Format`: http://xxx.com/xxx
	// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - `Email Format`: mail:directmail:{MailAddress}
	Endpoint string `pulumi:"endpoint"`
	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag *string `pulumi:"filterTag"`
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
	NotifyContentFormat *string `pulumi:"notifyContentFormat"`
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
	NotifyStrategy *string `pulumi:"notifyStrategy"`
	// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
	PushType string `pulumi:"pushType"`
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName string `pulumi:"subscriptionName"`
	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a ServiceSubscription resource.
type ServiceSubscriptionArgs struct {
	// The endpoint has three format. Available values format:
	// - `HTTP Format`: http://xxx.com/xxx
	// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
	// - `Email Format`: mail:directmail:{MailAddress}
	Endpoint pulumi.StringInput
	// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
	FilterTag pulumi.StringPtrInput
	// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
	NotifyContentFormat pulumi.StringPtrInput
	// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
	NotifyStrategy pulumi.StringPtrInput
	// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
	PushType pulumi.StringInput
	// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	SubscriptionName pulumi.StringInput
	// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
	TopicName pulumi.StringInput
}

func (ServiceSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSubscriptionArgs)(nil)).Elem()
}

type ServiceSubscriptionInput interface {
	pulumi.Input

	ToServiceSubscriptionOutput() ServiceSubscriptionOutput
	ToServiceSubscriptionOutputWithContext(ctx context.Context) ServiceSubscriptionOutput
}

func (*ServiceSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSubscription)(nil)).Elem()
}

func (i *ServiceSubscription) ToServiceSubscriptionOutput() ServiceSubscriptionOutput {
	return i.ToServiceSubscriptionOutputWithContext(context.Background())
}

func (i *ServiceSubscription) ToServiceSubscriptionOutputWithContext(ctx context.Context) ServiceSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionOutput)
}

// ServiceSubscriptionArrayInput is an input type that accepts ServiceSubscriptionArray and ServiceSubscriptionArrayOutput values.
// You can construct a concrete instance of `ServiceSubscriptionArrayInput` via:
//
//	ServiceSubscriptionArray{ ServiceSubscriptionArgs{...} }
type ServiceSubscriptionArrayInput interface {
	pulumi.Input

	ToServiceSubscriptionArrayOutput() ServiceSubscriptionArrayOutput
	ToServiceSubscriptionArrayOutputWithContext(context.Context) ServiceSubscriptionArrayOutput
}

type ServiceSubscriptionArray []ServiceSubscriptionInput

func (ServiceSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSubscription)(nil)).Elem()
}

func (i ServiceSubscriptionArray) ToServiceSubscriptionArrayOutput() ServiceSubscriptionArrayOutput {
	return i.ToServiceSubscriptionArrayOutputWithContext(context.Background())
}

func (i ServiceSubscriptionArray) ToServiceSubscriptionArrayOutputWithContext(ctx context.Context) ServiceSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionArrayOutput)
}

// ServiceSubscriptionMapInput is an input type that accepts ServiceSubscriptionMap and ServiceSubscriptionMapOutput values.
// You can construct a concrete instance of `ServiceSubscriptionMapInput` via:
//
//	ServiceSubscriptionMap{ "key": ServiceSubscriptionArgs{...} }
type ServiceSubscriptionMapInput interface {
	pulumi.Input

	ToServiceSubscriptionMapOutput() ServiceSubscriptionMapOutput
	ToServiceSubscriptionMapOutputWithContext(context.Context) ServiceSubscriptionMapOutput
}

type ServiceSubscriptionMap map[string]ServiceSubscriptionInput

func (ServiceSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSubscription)(nil)).Elem()
}

func (i ServiceSubscriptionMap) ToServiceSubscriptionMapOutput() ServiceSubscriptionMapOutput {
	return i.ToServiceSubscriptionMapOutputWithContext(context.Background())
}

func (i ServiceSubscriptionMap) ToServiceSubscriptionMapOutputWithContext(ctx context.Context) ServiceSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSubscriptionMapOutput)
}

type ServiceSubscriptionOutput struct{ *pulumi.OutputState }

func (ServiceSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSubscription)(nil)).Elem()
}

func (o ServiceSubscriptionOutput) ToServiceSubscriptionOutput() ServiceSubscriptionOutput {
	return o
}

func (o ServiceSubscriptionOutput) ToServiceSubscriptionOutputWithContext(ctx context.Context) ServiceSubscriptionOutput {
	return o
}

// The endpoint has three format. Available values format:
// - `HTTP Format`: http://xxx.com/xxx
// - `Queue Format`: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
// - `Email Format`: mail:directmail:{MailAddress}
func (o ServiceSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The tag that is used to filter messages. Only the messages that have the same tag can be pushed. A tag is a string that can be up to 16 characters in length. By default, no tag is specified to filter messages.
func (o ServiceSubscriptionOutput) FilterTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringPtrOutput { return v.FilterTag }).(pulumi.StringPtrOutput)
}

// The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. Valid values: `XML`, `JSON` and `SIMPLIFIED`. Default value: `XML`.
func (o ServiceSubscriptionOutput) NotifyContentFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.NotifyContentFormat }).(pulumi.StringOutput)
}

// The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. Default value: `BACKOFF_RETRY`. Valid values:
func (o ServiceSubscriptionOutput) NotifyStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.NotifyStrategy }).(pulumi.StringOutput)
}

// The Push type of Subscription. The Valid values: `http`, `queue`, `mpush`, `alisms` and `email`.
func (o ServiceSubscriptionOutput) PushType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.PushType }).(pulumi.StringOutput)
}

// Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
func (o ServiceSubscriptionOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.SubscriptionName }).(pulumi.StringOutput)
}

// The topic which The subscription belongs to was named with the name. A topic name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 255 characters.
func (o ServiceSubscriptionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSubscription) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type ServiceSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSubscription)(nil)).Elem()
}

func (o ServiceSubscriptionArrayOutput) ToServiceSubscriptionArrayOutput() ServiceSubscriptionArrayOutput {
	return o
}

func (o ServiceSubscriptionArrayOutput) ToServiceSubscriptionArrayOutputWithContext(ctx context.Context) ServiceSubscriptionArrayOutput {
	return o
}

func (o ServiceSubscriptionArrayOutput) Index(i pulumi.IntInput) ServiceSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceSubscription {
		return vs[0].([]*ServiceSubscription)[vs[1].(int)]
	}).(ServiceSubscriptionOutput)
}

type ServiceSubscriptionMapOutput struct{ *pulumi.OutputState }

func (ServiceSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSubscription)(nil)).Elem()
}

func (o ServiceSubscriptionMapOutput) ToServiceSubscriptionMapOutput() ServiceSubscriptionMapOutput {
	return o
}

func (o ServiceSubscriptionMapOutput) ToServiceSubscriptionMapOutputWithContext(ctx context.Context) ServiceSubscriptionMapOutput {
	return o
}

func (o ServiceSubscriptionMapOutput) MapIndex(k pulumi.StringInput) ServiceSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceSubscription {
		return vs[0].(map[string]*ServiceSubscription)[vs[1].(string)]
	}).(ServiceSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSubscriptionInput)(nil)).Elem(), &ServiceSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSubscriptionArrayInput)(nil)).Elem(), ServiceSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSubscriptionMapInput)(nil)).Elem(), ServiceSubscriptionMap{})
	pulumi.RegisterOutputType(ServiceSubscriptionOutput{})
	pulumi.RegisterOutputType(ServiceSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceSubscriptionMapOutput{})
}
