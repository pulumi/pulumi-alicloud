// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package message

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceService struct {
	pulumi.CustomResourceState

	// The status of the Service.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewServiceService registers a new resource with the given unique name, arguments, and options.
func NewServiceService(ctx *pulumi.Context,
	name string, args *ServiceServiceArgs, opts ...pulumi.ResourceOption) (*ServiceService, error) {
	if args == nil {
		args = &ServiceServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceService
	err := ctx.RegisterResource("alicloud:message/serviceService:ServiceService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceService gets an existing ServiceService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceServiceState, opts ...pulumi.ResourceOption) (*ServiceService, error) {
	var resource ServiceService
	err := ctx.ReadResource("alicloud:message/serviceService:ServiceService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceService resources.
type serviceServiceState struct {
	// The status of the Service.
	Status *string `pulumi:"status"`
}

type ServiceServiceState struct {
	// The status of the Service.
	Status pulumi.StringPtrInput
}

func (ServiceServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceServiceState)(nil)).Elem()
}

type serviceServiceArgs struct {
}

// The set of arguments for constructing a ServiceService resource.
type ServiceServiceArgs struct {
}

func (ServiceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceServiceArgs)(nil)).Elem()
}

type ServiceServiceInput interface {
	pulumi.Input

	ToServiceServiceOutput() ServiceServiceOutput
	ToServiceServiceOutputWithContext(ctx context.Context) ServiceServiceOutput
}

func (*ServiceService) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceService)(nil)).Elem()
}

func (i *ServiceService) ToServiceServiceOutput() ServiceServiceOutput {
	return i.ToServiceServiceOutputWithContext(context.Background())
}

func (i *ServiceService) ToServiceServiceOutputWithContext(ctx context.Context) ServiceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceOutput)
}

// ServiceServiceArrayInput is an input type that accepts ServiceServiceArray and ServiceServiceArrayOutput values.
// You can construct a concrete instance of `ServiceServiceArrayInput` via:
//
//	ServiceServiceArray{ ServiceServiceArgs{...} }
type ServiceServiceArrayInput interface {
	pulumi.Input

	ToServiceServiceArrayOutput() ServiceServiceArrayOutput
	ToServiceServiceArrayOutputWithContext(context.Context) ServiceServiceArrayOutput
}

type ServiceServiceArray []ServiceServiceInput

func (ServiceServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceService)(nil)).Elem()
}

func (i ServiceServiceArray) ToServiceServiceArrayOutput() ServiceServiceArrayOutput {
	return i.ToServiceServiceArrayOutputWithContext(context.Background())
}

func (i ServiceServiceArray) ToServiceServiceArrayOutputWithContext(ctx context.Context) ServiceServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceArrayOutput)
}

// ServiceServiceMapInput is an input type that accepts ServiceServiceMap and ServiceServiceMapOutput values.
// You can construct a concrete instance of `ServiceServiceMapInput` via:
//
//	ServiceServiceMap{ "key": ServiceServiceArgs{...} }
type ServiceServiceMapInput interface {
	pulumi.Input

	ToServiceServiceMapOutput() ServiceServiceMapOutput
	ToServiceServiceMapOutputWithContext(context.Context) ServiceServiceMapOutput
}

type ServiceServiceMap map[string]ServiceServiceInput

func (ServiceServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceService)(nil)).Elem()
}

func (i ServiceServiceMap) ToServiceServiceMapOutput() ServiceServiceMapOutput {
	return i.ToServiceServiceMapOutputWithContext(context.Background())
}

func (i ServiceServiceMap) ToServiceServiceMapOutputWithContext(ctx context.Context) ServiceServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceMapOutput)
}

type ServiceServiceOutput struct{ *pulumi.OutputState }

func (ServiceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceService)(nil)).Elem()
}

func (o ServiceServiceOutput) ToServiceServiceOutput() ServiceServiceOutput {
	return o
}

func (o ServiceServiceOutput) ToServiceServiceOutputWithContext(ctx context.Context) ServiceServiceOutput {
	return o
}

// The status of the Service.
func (o ServiceServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceService) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ServiceServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceService)(nil)).Elem()
}

func (o ServiceServiceArrayOutput) ToServiceServiceArrayOutput() ServiceServiceArrayOutput {
	return o
}

func (o ServiceServiceArrayOutput) ToServiceServiceArrayOutputWithContext(ctx context.Context) ServiceServiceArrayOutput {
	return o
}

func (o ServiceServiceArrayOutput) Index(i pulumi.IntInput) ServiceServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceService {
		return vs[0].([]*ServiceService)[vs[1].(int)]
	}).(ServiceServiceOutput)
}

type ServiceServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceService)(nil)).Elem()
}

func (o ServiceServiceMapOutput) ToServiceServiceMapOutput() ServiceServiceMapOutput {
	return o
}

func (o ServiceServiceMapOutput) ToServiceServiceMapOutputWithContext(ctx context.Context) ServiceServiceMapOutput {
	return o
}

func (o ServiceServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceService {
		return vs[0].(map[string]*ServiceService)[vs[1].(string)]
	}).(ServiceServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceInput)(nil)).Elem(), &ServiceService{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceArrayInput)(nil)).Elem(), ServiceServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceServiceMapInput)(nil)).Elem(), ServiceServiceMap{})
	pulumi.RegisterOutputType(ServiceServiceOutput{})
	pulumi.RegisterOutputType(ServiceServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceServiceMapOutput{})
}
