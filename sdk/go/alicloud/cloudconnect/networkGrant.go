// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Cloud Connect Network Grant resource. If the CEN instance to be attached belongs to another account, authorization by the CEN instance is required.
//
// For information about Cloud Connect Network Grant and how to use it, see [What is Cloud Connect Network Grant](https://www.alibabacloud.com/help/doc-detail/94543.htm).
//
// > **NOTE:** Available in 1.63.0+
//
// > **NOTE:** Only the following regions support create Cloud Connect Network Grant. [`cn-shanghai`, `cn-shanghai-finance-1`, `cn-hongkong`, `ap-southeast-1`, `ap-southeast-2`, `ap-southeast-3`, `ap-southeast-5`, `ap-northeast-1`, `eu-central-1`]
//
// ## Example Usage
//
// Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/cen"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/cloudconnect"
// 	"github.com/pulumi/pulumi-alicloud/sdk/v2/go/alicloud/providers"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := providers.Newalicloud(ctx, "ccnAccount", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = providers.Newalicloud(ctx, "cenAccount", &providers.alicloudArgs{
// 			Region:    pulumi.String("cn-hangzhou"),
// 			AccessKey: pulumi.String("xxxxxx"),
// 			SecretKey: pulumi.String("xxxxxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		cen, err := cen.NewInstance(ctx, "cen", nil, pulumi.Provider(alicloud.Cen_account))
// 		if err != nil {
// 			return err
// 		}
// 		ccn, err := cloudconnect.NewNetwork(ctx, "ccn", &cloudconnect.NetworkArgs{
// 			IsDefault: pulumi.Bool(true),
// 		}, pulumi.Provider(alicloud.Ccn_account))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudconnect.NewNetworkGrant(ctx, "_default", &cloudconnect.NetworkGrantArgs{
// 			CcnId:  ccn.ID(),
// 			CenId:  cen.ID(),
// 			CenUid: pulumi.String("xxxxxx"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			ccn,
// 			cen,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// The Cloud Connect Network Grant can be imported using the instance_id, e.g.
//
// ```sh
//  $ pulumi import alicloud:cloudconnect/networkGrant:NetworkGrant example ccn-abc123456:cen-abc123456
// ```
type NetworkGrant struct {
	pulumi.CustomResourceState

	// The ID of the CCN instance.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// The ID of the CEN instance.
	CenId pulumi.StringOutput `pulumi:"cenId"`
	// The ID of the account to which the CEN instance belongs.
	CenUid pulumi.StringOutput `pulumi:"cenUid"`
}

// NewNetworkGrant registers a new resource with the given unique name, arguments, and options.
func NewNetworkGrant(ctx *pulumi.Context,
	name string, args *NetworkGrantArgs, opts ...pulumi.ResourceOption) (*NetworkGrant, error) {
	if args == nil || args.CcnId == nil {
		return nil, errors.New("missing required argument 'CcnId'")
	}
	if args == nil || args.CenId == nil {
		return nil, errors.New("missing required argument 'CenId'")
	}
	if args == nil || args.CenUid == nil {
		return nil, errors.New("missing required argument 'CenUid'")
	}
	if args == nil {
		args = &NetworkGrantArgs{}
	}
	var resource NetworkGrant
	err := ctx.RegisterResource("alicloud:cloudconnect/networkGrant:NetworkGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkGrant gets an existing NetworkGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkGrantState, opts ...pulumi.ResourceOption) (*NetworkGrant, error) {
	var resource NetworkGrant
	err := ctx.ReadResource("alicloud:cloudconnect/networkGrant:NetworkGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkGrant resources.
type networkGrantState struct {
	// The ID of the CCN instance.
	CcnId *string `pulumi:"ccnId"`
	// The ID of the CEN instance.
	CenId *string `pulumi:"cenId"`
	// The ID of the account to which the CEN instance belongs.
	CenUid *string `pulumi:"cenUid"`
}

type NetworkGrantState struct {
	// The ID of the CCN instance.
	CcnId pulumi.StringPtrInput
	// The ID of the CEN instance.
	CenId pulumi.StringPtrInput
	// The ID of the account to which the CEN instance belongs.
	CenUid pulumi.StringPtrInput
}

func (NetworkGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkGrantState)(nil)).Elem()
}

type networkGrantArgs struct {
	// The ID of the CCN instance.
	CcnId string `pulumi:"ccnId"`
	// The ID of the CEN instance.
	CenId string `pulumi:"cenId"`
	// The ID of the account to which the CEN instance belongs.
	CenUid string `pulumi:"cenUid"`
}

// The set of arguments for constructing a NetworkGrant resource.
type NetworkGrantArgs struct {
	// The ID of the CCN instance.
	CcnId pulumi.StringInput
	// The ID of the CEN instance.
	CenId pulumi.StringInput
	// The ID of the account to which the CEN instance belongs.
	CenUid pulumi.StringInput
}

func (NetworkGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkGrantArgs)(nil)).Elem()
}

type NetworkGrantInput interface {
	pulumi.Input

	ToNetworkGrantOutput() NetworkGrantOutput
	ToNetworkGrantOutputWithContext(ctx context.Context) NetworkGrantOutput
}

func (NetworkGrant) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkGrant)(nil)).Elem()
}

func (i NetworkGrant) ToNetworkGrantOutput() NetworkGrantOutput {
	return i.ToNetworkGrantOutputWithContext(context.Background())
}

func (i NetworkGrant) ToNetworkGrantOutputWithContext(ctx context.Context) NetworkGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkGrantOutput)
}

type NetworkGrantOutput struct {
	*pulumi.OutputState
}

func (NetworkGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkGrantOutput)(nil)).Elem()
}

func (o NetworkGrantOutput) ToNetworkGrantOutput() NetworkGrantOutput {
	return o
}

func (o NetworkGrantOutput) ToNetworkGrantOutputWithContext(ctx context.Context) NetworkGrantOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NetworkGrantOutput{})
}
