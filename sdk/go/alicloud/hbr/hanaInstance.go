// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Hybrid Backup Recovery (HBR) Hana Instance resource.
//
// For information about Hybrid Backup Recovery (HBR) Hana Instance and how to use it, see [What is Hana Instance](https://www.alibabacloud.com/help/en/hybrid-backup-recovery/latest/api-doc-hbr-2017-09-08-api-doc-createhanainstance).
//
// > **NOTE:** Available in v1.178.0+.
//
// > **NOTE:** The `sid` attribute is required when destroying resources.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/hbr"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleVault, err := hbr.NewVault(ctx, "exampleVault", &hbr.VaultArgs{
//				VaultName: pulumi.Any(_var.Name),
//			})
//			if err != nil {
//				return err
//			}
//			exampleResourceGroups, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{
//				Status: pulumi.StringRef("OK"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = hbr.NewHanaInstance(ctx, "exampleHanaInstance", &hbr.HanaInstanceArgs{
//				AlertSetting:        pulumi.String("INHERITED"),
//				HanaName:            pulumi.Any(_var.Name),
//				Host:                pulumi.String("1.1.1.1"),
//				InstanceNumber:      pulumi.Int(1),
//				Password:            pulumi.String("YouPassword123"),
//				ResourceGroupId:     *pulumi.String(exampleResourceGroups.Groups[0].Id),
//				Sid:                 pulumi.String("HXE"),
//				UseSsl:              pulumi.Bool(false),
//				UserName:            pulumi.String("admin"),
//				ValidateCertificate: pulumi.Bool(false),
//				VaultId:             exampleVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hybrid Backup Recovery (HBR) Hana Instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:hbr/hanaInstance:HanaInstance example <vault_id>:<hana_instance_id>
//
// ```
type HanaInstance struct {
	pulumi.CustomResourceState

	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting pulumi.StringOutput `pulumi:"alertSetting"`
	// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
	EcsInstanceIds pulumi.StringArrayOutput `pulumi:"ecsInstanceIds"`
	// The id of the Hana Instance.
	HanaInstanceId pulumi.StringOutput `pulumi:"hanaInstanceId"`
	// The name of the SAP HANA instance.
	HanaName pulumi.StringPtrOutput `pulumi:"hanaName"`
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// The instance number of the SAP HANA system.
	InstanceNumber pulumi.IntPtrOutput `pulumi:"instanceNumber"`
	// The password that is used to connect with the SAP HANA database.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The security identifier (SID) of the SAP HANA database.
	Sid pulumi.StringPtrOutput `pulumi:"sid"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
	UseSsl pulumi.BoolPtrOutput `pulumi:"useSsl"`
	// The username of the SYSTEMDB database.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
	// Specifies whether to verify the SSL certificate of the SAP HANA database.
	ValidateCertificate pulumi.BoolPtrOutput `pulumi:"validateCertificate"`
	// The ID of the backup vault.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewHanaInstance registers a new resource with the given unique name, arguments, and options.
func NewHanaInstance(ctx *pulumi.Context,
	name string, args *HanaInstanceArgs, opts ...pulumi.ResourceOption) (*HanaInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource HanaInstance
	err := ctx.RegisterResource("alicloud:hbr/hanaInstance:HanaInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHanaInstance gets an existing HanaInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHanaInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HanaInstanceState, opts ...pulumi.ResourceOption) (*HanaInstance, error) {
	var resource HanaInstance
	err := ctx.ReadResource("alicloud:hbr/hanaInstance:HanaInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HanaInstance resources.
type hanaInstanceState struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting *string `pulumi:"alertSetting"`
	// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
	EcsInstanceIds []string `pulumi:"ecsInstanceIds"`
	// The id of the Hana Instance.
	HanaInstanceId *string `pulumi:"hanaInstanceId"`
	// The name of the SAP HANA instance.
	HanaName *string `pulumi:"hanaName"`
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host *string `pulumi:"host"`
	// The instance number of the SAP HANA system.
	InstanceNumber *int `pulumi:"instanceNumber"`
	// The password that is used to connect with the SAP HANA database.
	Password *string `pulumi:"password"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The security identifier (SID) of the SAP HANA database.
	Sid *string `pulumi:"sid"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
	UseSsl *bool `pulumi:"useSsl"`
	// The username of the SYSTEMDB database.
	UserName *string `pulumi:"userName"`
	// Specifies whether to verify the SSL certificate of the SAP HANA database.
	ValidateCertificate *bool `pulumi:"validateCertificate"`
	// The ID of the backup vault.
	VaultId *string `pulumi:"vaultId"`
}

type HanaInstanceState struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting pulumi.StringPtrInput
	// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
	EcsInstanceIds pulumi.StringArrayInput
	// The id of the Hana Instance.
	HanaInstanceId pulumi.StringPtrInput
	// The name of the SAP HANA instance.
	HanaName pulumi.StringPtrInput
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host pulumi.StringPtrInput
	// The instance number of the SAP HANA system.
	InstanceNumber pulumi.IntPtrInput
	// The password that is used to connect with the SAP HANA database.
	Password pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The security identifier (SID) of the SAP HANA database.
	Sid pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
	UseSsl pulumi.BoolPtrInput
	// The username of the SYSTEMDB database.
	UserName pulumi.StringPtrInput
	// Specifies whether to verify the SSL certificate of the SAP HANA database.
	ValidateCertificate pulumi.BoolPtrInput
	// The ID of the backup vault.
	VaultId pulumi.StringPtrInput
}

func (HanaInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hanaInstanceState)(nil)).Elem()
}

type hanaInstanceArgs struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting *string `pulumi:"alertSetting"`
	// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
	EcsInstanceIds []string `pulumi:"ecsInstanceIds"`
	// The name of the SAP HANA instance.
	HanaName *string `pulumi:"hanaName"`
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host *string `pulumi:"host"`
	// The instance number of the SAP HANA system.
	InstanceNumber *int `pulumi:"instanceNumber"`
	// The password that is used to connect with the SAP HANA database.
	Password *string `pulumi:"password"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The security identifier (SID) of the SAP HANA database.
	Sid *string `pulumi:"sid"`
	// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
	UseSsl *bool `pulumi:"useSsl"`
	// The username of the SYSTEMDB database.
	UserName *string `pulumi:"userName"`
	// Specifies whether to verify the SSL certificate of the SAP HANA database.
	ValidateCertificate *bool `pulumi:"validateCertificate"`
	// The ID of the backup vault.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a HanaInstance resource.
type HanaInstanceArgs struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting pulumi.StringPtrInput
	// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
	EcsInstanceIds pulumi.StringArrayInput
	// The name of the SAP HANA instance.
	HanaName pulumi.StringPtrInput
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host pulumi.StringPtrInput
	// The instance number of the SAP HANA system.
	InstanceNumber pulumi.IntPtrInput
	// The password that is used to connect with the SAP HANA database.
	Password pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The security identifier (SID) of the SAP HANA database.
	Sid pulumi.StringPtrInput
	// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
	UseSsl pulumi.BoolPtrInput
	// The username of the SYSTEMDB database.
	UserName pulumi.StringPtrInput
	// Specifies whether to verify the SSL certificate of the SAP HANA database.
	ValidateCertificate pulumi.BoolPtrInput
	// The ID of the backup vault.
	VaultId pulumi.StringInput
}

func (HanaInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hanaInstanceArgs)(nil)).Elem()
}

type HanaInstanceInput interface {
	pulumi.Input

	ToHanaInstanceOutput() HanaInstanceOutput
	ToHanaInstanceOutputWithContext(ctx context.Context) HanaInstanceOutput
}

func (*HanaInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaInstance)(nil)).Elem()
}

func (i *HanaInstance) ToHanaInstanceOutput() HanaInstanceOutput {
	return i.ToHanaInstanceOutputWithContext(context.Background())
}

func (i *HanaInstance) ToHanaInstanceOutputWithContext(ctx context.Context) HanaInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaInstanceOutput)
}

// HanaInstanceArrayInput is an input type that accepts HanaInstanceArray and HanaInstanceArrayOutput values.
// You can construct a concrete instance of `HanaInstanceArrayInput` via:
//
//	HanaInstanceArray{ HanaInstanceArgs{...} }
type HanaInstanceArrayInput interface {
	pulumi.Input

	ToHanaInstanceArrayOutput() HanaInstanceArrayOutput
	ToHanaInstanceArrayOutputWithContext(context.Context) HanaInstanceArrayOutput
}

type HanaInstanceArray []HanaInstanceInput

func (HanaInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HanaInstance)(nil)).Elem()
}

func (i HanaInstanceArray) ToHanaInstanceArrayOutput() HanaInstanceArrayOutput {
	return i.ToHanaInstanceArrayOutputWithContext(context.Background())
}

func (i HanaInstanceArray) ToHanaInstanceArrayOutputWithContext(ctx context.Context) HanaInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaInstanceArrayOutput)
}

// HanaInstanceMapInput is an input type that accepts HanaInstanceMap and HanaInstanceMapOutput values.
// You can construct a concrete instance of `HanaInstanceMapInput` via:
//
//	HanaInstanceMap{ "key": HanaInstanceArgs{...} }
type HanaInstanceMapInput interface {
	pulumi.Input

	ToHanaInstanceMapOutput() HanaInstanceMapOutput
	ToHanaInstanceMapOutputWithContext(context.Context) HanaInstanceMapOutput
}

type HanaInstanceMap map[string]HanaInstanceInput

func (HanaInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HanaInstance)(nil)).Elem()
}

func (i HanaInstanceMap) ToHanaInstanceMapOutput() HanaInstanceMapOutput {
	return i.ToHanaInstanceMapOutputWithContext(context.Background())
}

func (i HanaInstanceMap) ToHanaInstanceMapOutputWithContext(ctx context.Context) HanaInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaInstanceMapOutput)
}

type HanaInstanceOutput struct{ *pulumi.OutputState }

func (HanaInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaInstance)(nil)).Elem()
}

func (o HanaInstanceOutput) ToHanaInstanceOutput() HanaInstanceOutput {
	return o
}

func (o HanaInstanceOutput) ToHanaInstanceOutputWithContext(ctx context.Context) HanaInstanceOutput {
	return o
}

// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
func (o HanaInstanceOutput) AlertSetting() pulumi.StringOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringOutput { return v.AlertSetting }).(pulumi.StringOutput)
}

// The IDs of ECS instances that host the SAP HANA instance to be registered. HBR installs backup clients on the specified ECS instances.
func (o HanaInstanceOutput) EcsInstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringArrayOutput { return v.EcsInstanceIds }).(pulumi.StringArrayOutput)
}

// The id of the Hana Instance.
func (o HanaInstanceOutput) HanaInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringOutput { return v.HanaInstanceId }).(pulumi.StringOutput)
}

// The name of the SAP HANA instance.
func (o HanaInstanceOutput) HanaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringPtrOutput { return v.HanaName }).(pulumi.StringPtrOutput)
}

// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
func (o HanaInstanceOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// The instance number of the SAP HANA system.
func (o HanaInstanceOutput) InstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.IntPtrOutput { return v.InstanceNumber }).(pulumi.IntPtrOutput)
}

// The password that is used to connect with the SAP HANA database.
func (o HanaInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the resource group.
func (o HanaInstanceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The security identifier (SID) of the SAP HANA database.
func (o HanaInstanceOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringPtrOutput { return v.Sid }).(pulumi.StringPtrOutput)
}

// The status of the resource.
func (o HanaInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies whether to connect with the SAP HANA database over Secure Sockets Layer (SSL).
func (o HanaInstanceOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.BoolPtrOutput { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The username of the SYSTEMDB database.
func (o HanaInstanceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

// Specifies whether to verify the SSL certificate of the SAP HANA database.
func (o HanaInstanceOutput) ValidateCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.BoolPtrOutput { return v.ValidateCertificate }).(pulumi.BoolPtrOutput)
}

// The ID of the backup vault.
func (o HanaInstanceOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *HanaInstance) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type HanaInstanceArrayOutput struct{ *pulumi.OutputState }

func (HanaInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HanaInstance)(nil)).Elem()
}

func (o HanaInstanceArrayOutput) ToHanaInstanceArrayOutput() HanaInstanceArrayOutput {
	return o
}

func (o HanaInstanceArrayOutput) ToHanaInstanceArrayOutputWithContext(ctx context.Context) HanaInstanceArrayOutput {
	return o
}

func (o HanaInstanceArrayOutput) Index(i pulumi.IntInput) HanaInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HanaInstance {
		return vs[0].([]*HanaInstance)[vs[1].(int)]
	}).(HanaInstanceOutput)
}

type HanaInstanceMapOutput struct{ *pulumi.OutputState }

func (HanaInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HanaInstance)(nil)).Elem()
}

func (o HanaInstanceMapOutput) ToHanaInstanceMapOutput() HanaInstanceMapOutput {
	return o
}

func (o HanaInstanceMapOutput) ToHanaInstanceMapOutputWithContext(ctx context.Context) HanaInstanceMapOutput {
	return o
}

func (o HanaInstanceMapOutput) MapIndex(k pulumi.StringInput) HanaInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HanaInstance {
		return vs[0].(map[string]*HanaInstance)[vs[1].(string)]
	}).(HanaInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HanaInstanceInput)(nil)).Elem(), &HanaInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*HanaInstanceArrayInput)(nil)).Elem(), HanaInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HanaInstanceMapInput)(nil)).Elem(), HanaInstanceMap{})
	pulumi.RegisterOutputType(HanaInstanceOutput{})
	pulumi.RegisterOutputType(HanaInstanceArrayOutput{})
	pulumi.RegisterOutputType(HanaInstanceMapOutput{})
}
