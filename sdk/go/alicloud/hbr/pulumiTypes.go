// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type OtsBackupPlanOtsDetail struct {
	// The names of the destination tables in the Tablestore instance. **Note:** Required while sourceType equals `OTS_TABLE`.
	TableNames []string `pulumi:"tableNames"`
}

// OtsBackupPlanOtsDetailInput is an input type that accepts OtsBackupPlanOtsDetailArgs and OtsBackupPlanOtsDetailOutput values.
// You can construct a concrete instance of `OtsBackupPlanOtsDetailInput` via:
//
//	OtsBackupPlanOtsDetailArgs{...}
type OtsBackupPlanOtsDetailInput interface {
	pulumi.Input

	ToOtsBackupPlanOtsDetailOutput() OtsBackupPlanOtsDetailOutput
	ToOtsBackupPlanOtsDetailOutputWithContext(context.Context) OtsBackupPlanOtsDetailOutput
}

type OtsBackupPlanOtsDetailArgs struct {
	// The names of the destination tables in the Tablestore instance. **Note:** Required while sourceType equals `OTS_TABLE`.
	TableNames pulumi.StringArrayInput `pulumi:"tableNames"`
}

func (OtsBackupPlanOtsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OtsBackupPlanOtsDetail)(nil)).Elem()
}

func (i OtsBackupPlanOtsDetailArgs) ToOtsBackupPlanOtsDetailOutput() OtsBackupPlanOtsDetailOutput {
	return i.ToOtsBackupPlanOtsDetailOutputWithContext(context.Background())
}

func (i OtsBackupPlanOtsDetailArgs) ToOtsBackupPlanOtsDetailOutputWithContext(ctx context.Context) OtsBackupPlanOtsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtsBackupPlanOtsDetailOutput)
}

// OtsBackupPlanOtsDetailArrayInput is an input type that accepts OtsBackupPlanOtsDetailArray and OtsBackupPlanOtsDetailArrayOutput values.
// You can construct a concrete instance of `OtsBackupPlanOtsDetailArrayInput` via:
//
//	OtsBackupPlanOtsDetailArray{ OtsBackupPlanOtsDetailArgs{...} }
type OtsBackupPlanOtsDetailArrayInput interface {
	pulumi.Input

	ToOtsBackupPlanOtsDetailArrayOutput() OtsBackupPlanOtsDetailArrayOutput
	ToOtsBackupPlanOtsDetailArrayOutputWithContext(context.Context) OtsBackupPlanOtsDetailArrayOutput
}

type OtsBackupPlanOtsDetailArray []OtsBackupPlanOtsDetailInput

func (OtsBackupPlanOtsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OtsBackupPlanOtsDetail)(nil)).Elem()
}

func (i OtsBackupPlanOtsDetailArray) ToOtsBackupPlanOtsDetailArrayOutput() OtsBackupPlanOtsDetailArrayOutput {
	return i.ToOtsBackupPlanOtsDetailArrayOutputWithContext(context.Background())
}

func (i OtsBackupPlanOtsDetailArray) ToOtsBackupPlanOtsDetailArrayOutputWithContext(ctx context.Context) OtsBackupPlanOtsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtsBackupPlanOtsDetailArrayOutput)
}

type OtsBackupPlanOtsDetailOutput struct{ *pulumi.OutputState }

func (OtsBackupPlanOtsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtsBackupPlanOtsDetail)(nil)).Elem()
}

func (o OtsBackupPlanOtsDetailOutput) ToOtsBackupPlanOtsDetailOutput() OtsBackupPlanOtsDetailOutput {
	return o
}

func (o OtsBackupPlanOtsDetailOutput) ToOtsBackupPlanOtsDetailOutputWithContext(ctx context.Context) OtsBackupPlanOtsDetailOutput {
	return o
}

// The names of the destination tables in the Tablestore instance. **Note:** Required while sourceType equals `OTS_TABLE`.
func (o OtsBackupPlanOtsDetailOutput) TableNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OtsBackupPlanOtsDetail) []string { return v.TableNames }).(pulumi.StringArrayOutput)
}

type OtsBackupPlanOtsDetailArrayOutput struct{ *pulumi.OutputState }

func (OtsBackupPlanOtsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OtsBackupPlanOtsDetail)(nil)).Elem()
}

func (o OtsBackupPlanOtsDetailArrayOutput) ToOtsBackupPlanOtsDetailArrayOutput() OtsBackupPlanOtsDetailArrayOutput {
	return o
}

func (o OtsBackupPlanOtsDetailArrayOutput) ToOtsBackupPlanOtsDetailArrayOutputWithContext(ctx context.Context) OtsBackupPlanOtsDetailArrayOutput {
	return o
}

func (o OtsBackupPlanOtsDetailArrayOutput) Index(i pulumi.IntInput) OtsBackupPlanOtsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OtsBackupPlanOtsDetail {
		return vs[0].([]OtsBackupPlanOtsDetail)[vs[1].(int)]
	}).(OtsBackupPlanOtsDetailOutput)
}

type OtsBackupPlanRule struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType *string `pulumi:"backupType"`
	// Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
	Disabled *bool `pulumi:"disabled"`
	// Backup retention days, the minimum is 1.
	Retention *string `pulumi:"retention"`
	// The name of the backup rule.**Note:** Required while sourceType equals `OTS_TABLE`. `ruleName` should be unique for the specific user.
	RuleName *string `pulumi:"ruleName"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule *string `pulumi:"schedule"`
}

// OtsBackupPlanRuleInput is an input type that accepts OtsBackupPlanRuleArgs and OtsBackupPlanRuleOutput values.
// You can construct a concrete instance of `OtsBackupPlanRuleInput` via:
//
//	OtsBackupPlanRuleArgs{...}
type OtsBackupPlanRuleInput interface {
	pulumi.Input

	ToOtsBackupPlanRuleOutput() OtsBackupPlanRuleOutput
	ToOtsBackupPlanRuleOutputWithContext(context.Context) OtsBackupPlanRuleOutput
}

type OtsBackupPlanRuleArgs struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType pulumi.StringPtrInput `pulumi:"backupType"`
	// Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Backup retention days, the minimum is 1.
	Retention pulumi.StringPtrInput `pulumi:"retention"`
	// The name of the backup rule.**Note:** Required while sourceType equals `OTS_TABLE`. `ruleName` should be unique for the specific user.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
}

func (OtsBackupPlanRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OtsBackupPlanRule)(nil)).Elem()
}

func (i OtsBackupPlanRuleArgs) ToOtsBackupPlanRuleOutput() OtsBackupPlanRuleOutput {
	return i.ToOtsBackupPlanRuleOutputWithContext(context.Background())
}

func (i OtsBackupPlanRuleArgs) ToOtsBackupPlanRuleOutputWithContext(ctx context.Context) OtsBackupPlanRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtsBackupPlanRuleOutput)
}

// OtsBackupPlanRuleArrayInput is an input type that accepts OtsBackupPlanRuleArray and OtsBackupPlanRuleArrayOutput values.
// You can construct a concrete instance of `OtsBackupPlanRuleArrayInput` via:
//
//	OtsBackupPlanRuleArray{ OtsBackupPlanRuleArgs{...} }
type OtsBackupPlanRuleArrayInput interface {
	pulumi.Input

	ToOtsBackupPlanRuleArrayOutput() OtsBackupPlanRuleArrayOutput
	ToOtsBackupPlanRuleArrayOutputWithContext(context.Context) OtsBackupPlanRuleArrayOutput
}

type OtsBackupPlanRuleArray []OtsBackupPlanRuleInput

func (OtsBackupPlanRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OtsBackupPlanRule)(nil)).Elem()
}

func (i OtsBackupPlanRuleArray) ToOtsBackupPlanRuleArrayOutput() OtsBackupPlanRuleArrayOutput {
	return i.ToOtsBackupPlanRuleArrayOutputWithContext(context.Background())
}

func (i OtsBackupPlanRuleArray) ToOtsBackupPlanRuleArrayOutputWithContext(ctx context.Context) OtsBackupPlanRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtsBackupPlanRuleArrayOutput)
}

type OtsBackupPlanRuleOutput struct{ *pulumi.OutputState }

func (OtsBackupPlanRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtsBackupPlanRule)(nil)).Elem()
}

func (o OtsBackupPlanRuleOutput) ToOtsBackupPlanRuleOutput() OtsBackupPlanRuleOutput {
	return o
}

func (o OtsBackupPlanRuleOutput) ToOtsBackupPlanRuleOutputWithContext(ctx context.Context) OtsBackupPlanRuleOutput {
	return o
}

// Backup type. Valid values: `COMPLETE`.
func (o OtsBackupPlanRuleOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OtsBackupPlanRule) *string { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Whether to disable the backup task. Valid values: `true`, `false`. Default values: `false`.
func (o OtsBackupPlanRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OtsBackupPlanRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Backup retention days, the minimum is 1.
func (o OtsBackupPlanRuleOutput) Retention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OtsBackupPlanRule) *string { return v.Retention }).(pulumi.StringPtrOutput)
}

// The name of the backup rule.**Note:** Required while sourceType equals `OTS_TABLE`. `ruleName` should be unique for the specific user.
func (o OtsBackupPlanRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OtsBackupPlanRule) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
func (o OtsBackupPlanRuleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OtsBackupPlanRule) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

type OtsBackupPlanRuleArrayOutput struct{ *pulumi.OutputState }

func (OtsBackupPlanRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OtsBackupPlanRule)(nil)).Elem()
}

func (o OtsBackupPlanRuleArrayOutput) ToOtsBackupPlanRuleArrayOutput() OtsBackupPlanRuleArrayOutput {
	return o
}

func (o OtsBackupPlanRuleArrayOutput) ToOtsBackupPlanRuleArrayOutputWithContext(ctx context.Context) OtsBackupPlanRuleArrayOutput {
	return o
}

func (o OtsBackupPlanRuleArrayOutput) Index(i pulumi.IntInput) OtsBackupPlanRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OtsBackupPlanRule {
		return vs[0].([]OtsBackupPlanRule)[vs[1].(int)]
	}).(OtsBackupPlanRuleOutput)
}

type RestoreJobOtsDetail struct {
	// Whether to overwrite the existing table storage recovery task. Valid values: `true`, `false`.
	OverwriteExisting *bool `pulumi:"overwriteExisting"`
}

// RestoreJobOtsDetailInput is an input type that accepts RestoreJobOtsDetailArgs and RestoreJobOtsDetailOutput values.
// You can construct a concrete instance of `RestoreJobOtsDetailInput` via:
//
//	RestoreJobOtsDetailArgs{...}
type RestoreJobOtsDetailInput interface {
	pulumi.Input

	ToRestoreJobOtsDetailOutput() RestoreJobOtsDetailOutput
	ToRestoreJobOtsDetailOutputWithContext(context.Context) RestoreJobOtsDetailOutput
}

type RestoreJobOtsDetailArgs struct {
	// Whether to overwrite the existing table storage recovery task. Valid values: `true`, `false`.
	OverwriteExisting pulumi.BoolPtrInput `pulumi:"overwriteExisting"`
}

func (RestoreJobOtsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreJobOtsDetail)(nil)).Elem()
}

func (i RestoreJobOtsDetailArgs) ToRestoreJobOtsDetailOutput() RestoreJobOtsDetailOutput {
	return i.ToRestoreJobOtsDetailOutputWithContext(context.Background())
}

func (i RestoreJobOtsDetailArgs) ToRestoreJobOtsDetailOutputWithContext(ctx context.Context) RestoreJobOtsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreJobOtsDetailOutput)
}

func (i RestoreJobOtsDetailArgs) ToRestoreJobOtsDetailPtrOutput() RestoreJobOtsDetailPtrOutput {
	return i.ToRestoreJobOtsDetailPtrOutputWithContext(context.Background())
}

func (i RestoreJobOtsDetailArgs) ToRestoreJobOtsDetailPtrOutputWithContext(ctx context.Context) RestoreJobOtsDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreJobOtsDetailOutput).ToRestoreJobOtsDetailPtrOutputWithContext(ctx)
}

// RestoreJobOtsDetailPtrInput is an input type that accepts RestoreJobOtsDetailArgs, RestoreJobOtsDetailPtr and RestoreJobOtsDetailPtrOutput values.
// You can construct a concrete instance of `RestoreJobOtsDetailPtrInput` via:
//
//	        RestoreJobOtsDetailArgs{...}
//
//	or:
//
//	        nil
type RestoreJobOtsDetailPtrInput interface {
	pulumi.Input

	ToRestoreJobOtsDetailPtrOutput() RestoreJobOtsDetailPtrOutput
	ToRestoreJobOtsDetailPtrOutputWithContext(context.Context) RestoreJobOtsDetailPtrOutput
}

type restoreJobOtsDetailPtrType RestoreJobOtsDetailArgs

func RestoreJobOtsDetailPtr(v *RestoreJobOtsDetailArgs) RestoreJobOtsDetailPtrInput {
	return (*restoreJobOtsDetailPtrType)(v)
}

func (*restoreJobOtsDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreJobOtsDetail)(nil)).Elem()
}

func (i *restoreJobOtsDetailPtrType) ToRestoreJobOtsDetailPtrOutput() RestoreJobOtsDetailPtrOutput {
	return i.ToRestoreJobOtsDetailPtrOutputWithContext(context.Background())
}

func (i *restoreJobOtsDetailPtrType) ToRestoreJobOtsDetailPtrOutputWithContext(ctx context.Context) RestoreJobOtsDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreJobOtsDetailPtrOutput)
}

type RestoreJobOtsDetailOutput struct{ *pulumi.OutputState }

func (RestoreJobOtsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreJobOtsDetail)(nil)).Elem()
}

func (o RestoreJobOtsDetailOutput) ToRestoreJobOtsDetailOutput() RestoreJobOtsDetailOutput {
	return o
}

func (o RestoreJobOtsDetailOutput) ToRestoreJobOtsDetailOutputWithContext(ctx context.Context) RestoreJobOtsDetailOutput {
	return o
}

func (o RestoreJobOtsDetailOutput) ToRestoreJobOtsDetailPtrOutput() RestoreJobOtsDetailPtrOutput {
	return o.ToRestoreJobOtsDetailPtrOutputWithContext(context.Background())
}

func (o RestoreJobOtsDetailOutput) ToRestoreJobOtsDetailPtrOutputWithContext(ctx context.Context) RestoreJobOtsDetailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestoreJobOtsDetail) *RestoreJobOtsDetail {
		return &v
	}).(RestoreJobOtsDetailPtrOutput)
}

// Whether to overwrite the existing table storage recovery task. Valid values: `true`, `false`.
func (o RestoreJobOtsDetailOutput) OverwriteExisting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RestoreJobOtsDetail) *bool { return v.OverwriteExisting }).(pulumi.BoolPtrOutput)
}

type RestoreJobOtsDetailPtrOutput struct{ *pulumi.OutputState }

func (RestoreJobOtsDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreJobOtsDetail)(nil)).Elem()
}

func (o RestoreJobOtsDetailPtrOutput) ToRestoreJobOtsDetailPtrOutput() RestoreJobOtsDetailPtrOutput {
	return o
}

func (o RestoreJobOtsDetailPtrOutput) ToRestoreJobOtsDetailPtrOutputWithContext(ctx context.Context) RestoreJobOtsDetailPtrOutput {
	return o
}

func (o RestoreJobOtsDetailPtrOutput) Elem() RestoreJobOtsDetailOutput {
	return o.ApplyT(func(v *RestoreJobOtsDetail) RestoreJobOtsDetail {
		if v != nil {
			return *v
		}
		var ret RestoreJobOtsDetail
		return ret
	}).(RestoreJobOtsDetailOutput)
}

// Whether to overwrite the existing table storage recovery task. Valid values: `true`, `false`.
func (o RestoreJobOtsDetailPtrOutput) OverwriteExisting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestoreJobOtsDetail) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExisting
	}).(pulumi.BoolPtrOutput)
}

type ServerBackupPlanDetail struct {
	// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
	AppConsistent bool `pulumi:"appConsistent"`
	// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRegionId *string `pulumi:"destinationRegionId"`
	// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRetention *int `pulumi:"destinationRetention"`
	// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
	DiskIdLists []string `pulumi:"diskIdLists"`
	// Whether replicate to another region. Valid values: `true`, `false`.
	DoCopy *bool `pulumi:"doCopy"`
	// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
	EnableFsFreeze *bool `pulumi:"enableFsFreeze"`
	// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PostScriptPath *string `pulumi:"postScriptPath"`
	// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PreScriptPath *string `pulumi:"preScriptPath"`
	// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
	SnapshotGroup bool `pulumi:"snapshotGroup"`
	// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// ServerBackupPlanDetailInput is an input type that accepts ServerBackupPlanDetailArgs and ServerBackupPlanDetailOutput values.
// You can construct a concrete instance of `ServerBackupPlanDetailInput` via:
//
//	ServerBackupPlanDetailArgs{...}
type ServerBackupPlanDetailInput interface {
	pulumi.Input

	ToServerBackupPlanDetailOutput() ServerBackupPlanDetailOutput
	ToServerBackupPlanDetailOutputWithContext(context.Context) ServerBackupPlanDetailOutput
}

type ServerBackupPlanDetailArgs struct {
	// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
	AppConsistent pulumi.BoolInput `pulumi:"appConsistent"`
	// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRegionId pulumi.StringPtrInput `pulumi:"destinationRegionId"`
	// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRetention pulumi.IntPtrInput `pulumi:"destinationRetention"`
	// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
	DiskIdLists pulumi.StringArrayInput `pulumi:"diskIdLists"`
	// Whether replicate to another region. Valid values: `true`, `false`.
	DoCopy pulumi.BoolPtrInput `pulumi:"doCopy"`
	// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
	EnableFsFreeze pulumi.BoolPtrInput `pulumi:"enableFsFreeze"`
	// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PostScriptPath pulumi.StringPtrInput `pulumi:"postScriptPath"`
	// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PreScriptPath pulumi.StringPtrInput `pulumi:"preScriptPath"`
	// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
	SnapshotGroup pulumi.BoolInput `pulumi:"snapshotGroup"`
	// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
	TimeoutInSeconds pulumi.IntPtrInput `pulumi:"timeoutInSeconds"`
}

func (ServerBackupPlanDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBackupPlanDetail)(nil)).Elem()
}

func (i ServerBackupPlanDetailArgs) ToServerBackupPlanDetailOutput() ServerBackupPlanDetailOutput {
	return i.ToServerBackupPlanDetailOutputWithContext(context.Background())
}

func (i ServerBackupPlanDetailArgs) ToServerBackupPlanDetailOutputWithContext(ctx context.Context) ServerBackupPlanDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBackupPlanDetailOutput)
}

// ServerBackupPlanDetailArrayInput is an input type that accepts ServerBackupPlanDetailArray and ServerBackupPlanDetailArrayOutput values.
// You can construct a concrete instance of `ServerBackupPlanDetailArrayInput` via:
//
//	ServerBackupPlanDetailArray{ ServerBackupPlanDetailArgs{...} }
type ServerBackupPlanDetailArrayInput interface {
	pulumi.Input

	ToServerBackupPlanDetailArrayOutput() ServerBackupPlanDetailArrayOutput
	ToServerBackupPlanDetailArrayOutputWithContext(context.Context) ServerBackupPlanDetailArrayOutput
}

type ServerBackupPlanDetailArray []ServerBackupPlanDetailInput

func (ServerBackupPlanDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerBackupPlanDetail)(nil)).Elem()
}

func (i ServerBackupPlanDetailArray) ToServerBackupPlanDetailArrayOutput() ServerBackupPlanDetailArrayOutput {
	return i.ToServerBackupPlanDetailArrayOutputWithContext(context.Background())
}

func (i ServerBackupPlanDetailArray) ToServerBackupPlanDetailArrayOutputWithContext(ctx context.Context) ServerBackupPlanDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBackupPlanDetailArrayOutput)
}

type ServerBackupPlanDetailOutput struct{ *pulumi.OutputState }

func (ServerBackupPlanDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBackupPlanDetail)(nil)).Elem()
}

func (o ServerBackupPlanDetailOutput) ToServerBackupPlanDetailOutput() ServerBackupPlanDetailOutput {
	return o
}

func (o ServerBackupPlanDetailOutput) ToServerBackupPlanDetailOutputWithContext(ctx context.Context) ServerBackupPlanDetailOutput {
	return o
}

// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
func (o ServerBackupPlanDetailOutput) AppConsistent() pulumi.BoolOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) bool { return v.AppConsistent }).(pulumi.BoolOutput)
}

// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
func (o ServerBackupPlanDetailOutput) DestinationRegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *string { return v.DestinationRegionId }).(pulumi.StringPtrOutput)
}

// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
func (o ServerBackupPlanDetailOutput) DestinationRetention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *int { return v.DestinationRetention }).(pulumi.IntPtrOutput)
}

// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
func (o ServerBackupPlanDetailOutput) DiskIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) []string { return v.DiskIdLists }).(pulumi.StringArrayOutput)
}

// Whether replicate to another region. Valid values: `true`, `false`.
func (o ServerBackupPlanDetailOutput) DoCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *bool { return v.DoCopy }).(pulumi.BoolPtrOutput)
}

// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
func (o ServerBackupPlanDetailOutput) EnableFsFreeze() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *bool { return v.EnableFsFreeze }).(pulumi.BoolPtrOutput)
}

// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
func (o ServerBackupPlanDetailOutput) PostScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *string { return v.PostScriptPath }).(pulumi.StringPtrOutput)
}

// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
func (o ServerBackupPlanDetailOutput) PreScriptPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *string { return v.PreScriptPath }).(pulumi.StringPtrOutput)
}

// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
func (o ServerBackupPlanDetailOutput) SnapshotGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) bool { return v.SnapshotGroup }).(pulumi.BoolOutput)
}

// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
func (o ServerBackupPlanDetailOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerBackupPlanDetail) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

type ServerBackupPlanDetailArrayOutput struct{ *pulumi.OutputState }

func (ServerBackupPlanDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerBackupPlanDetail)(nil)).Elem()
}

func (o ServerBackupPlanDetailArrayOutput) ToServerBackupPlanDetailArrayOutput() ServerBackupPlanDetailArrayOutput {
	return o
}

func (o ServerBackupPlanDetailArrayOutput) ToServerBackupPlanDetailArrayOutputWithContext(ctx context.Context) ServerBackupPlanDetailArrayOutput {
	return o
}

func (o ServerBackupPlanDetailArrayOutput) Index(i pulumi.IntInput) ServerBackupPlanDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerBackupPlanDetail {
		return vs[0].([]ServerBackupPlanDetail)[vs[1].(int)]
	}).(ServerBackupPlanDetailOutput)
}

type GetBackupJobsFilter struct {
	// The key of the field to filter. Valid values: `PlanId`, `VaultId`, `InstanceId`, `Bucket`, `FileSystemId`, `CompleteTime`.
	Key *string `pulumi:"key"`
	// The operator of the field to filter. Valid values: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`, `IN`.
	Operator *string `pulumi:"operator"`
	// Set of values that are accepted for the given field.
	//
	// > **NOTE:** Numeric types such as `CompleteTime` do not support `IN` operations for the time being.
	Values []string `pulumi:"values"`
}

// GetBackupJobsFilterInput is an input type that accepts GetBackupJobsFilterArgs and GetBackupJobsFilterOutput values.
// You can construct a concrete instance of `GetBackupJobsFilterInput` via:
//
//	GetBackupJobsFilterArgs{...}
type GetBackupJobsFilterInput interface {
	pulumi.Input

	ToGetBackupJobsFilterOutput() GetBackupJobsFilterOutput
	ToGetBackupJobsFilterOutputWithContext(context.Context) GetBackupJobsFilterOutput
}

type GetBackupJobsFilterArgs struct {
	// The key of the field to filter. Valid values: `PlanId`, `VaultId`, `InstanceId`, `Bucket`, `FileSystemId`, `CompleteTime`.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator of the field to filter. Valid values: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`, `IN`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Set of values that are accepted for the given field.
	//
	// > **NOTE:** Numeric types such as `CompleteTime` do not support `IN` operations for the time being.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetBackupJobsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsFilter)(nil)).Elem()
}

func (i GetBackupJobsFilterArgs) ToGetBackupJobsFilterOutput() GetBackupJobsFilterOutput {
	return i.ToGetBackupJobsFilterOutputWithContext(context.Background())
}

func (i GetBackupJobsFilterArgs) ToGetBackupJobsFilterOutputWithContext(ctx context.Context) GetBackupJobsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsFilterOutput)
}

// GetBackupJobsFilterArrayInput is an input type that accepts GetBackupJobsFilterArray and GetBackupJobsFilterArrayOutput values.
// You can construct a concrete instance of `GetBackupJobsFilterArrayInput` via:
//
//	GetBackupJobsFilterArray{ GetBackupJobsFilterArgs{...} }
type GetBackupJobsFilterArrayInput interface {
	pulumi.Input

	ToGetBackupJobsFilterArrayOutput() GetBackupJobsFilterArrayOutput
	ToGetBackupJobsFilterArrayOutputWithContext(context.Context) GetBackupJobsFilterArrayOutput
}

type GetBackupJobsFilterArray []GetBackupJobsFilterInput

func (GetBackupJobsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsFilter)(nil)).Elem()
}

func (i GetBackupJobsFilterArray) ToGetBackupJobsFilterArrayOutput() GetBackupJobsFilterArrayOutput {
	return i.ToGetBackupJobsFilterArrayOutputWithContext(context.Background())
}

func (i GetBackupJobsFilterArray) ToGetBackupJobsFilterArrayOutputWithContext(ctx context.Context) GetBackupJobsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsFilterArrayOutput)
}

type GetBackupJobsFilterOutput struct{ *pulumi.OutputState }

func (GetBackupJobsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsFilter)(nil)).Elem()
}

func (o GetBackupJobsFilterOutput) ToGetBackupJobsFilterOutput() GetBackupJobsFilterOutput {
	return o
}

func (o GetBackupJobsFilterOutput) ToGetBackupJobsFilterOutputWithContext(ctx context.Context) GetBackupJobsFilterOutput {
	return o
}

// The key of the field to filter. Valid values: `PlanId`, `VaultId`, `InstanceId`, `Bucket`, `FileSystemId`, `CompleteTime`.
func (o GetBackupJobsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackupJobsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator of the field to filter. Valid values: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `BETWEEN`, `IN`.
func (o GetBackupJobsFilterOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackupJobsFilter) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Set of values that are accepted for the given field.
//
// > **NOTE:** Numeric types such as `CompleteTime` do not support `IN` operations for the time being.
func (o GetBackupJobsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackupJobsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetBackupJobsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetBackupJobsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsFilter)(nil)).Elem()
}

func (o GetBackupJobsFilterArrayOutput) ToGetBackupJobsFilterArrayOutput() GetBackupJobsFilterArrayOutput {
	return o
}

func (o GetBackupJobsFilterArrayOutput) ToGetBackupJobsFilterArrayOutputWithContext(ctx context.Context) GetBackupJobsFilterArrayOutput {
	return o
}

func (o GetBackupJobsFilterArrayOutput) Index(i pulumi.IntInput) GetBackupJobsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupJobsFilter {
		return vs[0].([]GetBackupJobsFilter)[vs[1].(int)]
	}).(GetBackupJobsFilterOutput)
}

type GetBackupJobsJob struct {
	// The actual data volume of the backup task (After deduplication) . Unit byte.
	ActualBytes string `pulumi:"actualBytes"`
	// The actual number of items in the backup task. (Currently only file backup is available).
	ActualItems string `pulumi:"actualItems"`
	// The name of backup job.
	BackJobName string `pulumi:"backJobName"`
	// The ID of the backup job.
	BackupJobId string `pulumi:"backupJobId"`
	// Backup type. Valid values: `COMPLETE`(full backup).
	BackupType string `pulumi:"backupType"`
	// The name of target OSS bucket.
	Bucket string `pulumi:"bucket"`
	// The amount of backup data (Incremental). Unit byte.
	BytesDone string `pulumi:"bytesDone"`
	// The total amount of data sources. Unit byte.
	BytesTotal string `pulumi:"bytesTotal"`
	// The completion time of backup job. UNIX time seconds.
	CompleteTime string `pulumi:"completeTime"`
	// The creation time of backup job. UNIX time seconds.
	CreateTime string `pulumi:"createTime"`
	// The role name created in the original account RAM backup by the cross account managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountRoleName string `pulumi:"crossAccountRoleName"`
	// The type of the cross account backup. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountType string `pulumi:"crossAccountType"`
	// The original account ID of the cross account backup managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountUserId int `pulumi:"crossAccountUserId"`
	// Error message.
	ErrorMessage string `pulumi:"errorMessage"`
	// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
	Exclude string `pulumi:"exclude"`
	// The ID of destination file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The ID of the backup job.
	Id string `pulumi:"id"`
	// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
	Include string `pulumi:"include"`
	// The ID of target ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The number of items restore job recovered.
	ItemsDone string `pulumi:"itemsDone"`
	// The total number of items restore job recovered.
	ItemsTotal string `pulumi:"itemsTotal"`
	// File system creation time. UNIX time in seconds.
	NasCreateTime string                      `pulumi:"nasCreateTime"`
	OtsDetails    []GetBackupJobsJobOtsDetail `pulumi:"otsDetails"`
	// List of backup path. e.g. `["/home", "/var"]`.
	Paths []string `pulumi:"paths"`
	// The ID of a backup plan.
	PlanId string `pulumi:"planId"`
	// The prefix of Oss bucket files.
	Prefix string `pulumi:"prefix"`
	// Backup progress. The value is 100%*100.
	Progress string `pulumi:"progress"`
	// The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
	SourceType string `pulumi:"sourceType"`
	// The scheduled backup start time. UNIX time seconds.
	StartTime string `pulumi:"startTime"`
	// The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
	Status string `pulumi:"status"`
	// The update time of backup job. UNIX time seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetBackupJobsJobInput is an input type that accepts GetBackupJobsJobArgs and GetBackupJobsJobOutput values.
// You can construct a concrete instance of `GetBackupJobsJobInput` via:
//
//	GetBackupJobsJobArgs{...}
type GetBackupJobsJobInput interface {
	pulumi.Input

	ToGetBackupJobsJobOutput() GetBackupJobsJobOutput
	ToGetBackupJobsJobOutputWithContext(context.Context) GetBackupJobsJobOutput
}

type GetBackupJobsJobArgs struct {
	// The actual data volume of the backup task (After deduplication) . Unit byte.
	ActualBytes pulumi.StringInput `pulumi:"actualBytes"`
	// The actual number of items in the backup task. (Currently only file backup is available).
	ActualItems pulumi.StringInput `pulumi:"actualItems"`
	// The name of backup job.
	BackJobName pulumi.StringInput `pulumi:"backJobName"`
	// The ID of the backup job.
	BackupJobId pulumi.StringInput `pulumi:"backupJobId"`
	// Backup type. Valid values: `COMPLETE`(full backup).
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The name of target OSS bucket.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The amount of backup data (Incremental). Unit byte.
	BytesDone pulumi.StringInput `pulumi:"bytesDone"`
	// The total amount of data sources. Unit byte.
	BytesTotal pulumi.StringInput `pulumi:"bytesTotal"`
	// The completion time of backup job. UNIX time seconds.
	CompleteTime pulumi.StringInput `pulumi:"completeTime"`
	// The creation time of backup job. UNIX time seconds.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The role name created in the original account RAM backup by the cross account managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountRoleName pulumi.StringInput `pulumi:"crossAccountRoleName"`
	// The type of the cross account backup. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountType pulumi.StringInput `pulumi:"crossAccountType"`
	// The original account ID of the cross account backup managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
	CrossAccountUserId pulumi.IntInput `pulumi:"crossAccountUserId"`
	// Error message.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
	Exclude pulumi.StringInput `pulumi:"exclude"`
	// The ID of destination file system.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The ID of the backup job.
	Id pulumi.StringInput `pulumi:"id"`
	// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
	Include pulumi.StringInput `pulumi:"include"`
	// The ID of target ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The number of items restore job recovered.
	ItemsDone pulumi.StringInput `pulumi:"itemsDone"`
	// The total number of items restore job recovered.
	ItemsTotal pulumi.StringInput `pulumi:"itemsTotal"`
	// File system creation time. UNIX time in seconds.
	NasCreateTime pulumi.StringInput                  `pulumi:"nasCreateTime"`
	OtsDetails    GetBackupJobsJobOtsDetailArrayInput `pulumi:"otsDetails"`
	// List of backup path. e.g. `["/home", "/var"]`.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// The ID of a backup plan.
	PlanId pulumi.StringInput `pulumi:"planId"`
	// The prefix of Oss bucket files.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// Backup progress. The value is 100%*100.
	Progress pulumi.StringInput `pulumi:"progress"`
	// The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The scheduled backup start time. UNIX time seconds.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of backup job. UNIX time seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetBackupJobsJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsJob)(nil)).Elem()
}

func (i GetBackupJobsJobArgs) ToGetBackupJobsJobOutput() GetBackupJobsJobOutput {
	return i.ToGetBackupJobsJobOutputWithContext(context.Background())
}

func (i GetBackupJobsJobArgs) ToGetBackupJobsJobOutputWithContext(ctx context.Context) GetBackupJobsJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsJobOutput)
}

// GetBackupJobsJobArrayInput is an input type that accepts GetBackupJobsJobArray and GetBackupJobsJobArrayOutput values.
// You can construct a concrete instance of `GetBackupJobsJobArrayInput` via:
//
//	GetBackupJobsJobArray{ GetBackupJobsJobArgs{...} }
type GetBackupJobsJobArrayInput interface {
	pulumi.Input

	ToGetBackupJobsJobArrayOutput() GetBackupJobsJobArrayOutput
	ToGetBackupJobsJobArrayOutputWithContext(context.Context) GetBackupJobsJobArrayOutput
}

type GetBackupJobsJobArray []GetBackupJobsJobInput

func (GetBackupJobsJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsJob)(nil)).Elem()
}

func (i GetBackupJobsJobArray) ToGetBackupJobsJobArrayOutput() GetBackupJobsJobArrayOutput {
	return i.ToGetBackupJobsJobArrayOutputWithContext(context.Background())
}

func (i GetBackupJobsJobArray) ToGetBackupJobsJobArrayOutputWithContext(ctx context.Context) GetBackupJobsJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsJobArrayOutput)
}

type GetBackupJobsJobOutput struct{ *pulumi.OutputState }

func (GetBackupJobsJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsJob)(nil)).Elem()
}

func (o GetBackupJobsJobOutput) ToGetBackupJobsJobOutput() GetBackupJobsJobOutput {
	return o
}

func (o GetBackupJobsJobOutput) ToGetBackupJobsJobOutputWithContext(ctx context.Context) GetBackupJobsJobOutput {
	return o
}

// The actual data volume of the backup task (After deduplication) . Unit byte.
func (o GetBackupJobsJobOutput) ActualBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.ActualBytes }).(pulumi.StringOutput)
}

// The actual number of items in the backup task. (Currently only file backup is available).
func (o GetBackupJobsJobOutput) ActualItems() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.ActualItems }).(pulumi.StringOutput)
}

// The name of backup job.
func (o GetBackupJobsJobOutput) BackJobName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.BackJobName }).(pulumi.StringOutput)
}

// The ID of the backup job.
func (o GetBackupJobsJobOutput) BackupJobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.BackupJobId }).(pulumi.StringOutput)
}

// Backup type. Valid values: `COMPLETE`(full backup).
func (o GetBackupJobsJobOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.BackupType }).(pulumi.StringOutput)
}

// The name of target OSS bucket.
func (o GetBackupJobsJobOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Bucket }).(pulumi.StringOutput)
}

// The amount of backup data (Incremental). Unit byte.
func (o GetBackupJobsJobOutput) BytesDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.BytesDone }).(pulumi.StringOutput)
}

// The total amount of data sources. Unit byte.
func (o GetBackupJobsJobOutput) BytesTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.BytesTotal }).(pulumi.StringOutput)
}

// The completion time of backup job. UNIX time seconds.
func (o GetBackupJobsJobOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.CompleteTime }).(pulumi.StringOutput)
}

// The creation time of backup job. UNIX time seconds.
func (o GetBackupJobsJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The role name created in the original account RAM backup by the cross account managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
func (o GetBackupJobsJobOutput) CrossAccountRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.CrossAccountRoleName }).(pulumi.StringOutput)
}

// The type of the cross account backup. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
func (o GetBackupJobsJobOutput) CrossAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.CrossAccountType }).(pulumi.StringOutput)
}

// The original account ID of the cross account backup managed by the current account. It is valid only when `sourceType` is `ECS_FILE`, `NAS`, `OSS` or `OTS`.
func (o GetBackupJobsJobOutput) CrossAccountUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupJobsJob) int { return v.CrossAccountUserId }).(pulumi.IntOutput)
}

// Error message.
func (o GetBackupJobsJobOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
func (o GetBackupJobsJobOutput) Exclude() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Exclude }).(pulumi.StringOutput)
}

// The ID of destination file system.
func (o GetBackupJobsJobOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The ID of the backup job.
func (o GetBackupJobsJobOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Id }).(pulumi.StringOutput)
}

// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
func (o GetBackupJobsJobOutput) Include() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Include }).(pulumi.StringOutput)
}

// The ID of target ECS instance.
func (o GetBackupJobsJobOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The number of items restore job recovered.
func (o GetBackupJobsJobOutput) ItemsDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.ItemsDone }).(pulumi.StringOutput)
}

// The total number of items restore job recovered.
func (o GetBackupJobsJobOutput) ItemsTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.ItemsTotal }).(pulumi.StringOutput)
}

// File system creation time. UNIX time in seconds.
func (o GetBackupJobsJobOutput) NasCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.NasCreateTime }).(pulumi.StringOutput)
}

func (o GetBackupJobsJobOutput) OtsDetails() GetBackupJobsJobOtsDetailArrayOutput {
	return o.ApplyT(func(v GetBackupJobsJob) []GetBackupJobsJobOtsDetail { return v.OtsDetails }).(GetBackupJobsJobOtsDetailArrayOutput)
}

// List of backup path. e.g. `["/home", "/var"]`.
func (o GetBackupJobsJobOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackupJobsJob) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// The ID of a backup plan.
func (o GetBackupJobsJobOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.PlanId }).(pulumi.StringOutput)
}

// The prefix of Oss bucket files.
func (o GetBackupJobsJobOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Prefix }).(pulumi.StringOutput)
}

// Backup progress. The value is 100%*100.
func (o GetBackupJobsJobOutput) Progress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Progress }).(pulumi.StringOutput)
}

// The type of data source. Valid Values: `ECS_FILE`, `OSS`, `NAS`, `UDM_DISK`.
func (o GetBackupJobsJobOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.SourceType }).(pulumi.StringOutput)
}

// The scheduled backup start time. UNIX time seconds.
func (o GetBackupJobsJobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.StartTime }).(pulumi.StringOutput)
}

// The status of restore job. Valid values: `COMPLETE` , `PARTIAL_COMPLETE`, `FAILED`.
func (o GetBackupJobsJobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of backup job. UNIX time seconds.
func (o GetBackupJobsJobOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of backup vault.
func (o GetBackupJobsJobOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsJob) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetBackupJobsJobArrayOutput struct{ *pulumi.OutputState }

func (GetBackupJobsJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsJob)(nil)).Elem()
}

func (o GetBackupJobsJobArrayOutput) ToGetBackupJobsJobArrayOutput() GetBackupJobsJobArrayOutput {
	return o
}

func (o GetBackupJobsJobArrayOutput) ToGetBackupJobsJobArrayOutputWithContext(ctx context.Context) GetBackupJobsJobArrayOutput {
	return o
}

func (o GetBackupJobsJobArrayOutput) Index(i pulumi.IntInput) GetBackupJobsJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupJobsJob {
		return vs[0].([]GetBackupJobsJob)[vs[1].(int)]
	}).(GetBackupJobsJobOutput)
}

type GetBackupJobsJobOtsDetail struct {
	TableNames []string `pulumi:"tableNames"`
}

// GetBackupJobsJobOtsDetailInput is an input type that accepts GetBackupJobsJobOtsDetailArgs and GetBackupJobsJobOtsDetailOutput values.
// You can construct a concrete instance of `GetBackupJobsJobOtsDetailInput` via:
//
//	GetBackupJobsJobOtsDetailArgs{...}
type GetBackupJobsJobOtsDetailInput interface {
	pulumi.Input

	ToGetBackupJobsJobOtsDetailOutput() GetBackupJobsJobOtsDetailOutput
	ToGetBackupJobsJobOtsDetailOutputWithContext(context.Context) GetBackupJobsJobOtsDetailOutput
}

type GetBackupJobsJobOtsDetailArgs struct {
	TableNames pulumi.StringArrayInput `pulumi:"tableNames"`
}

func (GetBackupJobsJobOtsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsJobOtsDetail)(nil)).Elem()
}

func (i GetBackupJobsJobOtsDetailArgs) ToGetBackupJobsJobOtsDetailOutput() GetBackupJobsJobOtsDetailOutput {
	return i.ToGetBackupJobsJobOtsDetailOutputWithContext(context.Background())
}

func (i GetBackupJobsJobOtsDetailArgs) ToGetBackupJobsJobOtsDetailOutputWithContext(ctx context.Context) GetBackupJobsJobOtsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsJobOtsDetailOutput)
}

// GetBackupJobsJobOtsDetailArrayInput is an input type that accepts GetBackupJobsJobOtsDetailArray and GetBackupJobsJobOtsDetailArrayOutput values.
// You can construct a concrete instance of `GetBackupJobsJobOtsDetailArrayInput` via:
//
//	GetBackupJobsJobOtsDetailArray{ GetBackupJobsJobOtsDetailArgs{...} }
type GetBackupJobsJobOtsDetailArrayInput interface {
	pulumi.Input

	ToGetBackupJobsJobOtsDetailArrayOutput() GetBackupJobsJobOtsDetailArrayOutput
	ToGetBackupJobsJobOtsDetailArrayOutputWithContext(context.Context) GetBackupJobsJobOtsDetailArrayOutput
}

type GetBackupJobsJobOtsDetailArray []GetBackupJobsJobOtsDetailInput

func (GetBackupJobsJobOtsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsJobOtsDetail)(nil)).Elem()
}

func (i GetBackupJobsJobOtsDetailArray) ToGetBackupJobsJobOtsDetailArrayOutput() GetBackupJobsJobOtsDetailArrayOutput {
	return i.ToGetBackupJobsJobOtsDetailArrayOutputWithContext(context.Background())
}

func (i GetBackupJobsJobOtsDetailArray) ToGetBackupJobsJobOtsDetailArrayOutputWithContext(ctx context.Context) GetBackupJobsJobOtsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsJobOtsDetailArrayOutput)
}

type GetBackupJobsJobOtsDetailOutput struct{ *pulumi.OutputState }

func (GetBackupJobsJobOtsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsJobOtsDetail)(nil)).Elem()
}

func (o GetBackupJobsJobOtsDetailOutput) ToGetBackupJobsJobOtsDetailOutput() GetBackupJobsJobOtsDetailOutput {
	return o
}

func (o GetBackupJobsJobOtsDetailOutput) ToGetBackupJobsJobOtsDetailOutputWithContext(ctx context.Context) GetBackupJobsJobOtsDetailOutput {
	return o
}

func (o GetBackupJobsJobOtsDetailOutput) TableNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackupJobsJobOtsDetail) []string { return v.TableNames }).(pulumi.StringArrayOutput)
}

type GetBackupJobsJobOtsDetailArrayOutput struct{ *pulumi.OutputState }

func (GetBackupJobsJobOtsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsJobOtsDetail)(nil)).Elem()
}

func (o GetBackupJobsJobOtsDetailArrayOutput) ToGetBackupJobsJobOtsDetailArrayOutput() GetBackupJobsJobOtsDetailArrayOutput {
	return o
}

func (o GetBackupJobsJobOtsDetailArrayOutput) ToGetBackupJobsJobOtsDetailArrayOutputWithContext(ctx context.Context) GetBackupJobsJobOtsDetailArrayOutput {
	return o
}

func (o GetBackupJobsJobOtsDetailArrayOutput) Index(i pulumi.IntInput) GetBackupJobsJobOtsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupJobsJobOtsDetail {
		return vs[0].([]GetBackupJobsJobOtsDetail)[vs[1].(int)]
	}).(GetBackupJobsJobOtsDetailOutput)
}

type GetEcsBackupClientsClient struct {
	// The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
	ArchType string `pulumi:"archType"`
	// Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
	BackupStatus string `pulumi:"backupStatus"`
	// The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
	ClientType string `pulumi:"clientType"`
	// The version of client.
	ClientVersion string `pulumi:"clientVersion"`
	// The creation time of client. Unix time in seconds.
	CreateTime string `pulumi:"createTime"`
	// The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
	DataNetworkType string `pulumi:"dataNetworkType"`
	// The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
	DataProxySetting string `pulumi:"dataProxySetting"`
	// The first ID of the resource.
	EcsBackupClientId string `pulumi:"ecsBackupClientId"`
	// The hostname of ECS instance.
	Hostname string `pulumi:"hostname"`
	// The ID of the Ecs Backup Client.
	Id string `pulumi:"id"`
	// The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
	InstanceId string `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName string `pulumi:"instanceName"`
	// The last heartbeat time of client. Unix Time Seconds.
	LastHeartBeatTime string `pulumi:"lastHeartBeatTime"`
	// The latest version of client.
	MaxClientVersion string `pulumi:"maxClientVersion"`
	// The number of CPU cores used by a single backup task, 0 means no restrictions.
	MaxCpuCore string `pulumi:"maxCpuCore"`
	// The number of concurrent jobs for a single backup task, 0 means no restrictions.
	MaxWorker string `pulumi:"maxWorker"`
	// The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
	OsType string `pulumi:"osType"`
	// Intranet IP address of the instance, only available for ECS file backup client.
	PrivateIpv4 string `pulumi:"privateIpv4"`
	// Custom data plane proxy server host address.
	ProxyHost string `pulumi:"proxyHost"`
	// The password of custom data plane proxy server.
	ProxyPassword string `pulumi:"proxyPassword"`
	// Custom data plane proxy server host port.
	ProxyPort string `pulumi:"proxyPort"`
	// The username of custom data plane proxy server.
	ProxyUser string `pulumi:"proxyUser"`
	// The status of the resource.
	Status string `pulumi:"status"`
	// The update time of client. Unix Time Seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
	UseHttps bool `pulumi:"useHttps"`
	// The ID of Zone.
	ZoneId string `pulumi:"zoneId"`
}

// GetEcsBackupClientsClientInput is an input type that accepts GetEcsBackupClientsClientArgs and GetEcsBackupClientsClientOutput values.
// You can construct a concrete instance of `GetEcsBackupClientsClientInput` via:
//
//	GetEcsBackupClientsClientArgs{...}
type GetEcsBackupClientsClientInput interface {
	pulumi.Input

	ToGetEcsBackupClientsClientOutput() GetEcsBackupClientsClientOutput
	ToGetEcsBackupClientsClientOutputWithContext(context.Context) GetEcsBackupClientsClientOutput
}

type GetEcsBackupClientsClientArgs struct {
	// The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
	ArchType pulumi.StringInput `pulumi:"archType"`
	// Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
	ClientType pulumi.StringInput `pulumi:"clientType"`
	// The version of client.
	ClientVersion pulumi.StringInput `pulumi:"clientVersion"`
	// The creation time of client. Unix time in seconds.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
	DataNetworkType pulumi.StringInput `pulumi:"dataNetworkType"`
	// The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
	DataProxySetting pulumi.StringInput `pulumi:"dataProxySetting"`
	// The first ID of the resource.
	EcsBackupClientId pulumi.StringInput `pulumi:"ecsBackupClientId"`
	// The hostname of ECS instance.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The ID of the Ecs Backup Client.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The last heartbeat time of client. Unix Time Seconds.
	LastHeartBeatTime pulumi.StringInput `pulumi:"lastHeartBeatTime"`
	// The latest version of client.
	MaxClientVersion pulumi.StringInput `pulumi:"maxClientVersion"`
	// The number of CPU cores used by a single backup task, 0 means no restrictions.
	MaxCpuCore pulumi.StringInput `pulumi:"maxCpuCore"`
	// The number of concurrent jobs for a single backup task, 0 means no restrictions.
	MaxWorker pulumi.StringInput `pulumi:"maxWorker"`
	// The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
	OsType pulumi.StringInput `pulumi:"osType"`
	// Intranet IP address of the instance, only available for ECS file backup client.
	PrivateIpv4 pulumi.StringInput `pulumi:"privateIpv4"`
	// Custom data plane proxy server host address.
	ProxyHost pulumi.StringInput `pulumi:"proxyHost"`
	// The password of custom data plane proxy server.
	ProxyPassword pulumi.StringInput `pulumi:"proxyPassword"`
	// Custom data plane proxy server host port.
	ProxyPort pulumi.StringInput `pulumi:"proxyPort"`
	// The username of custom data plane proxy server.
	ProxyUser pulumi.StringInput `pulumi:"proxyUser"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of client. Unix Time Seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
	UseHttps pulumi.BoolInput `pulumi:"useHttps"`
	// The ID of Zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetEcsBackupClientsClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsBackupClientsClient)(nil)).Elem()
}

func (i GetEcsBackupClientsClientArgs) ToGetEcsBackupClientsClientOutput() GetEcsBackupClientsClientOutput {
	return i.ToGetEcsBackupClientsClientOutputWithContext(context.Background())
}

func (i GetEcsBackupClientsClientArgs) ToGetEcsBackupClientsClientOutputWithContext(ctx context.Context) GetEcsBackupClientsClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEcsBackupClientsClientOutput)
}

// GetEcsBackupClientsClientArrayInput is an input type that accepts GetEcsBackupClientsClientArray and GetEcsBackupClientsClientArrayOutput values.
// You can construct a concrete instance of `GetEcsBackupClientsClientArrayInput` via:
//
//	GetEcsBackupClientsClientArray{ GetEcsBackupClientsClientArgs{...} }
type GetEcsBackupClientsClientArrayInput interface {
	pulumi.Input

	ToGetEcsBackupClientsClientArrayOutput() GetEcsBackupClientsClientArrayOutput
	ToGetEcsBackupClientsClientArrayOutputWithContext(context.Context) GetEcsBackupClientsClientArrayOutput
}

type GetEcsBackupClientsClientArray []GetEcsBackupClientsClientInput

func (GetEcsBackupClientsClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEcsBackupClientsClient)(nil)).Elem()
}

func (i GetEcsBackupClientsClientArray) ToGetEcsBackupClientsClientArrayOutput() GetEcsBackupClientsClientArrayOutput {
	return i.ToGetEcsBackupClientsClientArrayOutputWithContext(context.Background())
}

func (i GetEcsBackupClientsClientArray) ToGetEcsBackupClientsClientArrayOutputWithContext(ctx context.Context) GetEcsBackupClientsClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEcsBackupClientsClientArrayOutput)
}

type GetEcsBackupClientsClientOutput struct{ *pulumi.OutputState }

func (GetEcsBackupClientsClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsBackupClientsClient)(nil)).Elem()
}

func (o GetEcsBackupClientsClientOutput) ToGetEcsBackupClientsClientOutput() GetEcsBackupClientsClientOutput {
	return o
}

func (o GetEcsBackupClientsClientOutput) ToGetEcsBackupClientsClientOutputWithContext(ctx context.Context) GetEcsBackupClientsClientOutput {
	return o
}

// The system architecture of client, only the ECS File Backup Client is available. Valid values: `AMD64` , `386`.
func (o GetEcsBackupClientsClientOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ArchType }).(pulumi.StringOutput)
}

// Client protected status. Valid values: `UNPROTECTED`, `PROTECTED`.
func (o GetEcsBackupClientsClientOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// The type of client. Valid values: `ECS_CLIENT` (ECS File Backup Client).
func (o GetEcsBackupClientsClientOutput) ClientType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ClientType }).(pulumi.StringOutput)
}

// The version of client.
func (o GetEcsBackupClientsClientOutput) ClientVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ClientVersion }).(pulumi.StringOutput)
}

// The creation time of client. Unix time in seconds.
func (o GetEcsBackupClientsClientOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The data plane access point type. Valid Values: `PUBLIC`, `VPC`, `CLASSIC`.
func (o GetEcsBackupClientsClientOutput) DataNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.DataNetworkType }).(pulumi.StringOutput)
}

// The data plane proxy settings. Valid Values: `DISABLE`, `USE_CONTROL_PROXY`, `CUSTOM`.
func (o GetEcsBackupClientsClientOutput) DataProxySetting() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.DataProxySetting }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetEcsBackupClientsClientOutput) EcsBackupClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.EcsBackupClientId }).(pulumi.StringOutput)
}

// The hostname of ECS instance.
func (o GetEcsBackupClientsClientOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the Ecs Backup Client.
func (o GetEcsBackupClientsClientOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ECS instance. When the client type is ECS file backup client, it indicates the ID of ECS instance. When the client type is a local file backup client, it is a hardware fingerprint generated based on system information.
func (o GetEcsBackupClientsClientOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance.
func (o GetEcsBackupClientsClientOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The last heartbeat time of client. Unix Time Seconds.
func (o GetEcsBackupClientsClientOutput) LastHeartBeatTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.LastHeartBeatTime }).(pulumi.StringOutput)
}

// The latest version of client.
func (o GetEcsBackupClientsClientOutput) MaxClientVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.MaxClientVersion }).(pulumi.StringOutput)
}

// The number of CPU cores used by a single backup task, 0 means no restrictions.
func (o GetEcsBackupClientsClientOutput) MaxCpuCore() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.MaxCpuCore }).(pulumi.StringOutput)
}

// The number of concurrent jobs for a single backup task, 0 means no restrictions.
func (o GetEcsBackupClientsClientOutput) MaxWorker() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.MaxWorker }).(pulumi.StringOutput)
}

// The operating system type of client, only the ECS File Backup Client is available. Valid values: `windows`, `linux`.
func (o GetEcsBackupClientsClientOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.OsType }).(pulumi.StringOutput)
}

// Intranet IP address of the instance, only available for ECS file backup client.
func (o GetEcsBackupClientsClientOutput) PrivateIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.PrivateIpv4 }).(pulumi.StringOutput)
}

// Custom data plane proxy server host address.
func (o GetEcsBackupClientsClientOutput) ProxyHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ProxyHost }).(pulumi.StringOutput)
}

// The password of custom data plane proxy server.
func (o GetEcsBackupClientsClientOutput) ProxyPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ProxyPassword }).(pulumi.StringOutput)
}

// Custom data plane proxy server host port.
func (o GetEcsBackupClientsClientOutput) ProxyPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ProxyPort }).(pulumi.StringOutput)
}

// The username of custom data plane proxy server.
func (o GetEcsBackupClientsClientOutput) ProxyUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ProxyUser }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetEcsBackupClientsClientOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of client. Unix Time Seconds.
func (o GetEcsBackupClientsClientOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// Indicates whether to use the HTTPS protocol. Valid values: `true`, `false`.
func (o GetEcsBackupClientsClientOutput) UseHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) bool { return v.UseHttps }).(pulumi.BoolOutput)
}

// The ID of Zone.
func (o GetEcsBackupClientsClientOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupClientsClient) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetEcsBackupClientsClientArrayOutput struct{ *pulumi.OutputState }

func (GetEcsBackupClientsClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEcsBackupClientsClient)(nil)).Elem()
}

func (o GetEcsBackupClientsClientArrayOutput) ToGetEcsBackupClientsClientArrayOutput() GetEcsBackupClientsClientArrayOutput {
	return o
}

func (o GetEcsBackupClientsClientArrayOutput) ToGetEcsBackupClientsClientArrayOutputWithContext(ctx context.Context) GetEcsBackupClientsClientArrayOutput {
	return o
}

func (o GetEcsBackupClientsClientArrayOutput) Index(i pulumi.IntInput) GetEcsBackupClientsClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEcsBackupClientsClient {
		return vs[0].([]GetEcsBackupClientsClient)[vs[1].(int)]
	}).(GetEcsBackupClientsClientOutput)
}

type GetEcsBackupPlansPlan struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType string `pulumi:"backupType"`
	CreateTime string `pulumi:"createTime"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	Detail      string `pulumi:"detail"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled bool `pulumi:"disabled"`
	// The ID of ecs backup plan.
	EcsBackupPlanId string `pulumi:"ecsBackupPlanId"`
	// The name of the backup plan.
	EcsBackupPlanName string `pulumi:"ecsBackupPlanName"`
	// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
	Exclude string `pulumi:"exclude"`
	// The ID of ecs backup plan.
	Id string `pulumi:"id"`
	// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
	Include string `pulumi:"include"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// Windows operating system with application consistency using VSS. eg: {`UseVSS`:false}.
	Options string `pulumi:"options"`
	// Backup path. e.g. `["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup retention days, the minimum is 1.
	Retention string `pulumi:"retention"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// The type of backup source.
	SourceType string `pulumi:"sourceType"`
	// Flow control. The format is: {start}|{end}|{bandwidth}. Use `|` to separate multiple flow control configurations, multiple flow control configurations not allowed to have overlapping times.
	SpeedLimit string `pulumi:"speedLimit"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of Backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetEcsBackupPlansPlanInput is an input type that accepts GetEcsBackupPlansPlanArgs and GetEcsBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetEcsBackupPlansPlanInput` via:
//
//	GetEcsBackupPlansPlanArgs{...}
type GetEcsBackupPlansPlanInput interface {
	pulumi.Input

	ToGetEcsBackupPlansPlanOutput() GetEcsBackupPlansPlanOutput
	ToGetEcsBackupPlansPlanOutputWithContext(context.Context) GetEcsBackupPlansPlanOutput
}

type GetEcsBackupPlansPlanArgs struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	Detail      pulumi.StringInput `pulumi:"detail"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The ID of ecs backup plan.
	EcsBackupPlanId pulumi.StringInput `pulumi:"ecsBackupPlanId"`
	// The name of the backup plan.
	EcsBackupPlanName pulumi.StringInput `pulumi:"ecsBackupPlanName"`
	// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
	Exclude pulumi.StringInput `pulumi:"exclude"`
	// The ID of ecs backup plan.
	Id pulumi.StringInput `pulumi:"id"`
	// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
	Include pulumi.StringInput `pulumi:"include"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Windows operating system with application consistency using VSS. eg: {`UseVSS`:false}.
	Options pulumi.StringInput `pulumi:"options"`
	// Backup path. e.g. `["/home", "/var"]`
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Backup retention days, the minimum is 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The type of backup source.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// Flow control. The format is: {start}|{end}|{bandwidth}. Use `|` to separate multiple flow control configurations, multiple flow control configurations not allowed to have overlapping times.
	SpeedLimit pulumi.StringInput `pulumi:"speedLimit"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of Backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetEcsBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsBackupPlansPlan)(nil)).Elem()
}

func (i GetEcsBackupPlansPlanArgs) ToGetEcsBackupPlansPlanOutput() GetEcsBackupPlansPlanOutput {
	return i.ToGetEcsBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetEcsBackupPlansPlanArgs) ToGetEcsBackupPlansPlanOutputWithContext(ctx context.Context) GetEcsBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEcsBackupPlansPlanOutput)
}

// GetEcsBackupPlansPlanArrayInput is an input type that accepts GetEcsBackupPlansPlanArray and GetEcsBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetEcsBackupPlansPlanArrayInput` via:
//
//	GetEcsBackupPlansPlanArray{ GetEcsBackupPlansPlanArgs{...} }
type GetEcsBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetEcsBackupPlansPlanArrayOutput() GetEcsBackupPlansPlanArrayOutput
	ToGetEcsBackupPlansPlanArrayOutputWithContext(context.Context) GetEcsBackupPlansPlanArrayOutput
}

type GetEcsBackupPlansPlanArray []GetEcsBackupPlansPlanInput

func (GetEcsBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEcsBackupPlansPlan)(nil)).Elem()
}

func (i GetEcsBackupPlansPlanArray) ToGetEcsBackupPlansPlanArrayOutput() GetEcsBackupPlansPlanArrayOutput {
	return i.ToGetEcsBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetEcsBackupPlansPlanArray) ToGetEcsBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetEcsBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEcsBackupPlansPlanArrayOutput)
}

type GetEcsBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetEcsBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEcsBackupPlansPlan)(nil)).Elem()
}

func (o GetEcsBackupPlansPlanOutput) ToGetEcsBackupPlansPlanOutput() GetEcsBackupPlansPlanOutput {
	return o
}

func (o GetEcsBackupPlansPlanOutput) ToGetEcsBackupPlansPlanOutputWithContext(ctx context.Context) GetEcsBackupPlansPlanOutput {
	return o
}

// Backup type. Valid values: `COMPLETE`.
func (o GetEcsBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

func (o GetEcsBackupPlansPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The creation time of the backup plan. UNIX time in seconds.
func (o GetEcsBackupPlansPlanOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o GetEcsBackupPlansPlanOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Detail }).(pulumi.StringOutput)
}

// Whether to be suspended. Valid values: `true`, `false`.
func (o GetEcsBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The ID of ecs backup plan.
func (o GetEcsBackupPlansPlanOutput) EcsBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.EcsBackupPlanId }).(pulumi.StringOutput)
}

// The name of the backup plan.
func (o GetEcsBackupPlansPlanOutput) EcsBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.EcsBackupPlanName }).(pulumi.StringOutput)
}

// Exclude path. String of Json list. Up to 255 characters. e.g. `"[\"/home/work\"]"`
func (o GetEcsBackupPlansPlanOutput) Exclude() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Exclude }).(pulumi.StringOutput)
}

// The ID of ecs backup plan.
func (o GetEcsBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

// Include path. String of Json list. Up to 255 characters. e.g. `"[\"/var\"]"`
func (o GetEcsBackupPlansPlanOutput) Include() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Include }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o GetEcsBackupPlansPlanOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Windows operating system with application consistency using VSS. eg: {`UseVSS`:false}.
func (o GetEcsBackupPlansPlanOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Options }).(pulumi.StringOutput)
}

// Backup path. e.g. `["/home", "/var"]`
func (o GetEcsBackupPlansPlanOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Backup retention days, the minimum is 1.
func (o GetEcsBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
func (o GetEcsBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// The type of backup source.
func (o GetEcsBackupPlansPlanOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.SourceType }).(pulumi.StringOutput)
}

// Flow control. The format is: {start}|{end}|{bandwidth}. Use `|` to separate multiple flow control configurations, multiple flow control configurations not allowed to have overlapping times.
func (o GetEcsBackupPlansPlanOutput) SpeedLimit() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.SpeedLimit }).(pulumi.StringOutput)
}

// The update time of the backup plan. UNIX time in seconds.
func (o GetEcsBackupPlansPlanOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of Backup vault.
func (o GetEcsBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEcsBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetEcsBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetEcsBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEcsBackupPlansPlan)(nil)).Elem()
}

func (o GetEcsBackupPlansPlanArrayOutput) ToGetEcsBackupPlansPlanArrayOutput() GetEcsBackupPlansPlanArrayOutput {
	return o
}

func (o GetEcsBackupPlansPlanArrayOutput) ToGetEcsBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetEcsBackupPlansPlanArrayOutput {
	return o
}

func (o GetEcsBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetEcsBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEcsBackupPlansPlan {
		return vs[0].([]GetEcsBackupPlansPlan)[vs[1].(int)]
	}).(GetEcsBackupPlansPlanOutput)
}

type GetHanaBackupClientsHanaBackupClient struct {
	// The alert settings.
	AlertSetting string `pulumi:"alertSetting"`
	// The ID of the backup client.
	ClientId string `pulumi:"clientId"`
	// The name of the backup client.
	ClientName string `pulumi:"clientName"`
	// The type of the backup client.
	ClientType string `pulumi:"clientType"`
	// The version number of the backup client.
	ClientVersion string `pulumi:"clientVersion"`
	// The ID of the SAP HANA instance.
	ClusterId string `pulumi:"clusterId"`
	// The id of the Hana Backup Client. It formats as `<vault_id>:<client_id>`.
	Id string `pulumi:"id"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the ECS instance.
	InstanceName string `pulumi:"instanceName"`
	// The maximum version number of the backup client.
	MaxVersion string `pulumi:"maxVersion"`
	// The network type.
	NetworkType string `pulumi:"networkType"`
	// The status of the Hana Backup Client. Valid Values: `REGISTERED`, `ACTIVATED`, `DEACTIVATED`, `INSTALLING`, `INSTALL_FAILED`, `NOT_INSTALLED`, `UPGRADING`, `UPGRADE_FAILED`, `UNINSTALLING`, `UNINSTALL_FAILED`, `STOPPED`, `UNKNOWN`.
	Status string `pulumi:"status"`
	// The status information.
	StatusMessage string `pulumi:"statusMessage"`
	// Indicates whether data is transmitted over HTTPS.
	UseHttps bool `pulumi:"useHttps"`
	// The ID of the backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetHanaBackupClientsHanaBackupClientInput is an input type that accepts GetHanaBackupClientsHanaBackupClientArgs and GetHanaBackupClientsHanaBackupClientOutput values.
// You can construct a concrete instance of `GetHanaBackupClientsHanaBackupClientInput` via:
//
//	GetHanaBackupClientsHanaBackupClientArgs{...}
type GetHanaBackupClientsHanaBackupClientInput interface {
	pulumi.Input

	ToGetHanaBackupClientsHanaBackupClientOutput() GetHanaBackupClientsHanaBackupClientOutput
	ToGetHanaBackupClientsHanaBackupClientOutputWithContext(context.Context) GetHanaBackupClientsHanaBackupClientOutput
}

type GetHanaBackupClientsHanaBackupClientArgs struct {
	// The alert settings.
	AlertSetting pulumi.StringInput `pulumi:"alertSetting"`
	// The ID of the backup client.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The name of the backup client.
	ClientName pulumi.StringInput `pulumi:"clientName"`
	// The type of the backup client.
	ClientType pulumi.StringInput `pulumi:"clientType"`
	// The version number of the backup client.
	ClientVersion pulumi.StringInput `pulumi:"clientVersion"`
	// The ID of the SAP HANA instance.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The id of the Hana Backup Client. It formats as `<vault_id>:<client_id>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the ECS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The maximum version number of the backup client.
	MaxVersion pulumi.StringInput `pulumi:"maxVersion"`
	// The network type.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The status of the Hana Backup Client. Valid Values: `REGISTERED`, `ACTIVATED`, `DEACTIVATED`, `INSTALLING`, `INSTALL_FAILED`, `NOT_INSTALLED`, `UPGRADING`, `UPGRADE_FAILED`, `UNINSTALLING`, `UNINSTALL_FAILED`, `STOPPED`, `UNKNOWN`.
	Status pulumi.StringInput `pulumi:"status"`
	// The status information.
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
	// Indicates whether data is transmitted over HTTPS.
	UseHttps pulumi.BoolInput `pulumi:"useHttps"`
	// The ID of the backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetHanaBackupClientsHanaBackupClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaBackupClientsHanaBackupClient)(nil)).Elem()
}

func (i GetHanaBackupClientsHanaBackupClientArgs) ToGetHanaBackupClientsHanaBackupClientOutput() GetHanaBackupClientsHanaBackupClientOutput {
	return i.ToGetHanaBackupClientsHanaBackupClientOutputWithContext(context.Background())
}

func (i GetHanaBackupClientsHanaBackupClientArgs) ToGetHanaBackupClientsHanaBackupClientOutputWithContext(ctx context.Context) GetHanaBackupClientsHanaBackupClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaBackupClientsHanaBackupClientOutput)
}

// GetHanaBackupClientsHanaBackupClientArrayInput is an input type that accepts GetHanaBackupClientsHanaBackupClientArray and GetHanaBackupClientsHanaBackupClientArrayOutput values.
// You can construct a concrete instance of `GetHanaBackupClientsHanaBackupClientArrayInput` via:
//
//	GetHanaBackupClientsHanaBackupClientArray{ GetHanaBackupClientsHanaBackupClientArgs{...} }
type GetHanaBackupClientsHanaBackupClientArrayInput interface {
	pulumi.Input

	ToGetHanaBackupClientsHanaBackupClientArrayOutput() GetHanaBackupClientsHanaBackupClientArrayOutput
	ToGetHanaBackupClientsHanaBackupClientArrayOutputWithContext(context.Context) GetHanaBackupClientsHanaBackupClientArrayOutput
}

type GetHanaBackupClientsHanaBackupClientArray []GetHanaBackupClientsHanaBackupClientInput

func (GetHanaBackupClientsHanaBackupClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaBackupClientsHanaBackupClient)(nil)).Elem()
}

func (i GetHanaBackupClientsHanaBackupClientArray) ToGetHanaBackupClientsHanaBackupClientArrayOutput() GetHanaBackupClientsHanaBackupClientArrayOutput {
	return i.ToGetHanaBackupClientsHanaBackupClientArrayOutputWithContext(context.Background())
}

func (i GetHanaBackupClientsHanaBackupClientArray) ToGetHanaBackupClientsHanaBackupClientArrayOutputWithContext(ctx context.Context) GetHanaBackupClientsHanaBackupClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaBackupClientsHanaBackupClientArrayOutput)
}

type GetHanaBackupClientsHanaBackupClientOutput struct{ *pulumi.OutputState }

func (GetHanaBackupClientsHanaBackupClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaBackupClientsHanaBackupClient)(nil)).Elem()
}

func (o GetHanaBackupClientsHanaBackupClientOutput) ToGetHanaBackupClientsHanaBackupClientOutput() GetHanaBackupClientsHanaBackupClientOutput {
	return o
}

func (o GetHanaBackupClientsHanaBackupClientOutput) ToGetHanaBackupClientsHanaBackupClientOutputWithContext(ctx context.Context) GetHanaBackupClientsHanaBackupClientOutput {
	return o
}

// The alert settings.
func (o GetHanaBackupClientsHanaBackupClientOutput) AlertSetting() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.AlertSetting }).(pulumi.StringOutput)
}

// The ID of the backup client.
func (o GetHanaBackupClientsHanaBackupClientOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.ClientId }).(pulumi.StringOutput)
}

// The name of the backup client.
func (o GetHanaBackupClientsHanaBackupClientOutput) ClientName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.ClientName }).(pulumi.StringOutput)
}

// The type of the backup client.
func (o GetHanaBackupClientsHanaBackupClientOutput) ClientType() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.ClientType }).(pulumi.StringOutput)
}

// The version number of the backup client.
func (o GetHanaBackupClientsHanaBackupClientOutput) ClientVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.ClientVersion }).(pulumi.StringOutput)
}

// The ID of the SAP HANA instance.
func (o GetHanaBackupClientsHanaBackupClientOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The id of the Hana Backup Client. It formats as `<vault_id>:<client_id>`.
func (o GetHanaBackupClientsHanaBackupClientOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o GetHanaBackupClientsHanaBackupClientOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the ECS instance.
func (o GetHanaBackupClientsHanaBackupClientOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The maximum version number of the backup client.
func (o GetHanaBackupClientsHanaBackupClientOutput) MaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.MaxVersion }).(pulumi.StringOutput)
}

// The network type.
func (o GetHanaBackupClientsHanaBackupClientOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The status of the Hana Backup Client. Valid Values: `REGISTERED`, `ACTIVATED`, `DEACTIVATED`, `INSTALLING`, `INSTALL_FAILED`, `NOT_INSTALLED`, `UPGRADING`, `UPGRADE_FAILED`, `UNINSTALLING`, `UNINSTALL_FAILED`, `STOPPED`, `UNKNOWN`.
func (o GetHanaBackupClientsHanaBackupClientOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.Status }).(pulumi.StringOutput)
}

// The status information.
func (o GetHanaBackupClientsHanaBackupClientOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Indicates whether data is transmitted over HTTPS.
func (o GetHanaBackupClientsHanaBackupClientOutput) UseHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) bool { return v.UseHttps }).(pulumi.BoolOutput)
}

// The ID of the backup vault.
func (o GetHanaBackupClientsHanaBackupClientOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupClientsHanaBackupClient) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetHanaBackupClientsHanaBackupClientArrayOutput struct{ *pulumi.OutputState }

func (GetHanaBackupClientsHanaBackupClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaBackupClientsHanaBackupClient)(nil)).Elem()
}

func (o GetHanaBackupClientsHanaBackupClientArrayOutput) ToGetHanaBackupClientsHanaBackupClientArrayOutput() GetHanaBackupClientsHanaBackupClientArrayOutput {
	return o
}

func (o GetHanaBackupClientsHanaBackupClientArrayOutput) ToGetHanaBackupClientsHanaBackupClientArrayOutputWithContext(ctx context.Context) GetHanaBackupClientsHanaBackupClientArrayOutput {
	return o
}

func (o GetHanaBackupClientsHanaBackupClientArrayOutput) Index(i pulumi.IntInput) GetHanaBackupClientsHanaBackupClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHanaBackupClientsHanaBackupClient {
		return vs[0].([]GetHanaBackupClientsHanaBackupClient)[vs[1].(int)]
	}).(GetHanaBackupClientsHanaBackupClientOutput)
}

type GetHanaBackupPlansPlan struct {
	// The backup prefix.
	BackupPrefix string `pulumi:"backupPrefix"`
	// The backup type.
	BackupType string `pulumi:"backupType"`
	// The ID of the SAP HANA instance.
	ClusterId string `pulumi:"clusterId"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// The ID of the resource.
	Id        string `pulumi:"id"`
	PageTotal string `pulumi:"pageTotal"`
	// The ID of the backup plan.
	PlanId string `pulumi:"planId"`
	// The name of the backup plan.
	PlanName string `pulumi:"planName"`
	// The backup policy.
	Schedule string `pulumi:"schedule"`
	// The status of the resource.
	Status string `pulumi:"status"`
	// The ID of the backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetHanaBackupPlansPlanInput is an input type that accepts GetHanaBackupPlansPlanArgs and GetHanaBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetHanaBackupPlansPlanInput` via:
//
//	GetHanaBackupPlansPlanArgs{...}
type GetHanaBackupPlansPlanInput interface {
	pulumi.Input

	ToGetHanaBackupPlansPlanOutput() GetHanaBackupPlansPlanOutput
	ToGetHanaBackupPlansPlanOutputWithContext(context.Context) GetHanaBackupPlansPlanOutput
}

type GetHanaBackupPlansPlanArgs struct {
	// The backup prefix.
	BackupPrefix pulumi.StringInput `pulumi:"backupPrefix"`
	// The backup type.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The ID of the SAP HANA instance.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The ID of the resource.
	Id        pulumi.StringInput `pulumi:"id"`
	PageTotal pulumi.StringInput `pulumi:"pageTotal"`
	// The ID of the backup plan.
	PlanId pulumi.StringInput `pulumi:"planId"`
	// The name of the backup plan.
	PlanName pulumi.StringInput `pulumi:"planName"`
	// The backup policy.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetHanaBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaBackupPlansPlan)(nil)).Elem()
}

func (i GetHanaBackupPlansPlanArgs) ToGetHanaBackupPlansPlanOutput() GetHanaBackupPlansPlanOutput {
	return i.ToGetHanaBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetHanaBackupPlansPlanArgs) ToGetHanaBackupPlansPlanOutputWithContext(ctx context.Context) GetHanaBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaBackupPlansPlanOutput)
}

// GetHanaBackupPlansPlanArrayInput is an input type that accepts GetHanaBackupPlansPlanArray and GetHanaBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetHanaBackupPlansPlanArrayInput` via:
//
//	GetHanaBackupPlansPlanArray{ GetHanaBackupPlansPlanArgs{...} }
type GetHanaBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetHanaBackupPlansPlanArrayOutput() GetHanaBackupPlansPlanArrayOutput
	ToGetHanaBackupPlansPlanArrayOutputWithContext(context.Context) GetHanaBackupPlansPlanArrayOutput
}

type GetHanaBackupPlansPlanArray []GetHanaBackupPlansPlanInput

func (GetHanaBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaBackupPlansPlan)(nil)).Elem()
}

func (i GetHanaBackupPlansPlanArray) ToGetHanaBackupPlansPlanArrayOutput() GetHanaBackupPlansPlanArrayOutput {
	return i.ToGetHanaBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetHanaBackupPlansPlanArray) ToGetHanaBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetHanaBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaBackupPlansPlanArrayOutput)
}

type GetHanaBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetHanaBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaBackupPlansPlan)(nil)).Elem()
}

func (o GetHanaBackupPlansPlanOutput) ToGetHanaBackupPlansPlanOutput() GetHanaBackupPlansPlanOutput {
	return o
}

func (o GetHanaBackupPlansPlanOutput) ToGetHanaBackupPlansPlanOutputWithContext(ctx context.Context) GetHanaBackupPlansPlanOutput {
	return o
}

// The backup prefix.
func (o GetHanaBackupPlansPlanOutput) BackupPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.BackupPrefix }).(pulumi.StringOutput)
}

// The backup type.
func (o GetHanaBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

// The ID of the SAP HANA instance.
func (o GetHanaBackupPlansPlanOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the database.
func (o GetHanaBackupPlansPlanOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o GetHanaBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHanaBackupPlansPlanOutput) PageTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.PageTotal }).(pulumi.StringOutput)
}

// The ID of the backup plan.
func (o GetHanaBackupPlansPlanOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.PlanId }).(pulumi.StringOutput)
}

// The name of the backup plan.
func (o GetHanaBackupPlansPlanOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.PlanName }).(pulumi.StringOutput)
}

// The backup policy.
func (o GetHanaBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetHanaBackupPlansPlanOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the backup vault.
func (o GetHanaBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetHanaBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetHanaBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaBackupPlansPlan)(nil)).Elem()
}

func (o GetHanaBackupPlansPlanArrayOutput) ToGetHanaBackupPlansPlanArrayOutput() GetHanaBackupPlansPlanArrayOutput {
	return o
}

func (o GetHanaBackupPlansPlanArrayOutput) ToGetHanaBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetHanaBackupPlansPlanArrayOutput {
	return o
}

func (o GetHanaBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetHanaBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHanaBackupPlansPlan {
		return vs[0].([]GetHanaBackupPlansPlan)[vs[1].(int)]
	}).(GetHanaBackupPlansPlanOutput)
}

type GetHanaInstancesInstance struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting string `pulumi:"alertSetting"`
	// The ID of the SAP HANA instance.
	HanaInstanceId string `pulumi:"hanaInstanceId"`
	// The name of the SAP HANA instance.
	HanaName string `pulumi:"hanaName"`
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host string `pulumi:"host"`
	// The ID of the Hana Instance. The value formats as `<vault_id>:<hana_instance_id>`.
	Id string `pulumi:"id"`
	// The instance number of the SAP HANA system.
	InstanceNumber int `pulumi:"instanceNumber"`
	// The ID of the resource group.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The status of the SAP HANA instance.
	Status string `pulumi:"status"`
	// The status information.
	StatusMessage string `pulumi:"statusMessage"`
	// Indicates whether the SAP HANA instance is connected over Secure Sockets Layer (SSL).
	UseSsl bool `pulumi:"useSsl"`
	// The username of the SYSTEMDB database.
	UserName string `pulumi:"userName"`
	// Indicates whether the SSL certificate of the SAP HANA instance is verified.
	ValidateCertificate bool `pulumi:"validateCertificate"`
	// The ID of the backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetHanaInstancesInstanceInput is an input type that accepts GetHanaInstancesInstanceArgs and GetHanaInstancesInstanceOutput values.
// You can construct a concrete instance of `GetHanaInstancesInstanceInput` via:
//
//	GetHanaInstancesInstanceArgs{...}
type GetHanaInstancesInstanceInput interface {
	pulumi.Input

	ToGetHanaInstancesInstanceOutput() GetHanaInstancesInstanceOutput
	ToGetHanaInstancesInstanceOutputWithContext(context.Context) GetHanaInstancesInstanceOutput
}

type GetHanaInstancesInstanceArgs struct {
	// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
	AlertSetting pulumi.StringInput `pulumi:"alertSetting"`
	// The ID of the SAP HANA instance.
	HanaInstanceId pulumi.StringInput `pulumi:"hanaInstanceId"`
	// The name of the SAP HANA instance.
	HanaName pulumi.StringInput `pulumi:"hanaName"`
	// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
	Host pulumi.StringInput `pulumi:"host"`
	// The ID of the Hana Instance. The value formats as `<vault_id>:<hana_instance_id>`.
	Id pulumi.StringInput `pulumi:"id"`
	// The instance number of the SAP HANA system.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringInput `pulumi:"resourceGroupId"`
	// The status of the SAP HANA instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The status information.
	StatusMessage pulumi.StringInput `pulumi:"statusMessage"`
	// Indicates whether the SAP HANA instance is connected over Secure Sockets Layer (SSL).
	UseSsl pulumi.BoolInput `pulumi:"useSsl"`
	// The username of the SYSTEMDB database.
	UserName pulumi.StringInput `pulumi:"userName"`
	// Indicates whether the SSL certificate of the SAP HANA instance is verified.
	ValidateCertificate pulumi.BoolInput `pulumi:"validateCertificate"`
	// The ID of the backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetHanaInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaInstancesInstance)(nil)).Elem()
}

func (i GetHanaInstancesInstanceArgs) ToGetHanaInstancesInstanceOutput() GetHanaInstancesInstanceOutput {
	return i.ToGetHanaInstancesInstanceOutputWithContext(context.Background())
}

func (i GetHanaInstancesInstanceArgs) ToGetHanaInstancesInstanceOutputWithContext(ctx context.Context) GetHanaInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaInstancesInstanceOutput)
}

// GetHanaInstancesInstanceArrayInput is an input type that accepts GetHanaInstancesInstanceArray and GetHanaInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetHanaInstancesInstanceArrayInput` via:
//
//	GetHanaInstancesInstanceArray{ GetHanaInstancesInstanceArgs{...} }
type GetHanaInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetHanaInstancesInstanceArrayOutput() GetHanaInstancesInstanceArrayOutput
	ToGetHanaInstancesInstanceArrayOutputWithContext(context.Context) GetHanaInstancesInstanceArrayOutput
}

type GetHanaInstancesInstanceArray []GetHanaInstancesInstanceInput

func (GetHanaInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaInstancesInstance)(nil)).Elem()
}

func (i GetHanaInstancesInstanceArray) ToGetHanaInstancesInstanceArrayOutput() GetHanaInstancesInstanceArrayOutput {
	return i.ToGetHanaInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetHanaInstancesInstanceArray) ToGetHanaInstancesInstanceArrayOutputWithContext(ctx context.Context) GetHanaInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHanaInstancesInstanceArrayOutput)
}

type GetHanaInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetHanaInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHanaInstancesInstance)(nil)).Elem()
}

func (o GetHanaInstancesInstanceOutput) ToGetHanaInstancesInstanceOutput() GetHanaInstancesInstanceOutput {
	return o
}

func (o GetHanaInstancesInstanceOutput) ToGetHanaInstancesInstanceOutputWithContext(ctx context.Context) GetHanaInstancesInstanceOutput {
	return o
}

// The alert settings. Valid value: `INHERITED`, which indicates that the backup client sends alert notifications in the same way as the backup vault.
func (o GetHanaInstancesInstanceOutput) AlertSetting() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.AlertSetting }).(pulumi.StringOutput)
}

// The ID of the SAP HANA instance.
func (o GetHanaInstancesInstanceOutput) HanaInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.HanaInstanceId }).(pulumi.StringOutput)
}

// The name of the SAP HANA instance.
func (o GetHanaInstancesInstanceOutput) HanaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.HanaName }).(pulumi.StringOutput)
}

// The private or internal IP address of the host where the primary node of the SAP HANA instance resides.
func (o GetHanaInstancesInstanceOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.Host }).(pulumi.StringOutput)
}

// The ID of the Hana Instance. The value formats as `<vault_id>:<hana_instance_id>`.
func (o GetHanaInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The instance number of the SAP HANA system.
func (o GetHanaInstancesInstanceOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// The ID of the resource group.
func (o GetHanaInstancesInstanceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The status of the SAP HANA instance.
func (o GetHanaInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The status information.
func (o GetHanaInstancesInstanceOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Indicates whether the SAP HANA instance is connected over Secure Sockets Layer (SSL).
func (o GetHanaInstancesInstanceOutput) UseSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) bool { return v.UseSsl }).(pulumi.BoolOutput)
}

// The username of the SYSTEMDB database.
func (o GetHanaInstancesInstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.UserName }).(pulumi.StringOutput)
}

// Indicates whether the SSL certificate of the SAP HANA instance is verified.
func (o GetHanaInstancesInstanceOutput) ValidateCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) bool { return v.ValidateCertificate }).(pulumi.BoolOutput)
}

// The ID of the backup vault.
func (o GetHanaInstancesInstanceOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHanaInstancesInstance) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetHanaInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetHanaInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHanaInstancesInstance)(nil)).Elem()
}

func (o GetHanaInstancesInstanceArrayOutput) ToGetHanaInstancesInstanceArrayOutput() GetHanaInstancesInstanceArrayOutput {
	return o
}

func (o GetHanaInstancesInstanceArrayOutput) ToGetHanaInstancesInstanceArrayOutputWithContext(ctx context.Context) GetHanaInstancesInstanceArrayOutput {
	return o
}

func (o GetHanaInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetHanaInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHanaInstancesInstance {
		return vs[0].([]GetHanaInstancesInstance)[vs[1].(int)]
	}).(GetHanaInstancesInstanceOutput)
}

type GetNasBackupPlansPlan struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType string `pulumi:"backupType"`
	// File System Creation Time. **Note** The time format of the API adopts the ISO 8601 format, such as `2021-07-09T15:45:30CST`.
	CreateTime string `pulumi:"createTime"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled bool `pulumi:"disabled"`
	// The File System ID of Nas.
	FileSystemId string `pulumi:"fileSystemId"`
	// The ID of Nas backup plan.
	Id string `pulumi:"id"`
	// The ID of Nas backup plan.
	NasBackupPlanId string `pulumi:"nasBackupPlanId"`
	// The name of the resource.
	NasBackupPlanName string `pulumi:"nasBackupPlanName"`
	// Options field of Nas backup plan.
	Options string `pulumi:"options"`
	// List of backup path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths []string `pulumi:"paths"`
	// Backup retention days, the minimum is 1.
	Retention string `pulumi:"retention"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetNasBackupPlansPlanInput is an input type that accepts GetNasBackupPlansPlanArgs and GetNasBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetNasBackupPlansPlanInput` via:
//
//	GetNasBackupPlansPlanArgs{...}
type GetNasBackupPlansPlanInput interface {
	pulumi.Input

	ToGetNasBackupPlansPlanOutput() GetNasBackupPlansPlanOutput
	ToGetNasBackupPlansPlanOutputWithContext(context.Context) GetNasBackupPlansPlanOutput
}

type GetNasBackupPlansPlanArgs struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// File System Creation Time. **Note** The time format of the API adopts the ISO 8601 format, such as `2021-07-09T15:45:30CST`.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The File System ID of Nas.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The ID of Nas backup plan.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of Nas backup plan.
	NasBackupPlanId pulumi.StringInput `pulumi:"nasBackupPlanId"`
	// The name of the resource.
	NasBackupPlanName pulumi.StringInput `pulumi:"nasBackupPlanName"`
	// Options field of Nas backup plan.
	Options pulumi.StringInput `pulumi:"options"`
	// List of backup path. Up to 65536 Characters. e.g.`["/home", "/var"]`
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Backup retention days, the minimum is 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetNasBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNasBackupPlansPlan)(nil)).Elem()
}

func (i GetNasBackupPlansPlanArgs) ToGetNasBackupPlansPlanOutput() GetNasBackupPlansPlanOutput {
	return i.ToGetNasBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetNasBackupPlansPlanArgs) ToGetNasBackupPlansPlanOutputWithContext(ctx context.Context) GetNasBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNasBackupPlansPlanOutput)
}

// GetNasBackupPlansPlanArrayInput is an input type that accepts GetNasBackupPlansPlanArray and GetNasBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetNasBackupPlansPlanArrayInput` via:
//
//	GetNasBackupPlansPlanArray{ GetNasBackupPlansPlanArgs{...} }
type GetNasBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetNasBackupPlansPlanArrayOutput() GetNasBackupPlansPlanArrayOutput
	ToGetNasBackupPlansPlanArrayOutputWithContext(context.Context) GetNasBackupPlansPlanArrayOutput
}

type GetNasBackupPlansPlanArray []GetNasBackupPlansPlanInput

func (GetNasBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNasBackupPlansPlan)(nil)).Elem()
}

func (i GetNasBackupPlansPlanArray) ToGetNasBackupPlansPlanArrayOutput() GetNasBackupPlansPlanArrayOutput {
	return i.ToGetNasBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetNasBackupPlansPlanArray) ToGetNasBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetNasBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNasBackupPlansPlanArrayOutput)
}

type GetNasBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetNasBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNasBackupPlansPlan)(nil)).Elem()
}

func (o GetNasBackupPlansPlanOutput) ToGetNasBackupPlansPlanOutput() GetNasBackupPlansPlanOutput {
	return o
}

func (o GetNasBackupPlansPlanOutput) ToGetNasBackupPlansPlanOutputWithContext(ctx context.Context) GetNasBackupPlansPlanOutput {
	return o
}

// Backup type. Valid values: `COMPLETE`.
func (o GetNasBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

// File System Creation Time. **Note** The time format of the API adopts the ISO 8601 format, such as `2021-07-09T15:45:30CST`.
func (o GetNasBackupPlansPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The creation time of the backup plan. UNIX time in seconds.
func (o GetNasBackupPlansPlanOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Whether to be suspended. Valid values: `true`, `false`.
func (o GetNasBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The File System ID of Nas.
func (o GetNasBackupPlansPlanOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The ID of Nas backup plan.
func (o GetNasBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of Nas backup plan.
func (o GetNasBackupPlansPlanOutput) NasBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.NasBackupPlanId }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetNasBackupPlansPlanOutput) NasBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.NasBackupPlanName }).(pulumi.StringOutput)
}

// Options field of Nas backup plan.
func (o GetNasBackupPlansPlanOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.Options }).(pulumi.StringOutput)
}

// List of backup path. Up to 65536 Characters. e.g.`["/home", "/var"]`
func (o GetNasBackupPlansPlanOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Backup retention days, the minimum is 1.
func (o GetNasBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// Backup strategy. Optional format: `I|{startTime}|{interval}`. It means to execute a backup task every `{interval}` starting from `{startTime}`. The backup task for the elapsed time will not be compensated. If the last backup task has not completed yet, the next backup task will not be triggered.
func (o GetNasBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// The update time of the backup plan. UNIX time in seconds.
func (o GetNasBackupPlansPlanOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of backup vault.
func (o GetNasBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNasBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetNasBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetNasBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNasBackupPlansPlan)(nil)).Elem()
}

func (o GetNasBackupPlansPlanArrayOutput) ToGetNasBackupPlansPlanArrayOutput() GetNasBackupPlansPlanArrayOutput {
	return o
}

func (o GetNasBackupPlansPlanArrayOutput) ToGetNasBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetNasBackupPlansPlanArrayOutput {
	return o
}

func (o GetNasBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetNasBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNasBackupPlansPlan {
		return vs[0].([]GetNasBackupPlansPlan)[vs[1].(int)]
	}).(GetNasBackupPlansPlanOutput)
}

type GetOssBackupPlansPlan struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType string `pulumi:"backupType"`
	// The name of OSS bucket.
	Bucket string `pulumi:"bucket"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled bool `pulumi:"disabled"`
	// The ID of Oss backup plan.
	Id string `pulumi:"id"`
	// The ID of Oss backup plan.
	OssBackupPlanId string `pulumi:"ossBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	OssBackupPlanName string `pulumi:"ossBackupPlanName"`
	// Backup prefix.
	Prefix string `pulumi:"prefix"`
	// Backup retention days, the minimum is 1.
	Retention string `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetOssBackupPlansPlanInput is an input type that accepts GetOssBackupPlansPlanArgs and GetOssBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetOssBackupPlansPlanInput` via:
//
//	GetOssBackupPlansPlanArgs{...}
type GetOssBackupPlansPlanInput interface {
	pulumi.Input

	ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput
	ToGetOssBackupPlansPlanOutputWithContext(context.Context) GetOssBackupPlansPlanOutput
}

type GetOssBackupPlansPlanArgs struct {
	// Backup type. Valid values: `COMPLETE`.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The name of OSS bucket.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The ID of Oss backup plan.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of Oss backup plan.
	OssBackupPlanId pulumi.StringInput `pulumi:"ossBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	OssBackupPlanName pulumi.StringInput `pulumi:"ossBackupPlanName"`
	// Backup prefix.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// Backup retention days, the minimum is 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The update time of the backup plan. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetOssBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOssBackupPlansPlan)(nil)).Elem()
}

func (i GetOssBackupPlansPlanArgs) ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput {
	return i.ToGetOssBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetOssBackupPlansPlanArgs) ToGetOssBackupPlansPlanOutputWithContext(ctx context.Context) GetOssBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOssBackupPlansPlanOutput)
}

// GetOssBackupPlansPlanArrayInput is an input type that accepts GetOssBackupPlansPlanArray and GetOssBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetOssBackupPlansPlanArrayInput` via:
//
//	GetOssBackupPlansPlanArray{ GetOssBackupPlansPlanArgs{...} }
type GetOssBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput
	ToGetOssBackupPlansPlanArrayOutputWithContext(context.Context) GetOssBackupPlansPlanArrayOutput
}

type GetOssBackupPlansPlanArray []GetOssBackupPlansPlanInput

func (GetOssBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOssBackupPlansPlan)(nil)).Elem()
}

func (i GetOssBackupPlansPlanArray) ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput {
	return i.ToGetOssBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetOssBackupPlansPlanArray) ToGetOssBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOssBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOssBackupPlansPlanArrayOutput)
}

type GetOssBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetOssBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOssBackupPlansPlan)(nil)).Elem()
}

func (o GetOssBackupPlansPlanOutput) ToGetOssBackupPlansPlanOutput() GetOssBackupPlansPlanOutput {
	return o
}

func (o GetOssBackupPlansPlanOutput) ToGetOssBackupPlansPlanOutputWithContext(ctx context.Context) GetOssBackupPlansPlanOutput {
	return o
}

// Backup type. Valid values: `COMPLETE`.
func (o GetOssBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

// The name of OSS bucket.
func (o GetOssBackupPlansPlanOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Bucket }).(pulumi.StringOutput)
}

// The creation time of the backup plan. UNIX time in seconds.
func (o GetOssBackupPlansPlanOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Whether to be suspended. Valid values: `true`, `false`.
func (o GetOssBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The ID of Oss backup plan.
func (o GetOssBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of Oss backup plan.
func (o GetOssBackupPlansPlanOutput) OssBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.OssBackupPlanId }).(pulumi.StringOutput)
}

// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
func (o GetOssBackupPlansPlanOutput) OssBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.OssBackupPlanName }).(pulumi.StringOutput)
}

// Backup prefix.
func (o GetOssBackupPlansPlanOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Prefix }).(pulumi.StringOutput)
}

// Backup retention days, the minimum is 1.
func (o GetOssBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
func (o GetOssBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// The update time of the backup plan. UNIX time in seconds.
func (o GetOssBackupPlansPlanOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of backup vault.
func (o GetOssBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOssBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetOssBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetOssBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOssBackupPlansPlan)(nil)).Elem()
}

func (o GetOssBackupPlansPlanArrayOutput) ToGetOssBackupPlansPlanArrayOutput() GetOssBackupPlansPlanArrayOutput {
	return o
}

func (o GetOssBackupPlansPlanArrayOutput) ToGetOssBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOssBackupPlansPlanArrayOutput {
	return o
}

func (o GetOssBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetOssBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOssBackupPlansPlan {
		return vs[0].([]GetOssBackupPlansPlan)[vs[1].(int)]
	}).(GetOssBackupPlansPlanOutput)
}

type GetOtsBackupPlansPlan struct {
	// The Backup type. Valid values: `COMPLETE`.
	BackupType string `pulumi:"backupType"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled bool `pulumi:"disabled"`
	// The ID of ots backup plan.
	Id string `pulumi:"id"`
	// The ID of ots backup plan.
	OtsBackupPlanId string `pulumi:"otsBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	OtsBackupPlanName string                           `pulumi:"otsBackupPlanName"`
	OtsDetails        []GetOtsBackupPlansPlanOtsDetail `pulumi:"otsDetails"`
	// The Backup retention days, the minimum is 1.
	Retention string `pulumi:"retention"`
	// The Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
	Schedule string `pulumi:"schedule"`
	// The type of the data source.
	SourceType string `pulumi:"sourceType"`
	// The update time of the backup plan. UNIX time in seconds.
	// *ots_detail - The details about the Tablestore instance.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetOtsBackupPlansPlanInput is an input type that accepts GetOtsBackupPlansPlanArgs and GetOtsBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetOtsBackupPlansPlanInput` via:
//
//	GetOtsBackupPlansPlanArgs{...}
type GetOtsBackupPlansPlanInput interface {
	pulumi.Input

	ToGetOtsBackupPlansPlanOutput() GetOtsBackupPlansPlanOutput
	ToGetOtsBackupPlansPlanOutputWithContext(context.Context) GetOtsBackupPlansPlanOutput
}

type GetOtsBackupPlansPlanArgs struct {
	// The Backup type. Valid values: `COMPLETE`.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The creation time of the backup plan. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Whether to be suspended. Valid values: `true`, `false`.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The ID of ots backup plan.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ots backup plan.
	OtsBackupPlanId pulumi.StringInput `pulumi:"otsBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	OtsBackupPlanName pulumi.StringInput                       `pulumi:"otsBackupPlanName"`
	OtsDetails        GetOtsBackupPlansPlanOtsDetailArrayInput `pulumi:"otsDetails"`
	// The Backup retention days, the minimum is 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// The Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The type of the data source.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The update time of the backup plan. UNIX time in seconds.
	// *ots_detail - The details about the Tablestore instance.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetOtsBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsBackupPlansPlan)(nil)).Elem()
}

func (i GetOtsBackupPlansPlanArgs) ToGetOtsBackupPlansPlanOutput() GetOtsBackupPlansPlanOutput {
	return i.ToGetOtsBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetOtsBackupPlansPlanArgs) ToGetOtsBackupPlansPlanOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsBackupPlansPlanOutput)
}

// GetOtsBackupPlansPlanArrayInput is an input type that accepts GetOtsBackupPlansPlanArray and GetOtsBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetOtsBackupPlansPlanArrayInput` via:
//
//	GetOtsBackupPlansPlanArray{ GetOtsBackupPlansPlanArgs{...} }
type GetOtsBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetOtsBackupPlansPlanArrayOutput() GetOtsBackupPlansPlanArrayOutput
	ToGetOtsBackupPlansPlanArrayOutputWithContext(context.Context) GetOtsBackupPlansPlanArrayOutput
}

type GetOtsBackupPlansPlanArray []GetOtsBackupPlansPlanInput

func (GetOtsBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsBackupPlansPlan)(nil)).Elem()
}

func (i GetOtsBackupPlansPlanArray) ToGetOtsBackupPlansPlanArrayOutput() GetOtsBackupPlansPlanArrayOutput {
	return i.ToGetOtsBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetOtsBackupPlansPlanArray) ToGetOtsBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsBackupPlansPlanArrayOutput)
}

type GetOtsBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetOtsBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsBackupPlansPlan)(nil)).Elem()
}

func (o GetOtsBackupPlansPlanOutput) ToGetOtsBackupPlansPlanOutput() GetOtsBackupPlansPlanOutput {
	return o
}

func (o GetOtsBackupPlansPlanOutput) ToGetOtsBackupPlansPlanOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOutput {
	return o
}

// The Backup type. Valid values: `COMPLETE`.
func (o GetOtsBackupPlansPlanOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.BackupType }).(pulumi.StringOutput)
}

// The creation time of the backup plan. UNIX time in seconds.
func (o GetOtsBackupPlansPlanOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Whether to be suspended. Valid values: `true`, `false`.
func (o GetOtsBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The ID of ots backup plan.
func (o GetOtsBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ots backup plan.
func (o GetOtsBackupPlansPlanOutput) OtsBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.OtsBackupPlanId }).(pulumi.StringOutput)
}

// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
func (o GetOtsBackupPlansPlanOutput) OtsBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.OtsBackupPlanName }).(pulumi.StringOutput)
}

func (o GetOtsBackupPlansPlanOutput) OtsDetails() GetOtsBackupPlansPlanOtsDetailArrayOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) []GetOtsBackupPlansPlanOtsDetail { return v.OtsDetails }).(GetOtsBackupPlansPlanOtsDetailArrayOutput)
}

// The Backup retention days, the minimum is 1.
func (o GetOtsBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// The Backup strategy. Optional format: I|{startTime}|{interval}. It means to execute a backup task every {interval} starting from {startTime}. The backup task for the elapsed time will not be compensated. If the last backup task is not completed yet, the next backup task will not be triggered.
func (o GetOtsBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

// The type of the data source.
func (o GetOtsBackupPlansPlanOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.SourceType }).(pulumi.StringOutput)
}

// The update time of the backup plan. UNIX time in seconds.
// *ots_detail - The details about the Tablestore instance.
func (o GetOtsBackupPlansPlanOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of backup vault.
func (o GetOtsBackupPlansPlanOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlan) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetOtsBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetOtsBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsBackupPlansPlan)(nil)).Elem()
}

func (o GetOtsBackupPlansPlanArrayOutput) ToGetOtsBackupPlansPlanArrayOutput() GetOtsBackupPlansPlanArrayOutput {
	return o
}

func (o GetOtsBackupPlansPlanArrayOutput) ToGetOtsBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanArrayOutput {
	return o
}

func (o GetOtsBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetOtsBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOtsBackupPlansPlan {
		return vs[0].([]GetOtsBackupPlansPlan)[vs[1].(int)]
	}).(GetOtsBackupPlansPlanOutput)
}

type GetOtsBackupPlansPlanOtsDetail struct {
	TableNames []string `pulumi:"tableNames"`
}

// GetOtsBackupPlansPlanOtsDetailInput is an input type that accepts GetOtsBackupPlansPlanOtsDetailArgs and GetOtsBackupPlansPlanOtsDetailOutput values.
// You can construct a concrete instance of `GetOtsBackupPlansPlanOtsDetailInput` via:
//
//	GetOtsBackupPlansPlanOtsDetailArgs{...}
type GetOtsBackupPlansPlanOtsDetailInput interface {
	pulumi.Input

	ToGetOtsBackupPlansPlanOtsDetailOutput() GetOtsBackupPlansPlanOtsDetailOutput
	ToGetOtsBackupPlansPlanOtsDetailOutputWithContext(context.Context) GetOtsBackupPlansPlanOtsDetailOutput
}

type GetOtsBackupPlansPlanOtsDetailArgs struct {
	TableNames pulumi.StringArrayInput `pulumi:"tableNames"`
}

func (GetOtsBackupPlansPlanOtsDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsBackupPlansPlanOtsDetail)(nil)).Elem()
}

func (i GetOtsBackupPlansPlanOtsDetailArgs) ToGetOtsBackupPlansPlanOtsDetailOutput() GetOtsBackupPlansPlanOtsDetailOutput {
	return i.ToGetOtsBackupPlansPlanOtsDetailOutputWithContext(context.Background())
}

func (i GetOtsBackupPlansPlanOtsDetailArgs) ToGetOtsBackupPlansPlanOtsDetailOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOtsDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsBackupPlansPlanOtsDetailOutput)
}

// GetOtsBackupPlansPlanOtsDetailArrayInput is an input type that accepts GetOtsBackupPlansPlanOtsDetailArray and GetOtsBackupPlansPlanOtsDetailArrayOutput values.
// You can construct a concrete instance of `GetOtsBackupPlansPlanOtsDetailArrayInput` via:
//
//	GetOtsBackupPlansPlanOtsDetailArray{ GetOtsBackupPlansPlanOtsDetailArgs{...} }
type GetOtsBackupPlansPlanOtsDetailArrayInput interface {
	pulumi.Input

	ToGetOtsBackupPlansPlanOtsDetailArrayOutput() GetOtsBackupPlansPlanOtsDetailArrayOutput
	ToGetOtsBackupPlansPlanOtsDetailArrayOutputWithContext(context.Context) GetOtsBackupPlansPlanOtsDetailArrayOutput
}

type GetOtsBackupPlansPlanOtsDetailArray []GetOtsBackupPlansPlanOtsDetailInput

func (GetOtsBackupPlansPlanOtsDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsBackupPlansPlanOtsDetail)(nil)).Elem()
}

func (i GetOtsBackupPlansPlanOtsDetailArray) ToGetOtsBackupPlansPlanOtsDetailArrayOutput() GetOtsBackupPlansPlanOtsDetailArrayOutput {
	return i.ToGetOtsBackupPlansPlanOtsDetailArrayOutputWithContext(context.Background())
}

func (i GetOtsBackupPlansPlanOtsDetailArray) ToGetOtsBackupPlansPlanOtsDetailArrayOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOtsDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsBackupPlansPlanOtsDetailArrayOutput)
}

type GetOtsBackupPlansPlanOtsDetailOutput struct{ *pulumi.OutputState }

func (GetOtsBackupPlansPlanOtsDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsBackupPlansPlanOtsDetail)(nil)).Elem()
}

func (o GetOtsBackupPlansPlanOtsDetailOutput) ToGetOtsBackupPlansPlanOtsDetailOutput() GetOtsBackupPlansPlanOtsDetailOutput {
	return o
}

func (o GetOtsBackupPlansPlanOtsDetailOutput) ToGetOtsBackupPlansPlanOtsDetailOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOtsDetailOutput {
	return o
}

func (o GetOtsBackupPlansPlanOtsDetailOutput) TableNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOtsBackupPlansPlanOtsDetail) []string { return v.TableNames }).(pulumi.StringArrayOutput)
}

type GetOtsBackupPlansPlanOtsDetailArrayOutput struct{ *pulumi.OutputState }

func (GetOtsBackupPlansPlanOtsDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsBackupPlansPlanOtsDetail)(nil)).Elem()
}

func (o GetOtsBackupPlansPlanOtsDetailArrayOutput) ToGetOtsBackupPlansPlanOtsDetailArrayOutput() GetOtsBackupPlansPlanOtsDetailArrayOutput {
	return o
}

func (o GetOtsBackupPlansPlanOtsDetailArrayOutput) ToGetOtsBackupPlansPlanOtsDetailArrayOutputWithContext(ctx context.Context) GetOtsBackupPlansPlanOtsDetailArrayOutput {
	return o
}

func (o GetOtsBackupPlansPlanOtsDetailArrayOutput) Index(i pulumi.IntInput) GetOtsBackupPlansPlanOtsDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOtsBackupPlansPlanOtsDetail {
		return vs[0].([]GetOtsBackupPlansPlanOtsDetail)[vs[1].(int)]
	}).(GetOtsBackupPlansPlanOtsDetailOutput)
}

type GetOtsSnapshotsSnapshot struct {
	// The actual amount of backup snapshots after duplicates are removed. Unit: bytes.
	ActualBytes string `pulumi:"actualBytes"`
	// The backup type. Valid value: `COMPLETE`, which indicates full backup.
	BackupType string `pulumi:"backupType"`
	// The total amount of data. Unit: bytes.
	BytesTotal string `pulumi:"bytesTotal"`
	// The time when the backup snapshot was completed. This value is a UNIX timestamp. Unit: seconds.
	CompleteTime string `pulumi:"completeTime"`
	// The time when the Table store instance was created. This value is a UNIX timestamp. Unit: seconds.
	CreateTime string `pulumi:"createTime"`
	// The time when the backup snapshot was created. This value is a UNIX timestamp. Unit: seconds.
	CreatedTime string `pulumi:"createdTime"`
	// The ID of the backup snapshot.
	Id string `pulumi:"id"`
	// The name of the Table store instance.
	InstanceName string `pulumi:"instanceName"`
	// The ID of the backup job.
	JobId string `pulumi:"jobId"`
	// The hash value of the parent backup snapshot.
	ParentSnapshotHash string `pulumi:"parentSnapshotHash"`
	// The time when the backup job ended. This value is a UNIX timestamp. Unit: milliseconds.
	RangeEnd string `pulumi:"rangeEnd"`
	// The time when the backup job started. This value is a UNIX timestamp. Unit: milliseconds.
	RangeStart string `pulumi:"rangeStart"`
	// The retention period of the backup snapshot.
	Retention string `pulumi:"retention"`
	// The hash value of the backup snapshot.
	SnapshotHash string `pulumi:"snapshotHash"`
	// The ID of the backup snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// The type of the data source. Valid values: `ECS_FILE`,`PARTIAL_COMPLETE`,`FAILED`
	SourceType string `pulumi:"sourceType"`
	// The start time of the backup snapshot. This value is a UNIX timestamp. Unit: seconds.
	StartTime string `pulumi:"startTime"`
	// The status of the backup job. Valid values: `COMPLETE`,`PARTIAL_COMPLETE`,`FAILED`.
	Status string `pulumi:"status"`
	// The name of the table in the Table store instance.
	TableName string `pulumi:"tableName"`
	// The time when the backup snapshot was updated. This value is a UNIX timestamp. Unit: seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of the backup vault that stores the backup snapshot.
	VaultId string `pulumi:"vaultId"`
}

// GetOtsSnapshotsSnapshotInput is an input type that accepts GetOtsSnapshotsSnapshotArgs and GetOtsSnapshotsSnapshotOutput values.
// You can construct a concrete instance of `GetOtsSnapshotsSnapshotInput` via:
//
//	GetOtsSnapshotsSnapshotArgs{...}
type GetOtsSnapshotsSnapshotInput interface {
	pulumi.Input

	ToGetOtsSnapshotsSnapshotOutput() GetOtsSnapshotsSnapshotOutput
	ToGetOtsSnapshotsSnapshotOutputWithContext(context.Context) GetOtsSnapshotsSnapshotOutput
}

type GetOtsSnapshotsSnapshotArgs struct {
	// The actual amount of backup snapshots after duplicates are removed. Unit: bytes.
	ActualBytes pulumi.StringInput `pulumi:"actualBytes"`
	// The backup type. Valid value: `COMPLETE`, which indicates full backup.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The total amount of data. Unit: bytes.
	BytesTotal pulumi.StringInput `pulumi:"bytesTotal"`
	// The time when the backup snapshot was completed. This value is a UNIX timestamp. Unit: seconds.
	CompleteTime pulumi.StringInput `pulumi:"completeTime"`
	// The time when the Table store instance was created. This value is a UNIX timestamp. Unit: seconds.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The time when the backup snapshot was created. This value is a UNIX timestamp. Unit: seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// The ID of the backup snapshot.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the Table store instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The ID of the backup job.
	JobId pulumi.StringInput `pulumi:"jobId"`
	// The hash value of the parent backup snapshot.
	ParentSnapshotHash pulumi.StringInput `pulumi:"parentSnapshotHash"`
	// The time when the backup job ended. This value is a UNIX timestamp. Unit: milliseconds.
	RangeEnd pulumi.StringInput `pulumi:"rangeEnd"`
	// The time when the backup job started. This value is a UNIX timestamp. Unit: milliseconds.
	RangeStart pulumi.StringInput `pulumi:"rangeStart"`
	// The retention period of the backup snapshot.
	Retention pulumi.StringInput `pulumi:"retention"`
	// The hash value of the backup snapshot.
	SnapshotHash pulumi.StringInput `pulumi:"snapshotHash"`
	// The ID of the backup snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// The type of the data source. Valid values: `ECS_FILE`,`PARTIAL_COMPLETE`,`FAILED`
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The start time of the backup snapshot. This value is a UNIX timestamp. Unit: seconds.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The status of the backup job. Valid values: `COMPLETE`,`PARTIAL_COMPLETE`,`FAILED`.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of the table in the Table store instance.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// The time when the backup snapshot was updated. This value is a UNIX timestamp. Unit: seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of the backup vault that stores the backup snapshot.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetOtsSnapshotsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsSnapshotsSnapshot)(nil)).Elem()
}

func (i GetOtsSnapshotsSnapshotArgs) ToGetOtsSnapshotsSnapshotOutput() GetOtsSnapshotsSnapshotOutput {
	return i.ToGetOtsSnapshotsSnapshotOutputWithContext(context.Background())
}

func (i GetOtsSnapshotsSnapshotArgs) ToGetOtsSnapshotsSnapshotOutputWithContext(ctx context.Context) GetOtsSnapshotsSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsSnapshotsSnapshotOutput)
}

// GetOtsSnapshotsSnapshotArrayInput is an input type that accepts GetOtsSnapshotsSnapshotArray and GetOtsSnapshotsSnapshotArrayOutput values.
// You can construct a concrete instance of `GetOtsSnapshotsSnapshotArrayInput` via:
//
//	GetOtsSnapshotsSnapshotArray{ GetOtsSnapshotsSnapshotArgs{...} }
type GetOtsSnapshotsSnapshotArrayInput interface {
	pulumi.Input

	ToGetOtsSnapshotsSnapshotArrayOutput() GetOtsSnapshotsSnapshotArrayOutput
	ToGetOtsSnapshotsSnapshotArrayOutputWithContext(context.Context) GetOtsSnapshotsSnapshotArrayOutput
}

type GetOtsSnapshotsSnapshotArray []GetOtsSnapshotsSnapshotInput

func (GetOtsSnapshotsSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsSnapshotsSnapshot)(nil)).Elem()
}

func (i GetOtsSnapshotsSnapshotArray) ToGetOtsSnapshotsSnapshotArrayOutput() GetOtsSnapshotsSnapshotArrayOutput {
	return i.ToGetOtsSnapshotsSnapshotArrayOutputWithContext(context.Background())
}

func (i GetOtsSnapshotsSnapshotArray) ToGetOtsSnapshotsSnapshotArrayOutputWithContext(ctx context.Context) GetOtsSnapshotsSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOtsSnapshotsSnapshotArrayOutput)
}

type GetOtsSnapshotsSnapshotOutput struct{ *pulumi.OutputState }

func (GetOtsSnapshotsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOtsSnapshotsSnapshot)(nil)).Elem()
}

func (o GetOtsSnapshotsSnapshotOutput) ToGetOtsSnapshotsSnapshotOutput() GetOtsSnapshotsSnapshotOutput {
	return o
}

func (o GetOtsSnapshotsSnapshotOutput) ToGetOtsSnapshotsSnapshotOutputWithContext(ctx context.Context) GetOtsSnapshotsSnapshotOutput {
	return o
}

// The actual amount of backup snapshots after duplicates are removed. Unit: bytes.
func (o GetOtsSnapshotsSnapshotOutput) ActualBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.ActualBytes }).(pulumi.StringOutput)
}

// The backup type. Valid value: `COMPLETE`, which indicates full backup.
func (o GetOtsSnapshotsSnapshotOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.BackupType }).(pulumi.StringOutput)
}

// The total amount of data. Unit: bytes.
func (o GetOtsSnapshotsSnapshotOutput) BytesTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.BytesTotal }).(pulumi.StringOutput)
}

// The time when the backup snapshot was completed. This value is a UNIX timestamp. Unit: seconds.
func (o GetOtsSnapshotsSnapshotOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.CompleteTime }).(pulumi.StringOutput)
}

// The time when the Table store instance was created. This value is a UNIX timestamp. Unit: seconds.
func (o GetOtsSnapshotsSnapshotOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time when the backup snapshot was created. This value is a UNIX timestamp. Unit: seconds.
func (o GetOtsSnapshotsSnapshotOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The ID of the backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Table store instance.
func (o GetOtsSnapshotsSnapshotOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The ID of the backup job.
func (o GetOtsSnapshotsSnapshotOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.JobId }).(pulumi.StringOutput)
}

// The hash value of the parent backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) ParentSnapshotHash() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.ParentSnapshotHash }).(pulumi.StringOutput)
}

// The time when the backup job ended. This value is a UNIX timestamp. Unit: milliseconds.
func (o GetOtsSnapshotsSnapshotOutput) RangeEnd() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.RangeEnd }).(pulumi.StringOutput)
}

// The time when the backup job started. This value is a UNIX timestamp. Unit: milliseconds.
func (o GetOtsSnapshotsSnapshotOutput) RangeStart() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.RangeStart }).(pulumi.StringOutput)
}

// The retention period of the backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.Retention }).(pulumi.StringOutput)
}

// The hash value of the backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) SnapshotHash() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.SnapshotHash }).(pulumi.StringOutput)
}

// The ID of the backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The type of the data source. Valid values: `ECS_FILE`,`PARTIAL_COMPLETE`,`FAILED`
func (o GetOtsSnapshotsSnapshotOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.SourceType }).(pulumi.StringOutput)
}

// The start time of the backup snapshot. This value is a UNIX timestamp. Unit: seconds.
func (o GetOtsSnapshotsSnapshotOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.StartTime }).(pulumi.StringOutput)
}

// The status of the backup job. Valid values: `COMPLETE`,`PARTIAL_COMPLETE`,`FAILED`.
func (o GetOtsSnapshotsSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.Status }).(pulumi.StringOutput)
}

// The name of the table in the Table store instance.
func (o GetOtsSnapshotsSnapshotOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.TableName }).(pulumi.StringOutput)
}

// The time when the backup snapshot was updated. This value is a UNIX timestamp. Unit: seconds.
func (o GetOtsSnapshotsSnapshotOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of the backup vault that stores the backup snapshot.
func (o GetOtsSnapshotsSnapshotOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOtsSnapshotsSnapshot) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetOtsSnapshotsSnapshotArrayOutput struct{ *pulumi.OutputState }

func (GetOtsSnapshotsSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOtsSnapshotsSnapshot)(nil)).Elem()
}

func (o GetOtsSnapshotsSnapshotArrayOutput) ToGetOtsSnapshotsSnapshotArrayOutput() GetOtsSnapshotsSnapshotArrayOutput {
	return o
}

func (o GetOtsSnapshotsSnapshotArrayOutput) ToGetOtsSnapshotsSnapshotArrayOutputWithContext(ctx context.Context) GetOtsSnapshotsSnapshotArrayOutput {
	return o
}

func (o GetOtsSnapshotsSnapshotArrayOutput) Index(i pulumi.IntInput) GetOtsSnapshotsSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOtsSnapshotsSnapshot {
		return vs[0].([]GetOtsSnapshotsSnapshot)[vs[1].(int)]
	}).(GetOtsSnapshotsSnapshotOutput)
}

type GetReplicationVaultRegionsRegion struct {
	// The ID of the replication region.
	ReplicationRegionId string `pulumi:"replicationRegionId"`
}

// GetReplicationVaultRegionsRegionInput is an input type that accepts GetReplicationVaultRegionsRegionArgs and GetReplicationVaultRegionsRegionOutput values.
// You can construct a concrete instance of `GetReplicationVaultRegionsRegionInput` via:
//
//	GetReplicationVaultRegionsRegionArgs{...}
type GetReplicationVaultRegionsRegionInput interface {
	pulumi.Input

	ToGetReplicationVaultRegionsRegionOutput() GetReplicationVaultRegionsRegionOutput
	ToGetReplicationVaultRegionsRegionOutputWithContext(context.Context) GetReplicationVaultRegionsRegionOutput
}

type GetReplicationVaultRegionsRegionArgs struct {
	// The ID of the replication region.
	ReplicationRegionId pulumi.StringInput `pulumi:"replicationRegionId"`
}

func (GetReplicationVaultRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationVaultRegionsRegion)(nil)).Elem()
}

func (i GetReplicationVaultRegionsRegionArgs) ToGetReplicationVaultRegionsRegionOutput() GetReplicationVaultRegionsRegionOutput {
	return i.ToGetReplicationVaultRegionsRegionOutputWithContext(context.Background())
}

func (i GetReplicationVaultRegionsRegionArgs) ToGetReplicationVaultRegionsRegionOutputWithContext(ctx context.Context) GetReplicationVaultRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReplicationVaultRegionsRegionOutput)
}

// GetReplicationVaultRegionsRegionArrayInput is an input type that accepts GetReplicationVaultRegionsRegionArray and GetReplicationVaultRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetReplicationVaultRegionsRegionArrayInput` via:
//
//	GetReplicationVaultRegionsRegionArray{ GetReplicationVaultRegionsRegionArgs{...} }
type GetReplicationVaultRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetReplicationVaultRegionsRegionArrayOutput() GetReplicationVaultRegionsRegionArrayOutput
	ToGetReplicationVaultRegionsRegionArrayOutputWithContext(context.Context) GetReplicationVaultRegionsRegionArrayOutput
}

type GetReplicationVaultRegionsRegionArray []GetReplicationVaultRegionsRegionInput

func (GetReplicationVaultRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReplicationVaultRegionsRegion)(nil)).Elem()
}

func (i GetReplicationVaultRegionsRegionArray) ToGetReplicationVaultRegionsRegionArrayOutput() GetReplicationVaultRegionsRegionArrayOutput {
	return i.ToGetReplicationVaultRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetReplicationVaultRegionsRegionArray) ToGetReplicationVaultRegionsRegionArrayOutputWithContext(ctx context.Context) GetReplicationVaultRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReplicationVaultRegionsRegionArrayOutput)
}

type GetReplicationVaultRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetReplicationVaultRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationVaultRegionsRegion)(nil)).Elem()
}

func (o GetReplicationVaultRegionsRegionOutput) ToGetReplicationVaultRegionsRegionOutput() GetReplicationVaultRegionsRegionOutput {
	return o
}

func (o GetReplicationVaultRegionsRegionOutput) ToGetReplicationVaultRegionsRegionOutputWithContext(ctx context.Context) GetReplicationVaultRegionsRegionOutput {
	return o
}

// The ID of the replication region.
func (o GetReplicationVaultRegionsRegionOutput) ReplicationRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetReplicationVaultRegionsRegion) string { return v.ReplicationRegionId }).(pulumi.StringOutput)
}

type GetReplicationVaultRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetReplicationVaultRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReplicationVaultRegionsRegion)(nil)).Elem()
}

func (o GetReplicationVaultRegionsRegionArrayOutput) ToGetReplicationVaultRegionsRegionArrayOutput() GetReplicationVaultRegionsRegionArrayOutput {
	return o
}

func (o GetReplicationVaultRegionsRegionArrayOutput) ToGetReplicationVaultRegionsRegionArrayOutputWithContext(ctx context.Context) GetReplicationVaultRegionsRegionArrayOutput {
	return o
}

func (o GetReplicationVaultRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetReplicationVaultRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReplicationVaultRegionsRegion {
		return vs[0].([]GetReplicationVaultRegionsRegion)[vs[1].(int)]
	}).(GetReplicationVaultRegionsRegionOutput)
}

type GetRestoreJobsJob struct {
	// The actual size of Snapshot.
	ActualBytes string `pulumi:"actualBytes"`
	// The actual number of files.
	ActualItems string `pulumi:"actualItems"`
	// The size of restore job recovered.
	BytesDone string `pulumi:"bytesDone"`
	// The total size of restore job recovered.
	BytesTotal string `pulumi:"bytesTotal"`
	// The completion time of restore Job.
	CompleteTime string `pulumi:"completeTime"`
	// The creation time of restore job.
	CreateTime string `pulumi:"createTime"`
	ErrorFile  string `pulumi:"errorFile"`
	// The error message of recovery task execution.
	ErrorMessage string `pulumi:"errorMessage"`
	// The expiration time of restore job. Unix Time in seconds.
	ExpireTime string `pulumi:"expireTime"`
	// The ID of the restore job.
	Id string `pulumi:"id"`
	// The number of items restore job recovered.
	ItemsDone string `pulumi:"itemsDone"`
	// The total number of items restore job recovered.
	ItemsTotal string `pulumi:"itemsTotal"`
	// Recovery Options.
	Options  string `pulumi:"options"`
	ParentId string `pulumi:"parentId"`
	// The recovery progress.
	Progress int `pulumi:"progress"`
	// The ID of restore job.
	RestoreJobId string `pulumi:"restoreJobId"`
	// The type of recovery destination. Valid Values: `ECS_FILE`, `OSS`, `NAS`.
	RestoreType string `pulumi:"restoreType"`
	// The hashcode of Snapshot.
	SnapshotHash string `pulumi:"snapshotHash"`
	// The ID of Snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// The list of data source types. Valid values: `ECS_FILE`, `NAS`, `OSS`, `OTS_TABLE`,`UDM_ECS_ROLLBACK`.
	SourceType string `pulumi:"sourceType"`
	// The start time of restore job. Unix Time in Seconds.
	StartTime string `pulumi:"startTime"`
	// The status of restore job.
	Status string `pulumi:"status"`
	// The name of target ofo OSS bucket.
	TargetBucket   string `pulumi:"targetBucket"`
	TargetClientId string `pulumi:"targetClientId"`
	// The creation time of destination file system.
	TargetCreateTime   string `pulumi:"targetCreateTime"`
	TargetDataSourceId string `pulumi:"targetDataSourceId"`
	// The ID of destination file system.
	TargetFileSystemId string `pulumi:"targetFileSystemId"`
	// The ID of target ECS instance.
	TargetInstanceId string `pulumi:"targetInstanceId"`
	// The target file path of ECS instance.
	TargetPath string `pulumi:"targetPath"`
	// The file prefix of target OSS object.
	TargetPrefix string `pulumi:"targetPrefix"`
	// The update Time of restore job. Unix Time in Seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId string `pulumi:"vaultId"`
}

// GetRestoreJobsJobInput is an input type that accepts GetRestoreJobsJobArgs and GetRestoreJobsJobOutput values.
// You can construct a concrete instance of `GetRestoreJobsJobInput` via:
//
//	GetRestoreJobsJobArgs{...}
type GetRestoreJobsJobInput interface {
	pulumi.Input

	ToGetRestoreJobsJobOutput() GetRestoreJobsJobOutput
	ToGetRestoreJobsJobOutputWithContext(context.Context) GetRestoreJobsJobOutput
}

type GetRestoreJobsJobArgs struct {
	// The actual size of Snapshot.
	ActualBytes pulumi.StringInput `pulumi:"actualBytes"`
	// The actual number of files.
	ActualItems pulumi.StringInput `pulumi:"actualItems"`
	// The size of restore job recovered.
	BytesDone pulumi.StringInput `pulumi:"bytesDone"`
	// The total size of restore job recovered.
	BytesTotal pulumi.StringInput `pulumi:"bytesTotal"`
	// The completion time of restore Job.
	CompleteTime pulumi.StringInput `pulumi:"completeTime"`
	// The creation time of restore job.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	ErrorFile  pulumi.StringInput `pulumi:"errorFile"`
	// The error message of recovery task execution.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The expiration time of restore job. Unix Time in seconds.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The ID of the restore job.
	Id pulumi.StringInput `pulumi:"id"`
	// The number of items restore job recovered.
	ItemsDone pulumi.StringInput `pulumi:"itemsDone"`
	// The total number of items restore job recovered.
	ItemsTotal pulumi.StringInput `pulumi:"itemsTotal"`
	// Recovery Options.
	Options  pulumi.StringInput `pulumi:"options"`
	ParentId pulumi.StringInput `pulumi:"parentId"`
	// The recovery progress.
	Progress pulumi.IntInput `pulumi:"progress"`
	// The ID of restore job.
	RestoreJobId pulumi.StringInput `pulumi:"restoreJobId"`
	// The type of recovery destination. Valid Values: `ECS_FILE`, `OSS`, `NAS`.
	RestoreType pulumi.StringInput `pulumi:"restoreType"`
	// The hashcode of Snapshot.
	SnapshotHash pulumi.StringInput `pulumi:"snapshotHash"`
	// The ID of Snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// The list of data source types. Valid values: `ECS_FILE`, `NAS`, `OSS`, `OTS_TABLE`,`UDM_ECS_ROLLBACK`.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The start time of restore job. Unix Time in Seconds.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The status of restore job.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of target ofo OSS bucket.
	TargetBucket   pulumi.StringInput `pulumi:"targetBucket"`
	TargetClientId pulumi.StringInput `pulumi:"targetClientId"`
	// The creation time of destination file system.
	TargetCreateTime   pulumi.StringInput `pulumi:"targetCreateTime"`
	TargetDataSourceId pulumi.StringInput `pulumi:"targetDataSourceId"`
	// The ID of destination file system.
	TargetFileSystemId pulumi.StringInput `pulumi:"targetFileSystemId"`
	// The ID of target ECS instance.
	TargetInstanceId pulumi.StringInput `pulumi:"targetInstanceId"`
	// The target file path of ECS instance.
	TargetPath pulumi.StringInput `pulumi:"targetPath"`
	// The file prefix of target OSS object.
	TargetPrefix pulumi.StringInput `pulumi:"targetPrefix"`
	// The update Time of restore job. Unix Time in Seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of backup vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetRestoreJobsJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRestoreJobsJob)(nil)).Elem()
}

func (i GetRestoreJobsJobArgs) ToGetRestoreJobsJobOutput() GetRestoreJobsJobOutput {
	return i.ToGetRestoreJobsJobOutputWithContext(context.Background())
}

func (i GetRestoreJobsJobArgs) ToGetRestoreJobsJobOutputWithContext(ctx context.Context) GetRestoreJobsJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRestoreJobsJobOutput)
}

// GetRestoreJobsJobArrayInput is an input type that accepts GetRestoreJobsJobArray and GetRestoreJobsJobArrayOutput values.
// You can construct a concrete instance of `GetRestoreJobsJobArrayInput` via:
//
//	GetRestoreJobsJobArray{ GetRestoreJobsJobArgs{...} }
type GetRestoreJobsJobArrayInput interface {
	pulumi.Input

	ToGetRestoreJobsJobArrayOutput() GetRestoreJobsJobArrayOutput
	ToGetRestoreJobsJobArrayOutputWithContext(context.Context) GetRestoreJobsJobArrayOutput
}

type GetRestoreJobsJobArray []GetRestoreJobsJobInput

func (GetRestoreJobsJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRestoreJobsJob)(nil)).Elem()
}

func (i GetRestoreJobsJobArray) ToGetRestoreJobsJobArrayOutput() GetRestoreJobsJobArrayOutput {
	return i.ToGetRestoreJobsJobArrayOutputWithContext(context.Background())
}

func (i GetRestoreJobsJobArray) ToGetRestoreJobsJobArrayOutputWithContext(ctx context.Context) GetRestoreJobsJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRestoreJobsJobArrayOutput)
}

type GetRestoreJobsJobOutput struct{ *pulumi.OutputState }

func (GetRestoreJobsJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRestoreJobsJob)(nil)).Elem()
}

func (o GetRestoreJobsJobOutput) ToGetRestoreJobsJobOutput() GetRestoreJobsJobOutput {
	return o
}

func (o GetRestoreJobsJobOutput) ToGetRestoreJobsJobOutputWithContext(ctx context.Context) GetRestoreJobsJobOutput {
	return o
}

// The actual size of Snapshot.
func (o GetRestoreJobsJobOutput) ActualBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ActualBytes }).(pulumi.StringOutput)
}

// The actual number of files.
func (o GetRestoreJobsJobOutput) ActualItems() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ActualItems }).(pulumi.StringOutput)
}

// The size of restore job recovered.
func (o GetRestoreJobsJobOutput) BytesDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.BytesDone }).(pulumi.StringOutput)
}

// The total size of restore job recovered.
func (o GetRestoreJobsJobOutput) BytesTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.BytesTotal }).(pulumi.StringOutput)
}

// The completion time of restore Job.
func (o GetRestoreJobsJobOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.CompleteTime }).(pulumi.StringOutput)
}

// The creation time of restore job.
func (o GetRestoreJobsJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GetRestoreJobsJobOutput) ErrorFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ErrorFile }).(pulumi.StringOutput)
}

// The error message of recovery task execution.
func (o GetRestoreJobsJobOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The expiration time of restore job. Unix Time in seconds.
func (o GetRestoreJobsJobOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The ID of the restore job.
func (o GetRestoreJobsJobOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.Id }).(pulumi.StringOutput)
}

// The number of items restore job recovered.
func (o GetRestoreJobsJobOutput) ItemsDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ItemsDone }).(pulumi.StringOutput)
}

// The total number of items restore job recovered.
func (o GetRestoreJobsJobOutput) ItemsTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ItemsTotal }).(pulumi.StringOutput)
}

// Recovery Options.
func (o GetRestoreJobsJobOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.Options }).(pulumi.StringOutput)
}

func (o GetRestoreJobsJobOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.ParentId }).(pulumi.StringOutput)
}

// The recovery progress.
func (o GetRestoreJobsJobOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) int { return v.Progress }).(pulumi.IntOutput)
}

// The ID of restore job.
func (o GetRestoreJobsJobOutput) RestoreJobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.RestoreJobId }).(pulumi.StringOutput)
}

// The type of recovery destination. Valid Values: `ECS_FILE`, `OSS`, `NAS`.
func (o GetRestoreJobsJobOutput) RestoreType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.RestoreType }).(pulumi.StringOutput)
}

// The hashcode of Snapshot.
func (o GetRestoreJobsJobOutput) SnapshotHash() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.SnapshotHash }).(pulumi.StringOutput)
}

// The ID of Snapshot.
func (o GetRestoreJobsJobOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The list of data source types. Valid values: `ECS_FILE`, `NAS`, `OSS`, `OTS_TABLE`,`UDM_ECS_ROLLBACK`.
func (o GetRestoreJobsJobOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.SourceType }).(pulumi.StringOutput)
}

// The start time of restore job. Unix Time in Seconds.
func (o GetRestoreJobsJobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.StartTime }).(pulumi.StringOutput)
}

// The status of restore job.
func (o GetRestoreJobsJobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.Status }).(pulumi.StringOutput)
}

// The name of target ofo OSS bucket.
func (o GetRestoreJobsJobOutput) TargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetBucket }).(pulumi.StringOutput)
}

func (o GetRestoreJobsJobOutput) TargetClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetClientId }).(pulumi.StringOutput)
}

// The creation time of destination file system.
func (o GetRestoreJobsJobOutput) TargetCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetCreateTime }).(pulumi.StringOutput)
}

func (o GetRestoreJobsJobOutput) TargetDataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetDataSourceId }).(pulumi.StringOutput)
}

// The ID of destination file system.
func (o GetRestoreJobsJobOutput) TargetFileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetFileSystemId }).(pulumi.StringOutput)
}

// The ID of target ECS instance.
func (o GetRestoreJobsJobOutput) TargetInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetInstanceId }).(pulumi.StringOutput)
}

// The target file path of ECS instance.
func (o GetRestoreJobsJobOutput) TargetPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetPath }).(pulumi.StringOutput)
}

// The file prefix of target OSS object.
func (o GetRestoreJobsJobOutput) TargetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.TargetPrefix }).(pulumi.StringOutput)
}

// The update Time of restore job. Unix Time in Seconds.
func (o GetRestoreJobsJobOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of backup vault.
func (o GetRestoreJobsJobOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRestoreJobsJob) string { return v.VaultId }).(pulumi.StringOutput)
}

type GetRestoreJobsJobArrayOutput struct{ *pulumi.OutputState }

func (GetRestoreJobsJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRestoreJobsJob)(nil)).Elem()
}

func (o GetRestoreJobsJobArrayOutput) ToGetRestoreJobsJobArrayOutput() GetRestoreJobsJobArrayOutput {
	return o
}

func (o GetRestoreJobsJobArrayOutput) ToGetRestoreJobsJobArrayOutputWithContext(ctx context.Context) GetRestoreJobsJobArrayOutput {
	return o
}

func (o GetRestoreJobsJobArrayOutput) Index(i pulumi.IntInput) GetRestoreJobsJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRestoreJobsJob {
		return vs[0].([]GetRestoreJobsJob)[vs[1].(int)]
	}).(GetRestoreJobsJobOutput)
}

type GetServerBackupPlansFilter struct {
	// The key of the field to filter. Valid values: `planId`, `instanceId`, `planName`.
	Key *string `pulumi:"key"`
	// Set of values that are accepted for the given field.
	Values []string `pulumi:"values"`
}

// GetServerBackupPlansFilterInput is an input type that accepts GetServerBackupPlansFilterArgs and GetServerBackupPlansFilterOutput values.
// You can construct a concrete instance of `GetServerBackupPlansFilterInput` via:
//
//	GetServerBackupPlansFilterArgs{...}
type GetServerBackupPlansFilterInput interface {
	pulumi.Input

	ToGetServerBackupPlansFilterOutput() GetServerBackupPlansFilterOutput
	ToGetServerBackupPlansFilterOutputWithContext(context.Context) GetServerBackupPlansFilterOutput
}

type GetServerBackupPlansFilterArgs struct {
	// The key of the field to filter. Valid values: `planId`, `instanceId`, `planName`.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Set of values that are accepted for the given field.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetServerBackupPlansFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansFilter)(nil)).Elem()
}

func (i GetServerBackupPlansFilterArgs) ToGetServerBackupPlansFilterOutput() GetServerBackupPlansFilterOutput {
	return i.ToGetServerBackupPlansFilterOutputWithContext(context.Background())
}

func (i GetServerBackupPlansFilterArgs) ToGetServerBackupPlansFilterOutputWithContext(ctx context.Context) GetServerBackupPlansFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansFilterOutput)
}

// GetServerBackupPlansFilterArrayInput is an input type that accepts GetServerBackupPlansFilterArray and GetServerBackupPlansFilterArrayOutput values.
// You can construct a concrete instance of `GetServerBackupPlansFilterArrayInput` via:
//
//	GetServerBackupPlansFilterArray{ GetServerBackupPlansFilterArgs{...} }
type GetServerBackupPlansFilterArrayInput interface {
	pulumi.Input

	ToGetServerBackupPlansFilterArrayOutput() GetServerBackupPlansFilterArrayOutput
	ToGetServerBackupPlansFilterArrayOutputWithContext(context.Context) GetServerBackupPlansFilterArrayOutput
}

type GetServerBackupPlansFilterArray []GetServerBackupPlansFilterInput

func (GetServerBackupPlansFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansFilter)(nil)).Elem()
}

func (i GetServerBackupPlansFilterArray) ToGetServerBackupPlansFilterArrayOutput() GetServerBackupPlansFilterArrayOutput {
	return i.ToGetServerBackupPlansFilterArrayOutputWithContext(context.Background())
}

func (i GetServerBackupPlansFilterArray) ToGetServerBackupPlansFilterArrayOutputWithContext(ctx context.Context) GetServerBackupPlansFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansFilterArrayOutput)
}

type GetServerBackupPlansFilterOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansFilter)(nil)).Elem()
}

func (o GetServerBackupPlansFilterOutput) ToGetServerBackupPlansFilterOutput() GetServerBackupPlansFilterOutput {
	return o
}

func (o GetServerBackupPlansFilterOutput) ToGetServerBackupPlansFilterOutputWithContext(ctx context.Context) GetServerBackupPlansFilterOutput {
	return o
}

// The key of the field to filter. Valid values: `planId`, `instanceId`, `planName`.
func (o GetServerBackupPlansFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServerBackupPlansFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Set of values that are accepted for the given field.
func (o GetServerBackupPlansFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerBackupPlansFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetServerBackupPlansFilterArrayOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansFilter)(nil)).Elem()
}

func (o GetServerBackupPlansFilterArrayOutput) ToGetServerBackupPlansFilterArrayOutput() GetServerBackupPlansFilterArrayOutput {
	return o
}

func (o GetServerBackupPlansFilterArrayOutput) ToGetServerBackupPlansFilterArrayOutputWithContext(ctx context.Context) GetServerBackupPlansFilterArrayOutput {
	return o
}

func (o GetServerBackupPlansFilterArrayOutput) Index(i pulumi.IntInput) GetServerBackupPlansFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerBackupPlansFilter {
		return vs[0].([]GetServerBackupPlansFilter)[vs[1].(int)]
	}).(GetServerBackupPlansFilterOutput)
}

type GetServerBackupPlansPlan struct {
	// The creation time of backup plan.
	CreateTime string `pulumi:"createTime"`
	// ECS server backup plan details.
	Details []GetServerBackupPlansPlanDetail `pulumi:"details"`
	// Whether to disable the backup task. Valid values: `true`, `false`.
	Disabled bool `pulumi:"disabled"`
	// The ID of the server backup plan.
	EcsServerBackupPlanId string `pulumi:"ecsServerBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	EcsServerBackupPlanName string `pulumi:"ecsServerBackupPlanName"`
	// The ID of the server backup plan.
	Id string `pulumi:"id"`
	// The ID of ECS Instance.
	InstanceId string `pulumi:"instanceId"`
	// Backup retention days, the minimum is 1.
	Retention string `pulumi:"retention"`
	// Backup strategy.
	Schedule string `pulumi:"schedule"`
}

// GetServerBackupPlansPlanInput is an input type that accepts GetServerBackupPlansPlanArgs and GetServerBackupPlansPlanOutput values.
// You can construct a concrete instance of `GetServerBackupPlansPlanInput` via:
//
//	GetServerBackupPlansPlanArgs{...}
type GetServerBackupPlansPlanInput interface {
	pulumi.Input

	ToGetServerBackupPlansPlanOutput() GetServerBackupPlansPlanOutput
	ToGetServerBackupPlansPlanOutputWithContext(context.Context) GetServerBackupPlansPlanOutput
}

type GetServerBackupPlansPlanArgs struct {
	// The creation time of backup plan.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// ECS server backup plan details.
	Details GetServerBackupPlansPlanDetailArrayInput `pulumi:"details"`
	// Whether to disable the backup task. Valid values: `true`, `false`.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The ID of the server backup plan.
	EcsServerBackupPlanId pulumi.StringInput `pulumi:"ecsServerBackupPlanId"`
	// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
	EcsServerBackupPlanName pulumi.StringInput `pulumi:"ecsServerBackupPlanName"`
	// The ID of the server backup plan.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ECS Instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Backup retention days, the minimum is 1.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Backup strategy.
	Schedule pulumi.StringInput `pulumi:"schedule"`
}

func (GetServerBackupPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansPlan)(nil)).Elem()
}

func (i GetServerBackupPlansPlanArgs) ToGetServerBackupPlansPlanOutput() GetServerBackupPlansPlanOutput {
	return i.ToGetServerBackupPlansPlanOutputWithContext(context.Background())
}

func (i GetServerBackupPlansPlanArgs) ToGetServerBackupPlansPlanOutputWithContext(ctx context.Context) GetServerBackupPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansPlanOutput)
}

// GetServerBackupPlansPlanArrayInput is an input type that accepts GetServerBackupPlansPlanArray and GetServerBackupPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetServerBackupPlansPlanArrayInput` via:
//
//	GetServerBackupPlansPlanArray{ GetServerBackupPlansPlanArgs{...} }
type GetServerBackupPlansPlanArrayInput interface {
	pulumi.Input

	ToGetServerBackupPlansPlanArrayOutput() GetServerBackupPlansPlanArrayOutput
	ToGetServerBackupPlansPlanArrayOutputWithContext(context.Context) GetServerBackupPlansPlanArrayOutput
}

type GetServerBackupPlansPlanArray []GetServerBackupPlansPlanInput

func (GetServerBackupPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansPlan)(nil)).Elem()
}

func (i GetServerBackupPlansPlanArray) ToGetServerBackupPlansPlanArrayOutput() GetServerBackupPlansPlanArrayOutput {
	return i.ToGetServerBackupPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetServerBackupPlansPlanArray) ToGetServerBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetServerBackupPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansPlanArrayOutput)
}

type GetServerBackupPlansPlanOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansPlan)(nil)).Elem()
}

func (o GetServerBackupPlansPlanOutput) ToGetServerBackupPlansPlanOutput() GetServerBackupPlansPlanOutput {
	return o
}

func (o GetServerBackupPlansPlanOutput) ToGetServerBackupPlansPlanOutputWithContext(ctx context.Context) GetServerBackupPlansPlanOutput {
	return o
}

// The creation time of backup plan.
func (o GetServerBackupPlansPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.CreateTime }).(pulumi.StringOutput)
}

// ECS server backup plan details.
func (o GetServerBackupPlansPlanOutput) Details() GetServerBackupPlansPlanDetailArrayOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) []GetServerBackupPlansPlanDetail { return v.Details }).(GetServerBackupPlansPlanDetailArrayOutput)
}

// Whether to disable the backup task. Valid values: `true`, `false`.
func (o GetServerBackupPlansPlanOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The ID of the server backup plan.
func (o GetServerBackupPlansPlanOutput) EcsServerBackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.EcsServerBackupPlanId }).(pulumi.StringOutput)
}

// The name of the backup plan. 1~64 characters, the backup plan name of each data source type in a single warehouse required to be unique.
func (o GetServerBackupPlansPlanOutput) EcsServerBackupPlanName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.EcsServerBackupPlanName }).(pulumi.StringOutput)
}

// The ID of the server backup plan.
func (o GetServerBackupPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ECS Instance.
func (o GetServerBackupPlansPlanOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Backup retention days, the minimum is 1.
func (o GetServerBackupPlansPlanOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.Retention }).(pulumi.StringOutput)
}

// Backup strategy.
func (o GetServerBackupPlansPlanOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlan) string { return v.Schedule }).(pulumi.StringOutput)
}

type GetServerBackupPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansPlan)(nil)).Elem()
}

func (o GetServerBackupPlansPlanArrayOutput) ToGetServerBackupPlansPlanArrayOutput() GetServerBackupPlansPlanArrayOutput {
	return o
}

func (o GetServerBackupPlansPlanArrayOutput) ToGetServerBackupPlansPlanArrayOutputWithContext(ctx context.Context) GetServerBackupPlansPlanArrayOutput {
	return o
}

func (o GetServerBackupPlansPlanArrayOutput) Index(i pulumi.IntInput) GetServerBackupPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerBackupPlansPlan {
		return vs[0].([]GetServerBackupPlansPlan)[vs[1].(int)]
	}).(GetServerBackupPlansPlanOutput)
}

type GetServerBackupPlansPlanDetail struct {
	// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
	AppConsistent bool `pulumi:"appConsistent"`
	// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRegionId string `pulumi:"destinationRegionId"`
	// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRetention int `pulumi:"destinationRetention"`
	// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
	DiskIdLists []string `pulumi:"diskIdLists"`
	// Whether replicate to another region. Valid values: `true`, `false`.
	DoCopy bool `pulumi:"doCopy"`
	// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
	EnableFsFreeze bool `pulumi:"enableFsFreeze"`
	// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PostScriptPath string `pulumi:"postScriptPath"`
	// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PreScriptPath string `pulumi:"preScriptPath"`
	// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
	SnapshotGroup bool `pulumi:"snapshotGroup"`
	// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
	TimeoutInSeconds int `pulumi:"timeoutInSeconds"`
}

// GetServerBackupPlansPlanDetailInput is an input type that accepts GetServerBackupPlansPlanDetailArgs and GetServerBackupPlansPlanDetailOutput values.
// You can construct a concrete instance of `GetServerBackupPlansPlanDetailInput` via:
//
//	GetServerBackupPlansPlanDetailArgs{...}
type GetServerBackupPlansPlanDetailInput interface {
	pulumi.Input

	ToGetServerBackupPlansPlanDetailOutput() GetServerBackupPlansPlanDetailOutput
	ToGetServerBackupPlansPlanDetailOutputWithContext(context.Context) GetServerBackupPlansPlanDetailOutput
}

type GetServerBackupPlansPlanDetailArgs struct {
	// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
	AppConsistent pulumi.BoolInput `pulumi:"appConsistent"`
	// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRegionId pulumi.StringInput `pulumi:"destinationRegionId"`
	// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
	DestinationRetention pulumi.IntInput `pulumi:"destinationRetention"`
	// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
	DiskIdLists pulumi.StringArrayInput `pulumi:"diskIdLists"`
	// Whether replicate to another region. Valid values: `true`, `false`.
	DoCopy pulumi.BoolInput `pulumi:"doCopy"`
	// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
	EnableFsFreeze pulumi.BoolInput `pulumi:"enableFsFreeze"`
	// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PostScriptPath pulumi.StringInput `pulumi:"postScriptPath"`
	// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
	PreScriptPath pulumi.StringInput `pulumi:"preScriptPath"`
	// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
	SnapshotGroup pulumi.BoolInput `pulumi:"snapshotGroup"`
	// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
	TimeoutInSeconds pulumi.IntInput `pulumi:"timeoutInSeconds"`
}

func (GetServerBackupPlansPlanDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansPlanDetail)(nil)).Elem()
}

func (i GetServerBackupPlansPlanDetailArgs) ToGetServerBackupPlansPlanDetailOutput() GetServerBackupPlansPlanDetailOutput {
	return i.ToGetServerBackupPlansPlanDetailOutputWithContext(context.Background())
}

func (i GetServerBackupPlansPlanDetailArgs) ToGetServerBackupPlansPlanDetailOutputWithContext(ctx context.Context) GetServerBackupPlansPlanDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansPlanDetailOutput)
}

// GetServerBackupPlansPlanDetailArrayInput is an input type that accepts GetServerBackupPlansPlanDetailArray and GetServerBackupPlansPlanDetailArrayOutput values.
// You can construct a concrete instance of `GetServerBackupPlansPlanDetailArrayInput` via:
//
//	GetServerBackupPlansPlanDetailArray{ GetServerBackupPlansPlanDetailArgs{...} }
type GetServerBackupPlansPlanDetailArrayInput interface {
	pulumi.Input

	ToGetServerBackupPlansPlanDetailArrayOutput() GetServerBackupPlansPlanDetailArrayOutput
	ToGetServerBackupPlansPlanDetailArrayOutputWithContext(context.Context) GetServerBackupPlansPlanDetailArrayOutput
}

type GetServerBackupPlansPlanDetailArray []GetServerBackupPlansPlanDetailInput

func (GetServerBackupPlansPlanDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansPlanDetail)(nil)).Elem()
}

func (i GetServerBackupPlansPlanDetailArray) ToGetServerBackupPlansPlanDetailArrayOutput() GetServerBackupPlansPlanDetailArrayOutput {
	return i.ToGetServerBackupPlansPlanDetailArrayOutputWithContext(context.Background())
}

func (i GetServerBackupPlansPlanDetailArray) ToGetServerBackupPlansPlanDetailArrayOutputWithContext(ctx context.Context) GetServerBackupPlansPlanDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupPlansPlanDetailArrayOutput)
}

type GetServerBackupPlansPlanDetailOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansPlanDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupPlansPlanDetail)(nil)).Elem()
}

func (o GetServerBackupPlansPlanDetailOutput) ToGetServerBackupPlansPlanDetailOutput() GetServerBackupPlansPlanDetailOutput {
	return o
}

func (o GetServerBackupPlansPlanDetailOutput) ToGetServerBackupPlansPlanDetailOutputWithContext(ctx context.Context) GetServerBackupPlansPlanDetailOutput {
	return o
}

// Whether to turn on application consistency. The application consistency snapshot backs up memory data and ongoing database transactions at the time of snapshot creation to ensure the consistency of application system data and database transactions. By applying consistent snapshots, there is no data damage or loss, so as to avoid log rollback during database startup and ensure that the application is in a consistent startup state. Valid values: `true`, `false`.
func (o GetServerBackupPlansPlanDetailOutput) AppConsistent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) bool { return v.AppConsistent }).(pulumi.BoolOutput)
}

// Only vaild when DoCopy is true. The destination region ID when replicating to another region. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
func (o GetServerBackupPlansPlanDetailOutput) DestinationRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) string { return v.DestinationRegionId }).(pulumi.StringOutput)
}

// Only vaild when DoCopy is true. The retention days of the destination backup. When not specified, the destination backup will be saved permanently. **Note:** Once you set a value of this property, you cannot set it to an empty string anymore.
func (o GetServerBackupPlansPlanDetailOutput) DestinationRetention() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) int { return v.DestinationRetention }).(pulumi.IntOutput)
}

// The list of cloud disks to be backed up in the ECS instance. When not specified, a snapshot is executed for all the disks on the ECS instance.
func (o GetServerBackupPlansPlanDetailOutput) DiskIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) []string { return v.DiskIdLists }).(pulumi.StringArrayOutput)
}

// Whether replicate to another region. Valid values: `true`, `false`.
func (o GetServerBackupPlansPlanDetailOutput) DoCopy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) bool { return v.DoCopy }).(pulumi.BoolOutput)
}

// Only the Linux system is valid. Whether to use the Linux FsFreeze mechanism to ensure that the file system is read-only consistent before creating a storage snapshot. The default is True. Valid values: `true`, `false`.
func (o GetServerBackupPlansPlanDetailOutput) EnableFsFreeze() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) bool { return v.EnableFsFreeze }).(pulumi.BoolOutput)
}

// Only vaild for the linux system when AppConsistent is true. The application thaw script path (e.g. /tmp/postscript.sh). The postscript.sh script must meet the following conditions: in terms of permissions, only the root user as the owner has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
func (o GetServerBackupPlansPlanDetailOutput) PostScriptPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) string { return v.PostScriptPath }).(pulumi.StringOutput)
}

// Only vaild for the linux system when AppConsistent is true. Apply the freeze script path (e.g. /tmp/prescript.sh). prescript.sh scripts must meet the following conditions: in terms of permissions, only root, as the owner, has read, write, and execute permissions, that is, 700 permissions. In terms of content, the script content needs to be customized according to the application itself. This indicates that this parameter must be set when creating an application consistency snapshot for a Linux instance. If the script is set incorrectly (for example, permissions, save path, or file name are set incorrectly), the resulting snapshot is a file system consistency snapshot.
func (o GetServerBackupPlansPlanDetailOutput) PreScriptPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) string { return v.PreScriptPath }).(pulumi.StringOutput)
}

// Whether to turn on file system consistency. If SnapshotGroup is true, when AppConsistent is true but the relevant conditions are not met or AppConsistent is false, the resulting snapshot will be a file system consistency snapshot. The file system consistency ensures that the file system memory and disk information are synchronized at the time of snapshot creation, and the file system write operation is frozen to make the file system in a consistent state. The file system consistency snapshot can prevent the operating system from performing disk inspection and repair operations such as CHKDSK or fsck after restart. Valid values: `true`, `false`.
func (o GetServerBackupPlansPlanDetailOutput) SnapshotGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) bool { return v.SnapshotGroup }).(pulumi.BoolOutput)
}

// Only the Linux system is valid, and the IO freeze timeout period. The default is 30 seconds.
func (o GetServerBackupPlansPlanDetailOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerBackupPlansPlanDetail) int { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

type GetServerBackupPlansPlanDetailArrayOutput struct{ *pulumi.OutputState }

func (GetServerBackupPlansPlanDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupPlansPlanDetail)(nil)).Elem()
}

func (o GetServerBackupPlansPlanDetailArrayOutput) ToGetServerBackupPlansPlanDetailArrayOutput() GetServerBackupPlansPlanDetailArrayOutput {
	return o
}

func (o GetServerBackupPlansPlanDetailArrayOutput) ToGetServerBackupPlansPlanDetailArrayOutputWithContext(ctx context.Context) GetServerBackupPlansPlanDetailArrayOutput {
	return o
}

func (o GetServerBackupPlansPlanDetailArrayOutput) Index(i pulumi.IntInput) GetServerBackupPlansPlanDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerBackupPlansPlanDetail {
		return vs[0].([]GetServerBackupPlansPlanDetail)[vs[1].(int)]
	}).(GetServerBackupPlansPlanDetailOutput)
}

type GetSnapshotsSnapshot struct {
	// The actual data volume of the snapshot. Unit byte.
	ActualBytes string `pulumi:"actualBytes"`
	// The actual number of items in the snapshot. (Currently only file backup is available).
	ActualItems string `pulumi:"actualItems"`
	// Backup type. Possible values: `COMPLETE` (full backup).
	BackupType string `pulumi:"backupType"`
	// The name of OSS bucket.
	Bucket string `pulumi:"bucket"`
	// The incremental amount of backup data. Unit byte.
	BytesDone string `pulumi:"bytesDone"`
	// The total amount of data sources. Unit byte.
	BytesTotal string `pulumi:"bytesTotal"`
	// The ID of ECS backup client.
	ClientId string `pulumi:"clientId"`
	// The time when the snapshot completed. UNIX time in seconds.
	CompleteTime string `pulumi:"completeTime"`
	// File System Creation Time of Nas. Unix Time Seconds.
	CreateTime string `pulumi:"createTime"`
	// Snapshot creation time. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	ErrorFile   string `pulumi:"errorFile"`
	// The ID of NAS File system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The ID of the Snapshot.
	Id string `pulumi:"id"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The number of backup items. (Currently only file backup is available).
	ItemsDone string `pulumi:"itemsDone"`
	// The total number of data source items. (Currently only file backup is available).
	ItemsTotal string `pulumi:"itemsTotal"`
	// The job ID of backup task.
	JobId string `pulumi:"jobId"`
	// The hashcode of parent backup snapshot.
	ParentSnapshotHash string `pulumi:"parentSnapshotHash"`
	// Backup Path.
	Path string `pulumi:"path"`
	// Backup file prefix.
	Prefix string `pulumi:"prefix"`
	// The number of days to keep.
	Retention string `pulumi:"retention"`
	// The hashcode of Snapshot.
	SnapshotHash string `pulumi:"snapshotHash"`
	// The ID of the Snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
	SourceType string `pulumi:"sourceType"`
	// The start time of the snapshot. UNIX time in seconds.
	StartTime string `pulumi:"startTime"`
	// The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
	Status string `pulumi:"status"`
	// The update time of snapshot. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
}

// GetSnapshotsSnapshotInput is an input type that accepts GetSnapshotsSnapshotArgs and GetSnapshotsSnapshotOutput values.
// You can construct a concrete instance of `GetSnapshotsSnapshotInput` via:
//
//	GetSnapshotsSnapshotArgs{...}
type GetSnapshotsSnapshotInput interface {
	pulumi.Input

	ToGetSnapshotsSnapshotOutput() GetSnapshotsSnapshotOutput
	ToGetSnapshotsSnapshotOutputWithContext(context.Context) GetSnapshotsSnapshotOutput
}

type GetSnapshotsSnapshotArgs struct {
	// The actual data volume of the snapshot. Unit byte.
	ActualBytes pulumi.StringInput `pulumi:"actualBytes"`
	// The actual number of items in the snapshot. (Currently only file backup is available).
	ActualItems pulumi.StringInput `pulumi:"actualItems"`
	// Backup type. Possible values: `COMPLETE` (full backup).
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The name of OSS bucket.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The incremental amount of backup data. Unit byte.
	BytesDone pulumi.StringInput `pulumi:"bytesDone"`
	// The total amount of data sources. Unit byte.
	BytesTotal pulumi.StringInput `pulumi:"bytesTotal"`
	// The ID of ECS backup client.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The time when the snapshot completed. UNIX time in seconds.
	CompleteTime pulumi.StringInput `pulumi:"completeTime"`
	// File System Creation Time of Nas. Unix Time Seconds.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Snapshot creation time. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	ErrorFile   pulumi.StringInput `pulumi:"errorFile"`
	// The ID of NAS File system.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The ID of the Snapshot.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The number of backup items. (Currently only file backup is available).
	ItemsDone pulumi.StringInput `pulumi:"itemsDone"`
	// The total number of data source items. (Currently only file backup is available).
	ItemsTotal pulumi.StringInput `pulumi:"itemsTotal"`
	// The job ID of backup task.
	JobId pulumi.StringInput `pulumi:"jobId"`
	// The hashcode of parent backup snapshot.
	ParentSnapshotHash pulumi.StringInput `pulumi:"parentSnapshotHash"`
	// Backup Path.
	Path pulumi.StringInput `pulumi:"path"`
	// Backup file prefix.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// The number of days to keep.
	Retention pulumi.StringInput `pulumi:"retention"`
	// The hashcode of Snapshot.
	SnapshotHash pulumi.StringInput `pulumi:"snapshotHash"`
	// The ID of the Snapshot.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// The start time of the snapshot. UNIX time in seconds.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of snapshot. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
}

func (GetSnapshotsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotsSnapshot)(nil)).Elem()
}

func (i GetSnapshotsSnapshotArgs) ToGetSnapshotsSnapshotOutput() GetSnapshotsSnapshotOutput {
	return i.ToGetSnapshotsSnapshotOutputWithContext(context.Background())
}

func (i GetSnapshotsSnapshotArgs) ToGetSnapshotsSnapshotOutputWithContext(ctx context.Context) GetSnapshotsSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotsSnapshotOutput)
}

// GetSnapshotsSnapshotArrayInput is an input type that accepts GetSnapshotsSnapshotArray and GetSnapshotsSnapshotArrayOutput values.
// You can construct a concrete instance of `GetSnapshotsSnapshotArrayInput` via:
//
//	GetSnapshotsSnapshotArray{ GetSnapshotsSnapshotArgs{...} }
type GetSnapshotsSnapshotArrayInput interface {
	pulumi.Input

	ToGetSnapshotsSnapshotArrayOutput() GetSnapshotsSnapshotArrayOutput
	ToGetSnapshotsSnapshotArrayOutputWithContext(context.Context) GetSnapshotsSnapshotArrayOutput
}

type GetSnapshotsSnapshotArray []GetSnapshotsSnapshotInput

func (GetSnapshotsSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotsSnapshot)(nil)).Elem()
}

func (i GetSnapshotsSnapshotArray) ToGetSnapshotsSnapshotArrayOutput() GetSnapshotsSnapshotArrayOutput {
	return i.ToGetSnapshotsSnapshotArrayOutputWithContext(context.Background())
}

func (i GetSnapshotsSnapshotArray) ToGetSnapshotsSnapshotArrayOutputWithContext(ctx context.Context) GetSnapshotsSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotsSnapshotArrayOutput)
}

type GetSnapshotsSnapshotOutput struct{ *pulumi.OutputState }

func (GetSnapshotsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotsSnapshot)(nil)).Elem()
}

func (o GetSnapshotsSnapshotOutput) ToGetSnapshotsSnapshotOutput() GetSnapshotsSnapshotOutput {
	return o
}

func (o GetSnapshotsSnapshotOutput) ToGetSnapshotsSnapshotOutputWithContext(ctx context.Context) GetSnapshotsSnapshotOutput {
	return o
}

// The actual data volume of the snapshot. Unit byte.
func (o GetSnapshotsSnapshotOutput) ActualBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ActualBytes }).(pulumi.StringOutput)
}

// The actual number of items in the snapshot. (Currently only file backup is available).
func (o GetSnapshotsSnapshotOutput) ActualItems() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ActualItems }).(pulumi.StringOutput)
}

// Backup type. Possible values: `COMPLETE` (full backup).
func (o GetSnapshotsSnapshotOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.BackupType }).(pulumi.StringOutput)
}

// The name of OSS bucket.
func (o GetSnapshotsSnapshotOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Bucket }).(pulumi.StringOutput)
}

// The incremental amount of backup data. Unit byte.
func (o GetSnapshotsSnapshotOutput) BytesDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.BytesDone }).(pulumi.StringOutput)
}

// The total amount of data sources. Unit byte.
func (o GetSnapshotsSnapshotOutput) BytesTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.BytesTotal }).(pulumi.StringOutput)
}

// The ID of ECS backup client.
func (o GetSnapshotsSnapshotOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ClientId }).(pulumi.StringOutput)
}

// The time when the snapshot completed. UNIX time in seconds.
func (o GetSnapshotsSnapshotOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.CompleteTime }).(pulumi.StringOutput)
}

// File System Creation Time of Nas. Unix Time Seconds.
func (o GetSnapshotsSnapshotOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Snapshot creation time. UNIX time in seconds.
func (o GetSnapshotsSnapshotOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o GetSnapshotsSnapshotOutput) ErrorFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ErrorFile }).(pulumi.StringOutput)
}

// The ID of NAS File system.
func (o GetSnapshotsSnapshotOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The ID of the Snapshot.
func (o GetSnapshotsSnapshotOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o GetSnapshotsSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The number of backup items. (Currently only file backup is available).
func (o GetSnapshotsSnapshotOutput) ItemsDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ItemsDone }).(pulumi.StringOutput)
}

// The total number of data source items. (Currently only file backup is available).
func (o GetSnapshotsSnapshotOutput) ItemsTotal() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ItemsTotal }).(pulumi.StringOutput)
}

// The job ID of backup task.
func (o GetSnapshotsSnapshotOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.JobId }).(pulumi.StringOutput)
}

// The hashcode of parent backup snapshot.
func (o GetSnapshotsSnapshotOutput) ParentSnapshotHash() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.ParentSnapshotHash }).(pulumi.StringOutput)
}

// Backup Path.
func (o GetSnapshotsSnapshotOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Path }).(pulumi.StringOutput)
}

// Backup file prefix.
func (o GetSnapshotsSnapshotOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Prefix }).(pulumi.StringOutput)
}

// The number of days to keep.
func (o GetSnapshotsSnapshotOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Retention }).(pulumi.StringOutput)
}

// The hashcode of Snapshot.
func (o GetSnapshotsSnapshotOutput) SnapshotHash() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.SnapshotHash }).(pulumi.StringOutput)
}

// The ID of the Snapshot.
func (o GetSnapshotsSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// Data source type, optional values: `ECS_FILE`, `OSS`, `NAS`.
func (o GetSnapshotsSnapshotOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.SourceType }).(pulumi.StringOutput)
}

// The start time of the snapshot. UNIX time in seconds.
func (o GetSnapshotsSnapshotOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.StartTime }).(pulumi.StringOutput)
}

// The status of snapshot execution. Possible values: `COMPLETE`, `PARTIAL_COMPLETE`, `FAILED`.
func (o GetSnapshotsSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of snapshot. UNIX time in seconds.
func (o GetSnapshotsSnapshotOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsSnapshot) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

type GetSnapshotsSnapshotArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotsSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotsSnapshot)(nil)).Elem()
}

func (o GetSnapshotsSnapshotArrayOutput) ToGetSnapshotsSnapshotArrayOutput() GetSnapshotsSnapshotArrayOutput {
	return o
}

func (o GetSnapshotsSnapshotArrayOutput) ToGetSnapshotsSnapshotArrayOutputWithContext(ctx context.Context) GetSnapshotsSnapshotArrayOutput {
	return o
}

func (o GetSnapshotsSnapshotArrayOutput) Index(i pulumi.IntInput) GetSnapshotsSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotsSnapshot {
		return vs[0].([]GetSnapshotsSnapshot)[vs[1].(int)]
	}).(GetSnapshotsSnapshotOutput)
}

type GetVaultsVault struct {
	// The name of the OSS bucket of the Vault.
	BucketName string `pulumi:"bucketName"`
	// The amount of backup data. The unit is Byte.
	BytesDone string `pulumi:"bytesDone"`
	// The creation time of the Vault. UNIX time in seconds.
	CreatedTime string `pulumi:"createdTime"`
	// Whether to enable the deduplication function for the database backup Vault.
	Dedup bool `pulumi:"dedup"`
	// The description of the vault.
	Description string `pulumi:"description"`
	// The ID of vault.
	Id string `pulumi:"id"`
	// Index available.
	IndexAvailable bool `pulumi:"indexAvailable"`
	// Index level.
	IndexLevel string `pulumi:"indexLevel"`
	// Index update time.
	IndexUpdateTime string `pulumi:"indexUpdateTime"`
	// The time of the last remote backup synchronization.
	LatestReplicationTime string `pulumi:"latestReplicationTime"`
	// Billing model, possible values:
	PaymentType string `pulumi:"paymentType"`
	// Whether it is a remote backup warehouse. It's a boolean value.
	Replication bool `pulumi:"replication"`
	// The region ID to which the remote backup Vault belongs.
	ReplicationSourceRegionId string `pulumi:"replicationSourceRegionId"`
	// The source vault ID of the remote backup Vault.
	ReplicationSourceVaultId string `pulumi:"replicationSourceVaultId"`
	// Warehouse-level data retention days, only valid for archive libraries.
	Retention string `pulumi:"retention"`
	// Whether to enable the backup search function.
	SearchEnabled bool     `pulumi:"searchEnabled"`
	SourceTypes   []string `pulumi:"sourceTypes"`
	// The status of Vault. Valid values: `CREATED`, `ERROR`, `UNKNOWN`.
	Status string `pulumi:"status"`
	// Backup vault storage usage. The unit is Byte.
	StorageSize string `pulumi:"storageSize"`
	// The update time of the Vault. UNIX time in seconds.
	UpdatedTime string `pulumi:"updatedTime"`
	// The ID of vault, same as `id`.
	VaultId string `pulumi:"vaultId"`
	// The name of vault.
	VaultName string `pulumi:"vaultName"`
	// Error status information of Vault. Only valid for remote backup warehouses. Only the remote backup warehouse is valid.
	VaultStatusMessage string `pulumi:"vaultStatusMessage"`
	// The storage class of vault. Valid values: `STANDARD`.
	VaultStorageClass string `pulumi:"vaultStorageClass"`
	// The type of Vault. Valid values: `STANDARD`,`OTS_BACKUP`.
	VaultType string `pulumi:"vaultType"`
}

// GetVaultsVaultInput is an input type that accepts GetVaultsVaultArgs and GetVaultsVaultOutput values.
// You can construct a concrete instance of `GetVaultsVaultInput` via:
//
//	GetVaultsVaultArgs{...}
type GetVaultsVaultInput interface {
	pulumi.Input

	ToGetVaultsVaultOutput() GetVaultsVaultOutput
	ToGetVaultsVaultOutputWithContext(context.Context) GetVaultsVaultOutput
}

type GetVaultsVaultArgs struct {
	// The name of the OSS bucket of the Vault.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The amount of backup data. The unit is Byte.
	BytesDone pulumi.StringInput `pulumi:"bytesDone"`
	// The creation time of the Vault. UNIX time in seconds.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Whether to enable the deduplication function for the database backup Vault.
	Dedup pulumi.BoolInput `pulumi:"dedup"`
	// The description of the vault.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of vault.
	Id pulumi.StringInput `pulumi:"id"`
	// Index available.
	IndexAvailable pulumi.BoolInput `pulumi:"indexAvailable"`
	// Index level.
	IndexLevel pulumi.StringInput `pulumi:"indexLevel"`
	// Index update time.
	IndexUpdateTime pulumi.StringInput `pulumi:"indexUpdateTime"`
	// The time of the last remote backup synchronization.
	LatestReplicationTime pulumi.StringInput `pulumi:"latestReplicationTime"`
	// Billing model, possible values:
	PaymentType pulumi.StringInput `pulumi:"paymentType"`
	// Whether it is a remote backup warehouse. It's a boolean value.
	Replication pulumi.BoolInput `pulumi:"replication"`
	// The region ID to which the remote backup Vault belongs.
	ReplicationSourceRegionId pulumi.StringInput `pulumi:"replicationSourceRegionId"`
	// The source vault ID of the remote backup Vault.
	ReplicationSourceVaultId pulumi.StringInput `pulumi:"replicationSourceVaultId"`
	// Warehouse-level data retention days, only valid for archive libraries.
	Retention pulumi.StringInput `pulumi:"retention"`
	// Whether to enable the backup search function.
	SearchEnabled pulumi.BoolInput        `pulumi:"searchEnabled"`
	SourceTypes   pulumi.StringArrayInput `pulumi:"sourceTypes"`
	// The status of Vault. Valid values: `CREATED`, `ERROR`, `UNKNOWN`.
	Status pulumi.StringInput `pulumi:"status"`
	// Backup vault storage usage. The unit is Byte.
	StorageSize pulumi.StringInput `pulumi:"storageSize"`
	// The update time of the Vault. UNIX time in seconds.
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// The ID of vault, same as `id`.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
	// The name of vault.
	VaultName pulumi.StringInput `pulumi:"vaultName"`
	// Error status information of Vault. Only valid for remote backup warehouses. Only the remote backup warehouse is valid.
	VaultStatusMessage pulumi.StringInput `pulumi:"vaultStatusMessage"`
	// The storage class of vault. Valid values: `STANDARD`.
	VaultStorageClass pulumi.StringInput `pulumi:"vaultStorageClass"`
	// The type of Vault. Valid values: `STANDARD`,`OTS_BACKUP`.
	VaultType pulumi.StringInput `pulumi:"vaultType"`
}

func (GetVaultsVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return i.ToGetVaultsVaultOutputWithContext(context.Background())
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultOutput)
}

// GetVaultsVaultArrayInput is an input type that accepts GetVaultsVaultArray and GetVaultsVaultArrayOutput values.
// You can construct a concrete instance of `GetVaultsVaultArrayInput` via:
//
//	GetVaultsVaultArray{ GetVaultsVaultArgs{...} }
type GetVaultsVaultArrayInput interface {
	pulumi.Input

	ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput
	ToGetVaultsVaultArrayOutputWithContext(context.Context) GetVaultsVaultArrayOutput
}

type GetVaultsVaultArray []GetVaultsVaultInput

func (GetVaultsVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return i.ToGetVaultsVaultArrayOutputWithContext(context.Background())
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultArrayOutput)
}

type GetVaultsVaultOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return o
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return o
}

// The name of the OSS bucket of the Vault.
func (o GetVaultsVaultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.BucketName }).(pulumi.StringOutput)
}

// The amount of backup data. The unit is Byte.
func (o GetVaultsVaultOutput) BytesDone() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.BytesDone }).(pulumi.StringOutput)
}

// The creation time of the Vault. UNIX time in seconds.
func (o GetVaultsVaultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Whether to enable the deduplication function for the database backup Vault.
func (o GetVaultsVaultOutput) Dedup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.Dedup }).(pulumi.BoolOutput)
}

// The description of the vault.
func (o GetVaultsVaultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of vault.
func (o GetVaultsVaultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Id }).(pulumi.StringOutput)
}

// Index available.
func (o GetVaultsVaultOutput) IndexAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.IndexAvailable }).(pulumi.BoolOutput)
}

// Index level.
func (o GetVaultsVaultOutput) IndexLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.IndexLevel }).(pulumi.StringOutput)
}

// Index update time.
func (o GetVaultsVaultOutput) IndexUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.IndexUpdateTime }).(pulumi.StringOutput)
}

// The time of the last remote backup synchronization.
func (o GetVaultsVaultOutput) LatestReplicationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.LatestReplicationTime }).(pulumi.StringOutput)
}

// Billing model, possible values:
func (o GetVaultsVaultOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.PaymentType }).(pulumi.StringOutput)
}

// Whether it is a remote backup warehouse. It's a boolean value.
func (o GetVaultsVaultOutput) Replication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.Replication }).(pulumi.BoolOutput)
}

// The region ID to which the remote backup Vault belongs.
func (o GetVaultsVaultOutput) ReplicationSourceRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ReplicationSourceRegionId }).(pulumi.StringOutput)
}

// The source vault ID of the remote backup Vault.
func (o GetVaultsVaultOutput) ReplicationSourceVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ReplicationSourceVaultId }).(pulumi.StringOutput)
}

// Warehouse-level data retention days, only valid for archive libraries.
func (o GetVaultsVaultOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Retention }).(pulumi.StringOutput)
}

// Whether to enable the backup search function.
func (o GetVaultsVaultOutput) SearchEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.SearchEnabled }).(pulumi.BoolOutput)
}

func (o GetVaultsVaultOutput) SourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVaultsVault) []string { return v.SourceTypes }).(pulumi.StringArrayOutput)
}

// The status of Vault. Valid values: `CREATED`, `ERROR`, `UNKNOWN`.
func (o GetVaultsVaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Status }).(pulumi.StringOutput)
}

// Backup vault storage usage. The unit is Byte.
func (o GetVaultsVaultOutput) StorageSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.StorageSize }).(pulumi.StringOutput)
}

// The update time of the Vault. UNIX time in seconds.
func (o GetVaultsVaultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The ID of vault, same as `id`.
func (o GetVaultsVaultOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultId }).(pulumi.StringOutput)
}

// The name of vault.
func (o GetVaultsVaultOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultName }).(pulumi.StringOutput)
}

// Error status information of Vault. Only valid for remote backup warehouses. Only the remote backup warehouse is valid.
func (o GetVaultsVaultOutput) VaultStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultStatusMessage }).(pulumi.StringOutput)
}

// The storage class of vault. Valid values: `STANDARD`.
func (o GetVaultsVaultOutput) VaultStorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultStorageClass }).(pulumi.StringOutput)
}

// The type of Vault. Valid values: `STANDARD`,`OTS_BACKUP`.
func (o GetVaultsVaultOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.VaultType }).(pulumi.StringOutput)
}

type GetVaultsVaultArrayOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) Index(i pulumi.IntInput) GetVaultsVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVaultsVault {
		return vs[0].([]GetVaultsVault)[vs[1].(int)]
	}).(GetVaultsVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OtsBackupPlanOtsDetailInput)(nil)).Elem(), OtsBackupPlanOtsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtsBackupPlanOtsDetailArrayInput)(nil)).Elem(), OtsBackupPlanOtsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtsBackupPlanRuleInput)(nil)).Elem(), OtsBackupPlanRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtsBackupPlanRuleArrayInput)(nil)).Elem(), OtsBackupPlanRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreJobOtsDetailInput)(nil)).Elem(), RestoreJobOtsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreJobOtsDetailPtrInput)(nil)).Elem(), RestoreJobOtsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBackupPlanDetailInput)(nil)).Elem(), ServerBackupPlanDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBackupPlanDetailArrayInput)(nil)).Elem(), ServerBackupPlanDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsFilterInput)(nil)).Elem(), GetBackupJobsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsFilterArrayInput)(nil)).Elem(), GetBackupJobsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsJobInput)(nil)).Elem(), GetBackupJobsJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsJobArrayInput)(nil)).Elem(), GetBackupJobsJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsJobOtsDetailInput)(nil)).Elem(), GetBackupJobsJobOtsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsJobOtsDetailArrayInput)(nil)).Elem(), GetBackupJobsJobOtsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEcsBackupClientsClientInput)(nil)).Elem(), GetEcsBackupClientsClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEcsBackupClientsClientArrayInput)(nil)).Elem(), GetEcsBackupClientsClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEcsBackupPlansPlanInput)(nil)).Elem(), GetEcsBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEcsBackupPlansPlanArrayInput)(nil)).Elem(), GetEcsBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaBackupClientsHanaBackupClientInput)(nil)).Elem(), GetHanaBackupClientsHanaBackupClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaBackupClientsHanaBackupClientArrayInput)(nil)).Elem(), GetHanaBackupClientsHanaBackupClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaBackupPlansPlanInput)(nil)).Elem(), GetHanaBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaBackupPlansPlanArrayInput)(nil)).Elem(), GetHanaBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaInstancesInstanceInput)(nil)).Elem(), GetHanaInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHanaInstancesInstanceArrayInput)(nil)).Elem(), GetHanaInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNasBackupPlansPlanInput)(nil)).Elem(), GetNasBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNasBackupPlansPlanArrayInput)(nil)).Elem(), GetNasBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOssBackupPlansPlanInput)(nil)).Elem(), GetOssBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOssBackupPlansPlanArrayInput)(nil)).Elem(), GetOssBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsBackupPlansPlanInput)(nil)).Elem(), GetOtsBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsBackupPlansPlanArrayInput)(nil)).Elem(), GetOtsBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsBackupPlansPlanOtsDetailInput)(nil)).Elem(), GetOtsBackupPlansPlanOtsDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsBackupPlansPlanOtsDetailArrayInput)(nil)).Elem(), GetOtsBackupPlansPlanOtsDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsSnapshotsSnapshotInput)(nil)).Elem(), GetOtsSnapshotsSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOtsSnapshotsSnapshotArrayInput)(nil)).Elem(), GetOtsSnapshotsSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReplicationVaultRegionsRegionInput)(nil)).Elem(), GetReplicationVaultRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReplicationVaultRegionsRegionArrayInput)(nil)).Elem(), GetReplicationVaultRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRestoreJobsJobInput)(nil)).Elem(), GetRestoreJobsJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRestoreJobsJobArrayInput)(nil)).Elem(), GetRestoreJobsJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansFilterInput)(nil)).Elem(), GetServerBackupPlansFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansFilterArrayInput)(nil)).Elem(), GetServerBackupPlansFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansPlanInput)(nil)).Elem(), GetServerBackupPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansPlanArrayInput)(nil)).Elem(), GetServerBackupPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansPlanDetailInput)(nil)).Elem(), GetServerBackupPlansPlanDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupPlansPlanDetailArrayInput)(nil)).Elem(), GetServerBackupPlansPlanDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotsSnapshotInput)(nil)).Elem(), GetSnapshotsSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotsSnapshotArrayInput)(nil)).Elem(), GetSnapshotsSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultInput)(nil)).Elem(), GetVaultsVaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultArrayInput)(nil)).Elem(), GetVaultsVaultArray{})
	pulumi.RegisterOutputType(OtsBackupPlanOtsDetailOutput{})
	pulumi.RegisterOutputType(OtsBackupPlanOtsDetailArrayOutput{})
	pulumi.RegisterOutputType(OtsBackupPlanRuleOutput{})
	pulumi.RegisterOutputType(OtsBackupPlanRuleArrayOutput{})
	pulumi.RegisterOutputType(RestoreJobOtsDetailOutput{})
	pulumi.RegisterOutputType(RestoreJobOtsDetailPtrOutput{})
	pulumi.RegisterOutputType(ServerBackupPlanDetailOutput{})
	pulumi.RegisterOutputType(ServerBackupPlanDetailArrayOutput{})
	pulumi.RegisterOutputType(GetBackupJobsFilterOutput{})
	pulumi.RegisterOutputType(GetBackupJobsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetBackupJobsJobOutput{})
	pulumi.RegisterOutputType(GetBackupJobsJobArrayOutput{})
	pulumi.RegisterOutputType(GetBackupJobsJobOtsDetailOutput{})
	pulumi.RegisterOutputType(GetBackupJobsJobOtsDetailArrayOutput{})
	pulumi.RegisterOutputType(GetEcsBackupClientsClientOutput{})
	pulumi.RegisterOutputType(GetEcsBackupClientsClientArrayOutput{})
	pulumi.RegisterOutputType(GetEcsBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetEcsBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetHanaBackupClientsHanaBackupClientOutput{})
	pulumi.RegisterOutputType(GetHanaBackupClientsHanaBackupClientArrayOutput{})
	pulumi.RegisterOutputType(GetHanaBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetHanaBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetHanaInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetHanaInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetNasBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetNasBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetOssBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetOssBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetOtsBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetOtsBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetOtsBackupPlansPlanOtsDetailOutput{})
	pulumi.RegisterOutputType(GetOtsBackupPlansPlanOtsDetailArrayOutput{})
	pulumi.RegisterOutputType(GetOtsSnapshotsSnapshotOutput{})
	pulumi.RegisterOutputType(GetOtsSnapshotsSnapshotArrayOutput{})
	pulumi.RegisterOutputType(GetReplicationVaultRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetReplicationVaultRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetRestoreJobsJobOutput{})
	pulumi.RegisterOutputType(GetRestoreJobsJobArrayOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansFilterOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansFilterArrayOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansPlanOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansPlanDetailOutput{})
	pulumi.RegisterOutputType(GetServerBackupPlansPlanDetailArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotsSnapshotOutput{})
	pulumi.RegisterOutputType(GetSnapshotsSnapshotArrayOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultArrayOutput{})
}
