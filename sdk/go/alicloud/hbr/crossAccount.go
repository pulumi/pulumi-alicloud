// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hbr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Hybrid Backup Recovery (HBR) Cross Account resource.
//
// The cross account is used for the cross-account backup in the Cloud Backup. The management account can back up the resources under the cross account.
//
// For information about Hybrid Backup Recovery (HBR) Cross Account and how to use it, see [What is Cross Account](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.241.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/hbr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			_, err := hbr.NewCrossAccount(ctx, "default", &hbr.CrossAccountArgs{
//				CrossAccountUserId:   pulumi.Int(1),
//				CrossAccountRoleName: pulumi.String(name),
//				Alias:                pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hybrid Backup Recovery (HBR) Cross Account can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:hbr/crossAccount:CrossAccount example <cross_account_user_id>:<cross_account_role_name>
// ```
type CrossAccount struct {
	pulumi.CustomResourceState

	// Backup account alias
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// Timestamp of the creation time
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// The name of RAM role that the backup account authorizes the management account to manage its resources
	CrossAccountRoleName pulumi.StringOutput `pulumi:"crossAccountRoleName"`
	// The uid of the backup account.
	CrossAccountUserId pulumi.IntOutput `pulumi:"crossAccountUserId"`
}

// NewCrossAccount registers a new resource with the given unique name, arguments, and options.
func NewCrossAccount(ctx *pulumi.Context,
	name string, args *CrossAccountArgs, opts ...pulumi.ResourceOption) (*CrossAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrossAccountRoleName == nil {
		return nil, errors.New("invalid value for required argument 'CrossAccountRoleName'")
	}
	if args.CrossAccountUserId == nil {
		return nil, errors.New("invalid value for required argument 'CrossAccountUserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CrossAccount
	err := ctx.RegisterResource("alicloud:hbr/crossAccount:CrossAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrossAccount gets an existing CrossAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrossAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrossAccountState, opts ...pulumi.ResourceOption) (*CrossAccount, error) {
	var resource CrossAccount
	err := ctx.ReadResource("alicloud:hbr/crossAccount:CrossAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CrossAccount resources.
type crossAccountState struct {
	// Backup account alias
	Alias *string `pulumi:"alias"`
	// Timestamp of the creation time
	CreateTime *int `pulumi:"createTime"`
	// The name of RAM role that the backup account authorizes the management account to manage its resources
	CrossAccountRoleName *string `pulumi:"crossAccountRoleName"`
	// The uid of the backup account.
	CrossAccountUserId *int `pulumi:"crossAccountUserId"`
}

type CrossAccountState struct {
	// Backup account alias
	Alias pulumi.StringPtrInput
	// Timestamp of the creation time
	CreateTime pulumi.IntPtrInput
	// The name of RAM role that the backup account authorizes the management account to manage its resources
	CrossAccountRoleName pulumi.StringPtrInput
	// The uid of the backup account.
	CrossAccountUserId pulumi.IntPtrInput
}

func (CrossAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*crossAccountState)(nil)).Elem()
}

type crossAccountArgs struct {
	// Backup account alias
	Alias *string `pulumi:"alias"`
	// The name of RAM role that the backup account authorizes the management account to manage its resources
	CrossAccountRoleName string `pulumi:"crossAccountRoleName"`
	// The uid of the backup account.
	CrossAccountUserId int `pulumi:"crossAccountUserId"`
}

// The set of arguments for constructing a CrossAccount resource.
type CrossAccountArgs struct {
	// Backup account alias
	Alias pulumi.StringPtrInput
	// The name of RAM role that the backup account authorizes the management account to manage its resources
	CrossAccountRoleName pulumi.StringInput
	// The uid of the backup account.
	CrossAccountUserId pulumi.IntInput
}

func (CrossAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crossAccountArgs)(nil)).Elem()
}

type CrossAccountInput interface {
	pulumi.Input

	ToCrossAccountOutput() CrossAccountOutput
	ToCrossAccountOutputWithContext(ctx context.Context) CrossAccountOutput
}

func (*CrossAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossAccount)(nil)).Elem()
}

func (i *CrossAccount) ToCrossAccountOutput() CrossAccountOutput {
	return i.ToCrossAccountOutputWithContext(context.Background())
}

func (i *CrossAccount) ToCrossAccountOutputWithContext(ctx context.Context) CrossAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossAccountOutput)
}

// CrossAccountArrayInput is an input type that accepts CrossAccountArray and CrossAccountArrayOutput values.
// You can construct a concrete instance of `CrossAccountArrayInput` via:
//
//	CrossAccountArray{ CrossAccountArgs{...} }
type CrossAccountArrayInput interface {
	pulumi.Input

	ToCrossAccountArrayOutput() CrossAccountArrayOutput
	ToCrossAccountArrayOutputWithContext(context.Context) CrossAccountArrayOutput
}

type CrossAccountArray []CrossAccountInput

func (CrossAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossAccount)(nil)).Elem()
}

func (i CrossAccountArray) ToCrossAccountArrayOutput() CrossAccountArrayOutput {
	return i.ToCrossAccountArrayOutputWithContext(context.Background())
}

func (i CrossAccountArray) ToCrossAccountArrayOutputWithContext(ctx context.Context) CrossAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossAccountArrayOutput)
}

// CrossAccountMapInput is an input type that accepts CrossAccountMap and CrossAccountMapOutput values.
// You can construct a concrete instance of `CrossAccountMapInput` via:
//
//	CrossAccountMap{ "key": CrossAccountArgs{...} }
type CrossAccountMapInput interface {
	pulumi.Input

	ToCrossAccountMapOutput() CrossAccountMapOutput
	ToCrossAccountMapOutputWithContext(context.Context) CrossAccountMapOutput
}

type CrossAccountMap map[string]CrossAccountInput

func (CrossAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossAccount)(nil)).Elem()
}

func (i CrossAccountMap) ToCrossAccountMapOutput() CrossAccountMapOutput {
	return i.ToCrossAccountMapOutputWithContext(context.Background())
}

func (i CrossAccountMap) ToCrossAccountMapOutputWithContext(ctx context.Context) CrossAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossAccountMapOutput)
}

type CrossAccountOutput struct{ *pulumi.OutputState }

func (CrossAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossAccount)(nil)).Elem()
}

func (o CrossAccountOutput) ToCrossAccountOutput() CrossAccountOutput {
	return o
}

func (o CrossAccountOutput) ToCrossAccountOutputWithContext(ctx context.Context) CrossAccountOutput {
	return o
}

// Backup account alias
func (o CrossAccountOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossAccount) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// Timestamp of the creation time
func (o CrossAccountOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CrossAccount) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// The name of RAM role that the backup account authorizes the management account to manage its resources
func (o CrossAccountOutput) CrossAccountRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossAccount) pulumi.StringOutput { return v.CrossAccountRoleName }).(pulumi.StringOutput)
}

// The uid of the backup account.
func (o CrossAccountOutput) CrossAccountUserId() pulumi.IntOutput {
	return o.ApplyT(func(v *CrossAccount) pulumi.IntOutput { return v.CrossAccountUserId }).(pulumi.IntOutput)
}

type CrossAccountArrayOutput struct{ *pulumi.OutputState }

func (CrossAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossAccount)(nil)).Elem()
}

func (o CrossAccountArrayOutput) ToCrossAccountArrayOutput() CrossAccountArrayOutput {
	return o
}

func (o CrossAccountArrayOutput) ToCrossAccountArrayOutputWithContext(ctx context.Context) CrossAccountArrayOutput {
	return o
}

func (o CrossAccountArrayOutput) Index(i pulumi.IntInput) CrossAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CrossAccount {
		return vs[0].([]*CrossAccount)[vs[1].(int)]
	}).(CrossAccountOutput)
}

type CrossAccountMapOutput struct{ *pulumi.OutputState }

func (CrossAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossAccount)(nil)).Elem()
}

func (o CrossAccountMapOutput) ToCrossAccountMapOutput() CrossAccountMapOutput {
	return o
}

func (o CrossAccountMapOutput) ToCrossAccountMapOutputWithContext(ctx context.Context) CrossAccountMapOutput {
	return o
}

func (o CrossAccountMapOutput) MapIndex(k pulumi.StringInput) CrossAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CrossAccount {
		return vs[0].(map[string]*CrossAccount)[vs[1].(string)]
	}).(CrossAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrossAccountInput)(nil)).Elem(), &CrossAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossAccountArrayInput)(nil)).Elem(), CrossAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossAccountMapInput)(nil)).Elem(), CrossAccountMap{})
	pulumi.RegisterOutputType(CrossAccountOutput{})
	pulumi.RegisterOutputType(CrossAccountArrayOutput{})
	pulumi.RegisterOutputType(CrossAccountMapOutput{})
}
