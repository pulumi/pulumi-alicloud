// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wafv3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DomainListen struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId *string `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **1**: indicates that all encryption suites are added.
	// - **2**: indicates that a strong encryption package is added. You can select this value only if the value of **tls_version** is `tlsv1.2`.
	// - **99**: indicates that a custom encryption suite is added.
	CipherSuite *int `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers []string `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that TSL1.3 is supported.
	// - **false**: indicates that TSL1.3 is not supported.
	EnableTlsv3 *bool `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used). Value:
	// - **true**: indicates that the exclusive IP address is enabled.
	// - **false** (default): indicates that exclusive IP address is not enabled.
	ExclusiveIp *bool `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol). Value:
	// - **true**: indicates that HTTPS forced redirection is enabled.
	// - **false**: indicates that HTTPS forced redirection is not enabled.
	FocusHttps *bool `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true:** indicates that HTTP2 is enabled.
	// - **false** (default): indicates that HTTP2 is not enabled.
	Http2Enabled *bool `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts []int `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts []int `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on. Value:
	// - **true**: indicates that IPv6 is enabled.
	// - **false** (default): indicates that IPv6 is not enabled.
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// The type of protection resource to use. Value:
	// - **share** (default): indicates that a shared cluster is used.
	// - **gslb**: indicates that the shared cluster intelligent load balancing is used.
	ProtectionResource *string `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value: **tlsv1**, **tlsv1.1**, **tlsv1.2**.
	TlsVersion *string `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client. Value:
	// - **0** (default): indicates that the client has not forwarded the traffic to WAF through other layer -7 agents.
	// - **1**: indicates that the first value of the X-Forwarded-For(XFF) field in the WAF read request header is used as the client IP address.
	// - **2**: indicates that the custom field value set by you in the WAF read request header is used as the client IP address.
	XffHeaderMode *int `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders []string `pulumi:"xffHeaders"`
}

// DomainListenInput is an input type that accepts DomainListenArgs and DomainListenOutput values.
// You can construct a concrete instance of `DomainListenInput` via:
//
//	DomainListenArgs{...}
type DomainListenInput interface {
	pulumi.Input

	ToDomainListenOutput() DomainListenOutput
	ToDomainListenOutputWithContext(context.Context) DomainListenOutput
}

type DomainListenArgs struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId pulumi.StringPtrInput `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **1**: indicates that all encryption suites are added.
	// - **2**: indicates that a strong encryption package is added. You can select this value only if the value of **tls_version** is `tlsv1.2`.
	// - **99**: indicates that a custom encryption suite is added.
	CipherSuite pulumi.IntPtrInput `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers pulumi.StringArrayInput `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that TSL1.3 is supported.
	// - **false**: indicates that TSL1.3 is not supported.
	EnableTlsv3 pulumi.BoolPtrInput `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used). Value:
	// - **true**: indicates that the exclusive IP address is enabled.
	// - **false** (default): indicates that exclusive IP address is not enabled.
	ExclusiveIp pulumi.BoolPtrInput `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol). Value:
	// - **true**: indicates that HTTPS forced redirection is enabled.
	// - **false**: indicates that HTTPS forced redirection is not enabled.
	FocusHttps pulumi.BoolPtrInput `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true:** indicates that HTTP2 is enabled.
	// - **false** (default): indicates that HTTP2 is not enabled.
	Http2Enabled pulumi.BoolPtrInput `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts pulumi.IntArrayInput `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts pulumi.IntArrayInput `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on. Value:
	// - **true**: indicates that IPv6 is enabled.
	// - **false** (default): indicates that IPv6 is not enabled.
	Ipv6Enabled pulumi.BoolPtrInput `pulumi:"ipv6Enabled"`
	// The type of protection resource to use. Value:
	// - **share** (default): indicates that a shared cluster is used.
	// - **gslb**: indicates that the shared cluster intelligent load balancing is used.
	ProtectionResource pulumi.StringPtrInput `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value: **tlsv1**, **tlsv1.1**, **tlsv1.2**.
	TlsVersion pulumi.StringPtrInput `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client. Value:
	// - **0** (default): indicates that the client has not forwarded the traffic to WAF through other layer -7 agents.
	// - **1**: indicates that the first value of the X-Forwarded-For(XFF) field in the WAF read request header is used as the client IP address.
	// - **2**: indicates that the custom field value set by you in the WAF read request header is used as the client IP address.
	XffHeaderMode pulumi.IntPtrInput `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders pulumi.StringArrayInput `pulumi:"xffHeaders"`
}

func (DomainListenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainListen)(nil)).Elem()
}

func (i DomainListenArgs) ToDomainListenOutput() DomainListenOutput {
	return i.ToDomainListenOutputWithContext(context.Background())
}

func (i DomainListenArgs) ToDomainListenOutputWithContext(ctx context.Context) DomainListenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenOutput)
}

func (i DomainListenArgs) ToOutput(ctx context.Context) pulumix.Output[DomainListen] {
	return pulumix.Output[DomainListen]{
		OutputState: i.ToDomainListenOutputWithContext(ctx).OutputState,
	}
}

func (i DomainListenArgs) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return i.ToDomainListenPtrOutputWithContext(context.Background())
}

func (i DomainListenArgs) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenOutput).ToDomainListenPtrOutputWithContext(ctx)
}

// DomainListenPtrInput is an input type that accepts DomainListenArgs, DomainListenPtr and DomainListenPtrOutput values.
// You can construct a concrete instance of `DomainListenPtrInput` via:
//
//	        DomainListenArgs{...}
//
//	or:
//
//	        nil
type DomainListenPtrInput interface {
	pulumi.Input

	ToDomainListenPtrOutput() DomainListenPtrOutput
	ToDomainListenPtrOutputWithContext(context.Context) DomainListenPtrOutput
}

type domainListenPtrType DomainListenArgs

func DomainListenPtr(v *DomainListenArgs) DomainListenPtrInput {
	return (*domainListenPtrType)(v)
}

func (*domainListenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListen)(nil)).Elem()
}

func (i *domainListenPtrType) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return i.ToDomainListenPtrOutputWithContext(context.Background())
}

func (i *domainListenPtrType) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenPtrOutput)
}

func (i *domainListenPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainListen] {
	return pulumix.Output[*DomainListen]{
		OutputState: i.ToDomainListenPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainListenOutput struct{ *pulumi.OutputState }

func (DomainListenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainListen)(nil)).Elem()
}

func (o DomainListenOutput) ToDomainListenOutput() DomainListenOutput {
	return o
}

func (o DomainListenOutput) ToDomainListenOutputWithContext(ctx context.Context) DomainListenOutput {
	return o
}

func (o DomainListenOutput) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return o.ToDomainListenPtrOutputWithContext(context.Background())
}

func (o DomainListenOutput) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainListen) *DomainListen {
		return &v
	}).(DomainListenPtrOutput)
}

func (o DomainListenOutput) ToOutput(ctx context.Context) pulumix.Output[DomainListen] {
	return pulumix.Output[DomainListen]{
		OutputState: o.OutputState,
	}
}

// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o DomainListenOutput) CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.CertId }).(pulumi.StringPtrOutput)
}

// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **1**: indicates that all encryption suites are added.
// - **2**: indicates that a strong encryption package is added. You can select this value only if the value of **tls_version** is `tlsv1.2`.
// - **99**: indicates that a custom encryption suite is added.
func (o DomainListenOutput) CipherSuite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainListen) *int { return v.CipherSuite }).(pulumi.IntPtrOutput)
}

// The specific custom encryption suite to add.
func (o DomainListenOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainListen) []string { return v.CustomCiphers }).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that TSL1.3 is supported.
// - **false**: indicates that TSL1.3 is not supported.
func (o DomainListenOutput) EnableTlsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.EnableTlsv3 }).(pulumi.BoolPtrOutput)
}

// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used). Value:
// - **true**: indicates that the exclusive IP address is enabled.
// - **false** (default): indicates that exclusive IP address is not enabled.
func (o DomainListenOutput) ExclusiveIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.ExclusiveIp }).(pulumi.BoolPtrOutput)
}

// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol). Value:
// - **true**: indicates that HTTPS forced redirection is enabled.
// - **false**: indicates that HTTPS forced redirection is not enabled.
func (o DomainListenOutput) FocusHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.FocusHttps }).(pulumi.BoolPtrOutput)
}

// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true:** indicates that HTTP2 is enabled.
// - **false** (default): indicates that HTTP2 is not enabled.
func (o DomainListenOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Http2Enabled }).(pulumi.BoolPtrOutput)
}

// The listening port of the HTTP protocol.
func (o DomainListenOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DomainListen) []int { return v.HttpPorts }).(pulumi.IntArrayOutput)
}

// The listening port of the HTTPS protocol.
func (o DomainListenOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DomainListen) []int { return v.HttpsPorts }).(pulumi.IntArrayOutput)
}

// Whether IPv6 is turned on. Value:
// - **true**: indicates that IPv6 is enabled.
// - **false** (default): indicates that IPv6 is not enabled.
func (o DomainListenOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Ipv6Enabled }).(pulumi.BoolPtrOutput)
}

// The type of protection resource to use. Value:
// - **share** (default): indicates that a shared cluster is used.
// - **gslb**: indicates that the shared cluster intelligent load balancing is used.
func (o DomainListenOutput) ProtectionResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.ProtectionResource }).(pulumi.StringPtrOutput)
}

// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value: **tlsv1**, **tlsv1.1**, **tlsv1.2**.
func (o DomainListenOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.TlsVersion }).(pulumi.StringPtrOutput)
}

// WAF obtains the real IP address of the client. Value:
// - **0** (default): indicates that the client has not forwarded the traffic to WAF through other layer -7 agents.
// - **1**: indicates that the first value of the X-Forwarded-For(XFF) field in the WAF read request header is used as the client IP address.
// - **2**: indicates that the custom field value set by you in the WAF read request header is used as the client IP address.
func (o DomainListenOutput) XffHeaderMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainListen) *int { return v.XffHeaderMode }).(pulumi.IntPtrOutput)
}

// Set the list of custom fields used to obtain the client IP address.
func (o DomainListenOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainListen) []string { return v.XffHeaders }).(pulumi.StringArrayOutput)
}

type DomainListenPtrOutput struct{ *pulumi.OutputState }

func (DomainListenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListen)(nil)).Elem()
}

func (o DomainListenPtrOutput) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return o
}

func (o DomainListenPtrOutput) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return o
}

func (o DomainListenPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainListen] {
	return pulumix.Output[*DomainListen]{
		OutputState: o.OutputState,
	}
}

func (o DomainListenPtrOutput) Elem() DomainListenOutput {
	return o.ApplyT(func(v *DomainListen) DomainListen {
		if v != nil {
			return *v
		}
		var ret DomainListen
		return ret
	}).(DomainListenOutput)
}

// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o DomainListenPtrOutput) CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.CertId
	}).(pulumi.StringPtrOutput)
}

// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **1**: indicates that all encryption suites are added.
// - **2**: indicates that a strong encryption package is added. You can select this value only if the value of **tls_version** is `tlsv1.2`.
// - **99**: indicates that a custom encryption suite is added.
func (o DomainListenPtrOutput) CipherSuite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainListen) *int {
		if v == nil {
			return nil
		}
		return v.CipherSuite
	}).(pulumi.IntPtrOutput)
}

// The specific custom encryption suite to add.
func (o DomainListenPtrOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainListen) []string {
		if v == nil {
			return nil
		}
		return v.CustomCiphers
	}).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that TSL1.3 is supported.
// - **false**: indicates that TSL1.3 is not supported.
func (o DomainListenPtrOutput) EnableTlsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTlsv3
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used). Value:
// - **true**: indicates that the exclusive IP address is enabled.
// - **false** (default): indicates that exclusive IP address is not enabled.
func (o DomainListenPtrOutput) ExclusiveIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.ExclusiveIp
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol). Value:
// - **true**: indicates that HTTPS forced redirection is enabled.
// - **false**: indicates that HTTPS forced redirection is not enabled.
func (o DomainListenPtrOutput) FocusHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.FocusHttps
	}).(pulumi.BoolPtrOutput)
}

// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true:** indicates that HTTP2 is enabled.
// - **false** (default): indicates that HTTP2 is not enabled.
func (o DomainListenPtrOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Http2Enabled
	}).(pulumi.BoolPtrOutput)
}

// The listening port of the HTTP protocol.
func (o DomainListenPtrOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DomainListen) []int {
		if v == nil {
			return nil
		}
		return v.HttpPorts
	}).(pulumi.IntArrayOutput)
}

// The listening port of the HTTPS protocol.
func (o DomainListenPtrOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DomainListen) []int {
		if v == nil {
			return nil
		}
		return v.HttpsPorts
	}).(pulumi.IntArrayOutput)
}

// Whether IPv6 is turned on. Value:
// - **true**: indicates that IPv6 is enabled.
// - **false** (default): indicates that IPv6 is not enabled.
func (o DomainListenPtrOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv6Enabled
	}).(pulumi.BoolPtrOutput)
}

// The type of protection resource to use. Value:
// - **share** (default): indicates that a shared cluster is used.
// - **gslb**: indicates that the shared cluster intelligent load balancing is used.
func (o DomainListenPtrOutput) ProtectionResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionResource
	}).(pulumi.StringPtrOutput)
}

// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value: **tlsv1**, **tlsv1.1**, **tlsv1.2**.
func (o DomainListenPtrOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.TlsVersion
	}).(pulumi.StringPtrOutput)
}

// WAF obtains the real IP address of the client. Value:
// - **0** (default): indicates that the client has not forwarded the traffic to WAF through other layer -7 agents.
// - **1**: indicates that the first value of the X-Forwarded-For(XFF) field in the WAF read request header is used as the client IP address.
// - **2**: indicates that the custom field value set by you in the WAF read request header is used as the client IP address.
func (o DomainListenPtrOutput) XffHeaderMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainListen) *int {
		if v == nil {
			return nil
		}
		return v.XffHeaderMode
	}).(pulumi.IntPtrOutput)
}

// Set the list of custom fields used to obtain the client IP address.
func (o DomainListenPtrOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainListen) []string {
		if v == nil {
			return nil
		}
		return v.XffHeaders
	}).(pulumi.StringArrayOutput)
}

type DomainRedirect struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends []string `pulumi:"backends"`
	// Connection timeout. Unit: seconds, value range: 5~120.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that forced HTTP back-to-origin is enabled.
	// - **false**: indicates that forced HTTP back-to-origin is not enabled.
	FocusHttpBackend *bool `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive *bool `pulumi:"keepalive"`
	// Number of long connections,  default: `60`. range :60-1000.
	KeepaliveRequests *int `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout *int `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source. Value:
	// - **iphash**: indicates the IPHash algorithm.
	// - **roundRobin**: indicates the polling algorithm.
	// - **leastTime**: indicates the Least Time algorithm.
	// - This value can be selected only if the value of **protection_resource** is **gslb** (indicating that the protected resource type uses shared cluster intelligent load balancing).
	Loadbalance string `pulumi:"loadbalance"`
	// Read timeout duration. **Unit**: seconds, **Value range**: 5~1800.
	ReadTimeout *int `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name which used to mark the traffic processed by WAF.
	// It formats as `[{" k ":"_key_"," v ":"_value_"}]`. Where the `k` represents the specified custom request header field,
	// and the `v` represents the value set for this field. By specifying the custom request header field and the corresponding value,
	// when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value
	// to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the
	// custom header field already exists in the request, the system will overwrite the value of the custom field in the
	// request with the set traffic tag value. See `requestHeaders` below.
	RequestHeaders []DomainRedirectRequestHeader `pulumi:"requestHeaders"`
	// Back to Source Retry. default: true, retry 3 times by default.
	Retry *bool `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that the back-to-source SNI is enabled.
	// - **false** (default) indicates that the back-to-source SNI is not enabled.
	SniEnabled *bool `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost *string `pulumi:"sniHost"`
	// Write timeout duration> **Unit**: seconds, **Value range**: 5~1800.
	WriteTimeout *int `pulumi:"writeTimeout"`
}

// DomainRedirectInput is an input type that accepts DomainRedirectArgs and DomainRedirectOutput values.
// You can construct a concrete instance of `DomainRedirectInput` via:
//
//	DomainRedirectArgs{...}
type DomainRedirectInput interface {
	pulumi.Input

	ToDomainRedirectOutput() DomainRedirectOutput
	ToDomainRedirectOutputWithContext(context.Context) DomainRedirectOutput
}

type DomainRedirectArgs struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// Connection timeout. Unit: seconds, value range: 5~120.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that forced HTTP back-to-origin is enabled.
	// - **false**: indicates that forced HTTP back-to-origin is not enabled.
	FocusHttpBackend pulumi.BoolPtrInput `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive pulumi.BoolPtrInput `pulumi:"keepalive"`
	// Number of long connections,  default: `60`. range :60-1000.
	KeepaliveRequests pulumi.IntPtrInput `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout pulumi.IntPtrInput `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source. Value:
	// - **iphash**: indicates the IPHash algorithm.
	// - **roundRobin**: indicates the polling algorithm.
	// - **leastTime**: indicates the Least Time algorithm.
	// - This value can be selected only if the value of **protection_resource** is **gslb** (indicating that the protected resource type uses shared cluster intelligent load balancing).
	Loadbalance pulumi.StringInput `pulumi:"loadbalance"`
	// Read timeout duration. **Unit**: seconds, **Value range**: 5~1800.
	ReadTimeout pulumi.IntPtrInput `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name which used to mark the traffic processed by WAF.
	// It formats as `[{" k ":"_key_"," v ":"_value_"}]`. Where the `k` represents the specified custom request header field,
	// and the `v` represents the value set for this field. By specifying the custom request header field and the corresponding value,
	// when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value
	// to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the
	// custom header field already exists in the request, the system will overwrite the value of the custom field in the
	// request with the set traffic tag value. See `requestHeaders` below.
	RequestHeaders DomainRedirectRequestHeaderArrayInput `pulumi:"requestHeaders"`
	// Back to Source Retry. default: true, retry 3 times by default.
	Retry pulumi.BoolPtrInput `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	// - **true**: indicates that the back-to-source SNI is enabled.
	// - **false** (default) indicates that the back-to-source SNI is not enabled.
	SniEnabled pulumi.BoolPtrInput `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost pulumi.StringPtrInput `pulumi:"sniHost"`
	// Write timeout duration> **Unit**: seconds, **Value range**: 5~1800.
	WriteTimeout pulumi.IntPtrInput `pulumi:"writeTimeout"`
}

func (DomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (i DomainRedirectArgs) ToDomainRedirectOutput() DomainRedirectOutput {
	return i.ToDomainRedirectOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput)
}

func (i DomainRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRedirect] {
	return pulumix.Output[DomainRedirect]{
		OutputState: i.ToDomainRedirectOutputWithContext(ctx).OutputState,
	}
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput).ToDomainRedirectPtrOutputWithContext(ctx)
}

// DomainRedirectPtrInput is an input type that accepts DomainRedirectArgs, DomainRedirectPtr and DomainRedirectPtrOutput values.
// You can construct a concrete instance of `DomainRedirectPtrInput` via:
//
//	        DomainRedirectArgs{...}
//
//	or:
//
//	        nil
type DomainRedirectPtrInput interface {
	pulumi.Input

	ToDomainRedirectPtrOutput() DomainRedirectPtrOutput
	ToDomainRedirectPtrOutputWithContext(context.Context) DomainRedirectPtrOutput
}

type domainRedirectPtrType DomainRedirectArgs

func DomainRedirectPtr(v *DomainRedirectArgs) DomainRedirectPtrInput {
	return (*domainRedirectPtrType)(v)
}

func (*domainRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectPtrOutput)
}

func (i *domainRedirectPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainRedirect] {
	return pulumix.Output[*DomainRedirect]{
		OutputState: i.ToDomainRedirectPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainRedirectOutput struct{ *pulumi.OutputState }

func (DomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectOutput) ToDomainRedirectOutput() DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRedirect) *DomainRedirect {
		return &v
	}).(DomainRedirectPtrOutput)
}

func (o DomainRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRedirect] {
	return pulumix.Output[DomainRedirect]{
		OutputState: o.OutputState,
	}
}

// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
func (o DomainRedirectOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRedirect) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Connection timeout. Unit: seconds, value range: 5~120.
func (o DomainRedirectOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that forced HTTP back-to-origin is enabled.
// - **false**: indicates that forced HTTP back-to-origin is not enabled.
func (o DomainRedirectOutput) FocusHttpBackend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.FocusHttpBackend }).(pulumi.BoolPtrOutput)
}

// Open long connection, default true.
func (o DomainRedirectOutput) Keepalive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.Keepalive }).(pulumi.BoolPtrOutput)
}

// Number of long connections,  default: `60`. range :60-1000.
func (o DomainRedirectOutput) KeepaliveRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.KeepaliveRequests }).(pulumi.IntPtrOutput)
}

// Long connection over time, default: `15`. Range: 1-60.
func (o DomainRedirectOutput) KeepaliveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.KeepaliveTimeout }).(pulumi.IntPtrOutput)
}

// The load balancing algorithm used when returning to the source. Value:
// - **iphash**: indicates the IPHash algorithm.
// - **roundRobin**: indicates the polling algorithm.
// - **leastTime**: indicates the Least Time algorithm.
// - This value can be selected only if the value of **protection_resource** is **gslb** (indicating that the protected resource type uses shared cluster intelligent load balancing).
func (o DomainRedirectOutput) Loadbalance() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRedirect) string { return v.Loadbalance }).(pulumi.StringOutput)
}

// Read timeout duration. **Unit**: seconds, **Value range**: 5~1800.
func (o DomainRedirectOutput) ReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.ReadTimeout }).(pulumi.IntPtrOutput)
}

// The traffic tag field and value of the domain name which used to mark the traffic processed by WAF.
// It formats as `[{" k ":"_key_"," v ":"_value_"}]`. Where the `k` represents the specified custom request header field,
// and the `v` represents the value set for this field. By specifying the custom request header field and the corresponding value,
// when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value
// to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the
// custom header field already exists in the request, the system will overwrite the value of the custom field in the
// request with the set traffic tag value. See `requestHeaders` below.
func (o DomainRedirectOutput) RequestHeaders() DomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v DomainRedirect) []DomainRedirectRequestHeader { return v.RequestHeaders }).(DomainRedirectRequestHeaderArrayOutput)
}

// Back to Source Retry. default: true, retry 3 times by default.
func (o DomainRedirectOutput) Retry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.Retry }).(pulumi.BoolPtrOutput)
}

// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that the back-to-source SNI is enabled.
// - **false** (default) indicates that the back-to-source SNI is not enabled.
func (o DomainRedirectOutput) SniEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.SniEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
func (o DomainRedirectOutput) SniHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *string { return v.SniHost }).(pulumi.StringPtrOutput)
}

// Write timeout duration> **Unit**: seconds, **Value range**: 5~1800.
func (o DomainRedirectOutput) WriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.WriteTimeout }).(pulumi.IntPtrOutput)
}

type DomainRedirectPtrOutput struct{ *pulumi.OutputState }

func (DomainRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainRedirect] {
	return pulumix.Output[*DomainRedirect]{
		OutputState: o.OutputState,
	}
}

func (o DomainRedirectPtrOutput) Elem() DomainRedirectOutput {
	return o.ApplyT(func(v *DomainRedirect) DomainRedirect {
		if v != nil {
			return *v
		}
		var ret DomainRedirect
		return ret
	}).(DomainRedirectOutput)
}

// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
func (o DomainRedirectPtrOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainRedirect) []string {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(pulumi.StringArrayOutput)
}

// Connection timeout. Unit: seconds, value range: 5~120.
func (o DomainRedirectPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that forced HTTP back-to-origin is enabled.
// - **false**: indicates that forced HTTP back-to-origin is not enabled.
func (o DomainRedirectPtrOutput) FocusHttpBackend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.FocusHttpBackend
	}).(pulumi.BoolPtrOutput)
}

// Open long connection, default true.
func (o DomainRedirectPtrOutput) Keepalive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.Keepalive
	}).(pulumi.BoolPtrOutput)
}

// Number of long connections,  default: `60`. range :60-1000.
func (o DomainRedirectPtrOutput) KeepaliveRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.KeepaliveRequests
	}).(pulumi.IntPtrOutput)
}

// Long connection over time, default: `15`. Range: 1-60.
func (o DomainRedirectPtrOutput) KeepaliveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.KeepaliveTimeout
	}).(pulumi.IntPtrOutput)
}

// The load balancing algorithm used when returning to the source. Value:
// - **iphash**: indicates the IPHash algorithm.
// - **roundRobin**: indicates the polling algorithm.
// - **leastTime**: indicates the Least Time algorithm.
// - This value can be selected only if the value of **protection_resource** is **gslb** (indicating that the protected resource type uses shared cluster intelligent load balancing).
func (o DomainRedirectPtrOutput) Loadbalance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return &v.Loadbalance
	}).(pulumi.StringPtrOutput)
}

// Read timeout duration. **Unit**: seconds, **Value range**: 5~1800.
func (o DomainRedirectPtrOutput) ReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.ReadTimeout
	}).(pulumi.IntPtrOutput)
}

// The traffic tag field and value of the domain name which used to mark the traffic processed by WAF.
// It formats as `[{" k ":"_key_"," v ":"_value_"}]`. Where the `k` represents the specified custom request header field,
// and the `v` represents the value set for this field. By specifying the custom request header field and the corresponding value,
// when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value
// to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the
// custom header field already exists in the request, the system will overwrite the value of the custom field in the
// request with the set traffic tag value. See `requestHeaders` below.
func (o DomainRedirectPtrOutput) RequestHeaders() DomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v *DomainRedirect) []DomainRedirectRequestHeader {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(DomainRedirectRequestHeaderArrayOutput)
}

// Back to Source Retry. default: true, retry 3 times by default.
func (o DomainRedirectPtrOutput) Retry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol). Value:
// - **true**: indicates that the back-to-source SNI is enabled.
// - **false** (default) indicates that the back-to-source SNI is not enabled.
func (o DomainRedirectPtrOutput) SniEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.SniEnabled
	}).(pulumi.BoolPtrOutput)
}

// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
func (o DomainRedirectPtrOutput) SniHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return v.SniHost
	}).(pulumi.StringPtrOutput)
}

// Write timeout duration> **Unit**: seconds, **Value range**: 5~1800.
func (o DomainRedirectPtrOutput) WriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.WriteTimeout
	}).(pulumi.IntPtrOutput)
}

type DomainRedirectRequestHeader struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key *string `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value *string `pulumi:"value"`
}

// DomainRedirectRequestHeaderInput is an input type that accepts DomainRedirectRequestHeaderArgs and DomainRedirectRequestHeaderOutput values.
// You can construct a concrete instance of `DomainRedirectRequestHeaderInput` via:
//
//	DomainRedirectRequestHeaderArgs{...}
type DomainRedirectRequestHeaderInput interface {
	pulumi.Input

	ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput
	ToDomainRedirectRequestHeaderOutputWithContext(context.Context) DomainRedirectRequestHeaderOutput
}

type DomainRedirectRequestHeaderArgs struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainRedirectRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirectRequestHeader)(nil)).Elem()
}

func (i DomainRedirectRequestHeaderArgs) ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput {
	return i.ToDomainRedirectRequestHeaderOutputWithContext(context.Background())
}

func (i DomainRedirectRequestHeaderArgs) ToDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectRequestHeaderOutput)
}

func (i DomainRedirectRequestHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRedirectRequestHeader] {
	return pulumix.Output[DomainRedirectRequestHeader]{
		OutputState: i.ToDomainRedirectRequestHeaderOutputWithContext(ctx).OutputState,
	}
}

// DomainRedirectRequestHeaderArrayInput is an input type that accepts DomainRedirectRequestHeaderArray and DomainRedirectRequestHeaderArrayOutput values.
// You can construct a concrete instance of `DomainRedirectRequestHeaderArrayInput` via:
//
//	DomainRedirectRequestHeaderArray{ DomainRedirectRequestHeaderArgs{...} }
type DomainRedirectRequestHeaderArrayInput interface {
	pulumi.Input

	ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput
	ToDomainRedirectRequestHeaderArrayOutputWithContext(context.Context) DomainRedirectRequestHeaderArrayOutput
}

type DomainRedirectRequestHeaderArray []DomainRedirectRequestHeaderInput

func (DomainRedirectRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRedirectRequestHeader)(nil)).Elem()
}

func (i DomainRedirectRequestHeaderArray) ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput {
	return i.ToDomainRedirectRequestHeaderArrayOutputWithContext(context.Background())
}

func (i DomainRedirectRequestHeaderArray) ToDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectRequestHeaderArrayOutput)
}

func (i DomainRedirectRequestHeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainRedirectRequestHeader] {
	return pulumix.Output[[]DomainRedirectRequestHeader]{
		OutputState: i.ToDomainRedirectRequestHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainRedirectRequestHeaderOutput struct{ *pulumi.OutputState }

func (DomainRedirectRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirectRequestHeader)(nil)).Elem()
}

func (o DomainRedirectRequestHeaderOutput) ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput {
	return o
}

func (o DomainRedirectRequestHeaderOutput) ToDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderOutput {
	return o
}

func (o DomainRedirectRequestHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRedirectRequestHeader] {
	return pulumix.Output[DomainRedirectRequestHeader]{
		OutputState: o.OutputState,
	}
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o DomainRedirectRequestHeaderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirectRequestHeader) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o DomainRedirectRequestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirectRequestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainRedirectRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (DomainRedirectRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRedirectRequestHeader)(nil)).Elem()
}

func (o DomainRedirectRequestHeaderArrayOutput) ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o DomainRedirectRequestHeaderArrayOutput) ToDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o DomainRedirectRequestHeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainRedirectRequestHeader] {
	return pulumix.Output[[]DomainRedirectRequestHeader]{
		OutputState: o.OutputState,
	}
}

func (o DomainRedirectRequestHeaderArrayOutput) Index(i pulumi.IntInput) DomainRedirectRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainRedirectRequestHeader {
		return vs[0].([]DomainRedirectRequestHeader)[vs[1].(int)]
	}).(DomainRedirectRequestHeaderOutput)
}

type GetDomainsDomain struct {
	// The name of the domain name to query.
	Domain string `pulumi:"domain"`
	// The ID of the domain. It formats as `<instance_id>:<domain>`.
	Id string `pulumi:"id"`
	// Configure listening information
	Listens []GetDomainsDomainListen `pulumi:"listens"`
	// Configure forwarding information.
	Redirects []GetDomainsDomainRedirect `pulumi:"redirects"`
	// The ID of the resource group.
	ResourceManagerResourceGroupId string `pulumi:"resourceManagerResourceGroupId"`
	// The status of the domain.
	Status string `pulumi:"status"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//	GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The name of the domain name to query.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the domain. It formats as `<instance_id>:<domain>`.
	Id pulumi.StringInput `pulumi:"id"`
	// Configure listening information
	Listens GetDomainsDomainListenArrayInput `pulumi:"listens"`
	// Configure forwarding information.
	Redirects GetDomainsDomainRedirectArrayInput `pulumi:"redirects"`
	// The ID of the resource group.
	ResourceManagerResourceGroupId pulumi.StringInput `pulumi:"resourceManagerResourceGroupId"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

func (i GetDomainsDomainArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomain] {
	return pulumix.Output[GetDomainsDomain]{
		OutputState: i.ToGetDomainsDomainOutputWithContext(ctx).OutputState,
	}
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//	GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

func (i GetDomainsDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomain] {
	return pulumix.Output[[]GetDomainsDomain]{
		OutputState: i.ToGetDomainsDomainArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomain] {
	return pulumix.Output[GetDomainsDomain]{
		OutputState: o.OutputState,
	}
}

// The name of the domain name to query.
func (o GetDomainsDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the domain. It formats as `<instance_id>:<domain>`.
func (o GetDomainsDomainOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Id }).(pulumi.StringOutput)
}

// Configure listening information
func (o GetDomainsDomainOutput) Listens() GetDomainsDomainListenArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainListen { return v.Listens }).(GetDomainsDomainListenArrayOutput)
}

// Configure forwarding information.
func (o GetDomainsDomainOutput) Redirects() GetDomainsDomainRedirectArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainRedirect { return v.Redirects }).(GetDomainsDomainRedirectArrayOutput)
}

// The ID of the resource group.
func (o GetDomainsDomainOutput) ResourceManagerResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.ResourceManagerResourceGroupId }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetDomainsDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Status }).(pulumi.StringOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomain] {
	return pulumix.Output[[]GetDomainsDomain]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetDomainsDomainListen struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId string `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CipherSuite int `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers []string `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	EnableTlsv3 bool `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
	ExclusiveIp bool `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
	FocusHttps bool `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	Http2Enabled bool `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts []int `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts []int `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on.
	Ipv6Enabled bool `pulumi:"ipv6Enabled"`
	// The type of protection resource to use.
	ProtectionResource string `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	TlsVersion string `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client.
	XffHeaderMode int `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders []string `pulumi:"xffHeaders"`
}

// GetDomainsDomainListenInput is an input type that accepts GetDomainsDomainListenArgs and GetDomainsDomainListenOutput values.
// You can construct a concrete instance of `GetDomainsDomainListenInput` via:
//
//	GetDomainsDomainListenArgs{...}
type GetDomainsDomainListenInput interface {
	pulumi.Input

	ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput
	ToGetDomainsDomainListenOutputWithContext(context.Context) GetDomainsDomainListenOutput
}

type GetDomainsDomainListenArgs struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId pulumi.StringInput `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CipherSuite pulumi.IntInput `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers pulumi.StringArrayInput `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	EnableTlsv3 pulumi.BoolInput `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
	ExclusiveIp pulumi.BoolInput `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
	FocusHttps pulumi.BoolInput `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	Http2Enabled pulumi.BoolInput `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts pulumi.IntArrayInput `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts pulumi.IntArrayInput `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on.
	Ipv6Enabled pulumi.BoolInput `pulumi:"ipv6Enabled"`
	// The type of protection resource to use.
	ProtectionResource pulumi.StringInput `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	TlsVersion pulumi.StringInput `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client.
	XffHeaderMode pulumi.IntInput `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders pulumi.StringArrayInput `pulumi:"xffHeaders"`
}

func (GetDomainsDomainListenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainListen)(nil)).Elem()
}

func (i GetDomainsDomainListenArgs) ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput {
	return i.ToGetDomainsDomainListenOutputWithContext(context.Background())
}

func (i GetDomainsDomainListenArgs) ToGetDomainsDomainListenOutputWithContext(ctx context.Context) GetDomainsDomainListenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainListenOutput)
}

func (i GetDomainsDomainListenArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainListen] {
	return pulumix.Output[GetDomainsDomainListen]{
		OutputState: i.ToGetDomainsDomainListenOutputWithContext(ctx).OutputState,
	}
}

// GetDomainsDomainListenArrayInput is an input type that accepts GetDomainsDomainListenArray and GetDomainsDomainListenArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainListenArrayInput` via:
//
//	GetDomainsDomainListenArray{ GetDomainsDomainListenArgs{...} }
type GetDomainsDomainListenArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput
	ToGetDomainsDomainListenArrayOutputWithContext(context.Context) GetDomainsDomainListenArrayOutput
}

type GetDomainsDomainListenArray []GetDomainsDomainListenInput

func (GetDomainsDomainListenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainListen)(nil)).Elem()
}

func (i GetDomainsDomainListenArray) ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput {
	return i.ToGetDomainsDomainListenArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainListenArray) ToGetDomainsDomainListenArrayOutputWithContext(ctx context.Context) GetDomainsDomainListenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainListenArrayOutput)
}

func (i GetDomainsDomainListenArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainListen] {
	return pulumix.Output[[]GetDomainsDomainListen]{
		OutputState: i.ToGetDomainsDomainListenArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainsDomainListenOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainListenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainListen)(nil)).Elem()
}

func (o GetDomainsDomainListenOutput) ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput {
	return o
}

func (o GetDomainsDomainListenOutput) ToGetDomainsDomainListenOutputWithContext(ctx context.Context) GetDomainsDomainListenOutput {
	return o
}

func (o GetDomainsDomainListenOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainListen] {
	return pulumix.Output[GetDomainsDomainListen]{
		OutputState: o.OutputState,
	}
}

// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.CertId }).(pulumi.StringOutput)
}

// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) CipherSuite() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) int { return v.CipherSuite }).(pulumi.IntOutput)
}

// The specific custom encryption suite to add.
func (o GetDomainsDomainListenOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []string { return v.CustomCiphers }).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) EnableTlsv3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.EnableTlsv3 }).(pulumi.BoolOutput)
}

// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
func (o GetDomainsDomainListenOutput) ExclusiveIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.ExclusiveIp }).(pulumi.BoolOutput)
}

// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
func (o GetDomainsDomainListenOutput) FocusHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.FocusHttps }).(pulumi.BoolOutput)
}

// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) Http2Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.Http2Enabled }).(pulumi.BoolOutput)
}

// The listening port of the HTTP protocol.
func (o GetDomainsDomainListenOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []int { return v.HttpPorts }).(pulumi.IntArrayOutput)
}

// The listening port of the HTTPS protocol.
func (o GetDomainsDomainListenOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []int { return v.HttpsPorts }).(pulumi.IntArrayOutput)
}

// Whether IPv6 is turned on.
func (o GetDomainsDomainListenOutput) Ipv6Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.Ipv6Enabled }).(pulumi.BoolOutput)
}

// The type of protection resource to use.
func (o GetDomainsDomainListenOutput) ProtectionResource() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.ProtectionResource }).(pulumi.StringOutput)
}

// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) TlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.TlsVersion }).(pulumi.StringOutput)
}

// WAF obtains the real IP address of the client.
func (o GetDomainsDomainListenOutput) XffHeaderMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) int { return v.XffHeaderMode }).(pulumi.IntOutput)
}

// Set the list of custom fields used to obtain the client IP address.
func (o GetDomainsDomainListenOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []string { return v.XffHeaders }).(pulumi.StringArrayOutput)
}

type GetDomainsDomainListenArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainListenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainListen)(nil)).Elem()
}

func (o GetDomainsDomainListenArrayOutput) ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput {
	return o
}

func (o GetDomainsDomainListenArrayOutput) ToGetDomainsDomainListenArrayOutputWithContext(ctx context.Context) GetDomainsDomainListenArrayOutput {
	return o
}

func (o GetDomainsDomainListenArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainListen] {
	return pulumix.Output[[]GetDomainsDomainListen]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainListenArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainListenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainListen {
		return vs[0].([]GetDomainsDomainListen)[vs[1].(int)]
	}).(GetDomainsDomainListenOutput)
}

type GetDomainsDomainRedirect struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends []string `pulumi:"backends"`
	// Connection timeout, Unit: seconds, value range: 5~120.
	ConnectTimeout int `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	FocusHttpBackend bool `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive bool `pulumi:"keepalive"`
	// Number of long connections, default: `60`. range :60-1000.
	KeepaliveRequests int `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout int `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source.
	Loadbalance string `pulumi:"loadbalance"`
	// Read timeout duration. Unit: seconds, Value range: 5~1800.
	ReadTimeout int `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	RequestHeaders []GetDomainsDomainRedirectRequestHeader `pulumi:"requestHeaders"`
	// Back to Source Retry. default `true`, retry 3 times by default.
	Retry bool `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	SniEnabled bool `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost string `pulumi:"sniHost"`
	// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
	WriteTimeout int `pulumi:"writeTimeout"`
}

// GetDomainsDomainRedirectInput is an input type that accepts GetDomainsDomainRedirectArgs and GetDomainsDomainRedirectOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectInput` via:
//
//	GetDomainsDomainRedirectArgs{...}
type GetDomainsDomainRedirectInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput
	ToGetDomainsDomainRedirectOutputWithContext(context.Context) GetDomainsDomainRedirectOutput
}

type GetDomainsDomainRedirectArgs struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// Connection timeout, Unit: seconds, value range: 5~120.
	ConnectTimeout pulumi.IntInput `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	FocusHttpBackend pulumi.BoolInput `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive pulumi.BoolInput `pulumi:"keepalive"`
	// Number of long connections, default: `60`. range :60-1000.
	KeepaliveRequests pulumi.IntInput `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout pulumi.IntInput `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source.
	Loadbalance pulumi.StringInput `pulumi:"loadbalance"`
	// Read timeout duration. Unit: seconds, Value range: 5~1800.
	ReadTimeout pulumi.IntInput `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	RequestHeaders GetDomainsDomainRedirectRequestHeaderArrayInput `pulumi:"requestHeaders"`
	// Back to Source Retry. default `true`, retry 3 times by default.
	Retry pulumi.BoolInput `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	SniEnabled pulumi.BoolInput `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost pulumi.StringInput `pulumi:"sniHost"`
	// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
	WriteTimeout pulumi.IntInput `pulumi:"writeTimeout"`
}

func (GetDomainsDomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirect)(nil)).Elem()
}

func (i GetDomainsDomainRedirectArgs) ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput {
	return i.ToGetDomainsDomainRedirectOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectArgs) ToGetDomainsDomainRedirectOutputWithContext(ctx context.Context) GetDomainsDomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectOutput)
}

func (i GetDomainsDomainRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainRedirect] {
	return pulumix.Output[GetDomainsDomainRedirect]{
		OutputState: i.ToGetDomainsDomainRedirectOutputWithContext(ctx).OutputState,
	}
}

// GetDomainsDomainRedirectArrayInput is an input type that accepts GetDomainsDomainRedirectArray and GetDomainsDomainRedirectArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectArrayInput` via:
//
//	GetDomainsDomainRedirectArray{ GetDomainsDomainRedirectArgs{...} }
type GetDomainsDomainRedirectArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput
	ToGetDomainsDomainRedirectArrayOutputWithContext(context.Context) GetDomainsDomainRedirectArrayOutput
}

type GetDomainsDomainRedirectArray []GetDomainsDomainRedirectInput

func (GetDomainsDomainRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirect)(nil)).Elem()
}

func (i GetDomainsDomainRedirectArray) ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput {
	return i.ToGetDomainsDomainRedirectArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectArray) ToGetDomainsDomainRedirectArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectArrayOutput)
}

func (i GetDomainsDomainRedirectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainRedirect] {
	return pulumix.Output[[]GetDomainsDomainRedirect]{
		OutputState: i.ToGetDomainsDomainRedirectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainsDomainRedirectOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirect)(nil)).Elem()
}

func (o GetDomainsDomainRedirectOutput) ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput {
	return o
}

func (o GetDomainsDomainRedirectOutput) ToGetDomainsDomainRedirectOutputWithContext(ctx context.Context) GetDomainsDomainRedirectOutput {
	return o
}

func (o GetDomainsDomainRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainRedirect] {
	return pulumix.Output[GetDomainsDomainRedirect]{
		OutputState: o.OutputState,
	}
}

// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
func (o GetDomainsDomainRedirectOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Connection timeout, Unit: seconds, value range: 5~120.
func (o GetDomainsDomainRedirectOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainRedirectOutput) FocusHttpBackend() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.FocusHttpBackend }).(pulumi.BoolOutput)
}

// Open long connection, default true.
func (o GetDomainsDomainRedirectOutput) Keepalive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.Keepalive }).(pulumi.BoolOutput)
}

// Number of long connections, default: `60`. range :60-1000.
func (o GetDomainsDomainRedirectOutput) KeepaliveRequests() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.KeepaliveRequests }).(pulumi.IntOutput)
}

// Long connection over time, default: `15`. Range: 1-60.
func (o GetDomainsDomainRedirectOutput) KeepaliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.KeepaliveTimeout }).(pulumi.IntOutput)
}

// The load balancing algorithm used when returning to the source.
func (o GetDomainsDomainRedirectOutput) Loadbalance() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) string { return v.Loadbalance }).(pulumi.StringOutput)
}

// Read timeout duration. Unit: seconds, Value range: 5~1800.
func (o GetDomainsDomainRedirectOutput) ReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.ReadTimeout }).(pulumi.IntOutput)
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectOutput) RequestHeaders() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) []GetDomainsDomainRedirectRequestHeader { return v.RequestHeaders }).(GetDomainsDomainRedirectRequestHeaderArrayOutput)
}

// Back to Source Retry. default `true`, retry 3 times by default.
func (o GetDomainsDomainRedirectOutput) Retry() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.Retry }).(pulumi.BoolOutput)
}

// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainRedirectOutput) SniEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.SniEnabled }).(pulumi.BoolOutput)
}

// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
func (o GetDomainsDomainRedirectOutput) SniHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) string { return v.SniHost }).(pulumi.StringOutput)
}

// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
func (o GetDomainsDomainRedirectOutput) WriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.WriteTimeout }).(pulumi.IntOutput)
}

type GetDomainsDomainRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirect)(nil)).Elem()
}

func (o GetDomainsDomainRedirectArrayOutput) ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectArrayOutput) ToGetDomainsDomainRedirectArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainRedirect] {
	return pulumix.Output[[]GetDomainsDomainRedirect]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainRedirectArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainRedirect {
		return vs[0].([]GetDomainsDomainRedirect)[vs[1].(int)]
	}).(GetDomainsDomainRedirectOutput)
}

type GetDomainsDomainRedirectRequestHeader struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key string `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value string `pulumi:"value"`
}

// GetDomainsDomainRedirectRequestHeaderInput is an input type that accepts GetDomainsDomainRedirectRequestHeaderArgs and GetDomainsDomainRedirectRequestHeaderOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectRequestHeaderInput` via:
//
//	GetDomainsDomainRedirectRequestHeaderArgs{...}
type GetDomainsDomainRedirectRequestHeaderInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput
	ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(context.Context) GetDomainsDomainRedirectRequestHeaderOutput
}

type GetDomainsDomainRedirectRequestHeaderArgs struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key pulumi.StringInput `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainsDomainRedirectRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (i GetDomainsDomainRedirectRequestHeaderArgs) ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput {
	return i.ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectRequestHeaderArgs) ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectRequestHeaderOutput)
}

func (i GetDomainsDomainRedirectRequestHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainRedirectRequestHeader] {
	return pulumix.Output[GetDomainsDomainRedirectRequestHeader]{
		OutputState: i.ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(ctx).OutputState,
	}
}

// GetDomainsDomainRedirectRequestHeaderArrayInput is an input type that accepts GetDomainsDomainRedirectRequestHeaderArray and GetDomainsDomainRedirectRequestHeaderArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectRequestHeaderArrayInput` via:
//
//	GetDomainsDomainRedirectRequestHeaderArray{ GetDomainsDomainRedirectRequestHeaderArgs{...} }
type GetDomainsDomainRedirectRequestHeaderArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput
	ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput
}

type GetDomainsDomainRedirectRequestHeaderArray []GetDomainsDomainRedirectRequestHeaderInput

func (GetDomainsDomainRedirectRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (i GetDomainsDomainRedirectRequestHeaderArray) ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return i.ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectRequestHeaderArray) ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectRequestHeaderArrayOutput)
}

func (i GetDomainsDomainRedirectRequestHeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainRedirectRequestHeader] {
	return pulumix.Output[[]GetDomainsDomainRedirectRequestHeader]{
		OutputState: i.ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainsDomainRedirectRequestHeaderOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (o GetDomainsDomainRedirectRequestHeaderOutput) ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderOutput) ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainsDomainRedirectRequestHeader] {
	return pulumix.Output[GetDomainsDomainRedirectRequestHeader]{
		OutputState: o.OutputState,
	}
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectRequestHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirectRequestHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectRequestHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirectRequestHeader) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainsDomainRedirectRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainsDomainRedirectRequestHeader] {
	return pulumix.Output[[]GetDomainsDomainRedirectRequestHeader]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainRedirectRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainRedirectRequestHeader {
		return vs[0].([]GetDomainsDomainRedirectRequestHeader)[vs[1].(int)]
	}).(GetDomainsDomainRedirectRequestHeaderOutput)
}

type GetInstancesInstance struct {
	// The creation time of the resource.
	CreateTime string `pulumi:"createTime"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The first ID of the resource.
	InstanceId string `pulumi:"instanceId"`
	// The status of the resource.
	Status string `pulumi:"status"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The creation time of the resource.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The first ID of the resource.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

func (i GetInstancesInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstancesInstance] {
	return pulumix.Output[GetInstancesInstance]{
		OutputState: i.ToGetInstancesInstanceOutputWithContext(ctx).OutputState,
	}
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

func (i GetInstancesInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancesInstance] {
	return pulumix.Output[[]GetInstancesInstance]{
		OutputState: i.ToGetInstancesInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancesInstance] {
	return pulumix.Output[GetInstancesInstance]{
		OutputState: o.OutputState,
	}
}

// The creation time of the resource.
func (o GetInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetInstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancesInstance] {
	return pulumix.Output[[]GetInstancesInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListenInput)(nil)).Elem(), DomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListenPtrInput)(nil)).Elem(), DomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectPtrInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectRequestHeaderInput)(nil)).Elem(), DomainRedirectRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectRequestHeaderArrayInput)(nil)).Elem(), DomainRedirectRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainInput)(nil)).Elem(), GetDomainsDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainArrayInput)(nil)).Elem(), GetDomainsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainListenInput)(nil)).Elem(), GetDomainsDomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainListenArrayInput)(nil)).Elem(), GetDomainsDomainListenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectInput)(nil)).Elem(), GetDomainsDomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectArrayInput)(nil)).Elem(), GetDomainsDomainRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectRequestHeaderInput)(nil)).Elem(), GetDomainsDomainRedirectRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectRequestHeaderArrayInput)(nil)).Elem(), GetDomainsDomainRedirectRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterOutputType(DomainListenOutput{})
	pulumi.RegisterOutputType(DomainListenPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectOutput{})
	pulumi.RegisterOutputType(DomainRedirectPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectRequestHeaderOutput{})
	pulumi.RegisterOutputType(DomainRedirectRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainListenOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainListenArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectRequestHeaderOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
}
