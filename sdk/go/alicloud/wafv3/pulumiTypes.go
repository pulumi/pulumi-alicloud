// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wafv3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DefenseRuleConfig struct {
	// The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
	AbroadRegions *string `pulumi:"abroadRegions"`
	// The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
	AccountIdentifiers []DefenseRuleConfigAccountIdentifier `pulumi:"accountIdentifiers"`
	// The list of regular rule IDs that are not detected. The value is in the ["XX1", "XX2",...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
	BypassRegularRules []string `pulumi:"bypassRegularRules"`
	// The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
	// - sqli: Indicates SQL injection.
	// - xss: Indicates cross-site scripting (XSS).
	// - cmdi: Indicates OS command injection.
	// - expression_injection: Indicates expression injection.
	// - java_deserialization: indicates Java deserialization.
	// - dot_net_deserialization: Represents. net deserialization.
	// - php_deserialization: indicates PHP deserialization.
	// - code_exec: Indicates code execution.
	// - ssrf: indicates SSRF (server-side request forgery).
	// - path_traversal: indicates a Path Traversal.
	// - arbitrary_file_uploading: Indicates to upload any file.
	// - webshell: Represents a webshell.
	// - rfilei: Indicates the remote file contains (RFI).
	// - lfilei: Indicates that the local file contains (LFI).
	// - protocol_violation: indicates a protocol violation.
	// - scanner_behavior: Indicates scanner behavior.
	// - logic_flaw: Indicates a business logic defect.
	// - arbitrary_file_reading: Indicates arbitrary file reading.
	// - arbitrary_file_download: Indicates an arbitrary file download.
	// - xxe: Indicates external entity injection.
	// - csrf: indicates cross-site request forgery.
	// - crlf: indicates CRLF.
	// - other: indicates other.
	BypassRegularTypes []string `pulumi:"bypassRegularTypes"`
	// The modules to which the whitelist applies. The value is in the ["XX1", "XX2",...] format. Valid values:
	// - waf: indicates all modules.
	// - customrule: indicates custom rules.
	// - blacklist: indicates IP blacklist.
	// - antiscan: indicates scan protection.
	// - regular: indicates basic protection rules.
	// - regular_rule: indicates specific regular rules in basic protection.
	// - regular_type: indicates specific regular rule types in basic protection.
	// - major_protection: indicates major event support protection.
	// - cc: indicates CC protection.
	// - region_block: indicates Location Blacklist.
	// - antibot_scene: indicates BOT scenario protection.
	// - dlp: indicates information leakage prevention.
	// - tamperproof: indicates web tamper-proofing.
	// - spike_throttle: indicates peak traffic throttling.
	BypassTags []string `pulumi:"bypassTags"`
	// Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
	// - service: indicates that the effective object is a protected object.
	// - rule: indicates that the effective object is a single rule.
	CcEffect *string `pulumi:"ccEffect"`
	// Whether to open the speed limit. Value:
	// - 0: indicates that the speed limit is off.
	// - 1: Indicates that the speed limit is on.
	CcStatus *int `pulumi:"ccStatus"`
	// The regions in China from which you want to block requests. If you specify "CN", requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
	CnRegions *string `pulumi:"cnRegions"`
	// The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
	Conditions []DefenseRuleConfigCondition `pulumi:"conditions"`
	// The canary release configuration for the rule. The value is a JSON. This parameter is required only when you set `GrayStatus` to 1. See `grayConfig` below.
	GrayConfig *DefenseRuleConfigGrayConfig `pulumi:"grayConfig"`
	// Specifies whether to enable canary release for the rule. Valid values:
	// - 0 (default): disables canary release.
	// - 1: enables canary release.
	GrayStatus *int `pulumi:"grayStatus"`
	// The HTTP flood protection mode. Valid values:
	// - 0 (default): indicates normal protection.
	// - 1: indicates emergency protection.
	Mode *int `pulumi:"mode"`
	// The protocol type of the cached page address. Valid values: http, https.
	Protocol *string `pulumi:"protocol"`
	// The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
	RateLimit *DefenseRuleConfigRateLimit `pulumi:"rateLimit"`
	// The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the ["ip1","ip2",...] format.
	RemoteAddrs []string `pulumi:"remoteAddrs"`
	// Protection rule action. Value:
	// - block: Indicates an intercept.
	// - monitor: indicates observation.
	// - js: indicates JS validation.
	// - captcha: Indicates a slider.
	// - captcha_strict: indicates a strict slider.
	// - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
	//
	// > **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
	RuleAction *string `pulumi:"ruleAction"`
	// The throttling threshold. Valid values:
	// - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
	// - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
	ThrottleThrehold *int `pulumi:"throttleThrehold"`
	// The throttling method. Valid values:
	// - qps: indicates throttling based on queries per second (QPS).
	// - ratio (default): indicates throttling based on percentage.
	ThrottleType *string `pulumi:"throttleType"`
	// The scheduled rule configuration. The value is a JSON.  See `timeConfig` below.
	TimeConfig *DefenseRuleConfigTimeConfig `pulumi:"timeConfig"`
	// The User-Agent string that is allowed for access to the address.
	Ua *string `pulumi:"ua"`
	// The address of the cached page.
	Url *string `pulumi:"url"`
}

// DefenseRuleConfigInput is an input type that accepts DefenseRuleConfigArgs and DefenseRuleConfigOutput values.
// You can construct a concrete instance of `DefenseRuleConfigInput` via:
//
//	DefenseRuleConfigArgs{...}
type DefenseRuleConfigInput interface {
	pulumi.Input

	ToDefenseRuleConfigOutput() DefenseRuleConfigOutput
	ToDefenseRuleConfigOutputWithContext(context.Context) DefenseRuleConfigOutput
}

type DefenseRuleConfigArgs struct {
	// The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
	AbroadRegions pulumi.StringPtrInput `pulumi:"abroadRegions"`
	// The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
	AccountIdentifiers DefenseRuleConfigAccountIdentifierArrayInput `pulumi:"accountIdentifiers"`
	// The list of regular rule IDs that are not detected. The value is in the ["XX1", "XX2",...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
	BypassRegularRules pulumi.StringArrayInput `pulumi:"bypassRegularRules"`
	// The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
	// - sqli: Indicates SQL injection.
	// - xss: Indicates cross-site scripting (XSS).
	// - cmdi: Indicates OS command injection.
	// - expression_injection: Indicates expression injection.
	// - java_deserialization: indicates Java deserialization.
	// - dot_net_deserialization: Represents. net deserialization.
	// - php_deserialization: indicates PHP deserialization.
	// - code_exec: Indicates code execution.
	// - ssrf: indicates SSRF (server-side request forgery).
	// - path_traversal: indicates a Path Traversal.
	// - arbitrary_file_uploading: Indicates to upload any file.
	// - webshell: Represents a webshell.
	// - rfilei: Indicates the remote file contains (RFI).
	// - lfilei: Indicates that the local file contains (LFI).
	// - protocol_violation: indicates a protocol violation.
	// - scanner_behavior: Indicates scanner behavior.
	// - logic_flaw: Indicates a business logic defect.
	// - arbitrary_file_reading: Indicates arbitrary file reading.
	// - arbitrary_file_download: Indicates an arbitrary file download.
	// - xxe: Indicates external entity injection.
	// - csrf: indicates cross-site request forgery.
	// - crlf: indicates CRLF.
	// - other: indicates other.
	BypassRegularTypes pulumi.StringArrayInput `pulumi:"bypassRegularTypes"`
	// The modules to which the whitelist applies. The value is in the ["XX1", "XX2",...] format. Valid values:
	// - waf: indicates all modules.
	// - customrule: indicates custom rules.
	// - blacklist: indicates IP blacklist.
	// - antiscan: indicates scan protection.
	// - regular: indicates basic protection rules.
	// - regular_rule: indicates specific regular rules in basic protection.
	// - regular_type: indicates specific regular rule types in basic protection.
	// - major_protection: indicates major event support protection.
	// - cc: indicates CC protection.
	// - region_block: indicates Location Blacklist.
	// - antibot_scene: indicates BOT scenario protection.
	// - dlp: indicates information leakage prevention.
	// - tamperproof: indicates web tamper-proofing.
	// - spike_throttle: indicates peak traffic throttling.
	BypassTags pulumi.StringArrayInput `pulumi:"bypassTags"`
	// Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
	// - service: indicates that the effective object is a protected object.
	// - rule: indicates that the effective object is a single rule.
	CcEffect pulumi.StringPtrInput `pulumi:"ccEffect"`
	// Whether to open the speed limit. Value:
	// - 0: indicates that the speed limit is off.
	// - 1: Indicates that the speed limit is on.
	CcStatus pulumi.IntPtrInput `pulumi:"ccStatus"`
	// The regions in China from which you want to block requests. If you specify "CN", requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
	CnRegions pulumi.StringPtrInput `pulumi:"cnRegions"`
	// The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
	Conditions DefenseRuleConfigConditionArrayInput `pulumi:"conditions"`
	// The canary release configuration for the rule. The value is a JSON. This parameter is required only when you set `GrayStatus` to 1. See `grayConfig` below.
	GrayConfig DefenseRuleConfigGrayConfigPtrInput `pulumi:"grayConfig"`
	// Specifies whether to enable canary release for the rule. Valid values:
	// - 0 (default): disables canary release.
	// - 1: enables canary release.
	GrayStatus pulumi.IntPtrInput `pulumi:"grayStatus"`
	// The HTTP flood protection mode. Valid values:
	// - 0 (default): indicates normal protection.
	// - 1: indicates emergency protection.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The protocol type of the cached page address. Valid values: http, https.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
	RateLimit DefenseRuleConfigRateLimitPtrInput `pulumi:"rateLimit"`
	// The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the ["ip1","ip2",...] format.
	RemoteAddrs pulumi.StringArrayInput `pulumi:"remoteAddrs"`
	// Protection rule action. Value:
	// - block: Indicates an intercept.
	// - monitor: indicates observation.
	// - js: indicates JS validation.
	// - captcha: Indicates a slider.
	// - captcha_strict: indicates a strict slider.
	// - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
	//
	// > **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
	RuleAction pulumi.StringPtrInput `pulumi:"ruleAction"`
	// The throttling threshold. Valid values:
	// - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
	// - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
	ThrottleThrehold pulumi.IntPtrInput `pulumi:"throttleThrehold"`
	// The throttling method. Valid values:
	// - qps: indicates throttling based on queries per second (QPS).
	// - ratio (default): indicates throttling based on percentage.
	ThrottleType pulumi.StringPtrInput `pulumi:"throttleType"`
	// The scheduled rule configuration. The value is a JSON.  See `timeConfig` below.
	TimeConfig DefenseRuleConfigTimeConfigPtrInput `pulumi:"timeConfig"`
	// The User-Agent string that is allowed for access to the address.
	Ua pulumi.StringPtrInput `pulumi:"ua"`
	// The address of the cached page.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DefenseRuleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfig)(nil)).Elem()
}

func (i DefenseRuleConfigArgs) ToDefenseRuleConfigOutput() DefenseRuleConfigOutput {
	return i.ToDefenseRuleConfigOutputWithContext(context.Background())
}

func (i DefenseRuleConfigArgs) ToDefenseRuleConfigOutputWithContext(ctx context.Context) DefenseRuleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigOutput)
}

func (i DefenseRuleConfigArgs) ToDefenseRuleConfigPtrOutput() DefenseRuleConfigPtrOutput {
	return i.ToDefenseRuleConfigPtrOutputWithContext(context.Background())
}

func (i DefenseRuleConfigArgs) ToDefenseRuleConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigOutput).ToDefenseRuleConfigPtrOutputWithContext(ctx)
}

// DefenseRuleConfigPtrInput is an input type that accepts DefenseRuleConfigArgs, DefenseRuleConfigPtr and DefenseRuleConfigPtrOutput values.
// You can construct a concrete instance of `DefenseRuleConfigPtrInput` via:
//
//	        DefenseRuleConfigArgs{...}
//
//	or:
//
//	        nil
type DefenseRuleConfigPtrInput interface {
	pulumi.Input

	ToDefenseRuleConfigPtrOutput() DefenseRuleConfigPtrOutput
	ToDefenseRuleConfigPtrOutputWithContext(context.Context) DefenseRuleConfigPtrOutput
}

type defenseRuleConfigPtrType DefenseRuleConfigArgs

func DefenseRuleConfigPtr(v *DefenseRuleConfigArgs) DefenseRuleConfigPtrInput {
	return (*defenseRuleConfigPtrType)(v)
}

func (*defenseRuleConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfig)(nil)).Elem()
}

func (i *defenseRuleConfigPtrType) ToDefenseRuleConfigPtrOutput() DefenseRuleConfigPtrOutput {
	return i.ToDefenseRuleConfigPtrOutputWithContext(context.Background())
}

func (i *defenseRuleConfigPtrType) ToDefenseRuleConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigPtrOutput)
}

type DefenseRuleConfigOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfig)(nil)).Elem()
}

func (o DefenseRuleConfigOutput) ToDefenseRuleConfigOutput() DefenseRuleConfigOutput {
	return o
}

func (o DefenseRuleConfigOutput) ToDefenseRuleConfigOutputWithContext(ctx context.Context) DefenseRuleConfigOutput {
	return o
}

func (o DefenseRuleConfigOutput) ToDefenseRuleConfigPtrOutput() DefenseRuleConfigPtrOutput {
	return o.ToDefenseRuleConfigPtrOutputWithContext(context.Background())
}

func (o DefenseRuleConfigOutput) ToDefenseRuleConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefenseRuleConfig) *DefenseRuleConfig {
		return &v
	}).(DefenseRuleConfigPtrOutput)
}

// The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
func (o DefenseRuleConfigOutput) AbroadRegions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.AbroadRegions }).(pulumi.StringPtrOutput)
}

// The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
func (o DefenseRuleConfigOutput) AccountIdentifiers() DefenseRuleConfigAccountIdentifierArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []DefenseRuleConfigAccountIdentifier { return v.AccountIdentifiers }).(DefenseRuleConfigAccountIdentifierArrayOutput)
}

// The list of regular rule IDs that are not detected. The value is in the ["XX1", "XX2",...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
func (o DefenseRuleConfigOutput) BypassRegularRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []string { return v.BypassRegularRules }).(pulumi.StringArrayOutput)
}

// The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
// - sqli: Indicates SQL injection.
// - xss: Indicates cross-site scripting (XSS).
// - cmdi: Indicates OS command injection.
// - expression_injection: Indicates expression injection.
// - java_deserialization: indicates Java deserialization.
// - dot_net_deserialization: Represents. net deserialization.
// - php_deserialization: indicates PHP deserialization.
// - code_exec: Indicates code execution.
// - ssrf: indicates SSRF (server-side request forgery).
// - path_traversal: indicates a Path Traversal.
// - arbitrary_file_uploading: Indicates to upload any file.
// - webshell: Represents a webshell.
// - rfilei: Indicates the remote file contains (RFI).
// - lfilei: Indicates that the local file contains (LFI).
// - protocol_violation: indicates a protocol violation.
// - scanner_behavior: Indicates scanner behavior.
// - logic_flaw: Indicates a business logic defect.
// - arbitrary_file_reading: Indicates arbitrary file reading.
// - arbitrary_file_download: Indicates an arbitrary file download.
// - xxe: Indicates external entity injection.
// - csrf: indicates cross-site request forgery.
// - crlf: indicates CRLF.
// - other: indicates other.
func (o DefenseRuleConfigOutput) BypassRegularTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []string { return v.BypassRegularTypes }).(pulumi.StringArrayOutput)
}

// The modules to which the whitelist applies. The value is in the ["XX1", "XX2",...] format. Valid values:
// - waf: indicates all modules.
// - customrule: indicates custom rules.
// - blacklist: indicates IP blacklist.
// - antiscan: indicates scan protection.
// - regular: indicates basic protection rules.
// - regular_rule: indicates specific regular rules in basic protection.
// - regular_type: indicates specific regular rule types in basic protection.
// - major_protection: indicates major event support protection.
// - cc: indicates CC protection.
// - region_block: indicates Location Blacklist.
// - antibot_scene: indicates BOT scenario protection.
// - dlp: indicates information leakage prevention.
// - tamperproof: indicates web tamper-proofing.
// - spike_throttle: indicates peak traffic throttling.
func (o DefenseRuleConfigOutput) BypassTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []string { return v.BypassTags }).(pulumi.StringArrayOutput)
}

// Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
// - service: indicates that the effective object is a protected object.
// - rule: indicates that the effective object is a single rule.
func (o DefenseRuleConfigOutput) CcEffect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.CcEffect }).(pulumi.StringPtrOutput)
}

// Whether to open the speed limit. Value:
// - 0: indicates that the speed limit is off.
// - 1: Indicates that the speed limit is on.
func (o DefenseRuleConfigOutput) CcStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *int { return v.CcStatus }).(pulumi.IntPtrOutput)
}

// The regions in China from which you want to block requests. If you specify "CN", requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
func (o DefenseRuleConfigOutput) CnRegions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.CnRegions }).(pulumi.StringPtrOutput)
}

// The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
func (o DefenseRuleConfigOutput) Conditions() DefenseRuleConfigConditionArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []DefenseRuleConfigCondition { return v.Conditions }).(DefenseRuleConfigConditionArrayOutput)
}

// The canary release configuration for the rule. The value is a JSON. This parameter is required only when you set `GrayStatus` to 1. See `grayConfig` below.
func (o DefenseRuleConfigOutput) GrayConfig() DefenseRuleConfigGrayConfigPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *DefenseRuleConfigGrayConfig { return v.GrayConfig }).(DefenseRuleConfigGrayConfigPtrOutput)
}

// Specifies whether to enable canary release for the rule. Valid values:
// - 0 (default): disables canary release.
// - 1: enables canary release.
func (o DefenseRuleConfigOutput) GrayStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *int { return v.GrayStatus }).(pulumi.IntPtrOutput)
}

// The HTTP flood protection mode. Valid values:
// - 0 (default): indicates normal protection.
// - 1: indicates emergency protection.
func (o DefenseRuleConfigOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The protocol type of the cached page address. Valid values: http, https.
func (o DefenseRuleConfigOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
func (o DefenseRuleConfigOutput) RateLimit() DefenseRuleConfigRateLimitPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *DefenseRuleConfigRateLimit { return v.RateLimit }).(DefenseRuleConfigRateLimitPtrOutput)
}

// The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the ["ip1","ip2",...] format.
func (o DefenseRuleConfigOutput) RemoteAddrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfig) []string { return v.RemoteAddrs }).(pulumi.StringArrayOutput)
}

// Protection rule action. Value:
// - block: Indicates an intercept.
// - monitor: indicates observation.
// - js: indicates JS validation.
// - captcha: Indicates a slider.
// - captcha_strict: indicates a strict slider.
// - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
//
// > **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
func (o DefenseRuleConfigOutput) RuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.RuleAction }).(pulumi.StringPtrOutput)
}

// The throttling threshold. Valid values:
// - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
// - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
func (o DefenseRuleConfigOutput) ThrottleThrehold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *int { return v.ThrottleThrehold }).(pulumi.IntPtrOutput)
}

// The throttling method. Valid values:
// - qps: indicates throttling based on queries per second (QPS).
// - ratio (default): indicates throttling based on percentage.
func (o DefenseRuleConfigOutput) ThrottleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.ThrottleType }).(pulumi.StringPtrOutput)
}

// The scheduled rule configuration. The value is a JSON.  See `timeConfig` below.
func (o DefenseRuleConfigOutput) TimeConfig() DefenseRuleConfigTimeConfigPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *DefenseRuleConfigTimeConfig { return v.TimeConfig }).(DefenseRuleConfigTimeConfigPtrOutput)
}

// The User-Agent string that is allowed for access to the address.
func (o DefenseRuleConfigOutput) Ua() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.Ua }).(pulumi.StringPtrOutput)
}

// The address of the cached page.
func (o DefenseRuleConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigPtrOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfig)(nil)).Elem()
}

func (o DefenseRuleConfigPtrOutput) ToDefenseRuleConfigPtrOutput() DefenseRuleConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigPtrOutput) ToDefenseRuleConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigPtrOutput) Elem() DefenseRuleConfigOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) DefenseRuleConfig {
		if v != nil {
			return *v
		}
		var ret DefenseRuleConfig
		return ret
	}).(DefenseRuleConfigOutput)
}

// The regions outside China from which you want to block requests. Separate multiple region codes with commas (,). You can call the DescribeIpAbroadCountryInfos operation to query the countries and regions outside China that can be blocked.
func (o DefenseRuleConfigPtrOutput) AbroadRegions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.AbroadRegions
	}).(pulumi.StringPtrOutput)
}

// The policies for account extraction. Up to five policies are supported. Each policy is a JSON string. For more information, see accountIdentifiers description. See `accountIdentifiers` below.
func (o DefenseRuleConfigPtrOutput) AccountIdentifiers() DefenseRuleConfigAccountIdentifierArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []DefenseRuleConfigAccountIdentifier {
		if v == nil {
			return nil
		}
		return v.AccountIdentifiers
	}).(DefenseRuleConfigAccountIdentifierArrayOutput)
}

// The list of regular rule IDs that are not detected. The value is in the ["XX1", "XX2",...] format. This parameter is required only when the module to which the whitelist applies is set to specific regular rules in basic protection (BypassTags is set to regular_rule).
func (o DefenseRuleConfigPtrOutput) BypassRegularRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []string {
		if v == nil {
			return nil
		}
		return v.BypassRegularRules
	}).(pulumi.StringArrayOutput)
}

// The regular rule type is not detected. This parameter is configured only when the whitelist module is configured as the Web application regular type (the value of the BypassTags parameter is regular_type). Value:
// - sqli: Indicates SQL injection.
// - xss: Indicates cross-site scripting (XSS).
// - cmdi: Indicates OS command injection.
// - expression_injection: Indicates expression injection.
// - java_deserialization: indicates Java deserialization.
// - dot_net_deserialization: Represents. net deserialization.
// - php_deserialization: indicates PHP deserialization.
// - code_exec: Indicates code execution.
// - ssrf: indicates SSRF (server-side request forgery).
// - path_traversal: indicates a Path Traversal.
// - arbitrary_file_uploading: Indicates to upload any file.
// - webshell: Represents a webshell.
// - rfilei: Indicates the remote file contains (RFI).
// - lfilei: Indicates that the local file contains (LFI).
// - protocol_violation: indicates a protocol violation.
// - scanner_behavior: Indicates scanner behavior.
// - logic_flaw: Indicates a business logic defect.
// - arbitrary_file_reading: Indicates arbitrary file reading.
// - arbitrary_file_download: Indicates an arbitrary file download.
// - xxe: Indicates external entity injection.
// - csrf: indicates cross-site request forgery.
// - crlf: indicates CRLF.
// - other: indicates other.
func (o DefenseRuleConfigPtrOutput) BypassRegularTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []string {
		if v == nil {
			return nil
		}
		return v.BypassRegularTypes
	}).(pulumi.StringArrayOutput)
}

// The modules to which the whitelist applies. The value is in the ["XX1", "XX2",...] format. Valid values:
// - waf: indicates all modules.
// - customrule: indicates custom rules.
// - blacklist: indicates IP blacklist.
// - antiscan: indicates scan protection.
// - regular: indicates basic protection rules.
// - regular_rule: indicates specific regular rules in basic protection.
// - regular_type: indicates specific regular rule types in basic protection.
// - major_protection: indicates major event support protection.
// - cc: indicates CC protection.
// - region_block: indicates Location Blacklist.
// - antibot_scene: indicates BOT scenario protection.
// - dlp: indicates information leakage prevention.
// - tamperproof: indicates web tamper-proofing.
// - spike_throttle: indicates peak traffic throttling.
func (o DefenseRuleConfigPtrOutput) BypassTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []string {
		if v == nil {
			return nil
		}
		return v.BypassTags
	}).(pulumi.StringArrayOutput)
}

// Set the effective range of the speed limit. This information is configured only when ccStatus is set to 1. Value:
// - service: indicates that the effective object is a protected object.
// - rule: indicates that the effective object is a single rule.
func (o DefenseRuleConfigPtrOutput) CcEffect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.CcEffect
	}).(pulumi.StringPtrOutput)
}

// Whether to open the speed limit. Value:
// - 0: indicates that the speed limit is off.
// - 1: Indicates that the speed limit is on.
func (o DefenseRuleConfigPtrOutput) CcStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *int {
		if v == nil {
			return nil
		}
		return v.CcStatus
	}).(pulumi.IntPtrOutput)
}

// The regions in China from which you want to block requests. If you specify "CN", requests from the Chinese mainland (excluding Hong Kong, Macao, and Taiwan) are blocked. Separate multiple regions with commas (,). For more information about region codes, see Description of region codes in China.
func (o DefenseRuleConfigPtrOutput) CnRegions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.CnRegions
	}).(pulumi.StringPtrOutput)
}

// The traffic characteristics of ACL, which are described in JSON format. You can enter up to five matching conditions. For specific configuration information, see detailed configuration of conditions. See `conditions` below.
func (o DefenseRuleConfigPtrOutput) Conditions() DefenseRuleConfigConditionArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []DefenseRuleConfigCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(DefenseRuleConfigConditionArrayOutput)
}

// The canary release configuration for the rule. The value is a JSON. This parameter is required only when you set `GrayStatus` to 1. See `grayConfig` below.
func (o DefenseRuleConfigPtrOutput) GrayConfig() DefenseRuleConfigGrayConfigPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *DefenseRuleConfigGrayConfig {
		if v == nil {
			return nil
		}
		return v.GrayConfig
	}).(DefenseRuleConfigGrayConfigPtrOutput)
}

// Specifies whether to enable canary release for the rule. Valid values:
// - 0 (default): disables canary release.
// - 1: enables canary release.
func (o DefenseRuleConfigPtrOutput) GrayStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *int {
		if v == nil {
			return nil
		}
		return v.GrayStatus
	}).(pulumi.IntPtrOutput)
}

// The HTTP flood protection mode. Valid values:
// - 0 (default): indicates normal protection.
// - 1: indicates emergency protection.
func (o DefenseRuleConfigPtrOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *int {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.IntPtrOutput)
}

// The protocol type of the cached page address. Valid values: http, https.
func (o DefenseRuleConfigPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// The detailed speed limit configuration, which is described in the JSON string format. This information is configured only when CcStatus is set to 1. For specific configuration information, see detailed configuration of Ratelimit. See `rateLimit` below.
func (o DefenseRuleConfigPtrOutput) RateLimit() DefenseRuleConfigRateLimitPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *DefenseRuleConfigRateLimit {
		if v == nil {
			return nil
		}
		return v.RateLimit
	}).(DefenseRuleConfigRateLimitPtrOutput)
}

// The IP addresses that you want to add to the blacklist. Specify the value of this parameter in the ["ip1","ip2",...] format.
func (o DefenseRuleConfigPtrOutput) RemoteAddrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) []string {
		if v == nil {
			return nil
		}
		return v.RemoteAddrs
	}).(pulumi.StringArrayOutput)
}

// Protection rule action. Value:
// - block: Indicates an intercept.
// - monitor: indicates observation.
// - js: indicates JS validation.
// - captcha: Indicates a slider.
// - captcha_strict: indicates a strict slider.
// - filter: filters sensitive information. This action applies only to scenarios that the Information leakage prevention rule include sensitive information match conditions.
//
// > **NOTE:**  For the supported protection rule actions, follow the rule actions displayed in the WAF console.
func (o DefenseRuleConfigPtrOutput) RuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.RuleAction
	}).(pulumi.StringPtrOutput)
}

// The throttling threshold. Valid values:
// - The QPS throttling threshold ranges from 1 to 5000000. If you select QPS throttling (such as 500 QPS), traffic that meets the throttling conditions and exceeds 500 QPS will be blocked.
// - The percentage throttling threshold ranges from 1 to 99. If you select percentage throttling (such as 80%), only 80% of the traffic that meets the throttling conditions will be allowed.
func (o DefenseRuleConfigPtrOutput) ThrottleThrehold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *int {
		if v == nil {
			return nil
		}
		return v.ThrottleThrehold
	}).(pulumi.IntPtrOutput)
}

// The throttling method. Valid values:
// - qps: indicates throttling based on queries per second (QPS).
// - ratio (default): indicates throttling based on percentage.
func (o DefenseRuleConfigPtrOutput) ThrottleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.ThrottleType
	}).(pulumi.StringPtrOutput)
}

// The scheduled rule configuration. The value is a JSON.  See `timeConfig` below.
func (o DefenseRuleConfigPtrOutput) TimeConfig() DefenseRuleConfigTimeConfigPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *DefenseRuleConfigTimeConfig {
		if v == nil {
			return nil
		}
		return v.TimeConfig
	}).(DefenseRuleConfigTimeConfigPtrOutput)
}

// The User-Agent string that is allowed for access to the address.
func (o DefenseRuleConfigPtrOutput) Ua() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ua
	}).(pulumi.StringPtrOutput)
}

// The address of the cached page.
func (o DefenseRuleConfigPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfig) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigAccountIdentifier struct {
	// The authentication mode. Valid values:
	// - plain: indicates plaintext.
	// - basic: indicates Basic authentication.
	// - jwt: indicates JWT authentication. For JWT authentication, you must specify the field that stores the decoded account information (position).
	DecodeType *string `pulumi:"decodeType"`
	// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
	//
	// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
	Key *string `pulumi:"key"`
	// The field that stores the decoded account information.
	Position *string `pulumi:"position"`
	// The priority of the current extraction configuration. Each traffic can match at most one extraction policy. Valid values: [0,20]. A smaller value indicates a higher priority. The priority value must be unique.
	Priority *int `pulumi:"priority"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey *string `pulumi:"subKey"`
}

// DefenseRuleConfigAccountIdentifierInput is an input type that accepts DefenseRuleConfigAccountIdentifierArgs and DefenseRuleConfigAccountIdentifierOutput values.
// You can construct a concrete instance of `DefenseRuleConfigAccountIdentifierInput` via:
//
//	DefenseRuleConfigAccountIdentifierArgs{...}
type DefenseRuleConfigAccountIdentifierInput interface {
	pulumi.Input

	ToDefenseRuleConfigAccountIdentifierOutput() DefenseRuleConfigAccountIdentifierOutput
	ToDefenseRuleConfigAccountIdentifierOutputWithContext(context.Context) DefenseRuleConfigAccountIdentifierOutput
}

type DefenseRuleConfigAccountIdentifierArgs struct {
	// The authentication mode. Valid values:
	// - plain: indicates plaintext.
	// - basic: indicates Basic authentication.
	// - jwt: indicates JWT authentication. For JWT authentication, you must specify the field that stores the decoded account information (position).
	DecodeType pulumi.StringPtrInput `pulumi:"decodeType"`
	// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
	//
	// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The field that stores the decoded account information.
	Position pulumi.StringPtrInput `pulumi:"position"`
	// The priority of the current extraction configuration. Each traffic can match at most one extraction policy. Valid values: [0,20]. A smaller value indicates a higher priority. The priority value must be unique.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey pulumi.StringPtrInput `pulumi:"subKey"`
}

func (DefenseRuleConfigAccountIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigAccountIdentifier)(nil)).Elem()
}

func (i DefenseRuleConfigAccountIdentifierArgs) ToDefenseRuleConfigAccountIdentifierOutput() DefenseRuleConfigAccountIdentifierOutput {
	return i.ToDefenseRuleConfigAccountIdentifierOutputWithContext(context.Background())
}

func (i DefenseRuleConfigAccountIdentifierArgs) ToDefenseRuleConfigAccountIdentifierOutputWithContext(ctx context.Context) DefenseRuleConfigAccountIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigAccountIdentifierOutput)
}

// DefenseRuleConfigAccountIdentifierArrayInput is an input type that accepts DefenseRuleConfigAccountIdentifierArray and DefenseRuleConfigAccountIdentifierArrayOutput values.
// You can construct a concrete instance of `DefenseRuleConfigAccountIdentifierArrayInput` via:
//
//	DefenseRuleConfigAccountIdentifierArray{ DefenseRuleConfigAccountIdentifierArgs{...} }
type DefenseRuleConfigAccountIdentifierArrayInput interface {
	pulumi.Input

	ToDefenseRuleConfigAccountIdentifierArrayOutput() DefenseRuleConfigAccountIdentifierArrayOutput
	ToDefenseRuleConfigAccountIdentifierArrayOutputWithContext(context.Context) DefenseRuleConfigAccountIdentifierArrayOutput
}

type DefenseRuleConfigAccountIdentifierArray []DefenseRuleConfigAccountIdentifierInput

func (DefenseRuleConfigAccountIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigAccountIdentifier)(nil)).Elem()
}

func (i DefenseRuleConfigAccountIdentifierArray) ToDefenseRuleConfigAccountIdentifierArrayOutput() DefenseRuleConfigAccountIdentifierArrayOutput {
	return i.ToDefenseRuleConfigAccountIdentifierArrayOutputWithContext(context.Background())
}

func (i DefenseRuleConfigAccountIdentifierArray) ToDefenseRuleConfigAccountIdentifierArrayOutputWithContext(ctx context.Context) DefenseRuleConfigAccountIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigAccountIdentifierArrayOutput)
}

type DefenseRuleConfigAccountIdentifierOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigAccountIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigAccountIdentifier)(nil)).Elem()
}

func (o DefenseRuleConfigAccountIdentifierOutput) ToDefenseRuleConfigAccountIdentifierOutput() DefenseRuleConfigAccountIdentifierOutput {
	return o
}

func (o DefenseRuleConfigAccountIdentifierOutput) ToDefenseRuleConfigAccountIdentifierOutputWithContext(ctx context.Context) DefenseRuleConfigAccountIdentifierOutput {
	return o
}

// The authentication mode. Valid values:
// - plain: indicates plaintext.
// - basic: indicates Basic authentication.
// - jwt: indicates JWT authentication. For JWT authentication, you must specify the field that stores the decoded account information (position).
func (o DefenseRuleConfigAccountIdentifierOutput) DecodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigAccountIdentifier) *string { return v.DecodeType }).(pulumi.StringPtrOutput)
}

// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
//
// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
func (o DefenseRuleConfigAccountIdentifierOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigAccountIdentifier) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The field that stores the decoded account information.
func (o DefenseRuleConfigAccountIdentifierOutput) Position() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigAccountIdentifier) *string { return v.Position }).(pulumi.StringPtrOutput)
}

// The priority of the current extraction configuration. Each traffic can match at most one extraction policy. Valid values: [0,20]. A smaller value indicates a higher priority. The priority value must be unique.
func (o DefenseRuleConfigAccountIdentifierOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigAccountIdentifier) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
func (o DefenseRuleConfigAccountIdentifierOutput) SubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigAccountIdentifier) *string { return v.SubKey }).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigAccountIdentifierArrayOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigAccountIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigAccountIdentifier)(nil)).Elem()
}

func (o DefenseRuleConfigAccountIdentifierArrayOutput) ToDefenseRuleConfigAccountIdentifierArrayOutput() DefenseRuleConfigAccountIdentifierArrayOutput {
	return o
}

func (o DefenseRuleConfigAccountIdentifierArrayOutput) ToDefenseRuleConfigAccountIdentifierArrayOutputWithContext(ctx context.Context) DefenseRuleConfigAccountIdentifierArrayOutput {
	return o
}

func (o DefenseRuleConfigAccountIdentifierArrayOutput) Index(i pulumi.IntInput) DefenseRuleConfigAccountIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefenseRuleConfigAccountIdentifier {
		return vs[0].([]DefenseRuleConfigAccountIdentifier)[vs[1].(int)]
	}).(DefenseRuleConfigAccountIdentifierOutput)
}

type DefenseRuleConfigCondition struct {
	// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
	//
	// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
	Key *string `pulumi:"key"`
	// Logical character. Value:
	// - not-contain: does not contain.
	// - contain: Indicates to contain.
	// - none: It does not exist.
	// - ne: means not equal.
	// - eq: means equal.
	// - lt: indicates that the value is less.
	// - gt: indicates that the value is greater.
	// - len-lt: indicates that the length is less.
	// - len-eq: indicates that the length is equal.
	// - len-gt: indicates that the length is greater.
	// - not-match: indicates a mismatch.
	// - match-one: means equal to one of the multiple values.
	// - all-not-match: means not equal to any value.
	// - all-not-contain: does not contain any value.
	// - contain-one: Indicates that one of the multiple values is contained.
	// - not-regex: Indicates a regular mismatch.
	// - regex: Indicates a regular match.
	// - all-not-regex: indicates that the regular expressions do not match.
	// - regex-one: Represents a regular match for one of them.
	// - prefix-match: Indicates a prefix match.
	// - suffix-match: indicates a suffix match.
	// - mpty: Indicates that the content is empty.
	// - exists: Indicates that the field exists.
	// - inl: indicates in the list.
	//
	// > **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
	OpValue *string `pulumi:"opValue"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey *string `pulumi:"subKey"`
	// Match the content and fill in the corresponding content as needed.
	//
	// > **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
	Values *string `pulumi:"values"`
}

// DefenseRuleConfigConditionInput is an input type that accepts DefenseRuleConfigConditionArgs and DefenseRuleConfigConditionOutput values.
// You can construct a concrete instance of `DefenseRuleConfigConditionInput` via:
//
//	DefenseRuleConfigConditionArgs{...}
type DefenseRuleConfigConditionInput interface {
	pulumi.Input

	ToDefenseRuleConfigConditionOutput() DefenseRuleConfigConditionOutput
	ToDefenseRuleConfigConditionOutputWithContext(context.Context) DefenseRuleConfigConditionOutput
}

type DefenseRuleConfigConditionArgs struct {
	// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
	//
	// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Logical character. Value:
	// - not-contain: does not contain.
	// - contain: Indicates to contain.
	// - none: It does not exist.
	// - ne: means not equal.
	// - eq: means equal.
	// - lt: indicates that the value is less.
	// - gt: indicates that the value is greater.
	// - len-lt: indicates that the length is less.
	// - len-eq: indicates that the length is equal.
	// - len-gt: indicates that the length is greater.
	// - not-match: indicates a mismatch.
	// - match-one: means equal to one of the multiple values.
	// - all-not-match: means not equal to any value.
	// - all-not-contain: does not contain any value.
	// - contain-one: Indicates that one of the multiple values is contained.
	// - not-regex: Indicates a regular mismatch.
	// - regex: Indicates a regular match.
	// - all-not-regex: indicates that the regular expressions do not match.
	// - regex-one: Represents a regular match for one of them.
	// - prefix-match: Indicates a prefix match.
	// - suffix-match: indicates a suffix match.
	// - mpty: Indicates that the content is empty.
	// - exists: Indicates that the field exists.
	// - inl: indicates in the list.
	//
	// > **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
	OpValue pulumi.StringPtrInput `pulumi:"opValue"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey pulumi.StringPtrInput `pulumi:"subKey"`
	// Match the content and fill in the corresponding content as needed.
	//
	// > **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (DefenseRuleConfigConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigCondition)(nil)).Elem()
}

func (i DefenseRuleConfigConditionArgs) ToDefenseRuleConfigConditionOutput() DefenseRuleConfigConditionOutput {
	return i.ToDefenseRuleConfigConditionOutputWithContext(context.Background())
}

func (i DefenseRuleConfigConditionArgs) ToDefenseRuleConfigConditionOutputWithContext(ctx context.Context) DefenseRuleConfigConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigConditionOutput)
}

// DefenseRuleConfigConditionArrayInput is an input type that accepts DefenseRuleConfigConditionArray and DefenseRuleConfigConditionArrayOutput values.
// You can construct a concrete instance of `DefenseRuleConfigConditionArrayInput` via:
//
//	DefenseRuleConfigConditionArray{ DefenseRuleConfigConditionArgs{...} }
type DefenseRuleConfigConditionArrayInput interface {
	pulumi.Input

	ToDefenseRuleConfigConditionArrayOutput() DefenseRuleConfigConditionArrayOutput
	ToDefenseRuleConfigConditionArrayOutputWithContext(context.Context) DefenseRuleConfigConditionArrayOutput
}

type DefenseRuleConfigConditionArray []DefenseRuleConfigConditionInput

func (DefenseRuleConfigConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigCondition)(nil)).Elem()
}

func (i DefenseRuleConfigConditionArray) ToDefenseRuleConfigConditionArrayOutput() DefenseRuleConfigConditionArrayOutput {
	return i.ToDefenseRuleConfigConditionArrayOutputWithContext(context.Background())
}

func (i DefenseRuleConfigConditionArray) ToDefenseRuleConfigConditionArrayOutputWithContext(ctx context.Context) DefenseRuleConfigConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigConditionArrayOutput)
}

type DefenseRuleConfigConditionOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigCondition)(nil)).Elem()
}

func (o DefenseRuleConfigConditionOutput) ToDefenseRuleConfigConditionOutput() DefenseRuleConfigConditionOutput {
	return o
}

func (o DefenseRuleConfigConditionOutput) ToDefenseRuleConfigConditionOutputWithContext(ctx context.Context) DefenseRuleConfigConditionOutput {
	return o
}

// Match field. Valid values: URL, URLPath, IP, Referer, User-Agent, Params, Cookie, Content-Type, Content-Length, X-Forwarded-For, Post-Body, Http-Method, Header, Host, HttpCode, and SensitiveInfo.
//
// > **NOTE:**  Support for matching fields is based on the display in the WAF console. HttpCode and SensitiveInfo are the matching fields supported by the information leakage prevention rule (dlp).
func (o DefenseRuleConfigConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Logical character. Value:
// - not-contain: does not contain.
// - contain: Indicates to contain.
// - none: It does not exist.
// - ne: means not equal.
// - eq: means equal.
// - lt: indicates that the value is less.
// - gt: indicates that the value is greater.
// - len-lt: indicates that the length is less.
// - len-eq: indicates that the length is equal.
// - len-gt: indicates that the length is greater.
// - not-match: indicates a mismatch.
// - match-one: means equal to one of the multiple values.
// - all-not-match: means not equal to any value.
// - all-not-contain: does not contain any value.
// - contain-one: Indicates that one of the multiple values is contained.
// - not-regex: Indicates a regular mismatch.
// - regex: Indicates a regular match.
// - all-not-regex: indicates that the regular expressions do not match.
// - regex-one: Represents a regular match for one of them.
// - prefix-match: Indicates a prefix match.
// - suffix-match: indicates a suffix match.
// - mpty: Indicates that the content is empty.
// - exists: Indicates that the field exists.
// - inl: indicates in the list.
//
// > **NOTE:**  Not all logical characters (opvalues) can be configured for the match field (key) of each custom rule. For the logical characters supported by different matching fields, please refer to the association relationship between the matching fields and the logical characters in the custom rules of the WAF console.
func (o DefenseRuleConfigConditionOutput) OpValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigCondition) *string { return v.OpValue }).(pulumi.StringPtrOutput)
}

// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
func (o DefenseRuleConfigConditionOutput) SubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigCondition) *string { return v.SubKey }).(pulumi.StringPtrOutput)
}

// Match the content and fill in the corresponding content as needed.
//
// > **NOTE:**  The value range of the logical (opValue) and matching content (values) parameters in the matching condition parameter is related to the specified matching field (key).
func (o DefenseRuleConfigConditionOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigCondition) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigConditionArrayOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigCondition)(nil)).Elem()
}

func (o DefenseRuleConfigConditionArrayOutput) ToDefenseRuleConfigConditionArrayOutput() DefenseRuleConfigConditionArrayOutput {
	return o
}

func (o DefenseRuleConfigConditionArrayOutput) ToDefenseRuleConfigConditionArrayOutputWithContext(ctx context.Context) DefenseRuleConfigConditionArrayOutput {
	return o
}

func (o DefenseRuleConfigConditionArrayOutput) Index(i pulumi.IntInput) DefenseRuleConfigConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefenseRuleConfigCondition {
		return vs[0].([]DefenseRuleConfigCondition)[vs[1].(int)]
	}).(DefenseRuleConfigConditionOutput)
}

type DefenseRuleConfigGrayConfig struct {
	// The percentage of traffic for which the canary release takes effect. The value must be in the range of 1 to 100.
	GrayRate *int `pulumi:"grayRate"`
	// The sub-feature of the statistical object. This parameter is required when you set the `GrayTarget` parameter to `cookie`, `header`, or `queryarg`.
	GraySubKey *string `pulumi:"graySubKey"`
	// The type of the canary release object. Valid values:
	GrayTarget *string `pulumi:"grayTarget"`
}

// DefenseRuleConfigGrayConfigInput is an input type that accepts DefenseRuleConfigGrayConfigArgs and DefenseRuleConfigGrayConfigOutput values.
// You can construct a concrete instance of `DefenseRuleConfigGrayConfigInput` via:
//
//	DefenseRuleConfigGrayConfigArgs{...}
type DefenseRuleConfigGrayConfigInput interface {
	pulumi.Input

	ToDefenseRuleConfigGrayConfigOutput() DefenseRuleConfigGrayConfigOutput
	ToDefenseRuleConfigGrayConfigOutputWithContext(context.Context) DefenseRuleConfigGrayConfigOutput
}

type DefenseRuleConfigGrayConfigArgs struct {
	// The percentage of traffic for which the canary release takes effect. The value must be in the range of 1 to 100.
	GrayRate pulumi.IntPtrInput `pulumi:"grayRate"`
	// The sub-feature of the statistical object. This parameter is required when you set the `GrayTarget` parameter to `cookie`, `header`, or `queryarg`.
	GraySubKey pulumi.StringPtrInput `pulumi:"graySubKey"`
	// The type of the canary release object. Valid values:
	GrayTarget pulumi.StringPtrInput `pulumi:"grayTarget"`
}

func (DefenseRuleConfigGrayConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigGrayConfig)(nil)).Elem()
}

func (i DefenseRuleConfigGrayConfigArgs) ToDefenseRuleConfigGrayConfigOutput() DefenseRuleConfigGrayConfigOutput {
	return i.ToDefenseRuleConfigGrayConfigOutputWithContext(context.Background())
}

func (i DefenseRuleConfigGrayConfigArgs) ToDefenseRuleConfigGrayConfigOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigGrayConfigOutput)
}

func (i DefenseRuleConfigGrayConfigArgs) ToDefenseRuleConfigGrayConfigPtrOutput() DefenseRuleConfigGrayConfigPtrOutput {
	return i.ToDefenseRuleConfigGrayConfigPtrOutputWithContext(context.Background())
}

func (i DefenseRuleConfigGrayConfigArgs) ToDefenseRuleConfigGrayConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigGrayConfigOutput).ToDefenseRuleConfigGrayConfigPtrOutputWithContext(ctx)
}

// DefenseRuleConfigGrayConfigPtrInput is an input type that accepts DefenseRuleConfigGrayConfigArgs, DefenseRuleConfigGrayConfigPtr and DefenseRuleConfigGrayConfigPtrOutput values.
// You can construct a concrete instance of `DefenseRuleConfigGrayConfigPtrInput` via:
//
//	        DefenseRuleConfigGrayConfigArgs{...}
//
//	or:
//
//	        nil
type DefenseRuleConfigGrayConfigPtrInput interface {
	pulumi.Input

	ToDefenseRuleConfigGrayConfigPtrOutput() DefenseRuleConfigGrayConfigPtrOutput
	ToDefenseRuleConfigGrayConfigPtrOutputWithContext(context.Context) DefenseRuleConfigGrayConfigPtrOutput
}

type defenseRuleConfigGrayConfigPtrType DefenseRuleConfigGrayConfigArgs

func DefenseRuleConfigGrayConfigPtr(v *DefenseRuleConfigGrayConfigArgs) DefenseRuleConfigGrayConfigPtrInput {
	return (*defenseRuleConfigGrayConfigPtrType)(v)
}

func (*defenseRuleConfigGrayConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigGrayConfig)(nil)).Elem()
}

func (i *defenseRuleConfigGrayConfigPtrType) ToDefenseRuleConfigGrayConfigPtrOutput() DefenseRuleConfigGrayConfigPtrOutput {
	return i.ToDefenseRuleConfigGrayConfigPtrOutputWithContext(context.Background())
}

func (i *defenseRuleConfigGrayConfigPtrType) ToDefenseRuleConfigGrayConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigGrayConfigPtrOutput)
}

type DefenseRuleConfigGrayConfigOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigGrayConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigGrayConfig)(nil)).Elem()
}

func (o DefenseRuleConfigGrayConfigOutput) ToDefenseRuleConfigGrayConfigOutput() DefenseRuleConfigGrayConfigOutput {
	return o
}

func (o DefenseRuleConfigGrayConfigOutput) ToDefenseRuleConfigGrayConfigOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigOutput {
	return o
}

func (o DefenseRuleConfigGrayConfigOutput) ToDefenseRuleConfigGrayConfigPtrOutput() DefenseRuleConfigGrayConfigPtrOutput {
	return o.ToDefenseRuleConfigGrayConfigPtrOutputWithContext(context.Background())
}

func (o DefenseRuleConfigGrayConfigOutput) ToDefenseRuleConfigGrayConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefenseRuleConfigGrayConfig) *DefenseRuleConfigGrayConfig {
		return &v
	}).(DefenseRuleConfigGrayConfigPtrOutput)
}

// The percentage of traffic for which the canary release takes effect. The value must be in the range of 1 to 100.
func (o DefenseRuleConfigGrayConfigOutput) GrayRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigGrayConfig) *int { return v.GrayRate }).(pulumi.IntPtrOutput)
}

// The sub-feature of the statistical object. This parameter is required when you set the `GrayTarget` parameter to `cookie`, `header`, or `queryarg`.
func (o DefenseRuleConfigGrayConfigOutput) GraySubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigGrayConfig) *string { return v.GraySubKey }).(pulumi.StringPtrOutput)
}

// The type of the canary release object. Valid values:
func (o DefenseRuleConfigGrayConfigOutput) GrayTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigGrayConfig) *string { return v.GrayTarget }).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigGrayConfigPtrOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigGrayConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigGrayConfig)(nil)).Elem()
}

func (o DefenseRuleConfigGrayConfigPtrOutput) ToDefenseRuleConfigGrayConfigPtrOutput() DefenseRuleConfigGrayConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigGrayConfigPtrOutput) ToDefenseRuleConfigGrayConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigGrayConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigGrayConfigPtrOutput) Elem() DefenseRuleConfigGrayConfigOutput {
	return o.ApplyT(func(v *DefenseRuleConfigGrayConfig) DefenseRuleConfigGrayConfig {
		if v != nil {
			return *v
		}
		var ret DefenseRuleConfigGrayConfig
		return ret
	}).(DefenseRuleConfigGrayConfigOutput)
}

// The percentage of traffic for which the canary release takes effect. The value must be in the range of 1 to 100.
func (o DefenseRuleConfigGrayConfigPtrOutput) GrayRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigGrayConfig) *int {
		if v == nil {
			return nil
		}
		return v.GrayRate
	}).(pulumi.IntPtrOutput)
}

// The sub-feature of the statistical object. This parameter is required when you set the `GrayTarget` parameter to `cookie`, `header`, or `queryarg`.
func (o DefenseRuleConfigGrayConfigPtrOutput) GraySubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigGrayConfig) *string {
		if v == nil {
			return nil
		}
		return v.GraySubKey
	}).(pulumi.StringPtrOutput)
}

// The type of the canary release object. Valid values:
func (o DefenseRuleConfigGrayConfigPtrOutput) GrayTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigGrayConfig) *string {
		if v == nil {
			return nil
		}
		return v.GrayTarget
	}).(pulumi.StringPtrOutput)
}

type DefenseRuleConfigRateLimit struct {
	// The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
	// Valid values: 1 to 1800 seconds.
	Interval *int `pulumi:"interval"`
	// Response code frequency setting. The description is in the JSON string format. See `status` below.
	Status *DefenseRuleConfigRateLimitStatus `pulumi:"status"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey *string `pulumi:"subKey"`
	// The type of the statistical object. Valid values:
	// - remoteAddr (default): indicates IP.
	// - cookie.acw_tc: indicates session.
	// - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
	// - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
	// - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
	Target *string `pulumi:"target"`
	// The maximum number of requests that can be sent from a statistical object.
	Threshold *int `pulumi:"threshold"`
	// The period of time during which you want the specified action to be valid. Unit: seconds.
	// Valid values: 60 to 86400.
	Ttl *int `pulumi:"ttl"`
}

// DefenseRuleConfigRateLimitInput is an input type that accepts DefenseRuleConfigRateLimitArgs and DefenseRuleConfigRateLimitOutput values.
// You can construct a concrete instance of `DefenseRuleConfigRateLimitInput` via:
//
//	DefenseRuleConfigRateLimitArgs{...}
type DefenseRuleConfigRateLimitInput interface {
	pulumi.Input

	ToDefenseRuleConfigRateLimitOutput() DefenseRuleConfigRateLimitOutput
	ToDefenseRuleConfigRateLimitOutputWithContext(context.Context) DefenseRuleConfigRateLimitOutput
}

type DefenseRuleConfigRateLimitArgs struct {
	// The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
	// Valid values: 1 to 1800 seconds.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// Response code frequency setting. The description is in the JSON string format. See `status` below.
	Status DefenseRuleConfigRateLimitStatusPtrInput `pulumi:"status"`
	// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
	SubKey pulumi.StringPtrInput `pulumi:"subKey"`
	// The type of the statistical object. Valid values:
	// - remoteAddr (default): indicates IP.
	// - cookie.acw_tc: indicates session.
	// - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
	// - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
	// - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The maximum number of requests that can be sent from a statistical object.
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// The period of time during which you want the specified action to be valid. Unit: seconds.
	// Valid values: 60 to 86400.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (DefenseRuleConfigRateLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigRateLimit)(nil)).Elem()
}

func (i DefenseRuleConfigRateLimitArgs) ToDefenseRuleConfigRateLimitOutput() DefenseRuleConfigRateLimitOutput {
	return i.ToDefenseRuleConfigRateLimitOutputWithContext(context.Background())
}

func (i DefenseRuleConfigRateLimitArgs) ToDefenseRuleConfigRateLimitOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitOutput)
}

func (i DefenseRuleConfigRateLimitArgs) ToDefenseRuleConfigRateLimitPtrOutput() DefenseRuleConfigRateLimitPtrOutput {
	return i.ToDefenseRuleConfigRateLimitPtrOutputWithContext(context.Background())
}

func (i DefenseRuleConfigRateLimitArgs) ToDefenseRuleConfigRateLimitPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitOutput).ToDefenseRuleConfigRateLimitPtrOutputWithContext(ctx)
}

// DefenseRuleConfigRateLimitPtrInput is an input type that accepts DefenseRuleConfigRateLimitArgs, DefenseRuleConfigRateLimitPtr and DefenseRuleConfigRateLimitPtrOutput values.
// You can construct a concrete instance of `DefenseRuleConfigRateLimitPtrInput` via:
//
//	        DefenseRuleConfigRateLimitArgs{...}
//
//	or:
//
//	        nil
type DefenseRuleConfigRateLimitPtrInput interface {
	pulumi.Input

	ToDefenseRuleConfigRateLimitPtrOutput() DefenseRuleConfigRateLimitPtrOutput
	ToDefenseRuleConfigRateLimitPtrOutputWithContext(context.Context) DefenseRuleConfigRateLimitPtrOutput
}

type defenseRuleConfigRateLimitPtrType DefenseRuleConfigRateLimitArgs

func DefenseRuleConfigRateLimitPtr(v *DefenseRuleConfigRateLimitArgs) DefenseRuleConfigRateLimitPtrInput {
	return (*defenseRuleConfigRateLimitPtrType)(v)
}

func (*defenseRuleConfigRateLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigRateLimit)(nil)).Elem()
}

func (i *defenseRuleConfigRateLimitPtrType) ToDefenseRuleConfigRateLimitPtrOutput() DefenseRuleConfigRateLimitPtrOutput {
	return i.ToDefenseRuleConfigRateLimitPtrOutputWithContext(context.Background())
}

func (i *defenseRuleConfigRateLimitPtrType) ToDefenseRuleConfigRateLimitPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitPtrOutput)
}

type DefenseRuleConfigRateLimitOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigRateLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigRateLimit)(nil)).Elem()
}

func (o DefenseRuleConfigRateLimitOutput) ToDefenseRuleConfigRateLimitOutput() DefenseRuleConfigRateLimitOutput {
	return o
}

func (o DefenseRuleConfigRateLimitOutput) ToDefenseRuleConfigRateLimitOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitOutput {
	return o
}

func (o DefenseRuleConfigRateLimitOutput) ToDefenseRuleConfigRateLimitPtrOutput() DefenseRuleConfigRateLimitPtrOutput {
	return o.ToDefenseRuleConfigRateLimitPtrOutputWithContext(context.Background())
}

func (o DefenseRuleConfigRateLimitOutput) ToDefenseRuleConfigRateLimitPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefenseRuleConfigRateLimit) *DefenseRuleConfigRateLimit {
		return &v
	}).(DefenseRuleConfigRateLimitPtrOutput)
}

// The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
// Valid values: 1 to 1800 seconds.
func (o DefenseRuleConfigRateLimitOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Response code frequency setting. The description is in the JSON string format. See `status` below.
func (o DefenseRuleConfigRateLimitOutput) Status() DefenseRuleConfigRateLimitStatusPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *DefenseRuleConfigRateLimitStatus { return v.Status }).(DefenseRuleConfigRateLimitStatusPtrOutput)
}

// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
func (o DefenseRuleConfigRateLimitOutput) SubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *string { return v.SubKey }).(pulumi.StringPtrOutput)
}

// The type of the statistical object. Valid values:
// - remoteAddr (default): indicates IP.
// - cookie.acw_tc: indicates session.
// - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
// - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
// - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
func (o DefenseRuleConfigRateLimitOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The maximum number of requests that can be sent from a statistical object.
func (o DefenseRuleConfigRateLimitOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// The period of time during which you want the specified action to be valid. Unit: seconds.
// Valid values: 60 to 86400.
func (o DefenseRuleConfigRateLimitOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimit) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigRateLimitPtrOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigRateLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigRateLimit)(nil)).Elem()
}

func (o DefenseRuleConfigRateLimitPtrOutput) ToDefenseRuleConfigRateLimitPtrOutput() DefenseRuleConfigRateLimitPtrOutput {
	return o
}

func (o DefenseRuleConfigRateLimitPtrOutput) ToDefenseRuleConfigRateLimitPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitPtrOutput {
	return o
}

func (o DefenseRuleConfigRateLimitPtrOutput) Elem() DefenseRuleConfigRateLimitOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) DefenseRuleConfigRateLimit {
		if v != nil {
			return *v
		}
		var ret DefenseRuleConfigRateLimit
		return ret
	}).(DefenseRuleConfigRateLimitOutput)
}

// The statistical period, in seconds. This parameter specifies the period during which access counts are collected, and works with the Threshold parameter.
// Valid values: 1 to 1800 seconds.
func (o DefenseRuleConfigRateLimitPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// Response code frequency setting. The description is in the JSON string format. See `status` below.
func (o DefenseRuleConfigRateLimitPtrOutput) Status() DefenseRuleConfigRateLimitStatusPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *DefenseRuleConfigRateLimitStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DefenseRuleConfigRateLimitStatusPtrOutput)
}

// The characteristics of the statistical object. When the Target parameter is set to cookie, header, or queryarg, you must specify the corresponding information in the Subkey parameter.
func (o DefenseRuleConfigRateLimitPtrOutput) SubKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *string {
		if v == nil {
			return nil
		}
		return v.SubKey
	}).(pulumi.StringPtrOutput)
}

// The type of the statistical object. Valid values:
// - remoteAddr (default): indicates IP.
// - cookie.acw_tc: indicates session.
// - header: indicates custom header. If you use custom headers, you must specify the headers in subkey.
// - queryarg: indicates custom parameters. If you use custom parameters, you must specify the parameters in subkey.
// - cookie: indicates custom cookies. If you use custom cookies, you must specify the cookies in subkey.
func (o DefenseRuleConfigRateLimitPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// The maximum number of requests that can be sent from a statistical object.
func (o DefenseRuleConfigRateLimitPtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *int {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.IntPtrOutput)
}

// The period of time during which you want the specified action to be valid. Unit: seconds.
// Valid values: 60 to 86400.
func (o DefenseRuleConfigRateLimitPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimit) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigRateLimitStatus struct {
	// Required. Specifies the response code.
	Code *int `pulumi:"code"`
	// The threshold for the number of occurrences. When the number of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 2 to 50000. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
	Count *int `pulumi:"count"`
	// The threshold for the proportion of occurrences (percentage). When the proportion of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 1 to 100. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
	Ratio *int `pulumi:"ratio"`
}

// DefenseRuleConfigRateLimitStatusInput is an input type that accepts DefenseRuleConfigRateLimitStatusArgs and DefenseRuleConfigRateLimitStatusOutput values.
// You can construct a concrete instance of `DefenseRuleConfigRateLimitStatusInput` via:
//
//	DefenseRuleConfigRateLimitStatusArgs{...}
type DefenseRuleConfigRateLimitStatusInput interface {
	pulumi.Input

	ToDefenseRuleConfigRateLimitStatusOutput() DefenseRuleConfigRateLimitStatusOutput
	ToDefenseRuleConfigRateLimitStatusOutputWithContext(context.Context) DefenseRuleConfigRateLimitStatusOutput
}

type DefenseRuleConfigRateLimitStatusArgs struct {
	// Required. Specifies the response code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The threshold for the number of occurrences. When the number of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 2 to 50000. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The threshold for the proportion of occurrences (percentage). When the proportion of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 1 to 100. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
	Ratio pulumi.IntPtrInput `pulumi:"ratio"`
}

func (DefenseRuleConfigRateLimitStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigRateLimitStatus)(nil)).Elem()
}

func (i DefenseRuleConfigRateLimitStatusArgs) ToDefenseRuleConfigRateLimitStatusOutput() DefenseRuleConfigRateLimitStatusOutput {
	return i.ToDefenseRuleConfigRateLimitStatusOutputWithContext(context.Background())
}

func (i DefenseRuleConfigRateLimitStatusArgs) ToDefenseRuleConfigRateLimitStatusOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitStatusOutput)
}

func (i DefenseRuleConfigRateLimitStatusArgs) ToDefenseRuleConfigRateLimitStatusPtrOutput() DefenseRuleConfigRateLimitStatusPtrOutput {
	return i.ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(context.Background())
}

func (i DefenseRuleConfigRateLimitStatusArgs) ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitStatusOutput).ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(ctx)
}

// DefenseRuleConfigRateLimitStatusPtrInput is an input type that accepts DefenseRuleConfigRateLimitStatusArgs, DefenseRuleConfigRateLimitStatusPtr and DefenseRuleConfigRateLimitStatusPtrOutput values.
// You can construct a concrete instance of `DefenseRuleConfigRateLimitStatusPtrInput` via:
//
//	        DefenseRuleConfigRateLimitStatusArgs{...}
//
//	or:
//
//	        nil
type DefenseRuleConfigRateLimitStatusPtrInput interface {
	pulumi.Input

	ToDefenseRuleConfigRateLimitStatusPtrOutput() DefenseRuleConfigRateLimitStatusPtrOutput
	ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(context.Context) DefenseRuleConfigRateLimitStatusPtrOutput
}

type defenseRuleConfigRateLimitStatusPtrType DefenseRuleConfigRateLimitStatusArgs

func DefenseRuleConfigRateLimitStatusPtr(v *DefenseRuleConfigRateLimitStatusArgs) DefenseRuleConfigRateLimitStatusPtrInput {
	return (*defenseRuleConfigRateLimitStatusPtrType)(v)
}

func (*defenseRuleConfigRateLimitStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigRateLimitStatus)(nil)).Elem()
}

func (i *defenseRuleConfigRateLimitStatusPtrType) ToDefenseRuleConfigRateLimitStatusPtrOutput() DefenseRuleConfigRateLimitStatusPtrOutput {
	return i.ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(context.Background())
}

func (i *defenseRuleConfigRateLimitStatusPtrType) ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigRateLimitStatusPtrOutput)
}

type DefenseRuleConfigRateLimitStatusOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigRateLimitStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigRateLimitStatus)(nil)).Elem()
}

func (o DefenseRuleConfigRateLimitStatusOutput) ToDefenseRuleConfigRateLimitStatusOutput() DefenseRuleConfigRateLimitStatusOutput {
	return o
}

func (o DefenseRuleConfigRateLimitStatusOutput) ToDefenseRuleConfigRateLimitStatusOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusOutput {
	return o
}

func (o DefenseRuleConfigRateLimitStatusOutput) ToDefenseRuleConfigRateLimitStatusPtrOutput() DefenseRuleConfigRateLimitStatusPtrOutput {
	return o.ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(context.Background())
}

func (o DefenseRuleConfigRateLimitStatusOutput) ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefenseRuleConfigRateLimitStatus) *DefenseRuleConfigRateLimitStatus {
		return &v
	}).(DefenseRuleConfigRateLimitStatusPtrOutput)
}

// Required. Specifies the response code.
func (o DefenseRuleConfigRateLimitStatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimitStatus) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The threshold for the number of occurrences. When the number of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 2 to 50000. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
func (o DefenseRuleConfigRateLimitStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimitStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The threshold for the proportion of occurrences (percentage). When the proportion of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 1 to 100. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
func (o DefenseRuleConfigRateLimitStatusOutput) Ratio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigRateLimitStatus) *int { return v.Ratio }).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigRateLimitStatusPtrOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigRateLimitStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigRateLimitStatus)(nil)).Elem()
}

func (o DefenseRuleConfigRateLimitStatusPtrOutput) ToDefenseRuleConfigRateLimitStatusPtrOutput() DefenseRuleConfigRateLimitStatusPtrOutput {
	return o
}

func (o DefenseRuleConfigRateLimitStatusPtrOutput) ToDefenseRuleConfigRateLimitStatusPtrOutputWithContext(ctx context.Context) DefenseRuleConfigRateLimitStatusPtrOutput {
	return o
}

func (o DefenseRuleConfigRateLimitStatusPtrOutput) Elem() DefenseRuleConfigRateLimitStatusOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimitStatus) DefenseRuleConfigRateLimitStatus {
		if v != nil {
			return *v
		}
		var ret DefenseRuleConfigRateLimitStatus
		return ret
	}).(DefenseRuleConfigRateLimitStatusOutput)
}

// Required. Specifies the response code.
func (o DefenseRuleConfigRateLimitStatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimitStatus) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The threshold for the number of occurrences. When the number of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 2 to 50000. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
func (o DefenseRuleConfigRateLimitStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimitStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// The threshold for the proportion of occurrences (percentage). When the proportion of occurrences of the specified HTTP status code exceeds this threshold, the protection rule is triggered. Valid values: 1 to 100. You can specify Count or Ratio. You cannot specify the two parameters at the same time.
func (o DefenseRuleConfigRateLimitStatusPtrOutput) Ratio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigRateLimitStatus) *int {
		if v == nil {
			return nil
		}
		return v.Ratio
	}).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigTimeConfig struct {
	// The time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `period`. A maximum of five time periods can be set. See `timePeriods` below.
	TimePeriods []DefenseRuleConfigTimeConfigTimePeriod `pulumi:"timePeriods"`
	// The effective period of the rule. Valid values:
	TimeScope *string `pulumi:"timeScope"`
	// The time zone in which the rule is effective. The default value is `8`. The value must be in the range of - 12 to 12. `0` indicates UTC. `8` indicates UTC+8. **-8** indicates UTC-8.
	TimeZone *int `pulumi:"timeZone"`
	// The periodic time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `cycle`. A maximum of five time periods can be set. See `weekTimePeriods` below.
	WeekTimePeriods []DefenseRuleConfigTimeConfigWeekTimePeriod `pulumi:"weekTimePeriods"`
}

// DefenseRuleConfigTimeConfigInput is an input type that accepts DefenseRuleConfigTimeConfigArgs and DefenseRuleConfigTimeConfigOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigInput` via:
//
//	DefenseRuleConfigTimeConfigArgs{...}
type DefenseRuleConfigTimeConfigInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigOutput() DefenseRuleConfigTimeConfigOutput
	ToDefenseRuleConfigTimeConfigOutputWithContext(context.Context) DefenseRuleConfigTimeConfigOutput
}

type DefenseRuleConfigTimeConfigArgs struct {
	// The time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `period`. A maximum of five time periods can be set. See `timePeriods` below.
	TimePeriods DefenseRuleConfigTimeConfigTimePeriodArrayInput `pulumi:"timePeriods"`
	// The effective period of the rule. Valid values:
	TimeScope pulumi.StringPtrInput `pulumi:"timeScope"`
	// The time zone in which the rule is effective. The default value is `8`. The value must be in the range of - 12 to 12. `0` indicates UTC. `8` indicates UTC+8. **-8** indicates UTC-8.
	TimeZone pulumi.IntPtrInput `pulumi:"timeZone"`
	// The periodic time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `cycle`. A maximum of five time periods can be set. See `weekTimePeriods` below.
	WeekTimePeriods DefenseRuleConfigTimeConfigWeekTimePeriodArrayInput `pulumi:"weekTimePeriods"`
}

func (DefenseRuleConfigTimeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfig)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigArgs) ToDefenseRuleConfigTimeConfigOutput() DefenseRuleConfigTimeConfigOutput {
	return i.ToDefenseRuleConfigTimeConfigOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigArgs) ToDefenseRuleConfigTimeConfigOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigOutput)
}

func (i DefenseRuleConfigTimeConfigArgs) ToDefenseRuleConfigTimeConfigPtrOutput() DefenseRuleConfigTimeConfigPtrOutput {
	return i.ToDefenseRuleConfigTimeConfigPtrOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigArgs) ToDefenseRuleConfigTimeConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigOutput).ToDefenseRuleConfigTimeConfigPtrOutputWithContext(ctx)
}

// DefenseRuleConfigTimeConfigPtrInput is an input type that accepts DefenseRuleConfigTimeConfigArgs, DefenseRuleConfigTimeConfigPtr and DefenseRuleConfigTimeConfigPtrOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigPtrInput` via:
//
//	        DefenseRuleConfigTimeConfigArgs{...}
//
//	or:
//
//	        nil
type DefenseRuleConfigTimeConfigPtrInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigPtrOutput() DefenseRuleConfigTimeConfigPtrOutput
	ToDefenseRuleConfigTimeConfigPtrOutputWithContext(context.Context) DefenseRuleConfigTimeConfigPtrOutput
}

type defenseRuleConfigTimeConfigPtrType DefenseRuleConfigTimeConfigArgs

func DefenseRuleConfigTimeConfigPtr(v *DefenseRuleConfigTimeConfigArgs) DefenseRuleConfigTimeConfigPtrInput {
	return (*defenseRuleConfigTimeConfigPtrType)(v)
}

func (*defenseRuleConfigTimeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigTimeConfig)(nil)).Elem()
}

func (i *defenseRuleConfigTimeConfigPtrType) ToDefenseRuleConfigTimeConfigPtrOutput() DefenseRuleConfigTimeConfigPtrOutput {
	return i.ToDefenseRuleConfigTimeConfigPtrOutputWithContext(context.Background())
}

func (i *defenseRuleConfigTimeConfigPtrType) ToDefenseRuleConfigTimeConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigPtrOutput)
}

type DefenseRuleConfigTimeConfigOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfig)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigOutput) ToDefenseRuleConfigTimeConfigOutput() DefenseRuleConfigTimeConfigOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigOutput) ToDefenseRuleConfigTimeConfigOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigOutput) ToDefenseRuleConfigTimeConfigPtrOutput() DefenseRuleConfigTimeConfigPtrOutput {
	return o.ToDefenseRuleConfigTimeConfigPtrOutputWithContext(context.Background())
}

func (o DefenseRuleConfigTimeConfigOutput) ToDefenseRuleConfigTimeConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefenseRuleConfigTimeConfig) *DefenseRuleConfigTimeConfig {
		return &v
	}).(DefenseRuleConfigTimeConfigPtrOutput)
}

// The time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `period`. A maximum of five time periods can be set. See `timePeriods` below.
func (o DefenseRuleConfigTimeConfigOutput) TimePeriods() DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfig) []DefenseRuleConfigTimeConfigTimePeriod { return v.TimePeriods }).(DefenseRuleConfigTimeConfigTimePeriodArrayOutput)
}

// The effective period of the rule. Valid values:
func (o DefenseRuleConfigTimeConfigOutput) TimeScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfig) *string { return v.TimeScope }).(pulumi.StringPtrOutput)
}

// The time zone in which the rule is effective. The default value is `8`. The value must be in the range of - 12 to 12. `0` indicates UTC. `8` indicates UTC+8. **-8** indicates UTC-8.
func (o DefenseRuleConfigTimeConfigOutput) TimeZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfig) *int { return v.TimeZone }).(pulumi.IntPtrOutput)
}

// The periodic time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `cycle`. A maximum of five time periods can be set. See `weekTimePeriods` below.
func (o DefenseRuleConfigTimeConfigOutput) WeekTimePeriods() DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfig) []DefenseRuleConfigTimeConfigWeekTimePeriod {
		return v.WeekTimePeriods
	}).(DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigPtrOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenseRuleConfigTimeConfig)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigPtrOutput) ToDefenseRuleConfigTimeConfigPtrOutput() DefenseRuleConfigTimeConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigPtrOutput) ToDefenseRuleConfigTimeConfigPtrOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigPtrOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigPtrOutput) Elem() DefenseRuleConfigTimeConfigOutput {
	return o.ApplyT(func(v *DefenseRuleConfigTimeConfig) DefenseRuleConfigTimeConfig {
		if v != nil {
			return *v
		}
		var ret DefenseRuleConfigTimeConfig
		return ret
	}).(DefenseRuleConfigTimeConfigOutput)
}

// The time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `period`. A maximum of five time periods can be set. See `timePeriods` below.
func (o DefenseRuleConfigTimeConfigPtrOutput) TimePeriods() DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfigTimeConfig) []DefenseRuleConfigTimeConfigTimePeriod {
		if v == nil {
			return nil
		}
		return v.TimePeriods
	}).(DefenseRuleConfigTimeConfigTimePeriodArrayOutput)
}

// The effective period of the rule. Valid values:
func (o DefenseRuleConfigTimeConfigPtrOutput) TimeScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigTimeConfig) *string {
		if v == nil {
			return nil
		}
		return v.TimeScope
	}).(pulumi.StringPtrOutput)
}

// The time zone in which the rule is effective. The default value is `8`. The value must be in the range of - 12 to 12. `0` indicates UTC. `8` indicates UTC+8. **-8** indicates UTC-8.
func (o DefenseRuleConfigTimeConfigPtrOutput) TimeZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefenseRuleConfigTimeConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.IntPtrOutput)
}

// The periodic time period during which the rule is effective. This parameter is required when you set the `TimeScope` parameter to `cycle`. A maximum of five time periods can be set. See `weekTimePeriods` below.
func (o DefenseRuleConfigTimeConfigPtrOutput) WeekTimePeriods() DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return o.ApplyT(func(v *DefenseRuleConfigTimeConfig) []DefenseRuleConfigTimeConfigWeekTimePeriod {
		if v == nil {
			return nil
		}
		return v.WeekTimePeriods
	}).(DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigTimePeriod struct {
	// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
	End *int `pulumi:"end"`
	// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
	Start *int `pulumi:"start"`
}

// DefenseRuleConfigTimeConfigTimePeriodInput is an input type that accepts DefenseRuleConfigTimeConfigTimePeriodArgs and DefenseRuleConfigTimeConfigTimePeriodOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigTimePeriodInput` via:
//
//	DefenseRuleConfigTimeConfigTimePeriodArgs{...}
type DefenseRuleConfigTimeConfigTimePeriodInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigTimePeriodOutput() DefenseRuleConfigTimeConfigTimePeriodOutput
	ToDefenseRuleConfigTimeConfigTimePeriodOutputWithContext(context.Context) DefenseRuleConfigTimeConfigTimePeriodOutput
}

type DefenseRuleConfigTimeConfigTimePeriodArgs struct {
	// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
	End pulumi.IntPtrInput `pulumi:"end"`
	// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
	Start pulumi.IntPtrInput `pulumi:"start"`
}

func (DefenseRuleConfigTimeConfigTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigTimePeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigTimePeriodArgs) ToDefenseRuleConfigTimeConfigTimePeriodOutput() DefenseRuleConfigTimeConfigTimePeriodOutput {
	return i.ToDefenseRuleConfigTimeConfigTimePeriodOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigTimePeriodArgs) ToDefenseRuleConfigTimeConfigTimePeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigTimePeriodOutput)
}

// DefenseRuleConfigTimeConfigTimePeriodArrayInput is an input type that accepts DefenseRuleConfigTimeConfigTimePeriodArray and DefenseRuleConfigTimeConfigTimePeriodArrayOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigTimePeriodArrayInput` via:
//
//	DefenseRuleConfigTimeConfigTimePeriodArray{ DefenseRuleConfigTimeConfigTimePeriodArgs{...} }
type DefenseRuleConfigTimeConfigTimePeriodArrayInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigTimePeriodArrayOutput() DefenseRuleConfigTimeConfigTimePeriodArrayOutput
	ToDefenseRuleConfigTimeConfigTimePeriodArrayOutputWithContext(context.Context) DefenseRuleConfigTimeConfigTimePeriodArrayOutput
}

type DefenseRuleConfigTimeConfigTimePeriodArray []DefenseRuleConfigTimeConfigTimePeriodInput

func (DefenseRuleConfigTimeConfigTimePeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigTimePeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigTimePeriodArray) ToDefenseRuleConfigTimeConfigTimePeriodArrayOutput() DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return i.ToDefenseRuleConfigTimeConfigTimePeriodArrayOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigTimePeriodArray) ToDefenseRuleConfigTimeConfigTimePeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigTimePeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigTimePeriodOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigTimePeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigTimePeriodOutput) ToDefenseRuleConfigTimeConfigTimePeriodOutput() DefenseRuleConfigTimeConfigTimePeriodOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigTimePeriodOutput) ToDefenseRuleConfigTimeConfigTimePeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigTimePeriodOutput {
	return o
}

// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
func (o DefenseRuleConfigTimeConfigTimePeriodOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigTimePeriod) *int { return v.End }).(pulumi.IntPtrOutput)
}

// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
func (o DefenseRuleConfigTimeConfigTimePeriodOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigTimePeriod) *int { return v.Start }).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigTimeConfigTimePeriodArrayOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigTimePeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigTimePeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigTimePeriodArrayOutput) ToDefenseRuleConfigTimeConfigTimePeriodArrayOutput() DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigTimePeriodArrayOutput) ToDefenseRuleConfigTimeConfigTimePeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigTimePeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigTimePeriodArrayOutput) Index(i pulumi.IntInput) DefenseRuleConfigTimeConfigTimePeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefenseRuleConfigTimeConfigTimePeriod {
		return vs[0].([]DefenseRuleConfigTimeConfigTimePeriod)[vs[1].(int)]
	}).(DefenseRuleConfigTimeConfigTimePeriodOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriod struct {
	// The time period of each day when the rule is effective. It includes the start time start and end time end. You can specify multiple time periods.
	Day *string `pulumi:"day"`
	// The time period of each day when the rule is effective.  See `dayPeriods` below.
	DayPeriods []DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod `pulumi:"dayPeriods"`
}

// DefenseRuleConfigTimeConfigWeekTimePeriodInput is an input type that accepts DefenseRuleConfigTimeConfigWeekTimePeriodArgs and DefenseRuleConfigTimeConfigWeekTimePeriodOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigWeekTimePeriodInput` via:
//
//	DefenseRuleConfigTimeConfigWeekTimePeriodArgs{...}
type DefenseRuleConfigTimeConfigWeekTimePeriodInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigWeekTimePeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodOutput
	ToDefenseRuleConfigTimeConfigWeekTimePeriodOutputWithContext(context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodOutput
}

type DefenseRuleConfigTimeConfigWeekTimePeriodArgs struct {
	// The time period of each day when the rule is effective. It includes the start time start and end time end. You can specify multiple time periods.
	Day pulumi.StringPtrInput `pulumi:"day"`
	// The time period of each day when the rule is effective.  See `dayPeriods` below.
	DayPeriods DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayInput `pulumi:"dayPeriods"`
}

func (DefenseRuleConfigTimeConfigWeekTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodArgs) ToDefenseRuleConfigTimeConfigWeekTimePeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodOutput {
	return i.ToDefenseRuleConfigTimeConfigWeekTimePeriodOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodArgs) ToDefenseRuleConfigTimeConfigWeekTimePeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigWeekTimePeriodOutput)
}

// DefenseRuleConfigTimeConfigWeekTimePeriodArrayInput is an input type that accepts DefenseRuleConfigTimeConfigWeekTimePeriodArray and DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigWeekTimePeriodArrayInput` via:
//
//	DefenseRuleConfigTimeConfigWeekTimePeriodArray{ DefenseRuleConfigTimeConfigWeekTimePeriodArgs{...} }
type DefenseRuleConfigTimeConfigWeekTimePeriodArrayInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput
	ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutputWithContext(context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput
}

type DefenseRuleConfigTimeConfigWeekTimePeriodArray []DefenseRuleConfigTimeConfigWeekTimePeriodInput

func (DefenseRuleConfigTimeConfigWeekTimePeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigWeekTimePeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodArray) ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return i.ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodArray) ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriodOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigWeekTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodOutput {
	return o
}

// The time period of each day when the rule is effective. It includes the start time start and end time end. You can specify multiple time periods.
func (o DefenseRuleConfigTimeConfigWeekTimePeriodOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigWeekTimePeriod) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// The time period of each day when the rule is effective.  See `dayPeriods` below.
func (o DefenseRuleConfigTimeConfigWeekTimePeriodOutput) DayPeriods() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigWeekTimePeriod) []DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod {
		return v.DayPeriods
	}).(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigWeekTimePeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput) Index(i pulumi.IntInput) DefenseRuleConfigTimeConfigWeekTimePeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefenseRuleConfigTimeConfigWeekTimePeriod {
		return vs[0].([]DefenseRuleConfigTimeConfigWeekTimePeriod)[vs[1].(int)]
	}).(DefenseRuleConfigTimeConfigWeekTimePeriodOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod struct {
	// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
	End *int `pulumi:"end"`
	// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
	Start *int `pulumi:"start"`
}

// DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodInput is an input type that accepts DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs and DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodInput` via:
//
//	DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs{...}
type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput
	ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutputWithContext(context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput
}

type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs struct {
	// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
	End pulumi.IntPtrInput `pulumi:"end"`
	// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
	Start pulumi.IntPtrInput `pulumi:"start"`
}

func (DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput {
	return i.ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput)
}

// DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayInput is an input type that accepts DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray and DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput values.
// You can construct a concrete instance of `DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayInput` via:
//
//	DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray{ DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs{...} }
type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayInput interface {
	pulumi.Input

	ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput
	ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutputWithContext(context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput
}

type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray []DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodInput

func (DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod)(nil)).Elem()
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput {
	return i.ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutputWithContext(context.Background())
}

func (i DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput {
	return o
}

// The end time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of 0-86400000).
func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod) *int { return v.End }).(pulumi.IntPtrOutput)
}

// The start time of each day when the rule is effective. This is a millisecond-level timestamp relative to 00:00 of the day. The value must be in the range of [0-86400000).
func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod) *int { return v.Start }).(pulumi.IntPtrOutput)
}

type DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput struct{ *pulumi.OutputState }

func (DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod)(nil)).Elem()
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput() DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput) ToDefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutputWithContext(ctx context.Context) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput {
	return o
}

func (o DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput) Index(i pulumi.IntInput) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod {
		return vs[0].([]DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriod)[vs[1].(int)]
	}).(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput)
}

type DomainListen struct {
	// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId *string `pulumi:"certId"`
	// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
	CipherSuite *int `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers []string `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	EnableTlsv3 *bool `pulumi:"enableTlsv3"`
	// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
	ExclusiveIp *bool `pulumi:"exclusiveIp"`
	// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
	FocusHttps *bool `pulumi:"focusHttps"`
	// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
	Http2Enabled *bool `pulumi:"http2Enabled"`
	// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
	HttpPorts []int `pulumi:"httpPorts"`
	// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
	HttpsPorts []int `pulumi:"httpsPorts"`
	// Specifies whether to enable IPv6 protection. Valid values:
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// The type of the protection resource. Valid values:
	ProtectionResource *string `pulumi:"protectionResource"`
	// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
	//
	// - true
	// - false
	Sm2AccessOnly *bool `pulumi:"sm2AccessOnly"`
	// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
	Sm2CertId *string `pulumi:"sm2CertId"`
	// Specifies whether to add an SM certificate.
	Sm2Enabled *bool `pulumi:"sm2Enabled"`
	// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	TlsVersion *string `pulumi:"tlsVersion"`
	// The method that is used to obtain the originating IP address of a client. Valid values:
	XffHeaderMode *int `pulumi:"xffHeaderMode"`
	// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
	//
	// > **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
	XffHeaders []string `pulumi:"xffHeaders"`
}

// DomainListenInput is an input type that accepts DomainListenArgs and DomainListenOutput values.
// You can construct a concrete instance of `DomainListenInput` via:
//
//	DomainListenArgs{...}
type DomainListenInput interface {
	pulumi.Input

	ToDomainListenOutput() DomainListenOutput
	ToDomainListenOutputWithContext(context.Context) DomainListenOutput
}

type DomainListenArgs struct {
	// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId pulumi.StringPtrInput `pulumi:"certId"`
	// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
	CipherSuite pulumi.IntPtrInput `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers pulumi.StringArrayInput `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	EnableTlsv3 pulumi.BoolPtrInput `pulumi:"enableTlsv3"`
	// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
	ExclusiveIp pulumi.BoolPtrInput `pulumi:"exclusiveIp"`
	// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
	FocusHttps pulumi.BoolPtrInput `pulumi:"focusHttps"`
	// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
	Http2Enabled pulumi.BoolPtrInput `pulumi:"http2Enabled"`
	// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
	HttpPorts pulumi.IntArrayInput `pulumi:"httpPorts"`
	// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
	HttpsPorts pulumi.IntArrayInput `pulumi:"httpsPorts"`
	// Specifies whether to enable IPv6 protection. Valid values:
	Ipv6Enabled pulumi.BoolPtrInput `pulumi:"ipv6Enabled"`
	// The type of the protection resource. Valid values:
	ProtectionResource pulumi.StringPtrInput `pulumi:"protectionResource"`
	// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
	//
	// - true
	// - false
	Sm2AccessOnly pulumi.BoolPtrInput `pulumi:"sm2AccessOnly"`
	// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
	Sm2CertId pulumi.StringPtrInput `pulumi:"sm2CertId"`
	// Specifies whether to add an SM certificate.
	Sm2Enabled pulumi.BoolPtrInput `pulumi:"sm2Enabled"`
	// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
	TlsVersion pulumi.StringPtrInput `pulumi:"tlsVersion"`
	// The method that is used to obtain the originating IP address of a client. Valid values:
	XffHeaderMode pulumi.IntPtrInput `pulumi:"xffHeaderMode"`
	// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
	//
	// > **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
	XffHeaders pulumi.StringArrayInput `pulumi:"xffHeaders"`
}

func (DomainListenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainListen)(nil)).Elem()
}

func (i DomainListenArgs) ToDomainListenOutput() DomainListenOutput {
	return i.ToDomainListenOutputWithContext(context.Background())
}

func (i DomainListenArgs) ToDomainListenOutputWithContext(ctx context.Context) DomainListenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenOutput)
}

func (i DomainListenArgs) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return i.ToDomainListenPtrOutputWithContext(context.Background())
}

func (i DomainListenArgs) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenOutput).ToDomainListenPtrOutputWithContext(ctx)
}

// DomainListenPtrInput is an input type that accepts DomainListenArgs, DomainListenPtr and DomainListenPtrOutput values.
// You can construct a concrete instance of `DomainListenPtrInput` via:
//
//	        DomainListenArgs{...}
//
//	or:
//
//	        nil
type DomainListenPtrInput interface {
	pulumi.Input

	ToDomainListenPtrOutput() DomainListenPtrOutput
	ToDomainListenPtrOutputWithContext(context.Context) DomainListenPtrOutput
}

type domainListenPtrType DomainListenArgs

func DomainListenPtr(v *DomainListenArgs) DomainListenPtrInput {
	return (*domainListenPtrType)(v)
}

func (*domainListenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListen)(nil)).Elem()
}

func (i *domainListenPtrType) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return i.ToDomainListenPtrOutputWithContext(context.Background())
}

func (i *domainListenPtrType) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListenPtrOutput)
}

type DomainListenOutput struct{ *pulumi.OutputState }

func (DomainListenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainListen)(nil)).Elem()
}

func (o DomainListenOutput) ToDomainListenOutput() DomainListenOutput {
	return o
}

func (o DomainListenOutput) ToDomainListenOutputWithContext(ctx context.Context) DomainListenOutput {
	return o
}

func (o DomainListenOutput) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return o.ToDomainListenPtrOutputWithContext(context.Background())
}

func (o DomainListenOutput) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainListen) *DomainListen {
		return &v
	}).(DomainListenPtrOutput)
}

// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
func (o DomainListenOutput) CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.CertId }).(pulumi.StringPtrOutput)
}

// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainListenOutput) CipherSuite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainListen) *int { return v.CipherSuite }).(pulumi.IntPtrOutput)
}

// The specific custom encryption suite to add.
func (o DomainListenOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainListen) []string { return v.CustomCiphers }).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
func (o DomainListenOutput) EnableTlsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.EnableTlsv3 }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
func (o DomainListenOutput) ExclusiveIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.ExclusiveIp }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
func (o DomainListenOutput) FocusHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.FocusHttps }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainListenOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Http2Enabled }).(pulumi.BoolPtrOutput)
}

// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
func (o DomainListenOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DomainListen) []int { return v.HttpPorts }).(pulumi.IntArrayOutput)
}

// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
func (o DomainListenOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DomainListen) []int { return v.HttpsPorts }).(pulumi.IntArrayOutput)
}

// Specifies whether to enable IPv6 protection. Valid values:
func (o DomainListenOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Ipv6Enabled }).(pulumi.BoolPtrOutput)
}

// The type of the protection resource. Valid values:
func (o DomainListenOutput) ProtectionResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.ProtectionResource }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
//
// - true
// - false
func (o DomainListenOutput) Sm2AccessOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Sm2AccessOnly }).(pulumi.BoolPtrOutput)
}

// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
func (o DomainListenOutput) Sm2CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.Sm2CertId }).(pulumi.StringPtrOutput)
}

// Specifies whether to add an SM certificate.
func (o DomainListenOutput) Sm2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainListen) *bool { return v.Sm2Enabled }).(pulumi.BoolPtrOutput)
}

// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
func (o DomainListenOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainListen) *string { return v.TlsVersion }).(pulumi.StringPtrOutput)
}

// The method that is used to obtain the originating IP address of a client. Valid values:
func (o DomainListenOutput) XffHeaderMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainListen) *int { return v.XffHeaderMode }).(pulumi.IntPtrOutput)
}

// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
//
// > **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
func (o DomainListenOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainListen) []string { return v.XffHeaders }).(pulumi.StringArrayOutput)
}

type DomainListenPtrOutput struct{ *pulumi.OutputState }

func (DomainListenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListen)(nil)).Elem()
}

func (o DomainListenPtrOutput) ToDomainListenPtrOutput() DomainListenPtrOutput {
	return o
}

func (o DomainListenPtrOutput) ToDomainListenPtrOutputWithContext(ctx context.Context) DomainListenPtrOutput {
	return o
}

func (o DomainListenPtrOutput) Elem() DomainListenOutput {
	return o.ApplyT(func(v *DomainListen) DomainListen {
		if v != nil {
			return *v
		}
		var ret DomainListen
		return ret
	}).(DomainListenOutput)
}

// The ID of the certificate to be added. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol).
func (o DomainListenPtrOutput) CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.CertId
	}).(pulumi.StringPtrOutput)
}

// The type of the cipher suites that you want to add. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainListenPtrOutput) CipherSuite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainListen) *int {
		if v == nil {
			return nil
		}
		return v.CipherSuite
	}).(pulumi.IntPtrOutput)
}

// The specific custom encryption suite to add.
func (o DomainListenPtrOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainListen) []string {
		if v == nil {
			return nil
		}
		return v.CustomCiphers
	}).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
func (o DomainListenPtrOutput) EnableTlsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTlsv3
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the exclusive IP address feature. This parameter is available only if you set `IPv6Enabled` to false and `ProtectionResource` to `share`. Valid values:
func (o DomainListenPtrOutput) ExclusiveIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.ExclusiveIp
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable force redirect from HTTP to HTTPS for received requests. This parameter is available only if you specify `HttpsPorts` and leave `HttpPorts` empty. Valid values:
func (o DomainListenPtrOutput) FocusHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.FocusHttps
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable HTTP/2. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainListenPtrOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Http2Enabled
	}).(pulumi.BoolPtrOutput)
}

// The HTTP listener ports. Specify the value in the \[**port1,port2,...**] format.
func (o DomainListenPtrOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DomainListen) []int {
		if v == nil {
			return nil
		}
		return v.HttpPorts
	}).(pulumi.IntArrayOutput)
}

// The HTTPS listener ports. Specify the value in the \[**port1,port2,...**] format.
func (o DomainListenPtrOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DomainListen) []int {
		if v == nil {
			return nil
		}
		return v.HttpsPorts
	}).(pulumi.IntArrayOutput)
}

// Specifies whether to enable IPv6 protection. Valid values:
func (o DomainListenPtrOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv6Enabled
	}).(pulumi.BoolPtrOutput)
}

// The type of the protection resource. Valid values:
func (o DomainListenPtrOutput) ProtectionResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionResource
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.
//
// - true
// - false
func (o DomainListenPtrOutput) Sm2AccessOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Sm2AccessOnly
	}).(pulumi.BoolPtrOutput)
}

// The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.
func (o DomainListenPtrOutput) Sm2CertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.Sm2CertId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to add an SM certificate.
func (o DomainListenPtrOutput) Sm2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainListen) *bool {
		if v == nil {
			return nil
		}
		return v.Sm2Enabled
	}).(pulumi.BoolPtrOutput)
}

// The version of TLS to add. This parameter is used only if the value of `HttpsPorts` is not empty (indicating that the domain name uses the HTTPS protocol). Value:
func (o DomainListenPtrOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainListen) *string {
		if v == nil {
			return nil
		}
		return v.TlsVersion
	}).(pulumi.StringPtrOutput)
}

// The method that is used to obtain the originating IP address of a client. Valid values:
func (o DomainListenPtrOutput) XffHeaderMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainListen) *int {
		if v == nil {
			return nil
		}
		return v.XffHeaderMode
	}).(pulumi.IntPtrOutput)
}

// The custom header fields that are used to obtain the originating IP address of a client. Specify the value in the **\["header1","header2",...]** format.
//
// > **NOTE:**   This parameter is required only if you set `XffHeaderMode` to 2.
func (o DomainListenPtrOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainListen) []string {
		if v == nil {
			return nil
		}
		return v.XffHeaders
	}).(pulumi.StringArrayOutput)
}

type DomainRedirect struct {
	// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
	//
	// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
	// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
	Backends []string `pulumi:"backends"`
	// The secondary IP address or domain name of the origin server.
	BackupBackends []string `pulumi:"backupBackends"`
	// Connection timeout duration. Unit: seconds.
	// Value range: 1~3600. Default value: 5.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
	FocusHttpBackend *bool `pulumi:"focusHttpBackend"`
	// Specifies whether to enable the persistent connection feature. Valid values:
	Keepalive *bool `pulumi:"keepalive"`
	// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
	//
	// > **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
	KeepaliveRequests *int `pulumi:"keepaliveRequests"`
	// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
	//
	// > **NOTE:**  How long the multiplexed long connection is idle and then released.
	KeepaliveTimeout *int `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
	Loadbalance string `pulumi:"loadbalance"`
	// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
	ReadTimeout *int `pulumi:"readTimeout"`
	// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
	// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `requestHeaders` below.
	RequestHeaders []DomainRedirectRequestHeader `pulumi:"requestHeaders"`
	// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
	Retry *bool `pulumi:"retry"`
	// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
	SniEnabled *bool `pulumi:"sniEnabled"`
	// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
	//
	// > **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
	SniHost *string `pulumi:"sniHost"`
	// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
	WriteTimeout *int `pulumi:"writeTimeout"`
	// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
	XffProto *bool `pulumi:"xffProto"`
}

// DomainRedirectInput is an input type that accepts DomainRedirectArgs and DomainRedirectOutput values.
// You can construct a concrete instance of `DomainRedirectInput` via:
//
//	DomainRedirectArgs{...}
type DomainRedirectInput interface {
	pulumi.Input

	ToDomainRedirectOutput() DomainRedirectOutput
	ToDomainRedirectOutputWithContext(context.Context) DomainRedirectOutput
}

type DomainRedirectArgs struct {
	// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
	//
	// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
	// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// The secondary IP address or domain name of the origin server.
	BackupBackends pulumi.StringArrayInput `pulumi:"backupBackends"`
	// Connection timeout duration. Unit: seconds.
	// Value range: 1~3600. Default value: 5.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
	FocusHttpBackend pulumi.BoolPtrInput `pulumi:"focusHttpBackend"`
	// Specifies whether to enable the persistent connection feature. Valid values:
	Keepalive pulumi.BoolPtrInput `pulumi:"keepalive"`
	// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
	//
	// > **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
	KeepaliveRequests pulumi.IntPtrInput `pulumi:"keepaliveRequests"`
	// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
	//
	// > **NOTE:**  How long the multiplexed long connection is idle and then released.
	KeepaliveTimeout pulumi.IntPtrInput `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
	Loadbalance pulumi.StringInput `pulumi:"loadbalance"`
	// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
	ReadTimeout pulumi.IntPtrInput `pulumi:"readTimeout"`
	// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
	// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `requestHeaders` below.
	RequestHeaders DomainRedirectRequestHeaderArrayInput `pulumi:"requestHeaders"`
	// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
	Retry pulumi.BoolPtrInput `pulumi:"retry"`
	// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
	SniEnabled pulumi.BoolPtrInput `pulumi:"sniEnabled"`
	// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
	//
	// > **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
	SniHost pulumi.StringPtrInput `pulumi:"sniHost"`
	// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
	WriteTimeout pulumi.IntPtrInput `pulumi:"writeTimeout"`
	// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
	XffProto pulumi.BoolPtrInput `pulumi:"xffProto"`
}

func (DomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (i DomainRedirectArgs) ToDomainRedirectOutput() DomainRedirectOutput {
	return i.ToDomainRedirectOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput)
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput).ToDomainRedirectPtrOutputWithContext(ctx)
}

// DomainRedirectPtrInput is an input type that accepts DomainRedirectArgs, DomainRedirectPtr and DomainRedirectPtrOutput values.
// You can construct a concrete instance of `DomainRedirectPtrInput` via:
//
//	        DomainRedirectArgs{...}
//
//	or:
//
//	        nil
type DomainRedirectPtrInput interface {
	pulumi.Input

	ToDomainRedirectPtrOutput() DomainRedirectPtrOutput
	ToDomainRedirectPtrOutputWithContext(context.Context) DomainRedirectPtrOutput
}

type domainRedirectPtrType DomainRedirectArgs

func DomainRedirectPtr(v *DomainRedirectArgs) DomainRedirectPtrInput {
	return (*domainRedirectPtrType)(v)
}

func (*domainRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectPtrOutput)
}

type DomainRedirectOutput struct{ *pulumi.OutputState }

func (DomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectOutput) ToDomainRedirectOutput() DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRedirect) *DomainRedirect {
		return &v
	}).(DomainRedirectPtrOutput)
}

// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
//
// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
func (o DomainRedirectOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRedirect) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// The secondary IP address or domain name of the origin server.
func (o DomainRedirectOutput) BackupBackends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainRedirect) []string { return v.BackupBackends }).(pulumi.StringArrayOutput)
}

// Connection timeout duration. Unit: seconds.
// Value range: 1~3600. Default value: 5.
func (o DomainRedirectOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainRedirectOutput) FocusHttpBackend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.FocusHttpBackend }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the persistent connection feature. Valid values:
func (o DomainRedirectOutput) Keepalive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.Keepalive }).(pulumi.BoolPtrOutput)
}

// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
//
// > **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
func (o DomainRedirectOutput) KeepaliveRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.KeepaliveRequests }).(pulumi.IntPtrOutput)
}

// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
//
// > **NOTE:**  How long the multiplexed long connection is idle and then released.
func (o DomainRedirectOutput) KeepaliveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.KeepaliveTimeout }).(pulumi.IntPtrOutput)
}

// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
func (o DomainRedirectOutput) Loadbalance() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRedirect) string { return v.Loadbalance }).(pulumi.StringOutput)
}

// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
func (o DomainRedirectOutput) ReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.ReadTimeout }).(pulumi.IntPtrOutput)
}

// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `requestHeaders` below.
func (o DomainRedirectOutput) RequestHeaders() DomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v DomainRedirect) []DomainRedirectRequestHeader { return v.RequestHeaders }).(DomainRedirectRequestHeaderArrayOutput)
}

// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
func (o DomainRedirectOutput) Retry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.Retry }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainRedirectOutput) SniEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.SniEnabled }).(pulumi.BoolPtrOutput)
}

// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
//
// > **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
func (o DomainRedirectOutput) SniHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *string { return v.SniHost }).(pulumi.StringPtrOutput)
}

// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
func (o DomainRedirectOutput) WriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *int { return v.WriteTimeout }).(pulumi.IntPtrOutput)
}

// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
func (o DomainRedirectOutput) XffProto() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *bool { return v.XffProto }).(pulumi.BoolPtrOutput)
}

type DomainRedirectPtrOutput struct{ *pulumi.OutputState }

func (DomainRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) Elem() DomainRedirectOutput {
	return o.ApplyT(func(v *DomainRedirect) DomainRedirect {
		if v != nil {
			return *v
		}
		var ret DomainRedirect
		return ret
	}).(DomainRedirectOutput)
}

// The IP addresses or domain names of the origin server. You cannot specify both IP addresses and domain names. If you specify domain names, the domain names can be resolved only to IPv4 addresses.
//
// - If you specify IP addresses, specify the value in the **\["ip1","ip2",...]** format. You can enter up to 20 IP addresses.
// - If you specify domain names, specify the value in the **\["domain"]** format. You can enter up to 20 domain names.
func (o DomainRedirectPtrOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainRedirect) []string {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(pulumi.StringArrayOutput)
}

// The secondary IP address or domain name of the origin server.
func (o DomainRedirectPtrOutput) BackupBackends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainRedirect) []string {
		if v == nil {
			return nil
		}
		return v.BackupBackends
	}).(pulumi.StringArrayOutput)
}

// Connection timeout duration. Unit: seconds.
// Value range: 1~3600. Default value: 5.
func (o DomainRedirectPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// Specifies whether to enable force redirect from HTTPS to HTTP for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainRedirectPtrOutput) FocusHttpBackend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.FocusHttpBackend
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the persistent connection feature. Valid values:
func (o DomainRedirectPtrOutput) Keepalive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.Keepalive
	}).(pulumi.BoolPtrOutput)
}

// The number of reused persistent connections. Valid values: 60 to 1000. Default value: 1000
//
// > **NOTE:**   This parameter specifies the number of persistent connections that can be reused after you enable the persistent connection feature.
func (o DomainRedirectPtrOutput) KeepaliveRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.KeepaliveRequests
	}).(pulumi.IntPtrOutput)
}

// Idle long connection timeout, value range: 1~60, default 15, unit: seconds.
//
// > **NOTE:**  How long the multiplexed long connection is idle and then released.
func (o DomainRedirectPtrOutput) KeepaliveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.KeepaliveTimeout
	}).(pulumi.IntPtrOutput)
}

// The load balancing algorithm that you want to use to forward requests to the origin server. Valid values:
func (o DomainRedirectPtrOutput) Loadbalance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return &v.Loadbalance
	}).(pulumi.StringPtrOutput)
}

// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
func (o DomainRedirectPtrOutput) ReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.ReadTimeout
	}).(pulumi.IntPtrOutput)
}

// The traffic marking field and value of the domain name, which is used to mark the traffic processed by WAF.
// By specifying custom request header fields and corresponding values, when the access traffic of the domain name passes through WAF, WAF automatically adds the set custom field value to the request header as a traffic mark, which facilitates the statistics of back-end services. See `requestHeaders` below.
func (o DomainRedirectPtrOutput) RequestHeaders() DomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v *DomainRedirect) []DomainRedirectRequestHeader {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(DomainRedirectRequestHeaderArrayOutput)
}

// Specifies whether WAF retries if WAF fails to forward requests to the origin server. Valid values:
func (o DomainRedirectPtrOutput) Retry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the Server Name Indication (SNI) feature for back-to-origin requests. This parameter is available only if you specify `HttpsPorts`. Valid values:
func (o DomainRedirectPtrOutput) SniEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.SniEnabled
	}).(pulumi.BoolPtrOutput)
}

// The custom value of the SNI field. If you do not specify this parameter, the value of the `Host` header field is automatically used. In most cases, you do not need to specify a custom value for the SNI field. However, if you want WAF to use an SNI field whose value is different from the value of the Host header field in back-to-origin requests, you can specify a custom value for the SNI field.
//
// > **NOTE:**   This parameter is required only if you set `SniEnabled` to true.
func (o DomainRedirectPtrOutput) SniHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return v.SniHost
	}).(pulumi.StringPtrOutput)
}

// The timeout period of write connections. Unit: seconds. Valid values: 1 to 3600. Default value: 120.
func (o DomainRedirectPtrOutput) WriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *int {
		if v == nil {
			return nil
		}
		return v.WriteTimeout
	}).(pulumi.IntPtrOutput)
}

// Specifies whether to use the X-Forward-For-Proto header field to pass the protocol used by WAF to forward requests to the origin server. Valid values:
func (o DomainRedirectPtrOutput) XffProto() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.XffProto
	}).(pulumi.BoolPtrOutput)
}

type DomainRedirectRequestHeader struct {
	// Specified custom request header fields
	Key *string `pulumi:"key"`
	// Customize the value of the request header field.
	Value *string `pulumi:"value"`
}

// DomainRedirectRequestHeaderInput is an input type that accepts DomainRedirectRequestHeaderArgs and DomainRedirectRequestHeaderOutput values.
// You can construct a concrete instance of `DomainRedirectRequestHeaderInput` via:
//
//	DomainRedirectRequestHeaderArgs{...}
type DomainRedirectRequestHeaderInput interface {
	pulumi.Input

	ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput
	ToDomainRedirectRequestHeaderOutputWithContext(context.Context) DomainRedirectRequestHeaderOutput
}

type DomainRedirectRequestHeaderArgs struct {
	// Specified custom request header fields
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Customize the value of the request header field.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainRedirectRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirectRequestHeader)(nil)).Elem()
}

func (i DomainRedirectRequestHeaderArgs) ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput {
	return i.ToDomainRedirectRequestHeaderOutputWithContext(context.Background())
}

func (i DomainRedirectRequestHeaderArgs) ToDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectRequestHeaderOutput)
}

// DomainRedirectRequestHeaderArrayInput is an input type that accepts DomainRedirectRequestHeaderArray and DomainRedirectRequestHeaderArrayOutput values.
// You can construct a concrete instance of `DomainRedirectRequestHeaderArrayInput` via:
//
//	DomainRedirectRequestHeaderArray{ DomainRedirectRequestHeaderArgs{...} }
type DomainRedirectRequestHeaderArrayInput interface {
	pulumi.Input

	ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput
	ToDomainRedirectRequestHeaderArrayOutputWithContext(context.Context) DomainRedirectRequestHeaderArrayOutput
}

type DomainRedirectRequestHeaderArray []DomainRedirectRequestHeaderInput

func (DomainRedirectRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRedirectRequestHeader)(nil)).Elem()
}

func (i DomainRedirectRequestHeaderArray) ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput {
	return i.ToDomainRedirectRequestHeaderArrayOutputWithContext(context.Background())
}

func (i DomainRedirectRequestHeaderArray) ToDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectRequestHeaderArrayOutput)
}

type DomainRedirectRequestHeaderOutput struct{ *pulumi.OutputState }

func (DomainRedirectRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirectRequestHeader)(nil)).Elem()
}

func (o DomainRedirectRequestHeaderOutput) ToDomainRedirectRequestHeaderOutput() DomainRedirectRequestHeaderOutput {
	return o
}

func (o DomainRedirectRequestHeaderOutput) ToDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderOutput {
	return o
}

// Specified custom request header fields
func (o DomainRedirectRequestHeaderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirectRequestHeader) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Customize the value of the request header field.
func (o DomainRedirectRequestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirectRequestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainRedirectRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (DomainRedirectRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainRedirectRequestHeader)(nil)).Elem()
}

func (o DomainRedirectRequestHeaderArrayOutput) ToDomainRedirectRequestHeaderArrayOutput() DomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o DomainRedirectRequestHeaderArrayOutput) ToDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) DomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o DomainRedirectRequestHeaderArrayOutput) Index(i pulumi.IntInput) DomainRedirectRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainRedirectRequestHeader {
		return vs[0].([]DomainRedirectRequestHeader)[vs[1].(int)]
	}).(DomainRedirectRequestHeaderOutput)
}

type GetDomainsDomain struct {
	// The CNAME assigned by WAF to the domain name.
	Cname string `pulumi:"cname"`
	// The name of the domain name to query.
	Domain string `pulumi:"domain"`
	// The ID of the domain. It formats as `<instance_id>:<domain>`.
	Id string `pulumi:"id"`
	// Configure listening information
	Listens []GetDomainsDomainListen `pulumi:"listens"`
	// Configure forwarding information.
	Redirects []GetDomainsDomainRedirect `pulumi:"redirects"`
	// The ID of the resource group.
	ResourceManagerResourceGroupId string `pulumi:"resourceManagerResourceGroupId"`
	// The status of the domain.
	Status string `pulumi:"status"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//	GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The CNAME assigned by WAF to the domain name.
	Cname pulumi.StringInput `pulumi:"cname"`
	// The name of the domain name to query.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the domain. It formats as `<instance_id>:<domain>`.
	Id pulumi.StringInput `pulumi:"id"`
	// Configure listening information
	Listens GetDomainsDomainListenArrayInput `pulumi:"listens"`
	// Configure forwarding information.
	Redirects GetDomainsDomainRedirectArrayInput `pulumi:"redirects"`
	// The ID of the resource group.
	ResourceManagerResourceGroupId pulumi.StringInput `pulumi:"resourceManagerResourceGroupId"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//	GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// The CNAME assigned by WAF to the domain name.
func (o GetDomainsDomainOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Cname }).(pulumi.StringOutput)
}

// The name of the domain name to query.
func (o GetDomainsDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the domain. It formats as `<instance_id>:<domain>`.
func (o GetDomainsDomainOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Id }).(pulumi.StringOutput)
}

// Configure listening information
func (o GetDomainsDomainOutput) Listens() GetDomainsDomainListenArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainListen { return v.Listens }).(GetDomainsDomainListenArrayOutput)
}

// Configure forwarding information.
func (o GetDomainsDomainOutput) Redirects() GetDomainsDomainRedirectArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainRedirect { return v.Redirects }).(GetDomainsDomainRedirectArrayOutput)
}

// The ID of the resource group.
func (o GetDomainsDomainOutput) ResourceManagerResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.ResourceManagerResourceGroupId }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetDomainsDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Status }).(pulumi.StringOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetDomainsDomainListen struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId string `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CipherSuite int `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers []string `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	EnableTlsv3 bool `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
	ExclusiveIp bool `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
	FocusHttps bool `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	Http2Enabled bool `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts []int `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts []int `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on.
	Ipv6Enabled bool `pulumi:"ipv6Enabled"`
	// The type of protection resource to use.
	ProtectionResource string `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	TlsVersion string `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client.
	XffHeaderMode int `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders []string `pulumi:"xffHeaders"`
}

// GetDomainsDomainListenInput is an input type that accepts GetDomainsDomainListenArgs and GetDomainsDomainListenOutput values.
// You can construct a concrete instance of `GetDomainsDomainListenInput` via:
//
//	GetDomainsDomainListenArgs{...}
type GetDomainsDomainListenInput interface {
	pulumi.Input

	ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput
	ToGetDomainsDomainListenOutputWithContext(context.Context) GetDomainsDomainListenOutput
}

type GetDomainsDomainListenArgs struct {
	// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CertId pulumi.StringInput `pulumi:"certId"`
	// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	CipherSuite pulumi.IntInput `pulumi:"cipherSuite"`
	// The specific custom encryption suite to add.
	CustomCiphers pulumi.StringArrayInput `pulumi:"customCiphers"`
	// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	EnableTlsv3 pulumi.BoolInput `pulumi:"enableTlsv3"`
	// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
	ExclusiveIp pulumi.BoolInput `pulumi:"exclusiveIp"`
	// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
	FocusHttps pulumi.BoolInput `pulumi:"focusHttps"`
	// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	Http2Enabled pulumi.BoolInput `pulumi:"http2Enabled"`
	// The listening port of the HTTP protocol.
	HttpPorts pulumi.IntArrayInput `pulumi:"httpPorts"`
	// The listening port of the HTTPS protocol.
	HttpsPorts pulumi.IntArrayInput `pulumi:"httpsPorts"`
	// Whether IPv6 is turned on.
	Ipv6Enabled pulumi.BoolInput `pulumi:"ipv6Enabled"`
	// The type of protection resource to use.
	ProtectionResource pulumi.StringInput `pulumi:"protectionResource"`
	// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	TlsVersion pulumi.StringInput `pulumi:"tlsVersion"`
	// WAF obtains the real IP address of the client.
	XffHeaderMode pulumi.IntInput `pulumi:"xffHeaderMode"`
	// Set the list of custom fields used to obtain the client IP address.
	XffHeaders pulumi.StringArrayInput `pulumi:"xffHeaders"`
}

func (GetDomainsDomainListenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainListen)(nil)).Elem()
}

func (i GetDomainsDomainListenArgs) ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput {
	return i.ToGetDomainsDomainListenOutputWithContext(context.Background())
}

func (i GetDomainsDomainListenArgs) ToGetDomainsDomainListenOutputWithContext(ctx context.Context) GetDomainsDomainListenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainListenOutput)
}

// GetDomainsDomainListenArrayInput is an input type that accepts GetDomainsDomainListenArray and GetDomainsDomainListenArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainListenArrayInput` via:
//
//	GetDomainsDomainListenArray{ GetDomainsDomainListenArgs{...} }
type GetDomainsDomainListenArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput
	ToGetDomainsDomainListenArrayOutputWithContext(context.Context) GetDomainsDomainListenArrayOutput
}

type GetDomainsDomainListenArray []GetDomainsDomainListenInput

func (GetDomainsDomainListenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainListen)(nil)).Elem()
}

func (i GetDomainsDomainListenArray) ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput {
	return i.ToGetDomainsDomainListenArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainListenArray) ToGetDomainsDomainListenArrayOutputWithContext(ctx context.Context) GetDomainsDomainListenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainListenArrayOutput)
}

type GetDomainsDomainListenOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainListenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainListen)(nil)).Elem()
}

func (o GetDomainsDomainListenOutput) ToGetDomainsDomainListenOutput() GetDomainsDomainListenOutput {
	return o
}

func (o GetDomainsDomainListenOutput) ToGetDomainsDomainListenOutputWithContext(ctx context.Context) GetDomainsDomainListenOutput {
	return o
}

// The ID of the certificate to be added. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.CertId }).(pulumi.StringOutput)
}

// The type of encryption suite to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) CipherSuite() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) int { return v.CipherSuite }).(pulumi.IntOutput)
}

// The specific custom encryption suite to add.
func (o GetDomainsDomainListenOutput) CustomCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []string { return v.CustomCiphers }).(pulumi.StringArrayOutput)
}

// Whether TSL1.3 version is supported. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) EnableTlsv3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.EnableTlsv3 }).(pulumi.BoolOutput)
}

// Whether to enable exclusive IP address. This parameter is used only when the value of **ipv6_enabled** is **false** (indicating that IPv6 is not enabled) and the value of **protection_resource** is **share** (indicating that a shared cluster is used).
func (o GetDomainsDomainListenOutput) ExclusiveIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.ExclusiveIp }).(pulumi.BoolOutput)
}

// Whether to enable the forced jump of HTTPS. This parameter is used only when the value of `httpsPorts` is not empty (indicating that the domain name uses HTTPS protocol) and the value of httports is empty (indicating that the domain name does not use HTTP protocol).
func (o GetDomainsDomainListenOutput) FocusHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.FocusHttps }).(pulumi.BoolOutput)
}

// Whether to turn on http2. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) Http2Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.Http2Enabled }).(pulumi.BoolOutput)
}

// The listening port of the HTTP protocol.
func (o GetDomainsDomainListenOutput) HttpPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []int { return v.HttpPorts }).(pulumi.IntArrayOutput)
}

// The listening port of the HTTPS protocol.
func (o GetDomainsDomainListenOutput) HttpsPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []int { return v.HttpsPorts }).(pulumi.IntArrayOutput)
}

// Whether IPv6 is turned on.
func (o GetDomainsDomainListenOutput) Ipv6Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) bool { return v.Ipv6Enabled }).(pulumi.BoolOutput)
}

// The type of protection resource to use.
func (o GetDomainsDomainListenOutput) ProtectionResource() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.ProtectionResource }).(pulumi.StringOutput)
}

// The version of TLS to add. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainListenOutput) TlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) string { return v.TlsVersion }).(pulumi.StringOutput)
}

// WAF obtains the real IP address of the client.
func (o GetDomainsDomainListenOutput) XffHeaderMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) int { return v.XffHeaderMode }).(pulumi.IntOutput)
}

// Set the list of custom fields used to obtain the client IP address.
func (o GetDomainsDomainListenOutput) XffHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainListen) []string { return v.XffHeaders }).(pulumi.StringArrayOutput)
}

type GetDomainsDomainListenArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainListenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainListen)(nil)).Elem()
}

func (o GetDomainsDomainListenArrayOutput) ToGetDomainsDomainListenArrayOutput() GetDomainsDomainListenArrayOutput {
	return o
}

func (o GetDomainsDomainListenArrayOutput) ToGetDomainsDomainListenArrayOutputWithContext(ctx context.Context) GetDomainsDomainListenArrayOutput {
	return o
}

func (o GetDomainsDomainListenArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainListenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainListen {
		return vs[0].([]GetDomainsDomainListen)[vs[1].(int)]
	}).(GetDomainsDomainListenOutput)
}

type GetDomainsDomainRedirect struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends []string `pulumi:"backends"`
	// Connection timeout, Unit: seconds, value range: 5~120.
	ConnectTimeout int `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	FocusHttpBackend bool `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive bool `pulumi:"keepalive"`
	// Number of long connections, default: `60`. range :60-1000.
	KeepaliveRequests int `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout int `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source.
	Loadbalance string `pulumi:"loadbalance"`
	// Read timeout duration. Unit: seconds, Value range: 5~1800.
	ReadTimeout int `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	RequestHeaders []GetDomainsDomainRedirectRequestHeader `pulumi:"requestHeaders"`
	// Back to Source Retry. default `true`, retry 3 times by default.
	Retry bool `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	SniEnabled bool `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost string `pulumi:"sniHost"`
	// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
	WriteTimeout int `pulumi:"writeTimeout"`
}

// GetDomainsDomainRedirectInput is an input type that accepts GetDomainsDomainRedirectArgs and GetDomainsDomainRedirectOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectInput` via:
//
//	GetDomainsDomainRedirectArgs{...}
type GetDomainsDomainRedirectInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput
	ToGetDomainsDomainRedirectOutputWithContext(context.Context) GetDomainsDomainRedirectOutput
}

type GetDomainsDomainRedirectArgs struct {
	// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// Connection timeout, Unit: seconds, value range: 5~120.
	ConnectTimeout pulumi.IntInput `pulumi:"connectTimeout"`
	// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	FocusHttpBackend pulumi.BoolInput `pulumi:"focusHttpBackend"`
	// Open long connection, default true.
	Keepalive pulumi.BoolInput `pulumi:"keepalive"`
	// Number of long connections, default: `60`. range :60-1000.
	KeepaliveRequests pulumi.IntInput `pulumi:"keepaliveRequests"`
	// Long connection over time, default: `15`. Range: 1-60.
	KeepaliveTimeout pulumi.IntInput `pulumi:"keepaliveTimeout"`
	// The load balancing algorithm used when returning to the source.
	Loadbalance pulumi.StringInput `pulumi:"loadbalance"`
	// Read timeout duration. Unit: seconds, Value range: 5~1800.
	ReadTimeout pulumi.IntInput `pulumi:"readTimeout"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	RequestHeaders GetDomainsDomainRedirectRequestHeaderArrayInput `pulumi:"requestHeaders"`
	// Back to Source Retry. default `true`, retry 3 times by default.
	Retry pulumi.BoolInput `pulumi:"retry"`
	// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
	SniEnabled pulumi.BoolInput `pulumi:"sniEnabled"`
	// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
	SniHost pulumi.StringInput `pulumi:"sniHost"`
	// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
	WriteTimeout pulumi.IntInput `pulumi:"writeTimeout"`
}

func (GetDomainsDomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirect)(nil)).Elem()
}

func (i GetDomainsDomainRedirectArgs) ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput {
	return i.ToGetDomainsDomainRedirectOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectArgs) ToGetDomainsDomainRedirectOutputWithContext(ctx context.Context) GetDomainsDomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectOutput)
}

// GetDomainsDomainRedirectArrayInput is an input type that accepts GetDomainsDomainRedirectArray and GetDomainsDomainRedirectArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectArrayInput` via:
//
//	GetDomainsDomainRedirectArray{ GetDomainsDomainRedirectArgs{...} }
type GetDomainsDomainRedirectArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput
	ToGetDomainsDomainRedirectArrayOutputWithContext(context.Context) GetDomainsDomainRedirectArrayOutput
}

type GetDomainsDomainRedirectArray []GetDomainsDomainRedirectInput

func (GetDomainsDomainRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirect)(nil)).Elem()
}

func (i GetDomainsDomainRedirectArray) ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput {
	return i.ToGetDomainsDomainRedirectArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectArray) ToGetDomainsDomainRedirectArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectArrayOutput)
}

type GetDomainsDomainRedirectOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirect)(nil)).Elem()
}

func (o GetDomainsDomainRedirectOutput) ToGetDomainsDomainRedirectOutput() GetDomainsDomainRedirectOutput {
	return o
}

func (o GetDomainsDomainRedirectOutput) ToGetDomainsDomainRedirectOutputWithContext(ctx context.Context) GetDomainsDomainRedirectOutput {
	return o
}

// The IP address of the origin server corresponding to the domain name or the back-to-origin domain name of the server.
func (o GetDomainsDomainRedirectOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Connection timeout, Unit: seconds, value range: 5~120.
func (o GetDomainsDomainRedirectOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// Whether to enable forced HTTP back-to-origin. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainRedirectOutput) FocusHttpBackend() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.FocusHttpBackend }).(pulumi.BoolOutput)
}

// Open long connection, default true.
func (o GetDomainsDomainRedirectOutput) Keepalive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.Keepalive }).(pulumi.BoolOutput)
}

// Number of long connections, default: `60`. range :60-1000.
func (o GetDomainsDomainRedirectOutput) KeepaliveRequests() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.KeepaliveRequests }).(pulumi.IntOutput)
}

// Long connection over time, default: `15`. Range: 1-60.
func (o GetDomainsDomainRedirectOutput) KeepaliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.KeepaliveTimeout }).(pulumi.IntOutput)
}

// The load balancing algorithm used when returning to the source.
func (o GetDomainsDomainRedirectOutput) Loadbalance() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) string { return v.Loadbalance }).(pulumi.StringOutput)
}

// Read timeout duration. Unit: seconds, Value range: 5~1800.
func (o GetDomainsDomainRedirectOutput) ReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.ReadTimeout }).(pulumi.IntOutput)
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectOutput) RequestHeaders() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) []GetDomainsDomainRedirectRequestHeader { return v.RequestHeaders }).(GetDomainsDomainRedirectRequestHeaderArrayOutput)
}

// Back to Source Retry. default `true`, retry 3 times by default.
func (o GetDomainsDomainRedirectOutput) Retry() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.Retry }).(pulumi.BoolOutput)
}

// Whether to enable back-to-source SNI. This parameter is used only if the value of **https_ports** is not empty (indicating that the domain name uses the HTTPS protocol).
func (o GetDomainsDomainRedirectOutput) SniEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) bool { return v.SniEnabled }).(pulumi.BoolOutput)
}

// Sets the value of the custom SNI extension field. If this parameter is not set, the value of the **Host** field in the request header is used as the value of the SNI extension field by default.In general, you do not need to customize SNI unless your business has special configuration requirements. You want WAF to use SNI that is inconsistent with the actual request Host in the back-to-origin request (that is, the custom SNI set here).> This parameter is required only when **sni_enalbed** is set to **true** (indicating that back-to-source SNI is enabled).
func (o GetDomainsDomainRedirectOutput) SniHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) string { return v.SniHost }).(pulumi.StringOutput)
}

// Write timeout duration. **Unit**: seconds, **Value range**:5~1800.
func (o GetDomainsDomainRedirectOutput) WriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirect) int { return v.WriteTimeout }).(pulumi.IntOutput)
}

type GetDomainsDomainRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirect)(nil)).Elem()
}

func (o GetDomainsDomainRedirectArrayOutput) ToGetDomainsDomainRedirectArrayOutput() GetDomainsDomainRedirectArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectArrayOutput) ToGetDomainsDomainRedirectArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainRedirect {
		return vs[0].([]GetDomainsDomainRedirect)[vs[1].(int)]
	}).(GetDomainsDomainRedirectOutput)
}

type GetDomainsDomainRedirectRequestHeader struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key string `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value string `pulumi:"value"`
}

// GetDomainsDomainRedirectRequestHeaderInput is an input type that accepts GetDomainsDomainRedirectRequestHeaderArgs and GetDomainsDomainRedirectRequestHeaderOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectRequestHeaderInput` via:
//
//	GetDomainsDomainRedirectRequestHeaderArgs{...}
type GetDomainsDomainRedirectRequestHeaderInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput
	ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(context.Context) GetDomainsDomainRedirectRequestHeaderOutput
}

type GetDomainsDomainRedirectRequestHeaderArgs struct {
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Key pulumi.StringInput `pulumi:"key"`
	// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainsDomainRedirectRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (i GetDomainsDomainRedirectRequestHeaderArgs) ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput {
	return i.ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectRequestHeaderArgs) ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectRequestHeaderOutput)
}

// GetDomainsDomainRedirectRequestHeaderArrayInput is an input type that accepts GetDomainsDomainRedirectRequestHeaderArray and GetDomainsDomainRedirectRequestHeaderArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainRedirectRequestHeaderArrayInput` via:
//
//	GetDomainsDomainRedirectRequestHeaderArray{ GetDomainsDomainRedirectRequestHeaderArgs{...} }
type GetDomainsDomainRedirectRequestHeaderArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput
	ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput
}

type GetDomainsDomainRedirectRequestHeaderArray []GetDomainsDomainRedirectRequestHeaderInput

func (GetDomainsDomainRedirectRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (i GetDomainsDomainRedirectRequestHeaderArray) ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return i.ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainRedirectRequestHeaderArray) ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainRedirectRequestHeaderArrayOutput)
}

type GetDomainsDomainRedirectRequestHeaderOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (o GetDomainsDomainRedirectRequestHeaderOutput) ToGetDomainsDomainRedirectRequestHeaderOutput() GetDomainsDomainRedirectRequestHeaderOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderOutput) ToGetDomainsDomainRedirectRequestHeaderOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderOutput {
	return o
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectRequestHeaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirectRequestHeader) string { return v.Key }).(pulumi.StringOutput)
}

// The traffic tag field and value of the domain name, which is used to mark the traffic processed by WAF. the format of this parameter value is **[{" k ":"_key_"," v ":"_value_"}]**. whereKeyRepresents the specified custom request header field, andValueRepresents the value set for this field.By specifying the custom request header field and the corresponding value, when the access traffic of the domain name passes through WAF, WAF automatically adds the specified custom field value to the request header as the traffic mark, which is convenient for backend service statistics.Explain that if the custom header field already exists in the request, the system will overwrite the value of the custom field in the request with the set traffic tag value.
func (o GetDomainsDomainRedirectRequestHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainRedirectRequestHeader) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainsDomainRedirectRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainRedirectRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainRedirectRequestHeader)(nil)).Elem()
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) ToGetDomainsDomainRedirectRequestHeaderArrayOutput() GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) ToGetDomainsDomainRedirectRequestHeaderArrayOutputWithContext(ctx context.Context) GetDomainsDomainRedirectRequestHeaderArrayOutput {
	return o
}

func (o GetDomainsDomainRedirectRequestHeaderArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainRedirectRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainRedirectRequestHeader {
		return vs[0].([]GetDomainsDomainRedirectRequestHeader)[vs[1].(int)]
	}).(GetDomainsDomainRedirectRequestHeaderOutput)
}

type GetInstancesInstance struct {
	// The creation time of the resource.
	CreateTime string `pulumi:"createTime"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The first ID of the resource.
	InstanceId string `pulumi:"instanceId"`
	// The status of the resource.
	Status string `pulumi:"status"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The creation time of the resource.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The first ID of the resource.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The status of the resource.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The creation time of the resource.
func (o GetInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The first ID of the resource.
func (o GetInstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The status of the resource.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigInput)(nil)).Elem(), DefenseRuleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigPtrInput)(nil)).Elem(), DefenseRuleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigAccountIdentifierInput)(nil)).Elem(), DefenseRuleConfigAccountIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigAccountIdentifierArrayInput)(nil)).Elem(), DefenseRuleConfigAccountIdentifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigConditionInput)(nil)).Elem(), DefenseRuleConfigConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigConditionArrayInput)(nil)).Elem(), DefenseRuleConfigConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigGrayConfigInput)(nil)).Elem(), DefenseRuleConfigGrayConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigGrayConfigPtrInput)(nil)).Elem(), DefenseRuleConfigGrayConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigRateLimitInput)(nil)).Elem(), DefenseRuleConfigRateLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigRateLimitPtrInput)(nil)).Elem(), DefenseRuleConfigRateLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigRateLimitStatusInput)(nil)).Elem(), DefenseRuleConfigRateLimitStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigRateLimitStatusPtrInput)(nil)).Elem(), DefenseRuleConfigRateLimitStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigInput)(nil)).Elem(), DefenseRuleConfigTimeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigPtrInput)(nil)).Elem(), DefenseRuleConfigTimeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigTimePeriodInput)(nil)).Elem(), DefenseRuleConfigTimeConfigTimePeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigTimePeriodArrayInput)(nil)).Elem(), DefenseRuleConfigTimeConfigTimePeriodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodInput)(nil)).Elem(), DefenseRuleConfigTimeConfigWeekTimePeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodArrayInput)(nil)).Elem(), DefenseRuleConfigTimeConfigWeekTimePeriodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodInput)(nil)).Elem(), DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayInput)(nil)).Elem(), DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListenInput)(nil)).Elem(), DomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListenPtrInput)(nil)).Elem(), DomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectPtrInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectRequestHeaderInput)(nil)).Elem(), DomainRedirectRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectRequestHeaderArrayInput)(nil)).Elem(), DomainRedirectRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainInput)(nil)).Elem(), GetDomainsDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainArrayInput)(nil)).Elem(), GetDomainsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainListenInput)(nil)).Elem(), GetDomainsDomainListenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainListenArrayInput)(nil)).Elem(), GetDomainsDomainListenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectInput)(nil)).Elem(), GetDomainsDomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectArrayInput)(nil)).Elem(), GetDomainsDomainRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectRequestHeaderInput)(nil)).Elem(), GetDomainsDomainRedirectRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainRedirectRequestHeaderArrayInput)(nil)).Elem(), GetDomainsDomainRedirectRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterOutputType(DefenseRuleConfigOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigPtrOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigAccountIdentifierOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigAccountIdentifierArrayOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigConditionOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigConditionArrayOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigGrayConfigOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigGrayConfigPtrOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigRateLimitOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigRateLimitPtrOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigRateLimitStatusOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigRateLimitStatusPtrOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigPtrOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigTimePeriodOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigTimePeriodArrayOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigWeekTimePeriodOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigWeekTimePeriodArrayOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodOutput{})
	pulumi.RegisterOutputType(DefenseRuleConfigTimeConfigWeekTimePeriodDayPeriodArrayOutput{})
	pulumi.RegisterOutputType(DomainListenOutput{})
	pulumi.RegisterOutputType(DomainListenPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectOutput{})
	pulumi.RegisterOutputType(DomainRedirectPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectRequestHeaderOutput{})
	pulumi.RegisterOutputType(DomainRedirectRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainListenOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainListenArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectRequestHeaderOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainRedirectRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
}
