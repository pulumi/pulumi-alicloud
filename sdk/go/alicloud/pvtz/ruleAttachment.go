// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pvtz

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Private Zone Rule Attachment resource.
//
// For information about Private Zone Rule Attachment and how to use it, see [What is Rule Attachment](https://www.alibabacloud.com/help/en/doc-detail/177601.htm).
//
// > **NOTE:** Available since v1.143.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ecs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/pvtz"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "example_value"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultInteger, err := random.NewInteger(ctx, "default", &random.IntegerArgs{
//				Min: 10000,
//				Max: 99999,
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := pvtz.GetResolverZones(ctx, &pvtz.GetResolverZonesArgs{
//				Status: pulumi.StringRef("NORMAL"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetRegions, err := alicloud.GetRegions(ctx, &alicloud.GetRegionsArgs{
//				Current: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var defaultNetwork []*vpc.Network
//			for index := 0; index < 3; index++ {
//				key0 := index
//				_ := index
//				__res, err := vpc.NewNetwork(ctx, fmt.Sprintf("default-%v", key0), &vpc.NetworkArgs{
//					VpcName:   pulumi.String(name),
//					CidrBlock: pulumi.String("172.16.0.0/12"),
//				})
//				if err != nil {
//					return err
//				}
//				defaultNetwork = append(defaultNetwork, __res)
//			}
//			var defaultSwitch []*vpc.Switch
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := vpc.NewSwitch(ctx, fmt.Sprintf("default-%v", key0), &vpc.SwitchArgs{
//					VpcId: defaultNetwork[2].ID(),
//					CidrBlock: pulumi.String(defaultNetwork[2].CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
//						return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
//							Input:   cidrBlock,
//							Newbits: 8,
//							Netnum:  val0,
//						}, nil))), nil
//					}).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
//						return invoke.Result, nil
//					}).(pulumi.StringPtrOutput)),
//					ZoneId: pulumi.String(_default.Zones[val0].ZoneId),
//				})
//				if err != nil {
//					return err
//				}
//				defaultSwitch = append(defaultSwitch, __res)
//			}
//			defaultSecurityGroup, err := ecs.NewSecurityGroup(ctx, "default", &ecs.SecurityGroupArgs{
//				VpcId: defaultNetwork[2].ID(),
//				Name:  pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			defaultEndpoint, err := pvtz.NewEndpoint(ctx, "default", &pvtz.EndpointArgs{
//				EndpointName:    pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
//				SecurityGroupId: defaultSecurityGroup.ID(),
//				VpcId:           defaultNetwork[2].ID(),
//				VpcRegionId:     pulumi.String(defaultGetRegions.Regions[0].Id),
//				IpConfigs: pvtz.EndpointIpConfigArray{
//					&pvtz.EndpointIpConfigArgs{
//						ZoneId:    defaultSwitch[0].ZoneId,
//						CidrBlock: defaultSwitch[0].CidrBlock,
//						VswitchId: defaultSwitch[0].ID(),
//					},
//					&pvtz.EndpointIpConfigArgs{
//						ZoneId:    defaultSwitch[1].ZoneId,
//						CidrBlock: defaultSwitch[1].CidrBlock,
//						VswitchId: defaultSwitch[1].ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultRule, err := pvtz.NewRule(ctx, "default", &pvtz.RuleArgs{
//				EndpointId: defaultEndpoint.ID(),
//				RuleName:   pulumi.Sprintf("%v-%v", name, defaultInteger.Result),
//				Type:       pulumi.String("OUTBOUND"),
//				ZoneName:   pulumi.String(name),
//				ForwardIps: pvtz.RuleForwardIpArray{
//					&pvtz.RuleForwardIpArgs{
//						Ip:   pulumi.String("114.114.114.114"),
//						Port: pulumi.Int(8080),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pvtz.NewRuleAttachment(ctx, "default", &pvtz.RuleAttachmentArgs{
//				RuleId: defaultRule.ID(),
//				Vpcs: pvtz.RuleAttachmentVpcArray{
//					&pvtz.RuleAttachmentVpcArgs{
//						RegionId: pulumi.String(defaultGetRegions.Regions[0].Id),
//						VpcId:    defaultNetwork[0].ID(),
//					},
//					&pvtz.RuleAttachmentVpcArgs{
//						RegionId: pulumi.String(defaultGetRegions.Regions[0].Id),
//						VpcId:    defaultNetwork[1].ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private Zone Rule Attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:pvtz/ruleAttachment:RuleAttachment example <rule_id>
// ```
type RuleAttachment struct {
	pulumi.CustomResourceState

	// The ID of the rule.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// The List of the VPC. See `vpcs` below.
	Vpcs RuleAttachmentVpcArrayOutput `pulumi:"vpcs"`
}

// NewRuleAttachment registers a new resource with the given unique name, arguments, and options.
func NewRuleAttachment(ctx *pulumi.Context,
	name string, args *RuleAttachmentArgs, opts ...pulumi.ResourceOption) (*RuleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.Vpcs == nil {
		return nil, errors.New("invalid value for required argument 'Vpcs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleAttachment
	err := ctx.RegisterResource("alicloud:pvtz/ruleAttachment:RuleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleAttachment gets an existing RuleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleAttachmentState, opts ...pulumi.ResourceOption) (*RuleAttachment, error) {
	var resource RuleAttachment
	err := ctx.ReadResource("alicloud:pvtz/ruleAttachment:RuleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleAttachment resources.
type ruleAttachmentState struct {
	// The ID of the rule.
	RuleId *string `pulumi:"ruleId"`
	// The List of the VPC. See `vpcs` below.
	Vpcs []RuleAttachmentVpc `pulumi:"vpcs"`
}

type RuleAttachmentState struct {
	// The ID of the rule.
	RuleId pulumi.StringPtrInput
	// The List of the VPC. See `vpcs` below.
	Vpcs RuleAttachmentVpcArrayInput
}

func (RuleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleAttachmentState)(nil)).Elem()
}

type ruleAttachmentArgs struct {
	// The ID of the rule.
	RuleId string `pulumi:"ruleId"`
	// The List of the VPC. See `vpcs` below.
	Vpcs []RuleAttachmentVpc `pulumi:"vpcs"`
}

// The set of arguments for constructing a RuleAttachment resource.
type RuleAttachmentArgs struct {
	// The ID of the rule.
	RuleId pulumi.StringInput
	// The List of the VPC. See `vpcs` below.
	Vpcs RuleAttachmentVpcArrayInput
}

func (RuleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleAttachmentArgs)(nil)).Elem()
}

type RuleAttachmentInput interface {
	pulumi.Input

	ToRuleAttachmentOutput() RuleAttachmentOutput
	ToRuleAttachmentOutputWithContext(ctx context.Context) RuleAttachmentOutput
}

func (*RuleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAttachment)(nil)).Elem()
}

func (i *RuleAttachment) ToRuleAttachmentOutput() RuleAttachmentOutput {
	return i.ToRuleAttachmentOutputWithContext(context.Background())
}

func (i *RuleAttachment) ToRuleAttachmentOutputWithContext(ctx context.Context) RuleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAttachmentOutput)
}

// RuleAttachmentArrayInput is an input type that accepts RuleAttachmentArray and RuleAttachmentArrayOutput values.
// You can construct a concrete instance of `RuleAttachmentArrayInput` via:
//
//	RuleAttachmentArray{ RuleAttachmentArgs{...} }
type RuleAttachmentArrayInput interface {
	pulumi.Input

	ToRuleAttachmentArrayOutput() RuleAttachmentArrayOutput
	ToRuleAttachmentArrayOutputWithContext(context.Context) RuleAttachmentArrayOutput
}

type RuleAttachmentArray []RuleAttachmentInput

func (RuleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleAttachment)(nil)).Elem()
}

func (i RuleAttachmentArray) ToRuleAttachmentArrayOutput() RuleAttachmentArrayOutput {
	return i.ToRuleAttachmentArrayOutputWithContext(context.Background())
}

func (i RuleAttachmentArray) ToRuleAttachmentArrayOutputWithContext(ctx context.Context) RuleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAttachmentArrayOutput)
}

// RuleAttachmentMapInput is an input type that accepts RuleAttachmentMap and RuleAttachmentMapOutput values.
// You can construct a concrete instance of `RuleAttachmentMapInput` via:
//
//	RuleAttachmentMap{ "key": RuleAttachmentArgs{...} }
type RuleAttachmentMapInput interface {
	pulumi.Input

	ToRuleAttachmentMapOutput() RuleAttachmentMapOutput
	ToRuleAttachmentMapOutputWithContext(context.Context) RuleAttachmentMapOutput
}

type RuleAttachmentMap map[string]RuleAttachmentInput

func (RuleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleAttachment)(nil)).Elem()
}

func (i RuleAttachmentMap) ToRuleAttachmentMapOutput() RuleAttachmentMapOutput {
	return i.ToRuleAttachmentMapOutputWithContext(context.Background())
}

func (i RuleAttachmentMap) ToRuleAttachmentMapOutputWithContext(ctx context.Context) RuleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAttachmentMapOutput)
}

type RuleAttachmentOutput struct{ *pulumi.OutputState }

func (RuleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAttachment)(nil)).Elem()
}

func (o RuleAttachmentOutput) ToRuleAttachmentOutput() RuleAttachmentOutput {
	return o
}

func (o RuleAttachmentOutput) ToRuleAttachmentOutputWithContext(ctx context.Context) RuleAttachmentOutput {
	return o
}

// The ID of the rule.
func (o RuleAttachmentOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleAttachment) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// The List of the VPC. See `vpcs` below.
func (o RuleAttachmentOutput) Vpcs() RuleAttachmentVpcArrayOutput {
	return o.ApplyT(func(v *RuleAttachment) RuleAttachmentVpcArrayOutput { return v.Vpcs }).(RuleAttachmentVpcArrayOutput)
}

type RuleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (RuleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleAttachment)(nil)).Elem()
}

func (o RuleAttachmentArrayOutput) ToRuleAttachmentArrayOutput() RuleAttachmentArrayOutput {
	return o
}

func (o RuleAttachmentArrayOutput) ToRuleAttachmentArrayOutputWithContext(ctx context.Context) RuleAttachmentArrayOutput {
	return o
}

func (o RuleAttachmentArrayOutput) Index(i pulumi.IntInput) RuleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleAttachment {
		return vs[0].([]*RuleAttachment)[vs[1].(int)]
	}).(RuleAttachmentOutput)
}

type RuleAttachmentMapOutput struct{ *pulumi.OutputState }

func (RuleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleAttachment)(nil)).Elem()
}

func (o RuleAttachmentMapOutput) ToRuleAttachmentMapOutput() RuleAttachmentMapOutput {
	return o
}

func (o RuleAttachmentMapOutput) ToRuleAttachmentMapOutputWithContext(ctx context.Context) RuleAttachmentMapOutput {
	return o
}

func (o RuleAttachmentMapOutput) MapIndex(k pulumi.StringInput) RuleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleAttachment {
		return vs[0].(map[string]*RuleAttachment)[vs[1].(string)]
	}).(RuleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAttachmentInput)(nil)).Elem(), &RuleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAttachmentArrayInput)(nil)).Elem(), RuleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAttachmentMapInput)(nil)).Elem(), RuleAttachmentMap{})
	pulumi.RegisterOutputType(RuleAttachmentOutput{})
	pulumi.RegisterOutputType(RuleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(RuleAttachmentMapOutput{})
}
