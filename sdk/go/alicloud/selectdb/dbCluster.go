// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package selectdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SelectDB DBCluster resource.
//
// For information about SelectDB DBCluster and how to use it, see [What is DBCluster](https://www.alibabacloud.com/help/zh/selectdb/latest/api-selectdb-2023-05-22-createdbcluster).
//
// > **NOTE:** Available since v1.229.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/selectdb"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			name := "terraform_example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultGetNetworks, err := vpc.GetNetworks(ctx, &vpc.GetNetworksArgs{
//				NameRegex: pulumi.StringRef("^default-NODELETING$"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultGetSwitches, err := vpc.GetSwitches(ctx, &vpc.GetSwitchesArgs{
//				VpcId:  pulumi.StringRef(defaultGetNetworks.Ids[0]),
//				ZoneId: pulumi.StringRef(_default.Zones[0].Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultDbInstance, err := selectdb.NewDbInstance(ctx, "default", &selectdb.DbInstanceArgs{
//				DbInstanceClass:       pulumi.String("selectdb.xlarge"),
//				DbInstanceDescription: pulumi.String(name),
//				CacheSize:             pulumi.Int(200),
//				PaymentType:           pulumi.String("PayAsYouGo"),
//				VpcId:                 pulumi.String(defaultGetSwitches.Vswitches[0].VpcId),
//				ZoneId:                pulumi.String(defaultGetSwitches.Vswitches[0].ZoneId),
//				VswitchId:             pulumi.String(defaultGetSwitches.Vswitches[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = selectdb.NewDbCluster(ctx, "default", &selectdb.DbClusterArgs{
//				DbInstanceId:         defaultDbInstance.ID(),
//				DbClusterDescription: pulumi.String(name),
//				DbClusterClass:       pulumi.String("selectdb.2xlarge"),
//				CacheSize:            pulumi.Int(400),
//				PaymentType:          pulumi.String("PayAsYouGo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SelectDB DBCluster can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:selectdb/dbCluster:DbCluster example <db_instance_id>:<db_cluster_id>
// ```
type DbCluster struct {
	pulumi.CustomResourceState

	// The desired cache size on creating cluster. The number should be divided by 100.
	CacheSize pulumi.IntOutput `pulumi:"cacheSize"`
	// The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
	Cpu pulumi.IntOutput `pulumi:"cpu"`
	// The time when DBCluster is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
	DbClusterClass pulumi.StringOutput `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription pulumi.StringOutput `pulumi:"dbClusterDescription"`
	// The id of the cluster.
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// The modified parameter in DBCluster. See `desiredParams` below.
	DesiredParams DbClusterDesiredParamArrayOutput `pulumi:"desiredParams"`
	// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
	DesiredStatus pulumi.StringPtrOutput `pulumi:"desiredStatus"`
	// The engine of DBCluster. Always `selectdb`.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The version of DBCluster.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The memory resource amount of DBCluster. Depends on `dbClusterClass`.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// The details about parameter changelogs in DBCluster returned.
	ParamChangeLogs DbClusterParamChangeLogArrayOutput `pulumi:"paramChangeLogs"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringOutput `pulumi:"paymentType"`
	// The ID of region for the cluster.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The current status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the VPC for the cluster.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The ID of zone for the cluster.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDbCluster registers a new resource with the given unique name, arguments, and options.
func NewDbCluster(ctx *pulumi.Context,
	name string, args *DbClusterArgs, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CacheSize == nil {
		return nil, errors.New("invalid value for required argument 'CacheSize'")
	}
	if args.DbClusterClass == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterClass'")
	}
	if args.DbClusterDescription == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterDescription'")
	}
	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.PaymentType == nil {
		return nil, errors.New("invalid value for required argument 'PaymentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbCluster
	err := ctx.RegisterResource("alicloud:selectdb/dbCluster:DbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbCluster gets an existing DbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbClusterState, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	var resource DbCluster
	err := ctx.ReadResource("alicloud:selectdb/dbCluster:DbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbCluster resources.
type dbClusterState struct {
	// The desired cache size on creating cluster. The number should be divided by 100.
	CacheSize *int `pulumi:"cacheSize"`
	// The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
	Cpu *int `pulumi:"cpu"`
	// The time when DBCluster is created.
	CreateTime *string `pulumi:"createTime"`
	// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
	DbClusterClass *string `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription *string `pulumi:"dbClusterDescription"`
	// The id of the cluster.
	DbClusterId *string `pulumi:"dbClusterId"`
	// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// The modified parameter in DBCluster. See `desiredParams` below.
	DesiredParams []DbClusterDesiredParam `pulumi:"desiredParams"`
	// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
	DesiredStatus *string `pulumi:"desiredStatus"`
	// The engine of DBCluster. Always `selectdb`.
	Engine *string `pulumi:"engine"`
	// The version of DBCluster.
	EngineVersion *string `pulumi:"engineVersion"`
	// The memory resource amount of DBCluster. Depends on `dbClusterClass`.
	Memory *int `pulumi:"memory"`
	// The details about parameter changelogs in DBCluster returned.
	ParamChangeLogs []DbClusterParamChangeLog `pulumi:"paramChangeLogs"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType *string `pulumi:"paymentType"`
	// The ID of region for the cluster.
	RegionId *string `pulumi:"regionId"`
	// The current status of the resource.
	Status *string `pulumi:"status"`
	// The ID of the VPC for the cluster.
	VpcId *string `pulumi:"vpcId"`
	// The ID of zone for the cluster.
	ZoneId *string `pulumi:"zoneId"`
}

type DbClusterState struct {
	// The desired cache size on creating cluster. The number should be divided by 100.
	CacheSize pulumi.IntPtrInput
	// The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
	Cpu pulumi.IntPtrInput
	// The time when DBCluster is created.
	CreateTime pulumi.StringPtrInput
	// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
	DbClusterClass pulumi.StringPtrInput
	// The DBCluster description.
	DbClusterDescription pulumi.StringPtrInput
	// The id of the cluster.
	DbClusterId pulumi.StringPtrInput
	// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
	DbInstanceId pulumi.StringPtrInput
	// The modified parameter in DBCluster. See `desiredParams` below.
	DesiredParams DbClusterDesiredParamArrayInput
	// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
	DesiredStatus pulumi.StringPtrInput
	// The engine of DBCluster. Always `selectdb`.
	Engine pulumi.StringPtrInput
	// The version of DBCluster.
	EngineVersion pulumi.StringPtrInput
	// The memory resource amount of DBCluster. Depends on `dbClusterClass`.
	Memory pulumi.IntPtrInput
	// The details about parameter changelogs in DBCluster returned.
	ParamChangeLogs DbClusterParamChangeLogArrayInput
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringPtrInput
	// The ID of region for the cluster.
	RegionId pulumi.StringPtrInput
	// The current status of the resource.
	Status pulumi.StringPtrInput
	// The ID of the VPC for the cluster.
	VpcId pulumi.StringPtrInput
	// The ID of zone for the cluster.
	ZoneId pulumi.StringPtrInput
}

func (DbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterState)(nil)).Elem()
}

type dbClusterArgs struct {
	// The desired cache size on creating cluster. The number should be divided by 100.
	CacheSize int `pulumi:"cacheSize"`
	// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
	DbClusterClass string `pulumi:"dbClusterClass"`
	// The DBCluster description.
	DbClusterDescription string `pulumi:"dbClusterDescription"`
	// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// The modified parameter in DBCluster. See `desiredParams` below.
	DesiredParams []DbClusterDesiredParam `pulumi:"desiredParams"`
	// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
	DesiredStatus *string `pulumi:"desiredStatus"`
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType string `pulumi:"paymentType"`
}

// The set of arguments for constructing a DbCluster resource.
type DbClusterArgs struct {
	// The desired cache size on creating cluster. The number should be divided by 100.
	CacheSize pulumi.IntInput
	// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
	DbClusterClass pulumi.StringInput
	// The DBCluster description.
	DbClusterDescription pulumi.StringInput
	// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
	DbInstanceId pulumi.StringInput
	// The modified parameter in DBCluster. See `desiredParams` below.
	DesiredParams DbClusterDesiredParamArrayInput
	// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
	DesiredStatus pulumi.StringPtrInput
	// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
	PaymentType pulumi.StringInput
}

func (DbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterArgs)(nil)).Elem()
}

type DbClusterInput interface {
	pulumi.Input

	ToDbClusterOutput() DbClusterOutput
	ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput
}

func (*DbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (i *DbCluster) ToDbClusterOutput() DbClusterOutput {
	return i.ToDbClusterOutputWithContext(context.Background())
}

func (i *DbCluster) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterOutput)
}

// DbClusterArrayInput is an input type that accepts DbClusterArray and DbClusterArrayOutput values.
// You can construct a concrete instance of `DbClusterArrayInput` via:
//
//	DbClusterArray{ DbClusterArgs{...} }
type DbClusterArrayInput interface {
	pulumi.Input

	ToDbClusterArrayOutput() DbClusterArrayOutput
	ToDbClusterArrayOutputWithContext(context.Context) DbClusterArrayOutput
}

type DbClusterArray []DbClusterInput

func (DbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (i DbClusterArray) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return i.ToDbClusterArrayOutputWithContext(context.Background())
}

func (i DbClusterArray) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterArrayOutput)
}

// DbClusterMapInput is an input type that accepts DbClusterMap and DbClusterMapOutput values.
// You can construct a concrete instance of `DbClusterMapInput` via:
//
//	DbClusterMap{ "key": DbClusterArgs{...} }
type DbClusterMapInput interface {
	pulumi.Input

	ToDbClusterMapOutput() DbClusterMapOutput
	ToDbClusterMapOutputWithContext(context.Context) DbClusterMapOutput
}

type DbClusterMap map[string]DbClusterInput

func (DbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (i DbClusterMap) ToDbClusterMapOutput() DbClusterMapOutput {
	return i.ToDbClusterMapOutputWithContext(context.Background())
}

func (i DbClusterMap) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterMapOutput)
}

type DbClusterOutput struct{ *pulumi.OutputState }

func (DbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (o DbClusterOutput) ToDbClusterOutput() DbClusterOutput {
	return o
}

func (o DbClusterOutput) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return o
}

// The desired cache size on creating cluster. The number should be divided by 100.
func (o DbClusterOutput) CacheSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.CacheSize }).(pulumi.IntOutput)
}

// The cpu resource amount of DBCluster. Depends on `dbClusterClass`.
func (o DbClusterOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

// The time when DBCluster is created.
func (o DbClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The DBCluster class. dbClusterClass has a range of class from `selectdb.xlarge` to `selectdb.256xlarge`.
func (o DbClusterOutput) DbClusterClass() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterClass }).(pulumi.StringOutput)
}

// The DBCluster description.
func (o DbClusterOutput) DbClusterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterDescription }).(pulumi.StringOutput)
}

// The id of the cluster.
func (o DbClusterOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// The InstanceId of DBInstance for DBCluster. Every DBCluster requires one DBInstance to rely on.
func (o DbClusterOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// The modified parameter in DBCluster. See `desiredParams` below.
func (o DbClusterOutput) DesiredParams() DbClusterDesiredParamArrayOutput {
	return o.ApplyT(func(v *DbCluster) DbClusterDesiredParamArrayOutput { return v.DesiredParams }).(DbClusterDesiredParamArrayOutput)
}

// The desired status for the resource. Valid values: `ACTIVATION`,`STOPPED`,`STARTING`,`RESTART`.
func (o DbClusterOutput) DesiredStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.DesiredStatus }).(pulumi.StringPtrOutput)
}

// The engine of DBCluster. Always `selectdb`.
func (o DbClusterOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The version of DBCluster.
func (o DbClusterOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The memory resource amount of DBCluster. Depends on `dbClusterClass`.
func (o DbClusterOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// The details about parameter changelogs in DBCluster returned.
func (o DbClusterOutput) ParamChangeLogs() DbClusterParamChangeLogArrayOutput {
	return o.ApplyT(func(v *DbCluster) DbClusterParamChangeLogArrayOutput { return v.ParamChangeLogs }).(DbClusterParamChangeLogArrayOutput)
}

// The payment type of the resource. Valid values: `PayAsYouGo`,`Subscription`.
func (o DbClusterOutput) PaymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.PaymentType }).(pulumi.StringOutput)
}

// The ID of region for the cluster.
func (o DbClusterOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The current status of the resource.
func (o DbClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the VPC for the cluster.
func (o DbClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of zone for the cluster.
func (o DbClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DbClusterArrayOutput struct{ *pulumi.OutputState }

func (DbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) Index(i pulumi.IntInput) DbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].([]*DbCluster)[vs[1].(int)]
	}).(DbClusterOutput)
}

type DbClusterMapOutput struct{ *pulumi.OutputState }

func (DbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (o DbClusterMapOutput) ToDbClusterMapOutput() DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) MapIndex(k pulumi.StringInput) DbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].(map[string]*DbCluster)[vs[1].(string)]
	}).(DbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterInput)(nil)).Elem(), &DbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterArrayInput)(nil)).Elem(), DbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterMapInput)(nil)).Elem(), DbClusterMap{})
	pulumi.RegisterOutputType(DbClusterOutput{})
	pulumi.RegisterOutputType(DbClusterArrayOutput{})
	pulumi.RegisterOutputType(DbClusterMapOutput{})
}
