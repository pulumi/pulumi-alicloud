// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package drds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DRDS Polardb X Instance resource.
//
// For information about DRDS Polardb X Instance and how to use it, see [What is Polardb X Instance](https://www.alibabacloud.com/help/en/polardb/polardb-for-xscale/api-createdbinstance-1).
//
// > **NOTE:** Available since v1.211.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/drds"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			defaultZones, err := alicloud.GetZones(ctx, &alicloud.GetZonesArgs{
//				AvailableResourceCreation: pulumi.StringRef("VSwitch"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := vpc.NewNetwork(ctx, "exampleNetwork", &vpc.NetworkArgs{
//				VpcName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSwitch, err := vpc.NewSwitch(ctx, "exampleSwitch", &vpc.SwitchArgs{
//				VpcId:       exampleNetwork.ID(),
//				ZoneId:      *pulumi.String(defaultZones.Zones[0].Id),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				VswitchName: pulumi.String(name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = drds.NewPolardbxInstance(ctx, "defaultPolardbxInstance", &drds.PolardbxInstanceArgs{
//				TopologyType:  pulumi.String("3azones"),
//				VswitchId:     exampleSwitch.ID(),
//				PrimaryZone:   pulumi.String("ap-southeast-1a"),
//				CnNodeCount:   pulumi.Int(2),
//				DnClass:       pulumi.String("mysql.n4.medium.25"),
//				CnClass:       pulumi.String("polarx.x4.medium.2e"),
//				DnNodeCount:   pulumi.Int(2),
//				SecondaryZone: pulumi.String("ap-southeast-1b"),
//				TertiaryZone:  pulumi.String("ap-southeast-1c"),
//				VpcId:         exampleNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DRDS Polardb X Instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import alicloud:drds/polardbxInstance:PolardbxInstance example <id>
//
// ```
type PolardbxInstance struct {
	pulumi.CustomResourceState

	// Compute node specifications.
	CnClass pulumi.StringOutput `pulumi:"cnClass"`
	// Number of computing nodes.
	CnNodeCount pulumi.IntOutput `pulumi:"cnNodeCount"`
	// The creation time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Storage node specifications.
	DnClass pulumi.StringOutput `pulumi:"dnClass"`
	// The number of storage nodes.
	DnNodeCount pulumi.IntOutput `pulumi:"dnNodeCount"`
	// Primary Availability Zone.
	PrimaryZone pulumi.StringOutput `pulumi:"primaryZone"`
	// The resource group ID can be empty. This parameter is not supported for the time being.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// Secondary availability zone.
	SecondaryZone pulumi.StringPtrOutput `pulumi:"secondaryZone"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// Third Availability Zone.
	TertiaryZone pulumi.StringPtrOutput `pulumi:"tertiaryZone"`
	// Topology type:
	// - **3azones**: three available areas;
	// - **1azone**: Single zone.
	TopologyType pulumi.StringOutput `pulumi:"topologyType"`
	// The VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The ID of the virtual switch.
	VswitchId pulumi.StringOutput `pulumi:"vswitchId"`
}

// NewPolardbxInstance registers a new resource with the given unique name, arguments, and options.
func NewPolardbxInstance(ctx *pulumi.Context,
	name string, args *PolardbxInstanceArgs, opts ...pulumi.ResourceOption) (*PolardbxInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CnClass == nil {
		return nil, errors.New("invalid value for required argument 'CnClass'")
	}
	if args.CnNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'CnNodeCount'")
	}
	if args.DnClass == nil {
		return nil, errors.New("invalid value for required argument 'DnClass'")
	}
	if args.DnNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'DnNodeCount'")
	}
	if args.PrimaryZone == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryZone'")
	}
	if args.TopologyType == nil {
		return nil, errors.New("invalid value for required argument 'TopologyType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolardbxInstance
	err := ctx.RegisterResource("alicloud:drds/polardbxInstance:PolardbxInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolardbxInstance gets an existing PolardbxInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolardbxInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolardbxInstanceState, opts ...pulumi.ResourceOption) (*PolardbxInstance, error) {
	var resource PolardbxInstance
	err := ctx.ReadResource("alicloud:drds/polardbxInstance:PolardbxInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolardbxInstance resources.
type polardbxInstanceState struct {
	// Compute node specifications.
	CnClass *string `pulumi:"cnClass"`
	// Number of computing nodes.
	CnNodeCount *int `pulumi:"cnNodeCount"`
	// The creation time of the resource.
	CreateTime *string `pulumi:"createTime"`
	// Storage node specifications.
	DnClass *string `pulumi:"dnClass"`
	// The number of storage nodes.
	DnNodeCount *int `pulumi:"dnNodeCount"`
	// Primary Availability Zone.
	PrimaryZone *string `pulumi:"primaryZone"`
	// The resource group ID can be empty. This parameter is not supported for the time being.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Secondary availability zone.
	SecondaryZone *string `pulumi:"secondaryZone"`
	// The status of the resource.
	Status *string `pulumi:"status"`
	// Third Availability Zone.
	TertiaryZone *string `pulumi:"tertiaryZone"`
	// Topology type:
	// - **3azones**: three available areas;
	// - **1azone**: Single zone.
	TopologyType *string `pulumi:"topologyType"`
	// The VPC ID.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the virtual switch.
	VswitchId *string `pulumi:"vswitchId"`
}

type PolardbxInstanceState struct {
	// Compute node specifications.
	CnClass pulumi.StringPtrInput
	// Number of computing nodes.
	CnNodeCount pulumi.IntPtrInput
	// The creation time of the resource.
	CreateTime pulumi.StringPtrInput
	// Storage node specifications.
	DnClass pulumi.StringPtrInput
	// The number of storage nodes.
	DnNodeCount pulumi.IntPtrInput
	// Primary Availability Zone.
	PrimaryZone pulumi.StringPtrInput
	// The resource group ID can be empty. This parameter is not supported for the time being.
	ResourceGroupId pulumi.StringPtrInput
	// Secondary availability zone.
	SecondaryZone pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
	// Third Availability Zone.
	TertiaryZone pulumi.StringPtrInput
	// Topology type:
	// - **3azones**: three available areas;
	// - **1azone**: Single zone.
	TopologyType pulumi.StringPtrInput
	// The VPC ID.
	VpcId pulumi.StringPtrInput
	// The ID of the virtual switch.
	VswitchId pulumi.StringPtrInput
}

func (PolardbxInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*polardbxInstanceState)(nil)).Elem()
}

type polardbxInstanceArgs struct {
	// Compute node specifications.
	CnClass string `pulumi:"cnClass"`
	// Number of computing nodes.
	CnNodeCount int `pulumi:"cnNodeCount"`
	// Storage node specifications.
	DnClass string `pulumi:"dnClass"`
	// The number of storage nodes.
	DnNodeCount int `pulumi:"dnNodeCount"`
	// Primary Availability Zone.
	PrimaryZone string `pulumi:"primaryZone"`
	// The resource group ID can be empty. This parameter is not supported for the time being.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Secondary availability zone.
	SecondaryZone *string `pulumi:"secondaryZone"`
	// Third Availability Zone.
	TertiaryZone *string `pulumi:"tertiaryZone"`
	// Topology type:
	// - **3azones**: three available areas;
	// - **1azone**: Single zone.
	TopologyType string `pulumi:"topologyType"`
	// The VPC ID.
	VpcId string `pulumi:"vpcId"`
	// The ID of the virtual switch.
	VswitchId string `pulumi:"vswitchId"`
}

// The set of arguments for constructing a PolardbxInstance resource.
type PolardbxInstanceArgs struct {
	// Compute node specifications.
	CnClass pulumi.StringInput
	// Number of computing nodes.
	CnNodeCount pulumi.IntInput
	// Storage node specifications.
	DnClass pulumi.StringInput
	// The number of storage nodes.
	DnNodeCount pulumi.IntInput
	// Primary Availability Zone.
	PrimaryZone pulumi.StringInput
	// The resource group ID can be empty. This parameter is not supported for the time being.
	ResourceGroupId pulumi.StringPtrInput
	// Secondary availability zone.
	SecondaryZone pulumi.StringPtrInput
	// Third Availability Zone.
	TertiaryZone pulumi.StringPtrInput
	// Topology type:
	// - **3azones**: three available areas;
	// - **1azone**: Single zone.
	TopologyType pulumi.StringInput
	// The VPC ID.
	VpcId pulumi.StringInput
	// The ID of the virtual switch.
	VswitchId pulumi.StringInput
}

func (PolardbxInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*polardbxInstanceArgs)(nil)).Elem()
}

type PolardbxInstanceInput interface {
	pulumi.Input

	ToPolardbxInstanceOutput() PolardbxInstanceOutput
	ToPolardbxInstanceOutputWithContext(ctx context.Context) PolardbxInstanceOutput
}

func (*PolardbxInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**PolardbxInstance)(nil)).Elem()
}

func (i *PolardbxInstance) ToPolardbxInstanceOutput() PolardbxInstanceOutput {
	return i.ToPolardbxInstanceOutputWithContext(context.Background())
}

func (i *PolardbxInstance) ToPolardbxInstanceOutputWithContext(ctx context.Context) PolardbxInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolardbxInstanceOutput)
}

// PolardbxInstanceArrayInput is an input type that accepts PolardbxInstanceArray and PolardbxInstanceArrayOutput values.
// You can construct a concrete instance of `PolardbxInstanceArrayInput` via:
//
//	PolardbxInstanceArray{ PolardbxInstanceArgs{...} }
type PolardbxInstanceArrayInput interface {
	pulumi.Input

	ToPolardbxInstanceArrayOutput() PolardbxInstanceArrayOutput
	ToPolardbxInstanceArrayOutputWithContext(context.Context) PolardbxInstanceArrayOutput
}

type PolardbxInstanceArray []PolardbxInstanceInput

func (PolardbxInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolardbxInstance)(nil)).Elem()
}

func (i PolardbxInstanceArray) ToPolardbxInstanceArrayOutput() PolardbxInstanceArrayOutput {
	return i.ToPolardbxInstanceArrayOutputWithContext(context.Background())
}

func (i PolardbxInstanceArray) ToPolardbxInstanceArrayOutputWithContext(ctx context.Context) PolardbxInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolardbxInstanceArrayOutput)
}

// PolardbxInstanceMapInput is an input type that accepts PolardbxInstanceMap and PolardbxInstanceMapOutput values.
// You can construct a concrete instance of `PolardbxInstanceMapInput` via:
//
//	PolardbxInstanceMap{ "key": PolardbxInstanceArgs{...} }
type PolardbxInstanceMapInput interface {
	pulumi.Input

	ToPolardbxInstanceMapOutput() PolardbxInstanceMapOutput
	ToPolardbxInstanceMapOutputWithContext(context.Context) PolardbxInstanceMapOutput
}

type PolardbxInstanceMap map[string]PolardbxInstanceInput

func (PolardbxInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolardbxInstance)(nil)).Elem()
}

func (i PolardbxInstanceMap) ToPolardbxInstanceMapOutput() PolardbxInstanceMapOutput {
	return i.ToPolardbxInstanceMapOutputWithContext(context.Background())
}

func (i PolardbxInstanceMap) ToPolardbxInstanceMapOutputWithContext(ctx context.Context) PolardbxInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolardbxInstanceMapOutput)
}

type PolardbxInstanceOutput struct{ *pulumi.OutputState }

func (PolardbxInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolardbxInstance)(nil)).Elem()
}

func (o PolardbxInstanceOutput) ToPolardbxInstanceOutput() PolardbxInstanceOutput {
	return o
}

func (o PolardbxInstanceOutput) ToPolardbxInstanceOutputWithContext(ctx context.Context) PolardbxInstanceOutput {
	return o
}

// Compute node specifications.
func (o PolardbxInstanceOutput) CnClass() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.CnClass }).(pulumi.StringOutput)
}

// Number of computing nodes.
func (o PolardbxInstanceOutput) CnNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.IntOutput { return v.CnNodeCount }).(pulumi.IntOutput)
}

// The creation time of the resource.
func (o PolardbxInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Storage node specifications.
func (o PolardbxInstanceOutput) DnClass() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.DnClass }).(pulumi.StringOutput)
}

// The number of storage nodes.
func (o PolardbxInstanceOutput) DnNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.IntOutput { return v.DnNodeCount }).(pulumi.IntOutput)
}

// Primary Availability Zone.
func (o PolardbxInstanceOutput) PrimaryZone() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.PrimaryZone }).(pulumi.StringOutput)
}

// The resource group ID can be empty. This parameter is not supported for the time being.
func (o PolardbxInstanceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Secondary availability zone.
func (o PolardbxInstanceOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringPtrOutput { return v.SecondaryZone }).(pulumi.StringPtrOutput)
}

// The status of the resource.
func (o PolardbxInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Third Availability Zone.
func (o PolardbxInstanceOutput) TertiaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringPtrOutput { return v.TertiaryZone }).(pulumi.StringPtrOutput)
}

// Topology type:
// - **3azones**: three available areas;
// - **1azone**: Single zone.
func (o PolardbxInstanceOutput) TopologyType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.TopologyType }).(pulumi.StringOutput)
}

// The VPC ID.
func (o PolardbxInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of the virtual switch.
func (o PolardbxInstanceOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolardbxInstance) pulumi.StringOutput { return v.VswitchId }).(pulumi.StringOutput)
}

type PolardbxInstanceArrayOutput struct{ *pulumi.OutputState }

func (PolardbxInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolardbxInstance)(nil)).Elem()
}

func (o PolardbxInstanceArrayOutput) ToPolardbxInstanceArrayOutput() PolardbxInstanceArrayOutput {
	return o
}

func (o PolardbxInstanceArrayOutput) ToPolardbxInstanceArrayOutputWithContext(ctx context.Context) PolardbxInstanceArrayOutput {
	return o
}

func (o PolardbxInstanceArrayOutput) Index(i pulumi.IntInput) PolardbxInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolardbxInstance {
		return vs[0].([]*PolardbxInstance)[vs[1].(int)]
	}).(PolardbxInstanceOutput)
}

type PolardbxInstanceMapOutput struct{ *pulumi.OutputState }

func (PolardbxInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolardbxInstance)(nil)).Elem()
}

func (o PolardbxInstanceMapOutput) ToPolardbxInstanceMapOutput() PolardbxInstanceMapOutput {
	return o
}

func (o PolardbxInstanceMapOutput) ToPolardbxInstanceMapOutputWithContext(ctx context.Context) PolardbxInstanceMapOutput {
	return o
}

func (o PolardbxInstanceMapOutput) MapIndex(k pulumi.StringInput) PolardbxInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolardbxInstance {
		return vs[0].(map[string]*PolardbxInstance)[vs[1].(string)]
	}).(PolardbxInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolardbxInstanceInput)(nil)).Elem(), &PolardbxInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolardbxInstanceArrayInput)(nil)).Elem(), PolardbxInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolardbxInstanceMapInput)(nil)).Elem(), PolardbxInstanceMap{})
	pulumi.RegisterOutputType(PolardbxInstanceOutput{})
	pulumi.RegisterOutputType(PolardbxInstanceArrayOutput{})
	pulumi.RegisterOutputType(PolardbxInstanceMapOutput{})
}
