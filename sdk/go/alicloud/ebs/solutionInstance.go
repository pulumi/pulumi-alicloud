// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a EBS Solution Instance resource.
//
// For information about EBS Solution Instance and how to use it, see [What is Solution Instance](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.216.0.
//
// ## Example Usage
//
// # Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ebs"
//	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/resourcemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := "terraform-example"
//			if param := cfg.Get("name"); param != "" {
//				name = param
//			}
//			zoneId := "cn-shanghai-l"
//			if param := cfg.Get("zoneId"); param != "" {
//				zoneId = param
//			}
//			regionId := "cn-shanghai"
//			if param := cfg.Get("regionId"); param != "" {
//				regionId = param
//			}
//			_default, err := resourcemanager.GetResourceGroups(ctx, &resourcemanager.GetResourceGroupsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ebs.NewSolutionInstance(ctx, "default", &ebs.SolutionInstanceArgs{
//				SolutionInstanceName: pulumi.String(name),
//				ResourceGroupId:      pulumi.String(_default.Ids[0]),
//				Description:          pulumi.String("description"),
//				SolutionId:           pulumi.String("mysql"),
//				Parameters: ebs.SolutionInstanceParameterArray{
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("zoneId"),
//						ParameterValue: pulumi.String(zoneId),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("ecsType"),
//						ParameterValue: pulumi.String("ecs.c6.large"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("ecsImageId"),
//						ParameterValue: pulumi.String("CentOS_7"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("internetMaxBandwidthOut"),
//						ParameterValue: pulumi.String("100"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("internetChargeType"),
//						ParameterValue: pulumi.String("PayByTraffic"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("ecsPassword"),
//						ParameterValue: pulumi.String("Ebs12345"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("sysDiskType"),
//						ParameterValue: pulumi.String("cloud_essd"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("sysDiskPerformance"),
//						ParameterValue: pulumi.String("PL0"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("sysDiskSize"),
//						ParameterValue: pulumi.String("40"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("dataDiskType"),
//						ParameterValue: pulumi.String("cloud_essd"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("dataDiskPerformance"),
//						ParameterValue: pulumi.String("PL0"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("dataDiskSize"),
//						ParameterValue: pulumi.String("40"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("mysqlVersion"),
//						ParameterValue: pulumi.String("MySQL80"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("mysqlUser"),
//						ParameterValue: pulumi.String("root"),
//					},
//					&ebs.SolutionInstanceParameterArgs{
//						ParameterKey:   pulumi.String("mysqlPassword"),
//						ParameterValue: pulumi.String("Ebs12345"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EBS Solution Instance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:ebs/solutionInstance:SolutionInstance example <id>
// ```
type SolutionInstance struct {
	pulumi.CustomResourceState

	// Solution Instance Creation Time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Solution Instance Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Solution Instance Creation Parameters. See `parameters` below.
	Parameters SolutionInstanceParameterArrayOutput `pulumi:"parameters"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// Solution ID.
	SolutionId pulumi.StringOutput `pulumi:"solutionId"`
	// Solution Instance Name.
	SolutionInstanceName pulumi.StringOutput `pulumi:"solutionInstanceName"`
	// The status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewSolutionInstance registers a new resource with the given unique name, arguments, and options.
func NewSolutionInstance(ctx *pulumi.Context,
	name string, args *SolutionInstanceArgs, opts ...pulumi.ResourceOption) (*SolutionInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SolutionId == nil {
		return nil, errors.New("invalid value for required argument 'SolutionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SolutionInstance
	err := ctx.RegisterResource("alicloud:ebs/solutionInstance:SolutionInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionInstance gets an existing SolutionInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionInstanceState, opts ...pulumi.ResourceOption) (*SolutionInstance, error) {
	var resource SolutionInstance
	err := ctx.ReadResource("alicloud:ebs/solutionInstance:SolutionInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionInstance resources.
type solutionInstanceState struct {
	// Solution Instance Creation Time.
	CreateTime *string `pulumi:"createTime"`
	// Solution Instance Description.
	Description *string `pulumi:"description"`
	// Solution Instance Creation Parameters. See `parameters` below.
	Parameters []SolutionInstanceParameter `pulumi:"parameters"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Solution ID.
	SolutionId *string `pulumi:"solutionId"`
	// Solution Instance Name.
	SolutionInstanceName *string `pulumi:"solutionInstanceName"`
	// The status of the resource.
	Status *string `pulumi:"status"`
}

type SolutionInstanceState struct {
	// Solution Instance Creation Time.
	CreateTime pulumi.StringPtrInput
	// Solution Instance Description.
	Description pulumi.StringPtrInput
	// Solution Instance Creation Parameters. See `parameters` below.
	Parameters SolutionInstanceParameterArrayInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// Solution ID.
	SolutionId pulumi.StringPtrInput
	// Solution Instance Name.
	SolutionInstanceName pulumi.StringPtrInput
	// The status of the resource.
	Status pulumi.StringPtrInput
}

func (SolutionInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionInstanceState)(nil)).Elem()
}

type solutionInstanceArgs struct {
	// Solution Instance Description.
	Description *string `pulumi:"description"`
	// Solution Instance Creation Parameters. See `parameters` below.
	Parameters []SolutionInstanceParameter `pulumi:"parameters"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Solution ID.
	SolutionId string `pulumi:"solutionId"`
	// Solution Instance Name.
	SolutionInstanceName *string `pulumi:"solutionInstanceName"`
}

// The set of arguments for constructing a SolutionInstance resource.
type SolutionInstanceArgs struct {
	// Solution Instance Description.
	Description pulumi.StringPtrInput
	// Solution Instance Creation Parameters. See `parameters` below.
	Parameters SolutionInstanceParameterArrayInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// Solution ID.
	SolutionId pulumi.StringInput
	// Solution Instance Name.
	SolutionInstanceName pulumi.StringPtrInput
}

func (SolutionInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionInstanceArgs)(nil)).Elem()
}

type SolutionInstanceInput interface {
	pulumi.Input

	ToSolutionInstanceOutput() SolutionInstanceOutput
	ToSolutionInstanceOutputWithContext(ctx context.Context) SolutionInstanceOutput
}

func (*SolutionInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionInstance)(nil)).Elem()
}

func (i *SolutionInstance) ToSolutionInstanceOutput() SolutionInstanceOutput {
	return i.ToSolutionInstanceOutputWithContext(context.Background())
}

func (i *SolutionInstance) ToSolutionInstanceOutputWithContext(ctx context.Context) SolutionInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionInstanceOutput)
}

// SolutionInstanceArrayInput is an input type that accepts SolutionInstanceArray and SolutionInstanceArrayOutput values.
// You can construct a concrete instance of `SolutionInstanceArrayInput` via:
//
//	SolutionInstanceArray{ SolutionInstanceArgs{...} }
type SolutionInstanceArrayInput interface {
	pulumi.Input

	ToSolutionInstanceArrayOutput() SolutionInstanceArrayOutput
	ToSolutionInstanceArrayOutputWithContext(context.Context) SolutionInstanceArrayOutput
}

type SolutionInstanceArray []SolutionInstanceInput

func (SolutionInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionInstance)(nil)).Elem()
}

func (i SolutionInstanceArray) ToSolutionInstanceArrayOutput() SolutionInstanceArrayOutput {
	return i.ToSolutionInstanceArrayOutputWithContext(context.Background())
}

func (i SolutionInstanceArray) ToSolutionInstanceArrayOutputWithContext(ctx context.Context) SolutionInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionInstanceArrayOutput)
}

// SolutionInstanceMapInput is an input type that accepts SolutionInstanceMap and SolutionInstanceMapOutput values.
// You can construct a concrete instance of `SolutionInstanceMapInput` via:
//
//	SolutionInstanceMap{ "key": SolutionInstanceArgs{...} }
type SolutionInstanceMapInput interface {
	pulumi.Input

	ToSolutionInstanceMapOutput() SolutionInstanceMapOutput
	ToSolutionInstanceMapOutputWithContext(context.Context) SolutionInstanceMapOutput
}

type SolutionInstanceMap map[string]SolutionInstanceInput

func (SolutionInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionInstance)(nil)).Elem()
}

func (i SolutionInstanceMap) ToSolutionInstanceMapOutput() SolutionInstanceMapOutput {
	return i.ToSolutionInstanceMapOutputWithContext(context.Background())
}

func (i SolutionInstanceMap) ToSolutionInstanceMapOutputWithContext(ctx context.Context) SolutionInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionInstanceMapOutput)
}

type SolutionInstanceOutput struct{ *pulumi.OutputState }

func (SolutionInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionInstance)(nil)).Elem()
}

func (o SolutionInstanceOutput) ToSolutionInstanceOutput() SolutionInstanceOutput {
	return o
}

func (o SolutionInstanceOutput) ToSolutionInstanceOutputWithContext(ctx context.Context) SolutionInstanceOutput {
	return o
}

// Solution Instance Creation Time.
func (o SolutionInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Solution Instance Description.
func (o SolutionInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Solution Instance Creation Parameters. See `parameters` below.
func (o SolutionInstanceOutput) Parameters() SolutionInstanceParameterArrayOutput {
	return o.ApplyT(func(v *SolutionInstance) SolutionInstanceParameterArrayOutput { return v.Parameters }).(SolutionInstanceParameterArrayOutput)
}

// The ID of the resource group.
func (o SolutionInstanceOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Solution ID.
func (o SolutionInstanceOutput) SolutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringOutput { return v.SolutionId }).(pulumi.StringOutput)
}

// Solution Instance Name.
func (o SolutionInstanceOutput) SolutionInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringOutput { return v.SolutionInstanceName }).(pulumi.StringOutput)
}

// The status of the resource.
func (o SolutionInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type SolutionInstanceArrayOutput struct{ *pulumi.OutputState }

func (SolutionInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionInstance)(nil)).Elem()
}

func (o SolutionInstanceArrayOutput) ToSolutionInstanceArrayOutput() SolutionInstanceArrayOutput {
	return o
}

func (o SolutionInstanceArrayOutput) ToSolutionInstanceArrayOutputWithContext(ctx context.Context) SolutionInstanceArrayOutput {
	return o
}

func (o SolutionInstanceArrayOutput) Index(i pulumi.IntInput) SolutionInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolutionInstance {
		return vs[0].([]*SolutionInstance)[vs[1].(int)]
	}).(SolutionInstanceOutput)
}

type SolutionInstanceMapOutput struct{ *pulumi.OutputState }

func (SolutionInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionInstance)(nil)).Elem()
}

func (o SolutionInstanceMapOutput) ToSolutionInstanceMapOutput() SolutionInstanceMapOutput {
	return o
}

func (o SolutionInstanceMapOutput) ToSolutionInstanceMapOutputWithContext(ctx context.Context) SolutionInstanceMapOutput {
	return o
}

func (o SolutionInstanceMapOutput) MapIndex(k pulumi.StringInput) SolutionInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolutionInstance {
		return vs[0].(map[string]*SolutionInstance)[vs[1].(string)]
	}).(SolutionInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionInstanceInput)(nil)).Elem(), &SolutionInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionInstanceArrayInput)(nil)).Elem(), SolutionInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionInstanceMapInput)(nil)).Elem(), SolutionInstanceMap{})
	pulumi.RegisterOutputType(SolutionInstanceOutput{})
	pulumi.RegisterOutputType(SolutionInstanceArrayOutput{})
	pulumi.RegisterOutputType(SolutionInstanceMapOutput{})
}
