// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides Ebs Disk Replica Pair available to the user.
//
// > **NOTE:** Available in 1.196.0+
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// "github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/ebs"
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _default, err := ebs.GetDiskReplicaPairs(ctx, &ebs.GetDiskReplicaPairsArgs{
// Ids: interface{}{
// alicloud_ebs_disk_replica_pair.Default.Id,
// },
// }, nil);
// if err != nil {
// return err
// }
// ctx.Export("alicloudEbsDiskReplicaPairExampleId", _default.Pairs[0].Id)
// return nil
// })
// }
// ```
func GetDiskReplicaPairs(ctx *pulumi.Context, args *GetDiskReplicaPairsArgs, opts ...pulumi.InvokeOption) (*GetDiskReplicaPairsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDiskReplicaPairsResult
	err := ctx.Invoke("alicloud:ebs/getDiskReplicaPairs:getDiskReplicaPairs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDiskReplicaPairs.
type GetDiskReplicaPairsArgs struct {
	// A list of Disk Replica Pair IDs.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile *string `pulumi:"outputFile"`
	// Consistent Replication Group ID, you can specify a consistent replication group ID to query the replication pairs within the group.
	ReplicaGroupId *string `pulumi:"replicaGroupId"`
	// Get data for replication pairs where this Region is the production site or the disaster recovery site.
	Site *string `pulumi:"site"`
}

// A collection of values returned by getDiskReplicaPairs.
type GetDiskReplicaPairsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of Disk Replica Pair IDs.
	Ids        []string `pulumi:"ids"`
	OutputFile *string  `pulumi:"outputFile"`
	// A list of Disk Replica Pair Entries. Each element contains the following attributes:
	Pairs          []GetDiskReplicaPairsPair `pulumi:"pairs"`
	ReplicaGroupId *string                   `pulumi:"replicaGroupId"`
	Site           *string                   `pulumi:"site"`
}

func GetDiskReplicaPairsOutput(ctx *pulumi.Context, args GetDiskReplicaPairsOutputArgs, opts ...pulumi.InvokeOption) GetDiskReplicaPairsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDiskReplicaPairsResult, error) {
			args := v.(GetDiskReplicaPairsArgs)
			r, err := GetDiskReplicaPairs(ctx, &args, opts...)
			var s GetDiskReplicaPairsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDiskReplicaPairsResultOutput)
}

// A collection of arguments for invoking getDiskReplicaPairs.
type GetDiskReplicaPairsOutputArgs struct {
	// A list of Disk Replica Pair IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results (after running `pulumi preview`).
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Consistent Replication Group ID, you can specify a consistent replication group ID to query the replication pairs within the group.
	ReplicaGroupId pulumi.StringPtrInput `pulumi:"replicaGroupId"`
	// Get data for replication pairs where this Region is the production site or the disaster recovery site.
	Site pulumi.StringPtrInput `pulumi:"site"`
}

func (GetDiskReplicaPairsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskReplicaPairsArgs)(nil)).Elem()
}

// A collection of values returned by getDiskReplicaPairs.
type GetDiskReplicaPairsResultOutput struct{ *pulumi.OutputState }

func (GetDiskReplicaPairsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiskReplicaPairsResult)(nil)).Elem()
}

func (o GetDiskReplicaPairsResultOutput) ToGetDiskReplicaPairsResultOutput() GetDiskReplicaPairsResultOutput {
	return o
}

func (o GetDiskReplicaPairsResultOutput) ToGetDiskReplicaPairsResultOutputWithContext(ctx context.Context) GetDiskReplicaPairsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetDiskReplicaPairsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of Disk Replica Pair IDs.
func (o GetDiskReplicaPairsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetDiskReplicaPairsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// A list of Disk Replica Pair Entries. Each element contains the following attributes:
func (o GetDiskReplicaPairsResultOutput) Pairs() GetDiskReplicaPairsPairArrayOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) []GetDiskReplicaPairsPair { return v.Pairs }).(GetDiskReplicaPairsPairArrayOutput)
}

func (o GetDiskReplicaPairsResultOutput) ReplicaGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) *string { return v.ReplicaGroupId }).(pulumi.StringPtrOutput)
}

func (o GetDiskReplicaPairsResultOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiskReplicaPairsResult) *string { return v.Site }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDiskReplicaPairsResultOutput{})
}
