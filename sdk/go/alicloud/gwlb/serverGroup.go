// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gwlb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GWLB Server Group resource.
//
// For information about GWLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/).
//
// > **NOTE:** Available since v1.234.0.
//
// ## Import
//
// GWLB Server Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gwlb/serverGroup:ServerGroup example <id>
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigOutput `pulumi:"connectionDrainConfig"`
	// The creation time of the server group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigOutput `pulumi:"healthCheckConfig"`
	// Backend Protocol. Value:
	//
	// - *GENEVE (default)**.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// Scheduling algorithm. Value:
	// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
	// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
	// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// The server group name.
	//
	// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
	ServerGroupName pulumi.StringPtrOutput `pulumi:"serverGroupName"`
	// The server group type. Value:
	// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
	// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
	ServerGroupType pulumi.StringOutput `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayOutput `pulumi:"servers"`
	// Server group status. Value:
	Status pulumi.StringOutput `pulumi:"status"`
	// List of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The VPC instance ID.
	//
	// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("alicloud:gwlb/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("alicloud:gwlb/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// The creation time of the server group.
	CreateTime *string `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun *bool `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig *ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// Backend Protocol. Value:
	//
	// - *GENEVE (default)**.
	Protocol *string `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Scheduling algorithm. Value:
	// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
	// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
	// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
	Scheduler *string `pulumi:"scheduler"`
	// The server group name.
	//
	// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The server group type. Value:
	// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
	// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// Server group status. Value:
	Status *string `pulumi:"status"`
	// List of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The VPC instance ID.
	//
	// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
	VpcId *string `pulumi:"vpcId"`
}

type ServerGroupState struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// The creation time of the server group.
	CreateTime pulumi.StringPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun pulumi.BoolPtrInput
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigPtrInput
	// Backend Protocol. Value:
	//
	// - *GENEVE (default)**.
	Protocol pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// Scheduling algorithm. Value:
	// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
	// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
	// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
	Scheduler pulumi.StringPtrInput
	// The server group name.
	//
	// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
	ServerGroupName pulumi.StringPtrInput
	// The server group type. Value:
	// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
	// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
	ServerGroupType pulumi.StringPtrInput
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayInput
	// Server group status. Value:
	Status pulumi.StringPtrInput
	// List of resource tags.
	Tags pulumi.StringMapInput
	// The VPC instance ID.
	//
	// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
	VpcId pulumi.StringPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun *bool `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig *ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// Backend Protocol. Value:
	//
	// - *GENEVE (default)**.
	Protocol *string `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Scheduling algorithm. Value:
	// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
	// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
	// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
	Scheduler *string `pulumi:"scheduler"`
	// The server group name.
	//
	// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The server group type. Value:
	// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
	// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// List of servers. See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// List of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The VPC instance ID.
	//
	// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun pulumi.BoolPtrInput
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigPtrInput
	// Backend Protocol. Value:
	//
	// - *GENEVE (default)**.
	Protocol pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// Scheduling algorithm. Value:
	// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
	// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
	// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
	Scheduler pulumi.StringPtrInput
	// The server group name.
	//
	// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
	ServerGroupName pulumi.StringPtrInput
	// The server group type. Value:
	// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
	// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
	ServerGroupType pulumi.StringPtrInput
	// List of servers. See `servers` below.
	Servers ServerGroupServerArrayInput
	// List of resource tags.
	Tags pulumi.StringMapInput
	// The VPC instance ID.
	//
	// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
	VpcId pulumi.StringInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
func (o ServerGroupOutput) ConnectionDrainConfig() ServerGroupConnectionDrainConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupConnectionDrainConfigOutput { return v.ConnectionDrainConfig }).(ServerGroupConnectionDrainConfigOutput)
}

// The creation time of the server group.
func (o ServerGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies whether to perform only a dry run, without performing the actual request.
func (o ServerGroupOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Health check configurations. See `healthCheckConfig` below.
func (o ServerGroupOutput) HealthCheckConfig() ServerGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupHealthCheckConfigOutput { return v.HealthCheckConfig }).(ServerGroupHealthCheckConfigOutput)
}

// Backend Protocol. Value:
//
// - *GENEVE (default)**.
func (o ServerGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o ServerGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Scheduling algorithm. Value:
// - **5TCH (default)**: quintuple hash, which is based on the consistent hash of the quintuple (source IP, Destination IP, source port, destination port, and protocol). The same flow is scheduled to the same backend server.
// - `3TCH`: a three-tuple hash, which is based on the consistent hash of three tuples (source IP address, destination IP address, and protocol). The same flow is dispatched to the same backend server.
// - `2TCH`: Binary Group hash, which is based on the consistent hash of the binary group (source IP and destination IP). The same flow is scheduled to the same backend server.
func (o ServerGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// The server group name.
//
// It must be 2 to 128 characters in length, start with an uppercase letter or a Chinese character, and can contain digits, half-width periods (.), underscores (_), and dashes (-).
func (o ServerGroupOutput) ServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.ServerGroupName }).(pulumi.StringPtrOutput)
}

// The server group type. Value:
// - **Instance (default)**: The instance type. You can add Ecs, Eni, and Eci instances to the server group.
// - `Ip`: The Ip address type. You can directly add backend servers of the Ip address type to the server group.
func (o ServerGroupOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupType }).(pulumi.StringOutput)
}

// List of servers. See `servers` below.
func (o ServerGroupOutput) Servers() ServerGroupServerArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupServerArrayOutput { return v.Servers }).(ServerGroupServerArrayOutput)
}

// Server group status. Value:
func (o ServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// List of resource tags.
func (o ServerGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The VPC instance ID.
//
// > **NOTE:**  If the value of ServerGroupType is Instance, only servers in the VPC can be added to the server group.
func (o ServerGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
