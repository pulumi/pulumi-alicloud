// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gwlb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GWLB Server Group resource.
//
// For information about GWLB Server Group and how to use it, see [What is Server Group](https://www.alibabacloud.com/help/en/slb/gateway-based-load-balancing-gwlb/developer-reference/api-gwlb-2024-04-15-createservergroup).
//
// > **NOTE:** Available since v1.234.0.
//
// ## Import
//
// GWLB Server Group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import alicloud:gwlb/serverGroup:ServerGroup example <id>
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigOutput `pulumi:"connectionDrainConfig"`
	// The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigOutput `pulumi:"healthCheckConfig"`
	// The backend protocol. Valid values:
	//
	// - `GENEVE`(default)
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// The server group name.
	//
	// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
	ServerGroupName pulumi.StringPtrOutput `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
	// - `Ip`: allows you to add servers of by specifying IP addresses.
	ServerGroupType pulumi.StringOutput `pulumi:"serverGroupType"`
	// The backend servers that you want to remove.
	//
	// > **NOTE:**  You can remove at most 200 backend servers in each call.
	// See `servers` below.
	Servers ServerGroupServerArrayOutput `pulumi:"servers"`
	// Indicates the status of the backend server.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag keys.
	//
	// You can specify at most 20 tags in each call.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The VPC ID.
	//
	// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("alicloud:gwlb/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("alicloud:gwlb/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
	DryRun *bool `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig *ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The backend protocol. Valid values:
	//
	// - `GENEVE`(default)
	Protocol *string `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	Scheduler *string `pulumi:"scheduler"`
	// The server group name.
	//
	// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
	// - `Ip`: allows you to add servers of by specifying IP addresses.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// The backend servers that you want to remove.
	//
	// > **NOTE:**  You can remove at most 200 backend servers in each call.
	// See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// Indicates the status of the backend server.
	Status *string `pulumi:"status"`
	// The tag keys.
	//
	// You can specify at most 20 tags in each call.
	Tags map[string]string `pulumi:"tags"`
	// The VPC ID.
	//
	// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
	VpcId *string `pulumi:"vpcId"`
}

type ServerGroupState struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
	CreateTime pulumi.StringPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrInput
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigPtrInput
	// The backend protocol. Valid values:
	//
	// - `GENEVE`(default)
	Protocol pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The scheduling algorithm. Valid values:
	//
	// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	Scheduler pulumi.StringPtrInput
	// The server group name.
	//
	// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
	ServerGroupName pulumi.StringPtrInput
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
	// - `Ip`: allows you to add servers of by specifying IP addresses.
	ServerGroupType pulumi.StringPtrInput
	// The backend servers that you want to remove.
	//
	// > **NOTE:**  You can remove at most 200 backend servers in each call.
	// See `servers` below.
	Servers ServerGroupServerArrayInput
	// Indicates the status of the backend server.
	Status pulumi.StringPtrInput
	// The tag keys.
	//
	// You can specify at most 20 tags in each call.
	Tags pulumi.StringMapInput
	// The VPC ID.
	//
	// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
	VpcId pulumi.StringPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig *ServerGroupConnectionDrainConfig `pulumi:"connectionDrainConfig"`
	// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
	DryRun *bool `pulumi:"dryRun"`
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig *ServerGroupHealthCheckConfig `pulumi:"healthCheckConfig"`
	// The backend protocol. Valid values:
	//
	// - `GENEVE`(default)
	Protocol *string `pulumi:"protocol"`
	// The ID of the resource group.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The scheduling algorithm. Valid values:
	//
	// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	Scheduler *string `pulumi:"scheduler"`
	// The server group name.
	//
	// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
	// - `Ip`: allows you to add servers of by specifying IP addresses.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// The backend servers that you want to remove.
	//
	// > **NOTE:**  You can remove at most 200 backend servers in each call.
	// See `servers` below.
	Servers []ServerGroupServer `pulumi:"servers"`
	// The tag keys.
	//
	// You can specify at most 20 tags in each call.
	Tags map[string]string `pulumi:"tags"`
	// The VPC ID.
	//
	// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
	ConnectionDrainConfig ServerGroupConnectionDrainConfigPtrInput
	// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
	DryRun pulumi.BoolPtrInput
	// Health check configurations. See `healthCheckConfig` below.
	HealthCheckConfig ServerGroupHealthCheckConfigPtrInput
	// The backend protocol. Valid values:
	//
	// - `GENEVE`(default)
	Protocol pulumi.StringPtrInput
	// The ID of the resource group.
	ResourceGroupId pulumi.StringPtrInput
	// The scheduling algorithm. Valid values:
	//
	// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
	Scheduler pulumi.StringPtrInput
	// The server group name.
	//
	// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
	ServerGroupName pulumi.StringPtrInput
	// The type of server group. Valid values:
	//
	// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
	// - `Ip`: allows you to add servers of by specifying IP addresses.
	ServerGroupType pulumi.StringPtrInput
	// The backend servers that you want to remove.
	//
	// > **NOTE:**  You can remove at most 200 backend servers in each call.
	// See `servers` below.
	Servers ServerGroupServerArrayInput
	// The tag keys.
	//
	// You can specify at most 20 tags in each call.
	Tags pulumi.StringMapInput
	// The VPC ID.
	//
	// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
	VpcId pulumi.StringInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// Connected graceful interrupt configuration. See `connectionDrainConfig` below.
func (o ServerGroupOutput) ConnectionDrainConfig() ServerGroupConnectionDrainConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupConnectionDrainConfigOutput { return v.ConnectionDrainConfig }).(ServerGroupConnectionDrainConfigOutput)
}

// The time when the resource was created. The time follows the ISO 8601 standard in the **yyyy-MM-ddTHH:mm:ssZ** format. The time is displayed in UTC.
func (o ServerGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies whether to perform only a dry run, without performing the actual request. Valid values:
func (o ServerGroupOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Health check configurations. See `healthCheckConfig` below.
func (o ServerGroupOutput) HealthCheckConfig() ServerGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupHealthCheckConfigOutput { return v.HealthCheckConfig }).(ServerGroupHealthCheckConfigOutput)
}

// The backend protocol. Valid values:
//
// - `GENEVE`(default)
func (o ServerGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The ID of the resource group.
func (o ServerGroupOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The scheduling algorithm. Valid values:
//
// - `5TCH` (default): specifies consistent hashing that is based on the following factors: source IP address, destination IP address, source port, protocol, and destination port. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
// - `3TCH`: specifies consistent hashing that is based on the following factors: source IP address, destination IP address, and protocol. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
// - `2TCH`: specifies consistent hashing that is based on the following factors: source IP address and destination IP address. Requests that contain the same information based on the preceding factors are forwarded to the same backend server.
func (o ServerGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// The server group name.
//
// The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\_), and hyphens (-). It must start with a letter.
func (o ServerGroupOutput) ServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.ServerGroupName }).(pulumi.StringPtrOutput)
}

// The type of server group. Valid values:
//
// - `Instance` (default): allows you to specify servers of the `Ecs`, `Eni`, or `Eci` type.
// - `Ip`: allows you to add servers of by specifying IP addresses.
func (o ServerGroupOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupType }).(pulumi.StringOutput)
}

// The backend servers that you want to remove.
//
// > **NOTE:**  You can remove at most 200 backend servers in each call.
// See `servers` below.
func (o ServerGroupOutput) Servers() ServerGroupServerArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupServerArrayOutput { return v.Servers }).(ServerGroupServerArrayOutput)
}

// Indicates the status of the backend server.
func (o ServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tag keys.
//
// You can specify at most 20 tags in each call.
func (o ServerGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The VPC ID.
//
// > **NOTE:**  If `ServerGroupType` is set to `Instance`, only servers in the specified VPC can be added to the server group.
func (o ServerGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
