// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gwlb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LoadBalancerZoneMapping struct {
	// The addresses of the Gateway Load Balancer instance.
	LoadBalancerAddresses []LoadBalancerZoneMappingLoadBalancerAddress `pulumi:"loadBalancerAddresses"`
	// The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
	VswitchId string `pulumi:"vswitchId"`
	// The ID of the zone to which the Gateway Load Balancer instance belongs.
	ZoneId string `pulumi:"zoneId"`
}

// LoadBalancerZoneMappingInput is an input type that accepts LoadBalancerZoneMappingArgs and LoadBalancerZoneMappingOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingInput` via:
//
//	LoadBalancerZoneMappingArgs{...}
type LoadBalancerZoneMappingInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput
	ToLoadBalancerZoneMappingOutputWithContext(context.Context) LoadBalancerZoneMappingOutput
}

type LoadBalancerZoneMappingArgs struct {
	// The addresses of the Gateway Load Balancer instance.
	LoadBalancerAddresses LoadBalancerZoneMappingLoadBalancerAddressArrayInput `pulumi:"loadBalancerAddresses"`
	// The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
	VswitchId pulumi.StringInput `pulumi:"vswitchId"`
	// The ID of the zone to which the Gateway Load Balancer instance belongs.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LoadBalancerZoneMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMapping)(nil)).Elem()
}

func (i LoadBalancerZoneMappingArgs) ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput {
	return i.ToLoadBalancerZoneMappingOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingArgs) ToLoadBalancerZoneMappingOutputWithContext(ctx context.Context) LoadBalancerZoneMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingOutput)
}

// LoadBalancerZoneMappingArrayInput is an input type that accepts LoadBalancerZoneMappingArray and LoadBalancerZoneMappingArrayOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingArrayInput` via:
//
//	LoadBalancerZoneMappingArray{ LoadBalancerZoneMappingArgs{...} }
type LoadBalancerZoneMappingArrayInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput
	ToLoadBalancerZoneMappingArrayOutputWithContext(context.Context) LoadBalancerZoneMappingArrayOutput
}

type LoadBalancerZoneMappingArray []LoadBalancerZoneMappingInput

func (LoadBalancerZoneMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMapping)(nil)).Elem()
}

func (i LoadBalancerZoneMappingArray) ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput {
	return i.ToLoadBalancerZoneMappingArrayOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingArray) ToLoadBalancerZoneMappingArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingArrayOutput)
}

type LoadBalancerZoneMappingOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMapping)(nil)).Elem()
}

func (o LoadBalancerZoneMappingOutput) ToLoadBalancerZoneMappingOutput() LoadBalancerZoneMappingOutput {
	return o
}

func (o LoadBalancerZoneMappingOutput) ToLoadBalancerZoneMappingOutputWithContext(ctx context.Context) LoadBalancerZoneMappingOutput {
	return o
}

// The addresses of the Gateway Load Balancer instance.
func (o LoadBalancerZoneMappingOutput) LoadBalancerAddresses() LoadBalancerZoneMappingLoadBalancerAddressArrayOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) []LoadBalancerZoneMappingLoadBalancerAddress {
		return v.LoadBalancerAddresses
	}).(LoadBalancerZoneMappingLoadBalancerAddressArrayOutput)
}

// The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
func (o LoadBalancerZoneMappingOutput) VswitchId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) string { return v.VswitchId }).(pulumi.StringOutput)
}

// The ID of the zone to which the Gateway Load Balancer instance belongs.
func (o LoadBalancerZoneMappingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerZoneMapping) string { return v.ZoneId }).(pulumi.StringOutput)
}

type LoadBalancerZoneMappingArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMapping)(nil)).Elem()
}

func (o LoadBalancerZoneMappingArrayOutput) ToLoadBalancerZoneMappingArrayOutput() LoadBalancerZoneMappingArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingArrayOutput) ToLoadBalancerZoneMappingArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingArrayOutput) Index(i pulumi.IntInput) LoadBalancerZoneMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerZoneMapping {
		return vs[0].([]LoadBalancerZoneMapping)[vs[1].(int)]
	}).(LoadBalancerZoneMappingOutput)
}

type LoadBalancerZoneMappingLoadBalancerAddress struct {
	// The ID of the ENI.
	EniId *string `pulumi:"eniId"`
	// IPv4 private network address.
	PrivateIpv4Address *string `pulumi:"privateIpv4Address"`
}

// LoadBalancerZoneMappingLoadBalancerAddressInput is an input type that accepts LoadBalancerZoneMappingLoadBalancerAddressArgs and LoadBalancerZoneMappingLoadBalancerAddressOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingLoadBalancerAddressInput` via:
//
//	LoadBalancerZoneMappingLoadBalancerAddressArgs{...}
type LoadBalancerZoneMappingLoadBalancerAddressInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingLoadBalancerAddressOutput() LoadBalancerZoneMappingLoadBalancerAddressOutput
	ToLoadBalancerZoneMappingLoadBalancerAddressOutputWithContext(context.Context) LoadBalancerZoneMappingLoadBalancerAddressOutput
}

type LoadBalancerZoneMappingLoadBalancerAddressArgs struct {
	// The ID of the ENI.
	EniId pulumi.StringPtrInput `pulumi:"eniId"`
	// IPv4 private network address.
	PrivateIpv4Address pulumi.StringPtrInput `pulumi:"privateIpv4Address"`
}

func (LoadBalancerZoneMappingLoadBalancerAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMappingLoadBalancerAddress)(nil)).Elem()
}

func (i LoadBalancerZoneMappingLoadBalancerAddressArgs) ToLoadBalancerZoneMappingLoadBalancerAddressOutput() LoadBalancerZoneMappingLoadBalancerAddressOutput {
	return i.ToLoadBalancerZoneMappingLoadBalancerAddressOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingLoadBalancerAddressArgs) ToLoadBalancerZoneMappingLoadBalancerAddressOutputWithContext(ctx context.Context) LoadBalancerZoneMappingLoadBalancerAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingLoadBalancerAddressOutput)
}

// LoadBalancerZoneMappingLoadBalancerAddressArrayInput is an input type that accepts LoadBalancerZoneMappingLoadBalancerAddressArray and LoadBalancerZoneMappingLoadBalancerAddressArrayOutput values.
// You can construct a concrete instance of `LoadBalancerZoneMappingLoadBalancerAddressArrayInput` via:
//
//	LoadBalancerZoneMappingLoadBalancerAddressArray{ LoadBalancerZoneMappingLoadBalancerAddressArgs{...} }
type LoadBalancerZoneMappingLoadBalancerAddressArrayInput interface {
	pulumi.Input

	ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutput() LoadBalancerZoneMappingLoadBalancerAddressArrayOutput
	ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutputWithContext(context.Context) LoadBalancerZoneMappingLoadBalancerAddressArrayOutput
}

type LoadBalancerZoneMappingLoadBalancerAddressArray []LoadBalancerZoneMappingLoadBalancerAddressInput

func (LoadBalancerZoneMappingLoadBalancerAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMappingLoadBalancerAddress)(nil)).Elem()
}

func (i LoadBalancerZoneMappingLoadBalancerAddressArray) ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutput() LoadBalancerZoneMappingLoadBalancerAddressArrayOutput {
	return i.ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutputWithContext(context.Background())
}

func (i LoadBalancerZoneMappingLoadBalancerAddressArray) ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingLoadBalancerAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerZoneMappingLoadBalancerAddressArrayOutput)
}

type LoadBalancerZoneMappingLoadBalancerAddressOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingLoadBalancerAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerZoneMappingLoadBalancerAddress)(nil)).Elem()
}

func (o LoadBalancerZoneMappingLoadBalancerAddressOutput) ToLoadBalancerZoneMappingLoadBalancerAddressOutput() LoadBalancerZoneMappingLoadBalancerAddressOutput {
	return o
}

func (o LoadBalancerZoneMappingLoadBalancerAddressOutput) ToLoadBalancerZoneMappingLoadBalancerAddressOutputWithContext(ctx context.Context) LoadBalancerZoneMappingLoadBalancerAddressOutput {
	return o
}

// The ID of the ENI.
func (o LoadBalancerZoneMappingLoadBalancerAddressOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMappingLoadBalancerAddress) *string { return v.EniId }).(pulumi.StringPtrOutput)
}

// IPv4 private network address.
func (o LoadBalancerZoneMappingLoadBalancerAddressOutput) PrivateIpv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerZoneMappingLoadBalancerAddress) *string { return v.PrivateIpv4Address }).(pulumi.StringPtrOutput)
}

type LoadBalancerZoneMappingLoadBalancerAddressArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerZoneMappingLoadBalancerAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerZoneMappingLoadBalancerAddress)(nil)).Elem()
}

func (o LoadBalancerZoneMappingLoadBalancerAddressArrayOutput) ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutput() LoadBalancerZoneMappingLoadBalancerAddressArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingLoadBalancerAddressArrayOutput) ToLoadBalancerZoneMappingLoadBalancerAddressArrayOutputWithContext(ctx context.Context) LoadBalancerZoneMappingLoadBalancerAddressArrayOutput {
	return o
}

func (o LoadBalancerZoneMappingLoadBalancerAddressArrayOutput) Index(i pulumi.IntInput) LoadBalancerZoneMappingLoadBalancerAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerZoneMappingLoadBalancerAddress {
		return vs[0].([]LoadBalancerZoneMappingLoadBalancerAddress)[vs[1].(int)]
	}).(LoadBalancerZoneMappingLoadBalancerAddressOutput)
}

type ServerGroupConnectionDrainConfig struct {
	// Whether to open the connection graceful interrupt. Value:
	ConnectionDrainEnabled *bool `pulumi:"connectionDrainEnabled"`
	// Connection Grace interrupt timeout.
	//
	// Unit: seconds.
	//
	// Value range: 1~3600.
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
}

// ServerGroupConnectionDrainConfigInput is an input type that accepts ServerGroupConnectionDrainConfigArgs and ServerGroupConnectionDrainConfigOutput values.
// You can construct a concrete instance of `ServerGroupConnectionDrainConfigInput` via:
//
//	ServerGroupConnectionDrainConfigArgs{...}
type ServerGroupConnectionDrainConfigInput interface {
	pulumi.Input

	ToServerGroupConnectionDrainConfigOutput() ServerGroupConnectionDrainConfigOutput
	ToServerGroupConnectionDrainConfigOutputWithContext(context.Context) ServerGroupConnectionDrainConfigOutput
}

type ServerGroupConnectionDrainConfigArgs struct {
	// Whether to open the connection graceful interrupt. Value:
	ConnectionDrainEnabled pulumi.BoolPtrInput `pulumi:"connectionDrainEnabled"`
	// Connection Grace interrupt timeout.
	//
	// Unit: seconds.
	//
	// Value range: 1~3600.
	ConnectionDrainTimeout pulumi.IntPtrInput `pulumi:"connectionDrainTimeout"`
}

func (ServerGroupConnectionDrainConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupConnectionDrainConfig)(nil)).Elem()
}

func (i ServerGroupConnectionDrainConfigArgs) ToServerGroupConnectionDrainConfigOutput() ServerGroupConnectionDrainConfigOutput {
	return i.ToServerGroupConnectionDrainConfigOutputWithContext(context.Background())
}

func (i ServerGroupConnectionDrainConfigArgs) ToServerGroupConnectionDrainConfigOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupConnectionDrainConfigOutput)
}

func (i ServerGroupConnectionDrainConfigArgs) ToServerGroupConnectionDrainConfigPtrOutput() ServerGroupConnectionDrainConfigPtrOutput {
	return i.ToServerGroupConnectionDrainConfigPtrOutputWithContext(context.Background())
}

func (i ServerGroupConnectionDrainConfigArgs) ToServerGroupConnectionDrainConfigPtrOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupConnectionDrainConfigOutput).ToServerGroupConnectionDrainConfigPtrOutputWithContext(ctx)
}

// ServerGroupConnectionDrainConfigPtrInput is an input type that accepts ServerGroupConnectionDrainConfigArgs, ServerGroupConnectionDrainConfigPtr and ServerGroupConnectionDrainConfigPtrOutput values.
// You can construct a concrete instance of `ServerGroupConnectionDrainConfigPtrInput` via:
//
//	        ServerGroupConnectionDrainConfigArgs{...}
//
//	or:
//
//	        nil
type ServerGroupConnectionDrainConfigPtrInput interface {
	pulumi.Input

	ToServerGroupConnectionDrainConfigPtrOutput() ServerGroupConnectionDrainConfigPtrOutput
	ToServerGroupConnectionDrainConfigPtrOutputWithContext(context.Context) ServerGroupConnectionDrainConfigPtrOutput
}

type serverGroupConnectionDrainConfigPtrType ServerGroupConnectionDrainConfigArgs

func ServerGroupConnectionDrainConfigPtr(v *ServerGroupConnectionDrainConfigArgs) ServerGroupConnectionDrainConfigPtrInput {
	return (*serverGroupConnectionDrainConfigPtrType)(v)
}

func (*serverGroupConnectionDrainConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupConnectionDrainConfig)(nil)).Elem()
}

func (i *serverGroupConnectionDrainConfigPtrType) ToServerGroupConnectionDrainConfigPtrOutput() ServerGroupConnectionDrainConfigPtrOutput {
	return i.ToServerGroupConnectionDrainConfigPtrOutputWithContext(context.Background())
}

func (i *serverGroupConnectionDrainConfigPtrType) ToServerGroupConnectionDrainConfigPtrOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupConnectionDrainConfigPtrOutput)
}

type ServerGroupConnectionDrainConfigOutput struct{ *pulumi.OutputState }

func (ServerGroupConnectionDrainConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupConnectionDrainConfig)(nil)).Elem()
}

func (o ServerGroupConnectionDrainConfigOutput) ToServerGroupConnectionDrainConfigOutput() ServerGroupConnectionDrainConfigOutput {
	return o
}

func (o ServerGroupConnectionDrainConfigOutput) ToServerGroupConnectionDrainConfigOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigOutput {
	return o
}

func (o ServerGroupConnectionDrainConfigOutput) ToServerGroupConnectionDrainConfigPtrOutput() ServerGroupConnectionDrainConfigPtrOutput {
	return o.ToServerGroupConnectionDrainConfigPtrOutputWithContext(context.Background())
}

func (o ServerGroupConnectionDrainConfigOutput) ToServerGroupConnectionDrainConfigPtrOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerGroupConnectionDrainConfig) *ServerGroupConnectionDrainConfig {
		return &v
	}).(ServerGroupConnectionDrainConfigPtrOutput)
}

// Whether to open the connection graceful interrupt. Value:
func (o ServerGroupConnectionDrainConfigOutput) ConnectionDrainEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerGroupConnectionDrainConfig) *bool { return v.ConnectionDrainEnabled }).(pulumi.BoolPtrOutput)
}

// Connection Grace interrupt timeout.
//
// Unit: seconds.
//
// Value range: 1~3600.
func (o ServerGroupConnectionDrainConfigOutput) ConnectionDrainTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupConnectionDrainConfig) *int { return v.ConnectionDrainTimeout }).(pulumi.IntPtrOutput)
}

type ServerGroupConnectionDrainConfigPtrOutput struct{ *pulumi.OutputState }

func (ServerGroupConnectionDrainConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupConnectionDrainConfig)(nil)).Elem()
}

func (o ServerGroupConnectionDrainConfigPtrOutput) ToServerGroupConnectionDrainConfigPtrOutput() ServerGroupConnectionDrainConfigPtrOutput {
	return o
}

func (o ServerGroupConnectionDrainConfigPtrOutput) ToServerGroupConnectionDrainConfigPtrOutputWithContext(ctx context.Context) ServerGroupConnectionDrainConfigPtrOutput {
	return o
}

func (o ServerGroupConnectionDrainConfigPtrOutput) Elem() ServerGroupConnectionDrainConfigOutput {
	return o.ApplyT(func(v *ServerGroupConnectionDrainConfig) ServerGroupConnectionDrainConfig {
		if v != nil {
			return *v
		}
		var ret ServerGroupConnectionDrainConfig
		return ret
	}).(ServerGroupConnectionDrainConfigOutput)
}

// Whether to open the connection graceful interrupt. Value:
func (o ServerGroupConnectionDrainConfigPtrOutput) ConnectionDrainEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupConnectionDrainConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectionDrainEnabled
	}).(pulumi.BoolPtrOutput)
}

// Connection Grace interrupt timeout.
//
// Unit: seconds.
//
// Value range: 1~3600.
func (o ServerGroupConnectionDrainConfigPtrOutput) ConnectionDrainTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupConnectionDrainConfig) *int {
		if v == nil {
			return nil
		}
		return v.ConnectionDrainTimeout
	}).(pulumi.IntPtrOutput)
}

type ServerGroupHealthCheckConfig struct {
	// The port of the backend server used for health check.
	//
	// Value range: **1 to 65535**.
	//
	// Default value: `80`.
	HealthCheckConnectPort *int `pulumi:"healthCheckConnectPort"`
	// The maximum timeout period for health check responses.
	//
	// Unit: seconds.
	//
	// Value range: **1 to 300**.
	//
	// Default value: `5`.
	HealthCheckConnectTimeout *int `pulumi:"healthCheckConnectTimeout"`
	// The domain name used for health checks. Value:
	// - **$SERVER_IP (default)**: Use the internal IP address of the backend server.
	HealthCheckDomain *string `pulumi:"healthCheckDomain"`
	// Whether to enable health check. Value:
	// - **true (default)**: enabled.
	HealthCheckEnabled *bool `pulumi:"healthCheckEnabled"`
	// Health status return code list.
	HealthCheckHttpCodes []string `pulumi:"healthCheckHttpCodes"`
	// The time interval of the health check.
	//
	// Unit: seconds.
	//
	// Value range: **1~50**.
	//
	// Default value: `10`.
	HealthCheckInterval *int `pulumi:"healthCheckInterval"`
	// Health check path.
	//
	// It can be 1 to 80 characters in length and can only use upper and lower case letters, digits, dashes (-), forward slashes (/), half-width periods (.), percent signs (%), and half-width question marks (?), Pound sign (#) and and(&) and extended character set_;~! ()*[]@$^: ',+ =
	//
	// Must start with a forward slash (/).
	//
	// > **NOTE:**  This parameter takes effect only when the HealthCheckProtocol is HTTP.
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// Health check protocol, value:
	// - `TCP` (default): Sends a SYN handshake packet to check whether the server port is alive.
	// - `HTTP`: Sends a GET request to simulate the access behavior of the browser to check whether the server application is healthy.
	HealthCheckProtocol *string `pulumi:"healthCheckProtocol"`
	// After the number of consecutive successful health checks, the health check status of the backend server is determined as successful from failed.
	//
	// Value range: **2 to 10**.
	//
	// Default value: `2`.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The number of consecutive failed health checks that determine the health check status of the backend server from success to failure.
	//
	// Value range: **2 to 10**.
	//
	// Default value: `2`.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// ServerGroupHealthCheckConfigInput is an input type that accepts ServerGroupHealthCheckConfigArgs and ServerGroupHealthCheckConfigOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckConfigInput` via:
//
//	ServerGroupHealthCheckConfigArgs{...}
type ServerGroupHealthCheckConfigInput interface {
	pulumi.Input

	ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput
	ToServerGroupHealthCheckConfigOutputWithContext(context.Context) ServerGroupHealthCheckConfigOutput
}

type ServerGroupHealthCheckConfigArgs struct {
	// The port of the backend server used for health check.
	//
	// Value range: **1 to 65535**.
	//
	// Default value: `80`.
	HealthCheckConnectPort pulumi.IntPtrInput `pulumi:"healthCheckConnectPort"`
	// The maximum timeout period for health check responses.
	//
	// Unit: seconds.
	//
	// Value range: **1 to 300**.
	//
	// Default value: `5`.
	HealthCheckConnectTimeout pulumi.IntPtrInput `pulumi:"healthCheckConnectTimeout"`
	// The domain name used for health checks. Value:
	// - **$SERVER_IP (default)**: Use the internal IP address of the backend server.
	HealthCheckDomain pulumi.StringPtrInput `pulumi:"healthCheckDomain"`
	// Whether to enable health check. Value:
	// - **true (default)**: enabled.
	HealthCheckEnabled pulumi.BoolPtrInput `pulumi:"healthCheckEnabled"`
	// Health status return code list.
	HealthCheckHttpCodes pulumi.StringArrayInput `pulumi:"healthCheckHttpCodes"`
	// The time interval of the health check.
	//
	// Unit: seconds.
	//
	// Value range: **1~50**.
	//
	// Default value: `10`.
	HealthCheckInterval pulumi.IntPtrInput `pulumi:"healthCheckInterval"`
	// Health check path.
	//
	// It can be 1 to 80 characters in length and can only use upper and lower case letters, digits, dashes (-), forward slashes (/), half-width periods (.), percent signs (%), and half-width question marks (?), Pound sign (#) and and(&) and extended character set_;~! ()*[]@$^: ',+ =
	//
	// Must start with a forward slash (/).
	//
	// > **NOTE:**  This parameter takes effect only when the HealthCheckProtocol is HTTP.
	HealthCheckPath pulumi.StringPtrInput `pulumi:"healthCheckPath"`
	// Health check protocol, value:
	// - `TCP` (default): Sends a SYN handshake packet to check whether the server port is alive.
	// - `HTTP`: Sends a GET request to simulate the access behavior of the browser to check whether the server application is healthy.
	HealthCheckProtocol pulumi.StringPtrInput `pulumi:"healthCheckProtocol"`
	// After the number of consecutive successful health checks, the health check status of the backend server is determined as successful from failed.
	//
	// Value range: **2 to 10**.
	//
	// Default value: `2`.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The number of consecutive failed health checks that determine the health check status of the backend server from success to failure.
	//
	// Value range: **2 to 10**.
	//
	// Default value: `2`.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (ServerGroupHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput {
	return i.ToServerGroupHealthCheckConfigOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigOutput)
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return i.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i ServerGroupHealthCheckConfigArgs) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigOutput).ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx)
}

// ServerGroupHealthCheckConfigPtrInput is an input type that accepts ServerGroupHealthCheckConfigArgs, ServerGroupHealthCheckConfigPtr and ServerGroupHealthCheckConfigPtrOutput values.
// You can construct a concrete instance of `ServerGroupHealthCheckConfigPtrInput` via:
//
//	        ServerGroupHealthCheckConfigArgs{...}
//
//	or:
//
//	        nil
type ServerGroupHealthCheckConfigPtrInput interface {
	pulumi.Input

	ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput
	ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Context) ServerGroupHealthCheckConfigPtrOutput
}

type serverGroupHealthCheckConfigPtrType ServerGroupHealthCheckConfigArgs

func ServerGroupHealthCheckConfigPtr(v *ServerGroupHealthCheckConfigArgs) ServerGroupHealthCheckConfigPtrInput {
	return (*serverGroupHealthCheckConfigPtrType)(v)
}

func (*serverGroupHealthCheckConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (i *serverGroupHealthCheckConfigPtrType) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return i.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i *serverGroupHealthCheckConfigPtrType) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupHealthCheckConfigPtrOutput)
}

type ServerGroupHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigOutput() ServerGroupHealthCheckConfigOutput {
	return o
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigOutput {
	return o
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return o.ToServerGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (o ServerGroupHealthCheckConfigOutput) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerGroupHealthCheckConfig) *ServerGroupHealthCheckConfig {
		return &v
	}).(ServerGroupHealthCheckConfigPtrOutput)
}

// The port of the backend server used for health check.
//
// Value range: **1 to 65535**.
//
// Default value: `80`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckConnectPort }).(pulumi.IntPtrOutput)
}

// The maximum timeout period for health check responses.
//
// Unit: seconds.
//
// Value range: **1 to 300**.
//
// Default value: `5`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckConnectTimeout }).(pulumi.IntPtrOutput)
}

// The domain name used for health checks. Value:
// - **$SERVER_IP (default)**: Use the internal IP address of the backend server.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckDomain }).(pulumi.StringPtrOutput)
}

// Whether to enable health check. Value:
// - **true (default)**: enabled.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *bool { return v.HealthCheckEnabled }).(pulumi.BoolPtrOutput)
}

// Health status return code list.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckHttpCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) []string { return v.HealthCheckHttpCodes }).(pulumi.StringArrayOutput)
}

// The time interval of the health check.
//
// Unit: seconds.
//
// Value range: **1~50**.
//
// Default value: `10`.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthCheckInterval }).(pulumi.IntPtrOutput)
}

// Health check path.
//
// It can be 1 to 80 characters in length and can only use upper and lower case letters, digits, dashes (-), forward slashes (/), half-width periods (.), percent signs (%), and half-width question marks (?), Pound sign (#) and and(&) and extended character set_;~! ()*[]@$^: ',+ =
//
// Must start with a forward slash (/).
//
// > **NOTE:**  This parameter takes effect only when the HealthCheckProtocol is HTTP.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

// Health check protocol, value:
// - `TCP` (default): Sends a SYN handshake packet to check whether the server port is alive.
// - `HTTP`: Sends a GET request to simulate the access behavior of the browser to check whether the server application is healthy.
func (o ServerGroupHealthCheckConfigOutput) HealthCheckProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *string { return v.HealthCheckProtocol }).(pulumi.StringPtrOutput)
}

// After the number of consecutive successful health checks, the health check status of the backend server is determined as successful from failed.
//
// Value range: **2 to 10**.
//
// Default value: `2`.
func (o ServerGroupHealthCheckConfigOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health checks that determine the health check status of the backend server from success to failure.
//
// Value range: **2 to 10**.
//
// Default value: `2`.
func (o ServerGroupHealthCheckConfigOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupHealthCheckConfig) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type ServerGroupHealthCheckConfigPtrOutput struct{ *pulumi.OutputState }

func (ServerGroupHealthCheckConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupHealthCheckConfig)(nil)).Elem()
}

func (o ServerGroupHealthCheckConfigPtrOutput) ToServerGroupHealthCheckConfigPtrOutput() ServerGroupHealthCheckConfigPtrOutput {
	return o
}

func (o ServerGroupHealthCheckConfigPtrOutput) ToServerGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) ServerGroupHealthCheckConfigPtrOutput {
	return o
}

func (o ServerGroupHealthCheckConfigPtrOutput) Elem() ServerGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) ServerGroupHealthCheckConfig {
		if v != nil {
			return *v
		}
		var ret ServerGroupHealthCheckConfig
		return ret
	}).(ServerGroupHealthCheckConfigOutput)
}

// The port of the backend server used for health check.
//
// Value range: **1 to 65535**.
//
// Default value: `80`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckConnectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckConnectPort
	}).(pulumi.IntPtrOutput)
}

// The maximum timeout period for health check responses.
//
// Unit: seconds.
//
// Value range: **1 to 300**.
//
// Default value: `5`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// The domain name used for health checks. Value:
// - **$SERVER_IP (default)**: Use the internal IP address of the backend server.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckDomain
	}).(pulumi.StringPtrOutput)
}

// Whether to enable health check. Value:
// - **true (default)**: enabled.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *bool {
		if v == nil {
			return nil
		}
		return v.HealthCheckEnabled
	}).(pulumi.BoolPtrOutput)
}

// Health status return code list.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckHttpCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) []string {
		if v == nil {
			return nil
		}
		return v.HealthCheckHttpCodes
	}).(pulumi.StringArrayOutput)
}

// The time interval of the health check.
//
// Unit: seconds.
//
// Value range: **1~50**.
//
// Default value: `10`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckInterval
	}).(pulumi.IntPtrOutput)
}

// Health check path.
//
// It can be 1 to 80 characters in length and can only use upper and lower case letters, digits, dashes (-), forward slashes (/), half-width periods (.), percent signs (%), and half-width question marks (?), Pound sign (#) and and(&) and extended character set_;~! ()*[]@$^: ',+ =
//
// Must start with a forward slash (/).
//
// > **NOTE:**  This parameter takes effect only when the HealthCheckProtocol is HTTP.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckPath
	}).(pulumi.StringPtrOutput)
}

// Health check protocol, value:
// - `TCP` (default): Sends a SYN handshake packet to check whether the server port is alive.
// - `HTTP`: Sends a GET request to simulate the access behavior of the browser to check whether the server application is healthy.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthCheckProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckProtocol
	}).(pulumi.StringPtrOutput)
}

// After the number of consecutive successful health checks, the health check status of the backend server is determined as successful from failed.
//
// Value range: **2 to 10**.
//
// Default value: `2`.
func (o ServerGroupHealthCheckConfigPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health checks that determine the health check status of the backend server from success to failure.
//
// Value range: **2 to 10**.
//
// Default value: `2`.
func (o ServerGroupHealthCheckConfigPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type ServerGroupServer struct {
	// The port used by the backend server.
	Port *int `pulumi:"port"`
	// The server group ID.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// The ID of the backend server.
	ServerId string `pulumi:"serverId"`
	// Server ip.
	ServerIp *string `pulumi:"serverIp"`
	// Backend server type. Valid values:
	// - `Ecs`: ECS instance.
	// - `Eni`: ENI instance.
	// - `Eci`: ECI elastic container.
	// - `Ip`: Ip address.
	ServerType string `pulumi:"serverType"`
	// Server group status. Value:
	Status *string `pulumi:"status"`
}

// ServerGroupServerInput is an input type that accepts ServerGroupServerArgs and ServerGroupServerOutput values.
// You can construct a concrete instance of `ServerGroupServerInput` via:
//
//	ServerGroupServerArgs{...}
type ServerGroupServerInput interface {
	pulumi.Input

	ToServerGroupServerOutput() ServerGroupServerOutput
	ToServerGroupServerOutputWithContext(context.Context) ServerGroupServerOutput
}

type ServerGroupServerArgs struct {
	// The port used by the backend server.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The server group ID.
	ServerGroupId pulumi.StringPtrInput `pulumi:"serverGroupId"`
	// The ID of the backend server.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// Server ip.
	ServerIp pulumi.StringPtrInput `pulumi:"serverIp"`
	// Backend server type. Valid values:
	// - `Ecs`: ECS instance.
	// - `Eni`: ENI instance.
	// - `Eci`: ECI elastic container.
	// - `Ip`: Ip address.
	ServerType pulumi.StringInput `pulumi:"serverType"`
	// Server group status. Value:
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArgs) ToServerGroupServerOutput() ServerGroupServerOutput {
	return i.ToServerGroupServerOutputWithContext(context.Background())
}

func (i ServerGroupServerArgs) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerOutput)
}

// ServerGroupServerArrayInput is an input type that accepts ServerGroupServerArray and ServerGroupServerArrayOutput values.
// You can construct a concrete instance of `ServerGroupServerArrayInput` via:
//
//	ServerGroupServerArray{ ServerGroupServerArgs{...} }
type ServerGroupServerArrayInput interface {
	pulumi.Input

	ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput
	ToServerGroupServerArrayOutputWithContext(context.Context) ServerGroupServerArrayOutput
}

type ServerGroupServerArray []ServerGroupServerInput

func (ServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return i.ToServerGroupServerArrayOutputWithContext(context.Background())
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerArrayOutput)
}

type ServerGroupServerOutput struct{ *pulumi.OutputState }

func (ServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerOutput) ToServerGroupServerOutput() ServerGroupServerOutput {
	return o
}

func (o ServerGroupServerOutput) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return o
}

// The port used by the backend server.
func (o ServerGroupServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The server group ID.
func (o ServerGroupServerOutput) ServerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.ServerGroupId }).(pulumi.StringPtrOutput)
}

// The ID of the backend server.
func (o ServerGroupServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// Server ip.
func (o ServerGroupServerOutput) ServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.ServerIp }).(pulumi.StringPtrOutput)
}

// Backend server type. Valid values:
// - `Ecs`: ECS instance.
// - `Eni`: ENI instance.
// - `Eci`: ECI elastic container.
// - `Ip`: Ip address.
func (o ServerGroupServerOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServer) string { return v.ServerType }).(pulumi.StringOutput)
}

// Server group status. Value:
func (o ServerGroupServerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) Index(i pulumi.IntInput) ServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupServer {
		return vs[0].([]ServerGroupServer)[vs[1].(int)]
	}).(ServerGroupServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingInput)(nil)).Elem(), LoadBalancerZoneMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingArrayInput)(nil)).Elem(), LoadBalancerZoneMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingLoadBalancerAddressInput)(nil)).Elem(), LoadBalancerZoneMappingLoadBalancerAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerZoneMappingLoadBalancerAddressArrayInput)(nil)).Elem(), LoadBalancerZoneMappingLoadBalancerAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupConnectionDrainConfigInput)(nil)).Elem(), ServerGroupConnectionDrainConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupConnectionDrainConfigPtrInput)(nil)).Elem(), ServerGroupConnectionDrainConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupHealthCheckConfigInput)(nil)).Elem(), ServerGroupHealthCheckConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupHealthCheckConfigPtrInput)(nil)).Elem(), ServerGroupHealthCheckConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServerInput)(nil)).Elem(), ServerGroupServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServerArrayInput)(nil)).Elem(), ServerGroupServerArray{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingOutput{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingLoadBalancerAddressOutput{})
	pulumi.RegisterOutputType(LoadBalancerZoneMappingLoadBalancerAddressArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupConnectionDrainConfigOutput{})
	pulumi.RegisterOutputType(ServerGroupConnectionDrainConfigPtrOutput{})
	pulumi.RegisterOutputType(ServerGroupHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(ServerGroupHealthCheckConfigPtrOutput{})
	pulumi.RegisterOutputType(ServerGroupServerOutput{})
	pulumi.RegisterOutputType(ServerGroupServerArrayOutput{})
}
