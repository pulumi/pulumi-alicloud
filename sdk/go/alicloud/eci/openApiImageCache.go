// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OpenApiImageCache struct {
	pulumi.CustomResourceState

	ContainerGroupId         pulumi.StringOutput                                 `pulumi:"containerGroupId"`
	EipInstanceId            pulumi.StringPtrOutput                              `pulumi:"eipInstanceId"`
	ImageCacheName           pulumi.StringOutput                                 `pulumi:"imageCacheName"`
	ImageCacheSize           pulumi.IntPtrOutput                                 `pulumi:"imageCacheSize"`
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayOutput `pulumi:"imageRegistryCredentials"`
	Images                   pulumi.StringArrayOutput                            `pulumi:"images"`
	ResourceGroupId          pulumi.StringPtrOutput                              `pulumi:"resourceGroupId"`
	RetentionDays            pulumi.IntPtrOutput                                 `pulumi:"retentionDays"`
	SecurityGroupId          pulumi.StringOutput                                 `pulumi:"securityGroupId"`
	Status                   pulumi.StringOutput                                 `pulumi:"status"`
	VswitchId                pulumi.StringOutput                                 `pulumi:"vswitchId"`
	ZoneId                   pulumi.StringPtrOutput                              `pulumi:"zoneId"`
}

// NewOpenApiImageCache registers a new resource with the given unique name, arguments, and options.
func NewOpenApiImageCache(ctx *pulumi.Context,
	name string, args *OpenApiImageCacheArgs, opts ...pulumi.ResourceOption) (*OpenApiImageCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageCacheName == nil {
		return nil, errors.New("invalid value for required argument 'ImageCacheName'")
	}
	if args.Images == nil {
		return nil, errors.New("invalid value for required argument 'Images'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.VswitchId == nil {
		return nil, errors.New("invalid value for required argument 'VswitchId'")
	}
	var resource OpenApiImageCache
	err := ctx.RegisterResource("alicloud:eci/openApiImageCache:OpenApiImageCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenApiImageCache gets an existing OpenApiImageCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenApiImageCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenApiImageCacheState, opts ...pulumi.ResourceOption) (*OpenApiImageCache, error) {
	var resource OpenApiImageCache
	err := ctx.ReadResource("alicloud:eci/openApiImageCache:OpenApiImageCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenApiImageCache resources.
type openApiImageCacheState struct {
	ContainerGroupId         *string                                    `pulumi:"containerGroupId"`
	EipInstanceId            *string                                    `pulumi:"eipInstanceId"`
	ImageCacheName           *string                                    `pulumi:"imageCacheName"`
	ImageCacheSize           *int                                       `pulumi:"imageCacheSize"`
	ImageRegistryCredentials []OpenApiImageCacheImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	Images                   []string                                   `pulumi:"images"`
	ResourceGroupId          *string                                    `pulumi:"resourceGroupId"`
	RetentionDays            *int                                       `pulumi:"retentionDays"`
	SecurityGroupId          *string                                    `pulumi:"securityGroupId"`
	Status                   *string                                    `pulumi:"status"`
	VswitchId                *string                                    `pulumi:"vswitchId"`
	ZoneId                   *string                                    `pulumi:"zoneId"`
}

type OpenApiImageCacheState struct {
	ContainerGroupId         pulumi.StringPtrInput
	EipInstanceId            pulumi.StringPtrInput
	ImageCacheName           pulumi.StringPtrInput
	ImageCacheSize           pulumi.IntPtrInput
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayInput
	Images                   pulumi.StringArrayInput
	ResourceGroupId          pulumi.StringPtrInput
	RetentionDays            pulumi.IntPtrInput
	SecurityGroupId          pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
	VswitchId                pulumi.StringPtrInput
	ZoneId                   pulumi.StringPtrInput
}

func (OpenApiImageCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*openApiImageCacheState)(nil)).Elem()
}

type openApiImageCacheArgs struct {
	EipInstanceId            *string                                    `pulumi:"eipInstanceId"`
	ImageCacheName           string                                     `pulumi:"imageCacheName"`
	ImageCacheSize           *int                                       `pulumi:"imageCacheSize"`
	ImageRegistryCredentials []OpenApiImageCacheImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	Images                   []string                                   `pulumi:"images"`
	ResourceGroupId          *string                                    `pulumi:"resourceGroupId"`
	RetentionDays            *int                                       `pulumi:"retentionDays"`
	SecurityGroupId          string                                     `pulumi:"securityGroupId"`
	VswitchId                string                                     `pulumi:"vswitchId"`
	ZoneId                   *string                                    `pulumi:"zoneId"`
}

// The set of arguments for constructing a OpenApiImageCache resource.
type OpenApiImageCacheArgs struct {
	EipInstanceId            pulumi.StringPtrInput
	ImageCacheName           pulumi.StringInput
	ImageCacheSize           pulumi.IntPtrInput
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayInput
	Images                   pulumi.StringArrayInput
	ResourceGroupId          pulumi.StringPtrInput
	RetentionDays            pulumi.IntPtrInput
	SecurityGroupId          pulumi.StringInput
	VswitchId                pulumi.StringInput
	ZoneId                   pulumi.StringPtrInput
}

func (OpenApiImageCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openApiImageCacheArgs)(nil)).Elem()
}

type OpenApiImageCacheInput interface {
	pulumi.Input

	ToOpenApiImageCacheOutput() OpenApiImageCacheOutput
	ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput
}

func (*OpenApiImageCache) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenApiImageCache)(nil)).Elem()
}

func (i *OpenApiImageCache) ToOpenApiImageCacheOutput() OpenApiImageCacheOutput {
	return i.ToOpenApiImageCacheOutputWithContext(context.Background())
}

func (i *OpenApiImageCache) ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheOutput)
}

// OpenApiImageCacheArrayInput is an input type that accepts OpenApiImageCacheArray and OpenApiImageCacheArrayOutput values.
// You can construct a concrete instance of `OpenApiImageCacheArrayInput` via:
//
//          OpenApiImageCacheArray{ OpenApiImageCacheArgs{...} }
type OpenApiImageCacheArrayInput interface {
	pulumi.Input

	ToOpenApiImageCacheArrayOutput() OpenApiImageCacheArrayOutput
	ToOpenApiImageCacheArrayOutputWithContext(context.Context) OpenApiImageCacheArrayOutput
}

type OpenApiImageCacheArray []OpenApiImageCacheInput

func (OpenApiImageCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenApiImageCache)(nil)).Elem()
}

func (i OpenApiImageCacheArray) ToOpenApiImageCacheArrayOutput() OpenApiImageCacheArrayOutput {
	return i.ToOpenApiImageCacheArrayOutputWithContext(context.Background())
}

func (i OpenApiImageCacheArray) ToOpenApiImageCacheArrayOutputWithContext(ctx context.Context) OpenApiImageCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheArrayOutput)
}

// OpenApiImageCacheMapInput is an input type that accepts OpenApiImageCacheMap and OpenApiImageCacheMapOutput values.
// You can construct a concrete instance of `OpenApiImageCacheMapInput` via:
//
//          OpenApiImageCacheMap{ "key": OpenApiImageCacheArgs{...} }
type OpenApiImageCacheMapInput interface {
	pulumi.Input

	ToOpenApiImageCacheMapOutput() OpenApiImageCacheMapOutput
	ToOpenApiImageCacheMapOutputWithContext(context.Context) OpenApiImageCacheMapOutput
}

type OpenApiImageCacheMap map[string]OpenApiImageCacheInput

func (OpenApiImageCacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenApiImageCache)(nil)).Elem()
}

func (i OpenApiImageCacheMap) ToOpenApiImageCacheMapOutput() OpenApiImageCacheMapOutput {
	return i.ToOpenApiImageCacheMapOutputWithContext(context.Background())
}

func (i OpenApiImageCacheMap) ToOpenApiImageCacheMapOutputWithContext(ctx context.Context) OpenApiImageCacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheMapOutput)
}

type OpenApiImageCacheOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenApiImageCache)(nil)).Elem()
}

func (o OpenApiImageCacheOutput) ToOpenApiImageCacheOutput() OpenApiImageCacheOutput {
	return o
}

func (o OpenApiImageCacheOutput) ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput {
	return o
}

type OpenApiImageCacheArrayOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenApiImageCache)(nil)).Elem()
}

func (o OpenApiImageCacheArrayOutput) ToOpenApiImageCacheArrayOutput() OpenApiImageCacheArrayOutput {
	return o
}

func (o OpenApiImageCacheArrayOutput) ToOpenApiImageCacheArrayOutputWithContext(ctx context.Context) OpenApiImageCacheArrayOutput {
	return o
}

func (o OpenApiImageCacheArrayOutput) Index(i pulumi.IntInput) OpenApiImageCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenApiImageCache {
		return vs[0].([]*OpenApiImageCache)[vs[1].(int)]
	}).(OpenApiImageCacheOutput)
}

type OpenApiImageCacheMapOutput struct{ *pulumi.OutputState }

func (OpenApiImageCacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenApiImageCache)(nil)).Elem()
}

func (o OpenApiImageCacheMapOutput) ToOpenApiImageCacheMapOutput() OpenApiImageCacheMapOutput {
	return o
}

func (o OpenApiImageCacheMapOutput) ToOpenApiImageCacheMapOutputWithContext(ctx context.Context) OpenApiImageCacheMapOutput {
	return o
}

func (o OpenApiImageCacheMapOutput) MapIndex(k pulumi.StringInput) OpenApiImageCacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenApiImageCache {
		return vs[0].(map[string]*OpenApiImageCache)[vs[1].(string)]
	}).(OpenApiImageCacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenApiImageCacheInput)(nil)).Elem(), &OpenApiImageCache{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenApiImageCacheArrayInput)(nil)).Elem(), OpenApiImageCacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenApiImageCacheMapInput)(nil)).Elem(), OpenApiImageCacheMap{})
	pulumi.RegisterOutputType(OpenApiImageCacheOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheArrayOutput{})
	pulumi.RegisterOutputType(OpenApiImageCacheMapOutput{})
}
