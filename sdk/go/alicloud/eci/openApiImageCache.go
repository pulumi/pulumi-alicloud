// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type OpenApiImageCache struct {
	pulumi.CustomResourceState

	ContainerGroupId         pulumi.StringOutput                                 `pulumi:"containerGroupId"`
	EipInstanceId            pulumi.StringPtrOutput                              `pulumi:"eipInstanceId"`
	ImageCacheName           pulumi.StringOutput                                 `pulumi:"imageCacheName"`
	ImageCacheSize           pulumi.IntPtrOutput                                 `pulumi:"imageCacheSize"`
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayOutput `pulumi:"imageRegistryCredentials"`
	Images                   pulumi.StringArrayOutput                            `pulumi:"images"`
	ResourceGroupId          pulumi.StringPtrOutput                              `pulumi:"resourceGroupId"`
	RetentionDays            pulumi.IntPtrOutput                                 `pulumi:"retentionDays"`
	SecurityGroupId          pulumi.StringOutput                                 `pulumi:"securityGroupId"`
	Status                   pulumi.StringOutput                                 `pulumi:"status"`
	VswitchId                pulumi.StringOutput                                 `pulumi:"vswitchId"`
	ZoneId                   pulumi.StringPtrOutput                              `pulumi:"zoneId"`
}

// NewOpenApiImageCache registers a new resource with the given unique name, arguments, and options.
func NewOpenApiImageCache(ctx *pulumi.Context,
	name string, args *OpenApiImageCacheArgs, opts ...pulumi.ResourceOption) (*OpenApiImageCache, error) {
	if args == nil || args.ImageCacheName == nil {
		return nil, errors.New("missing required argument 'ImageCacheName'")
	}
	if args == nil || args.Images == nil {
		return nil, errors.New("missing required argument 'Images'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	if args == nil || args.VswitchId == nil {
		return nil, errors.New("missing required argument 'VswitchId'")
	}
	if args == nil {
		args = &OpenApiImageCacheArgs{}
	}
	var resource OpenApiImageCache
	err := ctx.RegisterResource("alicloud:eci/openApiImageCache:OpenApiImageCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenApiImageCache gets an existing OpenApiImageCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenApiImageCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenApiImageCacheState, opts ...pulumi.ResourceOption) (*OpenApiImageCache, error) {
	var resource OpenApiImageCache
	err := ctx.ReadResource("alicloud:eci/openApiImageCache:OpenApiImageCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenApiImageCache resources.
type openApiImageCacheState struct {
	ContainerGroupId         *string                                    `pulumi:"containerGroupId"`
	EipInstanceId            *string                                    `pulumi:"eipInstanceId"`
	ImageCacheName           *string                                    `pulumi:"imageCacheName"`
	ImageCacheSize           *int                                       `pulumi:"imageCacheSize"`
	ImageRegistryCredentials []OpenApiImageCacheImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	Images                   []string                                   `pulumi:"images"`
	ResourceGroupId          *string                                    `pulumi:"resourceGroupId"`
	RetentionDays            *int                                       `pulumi:"retentionDays"`
	SecurityGroupId          *string                                    `pulumi:"securityGroupId"`
	Status                   *string                                    `pulumi:"status"`
	VswitchId                *string                                    `pulumi:"vswitchId"`
	ZoneId                   *string                                    `pulumi:"zoneId"`
}

type OpenApiImageCacheState struct {
	ContainerGroupId         pulumi.StringPtrInput
	EipInstanceId            pulumi.StringPtrInput
	ImageCacheName           pulumi.StringPtrInput
	ImageCacheSize           pulumi.IntPtrInput
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayInput
	Images                   pulumi.StringArrayInput
	ResourceGroupId          pulumi.StringPtrInput
	RetentionDays            pulumi.IntPtrInput
	SecurityGroupId          pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
	VswitchId                pulumi.StringPtrInput
	ZoneId                   pulumi.StringPtrInput
}

func (OpenApiImageCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*openApiImageCacheState)(nil)).Elem()
}

type openApiImageCacheArgs struct {
	EipInstanceId            *string                                    `pulumi:"eipInstanceId"`
	ImageCacheName           string                                     `pulumi:"imageCacheName"`
	ImageCacheSize           *int                                       `pulumi:"imageCacheSize"`
	ImageRegistryCredentials []OpenApiImageCacheImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	Images                   []string                                   `pulumi:"images"`
	ResourceGroupId          *string                                    `pulumi:"resourceGroupId"`
	RetentionDays            *int                                       `pulumi:"retentionDays"`
	SecurityGroupId          string                                     `pulumi:"securityGroupId"`
	VswitchId                string                                     `pulumi:"vswitchId"`
	ZoneId                   *string                                    `pulumi:"zoneId"`
}

// The set of arguments for constructing a OpenApiImageCache resource.
type OpenApiImageCacheArgs struct {
	EipInstanceId            pulumi.StringPtrInput
	ImageCacheName           pulumi.StringInput
	ImageCacheSize           pulumi.IntPtrInput
	ImageRegistryCredentials OpenApiImageCacheImageRegistryCredentialArrayInput
	Images                   pulumi.StringArrayInput
	ResourceGroupId          pulumi.StringPtrInput
	RetentionDays            pulumi.IntPtrInput
	SecurityGroupId          pulumi.StringInput
	VswitchId                pulumi.StringInput
	ZoneId                   pulumi.StringPtrInput
}

func (OpenApiImageCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openApiImageCacheArgs)(nil)).Elem()
}

type OpenApiImageCacheInput interface {
	pulumi.Input

	ToOpenApiImageCacheOutput() OpenApiImageCacheOutput
	ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput
}

func (OpenApiImageCache) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCache)(nil)).Elem()
}

func (i OpenApiImageCache) ToOpenApiImageCacheOutput() OpenApiImageCacheOutput {
	return i.ToOpenApiImageCacheOutputWithContext(context.Background())
}

func (i OpenApiImageCache) ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenApiImageCacheOutput)
}

type OpenApiImageCacheOutput struct {
	*pulumi.OutputState
}

func (OpenApiImageCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenApiImageCacheOutput)(nil)).Elem()
}

func (o OpenApiImageCacheOutput) ToOpenApiImageCacheOutput() OpenApiImageCacheOutput {
	return o
}

func (o OpenApiImageCacheOutput) ToOpenApiImageCacheOutputWithContext(ctx context.Context) OpenApiImageCacheOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OpenApiImageCacheOutput{})
}
